
/home/joel/Capstone/uwb-apps/bin/targets/twr_tag/app/apps/twr_aloha/twr_aloha.elf:     file format elf32-littlearm
/home/joel/Capstone/uwb-apps/bin/targets/twr_tag/app/apps/twr_aloha/twr_aloha.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x00023de0 vaddr 0x00023de0 paddr 0x00023de0 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00023df8 memsz 0x00023df8 flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x00023df8 align 2**16
         filesz 0x00002f88 memsz 0x00006b50 flags rw-
    LOAD off    0x00000000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
private flags = 0x5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              0001bdc0  00008020  00008020  00008020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00023de0  00023de0  00033060  2**0  CONTENTS
  3 .ARM.exidx         00000018  00023de0  00023de0  00023de0  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00033060  2**0  CONTENTS
  6 .data              00002f88  200000d8  00023df8  000300d8  2**3  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20003060  20003060  00033060  2**0  CONTENTS
  8 .bss               00003bc8  20003060  00026d80  00033060  2**3  ALLOC
  9 .stack_dummy       000001b0  20006c28  20006c28  00033060  2**3  CONTENTS, READONLY
 10 .ARM.attributes    00000030  00000000  00000000  00033210  2**0  CONTENTS, READONLY
 11 .comment           00000033  00000000  00000000  00033240  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  00033273  2**0  CONTENTS, READONLY
 13 .debug_line        0003bbf3  00000000  00000000  00033277  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info        0009ea61  00000000  00000000  0006ee6a  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev      00018714  00000000  00000000  0010d8cb  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges     00003a58  00000000  00000000  00125fe0  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str         00011506  00000000  00000000  00129a38  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc         00040ceb  00000000  00000000  0013af3e  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges      00003dc0  00000000  00000000  0017bc29  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame       00009c0c  00000000  00000000  0017f9ec  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
00023de0 l    d  .ARM.extab	00000000 .ARM.extab
00023de0 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20003060 l    d  .bssnz	00000000 .bssnz
20003060 l    d  .bss	00000000 .bss
20006c28 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
00008248 l     F .text	0000003a errata_16
00008282 l     F .text	0000004a errata_31
000082cc l     F .text	0000003a errata_32
00008306 l     F .text	0000004a errata_36
00008350 l     F .text	0000003a errata_37
0000838a l     F .text	0000003a errata_57
000083c4 l     F .text	0000003a errata_66
000083fe l     F .text	0000004a errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
000086a4 l     F .text	00000028 rx_timeout_cb
000086cc l     F .text	00000038 slot_complete_cb
00008704 l     F .text	00000098 uwb_ev_cb
0000879c l     F .text	00000040 complete_cb
20003060 l     O .bss	00000002 g_idx_latest
20003064 l     O .bss	00000004 last_used_mode.0
20003068 l     O .bss	00000010 slot_event
20003078 l     O .bss	00000020 tx_callout
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 uwb.c
000089f0 l     F .text	0000000e uwb_interrupt_task
00000000 l    df *ABS*	00000000 hal_gpio.c
00008cb8 l     F .text	00000050 hal_gpio_irq_handler
00008d08 l     F .text	0000002c hal_gpio_irq_setup
00008d34 l     F .text	0000001c hal_gpio_find_empty_slot
00008d50 l     F .text	00000038 hal_gpio_find_pin
20003098 l     O .bss	00000040 hal_gpio_irqs
200030d8 l     O .bss	00000001 irq_setup.0
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
000090b0 l     F .text	00000016 os_main
20003238 l     O .bss	00001000 g_os_main_stack
20003130 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
000093d8 l     F .text	0000005c os_dev_add
00009434 l     F .text	00000022 os_dev_initialize
00009456 l     F .text	00000030 os_dev_init
20004294 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
2000429c l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
00009704 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00009850 l     F .text	00000010 os_msys_find_biggest_pool
00009860 l     F .text	0000002c os_msys_find_pool
000098d8 l     F .text	00000044 os_msys_init_once
200042b4 l     O .bss	00000db0 os_msys_1_data
20005064 l     O .bss	0000000c os_msys_1_mbuf_pool
20005070 l     O .bss	0000001c os_msys_1_mempool
200000e8 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_sanity.c
00009984 l     F .text	00000020 os_sanity_check_list_lock
000099a4 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00009e90 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0000a04c l     F .text	00000054 os_deltatime
0000a0a0 l     F .text	00000020 os_time_change_notify
0000a0c0 l     F .text	0000005c os_time_tick
0000a1e4 l     F .text	00000048 os_time_populate_info
200050b0 l     O .bss	00000030 basetod
20000100 l     O .data	00000008 os_time_change_listeners
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0000ab38 l       .text	00000000 SVC_User
0000ab56 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 uwb_rng.c
0000abe0 l     F .text	00000044 reset_cb
0000ac24 l     F .text	0000004a rx_timeout_cb
0000ac70 l     F .text	00000054 superframe_reset_cb
0000acc4 l     F .text	00000026 complete_ev_cb
0000acec l     F .text	00000130 complete_cb
0000b080 l     F .text	000000ea rx_complete_cb
0000b550 l     F .text	00000138 tx_final_cb
0000b6a8 l     F .text	00000062 tx_complete_cb
200050e8 l     O .bss	000003c0 g_twr_frames
20000108 l     O .data	0000003c g_cbs
20000144 l     O .data	00000010 g_config
00000000 l    df *ABS*	00000000 rng_encode.c
00000000 l    df *ABS*	00000000 rng_json.c
0000b98c l     F .text	00000042 rng_write_line
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 malloc.c
0000be90 l     F .text	00000004 malloc_lock_nop
0000be94 l     F .text	00000002 malloc_unlock_nop
0000be96 l     F .text	00000048 __malloc_from_block
0000bee0 l     F .text	00000064 __free_block
20000154 l     O .data	00000018 __malloc_head
2000016c l     O .data	00000004 malloc_lock
20000170 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 memcmp.c
0000c044 l       .text	00000000 test1
0000c038 l       .text	00000000 loop1
0000c04a l       .text	00000000 res1
0000c066 l       .text	00000000 test2
0000c06e l       .text	00000000 done
0000c05a l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0000c07a l       .text	00000000 test1
0000c076 l       .text	00000000 loop1
0000c088 l       .text	00000000 test2
0000c084 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mynewt.c
0000c0d0 l     F .text	00000004 stdin_read
0000c0d4 l     F .text	00000010 stdout_write
20000174 l     O .data	00000004 _stdin
20000178 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0000c12a l     F .text	000000ce ui2a
0000c1f8 l     F .text	0000001c i2a
0000c214 l     F .text	00000030 a2d
0000c244 l     F .text	0000003c a2i
0000c280 l     F .text	00000024 putf
0000c2a4 l     F .text	00000124 putchw
0000c3c8 l     F .text	00000068 intarg
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 dpl_cputime.c
00000000 l    df *ABS*	00000000 dpl_mem.c
00000000 l    df *ABS*	00000000 dpl_mempool.c
00000000 l    df *ABS*	00000000 dpl_mbuf.c
00000000 l    df *ABS*	00000000 config_store.c
0000cddc l     F .text	0000003c conf_dup_check_cb
0000ce18 l     F .text	0000001c conf_load_cb
0000cf3c l     F .text	00000008 conf_store_one
200054ac l     O .bss	00000001 conf_loaded
200054ad l     O .bss	00000001 conf_loading
00000000 l    df *ABS*	00000000 config.c
0000cfb0 l     F .text	00000008 conf_ev_fn_load
200054b8 l     O .bss	0000000c conf_mtx
20000188 l     O .data	00000010 conf_ev_load
00000000 l    df *ABS*	00000000 config_cli.c
0000d2cc l     F .text	0000001c conf_running_one
0000d2e8 l     F .text	0000002c conf_dump_running
0000d314 l     F .text	000000d4 shell_conf_command
20000198 l     O .data	00000010 shell_conf_cmd
00000000 l    df *ABS*	00000000 config_nmgr.c
0000d3f8 l     F .text	000000b8 conf_nmgr_write
0000d4b0 l     F .text	00000080 conf_nmgr_read
200001a8 l     O .data	0000000c conf_nmgr_group
00021c98 l     O .text	00000008 conf_nmgr_handlers
00000000 l    df *ABS*	00000000 console.c
0000d540 l     F .text	0000000e ring_buf_next
0000d54e l     F .text	0000000e ring_buf_prev
0000d55c l     F .text	0000001c console_hist_is_full
0000d578 l     F .text	00000054 handle_nlip
0000d5cc l     F .text	0000006a trim_whitespace
0000d638 l     F .text	00000080 console_hist_move_to_head
0000d6b8 l     F .text	00000080 console_hist_add
0000d738 l     F .text	00000040 console_hist_init
0000d80c l     F .text	00000044 console_append_char
0000d850 l     F .text	0000003c console_clear_line
0000d88c l     F .text	00000080 insert_char
0000d90c l     F .text	0000006c console_hist_move
0000d978 l     F .text	0000005e del_char
0000da6c l     F .text	000001a4 handle_ansi
200054c4 l     O .bss	00000004 ansi_val
200054c8 l     O .bss	00000004 ansi_val_2
200054cc l     O .bss	00000010 avail_queue
200054dc l     O .bss	00000004 completion
200054e0 l     O .bss	00000004 console_compat_rx_cb
200054e4 l     O .bss	00000028 console_hist
2000550c l     O .bss	00000800 console_hist_lines
20005d10 l     O .bss	0000000c console_write_lock
20005d1c l     O .bss	00000002 cur
20005d1e l     O .bss	00000002 end
20005d20 l     O .bss	00000004 esc_state
20005d24 l     O .bss	00000004 ev.2
20005d2c l     O .bss	00000004 input.1
20005d30 l     O .bss	00000004 lines_queue
20005d34 l     O .bss	00000004 nlip_state
20005d38 l     O .bss	00000001 prev_endl.0
20005d39 l     O .bss	00000001 rx_stalled
200001b4 l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
200001b8 l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 uart_console.c
0000e018 l     F .text	00000008 uart_blocking_tx
0000e020 l     F .text	00000014 uart_console_ring_add_char
0000e034 l     F .text	00000014 uart_console_ring_pull_char
0000e048 l     F .text	00000016 uart_console_ring_is_full
0000e05e l     F .text	0000000e uart_console_ring_is_empty
0000e06c l     F .text	00000034 uart_console_tx_flush
0000e0a0 l     F .text	0000001c uart_console_tx_char
0000e0bc l     F .text	00000058 uart_console_queue_char
0000e114 l     F .text	00000044 uart_console_rx_char
0000e158 l     F .text	00000074 uart_console_rx_char_event
20005d3c l     O .bss	00000008 cr_rx
20005d44 l     O .bss	00000020 cr_rx_buf
20005d64 l     O .bss	00000008 cr_tx
20005d6c l     O .bss	00000400 cr_tx_buf
2000617c l     O .bss	00000001 uart_console_rx_stalled
20006180 l     O .bss	00000004 uart_dev
20006184 l     O .bss	00000004 write_char_cb
200001bc l     O .data	00000004 b.0
00000000 l    df *ABS*	00000000 shell.c
0000e334 l     F .text	00000038 get_prompt
0000e36c l     F .text	0000006c print_module_commands
0000e3d8 l     F .text	00000030 print_modules
0000e408 l     F .text	00000044 print_command_params
0000e44c l     F .text	0000004c get_destination_module
0000e498 l     F .text	0000001c set_default_module
0000e4b4 l     F .text	00000020 select_module
0000e4d4 l     F .text	00000078 get_command_and_module
0000e54c l     F .text	000000c4 shell_find_cmd
0000e610 l     F .text	000000e0 show_cmd_help
0000e6f0 l     F .text	00000088 show_help
0000e778 l     F .text	0000001c print_prompt
0000e794 l     F .text	00000014 print_prompt_if_console
0000e7a8 l     F .text	00000110 complete_module
0000e8b8 l     F .text	00000108 complete_command
0000e9c0 l     F .text	00000048 get_command_from_module
0000ea08 l     F .text	000000f0 complete_param
0000eaf8 l     F .text	0000003c get_token
0000eb34 l     F .text	00000074 complete_select
0000eba8 l     F .text	0000006c line2argv
0000ec14 l     F .text	0000001e get_last_token
0000ec34 l     F .text	00000170 completion
0000eda4 l     F .text	00000030 shell_avail_queue_init
0000ef14 l     F .text	0000002a shell
0000ee9c l     F .text	00000026 shell_process_command
0000eec2 l     F .text	00000052 shell_process_nlip_line
20006188 l     O .bss	00000010 app_cmd
20006198 l     O .bss	00000004 app_prompt_handler
2000619c l     O .bss	00000200 buf
2000639c l     O .bss	00000150 compat_commands
200064ec l     O .bss	00000004 module_registered
200064f0 l     O .bss	00000004 num_compat_commands
200064f4 l     O .bss	00000004 num_of_shell_entities
200064f8 l     O .bss	00000004 prompt
200064fc l     O .bss	00000020 shell_console_ev
2000651c l     O .bss	00000004 shell_evq
20006520 l     O .bss	00000018 shell_modules
200001c0 l     O .data	00000004 default_module
00021ebc l     O .text	00000010 shell_cmd_help
00021ecc l     O .text	00000010 shell_cmd_select_module
00000000 l    df *ABS*	00000000 shell_nlip.c
0000f050 l     F .text	0000013c shell_nlip_mtx
0000f18c l     F .text	00000020 shell_event_data_in
20006538 l     O .bss	00000002 g_nlip_expected_len
2000653c l     O .bss	00000004 g_nlip_mbuf
20006540 l     O .bss	00000004 g_shell_nlip_in_arg
20006544 l     O .bss	00000004 g_shell_nlip_in_func
20006548 l     O .bss	00000018 g_shell_nlip_mq
00000000 l    df *ABS*	00000000 shell_os.c
0000f2f4 l     F .text	00000024 shell_os_ls_dev
0000f498 l     F .text	000000f0 shell_os_tasks_display_cmd
000220dc l     O .text	0000000c date_help
000220e8 l     O .text	00000010 date_params
000220f8 l     O .text	0000000c ls_dev_help
00022104 l     O .text	0000000c mpool_help
00022110 l     O .text	00000010 mpool_params
00022120 l     O .text	00000060 os_commands
00022194 l     O .text	0000000c tasks_help
00022180 l     O .text	0000000c reset_help
0002218c l     O .text	00000008 reset_params
000221a0 l     O .text	00000010 tasks_params
00000000 l    df *ABS*	00000000 shell_prompt.c
0002223c l     O .text	00000020 prompt_commands
0002225c l     O .text	0000000c ticks_help
00022268 l     O .text	00000018 ticks_params
00000000 l    df *ABS*	00000000 stats.c
0000f628 l     F .text	00000010 stats_offset
0000f638 l     F .text	0000004c stats_register_internal
0000f754 l     F .text	00000058 stats_module_init_internal
00000000 l    df *ABS*	00000000 stats_nmgr.c
0000f864 l     F .text	00000018 stats_nmgr_encode_name
0000f87c l     F .text	00000068 stats_nmgr_list
0000f8e4 l     F .text	00000060 stats_nmgr_walk_func
0000f944 l     F .text	000000ec stats_nmgr_read
20006578 l     O .bss	0000000c shell_nmgr_group
200001cc l     O .data	00000010 shell_nmgr_group_handlers
00000000 l    df *ABS*	00000000 stats_shell.c
0000fa4c l     F .text	0000006c stats_shell_display_entry
0000fab8 l     F .text	00000018 stats_shell_display_group
0000fad0 l     F .text	00000050 shell_stats_display
200001dc l     O .data	00000010 shell_stats_cmd
00000000 l    df *ABS*	00000000 sysdown.c
0000fb44 l     F .text	0000000e sysdown_timer_exp
0000fb54 l     F .text	00000014 sysdown_complete
20006588 l     O .bss	00000004 sysdown_num_in_progress
2000658c l     O .bss	00000020 sysdown_timer
00000000 l    df *ABS*	00000000 sysinit.c
0000fc08 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 uwbcfg.c
0000fc28 l     F .text	00000048 uwbcfg_set
0000fc70 l     F .text	00000038 uwbcfg_get
0000fca8 l     F .text	00000048 uwbcfg_export
200065c8 l     O .bss	00000004 uwbcfg_callbacks
200002f8 l     O .data	00000018 uwbcfg_handler
00000000 l    df *ABS*	00000000 uwbcfg_dw1000.c
00010028 l     F .text	000000a8 check_preamble_code
00000000 l    df *ABS*	00000000 uwbcfg_strtod.c
00000000 l    df *ABS*	00000000 datetime.c
000104d4 l     F .text	00000044 leapyear
00010518 l     F .text	00000048 parse_number
0002256c l     O .text	00000030 month_days
00000000 l    df *ABS*	00000000 crc16.c
0002259c l     O .text	00000200 crc16tab
00000000 l    df *ABS*	00000000 streamer.c
00000000 l    df *ABS*	00000000 streamer_console.c
00010b9e l     F .text	0000000c streamer_console_vprintf
00010baa l     F .text	0000000e streamer_console_write
20000310 l     O .data	00000004 streamer_console
0002279c l     O .text	00000008 streamer_cfg_console
00000000 l    df *ABS*	00000000 twr_tag-sysinit-app.c
00000000 l    df *ABS*	00000000 split.c
200065cc l     O .bss	00000001 split_app_active
200065cd l     O .bss	00000001 split_mode_cur
00000000 l    df *ABS*	00000000 split_config.c
00010cc0 l     F .text	00000004 split_conf_commit
00010cc4 l     F .text	0000002c split_conf_export
00010cf0 l     F .text	00000040 split_conf_get
00010d30 l     F .text	00000044 split_conf_set
20000314 l     O .data	00000018 split_conf_handler
00000000 l    df *ABS*	00000000 base64.c
00010dc0 l     F .text	00000020 pos
00010de0 l     F .text	0000004c token_decode
000227f0 l     O .text	00000041 base64_chars
00000000 l    df *ABS*	00000000 cborattr.c
00010f44 l     F .text	00000080 valid_attr_type
00010fc4 l     F .text	0000005e cbor_target_address
0001123c l     F .text	00000362 cbor_internal_read_object
00000000 l    df *ABS*	00000000 cbor_mbuf_reader.c
000115ac l     F .text	0000001c cbor_mbuf_reader_cpy
000115c8 l     F .text	0000001c cbor_mbuf_reader_get8
000115e4 l     F .text	00000018 cbor_mbuf_reader_cmp
000115fc l     F .text	0000001e cbor_mbuf_reader_get64
0001161a l     F .text	0000001a cbor_mbuf_reader_get32
00011634 l     F .text	00000020 cbor_mbuf_reader_get16
00000000 l    df *ABS*	00000000 cbor_mbuf_writer.c
00000000 l    df *ABS*	00000000 cborencoder.c
000116d4 l     F .text	000000a0 create_container
00011774 l     F .text	0000007a encode_string
00000000 l    df *ABS*	00000000 cborparser.c
000119ce l     F .text	00000024 is_fixed_type
000119f2 l     F .text	00000004 iterate_noop
000119f6 l     F .text	00000134 preparse_value
00011b2a l     F .text	0000004a preparse_next_value
00011b74 l     F .text	000000a0 extract_length
00011c14 l     F .text	0000016c iterate_string_chunks
00011d80 l     F .text	000000ca advance_internal
00012088 l     F .text	00000082 advance_recursive
00000000 l    df *ABS*	00000000 hal_bsp.c
200065d0 l     O .bss	00000004 dw1000_0
00022840 l     O .text	00000018 dw1000_0_cfg
00000000 l    df *ABS*	00000000 dw1000_dev.c
000121bc l     F .text	0000000a uwb_dw1000_read_sts_rxtime
000121c6 l     F .text	00000008 uwb_dw1000_hal_noblock_wait
00012234 l     F .text	00000020 uwb_dw1000_calc_pdoa
00012254 l     F .text	00000008 uwb_dw1000_estimate_los
0001225c l     F .text	00000008 uwb_dw1000_calc_fppl
00012264 l     F .text	00000008 uwb_dw1000_calc_seq_rssi
0001226c l     F .text	00000008 uwb_dw1000_calc_rssi
00012274 l     F .text	00000008 uwb_dw1000_get_fppl
0001227c l     F .text	00000008 uwb_dw1000_get_rssi
00012288 l     F .text	00000028 uwb_dw1000_calc_clock_offset_ratio
000122b0 l     F .text	00000008 uwb_dw1000_set_on_error_continue
000122b8 l     F .text	00000008 uwb_dw1000_phy_repeated_frames
000122c0 l     F .text	00000008 uwb_dw1000_phy_rx_reset
000122c8 l     F .text	00000008 uwb_dw1000_phy_forcetrxoff
000122d0 l     F .text	0000000c uwb_dw1000_phy_data_duration
000122dc l     F .text	0000000c uwb_dw1000_phy_SHR_duration
000122e8 l     F .text	0000000c uwb_dw1000_phy_frame_duration
000122f4 l     F .text	00000008 uwb_dw1000_read_txtime_lo32
000122fc l     F .text	00000008 uwb_dw1000_read_txtime
00012304 l     F .text	00000008 uwb_dw1000_read_rxtime_lo32
0001230c l     F .text	00000008 uwb_dw1000_read_rxtime
00012314 l     F .text	00000008 uwb_dw1000_read_systime_lo32
0001231c l     F .text	00000008 uwb_dw1000_read_systime
00012324 l     F .text	00000008 uwb_dw1000_set_rxauto_disable
0001232c l     F .text	00000008 uwb_dw1000_set_wait4resp_delay
00012334 l     F .text	00000008 uwb_dw1000_set_wait4resp
0001233c l     F .text	00000008 uwb_dw1000_tx_wait
00012344 l     F .text	00000008 uwb_dw1000_write_tx_fctrl
0001234c l     F .text	00000008 uwb_dw1000_write_tx
00012354 l     F .text	00000008 uwb_dw1000_stop_rx
0001235c l     F .text	00000008 uwb_dw1000_start_rx
00012364 l     F .text	00000008 uwb_dw1000_start_tx
0001236c l     F .text	00000008 uwb_dw1000_set_delay_start
00012374 l     F .text	00000008 uwb_dw1000_set_abs_timeout
0001237c l     F .text	00000016 uwb_dw1000_set_rx_window
00012392 l     F .text	0000000a uwb_dw1000_adj_rx_timeout
0001239c l     F .text	0000000a uwb_dw1000_set_rx_timeout
000123a6 l     F .text	00000008 uwb_dw1000_set_dblrxbuf
000123ae l     F .text	00000008 uwb_dw1000_txrf_power_value
000123b6 l     F .text	00000008 uwb_dw1000_txrf_config
000123be l     F .text	00000008 uwb_dw1000_mac_config
0001272c l     F .text	0000001a uwb_dw1000_set_euid
00012746 l     F .text	0000001a uwb_dw1000_set_uid
00012760 l     F .text	0000001a uwb_dw1000_set_panid
000128ca l     F .text	00000008 uwb_dw1000_sleep_config
00012948 l     F .text	00000008 uwb_dw1000_enter_sleep
00012bf8 l     F .text	00000008 uwb_dw1000_wakeup
00012c48 l     F .text	00000008 uwb_dw1000_enter_sleep_after_tx
00012c9a l     F .text	00000008 uwb_dw1000_enter_sleep_after_rx
00022898 l     O .text	00000015 __func__.0
000228b0 l     O .text	000000dc dw1000_uwb_funcs
00000000 l    df *ABS*	00000000 dw1000_hal.c
20000330 l     O .data	00002610 hal_dw1000_instances
00000000 l    df *ABS*	00000000 dw1000_mac.c
0001384a l     F .text	00000028 calc_rx_window_timeout
00013872 l     F .text	00000012 dw1000_checkoverrun
00013884 l     F .text	00000024 dw1000_irq
00013e98 l     F .text	00000022 update_rx_window_timeout
00014990 l     F .text	00000aa0 dw1000_interrupt_ev_cb
000229f0 l     O .text	00000008 agc_config
000229f8 l     O .text	00000008 chan_idx
00022a00 l     O .text	00000020 digital_bb_config
00022a20 l     O .text	00000004 dtune1
00022a24 l     O .text	00000003 dwnsSFDlen
00022a28 l     O .text	00000018 fs_pll_cfg
00022a40 l     O .text	00000006 fs_pll_tune
00022a84 l     O .text	00000032 lde_replicaCoeff
00022ab8 l     O .text	00000002 rx_config
00022abc l     O .text	0000000c sftsh
00022ac8 l     O .text	00000018 tx_config
00000000 l    df *ABS*	00000000 dw1000_phy.c
00000000 l    df *ABS*	00000000 dw1000_pkg.c
00000000 l    df *ABS*	00000000 dw1000_cli.c
00016100 l     F .text	00000040 fctrl_ledgend
00016140 l     F .text	00000010 dw1000_cli_too_few_args
00016150 l     F .text	000002cc fctrl_to_string
0001641c l     F .text	0000047c sys_status_to_string
00016898 l     F .text	0000013c print_interrupt_bt_line
000169d4 l     F .text	00000080 cmd_to_string
00016a54 l     F .text	00000148 print_spi_bt_line
00017260 l     F .text	00000398 dw1000_cli_cmd
200065dc l     O .bss	00000010 b.0
200065ec l     O .bss	00000080 b.1
2000666c l     O .bss	00000028 b.2
20002940 l     O .data	00000010 shell_dw1000_cmd
00000000 l    df *ABS*	00000000 dw1000_gpio.c
00000000 l    df *ABS*	00000000 dw1000_otp.c
00000000 l    df *ABS*	00000000 hal_flash.c
00017738 l     F .text	00000028 nrf52k_flash_wait_ready
00017760 l     F .text	00000050 nrf52k_flash_erase_sector
000177b0 l     F .text	00000004 nrf52k_flash_init
000177b4 l     F .text	00000020 nrf52k_flash_sector_info
000177d4 l     F .text	000000c8 nrf52k_flash_write
0001789c l     F .text	0000000e nrf52k_flash_read
00023528 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
000178ac l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_spi.c
00017ab8 l     F .text	0000006e nrf52_irqm_handler
00017b40 l     F .text	00000014 hal_spi_stop_transfer
00017b54 l     F .text	0000004a hal_spi_config_slave
00017ba0 l     F .text	000000bc hal_spi_init_master
00017c5c l     F .text	000000ea hal_spi_config_master
00023544 l     O .text	00000010 nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_timer.c
00018064 l     F .text	0000000a nrf_read_timer_cntr
00018070 l     F .text	000000b8 nrf_timer_set_ocmp
00018128 l     F .text	0000000a nrf_timer_disable_ocmp
00018132 l     F .text	0000000a nrf_rtc_disable_ocmp
0001813c l     F .text	00000054 hal_timer_read_bsptimer
00018190 l     F .text	00000076 hal_timer_chk_queue
00018206 l     F .text	0000002c hal_timer_irq_handler
00023554 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 hal_watchdog.c
000183d0 l     F .text	0000000e nrf52_hal_wdt_default_handler
000183e0 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001849c l     F .text	00000034 nrf52_periph_create_timers
000184d0 l     F .text	0000003c nrf52_periph_create_uart
0001850c l     F .text	00000020 nrf52_periph_create_spi
200066e4 l     O .bss	0000003c os_bsp_uart0
0002356c l     O .text	00000004 os_bsp_spi0m_cfg
00023570 l     O .text	00000004 os_bsp_uart0_cfg
00000000 l    df *ABS*	00000000 cir_dw1000.c
0001853c l     F .text	00000098 read_from_acc
000185d4 l     F .text	000000c8 cir_complete_ev_cb
000187a8 l     F .text	0000014c cir_complete_cb
0001890c l     F .text	00000008 map_cir_dw1000_enable
0001898c l     F .text	00000008 map_cir_dw1000_get_pdoa
20002950 l     O .data	0000003c cbs
000235bc l     O .text	00000008 cir_dw1000_funcs
00000000 l    df *ABS*	00000000 cir.c
00000000 l    df *ABS*	00000000 cir_json.c
00018afe l     F .text	00000040 cir_write_line
00000000 l    df *ABS*	00000000 json_encode.c
00018e78 l     F .text	000002e4 json_encode_value
00000000 l    df *ABS*	00000000 json_util.c
00000000 l    df *ABS*	00000000 rng_math.c
00000000 l    df *ABS*	00000000 twr_ds.c
00019368 l     F .text	00000450 rx_complete_cb
2000298c l     O .data	0000003c g_cbs
200029c8 l     O .data	00000010 g_config
200029d8 l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 twr_ds_ext.c
000198a0 l     F .text	00000464 rx_complete_cb
2000673c l     O .bss	0000001c g_twr_ds_ext_stat
200029e8 l     O .data	0000003c g_cbs
20002a24 l     O .data	00000010 g_config
20002a34 l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 twr_ss.c
00019df0 l     F .text	00000280 rx_complete_cb
20002a44 l     O .data	0000003c g_cbs
20002a80 l     O .data	00000010 g_config
20002a90 l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 twr_ss_ack.c
0001a160 l     F .text	00000268 rx_complete_cb
0001a3c8 l     F .text	00000154 tx_complete_cb
20002aa0 l     O .data	0000003c g_cbs
20002adc l     O .data	00000010 g_config
20002aec l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 twr_ss_ext.c
0001a5e8 l     F .text	00000268 rx_complete_cb
2000679c l     O .bss	0000001c g_twr_ss_ext_stat
20002afc l     O .data	0000003c g_cbs
20002b38 l     O .data	00000010 g_config
20002b48 l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strrchr.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll.c
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 strsep.c
00000000 l    df *ABS*	00000000 strpbrk.c
00000000 l    df *ABS*	00000000 imgmgr.c
0001ab52 l     F .text	00000040 imgr_vercmp
0001ab92 l     F .text	0000003e imgr_img_tlvs
0001abd0 l     F .text	00000050 imgr_upload_good_rsp
0001ad1c l     F .text	00000036 imgr_upload_log
0001adf0 l     F .text	0000006c imgr_erase_state
0001ae5c l     F .text	0000006c imgr_erase
0001aec8 l     F .text	00000190 imgr_upload_inspect
0001b094 l     F .text	000001fc imgr_upload
200067bc l     O .bss	00000030 imgr_state
200067ec l     O .bss	00000004 imgr_upload_arg
200067f0 l     O .bss	00000004 imgr_upload_cb
20002b58 l     O .data	0000000c imgr_nmgr_group
00023838 l     O .text	00000038 imgr_nmgr_handlers
00000000 l    df *ABS*	00000000 imgmgr_log.c
0001b2e0 l     F .text	00000004 imgmgr_log_gen
00000000 l    df *ABS*	00000000 imgmgr_state.c
0001b3ea l     F .text	00000026 imgmgr_state_any_pending
00000000 l    df *ABS*	00000000 imgmgr_util.c
00000000 l    df *ABS*	00000000 mgmt.c
0001b7bc l     F .text	0000001c mgmt_group_list_lock
0001b7f0 l     F .text	00000030 mgmt_find_group
200067f4 l     O .bss	0000000c mgmt_group_lock
20002b64 l     O .data	00000008 mgmt_group_list
00000000 l    df *ABS*	00000000 newtmgr.c
0001b88c l     F .text	00000024 nmgr_rsp_frag_alloc
0001b8b0 l     F .text	00000064 nmgr_init_rsp
0001b914 l     F .text	00000034 nmgr_rsp_tx
0001b948 l     F .text	0000006c nmgr_send_err_rsp
0001b9b4 l     F .text	00000188 nmgr_handle_req
0001bb3c l     F .text	0000001a nmgr_process
0001bb56 l     F .text	0000000a nmgr_event_data_in
0001bb60 l     F .text	0000000e nmgr_cbuf_init
20006804 l     O .bss	00000060 nmgr_task_cbuf
00000000 l    df *ABS*	00000000 newtmgr_os.c
0001bc08 l     F .text	00000050 nmgr_reset
0001bc58 l     F .text	0000000a nmgr_reset_tmo
0001bc64 l     F .text	00000060 nmgr_datetime_set
0001bcc4 l     F .text	0000005c nmgr_def_console_echo
0001bd20 l     F .text	00000078 nmgr_def_echo
0001bd98 l     F .text	00000080 nmgr_datetime_get
0001be18 l     F .text	00000108 nmgr_def_mpstat_read
0001bf20 l     F .text	000001a0 nmgr_def_taskstat_read
20006864 l     O .bss	00000020 nmgr_reset_callout
20002b6c l     O .data	0000000c nmgr_def_group
00023988 l     O .text	00000030 nmgr_def_group_handlers
00000000 l    df *ABS*	00000000 nmgr_shell.c
0001c0d0 l     F .text	00000006 nmgr_shell_get_mtu
0001c0d8 l     F .text	00000010 nmgr_shell_in
0001c0e8 l     F .text	0000001a nmgr_shell_out
20006884 l     O .bss	00000020 nmgr_shell_transport
00000000 l    df *ABS*	00000000 config_init.c
0001c15c l     F .text	000000bc config_init_fcb
200068a4 l     O .bss	0000006c conf_fcb_area
20002b78 l     O .data	00000038 config_init_conf_fcb
00000000 l    df *ABS*	00000000 config_fcb.c
0001c23c l     F .text	00000024 conf_fcb_load
0001c260 l     F .text	00000044 conf_fcb_load_cb
0001c2a4 l     F .text	0000002c conf_fcb_var_read
0001c2d0 l     F .text	000000d8 conf_fcb_compress_internal
0001c3a8 l     F .text	00000064 conf_fcb_append
0001c4aa l     F .text	0000000a conf_fcb_save
20002bb0 l     O .data	00000010 conf_fcb_itf
00000000 l    df *ABS*	00000000 config_line.c
00000000 l    df *ABS*	00000000 flash_map.c
0001c5d2 l     F .text	00000070 flash_map_read_mfg
20006918 l     O .bss	00000078 mfg_areas.0
00000000 l    df *ABS*	00000000 log.c
0001c850 l     F .text	0000001c log_registered
0001c86c l     F .text	00000004 log_chk_type
0001c870 l     F .text	00000014 log_chk_max_entry_len
0001c884 l     F .text	00000016 log_call_append_cb
0001c89c l     F .text	0000010c log_append_prepare
0001cb38 l     F .text	00000044 log_read_last_hdr
0001cc48 l     F .text	00000024 log_read_hdr_walk
0001cc8c l     F .text	00000044 log_walk_body_fn
20006998 l     O .bss	00000004 g_log_module_list
2000699c l     O .bss	00000001 log_written
20002bc0 l     O .data	00000008 g_log_list
00000000 l    df *ABS*	00000000 log_console.c
0001ccf0 l     F .text	00000004 log_console_read
0001ccf4 l     F .text	00000004 log_console_walk
0001ccf8 l     F .text	00000004 log_console_flush
0001ccfc l     F .text	00000020 log_console_print_hdr
0001cd1c l     F .text	0000002c log_console_append_body
0001cd48 l     F .text	00000030 log_console_append
200069a0 l     O .bss	00000018 log_console
00000000 l    df *ABS*	00000000 log_level.c
200069b8 l     O .bss	00000080 log_level_map
00000000 l    df *ABS*	00000000 log_nmgr.c
0001ce1c l     F .text	0000000a cbor_cnt_writer
0001ce26 l     F .text	00000032 log_nmgr_clear
0001ce58 l     F .text	00000084 log_nmgr_logs_list
0001cedc l     F .text	00000090 log_nmgr_module_list
0001cf6c l     F .text	000000d4 log_nmgr_level_list
0001d040 l     F .text	00000074 log_nmgr_modlevel_set
0001d0b4 l     F .text	00000074 log_nmgr_modlevel_get
0001d128 l     F .text	000000b8 log_encode_entries
0001d3a4 l     F .text	00000238 log_nmgr_encode_entry
0001d1e0 l     F .text	0000008c log_encode
0001d26c l     F .text	00000138 log_nmgr_read
20006a38 l     O .bss	0000000c log_nmgr_group
20002bc8 l     O .data	00000048 log_nmgr_group_handlers
00000000 l    df *ABS*	00000000 modlog.c
0001d5fc l     F .text	0000002c modlog_find_by_module
0001d628 l     F .text	0000003c modlog_insert
0001d664 l     F .text	0000001c modlog_alloc
0001d680 l     F .text	00000048 modlog_infer_handle
0001d6c8 l     F .text	00000046 modlog_register_no_lock
0001d70e l     F .text	0000002c modlog_append_one
0001d73c l     F .text	00000088 modlog_append_no_lock
20006a44 l     O .bss	00000004 modlog_first_dflt
20006a48 l     O .bss	000000c0 modlog_mapping_buf
20006b24 l     O .bss	00000004 modlog_mappings
20006b28 l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 mfg.c
0001d914 l     F .text	00000090 mfg_seek_next_aux
0001d9a4 l     F .text	0000006c mfg_read_mmr
0001da10 l     F .text	00000054 mfg_read_next_mmr
0001da64 l     F .text	00000038 mfg_open_flash_area
0001da9c l     F .text	0000003e mfg_read_tlv_body
0001db78 l     F .text	00000042 mfg_read_mmr_refs
20006b4c l     O .bss	00000001 mfg_initialized
20006b50 l     O .bss	00000018 mfg_mmrs
20006b68 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 log_reboot.c
0001dbbc l     F .text	0000002c reboot_conf_export
0001dbe8 l     F .text	00000054 reboot_conf_set
0001dc3c l     F .text	00000058 reboot_conf_get
0001dc94 l     F .text	0000012c log_reboot_write
0001ddc0 l     F .text	00000014 log_reboot_init_console
20006b6c l     O .bss	00000001 log_reboot_written
20006b70 l     O .bss	0000000c log_reboot_written_str
20006b80 l     O .bss	0000000c reboot_cnt_str
00000000 l    df *ABS*	00000000 rwlock.c
0001de60 l     F .text	0000000c rwlock_complete_handoff
0001de6c l     F .text	0000001a rwlock_read_must_block
0001de86 l     F .text	00000016 rwlock_write_must_block
0001de9c l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 bootutil_misc.c
0001dff8 l     F .text	0000000a boot_flag_decode
0001e002 l     F .text	00000006 boot_magic_off
0001e008 l     F .text	00000006 boot_copy_done_off
0001e00e l     F .text	00000006 boot_image_ok_off
0001e014 l     F .text	00000018 boot_magic_decode
0001e02c l     F .text	0000004a boot_write_trailer_byte
00023c7c l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 loader.c
0001e344 l     F .text	00000020 boot_write_sz
0001e364 l     F .text	0000002e boot_read_image_header
0001e394 l     F .text	00000034 boot_read_image_headers
0001e3c8 l     F .text	00000074 split_image_check
0001e43c l     F .text	00000064 boot_read_sectors
20006b90 l     O .bss	00000068 boot_data
20006bf8 l     O .bss	00000004 tmpbuf.0
00000000 l    df *ABS*	00000000 image_validate.c
0001e578 l     F .text	00000078 bootutil_img_hash
00000000 l    df *ABS*	00000000 sha256.c
00023c90 l     O .text	00000100 K
00000000 l    df *ABS*	00000000 fcb.c
00000000 l    df *ABS*	00000000 fcb_append.c
0001ec84 l     F .text	00000032 fcb_new_area
00000000 l    df *ABS*	00000000 fcb_elem_info.c
00000000 l    df *ABS*	00000000 fcb_getnext.c
00000000 l    df *ABS*	00000000 fcb_rotate.c
00000000 l    df *ABS*	00000000 fcb_walk.c
00000000 l    df *ABS*	00000000 uart_hal.c
0001f144 l     F .text	0000001a uart_hal_blocking_tx
0001f15e l     F .text	0000001a uart_hal_start_rx
0001f178 l     F .text	0000001a uart_hal_start_tx
0001f192 l     F .text	0000002c uart_hal_resume
0001f1be l     F .text	0000002c uart_hal_suspend
0001f1ea l     F .text	00000012 uart_hal_close
0001f1fc l     F .text	0000007e uart_hal_open
00000000 l    df *ABS*	00000000 hal_flash.c
0001f2e4 l     F .text	0000001e hal_flash_check_addr
20006bfc l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 hal_uart.c
0001f59e l     F .text	00000020 hal_uart_tx_fill_buf
0001f5be l     F .text	00000072 uart_irq_handler
0001f630 l     F .text	00000014 uart0_irq_handler
0001f644 l     F .text	00000104 hal_uart_baudrate
20006c00 l     O .bss	0000001c uart0
00000000 l    df *ABS*	00000000 os_heap.c
0001f9d8 l     F .text	0000002c os_malloc_lock
0001fa04 l     F .text	00000028 os_malloc_unlock
20006c1c l     O .bss	0000000c os_malloc_mutex
00000000 l    df *ABS*	00000000 crc8.c
00023d90 l     O .text	00000010 crc8_small_table
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 sf_ceil.c
00000000 l    df *ABS*	00000000 w_asin.c
00000000 l    df *ABS*	00000000 wf_atan2.c
00000000 l    df *ABS*	00000000 wf_fmod.c
00000000 l    df *ABS*	00000000 wf_log10.c
00000000 l    df *ABS*	00000000 e_asin.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 ef_atan2.c
00023da0 l     O .text	0000000c CSWTCH.8
00023dac l     O .text	0000000c CSWTCH.9
00000000 l    df *ABS*	00000000 ef_fmod.c
00023db8 l     O .text	00000008 Zero
00000000 l    df *ABS*	00000000 ef_log10.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 sf_atan.c
00023dc0 l     O .text	00000010 atanlo
00023dd0 l     O .text	00000010 atanhi
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 ef_log.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 twr_tag-sysdown-app.c
00000000 l    df *ABS*	00000000 twr_tag-sysflash.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 impure.c
20002c38 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00011e4a g     F .text	00000078 _cbor_value_decode_int64_internal
0000e28c g     F .text	000000a8 uart_console_init
000116c4 g     F .text	00000010 cbor_mbuf_writer_init
00020344 g     F .text	0000002c .hidden __aeabi_dcmpun
0000a47c g     F .text	00000030 os_arch_start
0001c7c4 g     F .text	0000001c flash_area_id_from_image_slot
0000c9a0 g     F .text	00000008 dpl_cputime_delay_usecs
0001c464 g     F .text	00000014 conf_fcb_dst
20006c28 g       .bss	00000000 __HeapBase
200050a4 g     O .bss	00000008 g_os_task_list
00009038 g     F .text	00000078 os_idle_task
00020308 g     F .text	00000012 .hidden __aeabi_dcmple
00013d90 g     F .text	000000a8 dw1000_stop_rx
0001a966 g     F .text	00000016 strcpy
000158de g     F .text	0000005a dw1000_phy_config_lde
00015fee g     F .text	00000046 dw1000_phy_event_cnt_ctrl
00015792 g     F .text	0000002e dw1000_phy_sysclk_PLL
00000000 g       .svc_table	00000000 SVC_Count
00013e7a g     F .text	0000001e dw1000_adj_rx_timeout
00008164  w    F .text	00000002 TIMER2_IRQHandler
0000c968 g     F .text	00000018 fmemopen_w
00020244 g     F .text	0000007a .hidden __cmpdf2
0002094c g     F .text	00000054 fmodf
0000c9d8 g     F .text	00000048 mem_split_frag
00021378 g     F .text	00000012 fabs
0000a6ea g     F .text	0000005a os_mbuf_copydata
200042ac g     O .bss	00000008 g_os_mempool_list
00009260 g     F .text	0000001a os_callout_init
0000927c g     F .text	0000003c os_callout_stop
00008164  w    F .text	00000002 RTC0_IRQHandler
00012212 g     F .text	00000008 uwb_dw1000_set_autoack
0001e09a g     F .text	000000ba boot_read_swap_state
0000bf44 g     F .text	00000050 add_malloc_block
00020244 g     F .text	0000007a .hidden __eqdf2
00013f66 g     F .text	00000042 dw1000_set_rx_window
000095a0 g     F .text	00000068 os_eventq_put
0000edd4 g     F .text	00000010 shell_evq_set
00012ee0 g     F .text	00000054 hal_dw1000_reset
200000d8 g       .data	00000000 __data_start__
0000a8f4 g     F .text	0000005c os_mbuf_extend
0001a9b8 g     F .text	00000020 strtok_r
00023510 g     O .text	00000018 nrf52k_flash_dev
0001fdb4 g     F .text	0000005a .hidden __floatdidf
0001ede2 g     F .text	00000040 fcb_append_finish
00023714 g     O .text	0000000c g_stats_map_twr_ds_ext_stat_section
0000c8b4 g     F .text	00000024 printf
0001b4de g     F .text	0000004a imgmgr_state_confirm
00013520 g     F .text	00000268 hal_dw1000_write_noblock
00021bdc g     O .text	00000004 stdout
0000f5c0 g     F .text	00000054 shell_ticks_cmd
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00008dec g     F .text	00000022 hal_gpio_write
0001e780 g     F .text	00000130 mbedtls_internal_sha256_process
0001ea76 g     F .text	00000024 fcb_free_sector_cnt
0000f2c4 g     F .text	00000018 shell_nlip_output
0001cce6 g     F .text	0000000a log_flush
0000a3dc g     F .text	0000009c os_arch_os_init
0001ddd4 g     F .text	00000038 log_reboot
00008156  w    F .text	00000002 HardFault_Handler
00010a74 g     F .text	000000d0 datetime_format
00018244 g     F .text	00000060 hal_timer_init
0001daec g     F .text	0000001a mfg_seek_next_with_type
00011878 g     F .text	0000008c cbor_encode_int
0000a4ac g     F .text	00000064 os_arch_os_start
20005d28 g     O .bss	00000001 g_console_ignore_non_nlip
20005d2a g     O .bss	00000001 g_console_silence_non_nlip
0001f32a g     F .text	00000010 hal_flash_align
0001cc34 g     F .text	00000014 log_read
0000f7f0 g     F .text	00000028 stats_group_walk
0000b70c g     F .text	000000b8 uwb_rng_pkg_init
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
0001e076 g     F .text	0000001e boot_magic_compatible_check
0000dff4 g     F .text	0000000c console_no_ticks
00008bf8 g     F .text	000000c0 uwb_calc_aoa
0000aba2 g     F .text	0000000c SysTick_Handler
0000af44 g     F .text	00000024 uwb_rng_get_config
00008164  w    F .text	00000002 GPIOTE_IRQHandler
00009f80 g     F .text	0000004a os_task_remove
00018234 g     F .text	00000010 nrf52_timer0_irq_handler
000115a0 g     F .text	0000000c cbor_read_object
000175f8 g     F .text	00000010 dw1000_cli_register
000116a4 g     F .text	0000001e cbor_mbuf_writer
000097e0 g     F .text	0000002a os_memblock_put
00008164  w    F .text	00000002 PWM1_IRQHandler
0000ce5c g     F .text	0000000c conf_dst_register
0000992c g     F .text	00000024 os_msys_get_pkthdr
20006910 g     O .bss	00000004 flash_map
00010110 g     F .text	00000244 uwbcfg_commit_to_inst_dw1000
0000e1f8 g     F .text	00000020 uart_console_non_blocking_mode
0001f4d8 g     F .text	00000032 hal_flash_is_erased
0000ab5c g     F .text	00000046 PendSV_Handler
0000c912 g     F .text	0000001c snprintf
00008154  w    F .text	00000002 NMI_Handler
00023df8 g       .ARM.exidx	00000000 __exidx_end
0001e6d0 g     F .text	0000000c mbedtls_sha256_init
00014012 g     F .text	00000068 dw1000_read_accdata
00008020 g       .text	00000000 __isr_vector_start
00014194 g     F .text	00000028 dw1000_set_autoack_delay
0001c9a8 g     F .text	00000064 log_init
0000c92e g     F .text	0000003a memfile_write
0000a354 g     F .text	00000014 os_arch_ctx_sw
00011904 g     F .text	0000005c cbor_encode_simple_value
0000921e g     F .text	0000000a os_system_reset
00012ec8 g     F .text	00000018 hal_dw1000_inst
0001f27c g     F .text	00000068 uart_hal_init
000081d0 g     F .text	0000002c hal_system_reset
000128d2 g     F .text	00000076 dw1000_dev_enter_sleep
000090d4 g     F .text	00000070 os_init_idle_task
20000108 g       .data	00000000 __aeabi_unwind_cpp_pr0
00020234 g     F .text	0000008a .hidden __gtdf2
00009afc g     F .text	0000000c os_sched_set_current_task
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
00021764 g     F .text	0000000c __errno
00023df8 g       .ARM.exidx	00000000 __etext
0000a2dc g     F .text	00000052 os_get_uptime_usec
0000df9c g     F .text	0000003c console_vprintf
0001d5dc g     F .text	00000020 log_nmgr_register_group
00008164  w    F .text	00000002 RADIO_IRQHandler
0001c72c g     F .text	00000028 flash_area_write
0001a8f8 g     F .text	00000038 twr_ss_ext_pkg_down
00018750 g     F .text	00000058 cir_dw1000_reread_from_cir
2000616c g     O .bss	00000010 rx_ev
0000a964 g     F .text	000000b8 os_mutex_release
0000f684 g     F .text	0000000a stats_size
0000f83c g     F .text	00000028 stats_register
00018a3c g     F .text	00000068 cir_dw1000_pkg_init
00018918 g     F .text	00000074 cir_dw1000_get_pdoa
20006800 g     O .bss	00000004 nmgr_evq
000099d0 g     F .text	00000020 os_sanity_check_register
20003060 g       .bssnz	00000000 __bssnz_start__
200054a8 g     O .bss	00000004 conf_load_srcs
0001eac0 g     F .text	00000020 fcb_get_len
0001596c g     F .text	000001d2 dw1000_phy_init
0000a16c g     F .text	00000026 os_time_delay
0001e1cc g     F .text	000000a4 boot_swap_type
200001f0 g     O .data	000000b0 g_uwb_config
0000a86c g     F .text	00000088 os_mbuf_copyinto
00008164  w    F .text	00000002 PDM_IRQHandler
000202d0 g     F .text	00000010 .hidden __aeabi_cdcmple
00015b3e g     F .text	00000066 dw1000_phy_rx_reset
0001db06 g     F .text	0000000a mfg_read_tlv_flash_area
0000e00c g     F .text	0000000c console_get_ticks
00013e68 g     F .text	00000012 dw1000_set_rxauto_disable
0001b410 g     F .text	0000001e imgmgr_state_slot_in_use
00010b44 g     F .text	00000034 crc16_ccitt
00011ec2 g     F .text	00000024 cbor_parser_init
000154e8 g     F .text	00000060 dw1000_calc_rssi
0000e268 g     F .text	00000014 console_rx_restart
00009840 g     F .text	00000010 os_mempool_module_init
0001bb7c g     F .text	0000000c mgmt_evq_set
00008164  w    F .text	00000002 TEMP_IRQHandler
0000a37a g     F .text	0000000a os_arch_in_critical
00022a48 g     O .text	0000003c g_stats_map_mac_stat_section
00008164  w    F .text	00000002 QDEC_IRQHandler
00015eb4 g     F .text	00000054 dw1000_phy_data_duration
200002a0 g     O .data	00000058 g_uwbcfg_str
00008164  w    F .text	00000002 TIMER3_IRQHandler
0000b058 g     F .text	00000028 uwb_rng_clear_twr_data
0000a348 g     F .text	0000000a timer_handler
000155d6 g     F .text	00000010 dw1000_read_rawrxtime
000094ec g     F .text	00000024 os_dev_lookup
00009b08 g     F .text	00000090 os_sched_sleep
0001255c g     F .text	000000e0 dw1000_read_reg
000123c8 g     F .text	000000c8 dw1000_read
0000df40 g     F .text	0000000c console_set_completion_cb
0000c074 g     F .text	0000001a memcpy
000202c0 g     F .text	00000020 .hidden __aeabi_cdrcmple
0000f1d0 g     F .text	000000e0 shell_nlip_process
00010d74 g     F .text	00000010 split_conf_init
0000d07c g     F .text	00000034 conf_parse_name
00008b1c g     F .text	00000074 uwb_task_init
00018400 g     F .text	00000078 hal_watchdog_init
0001fd3c g     F .text	00000022 .hidden __floatsidf
0000ce68 g     F .text	00000054 conf_load
000191a4 g     F .text	00000038 json_encode_array_value
0002023c g     F .text	00000082 .hidden __ltdf2
00019226 g     F .text	00000026 json_readn
000093c0 g     F .text	0000000c os_cputime_init
00018994 g     F .text	00000080 cir_dw1000_init
200054b4 g     O .bss	00000004 conf_handlers
000191dc g     F .text	0000001c json_encode_array_finish
00020540 g     F .text	00000000 .hidden __aeabi_uldivmod
0001f50a g     F .text	00000062 hal_flash_isempty
00010c2c g     F .text	0000002c split_app_init
0000be5c g     F .text	00000034 puts
0000b688 g     F .text	00000020 rng_issue_complete
00000020 g       *ABS*	00000000 _imghdr_size
00009ac0 g     F .text	00000030 os_sched_ctx_sw_hook
00021564 g     F .text	00000200 __ieee754_logf
0001eeea g     F .text	00000052 fcb_elem_info
20005d0c g     O .bss	00000004 console_is_midline
0000ede4 g     F .text	000000b8 shell_exec
0000a5ea g     F .text	00000014 os_mbuf_free
200000e4 g     O .data	00000004 SystemCoreClock
00013e38 g     F .text	0000001e dw1000_set_wait4resp
000081b4 g     F .text	0000000c hal_system_init
00011960 g     F .text	0000000e cbor_encode_byte_string
00015ba8 g     F .text	00000120 dw1000_phy_forcetrxoff
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0000a384 g     F .text	00000040 os_arch_task_stack_init
00014822 g     F .text	00000036 dw1000_calc_clock_offset_ratio_ttco
0001263c g     F .text	000000f0 dw1000_write_reg
0000bf94 g     F .text	0000006c malloc
0001c704 g     F .text	00000028 flash_area_read
000158ba g     F .text	00000024 dw1000_phy_disable_sequencing
00008f54 g     F .text	0000004c __assert_func
0001ad54 g     F .text	00000018 imgr_my_version
00017b28 g     F .text	00000018 nrf52_spi0_irq_handler
0001b334 g     F .text	000000b6 imgmgr_state_flags
00009ccc g     F .text	00000040 os_sched_wakeup_ticks
0000fb20 g     F .text	00000024 stats_shell_register
0000df4c g     F .text	00000050 console_pkg_init
0001b2a4 g     F .text	0000003c imgmgr_module_init
0000815c  w    F .text	00000002 UsageFault_Handler
00013b74 g     F .text	0000006a dw1000_set_delay_start
0001a9e4 g     F .text	0000000c strtoll
0000c8d8 g     F .text	0000003a vsnprintf
200065b0 g     O .bss	00000018 _uwbcfg_log
000203c0 g     F .text	00000040 .hidden __fixunsdfsi
2000428c g     O .bss	00000008 g_callout_list
0001fa2c g     F .text	00000018 os_malloc
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
0000c430 g     F .text	0000047c tfp_format
2000fe50 g       *ABS*	00000000 __HeapLimit
20003060 g       .bss	00000000 __bss_start__
000081c0 g     F .text	00000010 hal_debugger_connected
0001fd1c g     F .text	0000001e .hidden __aeabi_ui2d
0001f39c g     F .text	00000070 hal_flash_write
0000cc82 g     F .text	00000058 dpl_mbuf_appendfrom
0001b2e4 g     F .text	00000014 imgmgr_log_upload_start
00008164  w    F .text	00000002 TIMER4_IRQHandler
00012e34 g     F .text	00000094 hal_dw1000_spi_txrx_cb
00020570 g     F .text	000002d0 .hidden __udivmoddi4
0001fa98 g     F .text	00000000 .hidden __aeabi_drsub
0001bbc0 g     F .text	00000048 nmgr_pkg_init
0001a8e0 g     F .text	00000018 twr_ss_ext_free
00012050 g     F .text	00000038 _cbor_value_copy_string
0001760c g     F .text	000000d2 dw1000_gpio_config_leds
00021548 g     F .text	0000000e fabsf
00008b90 g     F .text	00000018 uwb_task_deinit
2000509c g     O .bss	00000004 g_current_task
000099f0 g     F .text	0000006c os_sanity_run
000119a2 g     F .text	0000002c cbor_encoder_close_container
0000a368 g     F .text	0000000c os_arch_save_sr
20006585 g     O .bss	00000001 sysdown_active
000202f4 g     F .text	00000012 .hidden __aeabi_dcmplt
0001f99c g     F .text	0000003c hal_uart_close
0001e180 g     F .text	00000020 boot_write_magic
0000977c g     F .text	00000014 os_mempool_init
0001c218 g     F .text	00000020 config_pkg_init
0000a194 g     F .text	00000038 os_gettimeofday
200050ac g     O .bss	00000001 g_task_id
0000d0b0 g     F .text	00000016 conf_parse_and_lookup
00010734 g     F .text	00000140 timeval_to_clocktime
0000ffc0 g     F .text	00000010 uwbcfg_register
200001c4 g     O .data	00000008 g_stats_registry
0001fd60 g     F .text	00000042 .hidden __extendsfdf2
0000d058 g     F .text	00000024 conf_handler_lookup
00015548 g     F .text	00000020 dw1000_get_rssi
00020064 g     F .text	000001d0 .hidden __aeabi_ddiv
0001faa4 g     F .text	00000276 .hidden __adddf3
00008a00 g     F .text	00000060 uwb_dev_idx_lookup
0001f810 g     F .text	00000058 hal_uart_blocking_tx
00023de0 g       .text	00000000 __exidx_start
00019850 g     F .text	00000018 twr_ds_free
0001aa04 g     F .text	00000100 strntoumax
0001fe10 g     F .text	00000254 .hidden __aeabi_dmul
00009a5c g     F .text	00000010 os_sanity_init
20002c28 g     O .data	00000001 __fdlib_version
200067b8 g     O .bss	00000004 imgmgr_dfu_callbacks_fn
00019250 g     F .text	00000048 uwb_rng_tof_to_meters
0001b528 g     F .text	000001bc imgmgr_state_read
0000a61e g     F .text	000000a8 os_mbuf_append
0001db10 g     F .text	0000000a mfg_read_tlv_mmr_ref
0000aafc g     F .text	00000014 os_set_env
0000caea g     F .text	00000036 dpl_memblock_put_from_cb
00012c00 g     F .text	00000048 dw1000_dev_enter_sleep_after_tx
000155c8 g     F .text	0000000e dw1000_read_systime_lo
00015568 g     F .text	00000050 dw1000_estimate_los
00012144 g     F .text	00000010 hal_bsp_flash_dev
00014246 g     F .text	000000c4 dw1000_set_dblrxbuff
0001852c g     F .text	00000010 nrf52_periph_create
000157c0 g     F .text	0000002e dw1000_phy_txclk_PLL
0001496c g     F .text	0000001e dw1000_ic_and_host_ptrs_equal
00021be0 g     O .text	00000008 MemFile_methods
00015cc8 g     F .text	00000068 dw1000_phy_interrupt_mask
20005090 g     O .bss	0000000c g_os_sanity_check_mu
0001c77c g     F .text	0000000a flash_area_align
0001fd1c g     F .text	0000001e .hidden __floatunsidf
0001b320 g     F .text	00000014 imgmgr_log_confirm
0000df0c g     F .text	0000000c console_line_queue_set
0001fa44 g     F .text	00000014 os_free
00008178 g     F .text	0000003c _sbrk
00010ec0 g     F .text	0000002a base64_pad
0001212e g     F .text	00000014 cbor_value_calculate_string_length
000146fc g     F .text	00000024 dw1000_read_carrier_integrator
000236cc g     O .text	0000000c g_stats_map_twr_ds_stat_section
00017980 g     F .text	00000098 os_tick_idle
0000dfd8 g     F .text	0000001c console_printf
0001bb88 g     F .text	00000014 nmgr_transport_init
0001b290 g     F .text	00000014 imgmgr_dfu_confirmed
0000f44c g     F .text	00000012 shell_os_reset_cmd
00012490 g     F .text	000000cc dw1000_write
00015430 g     F .text	00000098 dw1000_calc_fppl
0000da5c g     F .text	00000008 console_blocking_mode
0000cebc g     F .text	00000018 conf_ensure_loaded
000141bc g     F .text	0000008a dw1000_set_wait4resp_delay
00011ee6 g     F .text	0000012a cbor_value_enter_container
00008164  w    F .text	00000002 I2S_IRQHandler
00008644 g     F .text	00000002 _init
0001e094 g     F .text	00000006 boot_swap_type_off
0001f40c g     F .text	000000cc hal_flash_erase
00010c90 g     F .text	0000000c split_mode_get
0001a9d8 g     F .text	0000000c strtol
0001584a g     F .text	00000070 dw1000_phy_sysclk_ACC
0000f3c8 g     F .text	00000084 shell_os_date_cmd
000212b8 g     F .text	000000c0 __ieee754_log10f
0001ef3c g     F .text	00000048 fcb_getnext_in_area
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
00020400 g     F .text	0000009e .hidden __aeabi_d2f
20006758 g     O .bss	0000001c g_twr_ss_stat
00017a18 g     F .text	000000a0 os_tick_init
00015d30 g     F .text	0000015c dw1000_phy_repeated_frames
00013fa8 g     F .text	00000022 dw1000_set_abs_timeout
20000180 g     O .data	00000008 g_dpl_mempool_list
0001ee22 g     F .text	000000c8 fcb_elem_crc8
0001cd78 g     F .text	00000008 log_console_get
0000afd8 g     F .text	00000080 uwb_rng_calc_rel_tx
00008164  w    F .text	00000002 TIMER0_IRQHandler
00009144 g     F .text	000000b8 os_init
0001b2f8 g     F .text	00000014 imgmgr_log_upload_done
0001a5b8 g     F .text	00000018 twr_ss_ack_free
00018a14 g     F .text	00000028 cir_dw1000_free
00019868 g     F .text	00000038 twr_ds_pkg_down
000080f8 g     F .text	0000005c Reset_Handler
0001a99e g     F .text	0000001a strrchr
0001ea9a g     F .text	00000026 fcb_put_len
00010c58 g     F .text	00000038 split_check_status
00016b9c g     F .text	00000168 dw1000_cli_dump_registers
0001d7f8 g     F .text	00000040 modlog_append
0000d778 g     F .text	0000000c console_echo
00020370 g     F .text	0000004e .hidden __fixdfsi
0000be0c g     F .text	00000030 calloc
0000980c g     F .text	00000034 os_mempool_info_get_next
200065ac g     O .bss	00000001 sysinit_active
20005d29 g     O .bss	00000001 g_console_silence
00010c9c g     F .text	0000000c split_app_active_get
0001197c g     F .text	0000000a cbor_encoder_create_array
00008e42 g     F .text	0000001a hal_gpio_toggle
0000abae g     F .text	0000001e os_default_irq_asm
000234ac g     O .text	0000000c cmd_dw1000_help
00009d0c g     F .text	0000000c os_sched_next_task
00009a6c g     F .text	00000054 os_sched_insert
000092b8 g     F .text	00000078 os_callout_reset
0001db1c g     F .text	0000004c mfg_init
00009554 g     F .text	00000010 os_dev_reset
00018afa g     F .text	00000004 cir_pkg_down
0000f008 g     F .text	00000048 shell_init
0001faa4 g     F .text	00000276 .hidden __aeabi_dadd
0002023c g     F .text	00000082 .hidden __ledf2
0001b7d8 g     F .text	00000018 mgmt_group_list_unlock
0000a950 g     F .text	00000014 os_mutex_init
000188f4 g     F .text	00000018 cir_dw1000_enable
00008168 g     F .text	00000010 _sbrkInit
00009608 g     F .text	0000001a os_eventq_get_no_wait
0001fda4 g     F .text	0000006a .hidden __aeabi_ul2d
20003060 g       .bssnz	00000000 __bssnz_end__
0001c7e0 g     F .text	00000070 flash_map_init
0001a9f0 g     F .text	00000014 vprintf
000090c8 g     F .text	0000000c os_started
00008164  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
20002c10 g     O .data	00000018 reboot_conf_handler
0000d02c g     F .text	00000010 conf_unlock
00009c90 g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00015f08 g     F .text	0000001a dw1000_phy_frame_duration
0000f818 g     F .text	00000024 stats_group_find
00023a30 g     O .text	00000028 log_console_handler
0001dfaa g     F .text	0000001e rwlock_release_write
0001bb9c g     F .text	00000024 nmgr_rx_req
00008d88 g     F .text	0000002c hal_gpio_init_in
00017608 g     F .text	00000004 dw1000_cli_down
0000f2dc g     F .text	00000018 shell_nlip_init
0001210a g     F .text	00000024 cbor_value_advance
0001ca0c g     F .text	00000010 log_list_get_next
00008164  w    F .text	00000002 PWM2_IRQHandler
000191f8 g     F .text	0000001c json_read_next
0000af68 g     F .text	00000032 uwb_rng_append_config
000209a0 g     F .text	0000006c log10f
0001b780 g     F .text	0000003c imgr_ver_str
20006774 g     O .bss	00000028 g_twr_ss_ack_stat
20003060 g       .data	00000000 __data_end__
0001cb7c g     F .text	00000094 log_register
0001e936 g     F .text	00000140 mbedtls_sha256_finish_ret
00008b0a g     F .text	00000010 uwb_mac_find_cb_inst_ptr
00010024 g     F .text	00000004 uwbcfg_pkg_down
0001ef84 g     F .text	00000018 fcb_getnext_area
0001b30c g     F .text	00000014 imgmgr_log_pending
0001df30 g     F .text	00000026 rwlock_release_read
000154c8 g     F .text	00000020 dw1000_get_fppl
0000d530 g     F .text	00000010 conf_nmgr_register
00008164  w    F .text	00000002 ECB_IRQHandler
0000f614 g     F .text	00000014 shell_prompt_register
00020a10 g     F .text	000004a4 __ieee754_asin
0000cb82 g     F .text	00000014 dpl_mbuf_free
0000e000 g     F .text	0000000c console_yes_ticks
00020330 g     F .text	00000012 .hidden __aeabi_dcmpgt
0001a070 g     F .text	0000009c twr_ss_pkg_init
0000cd88 g     F .text	00000054 dpl_mbuf_trim_front
200050e0 g     O .bss	00000004 g_os_time
0001bb70 g     F .text	0000000c mgmt_evq_get
00017e34 g     F .text	00000060 hal_spi_init
0001f748 g     F .text	00000034 hal_uart_init_cbs
00018488 g     F .text	00000014 hal_watchdog_tickle
20006c28 g       .bss	00000000 __bss_end__
00009564 g     F .text	00000020 os_dev_walk
00012c50 g     F .text	0000004a dw1000_dev_enter_sleep_after_rx
0000a58a g     F .text	0000002e os_mbuf_get
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
000170a8 g     F .text	000001b8 dw1000_cli_backtrace
0001c104 g     F .text	00000058 nmgr_shell_pkg_init
0000b3a0 g     F .text	000000e8 uwb_rng_listen
0002031c g     F .text	00000012 .hidden __aeabi_dcmpge
0000ae78 g     F .text	000000cc uwb_rng_init
0001608c g     F .text	00000024 dw1000_pkg_init
0001eae0 g     F .text	00000034 fcb_sector_hdr_init
0001ac20 g     F .text	000000fc imgr_read_info
000100d0 g     F .text	0000003e remap_framefilter
0001faa0 g     F .text	0000027a .hidden __aeabi_dsub
0000991c g     F .text	00000010 os_msys_reset
00008164 g     F .text	00000002 Default_Handler
00008630 g     F .text	00000014 _start
00013788 g     F .text	0000003c hal_dw1000_rw_noblock_wait
00019298 g     F .text	0000005c calc_tof_ss
0000f460 g     F .text	00000038 shell_os_ls_dev_cmd
0001fda4 g     F .text	0000006a .hidden __floatundidf
00008ba8 g     F .text	0000004a uwb_dev_init
20006584 g     O .bss	00000001 stats_shell_registered
20006560 g     O .bss	00000018 g_stats_stats
00010e2c g     F .text	00000094 base64_encode
0000a1cc g     F .text	00000018 os_time_is_set
0000ab10 g     F .text	00000006 os_arch_init_task_stack
000096a0 g     F .text	00000018 os_eventq_run
0000d018 g     F .text	00000014 conf_lock
00009fcc g     F .text	00000080 os_task_info_get_next
00023c6c g     O .text	00000010 boot_img_magic
00010d84 g     F .text	0000003c split_write_split
0000d784 g     F .text	00000034 console_lock
0001a97c g     F .text	00000022 strncmp
0000f690 g     F .text	00000098 stats_walk
200054b0 g     O .bss	00000004 conf_save_dst
00019d9c g     F .text	00000018 twr_ds_ext_free
00015e8c g     F .text	00000028 dw1000_phy_SHR_duration
00008f18 g     F .text	0000003c hal_gpio_irq_release
0002381c g     O .text	0000000c g_stats_map_twr_ss_ext_stat_section
0001869c g     F .text	000000b4 cir_dw1000_remap_fp_index
200030dc g     O .bss	00000050 g_idle_task
00008db4 g     F .text	00000038 hal_gpio_init_out
00008e0e g     F .text	00000034 hal_gpio_read
200001ec g     O .data	00000004 sysinit_panic_cb
00012a54 g     F .text	000001a4 dw1000_dev_config
0001b058 g     F .text	00000014 imgmgr_dfu_stopped
000192f8 g     F .text	00000070 calc_tof_ds
2000508c g     O .bss	00000004 g_os_sanity_check_list
000140fc g     F .text	00000098 dw1000_set_autoack
00019214 g     F .text	00000012 json_read_prev
0000c10c g     F .text	0000001e strncpy
00014858 g     F .text	0000003c dw1000_read_rxdiag
000155f6 g     F .text	0000000e dw1000_read_rxtime_lo
0001f77c g     F .text	00000054 hal_uart_start_tx
00009790 g     F .text	00000032 os_memblock_get
00009c1c g     F .text	00000074 os_sched_wakeup
0000a52a g     F .text	00000022 os_mqueue_get
00009d68 g     F .text	00000010 os_sem_init
0000f318 g     F .text	000000b0 shell_os_mpool_display_cmd
00015f22 g     F .text	000000cc dw1000_phy_txrf_power_value
000137c4 g     F .text	00000086 hal_dw1000_wakeup
0000f588 g     F .text	00000038 shell_os_register
0000c9a8 g     F .text	00000030 mem_init_mbuf_pool
00008fa0 g     F .text	00000098 os_default_irq
0001c786 g     F .text	0000000a flash_area_erased_val
00012950 g     F .text	00000104 dw1000_dev_wakeup
0001fd3c g     F .text	00000022 .hidden __aeabi_i2d
0000cb96 g     F .text	00000020 dpl_mbuf_free_chain
200050a0 g     O .bss	00000004 g_os_last_ctx_sw_time
00009d78 g     F .text	00000064 os_sem_release
0000c02c g     F .text	00000048 memcmp
0000a3c4 g     F .text	00000018 os_arch_init
00016dd4 g     F .text	00000170 dw1000_cli_interrupt_backtrace
00012ca4 g     F .text	00000140 dw1000_dev_init
0001eb14 g     F .text	0000004e fcb_sector_hdr_read
0001c4b4 g     F .text	000000c4 conf_line_parse
00020840  w    F .text	00000002 .hidden __aeabi_ldiv0
0000cb4a g     F .text	0000000a dpl_mbuf_pool_init
0000b7c8 g     F .text	00000038 uwb_rng_pkg_down
0001fa5c g     F .text	0000003c crc8_calc
0000d278 g     F .text	00000054 conf_commit
0000fc10 g     F .text	0000000c sysinit_start
00020064 g     F .text	000001d0 .hidden __divdf3
000182a4 g     F .text	000000fc hal_timer_config
00009510 g     F .text	00000044 os_dev_open
00013b5c g     F .text	00000018 dw1000_tx_wait
00010ca8 g     F .text	00000018 split_mode_set
0001eb62 g     F .text	00000122 fcb_init
0001fe10 g     F .text	00000254 .hidden __muldf3
0000df04 g     F .text	00000008 console_is_init
0001a51c g     F .text	0000009c twr_ss_ack_pkg_init
0000cf44 g     F .text	00000058 conf_save
0000b488 g     F .text	000000c8 uwb_rng_twr_to_tof
00009ddc g     F .text	000000b4 os_sem_pend
0001c0c0 g     F .text	00000010 nmgr_os_groups_register
00018478 g     F .text	00000010 hal_watchdog_enable
0001dfc8 g     F .text	00000030 rwlock_init
0001ded6 g     F .text	0000005a rwlock_acquire_read
00021198 g     F .text	00000120 __ieee754_fmodf
000139a4 g     F .text	00000082 dw1000_write_tx_fctrl
0000a54c g     F .text	0000003e os_mqueue_put
0000988c g     F .text	0000004c os_msys_register
20003230 g     O .bss	00000004 g_os_idle_ctr
0001c644 g     F .text	00000044 flash_area_open
00013eba g     F .text	000000ac dw1000_set_rx_timeout
0000a7f2 g     F .text	0000007a os_mbuf_cmpf
0001cc10 g     F .text	00000024 log_walk_body
00008164  w    F .text	00000002 SAADC_IRQHandler
0001e154 g     F .text	0000002a boot_read_swap_state_by_id
00018b40 g     F .text	00000240 cir_json_write
00008ae8 g     F .text	00000022 uwb_mac_get_interface
0000c08e g     F .text	00000042 memset
00008020 g       .text	000000d8 __isr_vector
000087e0 g     F .text	000001dc main
00017e94 g     F .text	0000002c hal_spi_set_txrx_cb
0001ccd0 g     F .text	00000016 log_read_body
0001f024 g     F .text	00000034 fcb_getnext
200065d4 g     O .bss	00000008 g_spi0_sem
0000e218 g     F .text	00000050 console_out_nolock
000117f8 g     F .text	00000080 cbor_encode_uint
0000caa0 g     F .text	0000004a dpl_memblock_get
00019184 g     F .text	00000020 json_encode_array_start
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 WDT_IRQHandler
0001d7c4 g     F .text	00000034 modlog_register
0001f058 g     F .text	00000078 fcb_rotate
0000fc1c g     F .text	0000000c sysinit_end
0001d874 g     F .text	000000a0 modlog_init
0000ab16 g     F .text	00000046 SVC_Handler
20006720 g     O .bss	0000001c g_twr_ds_stat
00009596 g     F .text	0000000a os_eventq_inited
00020400 g     F .text	0000009e .hidden __truncdfsf2
000227a4 g     O .text	0000002c sysdown_cbs
00010560 g     F .text	000001d4 clocktime_to_timeval
0001b820 g     F .text	00000024 mgmt_group_register
00010b82 g     F .text	0000001c streamer_printf
0000af9a g     F .text	0000003e uwb_rng_remove_config
0000b800 g     F .text	0000018c rng_encode
0000ca20 g     F .text	00000080 dpl_mempool_init
0001fdb4 g     F .text	0000005a .hidden __aeabi_l2d
0001f34a g     F .text	00000052 hal_flash_read
0000d7b8 g     F .text	00000034 console_unlock
000096fc g     F .text	00000008 os_eventq_dflt_get
000183a0 g     F .text	00000030 hal_timer_read
0000ae4a g     F .text	0000002e uwb_rng_config
00009622 g     F .text	0000007e os_eventq_get
0001c754 g     F .text	00000028 flash_area_erase
0001a10c g     F .text	00000018 twr_ss_free
00019d04 g     F .text	00000098 twr_ds_ext_pkg_init
200066a0 g     O .bss	00000028 nrf52_hal_spi0
0001a850 g     F .text	00000090 twr_ss_ext_pkg_init
00015624 g     F .text	00000140 dw1000_configcwmode
00012222 g     F .text	00000008 uwb_dw1000_event_cnt_ctrl
0000a32e g     F .text	0000001a os_time_ms_to_ticks
0001cb2c g     F .text	0000000a log_walk
0000938c g     F .text	00000034 os_callout_wakeup_ticks
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
00014800 g     F .text	00000022 dw1000_read_time_tracking_offset
00013a26 g     F .text	00000136 dw1000_start_tx
00010b78 g     F .text	0000000a streamer_vprintf
20006914 g     O .bss	00000004 flash_map_entries
0000a744 g     F .text	000000ae os_mbuf_adj
00016f44 g     F .text	00000164 dw1000_cli_spi_backtrace
20006b7c g     O .bss	00000002 reboot_cnt
0000d03c g     F .text	0000001c conf_register
00009216 g     F .text	00000008 os_reboot
00008020 g       .imghdr	00000000 __text
0001fa58 g     F .text	00000004 crc8_init
0001c478 g     F .text	00000032 conf_fcb_kv_save
0001dada g     F .text	00000012 mfg_seek_next
0000c0e4 g     F .text	00000018 strcmp
0001c7b6 g     F .text	0000000e flash_area_read_is_empty
0000e1cc g     F .text	0000002c uart_console_blocking_mode
00009af0 g     F .text	0000000c os_sched_get_current_task
00011986 g     F .text	0000001c cbor_encoder_create_map
0000d9d8 g     F .text	00000084 console_write
00008458 g     F .text	000001d8 SystemInit
000093cc g     F .text	0000000a os_cputime_get32
0001c40c g     F .text	00000058 conf_fcb_src
00008164  w    F .text	00000002 RNG_IRQHandler
0000b170 g     F .text	00000230 uwb_rng_request
0001407c g     F .text	00000080 dw1000_mac_framefilter
0001cc6c g     F .text	00000020 log_read_hdr
00020244 g     F .text	0000007a .hidden __nedf2
0000fa30 g     F .text	0000001c stats_nmgr_register_group
0001917c g     F .text	00000008 json_encode_array_name
000096b8 g     F .text	00000042 os_eventq_remove
000133c4 g     F .text	0000015a hal_dw1000_write
0001390a g     F .text	0000009a dw1000_write_tx
0000ced4 g     F .text	00000068 conf_save_one
0000d0c6 g     F .text	000000ca conf_value_from_str
0001ca1c g     F .text	00000078 log_module_get_name
0001221a g     F .text	00000008 uwb_dw1000_set_autoack_delay
0001a930 g     F .text	00000020 sprintf
00009d18 g     F .text	00000022 os_sched
0001f7d0 g     F .text	00000040 hal_uart_start_rx
0001f33a g     F .text	00000010 hal_flash_erased_val
0001e5f0 g     F .text	000000e0 bootutil_img_validate
000176de g     F .text	00000058 _dw1000_otp_read
0000da64 g     F .text	00000008 console_non_blocking_mode
0000aa1c g     F .text	000000e0 os_mutex_pend
000121ce g     F .text	00000044 uwb_dw1000_mac_framefilter
00000000 g       .svc_table	00000000 SVC_Table
000208d0 g     F .text	00000078 asin
0001b42e g     F .text	000000b0 imgmgr_state_set_pending
00008164  w    F .text	00000002 RTC2_IRQHandler
00021b34 g     O .text	00000048 g_stats_map_rng_stat_section
00015604 g     F .text	00000010 dw1000_read_txtime
00018d80 g     F .text	0000003c json_encode_object_start
20010000 g       .bss	00000000 __StackTop
0001196e g     F .text	0000000e cbor_encode_text_string
00021558 g     F .text	0000000c nanf
00011024 g     F .text	00000218 cbor_read_array
20002c30 g     O .data	00000004 _impure_ptr
0001c238 g     F .text	00000002 config_pkg_init_stage2
0000a514 g     F .text	00000016 os_mqueue_init
0000a22c g     F .text	00000074 os_settimeofday
0001cde8 g     F .text	00000034 log_level_set
00016d04 g     F .text	000000d0 dw1000_cli_dump_address
00008164  w    F .text	00000002 PWM0_IRQHandler
00020948 g     F .text	00000004 atan2f
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
0001ab04 g     F .text	0000001e strsep
00017d48 g     F .text	00000038 hal_spi_config
0001c578 g     F .text	0000005a conf_line_make
0001a5d0 g     F .text	00000018 twr_ss_ack_pkg_down
0001c688 g     F .text	0000007c flash_area_to_sectors
00010eec g     F .text	00000058 base64_decode
00015614 g     F .text	0000000e dw1000_read_txtime_lo
0000b9d0 g     F .text	0000043c rng_json_write
00008aaa g     F .text	0000003e uwb_mac_remove_interface
00009330 g     F .text	0000005c os_callout_tick
00023c24 g     O .text	00000048 sysflash_map_dflt
0000e27c g     F .text	00000010 uart_console_is_init
200066c8 g     O .bss	0000001c nrf52_hal_timer0
000080f8 g       .text	00000000 __isr_vector_end
00017f6c g     F .text	000000f8 hal_spi_txrx_noblock
000091fc g     F .text	0000001a os_start
00015938 g     F .text	00000034 dw1000_phy_config_txrf
00008164  w    F .text	00000002 RTC1_IRQHandler
0001e270 g     F .text	00000086 boot_set_pending
00012de4 g     F .text	00000050 dw1000_dev_deinit
00017d80 g     F .text	0000004c hal_spi_enable
0001b6e4 g     F .text	0000009c imgmgr_state_write
000203c0 g     F .text	00000040 .hidden __aeabi_d2uiz
00021390 g     F .text	00000010 nan
0001f8ac g     F .text	000000f0 hal_uart_config
00008a60 g     F .text	0000004a uwb_mac_append_interface
00019db4 g     F .text	00000038 twr_ds_ext_pkg_down
00020eb4 g     F .text	00000198 __ieee754_sqrt
0000cf9c g     F .text	00000014 conf_store_init
00016034 g     F .text	00000056 dw1000_phy_event_cnt_read
00020844 g     F .text	0000008c ceilf
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
0000dc10 g     F .text	000002f4 console_handle_char
000157ee g     F .text	00000032 dw1000_phy_sysclk_LDE
000202e0 g     F .text	00000012 .hidden __aeabi_dcmpeq
0000ef40 g     F .text	00000044 shell_register
0000be3c g     F .text	00000020 fwrite
0001db68 g     F .text	00000010 mfg_open
200000f0 g     O .data	00000008 g_os_run_list
00014914 g     F .text	00000058 dw1000_mac_init
000155e6 g     F .text	00000010 dw1000_read_rxtime
000197b8 g     F .text	00000098 twr_ds_pkg_init
0000b7c4 g     F .text	00000002 uwb_rng_pkg_init2
00014310 g     F .text	000003ec dw1000_mac_config
000089bc g     F .text	00000034 NVIC_Relocate
0000ce34 g     F .text	00000028 conf_src_register
000117ee g     F .text	0000000a cbor_encoder_init
00010bc0 g     F .text	0000006c sysinit_app
200050e4 g     O .bss	00000004 os_flags
00018dbc g     F .text	00000054 json_encode_object_key
0001e1b4 g     F .text	00000016 boot_write_swap_type
0000a374 g     F .text	00000006 os_arch_restore_sr
20006694 g     O .bss	0000000c g_hal_os_tick
0000cb54 g     F .text	0000002e dpl_mbuf_get
00013bde g     F .text	000001ac dw1000_start_rx
00018e10 g     F .text	00000068 json_encode_object_entry
0001de0c g     F .text	00000054 log_reboot_pkg_init
2000fe50 g       *ABS*	000001b0 __StackLimit
0001b06c g     F .text	00000014 imgmgr_dfu_started
0001c790 g     F .text	00000026 flash_area_is_empty
20004288 g     O .bss	00000004 g_os_started
0001e8b0 g     F .text	00000086 mbedtls_sha256_update_ret
0001e4a0 g     F .text	000000d8 split_go
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00008164  w    F .text	00000002 NFCT_IRQHandler
0000fcf0 g     F .text	000002a8 uwbcfg_commit_to_inst
0001ad6c g     F .text	0000003c imgr_find_by_hash
0000c98a g     F .text	00000016 dpl_cputime_delay_ticks
00012010 g     F .text	0000003e cbor_value_leave_container
0001ecb6 g     F .text	00000032 fcb_append_to_scratch
0001b864 g     F .text	00000028 mgmt_cbuf_setoerr
00008448 g     F .text	00000010 SystemCoreClockUpdate
0001915c g     F .text	00000020 json_encode_object_finish
0000a5fe g     F .text	00000020 os_mbuf_free_chain
00020370 g     F .text	0000004e .hidden __aeabi_d2iz
0000a2a0 g     F .text	0000003c os_get_uptime
00009950 g     F .text	00000034 os_msys_init
0001ef9c g     F .text	00000088 fcb_getnext_nolock
0000a6c6 g     F .text	00000024 os_mbuf_off
00018aa4 g     F .text	00000054 cir_dw1000_pkg_down
20005d2b g     O .bss	00000001 g_is_output_nlip
0000ef84 g     F .text	00000084 shell_cmd_register
00008ed4 g     F .text	00000028 hal_gpio_irq_enable
0000a11c g     F .text	0000000c os_time_get
000213a0 g     F .text	000001a8 atanf
20006b08 g     O .bss	0000001c modlog_mapping_pool
00017ec0 g     F .text	000000ac hal_spi_txrx
000138a8 g     F .text	00000062 dw1000_read_rx
00013fca g     F .text	00000048 dw1000_sync_rxbufptrs
0000d23c g     F .text	0000003c conf_get_value
0001ca94 g     F .text	00000058 log_append_body
0000ae1c g     F .text	0000002e uwb_rng_free
0000a5b8 g     F .text	00000032 os_mbuf_get_pkthdr
20006990 g     O .bss	00000008 g_log_info
0000d190 g     F .text	00000078 conf_str_from_value
00020840  w    F .text	00000002 .hidden __aeabi_idiv0
00011654 g     F .text	00000050 cbor_mbuf_reader_init
00020344 g     F .text	0000002c .hidden __unorddf2
00010874 g     F .text	00000200 datetime_parse
0001ece8 g     F .text	000000fa fcb_append
0000d208 g     F .text	00000034 conf_set_value
000234b8 g     O .text	00000058 cmd_dw1000_param
0000c980 g     F .text	0000000a dpl_cputime_get32
0001caec g     F .text	00000040 log_printf
0002229c g     O .text	00000006 g_stats_map_stats
00009ea8 g     F .text	000000d8 os_task_init
0000ccda g     F .text	000000ae dpl_mbuf_adj
000081fc g     F .text	0000004c hal_system_clock_start
0000815a  w    F .text	00000002 BusFault_Handler
0001cd80 g     F .text	0000004c log_console_init
0000fb68 g     F .text	000000a0 sysdown
0001222a g     F .text	00000008 uwb_dw1000_event_cnt_read
0000df18 g     F .text	00000028 console_line_event_put
0000c0fc g     F .text	00000010 strlen
00009488 g     F .text	00000038 os_dev_create
000097c2 g     F .text	0000001e os_memblock_put_from_cb
0001df56 g     F .text	00000054 rwlock_acquire_write
00012818 g     F .text	000000b2 dw1000_dev_configure_sleep
00009584 g     F .text	00000012 os_eventq_init
0000a128 g     F .text	00000044 os_time_advance
0001309c g     F .text	00000328 hal_dw1000_read_noblock
000202d0 g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000d3e8 g     F .text	00000010 conf_cli_register
00020234 g     F .text	0000008a .hidden __gedf2
00009d3c g     F .text	0000002c os_sched_resort
20006b8c g     O .bss	00000004 boot_current_slot
000160b0 g     F .text	00000050 dw1000_pkg_down
00023754 g     O .text	0000000c g_stats_map_twr_ss_stat_section
0000cb20 g     F .text	0000002a dpl_memblock_put
0001f302 g     F .text	00000028 hal_flash_init
0001a124 g     F .text	00000038 twr_ss_pkg_down
0001a950 g     F .text	00000016 strchr
00008164  w    F .text	00000002 MWU_IRQHandler
0000f7ac g     F .text	00000044 stats_module_init
0001b844 g     F .text	00000020 mgmt_find_handler
0001fd60 g     F .text	00000042 .hidden __aeabi_f2d
00008158  w    F .text	00000002 MemoryManagement_Handler
0001277a g     F .text	0000009e dw1000_softreset
00012f34 g     F .text	00000168 hal_dw1000_read
00008648 g     F .text	0000005c uwb_config_updated
0001b080 g     F .text	00000014 imgmgr_dfu_pending
000237c0 g     O .text	0000001e g_stats_map_twr_ss_ack_stat_section
0000cbb6 g     F .text	000000a8 dpl_mbuf_append
0001cdcc g     F .text	0000001c log_level_get
0001e2f6 g     F .text	0000004c boot_set_confirmed
0000f2b0 g     F .text	00000014 shell_nlip_input_register
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
0001f56c g     F .text	00000032 hal_flash_isempty_no_buf
0000ff98 g     F .text	00000028 uwbcfg_commit
000094c0 g     F .text	0000002c os_dev_initialize_all
0001faa0 g     F .text	0000027a .hidden __subdf3
0000f1ac g     F .text	00000024 shell_nlip_clear_pkt
0001d838 g     F .text	0000003a modlog_printf
00013e56 g     F .text	00000012 dw1000_set_on_error_continue
00009b98 g     F .text	00000084 os_sched_remove
000235c4 g     O .text	00000006 g_stats_map_cir_dw1000_stat_section
0001ada8 g     F .text	00000048 imgmgr_find_best_area_id
200000f8 g     O .data	00000008 g_os_sleep_list
000204a0 g     F .text	00000000 .hidden __aeabi_ldivmod
00010bb8 g     F .text	00000008 streamer_console_get
00012154 g     F .text	00000068 hal_bsp_init
00009228 g     F .text	00000038 os_pkg_init
00014898 g     F .text	0000007c dw1000_tasks_init
00017dcc g     F .text	00000068 hal_spi_disable
00010354 g     F .text	00000180 strtod_soft
0000cfb8 g     F .text	00000060 conf_init
000099c0 g     F .text	00000010 os_sanity_check_init
0001f0d0 g     F .text	00000074 fcb_walk
0001f868 g     F .text	00000044 hal_uart_init
0000cc5e g     F .text	00000024 dpl_mbuf_off
000155b8 g     F .text	00000010 dw1000_read_systime
0000f728 g     F .text	0000002c stats_init
0000c8ac g     F .text	00000008 vfprintf
0001ab22 g     F .text	00000030 strpbrk
00014720 g     F .text	000000e0 dw1000_calc_clock_offset_ratio
00008e5c g     F .text	00000078 hal_gpio_irq_init
00015764 g     F .text	0000002e dw1000_phy_sysclk_XTAL
20004238 g     O .bss	00000050 g_os_main_task
00008efc g     F .text	0000001c hal_gpio_irq_disable
0000c000 g     F .text	0000002c free
0002104c g     F .text	0000014c __ieee754_atan2f
0001e1a0 g     F .text	00000014 boot_write_image_ok
00018af8 g     F .text	00000002 cir_pkg_init
0001e6dc g     F .text	000000a4 mbedtls_sha256_starts_ret
0000ffd0 g     F .text	00000054 uwbcfg_pkg_init
00015820 g     F .text	0000002a dw1000_phy_sysclk_SEQ
0000d7ec g     F .text	0000001e console_out



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0000ab17 	.word	0x0000ab17
	...
    8058:	0000ab5d 	.word	0x0000ab5d
    805c:	0000aba3 	.word	0x0000aba3
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f844 	bl	81b4 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20003060 	.word	0x20003060
    ldr     r3, =__bss_end__
    8134:	20006c28 	.word	0x20006c28
    ldr    r1, =__etext
    8138:	00023df8 	.word	0x00023df8
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20003060 	.word	0x20003060
    LDR     R0, =__HeapBase
    8144:	20006c28 	.word	0x20006c28
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	00008459 	.word	0x00008459
    LDR     R0, =_start
    8150:	00008631 	.word	0x00008631

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <_sbrk>:
void *
_sbrk(int incr)
{
    void *prev_brk;

    if (incr < 0) {
    8178:	1e03      	subs	r3, r0, #0
    817a:	db09      	blt.n	8190 <_sbrk+0x18>
            prev_brk = brk;
            brk -= incr;
        }
    } else {
        /* Allocating memory from the heap. */
        if (sbrkLimit - brk >= incr) {
    817c:	4a0c      	ldr	r2, [pc, #48]	; (81b0 <_sbrk+0x38>)
    817e:	6890      	ldr	r0, [r2, #8]
    8180:	6852      	ldr	r2, [r2, #4]
    8182:	1a12      	subs	r2, r2, r0
    8184:	429a      	cmp	r2, r3
    8186:	db0f      	blt.n	81a8 <_sbrk+0x30>
            prev_brk = brk;
            brk += incr;
    8188:	4403      	add	r3, r0
    818a:	4a09      	ldr	r2, [pc, #36]	; (81b0 <_sbrk+0x38>)
    818c:	6093      	str	r3, [r2, #8]
    818e:	4770      	bx	lr
        if (brk - incr < sbrkBase) {
    8190:	4a07      	ldr	r2, [pc, #28]	; (81b0 <_sbrk+0x38>)
    8192:	6890      	ldr	r0, [r2, #8]
    8194:	4403      	add	r3, r0
    8196:	6812      	ldr	r2, [r2, #0]
    8198:	4293      	cmp	r3, r2
    819a:	d302      	bcc.n	81a2 <_sbrk+0x2a>
            brk -= incr;
    819c:	4a04      	ldr	r2, [pc, #16]	; (81b0 <_sbrk+0x38>)
    819e:	6093      	str	r3, [r2, #8]
    81a0:	4770      	bx	lr
            prev_brk = (void *)-1;
    81a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    81a6:	4770      	bx	lr
        } else {
            prev_brk = (void *)-1;
    81a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }

    return prev_brk;
}
    81ac:	4770      	bx	lr
    81ae:	bf00      	nop
    81b0:	200000d8 	.word	0x200000d8

000081b4 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    81b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81b8:	2201      	movs	r2, #1
    81ba:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    81be:	4770      	bx	lr

000081c0 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    81c0:	4b02      	ldr	r3, [pc, #8]	; (81cc <hal_debugger_connected+0xc>)
    81c2:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
}
    81c6:	f000 0001 	and.w	r0, r0, #1
    81ca:	4770      	bx	lr
    81cc:	e000ed00 	.word	0xe000ed00

000081d0 <hal_system_reset>:
{
    81d0:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    81d2:	f7ff fff5 	bl	81c0 <hal_debugger_connected>
    81d6:	b100      	cbz	r0, 81da <hal_system_reset+0xa>
            asm("bkpt");
    81d8:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    81da:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81de:	4905      	ldr	r1, [pc, #20]	; (81f4 <hal_system_reset+0x24>)
    81e0:	68ca      	ldr	r2, [r1, #12]
    81e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81e6:	4b04      	ldr	r3, [pc, #16]	; (81f8 <hal_system_reset+0x28>)
    81e8:	4313      	orrs	r3, r2
    81ea:	60cb      	str	r3, [r1, #12]
    81ec:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81f0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    81f2:	e7fd      	b.n	81f0 <hal_system_reset+0x20>
    81f4:	e000ed00 	.word	0xe000ed00
    81f8:	05fa0004 	.word	0x05fa0004

000081fc <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8200:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    8204:	4b0f      	ldr	r3, [pc, #60]	; (8244 <hal_system_clock_start+0x48>)
    8206:	4013      	ands	r3, r2
    8208:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    820c:	d018      	beq.n	8240 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    820e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8212:	2201      	movs	r2, #1
    8214:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    8216:	2100      	movs	r1, #0
    8218:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    821c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    8220:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    8222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8226:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    822a:	2b00      	cmp	r3, #0
    822c:	d0f9      	beq.n	8222 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    822e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8232:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    8236:	4b03      	ldr	r3, [pc, #12]	; (8244 <hal_system_clock_start+0x48>)
    8238:	4013      	ands	r3, r2
    823a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    823e:	d1f0      	bne.n	8222 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8240:	4770      	bx	lr
    8242:	bf00      	nop
    8244:	00010003 	.word	0x00010003

00008248 <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    824c:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8250:	2b06      	cmp	r3, #6
    8252:	d001      	beq.n	8258 <errata_16+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8254:	2000      	movs	r0, #0
    8256:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8258:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    825c:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    8260:	f013 0f0f 	tst.w	r3, #15
    8264:	d109      	bne.n	827a <errata_16+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8266:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    826a:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    826e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8272:	2b30      	cmp	r3, #48	; 0x30
    8274:	d003      	beq.n	827e <errata_16+0x36>
    return false;
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
    827a:	2000      	movs	r0, #0
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
}
    8280:	4770      	bx	lr

00008282 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8282:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8286:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    828a:	2b06      	cmp	r3, #6
    828c:	d001      	beq.n	8292 <errata_31+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    828e:	2000      	movs	r0, #0
    8290:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8292:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8296:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    829a:	f013 0f0f 	tst.w	r3, #15
    829e:	d10d      	bne.n	82bc <errata_31+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82a0:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82a4:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    82a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ac:	2b30      	cmp	r3, #48	; 0x30
    82ae:	d007      	beq.n	82c0 <errata_31+0x3e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82b0:	2b40      	cmp	r3, #64	; 0x40
    82b2:	d007      	beq.n	82c4 <errata_31+0x42>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82b4:	2b50      	cmp	r3, #80	; 0x50
    82b6:	d007      	beq.n	82c8 <errata_31+0x46>
    return false;
    82b8:	2000      	movs	r0, #0
    82ba:	4770      	bx	lr
    82bc:	2000      	movs	r0, #0
    82be:	4770      	bx	lr
            return true;
    82c0:	2001      	movs	r0, #1
    82c2:	4770      	bx	lr
            return true;
    82c4:	2001      	movs	r0, #1
    82c6:	4770      	bx	lr
            return true;
    82c8:	2001      	movs	r0, #1
}
    82ca:	4770      	bx	lr

000082cc <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82cc:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82d0:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_32+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82e0:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    82e4:	f013 0f0f 	tst.w	r3, #15
    82e8:	d109      	bne.n	82fe <errata_32+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82ea:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82ee:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    82f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82f6:	2b30      	cmp	r3, #48	; 0x30
    82f8:	d003      	beq.n	8302 <errata_32+0x36>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
}
    8304:	4770      	bx	lr

00008306 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8306:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    830a:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    830e:	2b06      	cmp	r3, #6
    8310:	d001      	beq.n	8316 <errata_36+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8312:	2000      	movs	r0, #0
    8314:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8316:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    831a:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    831e:	f013 0f0f 	tst.w	r3, #15
    8322:	d10d      	bne.n	8340 <errata_36+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8324:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8328:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    832c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8330:	2b30      	cmp	r3, #48	; 0x30
    8332:	d007      	beq.n	8344 <errata_36+0x3e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    8334:	2b40      	cmp	r3, #64	; 0x40
    8336:	d007      	beq.n	8348 <errata_36+0x42>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8338:	2b50      	cmp	r3, #80	; 0x50
    833a:	d007      	beq.n	834c <errata_36+0x46>
    return false;
    833c:	2000      	movs	r0, #0
    833e:	4770      	bx	lr
    8340:	2000      	movs	r0, #0
    8342:	4770      	bx	lr
            return true;
    8344:	2001      	movs	r0, #1
    8346:	4770      	bx	lr
            return true;
    8348:	2001      	movs	r0, #1
    834a:	4770      	bx	lr
            return true;
    834c:	2001      	movs	r0, #1
}
    834e:	4770      	bx	lr

00008350 <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8350:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8354:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8358:	2b06      	cmp	r3, #6
    835a:	d001      	beq.n	8360 <errata_37+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    835c:	2000      	movs	r0, #0
    835e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8360:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8364:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d109      	bne.n	8382 <errata_37+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8372:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    8376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    837a:	2b30      	cmp	r3, #48	; 0x30
    837c:	d003      	beq.n	8386 <errata_37+0x36>
    return false;
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
    8382:	2000      	movs	r0, #0
    8384:	4770      	bx	lr
            return true;
    8386:	2001      	movs	r0, #1
}
    8388:	4770      	bx	lr

0000838a <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    838a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    838e:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8392:	2b06      	cmp	r3, #6
    8394:	d001      	beq.n	839a <errata_57+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8396:	2000      	movs	r0, #0
    8398:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    839a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    839e:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    83a2:	f013 0f0f 	tst.w	r3, #15
    83a6:	d109      	bne.n	83bc <errata_57+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83a8:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83ac:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    83b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b4:	2b30      	cmp	r3, #48	; 0x30
    83b6:	d003      	beq.n	83c0 <errata_57+0x36>
    return false;
    83b8:	2000      	movs	r0, #0
    83ba:	4770      	bx	lr
    83bc:	2000      	movs	r0, #0
    83be:	4770      	bx	lr
            return true;
    83c0:	2001      	movs	r0, #1
}
    83c2:	4770      	bx	lr

000083c4 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83c4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83c8:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    83cc:	2b06      	cmp	r3, #6
    83ce:	d001      	beq.n	83d4 <errata_66+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d0:	2000      	movs	r0, #0
    83d2:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83d8:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    83dc:	f013 0f0f 	tst.w	r3, #15
    83e0:	d109      	bne.n	83f6 <errata_66+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83e2:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83e6:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b50      	cmp	r3, #80	; 0x50
    83f0:	d003      	beq.n	83fa <errata_66+0x36>
    return false;
    83f2:	2000      	movs	r0, #0
    83f4:	4770      	bx	lr
    83f6:	2000      	movs	r0, #0
    83f8:	4770      	bx	lr
            return true;
    83fa:	2001      	movs	r0, #1
}
    83fc:	4770      	bx	lr

000083fe <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83fe:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8402:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8406:	2b06      	cmp	r3, #6
    8408:	d001      	beq.n	840e <errata_108+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    840a:	2000      	movs	r0, #0
    840c:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    840e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8412:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    8416:	f013 0f0f 	tst.w	r3, #15
    841a:	d10d      	bne.n	8438 <errata_108+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    841c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8420:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    8424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8428:	2b30      	cmp	r3, #48	; 0x30
    842a:	d007      	beq.n	843c <errata_108+0x3e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    842c:	2b40      	cmp	r3, #64	; 0x40
    842e:	d007      	beq.n	8440 <errata_108+0x42>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8430:	2b50      	cmp	r3, #80	; 0x50
    8432:	d007      	beq.n	8444 <errata_108+0x46>
    return false;
    8434:	2000      	movs	r0, #0
    8436:	4770      	bx	lr
    8438:	2000      	movs	r0, #0
    843a:	4770      	bx	lr
            return true;
    843c:	2001      	movs	r0, #1
    843e:	4770      	bx	lr
            return true;
    8440:	2001      	movs	r0, #1
    8442:	4770      	bx	lr
            return true;
    8444:	2001      	movs	r0, #1
}
    8446:	4770      	bx	lr

00008448 <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    8448:	4b01      	ldr	r3, [pc, #4]	; (8450 <SystemCoreClockUpdate+0x8>)
    844a:	4a02      	ldr	r2, [pc, #8]	; (8454 <SystemCoreClockUpdate+0xc>)
    844c:	601a      	str	r2, [r3, #0]
}
    844e:	4770      	bx	lr
    8450:	200000e4 	.word	0x200000e4
    8454:	03d09000 	.word	0x03d09000

00008458 <SystemInit>:
{
    8458:	b508      	push	{r3, lr}
    if (errata_16()){
    845a:	f7ff fef5 	bl	8248 <errata_16>
    845e:	b110      	cbz	r0, 8466 <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8460:	4b6c      	ldr	r3, [pc, #432]	; (8614 <SystemInit+0x1bc>)
    8462:	4a6d      	ldr	r2, [pc, #436]	; (8618 <SystemInit+0x1c0>)
    8464:	675a      	str	r2, [r3, #116]	; 0x74
    if (errata_31()){
    8466:	f7ff ff0c 	bl	8282 <errata_31>
    846a:	b148      	cbz	r0, 8480 <SystemInit+0x28>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    846c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8470:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    8474:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    847c:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    if (errata_32()){
    8480:	f7ff ff24 	bl	82cc <errata_32>
    8484:	b130      	cbz	r0, 8494 <SystemInit+0x3c>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8486:	4a65      	ldr	r2, [pc, #404]	; (861c <SystemInit+0x1c4>)
    8488:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    848c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    8490:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    if (errata_36()){
    8494:	f7ff ff37 	bl	8306 <errata_36>
    8498:	b140      	cbz	r0, 84ac <SystemInit+0x54>
        NRF_CLOCK->EVENTS_DONE = 0;
    849a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    849e:	2200      	movs	r2, #0
    84a0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    84a4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    84a8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    84ac:	f7ff ff50 	bl	8350 <errata_37>
    84b0:	b120      	cbz	r0, 84bc <SystemInit+0x64>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    84b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    84b6:	2203      	movs	r2, #3
    84b8:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    if (errata_57()){
    84bc:	f7ff ff65 	bl	838a <errata_57>
    84c0:	b160      	cbz	r0, 84dc <SystemInit+0x84>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    84c2:	4b57      	ldr	r3, [pc, #348]	; (8620 <SystemInit+0x1c8>)
    84c4:	2205      	movs	r2, #5
    84c6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    84ca:	2201      	movs	r2, #1
    84cc:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    84d0:	2200      	movs	r2, #0
    84d2:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    84d6:	223f      	movs	r2, #63	; 0x3f
    84d8:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    if (errata_66()){
    84dc:	f7ff ff72 	bl	83c4 <errata_66>
    84e0:	2800      	cmp	r0, #0
    84e2:	d046      	beq.n	8572 <SystemInit+0x11a>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84e8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ec:	4b4d      	ldr	r3, [pc, #308]	; (8624 <SystemInit+0x1cc>)
    84ee:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84f2:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84f6:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84fa:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84fe:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8502:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    8506:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    850a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    850e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8512:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    8516:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    851a:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    851e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8522:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    8526:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    852a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    852e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8532:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    8536:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    853a:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    853e:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8542:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8546:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    854a:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    854e:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8552:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8556:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    855a:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    855e:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8562:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8566:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    856a:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    856e:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8572:	f7ff ff44 	bl	83fe <errata_108>
    8576:	b148      	cbz	r0, 858c <SystemInit+0x134>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    8578:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    857c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    8580:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8588:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    858c:	4a23      	ldr	r2, [pc, #140]	; (861c <SystemInit+0x1c4>)
    858e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    8592:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8596:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    859a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    859e:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    85a2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    85a6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    85aa:	f013 0f01 	tst.w	r3, #1
    85ae:	d104      	bne.n	85ba <SystemInit+0x162>
    SystemCoreClockUpdate();
    85b0:	f7ff ff4a 	bl	8448 <SystemCoreClockUpdate>
    NVIC_Relocate();
    85b4:	f000 fa02 	bl	89bc <NVIC_Relocate>
}
    85b8:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    85ba:	4b1b      	ldr	r3, [pc, #108]	; (8628 <SystemInit+0x1d0>)
    85bc:	2201      	movs	r2, #1
    85be:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85c2:	4b19      	ldr	r3, [pc, #100]	; (8628 <SystemInit+0x1d0>)
    85c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85c8:	2b00      	cmp	r3, #0
    85ca:	d0fa      	beq.n	85c2 <SystemInit+0x16a>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    85cc:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    85d0:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    85d4:	f023 0301 	bic.w	r3, r3, #1
    85d8:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85dc:	4b12      	ldr	r3, [pc, #72]	; (8628 <SystemInit+0x1d0>)
    85de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85e2:	2b00      	cmp	r3, #0
    85e4:	d0fa      	beq.n	85dc <SystemInit+0x184>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85e6:	4b10      	ldr	r3, [pc, #64]	; (8628 <SystemInit+0x1d0>)
    85e8:	2200      	movs	r2, #0
    85ea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85ee:	4b0e      	ldr	r3, [pc, #56]	; (8628 <SystemInit+0x1d0>)
    85f0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85f4:	2b00      	cmp	r3, #0
    85f6:	d0fa      	beq.n	85ee <SystemInit+0x196>
  __ASM volatile ("dsb 0xF":::"memory");
    85f8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85fc:	4907      	ldr	r1, [pc, #28]	; (861c <SystemInit+0x1c4>)
    85fe:	68ca      	ldr	r2, [r1, #12]
    8600:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8604:	4b09      	ldr	r3, [pc, #36]	; (862c <SystemInit+0x1d4>)
    8606:	4313      	orrs	r3, r2
    8608:	60cb      	str	r3, [r1, #12]
    860a:	f3bf 8f4f 	dsb	sy
    __NOP();
    860e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8610:	e7fd      	b.n	860e <SystemInit+0x1b6>
    8612:	bf00      	nop
    8614:	4007c000 	.word	0x4007c000
    8618:	baadf00d 	.word	0xbaadf00d
    861c:	e000ed00 	.word	0xe000ed00
    8620:	40005000 	.word	0x40005000
    8624:	4000c000 	.word	0x4000c000
    8628:	4001e000 	.word	0x4001e000
    862c:	05fa0004 	.word	0x05fa0004

00008630 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8630:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8632:	4803      	ldr	r0, [pc, #12]	; (8640 <_start+0x10>)
    8634:	f000 fd86 	bl	9144 <os_init>
    os_start();
    8638:	f000 fde0 	bl	91fc <os_start>
#endif
}
    863c:	bd08      	pop	{r3, pc}
    863e:	bf00      	nop
    8640:	000087e1 	.word	0x000087e1

00008644 <_init>:

void
_init(void)
{
}
    8644:	4770      	bx	lr
	...

00008648 <uwb_config_updated>:
 * Called from the main event queue as a result of the uwbcfg packet
 * having received a commit/load of new uwb configuration.
 */
int
uwb_config_updated()
{
    8648:	b538      	push	{r3, r4, r5, lr}
    struct uwb_dev *inst = uwb_dev_idx_lookup(0);
    864a:	2000      	movs	r0, #0
    864c:	f000 f9d8 	bl	8a00 <uwb_dev_idx_lookup>
    8650:	4604      	mov	r4, r0
    struct uwb_rng_instance * rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(
    8652:	2104      	movs	r1, #4
    8654:	f000 fa59 	bl	8b0a <uwb_mac_find_cb_inst_ptr>
        inst, UWBEXT_RNG);
    assert(rng);
    8658:	b1e0      	cbz	r0, 8694 <uwb_config_updated+0x4c>
    865a:	4605      	mov	r5, r0
 *
 */
UWB_API_IMPL_PREFIX struct uwb_dev_status
uwb_mac_config(struct uwb_dev * dev, struct uwb_dev_config * config)
{
    return (dev->uw_funcs->uf_mac_config(dev, config));
    865c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    865e:	681b      	ldr	r3, [r3, #0]
    8660:	2100      	movs	r1, #0
    8662:	4620      	mov	r0, r4
    8664:	4798      	blx	r3
 * @return void
 */
UWB_API_IMPL_PREFIX void
uwb_txrf_config(struct uwb_dev * dev, struct uwb_dev_txrf_config *config)
{
    return (dev->uw_funcs->uf_txrf_config(dev, config));
    8666:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8668:	685b      	ldr	r3, [r3, #4]
    866a:	f504 61a5 	add.w	r1, r4, #1320	; 0x528
    866e:	4620      	mov	r0, r4
    8670:	4798      	blx	r3
    uwb_mac_config(inst, NULL);
    uwb_txrf_config(inst, &inst->config.txrf);

    if (inst->role&UWB_ROLE_ANCHOR) {
    8672:	f8b4 34b4 	ldrh.w	r3, [r4, #1204]	; 0x4b4
    8676:	f013 0f04 	tst.w	r3, #4
    867a:	d009      	beq.n	8690 <uwb_config_updated+0x48>
 * @return void
 */
UWB_API_IMPL_PREFIX void
uwb_phy_forcetrxoff(struct uwb_dev* dev)
{
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    867c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    867e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    8682:	4620      	mov	r0, r4
    8684:	4798      	blx	r3
        uwb_phy_forcetrxoff(inst);
        uwb_rng_listen(rng, 0xfffff, UWB_NONBLOCKING);
    8686:	2201      	movs	r2, #1
    8688:	4905      	ldr	r1, [pc, #20]	; (86a0 <uwb_config_updated+0x58>)
    868a:	4628      	mov	r0, r5
    868c:	f002 fe88 	bl	b3a0 <uwb_rng_listen>
    } else {
        /* Do nothing */
    }
    return 0;
}
    8690:	2000      	movs	r0, #0
    8692:	bd38      	pop	{r3, r4, r5, pc}
    assert(rng);
    8694:	2300      	movs	r3, #0
    8696:	461a      	mov	r2, r3
    8698:	4619      	mov	r1, r3
    869a:	4618      	mov	r0, r3
    869c:	f000 fc5a 	bl	8f54 <__assert_func>
    86a0:	000fffff 	.word	0x000fffff

000086a4 <rx_timeout_cb>:
{
    86a4:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance*)cbs->inst_ptr;
    86a6:	684c      	ldr	r4, [r1, #4]
    if (inst->role&UWB_ROLE_ANCHOR) {
    86a8:	f8b0 34b4 	ldrh.w	r3, [r0, #1204]	; 0x4b4
    86ac:	f013 0f04 	tst.w	r3, #4
    86b0:	d008      	beq.n	86c4 <rx_timeout_cb+0x20>
    86b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    86b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    86b8:	4798      	blx	r3
        uwb_rng_listen(rng, 0xfffff, UWB_NONBLOCKING);
    86ba:	2201      	movs	r2, #1
    86bc:	4902      	ldr	r1, [pc, #8]	; (86c8 <rx_timeout_cb+0x24>)
    86be:	4620      	mov	r0, r4
    86c0:	f002 fe6e 	bl	b3a0 <uwb_rng_listen>
}
    86c4:	2001      	movs	r0, #1
    86c6:	bd10      	pop	{r4, pc}
    86c8:	000fffff 	.word	0x000fffff

000086cc <slot_complete_cb>:
{
    86cc:	b510      	push	{r4, lr}
    assert(ev != NULL);
    86ce:	b158      	cbz	r0, 86e8 <slot_complete_cb+0x1c>
    86d0:	4604      	mov	r4, r0
    hal_gpio_toggle(LED_BLINK_PIN);
    86d2:	201f      	movs	r0, #31
    86d4:	f000 fbb5 	bl	8e42 <hal_gpio_toggle>
}

static inline void *
dpl_event_get_arg(struct dpl_event *ev)
{
    return ev->ev.ev_arg;
    86d8:	68a0      	ldr	r0, [r4, #8]
    struct uwb_dev * inst = rng->dev_inst;
    86da:	6803      	ldr	r3, [r0, #0]
    if (inst->role&UWB_ROLE_ANCHOR) {
    86dc:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
    86e0:	f013 0f04 	tst.w	r3, #4
    86e4:	d106      	bne.n	86f4 <slot_complete_cb+0x28>
}
    86e6:	bd10      	pop	{r4, pc}
    assert(ev != NULL);
    86e8:	2300      	movs	r3, #0
    86ea:	461a      	mov	r2, r3
    86ec:	4619      	mov	r1, r3
    86ee:	4618      	mov	r0, r3
    86f0:	f000 fc30 	bl	8f54 <__assert_func>
        uwb_rng_listen(rng, 0xfffff, UWB_NONBLOCKING);
    86f4:	2201      	movs	r2, #1
    86f6:	4902      	ldr	r1, [pc, #8]	; (8700 <slot_complete_cb+0x34>)
    86f8:	f002 fe52 	bl	b3a0 <uwb_rng_listen>
}
    86fc:	e7f3      	b.n	86e6 <slot_complete_cb+0x1a>
    86fe:	bf00      	nop
    8700:	000fffff 	.word	0x000fffff

00008704 <uwb_ev_cb>:
{
    8704:	b510      	push	{r4, lr}
    8706:	b088      	sub	sp, #32
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)ev->ev_arg;
    8708:	6884      	ldr	r4, [r0, #8]
    struct uwb_dev * inst = rng->dev_inst;
    870a:	6823      	ldr	r3, [r4, #0]
    if (inst->role&UWB_ROLE_ANCHOR) {
    870c:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
    8710:	f013 0f04 	tst.w	r3, #4
    8714:	d00f      	beq.n	8736 <uwb_ev_cb+0x32>
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
    8716:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
        if(dpl_sem_get_count(&rng->sem) == 1){
    871a:	2b01      	cmp	r3, #1
    871c:	d005      	beq.n	872a <uwb_ev_cb+0x26>
    os_callout_reset(&tx_callout, OS_TICKS_PER_SEC/60);
    871e:	2102      	movs	r1, #2
    8720:	481b      	ldr	r0, [pc, #108]	; (8790 <uwb_ev_cb+0x8c>)
    8722:	f000 fdc9 	bl	92b8 <os_callout_reset>
}
    8726:	b008      	add	sp, #32
    8728:	bd10      	pop	{r4, pc}
            uwb_rng_listen(rng, 0xfffff, UWB_NONBLOCKING);
    872a:	2201      	movs	r2, #1
    872c:	4919      	ldr	r1, [pc, #100]	; (8794 <uwb_ev_cb+0x90>)
    872e:	4620      	mov	r0, r4
    8730:	f002 fe36 	bl	b3a0 <uwb_rng_listen>
    8734:	e7f3      	b.n	871e <uwb_ev_cb+0x1a>
        int mode_v[8] = {0}, mode_i=0, mode=-1;
    8736:	2220      	movs	r2, #32
    8738:	2100      	movs	r1, #0
    873a:	4668      	mov	r0, sp
    873c:	f003 fca7 	bl	c08e <memset>
        mode_v[mode_i++] = UWB_DATA_CODE_SS_TWR;
    8740:	f44f 7388 	mov.w	r3, #272	; 0x110
    8744:	9300      	str	r3, [sp, #0]
        mode_v[mode_i++] = UWB_DATA_CODE_SS_TWR_EXT;
    8746:	f44f 738a 	mov.w	r3, #276	; 0x114
    874a:	9301      	str	r3, [sp, #4]
        mode_v[mode_i++] = UWB_DATA_CODE_SS_TWR_ACK;
    874c:	f44f 738c 	mov.w	r3, #280	; 0x118
    8750:	9302      	str	r3, [sp, #8]
        mode_v[mode_i++] = UWB_DATA_CODE_DS_TWR;
    8752:	f44f 7390 	mov.w	r3, #288	; 0x120
    8756:	9303      	str	r3, [sp, #12]
        mode_v[mode_i++] = UWB_DATA_CODE_DS_TWR_EXT;
    8758:	f240 1325 	movw	r3, #293	; 0x125
    875c:	9304      	str	r3, [sp, #16]
        if (++last_used_mode >= mode_i) last_used_mode=0;
    875e:	4a0e      	ldr	r2, [pc, #56]	; (8798 <uwb_ev_cb+0x94>)
    8760:	6813      	ldr	r3, [r2, #0]
    8762:	3301      	adds	r3, #1
    8764:	6013      	str	r3, [r2, #0]
    8766:	2b04      	cmp	r3, #4
    8768:	dd02      	ble.n	8770 <uwb_ev_cb+0x6c>
    876a:	4613      	mov	r3, r2
    876c:	2200      	movs	r2, #0
    876e:	601a      	str	r2, [r3, #0]
        mode = mode_v[last_used_mode];
    8770:	4b09      	ldr	r3, [pc, #36]	; (8798 <uwb_ev_cb+0x94>)
    8772:	681b      	ldr	r3, [r3, #0]
    8774:	aa08      	add	r2, sp, #32
    8776:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    877a:	f853 2c20 	ldr.w	r2, [r3, #-32]
        if (mode>0) {
    877e:	2a00      	cmp	r2, #0
    8780:	ddcd      	ble.n	871e <uwb_ev_cb+0x1a>
            uwb_rng_request(rng, MYNEWT_VAL(ANCHOR_ADDRESS), mode);
    8782:	b292      	uxth	r2, r2
    8784:	f241 2134 	movw	r1, #4660	; 0x1234
    8788:	4620      	mov	r0, r4
    878a:	f002 fcf1 	bl	b170 <uwb_rng_request>
    878e:	e7c6      	b.n	871e <uwb_ev_cb+0x1a>
    8790:	20003078 	.word	0x20003078
    8794:	000fffff 	.word	0x000fffff
    8798:	20003064 	.word	0x20003064

0000879c <complete_cb>:
{
    879c:	b508      	push	{r3, lr}
    if(inst->fctrl != FCNTL_IEEE_RANGE_16){
    879e:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
    87a2:	f648 0341 	movw	r3, #34881	; 0x8841
    87a6:	429a      	cmp	r2, r3
    87a8:	d001      	beq.n	87ae <complete_cb+0x12>
        return false;
    87aa:	2000      	movs	r0, #0
}
    87ac:	bd08      	pop	{r3, pc}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance*)cbs->inst_ptr;
    87ae:	684a      	ldr	r2, [r1, #4]
    g_idx_latest = (rng->idx)%rng->nframes; // Store valid frame pointer
    87b0:	f8b2 3076 	ldrh.w	r3, [r2, #118]	; 0x76
    87b4:	f8b2 207a 	ldrh.w	r2, [r2, #122]	; 0x7a
    87b8:	fbb3 f1f2 	udiv	r1, r3, r2
    87bc:	fb02 3311 	mls	r3, r2, r1, r3
    87c0:	4a04      	ldr	r2, [pc, #16]	; (87d4 <complete_cb+0x38>)
    87c2:	8013      	strh	r3, [r2, #0]
    return (struct dpl_eventq *) os_eventq_dflt_get();
    87c4:	f000 ff9a 	bl	96fc <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    87c8:	4903      	ldr	r1, [pc, #12]	; (87d8 <complete_cb+0x3c>)
    87ca:	f000 fee9 	bl	95a0 <os_eventq_put>
    return true;
    87ce:	2001      	movs	r0, #1
    87d0:	e7ec      	b.n	87ac <complete_cb+0x10>
    87d2:	bf00      	nop
    87d4:	20003060 	.word	0x20003060
    87d8:	20003068 	.word	0x20003068
    87dc:	00000000 	.word	0x00000000

000087e0 <main>:

int main(int argc, char **argv){
    87e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    87e2:	b093      	sub	sp, #76	; 0x4c
    int rc;

    sysinit();
    87e4:	f007 fa14 	bl	fc10 <sysinit_start>
    87e8:	f008 f9ea 	bl	10bc0 <sysinit_app>
    87ec:	f007 fa16 	bl	fc1c <sysinit_end>
    /* Register callback for UWB configuration changes */
    struct uwbcfg_cbs uwb_cb = {
    87f0:	2400      	movs	r4, #0
    87f2:	9410      	str	r4, [sp, #64]	; 0x40
    87f4:	9411      	str	r4, [sp, #68]	; 0x44
    87f6:	4b60      	ldr	r3, [pc, #384]	; (8978 <main+0x198>)
    87f8:	9311      	str	r3, [sp, #68]	; 0x44
        .uc_update = uwb_config_updated
    };
    uwbcfg_register(&uwb_cb);
    87fa:	a810      	add	r0, sp, #64	; 0x40
    87fc:	f007 fbe0 	bl	ffc0 <uwbcfg_register>
    /* Load config from flash */
    conf_load();
    8800:	f004 fb32 	bl	ce68 <conf_load>

    hal_gpio_init_out(LED_BLINK_PIN, 1);
    8804:	2101      	movs	r1, #1
    8806:	201f      	movs	r0, #31
    8808:	f000 fad4 	bl	8db4 <hal_gpio_init_out>
    hal_gpio_init_out(LED_1, 1);
    880c:	2101      	movs	r1, #1
    880e:	201e      	movs	r0, #30
    8810:	f000 fad0 	bl	8db4 <hal_gpio_init_out>
    hal_gpio_init_out(LED_3, 1);
    8814:	2101      	movs	r1, #1
    8816:	2016      	movs	r0, #22
    8818:	f000 facc 	bl	8db4 <hal_gpio_init_out>

    struct uwb_dev *udev = uwb_dev_idx_lookup(0);
    881c:	4620      	mov	r0, r4
    881e:	f000 f8ef 	bl	8a00 <uwb_dev_idx_lookup>
    8822:	4604      	mov	r4, r0
    struct uwb_rng_instance * rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
    8824:	2104      	movs	r1, #4
    8826:	f000 f970 	bl	8b0a <uwb_mac_find_cb_inst_ptr>
    assert(rng);
    882a:	2800      	cmp	r0, #0
    882c:	f000 809a 	beq.w	8964 <main+0x184>
    8830:	4606      	mov	r6, r0
    struct uwb_mac_interface cbs = (struct uwb_mac_interface){
    8832:	223c      	movs	r2, #60	; 0x3c
    8834:	2100      	movs	r1, #0
    8836:	a801      	add	r0, sp, #4
    8838:	f003 fc29 	bl	c08e <memset>
    883c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    8840:	f8ad 3006 	strh.w	r3, [sp, #6]
    8844:	9602      	str	r6, [sp, #8]
    8846:	4b4d      	ldr	r3, [pc, #308]	; (897c <main+0x19c>)
    8848:	9307      	str	r3, [sp, #28]
    884a:	4b4d      	ldr	r3, [pc, #308]	; (8980 <main+0x1a0>)
    884c:	930c      	str	r3, [sp, #48]	; 0x30
        .id = UWBEXT_APP0,
        .inst_ptr = rng,
        .complete_cb = complete_cb,
        .rx_timeout_cb = rx_timeout_cb,
   };
    uwb_mac_append_interface(udev, &cbs);
    884e:	a901      	add	r1, sp, #4
    8850:	4620      	mov	r0, r4
    8852:	f000 f905 	bl	8a60 <uwb_mac_append_interface>

    uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    8856:	f000 fdb9 	bl	93cc <os_cputime_get32>
    885a:	4605      	mov	r5, r0
    printf("{\"utime\": %lu,\"exec\": \"%s\"}\n",utime,__FILE__);
    885c:	4a49      	ldr	r2, [pc, #292]	; (8984 <main+0x1a4>)
    885e:	4601      	mov	r1, r0
    8860:	4849      	ldr	r0, [pc, #292]	; (8988 <main+0x1a8>)
    8862:	f004 f827 	bl	c8b4 <printf>
    printf("{\"device_id\"=\"%lX\"",udev->device_id);
    8866:	f8d4 14c8 	ldr.w	r1, [r4, #1224]	; 0x4c8
    886a:	4848      	ldr	r0, [pc, #288]	; (898c <main+0x1ac>)
    886c:	f004 f822 	bl	c8b4 <printf>
    printf(",\"panid=\"%X\"",udev->pan_id);
    8870:	f8b4 14c0 	ldrh.w	r1, [r4, #1216]	; 0x4c0
    8874:	4846      	ldr	r0, [pc, #280]	; (8990 <main+0x1b0>)
    8876:	f004 f81d 	bl	c8b4 <printf>
    printf(",\"addr\"=\"%X\"",udev->uid);
    887a:	f8b4 14b6 	ldrh.w	r1, [r4, #1206]	; 0x4b6
    887e:	4845      	ldr	r0, [pc, #276]	; (8994 <main+0x1b4>)
    8880:	f004 f818 	bl	c8b4 <printf>
    printf(",\"part_id\"=\"%lX\"",(uint32_t)(udev->euid&0xffffffff));
    8884:	f8d4 14b8 	ldr.w	r1, [r4, #1208]	; 0x4b8
    8888:	4843      	ldr	r0, [pc, #268]	; (8998 <main+0x1b8>)
    888a:	f004 f813 	bl	c8b4 <printf>
    printf(",\"lot_id\"=\"%lX\"}\n",(uint32_t)(udev->euid>>32));
    888e:	f8d4 14bc 	ldr.w	r1, [r4, #1212]	; 0x4bc
    8892:	4842      	ldr	r0, [pc, #264]	; (899c <main+0x1bc>)
    8894:	f004 f80e 	bl	c8b4 <printf>
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    8898:	6a63      	ldr	r3, [r4, #36]	; 0x24
    889a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    889c:	211f      	movs	r1, #31
    889e:	4620      	mov	r0, r4
    88a0:	4798      	blx	r3
    88a2:	4602      	mov	r2, r0
    printf("{\"utime\": %lu,\"msg\": \"frame_duration = %d usec\"}\n",utime, uwb_phy_frame_duration(udev, sizeof(twr_frame_final_t)));
    88a4:	4629      	mov	r1, r5
    88a6:	483e      	ldr	r0, [pc, #248]	; (89a0 <main+0x1c0>)
    88a8:	f004 f804 	bl	c8b4 <printf>
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    88ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    88ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    88b2:	4620      	mov	r0, r4
    88b4:	4798      	blx	r3
    88b6:	4602      	mov	r2, r0
    printf("{\"utime\": %lu,\"msg\": \"SHR_duration = %d usec\"}\n",utime,uwb_phy_SHR_duration(udev));
    88b8:	4629      	mov	r1, r5
    88ba:	483a      	ldr	r0, [pc, #232]	; (89a4 <main+0x1c4>)
    88bc:	f003 fffa 	bl	c8b4 <printf>
    printf("{\"utime\": %lu,\"msg\": \"holdoff = %d usec\"}\n",utime,(uint16_t)ceilf(uwb_dwt_usecs_to_usecs(rng->config.tx_holdoff_delay)));
    88c0:	6e70      	ldr	r0, [r6, #100]	; 0x64
    88c2:	f017 fa2b 	bl	1fd1c <__aeabi_ui2d>
    88c6:	a32a      	add	r3, pc, #168	; (adr r3, 8970 <main+0x190>)
    88c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    88cc:	f017 faa0 	bl	1fe10 <__aeabi_dmul>
    88d0:	f017 fd96 	bl	20400 <__aeabi_d2f>
    88d4:	ee00 0a10 	vmov	s0, r0
    88d8:	f017 ffb4 	bl	20844 <ceilf>
    88dc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    88e0:	ee17 3a90 	vmov	r3, s15
    88e4:	b29a      	uxth	r2, r3
    88e6:	4629      	mov	r1, r5
    88e8:	482f      	ldr	r0, [pc, #188]	; (89a8 <main+0x1c8>)
    88ea:	f003 ffe3 	bl	c8b4 <printf>
 * @return struct uwb_dev_status
 */
UWB_API_IMPL_PREFIX struct uwb_dev_status
uwb_set_autoack(struct uwb_dev * dev, bool enable)
{
    return (dev->uw_funcs->uf_set_autoack(dev, enable));
    88ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
    88f0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    88f4:	2101      	movs	r1, #1
    88f6:	4620      	mov	r0, r4
    88f8:	4798      	blx	r3
 * @return struct uwb_dev_status
 */
UWB_API_IMPL_PREFIX struct uwb_dev_status
uwb_set_autoack_delay(struct uwb_dev * dev, uint8_t delay)
{
    return (dev->uw_funcs->uf_set_autoack_delay(dev, delay));
    88fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    88fc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    8900:	210c      	movs	r1, #12
    8902:	4620      	mov	r0, r4
    8904:	4798      	blx	r3
#if MYNEWT_VAL(TWR_SS_ACK_ENABLED)
    uwb_set_autoack(udev, true);
    uwb_set_autoack_delay(udev, 12);
#endif

    os_callout_init(&tx_callout, os_eventq_dflt_get(), uwb_ev_cb, rng);
    8906:	f000 fef9 	bl	96fc <os_eventq_dflt_get>
    890a:	4601      	mov	r1, r0
    890c:	4d27      	ldr	r5, [pc, #156]	; (89ac <main+0x1cc>)
    890e:	4633      	mov	r3, r6
    8910:	4a27      	ldr	r2, [pc, #156]	; (89b0 <main+0x1d0>)
    8912:	4628      	mov	r0, r5
    8914:	f000 fca4 	bl	9260 <os_callout_init>
    os_callout_reset(&tx_callout, OS_TICKS_PER_SEC/25);
    8918:	2105      	movs	r1, #5
    891a:	4628      	mov	r0, r5
    891c:	f000 fccc 	bl	92b8 <os_callout_reset>
    memset(ev, 0, sizeof(*ev));
    8920:	4b24      	ldr	r3, [pc, #144]	; (89b4 <main+0x1d4>)
    8922:	2200      	movs	r2, #0
    8924:	601a      	str	r2, [r3, #0]
    8926:	605a      	str	r2, [r3, #4]
    8928:	609a      	str	r2, [r3, #8]
    892a:	60da      	str	r2, [r3, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
    892c:	4a22      	ldr	r2, [pc, #136]	; (89b8 <main+0x1d8>)
    892e:	605a      	str	r2, [r3, #4]
    ev->ev.ev_arg = arg;
    8930:	609e      	str	r6, [r3, #8]

    dpl_event_init(&slot_event, slot_complete_cb, rng);

    if ((udev->role&UWB_ROLE_ANCHOR)) {
    8932:	f8b4 34b4 	ldrh.w	r3, [r4, #1204]	; 0x4b4
    8936:	f013 0f04 	tst.w	r3, #4
    893a:	d008      	beq.n	894e <main+0x16e>
        udev->my_short_address = MYNEWT_VAL(ANCHOR_ADDRESS);
    893c:	f241 2134 	movw	r1, #4660	; 0x1234
    8940:	f8a4 14b6 	strh.w	r1, [r4, #1206]	; 0x4b6
    return (dev->uw_funcs->uf_set_uid(dev, uid));
    8944:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8946:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    894a:	4620      	mov	r0, r4
    894c:	4798      	blx	r3
        uwb_set_uid(udev, udev->my_short_address);
    }
#if MYNEWT_VAL(RNG_VERBOSE) > 1
    udev->config.rxdiag_enable = 1;
    894e:	f894 3530 	ldrb.w	r3, [r4, #1328]	; 0x530
    8952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8956:	f884 3530 	strb.w	r3, [r4, #1328]	; 0x530
#else
    udev->config.rxdiag_enable = 0;
#endif
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    895a:	f000 fecf 	bl	96fc <os_eventq_dflt_get>
    895e:	f000 fe9f 	bl	96a0 <os_eventq_run>
    while (1) {
    8962:	e7fa      	b.n	895a <main+0x17a>
    assert(rng);
    8964:	2300      	movs	r3, #0
    8966:	461a      	mov	r2, r3
    8968:	4619      	mov	r1, r3
    896a:	4618      	mov	r0, r3
    896c:	f000 faf2 	bl	8f54 <__assert_func>
    8970:	90690691 	.word	0x90690691
    8974:	3ff06906 	.word	0x3ff06906
    8978:	00008649 	.word	0x00008649
    897c:	000086a5 	.word	0x000086a5
    8980:	0000879d 	.word	0x0000879d
    8984:	00021770 	.word	0x00021770
    8988:	0002178c 	.word	0x0002178c
    898c:	000217ac 	.word	0x000217ac
    8990:	000217c0 	.word	0x000217c0
    8994:	000217d0 	.word	0x000217d0
    8998:	000217e0 	.word	0x000217e0
    899c:	000217f4 	.word	0x000217f4
    89a0:	00021808 	.word	0x00021808
    89a4:	0002183c 	.word	0x0002183c
    89a8:	0002186c 	.word	0x0002186c
    89ac:	20003078 	.word	0x20003078
    89b0:	00008705 	.word	0x00008705
    89b4:	20003068 	.word	0x20003068
    89b8:	000086cd 	.word	0x000086cd

000089bc <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    89bc:	4a09      	ldr	r2, [pc, #36]	; (89e4 <NVIC_Relocate+0x28>)
    89be:	4b0a      	ldr	r3, [pc, #40]	; (89e8 <NVIC_Relocate+0x2c>)
    89c0:	429a      	cmp	r2, r3
    89c2:	d00a      	beq.n	89da <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    89c4:	2300      	movs	r3, #0
    89c6:	e006      	b.n	89d6 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
    89c8:	4a07      	ldr	r2, [pc, #28]	; (89e8 <NVIC_Relocate+0x2c>)
    89ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    89ce:	4a05      	ldr	r2, [pc, #20]	; (89e4 <NVIC_Relocate+0x28>)
    89d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    89d4:	3301      	adds	r3, #1
    89d6:	2b35      	cmp	r3, #53	; 0x35
    89d8:	ddf6      	ble.n	89c8 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    89da:	4a02      	ldr	r2, [pc, #8]	; (89e4 <NVIC_Relocate+0x28>)
    89dc:	4b03      	ldr	r3, [pc, #12]	; (89ec <NVIC_Relocate+0x30>)
    89de:	609a      	str	r2, [r3, #8]
#endif
}
    89e0:	4770      	bx	lr
    89e2:	bf00      	nop
    89e4:	20000000 	.word	0x20000000
    89e8:	00008020 	.word	0x00008020
    89ec:	e000ed00 	.word	0xe000ed00

000089f0 <uwb_interrupt_task>:
 * @param arg  Pointer to the queue of interrupts.
 * @return void
 */
static void *
uwb_interrupt_task(void *arg)
{
    89f0:	b510      	push	{r4, lr}
    89f2:	4604      	mov	r4, r0
    os_eventq_run((struct os_eventq * )evq);
    89f4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    89f8:	f000 fe52 	bl	96a0 <os_eventq_run>
    89fc:	e7fa      	b.n	89f4 <uwb_interrupt_task+0x4>
	...

00008a00 <uwb_dev_idx_lookup>:
{
    8a00:	b510      	push	{r4, lr}
    8a02:	b08a      	sub	sp, #40	; 0x28
    8a04:	4604      	mov	r4, r0
    const char base1k[] = "dw1000_%d";
    8a06:	4b14      	ldr	r3, [pc, #80]	; (8a58 <uwb_dev_idx_lookup+0x58>)
    8a08:	f10d 0c1c 	add.w	ip, sp, #28
    8a0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    8a10:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    8a14:	f8ac 2000 	strh.w	r2, [ip]
    const char base3k[] = "dw3000_%d";
    8a18:	4b10      	ldr	r3, [pc, #64]	; (8a5c <uwb_dev_idx_lookup+0x5c>)
    8a1a:	f10d 0c10 	add.w	ip, sp, #16
    8a1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    8a22:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    8a26:	f8ac 2000 	strh.w	r2, [ip]
    snprintf(buf, sizeof buf, base1k, idx);
    8a2a:	4623      	mov	r3, r4
    8a2c:	aa07      	add	r2, sp, #28
    8a2e:	210c      	movs	r1, #12
    8a30:	a801      	add	r0, sp, #4
    8a32:	f003 ff6e 	bl	c912 <snprintf>
    odev = os_dev_lookup(buf);
    8a36:	a801      	add	r0, sp, #4
    8a38:	f000 fd58 	bl	94ec <os_dev_lookup>
    if (!odev) {
    8a3c:	b108      	cbz	r0, 8a42 <uwb_dev_idx_lookup+0x42>
}
    8a3e:	b00a      	add	sp, #40	; 0x28
    8a40:	bd10      	pop	{r4, pc}
        snprintf(buf, sizeof buf, base3k, idx);
    8a42:	4623      	mov	r3, r4
    8a44:	aa04      	add	r2, sp, #16
    8a46:	210c      	movs	r1, #12
    8a48:	a801      	add	r0, sp, #4
    8a4a:	f003 ff62 	bl	c912 <snprintf>
        odev = os_dev_lookup(buf);
    8a4e:	a801      	add	r0, sp, #4
    8a50:	f000 fd4c 	bl	94ec <os_dev_lookup>
    return (struct uwb_dev*)odev;
    8a54:	e7f3      	b.n	8a3e <uwb_dev_idx_lookup+0x3e>
    8a56:	bf00      	nop
    8a58:	00021898 	.word	0x00021898
    8a5c:	000218a4 	.word	0x000218a4

00008a60 <uwb_mac_append_interface>:
{
    8a60:	b508      	push	{r3, lr}
    assert(dev);
    8a62:	b148      	cbz	r0, 8a78 <uwb_mac_append_interface+0x18>
    assert(cbs);
    8a64:	b171      	cbz	r1, 8a84 <uwb_mac_append_interface+0x24>
    cbs->status.initialized = true;
    8a66:	780b      	ldrb	r3, [r1, #0]
    8a68:	f043 0301 	orr.w	r3, r3, #1
    8a6c:	700b      	strb	r3, [r1, #0]
    if(!(SLIST_EMPTY(&dev->interface_cbs))) {
    8a6e:	f8d0 3534 	ldr.w	r3, [r0, #1332]	; 0x534
    8a72:	b1b3      	cbz	r3, 8aa2 <uwb_mac_append_interface+0x42>
        struct uwb_mac_interface * prev_cbs = NULL;
    8a74:	2200      	movs	r2, #0
    8a76:	e00d      	b.n	8a94 <uwb_mac_append_interface+0x34>
    assert(dev);
    8a78:	2300      	movs	r3, #0
    8a7a:	461a      	mov	r2, r3
    8a7c:	4619      	mov	r1, r3
    8a7e:	4618      	mov	r0, r3
    8a80:	f000 fa68 	bl	8f54 <__assert_func>
    assert(cbs);
    8a84:	2300      	movs	r3, #0
    8a86:	461a      	mov	r2, r3
    8a88:	4619      	mov	r1, r3
    8a8a:	4618      	mov	r0, r3
    8a8c:	f000 fa62 	bl	8f54 <__assert_func>
            prev_cbs = cur_cbs;
    8a90:	461a      	mov	r2, r3
        SLIST_FOREACH(cur_cbs, &dev->interface_cbs, next){
    8a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8a94:	2b00      	cmp	r3, #0
    8a96:	d1fb      	bne.n	8a90 <uwb_mac_append_interface+0x30>
        SLIST_INSERT_AFTER(prev_cbs, cbs, next);
    8a98:	6b93      	ldr	r3, [r2, #56]	; 0x38
    8a9a:	638b      	str	r3, [r1, #56]	; 0x38
    8a9c:	6391      	str	r1, [r2, #56]	; 0x38
}
    8a9e:	4608      	mov	r0, r1
    8aa0:	bd08      	pop	{r3, pc}
        SLIST_INSERT_HEAD(&dev->interface_cbs, cbs, next);
    8aa2:	638b      	str	r3, [r1, #56]	; 0x38
    8aa4:	f8c0 1534 	str.w	r1, [r0, #1332]	; 0x534
    8aa8:	e7f9      	b.n	8a9e <uwb_mac_append_interface+0x3e>

00008aaa <uwb_mac_remove_interface>:
{
    8aaa:	b508      	push	{r3, lr}
    assert(dev);
    8aac:	b148      	cbz	r0, 8ac2 <uwb_mac_remove_interface+0x18>
    8aae:	4684      	mov	ip, r0
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8ab0:	f8d0 0534 	ldr.w	r0, [r0, #1332]	; 0x534
    8ab4:	4603      	mov	r3, r0
    8ab6:	b193      	cbz	r3, 8ade <uwb_mac_remove_interface+0x34>
        if(cbs->id == id){
    8ab8:	885a      	ldrh	r2, [r3, #2]
    8aba:	428a      	cmp	r2, r1
    8abc:	d007      	beq.n	8ace <uwb_mac_remove_interface+0x24>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8ac0:	e7f9      	b.n	8ab6 <uwb_mac_remove_interface+0xc>
    assert(dev);
    8ac2:	2300      	movs	r3, #0
    8ac4:	461a      	mov	r2, r3
    8ac6:	4619      	mov	r1, r3
    8ac8:	4618      	mov	r0, r3
    8aca:	f000 fa43 	bl	8f54 <__assert_func>
            SLIST_REMOVE(&dev->interface_cbs, cbs, uwb_mac_interface, next);
    8ace:	4283      	cmp	r3, r0
    8ad0:	d006      	beq.n	8ae0 <uwb_mac_remove_interface+0x36>
    8ad2:	4602      	mov	r2, r0
    8ad4:	6b80      	ldr	r0, [r0, #56]	; 0x38
    8ad6:	4298      	cmp	r0, r3
    8ad8:	d1fb      	bne.n	8ad2 <uwb_mac_remove_interface+0x28>
    8ada:	6b83      	ldr	r3, [r0, #56]	; 0x38
    8adc:	6393      	str	r3, [r2, #56]	; 0x38
}
    8ade:	bd08      	pop	{r3, pc}
            SLIST_REMOVE(&dev->interface_cbs, cbs, uwb_mac_interface, next);
    8ae0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    8ae2:	f8cc 3534 	str.w	r3, [ip, #1332]	; 0x534
    8ae6:	e7fa      	b.n	8ade <uwb_mac_remove_interface+0x34>

00008ae8 <uwb_mac_get_interface>:
{
    8ae8:	b508      	push	{r3, lr}
    assert(dev);
    8aea:	b138      	cbz	r0, 8afc <uwb_mac_get_interface+0x14>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8aec:	f8d0 0534 	ldr.w	r0, [r0, #1332]	; 0x534
    8af0:	b150      	cbz	r0, 8b08 <uwb_mac_get_interface+0x20>
        if(cbs->id == id){
    8af2:	8843      	ldrh	r3, [r0, #2]
    8af4:	428b      	cmp	r3, r1
    8af6:	d007      	beq.n	8b08 <uwb_mac_get_interface+0x20>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8af8:	6b80      	ldr	r0, [r0, #56]	; 0x38
    8afa:	e7f9      	b.n	8af0 <uwb_mac_get_interface+0x8>
    assert(dev);
    8afc:	2300      	movs	r3, #0
    8afe:	461a      	mov	r2, r3
    8b00:	4619      	mov	r1, r3
    8b02:	4618      	mov	r0, r3
    8b04:	f000 fa26 	bl	8f54 <__assert_func>
}
    8b08:	bd08      	pop	{r3, pc}

00008b0a <uwb_mac_find_cb_inst_ptr>:
{
    8b0a:	b508      	push	{r3, lr}
    struct uwb_mac_interface * cbs = uwb_mac_get_interface(dev, id);
    8b0c:	f7ff ffec 	bl	8ae8 <uwb_mac_get_interface>
    if (cbs) {
    8b10:	4603      	mov	r3, r0
    8b12:	b100      	cbz	r0, 8b16 <uwb_mac_find_cb_inst_ptr+0xc>
        return cbs->inst_ptr;
    8b14:	6843      	ldr	r3, [r0, #4]
}
    8b16:	4618      	mov	r0, r3
    8b18:	bd08      	pop	{r3, pc}
	...

00008b1c <uwb_task_init>:
 *
 * @return void
 */
void
uwb_task_init(struct uwb_dev * inst, void (*irq_ev_cb)(struct dpl_event*))
{
    8b1c:	b570      	push	{r4, r5, r6, lr}
    8b1e:	b084      	sub	sp, #16
    8b20:	4604      	mov	r4, r0
    8b22:	460d      	mov	r5, r1
    int rc;
    /* Check if the task is already initiated */
    if (!dpl_eventq_inited(&inst->eventq))
    8b24:	f100 063c 	add.w	r6, r0, #60	; 0x3c
    return os_eventq_inited((struct os_eventq *) evq);
    8b28:	4630      	mov	r0, r6
    8b2a:	f000 fd34 	bl	9596 <os_eventq_inited>
    8b2e:	b108      	cbz	r0, 8b34 <uwb_task_init+0x18>
                      inst->task_prio, DPL_WAIT_FOREVER,
                      inst->task_stack,
                      MYNEWT_VAL(UWB_DEV_TASK_STACK_SZ));
#endif
    }
}
    8b30:	b004      	add	sp, #16
    8b32:	bd70      	pop	{r4, r5, r6, pc}
    os_eventq_init((struct os_eventq *) evq);
    8b34:	4630      	mov	r0, r6
    8b36:	f000 fd25 	bl	9584 <os_eventq_init>
    memset(ev, 0, sizeof(*ev));
    8b3a:	2300      	movs	r3, #0
    8b3c:	64e3      	str	r3, [r4, #76]	; 0x4c
    8b3e:	6523      	str	r3, [r4, #80]	; 0x50
    8b40:	6563      	str	r3, [r4, #84]	; 0x54
    8b42:	65a3      	str	r3, [r4, #88]	; 0x58
    ev->ev.ev_cb = (os_event_fn *)fn;
    8b44:	6525      	str	r5, [r4, #80]	; 0x50
    ev->ev.ev_arg = arg;
    8b46:	6564      	str	r4, [r4, #84]	; 0x54
}

static inline dpl_error_t
dpl_sem_init(struct dpl_sem *sem, uint16_t tokens)
{
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    8b48:	2101      	movs	r1, #1
    8b4a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    8b4e:	f001 f90b 	bl	9d68 <os_sem_init>
        assert(rc == DPL_OK);
    8b52:	b998      	cbnz	r0, 8b7c <uwb_task_init+0x60>
        dpl_task_init(&inst->task_str, "uwb_irq",
    8b54:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                      inst->task_stack,
    8b58:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
static inline int dpl_task_init(struct dpl_task *t, const char *name, dpl_task_func_t func,
		 void *arg, uint8_t prio, dpl_time_t sanity_itvl,
		 os_stack_t * stack_bottom, uint16_t stack_size)
{

    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    8b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
    8b60:	9103      	str	r1, [sp, #12]
    8b62:	9202      	str	r2, [sp, #8]
    8b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8b68:	9201      	str	r2, [sp, #4]
    8b6a:	9300      	str	r3, [sp, #0]
    8b6c:	4623      	mov	r3, r4
    8b6e:	4a06      	ldr	r2, [pc, #24]	; (8b88 <uwb_task_init+0x6c>)
    8b70:	4906      	ldr	r1, [pc, #24]	; (8b8c <uwb_task_init+0x70>)
    8b72:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8b76:	f001 f997 	bl	9ea8 <os_task_init>
}
    8b7a:	e7d9      	b.n	8b30 <uwb_task_init+0x14>
        assert(rc == DPL_OK);
    8b7c:	2300      	movs	r3, #0
    8b7e:	461a      	mov	r2, r3
    8b80:	4619      	mov	r1, r3
    8b82:	4618      	mov	r0, r3
    8b84:	f000 f9e6 	bl	8f54 <__assert_func>
    8b88:	000089f1 	.word	0x000089f1
    8b8c:	000218b0 	.word	0x000218b0

00008b90 <uwb_task_deinit>:

void
uwb_task_deinit(struct uwb_dev * inst)
{
    8b90:	b510      	push	{r4, lr}
    8b92:	4604      	mov	r4, r0
    return os_eventq_inited((struct os_eventq *) evq);
    8b94:	303c      	adds	r0, #60	; 0x3c
    8b96:	f000 fcfe 	bl	9596 <os_eventq_inited>
    if (dpl_eventq_inited(&inst->eventq))
    8b9a:	b900      	cbnz	r0, 8b9e <uwb_task_deinit+0xe>
    {
        dpl_task_remove(&inst->task_str);
        dpl_eventq_deinit(&inst->eventq);
    }
}
    8b9c:	bd10      	pop	{r4, pc}
        (os_stack_t *) stack_bottom, stack_size) ;
}

static inline int dpl_task_remove(struct dpl_task * t)
{
    return os_task_remove((struct os_task * ) t);
    8b9e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8ba2:	f001 f9ed 	bl	9f80 <os_task_remove>
    8ba6:	e7f9      	b.n	8b9c <uwb_task_deinit+0xc>

00008ba8 <uwb_dev_init>:

void
uwb_dev_init(struct uwb_dev * inst)
{
    8ba8:	b510      	push	{r4, lr}
    8baa:	4604      	mov	r4, r0
    if (!inst->txbuf) {
    8bac:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
    8bb0:	b11b      	cbz	r3, 8bba <uwb_dev_init+0x12>
#else
        inst->txbuf = malloc(inst->txbuf_size);
        assert(inst->txbuf);
#endif
    }
    if (!inst->rxbuf) {
    8bb2:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
    8bb6:	b173      	cbz	r3, 8bd6 <uwb_dev_init+0x2e>
#else
        inst->rxbuf = malloc(inst->rxbuf_size);
        assert(inst->rxbuf);
#endif
    }
}
    8bb8:	bd10      	pop	{r4, pc}
        inst->txbuf = malloc(inst->txbuf_size);
    8bba:	f8b0 0506 	ldrh.w	r0, [r0, #1286]	; 0x506
    8bbe:	f003 f9e9 	bl	bf94 <malloc>
    8bc2:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
        assert(inst->txbuf);
    8bc6:	2800      	cmp	r0, #0
    8bc8:	d1f3      	bne.n	8bb2 <uwb_dev_init+0xa>
    8bca:	2300      	movs	r3, #0
    8bcc:	461a      	mov	r2, r3
    8bce:	4619      	mov	r1, r3
    8bd0:	4618      	mov	r0, r3
    8bd2:	f000 f9bf 	bl	8f54 <__assert_func>
        inst->rxbuf = malloc(inst->rxbuf_size);
    8bd6:	f8b4 0504 	ldrh.w	r0, [r4, #1284]	; 0x504
    8bda:	f003 f9db 	bl	bf94 <malloc>
    8bde:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
        assert(inst->rxbuf);
    8be2:	2800      	cmp	r0, #0
    8be4:	d1e8      	bne.n	8bb8 <uwb_dev_init+0x10>
    8be6:	2300      	movs	r3, #0
    8be8:	461a      	mov	r2, r3
    8bea:	4619      	mov	r1, r3
    8bec:	4618      	mov	r0, r3
    8bee:	f000 f9b1 	bl	8f54 <__assert_func>
    8bf2:	0000      	movs	r0, r0
    8bf4:	0000      	movs	r0, r0
	...

00008bf8 <uwb_calc_aoa>:
 *
 * returns angle of arrival - float, in radians
 */
dpl_float32_t
uwb_calc_aoa(dpl_float32_t pdoa, int channel, dpl_float32_t antenna_separation)
{
    8bf8:	b508      	push	{r3, lr}
    8bfa:	ed2d 8b02 	vpush	{d8}
    8bfe:	ee10 3a10 	vmov	r3, s0
    8c02:	eeb0 8a60 	vmov.f32	s16, s1
    dpl_float32_t pd_dist, wavelength;
    dpl_float32_t frequency = DPL_FLOAT32_INIT(0);
    switch(channel) {
    8c06:	3801      	subs	r0, #1
    8c08:	2808      	cmp	r0, #8
    8c0a:	d839      	bhi.n	8c80 <uwb_calc_aoa+0x88>
    8c0c:	e8df f000 	tbb	[pc, r0]
    8c10:	2c05413e 	.word	0x2c05413e
    8c14:	3832382f 	.word	0x3832382f
    8c18:	35          	.byte	0x35
    8c19:	00          	.byte	0x00
    case (1): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_1);break;
    case (2): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_2);break;
    case (3): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_3);break;
    8c1a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8ca0 <uwb_calc_aoa+0xa8>
    case (5): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_5);break;
    case (7): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_7);break;
    case (9): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_9);break;
    default: assert(0); break;
    }
    wavelength = DPL_FLOAT32_DIV(DPL_FLOAT32_INIT(SPEED_OF_LIGHT), frequency);
    8c1e:	eddf 7a21 	vldr	s15, [pc, #132]	; 8ca4 <uwb_calc_aoa+0xac>
    8c22:	eec7 8a87 	vdiv.f32	s17, s15, s14
    pd_dist = DPL_FLOAT32_DIV(pdoa, DPL_FLOAT32_INIT(2.0f*M_PI));
    8c26:	4618      	mov	r0, r3
    8c28:	f017 f89a 	bl	1fd60 <__aeabi_f2d>
    8c2c:	a31a      	add	r3, pc, #104	; (adr r3, 8c98 <uwb_calc_aoa+0xa0>)
    8c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c32:	f017 fa17 	bl	20064 <__aeabi_ddiv>
    8c36:	f017 fbe3 	bl	20400 <__aeabi_d2f>
    8c3a:	ee07 0a90 	vmov	s15, r0
    pd_dist = DPL_FLOAT32_MUL(pd_dist, wavelength);
    8c3e:	ee68 8aa7 	vmul.f32	s17, s17, s15
    return DPL_FLOAT32_FROM_F64(
    8c42:	eec8 7a88 	vdiv.f32	s15, s17, s16
    8c46:	ee17 0a90 	vmov	r0, s15
    8c4a:	f017 f889 	bl	1fd60 <__aeabi_f2d>
    8c4e:	ec41 0b10 	vmov	d0, r0, r1
    8c52:	f017 fe3d 	bl	208d0 <asin>
    8c56:	ec51 0b10 	vmov	r0, r1, d0
    8c5a:	f017 fbd1 	bl	20400 <__aeabi_d2f>
        DPL_FLOAT64_ASIN(DPL_FLOAT64_FROM_F32(
                         DPL_FLOAT32_DIV(pd_dist, antenna_separation)
                         )
            )
        );
}
    8c5e:	ee00 0a10 	vmov	s0, r0
    8c62:	ecbd 8b02 	vpop	{d8}
    8c66:	bd08      	pop	{r3, pc}
    case (4): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_4);break;
    8c68:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8ca0 <uwb_calc_aoa+0xa8>
    8c6c:	e7d7      	b.n	8c1e <uwb_calc_aoa+0x26>
    case (5): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_5);break;
    8c6e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8ca8 <uwb_calc_aoa+0xb0>
    8c72:	e7d4      	b.n	8c1e <uwb_calc_aoa+0x26>
    case (7): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_7);break;
    8c74:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8ca8 <uwb_calc_aoa+0xb0>
    8c78:	e7d1      	b.n	8c1e <uwb_calc_aoa+0x26>
    case (9): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_9);break;
    8c7a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8cac <uwb_calc_aoa+0xb4>
    8c7e:	e7ce      	b.n	8c1e <uwb_calc_aoa+0x26>
    default: assert(0); break;
    8c80:	2300      	movs	r3, #0
    8c82:	461a      	mov	r2, r3
    8c84:	4619      	mov	r1, r3
    8c86:	4618      	mov	r0, r3
    8c88:	f000 f964 	bl	8f54 <__assert_func>
    switch(channel) {
    8c8c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8cb0 <uwb_calc_aoa+0xb8>
    8c90:	e7c5      	b.n	8c1e <uwb_calc_aoa+0x26>
    case (2): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_2);break;
    8c92:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8cb4 <uwb_calc_aoa+0xbc>
    8c96:	e7c2      	b.n	8c1e <uwb_calc_aoa+0x26>
    8c98:	54442d18 	.word	0x54442d18
    8c9c:	401921fb 	.word	0x401921fb
    8ca0:	4f85e558 	.word	0x4f85e558
    8ca4:	4d8ef3c2 	.word	0x4d8ef3c2
    8ca8:	4fc167b8 	.word	0x4fc167b8
    8cac:	4fee0980 	.word	0x4fee0980
    8cb0:	4f504850 	.word	0x4f504850
    8cb4:	4f6e0980 	.word	0x4f6e0980

00008cb8 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
    8cb8:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8cba:	2400      	movs	r4, #0
    8cbc:	e000      	b.n	8cc0 <hal_gpio_irq_handler+0x8>
    8cbe:	3401      	adds	r4, #1
    8cc0:	2c07      	cmp	r4, #7
    8cc2:	dc1c      	bgt.n	8cfe <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
    8cc4:	f104 0340 	add.w	r3, r4, #64	; 0x40
    8cc8:	4a0d      	ldr	r2, [pc, #52]	; (8d00 <hal_gpio_irq_handler+0x48>)
    8cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cce:	2b00      	cmp	r3, #0
    8cd0:	d0f5      	beq.n	8cbe <hal_gpio_irq_handler+0x6>
    8cd2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    8cd6:	2301      	movs	r3, #1
    8cd8:	40a3      	lsls	r3, r4
    8cda:	421a      	tst	r2, r3
    8cdc:	d0ef      	beq.n	8cbe <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
    8cde:	f104 0340 	add.w	r3, r4, #64	; 0x40
    8ce2:	4a07      	ldr	r2, [pc, #28]	; (8d00 <hal_gpio_irq_handler+0x48>)
    8ce4:	2100      	movs	r1, #0
    8ce6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
    8cea:	4b06      	ldr	r3, [pc, #24]	; (8d04 <hal_gpio_irq_handler+0x4c>)
    8cec:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    8cf0:	2a00      	cmp	r2, #0
    8cf2:	d0e4      	beq.n	8cbe <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
    8cf4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    8cf8:	6858      	ldr	r0, [r3, #4]
    8cfa:	4790      	blx	r2
    8cfc:	e7df      	b.n	8cbe <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
    8cfe:	bd10      	pop	{r4, pc}
    8d00:	40006000 	.word	0x40006000
    8d04:	20003098 	.word	0x20003098

00008d08 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
    8d08:	4b06      	ldr	r3, [pc, #24]	; (8d24 <hal_gpio_irq_setup+0x1c>)
    8d0a:	781b      	ldrb	r3, [r3, #0]
    8d0c:	b94b      	cbnz	r3, 8d22 <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    8d0e:	4b06      	ldr	r3, [pc, #24]	; (8d28 <hal_gpio_irq_setup+0x20>)
    8d10:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    8d12:	4a06      	ldr	r2, [pc, #24]	; (8d2c <hal_gpio_irq_setup+0x24>)
    8d14:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8d16:	4b06      	ldr	r3, [pc, #24]	; (8d30 <hal_gpio_irq_setup+0x28>)
    8d18:	2240      	movs	r2, #64	; 0x40
    8d1a:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
    8d1c:	4b01      	ldr	r3, [pc, #4]	; (8d24 <hal_gpio_irq_setup+0x1c>)
    8d1e:	2201      	movs	r2, #1
    8d20:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
    8d22:	4770      	bx	lr
    8d24:	200030d8 	.word	0x200030d8
    8d28:	e000ed00 	.word	0xe000ed00
    8d2c:	00008cb9 	.word	0x00008cb9
    8d30:	e000e100 	.word	0xe000e100

00008d34 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8d34:	2000      	movs	r0, #0
    8d36:	2807      	cmp	r0, #7
    8d38:	dc05      	bgt.n	8d46 <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
    8d3a:	4b04      	ldr	r3, [pc, #16]	; (8d4c <hal_gpio_find_empty_slot+0x18>)
    8d3c:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    8d40:	b11b      	cbz	r3, 8d4a <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8d42:	3001      	adds	r0, #1
    8d44:	e7f7      	b.n	8d36 <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
    8d46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    8d4a:	4770      	bx	lr
    8d4c:	20003098 	.word	0x20003098

00008d50 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
    8d50:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8d52:	2000      	movs	r0, #0
    8d54:	e000      	b.n	8d58 <hal_gpio_find_pin+0x8>
    8d56:	3001      	adds	r0, #1
    8d58:	2807      	cmp	r0, #7
    8d5a:	dc0e      	bgt.n	8d7a <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
    8d5c:	4b08      	ldr	r3, [pc, #32]	; (8d80 <hal_gpio_find_pin+0x30>)
    8d5e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    8d62:	2b00      	cmp	r3, #0
    8d64:	d0f7      	beq.n	8d56 <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
    8d66:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    8d6a:	4a06      	ldr	r2, [pc, #24]	; (8d84 <hal_gpio_find_pin+0x34>)
    8d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d70:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
    8d74:	428b      	cmp	r3, r1
    8d76:	d1ee      	bne.n	8d56 <hal_gpio_find_pin+0x6>
    8d78:	e001      	b.n	8d7e <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
    8d7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    8d7e:	4770      	bx	lr
    8d80:	20003098 	.word	0x20003098
    8d84:	40006000 	.word	0x40006000

00008d88 <hal_gpio_init_in>:
    switch (pull) {
    8d88:	2901      	cmp	r1, #1
    8d8a:	d00f      	beq.n	8dac <hal_gpio_init_in+0x24>
    8d8c:	2902      	cmp	r1, #2
    8d8e:	d10f      	bne.n	8db0 <hal_gpio_init_in+0x28>
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
    8d90:	2304      	movs	r3, #4
    port->PIN_CNF[pin_index] = conf;
    8d92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8d96:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
    8d9a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
    8d9e:	2301      	movs	r3, #1
    8da0:	fa03 f000 	lsl.w	r0, r3, r0
    8da4:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
    8da8:	2000      	movs	r0, #0
    8daa:	4770      	bx	lr
    switch (pull) {
    8dac:	230c      	movs	r3, #12
    8dae:	e7f0      	b.n	8d92 <hal_gpio_init_in+0xa>
        conf = 0;
    8db0:	2300      	movs	r3, #0
    8db2:	e7ee      	b.n	8d92 <hal_gpio_init_in+0xa>

00008db4 <hal_gpio_init_out>:
    if (val) {
    8db4:	b199      	cbz	r1, 8dde <hal_gpio_init_out+0x2a>
        port->OUTSET = HAL_GPIO_MASK(pin);
    8db6:	2301      	movs	r3, #1
    8db8:	4083      	lsls	r3, r0
    8dba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8dbe:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
    8dc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8dc6:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
    8dca:	2103      	movs	r1, #3
    8dcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
    8dd0:	2301      	movs	r3, #1
    8dd2:	fa03 f000 	lsl.w	r0, r3, r0
    8dd6:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
    8dda:	2000      	movs	r0, #0
    8ddc:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
    8dde:	2301      	movs	r3, #1
    8de0:	4083      	lsls	r3, r0
    8de2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8de6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    8dea:	e7ea      	b.n	8dc2 <hal_gpio_init_out+0xe>

00008dec <hal_gpio_write>:
    if (val) {
    8dec:	b139      	cbz	r1, 8dfe <hal_gpio_write+0x12>
        port->OUTSET = HAL_GPIO_MASK(pin);
    8dee:	2301      	movs	r3, #1
    8df0:	fa03 f000 	lsl.w	r0, r3, r0
    8df4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8df8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    8dfc:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
    8dfe:	2301      	movs	r3, #1
    8e00:	fa03 f000 	lsl.w	r0, r3, r0
    8e04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8e08:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    8e0c:	4770      	bx	lr

00008e0e <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
    8e0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8e12:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
    8e16:	2301      	movs	r3, #1
    8e18:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    8e1a:	421a      	tst	r2, r3
    8e1c:	d008      	beq.n	8e30 <hal_gpio_read+0x22>
    8e1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8e22:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    8e26:	fa23 f000 	lsr.w	r0, r3, r0
    8e2a:	f000 0001 	and.w	r0, r0, #1
    8e2e:	4770      	bx	lr
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
    8e30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8e34:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    8e38:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    8e3c:	f000 0001 	and.w	r0, r0, #1
}
    8e40:	4770      	bx	lr

00008e42 <hal_gpio_toggle>:
{
    8e42:	b538      	push	{r3, r4, r5, lr}
    8e44:	4605      	mov	r5, r0
    int pin_state = (hal_gpio_read(pin) == 0);
    8e46:	f7ff ffe2 	bl	8e0e <hal_gpio_read>
    8e4a:	fab0 f480 	clz	r4, r0
    8e4e:	0964      	lsrs	r4, r4, #5
    hal_gpio_write(pin, pin_state);
    8e50:	4621      	mov	r1, r4
    8e52:	4628      	mov	r0, r5
    8e54:	f7ff ffca 	bl	8dec <hal_gpio_write>
}
    8e58:	4620      	mov	r0, r4
    8e5a:	bd38      	pop	{r3, r4, r5, pc}

00008e5c <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
    8e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e60:	4606      	mov	r6, r0
    8e62:	4688      	mov	r8, r1
    8e64:	4617      	mov	r7, r2
    8e66:	461d      	mov	r5, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
    8e68:	f7ff ff4e 	bl	8d08 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
    8e6c:	f7ff ff62 	bl	8d34 <hal_gpio_find_empty_slot>
    if (i < 0) {
    8e70:	1e04      	subs	r4, r0, #0
    8e72:	db27      	blt.n	8ec4 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
    8e74:	f89d 1018 	ldrb.w	r1, [sp, #24]
    8e78:	4630      	mov	r0, r6
    8e7a:	f7ff ff85 	bl	8d88 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
    8e7e:	2d02      	cmp	r5, #2
    8e80:	d01a      	beq.n	8eb8 <hal_gpio_irq_init+0x5c>
    8e82:	2d03      	cmp	r5, #3
    8e84:	d01b      	beq.n	8ebe <hal_gpio_irq_init+0x62>
    8e86:	2d01      	cmp	r5, #1
    8e88:	d002      	beq.n	8e90 <hal_gpio_irq_init+0x34>
    8e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8e8e:	e011      	b.n	8eb4 <hal_gpio_irq_init+0x58>
    8e90:	f44f 3080 	mov.w	r0, #65536	; 0x10000
        break;
    default:
        return -1;
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
    8e94:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
    8e98:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
    8e9c:	f504 72a2 	add.w	r2, r4, #324	; 0x144
    8ea0:	4b0a      	ldr	r3, [pc, #40]	; (8ecc <hal_gpio_irq_init+0x70>)
    8ea2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
    8ea6:	480a      	ldr	r0, [pc, #40]	; (8ed0 <hal_gpio_irq_init+0x74>)
    8ea8:	f840 8034 	str.w	r8, [r0, r4, lsl #3]
    hal_gpio_irqs[i].arg = arg;
    8eac:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    8eb0:	6047      	str	r7, [r0, #4]

    return 0;
    8eb2:	2000      	movs	r0, #0
}
    8eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
    8eb8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    8ebc:	e7ea      	b.n	8e94 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
    8ebe:	f44f 3040 	mov.w	r0, #196608	; 0x30000
    8ec2:	e7e7      	b.n	8e94 <hal_gpio_irq_init+0x38>
        return -1;
    8ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8ec8:	e7f4      	b.n	8eb4 <hal_gpio_irq_init+0x58>
    8eca:	bf00      	nop
    8ecc:	40006000 	.word	0x40006000
    8ed0:	20003098 	.word	0x20003098

00008ed4 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
    8ed4:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
    8ed6:	f7ff ff3b 	bl	8d50 <hal_gpio_find_pin>
    if (i < 0) {
    8eda:	2800      	cmp	r0, #0
    8edc:	db0a      	blt.n	8ef4 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
    8ede:	4a06      	ldr	r2, [pc, #24]	; (8ef8 <hal_gpio_irq_enable+0x24>)
    8ee0:	f100 0340 	add.w	r3, r0, #64	; 0x40
    8ee4:	2100      	movs	r1, #0
    8ee6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
    8eea:	2301      	movs	r3, #1
    8eec:	fa03 f000 	lsl.w	r0, r3, r0
    8ef0:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
    8ef4:	bd08      	pop	{r3, pc}
    8ef6:	bf00      	nop
    8ef8:	40006000 	.word	0x40006000

00008efc <hal_gpio_irq_disable>:
 *
 * @param pin
 */
void
hal_gpio_irq_disable(int pin)
{
    8efc:	b508      	push	{r3, lr}
    int pin_index;
    bool sense_enabled = false;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
    8efe:	f7ff ff27 	bl	8d50 <hal_gpio_find_pin>
    if (i < 0) {
    8f02:	2800      	cmp	r0, #0
    8f04:	db05      	blt.n	8f12 <hal_gpio_irq_disable+0x16>

    if (!sense_enabled) {
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
    }
#else
    NRF_GPIOTE->INTENCLR = 1 << i;
    8f06:	2301      	movs	r3, #1
    8f08:	fa03 f000 	lsl.w	r0, r3, r0
    8f0c:	4b01      	ldr	r3, [pc, #4]	; (8f14 <hal_gpio_irq_disable+0x18>)
    8f0e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
#endif
}
    8f12:	bd08      	pop	{r3, pc}
    8f14:	40006000 	.word	0x40006000

00008f18 <hal_gpio_irq_release>:
{
    8f18:	b538      	push	{r3, r4, r5, lr}
    8f1a:	4605      	mov	r5, r0
    i = hal_gpio_find_pin(pin);
    8f1c:	f7ff ff18 	bl	8d50 <hal_gpio_find_pin>
    if (i < 0) {
    8f20:	1e04      	subs	r4, r0, #0
    8f22:	db12      	blt.n	8f4a <hal_gpio_irq_release+0x32>
    hal_gpio_irq_disable(pin);
    8f24:	4628      	mov	r0, r5
    8f26:	f7ff ffe9 	bl	8efc <hal_gpio_irq_disable>
    NRF_GPIOTE->CONFIG[i] = 0;
    8f2a:	4a08      	ldr	r2, [pc, #32]	; (8f4c <hal_gpio_irq_release+0x34>)
    8f2c:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    8f30:	2300      	movs	r3, #0
    8f32:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    NRF_GPIOTE->EVENTS_IN[i] = 0;
    8f36:	f104 0140 	add.w	r1, r4, #64	; 0x40
    8f3a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    hal_gpio_irqs[i].arg = NULL;
    8f3e:	4a04      	ldr	r2, [pc, #16]	; (8f50 <hal_gpio_irq_release+0x38>)
    8f40:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    8f44:	604b      	str	r3, [r1, #4]
    hal_gpio_irqs[i].func = NULL;
    8f46:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
}
    8f4a:	bd38      	pop	{r3, r4, r5, pc}
    8f4c:	40006000 	.word	0x40006000
    8f50:	20003098 	.word	0x20003098

00008f54 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    8f54:	b508      	push	{r3, lr}
    8f56:	4675      	mov	r5, lr
    8f58:	4604      	mov	r4, r0
    8f5a:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    8f5c:	f001 fa04 	bl	a368 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    8f60:	f004 fd7c 	bl	da5c <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    8f64:	b18c      	cbz	r4, 8f8a <__assert_func+0x36>
    8f66:	4633      	mov	r3, r6
    8f68:	4622      	mov	r2, r4
    8f6a:	4629      	mov	r1, r5
    8f6c:	4809      	ldr	r0, [pc, #36]	; (8f94 <__assert_func+0x40>)
    8f6e:	f005 f833 	bl	dfd8 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
    8f72:	f7ff f925 	bl	81c0 <hal_debugger_connected>
    8f76:	b100      	cbz	r0, 8f7a <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
    8f78:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    8f7a:	4b07      	ldr	r3, [pc, #28]	; (8f98 <__assert_func+0x44>)
    8f7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8f80:	605a      	str	r2, [r3, #4]
    asm("isb");
    8f82:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    8f86:	f7ff f923 	bl	81d0 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    8f8a:	4629      	mov	r1, r5
    8f8c:	4803      	ldr	r0, [pc, #12]	; (8f9c <__assert_func+0x48>)
    8f8e:	f005 f823 	bl	dfd8 <console_printf>
    8f92:	e7ee      	b.n	8f72 <__assert_func+0x1e>
    8f94:	000218c8 	.word	0x000218c8
    8f98:	e000ed00 	.word	0xe000ed00
    8f9c:	000218b8 	.word	0x000218b8

00008fa0 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    8fa0:	b500      	push	{lr}
    8fa2:	b083      	sub	sp, #12
    8fa4:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    8fa6:	f004 fd59 	bl	da5c <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    8faa:	4d1b      	ldr	r5, [pc, #108]	; (9018 <os_default_irq+0x78>)
    8fac:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    8fae:	6822      	ldr	r2, [r4, #0]
    8fb0:	f3c1 0108 	ubfx	r1, r1, #0, #9
    8fb4:	4819      	ldr	r0, [pc, #100]	; (901c <os_default_irq+0x7c>)
    8fb6:	f005 f80f 	bl	dfd8 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    8fba:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    8fbc:	6883      	ldr	r3, [r0, #8]
    8fbe:	6842      	ldr	r2, [r0, #4]
    8fc0:	6801      	ldr	r1, [r0, #0]
    8fc2:	68c0      	ldr	r0, [r0, #12]
    8fc4:	9000      	str	r0, [sp, #0]
    8fc6:	4816      	ldr	r0, [pc, #88]	; (9020 <os_default_irq+0x80>)
    8fc8:	f005 f806 	bl	dfd8 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    8fcc:	6923      	ldr	r3, [r4, #16]
    8fce:	9300      	str	r3, [sp, #0]
    8fd0:	68e3      	ldr	r3, [r4, #12]
    8fd2:	68a2      	ldr	r2, [r4, #8]
    8fd4:	6861      	ldr	r1, [r4, #4]
    8fd6:	4813      	ldr	r0, [pc, #76]	; (9024 <os_default_irq+0x84>)
    8fd8:	f004 fffe 	bl	dfd8 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    8fdc:	6a23      	ldr	r3, [r4, #32]
    8fde:	9300      	str	r3, [sp, #0]
    8fe0:	69e3      	ldr	r3, [r4, #28]
    8fe2:	69a2      	ldr	r2, [r4, #24]
    8fe4:	6961      	ldr	r1, [r4, #20]
    8fe6:	4810      	ldr	r0, [pc, #64]	; (9028 <os_default_irq+0x88>)
    8fe8:	f004 fff6 	bl	dfd8 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    8fec:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    8fee:	6983      	ldr	r3, [r0, #24]
    8ff0:	6942      	ldr	r2, [r0, #20]
    8ff2:	6901      	ldr	r1, [r0, #16]
    8ff4:	69c0      	ldr	r0, [r0, #28]
    8ff6:	9000      	str	r0, [sp, #0]
    8ff8:	480c      	ldr	r0, [pc, #48]	; (902c <os_default_irq+0x8c>)
    8ffa:	f004 ffed 	bl	dfd8 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    8ffe:	6869      	ldr	r1, [r5, #4]
    9000:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    9002:	6aab      	ldr	r3, [r5, #40]	; 0x28
    9004:	480a      	ldr	r0, [pc, #40]	; (9030 <os_default_irq+0x90>)
    9006:	f004 ffe7 	bl	dfd8 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    900a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    900c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    900e:	4809      	ldr	r0, [pc, #36]	; (9034 <os_default_irq+0x94>)
    9010:	f004 ffe2 	bl	dfd8 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    9014:	f7ff f8dc 	bl	81d0 <hal_system_reset>
    9018:	e000ed00 	.word	0xe000ed00
    901c:	000218e0 	.word	0x000218e0
    9020:	00021914 	.word	0x00021914
    9024:	00021948 	.word	0x00021948
    9028:	0002197c 	.word	0x0002197c
    902c:	000219b0 	.word	0x000219b0
    9030:	000219e4 	.word	0x000219e4
    9034:	00021a0c 	.word	0x00021a0c

00009038 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
    9038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
    903a:	f00f fa25 	bl	18488 <hal_watchdog_tickle>
    sanity_last = 0;
    903e:	2600      	movs	r6, #0
    9040:	e00b      	b.n	905a <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
    9042:	f000 fcd5 	bl	99f0 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
    9046:	f00f fa1f 	bl	18488 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
    904a:	4626      	mov	r6, r4
    904c:	e011      	b.n	9072 <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
    904e:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
    9050:	f00e fc96 	bl	17980 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
    9054:	4628      	mov	r0, r5
    9056:	f001 f98d 	bl	a374 <os_arch_restore_sr>
        ++g_os_idle_ctr;
    905a:	4a14      	ldr	r2, [pc, #80]	; (90ac <os_idle_task+0x74>)
    905c:	6813      	ldr	r3, [r2, #0]
    905e:	3301      	adds	r3, #1
    9060:	6013      	str	r3, [r2, #0]
        now = os_time_get();
    9062:	f001 f85b 	bl	a11c <os_time_get>
    9066:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
    9068:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
    906c:	1ac3      	subs	r3, r0, r3
    906e:	2b00      	cmp	r3, #0
    9070:	dce7      	bgt.n	9042 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
    9072:	f001 f979 	bl	a368 <os_arch_save_sr>
    9076:	4605      	mov	r5, r0
        now = os_time_get();
    9078:	f001 f850 	bl	a11c <os_time_get>
    907c:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
    907e:	f000 fe25 	bl	9ccc <os_sched_wakeup_ticks>
    9082:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
    9084:	4638      	mov	r0, r7
    9086:	f000 f981 	bl	938c <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
    908a:	4284      	cmp	r4, r0
    908c:	bf28      	it	cs
    908e:	4604      	movcs	r4, r0
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
    9090:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
    9094:	1bd8      	subs	r0, r3, r7
    9096:	42a0      	cmp	r0, r4
    9098:	bf28      	it	cs
    909a:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
    909c:	280b      	cmp	r0, #11
    909e:	d9d6      	bls.n	904e <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
    90a0:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
    90a4:	d9d4      	bls.n	9050 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
    90a6:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
    90aa:	e7d1      	b.n	9050 <os_idle_task+0x18>
    90ac:	20003230 	.word	0x20003230

000090b0 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
    90b0:	b508      	push	{r3, lr}
    90b2:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
    90b4:	2100      	movs	r1, #0
    90b6:	4608      	mov	r0, r1
    90b8:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
    90ba:	2300      	movs	r3, #0
    90bc:	461a      	mov	r2, r3
    90be:	4619      	mov	r1, r3
    90c0:	4618      	mov	r0, r3
    90c2:	f7ff ff47 	bl	8f54 <__assert_func>
	...

000090c8 <os_started>:
}
    90c8:	4b01      	ldr	r3, [pc, #4]	; (90d0 <os_started+0x8>)
    90ca:	6818      	ldr	r0, [r3, #0]
    90cc:	4770      	bx	lr
    90ce:	bf00      	nop
    90d0:	20004288 	.word	0x20004288

000090d4 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
    90d4:	b500      	push	{lr}
    90d6:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
    90d8:	2340      	movs	r3, #64	; 0x40
    90da:	9303      	str	r3, [sp, #12]
    90dc:	4b15      	ldr	r3, [pc, #84]	; (9134 <os_init_idle_task+0x60>)
    90de:	9302      	str	r3, [sp, #8]
    90e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    90e4:	9301      	str	r3, [sp, #4]
    90e6:	23ff      	movs	r3, #255	; 0xff
    90e8:	9300      	str	r3, [sp, #0]
    90ea:	2300      	movs	r3, #0
    90ec:	4a12      	ldr	r2, [pc, #72]	; (9138 <os_init_idle_task+0x64>)
    90ee:	4913      	ldr	r1, [pc, #76]	; (913c <os_init_idle_task+0x68>)
    90f0:	4813      	ldr	r0, [pc, #76]	; (9140 <os_init_idle_task+0x6c>)
    90f2:	f000 fed9 	bl	9ea8 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
    90f6:	b950      	cbnz	r0, 910e <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
    90f8:	f000 fcb0 	bl	9a5c <os_sanity_init>
    assert(rc == 0);
    90fc:	b968      	cbnz	r0, 911a <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
    90fe:	f247 5030 	movw	r0, #30000	; 0x7530
    9102:	f00f f97d 	bl	18400 <hal_watchdog_init>
    assert(rc == 0);
    9106:	b970      	cbnz	r0, 9126 <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
    9108:	b005      	add	sp, #20
    910a:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    910e:	2300      	movs	r3, #0
    9110:	461a      	mov	r2, r3
    9112:	4619      	mov	r1, r3
    9114:	4618      	mov	r0, r3
    9116:	f7ff ff1d 	bl	8f54 <__assert_func>
    assert(rc == 0);
    911a:	2300      	movs	r3, #0
    911c:	461a      	mov	r2, r3
    911e:	4619      	mov	r1, r3
    9120:	4618      	mov	r0, r3
    9122:	f7ff ff17 	bl	8f54 <__assert_func>
    assert(rc == 0);
    9126:	2300      	movs	r3, #0
    9128:	461a      	mov	r2, r3
    912a:	4619      	mov	r1, r3
    912c:	4618      	mov	r0, r3
    912e:	f7ff ff11 	bl	8f54 <__assert_func>
    9132:	bf00      	nop
    9134:	20003130 	.word	0x20003130
    9138:	00009039 	.word	0x00009039
    913c:	00021a28 	.word	0x00021a28
    9140:	200030dc 	.word	0x200030dc

00009144 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
    9144:	b510      	push	{r4, lr}
    9146:	b084      	sub	sp, #16
    9148:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
    914a:	4b26      	ldr	r3, [pc, #152]	; (91e4 <os_init+0xa0>)
    914c:	2200      	movs	r2, #0
    914e:	601a      	str	r2, [r3, #0]
    9150:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
    9152:	4b25      	ldr	r3, [pc, #148]	; (91e8 <os_init+0xa4>)
    9154:	601a      	str	r2, [r3, #0]
    9156:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
    9158:	f000 fad0 	bl	96fc <os_eventq_dflt_get>
    915c:	f000 fa12 	bl	9584 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
    9160:	f000 f9f8 	bl	9554 <os_dev_reset>

    err = os_arch_os_init();
    9164:	f001 f93a 	bl	a3dc <os_arch_os_init>
    assert(err == OS_OK);
    9168:	bb18      	cbnz	r0, 91b2 <os_init+0x6e>

    if (main_fn) {
    916a:	b194      	cbz	r4, 9192 <os_init+0x4e>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
    916c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    9170:	9303      	str	r3, [sp, #12]
    9172:	4b1e      	ldr	r3, [pc, #120]	; (91ec <os_init+0xa8>)
    9174:	9302      	str	r3, [sp, #8]
    9176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    917a:	9301      	str	r3, [sp, #4]
    917c:	237f      	movs	r3, #127	; 0x7f
    917e:	9300      	str	r3, [sp, #0]
    9180:	4623      	mov	r3, r4
    9182:	4a1b      	ldr	r2, [pc, #108]	; (91f0 <os_init+0xac>)
    9184:	491b      	ldr	r1, [pc, #108]	; (91f4 <os_init+0xb0>)
    9186:	481c      	ldr	r0, [pc, #112]	; (91f8 <os_init+0xb4>)
    9188:	f000 fe8e 	bl	9ea8 <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
    918c:	f010 0fff 	tst.w	r0, #255	; 0xff
    9190:	d115      	bne.n	91be <os_init+0x7a>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
    9192:	f008 ffdf 	bl	12154 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
    9196:	2001      	movs	r0, #1
    9198:	f000 f992 	bl	94c0 <os_dev_initialize_all>
    assert(err == OS_OK);
    919c:	f010 0fff 	tst.w	r0, #255	; 0xff
    91a0:	d113      	bne.n	91ca <os_init+0x86>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
    91a2:	2002      	movs	r0, #2
    91a4:	f000 f98c 	bl	94c0 <os_dev_initialize_all>
    assert(err == OS_OK);
    91a8:	f010 0fff 	tst.w	r0, #255	; 0xff
    91ac:	d113      	bne.n	91d6 <os_init+0x92>
}
    91ae:	b004      	add	sp, #16
    91b0:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
    91b2:	2300      	movs	r3, #0
    91b4:	461a      	mov	r2, r3
    91b6:	4619      	mov	r1, r3
    91b8:	4618      	mov	r0, r3
    91ba:	f7ff fecb 	bl	8f54 <__assert_func>
        assert(err == 0);
    91be:	2300      	movs	r3, #0
    91c0:	461a      	mov	r2, r3
    91c2:	4619      	mov	r1, r3
    91c4:	4618      	mov	r0, r3
    91c6:	f7ff fec5 	bl	8f54 <__assert_func>
    assert(err == OS_OK);
    91ca:	2300      	movs	r3, #0
    91cc:	461a      	mov	r2, r3
    91ce:	4619      	mov	r1, r3
    91d0:	4618      	mov	r0, r3
    91d2:	f7ff febf 	bl	8f54 <__assert_func>
    assert(err == OS_OK);
    91d6:	2300      	movs	r3, #0
    91d8:	461a      	mov	r2, r3
    91da:	4619      	mov	r1, r3
    91dc:	4618      	mov	r0, r3
    91de:	f7ff feb9 	bl	8f54 <__assert_func>
    91e2:	bf00      	nop
    91e4:	2000428c 	.word	0x2000428c
    91e8:	200050a4 	.word	0x200050a4
    91ec:	20003238 	.word	0x20003238
    91f0:	000090b1 	.word	0x000090b1
    91f4:	00021a30 	.word	0x00021a30
    91f8:	20004238 	.word	0x20004238

000091fc <os_start>:

void
os_start(void)
{
    91fc:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
    91fe:	f00f f93b 	bl	18478 <hal_watchdog_enable>

    err = os_arch_os_start();
    9202:	f001 f953 	bl	a4ac <os_arch_os_start>
    assert(err == OS_OK);
    9206:	b900      	cbnz	r0, 920a <os_start+0xe>
#else
    assert(0);
#endif
}
    9208:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
    920a:	2300      	movs	r3, #0
    920c:	461a      	mov	r2, r3
    920e:	4619      	mov	r1, r3
    9210:	4618      	mov	r0, r3
    9212:	f7ff fe9f 	bl	8f54 <__assert_func>

00009216 <os_reboot>:

void
os_reboot(int reason)
{
    9216:	b508      	push	{r3, lr}
    sysdown(reason);
    9218:	f006 fca6 	bl	fb68 <sysdown>
}
    921c:	bd08      	pop	{r3, pc}

0000921e <os_system_reset>:

void
os_system_reset(void)
{
    921e:	b508      	push	{r3, lr}
    /* Tickle watchdog just before re-entering bootloader.  Depending on what
     * the system has been doing lately, the watchdog timer might be close to
     * firing.
     */
    hal_watchdog_tickle();
    9220:	f00f f932 	bl	18488 <hal_watchdog_tickle>
    hal_system_reset();
    9224:	f7fe ffd4 	bl	81d0 <hal_system_reset>

00009228 <os_pkg_init>:
}

void
os_pkg_init(void)
{
    9228:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    922a:	4b0c      	ldr	r3, [pc, #48]	; (925c <os_pkg_init+0x34>)
    922c:	781b      	ldrb	r3, [r3, #0]
    922e:	b153      	cbz	r3, 9246 <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    9230:	2003      	movs	r0, #3
    9232:	f000 f945 	bl	94c0 <os_dev_initialize_all>
    assert(err == OS_OK);
    9236:	f010 0fff 	tst.w	r0, #255	; 0xff
    923a:	d109      	bne.n	9250 <os_pkg_init+0x28>

    os_mempool_module_init();
    923c:	f000 fb00 	bl	9840 <os_mempool_module_init>
    os_msys_init();
    9240:	f000 fb86 	bl	9950 <os_msys_init>
}
    9244:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    9246:	461a      	mov	r2, r3
    9248:	4619      	mov	r1, r3
    924a:	4618      	mov	r0, r3
    924c:	f7ff fe82 	bl	8f54 <__assert_func>
    assert(err == OS_OK);
    9250:	2300      	movs	r3, #0
    9252:	461a      	mov	r2, r3
    9254:	4619      	mov	r1, r3
    9256:	4618      	mov	r0, r3
    9258:	f7ff fe7c 	bl	8f54 <__assert_func>
    925c:	200065ac 	.word	0x200065ac

00009260 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
    9260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9262:	4604      	mov	r4, r0
    9264:	460d      	mov	r5, r1
    9266:	4617      	mov	r7, r2
    9268:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
    926a:	2220      	movs	r2, #32
    926c:	2100      	movs	r1, #0
    926e:	f002 ff0e 	bl	c08e <memset>
    c->c_ev.ev_cb = ev_cb;
    9272:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
    9274:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
    9276:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
    9278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000927c <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
    927c:	b538      	push	{r3, r4, r5, lr}
    927e:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
    9280:	f001 f872 	bl	a368 <os_arch_save_sr>
    9284:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
    9286:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
    9288:	b13b      	cbz	r3, 929a <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    928a:	69a2      	ldr	r2, [r4, #24]
    928c:	b172      	cbz	r2, 92ac <os_callout_stop+0x30>
    928e:	61d3      	str	r3, [r2, #28]
    9290:	69e3      	ldr	r3, [r4, #28]
    9292:	69a2      	ldr	r2, [r4, #24]
    9294:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
    9296:	2300      	movs	r3, #0
    9298:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
    929a:	6920      	ldr	r0, [r4, #16]
    929c:	b110      	cbz	r0, 92a4 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
    929e:	4621      	mov	r1, r4
    92a0:	f000 fa0a 	bl	96b8 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
    92a4:	4628      	mov	r0, r5
    92a6:	f001 f865 	bl	a374 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
    92aa:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    92ac:	4a01      	ldr	r2, [pc, #4]	; (92b4 <os_callout_stop+0x38>)
    92ae:	6053      	str	r3, [r2, #4]
    92b0:	e7ee      	b.n	9290 <os_callout_stop+0x14>
    92b2:	bf00      	nop
    92b4:	2000428c 	.word	0x2000428c

000092b8 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
    92b8:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
    92ba:	6903      	ldr	r3, [r0, #16]
    92bc:	b193      	cbz	r3, 92e4 <os_callout_reset+0x2c>
    92be:	4604      	mov	r4, r0
    92c0:	460e      	mov	r6, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
    92c2:	2900      	cmp	r1, #0
    92c4:	db2f      	blt.n	9326 <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
    92c6:	f001 f84f 	bl	a368 <os_arch_save_sr>
    92ca:	4605      	mov	r5, r0

    os_callout_stop(c);
    92cc:	4620      	mov	r0, r4
    92ce:	f7ff ffd5 	bl	927c <os_callout_stop>

    if (ticks == 0) {
    92d2:	b906      	cbnz	r6, 92d6 <os_callout_reset+0x1e>
        ticks = 1;
    92d4:	2601      	movs	r6, #1
    }

    c->c_ticks = os_time_get() + ticks;
    92d6:	f000 ff21 	bl	a11c <os_time_get>
    92da:	4430      	add	r0, r6
    92dc:	6160      	str	r0, [r4, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    92de:	4b13      	ldr	r3, [pc, #76]	; (932c <os_callout_reset+0x74>)
    92e0:	681b      	ldr	r3, [r3, #0]
    92e2:	e005      	b.n	92f0 <os_callout_reset+0x38>
    assert(c->c_evq != NULL);
    92e4:	461a      	mov	r2, r3
    92e6:	4619      	mov	r1, r3
    92e8:	4618      	mov	r0, r3
    92ea:	f7ff fe33 	bl	8f54 <__assert_func>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    92ee:	699b      	ldr	r3, [r3, #24]
    92f0:	b11b      	cbz	r3, 92fa <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
    92f2:	695a      	ldr	r2, [r3, #20]
    92f4:	1a82      	subs	r2, r0, r2
    92f6:	2a00      	cmp	r2, #0
    92f8:	daf9      	bge.n	92ee <os_callout_reset+0x36>
            break;
        }
    }

    if (entry) {
    92fa:	b15b      	cbz	r3, 9314 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
    92fc:	69da      	ldr	r2, [r3, #28]
    92fe:	61e2      	str	r2, [r4, #28]
    9300:	61a3      	str	r3, [r4, #24]
    9302:	69da      	ldr	r2, [r3, #28]
    9304:	6014      	str	r4, [r2, #0]
    9306:	3418      	adds	r4, #24
    9308:	61dc      	str	r4, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
    930a:	4628      	mov	r0, r5
    930c:	f001 f832 	bl	a374 <os_arch_restore_sr>

    ret = OS_OK;
    9310:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
    9312:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    9314:	2300      	movs	r3, #0
    9316:	61a3      	str	r3, [r4, #24]
    9318:	4b04      	ldr	r3, [pc, #16]	; (932c <os_callout_reset+0x74>)
    931a:	685a      	ldr	r2, [r3, #4]
    931c:	61e2      	str	r2, [r4, #28]
    931e:	6014      	str	r4, [r2, #0]
    9320:	3418      	adds	r4, #24
    9322:	605c      	str	r4, [r3, #4]
    9324:	e7f1      	b.n	930a <os_callout_reset+0x52>
        ret = OS_EINVAL;
    9326:	2002      	movs	r0, #2
    return ret;
    9328:	e7f3      	b.n	9312 <os_callout_reset+0x5a>
    932a:	bf00      	nop
    932c:	2000428c 	.word	0x2000428c

00009330 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
    9330:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
    9332:	f000 fef3 	bl	a11c <os_time_get>
    9336:	4605      	mov	r5, r0
    9338:	e00f      	b.n	935a <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    933a:	69e2      	ldr	r2, [r4, #28]
    933c:	4b12      	ldr	r3, [pc, #72]	; (9388 <os_callout_tick+0x58>)
    933e:	605a      	str	r2, [r3, #4]
    9340:	69e3      	ldr	r3, [r4, #28]
    9342:	69a2      	ldr	r2, [r4, #24]
    9344:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
    9346:	2300      	movs	r3, #0
    9348:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
    934a:	f001 f813 	bl	a374 <os_arch_restore_sr>

        if (c) {
    934e:	b1d4      	cbz	r4, 9386 <os_callout_tick+0x56>
            if (c->c_evq) {
    9350:	6920      	ldr	r0, [r4, #16]
    9352:	b1a0      	cbz	r0, 937e <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
    9354:	4621      	mov	r1, r4
    9356:	f000 f923 	bl	95a0 <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
    935a:	f001 f805 	bl	a368 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
    935e:	4b0a      	ldr	r3, [pc, #40]	; (9388 <os_callout_tick+0x58>)
    9360:	681c      	ldr	r4, [r3, #0]
        if (c) {
    9362:	2c00      	cmp	r4, #0
    9364:	d0f1      	beq.n	934a <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
    9366:	6963      	ldr	r3, [r4, #20]
    9368:	1aeb      	subs	r3, r5, r3
    936a:	2b00      	cmp	r3, #0
    936c:	db05      	blt.n	937a <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    936e:	69a3      	ldr	r3, [r4, #24]
    9370:	2b00      	cmp	r3, #0
    9372:	d0e2      	beq.n	933a <os_callout_tick+0xa>
    9374:	69e2      	ldr	r2, [r4, #28]
    9376:	61da      	str	r2, [r3, #28]
    9378:	e7e2      	b.n	9340 <os_callout_tick+0x10>
                c = NULL;
    937a:	2400      	movs	r4, #0
    937c:	e7e5      	b.n	934a <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
    937e:	6863      	ldr	r3, [r4, #4]
    9380:	4620      	mov	r0, r4
    9382:	4798      	blx	r3
    9384:	e7e9      	b.n	935a <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
    9386:	bd38      	pop	{r3, r4, r5, pc}
    9388:	2000428c 	.word	0x2000428c

0000938c <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
    938c:	b510      	push	{r4, lr}
    938e:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
    9390:	f000 fff3 	bl	a37a <os_arch_in_critical>
    9394:	b130      	cbz	r0, 93a4 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
    9396:	4b09      	ldr	r3, [pc, #36]	; (93bc <os_callout_wakeup_ticks+0x30>)
    9398:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
    939a:	b15b      	cbz	r3, 93b4 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    939c:	6958      	ldr	r0, [r3, #20]
    939e:	1b00      	subs	r0, r0, r4
    93a0:	d406      	bmi.n	93b0 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
    93a2:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    93a4:	2300      	movs	r3, #0
    93a6:	461a      	mov	r2, r3
    93a8:	4619      	mov	r1, r3
    93aa:	4618      	mov	r0, r3
    93ac:	f7ff fdd2 	bl	8f54 <__assert_func>
            rt = 0;     /* callout time is in the past */
    93b0:	2000      	movs	r0, #0
    93b2:	e7f6      	b.n	93a2 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
    93b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    93b8:	e7f3      	b.n	93a2 <os_callout_wakeup_ticks+0x16>
    93ba:	bf00      	nop
    93bc:	2000428c 	.word	0x2000428c

000093c0 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
    93c0:	b508      	push	{r3, lr}
    93c2:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    93c4:	2000      	movs	r0, #0
    93c6:	f00e ff6d 	bl	182a4 <hal_timer_config>
    return rc;
}
    93ca:	bd08      	pop	{r3, pc}

000093cc <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
    93cc:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    93ce:	2000      	movs	r0, #0
    93d0:	f00e ffe6 	bl	183a0 <hal_timer_read>
    return cpu_time;
}
    93d4:	bd08      	pop	{r3, pc}
	...

000093d8 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
    93d8:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    93da:	4b15      	ldr	r3, [pc, #84]	; (9430 <os_dev_add+0x58>)
    93dc:	681d      	ldr	r5, [r3, #0]
    93de:	b115      	cbz	r5, 93e6 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    93e0:	462b      	mov	r3, r5
    prev_dev = NULL;
    93e2:	2400      	movs	r4, #0
    93e4:	e008      	b.n	93f8 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    93e6:	4603      	mov	r3, r0
    93e8:	f843 5f20 	str.w	r5, [r3, #32]!
    93ec:	4a10      	ldr	r2, [pc, #64]	; (9430 <os_dev_add+0x58>)
    93ee:	6053      	str	r3, [r2, #4]
    93f0:	6010      	str	r0, [r2, #0]
        return (0);
    93f2:	e010      	b.n	9416 <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
    93f4:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    93f6:	6a1b      	ldr	r3, [r3, #32]
    93f8:	b143      	cbz	r3, 940c <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
    93fa:	7e01      	ldrb	r1, [r0, #24]
    93fc:	7e1a      	ldrb	r2, [r3, #24]
    93fe:	4291      	cmp	r1, r2
    9400:	d304      	bcc.n	940c <os_dev_add+0x34>
    9402:	d1f7      	bne.n	93f4 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
    9404:	7e41      	ldrb	r1, [r0, #25]
    9406:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
    9408:	4291      	cmp	r1, r2
    940a:	d2f3      	bcs.n	93f4 <os_dev_add+0x1c>
    }

    if (prev_dev) {
    940c:	b15c      	cbz	r4, 9426 <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    940e:	6a23      	ldr	r3, [r4, #32]
    9410:	6203      	str	r3, [r0, #32]
    9412:	b11b      	cbz	r3, 941c <os_dev_add+0x44>
    9414:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
    9416:	2000      	movs	r0, #0
    9418:	bc30      	pop	{r4, r5}
    941a:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    941c:	f100 0320 	add.w	r3, r0, #32
    9420:	4a03      	ldr	r2, [pc, #12]	; (9430 <os_dev_add+0x58>)
    9422:	6053      	str	r3, [r2, #4]
    9424:	e7f6      	b.n	9414 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    9426:	6205      	str	r5, [r0, #32]
    9428:	4b01      	ldr	r3, [pc, #4]	; (9430 <os_dev_add+0x58>)
    942a:	6018      	str	r0, [r3, #0]
    942c:	e7f3      	b.n	9416 <os_dev_add+0x3e>
    942e:	bf00      	nop
    9430:	20004294 	.word	0x20004294

00009434 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    9434:	b510      	push	{r4, lr}
    9436:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    9438:	6903      	ldr	r3, [r0, #16]
    943a:	6941      	ldr	r1, [r0, #20]
    943c:	4798      	blx	r3
    if (rc != 0) {
    943e:	b128      	cbz	r0, 944c <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    9440:	7ee3      	ldrb	r3, [r4, #27]
    9442:	f013 0f08 	tst.w	r3, #8
    9446:	d105      	bne.n	9454 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    9448:	2000      	movs	r0, #0
    944a:	e003      	b.n	9454 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    944c:	7ee3      	ldrb	r3, [r4, #27]
    944e:	f043 0301 	orr.w	r3, r3, #1
    9452:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
    9454:	bd10      	pop	{r4, pc}

00009456 <os_dev_init>:
{
    9456:	4684      	mov	ip, r0
    dev->od_name = name;
    9458:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    945a:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
    945c:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
    945e:	2000      	movs	r0, #0
    9460:	f88c 001b 	strb.w	r0, [ip, #27]
    dev->od_open_ref = 0;
    9464:	f88c 001a 	strb.w	r0, [ip, #26]
    dev->od_init = od_init;
    9468:	9b00      	ldr	r3, [sp, #0]
    946a:	f8cc 3010 	str.w	r3, [ip, #16]
    dev->od_init_arg = arg;
    946e:	9b01      	ldr	r3, [sp, #4]
    9470:	f8cc 3014 	str.w	r3, [ip, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    9474:	f8cc 0000 	str.w	r0, [ip]
    9478:	f8cc 0004 	str.w	r0, [ip, #4]
    947c:	f8cc 0008 	str.w	r0, [ip, #8]
    9480:	f8cc 000c 	str.w	r0, [ip, #12]
}
    9484:	4770      	bx	lr
	...

00009488 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    9488:	b530      	push	{r4, r5, lr}
    948a:	b083      	sub	sp, #12
    948c:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
    948e:	9d07      	ldr	r5, [sp, #28]
    9490:	9501      	str	r5, [sp, #4]
    9492:	9d06      	ldr	r5, [sp, #24]
    9494:	9500      	str	r5, [sp, #0]
    9496:	f7ff ffde 	bl	9456 <os_dev_init>
    if (rc != 0) {
    949a:	b108      	cbz	r0, 94a0 <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
    949c:	b003      	add	sp, #12
    949e:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
    94a0:	4620      	mov	r0, r4
    94a2:	f7ff ff99 	bl	93d8 <os_dev_add>
    if (rc != 0) {
    94a6:	2800      	cmp	r0, #0
    94a8:	d1f8      	bne.n	949c <os_dev_create+0x14>
    if (g_os_started) {
    94aa:	4b04      	ldr	r3, [pc, #16]	; (94bc <os_dev_create+0x34>)
    94ac:	681b      	ldr	r3, [r3, #0]
    94ae:	2b00      	cmp	r3, #0
    94b0:	d0f4      	beq.n	949c <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
    94b2:	4620      	mov	r0, r4
    94b4:	f7ff ffbe 	bl	9434 <os_dev_initialize>
    return (rc);
    94b8:	e7f0      	b.n	949c <os_dev_create+0x14>
    94ba:	bf00      	nop
    94bc:	20004288 	.word	0x20004288

000094c0 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
    94c0:	b538      	push	{r3, r4, r5, lr}
    94c2:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    94c4:	4b08      	ldr	r3, [pc, #32]	; (94e8 <os_dev_initialize_all+0x28>)
    94c6:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
    94c8:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    94ca:	e000      	b.n	94ce <os_dev_initialize_all+0xe>
    94cc:	6a24      	ldr	r4, [r4, #32]
    94ce:	b144      	cbz	r4, 94e2 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    94d0:	7e23      	ldrb	r3, [r4, #24]
    94d2:	42ab      	cmp	r3, r5
    94d4:	d1fa      	bne.n	94cc <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
    94d6:	4620      	mov	r0, r4
    94d8:	f7ff ffac 	bl	9434 <os_dev_initialize>
            if (rc) {
    94dc:	4602      	mov	r2, r0
    94de:	2800      	cmp	r0, #0
    94e0:	d0f4      	beq.n	94cc <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
    94e2:	4610      	mov	r0, r2
    94e4:	bd38      	pop	{r3, r4, r5, pc}
    94e6:	bf00      	nop
    94e8:	20004294 	.word	0x20004294

000094ec <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
    94ec:	b538      	push	{r3, r4, r5, lr}
    94ee:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    94f0:	4b06      	ldr	r3, [pc, #24]	; (950c <os_dev_lookup+0x20>)
    94f2:	681c      	ldr	r4, [r3, #0]
    94f4:	e000      	b.n	94f8 <os_dev_lookup+0xc>
    94f6:	6a24      	ldr	r4, [r4, #32]
    94f8:	b12c      	cbz	r4, 9506 <os_dev_lookup+0x1a>
        if (!strcmp(dev->od_name, name)) {
    94fa:	4629      	mov	r1, r5
    94fc:	69e0      	ldr	r0, [r4, #28]
    94fe:	f002 fdf1 	bl	c0e4 <strcmp>
    9502:	2800      	cmp	r0, #0
    9504:	d1f7      	bne.n	94f6 <os_dev_lookup+0xa>
            break;
        }
    }
    return (dev);
}
    9506:	4620      	mov	r0, r4
    9508:	bd38      	pop	{r3, r4, r5, pc}
    950a:	bf00      	nop
    950c:	20004294 	.word	0x20004294

00009510 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
    9510:	b570      	push	{r4, r5, r6, lr}
    9512:	460d      	mov	r5, r1
    9514:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
    9516:	f7ff ffe9 	bl	94ec <os_dev_lookup>
    if (dev == NULL) {
    951a:	4604      	mov	r4, r0
    951c:	b1a0      	cbz	r0, 9548 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
    951e:	7ec3      	ldrb	r3, [r0, #27]
    9520:	f013 0f01 	tst.w	r3, #1
    9524:	d012      	beq.n	954c <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
    9526:	6803      	ldr	r3, [r0, #0]
    9528:	b11b      	cbz	r3, 9532 <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
    952a:	4632      	mov	r2, r6
    952c:	4629      	mov	r1, r5
    952e:	4798      	blx	r3
        if (rc != 0) {
    9530:	b970      	cbnz	r0, 9550 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
    9532:	f000 ff19 	bl	a368 <os_arch_save_sr>
    ++dev->od_open_ref;
    9536:	7ea3      	ldrb	r3, [r4, #26]
    9538:	3301      	adds	r3, #1
    953a:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
    953c:	7ee3      	ldrb	r3, [r4, #27]
    953e:	f043 0302 	orr.w	r3, r3, #2
    9542:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
    9544:	f000 ff16 	bl	a374 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
    9548:	4620      	mov	r0, r4
    954a:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
    954c:	2400      	movs	r4, #0
    954e:	e7fb      	b.n	9548 <os_dev_open+0x38>
    return (NULL);
    9550:	2400      	movs	r4, #0
    9552:	e7f9      	b.n	9548 <os_dev_open+0x38>

00009554 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
    9554:	4b02      	ldr	r3, [pc, #8]	; (9560 <os_dev_reset+0xc>)
    9556:	2200      	movs	r2, #0
    9558:	601a      	str	r2, [r3, #0]
    955a:	605b      	str	r3, [r3, #4]
}
    955c:	4770      	bx	lr
    955e:	bf00      	nop
    9560:	20004294 	.word	0x20004294

00009564 <os_dev_walk>:

void
os_dev_walk(int (*walk_func)(struct os_dev *, void *), void *arg)
{
    9564:	b570      	push	{r4, r5, r6, lr}
    9566:	4606      	mov	r6, r0
    9568:	460d      	mov	r5, r1
    struct os_dev *dev;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    956a:	4b05      	ldr	r3, [pc, #20]	; (9580 <os_dev_walk+0x1c>)
    956c:	681c      	ldr	r4, [r3, #0]
    956e:	e000      	b.n	9572 <os_dev_walk+0xe>
    9570:	6a24      	ldr	r4, [r4, #32]
    9572:	b124      	cbz	r4, 957e <os_dev_walk+0x1a>
        if (walk_func(dev, arg)) {
    9574:	4629      	mov	r1, r5
    9576:	4620      	mov	r0, r4
    9578:	47b0      	blx	r6
    957a:	2800      	cmp	r0, #0
    957c:	d0f8      	beq.n	9570 <os_dev_walk+0xc>
            break;
        }
    }
}
    957e:	bd70      	pop	{r4, r5, r6, pc}
    9580:	20004294 	.word	0x20004294

00009584 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
    9584:	2300      	movs	r3, #0
    9586:	6003      	str	r3, [r0, #0]
    9588:	6043      	str	r3, [r0, #4]
    958a:	6083      	str	r3, [r0, #8]
    958c:	60c3      	str	r3, [r0, #12]
    STAILQ_INIT(&evq->evq_list);
    958e:	f100 0308 	add.w	r3, r0, #8
    9592:	60c3      	str	r3, [r0, #12]
}
    9594:	4770      	bx	lr

00009596 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
    9596:	68c0      	ldr	r0, [r0, #12]
}
    9598:	3800      	subs	r0, #0
    959a:	bf18      	it	ne
    959c:	2001      	movne	r0, #1
    959e:	4770      	bx	lr

000095a0 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
    95a0:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
    95a2:	b1f0      	cbz	r0, 95e2 <os_eventq_put+0x42>
    95a4:	460c      	mov	r4, r1
    95a6:	4606      	mov	r6, r0
    95a8:	f7ff fff5 	bl	9596 <os_eventq_inited>
    95ac:	b1c8      	cbz	r0, 95e2 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    95ae:	f000 fedb 	bl	a368 <os_arch_save_sr>
    95b2:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
    95b4:	7823      	ldrb	r3, [r4, #0]
    95b6:	b9d3      	cbnz	r3, 95ee <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
    95b8:	2301      	movs	r3, #1
    95ba:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
    95bc:	2300      	movs	r3, #0
    95be:	60e3      	str	r3, [r4, #12]
    95c0:	68f3      	ldr	r3, [r6, #12]
    95c2:	601c      	str	r4, [r3, #0]
    95c4:	340c      	adds	r4, #12
    95c6:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
    95c8:	6870      	ldr	r0, [r6, #4]
    95ca:	b1b8      	cbz	r0, 95fc <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
    95cc:	7b03      	ldrb	r3, [r0, #12]
    95ce:	2b02      	cmp	r3, #2
    95d0:	d010      	beq.n	95f4 <os_eventq_put+0x54>
    resched = 0;
    95d2:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
    95d4:	2300      	movs	r3, #0
    95d6:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
    95d8:	4628      	mov	r0, r5
    95da:	f000 fecb 	bl	a374 <os_arch_restore_sr>

    if (resched) {
    95de:	b97c      	cbnz	r4, 9600 <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
    95e0:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
    95e2:	2300      	movs	r3, #0
    95e4:	461a      	mov	r2, r3
    95e6:	4619      	mov	r1, r3
    95e8:	4618      	mov	r0, r3
    95ea:	f7ff fcb3 	bl	8f54 <__assert_func>
        OS_EXIT_CRITICAL(sr);
    95ee:	f000 fec1 	bl	a374 <os_arch_restore_sr>
        return;
    95f2:	e7f5      	b.n	95e0 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
    95f4:	f000 fb12 	bl	9c1c <os_sched_wakeup>
            resched = 1;
    95f8:	2401      	movs	r4, #1
    95fa:	e7eb      	b.n	95d4 <os_eventq_put+0x34>
    resched = 0;
    95fc:	2400      	movs	r4, #0
    95fe:	e7eb      	b.n	95d8 <os_eventq_put+0x38>
        os_sched(NULL);
    9600:	2000      	movs	r0, #0
    9602:	f000 fb89 	bl	9d18 <os_sched>
    9606:	e7eb      	b.n	95e0 <os_eventq_put+0x40>

00009608 <os_eventq_get_no_wait>:

struct os_event *
os_eventq_get_no_wait(struct os_eventq *evq)
{
    9608:	4603      	mov	r3, r0
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
    960a:	6880      	ldr	r0, [r0, #8]
    if (ev) {
    960c:	b120      	cbz	r0, 9618 <os_eventq_get_no_wait+0x10>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    960e:	68c2      	ldr	r2, [r0, #12]
    9610:	609a      	str	r2, [r3, #8]
    9612:	b112      	cbz	r2, 961a <os_eventq_get_no_wait+0x12>
        ev->ev_queued = 0;
    9614:	2300      	movs	r3, #0
    9616:	7003      	strb	r3, [r0, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
    9618:	4770      	bx	lr
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    961a:	f103 0208 	add.w	r2, r3, #8
    961e:	60da      	str	r2, [r3, #12]
    9620:	e7f8      	b.n	9614 <os_eventq_get_no_wait+0xc>

00009622 <os_eventq_get>:

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
    9622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9624:	4606      	mov	r6, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
    9626:	f000 fa63 	bl	9af0 <os_sched_get_current_task>
    962a:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
    962c:	6833      	ldr	r3, [r6, #0]
    962e:	4283      	cmp	r3, r0
    9630:	d001      	beq.n	9636 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
    9632:	b923      	cbnz	r3, 963e <os_eventq_get+0x1c>
            evq->evq_owner = t;
    9634:	6030      	str	r0, [r6, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
    9636:	f000 fe97 	bl	a368 <os_arch_save_sr>
    963a:	4605      	mov	r5, r0
    963c:	e01e      	b.n	967c <os_eventq_get+0x5a>
            assert(0);
    963e:	2300      	movs	r3, #0
    9640:	461a      	mov	r2, r3
    9642:	4619      	mov	r1, r3
    9644:	4618      	mov	r0, r3
    9646:	f7ff fc85 	bl	8f54 <__assert_func>
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
    if (ev) {
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    964a:	f106 0308 	add.w	r3, r6, #8
    964e:	60f3      	str	r3, [r6, #12]
    9650:	e01b      	b.n	968a <os_eventq_get+0x68>
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
    9652:	6074      	str	r4, [r6, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
    9654:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9658:	4620      	mov	r0, r4
    965a:	f000 fa55 	bl	9b08 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
    965e:	7b63      	ldrb	r3, [r4, #13]
    9660:	f043 0308 	orr.w	r3, r3, #8
    9664:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
    9666:	4628      	mov	r0, r5
    9668:	f000 fe84 	bl	a374 <os_arch_restore_sr>

        os_sched(NULL);
    966c:	2000      	movs	r0, #0
    966e:	f000 fb53 	bl	9d18 <os_sched>

        OS_ENTER_CRITICAL(sr);
    9672:	f000 fe79 	bl	a368 <os_arch_save_sr>
    9676:	4605      	mov	r5, r0
        evq->evq_task = NULL;
    9678:	2300      	movs	r3, #0
    967a:	6073      	str	r3, [r6, #4]
    ev = STAILQ_FIRST(&evq->evq_list);
    967c:	68b7      	ldr	r7, [r6, #8]
    if (ev) {
    967e:	2f00      	cmp	r7, #0
    9680:	d0e7      	beq.n	9652 <os_eventq_get+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    9682:	68fb      	ldr	r3, [r7, #12]
    9684:	60b3      	str	r3, [r6, #8]
    9686:	2b00      	cmp	r3, #0
    9688:	d0df      	beq.n	964a <os_eventq_get+0x28>
        ev->ev_queued = 0;
    968a:	2300      	movs	r3, #0
    968c:	703b      	strb	r3, [r7, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    968e:	7b63      	ldrb	r3, [r4, #13]
    9690:	f023 0308 	bic.w	r3, r3, #8
    9694:	7363      	strb	r3, [r4, #13]
        goto pull_one;
    }
    OS_EXIT_CRITICAL(sr);
    9696:	4628      	mov	r0, r5
    9698:	f000 fe6c 	bl	a374 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
    969c:	4638      	mov	r0, r7
    969e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000096a0 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
    96a0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
    96a2:	f7ff ffbe 	bl	9622 <os_eventq_get>
    assert(ev->ev_cb != NULL);
    96a6:	6843      	ldr	r3, [r0, #4]
    96a8:	b10b      	cbz	r3, 96ae <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
    96aa:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
    96ac:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
    96ae:	461a      	mov	r2, r3
    96b0:	4619      	mov	r1, r3
    96b2:	4618      	mov	r0, r3
    96b4:	f7ff fc4e 	bl	8f54 <__assert_func>

000096b8 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
    96b8:	b538      	push	{r3, r4, r5, lr}
    96ba:	4605      	mov	r5, r0
    96bc:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    96be:	f000 fe53 	bl	a368 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
    96c2:	7823      	ldrb	r3, [r4, #0]
    96c4:	b14b      	cbz	r3, 96da <os_eventq_remove+0x22>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    96c6:	68ab      	ldr	r3, [r5, #8]
    96c8:	42a3      	cmp	r3, r4
    96ca:	d00b      	beq.n	96e4 <os_eventq_remove+0x2c>
    96cc:	461a      	mov	r2, r3
    96ce:	68db      	ldr	r3, [r3, #12]
    96d0:	42a3      	cmp	r3, r4
    96d2:	d1fb      	bne.n	96cc <os_eventq_remove+0x14>
    96d4:	68db      	ldr	r3, [r3, #12]
    96d6:	60d3      	str	r3, [r2, #12]
    96d8:	b163      	cbz	r3, 96f4 <os_eventq_remove+0x3c>
    }
    ev->ev_queued = 0;
    96da:	2300      	movs	r3, #0
    96dc:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
    96de:	f000 fe49 	bl	a374 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
    96e2:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    96e4:	68db      	ldr	r3, [r3, #12]
    96e6:	60ab      	str	r3, [r5, #8]
    96e8:	2b00      	cmp	r3, #0
    96ea:	d1f6      	bne.n	96da <os_eventq_remove+0x22>
    96ec:	f105 0308 	add.w	r3, r5, #8
    96f0:	60eb      	str	r3, [r5, #12]
    96f2:	e7f2      	b.n	96da <os_eventq_remove+0x22>
    96f4:	320c      	adds	r2, #12
    96f6:	60ea      	str	r2, [r5, #12]
    96f8:	e7ef      	b.n	96da <os_eventq_remove+0x22>
	...

000096fc <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
    96fc:	4800      	ldr	r0, [pc, #0]	; (9700 <os_eventq_dflt_get+0x4>)
    96fe:	4770      	bx	lr
    9700:	2000429c 	.word	0x2000429c

00009704 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    9704:	2800      	cmp	r0, #0
    9706:	d031      	beq.n	976c <os_mempool_init_internal+0x68>
{
    9708:	b430      	push	{r4, r5}
    970a:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
    970c:	2a00      	cmp	r2, #0
    970e:	d02f      	beq.n	9770 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    9710:	b1bb      	cbz	r3, 9742 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
    9712:	b113      	cbz	r3, 971a <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    9714:	f013 0f03 	tst.w	r3, #3
    9718:	d12c      	bne.n	9774 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    971a:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
    971c:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
    971e:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
    9720:	f89d 000c 	ldrb.w	r0, [sp, #12]
    9724:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
    9726:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    9728:	60e3      	str	r3, [r4, #12]
    mp->name = name;
    972a:	9802      	ldr	r0, [sp, #8]
    972c:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
    972e:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
    9730:	b199      	cbz	r1, 975a <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    9732:	f012 0f03 	tst.w	r2, #3
    9736:	d002      	beq.n	973e <os_mempool_init_internal+0x3a>
    9738:	f022 0203 	bic.w	r2, r2, #3
    973c:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    973e:	2001      	movs	r0, #1
    9740:	e007      	b.n	9752 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
    9742:	2900      	cmp	r1, #0
    9744:	d0e5      	beq.n	9712 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
    9746:	2003      	movs	r0, #3
    9748:	e00e      	b.n	9768 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
    974a:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    974c:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
    974e:	3001      	adds	r0, #1
            block_addr += true_block_size;
    9750:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
    9752:	4281      	cmp	r1, r0
    9754:	dcf9      	bgt.n	974a <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    9756:	2200      	movs	r2, #0
    9758:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    975a:	2000      	movs	r0, #0
    975c:	6120      	str	r0, [r4, #16]
    975e:	4b06      	ldr	r3, [pc, #24]	; (9778 <os_mempool_init_internal+0x74>)
    9760:	685a      	ldr	r2, [r3, #4]
    9762:	6014      	str	r4, [r2, #0]
    9764:	3410      	adds	r4, #16
    9766:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
    9768:	bc30      	pop	{r4, r5}
    976a:	4770      	bx	lr
        return OS_INVALID_PARM;
    976c:	2003      	movs	r0, #3
}
    976e:	4770      	bx	lr
        return OS_INVALID_PARM;
    9770:	2003      	movs	r0, #3
    9772:	e7f9      	b.n	9768 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
    9774:	2004      	movs	r0, #4
    9776:	e7f7      	b.n	9768 <os_mempool_init_internal+0x64>
    9778:	200042ac 	.word	0x200042ac

0000977c <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    977c:	b510      	push	{r4, lr}
    977e:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    9780:	2400      	movs	r4, #0
    9782:	9401      	str	r4, [sp, #4]
    9784:	9c04      	ldr	r4, [sp, #16]
    9786:	9400      	str	r4, [sp, #0]
    9788:	f7ff ffbc 	bl	9704 <os_mempool_init_internal>
}
    978c:	b002      	add	sp, #8
    978e:	bd10      	pop	{r4, pc}

00009790 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
    9790:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    9792:	4604      	mov	r4, r0
    9794:	b198      	cbz	r0, 97be <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
    9796:	f000 fde7 	bl	a368 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
    979a:	88e3      	ldrh	r3, [r4, #6]
    979c:	b153      	cbz	r3, 97b4 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    979e:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    97a0:	682a      	ldr	r2, [r5, #0]
    97a2:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    97a4:	3b01      	subs	r3, #1
    97a6:	b29b      	uxth	r3, r3
    97a8:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    97aa:	8922      	ldrh	r2, [r4, #8]
    97ac:	4293      	cmp	r3, r2
    97ae:	d202      	bcs.n	97b6 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
    97b0:	8123      	strh	r3, [r4, #8]
    97b2:	e000      	b.n	97b6 <os_memblock_get+0x26>
    block = NULL;
    97b4:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
    97b6:	f000 fddd 	bl	a374 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
    97ba:	4628      	mov	r0, r5
    97bc:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
    97be:	4605      	mov	r5, r0
    return (void *)block;
    97c0:	e7fb      	b.n	97ba <os_memblock_get+0x2a>

000097c2 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    97c2:	b538      	push	{r3, r4, r5, lr}
    97c4:	4604      	mov	r4, r0
    97c6:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    97c8:	f000 fdce 	bl	a368 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    97cc:	6963      	ldr	r3, [r4, #20]
    97ce:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
    97d0:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    97d2:	88e3      	ldrh	r3, [r4, #6]
    97d4:	3301      	adds	r3, #1
    97d6:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    97d8:	f000 fdcc 	bl	a374 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    97dc:	2000      	movs	r0, #0
    97de:	bd38      	pop	{r3, r4, r5, pc}

000097e0 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    97e0:	b178      	cbz	r0, 9802 <os_memblock_put+0x22>
    97e2:	4603      	mov	r3, r0
    97e4:	b179      	cbz	r1, 9806 <os_memblock_put+0x26>
{
    97e6:	b510      	push	{r4, lr}
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    97e8:	7a82      	ldrb	r2, [r0, #10]
    97ea:	f012 0f01 	tst.w	r2, #1
    97ee:	d004      	beq.n	97fa <os_memblock_put+0x1a>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    97f0:	69c4      	ldr	r4, [r0, #28]
    97f2:	b114      	cbz	r4, 97fa <os_memblock_put+0x1a>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    97f4:	6a02      	ldr	r2, [r0, #32]
    97f6:	47a0      	blx	r4
            goto done;
    97f8:	e002      	b.n	9800 <os_memblock_put+0x20>
        }
    }

    /* No callback; free the block. */
    ret = os_memblock_put_from_cb(mp, block_addr);
    97fa:	4618      	mov	r0, r3
    97fc:	f7ff ffe1 	bl	97c2 <os_memblock_put_from_cb>

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    9800:	bd10      	pop	{r4, pc}
        ret = OS_INVALID_PARM;
    9802:	2003      	movs	r0, #3
    9804:	4770      	bx	lr
    9806:	2003      	movs	r0, #3
}
    9808:	4770      	bx	lr
	...

0000980c <os_mempool_info_get_next>:

struct os_mempool *
os_mempool_info_get_next(struct os_mempool *mp, struct os_mempool_info *omi)
{
    980c:	b510      	push	{r4, lr}
    980e:	460b      	mov	r3, r1
    struct os_mempool *cur;

    if (mp == NULL) {
    9810:	b188      	cbz	r0, 9836 <os_mempool_info_get_next+0x2a>
        cur = STAILQ_FIRST(&g_os_mempool_list);
    } else {
        cur = STAILQ_NEXT(mp, mp_list);
    9812:	6904      	ldr	r4, [r0, #16]
    }

    if (cur == NULL) {
    9814:	b16c      	cbz	r4, 9832 <os_mempool_info_get_next+0x26>
        return (NULL);
    }

    omi->omi_block_size = cur->mp_block_size;
    9816:	6822      	ldr	r2, [r4, #0]
    9818:	601a      	str	r2, [r3, #0]
    omi->omi_num_blocks = cur->mp_num_blocks;
    981a:	88a2      	ldrh	r2, [r4, #4]
    981c:	605a      	str	r2, [r3, #4]
    omi->omi_num_free = cur->mp_num_free;
    981e:	88e2      	ldrh	r2, [r4, #6]
    9820:	609a      	str	r2, [r3, #8]
    omi->omi_min_free = cur->mp_min_free;
    9822:	8922      	ldrh	r2, [r4, #8]
    9824:	60da      	str	r2, [r3, #12]
    strncpy(omi->omi_name, cur->name, sizeof(omi->omi_name));
    9826:	2220      	movs	r2, #32
    9828:	69a1      	ldr	r1, [r4, #24]
    982a:	f103 0010 	add.w	r0, r3, #16
    982e:	f002 fc6d 	bl	c10c <strncpy>

    return (cur);
}
    9832:	4620      	mov	r0, r4
    9834:	bd10      	pop	{r4, pc}
        cur = STAILQ_FIRST(&g_os_mempool_list);
    9836:	4a01      	ldr	r2, [pc, #4]	; (983c <os_mempool_info_get_next+0x30>)
    9838:	6814      	ldr	r4, [r2, #0]
    983a:	e7eb      	b.n	9814 <os_mempool_info_get_next+0x8>
    983c:	200042ac 	.word	0x200042ac

00009840 <os_mempool_module_init>:

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    9840:	4b02      	ldr	r3, [pc, #8]	; (984c <os_mempool_module_init+0xc>)
    9842:	2200      	movs	r2, #0
    9844:	601a      	str	r2, [r3, #0]
    9846:	605b      	str	r3, [r3, #4]
}
    9848:	4770      	bx	lr
    984a:	bf00      	nop
    984c:	200042ac 	.word	0x200042ac

00009850 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    9850:	4b02      	ldr	r3, [pc, #8]	; (985c <os_msys_find_biggest_pool+0xc>)
    9852:	6818      	ldr	r0, [r3, #0]
    9854:	b108      	cbz	r0, 985a <os_msys_find_biggest_pool+0xa>
    9856:	6858      	ldr	r0, [r3, #4]
    9858:	3808      	subs	r0, #8
}
    985a:	4770      	bx	lr
    985c:	200000e8 	.word	0x200000e8

00009860 <os_msys_find_pool>:

static struct os_mbuf_pool *
os_msys_find_pool(uint16_t dsize)
{
    9860:	4602      	mov	r2, r0
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    9862:	4b09      	ldr	r3, [pc, #36]	; (9888 <os_msys_find_pool+0x28>)
    9864:	6819      	ldr	r1, [r3, #0]
    9866:	4608      	mov	r0, r1
    9868:	e000      	b.n	986c <os_msys_find_pool+0xc>
    986a:	6880      	ldr	r0, [r0, #8]
    986c:	b110      	cbz	r0, 9874 <os_msys_find_pool+0x14>
        if (dsize <= pool->omp_databuf_len) {
    986e:	8803      	ldrh	r3, [r0, #0]
    9870:	4293      	cmp	r3, r2
    9872:	d3fa      	bcc.n	986a <os_msys_find_pool+0xa>
            break;
        }
    }

    if (!pool) {
    9874:	b100      	cbz	r0, 9878 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
    9876:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    9878:	b119      	cbz	r1, 9882 <os_msys_find_pool+0x22>
    987a:	4b03      	ldr	r3, [pc, #12]	; (9888 <os_msys_find_pool+0x28>)
    987c:	6858      	ldr	r0, [r3, #4]
    987e:	3808      	subs	r0, #8
    9880:	4770      	bx	lr
    9882:	4608      	mov	r0, r1
    return (pool);
    9884:	e7f7      	b.n	9876 <os_msys_find_pool+0x16>
    9886:	bf00      	nop
    9888:	200000e8 	.word	0x200000e8

0000988c <os_msys_register>:
{
    988c:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    988e:	4b11      	ldr	r3, [pc, #68]	; (98d4 <os_msys_register+0x48>)
    9890:	681d      	ldr	r5, [r3, #0]
    9892:	462b      	mov	r3, r5
    prev = NULL;
    9894:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    9896:	e001      	b.n	989c <os_msys_register+0x10>
        prev = pool;
    9898:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    989a:	689b      	ldr	r3, [r3, #8]
    989c:	b11b      	cbz	r3, 98a6 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    989e:	8801      	ldrh	r1, [r0, #0]
    98a0:	881a      	ldrh	r2, [r3, #0]
    98a2:	4291      	cmp	r1, r2
    98a4:	d2f8      	bcs.n	9898 <os_msys_register+0xc>
    if (prev) {
    98a6:	b15c      	cbz	r4, 98c0 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    98a8:	68a3      	ldr	r3, [r4, #8]
    98aa:	6083      	str	r3, [r0, #8]
    98ac:	b11b      	cbz	r3, 98b6 <os_msys_register+0x2a>
    98ae:	60a0      	str	r0, [r4, #8]
}
    98b0:	2000      	movs	r0, #0
    98b2:	bc30      	pop	{r4, r5}
    98b4:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    98b6:	f100 0308 	add.w	r3, r0, #8
    98ba:	4a06      	ldr	r2, [pc, #24]	; (98d4 <os_msys_register+0x48>)
    98bc:	6053      	str	r3, [r2, #4]
    98be:	e7f6      	b.n	98ae <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    98c0:	6085      	str	r5, [r0, #8]
    98c2:	b115      	cbz	r5, 98ca <os_msys_register+0x3e>
    98c4:	4b03      	ldr	r3, [pc, #12]	; (98d4 <os_msys_register+0x48>)
    98c6:	6018      	str	r0, [r3, #0]
    98c8:	e7f2      	b.n	98b0 <os_msys_register+0x24>
    98ca:	f100 0308 	add.w	r3, r0, #8
    98ce:	4a01      	ldr	r2, [pc, #4]	; (98d4 <os_msys_register+0x48>)
    98d0:	6053      	str	r3, [r2, #4]
    98d2:	e7f7      	b.n	98c4 <os_msys_register+0x38>
    98d4:	200000e8 	.word	0x200000e8

000098d8 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
    98d8:	b530      	push	{r4, r5, lr}
    98da:	b083      	sub	sp, #12
    98dc:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    98de:	9d07      	ldr	r5, [sp, #28]
    98e0:	9501      	str	r5, [sp, #4]
    98e2:	9d06      	ldr	r5, [sp, #24]
    98e4:	9500      	str	r5, [sp, #0]
    98e6:	f003 f85f 	bl	c9a8 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
    98ea:	b138      	cbz	r0, 98fc <os_msys_init_once+0x24>
    98ec:	2000      	movs	r0, #0
    98ee:	9000      	str	r0, [sp, #0]
    98f0:	4b09      	ldr	r3, [pc, #36]	; (9918 <os_msys_init_once+0x40>)
    98f2:	681d      	ldr	r5, [r3, #0]
    98f4:	4603      	mov	r3, r0
    98f6:	4602      	mov	r2, r0
    98f8:	4601      	mov	r1, r0
    98fa:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
    98fc:	4620      	mov	r0, r4
    98fe:	f7ff ffc5 	bl	988c <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    9902:	b138      	cbz	r0, 9914 <os_msys_init_once+0x3c>
    9904:	2000      	movs	r0, #0
    9906:	9000      	str	r0, [sp, #0]
    9908:	4b03      	ldr	r3, [pc, #12]	; (9918 <os_msys_init_once+0x40>)
    990a:	681c      	ldr	r4, [r3, #0]
    990c:	4603      	mov	r3, r0
    990e:	4602      	mov	r2, r0
    9910:	4601      	mov	r1, r0
    9912:	47a0      	blx	r4
}
    9914:	b003      	add	sp, #12
    9916:	bd30      	pop	{r4, r5, pc}
    9918:	200001ec 	.word	0x200001ec

0000991c <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    991c:	4b02      	ldr	r3, [pc, #8]	; (9928 <os_msys_reset+0xc>)
    991e:	2200      	movs	r2, #0
    9920:	601a      	str	r2, [r3, #0]
    9922:	605b      	str	r3, [r3, #4]
}
    9924:	4770      	bx	lr
    9926:	bf00      	nop
    9928:	200000e8 	.word	0x200000e8

0000992c <os_msys_get_pkthdr>:
{
    992c:	b510      	push	{r4, lr}
    992e:	460c      	mov	r4, r1
    if (dsize == 0) {
    9930:	b930      	cbnz	r0, 9940 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
    9932:	f7ff ff8d 	bl	9850 <os_msys_find_biggest_pool>
    if (!pool) {
    9936:	b110      	cbz	r0, 993e <os_msys_get_pkthdr+0x12>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    9938:	b2e1      	uxtb	r1, r4
    993a:	f000 fe3d 	bl	a5b8 <os_mbuf_get_pkthdr>
}
    993e:	bd10      	pop	{r4, pc}
    9940:	f101 0308 	add.w	r3, r1, #8
    9944:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    9946:	4403      	add	r3, r0
    9948:	b298      	uxth	r0, r3
    994a:	f7ff ff89 	bl	9860 <os_msys_find_pool>
    994e:	e7f2      	b.n	9936 <os_msys_get_pkthdr+0xa>

00009950 <os_msys_init>:

void
os_msys_init(void)
{
    9950:	b500      	push	{lr}
    9952:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
    9954:	f7ff ffe2 	bl	991c <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
    9958:	4b06      	ldr	r3, [pc, #24]	; (9974 <os_msys_init+0x24>)
    995a:	9301      	str	r3, [sp, #4]
    995c:	f44f 7392 	mov.w	r3, #292	; 0x124
    9960:	9300      	str	r3, [sp, #0]
    9962:	230c      	movs	r3, #12
    9964:	4a04      	ldr	r2, [pc, #16]	; (9978 <os_msys_init+0x28>)
    9966:	4905      	ldr	r1, [pc, #20]	; (997c <os_msys_init+0x2c>)
    9968:	4805      	ldr	r0, [pc, #20]	; (9980 <os_msys_init+0x30>)
    996a:	f7ff ffb5 	bl	98d8 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    996e:	b003      	add	sp, #12
    9970:	f85d fb04 	ldr.w	pc, [sp], #4
    9974:	00021a38 	.word	0x00021a38
    9978:	20005064 	.word	0x20005064
    997c:	20005070 	.word	0x20005070
    9980:	200042b4 	.word	0x200042b4

00009984 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
    9984:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    9986:	4b05      	ldr	r3, [pc, #20]	; (999c <os_sanity_check_list_lock+0x18>)
    9988:	6818      	ldr	r0, [r3, #0]
    998a:	b900      	cbnz	r0, 998e <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
    998c:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
    998e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9992:	4803      	ldr	r0, [pc, #12]	; (99a0 <os_sanity_check_list_lock+0x1c>)
    9994:	f001 f842 	bl	aa1c <os_mutex_pend>
    if (rc != OS_OK) {
    9998:	e7f8      	b.n	998c <os_sanity_check_list_lock+0x8>
    999a:	bf00      	nop
    999c:	20004288 	.word	0x20004288
    99a0:	20005090 	.word	0x20005090

000099a4 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
    99a4:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    99a6:	4b04      	ldr	r3, [pc, #16]	; (99b8 <os_sanity_check_list_unlock+0x14>)
    99a8:	6818      	ldr	r0, [r3, #0]
    99aa:	b900      	cbnz	r0, 99ae <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
    99ac:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
    99ae:	4803      	ldr	r0, [pc, #12]	; (99bc <os_sanity_check_list_unlock+0x18>)
    99b0:	f000 ffd8 	bl	a964 <os_mutex_release>
    if (rc != 0) {
    99b4:	e7fa      	b.n	99ac <os_sanity_check_list_unlock+0x8>
    99b6:	bf00      	nop
    99b8:	20004288 	.word	0x20004288
    99bc:	20005090 	.word	0x20005090

000099c0 <os_sanity_check_init>:
{
    99c0:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
    99c2:	2000      	movs	r0, #0
    99c4:	6018      	str	r0, [r3, #0]
    99c6:	6058      	str	r0, [r3, #4]
    99c8:	6098      	str	r0, [r3, #8]
    99ca:	60d8      	str	r0, [r3, #12]
    99cc:	6118      	str	r0, [r3, #16]
}
    99ce:	4770      	bx	lr

000099d0 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
    99d0:	b510      	push	{r4, lr}
    99d2:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    99d4:	f7ff ffd6 	bl	9984 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    99d8:	b100      	cbz	r0, 99dc <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
    99da:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
    99dc:	4b03      	ldr	r3, [pc, #12]	; (99ec <os_sanity_check_register+0x1c>)
    99de:	681a      	ldr	r2, [r3, #0]
    99e0:	6122      	str	r2, [r4, #16]
    99e2:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
    99e4:	f7ff ffde 	bl	99a4 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
    99e8:	e7f7      	b.n	99da <os_sanity_check_register+0xa>
    99ea:	bf00      	nop
    99ec:	2000508c 	.word	0x2000508c

000099f0 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
    99f0:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
    99f2:	f7ff ffc7 	bl	9984 <os_sanity_check_list_lock>
    if (rc != 0) {
    99f6:	b910      	cbnz	r0, 99fe <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    99f8:	4b17      	ldr	r3, [pc, #92]	; (9a58 <os_sanity_run+0x68>)
    99fa:	681c      	ldr	r4, [r3, #0]
    99fc:	e00e      	b.n	9a1c <os_sanity_run+0x2c>
        assert(0);
    99fe:	2300      	movs	r3, #0
    9a00:	461a      	mov	r2, r3
    9a02:	4619      	mov	r1, r3
    9a04:	4618      	mov	r0, r3
    9a06:	f7ff faa5 	bl	8f54 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
    9a0a:	f000 fb87 	bl	a11c <os_time_get>
    9a0e:	6823      	ldr	r3, [r4, #0]
    9a10:	6862      	ldr	r2, [r4, #4]
    9a12:	4413      	add	r3, r2
    9a14:	1ac0      	subs	r0, r0, r3
    9a16:	2800      	cmp	r0, #0
    9a18:	dc0d      	bgt.n	9a36 <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    9a1a:	6924      	ldr	r4, [r4, #16]
    9a1c:	b18c      	cbz	r4, 9a42 <os_sanity_run+0x52>
        if (sc->sc_func) {
    9a1e:	68a3      	ldr	r3, [r4, #8]
    9a20:	2b00      	cmp	r3, #0
    9a22:	d0f2      	beq.n	9a0a <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
    9a24:	68e1      	ldr	r1, [r4, #12]
    9a26:	4620      	mov	r0, r4
    9a28:	4798      	blx	r3
            if (rc == OS_OK) {
    9a2a:	2800      	cmp	r0, #0
    9a2c:	d1ed      	bne.n	9a0a <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
    9a2e:	f000 fb75 	bl	a11c <os_time_get>
    9a32:	6020      	str	r0, [r4, #0]
                continue;
    9a34:	e7f1      	b.n	9a1a <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
    9a36:	2300      	movs	r3, #0
    9a38:	461a      	mov	r2, r3
    9a3a:	4619      	mov	r1, r3
    9a3c:	4618      	mov	r0, r3
    9a3e:	f7ff fa89 	bl	8f54 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
    9a42:	f7ff ffaf 	bl	99a4 <os_sanity_check_list_unlock>
    if (rc != 0) {
    9a46:	b900      	cbnz	r0, 9a4a <os_sanity_run+0x5a>
        assert(0);
    }
}
    9a48:	bd10      	pop	{r4, pc}
        assert(0);
    9a4a:	2300      	movs	r3, #0
    9a4c:	461a      	mov	r2, r3
    9a4e:	4619      	mov	r1, r3
    9a50:	4618      	mov	r0, r3
    9a52:	f7ff fa7f 	bl	8f54 <__assert_func>
    9a56:	bf00      	nop
    9a58:	2000508c 	.word	0x2000508c

00009a5c <os_sanity_init>:

int
os_sanity_init(void)
{
    9a5c:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
    9a5e:	4802      	ldr	r0, [pc, #8]	; (9a68 <os_sanity_init+0xc>)
    9a60:	f000 ff76 	bl	a950 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
    9a64:	bd08      	pop	{r3, pc}
    9a66:	bf00      	nop
    9a68:	20005090 	.word	0x20005090

00009a6c <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
    9a6c:	7b03      	ldrb	r3, [r0, #12]
    9a6e:	2b01      	cmp	r3, #1
    9a70:	d001      	beq.n	9a76 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
    9a72:	2002      	movs	r0, #2
}
    9a74:	4770      	bx	lr
{
    9a76:	b510      	push	{r4, lr}
    9a78:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    9a7a:	f000 fc75 	bl	a368 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    9a7e:	4b0f      	ldr	r3, [pc, #60]	; (9abc <os_sched_insert+0x50>)
    9a80:	681b      	ldr	r3, [r3, #0]
    9a82:	b12b      	cbz	r3, 9a90 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
    9a84:	7ae1      	ldrb	r1, [r4, #11]
    9a86:	7ada      	ldrb	r2, [r3, #11]
    9a88:	4291      	cmp	r1, r2
    9a8a:	d301      	bcc.n	9a90 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    9a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9a8e:	e7f8      	b.n	9a82 <os_sched_insert+0x16>
    if (entry) {
    9a90:	b153      	cbz	r3, 9aa8 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    9a92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9a94:	64a2      	str	r2, [r4, #72]	; 0x48
    9a96:	6463      	str	r3, [r4, #68]	; 0x44
    9a98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9a9a:	6014      	str	r4, [r2, #0]
    9a9c:	3444      	adds	r4, #68	; 0x44
    9a9e:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
    9aa0:	f000 fc68 	bl	a374 <os_arch_restore_sr>
    return (0);
    9aa4:	2000      	movs	r0, #0
}
    9aa6:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
    9aa8:	2300      	movs	r3, #0
    9aaa:	6463      	str	r3, [r4, #68]	; 0x44
    9aac:	4b03      	ldr	r3, [pc, #12]	; (9abc <os_sched_insert+0x50>)
    9aae:	685a      	ldr	r2, [r3, #4]
    9ab0:	64a2      	str	r2, [r4, #72]	; 0x48
    9ab2:	6014      	str	r4, [r2, #0]
    9ab4:	3444      	adds	r4, #68	; 0x44
    9ab6:	605c      	str	r4, [r3, #4]
    9ab8:	e7f2      	b.n	9aa0 <os_sched_insert+0x34>
    9aba:	bf00      	nop
    9abc:	200000f0 	.word	0x200000f0

00009ac0 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
    9ac0:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
    9ac2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    9ac4:	3301      	adds	r3, #1
    9ac6:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
    9ac8:	4b06      	ldr	r3, [pc, #24]	; (9ae4 <os_sched_ctx_sw_hook+0x24>)
    9aca:	681c      	ldr	r4, [r3, #0]
    9acc:	4b06      	ldr	r3, [pc, #24]	; (9ae8 <os_sched_ctx_sw_hook+0x28>)
    9ace:	6818      	ldr	r0, [r3, #0]
    9ad0:	4906      	ldr	r1, [pc, #24]	; (9aec <os_sched_ctx_sw_hook+0x2c>)
    9ad2:	680b      	ldr	r3, [r1, #0]
    9ad4:	1ac2      	subs	r2, r0, r3
    9ad6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9ad8:	4413      	add	r3, r2
    9ada:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
    9adc:	6008      	str	r0, [r1, #0]
}
    9ade:	f85d 4b04 	ldr.w	r4, [sp], #4
    9ae2:	4770      	bx	lr
    9ae4:	2000509c 	.word	0x2000509c
    9ae8:	200050e0 	.word	0x200050e0
    9aec:	200050a0 	.word	0x200050a0

00009af0 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
    9af0:	4b01      	ldr	r3, [pc, #4]	; (9af8 <os_sched_get_current_task+0x8>)
    9af2:	6818      	ldr	r0, [r3, #0]
    9af4:	4770      	bx	lr
    9af6:	bf00      	nop
    9af8:	2000509c 	.word	0x2000509c

00009afc <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
    9afc:	4b01      	ldr	r3, [pc, #4]	; (9b04 <os_sched_set_current_task+0x8>)
    9afe:	6018      	str	r0, [r3, #0]
}
    9b00:	4770      	bx	lr
    9b02:	bf00      	nop
    9b04:	2000509c 	.word	0x2000509c

00009b08 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
    9b08:	b538      	push	{r3, r4, r5, lr}
    9b0a:	4604      	mov	r4, r0
    9b0c:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9b0e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9b10:	b183      	cbz	r3, 9b34 <os_sched_sleep+0x2c>
    9b12:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9b14:	649a      	str	r2, [r3, #72]	; 0x48
    9b16:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9b18:	6c62      	ldr	r2, [r4, #68]	; 0x44
    9b1a:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
    9b1c:	2302      	movs	r3, #2
    9b1e:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
    9b20:	f000 fafc 	bl	a11c <os_time_get>
    9b24:	4428      	add	r0, r5
    9b26:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
    9b28:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    9b2c:	d006      	beq.n	9b3c <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    9b2e:	4b18      	ldr	r3, [pc, #96]	; (9b90 <os_sched_sleep+0x88>)
    9b30:	681b      	ldr	r3, [r3, #0]
    9b32:	e011      	b.n	9b58 <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9b34:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9b36:	4b17      	ldr	r3, [pc, #92]	; (9b94 <os_sched_sleep+0x8c>)
    9b38:	605a      	str	r2, [r3, #4]
    9b3a:	e7ec      	b.n	9b16 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    9b3c:	7b63      	ldrb	r3, [r4, #13]
    9b3e:	f043 0301 	orr.w	r3, r3, #1
    9b42:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    9b44:	2300      	movs	r3, #0
    9b46:	6463      	str	r3, [r4, #68]	; 0x44
    9b48:	4b11      	ldr	r3, [pc, #68]	; (9b90 <os_sched_sleep+0x88>)
    9b4a:	685a      	ldr	r2, [r3, #4]
    9b4c:	64a2      	str	r2, [r4, #72]	; 0x48
    9b4e:	6014      	str	r4, [r2, #0]
    9b50:	3444      	adds	r4, #68	; 0x44
    9b52:	605c      	str	r4, [r3, #4]
    9b54:	e011      	b.n	9b7a <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    9b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9b58:	b13b      	cbz	r3, 9b6a <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    9b5a:	7b5a      	ldrb	r2, [r3, #13]
    9b5c:	f012 0f01 	tst.w	r2, #1
    9b60:	d103      	bne.n	9b6a <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
    9b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    9b64:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    9b66:	2a00      	cmp	r2, #0
    9b68:	ddf5      	ble.n	9b56 <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
    9b6a:	b143      	cbz	r3, 9b7e <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
    9b6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9b6e:	64a2      	str	r2, [r4, #72]	; 0x48
    9b70:	6463      	str	r3, [r4, #68]	; 0x44
    9b72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9b74:	6014      	str	r4, [r2, #0]
    9b76:	3444      	adds	r4, #68	; 0x44
    9b78:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
    9b7a:	2000      	movs	r0, #0
    9b7c:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    9b7e:	2300      	movs	r3, #0
    9b80:	6463      	str	r3, [r4, #68]	; 0x44
    9b82:	4b03      	ldr	r3, [pc, #12]	; (9b90 <os_sched_sleep+0x88>)
    9b84:	685a      	ldr	r2, [r3, #4]
    9b86:	64a2      	str	r2, [r4, #72]	; 0x48
    9b88:	6014      	str	r4, [r2, #0]
    9b8a:	3444      	adds	r4, #68	; 0x44
    9b8c:	605c      	str	r4, [r3, #4]
    9b8e:	e7f4      	b.n	9b7a <os_sched_sleep+0x72>
    9b90:	200000f8 	.word	0x200000f8
    9b94:	200000f0 	.word	0x200000f0

00009b98 <os_sched_remove>:
 */
int
os_sched_remove(struct os_task *t)
{

    if (t->t_state == OS_TASK_SLEEP) {
    9b98:	7b03      	ldrb	r3, [r0, #12]
    9b9a:	2b02      	cmp	r3, #2
    9b9c:	d014      	beq.n	9bc8 <os_sched_remove+0x30>
        TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    } else if (t->t_state == OS_TASK_READY) {
    9b9e:	2b01      	cmp	r3, #1
    9ba0:	d01e      	beq.n	9be0 <os_sched_remove+0x48>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    }
    t->t_next_wakeup = 0;
    9ba2:	2300      	movs	r3, #0
    9ba4:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    9ba6:	7b43      	ldrb	r3, [r0, #13]
    9ba8:	f043 0301 	orr.w	r3, r3, #1
    9bac:	7343      	strb	r3, [r0, #13]

    STAILQ_REMOVE(&g_os_task_list, t, os_task, t_os_task_list);
    9bae:	4b18      	ldr	r3, [pc, #96]	; (9c10 <os_sched_remove+0x78>)
    9bb0:	681b      	ldr	r3, [r3, #0]
    9bb2:	4283      	cmp	r3, r0
    9bb4:	d020      	beq.n	9bf8 <os_sched_remove+0x60>
    9bb6:	461a      	mov	r2, r3
    9bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9bba:	4283      	cmp	r3, r0
    9bbc:	d1fb      	bne.n	9bb6 <os_sched_remove+0x1e>
    9bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9bc0:	6413      	str	r3, [r2, #64]	; 0x40
    9bc2:	b303      	cbz	r3, 9c06 <os_sched_remove+0x6e>

    os_trace_task_stop_exec();
    return OS_OK;
}
    9bc4:	2000      	movs	r0, #0
    9bc6:	4770      	bx	lr
        TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9bc8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9bca:	b12b      	cbz	r3, 9bd8 <os_sched_remove+0x40>
    9bcc:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9bce:	649a      	str	r2, [r3, #72]	; 0x48
    9bd0:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9bd2:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9bd4:	601a      	str	r2, [r3, #0]
    9bd6:	e7e4      	b.n	9ba2 <os_sched_remove+0xa>
    9bd8:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9bda:	4b0e      	ldr	r3, [pc, #56]	; (9c14 <os_sched_remove+0x7c>)
    9bdc:	605a      	str	r2, [r3, #4]
    9bde:	e7f7      	b.n	9bd0 <os_sched_remove+0x38>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9be0:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9be2:	b12b      	cbz	r3, 9bf0 <os_sched_remove+0x58>
    9be4:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9be6:	649a      	str	r2, [r3, #72]	; 0x48
    9be8:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9bea:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9bec:	601a      	str	r2, [r3, #0]
    9bee:	e7d8      	b.n	9ba2 <os_sched_remove+0xa>
    9bf0:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9bf2:	4b09      	ldr	r3, [pc, #36]	; (9c18 <os_sched_remove+0x80>)
    9bf4:	605a      	str	r2, [r3, #4]
    9bf6:	e7f7      	b.n	9be8 <os_sched_remove+0x50>
    STAILQ_REMOVE(&g_os_task_list, t, os_task, t_os_task_list);
    9bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9bfa:	4a05      	ldr	r2, [pc, #20]	; (9c10 <os_sched_remove+0x78>)
    9bfc:	6013      	str	r3, [r2, #0]
    9bfe:	2b00      	cmp	r3, #0
    9c00:	d1e0      	bne.n	9bc4 <os_sched_remove+0x2c>
    9c02:	6052      	str	r2, [r2, #4]
    9c04:	e7de      	b.n	9bc4 <os_sched_remove+0x2c>
    9c06:	3240      	adds	r2, #64	; 0x40
    9c08:	4b01      	ldr	r3, [pc, #4]	; (9c10 <os_sched_remove+0x78>)
    9c0a:	605a      	str	r2, [r3, #4]
    9c0c:	e7da      	b.n	9bc4 <os_sched_remove+0x2c>
    9c0e:	bf00      	nop
    9c10:	200050a4 	.word	0x200050a4
    9c14:	200000f8 	.word	0x200000f8
    9c18:	200000f0 	.word	0x200000f0

00009c1c <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
    9c1c:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
    9c1e:	7b03      	ldrb	r3, [r0, #12]
    9c20:	2b02      	cmp	r3, #2
    9c22:	d121      	bne.n	9c68 <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
    9c24:	69c2      	ldr	r2, [r0, #28]
    9c26:	b162      	cbz	r2, 9c42 <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    9c28:	6813      	ldr	r3, [r2, #0]
    9c2a:	b31b      	cbz	r3, 9c74 <os_sched_wakeup+0x58>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    9c2c:	4283      	cmp	r3, r0
    9c2e:	d026      	beq.n	9c7e <os_sched_wakeup+0x62>
    9c30:	461a      	mov	r2, r3
    9c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9c34:	4283      	cmp	r3, r0
    9c36:	d1fb      	bne.n	9c30 <os_sched_wakeup+0x14>
    9c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9c3a:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
    9c3c:	2300      	movs	r3, #0
    9c3e:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
    9c40:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
    9c42:	2301      	movs	r3, #1
    9c44:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
    9c46:	2300      	movs	r3, #0
    9c48:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
    9c4a:	7b43      	ldrb	r3, [r0, #13]
    9c4c:	f023 0301 	bic.w	r3, r3, #1
    9c50:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9c52:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9c54:	b1b3      	cbz	r3, 9c84 <os_sched_wakeup+0x68>
    9c56:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9c58:	649a      	str	r2, [r3, #72]	; 0x48
    9c5a:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9c5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9c5e:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
    9c60:	f7ff ff04 	bl	9a6c <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
    9c64:	2000      	movs	r0, #0
    9c66:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
    9c68:	2300      	movs	r3, #0
    9c6a:	461a      	mov	r2, r3
    9c6c:	4619      	mov	r1, r3
    9c6e:	4618      	mov	r0, r3
    9c70:	f7ff f970 	bl	8f54 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    9c74:	461a      	mov	r2, r3
    9c76:	4619      	mov	r1, r3
    9c78:	4618      	mov	r0, r3
    9c7a:	f7ff f96b 	bl	8f54 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    9c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9c80:	6013      	str	r3, [r2, #0]
    9c82:	e7db      	b.n	9c3c <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9c84:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9c86:	4b01      	ldr	r3, [pc, #4]	; (9c8c <os_sched_wakeup+0x70>)
    9c88:	605a      	str	r2, [r3, #4]
    9c8a:	e7e6      	b.n	9c5a <os_sched_wakeup+0x3e>
    9c8c:	200000f8 	.word	0x200000f8

00009c90 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
    9c90:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
    9c92:	f000 fa43 	bl	a11c <os_time_get>
    9c96:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    9c98:	f000 fb66 	bl	a368 <os_arch_save_sr>
    9c9c:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
    9c9e:	4b0a      	ldr	r3, [pc, #40]	; (9cc8 <os_sched_os_timer_exp+0x38>)
    9ca0:	6818      	ldr	r0, [r3, #0]
    while (t) {
    9ca2:	e002      	b.n	9caa <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
    9ca4:	f7ff ffba 	bl	9c1c <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
    9ca8:	4620      	mov	r0, r4
    while (t) {
    9caa:	b140      	cbz	r0, 9cbe <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
    9cac:	7b43      	ldrb	r3, [r0, #13]
    9cae:	f013 0f01 	tst.w	r3, #1
    9cb2:	d104      	bne.n	9cbe <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
    9cb4:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
    9cb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9cb8:	1aeb      	subs	r3, r5, r3
    9cba:	2b00      	cmp	r3, #0
    9cbc:	daf2      	bge.n	9ca4 <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
    9cbe:	4630      	mov	r0, r6
    9cc0:	f000 fb58 	bl	a374 <os_arch_restore_sr>
}
    9cc4:	bd70      	pop	{r4, r5, r6, pc}
    9cc6:	bf00      	nop
    9cc8:	200000f8 	.word	0x200000f8

00009ccc <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
    9ccc:	b510      	push	{r4, lr}
    9cce:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
    9cd0:	f000 fb53 	bl	a37a <os_arch_in_critical>
    9cd4:	b150      	cbz	r0, 9cec <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
    9cd6:	4b0c      	ldr	r3, [pc, #48]	; (9d08 <os_sched_wakeup_ticks+0x3c>)
    9cd8:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
    9cda:	b17b      	cbz	r3, 9cfc <os_sched_wakeup_ticks+0x30>
    9cdc:	7b5a      	ldrb	r2, [r3, #13]
    9cde:	f012 0f01 	tst.w	r2, #1
    9ce2:	d10e      	bne.n	9d02 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
    9ce4:	6b58      	ldr	r0, [r3, #52]	; 0x34
    9ce6:	1b00      	subs	r0, r0, r4
    9ce8:	d406      	bmi.n	9cf8 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
    9cea:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    9cec:	2300      	movs	r3, #0
    9cee:	461a      	mov	r2, r3
    9cf0:	4619      	mov	r1, r3
    9cf2:	4618      	mov	r0, r3
    9cf4:	f7ff f92e 	bl	8f54 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
    9cf8:	2000      	movs	r0, #0
    9cfa:	e7f6      	b.n	9cea <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
    9cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9d00:	e7f3      	b.n	9cea <os_sched_wakeup_ticks+0x1e>
    9d02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    9d06:	e7f0      	b.n	9cea <os_sched_wakeup_ticks+0x1e>
    9d08:	200000f8 	.word	0x200000f8

00009d0c <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
    9d0c:	4b01      	ldr	r3, [pc, #4]	; (9d14 <os_sched_next_task+0x8>)
    9d0e:	6818      	ldr	r0, [r3, #0]
    9d10:	4770      	bx	lr
    9d12:	bf00      	nop
    9d14:	200000f0 	.word	0x200000f0

00009d18 <os_sched>:
{
    9d18:	b538      	push	{r3, r4, r5, lr}
    9d1a:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    9d1c:	f000 fb24 	bl	a368 <os_arch_save_sr>
    9d20:	4605      	mov	r5, r0
    if (!next_t) {
    9d22:	b134      	cbz	r4, 9d32 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
    9d24:	4620      	mov	r0, r4
    9d26:	f000 fb15 	bl	a354 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
    9d2a:	4628      	mov	r0, r5
    9d2c:	f000 fb22 	bl	a374 <os_arch_restore_sr>
}
    9d30:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
    9d32:	f7ff ffeb 	bl	9d0c <os_sched_next_task>
    9d36:	4604      	mov	r4, r0
    9d38:	e7f4      	b.n	9d24 <os_sched+0xc>
	...

00009d3c <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    9d3c:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
    9d3e:	7b03      	ldrb	r3, [r0, #12]
    9d40:	2b01      	cmp	r3, #1
    9d42:	d000      	beq.n	9d46 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
    9d44:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9d46:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9d48:	b13b      	cbz	r3, 9d5a <os_sched_resort+0x1e>
    9d4a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9d4c:	649a      	str	r2, [r3, #72]	; 0x48
    9d4e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9d50:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9d52:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
    9d54:	f7ff fe8a 	bl	9a6c <os_sched_insert>
}
    9d58:	e7f4      	b.n	9d44 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9d5a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9d5c:	4b01      	ldr	r3, [pc, #4]	; (9d64 <os_sched_resort+0x28>)
    9d5e:	605a      	str	r2, [r3, #4]
    9d60:	e7f5      	b.n	9d4e <os_sched_resort+0x12>
    9d62:	bf00      	nop
    9d64:	200000f0 	.word	0x200000f0

00009d68 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
    9d68:	4603      	mov	r3, r0
    9d6a:	b118      	cbz	r0, 9d74 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
    9d6c:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
    9d6e:	2000      	movs	r0, #0
    9d70:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
    9d72:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    9d74:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
    9d76:	4770      	bx	lr

00009d78 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
    9d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
    9d7a:	4b17      	ldr	r3, [pc, #92]	; (9dd8 <os_sem_release+0x60>)
    9d7c:	681b      	ldr	r3, [r3, #0]
    9d7e:	b33b      	cbz	r3, 9dd0 <os_sem_release+0x58>
    9d80:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
    9d82:	b338      	cbz	r0, 9dd4 <os_sem_release+0x5c>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
    9d84:	f7ff feb4 	bl	9af0 <os_sched_get_current_task>
    9d88:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
    9d8a:	f000 faed 	bl	a368 <os_arch_save_sr>
    9d8e:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
    9d90:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
    9d92:	b165      	cbz	r5, 9dae <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
    9d94:	7b6b      	ldrb	r3, [r5, #13]
    9d96:	f023 0302 	bic.w	r3, r3, #2
    9d9a:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
    9d9c:	4628      	mov	r0, r5
    9d9e:	f7ff ff3d 	bl	9c1c <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
    9da2:	7afa      	ldrb	r2, [r7, #11]
    9da4:	7aeb      	ldrb	r3, [r5, #11]
    9da6:	429a      	cmp	r2, r3
    9da8:	d80b      	bhi.n	9dc2 <os_sem_release+0x4a>
    resched = 0;
    9daa:	2400      	movs	r4, #0
    9dac:	e003      	b.n	9db6 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
    9dae:	88e3      	ldrh	r3, [r4, #6]
    9db0:	3301      	adds	r3, #1
    9db2:	80e3      	strh	r3, [r4, #6]
    resched = 0;
    9db4:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
    9db6:	4630      	mov	r0, r6
    9db8:	f000 fadc 	bl	a374 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    9dbc:	b91c      	cbnz	r4, 9dc6 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
    9dbe:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
    9dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
    9dc2:	2401      	movs	r4, #1
    9dc4:	e7f7      	b.n	9db6 <os_sem_release+0x3e>
        os_sched(rdy);
    9dc6:	4628      	mov	r0, r5
    9dc8:	f7ff ffa6 	bl	9d18 <os_sched>
    ret = OS_OK;
    9dcc:	2000      	movs	r0, #0
    9dce:	e7f7      	b.n	9dc0 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
    9dd0:	2009      	movs	r0, #9
    9dd2:	e7f5      	b.n	9dc0 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
    9dd4:	2003      	movs	r0, #3
    9dd6:	e7f3      	b.n	9dc0 <os_sem_release+0x48>
    9dd8:	20004288 	.word	0x20004288

00009ddc <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
    9ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
    9dde:	4b2b      	ldr	r3, [pc, #172]	; (9e8c <os_sem_pend+0xb0>)
    9de0:	681b      	ldr	r3, [r3, #0]
    9de2:	2b00      	cmp	r3, #0
    9de4:	d04d      	beq.n	9e82 <os_sem_pend+0xa6>
    9de6:	4604      	mov	r4, r0
    9de8:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
    9dea:	2800      	cmp	r0, #0
    9dec:	d04b      	beq.n	9e86 <os_sem_pend+0xaa>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
    9dee:	f7ff fe7f 	bl	9af0 <os_sched_get_current_task>
    9df2:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    9df4:	f000 fab8 	bl	a368 <os_arch_save_sr>
    9df8:	4606      	mov	r6, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
    9dfa:	88e3      	ldrh	r3, [r4, #6]
    9dfc:	b14b      	cbz	r3, 9e12 <os_sem_pend+0x36>
        sem->sem_tokens--;
    9dfe:	3b01      	subs	r3, #1
    9e00:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    9e02:	2400      	movs	r4, #0
    sched = 0;
    9e04:	4627      	mov	r7, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
    9e06:	4630      	mov	r0, r6
    9e08:	f000 fab4 	bl	a374 <os_arch_restore_sr>

    if (sched) {
    9e0c:	bb47      	cbnz	r7, 9e60 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
    9e0e:	4620      	mov	r0, r4
    9e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
    9e12:	b317      	cbz	r7, 9e5a <os_sem_pend+0x7e>
        current->t_obj = sem;
    9e14:	61ec      	str	r4, [r5, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
    9e16:	7b6b      	ldrb	r3, [r5, #13]
    9e18:	f043 0302 	orr.w	r3, r3, #2
    9e1c:	736b      	strb	r3, [r5, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
    9e1e:	f8d4 c000 	ldr.w	ip, [r4]
    9e22:	f1bc 0f00 	cmp.w	ip, #0
    9e26:	d00e      	beq.n	9e46 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
    9e28:	4663      	mov	r3, ip
        last = NULL;
    9e2a:	2000      	movs	r0, #0
    9e2c:	e001      	b.n	9e32 <os_sem_pend+0x56>
                last = entry;
    9e2e:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
    9e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9e32:	b11b      	cbz	r3, 9e3c <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
    9e34:	7ae9      	ldrb	r1, [r5, #11]
    9e36:	7ada      	ldrb	r2, [r3, #11]
    9e38:	4291      	cmp	r1, r2
    9e3a:	d2f8      	bcs.n	9e2e <os_sem_pend+0x52>
        if (last) {
    9e3c:	b118      	cbz	r0, 9e46 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
    9e3e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    9e40:	64eb      	str	r3, [r5, #76]	; 0x4c
    9e42:	64c5      	str	r5, [r0, #76]	; 0x4c
    9e44:	e002      	b.n	9e4c <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
    9e46:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
    9e4a:	6025      	str	r5, [r4, #0]
        os_sched_sleep(current, timeout);
    9e4c:	4639      	mov	r1, r7
    9e4e:	4628      	mov	r0, r5
    9e50:	f7ff fe5a 	bl	9b08 <os_sched_sleep>
        ret = OS_OK;
    9e54:	2400      	movs	r4, #0
        sched = 1;
    9e56:	2701      	movs	r7, #1
    9e58:	e7d5      	b.n	9e06 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
    9e5a:	2406      	movs	r4, #6
    sched = 0;
    9e5c:	2700      	movs	r7, #0
    9e5e:	e7d2      	b.n	9e06 <os_sem_pend+0x2a>
        os_sched(NULL);
    9e60:	2000      	movs	r0, #0
    9e62:	f7ff ff59 	bl	9d18 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
    9e66:	7b6c      	ldrb	r4, [r5, #13]
    9e68:	f014 0402 	ands.w	r4, r4, #2
    9e6c:	d0cf      	beq.n	9e0e <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
    9e6e:	f000 fa7b 	bl	a368 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
    9e72:	7b6b      	ldrb	r3, [r5, #13]
    9e74:	f023 0302 	bic.w	r3, r3, #2
    9e78:	736b      	strb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
    9e7a:	f000 fa7b 	bl	a374 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
    9e7e:	2406      	movs	r4, #6
    9e80:	e7c5      	b.n	9e0e <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
    9e82:	2409      	movs	r4, #9
    9e84:	e7c3      	b.n	9e0e <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
    9e86:	2403      	movs	r4, #3
    9e88:	e7c1      	b.n	9e0e <os_sem_pend+0x32>
    9e8a:	bf00      	nop
    9e8c:	20004288 	.word	0x20004288

00009e90 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
    9e90:	2300      	movs	r3, #0
    9e92:	e003      	b.n	9e9c <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
    9e94:	4a03      	ldr	r2, [pc, #12]	; (9ea4 <_clear_stack+0x14>)
    9e96:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
    9e9a:	3301      	adds	r3, #1
    9e9c:	428b      	cmp	r3, r1
    9e9e:	dbf9      	blt.n	9e94 <_clear_stack+0x4>
    }
}
    9ea0:	4770      	bx	lr
    9ea2:	bf00      	nop
    9ea4:	deadbeef 	.word	0xdeadbeef

00009ea8 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
    9ea8:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
    9eac:	4604      	mov	r4, r0
    9eae:	460d      	mov	r5, r1
    9eb0:	4617      	mov	r7, r2
    9eb2:	461e      	mov	r6, r3
    9eb4:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
    9eb8:	2250      	movs	r2, #80	; 0x50
    9eba:	2100      	movs	r1, #0
    9ebc:	f002 f8e7 	bl	c08e <memset>

    t->t_func = func;
    9ec0:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
    9ec2:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
    9ec4:	f000 fa50 	bl	a368 <os_arch_save_sr>
    rc = g_task_id;
    9ec8:	4b2b      	ldr	r3, [pc, #172]	; (9f78 <os_task_init+0xd0>)
    9eca:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
    9ecc:	1c72      	adds	r2, r6, #1
    9ece:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
    9ed0:	f000 fa50 	bl	a374 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
    9ed4:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
    9ed6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9eda:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
    9edc:	2301      	movs	r3, #1
    9ede:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
    9ee0:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
    9ee2:	2300      	movs	r3, #0
    9ee4:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
    9ee6:	f104 0620 	add.w	r6, r4, #32
    9eea:	4630      	mov	r0, r6
    9eec:	f7ff fd68 	bl	99c0 <os_sanity_check_init>
    if (rc != OS_OK) {
    9ef0:	4605      	mov	r5, r0
    9ef2:	2800      	cmp	r0, #0
    9ef4:	d133      	bne.n	9f5e <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
    9ef6:	9b07      	ldr	r3, [sp, #28]
    9ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9efc:	d005      	beq.n	9f0a <os_task_init+0x62>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
    9efe:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
    9f00:	4630      	mov	r0, r6
    9f02:	f7ff fd65 	bl	99d0 <os_sanity_check_register>
        if (rc != OS_OK) {
    9f06:	4605      	mov	r5, r0
    9f08:	bb48      	cbnz	r0, 9f5e <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
    9f0a:	4649      	mov	r1, r9
    9f0c:	9808      	ldr	r0, [sp, #32]
    9f0e:	f7ff ffbf 	bl	9e90 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
    9f12:	9b08      	ldr	r3, [sp, #32]
    9f14:	eb03 0189 	add.w	r1, r3, r9, lsl #2
    9f18:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
    9f1a:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
    9f1e:	464a      	mov	r2, r9
    9f20:	4620      	mov	r0, r4
    9f22:	f000 fa2f 	bl	a384 <os_arch_task_stack_init>
    9f26:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    9f28:	4b14      	ldr	r3, [pc, #80]	; (9f7c <os_task_init+0xd4>)
    9f2a:	681b      	ldr	r3, [r3, #0]
    9f2c:	b15b      	cbz	r3, 9f46 <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
    9f2e:	7ae1      	ldrb	r1, [r4, #11]
    9f30:	7ada      	ldrb	r2, [r3, #11]
    9f32:	4291      	cmp	r1, r2
    9f34:	d001      	beq.n	9f3a <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    9f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9f38:	e7f8      	b.n	9f2c <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
    9f3a:	2300      	movs	r3, #0
    9f3c:	461a      	mov	r2, r3
    9f3e:	4619      	mov	r1, r3
    9f40:	4618      	mov	r0, r3
    9f42:	f7ff f807 	bl	8f54 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
    9f46:	6423      	str	r3, [r4, #64]	; 0x40
    9f48:	4b0c      	ldr	r3, [pc, #48]	; (9f7c <os_task_init+0xd4>)
    9f4a:	685a      	ldr	r2, [r3, #4]
    9f4c:	6014      	str	r4, [r2, #0]
    9f4e:	f104 0240 	add.w	r2, r4, #64	; 0x40
    9f52:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
    9f54:	4620      	mov	r0, r4
    9f56:	f7ff fd89 	bl	9a6c <os_sched_insert>
    9f5a:	4605      	mov	r5, r0
    if (rc != OS_OK) {
    9f5c:	b110      	cbz	r0, 9f64 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
    9f5e:	4628      	mov	r0, r5
    9f60:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
    9f64:	f7ff f8b0 	bl	90c8 <os_started>
    9f68:	b908      	cbnz	r0, 9f6e <os_task_init+0xc6>
    return (0);
    9f6a:	4605      	mov	r5, r0
    9f6c:	e7f7      	b.n	9f5e <os_task_init+0xb6>
        os_sched(NULL);
    9f6e:	2000      	movs	r0, #0
    9f70:	f7ff fed2 	bl	9d18 <os_sched>
    9f74:	e7f3      	b.n	9f5e <os_task_init+0xb6>
    9f76:	bf00      	nop
    9f78:	200050ac 	.word	0x200050ac
    9f7c:	200050a4 	.word	0x200050a4

00009f80 <os_task_remove>:

int
os_task_remove(struct os_task *t)
{
    9f80:	b538      	push	{r3, r4, r5, lr}
    9f82:	4604      	mov	r4, r0
    os_sr_t sr;

    /*
     * Can't suspend yourself
     */
    if (t == os_sched_get_current_task()) {
    9f84:	f7ff fdb4 	bl	9af0 <os_sched_get_current_task>
    9f88:	4284      	cmp	r4, r0
    9f8a:	d016      	beq.n	9fba <os_task_remove+0x3a>
    }

    /*
     * If state is not READY or SLEEP, assume task has not been initialized
     */
    if (t->t_state != OS_TASK_READY && t->t_state != OS_TASK_SLEEP)
    9f8c:	7b23      	ldrb	r3, [r4, #12]
    9f8e:	3b01      	subs	r3, #1
    9f90:	b2db      	uxtb	r3, r3
    9f92:	2b01      	cmp	r3, #1
    9f94:	d813      	bhi.n	9fbe <os_task_remove+0x3e>
    }

    /*
     * Disallow suspending tasks which are waiting on a lock
     */
    if (t->t_flags & (OS_TASK_FLAG_SEM_WAIT | OS_TASK_FLAG_MUTEX_WAIT |
    9f96:	7b63      	ldrb	r3, [r4, #13]
    9f98:	f013 0f0e 	tst.w	r3, #14
    9f9c:	d111      	bne.n	9fc2 <os_task_remove+0x42>
    }

    /*
     * Disallowing suspending tasks which are holding a mutex
     */
    if (t->t_lockcnt) {
    9f9e:	7ba3      	ldrb	r3, [r4, #14]
    9fa0:	b98b      	cbnz	r3, 9fc6 <os_task_remove+0x46>
        return OS_EBUSY;
    }

    OS_ENTER_CRITICAL(sr);
    9fa2:	f000 f9e1 	bl	a368 <os_arch_save_sr>
    9fa6:	4605      	mov	r5, r0
    rc = os_sched_remove(t);
    9fa8:	4620      	mov	r0, r4
    9faa:	f7ff fdf5 	bl	9b98 <os_sched_remove>
    9fae:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
    9fb0:	4628      	mov	r0, r5
    9fb2:	f000 f9df 	bl	a374 <os_arch_restore_sr>
    return rc;
}
    9fb6:	4620      	mov	r0, r4
    9fb8:	bd38      	pop	{r3, r4, r5, pc}
        return OS_INVALID_PARM;
    9fba:	2403      	movs	r4, #3
    9fbc:	e7fb      	b.n	9fb6 <os_task_remove+0x36>
        return OS_NOT_STARTED;
    9fbe:	2409      	movs	r4, #9
    9fc0:	e7f9      	b.n	9fb6 <os_task_remove+0x36>
        return OS_EBUSY;
    9fc2:	240b      	movs	r4, #11
    9fc4:	e7f7      	b.n	9fb6 <os_task_remove+0x36>
        return OS_EBUSY;
    9fc6:	240b      	movs	r4, #11
    9fc8:	e7f5      	b.n	9fb6 <os_task_remove+0x36>
	...

00009fcc <os_task_info_get_next>:


struct os_task *
os_task_info_get_next(const struct os_task *prev, struct os_task_info *oti)
{
    9fcc:	b538      	push	{r3, r4, r5, lr}
    9fce:	468c      	mov	ip, r1
    struct os_task *next;
    os_stack_t *top;
    os_stack_t *bottom;

    if (prev != NULL) {
    9fd0:	b1b8      	cbz	r0, a002 <os_task_info_get_next+0x36>
        next = STAILQ_NEXT(prev, t_os_task_list);
    9fd2:	6c05      	ldr	r5, [r0, #64]	; 0x40
    } else {
        next = STAILQ_FIRST(&g_os_task_list);
    }

    if (next == NULL) {
    9fd4:	2d00      	cmp	r5, #0
    9fd6:	d032      	beq.n	a03e <os_task_info_get_next+0x72>
    }

    /* Otherwise, copy OS task information into the OTI structure, and
     * return 1, which means continue
     */
    oti->oti_prio = next->t_prio;
    9fd8:	7aeb      	ldrb	r3, [r5, #11]
    9fda:	f88c 3000 	strb.w	r3, [ip]
    oti->oti_taskid = next->t_taskid;
    9fde:	7aab      	ldrb	r3, [r5, #10]
    9fe0:	f88c 3001 	strb.w	r3, [ip, #1]
    oti->oti_state = next->t_state;
    9fe4:	7b2b      	ldrb	r3, [r5, #12]
    9fe6:	f88c 3002 	strb.w	r3, [ip, #2]

    top = next->t_stacktop;
    9fea:	686c      	ldr	r4, [r5, #4]
    bottom = next->t_stacktop - next->t_stacksize;
    9fec:	892b      	ldrh	r3, [r5, #8]
    9fee:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
    while (bottom < top) {
    9ff2:	42a3      	cmp	r3, r4
    9ff4:	d208      	bcs.n	a008 <os_task_info_get_next+0x3c>
        if (*bottom != OS_STACK_PATTERN) {
    9ff6:	4a13      	ldr	r2, [pc, #76]	; (a044 <os_task_info_get_next+0x78>)
    9ff8:	6819      	ldr	r1, [r3, #0]
    9ffa:	4291      	cmp	r1, r2
    9ffc:	d104      	bne.n	a008 <os_task_info_get_next+0x3c>
            break;
        }
        ++bottom;
    9ffe:	3304      	adds	r3, #4
    a000:	e7f7      	b.n	9ff2 <os_task_info_get_next+0x26>
        next = STAILQ_FIRST(&g_os_task_list);
    a002:	4b11      	ldr	r3, [pc, #68]	; (a048 <os_task_info_get_next+0x7c>)
    a004:	681d      	ldr	r5, [r3, #0]
    a006:	e7e5      	b.n	9fd4 <os_task_info_get_next+0x8>
    }

    oti->oti_stkusage = (uint16_t) (next->t_stacktop - bottom);
    a008:	1ae3      	subs	r3, r4, r3
    a00a:	f3c3 038f 	ubfx	r3, r3, #2, #16
    a00e:	f8ac 3004 	strh.w	r3, [ip, #4]
    oti->oti_stksize = next->t_stacksize;
    a012:	892b      	ldrh	r3, [r5, #8]
    a014:	f8ac 3006 	strh.w	r3, [ip, #6]
    oti->oti_cswcnt = next->t_ctx_sw_cnt;
    a018:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    a01a:	f8cc 3008 	str.w	r3, [ip, #8]
    oti->oti_runtime = next->t_run_time;
    a01e:	6bab      	ldr	r3, [r5, #56]	; 0x38
    a020:	f8cc 300c 	str.w	r3, [ip, #12]
    oti->oti_last_checkin = next->t_sanity_check.sc_checkin_last;
    a024:	6a2b      	ldr	r3, [r5, #32]
    a026:	f8cc 3010 	str.w	r3, [ip, #16]
    oti->oti_next_checkin = next->t_sanity_check.sc_checkin_last +
        next->t_sanity_check.sc_checkin_itvl;
    a02a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    oti->oti_next_checkin = next->t_sanity_check.sc_checkin_last +
    a02c:	4413      	add	r3, r2
    a02e:	f8cc 3014 	str.w	r3, [ip, #20]
    strncpy(oti->oti_name, next->t_name, sizeof(oti->oti_name));
    a032:	2220      	movs	r2, #32
    a034:	6929      	ldr	r1, [r5, #16]
    a036:	f10c 0018 	add.w	r0, ip, #24
    a03a:	f002 f867 	bl	c10c <strncpy>

    return (next);
}
    a03e:	4628      	mov	r0, r5
    a040:	bd38      	pop	{r3, r4, r5, pc}
    a042:	bf00      	nop
    a044:	deadbeef 	.word	0xdeadbeef
    a048:	200050a4 	.word	0x200050a4

0000a04c <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
    a04c:	b430      	push	{r4, r5}
    a04e:	b084      	sub	sp, #16
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    a050:	09c4      	lsrs	r4, r0, #7
    a052:	9400      	str	r4, [sp, #0]
    a054:	2300      	movs	r3, #0
    a056:	9301      	str	r3, [sp, #4]
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    a058:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    a05c:	f641 6084 	movw	r0, #7812	; 0x1e84
    a060:	fb00 f303 	mul.w	r3, r0, r3
    a064:	9302      	str	r3, [sp, #8]
    os_timeradd(base, &tvdelta, result);
    a066:	6848      	ldr	r0, [r1, #4]
    a068:	680d      	ldr	r5, [r1, #0]
    a06a:	1964      	adds	r4, r4, r5
    a06c:	f140 0000 	adc.w	r0, r0, #0
    a070:	6014      	str	r4, [r2, #0]
    a072:	6050      	str	r0, [r2, #4]
    a074:	6889      	ldr	r1, [r1, #8]
    a076:	440b      	add	r3, r1
    a078:	6093      	str	r3, [r2, #8]
    a07a:	4908      	ldr	r1, [pc, #32]	; (a09c <os_deltatime+0x50>)
    a07c:	428b      	cmp	r3, r1
    a07e:	dd09      	ble.n	a094 <os_deltatime+0x48>
    a080:	3401      	adds	r4, #1
    a082:	f140 0000 	adc.w	r0, r0, #0
    a086:	6014      	str	r4, [r2, #0]
    a088:	6050      	str	r0, [r2, #4]
    a08a:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
    a08e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    a092:	6093      	str	r3, [r2, #8]
}
    a094:	b004      	add	sp, #16
    a096:	bc30      	pop	{r4, r5}
    a098:	4770      	bx	lr
    a09a:	bf00      	nop
    a09c:	000f423f 	.word	0x000f423f

0000a0a0 <os_time_change_notify>:
    return 0;
}

static void
os_time_change_notify(const struct os_time_change_info *info)
{
    a0a0:	b538      	push	{r3, r4, r5, lr}
    a0a2:	4605      	mov	r5, r0
    struct os_time_change_listener *listener;

    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
    a0a4:	4b05      	ldr	r3, [pc, #20]	; (a0bc <os_time_change_notify+0x1c>)
    a0a6:	681c      	ldr	r4, [r3, #0]
    a0a8:	e004      	b.n	a0b4 <os_time_change_notify+0x14>
        listener->tcl_fn(info, listener->tcl_arg);
    a0aa:	6823      	ldr	r3, [r4, #0]
    a0ac:	6861      	ldr	r1, [r4, #4]
    a0ae:	4628      	mov	r0, r5
    a0b0:	4798      	blx	r3
    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
    a0b2:	68a4      	ldr	r4, [r4, #8]
    a0b4:	2c00      	cmp	r4, #0
    a0b6:	d1f8      	bne.n	a0aa <os_time_change_notify+0xa>
    }
}
    a0b8:	bd38      	pop	{r3, r4, r5, pc}
    a0ba:	bf00      	nop
    a0bc:	20000100 	.word	0x20000100

0000a0c0 <os_time_tick>:
{
    a0c0:	b570      	push	{r4, r5, r6, lr}
    assert(ticks >= 0);
    a0c2:	1e04      	subs	r4, r0, #0
    a0c4:	db0d      	blt.n	a0e2 <os_time_tick+0x22>
    OS_ENTER_CRITICAL(sr);
    a0c6:	f000 f94f 	bl	a368 <os_arch_save_sr>
    a0ca:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
    a0cc:	4911      	ldr	r1, [pc, #68]	; (a114 <os_time_tick+0x54>)
    a0ce:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
    a0d0:	18a3      	adds	r3, r4, r2
    a0d2:	600b      	str	r3, [r1, #0]
    if ((prev_os_time ^ g_os_time) >> 31) {
    a0d4:	ea93 0f02 	teq	r3, r2
    a0d8:	d409      	bmi.n	a0ee <os_time_tick+0x2e>
    OS_EXIT_CRITICAL(sr);
    a0da:	4628      	mov	r0, r5
    a0dc:	f000 f94a 	bl	a374 <os_arch_restore_sr>
}
    a0e0:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
    a0e2:	2300      	movs	r3, #0
    a0e4:	461a      	mov	r2, r3
    a0e6:	4619      	mov	r1, r3
    a0e8:	4618      	mov	r0, r3
    a0ea:	f7fe ff33 	bl	8f54 <__assert_func>
        delta = g_os_time - basetod.ostime;
    a0ee:	4e0a      	ldr	r6, [pc, #40]	; (a118 <os_time_tick+0x58>)
    a0f0:	4631      	mov	r1, r6
    a0f2:	f851 4b08 	ldr.w	r4, [r1], #8
    a0f6:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    a0f8:	460a      	mov	r2, r1
    a0fa:	4620      	mov	r0, r4
    a0fc:	f7ff ffa6 	bl	a04c <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
    a100:	f106 0118 	add.w	r1, r6, #24
    a104:	460a      	mov	r2, r1
    a106:	4620      	mov	r0, r4
    a108:	f7ff ffa0 	bl	a04c <os_deltatime>
        basetod.ostime = g_os_time;
    a10c:	4b01      	ldr	r3, [pc, #4]	; (a114 <os_time_tick+0x54>)
    a10e:	681b      	ldr	r3, [r3, #0]
    a110:	6033      	str	r3, [r6, #0]
    a112:	e7e2      	b.n	a0da <os_time_tick+0x1a>
    a114:	200050e0 	.word	0x200050e0
    a118:	200050b0 	.word	0x200050b0

0000a11c <os_time_get>:
}
    a11c:	4b01      	ldr	r3, [pc, #4]	; (a124 <os_time_get+0x8>)
    a11e:	6818      	ldr	r0, [r3, #0]
    a120:	4770      	bx	lr
    a122:	bf00      	nop
    a124:	200050e0 	.word	0x200050e0

0000a128 <os_time_advance>:
{
    a128:	b510      	push	{r4, lr}
    assert(ticks >= 0);
    a12a:	1e04      	subs	r4, r0, #0
    a12c:	db02      	blt.n	a134 <os_time_advance+0xc>
    if (ticks > 0) {
    a12e:	2c00      	cmp	r4, #0
    a130:	dc06      	bgt.n	a140 <os_time_advance+0x18>
}
    a132:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
    a134:	2300      	movs	r3, #0
    a136:	461a      	mov	r2, r3
    a138:	4619      	mov	r1, r3
    a13a:	4618      	mov	r0, r3
    a13c:	f7fe ff0a 	bl	8f54 <__assert_func>
        if (!os_started()) {
    a140:	f7fe ffc2 	bl	90c8 <os_started>
    a144:	b920      	cbnz	r0, a150 <os_time_advance+0x28>
            g_os_time += ticks;
    a146:	4b08      	ldr	r3, [pc, #32]	; (a168 <os_time_advance+0x40>)
    a148:	6818      	ldr	r0, [r3, #0]
    a14a:	4420      	add	r0, r4
    a14c:	6018      	str	r0, [r3, #0]
    a14e:	e7f0      	b.n	a132 <os_time_advance+0xa>
            os_time_tick(ticks);
    a150:	4620      	mov	r0, r4
    a152:	f7ff ffb5 	bl	a0c0 <os_time_tick>
            os_callout_tick();
    a156:	f7ff f8eb 	bl	9330 <os_callout_tick>
            os_sched_os_timer_exp();
    a15a:	f7ff fd99 	bl	9c90 <os_sched_os_timer_exp>
            os_sched(NULL);
    a15e:	2000      	movs	r0, #0
    a160:	f7ff fdda 	bl	9d18 <os_sched>
}
    a164:	e7e5      	b.n	a132 <os_time_advance+0xa>
    a166:	bf00      	nop
    a168:	200050e0 	.word	0x200050e0

0000a16c <os_time_delay>:
    if (osticks > 0) {
    a16c:	b900      	cbnz	r0, a170 <os_time_delay+0x4>
    a16e:	4770      	bx	lr
{
    a170:	b538      	push	{r3, r4, r5, lr}
    a172:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    a174:	f000 f8f8 	bl	a368 <os_arch_save_sr>
    a178:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
    a17a:	f7ff fcb9 	bl	9af0 <os_sched_get_current_task>
    a17e:	4621      	mov	r1, r4
    a180:	f7ff fcc2 	bl	9b08 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
    a184:	4628      	mov	r0, r5
    a186:	f000 f8f5 	bl	a374 <os_arch_restore_sr>
        os_sched(NULL);
    a18a:	2000      	movs	r0, #0
    a18c:	f7ff fdc4 	bl	9d18 <os_sched>
}
    a190:	bd38      	pop	{r3, r4, r5, pc}
	...

0000a194 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
    a194:	b570      	push	{r4, r5, r6, lr}
    a196:	4605      	mov	r5, r0
    a198:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
    a19a:	f000 f8e5 	bl	a368 <os_arch_save_sr>
    a19e:	4606      	mov	r6, r0
    if (tv != NULL) {
    a1a0:	b145      	cbz	r5, a1b4 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
    a1a2:	f7ff ffbb 	bl	a11c <os_time_get>
    a1a6:	4908      	ldr	r1, [pc, #32]	; (a1c8 <os_gettimeofday+0x34>)
    a1a8:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
    a1ac:	462a      	mov	r2, r5
    a1ae:	1ac0      	subs	r0, r0, r3
    a1b0:	f7ff ff4c 	bl	a04c <os_deltatime>
    }

    if (tz != NULL) {
    a1b4:	b114      	cbz	r4, a1bc <os_gettimeofday+0x28>
        *tz = basetod.timezone;
    a1b6:	4b04      	ldr	r3, [pc, #16]	; (a1c8 <os_gettimeofday+0x34>)
    a1b8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    a1ba:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
    a1bc:	4630      	mov	r0, r6
    a1be:	f000 f8d9 	bl	a374 <os_arch_restore_sr>

    return (0);
}
    a1c2:	2000      	movs	r0, #0
    a1c4:	bd70      	pop	{r4, r5, r6, pc}
    a1c6:	bf00      	nop
    a1c8:	200050b0 	.word	0x200050b0

0000a1cc <os_time_is_set>:

bool
os_time_is_set(void)
{
    return basetod.utctime.tv_sec > 0;
    a1cc:	4b04      	ldr	r3, [pc, #16]	; (a1e0 <os_time_is_set+0x14>)
    a1ce:	699a      	ldr	r2, [r3, #24]
    a1d0:	69db      	ldr	r3, [r3, #28]
    a1d2:	2a01      	cmp	r2, #1
    a1d4:	f173 0300 	sbcs.w	r3, r3, #0
}
    a1d8:	bfac      	ite	ge
    a1da:	2001      	movge	r0, #1
    a1dc:	2000      	movlt	r0, #0
    a1de:	4770      	bx	lr
    a1e0:	200050b0 	.word	0x200050b0

0000a1e4 <os_time_populate_info>:
{
    a1e4:	b510      	push	{r4, lr}
    a1e6:	4604      	mov	r4, r0
    if (new_tv == NULL && new_tz == NULL) {
    a1e8:	4608      	mov	r0, r1
    a1ea:	b181      	cbz	r1, a20e <os_time_populate_info+0x2a>
    if (new_tv == NULL) {
    a1ec:	b1a0      	cbz	r0, a218 <os_time_populate_info+0x34>
    if (new_tz == NULL) {
    a1ee:	b1aa      	cbz	r2, a21c <os_time_populate_info+0x38>
    info->tci_prev_tv = &basetod.utctime;
    a1f0:	4b0b      	ldr	r3, [pc, #44]	; (a220 <os_time_populate_info+0x3c>)
    a1f2:	f103 0118 	add.w	r1, r3, #24
    a1f6:	6021      	str	r1, [r4, #0]
    info->tci_cur_tv = new_tv;
    a1f8:	60a0      	str	r0, [r4, #8]
    info->tci_prev_tz = &basetod.timezone;
    a1fa:	3328      	adds	r3, #40	; 0x28
    a1fc:	6063      	str	r3, [r4, #4]
    info->tci_cur_tz = new_tz;
    a1fe:	60e2      	str	r2, [r4, #12]
    info->tci_newly_synced = !os_time_is_set();
    a200:	f7ff ffe4 	bl	a1cc <os_time_is_set>
    a204:	f080 0001 	eor.w	r0, r0, #1
    a208:	7420      	strb	r0, [r4, #16]
    return 0;
    a20a:	2000      	movs	r0, #0
}
    a20c:	bd10      	pop	{r4, pc}
    if (new_tv == NULL && new_tz == NULL) {
    a20e:	2a00      	cmp	r2, #0
    a210:	d1ec      	bne.n	a1ec <os_time_populate_info+0x8>
        return SYS_EINVAL;
    a212:	f06f 0001 	mvn.w	r0, #1
    a216:	e7f9      	b.n	a20c <os_time_populate_info+0x28>
        new_tv = &basetod.utctime;
    a218:	4802      	ldr	r0, [pc, #8]	; (a224 <os_time_populate_info+0x40>)
    a21a:	e7e8      	b.n	a1ee <os_time_populate_info+0xa>
        new_tz = &basetod.timezone;
    a21c:	4a02      	ldr	r2, [pc, #8]	; (a228 <os_time_populate_info+0x44>)
    a21e:	e7e7      	b.n	a1f0 <os_time_populate_info+0xc>
    a220:	200050b0 	.word	0x200050b0
    a224:	200050c8 	.word	0x200050c8
    a228:	200050d8 	.word	0x200050d8

0000a22c <os_settimeofday>:
{
    a22c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a230:	b087      	sub	sp, #28
    a232:	4604      	mov	r4, r0
    a234:	460d      	mov	r5, r1
    OS_ENTER_CRITICAL(sr);
    a236:	f000 f897 	bl	a368 <os_arch_save_sr>
    a23a:	4607      	mov	r7, r0
    rc = os_time_populate_info(&info, utctime, tz);
    a23c:	462a      	mov	r2, r5
    a23e:	4621      	mov	r1, r4
    a240:	a801      	add	r0, sp, #4
    a242:	f7ff ffcf 	bl	a1e4 <os_time_populate_info>
    a246:	4606      	mov	r6, r0
    if (utctime != NULL) {
    a248:	b1bc      	cbz	r4, a27a <os_settimeofday+0x4e>
        delta = os_time_get() - basetod.ostime;
    a24a:	f7ff ff67 	bl	a11c <os_time_get>
    a24e:	f8df 804c 	ldr.w	r8, [pc, #76]	; a29c <os_settimeofday+0x70>
    a252:	4641      	mov	r1, r8
    a254:	f851 3b08 	ldr.w	r3, [r1], #8
    a258:	eba0 0903 	sub.w	r9, r0, r3
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    a25c:	460a      	mov	r2, r1
    a25e:	4648      	mov	r0, r9
    a260:	f7ff fef4 	bl	a04c <os_deltatime>
        basetod.utctime = *utctime;
    a264:	f108 0c18 	add.w	ip, r8, #24
    a268:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    a26c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        basetod.ostime += delta;
    a270:	f8d8 0000 	ldr.w	r0, [r8]
    a274:	4448      	add	r0, r9
    a276:	f8c8 0000 	str.w	r0, [r8]
    if (tz != NULL) {
    a27a:	b115      	cbz	r5, a282 <os_settimeofday+0x56>
        basetod.timezone = *tz;
    a27c:	6828      	ldr	r0, [r5, #0]
    a27e:	4b07      	ldr	r3, [pc, #28]	; (a29c <os_settimeofday+0x70>)
    a280:	6298      	str	r0, [r3, #40]	; 0x28
    OS_EXIT_CRITICAL(sr);
    a282:	4638      	mov	r0, r7
    a284:	f000 f876 	bl	a374 <os_arch_restore_sr>
    if (notify) {
    a288:	b11e      	cbz	r6, a292 <os_settimeofday+0x66>
}
    a28a:	2000      	movs	r0, #0
    a28c:	b007      	add	sp, #28
    a28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        os_time_change_notify(&info);
    a292:	a801      	add	r0, sp, #4
    a294:	f7ff ff04 	bl	a0a0 <os_time_change_notify>
    a298:	e7f7      	b.n	a28a <os_settimeofday+0x5e>
    a29a:	bf00      	nop
    a29c:	200050b0 	.word	0x200050b0

0000a2a0 <os_get_uptime>:

void
os_get_uptime(struct os_timeval *tvp)
{
    a2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2a2:	b085      	sub	sp, #20
    a2a4:	4606      	mov	r6, r0
  struct os_timeval tv;
  os_time_t delta;
  os_sr_t sr;
  os_time_t ostime;

  OS_ENTER_CRITICAL(sr);
    a2a6:	f000 f85f 	bl	a368 <os_arch_save_sr>
    a2aa:	4607      	mov	r7, r0
  tv = basetod.uptime;
    a2ac:	4d0a      	ldr	r5, [pc, #40]	; (a2d8 <os_get_uptime+0x38>)
    a2ae:	466c      	mov	r4, sp
    a2b0:	f105 0308 	add.w	r3, r5, #8
    a2b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a2b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ostime = basetod.ostime;
    a2ba:	682d      	ldr	r5, [r5, #0]
  delta = os_time_get() - ostime;
    a2bc:	f7ff ff2e 	bl	a11c <os_time_get>
    a2c0:	1b45      	subs	r5, r0, r5
  OS_EXIT_CRITICAL(sr);
    a2c2:	4638      	mov	r0, r7
    a2c4:	f000 f856 	bl	a374 <os_arch_restore_sr>

  os_deltatime(delta, &tv, tvp);
    a2c8:	4632      	mov	r2, r6
    a2ca:	4621      	mov	r1, r4
    a2cc:	4628      	mov	r0, r5
    a2ce:	f7ff febd 	bl	a04c <os_deltatime>
}
    a2d2:	b005      	add	sp, #20
    a2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a2d6:	bf00      	nop
    a2d8:	200050b0 	.word	0x200050b0

0000a2dc <os_get_uptime_usec>:

int64_t
os_get_uptime_usec(void)
{
    a2dc:	b510      	push	{r4, lr}
    a2de:	b084      	sub	sp, #16
  struct os_timeval tv;

  os_get_uptime(&tv);
    a2e0:	4668      	mov	r0, sp
    a2e2:	f7ff ffdd 	bl	a2a0 <os_get_uptime>

  return (tv.tv_sec * 1000000 + tv.tv_usec);
    a2e6:	9a00      	ldr	r2, [sp, #0]
    a2e8:	9c01      	ldr	r4, [sp, #4]
    a2ea:	0163      	lsls	r3, r4, #5
    a2ec:	ea43 63d2 	orr.w	r3, r3, r2, lsr #27
    a2f0:	ea4f 1c42 	mov.w	ip, r2, lsl #5
    a2f4:	ebbc 0c02 	subs.w	ip, ip, r2
    a2f8:	eb63 0304 	sbc.w	r3, r3, r4
    a2fc:	0259      	lsls	r1, r3, #9
    a2fe:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
    a302:	ea4f 204c 	mov.w	r0, ip, lsl #9
    a306:	1883      	adds	r3, r0, r2
    a308:	eb44 0101 	adc.w	r1, r4, r1
    a30c:	ea4f 1c81 	mov.w	ip, r1, lsl #6
    a310:	ea4c 6c93 	orr.w	ip, ip, r3, lsr #26
    a314:	0198      	lsls	r0, r3, #6
    a316:	1ac0      	subs	r0, r0, r3
    a318:	eb6c 0101 	sbc.w	r1, ip, r1
    a31c:	1880      	adds	r0, r0, r2
    a31e:	eb44 0401 	adc.w	r4, r4, r1
    a322:	9902      	ldr	r1, [sp, #8]
    a324:	1840      	adds	r0, r0, r1
}
    a326:	eb44 71e1 	adc.w	r1, r4, r1, asr #31
    a32a:	b004      	add	sp, #16
    a32c:	bd10      	pop	{r4, pc}

0000a32e <os_time_ms_to_ticks>:

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    a32e:	b538      	push	{r3, r4, r5, lr}
    a330:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
    a332:	0e41      	lsrs	r1, r0, #25
    a334:	01c4      	lsls	r4, r0, #7
    a336:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a33a:	2300      	movs	r3, #0
    a33c:	4620      	mov	r0, r4
    a33e:	f016 f8ff 	bl	20540 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    a342:	6028      	str	r0, [r5, #0]
    return 0;
}
    a344:	2000      	movs	r0, #0
    a346:	bd38      	pop	{r3, r4, r5, pc}

0000a348 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    a348:	b508      	push	{r3, lr}
    os_time_advance(1);
    a34a:	2001      	movs	r0, #1
    a34c:	f7ff feec 	bl	a128 <os_time_advance>
}
    a350:	bd08      	pop	{r3, pc}
	...

0000a354 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
    a354:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
    a356:	f7ff fbb3 	bl	9ac0 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
    a35a:	4b02      	ldr	r3, [pc, #8]	; (a364 <os_arch_ctx_sw+0x10>)
    a35c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a360:	605a      	str	r2, [r3, #4]
}
    a362:	bd08      	pop	{r3, pc}
    a364:	e000ed00 	.word	0xe000ed00

0000a368 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a368:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    a36c:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
    a36e:	f000 0001 	and.w	r0, r0, #1
    a372:	4770      	bx	lr

0000a374 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
    a374:	b900      	cbnz	r0, a378 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    a376:	b662      	cpsie	i
        __enable_irq();
    }
}
    a378:	4770      	bx	lr

0000a37a <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a37a:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
    a37e:	f000 0001 	and.w	r0, r0, #1
    a382:	4770      	bx	lr

0000a384 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
    a384:	b570      	push	{r4, r5, r6, lr}
    a386:	4606      	mov	r6, r0
    a388:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
    a38a:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
    a38e:	2309      	movs	r3, #9
    a390:	e003      	b.n	a39a <os_arch_task_stack_init+0x16>
        s[i] = 0;
    a392:	2200      	movs	r2, #0
    a394:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
    a398:	3301      	adds	r3, #1
    a39a:	2b0d      	cmp	r3, #13
    a39c:	ddf9      	ble.n	a392 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
    a39e:	4620      	mov	r0, r4
    a3a0:	f000 fbb6 	bl	ab10 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
    a3a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    a3a8:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
    a3ac:	6973      	ldr	r3, [r6, #20]
    a3ae:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
    a3b2:	69b3      	ldr	r3, [r6, #24]
    a3b4:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
    a3b8:	f06f 0302 	mvn.w	r3, #2
    a3bc:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
    a3c0:	4620      	mov	r0, r4
    a3c2:	bd70      	pop	{r4, r5, r6, pc}

0000a3c4 <os_arch_init>:

void
os_arch_init(void)
{
    a3c4:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    a3c6:	4a04      	ldr	r2, [pc, #16]	; (a3d8 <os_arch_init+0x14>)
    a3c8:	6953      	ldr	r3, [r2, #20]
    a3ca:	f043 0310 	orr.w	r3, r3, #16
    a3ce:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
    a3d0:	f7fe fe80 	bl	90d4 <os_init_idle_task>
}
    a3d4:	bd08      	pop	{r3, pc}
    a3d6:	bf00      	nop
    a3d8:	e000ed00 	.word	0xe000ed00

0000a3dc <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
    a3dc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a3de:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    a3e2:	b914      	cbnz	r4, a3ea <os_arch_os_init+0xe>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    a3e4:	f04f 0c00 	mov.w	ip, #0
    a3e8:	e00a      	b.n	a400 <os_arch_os_init+0x24>
    err = OS_ERR_IN_ISR;
    a3ea:	2007      	movs	r0, #7
    a3ec:	e034      	b.n	a458 <os_arch_os_init+0x7c>
            NVIC->IP[i] = -1;
    a3ee:	f10c 4e60 	add.w	lr, ip, #3758096384	; 0xe0000000
    a3f2:	f50e 4e61 	add.w	lr, lr, #57600	; 0xe100
    a3f6:	24ff      	movs	r4, #255	; 0xff
    a3f8:	f88e 4300 	strb.w	r4, [lr, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    a3fc:	f10c 0c01 	add.w	ip, ip, #1
    a400:	f1bc 0fef 	cmp.w	ip, #239	; 0xef
    a404:	d9f3      	bls.n	a3ee <os_arch_os_init+0x12>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    a406:	f06f 0c0d 	mvn.w	ip, #13
    a40a:	e00a      	b.n	a422 <os_arch_os_init+0x46>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
    a40c:	fa4f fe8c 	sxtb.w	lr, ip
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a410:	4c14      	ldr	r4, [pc, #80]	; (a464 <os_arch_os_init+0x88>)
    a412:	68a4      	ldr	r4, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a414:	f10e 0e10 	add.w	lr, lr, #16
    a418:	4d13      	ldr	r5, [pc, #76]	; (a468 <os_arch_os_init+0x8c>)
    a41a:	f844 502e 	str.w	r5, [r4, lr, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
    a41e:	f10c 0c01 	add.w	ip, ip, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    a422:	f1bc 0f25 	cmp.w	ip, #37	; 0x25
    a426:	ddf1      	ble.n	a40c <os_arch_os_init+0x30>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a428:	4c0e      	ldr	r4, [pc, #56]	; (a464 <os_arch_os_init+0x88>)
    a42a:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a42c:	4e0f      	ldr	r6, [pc, #60]	; (a46c <os_arch_os_init+0x90>)
    a42e:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a430:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a432:	4e0f      	ldr	r6, [pc, #60]	; (a470 <os_arch_os_init+0x94>)
    a434:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a436:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a438:	4e0e      	ldr	r6, [pc, #56]	; (a474 <os_arch_os_init+0x98>)
    a43a:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a43c:	25e0      	movs	r5, #224	; 0xe0
    a43e:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    a442:	2520      	movs	r5, #32
    a444:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    a446:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
    a44a:	f014 0f01 	tst.w	r4, #1
    a44e:	d004      	beq.n	a45a <os_arch_os_init+0x7e>
    SVC_Call(os_arch_init);
    a450:	f8df c024 	ldr.w	ip, [pc, #36]	; a478 <os_arch_os_init+0x9c>
    a454:	df00      	svc	0
        err = OS_OK;
    a456:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
    a458:	bd70      	pop	{r4, r5, r6, pc}
            os_arch_init();
    a45a:	f7ff ffb3 	bl	a3c4 <os_arch_init>
        err = OS_OK;
    a45e:	2000      	movs	r0, #0
    a460:	e7fa      	b.n	a458 <os_arch_os_init+0x7c>
    a462:	bf00      	nop
    a464:	e000ed00 	.word	0xe000ed00
    a468:	0000abaf 	.word	0x0000abaf
    a46c:	0000ab17 	.word	0x0000ab17
    a470:	0000ab5d 	.word	0x0000ab5d
    a474:	0000aba3 	.word	0x0000aba3
    a478:	0000a3c5 	.word	0x0000a3c5

0000a47c <os_arch_start>:

uint32_t
os_arch_start(void)
{
    a47c:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
    a47e:	f7ff fc45 	bl	9d0c <os_sched_next_task>
    a482:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
    a484:	f7ff fb3a 	bl	9afc <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
    a488:	6823      	ldr	r3, [r4, #0]
    a48a:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    a48c:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
    a490:	2106      	movs	r1, #6
    a492:	2080      	movs	r0, #128	; 0x80
    a494:	f00d fac0 	bl	17a18 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
    a498:	4b03      	ldr	r3, [pc, #12]	; (a4a8 <os_arch_start+0x2c>)
    a49a:	2201      	movs	r2, #1
    a49c:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
    a49e:	4620      	mov	r0, r4
    a4a0:	f7ff ff58 	bl	a354 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
    a4a4:	69a0      	ldr	r0, [r4, #24]
    a4a6:	bd10      	pop	{r4, pc}
    a4a8:	20004288 	.word	0x20004288

0000a4ac <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
    a4ac:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
    a4ae:	4816      	ldr	r0, [pc, #88]	; (a508 <os_arch_os_start+0x5c>)
    a4b0:	6800      	ldr	r0, [r0, #0]
    a4b2:	3804      	subs	r0, #4
    a4b4:	f000 fb22 	bl	aafc <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a4b8:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    a4bc:	bb04      	cbnz	r4, a500 <os_arch_os_start+0x54>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    a4be:	f3ef 8c14 	mrs	ip, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
    a4c2:	f00c 0c03 	and.w	ip, ip, #3
    a4c6:	f1bc 0f02 	cmp.w	ip, #2
    a4ca:	d00f      	beq.n	a4ec <os_arch_os_start+0x40>
    a4cc:	d804      	bhi.n	a4d8 <os_arch_os_start+0x2c>
    a4ce:	f1bc 0f01 	cmp.w	ip, #1
    a4d2:	d810      	bhi.n	a4f6 <os_arch_os_start+0x4a>
    a4d4:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
    a4d6:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
    a4d8:	f1bc 0f03 	cmp.w	ip, #3
    a4dc:	d10b      	bne.n	a4f6 <os_arch_os_start+0x4a>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
    a4de:	4c0b      	ldr	r4, [pc, #44]	; (a50c <os_arch_os_start+0x60>)
    a4e0:	6824      	ldr	r4, [r4, #0]
    a4e2:	f014 0f01 	tst.w	r4, #1
    a4e6:	d106      	bne.n	a4f6 <os_arch_os_start+0x4a>
                err = OS_ERR_PRIV;
    a4e8:	2008      	movs	r0, #8
    a4ea:	e7f4      	b.n	a4d6 <os_arch_os_start+0x2a>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
    a4ec:	4c07      	ldr	r4, [pc, #28]	; (a50c <os_arch_os_start+0x60>)
    a4ee:	6824      	ldr	r4, [r4, #0]
    a4f0:	f014 0f01 	tst.w	r4, #1
    a4f4:	d106      	bne.n	a504 <os_arch_os_start+0x58>
    SVC_Call(os_arch_start);
    a4f6:	f8df c018 	ldr.w	ip, [pc, #24]	; a510 <os_arch_os_start+0x64>
    a4fa:	df00      	svc	0
}
    a4fc:	2000      	movs	r0, #0
    a4fe:	e7ea      	b.n	a4d6 <os_arch_os_start+0x2a>
    err = OS_ERR_IN_ISR;
    a500:	2007      	movs	r0, #7
    a502:	e7e8      	b.n	a4d6 <os_arch_os_start+0x2a>
                err = OS_ERR_PRIV;
    a504:	2008      	movs	r0, #8
    a506:	e7e6      	b.n	a4d6 <os_arch_os_start+0x2a>
    a508:	200030dc 	.word	0x200030dc
    a50c:	200050e4 	.word	0x200050e4
    a510:	0000a47d 	.word	0x0000a47d

0000a514 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
    a514:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
    a516:	2000      	movs	r0, #0
    a518:	6018      	str	r0, [r3, #0]
    a51a:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
    a51c:	6098      	str	r0, [r3, #8]
    a51e:	60d8      	str	r0, [r3, #12]
    a520:	6118      	str	r0, [r3, #16]
    a522:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
    a524:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
    a526:	611a      	str	r2, [r3, #16]

    return (0);
}
    a528:	4770      	bx	lr

0000a52a <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
    a52a:	b538      	push	{r3, r4, r5, lr}
    a52c:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    a52e:	f7ff ff1b 	bl	a368 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
    a532:	682c      	ldr	r4, [r5, #0]
    if (mp) {
    a534:	b114      	cbz	r4, a53c <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    a536:	6863      	ldr	r3, [r4, #4]
    a538:	602b      	str	r3, [r5, #0]
    a53a:	b12b      	cbz	r3, a548 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
    a53c:	f7ff ff1a 	bl	a374 <os_arch_restore_sr>

    if (mp) {
    a540:	b104      	cbz	r4, a544 <os_mqueue_get+0x1a>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
    a542:	3c10      	subs	r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
    a544:	4620      	mov	r0, r4
    a546:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    a548:	606d      	str	r5, [r5, #4]
    a54a:	e7f7      	b.n	a53c <os_mqueue_get+0x12>

0000a54c <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
    a54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
    a54e:	7953      	ldrb	r3, [r2, #5]
    a550:	2b07      	cmp	r3, #7
    a552:	d916      	bls.n	a582 <os_mqueue_put+0x36>
    a554:	4605      	mov	r5, r0
    a556:	460e      	mov	r6, r1
    a558:	4614      	mov	r4, r2
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
    a55a:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
    a55e:	f7ff ff03 	bl	a368 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
    a562:	2300      	movs	r3, #0
    a564:	f844 3f14 	str.w	r3, [r4, #20]!
    a568:	686b      	ldr	r3, [r5, #4]
    a56a:	601f      	str	r7, [r3, #0]
    a56c:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
    a56e:	f7ff ff01 	bl	a374 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
    a572:	b146      	cbz	r6, a586 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
    a574:	f105 0108 	add.w	r1, r5, #8
    a578:	4630      	mov	r0, r6
    a57a:	f7ff f811 	bl	95a0 <os_eventq_put>
    }

    return (0);
    a57e:	2000      	movs	r0, #0
    a580:	e000      	b.n	a584 <os_mqueue_put+0x38>
err:
    return (rc);
    a582:	2002      	movs	r0, #2
}
    a584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
    a586:	2000      	movs	r0, #0
    a588:	e7fc      	b.n	a584 <os_mqueue_put+0x38>

0000a58a <os_mbuf_get>:
    return (0);
}

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
    a58a:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
    a58c:	8803      	ldrh	r3, [r0, #0]
    a58e:	428b      	cmp	r3, r1
    a590:	d310      	bcc.n	a5b4 <os_mbuf_get+0x2a>
    a592:	4604      	mov	r4, r0
    a594:	460d      	mov	r5, r1
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
    a596:	6840      	ldr	r0, [r0, #4]
    a598:	f7ff f8fa 	bl	9790 <os_memblock_get>
    if (!om) {
    a59c:	b148      	cbz	r0, a5b2 <os_mbuf_get+0x28>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
    a59e:	2300      	movs	r3, #0
    a5a0:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
    a5a2:	7103      	strb	r3, [r0, #4]
    om->om_pkthdr_len = 0;
    a5a4:	7143      	strb	r3, [r0, #5]
    om->om_len = 0;
    a5a6:	80c3      	strh	r3, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
    a5a8:	f100 0110 	add.w	r1, r0, #16
    a5ac:	440d      	add	r5, r1
    a5ae:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
    a5b0:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
    a5b2:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    a5b4:	2000      	movs	r0, #0
    return om;
    a5b6:	e7fc      	b.n	a5b2 <os_mbuf_get+0x28>

0000a5b8 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
    a5b8:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    a5ba:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    a5be:	8803      	ldrh	r3, [r0, #0]
    a5c0:	42ab      	cmp	r3, r5
    a5c2:	d30e      	bcc.n	a5e2 <os_mbuf_get_pkthdr+0x2a>
    a5c4:	2dff      	cmp	r5, #255	; 0xff
    a5c6:	d80e      	bhi.n	a5e6 <os_mbuf_get_pkthdr+0x2e>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
    a5c8:	2100      	movs	r1, #0
    a5ca:	f7ff ffde 	bl	a58a <os_mbuf_get>
    if (om) {
    a5ce:	b138      	cbz	r0, a5e0 <os_mbuf_get_pkthdr+0x28>
        om->om_pkthdr_len = pkthdr_len;
    a5d0:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
    a5d2:	6803      	ldr	r3, [r0, #0]
    a5d4:	442b      	add	r3, r5
    a5d6:	6003      	str	r3, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
    a5d8:	2300      	movs	r3, #0
    a5da:	8203      	strh	r3, [r0, #16]
        pkthdr->omp_flags = 0;
    a5dc:	8243      	strh	r3, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
    a5de:	6143      	str	r3, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
    a5e0:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    a5e2:	2000      	movs	r0, #0
    a5e4:	e7fc      	b.n	a5e0 <os_mbuf_get_pkthdr+0x28>
    a5e6:	2000      	movs	r0, #0
    return om;
    a5e8:	e7fa      	b.n	a5e0 <os_mbuf_get_pkthdr+0x28>

0000a5ea <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
    a5ea:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    a5ec:	6883      	ldr	r3, [r0, #8]
    a5ee:	b123      	cbz	r3, a5fa <os_mbuf_free+0x10>
    a5f0:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    a5f2:	6858      	ldr	r0, [r3, #4]
    a5f4:	f7ff f8f4 	bl	97e0 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    a5f8:	bd08      	pop	{r3, pc}
    rc = 0;
    a5fa:	2000      	movs	r0, #0
    return (rc);
    a5fc:	e7fc      	b.n	a5f8 <os_mbuf_free+0xe>

0000a5fe <os_mbuf_free_chain>:
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    a5fe:	b158      	cbz	r0, a618 <os_mbuf_free_chain+0x1a>
{
    a600:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
    a602:	68c4      	ldr	r4, [r0, #12]

        rc = os_mbuf_free(om);
    a604:	f7ff fff1 	bl	a5ea <os_mbuf_free>
        if (rc != 0) {
    a608:	4603      	mov	r3, r0
    a60a:	b918      	cbnz	r0, a614 <os_mbuf_free_chain+0x16>
            goto done;
        }

        om = next;
    a60c:	4620      	mov	r0, r4
    while (om != NULL) {
    a60e:	2c00      	cmp	r4, #0
    a610:	d1f7      	bne.n	a602 <os_mbuf_free_chain+0x4>
    }

    rc = 0;
    a612:	2300      	movs	r3, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
    a614:	4618      	mov	r0, r3
    a616:	bd10      	pop	{r4, pc}
    rc = 0;
    a618:	2300      	movs	r3, #0
}
    a61a:	4618      	mov	r0, r3
    a61c:	4770      	bx	lr

0000a61e <os_mbuf_append>:
    return len;
}

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
    a61e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    a622:	2800      	cmp	r0, #0
    a624:	d04b      	beq.n	a6be <os_mbuf_append+0xa0>
    a626:	460f      	mov	r7, r1
    a628:	4691      	mov	r9, r2
    a62a:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    a62c:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    a630:	4603      	mov	r3, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
    a632:	461e      	mov	r6, r3
    a634:	68db      	ldr	r3, [r3, #12]
    a636:	2b00      	cmp	r3, #0
    a638:	d1fb      	bne.n	a632 <os_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    a63a:	464d      	mov	r5, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
    a63c:	68b3      	ldr	r3, [r6, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a63e:	f106 0410 	add.w	r4, r6, #16
    a642:	881b      	ldrh	r3, [r3, #0]
    a644:	441c      	add	r4, r3
      (om->om_data + om->om_len);
    a646:	6830      	ldr	r0, [r6, #0]
    a648:	88f3      	ldrh	r3, [r6, #6]
    a64a:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a64c:	1a24      	subs	r4, r4, r0
    a64e:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    a650:	b164      	cbz	r4, a66c <os_mbuf_append+0x4e>
        if (space > remainder) {
    a652:	454c      	cmp	r4, r9
    a654:	dd00      	ble.n	a658 <os_mbuf_append+0x3a>
            space = remainder;
    a656:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    a658:	4622      	mov	r2, r4
    a65a:	4639      	mov	r1, r7
    a65c:	f001 fd0a 	bl	c074 <memcpy>

        last->om_len += space;
    a660:	88f3      	ldrh	r3, [r6, #6]
    a662:	4423      	add	r3, r4
    a664:	80f3      	strh	r3, [r6, #6]
        data += space;
    a666:	4427      	add	r7, r4
        remainder -= space;
    a668:	eba9 0504 	sub.w	r5, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    a66c:	2d00      	cmp	r5, #0
    a66e:	dd16      	ble.n	a69e <os_mbuf_append+0x80>
        new = os_mbuf_get(omp, 0);
    a670:	2100      	movs	r1, #0
    a672:	4640      	mov	r0, r8
    a674:	f7ff ff89 	bl	a58a <os_mbuf_get>
        if (!new) {
    a678:	4604      	mov	r4, r0
    a67a:	b180      	cbz	r0, a69e <os_mbuf_append+0x80>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
    a67c:	f8b8 2000 	ldrh.w	r2, [r8]
    a680:	42aa      	cmp	r2, r5
    a682:	bfa8      	it	ge
    a684:	462a      	movge	r2, r5
    a686:	b292      	uxth	r2, r2
    a688:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
    a68a:	4639      	mov	r1, r7
    a68c:	6800      	ldr	r0, [r0, #0]
    a68e:	f001 fcf1 	bl	c074 <memcpy>
        data += new->om_len;
    a692:	88e3      	ldrh	r3, [r4, #6]
    a694:	441f      	add	r7, r3
        remainder -= new->om_len;
    a696:	1aed      	subs	r5, r5, r3
        SLIST_NEXT(last, om_next) = new;
    a698:	60f4      	str	r4, [r6, #12]
        last = new;
    a69a:	4626      	mov	r6, r4
    a69c:	e7e6      	b.n	a66c <os_mbuf_append+0x4e>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
    a69e:	f89a 3005 	ldrb.w	r3, [sl, #5]
    a6a2:	2b07      	cmp	r3, #7
    a6a4:	d907      	bls.n	a6b6 <os_mbuf_append+0x98>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    a6a6:	eba9 0905 	sub.w	r9, r9, r5
    a6aa:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    a6ae:	fa13 f989 	uxtah	r9, r3, r9
    a6b2:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
    a6b6:	b925      	cbnz	r5, a6c2 <os_mbuf_append+0xa4>


    return (0);
err:
    return (rc);
}
    a6b8:	4628      	mov	r0, r5
    a6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
    a6be:	2502      	movs	r5, #2
    a6c0:	e7fa      	b.n	a6b8 <os_mbuf_append+0x9a>
        rc = OS_ENOMEM;
    a6c2:	2501      	movs	r5, #1
    a6c4:	e7f8      	b.n	a6b8 <os_mbuf_append+0x9a>

0000a6c6 <os_mbuf_off>:

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
    a6c6:	b178      	cbz	r0, a6e8 <os_mbuf_off+0x22>
{
    a6c8:	b410      	push	{r4}
    a6ca:	e002      	b.n	a6d2 <os_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
    a6cc:	1ac9      	subs	r1, r1, r3
        cur = next;
    a6ce:	4620      	mov	r0, r4
        if (cur == NULL) {
    a6d0:	b13c      	cbz	r4, a6e2 <os_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
    a6d2:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
    a6d4:	88c3      	ldrh	r3, [r0, #6]
    a6d6:	428b      	cmp	r3, r1
    a6d8:	dc02      	bgt.n	a6e0 <os_mbuf_off+0x1a>
    a6da:	d1f7      	bne.n	a6cc <os_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
    a6dc:	2c00      	cmp	r4, #0
    a6de:	d1f5      	bne.n	a6cc <os_mbuf_off+0x6>
            *out_off = off;
    a6e0:	8011      	strh	r1, [r2, #0]
    }
}
    a6e2:	f85d 4b04 	ldr.w	r4, [sp], #4
    a6e6:	4770      	bx	lr
    a6e8:	4770      	bx	lr

0000a6ea <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
    a6ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6ec:	4604      	mov	r4, r0
    a6ee:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
    a6f0:	4616      	mov	r6, r2
    a6f2:	b91a      	cbnz	r2, a6fc <os_mbuf_copydata+0x12>
        return 0;
    a6f4:	4610      	mov	r0, r2
    a6f6:	e01e      	b.n	a736 <os_mbuf_copydata+0x4c>
            return (-1);
        }

        if (off < m->om_len)
            break;
        off -= m->om_len;
    a6f8:	1a89      	subs	r1, r1, r2
        m = SLIST_NEXT(m, om_next);
    a6fa:	68e4      	ldr	r4, [r4, #12]
    while (off > 0) {
    a6fc:	2900      	cmp	r1, #0
    a6fe:	dd13      	ble.n	a728 <os_mbuf_copydata+0x3e>
        if (!m) {
    a700:	b1ec      	cbz	r4, a73e <os_mbuf_copydata+0x54>
        if (off < m->om_len)
    a702:	88e2      	ldrh	r2, [r4, #6]
    a704:	428a      	cmp	r2, r1
    a706:	ddf7      	ble.n	a6f8 <os_mbuf_copydata+0xe>
    a708:	e00e      	b.n	a728 <os_mbuf_copydata+0x3e>
    }
    while (len > 0 && m != NULL) {
        count = min(m->om_len - off, len);
    a70a:	88e5      	ldrh	r5, [r4, #6]
    a70c:	1a6d      	subs	r5, r5, r1
    a70e:	42b5      	cmp	r5, r6
    a710:	bfa8      	it	ge
    a712:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
    a714:	6823      	ldr	r3, [r4, #0]
    a716:	462a      	mov	r2, r5
    a718:	4419      	add	r1, r3
    a71a:	4638      	mov	r0, r7
    a71c:	f001 fcaa 	bl	c074 <memcpy>
        len -= count;
    a720:	1b76      	subs	r6, r6, r5
        udst += count;
    a722:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
    a724:	68e4      	ldr	r4, [r4, #12]
        off = 0;
    a726:	2100      	movs	r1, #0
    while (len > 0 && m != NULL) {
    a728:	2e00      	cmp	r6, #0
    a72a:	dd01      	ble.n	a730 <os_mbuf_copydata+0x46>
    a72c:	2c00      	cmp	r4, #0
    a72e:	d1ec      	bne.n	a70a <os_mbuf_copydata+0x20>
    }

    return (len > 0 ? -1 : 0);
    a730:	2e00      	cmp	r6, #0
    a732:	dc01      	bgt.n	a738 <os_mbuf_copydata+0x4e>
    a734:	2000      	movs	r0, #0
}
    a736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (len > 0 ? -1 : 0);
    a738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a73c:	e7fb      	b.n	a736 <os_mbuf_copydata+0x4c>
            return (-1);
    a73e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a742:	e7f8      	b.n	a736 <os_mbuf_copydata+0x4c>

0000a744 <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
    a744:	2800      	cmp	r0, #0
    a746:	d053      	beq.n	a7f0 <os_mbuf_adj+0xac>
{
    a748:	b510      	push	{r4, lr}
    a74a:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
    a74c:	2900      	cmp	r1, #0
    a74e:	db1b      	blt.n	a788 <os_mbuf_adj+0x44>
    if ((m = mp) == NULL)
    a750:	4603      	mov	r3, r0
    int len = req_len;
    a752:	460a      	mov	r2, r1
    a754:	e005      	b.n	a762 <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
    a756:	1a80      	subs	r0, r0, r2
    a758:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
    a75a:	6818      	ldr	r0, [r3, #0]
    a75c:	4402      	add	r2, r0
    a75e:	601a      	str	r2, [r3, #0]
                len = 0;
    a760:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
    a762:	b14b      	cbz	r3, a778 <os_mbuf_adj+0x34>
    a764:	2a00      	cmp	r2, #0
    a766:	dd07      	ble.n	a778 <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
    a768:	88d8      	ldrh	r0, [r3, #6]
    a76a:	4290      	cmp	r0, r2
    a76c:	dcf3      	bgt.n	a756 <os_mbuf_adj+0x12>
                len -= m->om_len;
    a76e:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
    a770:	2000      	movs	r0, #0
    a772:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
    a774:	68db      	ldr	r3, [r3, #12]
    a776:	e7f4      	b.n	a762 <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
    a778:	7963      	ldrb	r3, [r4, #5]
    a77a:	2b07      	cmp	r3, #7
    a77c:	d903      	bls.n	a786 <os_mbuf_adj+0x42>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
    a77e:	1a52      	subs	r2, r2, r1
    a780:	8a23      	ldrh	r3, [r4, #16]
    a782:	441a      	add	r2, r3
    a784:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
    a786:	bd10      	pop	{r4, pc}
        len = -len;
    a788:	f1c1 0e00 	rsb	lr, r1, #0
    if ((m = mp) == NULL)
    a78c:	4603      	mov	r3, r0
        count = 0;
    a78e:	2200      	movs	r2, #0
            count += m->om_len;
    a790:	88d8      	ldrh	r0, [r3, #6]
    a792:	4402      	add	r2, r0
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
    a794:	469c      	mov	ip, r3
    a796:	68db      	ldr	r3, [r3, #12]
    a798:	2b00      	cmp	r3, #0
    a79a:	d1f9      	bne.n	a790 <os_mbuf_adj+0x4c>
        if (m->om_len >= len) {
    a79c:	4570      	cmp	r0, lr
    a79e:	da0d      	bge.n	a7bc <os_mbuf_adj+0x78>
        if (count < 0)
    a7a0:	188a      	adds	r2, r1, r2
    a7a2:	d41a      	bmi.n	a7da <os_mbuf_adj+0x96>
        if (OS_MBUF_IS_PKTHDR(m))
    a7a4:	7963      	ldrb	r3, [r4, #5]
    a7a6:	2b07      	cmp	r3, #7
    a7a8:	d900      	bls.n	a7ac <os_mbuf_adj+0x68>
            OS_MBUF_PKTHDR(m)->omp_len = count;
    a7aa:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
    a7ac:	2c00      	cmp	r4, #0
    a7ae:	d0ea      	beq.n	a786 <os_mbuf_adj+0x42>
            if (m->om_len >= count) {
    a7b0:	88e3      	ldrh	r3, [r4, #6]
    a7b2:	4293      	cmp	r3, r2
    a7b4:	da13      	bge.n	a7de <os_mbuf_adj+0x9a>
            count -= m->om_len;
    a7b6:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
    a7b8:	68e4      	ldr	r4, [r4, #12]
    a7ba:	e7f7      	b.n	a7ac <os_mbuf_adj+0x68>
            m->om_len -= len;
    a7bc:	fa1f fe8e 	uxth.w	lr, lr
    a7c0:	eba0 000e 	sub.w	r0, r0, lr
    a7c4:	f8ac 0006 	strh.w	r0, [ip, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
    a7c8:	7963      	ldrb	r3, [r4, #5]
    a7ca:	2b07      	cmp	r3, #7
    a7cc:	d9db      	bls.n	a786 <os_mbuf_adj+0x42>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
    a7ce:	8a23      	ldrh	r3, [r4, #16]
    a7d0:	eba3 0e0e 	sub.w	lr, r3, lr
    a7d4:	f8a4 e010 	strh.w	lr, [r4, #16]
            return;
    a7d8:	e7d5      	b.n	a786 <os_mbuf_adj+0x42>
            count = 0;
    a7da:	2200      	movs	r2, #0
    a7dc:	e7e2      	b.n	a7a4 <os_mbuf_adj+0x60>
                m->om_len = count;
    a7de:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
    a7e0:	68e0      	ldr	r0, [r4, #12]
    a7e2:	2800      	cmp	r0, #0
    a7e4:	d0cf      	beq.n	a786 <os_mbuf_adj+0x42>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
    a7e6:	f7ff ff0a 	bl	a5fe <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
    a7ea:	2300      	movs	r3, #0
    a7ec:	60e3      	str	r3, [r4, #12]
    a7ee:	e7ca      	b.n	a786 <os_mbuf_adj+0x42>
    a7f0:	4770      	bx	lr

0000a7f2 <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
    a7f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7f6:	b082      	sub	sp, #8
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
    a7f8:	1e1e      	subs	r6, r3, #0
    a7fa:	dd2d      	ble.n	a858 <os_mbuf_cmpf+0x66>
    a7fc:	4617      	mov	r7, r2
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
    a7fe:	f10d 0206 	add.w	r2, sp, #6
    a802:	f7ff ff60 	bl	a6c6 <os_mbuf_off>
    a806:	4604      	mov	r4, r0
    data_off = 0;
    a808:	f04f 0800 	mov.w	r8, #0
    a80c:	e009      	b.n	a822 <os_mbuf_cmpf+0x30>
            if (rc != 0) {
                return rc;
            }
        }

        data_off += chunk_sz;
    a80e:	4445      	add	r5, r8
    a810:	fa1f f885 	uxth.w	r8, r5
        if (data_off == len) {
    a814:	45b0      	cmp	r8, r6
    a816:	d027      	beq.n	a868 <os_mbuf_cmpf+0x76>
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
    a818:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
    a81a:	2300      	movs	r3, #0
    a81c:	f8ad 3006 	strh.w	r3, [sp, #6]

        if (om == NULL) {
    a820:	b1bc      	cbz	r4, a852 <os_mbuf_cmpf+0x60>
        if (om == NULL) {
    a822:	b1f4      	cbz	r4, a862 <os_mbuf_cmpf+0x70>
        chunk_sz = min(om->om_len - om_off, len - data_off);
    a824:	eba6 0208 	sub.w	r2, r6, r8
    a828:	88e3      	ldrh	r3, [r4, #6]
    a82a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a82e:	1a1b      	subs	r3, r3, r0
    a830:	429a      	cmp	r2, r3
    a832:	bfa8      	it	ge
    a834:	461a      	movge	r2, r3
    a836:	b295      	uxth	r5, r2
        if (chunk_sz > 0) {
    a838:	2d00      	cmp	r5, #0
    a83a:	d0e8      	beq.n	a80e <os_mbuf_cmpf+0x1c>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
    a83c:	6823      	ldr	r3, [r4, #0]
    a83e:	462a      	mov	r2, r5
    a840:	eb07 0108 	add.w	r1, r7, r8
    a844:	4418      	add	r0, r3
    a846:	f001 fbf1 	bl	c02c <memcmp>
            if (rc != 0) {
    a84a:	4603      	mov	r3, r0
    a84c:	2800      	cmp	r0, #0
    a84e:	d0de      	beq.n	a80e <os_mbuf_cmpf+0x1c>
    a850:	e003      	b.n	a85a <os_mbuf_cmpf+0x68>
            return INT_MAX;
    a852:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    a856:	e000      	b.n	a85a <os_mbuf_cmpf+0x68>
        return 0;
    a858:	2300      	movs	r3, #0
        }
    }
}
    a85a:	4618      	mov	r0, r3
    a85c:	b002      	add	sp, #8
    a85e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return INT_MAX;
    a862:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    a866:	e7f8      	b.n	a85a <os_mbuf_cmpf+0x68>
            return 0;
    a868:	2300      	movs	r3, #0
    a86a:	e7f6      	b.n	a85a <os_mbuf_cmpf+0x68>

0000a86c <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
    a86c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a870:	b083      	sub	sp, #12
    a872:	4681      	mov	r9, r0
    a874:	4688      	mov	r8, r1
    a876:	4617      	mov	r7, r2
    a878:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
    a87a:	f10d 0206 	add.w	r2, sp, #6
    a87e:	f7ff ff22 	bl	a6c6 <os_mbuf_off>
    if (cur == NULL) {
    a882:	4605      	mov	r5, r0
    a884:	b948      	cbnz	r0, a89a <os_mbuf_copyinto+0x2e>
        return -1;
    a886:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    a88a:	e02d      	b.n	a8e8 <os_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
    a88c:	b366      	cbz	r6, a8e8 <os_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
    a88e:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
    a890:	b1ab      	cbz	r3, a8be <os_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
    a892:	2200      	movs	r2, #0
    a894:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
    a898:	461d      	mov	r5, r3
        copylen = min(cur->om_len - cur_off, len);
    a89a:	88ec      	ldrh	r4, [r5, #6]
    a89c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a8a0:	1ae4      	subs	r4, r4, r3
    a8a2:	42b4      	cmp	r4, r6
    a8a4:	bfa8      	it	ge
    a8a6:	4634      	movge	r4, r6
        if (copylen > 0) {
    a8a8:	2c00      	cmp	r4, #0
    a8aa:	ddef      	ble.n	a88c <os_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
    a8ac:	6828      	ldr	r0, [r5, #0]
    a8ae:	4622      	mov	r2, r4
    a8b0:	4639      	mov	r1, r7
    a8b2:	4418      	add	r0, r3
    a8b4:	f001 fbde 	bl	c074 <memcpy>
            sptr += copylen;
    a8b8:	4427      	add	r7, r4
            len -= copylen;
    a8ba:	1b36      	subs	r6, r6, r4
            copylen = 0;
    a8bc:	e7e6      	b.n	a88c <os_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = os_mbuf_append(cur, sptr, len);
    a8be:	b2b2      	uxth	r2, r6
    a8c0:	4639      	mov	r1, r7
    a8c2:	4628      	mov	r0, r5
    a8c4:	f7ff feab 	bl	a61e <os_mbuf_append>
    if (rc != 0) {
    a8c8:	b968      	cbnz	r0, a8e6 <os_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (OS_MBUF_IS_PKTHDR(om)) {
    a8ca:	f899 2005 	ldrb.w	r2, [r9, #5]
    a8ce:	2a07      	cmp	r2, #7
    a8d0:	d90e      	bls.n	a8f0 <os_mbuf_copyinto+0x84>
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
    a8d2:	4446      	add	r6, r8
    a8d4:	f8b9 8010 	ldrh.w	r8, [r9, #16]
    a8d8:	4546      	cmp	r6, r8
    a8da:	bfb8      	it	lt
    a8dc:	4646      	movlt	r6, r8
        OS_MBUF_PKTHDR(om)->omp_len =
    a8de:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
    a8e2:	4606      	mov	r6, r0
    a8e4:	e000      	b.n	a8e8 <os_mbuf_copyinto+0x7c>
        return rc;
    a8e6:	4606      	mov	r6, r0
}
    a8e8:	4630      	mov	r0, r6
    a8ea:	b003      	add	sp, #12
    a8ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
    a8f0:	4606      	mov	r6, r0
    a8f2:	e7f9      	b.n	a8e8 <os_mbuf_copyinto+0x7c>

0000a8f4 <os_mbuf_extend>:
    second->om_pkthdr_len = 0;
}

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
    a8f4:	b570      	push	{r4, r5, r6, lr}
    a8f6:	4606      	mov	r6, r0
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
    a8f8:	6880      	ldr	r0, [r0, #8]
    a8fa:	8803      	ldrh	r3, [r0, #0]
    a8fc:	428b      	cmp	r3, r1
    a8fe:	d325      	bcc.n	a94c <os_mbuf_extend+0x58>
    a900:	460d      	mov	r5, r1
        return NULL;
    }

    /* Scroll to last mbuf in the chain */
    last = om;
    a902:	4633      	mov	r3, r6
    while (SLIST_NEXT(last, om_next) != NULL) {
    a904:	461c      	mov	r4, r3
    a906:	68db      	ldr	r3, [r3, #12]
    a908:	2b00      	cmp	r3, #0
    a90a:	d1fb      	bne.n	a904 <os_mbuf_extend+0x10>
    omp = om->om_omp;
    a90c:	68a2      	ldr	r2, [r4, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a90e:	f104 0310 	add.w	r3, r4, #16
    a912:	8812      	ldrh	r2, [r2, #0]
    a914:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    a916:	6822      	ldr	r2, [r4, #0]
    a918:	88e1      	ldrh	r1, [r4, #6]
    a91a:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a91c:	1a9b      	subs	r3, r3, r2
    a91e:	b29b      	uxth	r3, r3
        last = SLIST_NEXT(last, om_next);
    }

    if (OS_MBUF_TRAILINGSPACE(last) < len) {
    a920:	429d      	cmp	r5, r3
    a922:	d80b      	bhi.n	a93c <os_mbuf_extend+0x48>

        SLIST_NEXT(last, om_next) = newm;
        last = newm;
    }

    data = last->om_data + last->om_len;
    a924:	6820      	ldr	r0, [r4, #0]
    a926:	88e3      	ldrh	r3, [r4, #6]
    a928:	4418      	add	r0, r3
    last->om_len += len;
    a92a:	442b      	add	r3, r5
    a92c:	80e3      	strh	r3, [r4, #6]

    if (OS_MBUF_IS_PKTHDR(om)) {
    a92e:	7973      	ldrb	r3, [r6, #5]
    a930:	2b07      	cmp	r3, #7
    a932:	d902      	bls.n	a93a <os_mbuf_extend+0x46>
        OS_MBUF_PKTHDR(om)->omp_len += len;
    a934:	8a33      	ldrh	r3, [r6, #16]
    a936:	441d      	add	r5, r3
    a938:	8235      	strh	r5, [r6, #16]
    }

    return data;
}
    a93a:	bd70      	pop	{r4, r5, r6, pc}
        newm = os_mbuf_get(om->om_omp, 0);
    a93c:	2100      	movs	r1, #0
    a93e:	f7ff fe24 	bl	a58a <os_mbuf_get>
        if (newm == NULL) {
    a942:	2800      	cmp	r0, #0
    a944:	d0f9      	beq.n	a93a <os_mbuf_extend+0x46>
        SLIST_NEXT(last, om_next) = newm;
    a946:	60e0      	str	r0, [r4, #12]
        last = newm;
    a948:	4604      	mov	r4, r0
    a94a:	e7eb      	b.n	a924 <os_mbuf_extend+0x30>
        return NULL;
    a94c:	2000      	movs	r0, #0
    a94e:	e7f4      	b.n	a93a <os_mbuf_extend+0x46>

0000a950 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    a950:	4603      	mov	r3, r0
    a952:	b128      	cbz	r0, a960 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    a954:	2000      	movs	r0, #0
    a956:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
    a958:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
    a95a:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    a95c:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
    a95e:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    a960:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    a962:	4770      	bx	lr

0000a964 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
    a964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
    a966:	4b2c      	ldr	r3, [pc, #176]	; (aa18 <os_mutex_release+0xb4>)
    a968:	681b      	ldr	r3, [r3, #0]
    a96a:	2b00      	cmp	r3, #0
    a96c:	d04b      	beq.n	aa06 <os_mutex_release+0xa2>
    a96e:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    a970:	2800      	cmp	r0, #0
    a972:	d04a      	beq.n	aa0a <os_mutex_release+0xa6>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
    a974:	f7ff f8bc 	bl	9af0 <os_sched_get_current_task>
    a978:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
    a97a:	88e3      	ldrh	r3, [r4, #6]
    a97c:	2b00      	cmp	r3, #0
    a97e:	d046      	beq.n	aa0e <os_mutex_release+0xaa>
    a980:	68a2      	ldr	r2, [r4, #8]
    a982:	4282      	cmp	r2, r0
    a984:	d145      	bne.n	aa12 <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
    a986:	2b01      	cmp	r3, #1
    a988:	d003      	beq.n	a992 <os_mutex_release+0x2e>
        --mu->mu_level;
    a98a:	3b01      	subs	r3, #1
    a98c:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    a98e:	2000      	movs	r0, #0
        goto done;
    a990:	e03a      	b.n	aa08 <os_mutex_release+0xa4>
    }

    OS_ENTER_CRITICAL(sr);
    a992:	f7ff fce9 	bl	a368 <os_arch_save_sr>
    a996:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
    a998:	88e3      	ldrh	r3, [r4, #6]
    a99a:	3b01      	subs	r3, #1
    a99c:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
    a99e:	7aea      	ldrb	r2, [r5, #11]
    a9a0:	7963      	ldrb	r3, [r4, #5]
    a9a2:	429a      	cmp	r2, r3
    a9a4:	d11e      	bne.n	a9e4 <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
    a9a6:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
    a9a8:	b146      	cbz	r6, a9bc <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
    a9aa:	69f3      	ldr	r3, [r6, #28]
    a9ac:	b1fb      	cbz	r3, a9ee <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
    a9ae:	4630      	mov	r0, r6
    a9b0:	f7ff f934 	bl	9c1c <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
    a9b4:	2301      	movs	r3, #1
    a9b6:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
    a9b8:	7af3      	ldrb	r3, [r6, #11]
    a9ba:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
    a9bc:	60a6      	str	r6, [r4, #8]
    if (rdy) {
    a9be:	b116      	cbz	r6, a9c6 <os_mutex_release+0x62>
        rdy->t_lockcnt++;
    a9c0:	7bb3      	ldrb	r3, [r6, #14]
    a9c2:	3301      	adds	r3, #1
    a9c4:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
    a9c6:	7bab      	ldrb	r3, [r5, #14]
    a9c8:	3b01      	subs	r3, #1
    a9ca:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
    a9cc:	f7ff f99e 	bl	9d0c <os_sched_next_task>
    a9d0:	4604      	mov	r4, r0
    if (rdy != current) {
    a9d2:	4285      	cmp	r5, r0
    a9d4:	d010      	beq.n	a9f8 <os_mutex_release+0x94>
        resched = 1;
    a9d6:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
    a9d8:	4638      	mov	r0, r7
    a9da:	f7ff fccb 	bl	a374 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    a9de:	b96d      	cbnz	r5, a9fc <os_mutex_release+0x98>
        os_sched(rdy);
    }

    ret = OS_OK;
    a9e0:	2000      	movs	r0, #0
    a9e2:	e011      	b.n	aa08 <os_mutex_release+0xa4>
        current->t_prio = mu->mu_prio;
    a9e4:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
    a9e6:	4628      	mov	r0, r5
    a9e8:	f7ff f9a8 	bl	9d3c <os_sched_resort>
    a9ec:	e7db      	b.n	a9a6 <os_mutex_release+0x42>
        assert(rdy->t_obj);
    a9ee:	461a      	mov	r2, r3
    a9f0:	4619      	mov	r1, r3
    a9f2:	4618      	mov	r0, r3
    a9f4:	f7fe faae 	bl	8f54 <__assert_func>
    resched = 0;
    a9f8:	2500      	movs	r5, #0
    a9fa:	e7ed      	b.n	a9d8 <os_mutex_release+0x74>
        os_sched(rdy);
    a9fc:	4620      	mov	r0, r4
    a9fe:	f7ff f98b 	bl	9d18 <os_sched>
    ret = OS_OK;
    aa02:	2000      	movs	r0, #0
    aa04:	e000      	b.n	aa08 <os_mutex_release+0xa4>
        ret = OS_NOT_STARTED;
    aa06:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
    aa08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
    aa0a:	2003      	movs	r0, #3
    aa0c:	e7fc      	b.n	aa08 <os_mutex_release+0xa4>
        ret = OS_BAD_MUTEX;
    aa0e:	2005      	movs	r0, #5
    aa10:	e7fa      	b.n	aa08 <os_mutex_release+0xa4>
    aa12:	2005      	movs	r0, #5
    aa14:	e7f8      	b.n	aa08 <os_mutex_release+0xa4>
    aa16:	bf00      	nop
    aa18:	20004288 	.word	0x20004288

0000aa1c <os_mutex_pend>:

os_error_t
os_mutex_pend(struct os_mutex *mu, os_time_t timeout)
{
    aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
    aa1e:	4b36      	ldr	r3, [pc, #216]	; (aaf8 <os_mutex_pend+0xdc>)
    aa20:	681b      	ldr	r3, [r3, #0]
    aa22:	2b00      	cmp	r3, #0
    aa24:	d063      	beq.n	aaee <os_mutex_pend+0xd2>
    aa26:	4605      	mov	r5, r0
    aa28:	460e      	mov	r6, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    aa2a:	2800      	cmp	r0, #0
    aa2c:	d061      	beq.n	aaf2 <os_mutex_pend+0xd6>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
    aa2e:	f7ff fc9b 	bl	a368 <os_arch_save_sr>
    aa32:	4607      	mov	r7, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
    aa34:	f7ff f85c 	bl	9af0 <os_sched_get_current_task>
    aa38:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
    aa3a:	88ea      	ldrh	r2, [r5, #6]
    aa3c:	b1a2      	cbz	r2, aa68 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
    aa3e:	68ab      	ldr	r3, [r5, #8]
    aa40:	4283      	cmp	r3, r0
    aa42:	d01e      	beq.n	aa82 <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
    aa44:	b326      	cbz	r6, aa90 <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
    aa46:	7ad9      	ldrb	r1, [r3, #11]
    aa48:	7ac2      	ldrb	r2, [r0, #11]
    aa4a:	4291      	cmp	r1, r2
    aa4c:	d825      	bhi.n	aa9a <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
    aa4e:	6828      	ldr	r0, [r5, #0]
    aa50:	b368      	cbz	r0, aaae <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    aa52:	4603      	mov	r3, r0
    last = NULL;
    aa54:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    aa56:	b32b      	cbz	r3, aaa4 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
    aa58:	f894 c00b 	ldrb.w	ip, [r4, #11]
    aa5c:	7ada      	ldrb	r2, [r3, #11]
    aa5e:	4594      	cmp	ip, r2
    aa60:	d320      	bcc.n	aaa4 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
    aa62:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    aa64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    aa66:	e7f6      	b.n	aa56 <os_mutex_pend+0x3a>
        mu->mu_owner = current;
    aa68:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
    aa6a:	7ac3      	ldrb	r3, [r0, #11]
    aa6c:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
    aa6e:	7b83      	ldrb	r3, [r0, #14]
    aa70:	3301      	adds	r3, #1
    aa72:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
    aa74:	2301      	movs	r3, #1
    aa76:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
    aa78:	4638      	mov	r0, r7
    aa7a:	f7ff fc7b 	bl	a374 <os_arch_restore_sr>
        ret = OS_OK;
    aa7e:	2000      	movs	r0, #0
        goto done;
    aa80:	e032      	b.n	aae8 <os_mutex_pend+0xcc>
        ++mu->mu_level;
    aa82:	3201      	adds	r2, #1
    aa84:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
    aa86:	4638      	mov	r0, r7
    aa88:	f7ff fc74 	bl	a374 <os_arch_restore_sr>
        ret = OS_OK;
    aa8c:	2000      	movs	r0, #0
        goto done;
    aa8e:	e02b      	b.n	aae8 <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
    aa90:	4638      	mov	r0, r7
    aa92:	f7ff fc6f 	bl	a374 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
    aa96:	2006      	movs	r0, #6
        goto done;
    aa98:	e026      	b.n	aae8 <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
    aa9a:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
    aa9c:	68a8      	ldr	r0, [r5, #8]
    aa9e:	f7ff f94d 	bl	9d3c <os_sched_resort>
    aaa2:	e7d4      	b.n	aa4e <os_mutex_pend+0x32>
        }
    }

    if (last) {
    aaa4:	b119      	cbz	r1, aaae <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
    aaa6:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    aaa8:	64e3      	str	r3, [r4, #76]	; 0x4c
    aaaa:	64cc      	str	r4, [r1, #76]	; 0x4c
    aaac:	e001      	b.n	aab2 <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
    aaae:	64e0      	str	r0, [r4, #76]	; 0x4c
    aab0:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
    aab2:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
    aab4:	7b63      	ldrb	r3, [r4, #13]
    aab6:	f043 0304 	orr.w	r3, r3, #4
    aaba:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
    aabc:	4631      	mov	r1, r6
    aabe:	4620      	mov	r0, r4
    aac0:	f7ff f822 	bl	9b08 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
    aac4:	4638      	mov	r0, r7
    aac6:	f7ff fc55 	bl	a374 <os_arch_restore_sr>

    os_sched(NULL);
    aaca:	2000      	movs	r0, #0
    aacc:	f7ff f924 	bl	9d18 <os_sched>

    OS_ENTER_CRITICAL(sr);
    aad0:	f7ff fc4a 	bl	a368 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
    aad4:	7b63      	ldrb	r3, [r4, #13]
    aad6:	f023 0304 	bic.w	r3, r3, #4
    aada:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
    aadc:	f7ff fc4a 	bl	a374 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
    aae0:	68ab      	ldr	r3, [r5, #8]
    aae2:	42a3      	cmp	r3, r4
    aae4:	d001      	beq.n	aaea <os_mutex_pend+0xce>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
    aae6:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
    aae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_OK;
    aaea:	2000      	movs	r0, #0
    aaec:	e7fc      	b.n	aae8 <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
    aaee:	2009      	movs	r0, #9
    aaf0:	e7fa      	b.n	aae8 <os_mutex_pend+0xcc>
        ret = OS_INVALID_PARM;
    aaf2:	2003      	movs	r0, #3
    aaf4:	e7f8      	b.n	aae8 <os_mutex_pend+0xcc>
    aaf6:	bf00      	nop
    aaf8:	20004288 	.word	0x20004288

0000aafc <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    aafc:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    ab00:	4832      	ldr	r0, [pc, #200]	; (abcc <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    ab02:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    ab04:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    ab06:	f380 8814 	msr	CONTROL, r0
        ISB
    ab0a:	f3bf 8f6f 	isb	sy
        BX      LR
    ab0e:	4770      	bx	lr

0000ab10 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    ab10:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    ab14:	4770      	bx	lr

0000ab16 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    ab16:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    ab1a:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    ab1c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    ab20:	b951      	cbnz	r1, ab38 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    ab22:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    ab26:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    ab28:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    ab2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    ab2e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    ab32:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    ab36:	4770      	bx	lr

0000ab38 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    ab38:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    ab3a:	4a25      	ldr	r2, [pc, #148]	; (abd0 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    ab3c:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    ab3e:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    ab40:	d809      	bhi.n	ab56 <SVC_Done>

        LDR     R4,=SVC_Table-4
    ab42:	4c24      	ldr	r4, [pc, #144]	; (abd4 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    ab44:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    ab48:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    ab4c:	47a0      	blx	r4

        MRS     R12,PSP
    ab4e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    ab52:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000ab56 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    ab56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    ab5a:	4770      	bx	lr

0000ab5c <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    ab5c:	4b1e      	ldr	r3, [pc, #120]	; (abd8 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    ab5e:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    ab60:	4b1e      	ldr	r3, [pc, #120]	; (abdc <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    ab62:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    ab64:	4291      	cmp	r1, r2
        IT      EQ
    ab66:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    ab68:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    ab6a:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
    ab6e:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
    ab72:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
    ab74:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
    ab78:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    ab7c:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    ab80:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    ab82:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
    ab86:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
    ab8a:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
    ab8e:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
    ab90:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
    ab94:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
    ab98:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
    ab9c:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    aba0:	4770      	bx	lr

0000aba2 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    aba2:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    aba4:	f7ff fbd0 	bl	a348 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    aba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    abac:	4770      	bx	lr

0000abae <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    abae:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    abb2:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    abb4:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    abb8:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    abbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    abc0:	4668      	mov	r0, sp
        BL      os_default_irq
    abc2:	f7fe f9ed 	bl	8fa0 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    abc6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    abca:	4770      	bx	lr
        LDR     R0,=os_flags
    abcc:	200050e4 	.word	0x200050e4
        LDR     R2,=SVC_Count
    abd0:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    abd4:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    abd8:	200000f0 	.word	0x200000f0
        LDR     R3,=g_current_task      /* Get current task */
    abdc:	2000509c 	.word	0x2000509c

0000abe0 <reset_cb>:
 *
 * @return true on sucess
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    abe0:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    abe2:	684c      	ldr	r4, [r1, #4]
    abe4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    if(dpl_sem_get_count(&rng->sem) == 0){
    abe8:	b10b      	cbz	r3, abee <reset_cb+0xe>
        rng->status.rx_ack_expected = 0;
        rng->status.tx_ack_expected = 0;
        return true;
    }
    else
        return false;
    abea:	2000      	movs	r0, #0
}
    abec:	bd10      	pop	{r4, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
    abee:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    abf2:	f7ff f8c1 	bl	9d78 <os_sem_release>
        assert(err == DPL_OK);
    abf6:	b978      	cbnz	r0, ac18 <reset_cb+0x38>
        RNG_STATS_INC(reset);
    abf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    abfa:	3301      	adds	r3, #1
    abfc:	6423      	str	r3, [r4, #64]	; 0x40
        rng->status.rx_ack_expected = 0;
    abfe:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
    ac02:	f36f 1345 	bfc	r3, #5, #1
    ac06:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        rng->status.tx_ack_expected = 0;
    ac0a:	b2db      	uxtb	r3, r3
    ac0c:	f36f 1304 	bfc	r3, #4, #1
    ac10:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        return true;
    ac14:	2001      	movs	r0, #1
    ac16:	e7e9      	b.n	abec <reset_cb+0xc>
        assert(err == DPL_OK);
    ac18:	2300      	movs	r3, #0
    ac1a:	461a      	mov	r2, r3
    ac1c:	4619      	mov	r1, r3
    ac1e:	4618      	mov	r0, r3
    ac20:	f7fe f998 	bl	8f54 <__assert_func>

0000ac24 <rx_timeout_cb>:
{
    ac24:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    ac26:	684c      	ldr	r4, [r1, #4]
    ac28:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    if(dpl_sem_get_count(&rng->sem) == 1)
    ac2c:	2b01      	cmp	r3, #1
    ac2e:	d01a      	beq.n	ac66 <rx_timeout_cb+0x42>
    if(dpl_sem_get_count(&rng->sem) == 0){
    ac30:	b10b      	cbz	r3, ac36 <rx_timeout_cb+0x12>
    return false;
    ac32:	2000      	movs	r0, #0
}
    ac34:	bd10      	pop	{r4, pc}
    ac36:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    ac3a:	f7ff f89d 	bl	9d78 <os_sem_release>
        assert(err == DPL_OK);
    ac3e:	b960      	cbnz	r0, ac5a <rx_timeout_cb+0x36>
        RNG_STATS_INC(rx_timeout);
    ac40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ac42:	3301      	adds	r3, #1
    ac44:	63a3      	str	r3, [r4, #56]	; 0x38
        switch(rng->code){
    ac46:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
    ac4a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
    ac4e:	2a18      	cmp	r2, #24
    ac50:	d80b      	bhi.n	ac6a <rx_timeout_cb+0x46>
                    RNG_STATS_INC(rx_timeout);
    ac52:	3301      	adds	r3, #1
    ac54:	63a3      	str	r3, [r4, #56]	; 0x38
                    return true;
    ac56:	2001      	movs	r0, #1
    ac58:	e7ec      	b.n	ac34 <rx_timeout_cb+0x10>
        assert(err == DPL_OK);
    ac5a:	2300      	movs	r3, #0
    ac5c:	461a      	mov	r2, r3
    ac5e:	4619      	mov	r1, r3
    ac60:	4618      	mov	r0, r3
    ac62:	f7fe f977 	bl	8f54 <__assert_func>
        return false;
    ac66:	2000      	movs	r0, #0
    ac68:	e7e4      	b.n	ac34 <rx_timeout_cb+0x10>
                return false;
    ac6a:	2000      	movs	r0, #0
    ac6c:	e7e2      	b.n	ac34 <rx_timeout_cb+0x10>
	...

0000ac70 <superframe_reset_cb>:
 *
 * @return true on sucess
 */
static bool
superframe_reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    ac70:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    ac72:	684c      	ldr	r4, [r1, #4]
    ac74:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    if(dpl_sem_get_count(&rng->sem) == 0){
    ac78:	b10b      	cbz	r3, ac7e <superframe_reset_cb+0xe>
               dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
        rng->status.rx_ack_expected = 0;
        rng->status.tx_ack_expected = 0;
    }
    return false;
}
    ac7a:	2000      	movs	r0, #0
    ac7c:	bd10      	pop	{r4, pc}
    ac7e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    ac82:	f7ff f879 	bl	9d78 <os_sem_release>
        assert(err == DPL_OK);
    ac86:	b9a0      	cbnz	r0, acb2 <superframe_reset_cb+0x42>
        RNG_STATS_INC(superframe_reset);
    ac88:	6c63      	ldr	r3, [r4, #68]	; 0x44
    ac8a:	3301      	adds	r3, #1
    ac8c:	6463      	str	r3, [r4, #68]	; 0x44
        printf("{\"utime\": %"PRIu32",\"msg\": \"superframe_reset\"}\n",
    ac8e:	f001 fe77 	bl	c980 <dpl_cputime_get32>
    ac92:	4601      	mov	r1, r0
    ac94:	480a      	ldr	r0, [pc, #40]	; (acc0 <superframe_reset_cb+0x50>)
    ac96:	f001 fe0d 	bl	c8b4 <printf>
        rng->status.rx_ack_expected = 0;
    ac9a:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
    ac9e:	f36f 1345 	bfc	r3, #5, #1
    aca2:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        rng->status.tx_ack_expected = 0;
    aca6:	b2db      	uxtb	r3, r3
    aca8:	f36f 1304 	bfc	r3, #4, #1
    acac:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    acb0:	e7e3      	b.n	ac7a <superframe_reset_cb+0xa>
        assert(err == DPL_OK);
    acb2:	2300      	movs	r3, #0
    acb4:	461a      	mov	r2, r3
    acb6:	4619      	mov	r1, r3
    acb8:	4618      	mov	r0, r3
    acba:	f7fe f94b 	bl	8f54 <__assert_func>
    acbe:	bf00      	nop
    acc0:	00021a40 	.word	0x00021a40

0000acc4 <complete_ev_cb>:
 *
 * @return true on sucess
 */
static void
complete_ev_cb(struct dpl_event *ev)
{
    acc4:	b508      	push	{r3, lr}
    acc6:	4603      	mov	r3, r0
    return ev->ev.ev_arg;
    acc8:	6880      	ldr	r0, [r0, #8]
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)dpl_event_get_arg(ev);
    assert(ev != NULL);
    acca:	b11b      	cbz	r3, acd4 <complete_ev_cb+0x10>
    assert(rng);
    accc:	b138      	cbz	r0, acde <complete_ev_cb+0x1a>
    rng_encode(rng);
    acce:	f000 fd97 	bl	b800 <rng_encode>
}
    acd2:	bd08      	pop	{r3, pc}
    assert(ev != NULL);
    acd4:	461a      	mov	r2, r3
    acd6:	4619      	mov	r1, r3
    acd8:	4618      	mov	r0, r3
    acda:	f7fe f93b 	bl	8f54 <__assert_func>
    assert(rng);
    acde:	2300      	movs	r3, #0
    ace0:	461a      	mov	r2, r3
    ace2:	4619      	mov	r1, r3
    ace4:	4618      	mov	r0, r3
    ace6:	f7fe f935 	bl	8f54 <__assert_func>
	...

0000acec <complete_cb>:
 *
 * @return true on sucess
 */
static bool
complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    acec:	b570      	push	{r4, r5, r6, lr}
    acee:	4604      	mov	r4, r0
    twr_frame_t * frame;
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    acf0:	684d      	ldr	r5, [r1, #4]
    RNG_STATS_INC(complete_cb);
    acf2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    acf4:	3301      	adds	r3, #1
    acf6:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
    acf8:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
    acfc:	f648 0241 	movw	r2, #34881	; 0x8841
    ad00:	4293      	cmp	r3, r2
    ad02:	d004      	beq.n	ad0e <complete_cb+0x22>
    ad04:	f648 0261 	movw	r2, #34913	; 0x8861
    ad08:	4293      	cmp	r3, r2
    ad0a:	f040 8082 	bne.w	ae12 <complete_cb+0x126>
        inst->fctrl != (FCNTL_IEEE_RANGE_16|UWB_FCTRL_ACK_REQUESTED))
        return false;

    /* Calculate Local results and diagnostics.
     * XXX TODO: Generalise antenna distance */
    rng->idx_current = (rng->idx)%rng->nframes;
    ad0e:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
    ad12:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
    ad16:	fbb3 f1f2 	udiv	r1, r3, r2
    ad1a:	fb02 3311 	mls	r3, r2, r1, r3
    ad1e:	b29b      	uxth	r3, r3
    ad20:	f8a5 3078 	strh.w	r3, [r5, #120]	; 0x78
    frame = rng->frames[rng->idx_current];
    ad24:	3326      	adds	r3, #38	; 0x26
    ad26:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    ad2a:	685e      	ldr	r6, [r3, #4]
    if (inst->capabilities.single_receiver_pdoa) {
    ad2c:	f894 34b2 	ldrb.w	r3, [r4, #1202]	; 0x4b2
    ad30:	f013 0f02 	tst.w	r3, #2
    ad34:	d01b      	beq.n	ad6e <complete_cb+0x82>
    return (dev->uw_funcs->uf_calc_pdoa(dev, diag));
    ad36:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ad38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    ad3c:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
    ad40:	4620      	mov	r0, r4
    ad42:	4798      	blx	r3
        dpl_float32_t tmp_pdoa = uwb_calc_pdoa(inst, inst->rxdiag);
        if (!DPL_FLOAT32_ISNAN(tmp_pdoa)) {
    ad44:	eeb4 0a40 	vcmp.f32	s0, s0
    ad48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ad4c:	d60f      	bvs.n	ad6e <complete_cb+0x82>
            frame->local.pdoa = tmp_pdoa;
    ad4e:	ed86 0a36 	vstr	s0, [r6, #216]	; 0xd8
            frame->local.spherical.azimuth = DPL_FLOAT64_FROM_F32(
    ad52:	f504 639a 	add.w	r3, r4, #1232	; 0x4d0
    ad56:	edd3 0a00 	vldr	s1, [r3]
    ad5a:	f894 050c 	ldrb.w	r0, [r4, #1292]	; 0x50c
    ad5e:	f7fd ff4b 	bl	8bf8 <uwb_calc_aoa>
    ad62:	ee10 0a10 	vmov	r0, s0
    ad66:	f014 fffb 	bl	1fd60 <__aeabi_f2d>
    ad6a:	e9c6 0124 	strd	r0, r1, [r6, #144]	; 0x90
                uwb_calc_aoa(frame->local.pdoa, inst->config.channel, inst->rx_ant_separation)
                );
        }
    }

    frame->local.vrssi[0] = DPL_FLOAT32_NAN();
    ad6e:	4b2a      	ldr	r3, [pc, #168]	; (ae18 <complete_cb+0x12c>)
    ad70:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
    return (dev->uw_funcs->uf_calc_rssi(dev, diag));
    ad74:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ad76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    ad7a:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
    ad7e:	4620      	mov	r0, r4
    ad80:	4798      	blx	r3
    frame->local.rssi = uwb_calc_rssi(inst, inst->rxdiag);
    ad82:	ed86 0a34 	vstr	s0, [r6, #208]	; 0xd0
    return (dev->uw_funcs->uf_calc_fppl(dev, diag));
    ad86:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ad88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
    ad8c:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
    ad90:	4620      	mov	r0, r4
    ad92:	4798      	blx	r3
    frame->local.fppl = uwb_calc_fppl(inst, inst->rxdiag);
    ad94:	ed86 0a35 	vstr	s0, [r6, #212]	; 0xd4

    if (inst->capabilities.sts) {
    ad98:	f894 34b2 	ldrb.w	r3, [r4, #1202]	; 0x4b2
    ad9c:	f013 0f01 	tst.w	r3, #1
    ada0:	d031      	beq.n	ae06 <complete_cb+0x11a>
        frame->local.flags.has_sts = inst->config.rx.stsMode != DWT_STS_MODE_OFF;
    ada2:	f894 3518 	ldrb.w	r3, [r4, #1304]	; 0x518
    ada6:	3b00      	subs	r3, #0
    ada8:	bf18      	it	ne
    adaa:	2301      	movne	r3, #1
    adac:	f896 20dc 	ldrb.w	r2, [r6, #220]	; 0xdc
    adb0:	f363 0200 	bfi	r2, r3, #0, #1
    adb4:	f886 20dc 	strb.w	r2, [r6, #220]	; 0xdc
        frame->local.flags.has_valid_sts = !(inst->status.sts_ts_error || inst->status.sts_pream_error);
    adb8:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    adbc:	f013 0f30 	tst.w	r3, #48	; 0x30
    adc0:	bf0c      	ite	eq
    adc2:	2201      	moveq	r2, #1
    adc4:	2200      	movne	r2, #0
    adc6:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
    adca:	f362 0341 	bfi	r3, r2, #1, #1
    adce:	f886 30dc 	strb.w	r3, [r6, #220]	; 0xdc
        frame->local.vrssi[0] = frame->local.rssi;
    add2:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
    add6:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
    return (dev->uw_funcs->uf_calc_seq_rssi(dev, diag, type));
    adda:	6a63      	ldr	r3, [r4, #36]	; 0x24
    addc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    ade0:	f44f 7200 	mov.w	r2, #512	; 0x200
    ade4:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
    ade8:	4620      	mov	r0, r4
    adea:	4798      	blx	r3
        frame->local.vrssi[1] = uwb_calc_seq_rssi(inst, inst->rxdiag, UWB_RXDIAG_STS);
    adec:	ed86 0a39 	vstr	s0, [r6, #228]	; 0xe4
    adf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    adf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    adf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    adfa:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
    adfe:	4620      	mov	r0, r4
    ae00:	4798      	blx	r3
        frame->local.vrssi[2] = uwb_calc_seq_rssi(inst, inst->rxdiag, UWB_RXDIAG_STS2);
    ae02:	ed86 0a3a 	vstr	s0, [r6, #232]	; 0xe8
    return (struct dpl_eventq *) os_eventq_dflt_get();
    ae06:	f7fe fc79 	bl	96fc <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    ae0a:	f105 0188 	add.w	r1, r5, #136	; 0x88
    ae0e:	f7fe fbc7 	bl	95a0 <os_eventq_put>
    }

    /* Postprocess in thread context */
    dpl_eventq_put(dpl_eventq_dflt_get(), &rng->complete_event);
    return false;
}
    ae12:	2000      	movs	r0, #0
    ae14:	bd70      	pop	{r4, r5, r6, pc}
    ae16:	bf00      	nop
    ae18:	7fc00000 	.word	0x7fc00000

0000ae1c <uwb_rng_free>:
{
    ae1c:	b508      	push	{r3, lr}
    assert(rng);
    ae1e:	b158      	cbz	r0, ae38 <uwb_rng_free+0x1c>
    if (rng->status.selfmalloc)
    ae20:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
    ae24:	f012 0f01 	tst.w	r2, #1
    ae28:	d10c      	bne.n	ae44 <uwb_rng_free+0x28>
        rng->status.initialized = 0;
    ae2a:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
    ae2e:	f36f 0241 	bfc	r2, #1, #1
    ae32:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72
}
    ae36:	bd08      	pop	{r3, pc}
    assert(rng);
    ae38:	2300      	movs	r3, #0
    ae3a:	461a      	mov	r2, r3
    ae3c:	4619      	mov	r1, r3
    ae3e:	4618      	mov	r0, r3
    ae40:	f7fe f888 	bl	8f54 <__assert_func>
        free(rng);
    ae44:	f001 f8dc 	bl	c000 <free>
    ae48:	e7f5      	b.n	ae36 <uwb_rng_free+0x1a>

0000ae4a <uwb_rng_config>:
uwb_rng_config(struct uwb_rng_instance * rng, struct uwb_rng_config * config){
    ae4a:	b508      	push	{r3, lr}
    assert(config);
    ae4c:	b171      	cbz	r1, ae6c <uwb_rng_config+0x22>
    ae4e:	460b      	mov	r3, r1
    memcpy(&rng->config, config, sizeof(struct uwb_rng_config));
    ae50:	f8d1 c000 	ldr.w	ip, [r1]
    ae54:	6849      	ldr	r1, [r1, #4]
    ae56:	689a      	ldr	r2, [r3, #8]
    ae58:	68db      	ldr	r3, [r3, #12]
    ae5a:	f8c0 c060 	str.w	ip, [r0, #96]	; 0x60
    ae5e:	6641      	str	r1, [r0, #100]	; 0x64
    ae60:	6682      	str	r2, [r0, #104]	; 0x68
    ae62:	66c3      	str	r3, [r0, #108]	; 0x6c
    return rng->dev_inst->status;
    ae64:	6803      	ldr	r3, [r0, #0]
}
    ae66:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    ae6a:	bd08      	pop	{r3, pc}
    assert(config);
    ae6c:	2300      	movs	r3, #0
    ae6e:	461a      	mov	r2, r3
    ae70:	4619      	mov	r1, r3
    ae72:	4618      	mov	r0, r3
    ae74:	f7fe f86e 	bl	8f54 <__assert_func>

0000ae78 <uwb_rng_init>:
{
    ae78:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae7a:	b083      	sub	sp, #12
    assert(dev);
    ae7c:	b3a0      	cbz	r0, aee8 <uwb_rng_init+0x70>
    ae7e:	460d      	mov	r5, r1
    ae80:	4616      	mov	r6, r2
    ae82:	4607      	mov	r7, r0
    rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_RNG);
    ae84:	2104      	movs	r1, #4
    ae86:	f7fd fe40 	bl	8b0a <uwb_mac_find_cb_inst_ptr>
    if (rng == NULL ) {
    ae8a:	4604      	mov	r4, r0
    ae8c:	b390      	cbz	r0, aef4 <uwb_rng_init+0x7c>
    rng->dev_inst = dev;
    ae8e:	4620      	mov	r0, r4
    ae90:	f840 7b4c 	str.w	r7, [r0], #76
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    ae94:	2101      	movs	r1, #1
    ae96:	f7fe ff67 	bl	9d68 <os_sem_init>
    assert(err == DPL_OK);
    ae9a:	2800      	cmp	r0, #0
    ae9c:	d141      	bne.n	af22 <uwb_rng_init+0xaa>
    if (config != NULL ) {
    ae9e:	b11d      	cbz	r5, aea8 <uwb_rng_init+0x30>
        uwb_rng_config(rng, config);
    aea0:	4629      	mov	r1, r5
    aea2:	4620      	mov	r0, r4
    aea4:	f7ff ffd1 	bl	ae4a <uwb_rng_config>
    rng->control = (uwb_rng_control_t){
    aea8:	2300      	movs	r3, #0
    aeaa:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    rng->idx = 0xFFFF;
    aeae:	f64f 73ff 	movw	r3, #65535	; 0xffff
    aeb2:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
    rng->status.initialized = 1;
    aeb6:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
    aeba:	f043 0302 	orr.w	r3, r3, #2
    aebe:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        int rc = stats_init(
    aec2:	1d25      	adds	r5, r4, #4
    aec4:	220c      	movs	r2, #12
    aec6:	9200      	str	r2, [sp, #0]
    aec8:	4b1c      	ldr	r3, [pc, #112]	; (af3c <uwb_rng_init+0xc4>)
    aeca:	2104      	movs	r1, #4
    aecc:	4628      	mov	r0, r5
    aece:	f004 fc2b 	bl	f728 <stats_init>
    aed2:	4606      	mov	r6, r0
        rc |= stats_register("rng", STATS_HDR(rng->stat));
    aed4:	4629      	mov	r1, r5
    aed6:	481a      	ldr	r0, [pc, #104]	; (af40 <uwb_rng_init+0xc8>)
    aed8:	f004 fcb0 	bl	f83c <stats_register>
        assert(rc == 0);
    aedc:	ea56 0300 	orrs.w	r3, r6, r0
    aee0:	d125      	bne.n	af2e <uwb_rng_init+0xb6>
}
    aee2:	4620      	mov	r0, r4
    aee4:	b003      	add	sp, #12
    aee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(dev);
    aee8:	2300      	movs	r3, #0
    aeea:	461a      	mov	r2, r3
    aeec:	4619      	mov	r1, r3
    aeee:	4618      	mov	r0, r3
    aef0:	f7fe f830 	bl	8f54 <__assert_func>
        rng = (struct uwb_rng_instance *) calloc(1, sizeof(*rng) + nframes * sizeof(twr_frame_t *));
    aef4:	f106 0128 	add.w	r1, r6, #40	; 0x28
    aef8:	0089      	lsls	r1, r1, #2
    aefa:	2001      	movs	r0, #1
    aefc:	f000 ff86 	bl	be0c <calloc>
        assert(rng);
    af00:	4604      	mov	r4, r0
    af02:	b140      	cbz	r0, af16 <uwb_rng_init+0x9e>
        rng->status.selfmalloc = 1;
    af04:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
    af08:	f043 0301 	orr.w	r3, r3, #1
    af0c:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
        rng->nframes = nframes;
    af10:	f8a0 607a 	strh.w	r6, [r0, #122]	; 0x7a
    af14:	e7bb      	b.n	ae8e <uwb_rng_init+0x16>
        assert(rng);
    af16:	2300      	movs	r3, #0
    af18:	461a      	mov	r2, r3
    af1a:	4619      	mov	r1, r3
    af1c:	4618      	mov	r0, r3
    af1e:	f7fe f819 	bl	8f54 <__assert_func>
    assert(err == DPL_OK);
    af22:	2300      	movs	r3, #0
    af24:	461a      	mov	r2, r3
    af26:	4619      	mov	r1, r3
    af28:	4618      	mov	r0, r3
    af2a:	f7fe f813 	bl	8f54 <__assert_func>
        assert(rc == 0);
    af2e:	2300      	movs	r3, #0
    af30:	461a      	mov	r2, r3
    af32:	4619      	mov	r1, r3
    af34:	4618      	mov	r0, r3
    af36:	f7fe f80d 	bl	8f54 <__assert_func>
    af3a:	bf00      	nop
    af3c:	00021b34 	.word	0x00021b34
    af40:	00021a6c 	.word	0x00021a6c

0000af44 <uwb_rng_get_config>:
    if(!(SLIST_EMPTY(&rng->rng_configs))){
    af44:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    af48:	b12b      	cbz	r3, af56 <uwb_rng_get_config+0x12>
        SLIST_FOREACH(cfgs, &rng->rng_configs, next){
    af4a:	b143      	cbz	r3, af5e <uwb_rng_get_config+0x1a>
            if (cfgs != NULL && cfgs->rng_code == code) {
    af4c:	881a      	ldrh	r2, [r3, #0]
    af4e:	428a      	cmp	r2, r1
    af50:	d003      	beq.n	af5a <uwb_rng_get_config+0x16>
        SLIST_FOREACH(cfgs, &rng->rng_configs, next){
    af52:	68db      	ldr	r3, [r3, #12]
    af54:	e7f9      	b.n	af4a <uwb_rng_get_config+0x6>
    return &g_config;
    af56:	4803      	ldr	r0, [pc, #12]	; (af64 <uwb_rng_get_config+0x20>)
    af58:	4770      	bx	lr
                return cfgs->config;
    af5a:	6898      	ldr	r0, [r3, #8]
    af5c:	4770      	bx	lr
    return &g_config;
    af5e:	4801      	ldr	r0, [pc, #4]	; (af64 <uwb_rng_get_config+0x20>)
}
    af60:	4770      	bx	lr
    af62:	bf00      	nop
    af64:	20000144 	.word	0x20000144

0000af68 <uwb_rng_append_config>:
{
    af68:	b508      	push	{r3, lr}
    assert(rng);
    af6a:	b120      	cbz	r0, af76 <uwb_rng_append_config+0xe>
    if(!(SLIST_EMPTY(&rng->rng_configs))) {
    af6c:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    af70:	b17b      	cbz	r3, af92 <uwb_rng_append_config+0x2a>
        struct rng_config_list * prev_cfgs = NULL;
    af72:	2200      	movs	r2, #0
    af74:	e007      	b.n	af86 <uwb_rng_append_config+0x1e>
    assert(rng);
    af76:	2300      	movs	r3, #0
    af78:	461a      	mov	r2, r3
    af7a:	4619      	mov	r1, r3
    af7c:	4618      	mov	r0, r3
    af7e:	f7fd ffe9 	bl	8f54 <__assert_func>
            prev_cfgs = cur_cfgs;
    af82:	461a      	mov	r2, r3
        SLIST_FOREACH(cur_cfgs, &rng->rng_configs, next){
    af84:	68db      	ldr	r3, [r3, #12]
    af86:	2b00      	cmp	r3, #0
    af88:	d1fb      	bne.n	af82 <uwb_rng_append_config+0x1a>
        SLIST_INSERT_AFTER(prev_cfgs, cfgs, next);
    af8a:	68d3      	ldr	r3, [r2, #12]
    af8c:	60cb      	str	r3, [r1, #12]
    af8e:	60d1      	str	r1, [r2, #12]
}
    af90:	bd08      	pop	{r3, pc}
        SLIST_INSERT_HEAD(&rng->rng_configs, cfgs, next);
    af92:	60cb      	str	r3, [r1, #12]
    af94:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
}
    af98:	e7fa      	b.n	af90 <uwb_rng_append_config+0x28>

0000af9a <uwb_rng_remove_config>:
{
    af9a:	b508      	push	{r3, lr}
    assert(rng);
    af9c:	b148      	cbz	r0, afb2 <uwb_rng_remove_config+0x18>
    af9e:	4684      	mov	ip, r0
    SLIST_FOREACH(cfgs, &rng->rng_configs, next){
    afa0:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    afa4:	4603      	mov	r3, r0
    afa6:	b193      	cbz	r3, afce <uwb_rng_remove_config+0x34>
        if(cfgs->rng_code == code){
    afa8:	881a      	ldrh	r2, [r3, #0]
    afaa:	428a      	cmp	r2, r1
    afac:	d007      	beq.n	afbe <uwb_rng_remove_config+0x24>
    SLIST_FOREACH(cfgs, &rng->rng_configs, next){
    afae:	68db      	ldr	r3, [r3, #12]
    afb0:	e7f9      	b.n	afa6 <uwb_rng_remove_config+0xc>
    assert(rng);
    afb2:	2300      	movs	r3, #0
    afb4:	461a      	mov	r2, r3
    afb6:	4619      	mov	r1, r3
    afb8:	4618      	mov	r0, r3
    afba:	f7fd ffcb 	bl	8f54 <__assert_func>
            SLIST_REMOVE(&rng->rng_configs, cfgs, rng_config_list, next);
    afbe:	4283      	cmp	r3, r0
    afc0:	d006      	beq.n	afd0 <uwb_rng_remove_config+0x36>
    afc2:	4602      	mov	r2, r0
    afc4:	68c0      	ldr	r0, [r0, #12]
    afc6:	4298      	cmp	r0, r3
    afc8:	d1fb      	bne.n	afc2 <uwb_rng_remove_config+0x28>
    afca:	68c3      	ldr	r3, [r0, #12]
    afcc:	60d3      	str	r3, [r2, #12]
}
    afce:	bd08      	pop	{r3, pc}
            SLIST_REMOVE(&rng->rng_configs, cfgs, rng_config_list, next);
    afd0:	68c3      	ldr	r3, [r0, #12]
    afd2:	f8cc 3098 	str.w	r3, [ip, #152]	; 0x98
    afd6:	e7fa      	b.n	afce <uwb_rng_remove_config+0x34>

0000afd8 <uwb_rng_calc_rel_tx>:
{
    afd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    afdc:	4605      	mov	r5, r0
    afde:	460c      	mov	r4, r1
    afe0:	4690      	mov	r8, r2
    afe2:	9f06      	ldr	r7, [sp, #24]
    afe4:	9e07      	ldr	r6, [sp, #28]
    uint16_t data_duration = uwb_usecs_to_dwt_usecs(uwb_phy_data_duration(rng->dev_inst, rx_data_len));
    afe6:	6800      	ldr	r0, [r0, #0]
    return (dev->uw_funcs->uf_phy_data_duration(dev, nlen));
    afe8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    afea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    afee:	f8bd 1020 	ldrh.w	r1, [sp, #32]
    aff2:	4798      	blx	r3
    aff4:	f014 fea2 	bl	1fd3c <__aeabi_i2d>
    aff8:	a315      	add	r3, pc, #84	; (adr r3, b050 <uwb_rng_calc_rel_tx+0x78>)
    affa:	e9d3 2300 	ldrd	r2, r3, [r3]
    affe:	f015 f831 	bl	20064 <__aeabi_ddiv>
    b002:	f015 f9dd 	bl	203c0 <__aeabi_d2uiz>
    b006:	b283      	uxth	r3, r0
    ret->response_tx_delay = ts + (((uint64_t) cfg->tx_holdoff_delay + rng->frame_shr_duration + data_duration) << 16);
    b008:	f8d8 1004 	ldr.w	r1, [r8, #4]
    b00c:	2200      	movs	r2, #0
    b00e:	f8b5 0074 	ldrh.w	r0, [r5, #116]	; 0x74
    b012:	1809      	adds	r1, r1, r0
    b014:	4152      	adcs	r2, r2
    b016:	185b      	adds	r3, r3, r1
    b018:	f142 0200 	adc.w	r2, r2, #0
    b01c:	0412      	lsls	r2, r2, #16
    b01e:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
    b022:	041b      	lsls	r3, r3, #16
    b024:	19db      	adds	r3, r3, r7
    b026:	eb42 0206 	adc.w	r2, r2, r6
    b02a:	6023      	str	r3, [r4, #0]
    b02c:	6062      	str	r2, [r4, #4]
    ret->response_timestamp = (ret->response_tx_delay & 0xFFFFFFFE00UL) + rng->dev_inst->tx_antenna_delay;
    b02e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    b032:	f023 0301 	bic.w	r3, r3, #1
    b036:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    b03a:	6829      	ldr	r1, [r5, #0]
    b03c:	f8b1 14ce 	ldrh.w	r1, [r1, #1230]	; 0x4ce
    b040:	185b      	adds	r3, r3, r1
    b042:	f142 0200 	adc.w	r2, r2, #0
    b046:	60a3      	str	r3, [r4, #8]
    b048:	60e2      	str	r2, [r4, #12]
}
    b04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b04e:	bf00      	nop
    b050:	90690691 	.word	0x90690691
    b054:	3ff06906 	.word	0x3ff06906

0000b058 <uwb_rng_clear_twr_data>:
    s->spherical.array[0] = DPL_FLOAT64_NAN();
    b058:	2200      	movs	r2, #0
    b05a:	4b07      	ldr	r3, [pc, #28]	; (b078 <uwb_rng_clear_twr_data+0x20>)
    b05c:	e9c0 2300 	strd	r2, r3, [r0]
    s->spherical.array[1] = DPL_FLOAT64_NAN();
    b060:	e9c0 2302 	strd	r2, r3, [r0, #8]
    s->spherical.array[2] = DPL_FLOAT64_NAN();
    b064:	e9c0 2304 	strd	r2, r3, [r0, #16]
    s->rssi = DPL_FLOAT32_NAN();
    b068:	4b04      	ldr	r3, [pc, #16]	; (b07c <uwb_rng_clear_twr_data+0x24>)
    b06a:	6483      	str	r3, [r0, #72]	; 0x48
    s->fppl = DPL_FLOAT32_NAN();
    b06c:	64c3      	str	r3, [r0, #76]	; 0x4c
    s->pdoa = DPL_FLOAT32_NAN();
    b06e:	6503      	str	r3, [r0, #80]	; 0x50
    s->flags = (struct _rng_frame_flags){0};
    b070:	2300      	movs	r3, #0
    b072:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
    b076:	4770      	bx	lr
    b078:	7ff80000 	.word	0x7ff80000
    b07c:	7fc00000 	.word	0x7fc00000

0000b080 <rx_complete_cb>:
{
    b080:	b570      	push	{r4, r5, r6, lr}
    b082:	4604      	mov	r4, r0
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    b084:	684d      	ldr	r5, [r1, #4]
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
    b086:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
    b08a:	f648 0241 	movw	r2, #34881	; 0x8841
    b08e:	4293      	cmp	r3, r2
    b090:	d012      	beq.n	b0b8 <rx_complete_cb+0x38>
    b092:	f648 0261 	movw	r2, #34913	; 0x8861
    b096:	4293      	cmp	r3, r2
    b098:	d00e      	beq.n	b0b8 <rx_complete_cb+0x38>
        inst->fctrl != (FCNTL_IEEE_RANGE_16|UWB_FCTRL_ACK_REQUESTED) &&
    b09a:	2b02      	cmp	r3, #2
    b09c:	d00c      	beq.n	b0b8 <rx_complete_cb+0x38>
    b09e:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
        if(dpl_sem_get_count(&rng->sem) == 0) {
    b0a2:	b10b      	cbz	r3, b0a8 <rx_complete_cb+0x28>
        return false;
    b0a4:	2000      	movs	r0, #0
    b0a6:	e01b      	b.n	b0e0 <rx_complete_cb+0x60>
            RNG_STATS_INC(rx_other_frame);
    b0a8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    b0aa:	3301      	adds	r3, #1
    b0ac:	62eb      	str	r3, [r5, #44]	; 0x2c
    return (dpl_error_t)os_sem_release(&sem->sem);
    b0ae:	f105 004c 	add.w	r0, r5, #76	; 0x4c
    b0b2:	f7fe fe61 	bl	9d78 <os_sem_release>
    b0b6:	e7f5      	b.n	b0a4 <rx_complete_cb+0x24>
    b0b8:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
    if(dpl_sem_get_count(&rng->sem) == 1){
    b0bc:	2b01      	cmp	r3, #1
    b0be:	d010      	beq.n	b0e2 <rx_complete_cb+0x62>
    if (inst->frame_len < sizeof(ieee_rng_request_frame_t))
    b0c0:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
    b0c4:	2b0a      	cmp	r3, #10
    b0c6:	d94e      	bls.n	b166 <rx_complete_cb+0xe6>
    req_frame = (ieee_rng_request_frame_t * ) inst->rxbuf;
    b0c8:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
    rng->code = req_frame->code;
    b0cc:	f8b3 2009 	ldrh.w	r2, [r3, #9]
    b0d0:	b293      	uxth	r3, r2
    b0d2:	f8a5 2048 	strh.w	r2, [r5, #72]	; 0x48
    switch(rng->code) {
    b0d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
    b0da:	2b19      	cmp	r3, #25
    b0dc:	d906      	bls.n	b0ec <rx_complete_cb+0x6c>
            return false;
    b0de:	2000      	movs	r0, #0
}
    b0e0:	bd70      	pop	{r4, r5, r6, pc}
        RNG_STATS_INC(rx_unsolicited);
    b0e2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    b0e4:	3301      	adds	r3, #1
    b0e6:	62ab      	str	r3, [r5, #40]	; 0x28
        return false;
    b0e8:	2000      	movs	r0, #0
    b0ea:	e7f9      	b.n	b0e0 <rx_complete_cb+0x60>
                twr_frame_t * frame = rng->frames[(rng->idx+1)%rng->nframes]; // speculative frame advance
    b0ec:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
    b0f0:	3301      	adds	r3, #1
    b0f2:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
    b0f6:	fb93 f1f2 	sdiv	r1, r3, r2
    b0fa:	fb02 3311 	mls	r3, r2, r1, r3
    b0fe:	3326      	adds	r3, #38	; 0x26
    b100:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    b104:	685e      	ldr	r6, [r3, #4]
                uwb_rng_clear_twr_data(&frame->remote);
    b106:	f106 0020 	add.w	r0, r6, #32
    b10a:	f7ff ffa5 	bl	b058 <uwb_rng_clear_twr_data>
                uwb_rng_clear_twr_data(&frame->local);
    b10e:	f106 0088 	add.w	r0, r6, #136	; 0x88
    b112:	f7ff ffa1 	bl	b058 <uwb_rng_clear_twr_data>
                if (inst->frame_len <= sizeof(frame->array))
    b116:	f8b4 24e2 	ldrh.w	r2, [r4, #1250]	; 0x4e2
    b11a:	2a88      	cmp	r2, #136	; 0x88
    b11c:	d901      	bls.n	b122 <rx_complete_cb+0xa2>
    return false;
    b11e:	2000      	movs	r0, #0
    b120:	e7de      	b.n	b0e0 <rx_complete_cb+0x60>
                    memcpy(frame->array, inst->rxbuf, inst->frame_len);
    b122:	f8d4 14fc 	ldr.w	r1, [r4, #1276]	; 0x4fc
    b126:	4630      	mov	r0, r6
    b128:	f000 ffa4 	bl	c074 <memcpy>
                if (inst->config.rx.frameFilter == 0 && frame->dst_address != inst->my_short_address){
    b12c:	f8b4 351c 	ldrh.w	r3, [r4, #1308]	; 0x51c
    b130:	b97b      	cbnz	r3, b152 <rx_complete_cb+0xd2>
    b132:	f8b6 2005 	ldrh.w	r2, [r6, #5]
    b136:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
    b13a:	429a      	cmp	r2, r3
    b13c:	d009      	beq.n	b152 <rx_complete_cb+0xd2>
    b13e:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
                    if(dpl_sem_get_count(&rng->sem) == 0){
    b142:	b10b      	cbz	r3, b148 <rx_complete_cb+0xc8>
                    return true;
    b144:	2001      	movs	r0, #1
    b146:	e7cb      	b.n	b0e0 <rx_complete_cb+0x60>
    b148:	f105 004c 	add.w	r0, r5, #76	; 0x4c
    b14c:	f7fe fe14 	bl	9d78 <os_sem_release>
    b150:	e7f8      	b.n	b144 <rx_complete_cb+0xc4>
                    RNG_STATS_INC(rx_complete);
    b152:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b154:	3301      	adds	r3, #1
    b156:	626b      	str	r3, [r5, #36]	; 0x24
                    rng->idx++;     // confirmed frame advance
    b158:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
    b15c:	3301      	adds	r3, #1
    b15e:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
                    return false;   // Allow sub extensions to handle event
    b162:	2000      	movs	r0, #0
    b164:	e7bc      	b.n	b0e0 <rx_complete_cb+0x60>
       return false;
    b166:	2000      	movs	r0, #0
    b168:	e7ba      	b.n	b0e0 <rx_complete_cb+0x60>
    b16a:	0000      	movs	r0, r0
    b16c:	0000      	movs	r0, r0
	...

0000b170 <uwb_rng_request>:
{
    b170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b174:	4604      	mov	r4, r0
    b176:	460f      	mov	r7, r1
    b178:	4616      	mov	r6, r2
    struct uwb_dev * inst = rng->dev_inst;
    b17a:	6805      	ldr	r5, [r0, #0]
    twr_frame_t * frame  = rng->frames[(rng->idx+1)%rng->nframes];
    b17c:	f8b0 3076 	ldrh.w	r3, [r0, #118]	; 0x76
    b180:	3301      	adds	r3, #1
    b182:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    b186:	fb93 f1f2 	sdiv	r1, r3, r2
    b18a:	fb02 3311 	mls	r3, r2, r1, r3
    b18e:	3326      	adds	r3, #38	; 0x26
    b190:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    b194:	f8d3 8004 	ldr.w	r8, [r3, #4]
    struct uwb_rng_config * config = uwb_rng_get_config(rng, code);
    b198:	4631      	mov	r1, r6
    b19a:	f7ff fed3 	bl	af44 <uwb_rng_get_config>
    if (!config) {
    b19e:	b158      	cbz	r0, b1b8 <uwb_rng_request+0x48>
    b1a0:	4681      	mov	r9, r0
    RNG_STATS_INC(rng_request);
    b1a2:	69a3      	ldr	r3, [r4, #24]
    b1a4:	3301      	adds	r3, #1
    b1a6:	61a3      	str	r3, [r4, #24]
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b1a8:	f104 0a4c 	add.w	sl, r4, #76	; 0x4c
    b1ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b1b0:	4650      	mov	r0, sl
    b1b2:	f7fe fe13 	bl	9ddc <os_sem_pend>
    if (err != DPL_OK) {
    b1b6:	b118      	cbz	r0, b1c0 <uwb_rng_request+0x50>
}
    b1b8:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    b1bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1c0:	f105 0b34 	add.w	fp, r5, #52	; 0x34
    b1c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b1c8:	4658      	mov	r0, fp
    b1ca:	f7fe fe07 	bl	9ddc <os_sem_pend>
    if (err != DPL_OK) {
    b1ce:	2800      	cmp	r0, #0
    b1d0:	f040 80af 	bne.w	b332 <uwb_rng_request+0x1c2>
    if (code == UWB_DATA_CODE_SS_TWR || code == UWB_DATA_CODE_SS_TWR_EXT)
    b1d4:	f5b6 7f88 	cmp.w	r6, #272	; 0x110
    b1d8:	d008      	beq.n	b1ec <uwb_rng_request+0x7c>
    b1da:	f5b6 7f8a 	cmp.w	r6, #276	; 0x114
    b1de:	d005      	beq.n	b1ec <uwb_rng_request+0x7c>
        rng->seq_num+=2;
    b1e0:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    b1e4:	3302      	adds	r3, #2
    b1e6:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    b1ea:	e004      	b.n	b1f6 <uwb_rng_request+0x86>
        rng->seq_num+=1;
    b1ec:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    b1f0:	3301      	adds	r3, #1
    b1f2:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    frame->fctrl = FCNTL_IEEE_RANGE_16;
    b1f6:	f648 0241 	movw	r2, #34881	; 0x8841
    b1fa:	f8a8 2000 	strh.w	r2, [r8]
    frame->fctrl |=  (config->fctrl_req_ack)? UWB_FCTRL_ACK_REQUESTED : 0;
    b1fe:	f899 300e 	ldrb.w	r3, [r9, #14]
    b202:	011b      	lsls	r3, r3, #4
    b204:	f003 0320 	and.w	r3, r3, #32
    b208:	4313      	orrs	r3, r2
    b20a:	f8a8 3000 	strh.w	r3, [r8]
    frame->seq_num = rng->seq_num;
    b20e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    b212:	f888 3002 	strb.w	r3, [r8, #2]
    frame->code = code;
    b216:	f8a8 6009 	strh.w	r6, [r8, #9]
    frame->PANID = inst->pan_id;
    b21a:	f8b5 34c0 	ldrh.w	r3, [r5, #1216]	; 0x4c0
    b21e:	f8a8 3003 	strh.w	r3, [r8, #3]
    frame->src_address = inst->my_short_address;
    b222:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
    b226:	f8a8 3007 	strh.w	r3, [r8, #7]
    frame->dst_address = dst_address;
    b22a:	f8a8 7005 	strh.w	r7, [r8, #5]
    uwb_rng_clear_twr_data(&frame->remote);
    b22e:	f108 0020 	add.w	r0, r8, #32
    b232:	f7ff ff11 	bl	b058 <uwb_rng_clear_twr_data>
    uwb_rng_clear_twr_data(&frame->local);
    b236:	f108 0088 	add.w	r0, r8, #136	; 0x88
    b23a:	f7ff ff0d 	bl	b058 <uwb_rng_clear_twr_data>
    cir_enable(inst->cir, true);
    b23e:	f8d5 054c 	ldr.w	r0, [r5, #1356]	; 0x54c
 * @return pdoa Phase difference of arrival in radians
 */
static inline void
cir_enable(struct cir_instance * cir, bool mode)
{
    (cir->cir_funcs->cf_cir_enable(cir, mode));
    b242:	6803      	ldr	r3, [r0, #0]
    b244:	685b      	ldr	r3, [r3, #4]
    b246:	2101      	movs	r1, #1
    b248:	4798      	blx	r3
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    b24a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b24c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
    b24e:	230b      	movs	r3, #11
    b250:	2200      	movs	r2, #0
    b252:	4641      	mov	r1, r8
    b254:	4628      	mov	r0, r5
    b256:	47b8      	blx	r7
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    b258:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b25a:	6c9f      	ldr	r7, [r3, #72]	; 0x48
    b25c:	2300      	movs	r3, #0
    b25e:	461a      	mov	r2, r3
    b260:	210b      	movs	r1, #11
    b262:	4628      	mov	r0, r5
    b264:	47b8      	blx	r7
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    b266:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    b26a:	2101      	movs	r1, #1
    b26c:	4628      	mov	r0, r5
    b26e:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_data_duration(dev, nlen));
    b270:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    b276:	2113      	movs	r1, #19
    b278:	4628      	mov	r0, r5
    b27a:	4798      	blx	r3
    data_duration = uwb_usecs_to_dwt_usecs(uwb_phy_data_duration(inst, sizeof(ieee_rng_response_frame_t)));
    b27c:	f014 fd5e 	bl	1fd3c <__aeabi_i2d>
    b280:	a345      	add	r3, pc, #276	; (adr r3, b398 <uwb_rng_request+0x228>)
    b282:	e9d3 2300 	ldrd	r2, r3, [r3]
    b286:	f014 feed 	bl	20064 <__aeabi_ddiv>
    b28a:	f015 f899 	bl	203c0 <__aeabi_d2uiz>
    b28e:	fa1f f880 	uxth.w	r8, r0
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    b292:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    b296:	2113      	movs	r1, #19
    b298:	4628      	mov	r0, r5
    b29a:	4798      	blx	r3
    frame_duration = uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(ieee_rng_response_frame_t)));
    b29c:	f014 fd4e 	bl	1fd3c <__aeabi_i2d>
    b2a0:	a33d      	add	r3, pc, #244	; (adr r3, b398 <uwb_rng_request+0x228>)
    b2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    b2a6:	f014 fedd 	bl	20064 <__aeabi_ddiv>
    b2aa:	f015 f889 	bl	203c0 <__aeabi_d2uiz>
    b2ae:	b287      	uxth	r7, r0
    rng->frame_shr_duration = frame_duration - data_duration;
    b2b0:	eba7 0808 	sub.w	r8, r7, r8
    b2b4:	f8a4 8074 	strh.w	r8, [r4, #116]	; 0x74
    if (!config->fctrl_req_ack) {
    b2b8:	f899 300e 	ldrb.w	r3, [r9, #14]
    b2bc:	f013 0f02 	tst.w	r3, #2
    b2c0:	d140      	bne.n	b344 <uwb_rng_request+0x1d4>
        uwb_set_wait4resp_delay(inst, config->tx_holdoff_delay -
    b2c2:	f8d9 1004 	ldr.w	r1, [r9, #4]
                                inst->config.rx.timeToRxStable);
    b2c6:	f895 251b 	ldrb.w	r2, [r5, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
    b2ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b2cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    b2ce:	1a89      	subs	r1, r1, r2
    b2d0:	4628      	mov	r0, r5
    b2d2:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
    b2d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b2d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    b2d8:	2101      	movs	r1, #1
    b2da:	4628      	mov	r0, r5
    b2dc:	4798      	blx	r3
    if (code == UWB_DATA_CODE_SS_TWR_EXT) {
    b2de:	f5b6 7f8a 	cmp.w	r6, #276	; 0x114
    b2e2:	d040      	beq.n	b366 <uwb_rng_request+0x1f6>
    uwb_set_rx_timeout(inst, frame_duration + config->rx_timeout_delay +
    b2e4:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    b2e8:	440f      	add	r7, r1
                       inst->config.rx.timeToRxStable);
    b2ea:	f895 151b 	ldrb.w	r1, [r5, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    b2ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b2f2:	4439      	add	r1, r7
    b2f4:	4628      	mov	r0, r5
    b2f6:	4798      	blx	r3
    if (rng->control.delay_start_enabled)
    b2f8:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    b2fc:	f013 0f01 	tst.w	r3, #1
    b300:	d005      	beq.n	b30e <uwb_rng_request+0x19e>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    b302:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b304:	6b59      	ldr	r1, [r3, #52]	; 0x34
    b306:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    b30a:	4628      	mov	r0, r5
    b30c:	4788      	blx	r1
    return (dpl_error_t)os_sem_release(&sem->sem);
    b30e:	4658      	mov	r0, fp
    b310:	f7fe fd32 	bl	9d78 <os_sem_release>
    return (dev->uw_funcs->uf_start_tx(dev));
    b314:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b318:	4628      	mov	r0, r5
    b31a:	4798      	blx	r3
    if (uwb_start_tx(inst).start_tx_error) {
    b31c:	f010 0f04 	tst.w	r0, #4
    b320:	d131      	bne.n	b386 <uwb_rng_request+0x216>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b322:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b326:	4650      	mov	r0, sl
    b328:	f7fe fd58 	bl	9ddc <os_sem_pend>
    if (err != DPL_OK) {
    b32c:	2800      	cmp	r0, #0
    b32e:	f47f af43 	bne.w	b1b8 <uwb_rng_request+0x48>
    b332:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    if(dpl_sem_get_count(&rng->sem) == 0){
    b336:	2b00      	cmp	r3, #0
    b338:	f47f af3e 	bne.w	b1b8 <uwb_rng_request+0x48>
    return (dpl_error_t)os_sem_release(&sem->sem);
    b33c:	4650      	mov	r0, sl
    b33e:	f7fe fd1b 	bl	9d78 <os_sem_release>
early_exit:
    b342:	e739      	b.n	b1b8 <uwb_rng_request+0x48>
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
    b344:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    b348:	2100      	movs	r1, #0
    b34a:	4628      	mov	r0, r5
    b34c:	4798      	blx	r3
        rng->status.rx_ack_expected = 1;
    b34e:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
    b352:	f043 0320 	orr.w	r3, r3, #32
    b356:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
    b35a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b35c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    b35e:	2100      	movs	r1, #0
    b360:	4628      	mov	r0, r5
    b362:	4798      	blx	r3
    b364:	e7bb      	b.n	b2de <uwb_rng_request+0x16e>
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    b366:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    b36a:	2120      	movs	r1, #32
    b36c:	4628      	mov	r0, r5
    b36e:	4798      	blx	r3
        frame_duration = uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, TWR_EXT_FRAME_SIZE));
    b370:	f014 fce4 	bl	1fd3c <__aeabi_i2d>
    b374:	a308      	add	r3, pc, #32	; (adr r3, b398 <uwb_rng_request+0x228>)
    b376:	e9d3 2300 	ldrd	r2, r3, [r3]
    b37a:	f014 fe73 	bl	20064 <__aeabi_ddiv>
    b37e:	f015 f81f 	bl	203c0 <__aeabi_d2uiz>
    b382:	b287      	uxth	r7, r0
    b384:	e7ae      	b.n	b2e4 <uwb_rng_request+0x174>
    b386:	4650      	mov	r0, sl
    b388:	f7fe fcf6 	bl	9d78 <os_sem_release>
        RNG_STATS_INC(tx_error);
    b38c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b38e:	3301      	adds	r3, #1
    b390:	6363      	str	r3, [r4, #52]	; 0x34
    b392:	e7c6      	b.n	b322 <uwb_rng_request+0x1b2>
    b394:	f3af 8000 	nop.w
    b398:	90690691 	.word	0x90690691
    b39c:	3ff06906 	.word	0x3ff06906

0000b3a0 <uwb_rng_listen>:
{
    b3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3a4:	4604      	mov	r4, r0
    b3a6:	460e      	mov	r6, r1
    b3a8:	4690      	mov	r8, r2
    struct uwb_dev * inst = rng->dev_inst;
    b3aa:	4605      	mov	r5, r0
    b3ac:	f855 7b4c 	ldr.w	r7, [r5], #76
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b3b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b3b4:	4628      	mov	r0, r5
    b3b6:	f7fe fd11 	bl	9ddc <os_sem_pend>
    if (err != DPL_OK) {
    b3ba:	2800      	cmp	r0, #0
    b3bc:	d13a      	bne.n	b434 <uwb_rng_listen+0x94>
    cir_enable(rng->dev_inst->cir, true);
    b3be:	6823      	ldr	r3, [r4, #0]
    b3c0:	f8d3 054c 	ldr.w	r0, [r3, #1356]	; 0x54c
    b3c4:	6803      	ldr	r3, [r0, #0]
    b3c6:	685b      	ldr	r3, [r3, #4]
    b3c8:	2101      	movs	r1, #1
    b3ca:	4798      	blx	r3
    uwb_set_rxauto_disable(rng->dev_inst, true);
    b3cc:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
    b3ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b3d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    b3d2:	2101      	movs	r1, #1
    b3d4:	4798      	blx	r3
    rng->frame_shr_duration = uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(rng->dev_inst));
    b3d6:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    b3d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b3da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    b3de:	4798      	blx	r3
    b3e0:	f014 fcac 	bl	1fd3c <__aeabi_i2d>
    b3e4:	a326      	add	r3, pc, #152	; (adr r3, b480 <uwb_rng_listen+0xe0>)
    b3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    b3ea:	f014 fe3b 	bl	20064 <__aeabi_ddiv>
    b3ee:	f014 ffe7 	bl	203c0 <__aeabi_d2uiz>
    b3f2:	f8a4 0074 	strh.w	r0, [r4, #116]	; 0x74
    if (rng->control.delay_start_enabled)
    b3f6:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    b3fa:	f013 0f01 	tst.w	r3, #1
    b3fe:	d005      	beq.n	b40c <uwb_rng_listen+0x6c>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    b400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b402:	6b59      	ldr	r1, [r3, #52]	; 0x34
    b404:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    b408:	4638      	mov	r0, r7
    b40a:	4788      	blx	r1
    if (timeout > -1) {
    b40c:	2e00      	cmp	r6, #0
    b40e:	db04      	blt.n	b41a <uwb_rng_listen+0x7a>
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    b410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b414:	4631      	mov	r1, r6
    b416:	4638      	mov	r0, r7
    b418:	4798      	blx	r3
    RNG_STATS_INC(rng_listen);
    b41a:	69e3      	ldr	r3, [r4, #28]
    b41c:	3301      	adds	r3, #1
    b41e:	61e3      	str	r3, [r4, #28]
    if(uwb_start_rx(rng->dev_inst).start_rx_error){
    b420:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_start_rx(dev));
    b422:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b426:	4798      	blx	r3
    b428:	f010 0f08 	tst.w	r0, #8
    b42c:	d107      	bne.n	b43e <uwb_rng_listen+0x9e>
    if (mode == UWB_BLOCKING){
    b42e:	f1b8 0f00 	cmp.w	r8, #0
    b432:	d012      	beq.n	b45a <uwb_rng_listen+0xba>
    return rng->dev_inst->status;
    b434:	6823      	ldr	r3, [r4, #0]
}
    b436:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    b43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
    b43e:	4628      	mov	r0, r5
    b440:	f7fe fc9a 	bl	9d78 <os_sem_release>
        assert(err == DPL_OK);
    b444:	b918      	cbnz	r0, b44e <uwb_rng_listen+0xae>
        RNG_STATS_INC(rx_error);
    b446:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b448:	3301      	adds	r3, #1
    b44a:	6323      	str	r3, [r4, #48]	; 0x30
    b44c:	e7ef      	b.n	b42e <uwb_rng_listen+0x8e>
        assert(err == DPL_OK);
    b44e:	2300      	movs	r3, #0
    b450:	461a      	mov	r2, r3
    b452:	4619      	mov	r1, r3
    b454:	4618      	mov	r0, r3
    b456:	f7fd fd7d 	bl	8f54 <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b45a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b45e:	4628      	mov	r0, r5
    b460:	f7fe fcbc 	bl	9ddc <os_sem_pend>
        if (err != DPL_OK) {
    b464:	2800      	cmp	r0, #0
    b466:	d1e5      	bne.n	b434 <uwb_rng_listen+0x94>
    return (dpl_error_t)os_sem_release(&sem->sem);
    b468:	4628      	mov	r0, r5
    b46a:	f7fe fc85 	bl	9d78 <os_sem_release>
        assert(err == DPL_OK);
    b46e:	2800      	cmp	r0, #0
    b470:	d0e0      	beq.n	b434 <uwb_rng_listen+0x94>
    b472:	2300      	movs	r3, #0
    b474:	461a      	mov	r2, r3
    b476:	4619      	mov	r1, r3
    b478:	4618      	mov	r0, r3
    b47a:	f7fd fd6b 	bl	8f54 <__assert_func>
    b47e:	bf00      	nop
    b480:	90690691 	.word	0x90690691
    b484:	3ff06906 	.word	0x3ff06906

0000b488 <uwb_rng_twr_to_tof>:
{
    b488:	b5f0      	push	{r4, r5, r6, r7, lr}
    b48a:	b089      	sub	sp, #36	; 0x24
    twr_frame_t * first_frame = rng->frames[(uint16_t)(idx-1)%rng->nframes];
    b48c:	1e4b      	subs	r3, r1, #1
    b48e:	b29b      	uxth	r3, r3
    b490:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    b494:	fbb3 f4f2 	udiv	r4, r3, r2
    b498:	fb02 3314 	mls	r3, r2, r4, r3
    b49c:	b29b      	uxth	r3, r3
    b49e:	3326      	adds	r3, #38	; 0x26
    b4a0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    b4a4:	685c      	ldr	r4, [r3, #4]
    twr_frame_t * frame = rng->frames[(idx)%rng->nframes];
    b4a6:	fbb1 f3f2 	udiv	r3, r1, r2
    b4aa:	fb02 1113 	mls	r1, r2, r3, r1
    b4ae:	b289      	uxth	r1, r1
    b4b0:	3126      	adds	r1, #38	; 0x26
    b4b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    b4b6:	684d      	ldr	r5, [r1, #4]
    skew = uwb_calc_clock_offset_ratio(rng->dev_inst,
    b4b8:	6800      	ldr	r0, [r0, #0]
    return (dev->uw_funcs->uf_calc_clock_offset_ratio(dev, integrator_val, type));
    b4ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b4bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    b4c0:	2200      	movs	r2, #0
    b4c2:	f8d5 101b 	ldr.w	r1, [r5, #27]
    b4c6:	4798      	blx	r3
    switch(frame->code) {
    b4c8:	f8b5 3009 	ldrh.w	r3, [r5, #9]
    b4cc:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
    b4d0:	d321      	bcc.n	b516 <uwb_rng_twr_to_tof+0x8e>
    b4d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
    b4d6:	b29b      	uxth	r3, r3
    b4d8:	2b09      	cmp	r3, #9
    b4da:	d831      	bhi.n	b540 <uwb_rng_twr_to_tof+0xb8>
                              first_frame->transmission_timestamp, first_frame->reception_timestamp,
    b4dc:	f8d4 200f 	ldr.w	r2, [r4, #15]
    b4e0:	f8d4 600b 	ldr.w	r6, [r4, #11]
                              frame->transmission_timestamp, frame->reception_timestamp);
    b4e4:	f8d5 700f 	ldr.w	r7, [r5, #15]
    b4e8:	f8d5 c00b 	ldr.w	ip, [r5, #11]
            ToF = calc_tof_ds(first_frame->response_timestamp, first_frame->request_timestamp,
    b4ec:	2300      	movs	r3, #0
    b4ee:	f8d4 1013 	ldr.w	r1, [r4, #19]
    b4f2:	f8d4 0017 	ldr.w	r0, [r4, #23]
    b4f6:	f8cd c018 	str.w	ip, [sp, #24]
    b4fa:	9307      	str	r3, [sp, #28]
    b4fc:	9704      	str	r7, [sp, #16]
    b4fe:	9305      	str	r3, [sp, #20]
    b500:	f8d5 4013 	ldr.w	r4, [r5, #19]
    b504:	9403      	str	r4, [sp, #12]
    b506:	f8d5 4017 	ldr.w	r4, [r5, #23]
    b50a:	9402      	str	r4, [sp, #8]
    b50c:	9600      	str	r6, [sp, #0]
    b50e:	9301      	str	r3, [sp, #4]
    b510:	f00d fef2 	bl	192f8 <calc_tof_ds>
            break;
    b514:	e004      	b.n	b520 <uwb_rng_twr_to_tof+0x98>
    switch(frame->code) {
    b516:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
    b51a:	d203      	bcs.n	b524 <uwb_rng_twr_to_tof+0x9c>
    b51c:	ed9f 0b0a 	vldr	d0, [pc, #40]	; b548 <uwb_rng_twr_to_tof+0xc0>
}
    b520:	b009      	add	sp, #36	; 0x24
    b522:	bdf0      	pop	{r4, r5, r6, r7, pc}
                              frame->transmission_timestamp, frame->reception_timestamp, skew);
    b524:	f8d5 200f 	ldr.w	r2, [r5, #15]
    b528:	f8d5 400b 	ldr.w	r4, [r5, #11]
            ToF = calc_tof_ss(frame->response_timestamp, frame->request_timestamp,
    b52c:	2300      	movs	r3, #0
    b52e:	f8d5 1013 	ldr.w	r1, [r5, #19]
    b532:	f8d5 0017 	ldr.w	r0, [r5, #23]
    b536:	9400      	str	r4, [sp, #0]
    b538:	9301      	str	r3, [sp, #4]
    b53a:	f00d fead 	bl	19298 <calc_tof_ss>
            break;
    b53e:	e7ef      	b.n	b520 <uwb_rng_twr_to_tof+0x98>
    switch(frame->code) {
    b540:	ed9f 0b01 	vldr	d0, [pc, #4]	; b548 <uwb_rng_twr_to_tof+0xc0>
    return ToF;
    b544:	e7ec      	b.n	b520 <uwb_rng_twr_to_tof+0x98>
    b546:	bf00      	nop
	...

0000b550 <tx_final_cb>:
 *
 * @return void
 */
static bool
tx_final_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    b550:	b570      	push	{r4, r5, r6, lr}
    b552:	4605      	mov	r5, r0
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    b554:	684e      	ldr	r6, [r1, #4]
    twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
    b556:	f8b6 3076 	ldrh.w	r3, [r6, #118]	; 0x76
    b55a:	f8b6 207a 	ldrh.w	r2, [r6, #122]	; 0x7a
    b55e:	fbb3 f1f2 	udiv	r1, r3, r2
    b562:	fb02 3311 	mls	r3, r2, r1, r3
    b566:	b29b      	uxth	r3, r3
    b568:	3326      	adds	r3, #38	; 0x26
    b56a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    b56e:	685c      	ldr	r4, [r3, #4]

    frame->remote.cartesian.x = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_X));
    b570:	2200      	movs	r2, #0
    b572:	2300      	movs	r3, #0
    b574:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
    frame->remote.cartesian.y = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_Y));
    b578:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    frame->remote.cartesian.z = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_Z));
    b57c:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    if (inst->capabilities.single_receiver_pdoa) {
    b580:	f890 34b2 	ldrb.w	r3, [r0, #1202]	; 0x4b2
    b584:	f013 0f02 	tst.w	r3, #2
    b588:	d007      	beq.n	b59a <tx_final_cb+0x4a>
    return (dev->uw_funcs->uf_calc_pdoa(dev, diag));
    b58a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b58c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    b590:	f8d0 14f8 	ldr.w	r1, [r0, #1272]	; 0x4f8
    b594:	4798      	blx	r3
        frame->remote.pdoa = uwb_calc_pdoa(inst, inst->rxdiag);
    b596:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
    }
    if (inst->capabilities.sts) {
    b59a:	f895 34b2 	ldrb.w	r3, [r5, #1202]	; 0x4b2
    b59e:	f013 0f01 	tst.w	r3, #1
    b5a2:	d017      	beq.n	b5d4 <tx_final_cb+0x84>
        frame->remote.flags.has_sts = inst->config.rx.stsMode != DWT_STS_MODE_OFF;
    b5a4:	f895 3518 	ldrb.w	r3, [r5, #1304]	; 0x518
    b5a8:	3b00      	subs	r3, #0
    b5aa:	bf18      	it	ne
    b5ac:	2301      	movne	r3, #1
    b5ae:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    b5b2:	f363 0200 	bfi	r2, r3, #0, #1
    b5b6:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
        frame->local.flags.has_valid_sts = !(inst->status.sts_ts_error || inst->status.sts_pream_error);
    b5ba:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
    b5be:	f013 0f30 	tst.w	r3, #48	; 0x30
    b5c2:	bf0c      	ite	eq
    b5c4:	2201      	moveq	r2, #1
    b5c6:	2200      	movne	r2, #0
    b5c8:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    b5cc:	f362 0341 	bfi	r3, r2, #1, #1
    b5d0:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
    return (dev->uw_funcs->uf_calc_rssi(dev, diag));
    b5d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b5d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    b5da:	f8d5 14f8 	ldr.w	r1, [r5, #1272]	; 0x4f8
    b5de:	4628      	mov	r0, r5
    b5e0:	4798      	blx	r3
    }
    frame->remote.rssi = uwb_calc_rssi(inst, inst->rxdiag);
    b5e2:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
    return (dev->uw_funcs->uf_calc_fppl(dev, diag));
    b5e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b5e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
    b5ec:	f8d5 14f8 	ldr.w	r1, [r5, #1272]	; 0x4f8
    b5f0:	4628      	mov	r0, r5
    b5f2:	4798      	blx	r3
    frame->remote.fppl = uwb_calc_fppl(inst, inst->rxdiag);
    b5f4:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c

    if (frame->code != UWB_DATA_CODE_SS_TWR_EXT_T1) {
    b5f8:	f8b4 2009 	ldrh.w	r2, [r4, #9]
    b5fc:	f240 1315 	movw	r3, #277	; 0x115
    b600:	429a      	cmp	r2, r3
    b602:	d125      	bne.n	b650 <tx_final_cb+0x100>
#else
        frame->remote.spherical.range = uwb_rng_tof_to_meters(uwb_rng_twr_to_tof(rng,rng->idx));
#endif
        frame->remote.spherical_variance.range = DPL_FLOAT64_I32_TO_F64(MYNEWT_VAL(RANGE_VARIANCE));
    } else {
        frame->remote.spherical.range = DPL_FLOAT64_NAN();
    b604:	2200      	movs	r2, #0
    b606:	4b1e      	ldr	r3, [pc, #120]	; (b680 <tx_final_cb+0x130>)
    b608:	e9c4 2308 	strd	r2, r3, [r4, #32]
    }
    frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(-1.0);
    b60c:	2200      	movs	r2, #0
    b60e:	4b1d      	ldr	r3, [pc, #116]	; (b684 <tx_final_cb+0x134>)
    b610:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    frame->remote.spherical_variance.zenith = DPL_FLOAT64_INIT(-1.0);
    b614:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    if (!DPL_FLOAT32_ISNAN(frame->remote.pdoa)) {
    b618:	ed94 0a1c 	vldr	s0, [r4, #112]	; 0x70
    b61c:	eeb4 0a40 	vcmp.f32	s0, s0
    b620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b624:	d612      	bvs.n	b64c <tx_final_cb+0xfc>
        frame->remote.spherical.azimuth = DPL_FLOAT64_FROM_F32(uwb_calc_aoa(
    b626:	f505 639a 	add.w	r3, r5, #1232	; 0x4d0
    b62a:	edd3 0a00 	vldr	s1, [r3]
    b62e:	f895 050c 	ldrb.w	r0, [r5, #1292]	; 0x50c
    b632:	f7fd fae1 	bl	8bf8 <uwb_calc_aoa>
    b636:	ee10 0a10 	vmov	r0, s0
    b63a:	f014 fb91 	bl	1fd60 <__aeabi_f2d>
    b63e:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            frame->remote.pdoa, inst->config.channel, inst->rx_ant_separation)
            );
        frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(MYNEWT_VAL(AZIMUTH_VARIANCE));
    b642:	a30b      	add	r3, pc, #44	; (adr r3, b670 <tx_final_cb+0x120>)
    b644:	e9d3 2300 	ldrd	r2, r3, [r3]
    b648:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }

    return true;
}
    b64c:	2001      	movs	r0, #1
    b64e:	bd70      	pop	{r4, r5, r6, pc}
        frame->remote.spherical.range = uwb_rng_tof_to_meters(uwb_rng_twr_to_tof(rng,rng->idx));
    b650:	f8b6 1076 	ldrh.w	r1, [r6, #118]	; 0x76
    b654:	4630      	mov	r0, r6
    b656:	f7ff ff17 	bl	b488 <uwb_rng_twr_to_tof>
    b65a:	f00d fdf9 	bl	19250 <uwb_rng_tof_to_meters>
    b65e:	ed84 0b08 	vstr	d0, [r4, #32]
        frame->remote.spherical_variance.range = DPL_FLOAT64_I32_TO_F64(MYNEWT_VAL(RANGE_VARIANCE));
    b662:	a305      	add	r3, pc, #20	; (adr r3, b678 <tx_final_cb+0x128>)
    b664:	e9d3 2300 	ldrd	r2, r3, [r3]
    b668:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    b66c:	e7ce      	b.n	b60c <tx_final_cb+0xbc>
    b66e:	bf00      	nop
    b670:	00000000 	.word	0x00000000
    b674:	3f9dcc64 	.word	0x3f9dcc64
    b678:	00000000 	.word	0x00000000
    b67c:	3f41d718 	.word	0x3f41d718
    b680:	7ff80000 	.word	0x7ff80000
    b684:	bff00000 	.word	0xbff00000

0000b688 <rng_issue_complete>:
{
    b688:	b538      	push	{r3, r4, r5, lr}
    b68a:	4605      	mov	r5, r0
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
    b68c:	f8d0 4534 	ldr.w	r4, [r0, #1332]	; 0x534
    b690:	b90c      	cbnz	r4, b696 <rng_issue_complete+0xe>
}
    b692:	bd38      	pop	{r3, r4, r5, pc}
        SLIST_FOREACH(cbs_i, &inst->interface_cbs, next) {
    b694:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    b696:	2c00      	cmp	r4, #0
    b698:	d0fb      	beq.n	b692 <rng_issue_complete+0xa>
            if (cbs_i != NULL && cbs_i->complete_cb)
    b69a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b69c:	2b00      	cmp	r3, #0
    b69e:	d0f9      	beq.n	b694 <rng_issue_complete+0xc>
                if(cbs_i->complete_cb(inst, cbs_i)) continue;
    b6a0:	4621      	mov	r1, r4
    b6a2:	4628      	mov	r0, r5
    b6a4:	4798      	blx	r3
    b6a6:	e7f5      	b.n	b694 <rng_issue_complete+0xc>

0000b6a8 <tx_complete_cb>:
{
    b6a8:	b538      	push	{r3, r4, r5, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    b6aa:	684d      	ldr	r5, [r1, #4]
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
    b6ac:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
    b6b0:	f648 0341 	movw	r3, #34881	; 0x8841
    b6b4:	429a      	cmp	r2, r3
    b6b6:	d122      	bne.n	b6fe <tx_complete_cb+0x56>
    b6b8:	4604      	mov	r4, r0
    b6ba:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
    if(dpl_sem_get_count(&rng->sem) == 1) {
    b6be:	2b01      	cmp	r3, #1
    b6c0:	d01f      	beq.n	b702 <tx_complete_cb+0x5a>
    switch(rng->code) {
    b6c2:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
    b6c6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
    b6ca:	2b19      	cmp	r3, #25
    b6cc:	d81b      	bhi.n	b706 <tx_complete_cb+0x5e>
            RNG_STATS_INC(tx_complete);
    b6ce:	6a2b      	ldr	r3, [r5, #32]
    b6d0:	3301      	adds	r3, #1
    b6d2:	622b      	str	r3, [r5, #32]
            if (rng->control.complete_after_tx) {
    b6d4:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
    b6d8:	f013 0f02 	tst.w	r3, #2
    b6dc:	d107      	bne.n	b6ee <tx_complete_cb+0x46>
            rng->control.complete_after_tx = 0;
    b6de:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
    b6e2:	f36f 0341 	bfc	r3, #1, #1
    b6e6:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
            return true;
    b6ea:	2001      	movs	r0, #1
    b6ec:	e008      	b.n	b700 <tx_complete_cb+0x58>
    b6ee:	f105 004c 	add.w	r0, r5, #76	; 0x4c
    b6f2:	f7fe fb41 	bl	9d78 <os_sem_release>
                rng_issue_complete(inst);
    b6f6:	4620      	mov	r0, r4
    b6f8:	f7ff ffc6 	bl	b688 <rng_issue_complete>
    b6fc:	e7ef      	b.n	b6de <tx_complete_cb+0x36>
        return false;
    b6fe:	2000      	movs	r0, #0
}
    b700:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    b702:	2000      	movs	r0, #0
    b704:	e7fc      	b.n	b700 <tx_complete_cb+0x58>
            return false;
    b706:	2000      	movs	r0, #0
    b708:	e7fa      	b.n	b700 <tx_complete_cb+0x58>
	...

0000b70c <uwb_rng_pkg_init>:
 * @return void
 */

void
uwb_rng_pkg_init(void)
{
    b70c:	b570      	push	{r4, r5, r6, lr}
    int i;
    struct uwb_rng_instance *rng;
    struct uwb_dev *udev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"rng_pkg_init\"}\n",
    b70e:	f001 f937 	bl	c980 <dpl_cputime_get32>
    b712:	4601      	mov	r1, r0
    b714:	4826      	ldr	r0, [pc, #152]	; (b7b0 <uwb_rng_pkg_init+0xa4>)
    b716:	f001 f8cd 	bl	c8b4 <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
    b71a:	2500      	movs	r5, #0
    b71c:	b105      	cbz	r5, b720 <uwb_rng_pkg_init+0x14>
#if __KERNEL__
        rng_chrdev_create(udev->idx);
#endif
    }

}
    b71e:	bd70      	pop	{r4, r5, r6, pc}
        udev = uwb_dev_idx_lookup(i);
    b720:	4628      	mov	r0, r5
    b722:	f7fd f96d 	bl	8a00 <uwb_dev_idx_lookup>
        if (!udev) continue;
    b726:	4606      	mov	r6, r0
    b728:	2800      	cmp	r0, #0
    b72a:	d03e      	beq.n	b7aa <uwb_rng_pkg_init+0x9e>
        g_cbs[i].inst_ptr = rng = uwb_rng_init(udev, &g_config, sizeof(g_twr_frames[i])/sizeof(g_twr_frames[i][0]));
    b72c:	2204      	movs	r2, #4
    b72e:	4921      	ldr	r1, [pc, #132]	; (b7b4 <uwb_rng_pkg_init+0xa8>)
    b730:	f7ff fba2 	bl	ae78 <uwb_rng_init>
    b734:	4604      	mov	r4, r0
    b736:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
    b73a:	4a1f      	ldr	r2, [pc, #124]	; (b7b8 <uwb_rng_pkg_init+0xac>)
    b73c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    b740:	6058      	str	r0, [r3, #4]
        uwb_rng_set_frames(rng, g_twr_frames[i], sizeof(g_twr_frames[0])/sizeof(g_twr_frames[0][0]));
    b742:	ebc5 1005 	rsb	r0, r5, r5, lsl #4
    b746:	4b1d      	ldr	r3, [pc, #116]	; (b7bc <uwb_rng_pkg_init+0xb0>)
    b748:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    assert(nframes <= rng->nframes);
    b74c:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    b750:	2b03      	cmp	r3, #3
    b752:	d901      	bls.n	b758 <uwb_rng_pkg_init+0x4c>
    for (i = 0; i < nframes; i++)
    b754:	2300      	movs	r3, #0
    b756:	e010      	b.n	b77a <uwb_rng_pkg_init+0x6e>
    assert(nframes <= rng->nframes);
    b758:	2300      	movs	r3, #0
    b75a:	461a      	mov	r2, r3
    b75c:	4619      	mov	r1, r3
    b75e:	4618      	mov	r0, r3
    b760:	f7fd fbf8 	bl	8f54 <__assert_func>
        rng->frames[i] = &twr[i];
    b764:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    b768:	eb00 1101 	add.w	r1, r0, r1, lsl #4
    b76c:	f103 0226 	add.w	r2, r3, #38	; 0x26
    b770:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    b774:	6051      	str	r1, [r2, #4]
    for (i = 0; i < nframes; i++)
    b776:	3301      	adds	r3, #1
    b778:	b29b      	uxth	r3, r3
    b77a:	2b03      	cmp	r3, #3
    b77c:	d9f2      	bls.n	b764 <uwb_rng_pkg_init+0x58>
        uwb_mac_append_interface(udev, &g_cbs[i]);
    b77e:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
    b782:	490d      	ldr	r1, [pc, #52]	; (b7b8 <uwb_rng_pkg_init+0xac>)
    b784:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    b788:	4630      	mov	r0, r6
    b78a:	f7fd f969 	bl	8a60 <uwb_mac_append_interface>
    memset(ev, 0, sizeof(*ev));
    b78e:	2300      	movs	r3, #0
    b790:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    b794:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    b798:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    b79c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    ev->ev.ev_cb = (os_event_fn *)fn;
    b7a0:	4b07      	ldr	r3, [pc, #28]	; (b7c0 <uwb_rng_pkg_init+0xb4>)
    b7a2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    ev->ev.ev_arg = arg;
    b7a6:	f8c4 4090 	str.w	r4, [r4, #144]	; 0x90
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
    b7aa:	3501      	adds	r5, #1
    b7ac:	e7b6      	b.n	b71c <uwb_rng_pkg_init+0x10>
    b7ae:	bf00      	nop
    b7b0:	00021a70 	.word	0x00021a70
    b7b4:	20000144 	.word	0x20000144
    b7b8:	20000108 	.word	0x20000108
    b7bc:	200050e8 	.word	0x200050e8
    b7c0:	0000acc5 	.word	0x0000acc5

0000b7c4 <uwb_rng_pkg_init2>:
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
        if (!g_cbs[i].inst_ptr) continue;
        uwbrng_sysfs_init((struct uwb_rng_instance *)g_cbs[i].inst_ptr);
    }
#endif
}
    b7c4:	4770      	bx	lr
	...

0000b7c8 <uwb_rng_pkg_down>:

int
uwb_rng_pkg_down(int reason)
{
    b7c8:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_rng_instance * rng;

    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
    b7ca:	2400      	movs	r4, #0
    b7cc:	b10c      	cbz	r4, b7d2 <uwb_rng_pkg_down+0xa>
        uwb_rng_free(g_cbs[i].inst_ptr);
        g_cbs[i].inst_ptr = 0;
    }

    return 0;
}
    b7ce:	2000      	movs	r0, #0
    b7d0:	bd38      	pop	{r3, r4, r5, pc}
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
    b7d2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
    b7d6:	009a      	lsls	r2, r3, #2
    b7d8:	4b08      	ldr	r3, [pc, #32]	; (b7fc <uwb_rng_pkg_down+0x34>)
    b7da:	4413      	add	r3, r2
    b7dc:	685b      	ldr	r3, [r3, #4]
        if (!rng) continue;
    b7de:	b153      	cbz	r3, b7f6 <uwb_rng_pkg_down+0x2e>
        uwb_mac_remove_interface(rng->dev_inst, g_cbs[i].id);
    b7e0:	4d06      	ldr	r5, [pc, #24]	; (b7fc <uwb_rng_pkg_down+0x34>)
    b7e2:	4415      	add	r5, r2
    b7e4:	8869      	ldrh	r1, [r5, #2]
    b7e6:	6818      	ldr	r0, [r3, #0]
    b7e8:	f7fd f95f 	bl	8aaa <uwb_mac_remove_interface>
        uwb_rng_free(g_cbs[i].inst_ptr);
    b7ec:	6868      	ldr	r0, [r5, #4]
    b7ee:	f7ff fb15 	bl	ae1c <uwb_rng_free>
        g_cbs[i].inst_ptr = 0;
    b7f2:	2300      	movs	r3, #0
    b7f4:	606b      	str	r3, [r5, #4]
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
    b7f6:	3401      	adds	r4, #1
    b7f8:	e7e8      	b.n	b7cc <uwb_rng_pkg_down+0x4>
    b7fa:	bf00      	nop
    b7fc:	20000108 	.word	0x20000108

0000b800 <rng_encode>:
 * output parameters
 * returns void
 */
void
rng_encode(struct uwb_rng_instance * rng)
{
    b800:	b570      	push	{r4, r5, r6, lr}
    b802:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
    b806:	4605      	mov	r5, r0
    int rc;

    twr_frame_t * frame = rng->frames[rng->idx_current];
    b808:	f8b0 1078 	ldrh.w	r1, [r0, #120]	; 0x78
    b80c:	f101 0326 	add.w	r3, r1, #38	; 0x26
    b810:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    b814:	685c      	ldr	r4, [r3, #4]
    dpl_float64_t time_of_flight = uwb_rng_twr_to_tof(rng, rng->idx_current);
    b816:	f7ff fe37 	bl	b488 <uwb_rng_twr_to_tof>
    frame->local.spherical.range = uwb_rng_tof_to_meters(time_of_flight);
    b81a:	f00d fd19 	bl	19250 <uwb_rng_tof_to_meters>
    b81e:	ed84 0b22 	vstr	d0, [r4, #136]	; 0x88

    rng_json_t json = {
    b822:	f44f 7206 	mov.w	r2, #536	; 0x218
    b826:	2100      	movs	r1, #0
    b828:	4668      	mov	r0, sp
    b82a:	f000 fc30 	bl	c08e <memset>
#if MYNEWT_VAL(UWB_WCS_ENABLED)
        .utime = uwb_wcs_read_systime_master64(rng->dev_inst),
#else
        .utime = dpl_cputime_ticks_to_usecs(dpl_cputime_get32()),
    b82e:	f001 f8a7 	bl	c980 <dpl_cputime_get32>
    b832:	2300      	movs	r3, #0
    rng_json_t json = {
    b834:	901a      	str	r0, [sp, #104]	; 0x68
    b836:	931b      	str	r3, [sp, #108]	; 0x6c
#endif
        .uid = frame->src_address,
    b838:	f8b4 2007 	ldrh.w	r2, [r4, #7]
    rng_json_t json = {
    b83c:	9220      	str	r2, [sp, #128]	; 0x80
    b83e:	9321      	str	r3, [sp, #132]	; 0x84
        .ouid = frame->dst_address,
    b840:	f8b4 2005 	ldrh.w	r2, [r4, #5]
    rng_json_t json = {
    b844:	9222      	str	r2, [sp, #136]	; 0x88
    b846:	9323      	str	r3, [sp, #140]	; 0x8c
    b848:	2000      	movs	r0, #0
    b84a:	494e      	ldr	r1, [pc, #312]	; (b984 <rng_encode+0x184>)
    b84c:	e9cd 0140 	strd	r0, r1, [sp, #256]	; 0x100
    b850:	e9cd 0142 	strd	r0, r1, [sp, #264]	; 0x108
        .ppm = DPL_FLOAT64_NAN(),
        .sts = DPL_FLOAT64_NAN(),
        .idx =0
    };

    for (uint8_t i = 0;i< sizeof(json.raz)/sizeof(json.raz.array[0]);i++)
    b854:	e015      	b.n	b882 <rng_encode+0x82>
            json.raz.array[i] = json.braz.array[i] = json.los[i] = DPL_FLOAT64_NAN();
    b856:	f103 021c 	add.w	r2, r3, #28
    b85a:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
    b85e:	2000      	movs	r0, #0
    b860:	4948      	ldr	r1, [pc, #288]	; (b984 <rng_encode+0x184>)
    b862:	e9c2 0100 	strd	r0, r1, [r2]
    b866:	f103 0215 	add.w	r2, r3, #21
    b86a:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
    b86e:	e9c2 0100 	strd	r0, r1, [r2]
    b872:	f103 0212 	add.w	r2, r3, #18
    b876:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
    b87a:	e9c2 0100 	strd	r0, r1, [r2]
    for (uint8_t i = 0;i< sizeof(json.raz)/sizeof(json.raz.array[0]);i++)
    b87e:	3301      	adds	r3, #1
    b880:	b2db      	uxtb	r3, r3
    b882:	2b02      	cmp	r3, #2
    b884:	d9e7      	bls.n	b856 <rng_encode+0x56>

    switch(frame->code){
    b886:	f8b4 1009 	ldrh.w	r1, [r4, #9]
    b88a:	f5a1 7389 	sub.w	r3, r1, #274	; 0x112
    b88e:	2b16      	cmp	r3, #22
    b890:	d84b      	bhi.n	b92a <rng_encode+0x12a>
    b892:	e8df f003 	tbb	[pc, r3]
    b896:	4a1b      	.short	0x4a1b
    b898:	4a1d4a4a 	.word	0x4a1d4a4a
    b89c:	4a1b4a4a 	.word	0x4a1b4a4a
    b8a0:	4a4a4a4a 	.word	0x4a4a4a4a
    b8a4:	1b4a4a4a 	.word	0x1b4a4a4a
    b8a8:	4a4a4a4a 	.word	0x4a4a4a4a
    b8ac:	1d          	.byte	0x1d
    b8ad:	00          	.byte	0x00
        case UWB_DATA_CODE_SS_TWR_EXT_FINAL:
        case UWB_DATA_CODE_DS_TWR_EXT_FINAL:
        for (uint8_t i = 0; i < sizeof(json.braz)/sizeof(json.braz.array[0]);i++){
            json.braz.array[i] = frame->remote.spherical.array[i];
    b8ae:	1d1a      	adds	r2, r3, #4
    b8b0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    b8b4:	e9d2 0100 	ldrd	r0, r1, [r2]
    b8b8:	f103 0215 	add.w	r2, r3, #21
    b8bc:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
    b8c0:	e9c2 0100 	strd	r0, r1, [r2]
        for (uint8_t i = 0; i < sizeof(json.braz)/sizeof(json.braz.array[0]);i++){
    b8c4:	3301      	adds	r3, #1
    b8c6:	b2db      	uxtb	r3, r3
    b8c8:	2b02      	cmp	r3, #2
    b8ca:	d9f0      	bls.n	b8ae <rng_encode+0xae>
    switch(frame->code){
    b8cc:	2300      	movs	r3, #0
    b8ce:	e00f      	b.n	b8f0 <rng_encode+0xf0>
    b8d0:	2300      	movs	r3, #0
    b8d2:	e7f9      	b.n	b8c8 <rng_encode+0xc8>
        /* Intentionally fall through */
        case UWB_DATA_CODE_SS_TWR_FINAL:
        case UWB_DATA_CODE_SS_TWR_ACK_FINAL:
        case UWB_DATA_CODE_DS_TWR_FINAL:
        for (uint8_t i = 0; i < sizeof(json.raz)/sizeof(json.raz.array[0]);i++){
            json.raz.array[i] = frame->local.spherical.array[i];
    b8d4:	f103 0211 	add.w	r2, r3, #17
    b8d8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    b8dc:	e9d2 0100 	ldrd	r0, r1, [r2]
    b8e0:	f103 0212 	add.w	r2, r3, #18
    b8e4:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
    b8e8:	e9c2 0100 	strd	r0, r1, [r2]
        for (uint8_t i = 0; i < sizeof(json.raz)/sizeof(json.raz.array[0]);i++){
    b8ec:	3301      	adds	r3, #1
    b8ee:	b2db      	uxtb	r3, r3
    b8f0:	2b02      	cmp	r3, #2
    b8f2:	d9ef      	bls.n	b8d4 <rng_encode+0xd4>
        break;
        default: printf(",error: \"Unknown Frame Code\", %x\n", frame->code);
    }

#if MYNEWT_VAL(RNG_VERBOSE) > 1
    json.pd   = DPL_FLOAT64_FROM_F32(frame->local.pdoa);
    b8f4:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    b8f8:	f014 fa32 	bl	1fd60 <__aeabi_f2d>
    b8fc:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
    json.code = frame->code;
    b900:	f8b4 3009 	ldrh.w	r3, [r4, #9]
    b904:	931e      	str	r3, [sp, #120]	; 0x78
    b906:	2300      	movs	r3, #0
    b908:	931f      	str	r3, [sp, #124]	; 0x7c
    if(rng->dev_inst->config.rxdiag_enable){
    b90a:	682b      	ldr	r3, [r5, #0]
    b90c:	f893 3530 	ldrb.w	r3, [r3, #1328]	; 0x530
    b910:	f013 0f40 	tst.w	r3, #64	; 0x40
    b914:	d10d      	bne.n	b932 <rng_encode+0x132>
            json.rssi[i] = DPL_FLOAT64_FROM_F32(frame->local.vrssi[i]);
        dpl_float32_t fppl = frame->local.fppl;
        json.los[0] = DPL_FLOAT64_FROM_F32(uwb_estimate_los(rng->dev_inst, frame->local.rssi, fppl));
    }

    rc = rng_json_write(&json);
    b916:	4668      	mov	r0, sp
    b918:	f000 f85a 	bl	b9d0 <rng_json_write>
    assert(rc == 0);
    b91c:	bb60      	cbnz	r0, b978 <rng_encode+0x178>
    size_t n = strlen(json.iobuf);
    json.iobuf[n]='\n';
    json.iobuf[n+1]='\0';
    rng_encode_output(rng->dev_inst->idx, json.iobuf, strlen(json.iobuf));
#else
    printf("%s\n",json.iobuf);
    b91e:	a844      	add	r0, sp, #272	; 0x110
    b920:	f000 fa9c 	bl	be5c <puts>
#endif

}
    b924:	f50d 7d06 	add.w	sp, sp, #536	; 0x218
    b928:	bd70      	pop	{r4, r5, r6, pc}
        default: printf(",error: \"Unknown Frame Code\", %x\n", frame->code);
    b92a:	4817      	ldr	r0, [pc, #92]	; (b988 <rng_encode+0x188>)
    b92c:	f000 ffc2 	bl	c8b4 <printf>
    b930:	e7e0      	b.n	b8f4 <rng_encode+0xf4>
        for (uint8_t i=0;i< sizeof(json.rssi)/sizeof(json.rssi[0]);i++)
    b932:	2600      	movs	r6, #0
    b934:	2e02      	cmp	r6, #2
    b936:	d80f      	bhi.n	b958 <rng_encode+0x158>
            json.rssi[i] = DPL_FLOAT64_FROM_F32(frame->local.vrssi[i]);
    b938:	f106 0338 	add.w	r3, r6, #56	; 0x38
    b93c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    b940:	6818      	ldr	r0, [r3, #0]
    b942:	f014 fa0d 	bl	1fd60 <__aeabi_f2d>
    b946:	f106 0318 	add.w	r3, r6, #24
    b94a:	eb0d 03c3 	add.w	r3, sp, r3, lsl #3
    b94e:	e9c3 0100 	strd	r0, r1, [r3]
        for (uint8_t i=0;i< sizeof(json.rssi)/sizeof(json.rssi[0]);i++)
    b952:	3601      	adds	r6, #1
    b954:	b2f6      	uxtb	r6, r6
    b956:	e7ed      	b.n	b934 <rng_encode+0x134>
        json.los[0] = DPL_FLOAT64_FROM_F32(uwb_estimate_los(rng->dev_inst, frame->local.rssi, fppl));
    b958:	6828      	ldr	r0, [r5, #0]
    return (dev->uw_funcs->uf_estimate_los(dev, rssi, fppl));
    b95a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b95c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    b960:	edd4 0a35 	vldr	s1, [r4, #212]	; 0xd4
    b964:	ed94 0a34 	vldr	s0, [r4, #208]	; 0xd0
    b968:	4798      	blx	r3
    b96a:	ee10 0a10 	vmov	r0, s0
    b96e:	f014 f9f7 	bl	1fd60 <__aeabi_f2d>
    b972:	e9cd 0138 	strd	r0, r1, [sp, #224]	; 0xe0
    b976:	e7ce      	b.n	b916 <rng_encode+0x116>
    assert(rc == 0);
    b978:	2300      	movs	r3, #0
    b97a:	461a      	mov	r2, r3
    b97c:	4619      	mov	r1, r3
    b97e:	4618      	mov	r0, r3
    b980:	f7fd fae8 	bl	8f54 <__assert_func>
    b984:	7ff80000 	.word	0x7ff80000
    b988:	00021b7c 	.word	0x00021b7c

0000b98c <rng_write_line>:
        free(json);
}

static int
rng_write_line(void *buf, char* data, int len)
{
    b98c:	b510      	push	{r4, lr}
    b98e:	4686      	mov	lr, r0
    b990:	4610      	mov	r0, r2
    rng_json_t * json = buf;
    for (uint16_t i=0; i < len; i++){
    b992:	2300      	movs	r3, #0
    b994:	e001      	b.n	b99a <rng_write_line+0xe>
    b996:	3301      	adds	r3, #1
    b998:	b29b      	uxth	r3, r3
    b99a:	4283      	cmp	r3, r0
    b99c:	da0d      	bge.n	b9ba <rng_write_line+0x2e>
        json->iobuf[(json->idx++)%MYNEWT_VAL(UWB_RNG_JSON_BUFSIZE)] = data[i];
    b99e:	f8be c210 	ldrh.w	ip, [lr, #528]	; 0x210
    b9a2:	f10c 0401 	add.w	r4, ip, #1
    b9a6:	f8ae 4210 	strh.w	r4, [lr, #528]	; 0x210
    b9aa:	5ccc      	ldrb	r4, [r1, r3]
    b9ac:	fa5e fc8c 	uxtab	ip, lr, ip
    b9b0:	f88c 4110 	strb.w	r4, [ip, #272]	; 0x110
        if (data[i]=='\0'){
    b9b4:	5ccc      	ldrb	r4, [r1, r3]
    b9b6:	2c00      	cmp	r4, #0
    b9b8:	d1ed      	bne.n	b996 <rng_write_line+0xa>
            break;
        }
    }
    if (json->iobuf[json->idx-1]=='\0')
    b9ba:	f8be 3210 	ldrh.w	r3, [lr, #528]	; 0x210
    b9be:	3b01      	subs	r3, #1
    b9c0:	4473      	add	r3, lr
    b9c2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
    b9c6:	b90b      	cbnz	r3, b9cc <rng_write_line+0x40>
        json->idx = 0;
    b9c8:	f8ae 3210 	strh.w	r3, [lr, #528]	; 0x210
    return len;
}
    b9cc:	bd10      	pop	{r4, pc}
	...

0000b9d0 <rng_json_write>:

int
rng_json_write(rng_json_t * json){
    b9d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b9d4:	b085      	sub	sp, #20
    b9d6:	4604      	mov	r4, r0

    struct json_value value;
    int rc;

    json->encoder.je_write = rng_write_line;
    b9d8:	4bbe      	ldr	r3, [pc, #760]	; (bcd4 <rng_json_write+0x304>)
    b9da:	6183      	str	r3, [r0, #24]
    json->encoder.je_arg = (void *)json;
    b9dc:	61c0      	str	r0, [r0, #28]
    json->decoder.json_buf.jb_read_next = json_read_next;
    b9de:	4bbe      	ldr	r3, [pc, #760]	; (bcd8 <rng_json_write+0x308>)
    b9e0:	6043      	str	r3, [r0, #4]
    json->decoder.json_buf.jb_read_prev = json_read_prev;
    b9e2:	4bbe      	ldr	r3, [pc, #760]	; (bcdc <rng_json_write+0x30c>)
    b9e4:	6083      	str	r3, [r0, #8]
    json->decoder.json_buf.jb_readn = json_readn;
    b9e6:	4bbe      	ldr	r3, [pc, #760]	; (bce0 <rng_json_write+0x310>)
    b9e8:	6003      	str	r3, [r0, #0]
    json->encoder.je_wr_commas = 0;
    b9ea:	f890 3020 	ldrb.w	r3, [r0, #32]
    b9ee:	f36f 0300 	bfc	r3, #0, #1
    b9f2:	f880 3020 	strb.w	r3, [r0, #32]

    rc = json_encode_object_start(&json->encoder);
    b9f6:	f100 0518 	add.w	r5, r0, #24
    b9fa:	4628      	mov	r0, r5
    b9fc:	f00d f9c0 	bl	18d80 <json_encode_object_start>
    ba00:	4606      	mov	r6, r0
    JSON_VALUE_UINT(&value, json->utime);
    ba02:	2301      	movs	r3, #1
    ba04:	f88d 3001 	strb.w	r3, [sp, #1]
    ba08:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
    ba0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rc |= json_encode_object_entry(&json->encoder, "utime", &value);
    ba10:	466a      	mov	r2, sp
    ba12:	49b4      	ldr	r1, [pc, #720]	; (bce4 <rng_json_write+0x314>)
    ba14:	4628      	mov	r0, r5
    ba16:	f00d f9fb 	bl	18e10 <json_encode_object_entry>
    ba1a:	4306      	orrs	r6, r0

    if (json->seq){
    ba1c:	6f22      	ldr	r2, [r4, #112]	; 0x70
    ba1e:	6f63      	ldr	r3, [r4, #116]	; 0x74
    ba20:	ea52 0103 	orrs.w	r1, r2, r3
    ba24:	d126      	bne.n	ba74 <rng_json_write+0xa4>
        JSON_VALUE_UINT(&value, json->seq);
        rc |= json_encode_object_entry(&json->encoder, "seq", &value);
    }
    if (json->code){
    ba26:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    ba28:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    ba2a:	ea52 0103 	orrs.w	r1, r2, r3
    ba2e:	d12d      	bne.n	ba8c <rng_json_write+0xbc>
        JSON_VALUE_UINT(&value, json->code);
        rc |= json_encode_object_entry(&json->encoder, "c", &value);
    }
    if (json->uid){
    ba30:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    ba34:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    ba38:	ea52 0103 	orrs.w	r1, r2, r3
    ba3c:	d132      	bne.n	baa4 <rng_json_write+0xd4>
        JSON_VALUE_UINT(&value, json->uid);
        rc |= json_encode_object_entry(&json->encoder, "uid", &value);
    }
    if (json->ouid){
    ba3e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    ba42:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    ba46:	ea52 0103 	orrs.w	r1, r2, r3
    ba4a:	d137      	bne.n	babc <rng_json_write+0xec>
        JSON_VALUE_UINT(&value, json->ouid);
        rc |= json_encode_object_entry(&json->encoder, "ouid", &value);
    }

    if(DPL_FLOAT64_ISNAN(json->raz.azimuth) && DPL_FLOAT64_ISNAN(json->raz.zenith)){
    ba4c:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
    ba50:	4602      	mov	r2, r0
    ba52:	460b      	mov	r3, r1
    ba54:	f014 fc76 	bl	20344 <__aeabi_dcmpun>
    ba58:	2800      	cmp	r0, #0
    ba5a:	d13b      	bne.n	bad4 <rng_json_write+0x104>
        rc |= json_encode_array_start(&json->encoder);
        JSON_VALUE_FLOAT64(&value, json->raz.range);
        rc |= json_encode_array_value(&json->encoder, &value);
        rc |= json_encode_array_finish(&json->encoder);
    }else{
        rc |= json_encode_array_name(&json->encoder, "raz");
    ba5c:	49a2      	ldr	r1, [pc, #648]	; (bce8 <rng_json_write+0x318>)
    ba5e:	4628      	mov	r0, r5
    ba60:	f00d fb8c 	bl	1917c <json_encode_array_name>
    ba64:	4306      	orrs	r6, r0
        rc |= json_encode_array_start(&json->encoder);
    ba66:	4628      	mov	r0, r5
    ba68:	f00d fb8c 	bl	19184 <json_encode_array_start>
    ba6c:	ea46 0700 	orr.w	r7, r6, r0
        for (uint8_t i = 0; i< sizeof(json->raz)/sizeof(dpl_float64_t); i++){
    ba70:	2600      	movs	r6, #0
    ba72:	e063      	b.n	bb3c <rng_json_write+0x16c>
        JSON_VALUE_UINT(&value, json->seq);
    ba74:	2101      	movs	r1, #1
    ba76:	f88d 1001 	strb.w	r1, [sp, #1]
    ba7a:	9202      	str	r2, [sp, #8]
    ba7c:	9303      	str	r3, [sp, #12]
        rc |= json_encode_object_entry(&json->encoder, "seq", &value);
    ba7e:	466a      	mov	r2, sp
    ba80:	499a      	ldr	r1, [pc, #616]	; (bcec <rng_json_write+0x31c>)
    ba82:	4628      	mov	r0, r5
    ba84:	f00d f9c4 	bl	18e10 <json_encode_object_entry>
    ba88:	4306      	orrs	r6, r0
    ba8a:	e7cc      	b.n	ba26 <rng_json_write+0x56>
        JSON_VALUE_UINT(&value, json->code);
    ba8c:	2101      	movs	r1, #1
    ba8e:	f88d 1001 	strb.w	r1, [sp, #1]
    ba92:	9202      	str	r2, [sp, #8]
    ba94:	9303      	str	r3, [sp, #12]
        rc |= json_encode_object_entry(&json->encoder, "c", &value);
    ba96:	466a      	mov	r2, sp
    ba98:	4995      	ldr	r1, [pc, #596]	; (bcf0 <rng_json_write+0x320>)
    ba9a:	4628      	mov	r0, r5
    ba9c:	f00d f9b8 	bl	18e10 <json_encode_object_entry>
    baa0:	4306      	orrs	r6, r0
    baa2:	e7c5      	b.n	ba30 <rng_json_write+0x60>
        JSON_VALUE_UINT(&value, json->uid);
    baa4:	2101      	movs	r1, #1
    baa6:	f88d 1001 	strb.w	r1, [sp, #1]
    baaa:	9202      	str	r2, [sp, #8]
    baac:	9303      	str	r3, [sp, #12]
        rc |= json_encode_object_entry(&json->encoder, "uid", &value);
    baae:	466a      	mov	r2, sp
    bab0:	4990      	ldr	r1, [pc, #576]	; (bcf4 <rng_json_write+0x324>)
    bab2:	4628      	mov	r0, r5
    bab4:	f00d f9ac 	bl	18e10 <json_encode_object_entry>
    bab8:	4306      	orrs	r6, r0
    baba:	e7c0      	b.n	ba3e <rng_json_write+0x6e>
        JSON_VALUE_UINT(&value, json->ouid);
    babc:	2101      	movs	r1, #1
    babe:	f88d 1001 	strb.w	r1, [sp, #1]
    bac2:	9202      	str	r2, [sp, #8]
    bac4:	9303      	str	r3, [sp, #12]
        rc |= json_encode_object_entry(&json->encoder, "ouid", &value);
    bac6:	466a      	mov	r2, sp
    bac8:	498b      	ldr	r1, [pc, #556]	; (bcf8 <rng_json_write+0x328>)
    baca:	4628      	mov	r0, r5
    bacc:	f00d f9a0 	bl	18e10 <json_encode_object_entry>
    bad0:	4306      	orrs	r6, r0
    bad2:	e7bb      	b.n	ba4c <rng_json_write+0x7c>
    if(DPL_FLOAT64_ISNAN(json->raz.azimuth) && DPL_FLOAT64_ISNAN(json->raz.zenith)){
    bad4:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    bad8:	4602      	mov	r2, r0
    bada:	460b      	mov	r3, r1
    badc:	f014 fc32 	bl	20344 <__aeabi_dcmpun>
    bae0:	2800      	cmp	r0, #0
    bae2:	d0bb      	beq.n	ba5c <rng_json_write+0x8c>
        rc |= json_encode_array_name(&json->encoder, "raz");
    bae4:	4980      	ldr	r1, [pc, #512]	; (bce8 <rng_json_write+0x318>)
    bae6:	4628      	mov	r0, r5
    bae8:	f00d fb48 	bl	1917c <json_encode_array_name>
    baec:	4306      	orrs	r6, r0
        rc |= json_encode_array_start(&json->encoder);
    baee:	4628      	mov	r0, r5
    baf0:	f00d fb48 	bl	19184 <json_encode_array_start>
    baf4:	4306      	orrs	r6, r0
        JSON_VALUE_FLOAT64(&value, json->raz.range);
    baf6:	2306      	movs	r3, #6
    baf8:	f88d 3001 	strb.w	r3, [sp, #1]
    bafc:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
    bb00:	e9cd 2302 	strd	r2, r3, [sp, #8]
        rc |= json_encode_array_value(&json->encoder, &value);
    bb04:	4669      	mov	r1, sp
    bb06:	4628      	mov	r0, r5
    bb08:	f00d fb4c 	bl	191a4 <json_encode_array_value>
    bb0c:	4306      	orrs	r6, r0
        rc |= json_encode_array_finish(&json->encoder);
    bb0e:	4628      	mov	r0, r5
    bb10:	f00d fb64 	bl	191dc <json_encode_array_finish>
    bb14:	4306      	orrs	r6, r0
    bb16:	e018      	b.n	bb4a <rng_json_write+0x17a>
            JSON_VALUE_FLOAT64(&value, json->raz.array[i]);
    bb18:	2306      	movs	r3, #6
    bb1a:	f88d 3001 	strb.w	r3, [sp, #1]
    bb1e:	f106 0312 	add.w	r3, r6, #18
    bb22:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    bb26:	e9d3 2300 	ldrd	r2, r3, [r3]
    bb2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
            rc |= json_encode_array_value(&json->encoder, &value);
    bb2e:	4669      	mov	r1, sp
    bb30:	4628      	mov	r0, r5
    bb32:	f00d fb37 	bl	191a4 <json_encode_array_value>
    bb36:	4307      	orrs	r7, r0
        for (uint8_t i = 0; i< sizeof(json->raz)/sizeof(dpl_float64_t); i++){
    bb38:	3601      	adds	r6, #1
    bb3a:	b2f6      	uxtb	r6, r6
    bb3c:	2e02      	cmp	r6, #2
    bb3e:	d9eb      	bls.n	bb18 <rng_json_write+0x148>
        }
        rc |= json_encode_array_finish(&json->encoder);
    bb40:	4628      	mov	r0, r5
    bb42:	f00d fb4b 	bl	191dc <json_encode_array_finish>
    bb46:	ea47 0600 	orr.w	r6, r7, r0
    }

    if(!DPL_FLOAT64_ISNAN(json->braz.range)){
    bb4a:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
    bb4e:	4602      	mov	r2, r0
    bb50:	460b      	mov	r3, r1
    bb52:	f014 fbf7 	bl	20344 <__aeabi_dcmpun>
    bb56:	2800      	cmp	r0, #0
    bb58:	d14b      	bne.n	bbf2 <rng_json_write+0x222>
        if(DPL_FLOAT64_ISNAN(json->braz.azimuth) && DPL_FLOAT64_ISNAN(json->braz.zenith)){
    bb5a:	e9d4 012c 	ldrd	r0, r1, [r4, #176]	; 0xb0
    bb5e:	4602      	mov	r2, r0
    bb60:	460b      	mov	r3, r1
    bb62:	f014 fbef 	bl	20344 <__aeabi_dcmpun>
    bb66:	b950      	cbnz	r0, bb7e <rng_json_write+0x1ae>
            rc |= json_encode_array_start(&json->encoder);
            JSON_VALUE_FLOAT64(&value, json->braz.range);
            rc |= json_encode_array_value(&json->encoder, &value);
            rc |= json_encode_array_finish(&json->encoder);
        }else{
            rc |= json_encode_array_name(&json->encoder, "braz");
    bb68:	4964      	ldr	r1, [pc, #400]	; (bcfc <rng_json_write+0x32c>)
    bb6a:	4628      	mov	r0, r5
    bb6c:	f00d fb06 	bl	1917c <json_encode_array_name>
    bb70:	4306      	orrs	r6, r0
            rc |= json_encode_array_start(&json->encoder);
    bb72:	4628      	mov	r0, r5
    bb74:	f00d fb06 	bl	19184 <json_encode_array_start>
    bb78:	4306      	orrs	r6, r0
            for (uint8_t i = 0; i< sizeof(json->braz)/sizeof(dpl_float64_t); i++){
    bb7a:	2700      	movs	r7, #0
    bb7c:	e033      	b.n	bbe6 <rng_json_write+0x216>
        if(DPL_FLOAT64_ISNAN(json->braz.azimuth) && DPL_FLOAT64_ISNAN(json->braz.zenith)){
    bb7e:	e9d4 012e 	ldrd	r0, r1, [r4, #184]	; 0xb8
    bb82:	4602      	mov	r2, r0
    bb84:	460b      	mov	r3, r1
    bb86:	f014 fbdd 	bl	20344 <__aeabi_dcmpun>
    bb8a:	2800      	cmp	r0, #0
    bb8c:	d0ec      	beq.n	bb68 <rng_json_write+0x198>
            rc |= json_encode_array_name(&json->encoder, "braz");
    bb8e:	495b      	ldr	r1, [pc, #364]	; (bcfc <rng_json_write+0x32c>)
    bb90:	4628      	mov	r0, r5
    bb92:	f00d faf3 	bl	1917c <json_encode_array_name>
    bb96:	4306      	orrs	r6, r0
            rc |= json_encode_array_start(&json->encoder);
    bb98:	4628      	mov	r0, r5
    bb9a:	f00d faf3 	bl	19184 <json_encode_array_start>
    bb9e:	4306      	orrs	r6, r0
            JSON_VALUE_FLOAT64(&value, json->braz.range);
    bba0:	2306      	movs	r3, #6
    bba2:	f88d 3001 	strb.w	r3, [sp, #1]
    bba6:	e9d4 232a 	ldrd	r2, r3, [r4, #168]	; 0xa8
    bbaa:	e9cd 2302 	strd	r2, r3, [sp, #8]
            rc |= json_encode_array_value(&json->encoder, &value);
    bbae:	4669      	mov	r1, sp
    bbb0:	4628      	mov	r0, r5
    bbb2:	f00d faf7 	bl	191a4 <json_encode_array_value>
    bbb6:	4306      	orrs	r6, r0
            rc |= json_encode_array_finish(&json->encoder);
    bbb8:	4628      	mov	r0, r5
    bbba:	f00d fb0f 	bl	191dc <json_encode_array_finish>
    bbbe:	4306      	orrs	r6, r0
    bbc0:	e017      	b.n	bbf2 <rng_json_write+0x222>
                JSON_VALUE_FLOAT64(&value, json->braz.array[i]);
    bbc2:	2306      	movs	r3, #6
    bbc4:	f88d 3001 	strb.w	r3, [sp, #1]
    bbc8:	f107 0315 	add.w	r3, r7, #21
    bbcc:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    bbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
    bbd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
                rc |= json_encode_array_value(&json->encoder, &value);
    bbd8:	4669      	mov	r1, sp
    bbda:	4628      	mov	r0, r5
    bbdc:	f00d fae2 	bl	191a4 <json_encode_array_value>
    bbe0:	4306      	orrs	r6, r0
            for (uint8_t i = 0; i< sizeof(json->braz)/sizeof(dpl_float64_t); i++){
    bbe2:	3701      	adds	r7, #1
    bbe4:	b2ff      	uxtb	r7, r7
    bbe6:	2f02      	cmp	r7, #2
    bbe8:	d9eb      	bls.n	bbc2 <rng_json_write+0x1f2>
            }
            rc |= json_encode_array_finish(&json->encoder);
    bbea:	4628      	mov	r0, r5
    bbec:	f00d faf6 	bl	191dc <json_encode_array_finish>
    bbf0:	4306      	orrs	r6, r0
        }
    }

    if(!DPL_FLOAT64_ISNAN(json->rssi[0])){
    bbf2:	e9d4 8930 	ldrd	r8, r9, [r4, #192]	; 0xc0
    bbf6:	4642      	mov	r2, r8
    bbf8:	464b      	mov	r3, r9
    bbfa:	4640      	mov	r0, r8
    bbfc:	4649      	mov	r1, r9
    bbfe:	f014 fba1 	bl	20344 <__aeabi_dcmpun>
    bc02:	2800      	cmp	r0, #0
    bc04:	d149      	bne.n	bc9a <rng_json_write+0x2ca>
        if(!DPL_FLOAT64_ISNAN(json->rssi[0]) && DPL_FLOAT64_ISNAN(json->rssi[1]) && DPL_FLOAT64_ISNAN(json->rssi[2])){
    bc06:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
    bc0a:	4602      	mov	r2, r0
    bc0c:	460b      	mov	r3, r1
    bc0e:	f014 fb99 	bl	20344 <__aeabi_dcmpun>
    bc12:	b950      	cbnz	r0, bc2a <rng_json_write+0x25a>
                rc |= json_encode_array_name(&json->encoder, "rssi");
                rc |= json_encode_array_start(&json->encoder);
                rc |= json_encode_array_value(&json->encoder, &value);
                rc |= json_encode_array_finish(&json->encoder);
        }else{
                rc |= json_encode_array_name(&json->encoder, "rssi");
    bc14:	493a      	ldr	r1, [pc, #232]	; (bd00 <rng_json_write+0x330>)
    bc16:	4628      	mov	r0, r5
    bc18:	f00d fab0 	bl	1917c <json_encode_array_name>
    bc1c:	4306      	orrs	r6, r0
                rc |= json_encode_array_start(&json->encoder);
    bc1e:	4628      	mov	r0, r5
    bc20:	f00d fab0 	bl	19184 <json_encode_array_start>
    bc24:	4306      	orrs	r6, r0
                for (uint8_t i = 0; i< sizeof(json->rssi)/sizeof(dpl_float64_t); i++){
    bc26:	2700      	movs	r7, #0
    bc28:	e031      	b.n	bc8e <rng_json_write+0x2be>
        if(!DPL_FLOAT64_ISNAN(json->rssi[0]) && DPL_FLOAT64_ISNAN(json->rssi[1]) && DPL_FLOAT64_ISNAN(json->rssi[2])){
    bc2a:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
    bc2e:	4602      	mov	r2, r0
    bc30:	460b      	mov	r3, r1
    bc32:	f014 fb87 	bl	20344 <__aeabi_dcmpun>
    bc36:	2800      	cmp	r0, #0
    bc38:	d0ec      	beq.n	bc14 <rng_json_write+0x244>
                JSON_VALUE_FLOAT64(&value, json->rssi[0]);
    bc3a:	2306      	movs	r3, #6
    bc3c:	f88d 3001 	strb.w	r3, [sp, #1]
    bc40:	e9cd 8902 	strd	r8, r9, [sp, #8]
                rc |= json_encode_array_name(&json->encoder, "rssi");
    bc44:	492e      	ldr	r1, [pc, #184]	; (bd00 <rng_json_write+0x330>)
    bc46:	4628      	mov	r0, r5
    bc48:	f00d fa98 	bl	1917c <json_encode_array_name>
    bc4c:	4306      	orrs	r6, r0
                rc |= json_encode_array_start(&json->encoder);
    bc4e:	4628      	mov	r0, r5
    bc50:	f00d fa98 	bl	19184 <json_encode_array_start>
    bc54:	4306      	orrs	r6, r0
                rc |= json_encode_array_value(&json->encoder, &value);
    bc56:	4669      	mov	r1, sp
    bc58:	4628      	mov	r0, r5
    bc5a:	f00d faa3 	bl	191a4 <json_encode_array_value>
    bc5e:	4306      	orrs	r6, r0
                rc |= json_encode_array_finish(&json->encoder);
    bc60:	4628      	mov	r0, r5
    bc62:	f00d fabb 	bl	191dc <json_encode_array_finish>
    bc66:	4306      	orrs	r6, r0
    bc68:	e017      	b.n	bc9a <rng_json_write+0x2ca>
                    JSON_VALUE_FLOAT64(&value, json->rssi[i]);
    bc6a:	2306      	movs	r3, #6
    bc6c:	f88d 3001 	strb.w	r3, [sp, #1]
    bc70:	f107 0318 	add.w	r3, r7, #24
    bc74:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    bc78:	e9d3 2300 	ldrd	r2, r3, [r3]
    bc7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    rc |= json_encode_array_value(&json->encoder, &value);
    bc80:	4669      	mov	r1, sp
    bc82:	4628      	mov	r0, r5
    bc84:	f00d fa8e 	bl	191a4 <json_encode_array_value>
    bc88:	4306      	orrs	r6, r0
                for (uint8_t i = 0; i< sizeof(json->rssi)/sizeof(dpl_float64_t); i++){
    bc8a:	3701      	adds	r7, #1
    bc8c:	b2ff      	uxtb	r7, r7
    bc8e:	2f02      	cmp	r7, #2
    bc90:	d9eb      	bls.n	bc6a <rng_json_write+0x29a>
                }
                rc |= json_encode_array_finish(&json->encoder);
    bc92:	4628      	mov	r0, r5
    bc94:	f00d faa2 	bl	191dc <json_encode_array_finish>
    bc98:	4306      	orrs	r6, r0
        }
    }

    if(!DPL_FLOAT64_ISNAN(json->los[0])){
    bc9a:	e9d4 8938 	ldrd	r8, r9, [r4, #224]	; 0xe0
    bc9e:	4642      	mov	r2, r8
    bca0:	464b      	mov	r3, r9
    bca2:	4640      	mov	r0, r8
    bca4:	4649      	mov	r1, r9
    bca6:	f014 fb4d 	bl	20344 <__aeabi_dcmpun>
    bcaa:	2800      	cmp	r0, #0
    bcac:	d164      	bne.n	bd78 <rng_json_write+0x3a8>
        if(!DPL_FLOAT64_ISNAN(json->los[0]) && DPL_FLOAT64_ISNAN(json->los[1]) && DPL_FLOAT64_ISNAN(json->los[2])){
    bcae:	e9d4 013a 	ldrd	r0, r1, [r4, #232]	; 0xe8
    bcb2:	4602      	mov	r2, r0
    bcb4:	460b      	mov	r3, r1
    bcb6:	f014 fb45 	bl	20344 <__aeabi_dcmpun>
    bcba:	bb28      	cbnz	r0, bd08 <rng_json_write+0x338>
                rc |= json_encode_array_name(&json->encoder, "los");
                rc |= json_encode_array_start(&json->encoder);
                rc |= json_encode_array_value(&json->encoder, &value);
                rc |= json_encode_array_finish(&json->encoder);
        }else{
                rc |= json_encode_array_name(&json->encoder, "los");
    bcbc:	4911      	ldr	r1, [pc, #68]	; (bd04 <rng_json_write+0x334>)
    bcbe:	4628      	mov	r0, r5
    bcc0:	f00d fa5c 	bl	1917c <json_encode_array_name>
    bcc4:	4306      	orrs	r6, r0
                rc |= json_encode_array_start(&json->encoder);
    bcc6:	4628      	mov	r0, r5
    bcc8:	f00d fa5c 	bl	19184 <json_encode_array_start>
    bccc:	4306      	orrs	r6, r0
                for (uint8_t i = 0; i< sizeof(json->los)/sizeof(dpl_float64_t); i++){
    bcce:	2700      	movs	r7, #0
    bcd0:	e04c      	b.n	bd6c <rng_json_write+0x39c>
    bcd2:	bf00      	nop
    bcd4:	0000b98d 	.word	0x0000b98d
    bcd8:	000191f9 	.word	0x000191f9
    bcdc:	00019215 	.word	0x00019215
    bce0:	00019227 	.word	0x00019227
    bce4:	00021ba0 	.word	0x00021ba0
    bce8:	00021bb8 	.word	0x00021bb8
    bcec:	00021ba8 	.word	0x00021ba8
    bcf0:	00021788 	.word	0x00021788
    bcf4:	00021bac 	.word	0x00021bac
    bcf8:	00021bb0 	.word	0x00021bb0
    bcfc:	00021bbc 	.word	0x00021bbc
    bd00:	00021bc4 	.word	0x00021bc4
    bd04:	00021bcc 	.word	0x00021bcc
        if(!DPL_FLOAT64_ISNAN(json->los[0]) && DPL_FLOAT64_ISNAN(json->los[1]) && DPL_FLOAT64_ISNAN(json->los[2])){
    bd08:	e9d4 013c 	ldrd	r0, r1, [r4, #240]	; 0xf0
    bd0c:	4602      	mov	r2, r0
    bd0e:	460b      	mov	r3, r1
    bd10:	f014 fb18 	bl	20344 <__aeabi_dcmpun>
    bd14:	2800      	cmp	r0, #0
    bd16:	d0d1      	beq.n	bcbc <rng_json_write+0x2ec>
                JSON_VALUE_FLOAT64(&value, json->los[0]);
    bd18:	2306      	movs	r3, #6
    bd1a:	f88d 3001 	strb.w	r3, [sp, #1]
    bd1e:	e9cd 8902 	strd	r8, r9, [sp, #8]
                rc |= json_encode_array_name(&json->encoder, "los");
    bd22:	4936      	ldr	r1, [pc, #216]	; (bdfc <rng_json_write+0x42c>)
    bd24:	4628      	mov	r0, r5
    bd26:	f00d fa29 	bl	1917c <json_encode_array_name>
    bd2a:	4306      	orrs	r6, r0
                rc |= json_encode_array_start(&json->encoder);
    bd2c:	4628      	mov	r0, r5
    bd2e:	f00d fa29 	bl	19184 <json_encode_array_start>
    bd32:	4306      	orrs	r6, r0
                rc |= json_encode_array_value(&json->encoder, &value);
    bd34:	4669      	mov	r1, sp
    bd36:	4628      	mov	r0, r5
    bd38:	f00d fa34 	bl	191a4 <json_encode_array_value>
    bd3c:	4306      	orrs	r6, r0
                rc |= json_encode_array_finish(&json->encoder);
    bd3e:	4628      	mov	r0, r5
    bd40:	f00d fa4c 	bl	191dc <json_encode_array_finish>
    bd44:	4306      	orrs	r6, r0
    bd46:	e017      	b.n	bd78 <rng_json_write+0x3a8>
                    JSON_VALUE_FLOAT64(&value, json->los[i]);
    bd48:	2306      	movs	r3, #6
    bd4a:	f88d 3001 	strb.w	r3, [sp, #1]
    bd4e:	f107 031c 	add.w	r3, r7, #28
    bd52:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    bd56:	e9d3 2300 	ldrd	r2, r3, [r3]
    bd5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    rc |= json_encode_array_value(&json->encoder, &value);
    bd5e:	4669      	mov	r1, sp
    bd60:	4628      	mov	r0, r5
    bd62:	f00d fa1f 	bl	191a4 <json_encode_array_value>
    bd66:	4306      	orrs	r6, r0
                for (uint8_t i = 0; i< sizeof(json->los)/sizeof(dpl_float64_t); i++){
    bd68:	3701      	adds	r7, #1
    bd6a:	b2ff      	uxtb	r7, r7
    bd6c:	2f02      	cmp	r7, #2
    bd6e:	d9eb      	bls.n	bd48 <rng_json_write+0x378>
                }
                rc |= json_encode_array_finish(&json->encoder);
    bd70:	4628      	mov	r0, r5
    bd72:	f00d fa33 	bl	191dc <json_encode_array_finish>
    bd76:	4306      	orrs	r6, r0
        }
    }

    if (!DPL_FLOAT64_ISNAN(json->ppm)){
    bd78:	e9d4 8940 	ldrd	r8, r9, [r4, #256]	; 0x100
    bd7c:	4642      	mov	r2, r8
    bd7e:	464b      	mov	r3, r9
    bd80:	4640      	mov	r0, r8
    bd82:	4649      	mov	r1, r9
    bd84:	f014 fade 	bl	20344 <__aeabi_dcmpun>
    bd88:	b950      	cbnz	r0, bda0 <rng_json_write+0x3d0>
        JSON_VALUE_FLOAT64(&value, json->ppm);
    bd8a:	2306      	movs	r3, #6
    bd8c:	f88d 3001 	strb.w	r3, [sp, #1]
    bd90:	e9cd 8902 	strd	r8, r9, [sp, #8]
        rc |= json_encode_object_entry(&json->encoder, "ppm", &value);
    bd94:	466a      	mov	r2, sp
    bd96:	491a      	ldr	r1, [pc, #104]	; (be00 <rng_json_write+0x430>)
    bd98:	4628      	mov	r0, r5
    bd9a:	f00d f839 	bl	18e10 <json_encode_object_entry>
    bd9e:	4306      	orrs	r6, r0
    }

    if (!DPL_FLOAT64_ISNAN(json->sts)){
    bda0:	e9d4 8942 	ldrd	r8, r9, [r4, #264]	; 0x108
    bda4:	4642      	mov	r2, r8
    bda6:	464b      	mov	r3, r9
    bda8:	4640      	mov	r0, r8
    bdaa:	4649      	mov	r1, r9
    bdac:	f014 faca 	bl	20344 <__aeabi_dcmpun>
    bdb0:	b950      	cbnz	r0, bdc8 <rng_json_write+0x3f8>
        JSON_VALUE_FLOAT64(&value, json->sts);
    bdb2:	2306      	movs	r3, #6
    bdb4:	f88d 3001 	strb.w	r3, [sp, #1]
    bdb8:	e9cd 8902 	strd	r8, r9, [sp, #8]
        rc |= json_encode_object_entry(&json->encoder, "sts", &value);
    bdbc:	466a      	mov	r2, sp
    bdbe:	4911      	ldr	r1, [pc, #68]	; (be04 <rng_json_write+0x434>)
    bdc0:	4628      	mov	r0, r5
    bdc2:	f00d f825 	bl	18e10 <json_encode_object_entry>
    bdc6:	4306      	orrs	r6, r0
    }
    rc |= json_encode_object_finish(&json->encoder);
    bdc8:	4628      	mov	r0, r5
    bdca:	f00d f9c7 	bl	1915c <json_encode_object_finish>
    json->encoder.je_wr_commas = 0;
    bdce:	f894 3020 	ldrb.w	r3, [r4, #32]
    bdd2:	f36f 0300 	bfc	r3, #0, #1
    bdd6:	f884 3020 	strb.w	r3, [r4, #32]
    assert(rc == 0);
    bdda:	4306      	orrs	r6, r0
    bddc:	d108      	bne.n	bdf0 <rng_json_write+0x420>

    rng_write_line(json->encoder.je_arg, "\0", 1);
    bdde:	2201      	movs	r2, #1
    bde0:	4909      	ldr	r1, [pc, #36]	; (be08 <rng_json_write+0x438>)
    bde2:	69e0      	ldr	r0, [r4, #28]
    bde4:	f7ff fdd2 	bl	b98c <rng_write_line>

    return rc;
}
    bde8:	4630      	mov	r0, r6
    bdea:	b005      	add	sp, #20
    bdec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(rc == 0);
    bdf0:	2300      	movs	r3, #0
    bdf2:	461a      	mov	r2, r3
    bdf4:	4619      	mov	r1, r3
    bdf6:	4618      	mov	r0, r3
    bdf8:	f7fd f8ac 	bl	8f54 <__assert_func>
    bdfc:	00021bcc 	.word	0x00021bcc
    be00:	00021bd0 	.word	0x00021bd0
    be04:	00021bd4 	.word	0x00021bd4
    be08:	00021bd8 	.word	0x00021bd8

0000be0c <calloc>:
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

void *calloc(size_t nmemb, size_t size)
{
    be0c:	b538      	push	{r3, r4, r5, lr}
	void *ptr;
        int nb;

        nb = sizeof(size_t) * 4;
        if (size >= SIZE_MAX >> nb || nmemb >= SIZE_MAX >> nb) {
    be0e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    be12:	4299      	cmp	r1, r3
    be14:	d80e      	bhi.n	be34 <calloc+0x28>
    be16:	4298      	cmp	r0, r3
    be18:	d80e      	bhi.n	be38 <calloc+0x2c>
            return NULL;
        }
	size *= nmemb;
    be1a:	fb00 f401 	mul.w	r4, r0, r1
	ptr = malloc(size);
    be1e:	4620      	mov	r0, r4
    be20:	f000 f8b8 	bl	bf94 <malloc>
	if (ptr)
    be24:	4605      	mov	r5, r0
    be26:	b118      	cbz	r0, be30 <calloc+0x24>
		memset(ptr, 0, size);
    be28:	4622      	mov	r2, r4
    be2a:	2100      	movs	r1, #0
    be2c:	f000 f92f 	bl	c08e <memset>

	return ptr;
}
    be30:	4628      	mov	r0, r5
    be32:	bd38      	pop	{r3, r4, r5, pc}
            return NULL;
    be34:	2500      	movs	r5, #0
    be36:	e7fb      	b.n	be30 <calloc+0x24>
    be38:	2500      	movs	r5, #0
    be3a:	e7f9      	b.n	be30 <calloc+0x24>

0000be3c <fwrite>:
    if (stream->vmt->read == NULL) return 0;
    return stream->vmt->read(stream, (char*)buf, size*nmemb) / size;
}

__extern_inline size_t fwrite(const void *buf, size_t size, size_t nmemb, FILE *stream)
{
    be3c:	4684      	mov	ip, r0
    be3e:	4618      	mov	r0, r3
    if (stream->vmt->write == NULL) return 0;
    be40:	681b      	ldr	r3, [r3, #0]
    be42:	681b      	ldr	r3, [r3, #0]
    be44:	b143      	cbz	r3, be58 <fwrite+0x1c>
{
    be46:	b510      	push	{r4, lr}
    be48:	460c      	mov	r4, r1
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    be4a:	fb01 f202 	mul.w	r2, r1, r2
    be4e:	4661      	mov	r1, ip
    be50:	4798      	blx	r3
    be52:	fbb0 f0f4 	udiv	r0, r0, r4
}
    be56:	bd10      	pop	{r4, pc}
    if (stream->vmt->write == NULL) return 0;
    be58:	2000      	movs	r0, #0
}
    be5a:	4770      	bx	lr

0000be5c <puts>:
{
	return fwrite(s, 1, strlen(s), f);
}

__extern_inline int puts(const char *s)
{
    be5c:	b538      	push	{r3, r4, r5, lr}
    be5e:	4604      	mov	r4, r0
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
    be60:	f000 f94c 	bl	c0fc <strlen>
    be64:	4602      	mov	r2, r0
    be66:	4b08      	ldr	r3, [pc, #32]	; (be88 <puts+0x2c>)
    be68:	681d      	ldr	r5, [r3, #0]
    be6a:	462b      	mov	r3, r5
    be6c:	2101      	movs	r1, #1
    be6e:	4620      	mov	r0, r4
    be70:	f7ff ffe4 	bl	be3c <fwrite>
    be74:	4604      	mov	r4, r0
    be76:	462b      	mov	r3, r5
    be78:	2201      	movs	r2, #1
    be7a:	4611      	mov	r1, r2
    be7c:	4803      	ldr	r0, [pc, #12]	; (be8c <puts+0x30>)
    be7e:	f7ff ffdd 	bl	be3c <fwrite>
}
    be82:	4420      	add	r0, r4
    be84:	bd38      	pop	{r3, r4, r5, pc}
    be86:	bf00      	nop
    be88:	00021bdc 	.word	0x00021bdc
    be8c:	00021d7c 	.word	0x00021d7c

0000be90 <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
    be90:	2001      	movs	r0, #1
    be92:	4770      	bx	lr

0000be94 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
    be94:	4770      	bx	lr

0000be96 <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
    be96:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
    be98:	f101 0320 	add.w	r3, r1, #32
    be9c:	4293      	cmp	r3, r2
    be9e:	d816      	bhi.n	bece <__malloc_from_block+0x38>
{
    bea0:	b430      	push	{r4, r5}
        /* Bigger block than required -- split block */
        nfp = (struct free_arena_header *)((char *)fp + size);
    bea2:	1843      	adds	r3, r0, r1
        na = fp->a.next;
    bea4:	6884      	ldr	r4, [r0, #8]

        nfp->a.type = ARENA_TYPE_FREE;
    bea6:	2501      	movs	r5, #1
    bea8:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
    beaa:	1a52      	subs	r2, r2, r1
    beac:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
    beae:	2200      	movs	r2, #0
    beb0:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
    beb2:	6041      	str	r1, [r0, #4]

        /* Insert into all-block chain */
        nfp->a.prev = fp;
    beb4:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
    beb6:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
    beb8:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
    beba:	6083      	str	r3, [r0, #8]

        /* Replace current block on free chain */
        nfp->next_free = fpn = fp->next_free;
    bebc:	6901      	ldr	r1, [r0, #16]
    bebe:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
    bec0:	6942      	ldr	r2, [r0, #20]
    bec2:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
    bec4:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
    bec6:	6113      	str	r3, [r2, #16]
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
    bec8:	3010      	adds	r0, #16
    beca:	bc30      	pop	{r4, r5}
    becc:	4770      	bx	lr
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
    bece:	2300      	movs	r3, #0
    bed0:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
    bed2:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
    bed4:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
    bed6:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
    bed8:	615a      	str	r2, [r3, #20]
}
    beda:	3010      	adds	r0, #16
    bedc:	4770      	bx	lr
	...

0000bee0 <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
    bee0:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
    bee2:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
    bee4:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
    bee6:	6802      	ldr	r2, [r0, #0]
    bee8:	2a01      	cmp	r2, #1
    beea:	d00d      	beq.n	bf08 <__free_block+0x28>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
    beec:	2201      	movs	r2, #1
    beee:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
    bef0:	4a13      	ldr	r2, [pc, #76]	; (bf40 <__free_block+0x60>)
    bef2:	6910      	ldr	r0, [r2, #16]
    bef4:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
    bef6:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
    bef8:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
    befa:	691a      	ldr	r2, [r3, #16]
    befc:	6153      	str	r3, [r2, #20]
    befe:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
    bf00:	680b      	ldr	r3, [r1, #0]
    bf02:	2b01      	cmp	r3, #1
    bf04:	d00b      	beq.n	bf1e <__free_block+0x3e>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
    bf06:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
    bf08:	6842      	ldr	r2, [r0, #4]
    bf0a:	eb00 0c02 	add.w	ip, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
    bf0e:	459c      	cmp	ip, r3
    bf10:	d1ec      	bne.n	beec <__free_block+0xc>
        pah->a.size += ah->a.size;
    bf12:	685b      	ldr	r3, [r3, #4]
    bf14:	441a      	add	r2, r3
    bf16:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
    bf18:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
    bf1a:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
    bf1c:	e7f0      	b.n	bf00 <__free_block+0x20>
        (char *)ah + ah->a.size == (char *)nah) {
    bf1e:	6843      	ldr	r3, [r0, #4]
    bf20:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
    bf22:	428a      	cmp	r2, r1
    bf24:	d1ef      	bne.n	bf06 <__free_block+0x26>
        ah->a.size += nah->a.size;
    bf26:	684a      	ldr	r2, [r1, #4]
    bf28:	4413      	add	r3, r2
    bf2a:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
    bf2c:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
    bf2e:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
    bf30:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
    bf32:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
    bf34:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
    bf36:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
    bf38:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
    bf3a:	60da      	str	r2, [r3, #12]
    return ah;
    bf3c:	e7e3      	b.n	bf06 <__free_block+0x26>
    bf3e:	bf00      	nop
    bf40:	20000154 	.word	0x20000154

0000bf44 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
    bf44:	2917      	cmp	r1, #23
    bf46:	d91e      	bls.n	bf86 <add_malloc_block+0x42>
{
    bf48:	b510      	push	{r4, lr}
    bf4a:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
    bf4c:	2301      	movs	r3, #1
    bf4e:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
    bf50:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
    bf52:	4b0d      	ldr	r3, [pc, #52]	; (bf88 <add_malloc_block+0x44>)
    bf54:	681b      	ldr	r3, [r3, #0]
    bf56:	4798      	blx	r3
    bf58:	b1a0      	cbz	r0, bf84 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
    bf5a:	4b0c      	ldr	r3, [pc, #48]	; (bf8c <add_malloc_block+0x48>)
    bf5c:	68db      	ldr	r3, [r3, #12]
    bf5e:	e000      	b.n	bf62 <add_malloc_block+0x1e>
         pah = pah->a.prev) {
    bf60:	68db      	ldr	r3, [r3, #12]
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
    bf62:	681a      	ldr	r2, [r3, #0]
    bf64:	2a02      	cmp	r2, #2
    bf66:	d001      	beq.n	bf6c <add_malloc_block+0x28>
        if (pah < fp)
    bf68:	42a3      	cmp	r3, r4
    bf6a:	d2f9      	bcs.n	bf60 <add_malloc_block+0x1c>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
    bf6c:	689a      	ldr	r2, [r3, #8]
    bf6e:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
    bf70:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
    bf72:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
    bf74:	68a3      	ldr	r3, [r4, #8]
    bf76:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
    bf78:	4620      	mov	r0, r4
    bf7a:	f7ff ffb1 	bl	bee0 <__free_block>

    malloc_unlock();
    bf7e:	4b04      	ldr	r3, [pc, #16]	; (bf90 <add_malloc_block+0x4c>)
    bf80:	681b      	ldr	r3, [r3, #0]
    bf82:	4798      	blx	r3
}
    bf84:	bd10      	pop	{r4, pc}
    bf86:	4770      	bx	lr
    bf88:	2000016c 	.word	0x2000016c
    bf8c:	20000154 	.word	0x20000154
    bf90:	20000170 	.word	0x20000170

0000bf94 <malloc>:
{
    bf94:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
    bf96:	1e43      	subs	r3, r0, #1
    bf98:	f113 0f12 	cmn.w	r3, #18
    bf9c:	d825      	bhi.n	bfea <malloc+0x56>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
    bf9e:	301f      	adds	r0, #31
    bfa0:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
    bfa4:	4b13      	ldr	r3, [pc, #76]	; (bff4 <malloc+0x60>)
    bfa6:	681b      	ldr	r3, [r3, #0]
    bfa8:	4798      	blx	r3
    bfaa:	b300      	cbz	r0, bfee <malloc+0x5a>
    void *result = NULL;
    bfac:	2500      	movs	r5, #0
    bfae:	e00d      	b.n	bfcc <malloc+0x38>
            result = __malloc_from_block(fp, size);
    bfb0:	4621      	mov	r1, r4
    bfb2:	f7ff ff70 	bl	be96 <__malloc_from_block>
    bfb6:	4605      	mov	r5, r0
    if (result == NULL) {
    bfb8:	b995      	cbnz	r5, bfe0 <malloc+0x4c>
        more_mem = _sbrk(size);
    bfba:	4620      	mov	r0, r4
    bfbc:	f7fc f8dc 	bl	8178 <_sbrk>
        if (more_mem != (void *)-1) {
    bfc0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    bfc4:	d00c      	beq.n	bfe0 <malloc+0x4c>
            add_malloc_block(more_mem, size);
    bfc6:	4621      	mov	r1, r4
    bfc8:	f7ff ffbc 	bl	bf44 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
    bfcc:	4b0a      	ldr	r3, [pc, #40]	; (bff8 <malloc+0x64>)
    bfce:	6918      	ldr	r0, [r3, #16]
    bfd0:	6803      	ldr	r3, [r0, #0]
    bfd2:	2b02      	cmp	r3, #2
    bfd4:	d0f0      	beq.n	bfb8 <malloc+0x24>
        if (fp->a.size >= size) {
    bfd6:	6843      	ldr	r3, [r0, #4]
    bfd8:	42a3      	cmp	r3, r4
    bfda:	d2e9      	bcs.n	bfb0 <malloc+0x1c>
         fp = fp->next_free) {
    bfdc:	6900      	ldr	r0, [r0, #16]
    bfde:	e7f7      	b.n	bfd0 <malloc+0x3c>
    malloc_unlock();
    bfe0:	4b06      	ldr	r3, [pc, #24]	; (bffc <malloc+0x68>)
    bfe2:	681b      	ldr	r3, [r3, #0]
    bfe4:	4798      	blx	r3
}
    bfe6:	4628      	mov	r0, r5
    bfe8:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
    bfea:	2500      	movs	r5, #0
    bfec:	e7fb      	b.n	bfe6 <malloc+0x52>
        return NULL;
    bfee:	2500      	movs	r5, #0
    bff0:	e7f9      	b.n	bfe6 <malloc+0x52>
    bff2:	bf00      	nop
    bff4:	2000016c 	.word	0x2000016c
    bff8:	20000154 	.word	0x20000154
    bffc:	20000170 	.word	0x20000170

0000c000 <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
    c000:	b170      	cbz	r0, c020 <free+0x20>
{
    c002:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
    c004:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
    c008:	4b06      	ldr	r3, [pc, #24]	; (c024 <free+0x24>)
    c00a:	681b      	ldr	r3, [r3, #0]
    c00c:	4798      	blx	r3
    c00e:	b900      	cbnz	r0, c012 <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
    c010:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
    c012:	4620      	mov	r0, r4
    c014:	f7ff ff64 	bl	bee0 <__free_block>
    malloc_unlock();
    c018:	4b03      	ldr	r3, [pc, #12]	; (c028 <free+0x28>)
    c01a:	681b      	ldr	r3, [r3, #0]
    c01c:	4798      	blx	r3
    c01e:	e7f7      	b.n	c010 <free+0x10>
    c020:	4770      	bx	lr
    c022:	bf00      	nop
    c024:	2000016c 	.word	0x2000016c
    c028:	20000170 	.word	0x20000170

0000c02c <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
    c02c:	b470      	push	{r4, r5, r6}
    c02e:	f04f 0500 	mov.w	r5, #0
    c032:	f022 0603 	bic.w	r6, r2, #3
    c036:	e005      	b.n	c044 <test1>

0000c038 <loop1>:
    c038:	5943      	ldr	r3, [r0, r5]
    c03a:	594c      	ldr	r4, [r1, r5]
    c03c:	42a3      	cmp	r3, r4
    c03e:	d104      	bne.n	c04a <res1>
    c040:	f105 0504 	add.w	r5, r5, #4

0000c044 <test1>:
    c044:	42b5      	cmp	r5, r6
    c046:	d1f7      	bne.n	c038 <loop1>
    c048:	e00d      	b.n	c066 <test2>

0000c04a <res1>:
    c04a:	ba1b      	rev	r3, r3
    c04c:	ba24      	rev	r4, r4
    c04e:	1b1b      	subs	r3, r3, r4
    c050:	bf8c      	ite	hi
    c052:	2301      	movhi	r3, #1
    c054:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    c058:	e009      	b.n	c06e <done>

0000c05a <loop2>:
    c05a:	5d43      	ldrb	r3, [r0, r5]
    c05c:	5d4c      	ldrb	r4, [r1, r5]
    c05e:	1b1b      	subs	r3, r3, r4
    c060:	d105      	bne.n	c06e <done>
    c062:	f105 0501 	add.w	r5, r5, #1

0000c066 <test2>:
    c066:	4295      	cmp	r5, r2
    c068:	d1f7      	bne.n	c05a <loop2>
    c06a:	f04f 0300 	mov.w	r3, #0

0000c06e <done>:
    c06e:	4618      	mov	r0, r3
    c070:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    c072:	4770      	bx	lr

0000c074 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    c074:	e001      	b.n	c07a <test1>

0000c076 <loop1>:
    c076:	588b      	ldr	r3, [r1, r2]
    c078:	5083      	str	r3, [r0, r2]

0000c07a <test1>:
    c07a:	3a04      	subs	r2, #4
    c07c:	d5fb      	bpl.n	c076 <loop1>
    c07e:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    c082:	e001      	b.n	c088 <test2>

0000c084 <loop2>:
    c084:	5c8b      	ldrb	r3, [r1, r2]
    c086:	5483      	strb	r3, [r0, r2]

0000c088 <test2>:
    c088:	3a01      	subs	r2, #1
    c08a:	d5fb      	bpl.n	c084 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    c08c:	4770      	bx	lr

0000c08e <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    c08e:	b410      	push	{r4}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    c090:	4684      	mov	ip, r0
    c092:	b2c9      	uxtb	r1, r1
    c094:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c098:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    c09c:	eb1c 0302 	adds.w	r3, ip, r2
    c0a0:	2403      	movs	r4, #3
    c0a2:	4023      	ands	r3, r4
    c0a4:	1ad3      	subs	r3, r2, r3
    c0a6:	d40e      	bmi.n	c0c6 <memset+0x38>
    c0a8:	e002      	b.n	c0b0 <memset+0x22>
    c0aa:	3a01      	subs	r2, #1
    c0ac:	f80c 1002 	strb.w	r1, [ip, r2]
    c0b0:	429a      	cmp	r2, r3
    c0b2:	d1fa      	bne.n	c0aa <memset+0x1c>
    c0b4:	e001      	b.n	c0ba <memset+0x2c>
    c0b6:	f84c 1002 	str.w	r1, [ip, r2]
    c0ba:	3a04      	subs	r2, #4
    c0bc:	d5fb      	bpl.n	c0b6 <memset+0x28>
    c0be:	3204      	adds	r2, #4
    c0c0:	e001      	b.n	c0c6 <memset+0x38>
    c0c2:	f80c 1002 	strb.w	r1, [ip, r2]
    c0c6:	3a01      	subs	r2, #1
    c0c8:	d5fb      	bpl.n	c0c2 <memset+0x34>
		*q++ = c;
	}
#endif

	return dst;
}
    c0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    c0ce:	4770      	bx	lr

0000c0d0 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
    c0d0:	2000      	movs	r0, #0
    c0d2:	4770      	bx	lr

0000c0d4 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
    c0d4:	b510      	push	{r4, lr}
    c0d6:	4608      	mov	r0, r1
    c0d8:	4614      	mov	r4, r2
    console_write(bp, n);
    c0da:	4611      	mov	r1, r2
    c0dc:	f001 fc7c 	bl	d9d8 <console_write>
    return n;
}
    c0e0:	4620      	mov	r0, r4
    c0e2:	bd10      	pop	{r4, pc}

0000c0e4 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
    c0e4:	4684      	mov	ip, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
    c0e6:	f89c 2000 	ldrb.w	r2, [ip]
    c0ea:	f10c 0c01 	add.w	ip, ip, #1
    c0ee:	7808      	ldrb	r0, [r1, #0]
    c0f0:	3101      	adds	r1, #1
		if (d || !ch)
    c0f2:	1a10      	subs	r0, r2, r0
    c0f4:	d101      	bne.n	c0fa <strcmp+0x16>
    c0f6:	2a00      	cmp	r2, #0
    c0f8:	d1f5      	bne.n	c0e6 <strcmp+0x2>
			break;
	}

	return d;
}
    c0fa:	4770      	bx	lr

0000c0fc <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
    c0fc:	4603      	mov	r3, r0
	while (*ss)
    c0fe:	e000      	b.n	c102 <strlen+0x6>
		ss++;
    c100:	3301      	adds	r3, #1
	while (*ss)
    c102:	781a      	ldrb	r2, [r3, #0]
    c104:	2a00      	cmp	r2, #0
    c106:	d1fb      	bne.n	c100 <strlen+0x4>
	return ss - s;
}
    c108:	1a18      	subs	r0, r3, r0
    c10a:	4770      	bx	lr

0000c10c <strncpy>:
 */

#include <string.h>

char *strncpy(char *dst, const char *src, size_t n)
{
    c10c:	b510      	push	{r4, lr}
    c10e:	4604      	mov	r4, r0
	char *q = dst;
	const char *p = src;
	char ch;

	while (n) {
    c110:	b132      	cbz	r2, c120 <strncpy+0x14>
		n--;
    c112:	3a01      	subs	r2, #1
		*q++ = ch = *p++;
    c114:	f811 3b01 	ldrb.w	r3, [r1], #1
    c118:	f800 3b01 	strb.w	r3, [r0], #1
		if (!ch)
    c11c:	2b00      	cmp	r3, #0
    c11e:	d1f7      	bne.n	c110 <strncpy+0x4>
			break;
	}

	/* The specs say strncpy() fills the entire buffer with NUL.  Sigh. */
	memset(q, 0, n);
    c120:	2100      	movs	r1, #0
    c122:	f7ff ffb4 	bl	c08e <memset>

	return dst;
}
    c126:	4620      	mov	r0, r4
    c128:	bd10      	pop	{r4, pc}

0000c12a <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
    c12a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c12e:	b085      	sub	sp, #20
    c130:	4606      	mov	r6, r0
    c132:	460f      	mov	r7, r1
    c134:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    c136:	6853      	ldr	r3, [r2, #4]
    c138:	9302      	str	r3, [sp, #8]
    unsigned long long int d = 1;
    c13a:	2501      	movs	r5, #1
    c13c:	2400      	movs	r4, #0
    while (num / d >= p->base)
    c13e:	e004      	b.n	c14a <ui2a+0x20>
        d *= p->base;
    c140:	fb04 f303 	mul.w	r3, r4, r3
    c144:	fba5 5402 	umull	r5, r4, r5, r2
    c148:	441c      	add	r4, r3
    while (num / d >= p->base)
    c14a:	462a      	mov	r2, r5
    c14c:	4623      	mov	r3, r4
    c14e:	4630      	mov	r0, r6
    c150:	4639      	mov	r1, r7
    c152:	f014 f9f5 	bl	20540 <__aeabi_uldivmod>
    c156:	f899 3003 	ldrb.w	r3, [r9, #3]
    c15a:	461a      	mov	r2, r3
    c15c:	4298      	cmp	r0, r3
    c15e:	f171 0100 	sbcs.w	r1, r1, #0
    c162:	d2ed      	bcs.n	c140 <ui2a+0x16>
    int n = 0;
    c164:	f04f 0a00 	mov.w	sl, #0
    c168:	e00b      	b.n	c182 <ui2a+0x58>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    c16a:	2230      	movs	r2, #48	; 0x30
    c16c:	9b02      	ldr	r3, [sp, #8]
    c16e:	4490      	add	r8, r2
    c170:	f803 8b01 	strb.w	r8, [r3], #1
            ++n;
    c174:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    c178:	9302      	str	r3, [sp, #8]
    c17a:	4605      	mov	r5, r0
    c17c:	460c      	mov	r4, r1
    c17e:	9e00      	ldr	r6, [sp, #0]
    c180:	9f01      	ldr	r7, [sp, #4]
    while (d != 0) {
    c182:	ea55 0304 	orrs.w	r3, r5, r4
    c186:	d031      	beq.n	c1ec <ui2a+0xc2>
        unsigned long long  dgt = num / d;
    c188:	462a      	mov	r2, r5
    c18a:	4623      	mov	r3, r4
    c18c:	4630      	mov	r0, r6
    c18e:	4639      	mov	r1, r7
    c190:	f014 f9d6 	bl	20540 <__aeabi_uldivmod>
    c194:	4680      	mov	r8, r0
    c196:	9103      	str	r1, [sp, #12]
        num %= d;
    c198:	462a      	mov	r2, r5
    c19a:	4623      	mov	r3, r4
    c19c:	4630      	mov	r0, r6
    c19e:	4639      	mov	r1, r7
    c1a0:	f014 f9ce 	bl	20540 <__aeabi_uldivmod>
    c1a4:	9200      	str	r2, [sp, #0]
    c1a6:	9301      	str	r3, [sp, #4]
        d /= p->base;
    c1a8:	f899 b003 	ldrb.w	fp, [r9, #3]
    c1ac:	465a      	mov	r2, fp
    c1ae:	2300      	movs	r3, #0
    c1b0:	4628      	mov	r0, r5
    c1b2:	4621      	mov	r1, r4
    c1b4:	f014 f9c4 	bl	20540 <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
    c1b8:	f1ba 0f00 	cmp.w	sl, #0
    c1bc:	d107      	bne.n	c1ce <ui2a+0xa4>
    c1be:	42ae      	cmp	r6, r5
    c1c0:	eb77 0304 	sbcs.w	r3, r7, r4
    c1c4:	d203      	bcs.n	c1ce <ui2a+0xa4>
    c1c6:	455d      	cmp	r5, fp
    c1c8:	f174 0300 	sbcs.w	r3, r4, #0
    c1cc:	d2d5      	bcs.n	c17a <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    c1ce:	f1b8 0f0a 	cmp.w	r8, #10
    c1d2:	9b03      	ldr	r3, [sp, #12]
    c1d4:	f173 0300 	sbcs.w	r3, r3, #0
    c1d8:	d3c7      	bcc.n	c16a <ui2a+0x40>
    c1da:	f899 3002 	ldrb.w	r3, [r9, #2]
    c1de:	f013 0f04 	tst.w	r3, #4
    c1e2:	d001      	beq.n	c1e8 <ui2a+0xbe>
    c1e4:	2237      	movs	r2, #55	; 0x37
    c1e6:	e7c1      	b.n	c16c <ui2a+0x42>
    c1e8:	2257      	movs	r2, #87	; 0x57
    c1ea:	e7bf      	b.n	c16c <ui2a+0x42>
        }
    }
    *bf = 0;
    c1ec:	2300      	movs	r3, #0
    c1ee:	9a02      	ldr	r2, [sp, #8]
    c1f0:	7013      	strb	r3, [r2, #0]
}
    c1f2:	b005      	add	sp, #20
    c1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c1f8 <i2a>:

static void i2a(long long int num, struct param *p)
{
    c1f8:	b508      	push	{r3, lr}
    if (num < 0) {
    c1fa:	2900      	cmp	r1, #0
    c1fc:	db02      	blt.n	c204 <i2a+0xc>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
    c1fe:	f7ff ff94 	bl	c12a <ui2a>
}
    c202:	bd08      	pop	{r3, pc}
        num = -num;
    c204:	4240      	negs	r0, r0
    c206:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
    c20a:	7893      	ldrb	r3, [r2, #2]
    c20c:	f043 0301 	orr.w	r3, r3, #1
    c210:	7093      	strb	r3, [r2, #2]
    c212:	e7f4      	b.n	c1fe <i2a+0x6>

0000c214 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
    c214:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    c218:	b2db      	uxtb	r3, r3
    c21a:	2b09      	cmp	r3, #9
    c21c:	d90b      	bls.n	c236 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
    c21e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    c222:	b2db      	uxtb	r3, r3
    c224:	2b05      	cmp	r3, #5
    c226:	d908      	bls.n	c23a <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
    c228:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    c22c:	b2db      	uxtb	r3, r3
    c22e:	2b05      	cmp	r3, #5
    c230:	d805      	bhi.n	c23e <a2d+0x2a>
        return ch - 'A' + 10;
    c232:	3837      	subs	r0, #55	; 0x37
    c234:	4770      	bx	lr
        return ch - '0';
    c236:	3830      	subs	r0, #48	; 0x30
    c238:	4770      	bx	lr
        return ch - 'a' + 10;
    c23a:	3857      	subs	r0, #87	; 0x57
    c23c:	4770      	bx	lr
    else
        return -1;
    c23e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    c242:	4770      	bx	lr

0000c244 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
    c244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c248:	4604      	mov	r4, r0
    c24a:	460f      	mov	r7, r1
    c24c:	4615      	mov	r5, r2
    c24e:	4698      	mov	r8, r3
    const char *p = *src;
    c250:	f8d1 9000 	ldr.w	r9, [r1]
    int num = 0;
    c254:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
    c256:	e005      	b.n	c264 <a2i+0x20>
        if (digit > base)
            break;
        num = num * base + digit;
    c258:	fb05 0606 	mla	r6, r5, r6, r0
        ch = *p++;
    c25c:	46cc      	mov	ip, r9
    c25e:	f81c 4b01 	ldrb.w	r4, [ip], #1
    c262:	46e1      	mov	r9, ip
    while ((digit = a2d(ch)) >= 0) {
    c264:	4620      	mov	r0, r4
    c266:	f7ff ffd5 	bl	c214 <a2d>
    c26a:	2800      	cmp	r0, #0
    c26c:	db01      	blt.n	c272 <a2i+0x2e>
        if (digit > base)
    c26e:	42a8      	cmp	r0, r5
    c270:	ddf2      	ble.n	c258 <a2i+0x14>
    }
    *src = p;
    c272:	f8c7 9000 	str.w	r9, [r7]
    *nump = num;
    c276:	f888 6000 	strb.w	r6, [r8]
    return ch;
}
    c27a:	4620      	mov	r0, r4
    c27c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000c280 <putf>:

static int putf(FILE *putp, char c)
{
    c280:	b500      	push	{lr}
    c282:	b083      	sub	sp, #12

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
    c284:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
    c288:	6803      	ldr	r3, [r0, #0]
    c28a:	681b      	ldr	r3, [r3, #0]
    c28c:	b143      	cbz	r3, c2a0 <putf+0x20>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    c28e:	2201      	movs	r2, #1
    c290:	f10d 0107 	add.w	r1, sp, #7
    c294:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
    c296:	2801      	cmp	r0, #1
    c298:	d102      	bne.n	c2a0 <putf+0x20>
    if (fputc(c, putp) == EOF)
        return 0;
    else
        return 1;
}
    c29a:	b003      	add	sp, #12
    c29c:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
    c2a0:	2000      	movs	r0, #0
    c2a2:	e7fa      	b.n	c29a <putf+0x1a>

0000c2a4 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
    c2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2a8:	4607      	mov	r7, r0
    c2aa:	4688      	mov	r8, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
    c2ac:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
    c2ae:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
    c2b0:	e000      	b.n	c2b4 <putchw+0x10>
        n--;
    c2b2:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
    c2b4:	f813 2b01 	ldrb.w	r2, [r3], #1
    c2b8:	b10a      	cbz	r2, c2be <putchw+0x1a>
    c2ba:	2c00      	cmp	r4, #0
    c2bc:	dcf9      	bgt.n	c2b2 <putchw+0xe>
    if (p->sign)
    c2be:	f898 3002 	ldrb.w	r3, [r8, #2]
    c2c2:	f013 0f01 	tst.w	r3, #1
    c2c6:	d000      	beq.n	c2ca <putchw+0x26>
        n--;
    c2c8:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
    c2ca:	f8b8 3002 	ldrh.w	r3, [r8, #2]
    c2ce:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    c2d2:	b29b      	uxth	r3, r3
    c2d4:	f241 0202 	movw	r2, #4098	; 0x1002
    c2d8:	4293      	cmp	r3, r2
    c2da:	d021      	beq.n	c320 <putchw+0x7c>
        n -= 2;
    else if (p->alt && p->base == 8)
    c2dc:	f640 0202 	movw	r2, #2050	; 0x802
    c2e0:	4293      	cmp	r3, r2
    c2e2:	d01f      	beq.n	c324 <putchw+0x80>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
    c2e4:	f8d8 3000 	ldr.w	r3, [r8]
    c2e8:	4e36      	ldr	r6, [pc, #216]	; (c3c4 <putchw+0x120>)
    c2ea:	401e      	ands	r6, r3
    c2ec:	b316      	cbz	r6, c334 <putchw+0x90>
    unsigned written = 0;
    c2ee:	2600      	movs	r6, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
    c2f0:	f898 3002 	ldrb.w	r3, [r8, #2]
    c2f4:	f013 0f01 	tst.w	r3, #1
    c2f8:	d121      	bne.n	c33e <putchw+0x9a>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
    c2fa:	f8b8 3002 	ldrh.w	r3, [r8, #2]
    c2fe:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    c302:	b29b      	uxth	r3, r3
    c304:	f241 0202 	movw	r2, #4098	; 0x1002
    c308:	4293      	cmp	r3, r2
    c30a:	d01e      	beq.n	c34a <putchw+0xa6>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
    c30c:	f640 0202 	movw	r2, #2050	; 0x802
    c310:	4293      	cmp	r3, r2
    c312:	d02c      	beq.n	c36e <putchw+0xca>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
    c314:	f898 3001 	ldrb.w	r3, [r8, #1]
    c318:	bbab      	cbnz	r3, c386 <putchw+0xe2>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
    c31a:	f8d8 5004 	ldr.w	r5, [r8, #4]
    while ((ch = *bf++))
    c31e:	e03b      	b.n	c398 <putchw+0xf4>
        n -= 2;
    c320:	3c02      	subs	r4, #2
    c322:	e7df      	b.n	c2e4 <putchw+0x40>
        n--;
    c324:	3c01      	subs	r4, #1
    c326:	e7dd      	b.n	c2e4 <putchw+0x40>
            written += putf(putp, ' ');
    c328:	2120      	movs	r1, #32
    c32a:	4638      	mov	r0, r7
    c32c:	f7ff ffa8 	bl	c280 <putf>
    c330:	4406      	add	r6, r0
        while (n-- > 0)
    c332:	462c      	mov	r4, r5
    c334:	1e65      	subs	r5, r4, #1
    c336:	2c00      	cmp	r4, #0
    c338:	dcf6      	bgt.n	c328 <putchw+0x84>
    c33a:	462c      	mov	r4, r5
    c33c:	e7d8      	b.n	c2f0 <putchw+0x4c>
        written += putf(putp, '-');
    c33e:	212d      	movs	r1, #45	; 0x2d
    c340:	4638      	mov	r0, r7
    c342:	f7ff ff9d 	bl	c280 <putf>
    c346:	4406      	add	r6, r0
    c348:	e7d7      	b.n	c2fa <putchw+0x56>
        written += putf(putp, '0');
    c34a:	2130      	movs	r1, #48	; 0x30
    c34c:	4638      	mov	r0, r7
    c34e:	f7ff ff97 	bl	c280 <putf>
    c352:	4406      	add	r6, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
    c354:	f898 3002 	ldrb.w	r3, [r8, #2]
    c358:	f013 0f04 	tst.w	r3, #4
    c35c:	d005      	beq.n	c36a <putchw+0xc6>
    c35e:	2158      	movs	r1, #88	; 0x58
    c360:	4638      	mov	r0, r7
    c362:	f7ff ff8d 	bl	c280 <putf>
    c366:	4406      	add	r6, r0
    c368:	e7d4      	b.n	c314 <putchw+0x70>
    c36a:	2178      	movs	r1, #120	; 0x78
    c36c:	e7f8      	b.n	c360 <putchw+0xbc>
        written += putf(putp, '0');
    c36e:	2130      	movs	r1, #48	; 0x30
    c370:	4638      	mov	r0, r7
    c372:	f7ff ff85 	bl	c280 <putf>
    c376:	4406      	add	r6, r0
    c378:	e7cc      	b.n	c314 <putchw+0x70>
            written += putf(putp, '0');
    c37a:	2130      	movs	r1, #48	; 0x30
    c37c:	4638      	mov	r0, r7
    c37e:	f7ff ff7f 	bl	c280 <putf>
    c382:	4406      	add	r6, r0
        while (n-- > 0)
    c384:	462c      	mov	r4, r5
    c386:	1e65      	subs	r5, r4, #1
    c388:	2c00      	cmp	r4, #0
    c38a:	dcf6      	bgt.n	c37a <putchw+0xd6>
    c38c:	462c      	mov	r4, r5
    c38e:	e7c4      	b.n	c31a <putchw+0x76>
        written += putf(putp, ch);
    c390:	4638      	mov	r0, r7
    c392:	f7ff ff75 	bl	c280 <putf>
    c396:	4406      	add	r6, r0
    while ((ch = *bf++))
    c398:	f815 1b01 	ldrb.w	r1, [r5], #1
    c39c:	2900      	cmp	r1, #0
    c39e:	d1f7      	bne.n	c390 <putchw+0xec>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
    c3a0:	f898 3002 	ldrb.w	r3, [r8, #2]
    c3a4:	f013 0f08 	tst.w	r3, #8
    c3a8:	d108      	bne.n	c3bc <putchw+0x118>
        while (n-- > 0)
            written += putf(putp, ' ');
    }
    
    return written;
}
    c3aa:	4630      	mov	r0, r6
    c3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            written += putf(putp, ' ');
    c3b0:	2120      	movs	r1, #32
    c3b2:	4638      	mov	r0, r7
    c3b4:	f7ff ff64 	bl	c280 <putf>
    c3b8:	4406      	add	r6, r0
        while (n-- > 0)
    c3ba:	462c      	mov	r4, r5
    c3bc:	1e65      	subs	r5, r4, #1
    c3be:	2c00      	cmp	r4, #0
    c3c0:	dcf6      	bgt.n	c3b0 <putchw+0x10c>
    c3c2:	e7f2      	b.n	c3aa <putchw+0x106>
    c3c4:	0008ff00 	.word	0x0008ff00

0000c3c8 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
    c3c8:	b160      	cbz	r0, c3e4 <intarg+0x1c>
    c3ca:	2801      	cmp	r0, #1
    c3cc:	d018      	beq.n	c400 <intarg+0x38>
        }
        break;

    case 2:
    default:
        if (sign) {
    c3ce:	b329      	cbz	r1, c41c <intarg+0x54>
            val = va_arg(*va, long long);
    c3d0:	6813      	ldr	r3, [r2, #0]
    c3d2:	3307      	adds	r3, #7
    c3d4:	f023 0307 	bic.w	r3, r3, #7
    c3d8:	f103 0108 	add.w	r1, r3, #8
    c3dc:	6011      	str	r1, [r2, #0]
    c3de:	6818      	ldr	r0, [r3, #0]
    c3e0:	6859      	ldr	r1, [r3, #4]
    c3e2:	4770      	bx	lr
        if (sign) {
    c3e4:	b131      	cbz	r1, c3f4 <intarg+0x2c>
            val = va_arg(*va, int);
    c3e6:	6813      	ldr	r3, [r2, #0]
    c3e8:	1d19      	adds	r1, r3, #4
    c3ea:	6011      	str	r1, [r2, #0]
    c3ec:	6819      	ldr	r1, [r3, #0]
    c3ee:	4608      	mov	r0, r1
    c3f0:	17c9      	asrs	r1, r1, #31
    c3f2:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
    c3f4:	6813      	ldr	r3, [r2, #0]
    c3f6:	1d19      	adds	r1, r3, #4
    c3f8:	6011      	str	r1, [r2, #0]
    c3fa:	6818      	ldr	r0, [r3, #0]
    c3fc:	2100      	movs	r1, #0
    c3fe:	4770      	bx	lr
        if (sign) {
    c400:	b131      	cbz	r1, c410 <intarg+0x48>
            val = va_arg(*va, long);
    c402:	6813      	ldr	r3, [r2, #0]
    c404:	1d19      	adds	r1, r3, #4
    c406:	6011      	str	r1, [r2, #0]
    c408:	6819      	ldr	r1, [r3, #0]
    c40a:	4608      	mov	r0, r1
    c40c:	17c9      	asrs	r1, r1, #31
    c40e:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
    c410:	6813      	ldr	r3, [r2, #0]
    c412:	1d19      	adds	r1, r3, #4
    c414:	6011      	str	r1, [r2, #0]
    c416:	6818      	ldr	r0, [r3, #0]
    c418:	2100      	movs	r1, #0
    c41a:	4770      	bx	lr
        } else {
            val = va_arg(*va, unsigned long long);
    c41c:	6813      	ldr	r3, [r2, #0]
    c41e:	3307      	adds	r3, #7
    c420:	f023 0307 	bic.w	r3, r3, #7
    c424:	f103 0108 	add.w	r1, r3, #8
    c428:	6011      	str	r1, [r2, #0]
    c42a:	6818      	ldr	r0, [r3, #0]
    c42c:	6859      	ldr	r1, [r3, #4]
        }
        break;
    }

    return val;
}
    c42e:	4770      	bx	lr

0000c430 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
    c430:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    c434:	b08a      	sub	sp, #40	; 0x28
    c436:	4606      	mov	r6, r0
    c438:	9101      	str	r1, [sp, #4]
    c43a:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
    c43c:	ab02      	add	r3, sp, #8
    c43e:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
    c440:	2500      	movs	r5, #0

    while ((ch = *(fmt++))) {
    c442:	9b01      	ldr	r3, [sp, #4]
    c444:	1c5a      	adds	r2, r3, #1
    c446:	9201      	str	r2, [sp, #4]
    c448:	7819      	ldrb	r1, [r3, #0]
    c44a:	2900      	cmp	r1, #0
    c44c:	f000 8227 	beq.w	c89e <tfp_format+0x46e>
        if (ch != '%') {
    c450:	2925      	cmp	r1, #37	; 0x25
    c452:	d004      	beq.n	c45e <tfp_format+0x2e>
            written += putf(putp, ch);
    c454:	4630      	mov	r0, r6
    c456:	f7ff ff13 	bl	c280 <putf>
    c45a:	4405      	add	r5, r0
    c45c:	e7f1      	b.n	c442 <tfp_format+0x12>
        } else {
            /* Init parameter struct */
            p.lz = 0;
    c45e:	2300      	movs	r3, #0
    c460:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
            p.alt = 0;
    c464:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    c468:	f363 0241 	bfi	r2, r3, #1, #1
    c46c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            p.width = 0;
    c470:	f88d 3020 	strb.w	r3, [sp, #32]
            p.sign = 0;
    c474:	b2d2      	uxtb	r2, r2
    c476:	f363 0200 	bfi	r2, r3, #0, #1
    c47a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            p.left = 0;
    c47e:	b2d2      	uxtb	r2, r2
    c480:	f363 02c3 	bfi	r2, r3, #3, #1
    c484:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            p.uc = 0;
    c488:	b2d2      	uxtb	r2, r2
    c48a:	f363 0282 	bfi	r2, r3, #2, #1
    c48e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
    c492:	9b01      	ldr	r3, [sp, #4]
    c494:	1c5a      	adds	r2, r3, #1
    c496:	9201      	str	r2, [sp, #4]
    c498:	781c      	ldrb	r4, [r3, #0]
    c49a:	b144      	cbz	r4, c4ae <tfp_format+0x7e>
                switch (ch) {
    c49c:	2c2d      	cmp	r4, #45	; 0x2d
    c49e:	f000 80de 	beq.w	c65e <tfp_format+0x22e>
    c4a2:	2c30      	cmp	r4, #48	; 0x30
    c4a4:	f000 80ca 	beq.w	c63c <tfp_format+0x20c>
    c4a8:	2c23      	cmp	r4, #35	; 0x23
    c4aa:	f000 80d1 	beq.w	c650 <tfp_format+0x220>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
    c4ae:	2c2a      	cmp	r4, #42	; 0x2a
    c4b0:	f000 80df 	beq.w	c672 <tfp_format+0x242>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
    c4b4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    c4b8:	b2db      	uxtb	r3, r3
    c4ba:	2b09      	cmp	r3, #9
    c4bc:	f240 80ed 	bls.w	c69a <tfp_format+0x26a>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
    c4c0:	2c6c      	cmp	r4, #108	; 0x6c
    c4c2:	f000 80f2 	beq.w	c6aa <tfp_format+0x27a>
            lng = 0;
    c4c6:	2000      	movs	r0, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
    c4c8:	2c7a      	cmp	r4, #122	; 0x7a
    c4ca:	f000 80fb 	beq.w	c6c4 <tfp_format+0x294>
                ch = *(fmt++);
            }

            switch (ch) {
    c4ce:	2c00      	cmp	r4, #0
    c4d0:	f000 81e5 	beq.w	c89e <tfp_format+0x46e>
    c4d4:	2c78      	cmp	r4, #120	; 0x78
    c4d6:	d8b4      	bhi.n	c442 <tfp_format+0x12>
    c4d8:	2c25      	cmp	r4, #37	; 0x25
    c4da:	d3b2      	bcc.n	c442 <tfp_format+0x12>
    c4dc:	f1a4 0325 	sub.w	r3, r4, #37	; 0x25
    c4e0:	2b53      	cmp	r3, #83	; 0x53
    c4e2:	d8ae      	bhi.n	c442 <tfp_format+0x12>
    c4e4:	a201      	add	r2, pc, #4	; (adr r2, c4ec <tfp_format+0xbc>)
    c4e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c4ea:	bf00      	nop
    c4ec:	0000c893 	.word	0x0000c893
    c4f0:	0000c443 	.word	0x0000c443
    c4f4:	0000c443 	.word	0x0000c443
    c4f8:	0000c443 	.word	0x0000c443
    c4fc:	0000c443 	.word	0x0000c443
    c500:	0000c443 	.word	0x0000c443
    c504:	0000c443 	.word	0x0000c443
    c508:	0000c443 	.word	0x0000c443
    c50c:	0000c443 	.word	0x0000c443
    c510:	0000c443 	.word	0x0000c443
    c514:	0000c443 	.word	0x0000c443
    c518:	0000c443 	.word	0x0000c443
    c51c:	0000c443 	.word	0x0000c443
    c520:	0000c443 	.word	0x0000c443
    c524:	0000c443 	.word	0x0000c443
    c528:	0000c443 	.word	0x0000c443
    c52c:	0000c443 	.word	0x0000c443
    c530:	0000c443 	.word	0x0000c443
    c534:	0000c443 	.word	0x0000c443
    c538:	0000c443 	.word	0x0000c443
    c53c:	0000c443 	.word	0x0000c443
    c540:	0000c443 	.word	0x0000c443
    c544:	0000c443 	.word	0x0000c443
    c548:	0000c443 	.word	0x0000c443
    c54c:	0000c443 	.word	0x0000c443
    c550:	0000c443 	.word	0x0000c443
    c554:	0000c443 	.word	0x0000c443
    c558:	0000c443 	.word	0x0000c443
    c55c:	0000c443 	.word	0x0000c443
    c560:	0000c443 	.word	0x0000c443
    c564:	0000c443 	.word	0x0000c443
    c568:	0000c443 	.word	0x0000c443
    c56c:	0000c443 	.word	0x0000c443
    c570:	0000c443 	.word	0x0000c443
    c574:	0000c443 	.word	0x0000c443
    c578:	0000c443 	.word	0x0000c443
    c57c:	0000c443 	.word	0x0000c443
    c580:	0000c443 	.word	0x0000c443
    c584:	0000c443 	.word	0x0000c443
    c588:	0000c443 	.word	0x0000c443
    c58c:	0000c443 	.word	0x0000c443
    c590:	0000c443 	.word	0x0000c443
    c594:	0000c443 	.word	0x0000c443
    c598:	0000c443 	.word	0x0000c443
    c59c:	0000c443 	.word	0x0000c443
    c5a0:	0000c443 	.word	0x0000c443
    c5a4:	0000c443 	.word	0x0000c443
    c5a8:	0000c443 	.word	0x0000c443
    c5ac:	0000c443 	.word	0x0000c443
    c5b0:	0000c443 	.word	0x0000c443
    c5b4:	0000c443 	.word	0x0000c443
    c5b8:	0000c70f 	.word	0x0000c70f
    c5bc:	0000c443 	.word	0x0000c443
    c5c0:	0000c443 	.word	0x0000c443
    c5c4:	0000c443 	.word	0x0000c443
    c5c8:	0000c443 	.word	0x0000c443
    c5cc:	0000c443 	.word	0x0000c443
    c5d0:	0000c443 	.word	0x0000c443
    c5d4:	0000c443 	.word	0x0000c443
    c5d8:	0000c443 	.word	0x0000c443
    c5dc:	0000c443 	.word	0x0000c443
    c5e0:	0000c443 	.word	0x0000c443
    c5e4:	0000c7a5 	.word	0x0000c7a5
    c5e8:	0000c6ef 	.word	0x0000c6ef
    c5ec:	0000c443 	.word	0x0000c443
    c5f0:	0000c7d1 	.word	0x0000c7d1
    c5f4:	0000c443 	.word	0x0000c443
    c5f8:	0000c443 	.word	0x0000c443
    c5fc:	0000c6ef 	.word	0x0000c6ef
    c600:	0000c443 	.word	0x0000c443
    c604:	0000c443 	.word	0x0000c443
    c608:	0000c443 	.word	0x0000c443
    c60c:	0000c443 	.word	0x0000c443
    c610:	0000c443 	.word	0x0000c443
    c614:	0000c743 	.word	0x0000c743
    c618:	0000c763 	.word	0x0000c763
    c61c:	0000c443 	.word	0x0000c443
    c620:	0000c443 	.word	0x0000c443
    c624:	0000c7b7 	.word	0x0000c7b7
    c628:	0000c443 	.word	0x0000c443
    c62c:	0000c6cf 	.word	0x0000c6cf
    c630:	0000c443 	.word	0x0000c443
    c634:	0000c443 	.word	0x0000c443
    c638:	0000c70f 	.word	0x0000c70f
                    if (!p.left) {
    c63c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    c640:	f013 0f08 	tst.w	r3, #8
    c644:	f47f af25 	bne.w	c492 <tfp_format+0x62>
                        p.lz = 1;
    c648:	2301      	movs	r3, #1
    c64a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
    c64e:	e720      	b.n	c492 <tfp_format+0x62>
                    p.alt = 1;
    c650:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    c654:	f043 0302 	orr.w	r3, r3, #2
    c658:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
    c65c:	e719      	b.n	c492 <tfp_format+0x62>
                    p.left = 1;
    c65e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    c662:	f043 0308 	orr.w	r3, r3, #8
    c666:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
    c66a:	2300      	movs	r3, #0
    c66c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
    c670:	e70f      	b.n	c492 <tfp_format+0x62>
                i = intarg(0, 1, &va);
    c672:	466a      	mov	r2, sp
    c674:	2101      	movs	r1, #1
    c676:	2000      	movs	r0, #0
    c678:	f7ff fea6 	bl	c3c8 <intarg>
                if (i > UCHAR_MAX) {
    c67c:	28ff      	cmp	r0, #255	; 0xff
    c67e:	dd07      	ble.n	c690 <tfp_format+0x260>
                    p.width = UCHAR_MAX;
    c680:	23ff      	movs	r3, #255	; 0xff
    c682:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
    c686:	9b01      	ldr	r3, [sp, #4]
    c688:	1c5a      	adds	r2, r3, #1
    c68a:	9201      	str	r2, [sp, #4]
    c68c:	781c      	ldrb	r4, [r3, #0]
    c68e:	e717      	b.n	c4c0 <tfp_format+0x90>
                } else if (i > 0) {
    c690:	2800      	cmp	r0, #0
    c692:	ddf8      	ble.n	c686 <tfp_format+0x256>
                    p.width = i;
    c694:	f88d 0020 	strb.w	r0, [sp, #32]
    c698:	e7f5      	b.n	c686 <tfp_format+0x256>
                ch = a2i(ch, &fmt, 10, &(p.width));
    c69a:	ab08      	add	r3, sp, #32
    c69c:	220a      	movs	r2, #10
    c69e:	a901      	add	r1, sp, #4
    c6a0:	4620      	mov	r0, r4
    c6a2:	f7ff fdcf 	bl	c244 <a2i>
    c6a6:	4604      	mov	r4, r0
    c6a8:	e70a      	b.n	c4c0 <tfp_format+0x90>
                ch = *(fmt++);
    c6aa:	9b01      	ldr	r3, [sp, #4]
    c6ac:	1c5a      	adds	r2, r3, #1
    c6ae:	9201      	str	r2, [sp, #4]
    c6b0:	781c      	ldrb	r4, [r3, #0]
                if (ch == 'l') {
    c6b2:	2c6c      	cmp	r4, #108	; 0x6c
    c6b4:	d001      	beq.n	c6ba <tfp_format+0x28a>
                lng = 1;
    c6b6:	2001      	movs	r0, #1
    c6b8:	e706      	b.n	c4c8 <tfp_format+0x98>
                    ch = *(fmt++);
    c6ba:	1c9a      	adds	r2, r3, #2
    c6bc:	9201      	str	r2, [sp, #4]
    c6be:	785c      	ldrb	r4, [r3, #1]
                    lng = 2;
    c6c0:	2002      	movs	r0, #2
    c6c2:	e701      	b.n	c4c8 <tfp_format+0x98>
                ch = *(fmt++);
    c6c4:	9b01      	ldr	r3, [sp, #4]
    c6c6:	1c5a      	adds	r2, r3, #1
    c6c8:	9201      	str	r2, [sp, #4]
    c6ca:	781c      	ldrb	r4, [r3, #0]
    c6cc:	e6ff      	b.n	c4ce <tfp_format+0x9e>
            case 0:
                goto abort;
            case 'u':
                p.base = 10;
    c6ce:	230a      	movs	r3, #10
    c6d0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
    c6d4:	466a      	mov	r2, sp
    c6d6:	2100      	movs	r1, #0
    c6d8:	f7ff fe76 	bl	c3c8 <intarg>
    c6dc:	aa08      	add	r2, sp, #32
    c6de:	f7ff fd24 	bl	c12a <ui2a>
                written += putchw(putp, &p);
    c6e2:	a908      	add	r1, sp, #32
    c6e4:	4630      	mov	r0, r6
    c6e6:	f7ff fddd 	bl	c2a4 <putchw>
    c6ea:	4405      	add	r5, r0
                break;
    c6ec:	e6a9      	b.n	c442 <tfp_format+0x12>
            case 'd':
            case 'i':
                p.base = 10;
    c6ee:	230a      	movs	r3, #10
    c6f0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
    c6f4:	466a      	mov	r2, sp
    c6f6:	2101      	movs	r1, #1
    c6f8:	f7ff fe66 	bl	c3c8 <intarg>
    c6fc:	aa08      	add	r2, sp, #32
    c6fe:	f7ff fd7b 	bl	c1f8 <i2a>
                written += putchw(putp, &p);
    c702:	a908      	add	r1, sp, #32
    c704:	4630      	mov	r0, r6
    c706:	f7ff fdcd 	bl	c2a4 <putchw>
    c70a:	4405      	add	r5, r0
                break;
    c70c:	e699      	b.n	c442 <tfp_format+0x12>
            case 'x':
            case 'X':
                p.base = 16;
    c70e:	2310      	movs	r3, #16
    c710:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
    c714:	2c58      	cmp	r4, #88	; 0x58
    c716:	bf14      	ite	ne
    c718:	2400      	movne	r4, #0
    c71a:	2401      	moveq	r4, #1
    c71c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    c720:	f364 0382 	bfi	r3, r4, #2, #1
    c724:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
    c728:	466a      	mov	r2, sp
    c72a:	2100      	movs	r1, #0
    c72c:	f7ff fe4c 	bl	c3c8 <intarg>
    c730:	aa08      	add	r2, sp, #32
    c732:	f7ff fcfa 	bl	c12a <ui2a>
                written += putchw(putp, &p);
    c736:	a908      	add	r1, sp, #32
    c738:	4630      	mov	r0, r6
    c73a:	f7ff fdb3 	bl	c2a4 <putchw>
    c73e:	4405      	add	r5, r0
                break;
    c740:	e67f      	b.n	c442 <tfp_format+0x12>
            case 'o':
                p.base = 8;
    c742:	2308      	movs	r3, #8
    c744:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
    c748:	466a      	mov	r2, sp
    c74a:	2100      	movs	r1, #0
    c74c:	f7ff fe3c 	bl	c3c8 <intarg>
    c750:	aa08      	add	r2, sp, #32
    c752:	f7ff fcea 	bl	c12a <ui2a>
                written += putchw(putp, &p);
    c756:	a908      	add	r1, sp, #32
    c758:	4630      	mov	r0, r6
    c75a:	f7ff fda3 	bl	c2a4 <putchw>
    c75e:	4405      	add	r5, r0
                break;
    c760:	e66f      	b.n	c442 <tfp_format+0x12>
            case 'p':
                v = va_arg(va, void *);
    c762:	9b00      	ldr	r3, [sp, #0]
    c764:	1d1a      	adds	r2, r3, #4
    c766:	9200      	str	r2, [sp, #0]
    c768:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
    c76a:	2310      	movs	r3, #16
    c76c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
    c770:	aa08      	add	r2, sp, #32
    c772:	2100      	movs	r1, #0
    c774:	f7ff fcd9 	bl	c12a <ui2a>
                p.width = 2 * sizeof(void*);
    c778:	2308      	movs	r3, #8
    c77a:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
    c77e:	2301      	movs	r3, #1
    c780:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
    c784:	2130      	movs	r1, #48	; 0x30
    c786:	4630      	mov	r0, r6
    c788:	f7ff fd7a 	bl	c280 <putf>
    c78c:	4405      	add	r5, r0
                written += putf(putp, 'x');
    c78e:	2178      	movs	r1, #120	; 0x78
    c790:	4630      	mov	r0, r6
    c792:	f7ff fd75 	bl	c280 <putf>
    c796:	4405      	add	r5, r0
                written += putchw(putp, &p);
    c798:	a908      	add	r1, sp, #32
    c79a:	4630      	mov	r0, r6
    c79c:	f7ff fd82 	bl	c2a4 <putchw>
    c7a0:	4405      	add	r5, r0
                break;
    c7a2:	e64e      	b.n	c442 <tfp_format+0x12>
            case 'c':
                written += putf(putp, (char)(va_arg(va, int)));
    c7a4:	9b00      	ldr	r3, [sp, #0]
    c7a6:	1d1a      	adds	r2, r3, #4
    c7a8:	9200      	str	r2, [sp, #0]
    c7aa:	7819      	ldrb	r1, [r3, #0]
    c7ac:	4630      	mov	r0, r6
    c7ae:	f7ff fd67 	bl	c280 <putf>
    c7b2:	4405      	add	r5, r0
                break;
    c7b4:	e645      	b.n	c442 <tfp_format+0x12>
            case 's':
                p.bf = va_arg(va, char *);
    c7b6:	9b00      	ldr	r3, [sp, #0]
    c7b8:	1d1a      	adds	r2, r3, #4
    c7ba:	9200      	str	r2, [sp, #0]
    c7bc:	681b      	ldr	r3, [r3, #0]
    c7be:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
    c7c0:	a908      	add	r1, sp, #32
    c7c2:	4630      	mov	r0, r6
    c7c4:	f7ff fd6e 	bl	c2a4 <putchw>
    c7c8:	4405      	add	r5, r0
                p.bf = bf;
    c7ca:	ab02      	add	r3, sp, #8
    c7cc:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    c7ce:	e638      	b.n	c442 <tfp_format+0x12>
#if MYNEWT_VAL(FLOAT_USER)
            case 'f':
                p.base = 10;
    c7d0:	230a      	movs	r3, #10
    c7d2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                d = va_arg(va, double);
    c7d6:	9b00      	ldr	r3, [sp, #0]
    c7d8:	3307      	adds	r3, #7
    c7da:	f023 0307 	bic.w	r3, r3, #7
    c7de:	f103 0208 	add.w	r2, r3, #8
    c7e2:	9200      	str	r2, [sp, #0]
    c7e4:	e9d3 8900 	ldrd	r8, r9, [r3]
                /* Convert to an int to get the integer part of the number. */
                n = d;
    c7e8:	4640      	mov	r0, r8
    c7ea:	4649      	mov	r1, r9
    c7ec:	f013 fdc0 	bl	20370 <__aeabi_d2iz>
    c7f0:	4604      	mov	r4, r0
                /* Convert to ascii */
                i2a(n, &p);
    c7f2:	aa08      	add	r2, sp, #32
    c7f4:	17c1      	asrs	r1, r0, #31
    c7f6:	f7ff fcff 	bl	c1f8 <i2a>
                /* When the double was converted to an int it was truncated
                 * towards 0.  If the number is in the range (-1, 0), the
                 * negative sign was lost.  Preserve the sign in this case.
                 */
                if (d < 0.0) {
    c7fa:	2200      	movs	r2, #0
    c7fc:	2300      	movs	r3, #0
    c7fe:	4640      	mov	r0, r8
    c800:	4649      	mov	r1, r9
    c802:	f013 fd77 	bl	202f4 <__aeabi_dcmplt>
    c806:	bbc8      	cbnz	r0, c87c <tfp_format+0x44c>
                    p.sign = 1;
                }
                /* Ignore left align for integer part */
                p.left = 0;
    c808:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    c80c:	f36f 03c3 	bfc	r3, #3, #1
    c810:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                /* Subtract width for decimal part and decimal point */
                if (p.width >= 4) {
    c814:	f89d 3020 	ldrb.w	r3, [sp, #32]
    c818:	2b03      	cmp	r3, #3
    c81a:	d936      	bls.n	c88a <tfp_format+0x45a>
                    p.width -= 4;
    c81c:	3b04      	subs	r3, #4
    c81e:	f88d 3020 	strb.w	r3, [sp, #32]
                } else {
                    p.width = 0;
                }
                /* Write integer part to console */
                written += putchw(putp, &p);
    c822:	a908      	add	r1, sp, #32
    c824:	4630      	mov	r0, r6
    c826:	f7ff fd3d 	bl	c2a4 <putchw>
    c82a:	4405      	add	r5, r0
                /* Take the decimal part and multiply by 1000 */
                n = (d-n)*1000;
    c82c:	4620      	mov	r0, r4
    c82e:	f013 fa85 	bl	1fd3c <__aeabi_i2d>
    c832:	4602      	mov	r2, r0
    c834:	460b      	mov	r3, r1
    c836:	4640      	mov	r0, r8
    c838:	4649      	mov	r1, r9
    c83a:	f013 f931 	bl	1faa0 <__aeabi_dsub>
    c83e:	2200      	movs	r2, #0
    c840:	4b19      	ldr	r3, [pc, #100]	; (c8a8 <tfp_format+0x478>)
    c842:	f013 fae5 	bl	1fe10 <__aeabi_dmul>
    c846:	f013 fd93 	bl	20370 <__aeabi_d2iz>
                /* Convert to ascii */
                i2a(n, &p);
    c84a:	aa08      	add	r2, sp, #32
    c84c:	17c1      	asrs	r1, r0, #31
    c84e:	f7ff fcd3 	bl	c1f8 <i2a>
                /* Set the leading zeros for the next integer output to 3 */
                p.lz = 3;
    c852:	2303      	movs	r3, #3
    c854:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                /* Always use the same decimal width */
                p.width = 3;
    c858:	f88d 3020 	strb.w	r3, [sp, #32]
                /* Ignore sign for decimal part*/
                p.sign = 0;
    c85c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    c860:	f36f 0300 	bfc	r3, #0, #1
    c864:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                /* Output a decimal point */
                putf(putp, '.');
    c868:	212e      	movs	r1, #46	; 0x2e
    c86a:	4630      	mov	r0, r6
    c86c:	f7ff fd08 	bl	c280 <putf>
                /* Output the decimal part. */
                written += putchw(putp, &p);
    c870:	a908      	add	r1, sp, #32
    c872:	4630      	mov	r0, r6
    c874:	f7ff fd16 	bl	c2a4 <putchw>
    c878:	4405      	add	r5, r0
                break;
    c87a:	e5e2      	b.n	c442 <tfp_format+0x12>
                    p.sign = 1;
    c87c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    c880:	f043 0301 	orr.w	r3, r3, #1
    c884:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    c888:	e7be      	b.n	c808 <tfp_format+0x3d8>
                    p.width = 0;
    c88a:	2300      	movs	r3, #0
    c88c:	f88d 3020 	strb.w	r3, [sp, #32]
    c890:	e7c7      	b.n	c822 <tfp_format+0x3f2>
#endif
            case '%':
                written += putf(putp, ch);
    c892:	4621      	mov	r1, r4
    c894:	4630      	mov	r0, r6
    c896:	f7ff fcf3 	bl	c280 <putf>
    c89a:	4405      	add	r5, r0
                break;
    c89c:	e5d1      	b.n	c442 <tfp_format+0x12>
        }
    }
 abort:;
 
 return written;
}
    c89e:	4628      	mov	r0, r5
    c8a0:	b00a      	add	sp, #40	; 0x28
    c8a2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    c8a6:	bf00      	nop
    c8a8:	408f4000 	.word	0x408f4000

0000c8ac <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
    c8ac:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
    c8ae:	f7ff fdbf 	bl	c430 <tfp_format>
}
    c8b2:	bd08      	pop	{r3, pc}

0000c8b4 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
    c8b4:	b40f      	push	{r0, r1, r2, r3}
    c8b6:	b500      	push	{lr}
    c8b8:	b083      	sub	sp, #12
    c8ba:	aa04      	add	r2, sp, #16
    c8bc:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
    c8c0:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
    c8c2:	4b04      	ldr	r3, [pc, #16]	; (c8d4 <printf+0x20>)
    c8c4:	6818      	ldr	r0, [r3, #0]
    c8c6:	f7ff fff1 	bl	c8ac <vfprintf>
    va_end(va);
    return rv;
}
    c8ca:	b003      	add	sp, #12
    c8cc:	f85d eb04 	ldr.w	lr, [sp], #4
    c8d0:	b004      	add	sp, #16
    c8d2:	4770      	bx	lr
    c8d4:	00021bdc 	.word	0x00021bdc

0000c8d8 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
    c8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8da:	b085      	sub	sp, #20
    c8dc:	4605      	mov	r5, r0
    c8de:	460c      	mov	r4, r1
    c8e0:	4616      	mov	r6, r2
    c8e2:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
    c8e4:	460a      	mov	r2, r1
    c8e6:	4601      	mov	r1, r0
    c8e8:	4668      	mov	r0, sp
    c8ea:	f000 f83d 	bl	c968 <fmemopen_w>
    tfp_format(f, fmt, va);
    c8ee:	463a      	mov	r2, r7
    c8f0:	4631      	mov	r1, r6
    c8f2:	f7ff fd9d 	bl	c430 <tfp_format>
    if (size > 0) {
    c8f6:	b12c      	cbz	r4, c904 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
    c8f8:	9b02      	ldr	r3, [sp, #8]
    c8fa:	42a3      	cmp	r3, r4
    c8fc:	d205      	bcs.n	c90a <vsnprintf+0x32>
            *(state.buffer) = '\0';
    c8fe:	9b01      	ldr	r3, [sp, #4]
    c900:	2200      	movs	r2, #0
    c902:	701a      	strb	r2, [r3, #0]
        } else {
            str[size - 1] = '\0';
        }
    }
    return state.bytes_written;
}
    c904:	9802      	ldr	r0, [sp, #8]
    c906:	b005      	add	sp, #20
    c908:	bdf0      	pop	{r4, r5, r6, r7, pc}
            str[size - 1] = '\0';
    c90a:	3c01      	subs	r4, #1
    c90c:	2300      	movs	r3, #0
    c90e:	552b      	strb	r3, [r5, r4]
    c910:	e7f8      	b.n	c904 <vsnprintf+0x2c>

0000c912 <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...)
{
    c912:	b40c      	push	{r2, r3}
    c914:	b500      	push	{lr}
    c916:	b083      	sub	sp, #12
    c918:	ab04      	add	r3, sp, #16
    c91a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, fmt);
    c91e:	9301      	str	r3, [sp, #4]
    int rv = vsnprintf(str, size, fmt, va);
    c920:	f7ff ffda 	bl	c8d8 <vsnprintf>
    va_end(va);
    return rv;
}
    c924:	b003      	add	sp, #12
    c926:	f85d eb04 	ldr.w	lr, [sp], #4
    c92a:	b002      	add	sp, #8
    c92c:	4770      	bx	lr

0000c92e <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
    c92e:	b500      	push	{lr}
    c930:	4684      	mov	ip, r0
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
    c932:	2000      	movs	r0, #0
    
    while (n--)
    c934:	e000      	b.n	c938 <memfile_write+0xa>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
    c936:	4672      	mov	r2, lr
    while (n--)
    c938:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    c93c:	b192      	cbz	r2, c964 <memfile_write+0x36>
        f->bytes_written++;
    c93e:	f8dc 3008 	ldr.w	r3, [ip, #8]
    c942:	3301      	adds	r3, #1
    c944:	f8cc 3008 	str.w	r3, [ip, #8]
        if (f->bytes_written <= f->size)
    c948:	f8dc 200c 	ldr.w	r2, [ip, #12]
    c94c:	4293      	cmp	r3, r2
    c94e:	d8f2      	bhi.n	c936 <memfile_write+0x8>
            *f->buffer++ = *bp++;
    c950:	f8dc 3004 	ldr.w	r3, [ip, #4]
    c954:	1c5a      	adds	r2, r3, #1
    c956:	f8cc 2004 	str.w	r2, [ip, #4]
    c95a:	f811 2b01 	ldrb.w	r2, [r1], #1
    c95e:	701a      	strb	r2, [r3, #0]
            i++;
    c960:	3001      	adds	r0, #1
    c962:	e7e8      	b.n	c936 <memfile_write+0x8>
        }
    }
    
    return i;
}
    c964:	f85d fb04 	ldr.w	pc, [sp], #4

0000c968 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
    c968:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
    c96a:	4c04      	ldr	r4, [pc, #16]	; (c97c <fmemopen_w+0x14>)
    c96c:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
    c96e:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
    c970:	2100      	movs	r1, #0
    c972:	6081      	str	r1, [r0, #8]
    storage->size = size;
    c974:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
    c976:	f85d 4b04 	ldr.w	r4, [sp], #4
    c97a:	4770      	bx	lr
    c97c:	00021be0 	.word	0x00021be0

0000c980 <dpl_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
dpl_cputime_get32(void)
{
    c980:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    c982:	2000      	movs	r0, #0
    c984:	f00b fd0c 	bl	183a0 <hal_timer_read>
return cpu_time;
}
    c988:	bd08      	pop	{r3, pc}

0000c98a <dpl_cputime_delay_ticks>:
{
    c98a:	b510      	push	{r4, lr}
    c98c:	4604      	mov	r4, r0
    until = dpl_cputime_get32() + ticks;
    c98e:	f7ff fff7 	bl	c980 <dpl_cputime_get32>
    c992:	4404      	add	r4, r0
    while ((int32_t)(dpl_cputime_get32() - until) < 0) {
    c994:	f7ff fff4 	bl	c980 <dpl_cputime_get32>
    c998:	1b00      	subs	r0, r0, r4
    c99a:	2800      	cmp	r0, #0
    c99c:	dbfa      	blt.n	c994 <dpl_cputime_delay_ticks+0xa>
}
    c99e:	bd10      	pop	{r4, pc}

0000c9a0 <dpl_cputime_delay_usecs>:
{
    c9a0:	b508      	push	{r3, lr}
    dpl_cputime_delay_ticks(ticks);
    c9a2:	f7ff fff2 	bl	c98a <dpl_cputime_delay_ticks>
}
    c9a6:	bd08      	pop	{r3, pc}

0000c9a8 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct dpl_mempool *mempool,
                   struct dpl_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
    c9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9aa:	b083      	sub	sp, #12
    c9ac:	460d      	mov	r5, r1
    c9ae:	4617      	mov	r7, r2
    int rc;

    rc = dpl_mempool_init(mempool, num_blocks, block_size, mem, name);
    c9b0:	b29e      	uxth	r6, r3
    c9b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c9b4:	9300      	str	r3, [sp, #0]
    c9b6:	4603      	mov	r3, r0
    c9b8:	9a08      	ldr	r2, [sp, #32]
    c9ba:	4631      	mov	r1, r6
    c9bc:	4628      	mov	r0, r5
    c9be:	f000 f82f 	bl	ca20 <dpl_mempool_init>
    if (rc != 0) {
    c9c2:	b108      	cbz	r0, c9c8 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    c9c4:	b003      	add	sp, #12
    c9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = dpl_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
    c9c8:	4633      	mov	r3, r6
    c9ca:	9a08      	ldr	r2, [sp, #32]
    c9cc:	b292      	uxth	r2, r2
    c9ce:	4629      	mov	r1, r5
    c9d0:	4638      	mov	r0, r7
    c9d2:	f000 f8ba 	bl	cb4a <dpl_mbuf_pool_init>
    if (rc != 0) {
    c9d6:	e7f5      	b.n	c9c4 <mem_init_mbuf_pool+0x1c>

0000c9d8 <mem_split_frag>:
 *                              NULL on failure.
 */
struct dpl_mbuf *
mem_split_frag(struct dpl_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
    c9d8:	b570      	push	{r4, r5, r6, lr}
    c9da:	4604      	mov	r4, r0
    c9dc:	460d      	mov	r5, r1
    c9de:	4619      	mov	r1, r3
    struct dpl_mbuf *frag;
    int rc;

    if (DPL_MBUF_PKTLEN(*om) <= max_frag_sz) {
    c9e0:	6806      	ldr	r6, [r0, #0]
    c9e2:	8a33      	ldrh	r3, [r6, #16]
    c9e4:	42ab      	cmp	r3, r5
    c9e6:	d913      	bls.n	ca10 <mem_split_frag+0x38>
        *om = NULL;
        return frag;
    }

    /* Packet needs to be split.  Allocate a new buffer for the fragment. */
    frag = alloc_cb(max_frag_sz, cb_arg);
    c9e8:	4628      	mov	r0, r5
    c9ea:	4790      	blx	r2
    if (frag == NULL) {
    c9ec:	4606      	mov	r6, r0
    c9ee:	b190      	cbz	r0, ca16 <mem_split_frag+0x3e>
        goto err;
    }

    /* Move data from the front of the packet into the fragment mbuf. */
    rc = dpl_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
    c9f0:	462b      	mov	r3, r5
    c9f2:	2200      	movs	r2, #0
    c9f4:	6821      	ldr	r1, [r4, #0]
    c9f6:	f000 f944 	bl	cc82 <dpl_mbuf_appendfrom>
    if (rc != 0) {
    c9fa:	b960      	cbnz	r0, ca16 <mem_split_frag+0x3e>
        goto err;
    }
    dpl_mbuf_adj(*om, max_frag_sz);
    c9fc:	4629      	mov	r1, r5
    c9fe:	6820      	ldr	r0, [r4, #0]
    ca00:	f000 f96b 	bl	ccda <dpl_mbuf_adj>

    /* Free unused portion of of source mbuf chain, if possible. */
    *om = dpl_mbuf_trim_front(*om);
    ca04:	6820      	ldr	r0, [r4, #0]
    ca06:	f000 f9bf 	bl	cd88 <dpl_mbuf_trim_front>
    ca0a:	6020      	str	r0, [r4, #0]
    return frag;

err:
    dpl_mbuf_free_chain(frag);
    return NULL;
}
    ca0c:	4630      	mov	r0, r6
    ca0e:	bd70      	pop	{r4, r5, r6, pc}
        *om = NULL;
    ca10:	2300      	movs	r3, #0
    ca12:	6003      	str	r3, [r0, #0]
        return frag;
    ca14:	e7fa      	b.n	ca0c <mem_split_frag+0x34>
    dpl_mbuf_free_chain(frag);
    ca16:	4630      	mov	r0, r6
    ca18:	f000 f8bd 	bl	cb96 <dpl_mbuf_free_chain>
    return NULL;
    ca1c:	2600      	movs	r6, #0
    ca1e:	e7f5      	b.n	ca0c <mem_split_frag+0x34>

0000ca20 <dpl_mempool_init>:
    int true_block_size;
    uint8_t *block_addr;
    struct dpl_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    ca20:	2800      	cmp	r0, #0
    ca22:	d035      	beq.n	ca90 <dpl_mempool_init+0x70>
{
    ca24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ca26:	460c      	mov	r4, r1
    ca28:	461d      	mov	r5, r3
    ca2a:	4606      	mov	r6, r0
    if (!mp || (block_size == 0)) {
    ca2c:	2a00      	cmp	r2, #0
    ca2e:	d031      	beq.n	ca94 <dpl_mempool_init+0x74>
        return DPL_INVALID_PARAM;
    }

    if ((!membuf) && (blocks != 0)) {
    ca30:	b1c3      	cbz	r3, ca64 <dpl_mempool_init+0x44>
        return DPL_INVALID_PARAM;
    }

    if (membuf != NULL) {
    ca32:	b115      	cbz	r5, ca3a <dpl_mempool_init+0x1a>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uintptr_t)membuf & (DPL_ALIGNMENT - 1)) != 0) {
    ca34:	f015 0f03 	tst.w	r5, #3
    ca38:	d12e      	bne.n	ca98 <dpl_mempool_init+0x78>
            return DPL_MEM_NOT_ALIGNED;
        }
    }
    true_block_size = DPL_MEM_TRUE_BLOCK_SIZE(block_size);
    ca3a:	f012 0f03 	tst.w	r2, #3
    ca3e:	d015      	beq.n	ca6c <dpl_mempool_init+0x4c>
    ca40:	f022 0703 	bic.w	r7, r2, #3
    ca44:	3704      	adds	r7, #4

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    ca46:	6032      	str	r2, [r6, #0]
    mp->mp_num_free = blocks;
    ca48:	80f4      	strh	r4, [r6, #6]
    mp->mp_min_free = blocks;
    ca4a:	8134      	strh	r4, [r6, #8]
    mp->mp_flags = 0;
    ca4c:	2300      	movs	r3, #0
    ca4e:	72b3      	strb	r3, [r6, #10]
    mp->mp_num_blocks = blocks;
    ca50:	80b4      	strh	r4, [r6, #4]
    mp->mp_membuf_addr = (uintptr_t)membuf;
    ca52:	60f5      	str	r5, [r6, #12]
    mp->name = name;
    ca54:	9b06      	ldr	r3, [sp, #24]
    ca56:	61b3      	str	r3, [r6, #24]
    dpl_mempool_poison(membuf, true_block_size);
    SLIST_FIRST(mp) = membuf;
    ca58:	6175      	str	r5, [r6, #20]
    return (dpl_error_t)os_mutex_init(&mu->mu);
    ca5a:	f106 001c 	add.w	r0, r6, #28
    ca5e:	f7fd ff77 	bl	a950 <os_mutex_init>
    dpl_mutex_init(&mp->mutex);

    /* Chain the memory blocks to the free list */
    block_addr = (uint8_t *)membuf;
    block_ptr = (struct dpl_memblock *)block_addr;
    while (blocks > 1) {
    ca62:	e00a      	b.n	ca7a <dpl_mempool_init+0x5a>
    if ((!membuf) && (blocks != 0)) {
    ca64:	2900      	cmp	r1, #0
    ca66:	d0e4      	beq.n	ca32 <dpl_mempool_init+0x12>
        return DPL_INVALID_PARAM;
    ca68:	2003      	movs	r0, #3
    ca6a:	e010      	b.n	ca8e <dpl_mempool_init+0x6e>
    true_block_size = DPL_MEM_TRUE_BLOCK_SIZE(block_size);
    ca6c:	4617      	mov	r7, r2
    ca6e:	e7ea      	b.n	ca46 <dpl_mempool_init+0x26>
        block_addr += true_block_size;
    ca70:	19eb      	adds	r3, r5, r7
        dpl_mempool_poison(block_addr, true_block_size);
        SLIST_NEXT(block_ptr, mb_next) = (struct dpl_memblock *)block_addr;
    ca72:	602b      	str	r3, [r5, #0]
        block_ptr = (struct dpl_memblock *)block_addr;
        --blocks;
    ca74:	3c01      	subs	r4, #1
    ca76:	b2a4      	uxth	r4, r4
        block_addr += true_block_size;
    ca78:	461d      	mov	r5, r3
    while (blocks > 1) {
    ca7a:	2c01      	cmp	r4, #1
    ca7c:	d8f8      	bhi.n	ca70 <dpl_mempool_init+0x50>
    }

    /* Last one in the list should be NULL */
    SLIST_NEXT(block_ptr, mb_next) = NULL;
    ca7e:	2000      	movs	r0, #0
    ca80:	6028      	str	r0, [r5, #0]

    STAILQ_INSERT_TAIL(&g_dpl_mempool_list, mp, mp_list);
    ca82:	6130      	str	r0, [r6, #16]
    ca84:	4b05      	ldr	r3, [pc, #20]	; (ca9c <dpl_mempool_init+0x7c>)
    ca86:	685a      	ldr	r2, [r3, #4]
    ca88:	6016      	str	r6, [r2, #0]
    ca8a:	3610      	adds	r6, #16
    ca8c:	605e      	str	r6, [r3, #4]

    return DPL_OK;
}
    ca8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DPL_INVALID_PARAM;
    ca90:	2003      	movs	r0, #3
}
    ca92:	4770      	bx	lr
        return DPL_INVALID_PARAM;
    ca94:	2003      	movs	r0, #3
    ca96:	e7fa      	b.n	ca8e <dpl_mempool_init+0x6e>
            return DPL_MEM_NOT_ALIGNED;
    ca98:	2004      	movs	r0, #4
    ca9a:	e7f8      	b.n	ca8e <dpl_mempool_init+0x6e>
    ca9c:	20000180 	.word	0x20000180

0000caa0 <dpl_memblock_get>:
    return 1;
}

void *
dpl_memblock_get(struct dpl_mempool *mp)
{
    caa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dpl_sr_t sr;
    struct dpl_memblock *block;

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    caa2:	4604      	mov	r4, r0
    caa4:	b1f8      	cbz	r0, cae6 <dpl_memblock_get+0x46>
    return os_arch_save_sr();
    caa6:	f7fd fc5f 	bl	a368 <os_arch_save_sr>
    caaa:	4605      	mov	r5, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    caac:	f104 071c 	add.w	r7, r4, #28
    cab0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    cab4:	4638      	mov	r0, r7
    cab6:	f7fd ffb1 	bl	aa1c <os_mutex_pend>
        DPL_ENTER_CRITICAL(sr);
        dpl_mutex_pend(&mp->mutex, DPL_WAIT_FOREVER);
        /* Check for any free */
        if (mp->mp_num_free) {
    caba:	88e3      	ldrh	r3, [r4, #6]
    cabc:	b153      	cbz	r3, cad4 <dpl_memblock_get+0x34>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    cabe:	6966      	ldr	r6, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    cac0:	6832      	ldr	r2, [r6, #0]
    cac2:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    cac4:	3b01      	subs	r3, #1
    cac6:	b29b      	uxth	r3, r3
    cac8:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    caca:	8922      	ldrh	r2, [r4, #8]
    cacc:	4293      	cmp	r3, r2
    cace:	d202      	bcs.n	cad6 <dpl_memblock_get+0x36>
                mp->mp_min_free = mp->mp_num_free;
    cad0:	8123      	strh	r3, [r4, #8]
    cad2:	e000      	b.n	cad6 <dpl_memblock_get+0x36>
    block = NULL;
    cad4:	2600      	movs	r6, #0
    return (dpl_error_t)os_mutex_release(&mu->mu);
    cad6:	4638      	mov	r0, r7
    cad8:	f7fd ff44 	bl	a964 <os_mutex_release>
    os_arch_restore_sr(ctx);
    cadc:	4628      	mov	r0, r5
    cade:	f7fd fc49 	bl	a374 <os_arch_restore_sr>
            dpl_mempool_poison_check(block, DPL_MEMPOOL_TRUE_BLOCK_SIZE(mp));
        }
    }

    return (void *)block;
}
    cae2:	4630      	mov	r0, r6
    cae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    block = NULL;
    cae6:	4606      	mov	r6, r0
    return (void *)block;
    cae8:	e7fb      	b.n	cae2 <dpl_memblock_get+0x42>

0000caea <dpl_memblock_put_from_cb>:

dpl_error_t
dpl_memblock_put_from_cb(struct dpl_mempool *mp, void *block_addr)
{
    caea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    caec:	4604      	mov	r4, r0
    caee:	460d      	mov	r5, r1
    return os_arch_save_sr();
    caf0:	f7fd fc3a 	bl	a368 <os_arch_save_sr>
    caf4:	4606      	mov	r6, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    caf6:	f104 071c 	add.w	r7, r4, #28
    cafa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    cafe:	4638      	mov	r0, r7
    cb00:	f7fd ff8c 	bl	aa1c <os_mutex_pend>
    block = (struct dpl_memblock *)block_addr;
    DPL_ENTER_CRITICAL(sr);
    dpl_mutex_pend(&mp->mutex, DPL_WAIT_FOREVER);

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    cb04:	6963      	ldr	r3, [r4, #20]
    cb06:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
    cb08:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    cb0a:	88e3      	ldrh	r3, [r4, #6]
    cb0c:	3301      	adds	r3, #1
    cb0e:	80e3      	strh	r3, [r4, #6]
    return (dpl_error_t)os_mutex_release(&mu->mu);
    cb10:	4638      	mov	r0, r7
    cb12:	f7fd ff27 	bl	a964 <os_mutex_release>
    os_arch_restore_sr(ctx);
    cb16:	4630      	mov	r0, r6
    cb18:	f7fd fc2c 	bl	a374 <os_arch_restore_sr>

    dpl_mutex_release(&mp->mutex);
    DPL_EXIT_CRITICAL(sr);

    return DPL_OK;
}
    cb1c:	2000      	movs	r0, #0
    cb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000cb20 <dpl_memblock_put>:
#if MYNEWT_VAL(DPL_MEMPOOL_CHECK)
    struct dpl_memblock *block;
#endif

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    cb20:	b178      	cbz	r0, cb42 <dpl_memblock_put+0x22>
    cb22:	4603      	mov	r3, r0
    cb24:	b179      	cbz	r1, cb46 <dpl_memblock_put+0x26>
{
    cb26:	b510      	push	{r4, lr}
#endif

    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & DPL_MEMPOOL_F_EXT) {
    cb28:	7a82      	ldrb	r2, [r0, #10]
    cb2a:	f012 0f01 	tst.w	r2, #1
    cb2e:	d004      	beq.n	cb3a <dpl_memblock_put+0x1a>
        mpe = (struct dpl_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    cb30:	6a84      	ldr	r4, [r0, #40]	; 0x28
    cb32:	b114      	cbz	r4, cb3a <dpl_memblock_put+0x1a>
            rc = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    cb34:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    cb36:	47a0      	blx	r4
            return rc;
    cb38:	e002      	b.n	cb40 <dpl_memblock_put+0x20>
        }
    }

    /* No callback; free the block. */
    return dpl_memblock_put_from_cb(mp, block_addr);
    cb3a:	4618      	mov	r0, r3
    cb3c:	f7ff ffd5 	bl	caea <dpl_memblock_put_from_cb>
}
    cb40:	bd10      	pop	{r4, pc}
        return DPL_INVALID_PARAM;
    cb42:	2003      	movs	r0, #3
    cb44:	4770      	bx	lr
    cb46:	2003      	movs	r0, #3
}
    cb48:	4770      	bx	lr

0000cb4a <dpl_mbuf_pool_init>:

int
dpl_mbuf_pool_init(struct dpl_mbuf_pool *omp, struct dpl_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct dpl_mbuf);
    cb4a:	3a10      	subs	r2, #16
    cb4c:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
    cb4e:	6041      	str	r1, [r0, #4]

    return (0);
}
    cb50:	2000      	movs	r0, #0
    cb52:	4770      	bx	lr

0000cb54 <dpl_mbuf_get>:

struct dpl_mbuf *
dpl_mbuf_get(struct dpl_mbuf_pool *omp, uint16_t leadingspace)
{
    cb54:	b538      	push	{r3, r4, r5, lr}
    struct dpl_mbuf *om;

    if (leadingspace > omp->omp_databuf_len) {
    cb56:	8803      	ldrh	r3, [r0, #0]
    cb58:	428b      	cmp	r3, r1
    cb5a:	d310      	bcc.n	cb7e <dpl_mbuf_get+0x2a>
    cb5c:	4604      	mov	r4, r0
    cb5e:	460d      	mov	r5, r1
        goto err;
    }

    om = dpl_memblock_get(omp->omp_pool);
    cb60:	6840      	ldr	r0, [r0, #4]
    cb62:	f7ff ff9d 	bl	caa0 <dpl_memblock_get>
    if (!om) {
    cb66:	b148      	cbz	r0, cb7c <dpl_mbuf_get+0x28>
        goto err;
    }

    SLIST_NEXT(om, om_next) = NULL;
    cb68:	2300      	movs	r3, #0
    cb6a:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
    cb6c:	7103      	strb	r3, [r0, #4]
    om->om_pkthdr_len = 0;
    cb6e:	7143      	strb	r3, [r0, #5]
    om->om_len = 0;
    cb70:	80c3      	strh	r3, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
    cb72:	f100 0110 	add.w	r1, r0, #16
    cb76:	440d      	add	r5, r1
    cb78:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
    cb7a:	6084      	str	r4, [r0, #8]

    return (om);
err:
    return (NULL);
}
    cb7c:	bd38      	pop	{r3, r4, r5, pc}
    return (NULL);
    cb7e:	2000      	movs	r0, #0
    cb80:	e7fc      	b.n	cb7c <dpl_mbuf_get+0x28>

0000cb82 <dpl_mbuf_free>:
    return om;
}

int
dpl_mbuf_free(struct dpl_mbuf *om)
{
    cb82:	b508      	push	{r3, lr}
    int rc;

    if (om->om_omp != NULL) {
    cb84:	6883      	ldr	r3, [r0, #8]
    cb86:	b123      	cbz	r3, cb92 <dpl_mbuf_free+0x10>
    cb88:	4601      	mov	r1, r0
        rc = dpl_memblock_put(om->om_omp->omp_pool, om);
    cb8a:	6858      	ldr	r0, [r3, #4]
    cb8c:	f7ff ffc8 	bl	cb20 <dpl_memblock_put>
    }

    return (0);
err:
    return (rc);
}
    cb90:	bd08      	pop	{r3, pc}
    return (0);
    cb92:	2000      	movs	r0, #0
    cb94:	e7fc      	b.n	cb90 <dpl_mbuf_free+0xe>

0000cb96 <dpl_mbuf_free_chain>:
dpl_mbuf_free_chain(struct dpl_mbuf *om)
{
    struct dpl_mbuf *next;
    int rc;

    while (om != NULL) {
    cb96:	b158      	cbz	r0, cbb0 <dpl_mbuf_free_chain+0x1a>
{
    cb98:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
    cb9a:	68c4      	ldr	r4, [r0, #12]

        rc = dpl_mbuf_free(om);
    cb9c:	f7ff fff1 	bl	cb82 <dpl_mbuf_free>
        if (rc != 0) {
    cba0:	4603      	mov	r3, r0
    cba2:	b918      	cbnz	r0, cbac <dpl_mbuf_free_chain+0x16>
            goto err;
        }

        om = next;
    cba4:	4620      	mov	r0, r4
    while (om != NULL) {
    cba6:	2c00      	cmp	r4, #0
    cba8:	d1f7      	bne.n	cb9a <dpl_mbuf_free_chain+0x4>
    }

    return (0);
    cbaa:	2300      	movs	r3, #0
err:
    return (rc);
}
    cbac:	4618      	mov	r0, r3
    cbae:	bd10      	pop	{r4, pc}
    return (0);
    cbb0:	2300      	movs	r3, #0
}
    cbb2:	4618      	mov	r0, r3
    cbb4:	4770      	bx	lr

0000cbb6 <dpl_mbuf_append>:
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
}

int
dpl_mbuf_append(struct dpl_mbuf *om, const void *data,  uint16_t len)
{
    cbb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct dpl_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    cbba:	2800      	cmp	r0, #0
    cbbc:	d04b      	beq.n	cc56 <dpl_mbuf_append+0xa0>
    cbbe:	460f      	mov	r7, r1
    cbc0:	4691      	mov	r9, r2
    cbc2:	4682      	mov	sl, r0
        rc = DPL_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    cbc4:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    cbc8:	4603      	mov	r3, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
    cbca:	461e      	mov	r6, r3
    cbcc:	68db      	ldr	r3, [r3, #12]
    cbce:	2b00      	cmp	r3, #0
    cbd0:	d1fb      	bne.n	cbca <dpl_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    cbd2:	464d      	mov	r5, r9
static inline uint16_t
_dpl_mbuf_trailingspace(struct dpl_mbuf *om)
{
    struct dpl_mbuf_pool *omp;

    omp = om->om_omp;
    cbd4:	68b3      	ldr	r3, [r6, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    cbd6:	f106 0410 	add.w	r4, r6, #16
    cbda:	881b      	ldrh	r3, [r3, #0]
    cbdc:	441c      	add	r4, r3
      (om->om_data + om->om_len);
    cbde:	6830      	ldr	r0, [r6, #0]
    cbe0:	88f3      	ldrh	r3, [r6, #6]
    cbe2:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    cbe4:	1a24      	subs	r4, r4, r0
    cbe6:	b2a4      	uxth	r4, r4
    space = DPL_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    cbe8:	b164      	cbz	r4, cc04 <dpl_mbuf_append+0x4e>
        if (space > remainder) {
    cbea:	454c      	cmp	r4, r9
    cbec:	dd00      	ble.n	cbf0 <dpl_mbuf_append+0x3a>
            space = remainder;
    cbee:	464c      	mov	r4, r9
        }

        memcpy(DPL_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    cbf0:	4622      	mov	r2, r4
    cbf2:	4639      	mov	r1, r7
    cbf4:	f7ff fa3e 	bl	c074 <memcpy>

        last->om_len += space;
    cbf8:	88f3      	ldrh	r3, [r6, #6]
    cbfa:	4423      	add	r3, r4
    cbfc:	80f3      	strh	r3, [r6, #6]
        data += space;
    cbfe:	4427      	add	r7, r4
        remainder -= space;
    cc00:	eba9 0504 	sub.w	r5, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    cc04:	2d00      	cmp	r5, #0
    cc06:	dd16      	ble.n	cc36 <dpl_mbuf_append+0x80>
        new = dpl_mbuf_get(omp, 0);
    cc08:	2100      	movs	r1, #0
    cc0a:	4640      	mov	r0, r8
    cc0c:	f7ff ffa2 	bl	cb54 <dpl_mbuf_get>
        if (!new) {
    cc10:	4604      	mov	r4, r0
    cc12:	b180      	cbz	r0, cc36 <dpl_mbuf_append+0x80>
            break;
        }

        new->om_len = mynewt_min(omp->omp_databuf_len, remainder);
    cc14:	f8b8 2000 	ldrh.w	r2, [r8]
    cc18:	42aa      	cmp	r2, r5
    cc1a:	bfa8      	it	ge
    cc1c:	462a      	movge	r2, r5
    cc1e:	b292      	uxth	r2, r2
    cc20:	80c2      	strh	r2, [r0, #6]
        memcpy(DPL_MBUF_DATA(new, void *), data, new->om_len);
    cc22:	4639      	mov	r1, r7
    cc24:	6800      	ldr	r0, [r0, #0]
    cc26:	f7ff fa25 	bl	c074 <memcpy>
        data += new->om_len;
    cc2a:	88e3      	ldrh	r3, [r4, #6]
    cc2c:	441f      	add	r7, r3
        remainder -= new->om_len;
    cc2e:	1aed      	subs	r5, r5, r3
        SLIST_NEXT(last, om_next) = new;
    cc30:	60f4      	str	r4, [r6, #12]
        last = new;
    cc32:	4626      	mov	r6, r4
    cc34:	e7e6      	b.n	cc04 <dpl_mbuf_append+0x4e>
    }

    /* Adjust the packet header length in the buffer */
    if (DPL_MBUF_IS_PKTHDR(om)) {
    cc36:	f89a 3005 	ldrb.w	r3, [sl, #5]
    cc3a:	2b07      	cmp	r3, #7
    cc3c:	d907      	bls.n	cc4e <dpl_mbuf_append+0x98>
        DPL_MBUF_PKTHDR(om)->omp_len += len - remainder;
    cc3e:	eba9 0905 	sub.w	r9, r9, r5
    cc42:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    cc46:	fa13 f989 	uxtah	r9, r3, r9
    cc4a:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
    cc4e:	b925      	cbnz	r5, cc5a <dpl_mbuf_append+0xa4>


    return (0);
err:
    return (rc);
}
    cc50:	4628      	mov	r0, r5
    cc52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = DPL_EINVAL;
    cc56:	2502      	movs	r5, #2
    cc58:	e7fa      	b.n	cc50 <dpl_mbuf_append+0x9a>
        rc = DPL_ENOMEM;
    cc5a:	2501      	movs	r5, #1
    cc5c:	e7f8      	b.n	cc50 <dpl_mbuf_append+0x9a>

0000cc5e <dpl_mbuf_off>:

    /* Cast away const. */
    cur = (struct dpl_mbuf *)om;

    while (1) {
        if (cur == NULL) {
    cc5e:	b178      	cbz	r0, cc80 <dpl_mbuf_off+0x22>
{
    cc60:	b410      	push	{r4}
    cc62:	e002      	b.n	cc6a <dpl_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
    cc64:	1ac9      	subs	r1, r1, r3
        cur = next;
    cc66:	4620      	mov	r0, r4
        if (cur == NULL) {
    cc68:	b13c      	cbz	r4, cc7a <dpl_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
    cc6a:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
    cc6c:	88c3      	ldrh	r3, [r0, #6]
    cc6e:	428b      	cmp	r3, r1
    cc70:	dc02      	bgt.n	cc78 <dpl_mbuf_off+0x1a>
    cc72:	d1f7      	bne.n	cc64 <dpl_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
    cc74:	2c00      	cmp	r4, #0
    cc76:	d1f5      	bne.n	cc64 <dpl_mbuf_off+0x6>
            *out_off = off;
    cc78:	8011      	strh	r1, [r2, #0]
    }
}
    cc7a:	f85d 4b04 	ldr.w	r4, [sp], #4
    cc7e:	4770      	bx	lr
    cc80:	4770      	bx	lr

0000cc82 <dpl_mbuf_appendfrom>:
{
    cc82:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc84:	b083      	sub	sp, #12
    cc86:	4607      	mov	r7, r0
    cc88:	4608      	mov	r0, r1
    cc8a:	4611      	mov	r1, r2
    cc8c:	461e      	mov	r6, r3
    src_cur_om = dpl_mbuf_off(src, src_off, &src_cur_off);
    cc8e:	f10d 0206 	add.w	r2, sp, #6
    cc92:	f7ff ffe4 	bl	cc5e <dpl_mbuf_off>
    cc96:	4605      	mov	r5, r0
    while (len > 0) {
    cc98:	e005      	b.n	cca6 <dpl_mbuf_appendfrom+0x24>
        len -= chunk_sz;
    cc9a:	1b34      	subs	r4, r6, r4
    cc9c:	b2a6      	uxth	r6, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
    cc9e:	68ed      	ldr	r5, [r5, #12]
        src_cur_off = 0;
    cca0:	2300      	movs	r3, #0
    cca2:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (len > 0) {
    cca6:	b196      	cbz	r6, ccce <dpl_mbuf_appendfrom+0x4c>
        if (src_cur_om == NULL) {
    cca8:	b1ad      	cbz	r5, ccd6 <dpl_mbuf_appendfrom+0x54>
        chunk_sz = mynewt_min(len, src_cur_om->om_len - src_cur_off);
    ccaa:	88ec      	ldrh	r4, [r5, #6]
    ccac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ccb0:	1ae4      	subs	r4, r4, r3
    ccb2:	42b4      	cmp	r4, r6
    ccb4:	bfa8      	it	ge
    ccb6:	4634      	movge	r4, r6
    ccb8:	b2a4      	uxth	r4, r4
        rc = dpl_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
    ccba:	6829      	ldr	r1, [r5, #0]
    ccbc:	4622      	mov	r2, r4
    ccbe:	4419      	add	r1, r3
    ccc0:	4638      	mov	r0, r7
    ccc2:	f7ff ff78 	bl	cbb6 <dpl_mbuf_append>
        if (rc != 0) {
    ccc6:	4603      	mov	r3, r0
    ccc8:	2800      	cmp	r0, #0
    ccca:	d0e6      	beq.n	cc9a <dpl_mbuf_appendfrom+0x18>
    cccc:	e000      	b.n	ccd0 <dpl_mbuf_appendfrom+0x4e>
    return 0;
    ccce:	2300      	movs	r3, #0
}
    ccd0:	4618      	mov	r0, r3
    ccd2:	b003      	add	sp, #12
    ccd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return DPL_EINVAL;
    ccd6:	2302      	movs	r3, #2
    ccd8:	e7fa      	b.n	ccd0 <dpl_mbuf_appendfrom+0x4e>

0000ccda <dpl_mbuf_adj>:
{
    int len = req_len;
    struct dpl_mbuf *m;
    int count;

    if ((m = mp) == NULL)
    ccda:	2800      	cmp	r0, #0
    ccdc:	d053      	beq.n	cd86 <dpl_mbuf_adj+0xac>
{
    ccde:	b510      	push	{r4, lr}
    cce0:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
    cce2:	2900      	cmp	r1, #0
    cce4:	db1b      	blt.n	cd1e <dpl_mbuf_adj+0x44>
    if ((m = mp) == NULL)
    cce6:	4603      	mov	r3, r0
    int len = req_len;
    cce8:	460a      	mov	r2, r1
    ccea:	e005      	b.n	ccf8 <dpl_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
    ccec:	1a80      	subs	r0, r0, r2
    ccee:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
    ccf0:	6818      	ldr	r0, [r3, #0]
    ccf2:	4402      	add	r2, r0
    ccf4:	601a      	str	r2, [r3, #0]
                len = 0;
    ccf6:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
    ccf8:	b14b      	cbz	r3, cd0e <dpl_mbuf_adj+0x34>
    ccfa:	2a00      	cmp	r2, #0
    ccfc:	dd07      	ble.n	cd0e <dpl_mbuf_adj+0x34>
            if (m->om_len <= len) {
    ccfe:	88d8      	ldrh	r0, [r3, #6]
    cd00:	4290      	cmp	r0, r2
    cd02:	dcf3      	bgt.n	ccec <dpl_mbuf_adj+0x12>
                len -= m->om_len;
    cd04:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
    cd06:	2000      	movs	r0, #0
    cd08:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
    cd0a:	68db      	ldr	r3, [r3, #12]
    cd0c:	e7f4      	b.n	ccf8 <dpl_mbuf_adj+0x1e>
            }
        }
        if (DPL_MBUF_IS_PKTHDR(mp))
    cd0e:	7963      	ldrb	r3, [r4, #5]
    cd10:	2b07      	cmp	r3, #7
    cd12:	d903      	bls.n	cd1c <dpl_mbuf_adj+0x42>
            DPL_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
    cd14:	1a52      	subs	r2, r2, r1
    cd16:	8a23      	ldrh	r3, [r4, #16]
    cd18:	441a      	add	r2, r3
    cd1a:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
    cd1c:	bd10      	pop	{r4, pc}
        len = -len;
    cd1e:	f1c1 0e00 	rsb	lr, r1, #0
    if ((m = mp) == NULL)
    cd22:	4603      	mov	r3, r0
        count = 0;
    cd24:	2200      	movs	r2, #0
            count += m->om_len;
    cd26:	88d8      	ldrh	r0, [r3, #6]
    cd28:	4402      	add	r2, r0
            if (SLIST_NEXT(m, om_next) == (struct dpl_mbuf *)0)
    cd2a:	469c      	mov	ip, r3
    cd2c:	68db      	ldr	r3, [r3, #12]
    cd2e:	2b00      	cmp	r3, #0
    cd30:	d1f9      	bne.n	cd26 <dpl_mbuf_adj+0x4c>
        if (m->om_len >= len) {
    cd32:	4570      	cmp	r0, lr
    cd34:	da0d      	bge.n	cd52 <dpl_mbuf_adj+0x78>
        if (count < 0)
    cd36:	188a      	adds	r2, r1, r2
    cd38:	d41a      	bmi.n	cd70 <dpl_mbuf_adj+0x96>
        if (DPL_MBUF_IS_PKTHDR(m))
    cd3a:	7963      	ldrb	r3, [r4, #5]
    cd3c:	2b07      	cmp	r3, #7
    cd3e:	d900      	bls.n	cd42 <dpl_mbuf_adj+0x68>
            DPL_MBUF_PKTHDR(m)->omp_len = count;
    cd40:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
    cd42:	2c00      	cmp	r4, #0
    cd44:	d0ea      	beq.n	cd1c <dpl_mbuf_adj+0x42>
            if (m->om_len >= count) {
    cd46:	88e3      	ldrh	r3, [r4, #6]
    cd48:	4293      	cmp	r3, r2
    cd4a:	da13      	bge.n	cd74 <dpl_mbuf_adj+0x9a>
            count -= m->om_len;
    cd4c:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
    cd4e:	68e4      	ldr	r4, [r4, #12]
    cd50:	e7f7      	b.n	cd42 <dpl_mbuf_adj+0x68>
            m->om_len -= len;
    cd52:	fa1f fe8e 	uxth.w	lr, lr
    cd56:	eba0 000e 	sub.w	r0, r0, lr
    cd5a:	f8ac 0006 	strh.w	r0, [ip, #6]
            if (DPL_MBUF_IS_PKTHDR(mp))
    cd5e:	7963      	ldrb	r3, [r4, #5]
    cd60:	2b07      	cmp	r3, #7
    cd62:	d9db      	bls.n	cd1c <dpl_mbuf_adj+0x42>
                DPL_MBUF_PKTHDR(mp)->omp_len -= len;
    cd64:	8a23      	ldrh	r3, [r4, #16]
    cd66:	eba3 0e0e 	sub.w	lr, r3, lr
    cd6a:	f8a4 e010 	strh.w	lr, [r4, #16]
            return;
    cd6e:	e7d5      	b.n	cd1c <dpl_mbuf_adj+0x42>
            count = 0;
    cd70:	2200      	movs	r2, #0
    cd72:	e7e2      	b.n	cd3a <dpl_mbuf_adj+0x60>
                m->om_len = count;
    cd74:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
    cd76:	68e0      	ldr	r0, [r4, #12]
    cd78:	2800      	cmp	r0, #0
    cd7a:	d0cf      	beq.n	cd1c <dpl_mbuf_adj+0x42>
                    dpl_mbuf_free_chain(SLIST_NEXT(m, om_next));
    cd7c:	f7ff ff0b 	bl	cb96 <dpl_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
    cd80:	2300      	movs	r3, #0
    cd82:	60e3      	str	r3, [r4, #12]
    cd84:	e7ca      	b.n	cd1c <dpl_mbuf_adj+0x42>
    cd86:	4770      	bx	lr

0000cd88 <dpl_mbuf_trim_front>:
    return (NULL);
}

struct dpl_mbuf *
dpl_mbuf_trim_front(struct dpl_mbuf *om)
{
    cd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd8a:	4606      	mov	r6, r0
    struct dpl_mbuf *next;
    struct dpl_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
    cd8c:	88c7      	ldrh	r7, [r0, #6]
    cd8e:	b9cf      	cbnz	r7, cdc4 <dpl_mbuf_trim_front+0x3c>
    }

    /* Starting with the second mbuf in the chain, continue removing and
     * freeing mbufs until an non-empty one is encountered.
     */
    cur = SLIST_NEXT(om, om_next);
    cd90:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
    cd92:	b144      	cbz	r4, cda6 <dpl_mbuf_trim_front+0x1e>
    cd94:	88e3      	ldrh	r3, [r4, #6]
    cd96:	b933      	cbnz	r3, cda6 <dpl_mbuf_trim_front+0x1e>
        next = SLIST_NEXT(cur, om_next);
    cd98:	68e5      	ldr	r5, [r4, #12]

        SLIST_NEXT(om, om_next) = next;
    cd9a:	60f5      	str	r5, [r6, #12]
        dpl_mbuf_free(cur);
    cd9c:	4620      	mov	r0, r4
    cd9e:	f7ff fef0 	bl	cb82 <dpl_mbuf_free>

        cur = next;
    cda2:	462c      	mov	r4, r5
    cda4:	e7f5      	b.n	cd92 <dpl_mbuf_trim_front+0xa>
    }

    if (cur == NULL) {
    cda6:	b16c      	cbz	r4, cdc4 <dpl_mbuf_trim_front+0x3c>
    if (DPL_MBUF_IS_PKTHDR(om)) {
    cda8:	7963      	ldrb	r3, [r4, #5]
    cdaa:	2b07      	cmp	r3, #7
    cdac:	d900      	bls.n	cdb0 <dpl_mbuf_trim_front+0x28>
        startoff = om->om_pkthdr_len;
    cdae:	b29f      	uxth	r7, r3
    leadingspace = (uint16_t) (DPL_MBUF_DATA(om, uint8_t *) -
    cdb0:	4620      	mov	r0, r4
    cdb2:	f850 3b10 	ldr.w	r3, [r0], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    cdb6:	4407      	add	r7, r0
    leadingspace = (uint16_t) (DPL_MBUF_DATA(om, uint8_t *) -
    cdb8:	1bdf      	subs	r7, r3, r7
    cdba:	b2bf      	uxth	r7, r7
    }

    /* Try to remove the first mbuf in the chain.  If this buffer contains a
     * packet header, make sure the second buffer can accommodate it.
     */
    if (DPL_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
    cdbc:	7972      	ldrb	r2, [r6, #5]
    cdbe:	b293      	uxth	r3, r2
    cdc0:	42bb      	cmp	r3, r7
    cdc2:	d901      	bls.n	cdc8 <dpl_mbuf_trim_front+0x40>
        dpl_mbuf_free(om);
        om = cur;
    }

    return om;
}
    cdc4:	4630      	mov	r0, r6
    cdc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cur->om_pkthdr_len = om->om_pkthdr_len;
    cdc8:	7162      	strb	r2, [r4, #5]
        memcpy(DPL_MBUF_PKTHDR(cur), DPL_MBUF_PKTHDR(om), om->om_pkthdr_len);
    cdca:	f106 0110 	add.w	r1, r6, #16
    cdce:	f7ff f951 	bl	c074 <memcpy>
        dpl_mbuf_free(om);
    cdd2:	4630      	mov	r0, r6
    cdd4:	f7ff fed5 	bl	cb82 <dpl_mbuf_free>
        om = cur;
    cdd8:	4626      	mov	r6, r4
    cdda:	e7f3      	b.n	cdc4 <dpl_mbuf_trim_front+0x3c>

0000cddc <conf_dup_check_cb>:
    return 0;
}

static void
conf_dup_check_cb(char *name, char *val, void *cb_arg)
{
    cddc:	b538      	push	{r3, r4, r5, lr}
    cdde:	460d      	mov	r5, r1
    cde0:	4614      	mov	r4, r2
    struct conf_dup_check_arg *cdca = (struct conf_dup_check_arg *)cb_arg;

    if (strcmp(name, cdca->name)) {
    cde2:	6811      	ldr	r1, [r2, #0]
    cde4:	f7ff f97e 	bl	c0e4 <strcmp>
    cde8:	b9a8      	cbnz	r0, ce16 <conf_dup_check_cb+0x3a>
        return;
    }
    if (!val) {
    cdea:	b145      	cbz	r5, cdfe <conf_dup_check_cb+0x22>
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
        }
    } else {
        if (cdca->val && !strcmp(val, cdca->val)) {
    cdec:	6861      	ldr	r1, [r4, #4]
    cdee:	b181      	cbz	r1, ce12 <conf_dup_check_cb+0x36>
    cdf0:	4628      	mov	r0, r5
    cdf2:	f7ff f977 	bl	c0e4 <strcmp>
    cdf6:	b960      	cbnz	r0, ce12 <conf_dup_check_cb+0x36>
            cdca->is_dup = 1;
    cdf8:	2301      	movs	r3, #1
    cdfa:	60a3      	str	r3, [r4, #8]
    cdfc:	e00b      	b.n	ce16 <conf_dup_check_cb+0x3a>
        if (!cdca->val || cdca->val[0] == '\0') {
    cdfe:	6863      	ldr	r3, [r4, #4]
    ce00:	b10b      	cbz	r3, ce06 <conf_dup_check_cb+0x2a>
    ce02:	781b      	ldrb	r3, [r3, #0]
    ce04:	b913      	cbnz	r3, ce0c <conf_dup_check_cb+0x30>
            cdca->is_dup = 1;
    ce06:	2301      	movs	r3, #1
    ce08:	60a3      	str	r3, [r4, #8]
    ce0a:	e004      	b.n	ce16 <conf_dup_check_cb+0x3a>
            cdca->is_dup = 0;
    ce0c:	2300      	movs	r3, #0
    ce0e:	60a3      	str	r3, [r4, #8]
    ce10:	e001      	b.n	ce16 <conf_dup_check_cb+0x3a>
        } else {
            cdca->is_dup = 0;
    ce12:	2300      	movs	r3, #0
    ce14:	60a3      	str	r3, [r4, #8]
        }
    }
}
    ce16:	bd38      	pop	{r3, r4, r5, pc}

0000ce18 <conf_load_cb>:
{
    ce18:	b538      	push	{r3, r4, r5, lr}
    ce1a:	4604      	mov	r4, r0
    ce1c:	460d      	mov	r5, r1
    if (!cb_arg || !strcmp((char*)cb_arg, name)) {
    ce1e:	b122      	cbz	r2, ce2a <conf_load_cb+0x12>
    ce20:	4610      	mov	r0, r2
    ce22:	4621      	mov	r1, r4
    ce24:	f7ff f95e 	bl	c0e4 <strcmp>
    ce28:	b918      	cbnz	r0, ce32 <conf_load_cb+0x1a>
        conf_set_value(name, val);
    ce2a:	4629      	mov	r1, r5
    ce2c:	4620      	mov	r0, r4
    ce2e:	f000 f9eb 	bl	d208 <conf_set_value>
}
    ce32:	bd38      	pop	{r3, r4, r5, pc}

0000ce34 <conf_src_register>:
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
    ce34:	4b08      	ldr	r3, [pc, #32]	; (ce58 <conf_src_register+0x24>)
    ce36:	6819      	ldr	r1, [r3, #0]
    ce38:	460b      	mov	r3, r1
    prev = NULL;
    ce3a:	2200      	movs	r2, #0
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
    ce3c:	e001      	b.n	ce42 <conf_src_register+0xe>
        prev = cur;
    ce3e:	461a      	mov	r2, r3
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
    ce40:	681b      	ldr	r3, [r3, #0]
    ce42:	2b00      	cmp	r3, #0
    ce44:	d1fb      	bne.n	ce3e <conf_src_register+0xa>
    if (!prev) {
    ce46:	b11a      	cbz	r2, ce50 <conf_src_register+0x1c>
        SLIST_INSERT_AFTER(prev, cs, cs_next);
    ce48:	6813      	ldr	r3, [r2, #0]
    ce4a:	6003      	str	r3, [r0, #0]
    ce4c:	6010      	str	r0, [r2, #0]
}
    ce4e:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conf_load_srcs, cs, cs_next);
    ce50:	6001      	str	r1, [r0, #0]
    ce52:	4b01      	ldr	r3, [pc, #4]	; (ce58 <conf_src_register+0x24>)
    ce54:	6018      	str	r0, [r3, #0]
    ce56:	4770      	bx	lr
    ce58:	200054a8 	.word	0x200054a8

0000ce5c <conf_dst_register>:
    conf_save_dst = cs;
    ce5c:	4b01      	ldr	r3, [pc, #4]	; (ce64 <conf_dst_register+0x8>)
    ce5e:	6018      	str	r0, [r3, #0]
}
    ce60:	4770      	bx	lr
    ce62:	bf00      	nop
    ce64:	200054b0 	.word	0x200054b0

0000ce68 <conf_load>:
{
    ce68:	b510      	push	{r4, lr}
    conf_lock();
    ce6a:	f000 f8d5 	bl	d018 <conf_lock>
    conf_loaded = true;
    ce6e:	2301      	movs	r3, #1
    ce70:	4a0e      	ldr	r2, [pc, #56]	; (ceac <conf_load+0x44>)
    ce72:	7013      	strb	r3, [r2, #0]
    conf_loading = true;
    ce74:	4a0e      	ldr	r2, [pc, #56]	; (ceb0 <conf_load+0x48>)
    ce76:	7013      	strb	r3, [r2, #0]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
    ce78:	4b0e      	ldr	r3, [pc, #56]	; (ceb4 <conf_load+0x4c>)
    ce7a:	681c      	ldr	r4, [r3, #0]
    ce7c:	e000      	b.n	ce80 <conf_load+0x18>
    ce7e:	6824      	ldr	r4, [r4, #0]
    ce80:	b164      	cbz	r4, ce9c <conf_load+0x34>
        cs->cs_itf->csi_load(cs, conf_load_cb, NULL);
    ce82:	6863      	ldr	r3, [r4, #4]
    ce84:	681b      	ldr	r3, [r3, #0]
    ce86:	2200      	movs	r2, #0
    ce88:	490b      	ldr	r1, [pc, #44]	; (ceb8 <conf_load+0x50>)
    ce8a:	4620      	mov	r0, r4
    ce8c:	4798      	blx	r3
        if (SLIST_NEXT(cs, cs_next)) {
    ce8e:	6823      	ldr	r3, [r4, #0]
    ce90:	2b00      	cmp	r3, #0
    ce92:	d0f4      	beq.n	ce7e <conf_load+0x16>
            conf_commit(NULL);
    ce94:	2000      	movs	r0, #0
    ce96:	f000 f9ef 	bl	d278 <conf_commit>
    ce9a:	e7f0      	b.n	ce7e <conf_load+0x16>
    conf_loading = false;
    ce9c:	4b04      	ldr	r3, [pc, #16]	; (ceb0 <conf_load+0x48>)
    ce9e:	701c      	strb	r4, [r3, #0]
    conf_unlock();
    cea0:	f000 f8c4 	bl	d02c <conf_unlock>
    return conf_commit(NULL);
    cea4:	4620      	mov	r0, r4
    cea6:	f000 f9e7 	bl	d278 <conf_commit>
}
    ceaa:	bd10      	pop	{r4, pc}
    ceac:	200054ac 	.word	0x200054ac
    ceb0:	200054ad 	.word	0x200054ad
    ceb4:	200054a8 	.word	0x200054a8
    ceb8:	0000ce19 	.word	0x0000ce19

0000cebc <conf_ensure_loaded>:
{
    cebc:	b508      	push	{r3, lr}
    if (conf_loaded) {
    cebe:	4b04      	ldr	r3, [pc, #16]	; (ced0 <conf_ensure_loaded+0x14>)
    cec0:	781b      	ldrb	r3, [r3, #0]
    cec2:	b10b      	cbz	r3, cec8 <conf_ensure_loaded+0xc>
        return 0;
    cec4:	2000      	movs	r0, #0
}
    cec6:	bd08      	pop	{r3, pc}
    return conf_load();
    cec8:	f7ff ffce 	bl	ce68 <conf_load>
    cecc:	e7fb      	b.n	cec6 <conf_ensure_loaded+0xa>
    cece:	bf00      	nop
    ced0:	200054ac 	.word	0x200054ac

0000ced4 <conf_save_one>:
/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int
conf_save_one(const char *name, char *value)
{
    ced4:	b570      	push	{r4, r5, r6, lr}
    ced6:	b084      	sub	sp, #16
    ced8:	4605      	mov	r5, r0
    ceda:	460e      	mov	r6, r1
    struct conf_store *cs;
    struct conf_dup_check_arg cdca;
    int rc;

    conf_lock();
    cedc:	f000 f89c 	bl	d018 <conf_lock>
    if (!conf_save_dst) {
    cee0:	4b13      	ldr	r3, [pc, #76]	; (cf30 <conf_save_one+0x5c>)
    cee2:	681b      	ldr	r3, [r3, #0]
    cee4:	b1fb      	cbz	r3, cf26 <conf_save_one+0x52>
    }

    /*
     * Check if we're writing the same value again.
     */
    cdca.name = name;
    cee6:	9501      	str	r5, [sp, #4]
    cdca.val = value;
    cee8:	9602      	str	r6, [sp, #8]
    cdca.is_dup = 0;
    ceea:	2300      	movs	r3, #0
    ceec:	9303      	str	r3, [sp, #12]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
    ceee:	4b11      	ldr	r3, [pc, #68]	; (cf34 <conf_save_one+0x60>)
    cef0:	681c      	ldr	r4, [r3, #0]
    cef2:	e006      	b.n	cf02 <conf_save_one+0x2e>
        cs->cs_itf->csi_load(cs, conf_dup_check_cb, &cdca);
    cef4:	6863      	ldr	r3, [r4, #4]
    cef6:	681b      	ldr	r3, [r3, #0]
    cef8:	aa01      	add	r2, sp, #4
    cefa:	490f      	ldr	r1, [pc, #60]	; (cf38 <conf_save_one+0x64>)
    cefc:	4620      	mov	r0, r4
    cefe:	4798      	blx	r3
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
    cf00:	6824      	ldr	r4, [r4, #0]
    cf02:	2c00      	cmp	r4, #0
    cf04:	d1f6      	bne.n	cef4 <conf_save_one+0x20>
    }
    if (cdca.is_dup == 1) {
    cf06:	9b03      	ldr	r3, [sp, #12]
    cf08:	2b01      	cmp	r3, #1
    cf0a:	d00e      	beq.n	cf2a <conf_save_one+0x56>
        rc = 0;
        goto out;
    }
    cs = conf_save_dst;
    cf0c:	4b08      	ldr	r3, [pc, #32]	; (cf30 <conf_save_one+0x5c>)
    cf0e:	6818      	ldr	r0, [r3, #0]
    rc = cs->cs_itf->csi_save(cs, name, value);
    cf10:	6843      	ldr	r3, [r0, #4]
    cf12:	689b      	ldr	r3, [r3, #8]
    cf14:	4632      	mov	r2, r6
    cf16:	4629      	mov	r1, r5
    cf18:	4798      	blx	r3
    cf1a:	4604      	mov	r4, r0
out:
    conf_unlock();
    cf1c:	f000 f886 	bl	d02c <conf_unlock>
    return rc;
}
    cf20:	4620      	mov	r0, r4
    cf22:	b004      	add	sp, #16
    cf24:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
    cf26:	240a      	movs	r4, #10
    cf28:	e7f8      	b.n	cf1c <conf_save_one+0x48>
        rc = 0;
    cf2a:	2400      	movs	r4, #0
    cf2c:	e7f6      	b.n	cf1c <conf_save_one+0x48>
    cf2e:	bf00      	nop
    cf30:	200054b0 	.word	0x200054b0
    cf34:	200054a8 	.word	0x200054a8
    cf38:	0000cddd 	.word	0x0000cddd

0000cf3c <conf_store_one>:

static void
conf_store_one(char *name, char *value)
{
    cf3c:	b508      	push	{r3, lr}
    conf_save_one(name, value);
    cf3e:	f7ff ffc9 	bl	ced4 <conf_save_one>
}
    cf42:	bd08      	pop	{r3, pc}

0000cf44 <conf_save>:
 * Walk through all registered subsystems, and ask them to export their
 * config variables. Persist these settings.
 */
int
conf_save(void)
{
    cf44:	b570      	push	{r4, r5, r6, lr}
    struct conf_store *cs;
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
    cf46:	f000 f867 	bl	d018 <conf_lock>
    cs = conf_save_dst;
    cf4a:	4b11      	ldr	r3, [pc, #68]	; (cf90 <conf_save+0x4c>)
    cf4c:	681e      	ldr	r6, [r3, #0]
    if (!cs) {
    cf4e:	b1ee      	cbz	r6, cf8c <conf_save+0x48>
        rc = OS_ENOENT;
        goto out;
    }

    if (cs->cs_itf->csi_save_start) {
    cf50:	6873      	ldr	r3, [r6, #4]
    cf52:	685b      	ldr	r3, [r3, #4]
    cf54:	b10b      	cbz	r3, cf5a <conf_save+0x16>
        cs->cs_itf->csi_save_start(cs);
    cf56:	4630      	mov	r0, r6
    cf58:	4798      	blx	r3
    }
    rc = 0;
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    cf5a:	4b0e      	ldr	r3, [pc, #56]	; (cf94 <conf_save+0x50>)
    cf5c:	681c      	ldr	r4, [r3, #0]
    rc = 0;
    cf5e:	2500      	movs	r5, #0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    cf60:	e000      	b.n	cf64 <conf_save+0x20>
    cf62:	6824      	ldr	r4, [r4, #0]
    cf64:	b14c      	cbz	r4, cf7a <conf_save+0x36>
        if (ch->ch_export) {
    cf66:	6963      	ldr	r3, [r4, #20]
    cf68:	2b00      	cmp	r3, #0
    cf6a:	d0fa      	beq.n	cf62 <conf_save+0x1e>
            rc2 = ch->ch_export(conf_store_one, CONF_EXPORT_PERSIST);
    cf6c:	2100      	movs	r1, #0
    cf6e:	480a      	ldr	r0, [pc, #40]	; (cf98 <conf_save+0x54>)
    cf70:	4798      	blx	r3
            if (!rc) {
    cf72:	2d00      	cmp	r5, #0
    cf74:	d1f5      	bne.n	cf62 <conf_save+0x1e>
                rc = rc2;
    cf76:	4605      	mov	r5, r0
    cf78:	e7f3      	b.n	cf62 <conf_save+0x1e>
            }
        }
    }
    if (cs->cs_itf->csi_save_end) {
    cf7a:	6873      	ldr	r3, [r6, #4]
    cf7c:	68db      	ldr	r3, [r3, #12]
    cf7e:	b10b      	cbz	r3, cf84 <conf_save+0x40>
        cs->cs_itf->csi_save_end(cs);
    cf80:	4630      	mov	r0, r6
    cf82:	4798      	blx	r3
    }
out:
    conf_unlock();
    cf84:	f000 f852 	bl	d02c <conf_unlock>
    return rc;
}
    cf88:	4628      	mov	r0, r5
    cf8a:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
    cf8c:	250a      	movs	r5, #10
    cf8e:	e7f9      	b.n	cf84 <conf_save+0x40>
    cf90:	200054b0 	.word	0x200054b0
    cf94:	200054b4 	.word	0x200054b4
    cf98:	0000cf3d 	.word	0x0000cf3d

0000cf9c <conf_store_init>:

void
conf_store_init(void)
{
    conf_loaded = false;
    cf9c:	2300      	movs	r3, #0
    cf9e:	4a02      	ldr	r2, [pc, #8]	; (cfa8 <conf_store_init+0xc>)
    cfa0:	7013      	strb	r3, [r2, #0]
    SLIST_INIT(&conf_load_srcs);
    cfa2:	4a02      	ldr	r2, [pc, #8]	; (cfac <conf_store_init+0x10>)
    cfa4:	6013      	str	r3, [r2, #0]
}
    cfa6:	4770      	bx	lr
    cfa8:	200054ac 	.word	0x200054ac
    cfac:	200054a8 	.word	0x200054a8

0000cfb0 <conf_ev_fn_load>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
conf_ev_fn_load(struct os_event *ev)
{
    cfb0:	b508      	push	{r3, lr}
    conf_ensure_loaded();
    cfb2:	f7ff ff83 	bl	cebc <conf_ensure_loaded>
}
    cfb6:	bd08      	pop	{r3, pc}

0000cfb8 <conf_init>:
{
    cfb8:	b510      	push	{r4, lr}
    cfba:	b082      	sub	sp, #8
    os_mutex_init(&conf_mtx);
    cfbc:	4812      	ldr	r0, [pc, #72]	; (d008 <conf_init+0x50>)
    cfbe:	f7fd fcc7 	bl	a950 <os_mutex_init>
    SLIST_INIT(&conf_handlers);
    cfc2:	4b12      	ldr	r3, [pc, #72]	; (d00c <conf_init+0x54>)
    cfc4:	2200      	movs	r2, #0
    cfc6:	601a      	str	r2, [r3, #0]
    conf_store_init();
    cfc8:	f7ff ffe8 	bl	cf9c <conf_store_init>
    rc = conf_cli_register();
    cfcc:	f000 fa0c 	bl	d3e8 <conf_cli_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    cfd0:	b138      	cbz	r0, cfe2 <conf_init+0x2a>
    cfd2:	2000      	movs	r0, #0
    cfd4:	9000      	str	r0, [sp, #0]
    cfd6:	4b0e      	ldr	r3, [pc, #56]	; (d010 <conf_init+0x58>)
    cfd8:	681c      	ldr	r4, [r3, #0]
    cfda:	4603      	mov	r3, r0
    cfdc:	4602      	mov	r2, r0
    cfde:	4601      	mov	r1, r0
    cfe0:	47a0      	blx	r4
    rc = conf_nmgr_register();
    cfe2:	f000 faa5 	bl	d530 <conf_nmgr_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    cfe6:	b138      	cbz	r0, cff8 <conf_init+0x40>
    cfe8:	2000      	movs	r0, #0
    cfea:	9000      	str	r0, [sp, #0]
    cfec:	4b08      	ldr	r3, [pc, #32]	; (d010 <conf_init+0x58>)
    cfee:	681c      	ldr	r4, [r3, #0]
    cff0:	4603      	mov	r3, r0
    cff2:	4602      	mov	r2, r0
    cff4:	4601      	mov	r1, r0
    cff6:	47a0      	blx	r4
    os_eventq_put(os_eventq_dflt_get(), &conf_ev_load);
    cff8:	f7fc fb80 	bl	96fc <os_eventq_dflt_get>
    cffc:	4905      	ldr	r1, [pc, #20]	; (d014 <conf_init+0x5c>)
    cffe:	f7fc facf 	bl	95a0 <os_eventq_put>
}
    d002:	b002      	add	sp, #8
    d004:	bd10      	pop	{r4, pc}
    d006:	bf00      	nop
    d008:	200054b8 	.word	0x200054b8
    d00c:	200054b4 	.word	0x200054b4
    d010:	200001ec 	.word	0x200001ec
    d014:	20000188 	.word	0x20000188

0000d018 <conf_lock>:
{
    d018:	b508      	push	{r3, lr}
    os_mutex_pend(&conf_mtx, 0xFFFFFFFF);
    d01a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d01e:	4802      	ldr	r0, [pc, #8]	; (d028 <conf_lock+0x10>)
    d020:	f7fd fcfc 	bl	aa1c <os_mutex_pend>
}
    d024:	bd08      	pop	{r3, pc}
    d026:	bf00      	nop
    d028:	200054b8 	.word	0x200054b8

0000d02c <conf_unlock>:
{
    d02c:	b508      	push	{r3, lr}
    os_mutex_release(&conf_mtx);
    d02e:	4802      	ldr	r0, [pc, #8]	; (d038 <conf_unlock+0xc>)
    d030:	f7fd fc98 	bl	a964 <os_mutex_release>
}
    d034:	bd08      	pop	{r3, pc}
    d036:	bf00      	nop
    d038:	200054b8 	.word	0x200054b8

0000d03c <conf_register>:
{
    d03c:	b510      	push	{r4, lr}
    d03e:	4604      	mov	r4, r0
    conf_lock();
    d040:	f7ff ffea 	bl	d018 <conf_lock>
    SLIST_INSERT_HEAD(&conf_handlers, handler, ch_list);
    d044:	4b03      	ldr	r3, [pc, #12]	; (d054 <conf_register+0x18>)
    d046:	681a      	ldr	r2, [r3, #0]
    d048:	6022      	str	r2, [r4, #0]
    d04a:	601c      	str	r4, [r3, #0]
    conf_unlock();
    d04c:	f7ff ffee 	bl	d02c <conf_unlock>
}
    d050:	2000      	movs	r0, #0
    d052:	bd10      	pop	{r4, pc}
    d054:	200054b4 	.word	0x200054b4

0000d058 <conf_handler_lookup>:
/*
 * Find conf_handler based on name.
 */
struct conf_handler *
conf_handler_lookup(char *name)
{
    d058:	b538      	push	{r3, r4, r5, lr}
    d05a:	4605      	mov	r5, r0
    struct conf_handler *ch;

    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    d05c:	4b06      	ldr	r3, [pc, #24]	; (d078 <conf_handler_lookup+0x20>)
    d05e:	681c      	ldr	r4, [r3, #0]
    d060:	e000      	b.n	d064 <conf_handler_lookup+0xc>
    d062:	6824      	ldr	r4, [r4, #0]
    d064:	b12c      	cbz	r4, d072 <conf_handler_lookup+0x1a>
        if (!strcmp(name, ch->ch_name)) {
    d066:	6861      	ldr	r1, [r4, #4]
    d068:	4628      	mov	r0, r5
    d06a:	f7ff f83b 	bl	c0e4 <strcmp>
    d06e:	2800      	cmp	r0, #0
    d070:	d1f7      	bne.n	d062 <conf_handler_lookup+0xa>
            return ch;
        }
    }
    return NULL;
}
    d072:	4620      	mov	r0, r4
    d074:	bd38      	pop	{r3, r4, r5, pc}
    d076:	bf00      	nop
    d078:	200054b4 	.word	0x200054b4

0000d07c <conf_parse_name>:
/*
 * Separate string into argv array.
 */
int
conf_parse_name(char *name, int *name_argc, char *name_argv[])
{
    d07c:	b570      	push	{r4, r5, r6, lr}
    d07e:	b082      	sub	sp, #8
    d080:	460e      	mov	r6, r1
    d082:	4615      	mov	r5, r2
    char *tok;
    char *tok_ptr;
    char *sep = CONF_NAME_SEPARATOR;
    int i;

    tok = strtok_r(name, sep, &tok_ptr);
    d084:	aa01      	add	r2, sp, #4
    d086:	4909      	ldr	r1, [pc, #36]	; (d0ac <conf_parse_name+0x30>)
    d088:	f00d fc96 	bl	1a9b8 <strtok_r>

    i = 0;
    d08c:	2300      	movs	r3, #0
    while (tok) {
    d08e:	e008      	b.n	d0a2 <conf_parse_name+0x26>
        name_argv[i++] = tok;
    d090:	1c5c      	adds	r4, r3, #1
    d092:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
        tok = strtok_r(NULL, sep, &tok_ptr);
    d096:	aa01      	add	r2, sp, #4
    d098:	4904      	ldr	r1, [pc, #16]	; (d0ac <conf_parse_name+0x30>)
    d09a:	2000      	movs	r0, #0
    d09c:	f00d fc8c 	bl	1a9b8 <strtok_r>
        name_argv[i++] = tok;
    d0a0:	4623      	mov	r3, r4
    while (tok) {
    d0a2:	2800      	cmp	r0, #0
    d0a4:	d1f4      	bne.n	d090 <conf_parse_name+0x14>
    }
    *name_argc = i;
    d0a6:	6033      	str	r3, [r6, #0]

    return 0;
}
    d0a8:	b002      	add	sp, #8
    d0aa:	bd70      	pop	{r4, r5, r6, pc}
    d0ac:	00021be8 	.word	0x00021be8

0000d0b0 <conf_parse_and_lookup>:

struct conf_handler *
conf_parse_and_lookup(char *name, int *name_argc, char *name_argv[])
{
    d0b0:	b510      	push	{r4, lr}
    d0b2:	4614      	mov	r4, r2
    int rc;

    rc = conf_parse_name(name, name_argc, name_argv);
    d0b4:	f7ff ffe2 	bl	d07c <conf_parse_name>
    if (rc) {
    d0b8:	b918      	cbnz	r0, d0c2 <conf_parse_and_lookup+0x12>
        return NULL;
    }
    return conf_handler_lookup(name_argv[0]);
    d0ba:	6820      	ldr	r0, [r4, #0]
    d0bc:	f7ff ffcc 	bl	d058 <conf_handler_lookup>
}
    d0c0:	bd10      	pop	{r4, pc}
        return NULL;
    d0c2:	2000      	movs	r0, #0
    d0c4:	e7fc      	b.n	d0c0 <conf_parse_and_lookup+0x10>

0000d0c6 <conf_value_from_str>:
{
    int32_t val;
    int64_t val64;
    char *eptr;

    if (!val_str) {
    d0c6:	2800      	cmp	r0, #0
    d0c8:	d051      	beq.n	d16e <conf_value_from_str+0xa8>
{
    d0ca:	b5f0      	push	{r4, r5, r6, r7, lr}
    d0cc:	b083      	sub	sp, #12
    d0ce:	460c      	mov	r4, r1
    d0d0:	4616      	mov	r6, r2
    d0d2:	461d      	mov	r5, r3
    d0d4:	4607      	mov	r7, r0
        goto err;
    }
    switch (type) {
    d0d6:	1e8b      	subs	r3, r1, #2
    d0d8:	2b08      	cmp	r3, #8
    d0da:	d84a      	bhi.n	d172 <conf_value_from_str+0xac>
    d0dc:	e8df f003 	tbb	[pc, r3]
    d0e0:	32050505 	.word	0x32050505
    d0e4:	4949493d 	.word	0x4949493d
    d0e8:	05          	.byte	0x05
    d0e9:	00          	.byte	0x00
    case CONF_INT8:
    case CONF_INT16:
    case CONF_INT32:
    case CONF_BOOL:
        val = strtol(val_str, &eptr, 0);
    d0ea:	2200      	movs	r2, #0
    d0ec:	a901      	add	r1, sp, #4
    d0ee:	f00d fc73 	bl	1a9d8 <strtol>
        if (*eptr != '\0') {
    d0f2:	9b01      	ldr	r3, [sp, #4]
    d0f4:	781b      	ldrb	r3, [r3, #0]
    d0f6:	2b00      	cmp	r3, #0
    d0f8:	d13e      	bne.n	d178 <conf_value_from_str+0xb2>
            goto err;
        }
        if (type == CONF_BOOL) {
    d0fa:	2c0a      	cmp	r4, #10
    d0fc:	d007      	beq.n	d10e <conf_value_from_str+0x48>
            if (val < 0 || val > 1) {
                goto err;
            }
            *(bool *)vp = val;
        } else if (type == CONF_INT8) {
    d0fe:	2c02      	cmp	r4, #2
    d100:	d00d      	beq.n	d11e <conf_value_from_str+0x58>
            if (val < INT8_MIN || val > UINT8_MAX) {
                goto err;
            }
            *(int8_t *)vp = val;
        } else if (type == CONF_INT16) {
    d102:	2c03      	cmp	r4, #3
    d104:	d013      	beq.n	d12e <conf_value_from_str+0x68>
            if (val < INT16_MIN || val > UINT16_MAX) {
                goto err;
            }
            *(int16_t *)vp = val;
        } else if (type == CONF_INT32) {
    d106:	2c04      	cmp	r4, #4
    d108:	d019      	beq.n	d13e <conf_value_from_str+0x78>
        strcpy(vp, val_str);
        break;
    default:
        goto err;
    }
    return 0;
    d10a:	2000      	movs	r0, #0
    d10c:	e032      	b.n	d174 <conf_value_from_str+0xae>
            if (val < 0 || val > 1) {
    d10e:	2801      	cmp	r0, #1
    d110:	d834      	bhi.n	d17c <conf_value_from_str+0xb6>
            *(bool *)vp = val;
    d112:	3800      	subs	r0, #0
    d114:	bf18      	it	ne
    d116:	2001      	movne	r0, #1
    d118:	7030      	strb	r0, [r6, #0]
    return 0;
    d11a:	2000      	movs	r0, #0
    d11c:	e02a      	b.n	d174 <conf_value_from_str+0xae>
            if (val < INT8_MIN || val > UINT8_MAX) {
    d11e:	f100 0380 	add.w	r3, r0, #128	; 0x80
    d122:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
    d126:	d22b      	bcs.n	d180 <conf_value_from_str+0xba>
            *(int8_t *)vp = val;
    d128:	7030      	strb	r0, [r6, #0]
    return 0;
    d12a:	2000      	movs	r0, #0
    d12c:	e022      	b.n	d174 <conf_value_from_str+0xae>
            if (val < INT16_MIN || val > UINT16_MAX) {
    d12e:	f500 4300 	add.w	r3, r0, #32768	; 0x8000
    d132:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
    d136:	d225      	bcs.n	d184 <conf_value_from_str+0xbe>
            *(int16_t *)vp = val;
    d138:	8030      	strh	r0, [r6, #0]
    return 0;
    d13a:	2000      	movs	r0, #0
    d13c:	e01a      	b.n	d174 <conf_value_from_str+0xae>
            *(int32_t *)vp = val;
    d13e:	6030      	str	r0, [r6, #0]
    return 0;
    d140:	2000      	movs	r0, #0
    d142:	e017      	b.n	d174 <conf_value_from_str+0xae>
        val64 = strtoll(val_str, &eptr, 0);
    d144:	2200      	movs	r2, #0
    d146:	a901      	add	r1, sp, #4
    d148:	f00d fc4c 	bl	1a9e4 <strtoll>
        if (*eptr != '\0') {
    d14c:	9b01      	ldr	r3, [sp, #4]
    d14e:	781b      	ldrb	r3, [r3, #0]
    d150:	b9d3      	cbnz	r3, d188 <conf_value_from_str+0xc2>
        *(int64_t *)vp = val64;
    d152:	6030      	str	r0, [r6, #0]
    d154:	6071      	str	r1, [r6, #4]
    return 0;
    d156:	2000      	movs	r0, #0
        break;
    d158:	e00c      	b.n	d174 <conf_value_from_str+0xae>
        val = strlen(val_str);
    d15a:	f7fe ffcf 	bl	c0fc <strlen>
        if (val + 1 > maxlen) {
    d15e:	42a8      	cmp	r0, r5
    d160:	da14      	bge.n	d18c <conf_value_from_str+0xc6>
        strcpy(vp, val_str);
    d162:	4639      	mov	r1, r7
    d164:	4630      	mov	r0, r6
    d166:	f00d fbfe 	bl	1a966 <strcpy>
    return 0;
    d16a:	2000      	movs	r0, #0
        break;
    d16c:	e002      	b.n	d174 <conf_value_from_str+0xae>
err:
    return OS_INVALID_PARM;
    d16e:	2003      	movs	r0, #3
}
    d170:	4770      	bx	lr
    switch (type) {
    d172:	2003      	movs	r0, #3
}
    d174:	b003      	add	sp, #12
    d176:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return OS_INVALID_PARM;
    d178:	2003      	movs	r0, #3
    d17a:	e7fb      	b.n	d174 <conf_value_from_str+0xae>
    d17c:	2003      	movs	r0, #3
    d17e:	e7f9      	b.n	d174 <conf_value_from_str+0xae>
    d180:	2003      	movs	r0, #3
    d182:	e7f7      	b.n	d174 <conf_value_from_str+0xae>
    d184:	2003      	movs	r0, #3
    d186:	e7f5      	b.n	d174 <conf_value_from_str+0xae>
    d188:	2003      	movs	r0, #3
    d18a:	e7f3      	b.n	d174 <conf_value_from_str+0xae>
    d18c:	2003      	movs	r0, #3
    d18e:	e7f1      	b.n	d174 <conf_value_from_str+0xae>

0000d190 <conf_str_from_value>:
    return 0;
}

char *
conf_str_from_value(enum conf_type type, void *vp, char *buf, int buf_len)
{
    d190:	468c      	mov	ip, r1
    int32_t val;

    if (type == CONF_STRING) {
    d192:	2806      	cmp	r0, #6
    d194:	d02f      	beq.n	d1f6 <conf_str_from_value+0x66>
{
    d196:	b510      	push	{r4, lr}
    d198:	b082      	sub	sp, #8
    d19a:	4614      	mov	r4, r2
    d19c:	4619      	mov	r1, r3
        return vp;
    }
    switch (type) {
    d19e:	2805      	cmp	r0, #5
    d1a0:	d01f      	beq.n	d1e2 <conf_str_from_value+0x52>
    d1a2:	d903      	bls.n	d1ac <conf_str_from_value+0x1c>
    d1a4:	280a      	cmp	r0, #10
    d1a6:	d005      	beq.n	d1b4 <conf_str_from_value+0x24>
    d1a8:	2000      	movs	r0, #0
    d1aa:	e027      	b.n	d1fc <conf_str_from_value+0x6c>
    d1ac:	1e83      	subs	r3, r0, #2
    d1ae:	b2db      	uxtb	r3, r3
    d1b0:	2b02      	cmp	r3, #2
    d1b2:	d822      	bhi.n	d1fa <conf_str_from_value+0x6a>
    case CONF_INT8:
    case CONF_INT16:
    case CONF_INT32:
    case CONF_BOOL:
        if (type == CONF_BOOL) {
    d1b4:	280a      	cmp	r0, #10
    d1b6:	d006      	beq.n	d1c6 <conf_str_from_value+0x36>
            val = *(bool *)vp;
        } else if (type == CONF_INT8) {
    d1b8:	2802      	cmp	r0, #2
    d1ba:	d00c      	beq.n	d1d6 <conf_str_from_value+0x46>
            val = *(int8_t *)vp;
        } else if (type == CONF_INT16) {
    d1bc:	2803      	cmp	r0, #3
    d1be:	d00d      	beq.n	d1dc <conf_str_from_value+0x4c>
            val = *(int16_t *)vp;
        } else {
            val = *(int32_t *)vp;
    d1c0:	f8dc 3000 	ldr.w	r3, [ip]
    d1c4:	e001      	b.n	d1ca <conf_str_from_value+0x3a>
            val = *(bool *)vp;
    d1c6:	f89c 3000 	ldrb.w	r3, [ip]
        }
        snprintf(buf, buf_len, "%ld", (long)val);
    d1ca:	4a0d      	ldr	r2, [pc, #52]	; (d200 <conf_str_from_value+0x70>)
    d1cc:	4620      	mov	r0, r4
    d1ce:	f7ff fba0 	bl	c912 <snprintf>
        return buf;
    d1d2:	4620      	mov	r0, r4
    d1d4:	e012      	b.n	d1fc <conf_str_from_value+0x6c>
            val = *(int8_t *)vp;
    d1d6:	f99c 3000 	ldrsb.w	r3, [ip]
    d1da:	e7f6      	b.n	d1ca <conf_str_from_value+0x3a>
            val = *(int16_t *)vp;
    d1dc:	f9bc 3000 	ldrsh.w	r3, [ip]
    d1e0:	e7f3      	b.n	d1ca <conf_str_from_value+0x3a>
    case CONF_INT64:
        snprintf(buf, buf_len, "%lld", *(long long *)vp);
    d1e2:	e9dc 2300 	ldrd	r2, r3, [ip]
    d1e6:	e9cd 2300 	strd	r2, r3, [sp]
    d1ea:	4a06      	ldr	r2, [pc, #24]	; (d204 <conf_str_from_value+0x74>)
    d1ec:	4620      	mov	r0, r4
    d1ee:	f7ff fb90 	bl	c912 <snprintf>
        return buf;
    d1f2:	4620      	mov	r0, r4
    d1f4:	e002      	b.n	d1fc <conf_str_from_value+0x6c>
        return vp;
    d1f6:	4608      	mov	r0, r1
    default:
        return NULL;
    }
}
    d1f8:	4770      	bx	lr
    switch (type) {
    d1fa:	2000      	movs	r0, #0
}
    d1fc:	b002      	add	sp, #8
    d1fe:	bd10      	pop	{r4, pc}
    d200:	00021bec 	.word	0x00021bec
    d204:	00021bf0 	.word	0x00021bf0

0000d208 <conf_set_value>:
    return buf;
}

int
conf_set_value(char *name, char *val_str)
{
    d208:	b530      	push	{r4, r5, lr}
    d20a:	b08b      	sub	sp, #44	; 0x2c
    d20c:	4604      	mov	r4, r0
    d20e:	460d      	mov	r5, r1
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;

    conf_lock();
    d210:	f7ff ff02 	bl	d018 <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
    d214:	aa01      	add	r2, sp, #4
    d216:	a909      	add	r1, sp, #36	; 0x24
    d218:	4620      	mov	r0, r4
    d21a:	f7ff ff49 	bl	d0b0 <conf_parse_and_lookup>
    if (!ch) {
    d21e:	b158      	cbz	r0, d238 <conf_set_value+0x30>
        rc = OS_INVALID_PARM;
        goto out;
    }
    rc = ch->ch_set(name_argc - 1, &name_argv[1], val_str);
    d220:	68c3      	ldr	r3, [r0, #12]
    d222:	462a      	mov	r2, r5
    d224:	a902      	add	r1, sp, #8
    d226:	9809      	ldr	r0, [sp, #36]	; 0x24
    d228:	3801      	subs	r0, #1
    d22a:	4798      	blx	r3
    d22c:	4604      	mov	r4, r0
out:
    conf_unlock();
    d22e:	f7ff fefd 	bl	d02c <conf_unlock>
    return rc;
}
    d232:	4620      	mov	r0, r4
    d234:	b00b      	add	sp, #44	; 0x2c
    d236:	bd30      	pop	{r4, r5, pc}
        rc = OS_INVALID_PARM;
    d238:	2403      	movs	r4, #3
    d23a:	e7f8      	b.n	d22e <conf_set_value+0x26>

0000d23c <conf_get_value>:
 * Return value will be pointer to beginning of that buffer,
 * except for string it will pointer to beginning of string.
 */
char *
conf_get_value(char *name, char *buf, int buf_len)
{
    d23c:	b570      	push	{r4, r5, r6, lr}
    d23e:	b08a      	sub	sp, #40	; 0x28
    d240:	4604      	mov	r4, r0
    d242:	460d      	mov	r5, r1
    d244:	4616      	mov	r6, r2
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    char *rval = NULL;

    conf_lock();
    d246:	f7ff fee7 	bl	d018 <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
    d24a:	aa01      	add	r2, sp, #4
    d24c:	a909      	add	r1, sp, #36	; 0x24
    d24e:	4620      	mov	r0, r4
    d250:	f7ff ff2e 	bl	d0b0 <conf_parse_and_lookup>
    if (!ch) {
    d254:	4604      	mov	r4, r0
    d256:	b140      	cbz	r0, d26a <conf_get_value+0x2e>
        goto out;
    }

    if (!ch->ch_get) {
    d258:	6884      	ldr	r4, [r0, #8]
    d25a:	b15c      	cbz	r4, d274 <conf_get_value+0x38>
        goto out;
    }
    rval = ch->ch_get(name_argc - 1, &name_argv[1], buf, buf_len);
    d25c:	4633      	mov	r3, r6
    d25e:	462a      	mov	r2, r5
    d260:	a902      	add	r1, sp, #8
    d262:	9809      	ldr	r0, [sp, #36]	; 0x24
    d264:	3801      	subs	r0, #1
    d266:	47a0      	blx	r4
    d268:	4604      	mov	r4, r0
out:
    conf_unlock();
    d26a:	f7ff fedf 	bl	d02c <conf_unlock>
    return rval;
}
    d26e:	4620      	mov	r0, r4
    d270:	b00a      	add	sp, #40	; 0x28
    d272:	bd70      	pop	{r4, r5, r6, pc}
    char *rval = NULL;
    d274:	2400      	movs	r4, #0
    d276:	e7f8      	b.n	d26a <conf_get_value+0x2e>

0000d278 <conf_commit>:

int
conf_commit(char *name)
{
    d278:	b530      	push	{r4, r5, lr}
    d27a:	b08b      	sub	sp, #44	; 0x2c
    d27c:	4604      	mov	r4, r0
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
    d27e:	f7ff fecb 	bl	d018 <conf_lock>
    if (name) {
    d282:	b174      	cbz	r4, d2a2 <conf_commit+0x2a>
        ch = conf_parse_and_lookup(name, &name_argc, name_argv);
    d284:	aa01      	add	r2, sp, #4
    d286:	a909      	add	r1, sp, #36	; 0x24
    d288:	4620      	mov	r0, r4
    d28a:	f7ff ff11 	bl	d0b0 <conf_parse_and_lookup>
        if (!ch) {
    d28e:	b1b8      	cbz	r0, d2c0 <conf_commit+0x48>
            rc = OS_INVALID_PARM;
            goto out;
        }
        if (ch->ch_commit) {
    d290:	6903      	ldr	r3, [r0, #16]
    d292:	b1bb      	cbz	r3, d2c4 <conf_commit+0x4c>
            rc = ch->ch_commit();
    d294:	4798      	blx	r3
    d296:	4605      	mov	r5, r0
                }
            }
        }
    }
out:
    conf_unlock();
    d298:	f7ff fec8 	bl	d02c <conf_unlock>
    return rc;
}
    d29c:	4628      	mov	r0, r5
    d29e:	b00b      	add	sp, #44	; 0x2c
    d2a0:	bd30      	pop	{r4, r5, pc}
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    d2a2:	4b09      	ldr	r3, [pc, #36]	; (d2c8 <conf_commit+0x50>)
    d2a4:	681c      	ldr	r4, [r3, #0]
        rc = 0;
    d2a6:	2500      	movs	r5, #0
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    d2a8:	e000      	b.n	d2ac <conf_commit+0x34>
    d2aa:	6824      	ldr	r4, [r4, #0]
    d2ac:	2c00      	cmp	r4, #0
    d2ae:	d0f3      	beq.n	d298 <conf_commit+0x20>
            if (ch->ch_commit) {
    d2b0:	6923      	ldr	r3, [r4, #16]
    d2b2:	2b00      	cmp	r3, #0
    d2b4:	d0f9      	beq.n	d2aa <conf_commit+0x32>
                rc2 = ch->ch_commit();
    d2b6:	4798      	blx	r3
                if (!rc) {
    d2b8:	2d00      	cmp	r5, #0
    d2ba:	d1f6      	bne.n	d2aa <conf_commit+0x32>
                    rc = rc2;
    d2bc:	4605      	mov	r5, r0
    d2be:	e7f4      	b.n	d2aa <conf_commit+0x32>
            rc = OS_INVALID_PARM;
    d2c0:	2503      	movs	r5, #3
    d2c2:	e7e9      	b.n	d298 <conf_commit+0x20>
            rc = 0;
    d2c4:	2500      	movs	r5, #0
    d2c6:	e7e7      	b.n	d298 <conf_commit+0x20>
    d2c8:	200054b4 	.word	0x200054b4

0000d2cc <conf_running_one>:
};

#if (MYNEWT_VAL(CONFIG_CLI_RW) & 1) == 1
static void
conf_running_one(char *name, char *val)
{
    d2cc:	b508      	push	{r3, lr}
    console_printf("%s = %s\n", name, val ? val : "<del>");
    d2ce:	460a      	mov	r2, r1
    d2d0:	b121      	cbz	r1, d2dc <conf_running_one+0x10>
    d2d2:	4601      	mov	r1, r0
    d2d4:	4802      	ldr	r0, [pc, #8]	; (d2e0 <conf_running_one+0x14>)
    d2d6:	f000 fe7f 	bl	dfd8 <console_printf>
}
    d2da:	bd08      	pop	{r3, pc}
    console_printf("%s = %s\n", name, val ? val : "<del>");
    d2dc:	4a01      	ldr	r2, [pc, #4]	; (d2e4 <conf_running_one+0x18>)
    d2de:	e7f8      	b.n	d2d2 <conf_running_one+0x6>
    d2e0:	00021c00 	.word	0x00021c00
    d2e4:	00021bf8 	.word	0x00021bf8

0000d2e8 <conf_dump_running>:

static void
conf_dump_running(void)
{
    d2e8:	b510      	push	{r4, lr}
    struct conf_handler *ch;

    conf_lock();
    d2ea:	f7ff fe95 	bl	d018 <conf_lock>
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    d2ee:	4b07      	ldr	r3, [pc, #28]	; (d30c <conf_dump_running+0x24>)
    d2f0:	681c      	ldr	r4, [r3, #0]
    d2f2:	e003      	b.n	d2fc <conf_dump_running+0x14>
        if (ch->ch_export) {
            ch->ch_export(conf_running_one, CONF_EXPORT_SHOW);
    d2f4:	2101      	movs	r1, #1
    d2f6:	4806      	ldr	r0, [pc, #24]	; (d310 <conf_dump_running+0x28>)
    d2f8:	4798      	blx	r3
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    d2fa:	6824      	ldr	r4, [r4, #0]
    d2fc:	b11c      	cbz	r4, d306 <conf_dump_running+0x1e>
        if (ch->ch_export) {
    d2fe:	6963      	ldr	r3, [r4, #20]
    d300:	2b00      	cmp	r3, #0
    d302:	d1f7      	bne.n	d2f4 <conf_dump_running+0xc>
    d304:	e7f9      	b.n	d2fa <conf_dump_running+0x12>
        }
    }
    conf_unlock();
    d306:	f7ff fe91 	bl	d02c <conf_unlock>
}
    d30a:	bd10      	pop	{r4, pc}
    d30c:	200054b4 	.word	0x200054b4
    d310:	0000d2cd 	.word	0x0000d2cd

0000d314 <shell_conf_command>:
}
#endif

static int
shell_conf_command(int argc, char **argv)
{
    d314:	b530      	push	{r4, r5, lr}
    d316:	b0c3      	sub	sp, #268	; 0x10c
    char *val = NULL;
    char tmp_buf[CONF_MAX_VAL_LEN + 1];
    int rc;

    (void)rc;
    switch (argc) {
    d318:	2802      	cmp	r0, #2
    d31a:	d007      	beq.n	d32c <shell_conf_command+0x18>
    d31c:	2803      	cmp	r0, #3
    d31e:	d022      	beq.n	d366 <shell_conf_command+0x52>
        }
    }
    return 0;
err:
#endif
    console_printf("Invalid args\n");
    d320:	4826      	ldr	r0, [pc, #152]	; (d3bc <shell_conf_command+0xa8>)
    d322:	f000 fe59 	bl	dfd8 <console_printf>
    return 0;
}
    d326:	2000      	movs	r0, #0
    d328:	b043      	add	sp, #268	; 0x10c
    d32a:	bd30      	pop	{r4, r5, pc}
        name = argv[1];
    d32c:	684c      	ldr	r4, [r1, #4]
    char *val = NULL;
    d32e:	2500      	movs	r5, #0
    if (!strcmp(name, "commit")) {
    d330:	4923      	ldr	r1, [pc, #140]	; (d3c0 <shell_conf_command+0xac>)
    d332:	4620      	mov	r0, r4
    d334:	f7fe fed6 	bl	c0e4 <strcmp>
    d338:	b1c0      	cbz	r0, d36c <shell_conf_command+0x58>
        if (!strcmp(name, "dump")) {
    d33a:	4922      	ldr	r1, [pc, #136]	; (d3c4 <shell_conf_command+0xb0>)
    d33c:	4620      	mov	r0, r4
    d33e:	f7fe fed1 	bl	c0e4 <strcmp>
    d342:	b1f0      	cbz	r0, d382 <shell_conf_command+0x6e>
            if (!strcmp(name, "save")) {
    d344:	4920      	ldr	r1, [pc, #128]	; (d3c8 <shell_conf_command+0xb4>)
    d346:	4620      	mov	r0, r4
    d348:	f7fe fecc 	bl	c0e4 <strcmp>
    d34c:	b318      	cbz	r0, d396 <shell_conf_command+0x82>
    if (!val) {
    d34e:	b32d      	cbz	r5, d39c <shell_conf_command+0x88>
        rc = conf_set_value(name, val);
    d350:	4629      	mov	r1, r5
    d352:	4620      	mov	r0, r4
    d354:	f7ff ff58 	bl	d208 <conf_set_value>
        if (rc) {
    d358:	4601      	mov	r1, r0
    d35a:	2800      	cmp	r0, #0
    d35c:	d0e3      	beq.n	d326 <shell_conf_command+0x12>
            console_printf("Failed to set, err: %d\n", rc);
    d35e:	481b      	ldr	r0, [pc, #108]	; (d3cc <shell_conf_command+0xb8>)
    d360:	f000 fe3a 	bl	dfd8 <console_printf>
            goto err;
    d364:	e7dc      	b.n	d320 <shell_conf_command+0xc>
        name = argv[1];
    d366:	684c      	ldr	r4, [r1, #4]
        val = argv[2];
    d368:	688d      	ldr	r5, [r1, #8]
        break;
    d36a:	e7e1      	b.n	d330 <shell_conf_command+0x1c>
        rc = conf_commit(val);
    d36c:	4628      	mov	r0, r5
    d36e:	f7ff ff83 	bl	d278 <conf_commit>
        if (rc) {
    d372:	b120      	cbz	r0, d37e <shell_conf_command+0x6a>
            val = "Failed to commit\n";
    d374:	4916      	ldr	r1, [pc, #88]	; (d3d0 <shell_conf_command+0xbc>)
        console_printf("%s", val);
    d376:	4817      	ldr	r0, [pc, #92]	; (d3d4 <shell_conf_command+0xc0>)
    d378:	f000 fe2e 	bl	dfd8 <console_printf>
        return 0;
    d37c:	e7d3      	b.n	d326 <shell_conf_command+0x12>
            val = "Done\n";
    d37e:	4916      	ldr	r1, [pc, #88]	; (d3d8 <shell_conf_command+0xc4>)
    d380:	e7f9      	b.n	d376 <shell_conf_command+0x62>
            if (!val || !strcmp(val, "running")) {
    d382:	b12d      	cbz	r5, d390 <shell_conf_command+0x7c>
    d384:	4915      	ldr	r1, [pc, #84]	; (d3dc <shell_conf_command+0xc8>)
    d386:	4628      	mov	r0, r5
    d388:	f7fe feac 	bl	c0e4 <strcmp>
    d38c:	2800      	cmp	r0, #0
    d38e:	d1ca      	bne.n	d326 <shell_conf_command+0x12>
                conf_dump_running();
    d390:	f7ff ffaa 	bl	d2e8 <conf_dump_running>
            return 0;
    d394:	e7c7      	b.n	d326 <shell_conf_command+0x12>
                conf_save();
    d396:	f7ff fdd5 	bl	cf44 <conf_save>
                return 0;
    d39a:	e7c4      	b.n	d326 <shell_conf_command+0x12>
        val = conf_get_value(name, tmp_buf, sizeof(tmp_buf));
    d39c:	f240 1201 	movw	r2, #257	; 0x101
    d3a0:	a901      	add	r1, sp, #4
    d3a2:	4620      	mov	r0, r4
    d3a4:	f7ff ff4a 	bl	d23c <conf_get_value>
        if (!val) {
    d3a8:	4601      	mov	r1, r0
    d3aa:	b118      	cbz	r0, d3b4 <shell_conf_command+0xa0>
        console_printf("%s\n", val);
    d3ac:	480c      	ldr	r0, [pc, #48]	; (d3e0 <shell_conf_command+0xcc>)
    d3ae:	f000 fe13 	bl	dfd8 <console_printf>
    d3b2:	e7b8      	b.n	d326 <shell_conf_command+0x12>
            console_printf("Cannot display value\n");
    d3b4:	480b      	ldr	r0, [pc, #44]	; (d3e4 <shell_conf_command+0xd0>)
    d3b6:	f000 fe0f 	bl	dfd8 <console_printf>
            goto err;
    d3ba:	e7b1      	b.n	d320 <shell_conf_command+0xc>
    d3bc:	00021c7c 	.word	0x00021c7c
    d3c0:	00021c28 	.word	0x00021c28
    d3c4:	00021c34 	.word	0x00021c34
    d3c8:	00021c44 	.word	0x00021c44
    d3cc:	00021c64 	.word	0x00021c64
    d3d0:	00021c14 	.word	0x00021c14
    d3d4:	00021c30 	.word	0x00021c30
    d3d8:	00021c0c 	.word	0x00021c0c
    d3dc:	00021c3c 	.word	0x00021c3c
    d3e0:	00021f8c 	.word	0x00021f8c
    d3e4:	00021c4c 	.word	0x00021c4c

0000d3e8 <conf_cli_register>:

int
conf_cli_register(void)
{
    d3e8:	b508      	push	{r3, lr}
    return shell_cmd_register(&shell_conf_cmd);
    d3ea:	4802      	ldr	r0, [pc, #8]	; (d3f4 <conf_cli_register+0xc>)
    d3ec:	f001 fdca 	bl	ef84 <shell_cmd_register>
}
    d3f0:	bd08      	pop	{r3, pc}
    d3f2:	bf00      	nop
    d3f4:	20000198 	.word	0x20000198

0000d3f8 <conf_nmgr_write>:
    return 0;
}

static int
conf_nmgr_write(struct mgmt_cbuf *cb)
{
    d3f8:	b570      	push	{r4, r5, r6, lr}
    d3fa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    d3fe:	4605      	mov	r5, r0
    int rc;
    char name_str[CONF_MAX_NAME_LEN];
    char val_str[CONF_MAX_VAL_LEN];
    bool do_save = false;
    d400:	f10d 06c7 	add.w	r6, sp, #199	; 0xc7
    d404:	2400      	movs	r4, #0
    d406:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
    const struct cbor_attr_t val_attr[] = {
    d40a:	22c0      	movs	r2, #192	; 0xc0
    d40c:	4621      	mov	r1, r4
    d40e:	4668      	mov	r0, sp
    d410:	f7fe fe3d 	bl	c08e <memset>
    d414:	4b23      	ldr	r3, [pc, #140]	; (d4a4 <conf_nmgr_write+0xac>)
    d416:	9300      	str	r3, [sp, #0]
    d418:	2304      	movs	r3, #4
    d41a:	f88d 3004 	strb.w	r3, [sp, #4]
    d41e:	aa72      	add	r2, sp, #456	; 0x1c8
    d420:	9202      	str	r2, [sp, #8]
    d422:	2240      	movs	r2, #64	; 0x40
    d424:	920a      	str	r2, [sp, #40]	; 0x28
    d426:	4a20      	ldr	r2, [pc, #128]	; (d4a8 <conf_nmgr_write+0xb0>)
    d428:	920c      	str	r2, [sp, #48]	; 0x30
    d42a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d42e:	ab32      	add	r3, sp, #200	; 0xc8
    d430:	930e      	str	r3, [sp, #56]	; 0x38
    d432:	f44f 7280 	mov.w	r2, #256	; 0x100
    d436:	9216      	str	r2, [sp, #88]	; 0x58
    d438:	4a1c      	ldr	r2, [pc, #112]	; (d4ac <conf_nmgr_write+0xb4>)
    d43a:	9218      	str	r2, [sp, #96]	; 0x60
    d43c:	2205      	movs	r2, #5
    d43e:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
    d442:	961a      	str	r6, [sp, #104]	; 0x68
        [3] = {
            .attribute = NULL
        }
    };

    name_str[0] = '\0';
    d444:	f88d 41c8 	strb.w	r4, [sp, #456]	; 0x1c8
    val_str[0] = '\0';
    d448:	f88d 40c8 	strb.w	r4, [sp, #200]	; 0xc8

    rc = cbor_read_object(&cb->it, val_attr);
    d44c:	4669      	mov	r1, sp
    d44e:	f105 001c 	add.w	r0, r5, #28
    d452:	f004 f8a5 	bl	115a0 <cbor_read_object>
    if (rc) {
    d456:	b9f8      	cbnz	r0, d498 <conf_nmgr_write+0xa0>
        return MGMT_ERR_EINVAL;
    }

    if (name_str[0] != '\0') {
    d458:	f89d 31c8 	ldrb.w	r3, [sp, #456]	; 0x1c8
    d45c:	b13b      	cbz	r3, d46e <conf_nmgr_write+0x76>
        if (val_str[0] != '\0') {
    d45e:	f89d 30c8 	ldrb.w	r3, [sp, #200]	; 0xc8
    d462:	b173      	cbz	r3, d482 <conf_nmgr_write+0x8a>
            rc = conf_set_value(name_str, val_str);
    d464:	a932      	add	r1, sp, #200	; 0xc8
    d466:	a872      	add	r0, sp, #456	; 0x1c8
    d468:	f7ff fece 	bl	d208 <conf_set_value>
        } else {
            rc = conf_set_value(name_str, NULL);
        }
        if (rc) {
    d46c:	b9b0      	cbnz	r0, d49c <conf_nmgr_write+0xa4>
            return MGMT_ERR_EINVAL;
        }
    }
    rc = conf_commit(NULL);
    d46e:	2000      	movs	r0, #0
    d470:	f7ff ff02 	bl	d278 <conf_commit>
    if (rc) {
    d474:	b9a0      	cbnz	r0, d4a0 <conf_nmgr_write+0xa8>
        return MGMT_ERR_EINVAL;
    }
    if (do_save) {
    d476:	f89d 30c7 	ldrb.w	r3, [sp, #199]	; 0xc7
    d47a:	b93b      	cbnz	r3, d48c <conf_nmgr_write+0x94>
        if (rc) {
            return MGMT_ERR_EINVAL;
        }
    }
    return 0;
}
    d47c:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
    d480:	bd70      	pop	{r4, r5, r6, pc}
            rc = conf_set_value(name_str, NULL);
    d482:	2100      	movs	r1, #0
    d484:	a872      	add	r0, sp, #456	; 0x1c8
    d486:	f7ff febf 	bl	d208 <conf_set_value>
    d48a:	e7ef      	b.n	d46c <conf_nmgr_write+0x74>
        rc = conf_save();
    d48c:	f7ff fd5a 	bl	cf44 <conf_save>
        if (rc) {
    d490:	2800      	cmp	r0, #0
    d492:	d0f3      	beq.n	d47c <conf_nmgr_write+0x84>
            return MGMT_ERR_EINVAL;
    d494:	2003      	movs	r0, #3
    d496:	e7f1      	b.n	d47c <conf_nmgr_write+0x84>
        return MGMT_ERR_EINVAL;
    d498:	2003      	movs	r0, #3
    d49a:	e7ef      	b.n	d47c <conf_nmgr_write+0x84>
            return MGMT_ERR_EINVAL;
    d49c:	2003      	movs	r0, #3
    d49e:	e7ed      	b.n	d47c <conf_nmgr_write+0x84>
        return MGMT_ERR_EINVAL;
    d4a0:	2003      	movs	r0, #3
    d4a2:	e7eb      	b.n	d47c <conf_nmgr_write+0x84>
    d4a4:	00023ad0 	.word	0x00023ad0
    d4a8:	00021c94 	.word	0x00021c94
    d4ac:	00021c44 	.word	0x00021c44

0000d4b0 <conf_nmgr_read>:
{
    d4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4b2:	b0e9      	sub	sp, #420	; 0x1a4
    d4b4:	4604      	mov	r4, r0
    const struct cbor_attr_t attr[2] = {
    d4b6:	2260      	movs	r2, #96	; 0x60
    d4b8:	2100      	movs	r1, #0
    d4ba:	4668      	mov	r0, sp
    d4bc:	f7fe fde7 	bl	c08e <memset>
    d4c0:	4b19      	ldr	r3, [pc, #100]	; (d528 <conf_nmgr_read+0x78>)
    d4c2:	9300      	str	r3, [sp, #0]
    d4c4:	2304      	movs	r3, #4
    d4c6:	f88d 3004 	strb.w	r3, [sp, #4]
    d4ca:	ab58      	add	r3, sp, #352	; 0x160
    d4cc:	9302      	str	r3, [sp, #8]
    d4ce:	2340      	movs	r3, #64	; 0x40
    d4d0:	930a      	str	r3, [sp, #40]	; 0x28
    rc = cbor_read_object(&cb->it, attr);
    d4d2:	4669      	mov	r1, sp
    d4d4:	f104 001c 	add.w	r0, r4, #28
    d4d8:	f004 f862 	bl	115a0 <cbor_read_object>
    if (rc) {
    d4dc:	b9e8      	cbnz	r0, d51a <conf_nmgr_read+0x6a>
    d4de:	4605      	mov	r5, r0
    val = conf_get_value(name_str, val_str, sizeof(val_str));
    d4e0:	f44f 7280 	mov.w	r2, #256	; 0x100
    d4e4:	a918      	add	r1, sp, #96	; 0x60
    d4e6:	a858      	add	r0, sp, #352	; 0x160
    d4e8:	f7ff fea8 	bl	d23c <conf_get_value>
    if (!val) {
    d4ec:	4607      	mov	r7, r0
    d4ee:	b1b0      	cbz	r0, d51e <conf_nmgr_read+0x6e>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "val");
    d4f0:	340c      	adds	r4, #12
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
    d4f2:	2203      	movs	r2, #3
    d4f4:	490d      	ldr	r1, [pc, #52]	; (d52c <conf_nmgr_read+0x7c>)
    d4f6:	4620      	mov	r0, r4
    d4f8:	f004 fa39 	bl	1196e <cbor_encode_text_string>
    d4fc:	4606      	mov	r6, r0
    d4fe:	4638      	mov	r0, r7
    d500:	f7fe fdfc 	bl	c0fc <strlen>
    d504:	4602      	mov	r2, r0
    d506:	4639      	mov	r1, r7
    d508:	4620      	mov	r0, r4
    d50a:	f004 fa30 	bl	1196e <cbor_encode_text_string>
    if (g_err) {
    d50e:	ea50 0306 	orrs.w	r3, r0, r6
    d512:	d106      	bne.n	d522 <conf_nmgr_read+0x72>
}
    d514:	4628      	mov	r0, r5
    d516:	b069      	add	sp, #420	; 0x1a4
    d518:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_EINVAL;
    d51a:	2503      	movs	r5, #3
    d51c:	e7fa      	b.n	d514 <conf_nmgr_read+0x64>
        return MGMT_ERR_EINVAL;
    d51e:	2503      	movs	r5, #3
    d520:	e7f8      	b.n	d514 <conf_nmgr_read+0x64>
        return MGMT_ERR_ENOMEM;
    d522:	2502      	movs	r5, #2
    d524:	e7f6      	b.n	d514 <conf_nmgr_read+0x64>
    d526:	bf00      	nop
    d528:	00023ad0 	.word	0x00023ad0
    d52c:	00021c94 	.word	0x00021c94

0000d530 <conf_nmgr_register>:

int
conf_nmgr_register(void)
{
    d530:	b508      	push	{r3, lr}
    return mgmt_group_register(&conf_nmgr_group);
    d532:	4802      	ldr	r0, [pc, #8]	; (d53c <conf_nmgr_register+0xc>)
    d534:	f00e f974 	bl	1b820 <mgmt_group_register>
}
    d538:	bd08      	pop	{r3, pc}
    d53a:	bf00      	nop
    d53c:	200001a8 	.word	0x200001a8

0000d540 <ring_buf_next>:
}

static uint8_t
ring_buf_next(uint8_t i, uint8_t size)
{
    return (uint8_t) ((i + 1) % size);
    d540:	3001      	adds	r0, #1
    d542:	fb90 f3f1 	sdiv	r3, r0, r1
    d546:	fb01 0013 	mls	r0, r1, r3, r0
}
    d54a:	b2c0      	uxtb	r0, r0
    d54c:	4770      	bx	lr

0000d54e <ring_buf_prev>:

static uint8_t
ring_buf_prev(uint8_t i, uint8_t size)
{
    return i == 0 ? i = size - 1 : --i;
    d54e:	b910      	cbnz	r0, d556 <ring_buf_prev+0x8>
    d550:	3901      	subs	r1, #1
    d552:	b2c8      	uxtb	r0, r1
    d554:	4770      	bx	lr
    d556:	3801      	subs	r0, #1
    d558:	b2c0      	uxtb	r0, r0
}
    d55a:	4770      	bx	lr

0000d55c <console_hist_is_full>:

static bool
console_hist_is_full(void)
{
    d55c:	b510      	push	{r4, lr}
    struct console_hist *sh = &console_hist;

    return ring_buf_next(sh->head, sh->size) == sh->tail;
    d55e:	4c05      	ldr	r4, [pc, #20]	; (d574 <console_hist_is_full+0x18>)
    d560:	78a1      	ldrb	r1, [r4, #2]
    d562:	7820      	ldrb	r0, [r4, #0]
    d564:	f7ff ffec 	bl	d540 <ring_buf_next>
    d568:	7863      	ldrb	r3, [r4, #1]
}
    d56a:	4298      	cmp	r0, r3
    d56c:	bf14      	ite	ne
    d56e:	2000      	movne	r0, #0
    d570:	2001      	moveq	r0, #1
    d572:	bd10      	pop	{r4, pc}
    d574:	200054e4 	.word	0x200054e4

0000d578 <handle_nlip>:
}

static int
handle_nlip(uint8_t byte)
{
    if (((nlip_state & NLIP_PKT_START1) &&
    d578:	4b13      	ldr	r3, [pc, #76]	; (d5c8 <handle_nlip+0x50>)
    d57a:	681b      	ldr	r3, [r3, #0]
    d57c:	f003 0203 	and.w	r2, r3, #3
    d580:	2a03      	cmp	r2, #3
    d582:	d01d      	beq.n	d5c0 <handle_nlip+0x48>
         (nlip_state & NLIP_PKT_START2)) ||
        ((nlip_state & NLIP_DATA_START1) &&
    d584:	f003 020c 	and.w	r2, r3, #12
         (nlip_state & NLIP_PKT_START2)) ||
    d588:	2a0c      	cmp	r2, #12
    d58a:	d01b      	beq.n	d5c4 <handle_nlip+0x4c>
         (nlip_state & NLIP_DATA_START2)))
    {
        return 1;
    }

    if ((nlip_state & NLIP_PKT_START1) &&
    d58c:	f013 0f01 	tst.w	r3, #1
    d590:	d001      	beq.n	d596 <handle_nlip+0x1e>
    d592:	2809      	cmp	r0, #9
    d594:	d008      	beq.n	d5a8 <handle_nlip+0x30>
        (byte == CONSOLE_NLIP_PKT_START2)) {
        nlip_state |= NLIP_PKT_START2;
        return 1;
    } else if ((nlip_state & NLIP_DATA_START1) &&
    d596:	f013 0f04 	tst.w	r3, #4
    d59a:	d001      	beq.n	d5a0 <handle_nlip+0x28>
    d59c:	2814      	cmp	r0, #20
    d59e:	d009      	beq.n	d5b4 <handle_nlip+0x3c>
               (byte == CONSOLE_NLIP_DATA_START2)) {
        nlip_state |= NLIP_DATA_START2;
        return 1;
    } else {
        nlip_state = 0;
    d5a0:	2000      	movs	r0, #0
    d5a2:	4b09      	ldr	r3, [pc, #36]	; (d5c8 <handle_nlip+0x50>)
    d5a4:	6018      	str	r0, [r3, #0]
        return 0;
    d5a6:	4770      	bx	lr
        nlip_state |= NLIP_PKT_START2;
    d5a8:	f043 0302 	orr.w	r3, r3, #2
    d5ac:	4a06      	ldr	r2, [pc, #24]	; (d5c8 <handle_nlip+0x50>)
    d5ae:	6013      	str	r3, [r2, #0]
        return 1;
    d5b0:	2001      	movs	r0, #1
    d5b2:	4770      	bx	lr
        nlip_state |= NLIP_DATA_START2;
    d5b4:	f043 0308 	orr.w	r3, r3, #8
    d5b8:	4a03      	ldr	r2, [pc, #12]	; (d5c8 <handle_nlip+0x50>)
    d5ba:	6013      	str	r3, [r2, #0]
        return 1;
    d5bc:	2001      	movs	r0, #1
    d5be:	4770      	bx	lr
        return 1;
    d5c0:	2001      	movs	r0, #1
    d5c2:	4770      	bx	lr
    d5c4:	2001      	movs	r0, #1
    }
}
    d5c6:	4770      	bx	lr
    d5c8:	20005d34 	.word	0x20005d34

0000d5cc <trim_whitespace>:
{
    d5cc:	b570      	push	{r4, r5, r6, lr}
    d5ce:	4604      	mov	r4, r0
    d5d0:	4615      	mov	r5, r2
    if (len == 0) {
    d5d2:	460e      	mov	r6, r1
    d5d4:	b909      	cbnz	r1, d5da <trim_whitespace+0xe>
    d5d6:	e02c      	b.n	d632 <trim_whitespace+0x66>
        str++;
    d5d8:	3401      	adds	r4, #1
    while (isspace((unsigned char)*str)) {
    d5da:	7823      	ldrb	r3, [r4, #0]
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
    d5dc:	2b20      	cmp	r3, #32
    d5de:	d0fb      	beq.n	d5d8 <trim_whitespace+0xc>
    d5e0:	2b0a      	cmp	r3, #10
    d5e2:	d0f9      	beq.n	d5d8 <trim_whitespace+0xc>
    d5e4:	2b09      	cmp	r3, #9
    d5e6:	d0f7      	beq.n	d5d8 <trim_whitespace+0xc>
    d5e8:	2b0d      	cmp	r3, #13
    d5ea:	d0f5      	beq.n	d5d8 <trim_whitespace+0xc>
    if (*str == 0) { /* All spaces? */
    d5ec:	b12b      	cbz	r3, d5fa <trim_whitespace+0x2e>
    end = str + strlen(str) - 1;
    d5ee:	4620      	mov	r0, r4
    d5f0:	f7fe fd84 	bl	c0fc <strlen>
    d5f4:	1e43      	subs	r3, r0, #1
    d5f6:	4423      	add	r3, r4
    while (end > str && isspace((unsigned char)*end)) {
    d5f8:	e003      	b.n	d602 <trim_whitespace+0x36>
        *out = 0;
    d5fa:	702b      	strb	r3, [r5, #0]
        return 0;
    d5fc:	461e      	mov	r6, r3
    d5fe:	e018      	b.n	d632 <trim_whitespace+0x66>
        end--;
    d600:	3b01      	subs	r3, #1
    while (end > str && isspace((unsigned char)*end)) {
    d602:	429c      	cmp	r4, r3
    d604:	d208      	bcs.n	d618 <trim_whitespace+0x4c>
    d606:	781a      	ldrb	r2, [r3, #0]
    d608:	2a20      	cmp	r2, #32
    d60a:	d0f9      	beq.n	d600 <trim_whitespace+0x34>
    d60c:	2a0a      	cmp	r2, #10
    d60e:	d0f7      	beq.n	d600 <trim_whitespace+0x34>
    d610:	2a09      	cmp	r2, #9
    d612:	d0f5      	beq.n	d600 <trim_whitespace+0x34>
    d614:	2a0d      	cmp	r2, #13
    d616:	d0f3      	beq.n	d600 <trim_whitespace+0x34>
    end++;
    d618:	3301      	adds	r3, #1
    out_size = min(end - str, len - 1);
    d61a:	3e01      	subs	r6, #1
    d61c:	1b1b      	subs	r3, r3, r4
    d61e:	429e      	cmp	r6, r3
    d620:	bf28      	it	cs
    d622:	461e      	movcs	r6, r3
    memcpy(out, str, out_size);
    d624:	4632      	mov	r2, r6
    d626:	4621      	mov	r1, r4
    d628:	4628      	mov	r0, r5
    d62a:	f7fe fd23 	bl	c074 <memcpy>
    out[out_size] = 0;
    d62e:	2300      	movs	r3, #0
    d630:	55ab      	strb	r3, [r5, r6]
}
    d632:	4630      	mov	r0, r6
    d634:	bd70      	pop	{r4, r5, r6, pc}
	...

0000d638 <console_hist_move_to_head>:
{
    d638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d63c:	4605      	mov	r5, r0
    curr = sh->tail;
    d63e:	4b1d      	ldr	r3, [pc, #116]	; (d6b4 <console_hist_move_to_head+0x7c>)
    d640:	785c      	ldrb	r4, [r3, #1]
    while (curr != sh->head) {
    d642:	e005      	b.n	d650 <console_hist_move_to_head+0x18>
        curr = ring_buf_next(curr, sh->size);
    d644:	4b1b      	ldr	r3, [pc, #108]	; (d6b4 <console_hist_move_to_head+0x7c>)
    d646:	7899      	ldrb	r1, [r3, #2]
    d648:	4620      	mov	r0, r4
    d64a:	f7ff ff79 	bl	d540 <ring_buf_next>
    d64e:	4604      	mov	r4, r0
    while (curr != sh->head) {
    d650:	4b18      	ldr	r3, [pc, #96]	; (d6b4 <console_hist_move_to_head+0x7c>)
    d652:	781e      	ldrb	r6, [r3, #0]
    d654:	42a6      	cmp	r6, r4
    d656:	d00a      	beq.n	d66e <console_hist_move_to_head+0x36>
        if (strcmp(sh->lines[curr], line) == 0) {
    d658:	4b16      	ldr	r3, [pc, #88]	; (d6b4 <console_hist_move_to_head+0x7c>)
    d65a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    d65e:	685f      	ldr	r7, [r3, #4]
    d660:	4629      	mov	r1, r5
    d662:	4638      	mov	r0, r7
    d664:	f7fe fd3e 	bl	c0e4 <strcmp>
    d668:	2800      	cmp	r0, #0
    d66a:	d1eb      	bne.n	d644 <console_hist_move_to_head+0xc>
    d66c:	e000      	b.n	d670 <console_hist_move_to_head+0x38>
    char *match = NULL;
    d66e:	2700      	movs	r7, #0
    if (!match) {
    d670:	b1f7      	cbz	r7, d6b0 <console_hist_move_to_head+0x78>
    curr = ring_buf_next(curr, sh->size);
    d672:	4b10      	ldr	r3, [pc, #64]	; (d6b4 <console_hist_move_to_head+0x7c>)
    d674:	f893 8002 	ldrb.w	r8, [r3, #2]
    d678:	4641      	mov	r1, r8
    d67a:	4620      	mov	r0, r4
    d67c:	f7ff ff60 	bl	d540 <ring_buf_next>
    d680:	4605      	mov	r5, r0
    while (curr != sh->head) {
    d682:	e00c      	b.n	d69e <console_hist_move_to_head+0x66>
        sh->lines[prev] = sh->lines[curr];
    d684:	480b      	ldr	r0, [pc, #44]	; (d6b4 <console_hist_move_to_head+0x7c>)
    d686:	eb00 0385 	add.w	r3, r0, r5, lsl #2
    d68a:	685b      	ldr	r3, [r3, #4]
    d68c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    d690:	6043      	str	r3, [r0, #4]
        curr = ring_buf_next(curr, sh->size);
    d692:	4641      	mov	r1, r8
    d694:	4628      	mov	r0, r5
    d696:	f7ff ff53 	bl	d540 <ring_buf_next>
        prev = curr;
    d69a:	462c      	mov	r4, r5
        curr = ring_buf_next(curr, sh->size);
    d69c:	4605      	mov	r5, r0
    while (curr != sh->head) {
    d69e:	42ae      	cmp	r6, r5
    d6a0:	d1f0      	bne.n	d684 <console_hist_move_to_head+0x4c>
    sh->lines[prev] = match;
    d6a2:	4804      	ldr	r0, [pc, #16]	; (d6b4 <console_hist_move_to_head+0x7c>)
    d6a4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    d6a8:	6067      	str	r7, [r4, #4]
    return true;
    d6aa:	2001      	movs	r0, #1
}
    d6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
    d6b0:	2000      	movs	r0, #0
    d6b2:	e7fb      	b.n	d6ac <console_hist_move_to_head+0x74>
    d6b4:	200054e4 	.word	0x200054e4

0000d6b8 <console_hist_add>:
{
    d6b8:	b510      	push	{r4, lr}
    d6ba:	b0c0      	sub	sp, #256	; 0x100
    sh->curr = sh->head;
    d6bc:	4b1d      	ldr	r3, [pc, #116]	; (d734 <console_hist_add+0x7c>)
    d6be:	781a      	ldrb	r2, [r3, #0]
    d6c0:	70da      	strb	r2, [r3, #3]
    len = trim_whitespace(line, sizeof(buf), buf);
    d6c2:	466a      	mov	r2, sp
    d6c4:	f44f 7180 	mov.w	r1, #256	; 0x100
    d6c8:	f7ff ff80 	bl	d5cc <trim_whitespace>
    if (!len) {
    d6cc:	b908      	cbnz	r0, d6d2 <console_hist_add+0x1a>
}
    d6ce:	b040      	add	sp, #256	; 0x100
    d6d0:	bd10      	pop	{r4, pc}
    if (console_hist_move_to_head(buf)) {
    d6d2:	4668      	mov	r0, sp
    d6d4:	f7ff ffb0 	bl	d638 <console_hist_move_to_head>
    d6d8:	2800      	cmp	r0, #0
    d6da:	d1f8      	bne.n	d6ce <console_hist_add+0x16>
    if (console_hist_is_full()) {
    d6dc:	f7ff ff3e 	bl	d55c <console_hist_is_full>
    d6e0:	b198      	cbz	r0, d70a <console_hist_add+0x52>
        assert(sh->lines[sh->head] == NULL);
    d6e2:	4a14      	ldr	r2, [pc, #80]	; (d734 <console_hist_add+0x7c>)
    d6e4:	7813      	ldrb	r3, [r2, #0]
    d6e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    d6ea:	6852      	ldr	r2, [r2, #4]
    d6ec:	b9e2      	cbnz	r2, d728 <console_hist_add+0x70>
        sh->lines[sh->head] = sh->lines[sh->tail];
    d6ee:	4c11      	ldr	r4, [pc, #68]	; (d734 <console_hist_add+0x7c>)
    d6f0:	7860      	ldrb	r0, [r4, #1]
    d6f2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    d6f6:	6851      	ldr	r1, [r2, #4]
    d6f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    d6fc:	6059      	str	r1, [r3, #4]
        sh->lines[sh->tail] = NULL;
    d6fe:	2300      	movs	r3, #0
    d700:	6053      	str	r3, [r2, #4]
        sh->tail = ring_buf_next(sh->tail, sh->size);
    d702:	78a1      	ldrb	r1, [r4, #2]
    d704:	f7ff ff1c 	bl	d540 <ring_buf_next>
    d708:	7060      	strb	r0, [r4, #1]
    strcpy(sh->lines[sh->head], buf);
    d70a:	4c0a      	ldr	r4, [pc, #40]	; (d734 <console_hist_add+0x7c>)
    d70c:	7823      	ldrb	r3, [r4, #0]
    d70e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    d712:	4669      	mov	r1, sp
    d714:	6858      	ldr	r0, [r3, #4]
    d716:	f00d f926 	bl	1a966 <strcpy>
    sh->head = ring_buf_next(sh->head, sh->size);
    d71a:	78a1      	ldrb	r1, [r4, #2]
    d71c:	7820      	ldrb	r0, [r4, #0]
    d71e:	f7ff ff0f 	bl	d540 <ring_buf_next>
    d722:	7020      	strb	r0, [r4, #0]
    sh->curr = sh->head;
    d724:	70e0      	strb	r0, [r4, #3]
    d726:	e7d2      	b.n	d6ce <console_hist_add+0x16>
        assert(sh->lines[sh->head] == NULL);
    d728:	2300      	movs	r3, #0
    d72a:	461a      	mov	r2, r3
    d72c:	4619      	mov	r1, r3
    d72e:	4618      	mov	r0, r3
    d730:	f7fb fc10 	bl	8f54 <__assert_func>
    d734:	200054e4 	.word	0x200054e4

0000d738 <console_hist_init>:
{
    d738:	b510      	push	{r4, lr}
    memset(console_hist_lines, 0, sizeof(console_hist_lines));
    d73a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    d73e:	2100      	movs	r1, #0
    d740:	480b      	ldr	r0, [pc, #44]	; (d770 <console_hist_init+0x38>)
    d742:	f7fe fca4 	bl	c08e <memset>
    memset(&console_hist, 0, sizeof(console_hist));
    d746:	4c0b      	ldr	r4, [pc, #44]	; (d774 <console_hist_init+0x3c>)
    d748:	2228      	movs	r2, #40	; 0x28
    d74a:	2100      	movs	r1, #0
    d74c:	4620      	mov	r0, r4
    d74e:	f7fe fc9e 	bl	c08e <memset>
    sh->size = MYNEWT_VAL(CONSOLE_HISTORY_SIZE) + 1;
    d752:	2309      	movs	r3, #9
    d754:	70a3      	strb	r3, [r4, #2]
    for (i = 0; i < sh->size - 1; i++) {
    d756:	2300      	movs	r3, #0
    d758:	e007      	b.n	d76a <console_hist_init+0x32>
        sh->lines[i] = console_hist_lines[i];
    d75a:	4905      	ldr	r1, [pc, #20]	; (d770 <console_hist_init+0x38>)
    d75c:	eb01 2103 	add.w	r1, r1, r3, lsl #8
    d760:	4a04      	ldr	r2, [pc, #16]	; (d774 <console_hist_init+0x3c>)
    d762:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    d766:	6051      	str	r1, [r2, #4]
    for (i = 0; i < sh->size - 1; i++) {
    d768:	3301      	adds	r3, #1
    d76a:	2b07      	cmp	r3, #7
    d76c:	ddf5      	ble.n	d75a <console_hist_init+0x22>
}
    d76e:	bd10      	pop	{r4, pc}
    d770:	2000550c 	.word	0x2000550c
    d774:	200054e4 	.word	0x200054e4

0000d778 <console_echo>:
    echo = on;
    d778:	4b01      	ldr	r3, [pc, #4]	; (d780 <console_echo+0x8>)
    d77a:	6018      	str	r0, [r3, #0]
}
    d77c:	4770      	bx	lr
    d77e:	bf00      	nop
    d780:	200001b4 	.word	0x200001b4

0000d784 <console_lock>:
{
    d784:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
    d786:	4b0a      	ldr	r3, [pc, #40]	; (d7b0 <console_lock+0x2c>)
    d788:	685b      	ldr	r3, [r3, #4]
    d78a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
    d78e:	b133      	cbz	r3, d79e <console_lock+0x1a>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
    d790:	4b08      	ldr	r3, [pc, #32]	; (d7b4 <console_lock+0x30>)
    d792:	88db      	ldrh	r3, [r3, #6]
        if (os_mutex_get_level(&console_write_lock)) {
    d794:	b90b      	cbnz	r3, d79a <console_lock+0x16>
    int rc = OS_OK;
    d796:	2000      	movs	r0, #0
    d798:	e007      	b.n	d7aa <console_lock+0x26>
            rc = OS_EBUSY;
    d79a:	200b      	movs	r0, #11
        goto end;
    d79c:	e005      	b.n	d7aa <console_lock+0x26>
    rc = os_mutex_pend(&console_write_lock, timeout);
    d79e:	4601      	mov	r1, r0
    d7a0:	4804      	ldr	r0, [pc, #16]	; (d7b4 <console_lock+0x30>)
    d7a2:	f7fd f93b 	bl	aa1c <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
    d7a6:	2809      	cmp	r0, #9
    d7a8:	d000      	beq.n	d7ac <console_lock+0x28>
}
    d7aa:	bd08      	pop	{r3, pc}
        rc = OS_OK;
    d7ac:	2000      	movs	r0, #0
    return rc;
    d7ae:	e7fc      	b.n	d7aa <console_lock+0x26>
    d7b0:	e000ed00 	.word	0xe000ed00
    d7b4:	20005d10 	.word	0x20005d10

0000d7b8 <console_unlock>:
{
    d7b8:	b508      	push	{r3, lr}
    d7ba:	4b0a      	ldr	r3, [pc, #40]	; (d7e4 <console_unlock+0x2c>)
    d7bc:	685b      	ldr	r3, [r3, #4]
    d7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
    d7c2:	b10b      	cbz	r3, d7c8 <console_unlock+0x10>
    int rc = OS_OK;
    d7c4:	2000      	movs	r0, #0
}
    d7c6:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&console_write_lock);
    d7c8:	4807      	ldr	r0, [pc, #28]	; (d7e8 <console_unlock+0x30>)
    d7ca:	f7fd f8cb 	bl	a964 <os_mutex_release>
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
    d7ce:	2800      	cmp	r0, #0
    d7d0:	d0f9      	beq.n	d7c6 <console_unlock+0xe>
    d7d2:	2809      	cmp	r0, #9
    d7d4:	d0f7      	beq.n	d7c6 <console_unlock+0xe>
    d7d6:	2300      	movs	r3, #0
    d7d8:	461a      	mov	r2, r3
    d7da:	4619      	mov	r1, r3
    d7dc:	4618      	mov	r0, r3
    d7de:	f7fb fbb9 	bl	8f54 <__assert_func>
    d7e2:	bf00      	nop
    d7e4:	e000ed00 	.word	0xe000ed00
    d7e8:	20005d10 	.word	0x20005d10

0000d7ec <console_out>:
{
    d7ec:	b510      	push	{r4, lr}
    d7ee:	4604      	mov	r4, r0
    if (console_lock(timeout) != OS_OK) {
    d7f0:	2080      	movs	r0, #128	; 0x80
    d7f2:	f7ff ffc7 	bl	d784 <console_lock>
    d7f6:	b108      	cbz	r0, d7fc <console_out+0x10>
}
    d7f8:	4620      	mov	r0, r4
    d7fa:	bd10      	pop	{r4, pc}
    rc = console_out_nolock(c);
    d7fc:	4620      	mov	r0, r4
    d7fe:	f000 fd0b 	bl	e218 <console_out_nolock>
    d802:	4604      	mov	r4, r0
    (void)console_unlock();
    d804:	f7ff ffd8 	bl	d7b8 <console_unlock>
    return rc;
    d808:	e7f6      	b.n	d7f8 <console_out+0xc>
	...

0000d80c <console_append_char>:

static int
console_append_char(char *line, uint8_t byte)
{
    d80c:	b508      	push	{r3, lr}
    if (cur + end >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
    d80e:	4b0d      	ldr	r3, [pc, #52]	; (d844 <console_append_char+0x38>)
    d810:	881b      	ldrh	r3, [r3, #0]
    d812:	4a0d      	ldr	r2, [pc, #52]	; (d848 <console_append_char+0x3c>)
    d814:	8812      	ldrh	r2, [r2, #0]
    d816:	4413      	add	r3, r2
    d818:	2bfe      	cmp	r3, #254	; 0xfe
    d81a:	dc0e      	bgt.n	d83a <console_append_char+0x2e>
        return 0;
    }

    line[cur + end] = byte;
    d81c:	54c1      	strb	r1, [r0, r3]

    if (byte == '\0') {
    d81e:	b171      	cbz	r1, d83e <console_append_char+0x32>
        return 1;
    }

    if (echo) {
    d820:	4b0a      	ldr	r3, [pc, #40]	; (d84c <console_append_char+0x40>)
    d822:	681b      	ldr	r3, [r3, #0]
    d824:	b92b      	cbnz	r3, d832 <console_append_char+0x26>
        /* Echo back to console */
        console_out(byte);
    }
    ++cur;
    d826:	4a07      	ldr	r2, [pc, #28]	; (d844 <console_append_char+0x38>)
    d828:	8813      	ldrh	r3, [r2, #0]
    d82a:	3301      	adds	r3, #1
    d82c:	8013      	strh	r3, [r2, #0]
    return 1;
    d82e:	2001      	movs	r0, #1
}
    d830:	bd08      	pop	{r3, pc}
        console_out(byte);
    d832:	4608      	mov	r0, r1
    d834:	f7ff ffda 	bl	d7ec <console_out>
    d838:	e7f5      	b.n	d826 <console_append_char+0x1a>
        return 0;
    d83a:	2000      	movs	r0, #0
    d83c:	e7f8      	b.n	d830 <console_append_char+0x24>
        return 1;
    d83e:	2001      	movs	r0, #1
    d840:	e7f6      	b.n	d830 <console_append_char+0x24>
    d842:	bf00      	nop
    d844:	20005d1c 	.word	0x20005d1c
    d848:	20005d1e 	.word	0x20005d1e
    d84c:	200001b4 	.word	0x200001b4

0000d850 <console_clear_line>:
{
    d850:	b508      	push	{r3, lr}
    if (cur) {
    d852:	4b0b      	ldr	r3, [pc, #44]	; (d880 <console_clear_line+0x30>)
    d854:	8819      	ldrh	r1, [r3, #0]
    d856:	b971      	cbnz	r1, d876 <console_clear_line+0x26>
    cur = 0;
    d858:	2300      	movs	r3, #0
    d85a:	4a09      	ldr	r2, [pc, #36]	; (d880 <console_clear_line+0x30>)
    d85c:	8013      	strh	r3, [r2, #0]
    end = 0;
    d85e:	4a09      	ldr	r2, [pc, #36]	; (d884 <console_clear_line+0x34>)
    d860:	8013      	strh	r3, [r2, #0]
    console_out(ESC);
    d862:	201b      	movs	r0, #27
    d864:	f7ff ffc2 	bl	d7ec <console_out>
    console_out('[');
    d868:	205b      	movs	r0, #91	; 0x5b
    d86a:	f7ff ffbf 	bl	d7ec <console_out>
    console_out('K');
    d86e:	204b      	movs	r0, #75	; 0x4b
    d870:	f7ff ffbc 	bl	d7ec <console_out>
}
    d874:	bd08      	pop	{r3, pc}
    console_printf("\x1b[%uD", count);
    d876:	4804      	ldr	r0, [pc, #16]	; (d888 <console_clear_line+0x38>)
    d878:	f000 fbae 	bl	dfd8 <console_printf>
}
    d87c:	e7ec      	b.n	d858 <console_clear_line+0x8>
    d87e:	bf00      	nop
    d880:	20005d1c 	.word	0x20005d1c
    d884:	20005d1e 	.word	0x20005d1e
    d888:	00021ca0 	.word	0x00021ca0

0000d88c <insert_char>:
{
    d88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (cur + end >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
    d88e:	4b1d      	ldr	r3, [pc, #116]	; (d904 <insert_char+0x78>)
    d890:	881b      	ldrh	r3, [r3, #0]
    d892:	4413      	add	r3, r2
    d894:	2bfe      	cmp	r3, #254	; 0xfe
    d896:	dc0b      	bgt.n	d8b0 <insert_char+0x24>
    d898:	4604      	mov	r4, r0
    d89a:	460e      	mov	r6, r1
    d89c:	4615      	mov	r5, r2
    if (echo) {
    d89e:	4b1a      	ldr	r3, [pc, #104]	; (d908 <insert_char+0x7c>)
    d8a0:	681b      	ldr	r3, [r3, #0]
    d8a2:	b933      	cbnz	r3, d8b2 <insert_char+0x26>
    ++cur;
    d8a4:	4a17      	ldr	r2, [pc, #92]	; (d904 <insert_char+0x78>)
    d8a6:	8813      	ldrh	r3, [r2, #0]
    d8a8:	3301      	adds	r3, #1
    d8aa:	8013      	strh	r3, [r2, #0]
    if (end == 0) {
    d8ac:	b92d      	cbnz	r5, d8ba <insert_char+0x2e>
        *pos = c;
    d8ae:	7026      	strb	r6, [r4, #0]
}
    d8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        console_out(c);
    d8b2:	4608      	mov	r0, r1
    d8b4:	f7ff ff9a 	bl	d7ec <console_out>
    d8b8:	e7f4      	b.n	d8a4 <insert_char+0x18>
    tmp = *pos;
    d8ba:	7827      	ldrb	r7, [r4, #0]
    *(pos++) = c;
    d8bc:	f804 6b01 	strb.w	r6, [r4], #1
    console_out(ESC);
    d8c0:	201b      	movs	r0, #27
    d8c2:	f7ff ff93 	bl	d7ec <console_out>
    console_out('[');
    d8c6:	205b      	movs	r0, #91	; 0x5b
    d8c8:	f7ff ff90 	bl	d7ec <console_out>
    console_out('s');
    d8cc:	2073      	movs	r0, #115	; 0x73
    d8ce:	f7ff ff8d 	bl	d7ec <console_out>
}
    d8d2:	e009      	b.n	d8e8 <insert_char+0x5c>
        console_out(tmp);
    d8d4:	4638      	mov	r0, r7
    d8d6:	f7ff ff89 	bl	d7ec <console_out>
        c = *pos;
    d8da:	7823      	ldrb	r3, [r4, #0]
        *(pos++) = tmp;
    d8dc:	4620      	mov	r0, r4
    d8de:	f800 7b01 	strb.w	r7, [r0], #1
        tmp = c;
    d8e2:	461f      	mov	r7, r3
    while (end-- > 0) {
    d8e4:	4635      	mov	r5, r6
        *(pos++) = tmp;
    d8e6:	4604      	mov	r4, r0
    while (end-- > 0) {
    d8e8:	1e6b      	subs	r3, r5, #1
    d8ea:	b29e      	uxth	r6, r3
    d8ec:	2d00      	cmp	r5, #0
    d8ee:	d1f1      	bne.n	d8d4 <insert_char+0x48>
    console_out(ESC);
    d8f0:	201b      	movs	r0, #27
    d8f2:	f7ff ff7b 	bl	d7ec <console_out>
    console_out('[');
    d8f6:	205b      	movs	r0, #91	; 0x5b
    d8f8:	f7ff ff78 	bl	d7ec <console_out>
    console_out('u');
    d8fc:	2075      	movs	r0, #117	; 0x75
    d8fe:	f7ff ff75 	bl	d7ec <console_out>
}
    d902:	e7d5      	b.n	d8b0 <insert_char+0x24>
    d904:	20005d1c 	.word	0x20005d1c
    d908:	200001b4 	.word	0x200001b4

0000d90c <console_hist_move>:
{
    d90c:	b538      	push	{r3, r4, r5, lr}
    d90e:	4605      	mov	r5, r0
    uint8_t limit = direction ==  ANSI_UP ? sh->tail : sh->head;
    d910:	2941      	cmp	r1, #65	; 0x41
    d912:	d014      	beq.n	d93e <console_hist_move+0x32>
    d914:	4b15      	ldr	r3, [pc, #84]	; (d96c <console_hist_move+0x60>)
    d916:	781b      	ldrb	r3, [r3, #0]
    if (sh->curr == limit) {
    d918:	4a14      	ldr	r2, [pc, #80]	; (d96c <console_hist_move+0x60>)
    d91a:	78d0      	ldrb	r0, [r2, #3]
    d91c:	4298      	cmp	r0, r3
    d91e:	d023      	beq.n	d968 <console_hist_move+0x5c>
    if (direction == ANSI_UP) {
    d920:	2941      	cmp	r1, #65	; 0x41
    d922:	d00f      	beq.n	d944 <console_hist_move+0x38>
        sh->curr = ring_buf_next(sh->curr, sh->size);
    d924:	4c11      	ldr	r4, [pc, #68]	; (d96c <console_hist_move+0x60>)
    d926:	78a1      	ldrb	r1, [r4, #2]
    d928:	f7ff fe0a 	bl	d540 <ring_buf_next>
    d92c:	70e0      	strb	r0, [r4, #3]
    console_clear_line();
    d92e:	f7ff ff8f 	bl	d850 <console_clear_line>
    str = sh->lines[sh->curr];
    d932:	4b0e      	ldr	r3, [pc, #56]	; (d96c <console_hist_move+0x60>)
    d934:	78da      	ldrb	r2, [r3, #3]
    d936:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    d93a:	685c      	ldr	r4, [r3, #4]
    while (str && *str != '\0') {
    d93c:	e010      	b.n	d960 <console_hist_move+0x54>
    uint8_t limit = direction ==  ANSI_UP ? sh->tail : sh->head;
    d93e:	4b0b      	ldr	r3, [pc, #44]	; (d96c <console_hist_move+0x60>)
    d940:	785b      	ldrb	r3, [r3, #1]
    d942:	e7e9      	b.n	d918 <console_hist_move+0xc>
        sh->curr = ring_buf_prev(sh->curr, sh->size);
    d944:	4614      	mov	r4, r2
    d946:	7891      	ldrb	r1, [r2, #2]
    d948:	f7ff fe01 	bl	d54e <ring_buf_prev>
    d94c:	70e0      	strb	r0, [r4, #3]
    d94e:	e7ee      	b.n	d92e <console_hist_move+0x22>
        insert_char(&line[cur], *str, end);
    d950:	4b07      	ldr	r3, [pc, #28]	; (d970 <console_hist_move+0x64>)
    d952:	8818      	ldrh	r0, [r3, #0]
    d954:	4b07      	ldr	r3, [pc, #28]	; (d974 <console_hist_move+0x68>)
    d956:	881a      	ldrh	r2, [r3, #0]
    d958:	4428      	add	r0, r5
    d95a:	f7ff ff97 	bl	d88c <insert_char>
        ++str;
    d95e:	3401      	adds	r4, #1
    while (str && *str != '\0') {
    d960:	b114      	cbz	r4, d968 <console_hist_move+0x5c>
    d962:	7821      	ldrb	r1, [r4, #0]
    d964:	2900      	cmp	r1, #0
    d966:	d1f3      	bne.n	d950 <console_hist_move+0x44>
}
    d968:	bd38      	pop	{r3, r4, r5, pc}
    d96a:	bf00      	nop
    d96c:	200054e4 	.word	0x200054e4
    d970:	20005d1c 	.word	0x20005d1c
    d974:	20005d1e 	.word	0x20005d1e

0000d978 <del_char>:
{
    d978:	b570      	push	{r4, r5, r6, lr}
    d97a:	4606      	mov	r6, r0
    d97c:	460d      	mov	r5, r1
    console_out('\b');
    d97e:	2008      	movs	r0, #8
    d980:	f7ff ff34 	bl	d7ec <console_out>
    if (end == 0) {
    d984:	b14d      	cbz	r5, d99a <del_char+0x22>
    console_out(ESC);
    d986:	201b      	movs	r0, #27
    d988:	f7ff ff30 	bl	d7ec <console_out>
    console_out('[');
    d98c:	205b      	movs	r0, #91	; 0x5b
    d98e:	f7ff ff2d 	bl	d7ec <console_out>
    console_out('s');
    d992:	2073      	movs	r0, #115	; 0x73
    d994:	f7ff ff2a 	bl	d7ec <console_out>
}
    d998:	e00c      	b.n	d9b4 <del_char+0x3c>
        console_out(' ');
    d99a:	2020      	movs	r0, #32
    d99c:	f7ff ff26 	bl	d7ec <console_out>
        console_out('\b');
    d9a0:	2008      	movs	r0, #8
    d9a2:	f7ff ff23 	bl	d7ec <console_out>
        return;
    d9a6:	e015      	b.n	d9d4 <del_char+0x5c>
        *pos = *(pos + 1);
    d9a8:	7870      	ldrb	r0, [r6, #1]
    d9aa:	f806 0b01 	strb.w	r0, [r6], #1
        console_out(*(pos++));
    d9ae:	f7ff ff1d 	bl	d7ec <console_out>
    while (end-- > 0) {
    d9b2:	4625      	mov	r5, r4
    d9b4:	1e6b      	subs	r3, r5, #1
    d9b6:	b29c      	uxth	r4, r3
    d9b8:	2d00      	cmp	r5, #0
    d9ba:	d1f5      	bne.n	d9a8 <del_char+0x30>
    console_out(' ');
    d9bc:	2020      	movs	r0, #32
    d9be:	f7ff ff15 	bl	d7ec <console_out>
    console_out(ESC);
    d9c2:	201b      	movs	r0, #27
    d9c4:	f7ff ff12 	bl	d7ec <console_out>
    console_out('[');
    d9c8:	205b      	movs	r0, #91	; 0x5b
    d9ca:	f7ff ff0f 	bl	d7ec <console_out>
    console_out('u');
    d9ce:	2075      	movs	r0, #117	; 0x75
    d9d0:	f7ff ff0c 	bl	d7ec <console_out>
}
    d9d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0000d9d8 <console_write>:
{
    d9d8:	b570      	push	{r4, r5, r6, lr}
    d9da:	4606      	mov	r6, r0
    d9dc:	460d      	mov	r5, r1
    if (console_lock(timeout) != OS_OK) {
    d9de:	2080      	movs	r0, #128	; 0x80
    d9e0:	f7ff fed0 	bl	d784 <console_lock>
    d9e4:	bb88      	cbnz	r0, da4a <console_write+0x72>
    d9e6:	4604      	mov	r4, r0
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
    d9e8:	2d01      	cmp	r5, #1
    d9ea:	dd02      	ble.n	d9f2 <console_write+0x1a>
    d9ec:	7833      	ldrb	r3, [r6, #0]
    d9ee:	2b04      	cmp	r3, #4
    d9f0:	d014      	beq.n	da1c <console_write+0x44>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
    d9f2:	2d02      	cmp	r5, #2
    d9f4:	dd02      	ble.n	d9fc <console_write+0x24>
    d9f6:	7873      	ldrb	r3, [r6, #1]
    d9f8:	2b06      	cmp	r3, #6
    d9fa:	d016      	beq.n	da2a <console_write+0x52>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
    d9fc:	4b15      	ldr	r3, [pc, #84]	; (da54 <console_write+0x7c>)
    d9fe:	781b      	ldrb	r3, [r3, #0]
    da00:	b913      	cbnz	r3, da08 <console_write+0x30>
    da02:	4b15      	ldr	r3, [pc, #84]	; (da58 <console_write+0x80>)
    da04:	781b      	ldrb	r3, [r3, #0]
    da06:	b9bb      	cbnz	r3, da38 <console_write+0x60>
    for (i = 0; i < cnt; i++) {
    da08:	42ac      	cmp	r4, r5
    da0a:	da15      	bge.n	da38 <console_write+0x60>
        if (console_out_nolock((int)str[i]) == EOF) {
    da0c:	5d30      	ldrb	r0, [r6, r4]
    da0e:	f000 fc03 	bl	e218 <console_out_nolock>
    da12:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    da16:	d00f      	beq.n	da38 <console_write+0x60>
    for (i = 0; i < cnt; i++) {
    da18:	3401      	adds	r4, #1
    da1a:	e7f5      	b.n	da08 <console_write+0x30>
        str[1] == CONSOLE_NLIP_DATA_START2) {
    da1c:	7873      	ldrb	r3, [r6, #1]
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
    da1e:	2b14      	cmp	r3, #20
    da20:	d1e7      	bne.n	d9f2 <console_write+0x1a>
        g_is_output_nlip = 1;
    da22:	4b0c      	ldr	r3, [pc, #48]	; (da54 <console_write+0x7c>)
    da24:	2201      	movs	r2, #1
    da26:	701a      	strb	r2, [r3, #0]
    da28:	e7e3      	b.n	d9f2 <console_write+0x1a>
        str[2] == CONSOLE_NLIP_PKT_START2) {
    da2a:	78b3      	ldrb	r3, [r6, #2]
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
    da2c:	2b09      	cmp	r3, #9
    da2e:	d1e5      	bne.n	d9fc <console_write+0x24>
        g_is_output_nlip = 1;
    da30:	4b08      	ldr	r3, [pc, #32]	; (da54 <console_write+0x7c>)
    da32:	2201      	movs	r2, #1
    da34:	701a      	strb	r2, [r3, #0]
    da36:	e7e1      	b.n	d9fc <console_write+0x24>
    if (cnt > 0 && str[cnt - 1] == '\n') {
    da38:	2d00      	cmp	r5, #0
    da3a:	dd04      	ble.n	da46 <console_write+0x6e>
    da3c:	4435      	add	r5, r6
    da3e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    da42:	2b0a      	cmp	r3, #10
    da44:	d002      	beq.n	da4c <console_write+0x74>
    (void)console_unlock();
    da46:	f7ff feb7 	bl	d7b8 <console_unlock>
}
    da4a:	bd70      	pop	{r4, r5, r6, pc}
        g_is_output_nlip = 0;
    da4c:	4b01      	ldr	r3, [pc, #4]	; (da54 <console_write+0x7c>)
    da4e:	2200      	movs	r2, #0
    da50:	701a      	strb	r2, [r3, #0]
    da52:	e7f8      	b.n	da46 <console_write+0x6e>
    da54:	20005d2b 	.word	0x20005d2b
    da58:	20005d2a 	.word	0x20005d2a

0000da5c <console_blocking_mode>:
{
    da5c:	b508      	push	{r3, lr}
    uart_console_blocking_mode();
    da5e:	f000 fbb5 	bl	e1cc <uart_console_blocking_mode>
}
    da62:	bd08      	pop	{r3, pc}

0000da64 <console_non_blocking_mode>:
{
    da64:	b508      	push	{r3, lr}
    uart_console_non_blocking_mode();
    da66:	f000 fbc7 	bl	e1f8 <uart_console_non_blocking_mode>
}
    da6a:	bd08      	pop	{r3, pc}

0000da6c <handle_ansi>:
{
    da6c:	b538      	push	{r3, r4, r5, lr}
    da6e:	4604      	mov	r4, r0
    da70:	460d      	mov	r5, r1
    if (esc_state & ESC_ANSI_FIRST) {
    da72:	4b60      	ldr	r3, [pc, #384]	; (dbf4 <handle_ansi+0x188>)
    da74:	681b      	ldr	r3, [r3, #0]
    da76:	f013 0f04 	tst.w	r3, #4
    da7a:	d024      	beq.n	dac6 <handle_ansi+0x5a>
        esc_state &= ~ESC_ANSI_FIRST;
    da7c:	f023 0304 	bic.w	r3, r3, #4
    da80:	4a5c      	ldr	r2, [pc, #368]	; (dbf4 <handle_ansi+0x188>)
    da82:	6013      	str	r3, [r2, #0]
        if (!isdigit(byte)) {
    da84:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    da88:	2a09      	cmp	r2, #9
    da8a:	d910      	bls.n	daae <handle_ansi+0x42>
            ansi_val = 1;
    da8c:	4b5a      	ldr	r3, [pc, #360]	; (dbf8 <handle_ansi+0x18c>)
    da8e:	2201      	movs	r2, #1
    da90:	601a      	str	r2, [r3, #0]
    switch (byte) {
    da92:	2c48      	cmp	r4, #72	; 0x48
    da94:	d847      	bhi.n	db26 <handle_ansi+0xba>
    da96:	2c41      	cmp	r4, #65	; 0x41
    da98:	d361      	bcc.n	db5e <handle_ansi+0xf2>
    da9a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    da9e:	2b07      	cmp	r3, #7
    daa0:	d85d      	bhi.n	db5e <handle_ansi+0xf2>
    daa2:	e8df f003 	tbb	[pc, r3]
    daa6:	5454      	.short	0x5454
    daa8:	965c6274 	.word	0x965c6274
    daac:	865c      	.short	0x865c
        esc_state |= ESC_ANSI_VAL;
    daae:	f043 0308 	orr.w	r3, r3, #8
    dab2:	4a50      	ldr	r2, [pc, #320]	; (dbf4 <handle_ansi+0x188>)
    dab4:	6013      	str	r3, [r2, #0]
        ansi_val = byte - '0';
    dab6:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
    daba:	4b4f      	ldr	r3, [pc, #316]	; (dbf8 <handle_ansi+0x18c>)
    dabc:	601c      	str	r4, [r3, #0]
        ansi_val_2 = 0;
    dabe:	4b4f      	ldr	r3, [pc, #316]	; (dbfc <handle_ansi+0x190>)
    dac0:	2200      	movs	r2, #0
    dac2:	601a      	str	r2, [r3, #0]
        return;
    dac4:	e050      	b.n	db68 <handle_ansi+0xfc>
    if (esc_state & ESC_ANSI_VAL) {
    dac6:	f013 0f08 	tst.w	r3, #8
    daca:	d0e2      	beq.n	da92 <handle_ansi+0x26>
        if (isdigit(byte)) {
    dacc:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    dad0:	2a09      	cmp	r2, #9
    dad2:	d909      	bls.n	dae8 <handle_ansi+0x7c>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
    dad4:	283b      	cmp	r0, #59	; 0x3b
    dad6:	d01e      	beq.n	db16 <handle_ansi+0xaa>
        esc_state &= ~ESC_ANSI_VAL;
    dad8:	f023 0108 	bic.w	r1, r3, #8
    dadc:	4a45      	ldr	r2, [pc, #276]	; (dbf4 <handle_ansi+0x188>)
    dade:	6011      	str	r1, [r2, #0]
        esc_state &= ~ESC_ANSI_VAL_2;
    dae0:	f023 0318 	bic.w	r3, r3, #24
    dae4:	6013      	str	r3, [r2, #0]
    dae6:	e7d4      	b.n	da92 <handle_ansi+0x26>
            if (esc_state & ESC_ANSI_VAL_2) {
    dae8:	f013 0f10 	tst.w	r3, #16
    daec:	d009      	beq.n	db02 <handle_ansi+0x96>
                ansi_val_2 *= 10;
    daee:	4a43      	ldr	r2, [pc, #268]	; (dbfc <handle_ansi+0x190>)
    daf0:	6813      	ldr	r3, [r2, #0]
    daf2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    daf6:	005b      	lsls	r3, r3, #1
    daf8:	6013      	str	r3, [r2, #0]
                ansi_val_2 += byte - '0';
    dafa:	4403      	add	r3, r0
    dafc:	3b30      	subs	r3, #48	; 0x30
    dafe:	6013      	str	r3, [r2, #0]
    db00:	e032      	b.n	db68 <handle_ansi+0xfc>
                ansi_val *= 10;
    db02:	4a3d      	ldr	r2, [pc, #244]	; (dbf8 <handle_ansi+0x18c>)
    db04:	6813      	ldr	r3, [r2, #0]
    db06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    db0a:	005b      	lsls	r3, r3, #1
    db0c:	6013      	str	r3, [r2, #0]
                ansi_val += byte - '0';
    db0e:	4403      	add	r3, r0
    db10:	3b30      	subs	r3, #48	; 0x30
    db12:	6013      	str	r3, [r2, #0]
            return;
    db14:	e028      	b.n	db68 <handle_ansi+0xfc>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
    db16:	f013 0f10 	tst.w	r3, #16
    db1a:	d1dd      	bne.n	dad8 <handle_ansi+0x6c>
            esc_state |= ESC_ANSI_VAL_2;
    db1c:	f043 0310 	orr.w	r3, r3, #16
    db20:	4a34      	ldr	r2, [pc, #208]	; (dbf4 <handle_ansi+0x188>)
    db22:	6013      	str	r3, [r2, #0]
            return;
    db24:	e020      	b.n	db68 <handle_ansi+0xfc>
    switch (byte) {
    db26:	2c7e      	cmp	r4, #126	; 0x7e
    db28:	d119      	bne.n	db5e <handle_ansi+0xf2>
        if (!end) {
    db2a:	4b35      	ldr	r3, [pc, #212]	; (dc00 <handle_ansi+0x194>)
    db2c:	881b      	ldrh	r3, [r3, #0]
    db2e:	b1b3      	cbz	r3, db5e <handle_ansi+0xf2>
    console_printf("\x1b[%uC", count);
    db30:	2101      	movs	r1, #1
    db32:	4834      	ldr	r0, [pc, #208]	; (dc04 <handle_ansi+0x198>)
    db34:	f000 fa50 	bl	dfd8 <console_printf>
        del_char(&line[cur], --end);
    db38:	4b33      	ldr	r3, [pc, #204]	; (dc08 <handle_ansi+0x19c>)
    db3a:	8818      	ldrh	r0, [r3, #0]
    db3c:	4b30      	ldr	r3, [pc, #192]	; (dc00 <handle_ansi+0x194>)
    db3e:	8819      	ldrh	r1, [r3, #0]
    db40:	3901      	subs	r1, #1
    db42:	b289      	uxth	r1, r1
    db44:	8019      	strh	r1, [r3, #0]
    db46:	4428      	add	r0, r5
    db48:	f7ff ff16 	bl	d978 <del_char>
        break;
    db4c:	e007      	b.n	db5e <handle_ansi+0xf2>
        console_blocking_mode();
    db4e:	f7ff ff85 	bl	da5c <console_blocking_mode>
        console_hist_move(line, byte);
    db52:	4621      	mov	r1, r4
    db54:	4628      	mov	r0, r5
    db56:	f7ff fed9 	bl	d90c <console_hist_move>
        console_non_blocking_mode();
    db5a:	f7ff ff83 	bl	da64 <console_non_blocking_mode>
    esc_state &= ~ESC_ANSI;
    db5e:	4a25      	ldr	r2, [pc, #148]	; (dbf4 <handle_ansi+0x188>)
    db60:	6813      	ldr	r3, [r2, #0]
    db62:	f023 0302 	bic.w	r3, r3, #2
    db66:	6013      	str	r3, [r2, #0]
}
    db68:	bd38      	pop	{r3, r4, r5, pc}
        if (ansi_val > cur) {
    db6a:	4b27      	ldr	r3, [pc, #156]	; (dc08 <handle_ansi+0x19c>)
    db6c:	881b      	ldrh	r3, [r3, #0]
    db6e:	4a22      	ldr	r2, [pc, #136]	; (dbf8 <handle_ansi+0x18c>)
    db70:	6811      	ldr	r1, [r2, #0]
    db72:	428b      	cmp	r3, r1
    db74:	d3f3      	bcc.n	db5e <handle_ansi+0xf2>
        end += ansi_val;
    db76:	b288      	uxth	r0, r1
    db78:	4c21      	ldr	r4, [pc, #132]	; (dc00 <handle_ansi+0x194>)
    db7a:	8822      	ldrh	r2, [r4, #0]
    db7c:	4402      	add	r2, r0
    db7e:	8022      	strh	r2, [r4, #0]
        cur -= ansi_val;
    db80:	1a1b      	subs	r3, r3, r0
    db82:	4a21      	ldr	r2, [pc, #132]	; (dc08 <handle_ansi+0x19c>)
    db84:	8013      	strh	r3, [r2, #0]
    console_printf("\x1b[%uD", count);
    db86:	4821      	ldr	r0, [pc, #132]	; (dc0c <handle_ansi+0x1a0>)
    db88:	f000 fa26 	bl	dfd8 <console_printf>
}
    db8c:	e7e7      	b.n	db5e <handle_ansi+0xf2>
        if (ansi_val > end) {
    db8e:	4b1c      	ldr	r3, [pc, #112]	; (dc00 <handle_ansi+0x194>)
    db90:	881b      	ldrh	r3, [r3, #0]
    db92:	4a19      	ldr	r2, [pc, #100]	; (dbf8 <handle_ansi+0x18c>)
    db94:	6811      	ldr	r1, [r2, #0]
    db96:	428b      	cmp	r3, r1
    db98:	d3e1      	bcc.n	db5e <handle_ansi+0xf2>
        end -= ansi_val;
    db9a:	b28a      	uxth	r2, r1
    db9c:	1a9b      	subs	r3, r3, r2
    db9e:	4818      	ldr	r0, [pc, #96]	; (dc00 <handle_ansi+0x194>)
    dba0:	8003      	strh	r3, [r0, #0]
        cur += ansi_val;
    dba2:	4b19      	ldr	r3, [pc, #100]	; (dc08 <handle_ansi+0x19c>)
    dba4:	8818      	ldrh	r0, [r3, #0]
    dba6:	4402      	add	r2, r0
    dba8:	801a      	strh	r2, [r3, #0]
    console_printf("\x1b[%uC", count);
    dbaa:	4816      	ldr	r0, [pc, #88]	; (dc04 <handle_ansi+0x198>)
    dbac:	f000 fa14 	bl	dfd8 <console_printf>
}
    dbb0:	e7d5      	b.n	db5e <handle_ansi+0xf2>
        if (!cur) {
    dbb2:	4b15      	ldr	r3, [pc, #84]	; (dc08 <handle_ansi+0x19c>)
    dbb4:	8819      	ldrh	r1, [r3, #0]
    dbb6:	2900      	cmp	r1, #0
    dbb8:	d0d1      	beq.n	db5e <handle_ansi+0xf2>
    console_printf("\x1b[%uD", count);
    dbba:	4814      	ldr	r0, [pc, #80]	; (dc0c <handle_ansi+0x1a0>)
    dbbc:	f000 fa0c 	bl	dfd8 <console_printf>
        end += cur;
    dbc0:	490f      	ldr	r1, [pc, #60]	; (dc00 <handle_ansi+0x194>)
    dbc2:	4a11      	ldr	r2, [pc, #68]	; (dc08 <handle_ansi+0x19c>)
    dbc4:	880b      	ldrh	r3, [r1, #0]
    dbc6:	8810      	ldrh	r0, [r2, #0]
    dbc8:	4403      	add	r3, r0
    dbca:	800b      	strh	r3, [r1, #0]
        cur = 0;
    dbcc:	2300      	movs	r3, #0
    dbce:	8013      	strh	r3, [r2, #0]
        break;
    dbd0:	e7c5      	b.n	db5e <handle_ansi+0xf2>
        if (!end) {
    dbd2:	4b0b      	ldr	r3, [pc, #44]	; (dc00 <handle_ansi+0x194>)
    dbd4:	8819      	ldrh	r1, [r3, #0]
    dbd6:	2900      	cmp	r1, #0
    dbd8:	d0c1      	beq.n	db5e <handle_ansi+0xf2>
    console_printf("\x1b[%uC", count);
    dbda:	480a      	ldr	r0, [pc, #40]	; (dc04 <handle_ansi+0x198>)
    dbdc:	f000 f9fc 	bl	dfd8 <console_printf>
        cur += end;
    dbe0:	4909      	ldr	r1, [pc, #36]	; (dc08 <handle_ansi+0x19c>)
    dbe2:	4a07      	ldr	r2, [pc, #28]	; (dc00 <handle_ansi+0x194>)
    dbe4:	880b      	ldrh	r3, [r1, #0]
    dbe6:	8810      	ldrh	r0, [r2, #0]
    dbe8:	4403      	add	r3, r0
    dbea:	800b      	strh	r3, [r1, #0]
        end = 0;
    dbec:	2300      	movs	r3, #0
    dbee:	8013      	strh	r3, [r2, #0]
        break;
    dbf0:	e7b5      	b.n	db5e <handle_ansi+0xf2>
    dbf2:	bf00      	nop
    dbf4:	20005d20 	.word	0x20005d20
    dbf8:	200054c4 	.word	0x200054c4
    dbfc:	200054c8 	.word	0x200054c8
    dc00:	20005d1e 	.word	0x20005d1e
    dc04:	00021ca8 	.word	0x00021ca8
    dc08:	20005d1c 	.word	0x20005d1c
    dc0c:	00021ca0 	.word	0x00021ca0

0000dc10 <console_handle_char>:


int
console_handle_char(uint8_t byte)
{
    dc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif
    static struct os_event *ev;
    static struct console_input *input;
    static char prev_endl = '\0';

    if (!lines_queue) {
    dc14:	4b8a      	ldr	r3, [pc, #552]	; (de40 <console_handle_char+0x230>)
    dc16:	681b      	ldr	r3, [r3, #0]
    dc18:	2b00      	cmp	r3, #0
    dc1a:	f000 8161 	beq.w	dee0 <console_handle_char+0x2d0>
    dc1e:	4604      	mov	r4, r0
        return 0;
    }

    if (!ev) {
    dc20:	4b88      	ldr	r3, [pc, #544]	; (de44 <console_handle_char+0x234>)
    dc22:	681b      	ldr	r3, [r3, #0]
    dc24:	b1cb      	cbz	r3, dc5a <console_handle_char+0x4a>
            return -1;
        }
        input = ev->ev_arg;
    }

    if (handle_nlip(byte))  {
    dc26:	4620      	mov	r0, r4
    dc28:	f7ff fca6 	bl	d578 <handle_nlip>
    dc2c:	4605      	mov	r5, r0
    dc2e:	2800      	cmp	r0, #0
    dc30:	d064      	beq.n	dcfc <console_handle_char+0xec>
        if (byte == '\n') {
    dc32:	2c0a      	cmp	r4, #10
    dc34:	d021      	beq.n	dc7a <console_handle_char+0x6a>
            input = NULL;
            ev = NULL;
            console_echo(1);
            return 0;
        /* Ignore characters if there's no more buffer space */
        } else if (byte == CONSOLE_NLIP_PKT_START2) {
    dc36:	2c09      	cmp	r4, #9
    dc38:	d044      	beq.n	dcc4 <console_handle_char+0xb4>
            /* Disable echo to not flood the UART */
            console_echo(0);
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1, end);
        } else if (byte == CONSOLE_NLIP_DATA_START2) {
    dc3a:	2c14      	cmp	r4, #20
    dc3c:	d050      	beq.n	dce0 <console_handle_char+0xd0>
            /* Disable echo to not flood the UART */
            console_echo(0);
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1, end);
        }

        insert_char(&input->line[cur], byte, end);
    dc3e:	4b82      	ldr	r3, [pc, #520]	; (de48 <console_handle_char+0x238>)
    dc40:	6818      	ldr	r0, [r3, #0]
    dc42:	4b82      	ldr	r3, [pc, #520]	; (de4c <console_handle_char+0x23c>)
    dc44:	881b      	ldrh	r3, [r3, #0]
    dc46:	4a82      	ldr	r2, [pc, #520]	; (de50 <console_handle_char+0x240>)
    dc48:	8812      	ldrh	r2, [r2, #0]
    dc4a:	4621      	mov	r1, r4
    dc4c:	4418      	add	r0, r3
    dc4e:	f7ff fe1d 	bl	d88c <insert_char>

        return 0;
    dc52:	2500      	movs	r5, #0

    if (!g_console_ignore_non_nlip) {
        insert_char(&input->line[cur], byte, end);
    }
    return 0;
}
    dc54:	4628      	mov	r0, r5
    dc56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ev = os_eventq_get_no_wait(&avail_queue);
    dc5a:	487e      	ldr	r0, [pc, #504]	; (de54 <console_handle_char+0x244>)
    dc5c:	f7fb fcd4 	bl	9608 <os_eventq_get_no_wait>
    dc60:	4b78      	ldr	r3, [pc, #480]	; (de44 <console_handle_char+0x234>)
    dc62:	6018      	str	r0, [r3, #0]
        if (!ev) {
    dc64:	b118      	cbz	r0, dc6e <console_handle_char+0x5e>
        input = ev->ev_arg;
    dc66:	6882      	ldr	r2, [r0, #8]
    dc68:	4b77      	ldr	r3, [pc, #476]	; (de48 <console_handle_char+0x238>)
    dc6a:	601a      	str	r2, [r3, #0]
    dc6c:	e7db      	b.n	dc26 <console_handle_char+0x16>
            rx_stalled = true;
    dc6e:	4b7a      	ldr	r3, [pc, #488]	; (de58 <console_handle_char+0x248>)
    dc70:	2201      	movs	r2, #1
    dc72:	701a      	strb	r2, [r3, #0]
            return -1;
    dc74:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    dc78:	e7ec      	b.n	dc54 <console_handle_char+0x44>
            insert_char(&input->line[cur], byte, end);
    dc7a:	4f73      	ldr	r7, [pc, #460]	; (de48 <console_handle_char+0x238>)
    dc7c:	6838      	ldr	r0, [r7, #0]
    dc7e:	4d73      	ldr	r5, [pc, #460]	; (de4c <console_handle_char+0x23c>)
    dc80:	882b      	ldrh	r3, [r5, #0]
    dc82:	4e73      	ldr	r6, [pc, #460]	; (de50 <console_handle_char+0x240>)
    dc84:	8832      	ldrh	r2, [r6, #0]
    dc86:	4621      	mov	r1, r4
    dc88:	4418      	add	r0, r3
    dc8a:	f7ff fdff 	bl	d88c <insert_char>
            input->line[cur] = '\0';
    dc8e:	683a      	ldr	r2, [r7, #0]
    dc90:	882b      	ldrh	r3, [r5, #0]
    dc92:	2400      	movs	r4, #0
    dc94:	54d4      	strb	r4, [r2, r3]
            cur = 0;
    dc96:	802c      	strh	r4, [r5, #0]
            end = 0;
    dc98:	8034      	strh	r4, [r6, #0]
            os_eventq_put(lines_queue, ev);
    dc9a:	4b6a      	ldr	r3, [pc, #424]	; (de44 <console_handle_char+0x234>)
    dc9c:	6819      	ldr	r1, [r3, #0]
    dc9e:	4b68      	ldr	r3, [pc, #416]	; (de40 <console_handle_char+0x230>)
    dca0:	6818      	ldr	r0, [r3, #0]
    dca2:	f7fb fc7d 	bl	95a0 <os_eventq_put>
            nlip_state = 0;
    dca6:	4b6d      	ldr	r3, [pc, #436]	; (de5c <console_handle_char+0x24c>)
    dca8:	601c      	str	r4, [r3, #0]
            if (console_compat_rx_cb) {
    dcaa:	4b6d      	ldr	r3, [pc, #436]	; (de60 <console_handle_char+0x250>)
    dcac:	681b      	ldr	r3, [r3, #0]
    dcae:	b103      	cbz	r3, dcb2 <console_handle_char+0xa2>
                console_compat_rx_cb();
    dcb0:	4798      	blx	r3
            input = NULL;
    dcb2:	2500      	movs	r5, #0
    dcb4:	4b64      	ldr	r3, [pc, #400]	; (de48 <console_handle_char+0x238>)
    dcb6:	601d      	str	r5, [r3, #0]
            ev = NULL;
    dcb8:	4b62      	ldr	r3, [pc, #392]	; (de44 <console_handle_char+0x234>)
    dcba:	601d      	str	r5, [r3, #0]
            console_echo(1);
    dcbc:	2001      	movs	r0, #1
    dcbe:	f7ff fd5b 	bl	d778 <console_echo>
            return 0;
    dcc2:	e7c7      	b.n	dc54 <console_handle_char+0x44>
            console_echo(0);
    dcc4:	2000      	movs	r0, #0
    dcc6:	f7ff fd57 	bl	d778 <console_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1, end);
    dcca:	4b5f      	ldr	r3, [pc, #380]	; (de48 <console_handle_char+0x238>)
    dccc:	6818      	ldr	r0, [r3, #0]
    dcce:	4b5f      	ldr	r3, [pc, #380]	; (de4c <console_handle_char+0x23c>)
    dcd0:	881b      	ldrh	r3, [r3, #0]
    dcd2:	4a5f      	ldr	r2, [pc, #380]	; (de50 <console_handle_char+0x240>)
    dcd4:	8812      	ldrh	r2, [r2, #0]
    dcd6:	2106      	movs	r1, #6
    dcd8:	4418      	add	r0, r3
    dcda:	f7ff fdd7 	bl	d88c <insert_char>
    dcde:	e7ae      	b.n	dc3e <console_handle_char+0x2e>
            console_echo(0);
    dce0:	2000      	movs	r0, #0
    dce2:	f7ff fd49 	bl	d778 <console_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1, end);
    dce6:	4b58      	ldr	r3, [pc, #352]	; (de48 <console_handle_char+0x238>)
    dce8:	6818      	ldr	r0, [r3, #0]
    dcea:	4b58      	ldr	r3, [pc, #352]	; (de4c <console_handle_char+0x23c>)
    dcec:	881b      	ldrh	r3, [r3, #0]
    dcee:	4a58      	ldr	r2, [pc, #352]	; (de50 <console_handle_char+0x240>)
    dcf0:	8812      	ldrh	r2, [r2, #0]
    dcf2:	2104      	movs	r1, #4
    dcf4:	4418      	add	r0, r3
    dcf6:	f7ff fdc9 	bl	d88c <insert_char>
    dcfa:	e7a0      	b.n	dc3e <console_handle_char+0x2e>
    if (esc_state & ESC_ANSI) {
    dcfc:	4b59      	ldr	r3, [pc, #356]	; (de64 <console_handle_char+0x254>)
    dcfe:	681b      	ldr	r3, [r3, #0]
    dd00:	f013 0602 	ands.w	r6, r3, #2
    dd04:	d009      	beq.n	dd1a <console_handle_char+0x10a>
        if (g_console_ignore_non_nlip) {
    dd06:	4b58      	ldr	r3, [pc, #352]	; (de68 <console_handle_char+0x258>)
    dd08:	781b      	ldrb	r3, [r3, #0]
    dd0a:	2b00      	cmp	r3, #0
    dd0c:	d1a2      	bne.n	dc54 <console_handle_char+0x44>
        handle_ansi(byte, input->line);
    dd0e:	4b4e      	ldr	r3, [pc, #312]	; (de48 <console_handle_char+0x238>)
    dd10:	6819      	ldr	r1, [r3, #0]
    dd12:	4620      	mov	r0, r4
    dd14:	f7ff feaa 	bl	da6c <handle_ansi>
        return 0;
    dd18:	e79c      	b.n	dc54 <console_handle_char+0x44>
    if (esc_state & ESC_ESC) {
    dd1a:	f013 0501 	ands.w	r5, r3, #1
    dd1e:	d01a      	beq.n	dd56 <console_handle_char+0x146>
        if (g_console_ignore_non_nlip) {
    dd20:	4a51      	ldr	r2, [pc, #324]	; (de68 <console_handle_char+0x258>)
    dd22:	7812      	ldrb	r2, [r2, #0]
    dd24:	b10a      	cbz	r2, dd2a <console_handle_char+0x11a>
            return 0;
    dd26:	4635      	mov	r5, r6
    dd28:	e794      	b.n	dc54 <console_handle_char+0x44>
        esc_state &= ~ESC_ESC;
    dd2a:	f023 0301 	bic.w	r3, r3, #1
    dd2e:	4a4d      	ldr	r2, [pc, #308]	; (de64 <console_handle_char+0x254>)
    dd30:	6013      	str	r3, [r2, #0]
        handle_ansi(byte, input->line);
    dd32:	4b45      	ldr	r3, [pc, #276]	; (de48 <console_handle_char+0x238>)
    dd34:	6819      	ldr	r1, [r3, #0]
    dd36:	4620      	mov	r0, r4
    dd38:	f7ff fe98 	bl	da6c <handle_ansi>
        switch (byte) {
    dd3c:	2c5b      	cmp	r4, #91	; 0x5b
    dd3e:	d001      	beq.n	dd44 <console_handle_char+0x134>
        return 0;
    dd40:	4635      	mov	r5, r6
    dd42:	e787      	b.n	dc54 <console_handle_char+0x44>
            esc_state |= ESC_ANSI;
    dd44:	4a47      	ldr	r2, [pc, #284]	; (de64 <console_handle_char+0x254>)
    dd46:	6813      	ldr	r3, [r2, #0]
    dd48:	f043 0102 	orr.w	r1, r3, #2
    dd4c:	6011      	str	r1, [r2, #0]
            esc_state |= ESC_ANSI_FIRST;
    dd4e:	f043 0306 	orr.w	r3, r3, #6
    dd52:	6013      	str	r3, [r2, #0]
            break;
    dd54:	e7f4      	b.n	dd40 <console_handle_char+0x130>
	    (__c >= '{' && __c <= '~');
}

__extern_inline int isprint(int __c)
{
	return (__c >= 0x20 && __c <= 0x7e);
    dd56:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
    dd5a:	2b5e      	cmp	r3, #94	; 0x5e
    dd5c:	d80f      	bhi.n	dd7e <console_handle_char+0x16e>
    if (!g_console_ignore_non_nlip) {
    dd5e:	4b42      	ldr	r3, [pc, #264]	; (de68 <console_handle_char+0x258>)
    dd60:	781b      	ldrb	r3, [r3, #0]
    dd62:	2b00      	cmp	r3, #0
    dd64:	f47f af76 	bne.w	dc54 <console_handle_char+0x44>
        insert_char(&input->line[cur], byte, end);
    dd68:	4b37      	ldr	r3, [pc, #220]	; (de48 <console_handle_char+0x238>)
    dd6a:	6818      	ldr	r0, [r3, #0]
    dd6c:	4b37      	ldr	r3, [pc, #220]	; (de4c <console_handle_char+0x23c>)
    dd6e:	881b      	ldrh	r3, [r3, #0]
    dd70:	4a37      	ldr	r2, [pc, #220]	; (de50 <console_handle_char+0x240>)
    dd72:	8812      	ldrh	r2, [r2, #0]
    dd74:	4621      	mov	r1, r4
    dd76:	4418      	add	r0, r3
    dd78:	f7ff fd88 	bl	d88c <insert_char>
    dd7c:	e76a      	b.n	dc54 <console_handle_char+0x44>
        handle_ansi(byte, input->line);
    dd7e:	4b32      	ldr	r3, [pc, #200]	; (de48 <console_handle_char+0x238>)
    dd80:	6819      	ldr	r1, [r3, #0]
    dd82:	4620      	mov	r0, r4
    dd84:	f7ff fe72 	bl	da6c <handle_ansi>
        switch (byte) {
    dd88:	2c1b      	cmp	r4, #27
    dd8a:	d812      	bhi.n	ddb2 <console_handle_char+0x1a2>
    dd8c:	2c04      	cmp	r4, #4
    dd8e:	d312      	bcc.n	ddb6 <console_handle_char+0x1a6>
    dd90:	1f23      	subs	r3, r4, #4
    dd92:	2b17      	cmp	r3, #23
    dd94:	d80f      	bhi.n	ddb6 <console_handle_char+0x1a6>
    dd96:	e8df f003 	tbb	[pc, r3]
    dd9a:	0e4d      	.short	0x0e4d
    dd9c:	8f6b0e47 	.word	0x8f6b0e47
    dda0:	180e0e18 	.word	0x180e0e18
    dda4:	0e0e0e0e 	.word	0x0e0e0e0e
    dda8:	0e0e0e0e 	.word	0x0e0e0e0e
    ddac:	0e0e0e0e 	.word	0x0e0e0e0e
    ddb0:	810e      	.short	0x810e
    ddb2:	2c7f      	cmp	r4, #127	; 0x7f
    ddb4:	d05c      	beq.n	de70 <console_handle_char+0x260>
            insert_char(&input->line[cur], byte, end);
    ddb6:	4b24      	ldr	r3, [pc, #144]	; (de48 <console_handle_char+0x238>)
    ddb8:	6818      	ldr	r0, [r3, #0]
    ddba:	4b24      	ldr	r3, [pc, #144]	; (de4c <console_handle_char+0x23c>)
    ddbc:	881b      	ldrh	r3, [r3, #0]
    ddbe:	4a24      	ldr	r2, [pc, #144]	; (de50 <console_handle_char+0x240>)
    ddc0:	8812      	ldrh	r2, [r2, #0]
    ddc2:	4621      	mov	r1, r4
    ddc4:	4418      	add	r0, r3
    ddc6:	f7ff fd61 	bl	d88c <insert_char>
            if (byte == '\n' && prev_endl == '\r') {
    ddca:	2c0a      	cmp	r4, #10
    ddcc:	d103      	bne.n	ddd6 <console_handle_char+0x1c6>
    ddce:	4b27      	ldr	r3, [pc, #156]	; (de6c <console_handle_char+0x25c>)
    ddd0:	781b      	ldrb	r3, [r3, #0]
    ddd2:	2b0d      	cmp	r3, #13
    ddd4:	d06d      	beq.n	deb2 <console_handle_char+0x2a2>
            prev_endl = byte;
    ddd6:	4b25      	ldr	r3, [pc, #148]	; (de6c <console_handle_char+0x25c>)
    ddd8:	701c      	strb	r4, [r3, #0]
            input->line[cur + end] = '\0';
    ddda:	4e1b      	ldr	r6, [pc, #108]	; (de48 <console_handle_char+0x238>)
    dddc:	6832      	ldr	r2, [r6, #0]
    ddde:	f8df 806c 	ldr.w	r8, [pc, #108]	; de4c <console_handle_char+0x23c>
    dde2:	f8b8 3000 	ldrh.w	r3, [r8]
    dde6:	4f1a      	ldr	r7, [pc, #104]	; (de50 <console_handle_char+0x240>)
    dde8:	8839      	ldrh	r1, [r7, #0]
    ddea:	440b      	add	r3, r1
    ddec:	2400      	movs	r4, #0
    ddee:	54d4      	strb	r4, [r2, r3]
            console_out('\r');
    ddf0:	200d      	movs	r0, #13
    ddf2:	f7ff fcfb 	bl	d7ec <console_out>
            console_out('\n');
    ddf6:	200a      	movs	r0, #10
    ddf8:	f7ff fcf8 	bl	d7ec <console_out>
            cur = 0;
    ddfc:	f8a8 4000 	strh.w	r4, [r8]
            end = 0;
    de00:	803c      	strh	r4, [r7, #0]
            os_eventq_put(lines_queue, ev);
    de02:	4b10      	ldr	r3, [pc, #64]	; (de44 <console_handle_char+0x234>)
    de04:	6819      	ldr	r1, [r3, #0]
    de06:	4b0e      	ldr	r3, [pc, #56]	; (de40 <console_handle_char+0x230>)
    de08:	6818      	ldr	r0, [r3, #0]
    de0a:	f7fb fbc9 	bl	95a0 <os_eventq_put>
            console_hist_add(input->line);
    de0e:	6830      	ldr	r0, [r6, #0]
    de10:	f7ff fc52 	bl	d6b8 <console_hist_add>
            if (console_compat_rx_cb) {
    de14:	4b12      	ldr	r3, [pc, #72]	; (de60 <console_handle_char+0x250>)
    de16:	681b      	ldr	r3, [r3, #0]
    de18:	b103      	cbz	r3, de1c <console_handle_char+0x20c>
                console_compat_rx_cb();
    de1a:	4798      	blx	r3
            input = NULL;
    de1c:	2300      	movs	r3, #0
    de1e:	4a0a      	ldr	r2, [pc, #40]	; (de48 <console_handle_char+0x238>)
    de20:	6013      	str	r3, [r2, #0]
            ev = NULL;
    de22:	4a08      	ldr	r2, [pc, #32]	; (de44 <console_handle_char+0x234>)
    de24:	6013      	str	r3, [r2, #0]
            break;
    de26:	e715      	b.n	dc54 <console_handle_char+0x44>
            nlip_state |= NLIP_PKT_START1;
    de28:	4a0c      	ldr	r2, [pc, #48]	; (de5c <console_handle_char+0x24c>)
    de2a:	6813      	ldr	r3, [r2, #0]
    de2c:	f043 0301 	orr.w	r3, r3, #1
    de30:	6013      	str	r3, [r2, #0]
            break;
    de32:	e70f      	b.n	dc54 <console_handle_char+0x44>
            nlip_state |= NLIP_DATA_START1;
    de34:	4a09      	ldr	r2, [pc, #36]	; (de5c <console_handle_char+0x24c>)
    de36:	6813      	ldr	r3, [r2, #0]
    de38:	f043 0304 	orr.w	r3, r3, #4
    de3c:	6013      	str	r3, [r2, #0]
            break;
    de3e:	e709      	b.n	dc54 <console_handle_char+0x44>
    de40:	20005d30 	.word	0x20005d30
    de44:	20005d24 	.word	0x20005d24
    de48:	20005d2c 	.word	0x20005d2c
    de4c:	20005d1c 	.word	0x20005d1c
    de50:	20005d1e 	.word	0x20005d1e
    de54:	200054cc 	.word	0x200054cc
    de58:	20005d39 	.word	0x20005d39
    de5c:	20005d34 	.word	0x20005d34
    de60:	200054e0 	.word	0x200054e0
    de64:	20005d20 	.word	0x20005d20
    de68:	20005d28 	.word	0x20005d28
    de6c:	20005d38 	.word	0x20005d38
            if (g_console_ignore_non_nlip) {
    de70:	4b1c      	ldr	r3, [pc, #112]	; (dee4 <console_handle_char+0x2d4>)
    de72:	781b      	ldrb	r3, [r3, #0]
    de74:	2b00      	cmp	r3, #0
    de76:	f47f aeed 	bne.w	dc54 <console_handle_char+0x44>
            if (cur > 0) {
    de7a:	4b1b      	ldr	r3, [pc, #108]	; (dee8 <console_handle_char+0x2d8>)
    de7c:	881b      	ldrh	r3, [r3, #0]
    de7e:	2b00      	cmp	r3, #0
    de80:	f43f aee8 	beq.w	dc54 <console_handle_char+0x44>
                del_char(&input->line[--cur], end);
    de84:	4a19      	ldr	r2, [pc, #100]	; (deec <console_handle_char+0x2dc>)
    de86:	6810      	ldr	r0, [r2, #0]
    de88:	3b01      	subs	r3, #1
    de8a:	b29b      	uxth	r3, r3
    de8c:	4a16      	ldr	r2, [pc, #88]	; (dee8 <console_handle_char+0x2d8>)
    de8e:	8013      	strh	r3, [r2, #0]
    de90:	4a17      	ldr	r2, [pc, #92]	; (def0 <console_handle_char+0x2e0>)
    de92:	8811      	ldrh	r1, [r2, #0]
    de94:	4418      	add	r0, r3
    de96:	f7ff fd6f 	bl	d978 <del_char>
    de9a:	e6db      	b.n	dc54 <console_handle_char+0x44>
            if (g_console_ignore_non_nlip) {
    de9c:	4b11      	ldr	r3, [pc, #68]	; (dee4 <console_handle_char+0x2d4>)
    de9e:	781b      	ldrb	r3, [r3, #0]
    dea0:	2b00      	cmp	r3, #0
    dea2:	f47f aed7 	bne.w	dc54 <console_handle_char+0x44>
            esc_state |= ESC_ESC;
    dea6:	4a13      	ldr	r2, [pc, #76]	; (def4 <console_handle_char+0x2e4>)
    dea8:	6813      	ldr	r3, [r2, #0]
    deaa:	f043 0301 	orr.w	r3, r3, #1
    deae:	6013      	str	r3, [r2, #0]
            break;
    deb0:	e6d0      	b.n	dc54 <console_handle_char+0x44>
                prev_endl = byte;
    deb2:	4b11      	ldr	r3, [pc, #68]	; (def8 <console_handle_char+0x2e8>)
    deb4:	701c      	strb	r4, [r3, #0]
                break;
    deb6:	e6cd      	b.n	dc54 <console_handle_char+0x44>
            if (g_console_ignore_non_nlip) {
    deb8:	4b0a      	ldr	r3, [pc, #40]	; (dee4 <console_handle_char+0x2d4>)
    deba:	781b      	ldrb	r3, [r3, #0]
    debc:	2b00      	cmp	r3, #0
    debe:	f47f aec9 	bne.w	dc54 <console_handle_char+0x44>
            if (completion && !end) {
    dec2:	4b0e      	ldr	r3, [pc, #56]	; (defc <console_handle_char+0x2ec>)
    dec4:	681b      	ldr	r3, [r3, #0]
    dec6:	2b00      	cmp	r3, #0
    dec8:	f43f aec4 	beq.w	dc54 <console_handle_char+0x44>
    decc:	4a08      	ldr	r2, [pc, #32]	; (def0 <console_handle_char+0x2e0>)
    dece:	8812      	ldrh	r2, [r2, #0]
    ded0:	2a00      	cmp	r2, #0
    ded2:	f47f aebf 	bne.w	dc54 <console_handle_char+0x44>
                completion(input->line, console_append_char);
    ded6:	490a      	ldr	r1, [pc, #40]	; (df00 <console_handle_char+0x2f0>)
    ded8:	4a04      	ldr	r2, [pc, #16]	; (deec <console_handle_char+0x2dc>)
    deda:	6810      	ldr	r0, [r2, #0]
    dedc:	4798      	blx	r3
        return 0;
    dede:	e6b9      	b.n	dc54 <console_handle_char+0x44>
        return 0;
    dee0:	2500      	movs	r5, #0
    dee2:	e6b7      	b.n	dc54 <console_handle_char+0x44>
    dee4:	20005d28 	.word	0x20005d28
    dee8:	20005d1c 	.word	0x20005d1c
    deec:	20005d2c 	.word	0x20005d2c
    def0:	20005d1e 	.word	0x20005d1e
    def4:	20005d20 	.word	0x20005d20
    def8:	20005d38 	.word	0x20005d38
    defc:	200054dc 	.word	0x200054dc
    df00:	0000d80d 	.word	0x0000d80d

0000df04 <console_is_init>:

int
console_is_init(void)
{
    df04:	b508      	push	{r3, lr}
#if MYNEWT_VAL(CONSOLE_UART)
    return uart_console_is_init();
    df06:	f000 f9b9 	bl	e27c <uart_console_is_init>
#endif
#if MYNEWT_VAL(CONSOLE_BLE_MONITOR)
    return ble_monitor_console_is_init();
#endif
    return 0;
}
    df0a:	bd08      	pop	{r3, pc}

0000df0c <console_line_queue_set>:

void
console_line_queue_set(struct os_eventq *evq)
{
    lines_queue = evq;
    df0c:	4b01      	ldr	r3, [pc, #4]	; (df14 <console_line_queue_set+0x8>)
    df0e:	6018      	str	r0, [r3, #0]
}
    df10:	4770      	bx	lr
    df12:	bf00      	nop
    df14:	20005d30 	.word	0x20005d30

0000df18 <console_line_event_put>:

void
console_line_event_put(struct os_event *ev)
{
    df18:	b508      	push	{r3, lr}
    df1a:	4601      	mov	r1, r0
    os_eventq_put(&avail_queue, ev);
    df1c:	4806      	ldr	r0, [pc, #24]	; (df38 <console_line_event_put+0x20>)
    df1e:	f7fb fb3f 	bl	95a0 <os_eventq_put>

    if (rx_stalled) {
    df22:	4b06      	ldr	r3, [pc, #24]	; (df3c <console_line_event_put+0x24>)
    df24:	781b      	ldrb	r3, [r3, #0]
    df26:	b903      	cbnz	r3, df2a <console_line_event_put+0x12>
        rx_stalled = false;
        console_rx_restart();
    }
}
    df28:	bd08      	pop	{r3, pc}
        rx_stalled = false;
    df2a:	4b04      	ldr	r3, [pc, #16]	; (df3c <console_line_event_put+0x24>)
    df2c:	2200      	movs	r2, #0
    df2e:	701a      	strb	r2, [r3, #0]
        console_rx_restart();
    df30:	f000 f99a 	bl	e268 <console_rx_restart>
}
    df34:	e7f8      	b.n	df28 <console_line_event_put+0x10>
    df36:	bf00      	nop
    df38:	200054cc 	.word	0x200054cc
    df3c:	20005d39 	.word	0x20005d39

0000df40 <console_set_completion_cb>:

void
console_set_completion_cb(completion_cb cb)
{
    completion = cb;
    df40:	4b01      	ldr	r3, [pc, #4]	; (df48 <console_set_completion_cb+0x8>)
    df42:	6018      	str	r0, [r3, #0]
}
    df44:	4770      	bx	lr
    df46:	bf00      	nop
    df48:	200054dc 	.word	0x200054dc

0000df4c <console_pkg_init>:
}
#endif

void
console_pkg_init(void)
{
    df4c:	b510      	push	{r4, lr}
    df4e:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    df50:	4b0e      	ldr	r3, [pc, #56]	; (df8c <console_pkg_init+0x40>)
    df52:	781b      	ldrb	r3, [r3, #0]
    df54:	b1a3      	cbz	r3, df80 <console_pkg_init+0x34>

    os_eventq_init(&avail_queue);
    df56:	480e      	ldr	r0, [pc, #56]	; (df90 <console_pkg_init+0x44>)
    df58:	f7fb fb14 	bl	9584 <os_eventq_init>
    os_mutex_init(&console_write_lock);
    df5c:	480d      	ldr	r0, [pc, #52]	; (df94 <console_pkg_init+0x48>)
    df5e:	f7fc fcf7 	bl	a950 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_HISTORY_SIZE) > 0
    console_hist_init();
    df62:	f7ff fbe9 	bl	d738 <console_hist_init>
#endif

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
    df66:	f000 f991 	bl	e28c <uart_console_init>
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
    df6a:	b138      	cbz	r0, df7c <console_pkg_init+0x30>
    df6c:	2000      	movs	r0, #0
    df6e:	9000      	str	r0, [sp, #0]
    df70:	4b09      	ldr	r3, [pc, #36]	; (df98 <console_pkg_init+0x4c>)
    df72:	681c      	ldr	r4, [r3, #0]
    df74:	4603      	mov	r3, r0
    df76:	4602      	mov	r2, r0
    df78:	4601      	mov	r1, r0
    df7a:	47a0      	blx	r4
}
    df7c:	b002      	add	sp, #8
    df7e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    df80:	461a      	mov	r2, r3
    df82:	4619      	mov	r1, r3
    df84:	4618      	mov	r0, r3
    df86:	f7fa ffe5 	bl	8f54 <__assert_func>
    df8a:	bf00      	nop
    df8c:	200065ac 	.word	0x200065ac
    df90:	200054cc 	.word	0x200054cc
    df94:	20005d10 	.word	0x20005d10
    df98:	200001ec 	.word	0x200001ec

0000df9c <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
    df9c:	b570      	push	{r4, r5, r6, lr}
    df9e:	4604      	mov	r4, r0
    dfa0:	460d      	mov	r5, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
    dfa2:	f000 f833 	bl	e00c <console_get_ticks>
    dfa6:	b160      	cbz	r0, dfc2 <console_vprintf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
    dfa8:	4b09      	ldr	r3, [pc, #36]	; (dfd0 <console_vprintf+0x34>)
    dfaa:	681b      	ldr	r3, [r3, #0]
    dfac:	b10b      	cbz	r3, dfb2 <console_vprintf+0x16>
    num_chars = 0;
    dfae:	2600      	movs	r6, #0
    dfb0:	e008      	b.n	dfc4 <console_vprintf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
    dfb2:	f7fc f8b3 	bl	a11c <os_time_get>
    dfb6:	4601      	mov	r1, r0
    dfb8:	4806      	ldr	r0, [pc, #24]	; (dfd4 <console_vprintf+0x38>)
    dfba:	f7fe fc7b 	bl	c8b4 <printf>
    dfbe:	4606      	mov	r6, r0
    dfc0:	e000      	b.n	dfc4 <console_vprintf+0x28>
    num_chars = 0;
    dfc2:	2600      	movs	r6, #0
        }
    }

    num_chars += vprintf(fmt, ap);
    dfc4:	4629      	mov	r1, r5
    dfc6:	4620      	mov	r0, r4
    dfc8:	f00c fd12 	bl	1a9f0 <vprintf>

    return num_chars;
}
    dfcc:	4430      	add	r0, r6
    dfce:	bd70      	pop	{r4, r5, r6, pc}
    dfd0:	20005d0c 	.word	0x20005d0c
    dfd4:	00021cb0 	.word	0x00021cb0

0000dfd8 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
    dfd8:	b40f      	push	{r0, r1, r2, r3}
    dfda:	b500      	push	{lr}
    dfdc:	b083      	sub	sp, #12
    dfde:	a904      	add	r1, sp, #16
    dfe0:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
    dfe4:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
    dfe6:	f7ff ffd9 	bl	df9c <console_vprintf>
    va_end(args);

    return num_chars;
}
    dfea:	b003      	add	sp, #12
    dfec:	f85d eb04 	ldr.w	lr, [sp], #4
    dff0:	b004      	add	sp, #16
    dff2:	4770      	bx	lr

0000dff4 <console_no_ticks>:

/* Turn OS Ticks off */
void
console_no_ticks(void)
{
    do_ticks = 0;
    dff4:	4b01      	ldr	r3, [pc, #4]	; (dffc <console_no_ticks+0x8>)
    dff6:	2200      	movs	r2, #0
    dff8:	701a      	strb	r2, [r3, #0]
}
    dffa:	4770      	bx	lr
    dffc:	200001b8 	.word	0x200001b8

0000e000 <console_yes_ticks>:

/* Turn OS Ticks on */
void
console_yes_ticks(void)
{
    do_ticks = 1;
    e000:	4b01      	ldr	r3, [pc, #4]	; (e008 <console_yes_ticks+0x8>)
    e002:	2201      	movs	r2, #1
    e004:	701a      	strb	r2, [r3, #0]
}
    e006:	4770      	bx	lr
    e008:	200001b8 	.word	0x200001b8

0000e00c <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
    e00c:	4b01      	ldr	r3, [pc, #4]	; (e014 <console_get_ticks+0x8>)
    e00e:	7818      	ldrb	r0, [r3, #0]
    e010:	4770      	bx	lr
    e012:	bf00      	nop
    e014:	200001b8 	.word	0x200001b8

0000e018 <uart_blocking_tx>:
 *
 * @param dev		Uart device in question
 */
static inline void
uart_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
    e018:	b508      	push	{r3, lr}
    dev->ud_funcs.uf_blocking_tx(dev, byte);
    e01a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    e01c:	4798      	blx	r3
}
    e01e:	bd08      	pop	{r3, pc}

0000e020 <uart_console_ring_add_char>:
}

static void
uart_console_ring_add_char(struct console_ring *cr, char ch)
{
    cr->buf[cr->head] = ch;
    e020:	6842      	ldr	r2, [r0, #4]
    e022:	7803      	ldrb	r3, [r0, #0]
    e024:	54d1      	strb	r1, [r2, r3]
    cr->head = inc_and_wrap(cr->head, cr->size);
    e026:	7803      	ldrb	r3, [r0, #0]
    e028:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
    e02a:	3301      	adds	r3, #1
    e02c:	3a01      	subs	r2, #1
    e02e:	4013      	ands	r3, r2
    cr->head = inc_and_wrap(cr->head, cr->size);
    e030:	7003      	strb	r3, [r0, #0]
}
    e032:	4770      	bx	lr

0000e034 <uart_console_ring_pull_char>:

static uint8_t
uart_console_ring_pull_char(struct console_ring *cr)
{
    e034:	4603      	mov	r3, r0
    uint8_t ch;

    ch = cr->buf[cr->tail];
    e036:	6841      	ldr	r1, [r0, #4]
    e038:	7842      	ldrb	r2, [r0, #1]
    e03a:	5c88      	ldrb	r0, [r1, r2]
    cr->tail = inc_and_wrap(cr->tail, cr->size);
    e03c:	8859      	ldrh	r1, [r3, #2]
    return (i + 1) & (max - 1);
    e03e:	3201      	adds	r2, #1
    e040:	3901      	subs	r1, #1
    e042:	400a      	ands	r2, r1
    cr->tail = inc_and_wrap(cr->tail, cr->size);
    e044:	705a      	strb	r2, [r3, #1]
    return ch;
}
    e046:	4770      	bx	lr

0000e048 <uart_console_ring_is_full>:

static bool
uart_console_ring_is_full(const struct console_ring *cr)
{
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
    e048:	7803      	ldrb	r3, [r0, #0]
    e04a:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
    e04c:	3301      	adds	r3, #1
    e04e:	3a01      	subs	r2, #1
    e050:	4013      	ands	r3, r2
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
    e052:	7840      	ldrb	r0, [r0, #1]
}
    e054:	4298      	cmp	r0, r3
    e056:	bf14      	ite	ne
    e058:	2000      	movne	r0, #0
    e05a:	2001      	moveq	r0, #1
    e05c:	4770      	bx	lr

0000e05e <uart_console_ring_is_empty>:

static bool
uart_console_ring_is_empty(const struct console_ring *cr)
{
    return cr->head == cr->tail;
    e05e:	7802      	ldrb	r2, [r0, #0]
    e060:	7840      	ldrb	r0, [r0, #1]
}
    e062:	4282      	cmp	r2, r0
    e064:	bf14      	ite	ne
    e066:	2000      	movne	r0, #0
    e068:	2001      	moveq	r0, #1
    e06a:	4770      	bx	lr

0000e06c <uart_console_tx_flush>:
/*
 * Flush cnt characters from console output queue.
 */
static void
uart_console_tx_flush(int cnt)
{
    e06c:	b538      	push	{r3, r4, r5, lr}
    e06e:	4605      	mov	r5, r0
    int i;
    uint8_t byte;

    for (i = 0; i < cnt; i++) {
    e070:	2400      	movs	r4, #0
    e072:	e008      	b.n	e086 <uart_console_tx_flush+0x1a>
        if (uart_console_ring_is_empty(&cr_tx)) {
            break;
        }
        byte = uart_console_ring_pull_char(&cr_tx);
    e074:	4808      	ldr	r0, [pc, #32]	; (e098 <uart_console_tx_flush+0x2c>)
    e076:	f7ff ffdd 	bl	e034 <uart_console_ring_pull_char>
    e07a:	4601      	mov	r1, r0
        uart_blocking_tx(uart_dev, byte);
    e07c:	4b07      	ldr	r3, [pc, #28]	; (e09c <uart_console_tx_flush+0x30>)
    e07e:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_blocking_tx(dev, byte);
    e080:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    e082:	4790      	blx	r2
    for (i = 0; i < cnt; i++) {
    e084:	3401      	adds	r4, #1
    e086:	42ac      	cmp	r4, r5
    e088:	da04      	bge.n	e094 <uart_console_tx_flush+0x28>
        if (uart_console_ring_is_empty(&cr_tx)) {
    e08a:	4803      	ldr	r0, [pc, #12]	; (e098 <uart_console_tx_flush+0x2c>)
    e08c:	f7ff ffe7 	bl	e05e <uart_console_ring_is_empty>
    e090:	2800      	cmp	r0, #0
    e092:	d0ef      	beq.n	e074 <uart_console_tx_flush+0x8>
    }
}
    e094:	bd38      	pop	{r3, r4, r5, pc}
    e096:	bf00      	nop
    e098:	20005d64 	.word	0x20005d64
    e09c:	20006180 	.word	0x20006180

0000e0a0 <uart_console_tx_char>:
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 * Characters sent only in blocking mode.
 */
static int
uart_console_tx_char(void *arg)
{
    e0a0:	b508      	push	{r3, lr}
    if (uart_console_ring_is_empty(&cr_tx)) {
    e0a2:	4805      	ldr	r0, [pc, #20]	; (e0b8 <uart_console_tx_char+0x18>)
    e0a4:	f7ff ffdb 	bl	e05e <uart_console_ring_is_empty>
    e0a8:	b918      	cbnz	r0, e0b2 <uart_console_tx_char+0x12>
        return -1;
    }
    return uart_console_ring_pull_char(&cr_tx);
    e0aa:	4803      	ldr	r0, [pc, #12]	; (e0b8 <uart_console_tx_char+0x18>)
    e0ac:	f7ff ffc2 	bl	e034 <uart_console_ring_pull_char>
}
    e0b0:	bd08      	pop	{r3, pc}
        return -1;
    e0b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e0b6:	e7fb      	b.n	e0b0 <uart_console_tx_char+0x10>
    e0b8:	20005d64 	.word	0x20005d64

0000e0bc <uart_console_queue_char>:
    if (((uart_dev->ud_dev.od_flags & OS_DEV_F_STATUS_OPEN) == 0) ||
    e0bc:	7ec3      	ldrb	r3, [r0, #27]
    e0be:	f003 0306 	and.w	r3, r3, #6
    e0c2:	2b02      	cmp	r3, #2
    e0c4:	d000      	beq.n	e0c8 <uart_console_queue_char+0xc>
    e0c6:	4770      	bx	lr
{
    e0c8:	b570      	push	{r4, r5, r6, lr}
    e0ca:	4605      	mov	r5, r0
    e0cc:	460e      	mov	r6, r1
    OS_ENTER_CRITICAL(sr);
    e0ce:	f7fc f94b 	bl	a368 <os_arch_save_sr>
    e0d2:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
    e0d4:	e002      	b.n	e0dc <uart_console_queue_char+0x20>
        OS_ENTER_CRITICAL(sr);
    e0d6:	f7fc f947 	bl	a368 <os_arch_save_sr>
    e0da:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
    e0dc:	480c      	ldr	r0, [pc, #48]	; (e110 <uart_console_queue_char+0x54>)
    e0de:	f7ff ffb3 	bl	e048 <uart_console_ring_is_full>
    e0e2:	b168      	cbz	r0, e100 <uart_console_queue_char+0x44>
    dev->ud_funcs.uf_start_tx(dev);
    e0e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e0e6:	4628      	mov	r0, r5
    e0e8:	4798      	blx	r3
        OS_EXIT_CRITICAL(sr);
    e0ea:	4620      	mov	r0, r4
    e0ec:	f7fc f942 	bl	a374 <os_arch_restore_sr>
        if (os_started()) {
    e0f0:	f7fa ffea 	bl	90c8 <os_started>
    e0f4:	2800      	cmp	r0, #0
    e0f6:	d0ee      	beq.n	e0d6 <uart_console_queue_char+0x1a>
            os_time_delay(1);
    e0f8:	2001      	movs	r0, #1
    e0fa:	f7fc f837 	bl	a16c <os_time_delay>
    e0fe:	e7ea      	b.n	e0d6 <uart_console_queue_char+0x1a>
    uart_console_ring_add_char(&cr_tx, ch);
    e100:	4631      	mov	r1, r6
    e102:	4803      	ldr	r0, [pc, #12]	; (e110 <uart_console_queue_char+0x54>)
    e104:	f7ff ff8c 	bl	e020 <uart_console_ring_add_char>
    OS_EXIT_CRITICAL(sr);
    e108:	4620      	mov	r0, r4
    e10a:	f7fc f933 	bl	a374 <os_arch_restore_sr>
}
    e10e:	bd70      	pop	{r4, r5, r6, pc}
    e110:	20005d64 	.word	0x20005d64

0000e114 <uart_console_rx_char>:
/*
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 */
static int
uart_console_rx_char(void *arg, uint8_t byte)
{
    e114:	b510      	push	{r4, lr}
    e116:	460c      	mov	r4, r1
#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    if (uart_console_ring_is_full(&cr_rx)) {
    e118:	480c      	ldr	r0, [pc, #48]	; (e14c <uart_console_rx_char+0x38>)
    e11a:	f7ff ff95 	bl	e048 <uart_console_ring_is_full>
    e11e:	b940      	cbnz	r0, e132 <uart_console_rx_char+0x1e>
        uart_console_rx_stalled = true;
        return -1;
    }

    uart_console_ring_add_char(&cr_rx, byte);
    e120:	4621      	mov	r1, r4
    e122:	480a      	ldr	r0, [pc, #40]	; (e14c <uart_console_rx_char+0x38>)
    e124:	f7ff ff7c 	bl	e020 <uart_console_ring_add_char>

    if (!rx_ev.ev_queued) {
    e128:	4b09      	ldr	r3, [pc, #36]	; (e150 <uart_console_rx_char+0x3c>)
    e12a:	781b      	ldrb	r3, [r3, #0]
    e12c:	b13b      	cbz	r3, e13e <uart_console_rx_char+0x2a>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
    }

    return 0;
    e12e:	2000      	movs	r0, #0
#else
    return console_handle_char(byte);
#endif
}
    e130:	bd10      	pop	{r4, pc}
        uart_console_rx_stalled = true;
    e132:	4b08      	ldr	r3, [pc, #32]	; (e154 <uart_console_rx_char+0x40>)
    e134:	2201      	movs	r2, #1
    e136:	701a      	strb	r2, [r3, #0]
        return -1;
    e138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e13c:	e7f8      	b.n	e130 <uart_console_rx_char+0x1c>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
    e13e:	f7fb fadd 	bl	96fc <os_eventq_dflt_get>
    e142:	4903      	ldr	r1, [pc, #12]	; (e150 <uart_console_rx_char+0x3c>)
    e144:	f7fb fa2c 	bl	95a0 <os_eventq_put>
    return 0;
    e148:	2000      	movs	r0, #0
    e14a:	e7f1      	b.n	e130 <uart_console_rx_char+0x1c>
    e14c:	20005d3c 	.word	0x20005d3c
    e150:	2000616c 	.word	0x2000616c
    e154:	2000617c 	.word	0x2000617c

0000e158 <uart_console_rx_char_event>:

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
static void
uart_console_rx_char_event(struct os_event *ev)
{
    e158:	b510      	push	{r4, lr}
    static int b = -1;
    int sr;
    int ret;

    /* We may have unhandled character - try it first */
    if (b >= 0) {
    e15a:	4b18      	ldr	r3, [pc, #96]	; (e1bc <uart_console_rx_char_event+0x64>)
    e15c:	6818      	ldr	r0, [r3, #0]
    e15e:	2800      	cmp	r0, #0
    e160:	db0b      	blt.n	e17a <uart_console_rx_char_event+0x22>
        ret = console_handle_char(b);
    e162:	b2c0      	uxtb	r0, r0
    e164:	f7ff fd54 	bl	dc10 <console_handle_char>
        if (ret < 0) {
    e168:	2800      	cmp	r0, #0
    e16a:	da06      	bge.n	e17a <uart_console_rx_char_event+0x22>
    e16c:	e024      	b.n	e1b8 <uart_console_rx_char_event+0x60>
        if (uart_console_rx_stalled) {
            uart_console_rx_stalled = false;
            uart_start_rx(uart_dev);
        }

        ret = console_handle_char(b);
    e16e:	4b13      	ldr	r3, [pc, #76]	; (e1bc <uart_console_rx_char_event+0x64>)
    e170:	7818      	ldrb	r0, [r3, #0]
    e172:	f7ff fd4d 	bl	dc10 <console_handle_char>
        if (ret < 0) {
    e176:	2800      	cmp	r0, #0
    e178:	db1e      	blt.n	e1b8 <uart_console_rx_char_event+0x60>
    while (!uart_console_ring_is_empty(&cr_rx)) {
    e17a:	4811      	ldr	r0, [pc, #68]	; (e1c0 <uart_console_rx_char_event+0x68>)
    e17c:	f7ff ff6f 	bl	e05e <uart_console_ring_is_empty>
    e180:	b9b0      	cbnz	r0, e1b0 <uart_console_rx_char_event+0x58>
        OS_ENTER_CRITICAL(sr);
    e182:	f7fc f8f1 	bl	a368 <os_arch_save_sr>
    e186:	4604      	mov	r4, r0
        b = uart_console_ring_pull_char(&cr_rx);
    e188:	480d      	ldr	r0, [pc, #52]	; (e1c0 <uart_console_rx_char_event+0x68>)
    e18a:	f7ff ff53 	bl	e034 <uart_console_ring_pull_char>
    e18e:	4b0b      	ldr	r3, [pc, #44]	; (e1bc <uart_console_rx_char_event+0x64>)
    e190:	6018      	str	r0, [r3, #0]
        OS_EXIT_CRITICAL(sr);
    e192:	4620      	mov	r0, r4
    e194:	f7fc f8ee 	bl	a374 <os_arch_restore_sr>
        if (uart_console_rx_stalled) {
    e198:	4b0a      	ldr	r3, [pc, #40]	; (e1c4 <uart_console_rx_char_event+0x6c>)
    e19a:	781b      	ldrb	r3, [r3, #0]
    e19c:	2b00      	cmp	r3, #0
    e19e:	d0e6      	beq.n	e16e <uart_console_rx_char_event+0x16>
            uart_console_rx_stalled = false;
    e1a0:	4b08      	ldr	r3, [pc, #32]	; (e1c4 <uart_console_rx_char_event+0x6c>)
    e1a2:	2200      	movs	r2, #0
    e1a4:	701a      	strb	r2, [r3, #0]
            uart_start_rx(uart_dev);
    e1a6:	4b08      	ldr	r3, [pc, #32]	; (e1c8 <uart_console_rx_char_event+0x70>)
    e1a8:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_start_rx(dev);
    e1aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
    e1ac:	4798      	blx	r3
}
    e1ae:	e7de      	b.n	e16e <uart_console_rx_char_event+0x16>
            return;
        }
    }

    b = -1;
    e1b0:	4b02      	ldr	r3, [pc, #8]	; (e1bc <uart_console_rx_char_event+0x64>)
    e1b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e1b6:	601a      	str	r2, [r3, #0]
}
    e1b8:	bd10      	pop	{r4, pc}
    e1ba:	bf00      	nop
    e1bc:	200001bc 	.word	0x200001bc
    e1c0:	20005d3c 	.word	0x20005d3c
    e1c4:	2000617c 	.word	0x2000617c
    e1c8:	20006180 	.word	0x20006180

0000e1cc <uart_console_blocking_mode>:
{
    e1cc:	b510      	push	{r4, lr}
    OS_ENTER_CRITICAL(sr);
    e1ce:	f7fc f8cb 	bl	a368 <os_arch_save_sr>
    e1d2:	4604      	mov	r4, r0
    if (write_char_cb) {
    e1d4:	4b06      	ldr	r3, [pc, #24]	; (e1f0 <uart_console_blocking_mode+0x24>)
    e1d6:	681b      	ldr	r3, [r3, #0]
    e1d8:	b133      	cbz	r3, e1e8 <uart_console_blocking_mode+0x1c>
        write_char_cb = uart_blocking_tx;
    e1da:	4b05      	ldr	r3, [pc, #20]	; (e1f0 <uart_console_blocking_mode+0x24>)
    e1dc:	4a05      	ldr	r2, [pc, #20]	; (e1f4 <uart_console_blocking_mode+0x28>)
    e1de:	601a      	str	r2, [r3, #0]
        uart_console_tx_flush(MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE));
    e1e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    e1e4:	f7ff ff42 	bl	e06c <uart_console_tx_flush>
    OS_EXIT_CRITICAL(sr);
    e1e8:	4620      	mov	r0, r4
    e1ea:	f7fc f8c3 	bl	a374 <os_arch_restore_sr>
}
    e1ee:	bd10      	pop	{r4, pc}
    e1f0:	20006184 	.word	0x20006184
    e1f4:	0000e019 	.word	0x0000e019

0000e1f8 <uart_console_non_blocking_mode>:
{
    e1f8:	b508      	push	{r3, lr}
    OS_ENTER_CRITICAL(sr);
    e1fa:	f7fc f8b5 	bl	a368 <os_arch_save_sr>
    if (write_char_cb) {
    e1fe:	4b04      	ldr	r3, [pc, #16]	; (e210 <uart_console_non_blocking_mode+0x18>)
    e200:	681b      	ldr	r3, [r3, #0]
    e202:	b113      	cbz	r3, e20a <uart_console_non_blocking_mode+0x12>
        write_char_cb = uart_console_queue_char;
    e204:	4b02      	ldr	r3, [pc, #8]	; (e210 <uart_console_non_blocking_mode+0x18>)
    e206:	4a03      	ldr	r2, [pc, #12]	; (e214 <uart_console_non_blocking_mode+0x1c>)
    e208:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
    e20a:	f7fc f8b3 	bl	a374 <os_arch_restore_sr>
}
    e20e:	bd08      	pop	{r3, pc}
    e210:	20006184 	.word	0x20006184
    e214:	0000e0bd 	.word	0x0000e0bd

0000e218 <console_out_nolock>:
{
    e218:	b538      	push	{r3, r4, r5, lr}
    e21a:	4604      	mov	r4, r0
    if (g_console_silence) {
    e21c:	4b0e      	ldr	r3, [pc, #56]	; (e258 <console_out_nolock+0x40>)
    e21e:	781b      	ldrb	r3, [r3, #0]
    e220:	b983      	cbnz	r3, e244 <console_out_nolock+0x2c>
    if (!write_char_cb) {
    e222:	4b0e      	ldr	r3, [pc, #56]	; (e25c <console_out_nolock+0x44>)
    e224:	681b      	ldr	r3, [r3, #0]
    e226:	b16b      	cbz	r3, e244 <console_out_nolock+0x2c>
    if ('\n' == c) {
    e228:	280a      	cmp	r0, #10
    e22a:	d00d      	beq.n	e248 <console_out_nolock+0x30>
        console_is_midline = 1;
    e22c:	4b0c      	ldr	r3, [pc, #48]	; (e260 <console_out_nolock+0x48>)
    e22e:	2201      	movs	r2, #1
    e230:	601a      	str	r2, [r3, #0]
    write_char_cb(uart_dev, c);
    e232:	4d0c      	ldr	r5, [pc, #48]	; (e264 <console_out_nolock+0x4c>)
    e234:	4b09      	ldr	r3, [pc, #36]	; (e25c <console_out_nolock+0x44>)
    e236:	681b      	ldr	r3, [r3, #0]
    e238:	b2e1      	uxtb	r1, r4
    e23a:	6828      	ldr	r0, [r5, #0]
    e23c:	4798      	blx	r3
    uart_start_tx(uart_dev);
    e23e:	6828      	ldr	r0, [r5, #0]
    dev->ud_funcs.uf_start_tx(dev);
    e240:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e242:	4798      	blx	r3
}
    e244:	4620      	mov	r0, r4
    e246:	bd38      	pop	{r3, r4, r5, pc}
        write_char_cb(uart_dev, '\r');
    e248:	210d      	movs	r1, #13
    e24a:	4a06      	ldr	r2, [pc, #24]	; (e264 <console_out_nolock+0x4c>)
    e24c:	6810      	ldr	r0, [r2, #0]
    e24e:	4798      	blx	r3
        console_is_midline = 0;
    e250:	4b03      	ldr	r3, [pc, #12]	; (e260 <console_out_nolock+0x48>)
    e252:	2200      	movs	r2, #0
    e254:	601a      	str	r2, [r3, #0]
    e256:	e7ec      	b.n	e232 <console_out_nolock+0x1a>
    e258:	20005d29 	.word	0x20005d29
    e25c:	20006184 	.word	0x20006184
    e260:	20005d0c 	.word	0x20005d0c
    e264:	20006180 	.word	0x20006180

0000e268 <console_rx_restart>:
{
    e268:	b508      	push	{r3, lr}
    os_eventq_put(os_eventq_dflt_get(), &rx_ev);
    e26a:	f7fb fa47 	bl	96fc <os_eventq_dflt_get>
    e26e:	4902      	ldr	r1, [pc, #8]	; (e278 <console_rx_restart+0x10>)
    e270:	f7fb f996 	bl	95a0 <os_eventq_put>
}
    e274:	bd08      	pop	{r3, pc}
    e276:	bf00      	nop
    e278:	2000616c 	.word	0x2000616c

0000e27c <uart_console_is_init>:
#endif

int
uart_console_is_init(void)
{
    return uart_dev != NULL;
    e27c:	4b02      	ldr	r3, [pc, #8]	; (e288 <uart_console_is_init+0xc>)
    e27e:	6818      	ldr	r0, [r3, #0]
}
    e280:	3800      	subs	r0, #0
    e282:	bf18      	it	ne
    e284:	2001      	movne	r0, #1
    e286:	4770      	bx	lr
    e288:	20006180 	.word	0x20006180

0000e28c <uart_console_init>:
    return 0;
}

int
uart_console_init(void)
{
    e28c:	b500      	push	{lr}
    e28e:	b087      	sub	sp, #28
    struct uart_conf uc = {
    e290:	2300      	movs	r3, #0
    e292:	9300      	str	r3, [sp, #0]
    e294:	9301      	str	r3, [sp, #4]
    e296:	9302      	str	r3, [sp, #8]
    e298:	9303      	str	r3, [sp, #12]
    e29a:	9304      	str	r3, [sp, #16]
    e29c:	9305      	str	r3, [sp, #20]
    e29e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
    e2a2:	9300      	str	r3, [sp, #0]
    e2a4:	2308      	movs	r3, #8
    e2a6:	f88d 3004 	strb.w	r3, [sp, #4]
    e2aa:	2301      	movs	r3, #1
    e2ac:	f88d 3005 	strb.w	r3, [sp, #5]
    e2b0:	4b14      	ldr	r3, [pc, #80]	; (e304 <uart_console_init+0x78>)
    e2b2:	9302      	str	r3, [sp, #8]
    e2b4:	4b14      	ldr	r3, [pc, #80]	; (e308 <uart_console_init+0x7c>)
    e2b6:	9303      	str	r3, [sp, #12]
        .uc_flow_ctl = MYNEWT_VAL(CONSOLE_UART_FLOW_CONTROL),
        .uc_tx_char = uart_console_tx_char,
        .uc_rx_char = uart_console_rx_char,
    };

    cr_tx.size = MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE);
    e2b8:	4b14      	ldr	r3, [pc, #80]	; (e30c <uart_console_init+0x80>)
    e2ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e2be:	805a      	strh	r2, [r3, #2]
    cr_tx.buf = cr_tx_buf;
    e2c0:	4a13      	ldr	r2, [pc, #76]	; (e310 <uart_console_init+0x84>)
    e2c2:	605a      	str	r2, [r3, #4]
    write_char_cb = uart_console_queue_char;
    e2c4:	4b13      	ldr	r3, [pc, #76]	; (e314 <uart_console_init+0x88>)
    e2c6:	4a14      	ldr	r2, [pc, #80]	; (e318 <uart_console_init+0x8c>)
    e2c8:	601a      	str	r2, [r3, #0]

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    cr_rx.size = MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE);
    e2ca:	4b14      	ldr	r3, [pc, #80]	; (e31c <uart_console_init+0x90>)
    e2cc:	2220      	movs	r2, #32
    e2ce:	805a      	strh	r2, [r3, #2]
    cr_rx.buf = cr_rx_buf;
    e2d0:	4a13      	ldr	r2, [pc, #76]	; (e320 <uart_console_init+0x94>)
    e2d2:	605a      	str	r2, [r3, #4]

    rx_ev.ev_cb = uart_console_rx_char_event;
    e2d4:	4b13      	ldr	r3, [pc, #76]	; (e324 <uart_console_init+0x98>)
    e2d6:	4a14      	ldr	r2, [pc, #80]	; (e328 <uart_console_init+0x9c>)
    e2d8:	605a      	str	r2, [r3, #4]
#endif

    if (!uart_dev) {
    e2da:	4b14      	ldr	r3, [pc, #80]	; (e32c <uart_console_init+0xa0>)
    e2dc:	681b      	ldr	r3, [r3, #0]
    e2de:	b11b      	cbz	r3, e2e8 <uart_console_init+0x5c>
          OS_TIMEOUT_NEVER, &uc);
        if (!uart_dev) {
            return -1;
        }
    }
    return 0;
    e2e0:	2000      	movs	r0, #0
}
    e2e2:	b007      	add	sp, #28
    e2e4:	f85d fb04 	ldr.w	pc, [sp], #4
        uart_dev = (struct uart_dev *)os_dev_open(MYNEWT_VAL(CONSOLE_UART_DEV),
    e2e8:	466a      	mov	r2, sp
    e2ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e2ee:	4810      	ldr	r0, [pc, #64]	; (e330 <uart_console_init+0xa4>)
    e2f0:	f7fb f90e 	bl	9510 <os_dev_open>
    e2f4:	4b0d      	ldr	r3, [pc, #52]	; (e32c <uart_console_init+0xa0>)
    e2f6:	6018      	str	r0, [r3, #0]
        if (!uart_dev) {
    e2f8:	b108      	cbz	r0, e2fe <uart_console_init+0x72>
    return 0;
    e2fa:	2000      	movs	r0, #0
    e2fc:	e7f1      	b.n	e2e2 <uart_console_init+0x56>
            return -1;
    e2fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e302:	e7ee      	b.n	e2e2 <uart_console_init+0x56>
    e304:	0000e0a1 	.word	0x0000e0a1
    e308:	0000e115 	.word	0x0000e115
    e30c:	20005d64 	.word	0x20005d64
    e310:	20005d6c 	.word	0x20005d6c
    e314:	20006184 	.word	0x20006184
    e318:	0000e0bd 	.word	0x0000e0bd
    e31c:	20005d3c 	.word	0x20005d3c
    e320:	20005d44 	.word	0x20005d44
    e324:	2000616c 	.word	0x2000616c
    e328:	0000e159 	.word	0x0000e159
    e32c:	20006180 	.word	0x20006180
    e330:	00021cb8 	.word	0x00021cb8

0000e334 <get_prompt>:
    console_line_queue_set(shell_evq);
}

static const char *
get_prompt(void)
{
    e334:	b508      	push	{r3, lr}
    const char *str;

    if (app_prompt_handler) {
    e336:	4b09      	ldr	r3, [pc, #36]	; (e35c <get_prompt+0x28>)
    e338:	681b      	ldr	r3, [r3, #0]
    e33a:	b113      	cbz	r3, e342 <get_prompt+0xe>

        str = app_prompt_handler();
    e33c:	4798      	blx	r3
        if (str) {
    e33e:	b100      	cbz	r0, e342 <get_prompt+0xe>
    if (default_module != -1) {
        return shell_modules[default_module].name;
    }

    return prompt;
}
    e340:	bd08      	pop	{r3, pc}
    if (default_module != -1) {
    e342:	4b07      	ldr	r3, [pc, #28]	; (e360 <get_prompt+0x2c>)
    e344:	681b      	ldr	r3, [r3, #0]
    e346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e34a:	d003      	beq.n	e354 <get_prompt+0x20>
        return shell_modules[default_module].name;
    e34c:	4a05      	ldr	r2, [pc, #20]	; (e364 <get_prompt+0x30>)
    e34e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
    e352:	e7f5      	b.n	e340 <get_prompt+0xc>
    return prompt;
    e354:	4b04      	ldr	r3, [pc, #16]	; (e368 <get_prompt+0x34>)
    e356:	6818      	ldr	r0, [r3, #0]
    e358:	e7f2      	b.n	e340 <get_prompt+0xc>
    e35a:	bf00      	nop
    e35c:	20006198 	.word	0x20006198
    e360:	200001c0 	.word	0x200001c0
    e364:	20006520 	.word	0x20006520
    e368:	200064f8 	.word	0x200064f8

0000e36c <print_module_commands>:
    }
}

static void
print_module_commands(const int module, struct streamer *streamer)
{
    e36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e36e:	4606      	mov	r6, r0
    e370:	460d      	mov	r5, r1
    const struct shell_module *shell_module = &shell_modules[module];
    int i;

    streamer_printf(streamer, "help\n");
    e372:	4914      	ldr	r1, [pc, #80]	; (e3c4 <print_module_commands+0x58>)
    e374:	4628      	mov	r0, r5
    e376:	f002 fc04 	bl	10b82 <streamer_printf>

    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    e37a:	2400      	movs	r4, #0
    e37c:	e004      	b.n	e388 <print_module_commands+0x1c>
            shell_module->commands[i].help->summary) {
        
            streamer_printf(streamer, "%s",
                            shell_module->commands[i].help->summary);
        }
        streamer_printf(streamer, "\n");
    e37e:	4912      	ldr	r1, [pc, #72]	; (e3c8 <print_module_commands+0x5c>)
    e380:	4628      	mov	r0, r5
    e382:	f002 fbfe 	bl	10b82 <streamer_printf>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    e386:	3401      	adds	r4, #1
    e388:	4b10      	ldr	r3, [pc, #64]	; (e3cc <print_module_commands+0x60>)
    e38a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    e38e:	685b      	ldr	r3, [r3, #4]
    e390:	0127      	lsls	r7, r4, #4
    e392:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    e396:	689a      	ldr	r2, [r3, #8]
    e398:	b19a      	cbz	r2, e3c2 <print_module_commands+0x56>
        streamer_printf(streamer, "%-30s", shell_module->commands[i].sc_cmd);
    e39a:	490d      	ldr	r1, [pc, #52]	; (e3d0 <print_module_commands+0x64>)
    e39c:	4628      	mov	r0, r5
    e39e:	f002 fbf0 	bl	10b82 <streamer_printf>
        if (shell_module->commands[i].help &&
    e3a2:	4b0a      	ldr	r3, [pc, #40]	; (e3cc <print_module_commands+0x60>)
    e3a4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    e3a8:	685b      	ldr	r3, [r3, #4]
    e3aa:	443b      	add	r3, r7
    e3ac:	68db      	ldr	r3, [r3, #12]
    e3ae:	2b00      	cmp	r3, #0
    e3b0:	d0e5      	beq.n	e37e <print_module_commands+0x12>
            shell_module->commands[i].help->summary) {
    e3b2:	681a      	ldr	r2, [r3, #0]
        if (shell_module->commands[i].help &&
    e3b4:	2a00      	cmp	r2, #0
    e3b6:	d0e2      	beq.n	e37e <print_module_commands+0x12>
            streamer_printf(streamer, "%s",
    e3b8:	4906      	ldr	r1, [pc, #24]	; (e3d4 <print_module_commands+0x68>)
    e3ba:	4628      	mov	r0, r5
    e3bc:	f002 fbe1 	bl	10b82 <streamer_printf>
    e3c0:	e7dd      	b.n	e37e <print_module_commands+0x12>
    }
}
    e3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e3c4:	00021cc0 	.word	0x00021cc0
    e3c8:	00021d7c 	.word	0x00021d7c
    e3cc:	20006520 	.word	0x20006520
    e3d0:	00021cc8 	.word	0x00021cc8
    e3d4:	00021c30 	.word	0x00021c30

0000e3d8 <print_modules>:
{
    e3d8:	b538      	push	{r3, r4, r5, lr}
    e3da:	4605      	mov	r5, r0
    for (module = 0; module < num_of_shell_entities; module++) {
    e3dc:	2400      	movs	r4, #0
    e3de:	e007      	b.n	e3f0 <print_modules+0x18>
        streamer_printf(streamer, "%s\n", shell_modules[module].name);
    e3e0:	4b06      	ldr	r3, [pc, #24]	; (e3fc <print_modules+0x24>)
    e3e2:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    e3e6:	4906      	ldr	r1, [pc, #24]	; (e400 <print_modules+0x28>)
    e3e8:	4628      	mov	r0, r5
    e3ea:	f002 fbca 	bl	10b82 <streamer_printf>
    for (module = 0; module < num_of_shell_entities; module++) {
    e3ee:	3401      	adds	r4, #1
    e3f0:	4b04      	ldr	r3, [pc, #16]	; (e404 <print_modules+0x2c>)
    e3f2:	681b      	ldr	r3, [r3, #0]
    e3f4:	429c      	cmp	r4, r3
    e3f6:	d3f3      	bcc.n	e3e0 <print_modules+0x8>
}
    e3f8:	bd38      	pop	{r3, r4, r5, pc}
    e3fa:	bf00      	nop
    e3fc:	20006520 	.word	0x20006520
    e400:	00021f8c 	.word	0x00021f8c
    e404:	200064f4 	.word	0x200064f4

0000e408 <print_command_params>:
{
    e408:	b570      	push	{r4, r5, r6, lr}
	const struct shell_cmd *shell_cmd = &shell_module->commands[command];
    e40a:	4b0e      	ldr	r3, [pc, #56]	; (e444 <print_command_params+0x3c>)
    e40c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    e410:	685d      	ldr	r5, [r3, #4]
    e412:	eb05 1501 	add.w	r5, r5, r1, lsl #4
	if (!(shell_cmd->help && shell_cmd->help->params)) {
    e416:	68eb      	ldr	r3, [r5, #12]
    e418:	b19b      	cbz	r3, e442 <print_command_params+0x3a>
    e41a:	4616      	mov	r6, r2
    e41c:	689b      	ldr	r3, [r3, #8]
    e41e:	b183      	cbz	r3, e442 <print_command_params+0x3a>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
    e420:	2400      	movs	r4, #0
    e422:	e006      	b.n	e432 <print_command_params+0x2a>
		streamer_printf(streamer, "%-30s%s\n",
    e424:	f8dc 3004 	ldr.w	r3, [ip, #4]
    e428:	4907      	ldr	r1, [pc, #28]	; (e448 <print_command_params+0x40>)
    e42a:	4630      	mov	r0, r6
    e42c:	f002 fba9 	bl	10b82 <streamer_printf>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
    e430:	3401      	adds	r4, #1
    e432:	68eb      	ldr	r3, [r5, #12]
    e434:	689b      	ldr	r3, [r3, #8]
    e436:	eb03 0cc4 	add.w	ip, r3, r4, lsl #3
    e43a:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    e43e:	2a00      	cmp	r2, #0
    e440:	d1f0      	bne.n	e424 <print_command_params+0x1c>
}
    e442:	bd70      	pop	{r4, r5, r6, pc}
    e444:	20006520 	.word	0x20006520
    e448:	00021cd0 	.word	0x00021cd0

0000e44c <get_destination_module>:
{
    e44c:	b570      	push	{r4, r5, r6, lr}
    e44e:	4606      	mov	r6, r0
    e450:	460d      	mov	r5, r1
    for (i = 0; i < num_of_shell_entities; i++) {
    e452:	2400      	movs	r4, #0
    e454:	e007      	b.n	e466 <get_destination_module+0x1a>
            if (!strcmp(module_str, shell_modules[i].name)) {
    e456:	4b0e      	ldr	r3, [pc, #56]	; (e490 <get_destination_module+0x44>)
    e458:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
    e45c:	4630      	mov	r0, r6
    e45e:	f7fd fe41 	bl	c0e4 <strcmp>
    e462:	b190      	cbz	r0, e48a <get_destination_module+0x3e>
    for (i = 0; i < num_of_shell_entities; i++) {
    e464:	3401      	adds	r4, #1
    e466:	4b0b      	ldr	r3, [pc, #44]	; (e494 <get_destination_module+0x48>)
    e468:	681b      	ldr	r3, [r3, #0]
    e46a:	429c      	cmp	r4, r3
    e46c:	d20b      	bcs.n	e486 <get_destination_module+0x3a>
        if (len < 0) {
    e46e:	2d00      	cmp	r5, #0
    e470:	dbf1      	blt.n	e456 <get_destination_module+0xa>
            if (!strncmp(module_str, shell_modules[i].name, len)) {
    e472:	462a      	mov	r2, r5
    e474:	4b06      	ldr	r3, [pc, #24]	; (e490 <get_destination_module+0x44>)
    e476:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
    e47a:	4630      	mov	r0, r6
    e47c:	f00c fa7e 	bl	1a97c <strncmp>
    e480:	2800      	cmp	r0, #0
    e482:	d1ef      	bne.n	e464 <get_destination_module+0x18>
    e484:	e001      	b.n	e48a <get_destination_module+0x3e>
    return -1;
    e486:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
    e48a:	4620      	mov	r0, r4
    e48c:	bd70      	pop	{r4, r5, r6, pc}
    e48e:	bf00      	nop
    e490:	20006520 	.word	0x20006520
    e494:	200064f4 	.word	0x200064f4

0000e498 <set_default_module>:
static const struct shell_cmd shell_cmd_help =
    SHELL_CMD_EXT("help", show_help, NULL);

static int
set_default_module(const char *name)
{
    e498:	b508      	push	{r3, lr}
    int module;

    module = get_destination_module(name, -1);
    e49a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e49e:	f7ff ffd5 	bl	e44c <get_destination_module>

    if (module == -1) {
    e4a2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    e4a6:	d002      	beq.n	e4ae <set_default_module+0x16>
        return -1;
    }

    default_module = module;
    e4a8:	4b01      	ldr	r3, [pc, #4]	; (e4b0 <set_default_module+0x18>)
    e4aa:	6018      	str	r0, [r3, #0]

    return 0;
    e4ac:	2000      	movs	r0, #0
}
    e4ae:	bd08      	pop	{r3, pc}
    e4b0:	200001c0 	.word	0x200001c0

0000e4b4 <select_module>:

static int
select_module(const struct shell_cmd *cmd, int argc, char *argv[],
              struct streamer *streamer)
{
    e4b4:	b508      	push	{r3, lr}
    if (argc == 1) {
    e4b6:	2901      	cmp	r1, #1
    e4b8:	d105      	bne.n	e4c6 <select_module+0x12>
        default_module = -1;
    e4ba:	4b05      	ldr	r3, [pc, #20]	; (e4d0 <select_module+0x1c>)
    e4bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e4c0:	601a      	str	r2, [r3, #0]
    } else {
        set_default_module(argv[1]);
    }

    return 0;
}
    e4c2:	2000      	movs	r0, #0
    e4c4:	bd08      	pop	{r3, pc}
        set_default_module(argv[1]);
    e4c6:	6850      	ldr	r0, [r2, #4]
    e4c8:	f7ff ffe6 	bl	e498 <set_default_module>
    e4cc:	e7f9      	b.n	e4c2 <select_module+0xe>
    e4ce:	bf00      	nop
    e4d0:	200001c0 	.word	0x200001c0

0000e4d4 <get_command_and_module>:
{
    e4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e4d6:	4617      	mov	r7, r2
    *module = -1;
    e4d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e4dc:	600b      	str	r3, [r1, #0]
    if (!argv[0]) {
    e4de:	6806      	ldr	r6, [r0, #0]
    e4e0:	b156      	cbz	r6, e4f8 <get_command_and_module+0x24>
    e4e2:	4604      	mov	r4, r0
    e4e4:	460d      	mov	r5, r1
    if (default_module == -1) {
    e4e6:	4b15      	ldr	r3, [pc, #84]	; (e53c <get_command_and_module+0x68>)
    e4e8:	681b      	ldr	r3, [r3, #0]
    e4ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e4ee:	d008      	beq.n	e502 <get_command_and_module+0x2e>
    *module = default_module;
    e4f0:	600b      	str	r3, [r1, #0]
    return argv[0];
    e4f2:	6806      	ldr	r6, [r0, #0]
}
    e4f4:	4630      	mov	r0, r6
    e4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Unrecognized command\n");
    e4f8:	4911      	ldr	r1, [pc, #68]	; (e540 <get_command_and_module+0x6c>)
    e4fa:	4610      	mov	r0, r2
    e4fc:	f002 fb41 	bl	10b82 <streamer_printf>
        return NULL;
    e500:	e7f8      	b.n	e4f4 <get_command_and_module+0x20>
        if (!argv[1] || argv[1][0] == '\0') {
    e502:	6843      	ldr	r3, [r0, #4]
    e504:	b163      	cbz	r3, e520 <get_command_and_module+0x4c>
    e506:	781b      	ldrb	r3, [r3, #0]
    e508:	b153      	cbz	r3, e520 <get_command_and_module+0x4c>
        *module = get_destination_module(argv[0], -1);
    e50a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e50e:	4630      	mov	r0, r6
    e510:	f7ff ff9c 	bl	e44c <get_destination_module>
    e514:	6028      	str	r0, [r5, #0]
        if (*module == -1) {
    e516:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    e51a:	d008      	beq.n	e52e <get_command_and_module+0x5a>
        return argv[1];
    e51c:	6866      	ldr	r6, [r4, #4]
    e51e:	e7e9      	b.n	e4f4 <get_command_and_module+0x20>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
    e520:	4632      	mov	r2, r6
    e522:	4908      	ldr	r1, [pc, #32]	; (e544 <get_command_and_module+0x70>)
    e524:	4638      	mov	r0, r7
    e526:	f002 fb2c 	bl	10b82 <streamer_printf>
            return NULL;
    e52a:	2600      	movs	r6, #0
    e52c:	e7e2      	b.n	e4f4 <get_command_and_module+0x20>
            streamer_printf(streamer, "Illegal module %s\n", argv[0]);
    e52e:	6822      	ldr	r2, [r4, #0]
    e530:	4905      	ldr	r1, [pc, #20]	; (e548 <get_command_and_module+0x74>)
    e532:	4638      	mov	r0, r7
    e534:	f002 fb25 	bl	10b82 <streamer_printf>
            return NULL;
    e538:	2600      	movs	r6, #0
    e53a:	e7db      	b.n	e4f4 <get_command_and_module+0x20>
    e53c:	200001c0 	.word	0x200001c0
    e540:	00021cdc 	.word	0x00021cdc
    e544:	00021cf4 	.word	0x00021cf4
    e548:	00021d10 	.word	0x00021d10

0000e54c <shell_find_cmd>:
static const struct shell_cmd shell_cmd_select_module =
    SHELL_CMD_EXT("select", select_module, NULL);

static const struct shell_cmd *
shell_find_cmd(int argc, char *argv[], struct streamer *streamer)
{
    e54c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e54e:	b083      	sub	sp, #12
    e550:	4616      	mov	r6, r2
    const char *first_string = argv[0];
    e552:	680d      	ldr	r5, [r1, #0]
    int module = -1;
    e554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e558:	9301      	str	r3, [sp, #4]
    const struct shell_module *shell_module;
    const char *command;
    int i;

    if (!first_string || first_string[0] == '\0') {
    e55a:	b31d      	cbz	r5, e5a4 <shell_find_cmd+0x58>
    e55c:	4607      	mov	r7, r0
    e55e:	460c      	mov	r4, r1
    e560:	782b      	ldrb	r3, [r5, #0]
    e562:	b1fb      	cbz	r3, e5a4 <shell_find_cmd+0x58>
        streamer_printf(streamer, "Illegal parameter\n");
        return NULL;
    }

    if (!strcmp(first_string, "help")) {
    e564:	4922      	ldr	r1, [pc, #136]	; (e5f0 <shell_find_cmd+0xa4>)
    e566:	4628      	mov	r0, r5
    e568:	f7fd fdbc 	bl	c0e4 <strcmp>
    e56c:	2800      	cmp	r0, #0
    e56e:	d035      	beq.n	e5dc <shell_find_cmd+0x90>
        return &shell_cmd_help;
    }

    if (!strcmp(first_string, "select")) {
    e570:	4920      	ldr	r1, [pc, #128]	; (e5f4 <shell_find_cmd+0xa8>)
    e572:	4628      	mov	r0, r5
    e574:	f7fd fdb6 	bl	c0e4 <strcmp>
    e578:	2800      	cmp	r0, #0
    e57a:	d033      	beq.n	e5e4 <shell_find_cmd+0x98>
        return &shell_cmd_select_module;
    }

    if ((argc == 1) && (default_module == -1)) {
    e57c:	2f01      	cmp	r7, #1
    e57e:	d104      	bne.n	e58a <shell_find_cmd+0x3e>
    e580:	4b1d      	ldr	r3, [pc, #116]	; (e5f8 <shell_find_cmd+0xac>)
    e582:	681b      	ldr	r3, [r3, #0]
    e584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e588:	d012      	beq.n	e5b0 <shell_find_cmd+0x64>
        streamer_printf(streamer, "Missing parameter\n");
        return NULL;
    }

    command = get_command_and_module(argv, &module, streamer);
    e58a:	4632      	mov	r2, r6
    e58c:	a901      	add	r1, sp, #4
    e58e:	4620      	mov	r0, r4
    e590:	f7ff ffa0 	bl	e4d4 <get_command_and_module>
    e594:	4606      	mov	r6, r0
    if ((module == -1) || (command == NULL)) {
    e596:	9f01      	ldr	r7, [sp, #4]
    e598:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
    e59c:	d024      	beq.n	e5e8 <shell_find_cmd+0x9c>
    e59e:	b328      	cbz	r0, e5ec <shell_find_cmd+0xa0>
        return NULL;
    }

    shell_module = &shell_modules[module];
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    e5a0:	2500      	movs	r5, #0
    e5a2:	e00c      	b.n	e5be <shell_find_cmd+0x72>
        streamer_printf(streamer, "Illegal parameter\n");
    e5a4:	4915      	ldr	r1, [pc, #84]	; (e5fc <shell_find_cmd+0xb0>)
    e5a6:	4630      	mov	r0, r6
    e5a8:	f002 faeb 	bl	10b82 <streamer_printf>
        return NULL;
    e5ac:	2100      	movs	r1, #0
    e5ae:	e016      	b.n	e5de <shell_find_cmd+0x92>
        streamer_printf(streamer, "Missing parameter\n");
    e5b0:	4913      	ldr	r1, [pc, #76]	; (e600 <shell_find_cmd+0xb4>)
    e5b2:	4630      	mov	r0, r6
    e5b4:	f002 fae5 	bl	10b82 <streamer_printf>
        return NULL;
    e5b8:	2100      	movs	r1, #0
    e5ba:	e010      	b.n	e5de <shell_find_cmd+0x92>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    e5bc:	3501      	adds	r5, #1
    e5be:	4b11      	ldr	r3, [pc, #68]	; (e604 <shell_find_cmd+0xb8>)
    e5c0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    e5c4:	685c      	ldr	r4, [r3, #4]
    e5c6:	eb04 1405 	add.w	r4, r4, r5, lsl #4
    e5ca:	68a1      	ldr	r1, [r4, #8]
    e5cc:	b139      	cbz	r1, e5de <shell_find_cmd+0x92>
        if (!strcmp(command, shell_module->commands[i].sc_cmd)) {
    e5ce:	4630      	mov	r0, r6
    e5d0:	f7fd fd88 	bl	c0e4 <strcmp>
    e5d4:	2800      	cmp	r0, #0
    e5d6:	d1f1      	bne.n	e5bc <shell_find_cmd+0x70>
            return &shell_module->commands[i];
    e5d8:	4621      	mov	r1, r4
    e5da:	e000      	b.n	e5de <shell_find_cmd+0x92>
        return &shell_cmd_help;
    e5dc:	490a      	ldr	r1, [pc, #40]	; (e608 <shell_find_cmd+0xbc>)
        }
    }

    return NULL;
}
    e5de:	4608      	mov	r0, r1
    e5e0:	b003      	add	sp, #12
    e5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return &shell_cmd_select_module;
    e5e4:	4909      	ldr	r1, [pc, #36]	; (e60c <shell_find_cmd+0xc0>)
    e5e6:	e7fa      	b.n	e5de <shell_find_cmd+0x92>
        return NULL;
    e5e8:	2100      	movs	r1, #0
    e5ea:	e7f8      	b.n	e5de <shell_find_cmd+0x92>
    e5ec:	4601      	mov	r1, r0
    e5ee:	e7f6      	b.n	e5de <shell_find_cmd+0x92>
    e5f0:	00021d38 	.word	0x00021d38
    e5f4:	00021d40 	.word	0x00021d40
    e5f8:	200001c0 	.word	0x200001c0
    e5fc:	00021d24 	.word	0x00021d24
    e600:	00021d48 	.word	0x00021d48
    e604:	20006520 	.word	0x20006520
    e608:	00021ebc 	.word	0x00021ebc
    e60c:	00021ecc 	.word	0x00021ecc

0000e610 <show_cmd_help>:
{
    e610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e614:	b083      	sub	sp, #12
    e616:	4681      	mov	r9, r0
    e618:	4688      	mov	r8, r1
    int module = -1;
    e61a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e61e:	9301      	str	r3, [sp, #4]
    command = get_command_and_module(argv, &module, streamer);
    e620:	460a      	mov	r2, r1
    e622:	a901      	add	r1, sp, #4
    e624:	f7ff ff56 	bl	e4d4 <get_command_and_module>
    if ((module == -1) || (command == NULL)) {
    e628:	9f01      	ldr	r7, [sp, #4]
    e62a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
    e62e:	d04d      	beq.n	e6cc <show_cmd_help+0xbc>
    e630:	4606      	mov	r6, r0
    e632:	2800      	cmp	r0, #0
    e634:	d04a      	beq.n	e6cc <show_cmd_help+0xbc>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    e636:	2500      	movs	r5, #0
    e638:	e009      	b.n	e64e <show_cmd_help+0x3e>
                               !cmd->help->usage &&
    e63a:	6859      	ldr	r1, [r3, #4]
            if (!cmd->help || (!cmd->help->summary &&
    e63c:	b9d9      	cbnz	r1, e676 <show_cmd_help+0x66>
                               !cmd->help->params)) {
    e63e:	689b      	ldr	r3, [r3, #8]
                               !cmd->help->usage &&
    e640:	b9cb      	cbnz	r3, e676 <show_cmd_help+0x66>
                streamer_printf(streamer, "(no help available)\n");
    e642:	4924      	ldr	r1, [pc, #144]	; (e6d4 <show_cmd_help+0xc4>)
    e644:	4640      	mov	r0, r8
    e646:	f002 fa9c 	bl	10b82 <streamer_printf>
                return 0;
    e64a:	e03f      	b.n	e6cc <show_cmd_help+0xbc>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    e64c:	3501      	adds	r5, #1
    e64e:	4b22      	ldr	r3, [pc, #136]	; (e6d8 <show_cmd_help+0xc8>)
    e650:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    e654:	685c      	ldr	r4, [r3, #4]
    e656:	eb04 1405 	add.w	r4, r4, r5, lsl #4
    e65a:	68a1      	ldr	r1, [r4, #8]
    e65c:	2900      	cmp	r1, #0
    e65e:	d02f      	beq.n	e6c0 <show_cmd_help+0xb0>
        if (!strcmp(command, cmd->sc_cmd)) {
    e660:	4630      	mov	r0, r6
    e662:	f7fd fd3f 	bl	c0e4 <strcmp>
    e666:	2800      	cmp	r0, #0
    e668:	d1f0      	bne.n	e64c <show_cmd_help+0x3c>
            if (!cmd->help || (!cmd->help->summary &&
    e66a:	68e3      	ldr	r3, [r4, #12]
    e66c:	2b00      	cmp	r3, #0
    e66e:	d0e8      	beq.n	e642 <show_cmd_help+0x32>
    e670:	681a      	ldr	r2, [r3, #0]
    e672:	2a00      	cmp	r2, #0
    e674:	d0e1      	beq.n	e63a <show_cmd_help+0x2a>
            if (cmd->help->summary) {
    e676:	b14a      	cbz	r2, e68c <show_cmd_help+0x7c>
                streamer_printf(streamer, "Summary:\n");
    e678:	4918      	ldr	r1, [pc, #96]	; (e6dc <show_cmd_help+0xcc>)
    e67a:	4640      	mov	r0, r8
    e67c:	f002 fa81 	bl	10b82 <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->summary);
    e680:	68e3      	ldr	r3, [r4, #12]
    e682:	681a      	ldr	r2, [r3, #0]
    e684:	4916      	ldr	r1, [pc, #88]	; (e6e0 <show_cmd_help+0xd0>)
    e686:	4640      	mov	r0, r8
    e688:	f002 fa7b 	bl	10b82 <streamer_printf>
            if (cmd->help->usage) {
    e68c:	68e3      	ldr	r3, [r4, #12]
    e68e:	685b      	ldr	r3, [r3, #4]
    e690:	b14b      	cbz	r3, e6a6 <show_cmd_help+0x96>
                streamer_printf(streamer, "Usage:\n");
    e692:	4914      	ldr	r1, [pc, #80]	; (e6e4 <show_cmd_help+0xd4>)
    e694:	4640      	mov	r0, r8
    e696:	f002 fa74 	bl	10b82 <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->usage);
    e69a:	68e3      	ldr	r3, [r4, #12]
    e69c:	685a      	ldr	r2, [r3, #4]
    e69e:	4910      	ldr	r1, [pc, #64]	; (e6e0 <show_cmd_help+0xd0>)
    e6a0:	4640      	mov	r0, r8
    e6a2:	f002 fa6e 	bl	10b82 <streamer_printf>
            if (cmd->help->params) {
    e6a6:	68e3      	ldr	r3, [r4, #12]
    e6a8:	689b      	ldr	r3, [r3, #8]
    e6aa:	b17b      	cbz	r3, e6cc <show_cmd_help+0xbc>
                streamer_printf(streamer, "Parameters:\n");
    e6ac:	490e      	ldr	r1, [pc, #56]	; (e6e8 <show_cmd_help+0xd8>)
    e6ae:	4640      	mov	r0, r8
    e6b0:	f002 fa67 	bl	10b82 <streamer_printf>
                print_command_params(module, i, streamer);
    e6b4:	4642      	mov	r2, r8
    e6b6:	4629      	mov	r1, r5
    e6b8:	9801      	ldr	r0, [sp, #4]
    e6ba:	f7ff fea5 	bl	e408 <print_command_params>
            return 0;
    e6be:	e005      	b.n	e6cc <show_cmd_help+0xbc>
    streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
    e6c0:	f8d9 2000 	ldr.w	r2, [r9]
    e6c4:	4909      	ldr	r1, [pc, #36]	; (e6ec <show_cmd_help+0xdc>)
    e6c6:	4640      	mov	r0, r8
    e6c8:	f002 fa5b 	bl	10b82 <streamer_printf>
}
    e6cc:	2000      	movs	r0, #0
    e6ce:	b003      	add	sp, #12
    e6d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e6d4:	00021d5c 	.word	0x00021d5c
    e6d8:	20006520 	.word	0x20006520
    e6dc:	00021d74 	.word	0x00021d74
    e6e0:	00021f8c 	.word	0x00021f8c
    e6e4:	00021d80 	.word	0x00021d80
    e6e8:	00021d88 	.word	0x00021d88
    e6ec:	00021cf4 	.word	0x00021cf4

0000e6f0 <show_help>:
{
    e6f0:	b538      	push	{r3, r4, r5, lr}
    e6f2:	461c      	mov	r4, r3
    if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
    e6f4:	2902      	cmp	r1, #2
    e6f6:	dc1a      	bgt.n	e72e <show_help+0x3e>
    e6f8:	4b1b      	ldr	r3, [pc, #108]	; (e768 <show_help+0x78>)
    e6fa:	6818      	ldr	r0, [r3, #0]
    e6fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    e700:	d001      	beq.n	e706 <show_help+0x16>
    e702:	2902      	cmp	r1, #2
    e704:	d013      	beq.n	e72e <show_help+0x3e>
    if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
    e706:	2902      	cmp	r1, #2
    e708:	d016      	beq.n	e738 <show_help+0x48>
    e70a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    e70e:	d001      	beq.n	e714 <show_help+0x24>
    e710:	2901      	cmp	r1, #1
    e712:	d011      	beq.n	e738 <show_help+0x48>
        streamer_printf(streamer, "Available modules:\n");
    e714:	4915      	ldr	r1, [pc, #84]	; (e76c <show_help+0x7c>)
    e716:	4620      	mov	r0, r4
    e718:	f002 fa33 	bl	10b82 <streamer_printf>
        print_modules(streamer);
    e71c:	4620      	mov	r0, r4
    e71e:	f7ff fe5b 	bl	e3d8 <print_modules>
        streamer_printf(streamer,
    e722:	4913      	ldr	r1, [pc, #76]	; (e770 <show_help+0x80>)
    e724:	4620      	mov	r0, r4
    e726:	f002 fa2c 	bl	10b82 <streamer_printf>
    return 0;
    e72a:	2000      	movs	r0, #0
    e72c:	e014      	b.n	e758 <show_help+0x68>
        return show_cmd_help(&argv[1], streamer);
    e72e:	4621      	mov	r1, r4
    e730:	1d10      	adds	r0, r2, #4
    e732:	f7ff ff6d 	bl	e610 <show_cmd_help>
    e736:	e00f      	b.n	e758 <show_help+0x68>
        if (default_module == -1) {
    e738:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    e73c:	d108      	bne.n	e750 <show_help+0x60>
            module = get_destination_module(argv[1], -1);
    e73e:	6855      	ldr	r5, [r2, #4]
    e740:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e744:	4628      	mov	r0, r5
    e746:	f7ff fe81 	bl	e44c <get_destination_module>
            if (module == -1) {
    e74a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    e74e:	d004      	beq.n	e75a <show_help+0x6a>
        print_module_commands(module, streamer);
    e750:	4621      	mov	r1, r4
    e752:	f7ff fe0b 	bl	e36c <print_module_commands>
    return 0;
    e756:	2000      	movs	r0, #0
}
    e758:	bd38      	pop	{r3, r4, r5, pc}
                streamer_printf(streamer, "Illegal module %s\n", argv[1]);
    e75a:	462a      	mov	r2, r5
    e75c:	4905      	ldr	r1, [pc, #20]	; (e774 <show_help+0x84>)
    e75e:	4620      	mov	r0, r4
    e760:	f002 fa0f 	bl	10b82 <streamer_printf>
                return 0;
    e764:	2000      	movs	r0, #0
    e766:	e7f7      	b.n	e758 <show_help+0x68>
    e768:	200001c0 	.word	0x200001c0
    e76c:	00021d98 	.word	0x00021d98
    e770:	00021dac 	.word	0x00021dac
    e774:	00021d10 	.word	0x00021d10

0000e778 <print_prompt>:
{
    e778:	b508      	push	{r3, lr}
    console_printf("%s%s", get_prompt(), MYNEWT_VAL(SHELL_PROMPT_SUFFIX));
    e77a:	f7ff fddb 	bl	e334 <get_prompt>
    e77e:	4601      	mov	r1, r0
    e780:	4a02      	ldr	r2, [pc, #8]	; (e78c <print_prompt+0x14>)
    e782:	4803      	ldr	r0, [pc, #12]	; (e790 <print_prompt+0x18>)
    e784:	f7ff fc28 	bl	dfd8 <console_printf>
}
    e788:	bd08      	pop	{r3, pc}
    e78a:	bf00      	nop
    e78c:	00021de0 	.word	0x00021de0
    e790:	00021de4 	.word	0x00021de4

0000e794 <print_prompt_if_console>:
{
    e794:	b510      	push	{r4, lr}
    e796:	4604      	mov	r4, r0
    if (streamer == streamer_console_get()) {
    e798:	f002 fa0e 	bl	10bb8 <streamer_console_get>
    e79c:	4284      	cmp	r4, r0
    e79e:	d000      	beq.n	e7a2 <print_prompt_if_console+0xe>
}
    e7a0:	bd10      	pop	{r4, pc}
        print_prompt();
    e7a2:	f7ff ffe9 	bl	e778 <print_prompt>
}
    e7a6:	e7fb      	b.n	e7a0 <print_prompt_if_console+0xc>

0000e7a8 <complete_module>:
}

static void
complete_module(char *line, char *module_prefix,
                int module_len, console_append_char_cb append_char)
{
    e7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7ac:	b083      	sub	sp, #12
    e7ae:	4681      	mov	r9, r0
    e7b0:	9101      	str	r1, [sp, #4]
    int i, j;
    const char *first_match = NULL;
    int common_chars = -1, space = 0;

    if (!module_len) {
    e7b2:	4615      	mov	r5, r2
    e7b4:	b132      	cbz	r2, e7c4 <complete_module+0x1c>
    e7b6:	469a      	mov	sl, r3
    int common_chars = -1, space = 0;
    e7b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    const char *first_match = NULL;
    e7bc:	f04f 0800 	mov.w	r8, #0
        print_prompt();
        console_printf("%s", line);
        return;
    }

    for (i = 0; i < num_of_shell_entities; i++) {
    e7c0:	4646      	mov	r6, r8
    e7c2:	e02b      	b.n	e81c <complete_module+0x74>
        console_printf("\n");
    e7c4:	4837      	ldr	r0, [pc, #220]	; (e8a4 <complete_module+0xfc>)
    e7c6:	f7ff fc07 	bl	dfd8 <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
    e7ca:	e006      	b.n	e7da <complete_module+0x32>
            console_printf("%s\n", shell_modules[i].name);
    e7cc:	4b36      	ldr	r3, [pc, #216]	; (e8a8 <complete_module+0x100>)
    e7ce:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
    e7d2:	4836      	ldr	r0, [pc, #216]	; (e8ac <complete_module+0x104>)
    e7d4:	f7ff fc00 	bl	dfd8 <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
    e7d8:	3501      	adds	r5, #1
    e7da:	4b35      	ldr	r3, [pc, #212]	; (e8b0 <complete_module+0x108>)
    e7dc:	681b      	ldr	r3, [r3, #0]
    e7de:	429d      	cmp	r5, r3
    e7e0:	d3f4      	bcc.n	e7cc <complete_module+0x24>
        print_prompt();
    e7e2:	f7ff ffc9 	bl	e778 <print_prompt>
        console_printf("%s", line);
    e7e6:	4649      	mov	r1, r9
    e7e8:	4832      	ldr	r0, [pc, #200]	; (e8b4 <complete_module+0x10c>)
    e7ea:	f7ff fbf5 	bl	dfd8 <console_printf>

    /* for convenience add space after command */
    if (space) {
        append_char(line, ' ');
    }
}
    e7ee:	b003      	add	sp, #12
    e7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            console_printf("\n");
    e7f4:	482b      	ldr	r0, [pc, #172]	; (e8a4 <complete_module+0xfc>)
    e7f6:	f7ff fbef 	bl	dfd8 <console_printf>
            console_printf("%s\n", first_match);
    e7fa:	4641      	mov	r1, r8
    e7fc:	482b      	ldr	r0, [pc, #172]	; (e8ac <complete_module+0x104>)
    e7fe:	f7ff fbeb 	bl	dfd8 <console_printf>
            common_chars = strlen(first_match);
    e802:	4640      	mov	r0, r8
    e804:	f7fd fc7a 	bl	c0fc <strlen>
    e808:	4607      	mov	r7, r0
        for (j = 0; j < common_chars; j++) {
    e80a:	e01b      	b.n	e844 <complete_module+0x9c>
        console_printf("%s\n", shell_modules[i].name);
    e80c:	4b26      	ldr	r3, [pc, #152]	; (e8a8 <complete_module+0x100>)
    e80e:	f853 1036 	ldr.w	r1, [r3, r6, lsl #3]
    e812:	4826      	ldr	r0, [pc, #152]	; (e8ac <complete_module+0x104>)
    e814:	f7ff fbe0 	bl	dfd8 <console_printf>
        common_chars = j;
    e818:	4627      	mov	r7, r4
    for (i = 0; i < num_of_shell_entities; i++) {
    e81a:	3601      	adds	r6, #1
    e81c:	4b24      	ldr	r3, [pc, #144]	; (e8b0 <complete_module+0x108>)
    e81e:	681b      	ldr	r3, [r3, #0]
    e820:	429e      	cmp	r6, r3
    e822:	d21d      	bcs.n	e860 <complete_module+0xb8>
        if (strncmp(module_prefix,
    e824:	4b20      	ldr	r3, [pc, #128]	; (e8a8 <complete_module+0x100>)
    e826:	f853 b036 	ldr.w	fp, [r3, r6, lsl #3]
    e82a:	462a      	mov	r2, r5
    e82c:	4659      	mov	r1, fp
    e82e:	9801      	ldr	r0, [sp, #4]
    e830:	f00c f8a4 	bl	1a97c <strncmp>
    e834:	4604      	mov	r4, r0
    e836:	2800      	cmp	r0, #0
    e838:	d1ef      	bne.n	e81a <complete_module+0x72>
        if (!first_match) {
    e83a:	f1b8 0f00 	cmp.w	r8, #0
    e83e:	d00d      	beq.n	e85c <complete_module+0xb4>
        if (first_match && (common_chars < 0)) {
    e840:	2f00      	cmp	r7, #0
    e842:	dbd7      	blt.n	e7f4 <complete_module+0x4c>
        for (j = 0; j < common_chars; j++) {
    e844:	42bc      	cmp	r4, r7
    e846:	dae1      	bge.n	e80c <complete_module+0x64>
            if (first_match[j] != shell_modules[i].name[j]) {
    e848:	f818 2004 	ldrb.w	r2, [r8, r4]
    e84c:	4b16      	ldr	r3, [pc, #88]	; (e8a8 <complete_module+0x100>)
    e84e:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
    e852:	5d1b      	ldrb	r3, [r3, r4]
    e854:	429a      	cmp	r2, r3
    e856:	d1d9      	bne.n	e80c <complete_module+0x64>
        for (j = 0; j < common_chars; j++) {
    e858:	3401      	adds	r4, #1
    e85a:	e7f3      	b.n	e844 <complete_module+0x9c>
            first_match = shell_modules[i].name;
    e85c:	46d8      	mov	r8, fp
    e85e:	e7dc      	b.n	e81a <complete_module+0x72>
    if (!first_match) {
    e860:	f1b8 0f00 	cmp.w	r8, #0
    e864:	d0c3      	beq.n	e7ee <complete_module+0x46>
    if (common_chars >= 0) {
    e866:	2f00      	cmp	r7, #0
    e868:	da0e      	bge.n	e888 <complete_module+0xe0>
        common_chars = strlen(first_match);
    e86a:	4640      	mov	r0, r8
    e86c:	f7fd fc46 	bl	c0fc <strlen>
    e870:	4607      	mov	r7, r0
        space = 1;
    e872:	2401      	movs	r4, #1
    for (i = module_len; i < common_chars; i++) {
    e874:	42bd      	cmp	r5, r7
    e876:	da0f      	bge.n	e898 <complete_module+0xf0>
        if (!append_char(line, first_match[i])) {
    e878:	f818 1005 	ldrb.w	r1, [r8, r5]
    e87c:	4648      	mov	r0, r9
    e87e:	47d0      	blx	sl
    e880:	2800      	cmp	r0, #0
    e882:	d0b4      	beq.n	e7ee <complete_module+0x46>
    for (i = module_len; i < common_chars; i++) {
    e884:	3501      	adds	r5, #1
    e886:	e7f5      	b.n	e874 <complete_module+0xcc>
        print_prompt();
    e888:	f7ff ff76 	bl	e778 <print_prompt>
        console_printf("%s", line);
    e88c:	4649      	mov	r1, r9
    e88e:	4809      	ldr	r0, [pc, #36]	; (e8b4 <complete_module+0x10c>)
    e890:	f7ff fba2 	bl	dfd8 <console_printf>
    int common_chars = -1, space = 0;
    e894:	2400      	movs	r4, #0
    e896:	e7ed      	b.n	e874 <complete_module+0xcc>
    if (space) {
    e898:	2c00      	cmp	r4, #0
    e89a:	d0a8      	beq.n	e7ee <complete_module+0x46>
        append_char(line, ' ');
    e89c:	2120      	movs	r1, #32
    e89e:	4648      	mov	r0, r9
    e8a0:	47d0      	blx	sl
    e8a2:	e7a4      	b.n	e7ee <complete_module+0x46>
    e8a4:	00021d7c 	.word	0x00021d7c
    e8a8:	20006520 	.word	0x20006520
    e8ac:	00021f8c 	.word	0x00021f8c
    e8b0:	200064f4 	.word	0x200064f4
    e8b4:	00021c30 	.word	0x00021c30

0000e8b8 <complete_command>:
{
    e8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8bc:	b083      	sub	sp, #12
    e8be:	9001      	str	r0, [sp, #4]
    e8c0:	468b      	mov	fp, r1
    e8c2:	4615      	mov	r5, r2
    commands = shell_modules[module_idx].commands;
    e8c4:	4a3a      	ldr	r2, [pc, #232]	; (e9b0 <complete_command+0xf8>)
    e8c6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    e8ca:	6857      	ldr	r7, [r2, #4]
    int i, j, common_chars = -1;
    e8cc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    for (i = 0; commands[i].sc_cmd; i++) {
    e8d0:	f04f 0900 	mov.w	r9, #0
    int match_count = 0;
    e8d4:	46ca      	mov	sl, r9
    int first_match = -1;
    e8d6:	46b0      	mov	r8, r6
    for (i = 0; commands[i].sc_cmd; i++) {
    e8d8:	e006      	b.n	e8e8 <complete_command+0x30>
            common_chars = strlen(commands[i].sc_cmd);
    e8da:	4620      	mov	r0, r4
    e8dc:	f7fd fc0e 	bl	c0fc <strlen>
    e8e0:	4606      	mov	r6, r0
            first_match = i;
    e8e2:	46c8      	mov	r8, r9
    for (i = 0; commands[i].sc_cmd; i++) {
    e8e4:	f109 0901 	add.w	r9, r9, #1
    e8e8:	eb07 1309 	add.w	r3, r7, r9, lsl #4
    e8ec:	689c      	ldr	r4, [r3, #8]
    e8ee:	b1ec      	cbz	r4, e92c <complete_command+0x74>
        if (0 != strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
    e8f0:	462a      	mov	r2, r5
    e8f2:	4621      	mov	r1, r4
    e8f4:	4658      	mov	r0, fp
    e8f6:	f00c f841 	bl	1a97c <strncmp>
    e8fa:	2800      	cmp	r0, #0
    e8fc:	d1f2      	bne.n	e8e4 <complete_command+0x2c>
        match_count++;
    e8fe:	f10a 0a01 	add.w	sl, sl, #1
        if (match_count == 1) {
    e902:	f1ba 0f01 	cmp.w	sl, #1
    e906:	d0e8      	beq.n	e8da <complete_command+0x22>
        if (common_chars <= command_len) {
    e908:	42ae      	cmp	r6, r5
    e90a:	ddeb      	ble.n	e8e4 <complete_command+0x2c>
        for (j = command_len; j < common_chars; j++) {
    e90c:	462b      	mov	r3, r5
    e90e:	42b3      	cmp	r3, r6
    e910:	da08      	bge.n	e924 <complete_command+0x6c>
            if (commands[first_match].sc_cmd[j] != commands[i].sc_cmd[j]) {
    e912:	eb07 1208 	add.w	r2, r7, r8, lsl #4
    e916:	6892      	ldr	r2, [r2, #8]
    e918:	5cd1      	ldrb	r1, [r2, r3]
    e91a:	5ce2      	ldrb	r2, [r4, r3]
    e91c:	4291      	cmp	r1, r2
    e91e:	d103      	bne.n	e928 <complete_command+0x70>
        for (j = command_len; j < common_chars; j++) {
    e920:	3301      	adds	r3, #1
    e922:	e7f4      	b.n	e90e <complete_command+0x56>
        common_chars = j;
    e924:	461e      	mov	r6, r3
    e926:	e7dd      	b.n	e8e4 <complete_command+0x2c>
    e928:	461e      	mov	r6, r3
    e92a:	e7db      	b.n	e8e4 <complete_command+0x2c>
    if (match_count == 0) {
    e92c:	f1ba 0f00 	cmp.w	sl, #0
    e930:	d03b      	beq.n	e9aa <complete_command+0xf2>
    if (common_chars > command_len) {
    e932:	42ae      	cmp	r6, r5
    e934:	dd15      	ble.n	e962 <complete_command+0xaa>
    e936:	9c01      	ldr	r4, [sp, #4]
    e938:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
        for (i = command_len; i < common_chars; i++) {
    e93c:	42b5      	cmp	r5, r6
    e93e:	da08      	bge.n	e952 <complete_command+0x9a>
            if (!append_char(line, (uint8_t)commands[first_match].sc_cmd[i])) {
    e940:	eb07 1308 	add.w	r3, r7, r8, lsl #4
    e944:	689b      	ldr	r3, [r3, #8]
    e946:	5d59      	ldrb	r1, [r3, r5]
    e948:	4620      	mov	r0, r4
    e94a:	47c8      	blx	r9
    e94c:	b368      	cbz	r0, e9aa <complete_command+0xf2>
        for (i = command_len; i < common_chars; i++) {
    e94e:	3501      	adds	r5, #1
    e950:	e7f4      	b.n	e93c <complete_command+0x84>
        if (match_count == 1) {
    e952:	f1ba 0f01 	cmp.w	sl, #1
    e956:	d128      	bne.n	e9aa <complete_command+0xf2>
            append_char(line, ' ');
    e958:	2120      	movs	r1, #32
    e95a:	9801      	ldr	r0, [sp, #4]
    e95c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e95e:	4798      	blx	r3
        return;
    e960:	e023      	b.n	e9aa <complete_command+0xf2>
    console_printf("\n");
    e962:	4814      	ldr	r0, [pc, #80]	; (e9b4 <complete_command+0xfc>)
    e964:	f7ff fb38 	bl	dfd8 <console_printf>
    console_printf("%s\n", commands[first_match].sc_cmd);
    e968:	eb07 1308 	add.w	r3, r7, r8, lsl #4
    e96c:	6899      	ldr	r1, [r3, #8]
    e96e:	4812      	ldr	r0, [pc, #72]	; (e9b8 <complete_command+0x100>)
    e970:	f7ff fb32 	bl	dfd8 <console_printf>
    for (i = first_match + 1; commands[i].sc_cmd; i++) {
    e974:	f108 0801 	add.w	r8, r8, #1
    e978:	e001      	b.n	e97e <complete_command+0xc6>
    e97a:	f108 0801 	add.w	r8, r8, #1
    e97e:	eb07 1308 	add.w	r3, r7, r8, lsl #4
    e982:	689c      	ldr	r4, [r3, #8]
    e984:	b15c      	cbz	r4, e99e <complete_command+0xe6>
        if (0 == strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
    e986:	462a      	mov	r2, r5
    e988:	4621      	mov	r1, r4
    e98a:	4658      	mov	r0, fp
    e98c:	f00b fff6 	bl	1a97c <strncmp>
    e990:	2800      	cmp	r0, #0
    e992:	d1f2      	bne.n	e97a <complete_command+0xc2>
            console_printf("%s\n", commands[i].sc_cmd);
    e994:	4621      	mov	r1, r4
    e996:	4808      	ldr	r0, [pc, #32]	; (e9b8 <complete_command+0x100>)
    e998:	f7ff fb1e 	bl	dfd8 <console_printf>
    e99c:	e7ed      	b.n	e97a <complete_command+0xc2>
    print_prompt();
    e99e:	f7ff feeb 	bl	e778 <print_prompt>
    console_printf("%s", line);
    e9a2:	9901      	ldr	r1, [sp, #4]
    e9a4:	4805      	ldr	r0, [pc, #20]	; (e9bc <complete_command+0x104>)
    e9a6:	f7ff fb17 	bl	dfd8 <console_printf>
}
    e9aa:	b003      	add	sp, #12
    e9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e9b0:	20006520 	.word	0x20006520
    e9b4:	00021d7c 	.word	0x00021d7c
    e9b8:	00021f8c 	.word	0x00021f8c
    e9bc:	00021c30 	.word	0x00021c30

0000e9c0 <get_command_from_module>:
{
    e9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e9c4:	4680      	mov	r8, r0
    e9c6:	460d      	mov	r5, r1
    e9c8:	4616      	mov	r6, r2
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
    e9ca:	2400      	movs	r4, #0
    e9cc:	e000      	b.n	e9d0 <get_command_from_module+0x10>
    e9ce:	3401      	adds	r4, #1
    e9d0:	4b0c      	ldr	r3, [pc, #48]	; (ea04 <get_command_from_module+0x44>)
    e9d2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    e9d6:	685b      	ldr	r3, [r3, #4]
    e9d8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    e9dc:	689f      	ldr	r7, [r3, #8]
    e9de:	b167      	cbz	r7, e9fa <get_command_from_module+0x3a>
        if (strlen(shell_module->commands[i].sc_cmd) != len) {
    e9e0:	4638      	mov	r0, r7
    e9e2:	f7fd fb8b 	bl	c0fc <strlen>
    e9e6:	42a8      	cmp	r0, r5
    e9e8:	d1f1      	bne.n	e9ce <get_command_from_module+0xe>
        if (!strncmp(command, shell_module->commands[i].sc_cmd, len)) {
    e9ea:	462a      	mov	r2, r5
    e9ec:	4639      	mov	r1, r7
    e9ee:	4640      	mov	r0, r8
    e9f0:	f00b ffc4 	bl	1a97c <strncmp>
    e9f4:	2800      	cmp	r0, #0
    e9f6:	d1ea      	bne.n	e9ce <get_command_from_module+0xe>
    e9f8:	e001      	b.n	e9fe <get_command_from_module+0x3e>
    return -1;
    e9fa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
    e9fe:	4620      	mov	r0, r4
    ea00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea04:	20006520 	.word	0x20006520

0000ea08 <complete_param>:
{
    ea08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea0c:	b083      	sub	sp, #12
    ea0e:	9001      	str	r0, [sp, #4]
    ea10:	9100      	str	r1, [sp, #0]
    ea12:	4691      	mov	r9, r2
    command = &shell_modules[module_idx].commands[command_idx];
    ea14:	4a34      	ldr	r2, [pc, #208]	; (eae8 <complete_param+0xe0>)
    ea16:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    ea1a:	6857      	ldr	r7, [r2, #4]
    ea1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ea1e:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    if (!(command->help && command->help->params)) {
    ea22:	68fb      	ldr	r3, [r7, #12]
    ea24:	2b00      	cmp	r3, #0
    ea26:	d05c      	beq.n	eae2 <complete_param+0xda>
    ea28:	689b      	ldr	r3, [r3, #8]
    ea2a:	2b00      	cmp	r3, #0
    ea2c:	d059      	beq.n	eae2 <complete_param+0xda>
    int i, j, common_chars = -1;
    ea2e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; command->help->params[i].param_name; i++) {
    ea32:	f04f 0a00 	mov.w	sl, #0
    const char *first_match = NULL;
    ea36:	4656      	mov	r6, sl
    ea38:	e015      	b.n	ea66 <complete_param+0x5e>
            console_printf("\n");
    ea3a:	482c      	ldr	r0, [pc, #176]	; (eaec <complete_param+0xe4>)
    ea3c:	f7ff facc 	bl	dfd8 <console_printf>
            console_printf("%s\n", first_match);
    ea40:	4631      	mov	r1, r6
    ea42:	482b      	ldr	r0, [pc, #172]	; (eaf0 <complete_param+0xe8>)
    ea44:	f7ff fac8 	bl	dfd8 <console_printf>
            common_chars = strlen(first_match);
    ea48:	4630      	mov	r0, r6
    ea4a:	f7fd fb57 	bl	c0fc <strlen>
    ea4e:	4605      	mov	r5, r0
        for (j = 0; j < common_chars; j++) {
    ea50:	e01d      	b.n	ea8e <complete_param+0x86>
        console_printf("%s\n", command->help->params[i].param_name);
    ea52:	68fb      	ldr	r3, [r7, #12]
    ea54:	689b      	ldr	r3, [r3, #8]
    ea56:	f853 1008 	ldr.w	r1, [r3, r8]
    ea5a:	4825      	ldr	r0, [pc, #148]	; (eaf0 <complete_param+0xe8>)
    ea5c:	f7ff fabc 	bl	dfd8 <console_printf>
        common_chars = j;
    ea60:	4625      	mov	r5, r4
    for (i = 0; command->help->params[i].param_name; i++) {
    ea62:	f10a 0a01 	add.w	sl, sl, #1
    ea66:	68fb      	ldr	r3, [r7, #12]
    ea68:	689b      	ldr	r3, [r3, #8]
    ea6a:	ea4f 08ca 	mov.w	r8, sl, lsl #3
    ea6e:	f853 b03a 	ldr.w	fp, [r3, sl, lsl #3]
    ea72:	f1bb 0f00 	cmp.w	fp, #0
    ea76:	d018      	beq.n	eaaa <complete_param+0xa2>
        if (strncmp(param_prefix,
    ea78:	464a      	mov	r2, r9
    ea7a:	4659      	mov	r1, fp
    ea7c:	9800      	ldr	r0, [sp, #0]
    ea7e:	f00b ff7d 	bl	1a97c <strncmp>
    ea82:	4604      	mov	r4, r0
    ea84:	2800      	cmp	r0, #0
    ea86:	d1ec      	bne.n	ea62 <complete_param+0x5a>
        if (!first_match) {
    ea88:	b16e      	cbz	r6, eaa6 <complete_param+0x9e>
        if (first_match && (common_chars < 0)) {
    ea8a:	2d00      	cmp	r5, #0
    ea8c:	dbd5      	blt.n	ea3a <complete_param+0x32>
        for (j = 0; j < common_chars; j++) {
    ea8e:	42ac      	cmp	r4, r5
    ea90:	dadf      	bge.n	ea52 <complete_param+0x4a>
            if (first_match[j] != command->help->params[i].param_name[j]) {
    ea92:	5d32      	ldrb	r2, [r6, r4]
    ea94:	68fb      	ldr	r3, [r7, #12]
    ea96:	689b      	ldr	r3, [r3, #8]
    ea98:	f853 3008 	ldr.w	r3, [r3, r8]
    ea9c:	5d1b      	ldrb	r3, [r3, r4]
    ea9e:	429a      	cmp	r2, r3
    eaa0:	d1d7      	bne.n	ea52 <complete_param+0x4a>
        for (j = 0; j < common_chars; j++) {
    eaa2:	3401      	adds	r4, #1
    eaa4:	e7f3      	b.n	ea8e <complete_param+0x86>
            first_match = command->help->params[i].param_name;
    eaa6:	465e      	mov	r6, fp
    eaa8:	e7db      	b.n	ea62 <complete_param+0x5a>
    if (!first_match) {
    eaaa:	b1d6      	cbz	r6, eae2 <complete_param+0xda>
    if (common_chars >= 0) {
    eaac:	2d00      	cmp	r5, #0
    eaae:	da0f      	bge.n	ead0 <complete_param+0xc8>
        common_chars = strlen(first_match);
    eab0:	4630      	mov	r0, r6
    eab2:	f7fd fb23 	bl	c0fc <strlen>
    eab6:	4605      	mov	r5, r0
    for (i = param_len; i < common_chars; i++) {
    eab8:	9c01      	ldr	r4, [sp, #4]
    eaba:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    eabc:	45a9      	cmp	r9, r5
    eabe:	da10      	bge.n	eae2 <complete_param+0xda>
        if (!append_char(line, first_match[i])) {
    eac0:	f816 1009 	ldrb.w	r1, [r6, r9]
    eac4:	4620      	mov	r0, r4
    eac6:	47b8      	blx	r7
    eac8:	b158      	cbz	r0, eae2 <complete_param+0xda>
    for (i = param_len; i < common_chars; i++) {
    eaca:	f109 0901 	add.w	r9, r9, #1
    eace:	e7f5      	b.n	eabc <complete_param+0xb4>
        print_prompt();
    ead0:	f7ff fe52 	bl	e778 <print_prompt>
        console_printf("%s", line);
    ead4:	9c01      	ldr	r4, [sp, #4]
    ead6:	4621      	mov	r1, r4
    ead8:	4806      	ldr	r0, [pc, #24]	; (eaf4 <complete_param+0xec>)
    eada:	f7ff fa7d 	bl	dfd8 <console_printf>
    eade:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    eae0:	e7ec      	b.n	eabc <complete_param+0xb4>
}
    eae2:	b003      	add	sp, #12
    eae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eae8:	20006520 	.word	0x20006520
    eaec:	00021d7c 	.word	0x00021d7c
    eaf0:	00021f8c 	.word	0x00021f8c
    eaf4:	00021c30 	.word	0x00021c30

0000eaf8 <get_token>:
{
    eaf8:	b570      	push	{r4, r5, r6, lr}
    eafa:	4605      	mov	r5, r0
    eafc:	460e      	mov	r6, r1
    char *str = *cur;
    eafe:	6804      	ldr	r4, [r0, #0]
    *null_terminated = 0;
    eb00:	2300      	movs	r3, #0
    eb02:	600b      	str	r3, [r1, #0]
    while (*str && *str == ' ') {
    eb04:	e000      	b.n	eb08 <get_token+0x10>
        str++;
    eb06:	3401      	adds	r4, #1
    while (*str && *str == ' ') {
    eb08:	7823      	ldrb	r3, [r4, #0]
    eb0a:	2b20      	cmp	r3, #32
    eb0c:	d0fb      	beq.n	eb06 <get_token+0xe>
    if (*str == '\0') {
    eb0e:	b13b      	cbz	r3, eb20 <get_token+0x28>
    *cur = str;
    eb10:	602c      	str	r4, [r5, #0]
    str = strchr(str, ' ');
    eb12:	2120      	movs	r1, #32
    eb14:	4620      	mov	r0, r4
    eb16:	f00b ff1b 	bl	1a950 <strchr>
    if (str == NULL) {
    eb1a:	b128      	cbz	r0, eb28 <get_token+0x30>
    return str - *cur;
    eb1c:	1b00      	subs	r0, r0, r4
}
    eb1e:	bd70      	pop	{r4, r5, r6, pc}
        *null_terminated = 1;
    eb20:	2301      	movs	r3, #1
    eb22:	6033      	str	r3, [r6, #0]
        return 0;
    eb24:	2000      	movs	r0, #0
    eb26:	e7fa      	b.n	eb1e <get_token+0x26>
        *null_terminated = 1;
    eb28:	2301      	movs	r3, #1
    eb2a:	6033      	str	r3, [r6, #0]
        return strlen(*cur);
    eb2c:	6828      	ldr	r0, [r5, #0]
    eb2e:	f7fd fae5 	bl	c0fc <strlen>
    eb32:	e7f4      	b.n	eb1e <get_token+0x26>

0000eb34 <complete_select>:

static void
complete_select(char *line, char *cur,
                int tok_len, console_append_char_cb append_char)
{
    eb34:	b530      	push	{r4, r5, lr}
    eb36:	b085      	sub	sp, #20
    eb38:	4604      	mov	r4, r0
    eb3a:	9101      	str	r1, [sp, #4]
    eb3c:	461d      	mov	r5, r3
    int null_terminated = 0;
    eb3e:	2000      	movs	r0, #0
    eb40:	9003      	str	r0, [sp, #12]

    cur += tok_len + 1;
    eb42:	3201      	adds	r2, #1
    eb44:	4411      	add	r1, r2
    eb46:	9101      	str	r1, [sp, #4]
    tok_len = get_token(&cur, &null_terminated);
    eb48:	a903      	add	r1, sp, #12
    eb4a:	a801      	add	r0, sp, #4
    eb4c:	f7ff ffd4 	bl	eaf8 <get_token>
    if (tok_len == 0) {
    eb50:	b9a0      	cbnz	r0, eb7c <complete_select+0x48>
        if (default_module != -1) {
    eb52:	4b12      	ldr	r3, [pc, #72]	; (eb9c <complete_select+0x68>)
    eb54:	681b      	ldr	r3, [r3, #0]
    eb56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    eb5a:	d001      	beq.n	eb60 <complete_select+0x2c>
    if (null_terminated) {
        if (default_module == -1) {
            complete_module(line, cur, tok_len, append_char);
        }
    }
}
    eb5c:	b005      	add	sp, #20
    eb5e:	bd30      	pop	{r4, r5, pc}
        console_printf("\n");
    eb60:	480f      	ldr	r0, [pc, #60]	; (eba0 <complete_select+0x6c>)
    eb62:	f7ff fa39 	bl	dfd8 <console_printf>
        print_modules(streamer_console_get());
    eb66:	f002 f827 	bl	10bb8 <streamer_console_get>
    eb6a:	f7ff fc35 	bl	e3d8 <print_modules>
        print_prompt();
    eb6e:	f7ff fe03 	bl	e778 <print_prompt>
        console_printf("%s", line);
    eb72:	4621      	mov	r1, r4
    eb74:	480b      	ldr	r0, [pc, #44]	; (eba4 <complete_select+0x70>)
    eb76:	f7ff fa2f 	bl	dfd8 <console_printf>
        return;
    eb7a:	e7ef      	b.n	eb5c <complete_select+0x28>
    eb7c:	4602      	mov	r2, r0
    if (null_terminated) {
    eb7e:	9b03      	ldr	r3, [sp, #12]
    eb80:	2b00      	cmp	r3, #0
    eb82:	d0eb      	beq.n	eb5c <complete_select+0x28>
        if (default_module == -1) {
    eb84:	4b05      	ldr	r3, [pc, #20]	; (eb9c <complete_select+0x68>)
    eb86:	681b      	ldr	r3, [r3, #0]
    eb88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    eb8c:	d1e6      	bne.n	eb5c <complete_select+0x28>
            complete_module(line, cur, tok_len, append_char);
    eb8e:	462b      	mov	r3, r5
    eb90:	9901      	ldr	r1, [sp, #4]
    eb92:	4620      	mov	r0, r4
    eb94:	f7ff fe08 	bl	e7a8 <complete_module>
    eb98:	e7e0      	b.n	eb5c <complete_select+0x28>
    eb9a:	bf00      	nop
    eb9c:	200001c0 	.word	0x200001c0
    eba0:	00021d7c 	.word	0x00021d7c
    eba4:	00021c30 	.word	0x00021c30

0000eba8 <line2argv>:
{
    eba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ebaa:	460d      	mov	r5, r1
    ebac:	4616      	mov	r6, r2
    ebae:	461f      	mov	r7, r3
    if (!strlen(str)) {
    ebb0:	7803      	ldrb	r3, [r0, #0]
    ebb2:	b91b      	cbnz	r3, ebbc <line2argv+0x14>
        return 0;
    ebb4:	2400      	movs	r4, #0
}
    ebb6:	4620      	mov	r0, r4
    ebb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        str++;
    ebba:	3001      	adds	r0, #1
    while (*str && *str == ' ') {
    ebbc:	7804      	ldrb	r4, [r0, #0]
    ebbe:	2c20      	cmp	r4, #32
    ebc0:	d0fb      	beq.n	ebba <line2argv+0x12>
    if (!*str) {
    ebc2:	b314      	cbz	r4, ec0a <line2argv+0x62>
    argv[argc++] = str;
    ebc4:	6028      	str	r0, [r5, #0]
    ebc6:	2401      	movs	r4, #1
    while ((str = strchr(str, ' '))) {
    ebc8:	e00a      	b.n	ebe0 <line2argv+0x38>
            str++;
    ebca:	3001      	adds	r0, #1
        while (*str && *str == ' ') {
    ebcc:	7803      	ldrb	r3, [r0, #0]
    ebce:	2b20      	cmp	r3, #32
    ebd0:	d0fb      	beq.n	ebca <line2argv+0x22>
        if (!*str) {
    ebd2:	b1b3      	cbz	r3, ec02 <line2argv+0x5a>
        argv[argc++] = str;
    ebd4:	1c63      	adds	r3, r4, #1
    ebd6:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
        if (argc == size) {
    ebda:	42b3      	cmp	r3, r6
    ebdc:	d00a      	beq.n	ebf4 <line2argv+0x4c>
        argv[argc++] = str;
    ebde:	461c      	mov	r4, r3
    while ((str = strchr(str, ' '))) {
    ebe0:	2120      	movs	r1, #32
    ebe2:	f00b feb5 	bl	1a950 <strchr>
    ebe6:	4603      	mov	r3, r0
    ebe8:	b158      	cbz	r0, ec02 <line2argv+0x5a>
        *str++ = '\0';
    ebea:	4618      	mov	r0, r3
    ebec:	2300      	movs	r3, #0
    ebee:	f800 3b01 	strb.w	r3, [r0], #1
        while (*str && *str == ' ') {
    ebf2:	e7eb      	b.n	ebcc <line2argv+0x24>
            streamer_printf(streamer, "Too many parameters (max %zu)\n",
    ebf4:	1e72      	subs	r2, r6, #1
    ebf6:	4906      	ldr	r1, [pc, #24]	; (ec10 <line2argv+0x68>)
    ebf8:	4638      	mov	r0, r7
    ebfa:	f001 ffc2 	bl	10b82 <streamer_printf>
            return 0;
    ebfe:	2400      	movs	r4, #0
    ec00:	e7d9      	b.n	ebb6 <line2argv+0xe>
    argv[argc] = NULL;
    ec02:	2300      	movs	r3, #0
    ec04:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
    return argc;
    ec08:	e7d5      	b.n	ebb6 <line2argv+0xe>
        return 0;
    ec0a:	2400      	movs	r4, #0
    ec0c:	e7d3      	b.n	ebb6 <line2argv+0xe>
    ec0e:	bf00      	nop
    ec10:	00021dec 	.word	0x00021dec

0000ec14 <get_last_token>:
{
    ec14:	b510      	push	{r4, lr}
    ec16:	4604      	mov	r4, r0
    *cur = strrchr(*cur, ' ');
    ec18:	2120      	movs	r1, #32
    ec1a:	6800      	ldr	r0, [r0, #0]
    ec1c:	f00b febf 	bl	1a99e <strrchr>
    ec20:	6020      	str	r0, [r4, #0]
    if (*cur == NULL) {
    ec22:	b120      	cbz	r0, ec2e <get_last_token+0x1a>
    (*cur)++;
    ec24:	3001      	adds	r0, #1
    ec26:	6020      	str	r0, [r4, #0]
    return strlen(*cur);
    ec28:	f7fd fa68 	bl	c0fc <strlen>
}
    ec2c:	bd10      	pop	{r4, pc}
        return 0;
    ec2e:	2000      	movs	r0, #0
    ec30:	e7fc      	b.n	ec2c <get_last_token+0x18>
	...

0000ec34 <completion>:

static void
completion(char *line, console_append_char_cb append_char)
{
    ec34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ec38:	b085      	sub	sp, #20
    ec3a:	4605      	mov	r5, r0
    ec3c:	460c      	mov	r4, r1
    char *cur;
    int tok_len;
    int module, command;
    int null_terminated = 0;
    ec3e:	2100      	movs	r1, #0
    ec40:	9102      	str	r1, [sp, #8]

    /*
     * line to completion is not ended by '\0' as the line that gets from
     * os_eventq_get function
     */
    if (!append_char(line, '\0')) {
    ec42:	47a0      	blx	r4
    ec44:	b910      	cbnz	r0, ec4c <completion+0x18>
        return;
    }
    complete_param(line, cur, tok_len,
                   module, command, append_char);
    return;
}
    ec46:	b005      	add	sp, #20
    ec48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cur = line;
    ec4c:	9503      	str	r5, [sp, #12]
    tok_len = get_token(&cur, &null_terminated);
    ec4e:	a902      	add	r1, sp, #8
    ec50:	a803      	add	r0, sp, #12
    ec52:	f7ff ff51 	bl	eaf8 <get_token>
    if (tok_len == 0) {
    ec56:	4606      	mov	r6, r0
    ec58:	b168      	cbz	r0, ec76 <completion+0x42>
    if (null_terminated) {
    ec5a:	9b02      	ldr	r3, [sp, #8]
    ec5c:	b363      	cbz	r3, ecb8 <completion+0x84>
        if (default_module == -1) {
    ec5e:	4b4d      	ldr	r3, [pc, #308]	; (ed94 <completion+0x160>)
    ec60:	681b      	ldr	r3, [r3, #0]
    ec62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ec66:	d020      	beq.n	ecaa <completion+0x76>
        complete_command(line, cur, tok_len,
    ec68:	9400      	str	r4, [sp, #0]
    ec6a:	4602      	mov	r2, r0
    ec6c:	9903      	ldr	r1, [sp, #12]
    ec6e:	4628      	mov	r0, r5
    ec70:	f7ff fe22 	bl	e8b8 <complete_command>
        return;
    ec74:	e7e7      	b.n	ec46 <completion+0x12>
        console_printf("\n");
    ec76:	4848      	ldr	r0, [pc, #288]	; (ed98 <completion+0x164>)
    ec78:	f7ff f9ae 	bl	dfd8 <console_printf>
        if (default_module == -1) {
    ec7c:	4b45      	ldr	r3, [pc, #276]	; (ed94 <completion+0x160>)
    ec7e:	681c      	ldr	r4, [r3, #0]
    ec80:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    ec84:	d00c      	beq.n	eca0 <completion+0x6c>
            print_module_commands(default_module, streamer_console_get());
    ec86:	f001 ff97 	bl	10bb8 <streamer_console_get>
    ec8a:	4601      	mov	r1, r0
    ec8c:	4620      	mov	r0, r4
    ec8e:	f7ff fb6d 	bl	e36c <print_module_commands>
        print_prompt();
    ec92:	f7ff fd71 	bl	e778 <print_prompt>
        console_printf("%s", line);
    ec96:	4629      	mov	r1, r5
    ec98:	4840      	ldr	r0, [pc, #256]	; (ed9c <completion+0x168>)
    ec9a:	f7ff f99d 	bl	dfd8 <console_printf>
        return;
    ec9e:	e7d2      	b.n	ec46 <completion+0x12>
            print_modules(streamer_console_get());
    eca0:	f001 ff8a 	bl	10bb8 <streamer_console_get>
    eca4:	f7ff fb98 	bl	e3d8 <print_modules>
    eca8:	e7f3      	b.n	ec92 <completion+0x5e>
            complete_module(line, cur, tok_len, append_char);
    ecaa:	4623      	mov	r3, r4
    ecac:	4602      	mov	r2, r0
    ecae:	9903      	ldr	r1, [sp, #12]
    ecb0:	4628      	mov	r0, r5
    ecb2:	f7ff fd79 	bl	e7a8 <complete_module>
            return;
    ecb6:	e7c6      	b.n	ec46 <completion+0x12>
    if (strncmp("select", cur, tok_len) == 0) {
    ecb8:	f8dd 800c 	ldr.w	r8, [sp, #12]
    ecbc:	4602      	mov	r2, r0
    ecbe:	4641      	mov	r1, r8
    ecc0:	4837      	ldr	r0, [pc, #220]	; (eda0 <completion+0x16c>)
    ecc2:	f00b fe5b 	bl	1a97c <strncmp>
    ecc6:	b300      	cbz	r0, ed0a <completion+0xd6>
    if (default_module != -1) {
    ecc8:	4b32      	ldr	r3, [pc, #200]	; (ed94 <completion+0x160>)
    ecca:	681f      	ldr	r7, [r3, #0]
    eccc:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
    ecd0:	d022      	beq.n	ed18 <completion+0xe4>
    command = get_command_from_module(cur, tok_len, module);
    ecd2:	f8dd 900c 	ldr.w	r9, [sp, #12]
    ecd6:	463a      	mov	r2, r7
    ecd8:	4631      	mov	r1, r6
    ecda:	4648      	mov	r0, r9
    ecdc:	f7ff fe70 	bl	e9c0 <get_command_from_module>
    ece0:	4680      	mov	r8, r0
    if (command == -1) {
    ece2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ece6:	d0ae      	beq.n	ec46 <completion+0x12>
    cur += tok_len;
    ece8:	444e      	add	r6, r9
    ecea:	9603      	str	r6, [sp, #12]
    tok_len = get_last_token(&cur);
    ecec:	a803      	add	r0, sp, #12
    ecee:	f7ff ff91 	bl	ec14 <get_last_token>
    if (tok_len == 0) {
    ecf2:	4602      	mov	r2, r0
    ecf4:	2800      	cmp	r0, #0
    ecf6:	d03b      	beq.n	ed70 <completion+0x13c>
    complete_param(line, cur, tok_len,
    ecf8:	9401      	str	r4, [sp, #4]
    ecfa:	f8cd 8000 	str.w	r8, [sp]
    ecfe:	463b      	mov	r3, r7
    ed00:	9903      	ldr	r1, [sp, #12]
    ed02:	4628      	mov	r0, r5
    ed04:	f7ff fe80 	bl	ea08 <complete_param>
    return;
    ed08:	e79d      	b.n	ec46 <completion+0x12>
        complete_select(line, cur, tok_len, append_char);
    ed0a:	4623      	mov	r3, r4
    ed0c:	4632      	mov	r2, r6
    ed0e:	4641      	mov	r1, r8
    ed10:	4628      	mov	r0, r5
    ed12:	f7ff ff0f 	bl	eb34 <complete_select>
        return;
    ed16:	e796      	b.n	ec46 <completion+0x12>
        module = get_destination_module(cur, tok_len);
    ed18:	4631      	mov	r1, r6
    ed1a:	4640      	mov	r0, r8
    ed1c:	f7ff fb96 	bl	e44c <get_destination_module>
    ed20:	4607      	mov	r7, r0
        if (module == -1) {
    ed22:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ed26:	d08e      	beq.n	ec46 <completion+0x12>
        cur += tok_len + 1;
    ed28:	1c73      	adds	r3, r6, #1
    ed2a:	4443      	add	r3, r8
    ed2c:	9303      	str	r3, [sp, #12]
        tok_len = get_token(&cur, &null_terminated);
    ed2e:	a902      	add	r1, sp, #8
    ed30:	a803      	add	r0, sp, #12
    ed32:	f7ff fee1 	bl	eaf8 <get_token>
        if (tok_len == 0) {
    ed36:	4606      	mov	r6, r0
    ed38:	b150      	cbz	r0, ed50 <completion+0x11c>
        if (null_terminated) {
    ed3a:	9b02      	ldr	r3, [sp, #8]
    ed3c:	2b00      	cmp	r3, #0
    ed3e:	d0c8      	beq.n	ecd2 <completion+0x9e>
            complete_command(line, cur, tok_len,
    ed40:	9400      	str	r4, [sp, #0]
    ed42:	463b      	mov	r3, r7
    ed44:	4602      	mov	r2, r0
    ed46:	9903      	ldr	r1, [sp, #12]
    ed48:	4628      	mov	r0, r5
    ed4a:	f7ff fdb5 	bl	e8b8 <complete_command>
            return;
    ed4e:	e77a      	b.n	ec46 <completion+0x12>
            console_printf("\n");
    ed50:	4811      	ldr	r0, [pc, #68]	; (ed98 <completion+0x164>)
    ed52:	f7ff f941 	bl	dfd8 <console_printf>
            print_module_commands(module, streamer_console_get());
    ed56:	f001 ff2f 	bl	10bb8 <streamer_console_get>
    ed5a:	4601      	mov	r1, r0
    ed5c:	4638      	mov	r0, r7
    ed5e:	f7ff fb05 	bl	e36c <print_module_commands>
            print_prompt();
    ed62:	f7ff fd09 	bl	e778 <print_prompt>
            console_printf("%s", line);
    ed66:	4629      	mov	r1, r5
    ed68:	480c      	ldr	r0, [pc, #48]	; (ed9c <completion+0x168>)
    ed6a:	f7ff f935 	bl	dfd8 <console_printf>
            return;
    ed6e:	e76a      	b.n	ec46 <completion+0x12>
        console_printf("\n");
    ed70:	4809      	ldr	r0, [pc, #36]	; (ed98 <completion+0x164>)
    ed72:	f7ff f931 	bl	dfd8 <console_printf>
        print_command_params(module, command, streamer_console_get());
    ed76:	f001 ff1f 	bl	10bb8 <streamer_console_get>
    ed7a:	4602      	mov	r2, r0
    ed7c:	4641      	mov	r1, r8
    ed7e:	4638      	mov	r0, r7
    ed80:	f7ff fb42 	bl	e408 <print_command_params>
        print_prompt();
    ed84:	f7ff fcf8 	bl	e778 <print_prompt>
        console_printf("%s", line);
    ed88:	4629      	mov	r1, r5
    ed8a:	4804      	ldr	r0, [pc, #16]	; (ed9c <completion+0x168>)
    ed8c:	f7ff f924 	bl	dfd8 <console_printf>
        return;
    ed90:	e759      	b.n	ec46 <completion+0x12>
    ed92:	bf00      	nop
    ed94:	200001c0 	.word	0x200001c0
    ed98:	00021d7c 	.word	0x00021d7c
    ed9c:	00021c30 	.word	0x00021c30
    eda0:	00021d40 	.word	0x00021d40

0000eda4 <shell_avail_queue_init>:
    }
}

static void
shell_avail_queue_init(void)
{
    eda4:	b510      	push	{r4, lr}
    int i;

    for (i = 0; i < MYNEWT_VAL(SHELL_MAX_CMD_QUEUED); i++) {
    eda6:	2400      	movs	r4, #0
    eda8:	e00b      	b.n	edc2 <shell_avail_queue_init+0x1e>
        shell_console_ev[i].ev_cb = shell;
    edaa:	4807      	ldr	r0, [pc, #28]	; (edc8 <shell_avail_queue_init+0x24>)
    edac:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    edb0:	4b06      	ldr	r3, [pc, #24]	; (edcc <shell_avail_queue_init+0x28>)
    edb2:	6043      	str	r3, [r0, #4]
        shell_console_ev[i].ev_arg = &buf[i];
    edb4:	4b06      	ldr	r3, [pc, #24]	; (edd0 <shell_avail_queue_init+0x2c>)
    edb6:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    edba:	6083      	str	r3, [r0, #8]
        console_line_event_put(&shell_console_ev[i]);
    edbc:	f7ff f8ac 	bl	df18 <console_line_event_put>
    for (i = 0; i < MYNEWT_VAL(SHELL_MAX_CMD_QUEUED); i++) {
    edc0:	3401      	adds	r4, #1
    edc2:	2c01      	cmp	r4, #1
    edc4:	ddf1      	ble.n	edaa <shell_avail_queue_init+0x6>
    }
}
    edc6:	bd10      	pop	{r4, pc}
    edc8:	200064fc 	.word	0x200064fc
    edcc:	0000ef15 	.word	0x0000ef15
    edd0:	2000619c 	.word	0x2000619c

0000edd4 <shell_evq_set>:
{
    edd4:	b508      	push	{r3, lr}
    shell_evq = evq;
    edd6:	4b02      	ldr	r3, [pc, #8]	; (ede0 <shell_evq_set+0xc>)
    edd8:	6018      	str	r0, [r3, #0]
    console_line_queue_set(shell_evq);
    edda:	f7ff f897 	bl	df0c <console_line_queue_set>
}
    edde:	bd08      	pop	{r3, pc}
    ede0:	2000651c 	.word	0x2000651c

0000ede4 <shell_exec>:
{
    ede4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ede8:	4607      	mov	r7, r0
    edea:	460e      	mov	r6, r1
    edec:	4615      	mov	r5, r2
    cmd = shell_find_cmd(argc, argv, streamer);
    edee:	f7ff fbad 	bl	e54c <shell_find_cmd>
    if (!cmd) {
    edf2:	4604      	mov	r4, r0
    edf4:	b1b8      	cbz	r0, ee26 <shell_exec+0x42>
    if (default_module == -1 && cmd != &shell_cmd_select_module &&
    edf6:	4b23      	ldr	r3, [pc, #140]	; (ee84 <shell_exec+0xa0>)
    edf8:	681b      	ldr	r3, [r3, #0]
    edfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    edfe:	d026      	beq.n	ee4e <shell_exec+0x6a>
    size_t argc_offset = 0;
    ee00:	2000      	movs	r0, #0
    if (!cmd->sc_ext) {
    ee02:	7823      	ldrb	r3, [r4, #0]
    ee04:	f013 0f01 	tst.w	r3, #1
    ee08:	d12d      	bne.n	ee66 <shell_exec+0x82>
        rc = cmd->sc_cmd_func(argc - argc_offset, &argv[argc_offset]);
    ee0a:	6863      	ldr	r3, [r4, #4]
    ee0c:	eb06 0180 	add.w	r1, r6, r0, lsl #2
    ee10:	1a38      	subs	r0, r7, r0
    ee12:	4798      	blx	r3
    ee14:	4604      	mov	r4, r0
    if (rc < 0) {
    ee16:	2c00      	cmp	r4, #0
    ee18:	db2f      	blt.n	ee7a <shell_exec+0x96>
    print_prompt_if_console(streamer);
    ee1a:	4628      	mov	r0, r5
    ee1c:	f7ff fcba 	bl	e794 <print_prompt_if_console>
}
    ee20:	4620      	mov	r0, r4
    ee22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (app_cmd.sc_cmd_func != NULL) {
    ee26:	4b18      	ldr	r3, [pc, #96]	; (ee88 <shell_exec+0xa4>)
    ee28:	685b      	ldr	r3, [r3, #4]
    ee2a:	b10b      	cbz	r3, ee30 <shell_exec+0x4c>
            cmd = &app_cmd;
    ee2c:	4c16      	ldr	r4, [pc, #88]	; (ee88 <shell_exec+0xa4>)
    ee2e:	e7e2      	b.n	edf6 <shell_exec+0x12>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
    ee30:	6832      	ldr	r2, [r6, #0]
    ee32:	4916      	ldr	r1, [pc, #88]	; (ee8c <shell_exec+0xa8>)
    ee34:	4628      	mov	r0, r5
    ee36:	f001 fea4 	bl	10b82 <streamer_printf>
            streamer_printf(streamer,
    ee3a:	4915      	ldr	r1, [pc, #84]	; (ee90 <shell_exec+0xac>)
    ee3c:	4628      	mov	r0, r5
    ee3e:	f001 fea0 	bl	10b82 <streamer_printf>
            print_prompt_if_console(streamer);
    ee42:	4628      	mov	r0, r5
    ee44:	f7ff fca6 	bl	e794 <print_prompt_if_console>
            return SYS_ENOENT;
    ee48:	f06f 0403 	mvn.w	r4, #3
    ee4c:	e7e8      	b.n	ee20 <shell_exec+0x3c>
    if (default_module == -1 && cmd != &shell_cmd_select_module &&
    ee4e:	4b11      	ldr	r3, [pc, #68]	; (ee94 <shell_exec+0xb0>)
    ee50:	429c      	cmp	r4, r3
    ee52:	d006      	beq.n	ee62 <shell_exec+0x7e>
    ee54:	4b10      	ldr	r3, [pc, #64]	; (ee98 <shell_exec+0xb4>)
    ee56:	429c      	cmp	r4, r3
    ee58:	d001      	beq.n	ee5e <shell_exec+0x7a>
        argc_offset = 1;
    ee5a:	2001      	movs	r0, #1
    ee5c:	e7d1      	b.n	ee02 <shell_exec+0x1e>
    size_t argc_offset = 0;
    ee5e:	2000      	movs	r0, #0
    ee60:	e7cf      	b.n	ee02 <shell_exec+0x1e>
    ee62:	2000      	movs	r0, #0
    ee64:	e7cd      	b.n	ee02 <shell_exec+0x1e>
        rc = cmd->sc_cmd_ext_func(cmd, argc - argc_offset, &argv[argc_offset],
    ee66:	f8d4 8004 	ldr.w	r8, [r4, #4]
    ee6a:	462b      	mov	r3, r5
    ee6c:	eb06 0280 	add.w	r2, r6, r0, lsl #2
    ee70:	1a39      	subs	r1, r7, r0
    ee72:	4620      	mov	r0, r4
    ee74:	47c0      	blx	r8
    ee76:	4604      	mov	r4, r0
    ee78:	e7cd      	b.n	ee16 <shell_exec+0x32>
        show_cmd_help(argv, streamer);
    ee7a:	4629      	mov	r1, r5
    ee7c:	4630      	mov	r0, r6
    ee7e:	f7ff fbc7 	bl	e610 <show_cmd_help>
    ee82:	e7ca      	b.n	ee1a <shell_exec+0x36>
    ee84:	200001c0 	.word	0x200001c0
    ee88:	20006188 	.word	0x20006188
    ee8c:	00021cf4 	.word	0x00021cf4
    ee90:	00021e0c 	.word	0x00021e0c
    ee94:	00021ecc 	.word	0x00021ecc
    ee98:	00021ebc 	.word	0x00021ebc

0000ee9c <shell_process_command>:
{
    ee9c:	b510      	push	{r4, lr}
    ee9e:	b08e      	sub	sp, #56	; 0x38
    eea0:	460c      	mov	r4, r1
    argc = line2argv(line, argv, MYNEWT_VAL(SHELL_CMD_ARGC_MAX) + 1, streamer);
    eea2:	460b      	mov	r3, r1
    eea4:	220d      	movs	r2, #13
    eea6:	a901      	add	r1, sp, #4
    eea8:	f7ff fe7e 	bl	eba8 <line2argv>
    if (!argc) {
    eeac:	b128      	cbz	r0, eeba <shell_process_command+0x1e>
    shell_exec(argc, argv, streamer);
    eeae:	4622      	mov	r2, r4
    eeb0:	a901      	add	r1, sp, #4
    eeb2:	f7ff ff97 	bl	ede4 <shell_exec>
}
    eeb6:	b00e      	add	sp, #56	; 0x38
    eeb8:	bd10      	pop	{r4, pc}
        print_prompt_if_console(streamer);
    eeba:	4620      	mov	r0, r4
    eebc:	f7ff fc6a 	bl	e794 <print_prompt_if_console>
        return;
    eec0:	e7f9      	b.n	eeb6 <shell_process_command+0x1a>

0000eec2 <shell_process_nlip_line>:
{
    eec2:	b570      	push	{r4, r5, r6, lr}
    eec4:	4604      	mov	r4, r0
    eec6:	460e      	mov	r6, r1
    shell_line_len = strlen(shell_line);
    eec8:	f7fd f918 	bl	c0fc <strlen>
    if (shell_line_len > 2) {
    eecc:	2802      	cmp	r0, #2
    eece:	d91c      	bls.n	ef0a <shell_process_nlip_line+0x48>
    eed0:	4605      	mov	r5, r0
        if (shell_line[0] == SHELL_NLIP_PKT_START1 &&
    eed2:	7823      	ldrb	r3, [r4, #0]
    eed4:	2b06      	cmp	r3, #6
    eed6:	d009      	beq.n	eeec <shell_process_nlip_line+0x2a>
        } else if (shell_line[0] == SHELL_NLIP_DATA_START1 &&
    eed8:	2b04      	cmp	r3, #4
    eeda:	d102      	bne.n	eee2 <shell_process_nlip_line+0x20>
                shell_line[1] == SHELL_NLIP_DATA_START2) {
    eedc:	7863      	ldrb	r3, [r4, #1]
        } else if (shell_line[0] == SHELL_NLIP_DATA_START1 &&
    eede:	2b14      	cmp	r3, #20
    eee0:	d00e      	beq.n	ef00 <shell_process_nlip_line+0x3e>
            shell_process_command(shell_line, streamer);
    eee2:	4631      	mov	r1, r6
    eee4:	4620      	mov	r0, r4
    eee6:	f7ff ffd9 	bl	ee9c <shell_process_command>
}
    eeea:	bd70      	pop	{r4, r5, r6, pc}
                shell_line[1] == SHELL_NLIP_PKT_START2) {
    eeec:	7862      	ldrb	r2, [r4, #1]
        if (shell_line[0] == SHELL_NLIP_PKT_START1 &&
    eeee:	2a09      	cmp	r2, #9
    eef0:	d1f2      	bne.n	eed8 <shell_process_nlip_line+0x16>
            shell_nlip_clear_pkt();
    eef2:	f000 f95b 	bl	f1ac <shell_nlip_clear_pkt>
            shell_nlip_process(&shell_line[2], shell_line_len - 2);
    eef6:	1ea9      	subs	r1, r5, #2
    eef8:	1ca0      	adds	r0, r4, #2
    eefa:	f000 f969 	bl	f1d0 <shell_nlip_process>
    eefe:	e7f4      	b.n	eeea <shell_process_nlip_line+0x28>
            shell_nlip_process(&shell_line[2], shell_line_len - 2);
    ef00:	1ea9      	subs	r1, r5, #2
    ef02:	1ca0      	adds	r0, r4, #2
    ef04:	f000 f964 	bl	f1d0 <shell_nlip_process>
    ef08:	e7ef      	b.n	eeea <shell_process_nlip_line+0x28>
        shell_process_command(shell_line, streamer);
    ef0a:	4631      	mov	r1, r6
    ef0c:	4620      	mov	r0, r4
    ef0e:	f7ff ffc5 	bl	ee9c <shell_process_command>
}
    ef12:	e7ea      	b.n	eeea <shell_process_nlip_line+0x28>

0000ef14 <shell>:
{
    ef14:	b538      	push	{r3, r4, r5, lr}
    if (!ev) {
    ef16:	b160      	cbz	r0, ef32 <shell+0x1e>
    ef18:	4604      	mov	r4, r0
    cmd = ev->ev_arg;
    ef1a:	6885      	ldr	r5, [r0, #8]
    if (!cmd) {
    ef1c:	b165      	cbz	r5, ef38 <shell+0x24>
    streamer = streamer_console_get();
    ef1e:	f001 fe4b 	bl	10bb8 <streamer_console_get>
    ef22:	4601      	mov	r1, r0
    shell_process_nlip_line(cmd->line, streamer);
    ef24:	4628      	mov	r0, r5
    ef26:	f7ff ffcc 	bl	eec2 <shell_process_nlip_line>
    console_line_event_put(ev);
    ef2a:	4620      	mov	r0, r4
    ef2c:	f7fe fff4 	bl	df18 <console_line_event_put>
}
    ef30:	bd38      	pop	{r3, r4, r5, pc}
        print_prompt();
    ef32:	f7ff fc21 	bl	e778 <print_prompt>
        return;
    ef36:	e7fb      	b.n	ef30 <shell+0x1c>
        print_prompt();
    ef38:	f7ff fc1e 	bl	e778 <print_prompt>
        return;
    ef3c:	e7f8      	b.n	ef30 <shell+0x1c>
	...

0000ef40 <shell_register>:

int
shell_register(const char *module_name, const struct shell_cmd *commands)
{
    ef40:	b508      	push	{r3, lr}
    if (num_of_shell_entities >= MYNEWT_VAL(SHELL_MAX_MODULES)) {
    ef42:	4b0d      	ldr	r3, [pc, #52]	; (ef78 <shell_register+0x38>)
    ef44:	681b      	ldr	r3, [r3, #0]
    ef46:	2b02      	cmp	r3, #2
    ef48:	d80a      	bhi.n	ef60 <shell_register+0x20>
        MODLOG_ERROR(LOG_MODULE_DEFAULT, "Max number of modules reached\n");
        assert(0);
    }

    shell_modules[num_of_shell_entities].name = module_name;
    ef4a:	4a0c      	ldr	r2, [pc, #48]	; (ef7c <shell_register+0x3c>)
    ef4c:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    shell_modules[num_of_shell_entities].commands = commands;
    ef50:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    ef54:	6051      	str	r1, [r2, #4]
    ++num_of_shell_entities;
    ef56:	3301      	adds	r3, #1
    ef58:	4a07      	ldr	r2, [pc, #28]	; (ef78 <shell_register+0x38>)
    ef5a:	6013      	str	r3, [r2, #0]

    return 0;
}
    ef5c:	2000      	movs	r0, #0
    ef5e:	bd08      	pop	{r3, pc}
        MODLOG_ERROR(LOG_MODULE_DEFAULT, "Max number of modules reached\n");
    ef60:	4a07      	ldr	r2, [pc, #28]	; (ef80 <shell_register+0x40>)
    ef62:	2103      	movs	r1, #3
    ef64:	2000      	movs	r0, #0
    ef66:	f00e fc67 	bl	1d838 <modlog_printf>
        assert(0);
    ef6a:	2300      	movs	r3, #0
    ef6c:	461a      	mov	r2, r3
    ef6e:	4619      	mov	r1, r3
    ef70:	4618      	mov	r0, r3
    ef72:	f7f9 ffef 	bl	8f54 <__assert_func>
    ef76:	bf00      	nop
    ef78:	200064f4 	.word	0x200064f4
    ef7c:	20006520 	.word	0x20006520
    ef80:	00021e38 	.word	0x00021e38

0000ef84 <shell_cmd_register>:
static int num_compat_commands;
static int module_registered;

int
shell_cmd_register(const struct shell_cmd *sc)
{
    ef84:	b570      	push	{r4, r5, r6, lr}
    int rc;

    if (num_compat_commands >= MYNEWT_VAL(SHELL_MAX_COMPAT_COMMANDS)) {
    ef86:	4b1a      	ldr	r3, [pc, #104]	; (eff0 <shell_cmd_register+0x6c>)
    ef88:	681b      	ldr	r3, [r3, #0]
    ef8a:	2b13      	cmp	r3, #19
    ef8c:	dc10      	bgt.n	efb0 <shell_cmd_register+0x2c>
    ef8e:	4604      	mov	r4, r0
        MODLOG_ERROR(LOG_MODULE_DEFAULT,
                     "Max number of compat commands reached\n");
        assert(0);
    }

    if (!module_registered) {
    ef90:	4b18      	ldr	r3, [pc, #96]	; (eff4 <shell_cmd_register+0x70>)
    ef92:	681b      	ldr	r3, [r3, #0]
    ef94:	b1bb      	cbz	r3, efc6 <shell_cmd_register+0x42>
                         "Illegal module %s, default is not changed\n",
                         SHELL_COMPAT_MODULE_NAME);
        }
    }

    compat_commands[num_compat_commands] = *sc;
    ef96:	4e16      	ldr	r6, [pc, #88]	; (eff0 <shell_cmd_register+0x6c>)
    ef98:	6835      	ldr	r5, [r6, #0]
    ef9a:	4b17      	ldr	r3, [pc, #92]	; (eff8 <shell_cmd_register+0x74>)
    ef9c:	eb03 1c05 	add.w	ip, r3, r5, lsl #4
    efa0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    efa4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    ++num_compat_commands;
    efa8:	3501      	adds	r5, #1
    efaa:	6035      	str	r5, [r6, #0]
    return 0;
}
    efac:	2000      	movs	r0, #0
    efae:	bd70      	pop	{r4, r5, r6, pc}
        MODLOG_ERROR(LOG_MODULE_DEFAULT,
    efb0:	4a12      	ldr	r2, [pc, #72]	; (effc <shell_cmd_register+0x78>)
    efb2:	2103      	movs	r1, #3
    efb4:	2000      	movs	r0, #0
    efb6:	f00e fc3f 	bl	1d838 <modlog_printf>
        assert(0);
    efba:	2300      	movs	r3, #0
    efbc:	461a      	mov	r2, r3
    efbe:	4619      	mov	r1, r3
    efc0:	4618      	mov	r0, r3
    efc2:	f7f9 ffc7 	bl	8f54 <__assert_func>
        shell_register(SHELL_COMPAT_MODULE_NAME, compat_commands);
    efc6:	4d0e      	ldr	r5, [pc, #56]	; (f000 <shell_cmd_register+0x7c>)
    efc8:	490b      	ldr	r1, [pc, #44]	; (eff8 <shell_cmd_register+0x74>)
    efca:	4628      	mov	r0, r5
    efcc:	f7ff ffb8 	bl	ef40 <shell_register>
        module_registered = 1;
    efd0:	4b08      	ldr	r3, [pc, #32]	; (eff4 <shell_cmd_register+0x70>)
    efd2:	2201      	movs	r2, #1
    efd4:	601a      	str	r2, [r3, #0]
        rc = set_default_module(SHELL_COMPAT_MODULE_NAME);
    efd6:	4628      	mov	r0, r5
    efd8:	f7ff fa5e 	bl	e498 <set_default_module>
        if (rc != 0) {
    efdc:	2800      	cmp	r0, #0
    efde:	d0da      	beq.n	ef96 <shell_cmd_register+0x12>
            MODLOG_ERROR(LOG_MODULE_DEFAULT,
    efe0:	462b      	mov	r3, r5
    efe2:	4a08      	ldr	r2, [pc, #32]	; (f004 <shell_cmd_register+0x80>)
    efe4:	2103      	movs	r1, #3
    efe6:	2000      	movs	r0, #0
    efe8:	f00e fc26 	bl	1d838 <modlog_printf>
    efec:	e7d3      	b.n	ef96 <shell_cmd_register+0x12>
    efee:	bf00      	nop
    eff0:	200064f0 	.word	0x200064f0
    eff4:	200064ec 	.word	0x200064ec
    eff8:	2000639c 	.word	0x2000639c
    effc:	00021e58 	.word	0x00021e58
    f000:	00021e80 	.word	0x00021e80
    f004:	00021e88 	.word	0x00021e88

0000f008 <shell_init>:
#endif

void
shell_init(void)
{
    f008:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    f00a:	4b0d      	ldr	r3, [pc, #52]	; (f040 <shell_init+0x38>)
    f00c:	781b      	ldrb	r3, [r3, #0]
    f00e:	b193      	cbz	r3, f036 <shell_init+0x2e>

#if !MYNEWT_VAL(SHELL_TASK)
    return;
#endif

    shell_avail_queue_init();
    f010:	f7ff fec8 	bl	eda4 <shell_avail_queue_init>
    shell_evq_set(os_eventq_dflt_get());
    f014:	f7fa fb72 	bl	96fc <os_eventq_dflt_get>
    f018:	f7ff fedc 	bl	edd4 <shell_evq_set>

    prompt = SHELL_PROMPT;
    f01c:	4b09      	ldr	r3, [pc, #36]	; (f044 <shell_init+0x3c>)
    f01e:	4a0a      	ldr	r2, [pc, #40]	; (f048 <shell_init+0x40>)
    f020:	601a      	str	r2, [r3, #0]

#if MYNEWT_VAL(SHELL_NEWTMGR)
    shell_nlip_init();
    f022:	f000 f95b 	bl	f2dc <shell_nlip_init>
#endif

#if MYNEWT_VAL(SHELL_COMPLETION)
    console_set_completion_cb(completion);
    f026:	4809      	ldr	r0, [pc, #36]	; (f04c <shell_init+0x44>)
    f028:	f7fe ff8a 	bl	df40 <console_set_completion_cb>
#endif

#if MYNEWT_VAL(SHELL_OS_MODULE)
    shell_os_register();
    f02c:	f000 faac 	bl	f588 <shell_os_register>
#endif
#if MYNEWT_VAL(SHELL_PROMPT_MODULE)
    shell_prompt_register();
    f030:	f000 faf0 	bl	f614 <shell_prompt_register>
#endif
#if MYNEWT_VAL(SHELL_BRIDGE)
    shell_bridge_init();
#endif
}
    f034:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    f036:	461a      	mov	r2, r3
    f038:	4619      	mov	r1, r3
    f03a:	4618      	mov	r0, r3
    f03c:	f7f9 ff8a 	bl	8f54 <__assert_func>
    f040:	200065ac 	.word	0x200065ac
    f044:	200064f8 	.word	0x200064f8
    f048:	00021eb4 	.word	0x00021eb4
    f04c:	0000ec35 	.word	0x0000ec35

0000f050 <shell_nlip_mtx>:
    return (rc);
}

static int
shell_nlip_mtx(struct os_mbuf *m)
{
    f050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f054:	b08b      	sub	sp, #44	; 0x2c
    f056:	4680      	mov	r8, r0
#define SHELL_NLIP_MTX_BUF_SIZE (12)
    uint8_t readbuf[SHELL_NLIP_MTX_BUF_SIZE];
    char encodebuf[BASE64_ENCODE_SIZE(SHELL_NLIP_MTX_BUF_SIZE)];
    char pkt_seq[3] = { '\n', SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    f058:	4b49      	ldr	r3, [pc, #292]	; (f180 <shell_nlip_mtx+0x130>)
    f05a:	681b      	ldr	r3, [r3, #0]
    f05c:	f8ad 3008 	strh.w	r3, [sp, #8]
    f060:	0c1b      	lsrs	r3, r3, #16
    f062:	f88d 300a 	strb.w	r3, [sp, #10]
    char esc_seq[2] = { SHELL_NLIP_DATA_START1, SHELL_NLIP_DATA_START2 };
    f066:	f241 4304 	movw	r3, #5124	; 0x1404
    f06a:	f8ad 3004 	strh.w	r3, [sp, #4]
     *
     * continuation packets are preceded by 04 20 until the entire
     * buffer has been sent.
     */
    crc = CRC16_INITIAL_CRC;
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
    f06e:	4604      	mov	r4, r0
    crc = CRC16_INITIAL_CRC;
    f070:	2000      	movs	r0, #0
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
    f072:	e004      	b.n	f07e <shell_nlip_mtx+0x2e>
        crc = crc16_ccitt(crc, tmp->om_data, tmp->om_len);
    f074:	88e2      	ldrh	r2, [r4, #6]
    f076:	6821      	ldr	r1, [r4, #0]
    f078:	f001 fd64 	bl	10b44 <crc16_ccitt>
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
    f07c:	68e4      	ldr	r4, [r4, #12]
    f07e:	2c00      	cmp	r4, #0
    f080:	d1f8      	bne.n	f074 <shell_nlip_mtx+0x24>
    }
    crc = htons(crc);
    f082:	f3c0 230f 	ubfx	r3, r0, #8, #16
    f086:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    f08a:	b284      	uxth	r4, r0
    ptr = os_mbuf_extend(m, sizeof(crc));
    f08c:	2102      	movs	r1, #2
    f08e:	4640      	mov	r0, r8
    f090:	f7fb fc30 	bl	a8f4 <os_mbuf_extend>
    if (!ptr) {
    f094:	2800      	cmp	r0, #0
    f096:	d070      	beq.n	f17a <shell_nlip_mtx+0x12a>
        rc = -1;
        goto err;
    }
    memcpy(ptr, &crc, sizeof(crc));
    f098:	8004      	strh	r4, [r0, #0]

    totlen = OS_MBUF_PKTHDR(m)->omp_len;
    f09a:	f8b8 5010 	ldrh.w	r5, [r8, #16]
    off = 0;
    bodylen = 0;
    rb_off = 0;

    rc = console_lock(OS_TICKS_PER_SEC);
    f09e:	2080      	movs	r0, #128	; 0x80
    f0a0:	f7fe fb70 	bl	d784 <console_lock>
    if (rc != OS_OK) {
    f0a4:	4682      	mov	sl, r0
    f0a6:	b118      	cbz	r0, f0b0 <shell_nlip_mtx+0x60>
end:
    (void)console_unlock();

err:
    return (rc);
}
    f0a8:	4650      	mov	r0, sl
    f0aa:	b00b      	add	sp, #44	; 0x2c
    f0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    console_write(pkt_seq, sizeof(pkt_seq));
    f0b0:	2103      	movs	r1, #3
    f0b2:	a802      	add	r0, sp, #8
    f0b4:	f7fe fc90 	bl	d9d8 <console_write>
    dlen = htons(totlen);
    f0b8:	022b      	lsls	r3, r5, #8
    f0ba:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
    memcpy(readbuf, &dlen, sizeof(dlen));
    f0be:	f8ad 301c 	strh.w	r3, [sp, #28]
    rc = console_lock(OS_TICKS_PER_SEC);
    f0c2:	46d3      	mov	fp, sl
    bodylen = 0;
    f0c4:	2600      	movs	r6, #0
    rb_off += 2;
    f0c6:	2302      	movs	r3, #2
    off = 0;
    f0c8:	46b1      	mov	r9, r6
    while (totlen > 0) {
    f0ca:	e01c      	b.n	f106 <shell_nlip_mtx+0xb6>
            rc = os_mbuf_copydata(m, off, dlen, readbuf + rb_off);
    f0cc:	aa07      	add	r2, sp, #28
    f0ce:	4413      	add	r3, r2
    f0d0:	4622      	mov	r2, r4
    f0d2:	4649      	mov	r1, r9
    f0d4:	4640      	mov	r0, r8
    f0d6:	f7fb fb08 	bl	a6ea <os_mbuf_copydata>
            if (rc != 0) {
    f0da:	4683      	mov	fp, r0
    f0dc:	2800      	cmp	r0, #0
    f0de:	d14a      	bne.n	f176 <shell_nlip_mtx+0x126>
            elen = base64_encode(readbuf, dlen + rb_off, encodebuf, 0);
    f0e0:	2300      	movs	r3, #0
    f0e2:	aa03      	add	r2, sp, #12
    f0e4:	4639      	mov	r1, r7
    f0e6:	a807      	add	r0, sp, #28
    f0e8:	f001 fea0 	bl	10e2c <base64_encode>
    f0ec:	4607      	mov	r7, r0
            console_write(encodebuf, elen);
    f0ee:	4601      	mov	r1, r0
    f0f0:	a803      	add	r0, sp, #12
    f0f2:	f7fe fc71 	bl	d9d8 <console_write>
            bodylen += elen;
    f0f6:	443e      	add	r6, r7
    f0f8:	b2b6      	uxth	r6, r6
            totlen -= dlen;
    f0fa:	1b2d      	subs	r5, r5, r4
    f0fc:	b2ad      	uxth	r5, r5
            off += dlen;
    f0fe:	44a1      	add	r9, r4
    f100:	fa1f f989 	uxth.w	r9, r9
            bodylen = 0;
    f104:	4653      	mov	r3, sl
    while (totlen > 0) {
    f106:	b335      	cbz	r5, f156 <shell_nlip_mtx+0x106>
        dlen = min(SHELL_NLIP_MTX_BUF_SIZE - rb_off, totlen);
    f108:	f1c3 040c 	rsb	r4, r3, #12
    f10c:	42ac      	cmp	r4, r5
    f10e:	bfa8      	it	ge
    f110:	462c      	movge	r4, r5
    f112:	b2a4      	uxth	r4, r4
        newbodylen = 2 + bodylen + BASE64_ENCODE_SIZE(dlen + rb_off) + 1;
    f114:	191f      	adds	r7, r3, r4
    f116:	1e79      	subs	r1, r7, #1
    f118:	4a1a      	ldr	r2, [pc, #104]	; (f184 <shell_nlip_mtx+0x134>)
    f11a:	fb82 0201 	smull	r0, r2, r2, r1
    f11e:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
    f122:	3201      	adds	r2, #1
    f124:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    f128:	b292      	uxth	r2, r2
    f12a:	3203      	adds	r2, #3
    f12c:	b292      	uxth	r2, r2
        if (newbodylen > MGMT_NLIP_MAX_FRAME) {
    f12e:	2a7f      	cmp	r2, #127	; 0x7f
    f130:	d9cc      	bls.n	f0cc <shell_nlip_mtx+0x7c>
            elen = base64_pad(encodebuf, bodylen);
    f132:	4631      	mov	r1, r6
    f134:	a803      	add	r0, sp, #12
    f136:	f001 fec3 	bl	10ec0 <base64_pad>
    f13a:	4601      	mov	r1, r0
            console_write(encodebuf, elen);
    f13c:	a803      	add	r0, sp, #12
    f13e:	f7fe fc4b 	bl	d9d8 <console_write>
            console_write("\n", 1);
    f142:	2101      	movs	r1, #1
    f144:	4810      	ldr	r0, [pc, #64]	; (f188 <shell_nlip_mtx+0x138>)
    f146:	f7fe fc47 	bl	d9d8 <console_write>
            console_write(esc_seq, sizeof(esc_seq));
    f14a:	2102      	movs	r1, #2
    f14c:	a801      	add	r0, sp, #4
    f14e:	f7fe fc43 	bl	d9d8 <console_write>
            bodylen = 0;
    f152:	2600      	movs	r6, #0
    f154:	e7d6      	b.n	f104 <shell_nlip_mtx+0xb4>
    elen = base64_pad(encodebuf, bodylen);
    f156:	4631      	mov	r1, r6
    f158:	a803      	add	r0, sp, #12
    f15a:	f001 feb1 	bl	10ec0 <base64_pad>
    f15e:	4601      	mov	r1, r0
    console_write(encodebuf, elen);
    f160:	a803      	add	r0, sp, #12
    f162:	f7fe fc39 	bl	d9d8 <console_write>
    console_write("\n", 1);
    f166:	2101      	movs	r1, #1
    f168:	4807      	ldr	r0, [pc, #28]	; (f188 <shell_nlip_mtx+0x138>)
    f16a:	f7fe fc35 	bl	d9d8 <console_write>
    f16e:	46da      	mov	sl, fp
    (void)console_unlock();
    f170:	f7fe fb22 	bl	d7b8 <console_unlock>
    f174:	e798      	b.n	f0a8 <shell_nlip_mtx+0x58>
            rc = os_mbuf_copydata(m, off, dlen, readbuf + rb_off);
    f176:	4682      	mov	sl, r0
    f178:	e7fa      	b.n	f170 <shell_nlip_mtx+0x120>
        rc = -1;
    f17a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    return (rc);
    f17e:	e793      	b.n	f0a8 <shell_nlip_mtx+0x58>
    f180:	00021edc 	.word	0x00021edc
    f184:	55555556 	.word	0x55555556
    f188:	00021d7c 	.word	0x00021d7c

0000f18c <shell_event_data_in>:
    return os_mqueue_put(&g_shell_nlip_mq, os_eventq_dflt_get(), m);
}

static void
shell_event_data_in(struct os_event *ev)
{
    f18c:	b510      	push	{r4, lr}
    f18e:	e005      	b.n	f19c <shell_event_data_in+0x10>
    f190:	4604      	mov	r4, r0
        m = os_mqueue_get(&g_shell_nlip_mq);
        if (!m) {
            break;
        }

        (void) shell_nlip_mtx(m);
    f192:	f7ff ff5d 	bl	f050 <shell_nlip_mtx>

        os_mbuf_free_chain(m);
    f196:	4620      	mov	r0, r4
    f198:	f7fb fa31 	bl	a5fe <os_mbuf_free_chain>
        m = os_mqueue_get(&g_shell_nlip_mq);
    f19c:	4802      	ldr	r0, [pc, #8]	; (f1a8 <shell_event_data_in+0x1c>)
    f19e:	f7fb f9c4 	bl	a52a <os_mqueue_get>
        if (!m) {
    f1a2:	2800      	cmp	r0, #0
    f1a4:	d1f4      	bne.n	f190 <shell_event_data_in+0x4>
    }
}
    f1a6:	bd10      	pop	{r4, pc}
    f1a8:	20006548 	.word	0x20006548

0000f1ac <shell_nlip_clear_pkt>:
{
    f1ac:	b508      	push	{r3, lr}
    if (g_nlip_mbuf) {
    f1ae:	4b06      	ldr	r3, [pc, #24]	; (f1c8 <shell_nlip_clear_pkt+0x1c>)
    f1b0:	6818      	ldr	r0, [r3, #0]
    f1b2:	b120      	cbz	r0, f1be <shell_nlip_clear_pkt+0x12>
        os_mbuf_free_chain(g_nlip_mbuf);
    f1b4:	f7fb fa23 	bl	a5fe <os_mbuf_free_chain>
        g_nlip_mbuf = NULL;
    f1b8:	4b03      	ldr	r3, [pc, #12]	; (f1c8 <shell_nlip_clear_pkt+0x1c>)
    f1ba:	2200      	movs	r2, #0
    f1bc:	601a      	str	r2, [r3, #0]
    g_nlip_expected_len = 0;
    f1be:	4b03      	ldr	r3, [pc, #12]	; (f1cc <shell_nlip_clear_pkt+0x20>)
    f1c0:	2200      	movs	r2, #0
    f1c2:	801a      	strh	r2, [r3, #0]
}
    f1c4:	bd08      	pop	{r3, pc}
    f1c6:	bf00      	nop
    f1c8:	2000653c 	.word	0x2000653c
    f1cc:	20006538 	.word	0x20006538

0000f1d0 <shell_nlip_process>:
{
    f1d0:	b538      	push	{r3, r4, r5, lr}
    f1d2:	4605      	mov	r5, r0
    rc = base64_decode(data, data);
    f1d4:	4601      	mov	r1, r0
    f1d6:	f001 fe89 	bl	10eec <base64_decode>
    if (rc < 0) {
    f1da:	1e04      	subs	r4, r0, #0
    f1dc:	db18      	blt.n	f210 <shell_nlip_process+0x40>
    if (g_nlip_mbuf == NULL) {
    f1de:	4b30      	ldr	r3, [pc, #192]	; (f2a0 <shell_nlip_process+0xd0>)
    f1e0:	681b      	ldr	r3, [r3, #0]
    f1e2:	b1bb      	cbz	r3, f214 <shell_nlip_process+0x44>
    copy_len = min(g_nlip_expected_len - OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len,
    f1e4:	4b2e      	ldr	r3, [pc, #184]	; (f2a0 <shell_nlip_process+0xd0>)
    f1e6:	6818      	ldr	r0, [r3, #0]
    f1e8:	8a01      	ldrh	r1, [r0, #16]
    f1ea:	4b2e      	ldr	r3, [pc, #184]	; (f2a4 <shell_nlip_process+0xd4>)
    f1ec:	881b      	ldrh	r3, [r3, #0]
    f1ee:	1a5b      	subs	r3, r3, r1
    f1f0:	42a3      	cmp	r3, r4
    f1f2:	bfa8      	it	ge
    f1f4:	4623      	movge	r3, r4
    rc = os_mbuf_copyinto(g_nlip_mbuf, OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len,
    f1f6:	b29b      	uxth	r3, r3
    f1f8:	462a      	mov	r2, r5
    f1fa:	f7fb fb37 	bl	a86c <os_mbuf_copyinto>
    if (rc != 0) {
    f1fe:	4604      	mov	r4, r0
    f200:	b930      	cbnz	r0, f210 <shell_nlip_process+0x40>
    if (OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len == g_nlip_expected_len) {
    f202:	4b27      	ldr	r3, [pc, #156]	; (f2a0 <shell_nlip_process+0xd0>)
    f204:	681d      	ldr	r5, [r3, #0]
    f206:	8a2a      	ldrh	r2, [r5, #16]
    f208:	4b26      	ldr	r3, [pc, #152]	; (f2a4 <shell_nlip_process+0xd4>)
    f20a:	881b      	ldrh	r3, [r3, #0]
    f20c:	429a      	cmp	r2, r3
    f20e:	d014      	beq.n	f23a <shell_nlip_process+0x6a>
}
    f210:	4620      	mov	r0, r4
    f212:	bd38      	pop	{r3, r4, r5, pc}
        if (len < 2) {
    f214:	2c01      	cmp	r4, #1
    f216:	dd3c      	ble.n	f292 <shell_nlip_process+0xc2>
        g_nlip_expected_len = ntohs(*(uint16_t *) data);
    f218:	882b      	ldrh	r3, [r5, #0]
    f21a:	0218      	lsls	r0, r3, #8
    f21c:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
    f220:	b280      	uxth	r0, r0
    f222:	4b20      	ldr	r3, [pc, #128]	; (f2a4 <shell_nlip_process+0xd4>)
    f224:	8018      	strh	r0, [r3, #0]
        g_nlip_mbuf = os_msys_get_pkthdr(g_nlip_expected_len, 0);
    f226:	2100      	movs	r1, #0
    f228:	f7fa fb80 	bl	992c <os_msys_get_pkthdr>
    f22c:	4b1c      	ldr	r3, [pc, #112]	; (f2a0 <shell_nlip_process+0xd0>)
    f22e:	6018      	str	r0, [r3, #0]
        if (!g_nlip_mbuf) {
    f230:	2800      	cmp	r0, #0
    f232:	d031      	beq.n	f298 <shell_nlip_process+0xc8>
        data += sizeof(uint16_t);
    f234:	3502      	adds	r5, #2
        len -= sizeof(uint16_t);
    f236:	3c02      	subs	r4, #2
    f238:	e7d4      	b.n	f1e4 <shell_nlip_process+0x14>
        if (g_shell_nlip_in_func) {
    f23a:	4b1b      	ldr	r3, [pc, #108]	; (f2a8 <shell_nlip_process+0xd8>)
    f23c:	681b      	ldr	r3, [r3, #0]
    f23e:	b323      	cbz	r3, f28a <shell_nlip_process+0xba>
            crc = CRC16_INITIAL_CRC;
    f240:	2000      	movs	r0, #0
    f242:	e004      	b.n	f24e <shell_nlip_process+0x7e>
                crc = crc16_ccitt(crc, m->om_data, m->om_len);
    f244:	88ea      	ldrh	r2, [r5, #6]
    f246:	6829      	ldr	r1, [r5, #0]
    f248:	f001 fc7c 	bl	10b44 <crc16_ccitt>
            for (m = g_nlip_mbuf; m; m = SLIST_NEXT(m, om_next)) {
    f24c:	68ed      	ldr	r5, [r5, #12]
    f24e:	2d00      	cmp	r5, #0
    f250:	d1f8      	bne.n	f244 <shell_nlip_process+0x74>
            if (crc == 0 && g_nlip_expected_len >= sizeof(crc)) {
    f252:	b918      	cbnz	r0, f25c <shell_nlip_process+0x8c>
    f254:	4b13      	ldr	r3, [pc, #76]	; (f2a4 <shell_nlip_process+0xd4>)
    f256:	881b      	ldrh	r3, [r3, #0]
    f258:	2b01      	cmp	r3, #1
    f25a:	d809      	bhi.n	f270 <shell_nlip_process+0xa0>
                os_mbuf_free_chain(g_nlip_mbuf);
    f25c:	4b10      	ldr	r3, [pc, #64]	; (f2a0 <shell_nlip_process+0xd0>)
    f25e:	6818      	ldr	r0, [r3, #0]
    f260:	f7fb f9cd 	bl	a5fe <os_mbuf_free_chain>
        g_nlip_mbuf = NULL;
    f264:	2300      	movs	r3, #0
    f266:	4a0e      	ldr	r2, [pc, #56]	; (f2a0 <shell_nlip_process+0xd0>)
    f268:	6013      	str	r3, [r2, #0]
        g_nlip_expected_len = 0;
    f26a:	4a0e      	ldr	r2, [pc, #56]	; (f2a4 <shell_nlip_process+0xd4>)
    f26c:	8013      	strh	r3, [r2, #0]
    f26e:	e7cf      	b.n	f210 <shell_nlip_process+0x40>
                os_mbuf_adj(g_nlip_mbuf, -sizeof(crc));
    f270:	4d0b      	ldr	r5, [pc, #44]	; (f2a0 <shell_nlip_process+0xd0>)
    f272:	f06f 0101 	mvn.w	r1, #1
    f276:	6828      	ldr	r0, [r5, #0]
    f278:	f7fb fa64 	bl	a744 <os_mbuf_adj>
                g_shell_nlip_in_func(g_nlip_mbuf, g_shell_nlip_in_arg);
    f27c:	4b0a      	ldr	r3, [pc, #40]	; (f2a8 <shell_nlip_process+0xd8>)
    f27e:	681b      	ldr	r3, [r3, #0]
    f280:	4a0a      	ldr	r2, [pc, #40]	; (f2ac <shell_nlip_process+0xdc>)
    f282:	6811      	ldr	r1, [r2, #0]
    f284:	6828      	ldr	r0, [r5, #0]
    f286:	4798      	blx	r3
    f288:	e7ec      	b.n	f264 <shell_nlip_process+0x94>
            os_mbuf_free_chain(g_nlip_mbuf);
    f28a:	4628      	mov	r0, r5
    f28c:	f7fb f9b7 	bl	a5fe <os_mbuf_free_chain>
    f290:	e7e8      	b.n	f264 <shell_nlip_process+0x94>
            rc = -1;
    f292:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    f296:	e7bb      	b.n	f210 <shell_nlip_process+0x40>
            rc = -1;
    f298:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    f29c:	e7b8      	b.n	f210 <shell_nlip_process+0x40>
    f29e:	bf00      	nop
    f2a0:	2000653c 	.word	0x2000653c
    f2a4:	20006538 	.word	0x20006538
    f2a8:	20006544 	.word	0x20006544
    f2ac:	20006540 	.word	0x20006540

0000f2b0 <shell_nlip_input_register>:
    g_shell_nlip_in_func = nf;
    f2b0:	4b02      	ldr	r3, [pc, #8]	; (f2bc <shell_nlip_input_register+0xc>)
    f2b2:	6018      	str	r0, [r3, #0]
    g_shell_nlip_in_arg = arg;
    f2b4:	4b02      	ldr	r3, [pc, #8]	; (f2c0 <shell_nlip_input_register+0x10>)
    f2b6:	6019      	str	r1, [r3, #0]
}
    f2b8:	2000      	movs	r0, #0
    f2ba:	4770      	bx	lr
    f2bc:	20006544 	.word	0x20006544
    f2c0:	20006540 	.word	0x20006540

0000f2c4 <shell_nlip_output>:
{
    f2c4:	b510      	push	{r4, lr}
    f2c6:	4604      	mov	r4, r0
    return os_mqueue_put(&g_shell_nlip_mq, os_eventq_dflt_get(), m);
    f2c8:	f7fa fa18 	bl	96fc <os_eventq_dflt_get>
    f2cc:	4601      	mov	r1, r0
    f2ce:	4622      	mov	r2, r4
    f2d0:	4801      	ldr	r0, [pc, #4]	; (f2d8 <shell_nlip_output+0x14>)
    f2d2:	f7fb f93b 	bl	a54c <os_mqueue_put>
}
    f2d6:	bd10      	pop	{r4, pc}
    f2d8:	20006548 	.word	0x20006548

0000f2dc <shell_nlip_init>:

void
shell_nlip_init(void)
{
    f2dc:	b508      	push	{r3, lr}
    os_mqueue_init(&g_shell_nlip_mq, shell_event_data_in, NULL);
    f2de:	2200      	movs	r2, #0
    f2e0:	4902      	ldr	r1, [pc, #8]	; (f2ec <shell_nlip_init+0x10>)
    f2e2:	4803      	ldr	r0, [pc, #12]	; (f2f0 <shell_nlip_init+0x14>)
    f2e4:	f7fb f916 	bl	a514 <os_mqueue_init>
}
    f2e8:	bd08      	pop	{r3, pc}
    f2ea:	bf00      	nop
    f2ec:	0000f18d 	.word	0x0000f18d
    f2f0:	20006548 	.word	0x20006548

0000f2f4 <shell_os_ls_dev>:
    return 0;
}

static int
shell_os_ls_dev(struct os_dev *dev, void *arg)
{
    f2f4:	b500      	push	{lr}
    f2f6:	b083      	sub	sp, #12
    f2f8:	4602      	mov	r2, r0
    f2fa:	4608      	mov	r0, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "%4d %3x %s\n",
    f2fc:	69d3      	ldr	r3, [r2, #28]
    f2fe:	9300      	str	r3, [sp, #0]
    f300:	7ed3      	ldrb	r3, [r2, #27]
    f302:	7e92      	ldrb	r2, [r2, #26]
    f304:	4903      	ldr	r1, [pc, #12]	; (f314 <shell_os_ls_dev+0x20>)
    f306:	f001 fc3c 	bl	10b82 <streamer_printf>
                    dev->od_open_ref, dev->od_flags, dev->od_name);
    return 0;
}
    f30a:	2000      	movs	r0, #0
    f30c:	b003      	add	sp, #12
    f30e:	f85d fb04 	ldr.w	pc, [sp], #4
    f312:	bf00      	nop
    f314:	00021ee0 	.word	0x00021ee0

0000f318 <shell_os_mpool_display_cmd>:
{
    f318:	b5f0      	push	{r4, r5, r6, r7, lr}
    f31a:	b091      	sub	sp, #68	; 0x44
    f31c:	461e      	mov	r6, r3
    if (argc > 1 && strcmp(argv[1], "")) {
    f31e:	2901      	cmp	r1, #1
    f320:	dd04      	ble.n	f32c <shell_os_mpool_display_cmd+0x14>
    f322:	6855      	ldr	r5, [r2, #4]
    f324:	782b      	ldrb	r3, [r5, #0]
    f326:	b913      	cbnz	r3, f32e <shell_os_mpool_display_cmd+0x16>
    name = NULL;
    f328:	2500      	movs	r5, #0
    f32a:	e000      	b.n	f32e <shell_os_mpool_display_cmd+0x16>
    f32c:	2500      	movs	r5, #0
    streamer_printf(streamer, "Mempools: \n");
    f32e:	491d      	ldr	r1, [pc, #116]	; (f3a4 <shell_os_mpool_display_cmd+0x8c>)
    f330:	4630      	mov	r0, r6
    f332:	f001 fc26 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, "%32s %5s %4s %4s %4s\n",
    f336:	4b1c      	ldr	r3, [pc, #112]	; (f3a8 <shell_os_mpool_display_cmd+0x90>)
    f338:	9302      	str	r3, [sp, #8]
    f33a:	4b1c      	ldr	r3, [pc, #112]	; (f3ac <shell_os_mpool_display_cmd+0x94>)
    f33c:	9301      	str	r3, [sp, #4]
    f33e:	4b1c      	ldr	r3, [pc, #112]	; (f3b0 <shell_os_mpool_display_cmd+0x98>)
    f340:	9300      	str	r3, [sp, #0]
    f342:	4b1c      	ldr	r3, [pc, #112]	; (f3b4 <shell_os_mpool_display_cmd+0x9c>)
    f344:	4a1c      	ldr	r2, [pc, #112]	; (f3b8 <shell_os_mpool_display_cmd+0xa0>)
    f346:	491d      	ldr	r1, [pc, #116]	; (f3bc <shell_os_mpool_display_cmd+0xa4>)
    f348:	4630      	mov	r0, r6
    f34a:	f001 fc1a 	bl	10b82 <streamer_printf>
    found = 0;
    f34e:	2700      	movs	r7, #0
    mp = NULL;
    f350:	463c      	mov	r4, r7
    f352:	e00b      	b.n	f36c <shell_os_mpool_display_cmd+0x54>
        streamer_printf(streamer, "%32s %5d %4d %4d %4d\n", omi.omi_name,
    f354:	9b07      	ldr	r3, [sp, #28]
    f356:	9302      	str	r3, [sp, #8]
    f358:	9a06      	ldr	r2, [sp, #24]
    f35a:	9201      	str	r2, [sp, #4]
    f35c:	9a05      	ldr	r2, [sp, #20]
    f35e:	9200      	str	r2, [sp, #0]
    f360:	9b04      	ldr	r3, [sp, #16]
    f362:	aa08      	add	r2, sp, #32
    f364:	4916      	ldr	r1, [pc, #88]	; (f3c0 <shell_os_mpool_display_cmd+0xa8>)
    f366:	4630      	mov	r0, r6
    f368:	f001 fc0b 	bl	10b82 <streamer_printf>
        mp = os_mempool_info_get_next(mp, &omi);
    f36c:	a904      	add	r1, sp, #16
    f36e:	4620      	mov	r0, r4
    f370:	f7fa fa4c 	bl	980c <os_mempool_info_get_next>
        if (mp == NULL) {
    f374:	4604      	mov	r4, r0
    f376:	b148      	cbz	r0, f38c <shell_os_mpool_display_cmd+0x74>
        if (name) {
    f378:	2d00      	cmp	r5, #0
    f37a:	d0eb      	beq.n	f354 <shell_os_mpool_display_cmd+0x3c>
            if (strcmp(name, omi.omi_name)) {
    f37c:	a908      	add	r1, sp, #32
    f37e:	4628      	mov	r0, r5
    f380:	f7fc feb0 	bl	c0e4 <strcmp>
    f384:	2800      	cmp	r0, #0
    f386:	d1f1      	bne.n	f36c <shell_os_mpool_display_cmd+0x54>
                found = 1;
    f388:	2701      	movs	r7, #1
    f38a:	e7e3      	b.n	f354 <shell_os_mpool_display_cmd+0x3c>
    if (name && !found) {
    f38c:	b105      	cbz	r5, f390 <shell_os_mpool_display_cmd+0x78>
    f38e:	b117      	cbz	r7, f396 <shell_os_mpool_display_cmd+0x7e>
}
    f390:	2000      	movs	r0, #0
    f392:	b011      	add	sp, #68	; 0x44
    f394:	bdf0      	pop	{r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Couldn't find a memory pool with name %s\n",
    f396:	462a      	mov	r2, r5
    f398:	490a      	ldr	r1, [pc, #40]	; (f3c4 <shell_os_mpool_display_cmd+0xac>)
    f39a:	4630      	mov	r0, r6
    f39c:	f001 fbf1 	bl	10b82 <streamer_printf>
    f3a0:	e7f6      	b.n	f390 <shell_os_mpool_display_cmd+0x78>
    f3a2:	bf00      	nop
    f3a4:	00021eec 	.word	0x00021eec
    f3a8:	00021f18 	.word	0x00021f18
    f3ac:	00021f1c 	.word	0x00021f1c
    f3b0:	000229c4 	.word	0x000229c4
    f3b4:	00021ef8 	.word	0x00021ef8
    f3b8:	00023ad0 	.word	0x00023ad0
    f3bc:	00021f00 	.word	0x00021f00
    f3c0:	00021f24 	.word	0x00021f24
    f3c4:	00021f3c 	.word	0x00021f3c

0000f3c8 <shell_os_date_cmd>:
{
    f3c8:	b530      	push	{r4, r5, lr}
    f3ca:	b08f      	sub	sp, #60	; 0x3c
    f3cc:	461c      	mov	r4, r3
    if (argc == 0) {
    f3ce:	3901      	subs	r1, #1
    f3d0:	d00f      	beq.n	f3f2 <shell_os_date_cmd+0x2a>
    f3d2:	4610      	mov	r0, r2
    } else if (argc == 1) {
    f3d4:	2901      	cmp	r1, #1
    f3d6:	d132      	bne.n	f43e <shell_os_date_cmd+0x76>
        rc = datetime_parse(*argv, &tv, &tz);
    f3d8:	aa09      	add	r2, sp, #36	; 0x24
    f3da:	a90a      	add	r1, sp, #40	; 0x28
    f3dc:	6840      	ldr	r0, [r0, #4]
    f3de:	f001 fa49 	bl	10874 <datetime_parse>
        if (rc == 0) {
    f3e2:	4605      	mov	r5, r0
    f3e4:	bb30      	cbnz	r0, f434 <shell_os_date_cmd+0x6c>
            rc = os_settimeofday(&tv, &tz);
    f3e6:	a909      	add	r1, sp, #36	; 0x24
    f3e8:	a80a      	add	r0, sp, #40	; 0x28
    f3ea:	f7fa ff1f 	bl	a22c <os_settimeofday>
    f3ee:	4605      	mov	r5, r0
    f3f0:	e011      	b.n	f416 <shell_os_date_cmd+0x4e>
        rc = os_gettimeofday(&tv, &tz);
    f3f2:	a909      	add	r1, sp, #36	; 0x24
    f3f4:	a80a      	add	r0, sp, #40	; 0x28
    f3f6:	f7fa fecd 	bl	a194 <os_gettimeofday>
        assert(rc == 0);
    f3fa:	b978      	cbnz	r0, f41c <shell_os_date_cmd+0x54>
        rc = datetime_format(&tv, &tz, buf, sizeof(buf));
    f3fc:	2321      	movs	r3, #33	; 0x21
    f3fe:	466a      	mov	r2, sp
    f400:	a909      	add	r1, sp, #36	; 0x24
    f402:	a80a      	add	r0, sp, #40	; 0x28
    f404:	f001 fb36 	bl	10a74 <datetime_format>
        assert(rc == 0);
    f408:	4605      	mov	r5, r0
    f40a:	b968      	cbnz	r0, f428 <shell_os_date_cmd+0x60>
        streamer_printf(streamer, "%s\n", buf);
    f40c:	466a      	mov	r2, sp
    f40e:	490d      	ldr	r1, [pc, #52]	; (f444 <shell_os_date_cmd+0x7c>)
    f410:	4620      	mov	r0, r4
    f412:	f001 fbb6 	bl	10b82 <streamer_printf>
}
    f416:	4628      	mov	r0, r5
    f418:	b00f      	add	sp, #60	; 0x3c
    f41a:	bd30      	pop	{r4, r5, pc}
        assert(rc == 0);
    f41c:	2300      	movs	r3, #0
    f41e:	461a      	mov	r2, r3
    f420:	4619      	mov	r1, r3
    f422:	4618      	mov	r0, r3
    f424:	f7f9 fd96 	bl	8f54 <__assert_func>
        assert(rc == 0);
    f428:	2300      	movs	r3, #0
    f42a:	461a      	mov	r2, r3
    f42c:	4619      	mov	r1, r3
    f42e:	4618      	mov	r0, r3
    f430:	f7f9 fd90 	bl	8f54 <__assert_func>
            streamer_printf(streamer, "Invalid datetime\n");
    f434:	4904      	ldr	r1, [pc, #16]	; (f448 <shell_os_date_cmd+0x80>)
    f436:	4620      	mov	r0, r4
    f438:	f001 fba3 	bl	10b82 <streamer_printf>
    f43c:	e7eb      	b.n	f416 <shell_os_date_cmd+0x4e>
        rc = -1;
    f43e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return rc;
    f442:	e7e8      	b.n	f416 <shell_os_date_cmd+0x4e>
    f444:	00021f8c 	.word	0x00021f8c
    f448:	00021f68 	.word	0x00021f68

0000f44c <shell_os_reset_cmd>:
{
    f44c:	b508      	push	{r3, lr}
    os_time_delay(OS_TICKS_PER_SEC / 10);
    f44e:	200c      	movs	r0, #12
    f450:	f7fa fe8c 	bl	a16c <os_time_delay>
    os_reboot(HAL_RESET_REQUESTED);
    f454:	2006      	movs	r0, #6
    f456:	f7f9 fede 	bl	9216 <os_reboot>
}
    f45a:	2000      	movs	r0, #0
    f45c:	bd08      	pop	{r3, pc}
	...

0000f460 <shell_os_ls_dev_cmd>:

int
shell_os_ls_dev_cmd(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
    f460:	b510      	push	{r4, lr}
    f462:	b082      	sub	sp, #8
    f464:	461c      	mov	r4, r3
    streamer_printf(streamer, "%4s %3s %s\n", "ref", "flg", "name");
    f466:	4b07      	ldr	r3, [pc, #28]	; (f484 <shell_os_ls_dev_cmd+0x24>)
    f468:	9300      	str	r3, [sp, #0]
    f46a:	4b07      	ldr	r3, [pc, #28]	; (f488 <shell_os_ls_dev_cmd+0x28>)
    f46c:	4a07      	ldr	r2, [pc, #28]	; (f48c <shell_os_ls_dev_cmd+0x2c>)
    f46e:	4908      	ldr	r1, [pc, #32]	; (f490 <shell_os_ls_dev_cmd+0x30>)
    f470:	4620      	mov	r0, r4
    f472:	f001 fb86 	bl	10b82 <streamer_printf>
    os_dev_walk(shell_os_ls_dev, streamer);
    f476:	4621      	mov	r1, r4
    f478:	4806      	ldr	r0, [pc, #24]	; (f494 <shell_os_ls_dev_cmd+0x34>)
    f47a:	f7fa f873 	bl	9564 <os_dev_walk>
    return 0;
}
    f47e:	2000      	movs	r0, #0
    f480:	b002      	add	sp, #8
    f482:	bd10      	pop	{r4, pc}
    f484:	00023ad0 	.word	0x00023ad0
    f488:	00021f7c 	.word	0x00021f7c
    f48c:	00021f80 	.word	0x00021f80
    f490:	00021f84 	.word	0x00021f84
    f494:	0000f2f5 	.word	0x0000f2f5

0000f498 <shell_os_tasks_display_cmd>:
{
    f498:	b5f0      	push	{r4, r5, r6, r7, lr}
    f49a:	b097      	sub	sp, #92	; 0x5c
    f49c:	461e      	mov	r6, r3
    if (argc > 1 && strcmp(argv[1], "")) {
    f49e:	2901      	cmp	r1, #1
    f4a0:	dd04      	ble.n	f4ac <shell_os_tasks_display_cmd+0x14>
    f4a2:	6855      	ldr	r5, [r2, #4]
    f4a4:	782b      	ldrb	r3, [r5, #0]
    f4a6:	b913      	cbnz	r3, f4ae <shell_os_tasks_display_cmd+0x16>
    name = NULL;
    f4a8:	2500      	movs	r5, #0
    f4aa:	e000      	b.n	f4ae <shell_os_tasks_display_cmd+0x16>
    f4ac:	2500      	movs	r5, #0
    streamer_printf(streamer, "Tasks: \n");
    f4ae:	4928      	ldr	r1, [pc, #160]	; (f550 <shell_os_tasks_display_cmd+0xb8>)
    f4b0:	4630      	mov	r0, r6
    f4b2:	f001 fb66 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, "%8s %3s %3s %8s %8s %8s %8s %8s %8s %3s\n",
    f4b6:	4b27      	ldr	r3, [pc, #156]	; (f554 <shell_os_tasks_display_cmd+0xbc>)
    f4b8:	9307      	str	r3, [sp, #28]
    f4ba:	4b27      	ldr	r3, [pc, #156]	; (f558 <shell_os_tasks_display_cmd+0xc0>)
    f4bc:	9306      	str	r3, [sp, #24]
    f4be:	4b27      	ldr	r3, [pc, #156]	; (f55c <shell_os_tasks_display_cmd+0xc4>)
    f4c0:	9305      	str	r3, [sp, #20]
    f4c2:	4b27      	ldr	r3, [pc, #156]	; (f560 <shell_os_tasks_display_cmd+0xc8>)
    f4c4:	9304      	str	r3, [sp, #16]
    f4c6:	4b27      	ldr	r3, [pc, #156]	; (f564 <shell_os_tasks_display_cmd+0xcc>)
    f4c8:	9303      	str	r3, [sp, #12]
    f4ca:	4b27      	ldr	r3, [pc, #156]	; (f568 <shell_os_tasks_display_cmd+0xd0>)
    f4cc:	9302      	str	r3, [sp, #8]
    f4ce:	4b27      	ldr	r3, [pc, #156]	; (f56c <shell_os_tasks_display_cmd+0xd4>)
    f4d0:	9301      	str	r3, [sp, #4]
    f4d2:	4b27      	ldr	r3, [pc, #156]	; (f570 <shell_os_tasks_display_cmd+0xd8>)
    f4d4:	9300      	str	r3, [sp, #0]
    f4d6:	4b27      	ldr	r3, [pc, #156]	; (f574 <shell_os_tasks_display_cmd+0xdc>)
    f4d8:	4a27      	ldr	r2, [pc, #156]	; (f578 <shell_os_tasks_display_cmd+0xe0>)
    f4da:	4928      	ldr	r1, [pc, #160]	; (f57c <shell_os_tasks_display_cmd+0xe4>)
    f4dc:	4630      	mov	r0, r6
    f4de:	f001 fb50 	bl	10b82 <streamer_printf>
    found = 0;
    f4e2:	2700      	movs	r7, #0
    prev_task = NULL;
    f4e4:	463c      	mov	r4, r7
    f4e6:	e017      	b.n	f518 <shell_os_tasks_display_cmd+0x80>
                oti.oti_name, oti.oti_prio, oti.oti_taskid,
    f4e8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
                oti.oti_stksize, oti.oti_stkusage,
    f4ec:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    f4f0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
        streamer_printf(streamer, "%8s %3u %3u %8lu %8lu %8u %8u %8lu %8lu\n",
    f4f4:	980d      	ldr	r0, [sp, #52]	; 0x34
    f4f6:	9006      	str	r0, [sp, #24]
    f4f8:	980c      	ldr	r0, [sp, #48]	; 0x30
    f4fa:	9005      	str	r0, [sp, #20]
    f4fc:	9104      	str	r1, [sp, #16]
    f4fe:	9303      	str	r3, [sp, #12]
    f500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f502:	9302      	str	r3, [sp, #8]
    f504:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f506:	9101      	str	r1, [sp, #4]
    f508:	9200      	str	r2, [sp, #0]
    f50a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    f50e:	aa0e      	add	r2, sp, #56	; 0x38
    f510:	491b      	ldr	r1, [pc, #108]	; (f580 <shell_os_tasks_display_cmd+0xe8>)
    f512:	4630      	mov	r0, r6
    f514:	f001 fb35 	bl	10b82 <streamer_printf>
        prev_task = os_task_info_get_next(prev_task, &oti);
    f518:	a908      	add	r1, sp, #32
    f51a:	4620      	mov	r0, r4
    f51c:	f7fa fd56 	bl	9fcc <os_task_info_get_next>
        if (prev_task == NULL) {
    f520:	4604      	mov	r4, r0
    f522:	b148      	cbz	r0, f538 <shell_os_tasks_display_cmd+0xa0>
        if (name) {
    f524:	2d00      	cmp	r5, #0
    f526:	d0df      	beq.n	f4e8 <shell_os_tasks_display_cmd+0x50>
            if (strcmp(name, oti.oti_name)) {
    f528:	a90e      	add	r1, sp, #56	; 0x38
    f52a:	4628      	mov	r0, r5
    f52c:	f7fc fdda 	bl	c0e4 <strcmp>
    f530:	2800      	cmp	r0, #0
    f532:	d1f1      	bne.n	f518 <shell_os_tasks_display_cmd+0x80>
                found = 1;
    f534:	2701      	movs	r7, #1
    f536:	e7d7      	b.n	f4e8 <shell_os_tasks_display_cmd+0x50>
    if (name && !found) {
    f538:	b105      	cbz	r5, f53c <shell_os_tasks_display_cmd+0xa4>
    f53a:	b117      	cbz	r7, f542 <shell_os_tasks_display_cmd+0xaa>
}
    f53c:	2000      	movs	r0, #0
    f53e:	b017      	add	sp, #92	; 0x5c
    f540:	bdf0      	pop	{r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Couldn't find task with name %s\n", name);
    f542:	462a      	mov	r2, r5
    f544:	490f      	ldr	r1, [pc, #60]	; (f584 <shell_os_tasks_display_cmd+0xec>)
    f546:	4630      	mov	r0, r6
    f548:	f001 fb1b 	bl	10b82 <streamer_printf>
    f54c:	e7f6      	b.n	f53c <shell_os_tasks_display_cmd+0xa4>
    f54e:	bf00      	nop
    f550:	00021f90 	.word	0x00021f90
    f554:	00021f7c 	.word	0x00021f7c
    f558:	00021fd4 	.word	0x00021fd4
    f55c:	00021fdc 	.word	0x00021fdc
    f560:	00021fe4 	.word	0x00021fe4
    f564:	00021fec 	.word	0x00021fec
    f568:	00021ff4 	.word	0x00021ff4
    f56c:	00021ff8 	.word	0x00021ff8
    f570:	00022000 	.word	0x00022000
    f574:	00021f9c 	.word	0x00021f9c
    f578:	00021fa0 	.word	0x00021fa0
    f57c:	00021fa8 	.word	0x00021fa8
    f580:	00022004 	.word	0x00022004
    f584:	00022030 	.word	0x00022030

0000f588 <shell_os_register>:
    { 0 },
};

void
shell_os_register(void)
{
    f588:	b530      	push	{r4, r5, lr}
    f58a:	b083      	sub	sp, #12
    const struct shell_cmd *cmd;
    int rc;

    for (cmd = os_commands; cmd->sc_cmd != NULL; cmd++) {
    f58c:	4c0a      	ldr	r4, [pc, #40]	; (f5b8 <shell_os_register+0x30>)
    f58e:	e000      	b.n	f592 <shell_os_register+0xa>
    f590:	3410      	adds	r4, #16
    f592:	68a3      	ldr	r3, [r4, #8]
    f594:	b16b      	cbz	r3, f5b2 <shell_os_register+0x2a>
        rc = shell_cmd_register(cmd);
    f596:	4620      	mov	r0, r4
    f598:	f7ff fcf4 	bl	ef84 <shell_cmd_register>
        SYSINIT_PANIC_ASSERT_MSG(
    f59c:	2800      	cmp	r0, #0
    f59e:	d0f7      	beq.n	f590 <shell_os_register+0x8>
    f5a0:	2000      	movs	r0, #0
    f5a2:	9000      	str	r0, [sp, #0]
    f5a4:	4b05      	ldr	r3, [pc, #20]	; (f5bc <shell_os_register+0x34>)
    f5a6:	681d      	ldr	r5, [r3, #0]
    f5a8:	4603      	mov	r3, r0
    f5aa:	4602      	mov	r2, r0
    f5ac:	4601      	mov	r1, r0
    f5ae:	47a8      	blx	r5
    f5b0:	e7ee      	b.n	f590 <shell_os_register+0x8>
            rc == 0, "Failed to register OS shell commands");
    }
}
    f5b2:	b003      	add	sp, #12
    f5b4:	bd30      	pop	{r4, r5, pc}
    f5b6:	bf00      	nop
    f5b8:	00022120 	.word	0x00022120
    f5bc:	200001ec 	.word	0x200001ec

0000f5c0 <shell_ticks_cmd>:
/**
 * Handles the 'ticks' command
 */
int
shell_ticks_cmd(int argc, char **argv)
{
    f5c0:	b510      	push	{r4, lr}
    if (argc > 1) {
    f5c2:	2801      	cmp	r0, #1
    f5c4:	dd16      	ble.n	f5f4 <shell_ticks_cmd+0x34>
        if (!strcmp(argv[1], "on")) {
    f5c6:	684c      	ldr	r4, [r1, #4]
    f5c8:	490d      	ldr	r1, [pc, #52]	; (f600 <shell_ticks_cmd+0x40>)
    f5ca:	4620      	mov	r0, r4
    f5cc:	f7fc fd8a 	bl	c0e4 <strcmp>
    f5d0:	b150      	cbz	r0, f5e8 <shell_ticks_cmd+0x28>
            console_yes_ticks();
            console_printf(" Console Ticks on\n");
        }
        else if (!strcmp(argv[1],"off")) {
    f5d2:	490c      	ldr	r1, [pc, #48]	; (f604 <shell_ticks_cmd+0x44>)
    f5d4:	4620      	mov	r0, r4
    f5d6:	f7fc fd85 	bl	c0e4 <strcmp>
    f5da:	b970      	cbnz	r0, f5fa <shell_ticks_cmd+0x3a>
            console_printf(" Console Ticks off\n");
    f5dc:	480a      	ldr	r0, [pc, #40]	; (f608 <shell_ticks_cmd+0x48>)
    f5de:	f7fe fcfb 	bl	dfd8 <console_printf>
            console_no_ticks();
    f5e2:	f7fe fd07 	bl	dff4 <console_no_ticks>
        }
        return 0;
    f5e6:	e008      	b.n	f5fa <shell_ticks_cmd+0x3a>
            console_yes_ticks();
    f5e8:	f7fe fd0a 	bl	e000 <console_yes_ticks>
            console_printf(" Console Ticks on\n");
    f5ec:	4807      	ldr	r0, [pc, #28]	; (f60c <shell_ticks_cmd+0x4c>)
    f5ee:	f7fe fcf3 	bl	dfd8 <console_printf>
    f5f2:	e002      	b.n	f5fa <shell_ticks_cmd+0x3a>
    }
    console_printf(" Usage: ticks [on|off]\n");
    f5f4:	4806      	ldr	r0, [pc, #24]	; (f610 <shell_ticks_cmd+0x50>)
    f5f6:	f7fe fcef 	bl	dfd8 <console_printf>
    return 0;
}
    f5fa:	2000      	movs	r0, #0
    f5fc:	bd10      	pop	{r4, pc}
    f5fe:	bf00      	nop
    f600:	000221b0 	.word	0x000221b0
    f604:	000221c8 	.word	0x000221c8
    f608:	000221cc 	.word	0x000221cc
    f60c:	000221b4 	.word	0x000221b4
    f610:	000221e0 	.word	0x000221e0

0000f614 <shell_prompt_register>:
};


void
shell_prompt_register(void)
{
    f614:	b508      	push	{r3, lr}
    shell_register(SHELL_PROMPT, prompt_commands);
    f616:	4902      	ldr	r1, [pc, #8]	; (f620 <shell_prompt_register+0xc>)
    f618:	4802      	ldr	r0, [pc, #8]	; (f624 <shell_prompt_register+0x10>)
    f61a:	f7ff fc91 	bl	ef40 <shell_register>
}
    f61e:	bd08      	pop	{r3, pc}
    f620:	0002223c 	.word	0x0002223c
    f624:	000221f8 	.word	0x000221f8

0000f628 <stats_offset>:
    STAILQ_HEAD_INITIALIZER(g_stats_registry);

static size_t
stats_offset(const struct stats_hdr *hdr)
{
    if (hdr->s_flags & STATS_HDR_F_PERSIST) {
    f628:	88c3      	ldrh	r3, [r0, #6]
    f62a:	f013 0f01 	tst.w	r3, #1
    f62e:	d001      	beq.n	f634 <stats_offset+0xc>
        return sizeof (struct stats_persisted_hdr);
    f630:	2038      	movs	r0, #56	; 0x38
    f632:	4770      	bx	lr
    } else {
        return sizeof (struct stats_hdr);
    f634:	2014      	movs	r0, #20
    }
}
    f636:	4770      	bx	lr

0000f638 <stats_register_internal>:
    return (uint8_t *)hdr + offset;
}

static int
stats_register_internal(const char *name, struct stats_hdr *shdr)
{
    f638:	b570      	push	{r4, r5, r6, lr}
    f63a:	4606      	mov	r6, r0
    f63c:	460d      	mov	r5, r1
    int rc;

    /* Don't allow duplicate entries, return an error if this stat
     * is already registered.
     */
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
    f63e:	4b0f      	ldr	r3, [pc, #60]	; (f67c <stats_register_internal+0x44>)
    f640:	681c      	ldr	r4, [r3, #0]
    f642:	e000      	b.n	f646 <stats_register_internal+0xe>
    f644:	6924      	ldr	r4, [r4, #16]
    f646:	b14c      	cbz	r4, f65c <stats_register_internal+0x24>
        if (!strcmp(cur->s_name, name) || cur == shdr) {
    f648:	4631      	mov	r1, r6
    f64a:	6820      	ldr	r0, [r4, #0]
    f64c:	f7fc fd4a 	bl	c0e4 <strcmp>
    f650:	b188      	cbz	r0, f676 <stats_register_internal+0x3e>
    f652:	42ac      	cmp	r4, r5
    f654:	d1f6      	bne.n	f644 <stats_register_internal+0xc>

    STATS_INC(g_stats_stats, num_registered);

    return (0);
err:
    return (rc);
    f656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f65a:	e00b      	b.n	f674 <stats_register_internal+0x3c>
    shdr->s_name = name;
    f65c:	602e      	str	r6, [r5, #0]
    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
    f65e:	2000      	movs	r0, #0
    f660:	6128      	str	r0, [r5, #16]
    f662:	4b06      	ldr	r3, [pc, #24]	; (f67c <stats_register_internal+0x44>)
    f664:	685a      	ldr	r2, [r3, #4]
    f666:	6015      	str	r5, [r2, #0]
    f668:	3510      	adds	r5, #16
    f66a:	605d      	str	r5, [r3, #4]
    STATS_INC(g_stats_stats, num_registered);
    f66c:	4a04      	ldr	r2, [pc, #16]	; (f680 <stats_register_internal+0x48>)
    f66e:	6953      	ldr	r3, [r2, #20]
    f670:	3301      	adds	r3, #1
    f672:	6153      	str	r3, [r2, #20]
}
    f674:	bd70      	pop	{r4, r5, r6, pc}
    return (rc);
    f676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f67a:	e7fb      	b.n	f674 <stats_register_internal+0x3c>
    f67c:	200001c4 	.word	0x200001c4
    f680:	20006560 	.word	0x20006560

0000f684 <stats_size>:
    return hdr->s_cnt * hdr->s_size;
    f684:	7943      	ldrb	r3, [r0, #5]
    f686:	7900      	ldrb	r0, [r0, #4]
}
    f688:	fb03 f000 	mul.w	r0, r3, r0
    f68c:	4770      	bx	lr
	...

0000f690 <stats_walk>:
 * @return 0 on success, the return code of the walk_func on abort.
 *
 */
int
stats_walk(struct stats_hdr *hdr, stats_walk_func_t walk_func, void *arg)
{
    f690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f694:	b085      	sub	sp, #20
    f696:	4604      	mov	r4, r0
    f698:	4688      	mov	r8, r1
    f69a:	4617      	mov	r7, r2
    int rc;
#if MYNEWT_VAL(STATS_NAMES)
    int i;
#endif

    start = stats_offset(hdr);
    f69c:	f7ff ffc4 	bl	f628 <stats_offset>
    f6a0:	4681      	mov	r9, r0
    f6a2:	b285      	uxth	r5, r0
    cur = start;
    end = start + stats_size(hdr);
    f6a4:	4620      	mov	r0, r4
    f6a6:	f7ff ffed 	bl	f684 <stats_size>
    f6aa:	fa15 f680 	uxtah	r6, r5, r0
    f6ae:	b2b6      	uxth	r6, r6

    while (cur < end) {
    f6b0:	e00d      	b.n	f6ce <stats_walk+0x3e>
         * offset.  This annotation allows for naming only certain statistics,
         * and doesn't enforce ordering restrictions on the stats name map.
         */
        for (i = 0; i < hdr->s_map_cnt; ++i) {
            if (hdr->s_map[i].snm_off == cur) {
                name = hdr->s_map[i].snm_name;
    f6b2:	f8d0 2002 	ldr.w	r2, [r0, #2]
                break;
    f6b6:	e000      	b.n	f6ba <stats_walk+0x2a>
        name = NULL;
    f6b8:	2200      	movs	r2, #0
#endif
        /* Do this check irrespective of whether MYNEWT_VALUE(STATS_NAMES)
         * is set.  Users may only partially name elements in the statistics
         * structure.
         */
        if (name == NULL) {
    f6ba:	b1ca      	cbz	r2, f6f0 <stats_walk+0x60>
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
            name_buf[len] = '\0';
            name = name_buf;
        }

        rc = walk_func(hdr, arg, name, cur);
    f6bc:	462b      	mov	r3, r5
    f6be:	4639      	mov	r1, r7
    f6c0:	4620      	mov	r0, r4
    f6c2:	47c0      	blx	r8
        if (rc != 0) {
    f6c4:	4603      	mov	r3, r0
    f6c6:	bb40      	cbnz	r0, f71a <stats_walk+0x8a>
        }

        /* Statistics are variable sized, move forward either 16, 32 or 64
         * bits in the structure.
         */
        cur += hdr->s_size;
    f6c8:	7923      	ldrb	r3, [r4, #4]
    f6ca:	441d      	add	r5, r3
    f6cc:	b2ad      	uxth	r5, r5
    while (cur < end) {
    f6ce:	42b5      	cmp	r5, r6
    f6d0:	d222      	bcs.n	f718 <stats_walk+0x88>
        for (i = 0; i < hdr->s_map_cnt; ++i) {
    f6d2:	2300      	movs	r3, #0
    f6d4:	68e2      	ldr	r2, [r4, #12]
    f6d6:	429a      	cmp	r2, r3
    f6d8:	ddee      	ble.n	f6b8 <stats_walk+0x28>
            if (hdr->s_map[i].snm_off == cur) {
    f6da:	68a2      	ldr	r2, [r4, #8]
    f6dc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    f6e0:	eb02 0041 	add.w	r0, r2, r1, lsl #1
    f6e4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
    f6e8:	42aa      	cmp	r2, r5
    f6ea:	d0e2      	beq.n	f6b2 <stats_walk+0x22>
        for (i = 0; i < hdr->s_map_cnt; ++i) {
    f6ec:	3301      	adds	r3, #1
    f6ee:	e7f1      	b.n	f6d4 <stats_walk+0x44>
            ent_n = (cur - start) / hdr->s_size;
    f6f0:	fa1f f389 	uxth.w	r3, r9
    f6f4:	1aeb      	subs	r3, r5, r3
    f6f6:	7922      	ldrb	r2, [r4, #4]
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
    f6f8:	fb93 f3f2 	sdiv	r3, r3, r2
    f6fc:	4a09      	ldr	r2, [pc, #36]	; (f724 <stats_walk+0x94>)
    f6fe:	210c      	movs	r1, #12
    f700:	a801      	add	r0, sp, #4
    f702:	f7fd f906 	bl	c912 <snprintf>
            name_buf[len] = '\0';
    f706:	f100 0310 	add.w	r3, r0, #16
    f70a:	eb0d 0003 	add.w	r0, sp, r3
    f70e:	2300      	movs	r3, #0
    f710:	f800 3c0c 	strb.w	r3, [r0, #-12]
            name = name_buf;
    f714:	aa01      	add	r2, sp, #4
    f716:	e7d1      	b.n	f6bc <stats_walk+0x2c>
    }

    return (0);
    f718:	2300      	movs	r3, #0
err:
    return (rc);
}
    f71a:	4618      	mov	r0, r3
    f71c:	b005      	add	sp, #20
    f71e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f722:	bf00      	nop
    f724:	00022280 	.word	0x00022280

0000f728 <stats_init>:
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_init(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
        const struct stats_name_map *map, uint8_t map_cnt)
{
    f728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f72a:	4604      	mov	r4, r0
    f72c:	460e      	mov	r6, r1
    f72e:	4615      	mov	r5, r2
    f730:	461f      	mov	r7, r3
    size_t offset;

    offset = stats_offset(shdr);
    f732:	f7ff ff79 	bl	f628 <stats_offset>
    memset((uint8_t *)shdr + offset, 0, size * cnt);
    f736:	fb05 f206 	mul.w	r2, r5, r6
    f73a:	2100      	movs	r1, #0
    f73c:	4420      	add	r0, r4
    f73e:	f7fc fca6 	bl	c08e <memset>

    shdr->s_size = size;
    f742:	7126      	strb	r6, [r4, #4]
    shdr->s_cnt = cnt;
    f744:	7165      	strb	r5, [r4, #5]
    shdr->s_flags = 0;
    f746:	2000      	movs	r0, #0
    f748:	80e0      	strh	r0, [r4, #6]
#if MYNEWT_VAL(STATS_NAMES)
    shdr->s_map = map;
    f74a:	60a7      	str	r7, [r4, #8]
    shdr->s_map_cnt = map_cnt;
    f74c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    f750:	60e3      	str	r3, [r4, #12]
#endif

    return (0);
}
    f752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f754 <stats_module_init_internal>:
{
    f754:	b500      	push	{lr}
    f756:	b083      	sub	sp, #12
    STAILQ_INIT(&g_stats_registry);
    f758:	4b10      	ldr	r3, [pc, #64]	; (f79c <stats_module_init_internal+0x48>)
    f75a:	2200      	movs	r2, #0
    f75c:	601a      	str	r2, [r3, #0]
    f75e:	605b      	str	r3, [r3, #4]
    rc = stats_init(STATS_HDR(g_stats_stats),
    f760:	2201      	movs	r2, #1
    f762:	9200      	str	r2, [sp, #0]
    f764:	4b0e      	ldr	r3, [pc, #56]	; (f7a0 <stats_module_init_internal+0x4c>)
    f766:	2104      	movs	r1, #4
    f768:	480e      	ldr	r0, [pc, #56]	; (f7a4 <stats_module_init_internal+0x50>)
    f76a:	f7ff ffdd 	bl	f728 <stats_init>
    if (rc) {
    f76e:	4603      	mov	r3, r0
    f770:	b118      	cbz	r0, f77a <stats_module_init_internal+0x26>
}
    f772:	4618      	mov	r0, r3
    f774:	b003      	add	sp, #12
    f776:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_register_internal("stat", STATS_HDR(g_stats_stats));
    f77a:	490a      	ldr	r1, [pc, #40]	; (f7a4 <stats_module_init_internal+0x50>)
    f77c:	480a      	ldr	r0, [pc, #40]	; (f7a8 <stats_module_init_internal+0x54>)
    f77e:	f7ff ff5b 	bl	f638 <stats_register_internal>
    if (rc) {
    f782:	4603      	mov	r3, r0
    f784:	2800      	cmp	r0, #0
    f786:	d1f4      	bne.n	f772 <stats_module_init_internal+0x1e>
    rc = stats_nmgr_register_group();
    f788:	f000 f952 	bl	fa30 <stats_nmgr_register_group>
    if (rc) {
    f78c:	4603      	mov	r3, r0
    f78e:	2800      	cmp	r0, #0
    f790:	d1ef      	bne.n	f772 <stats_module_init_internal+0x1e>
    rc = stats_shell_register();
    f792:	f000 f9c5 	bl	fb20 <stats_shell_register>
    f796:	4603      	mov	r3, r0
    if (rc) {
    f798:	e7eb      	b.n	f772 <stats_module_init_internal+0x1e>
    f79a:	bf00      	nop
    f79c:	200001c4 	.word	0x200001c4
    f7a0:	0002229c 	.word	0x0002229c
    f7a4:	20006560 	.word	0x20006560
    f7a8:	00022284 	.word	0x00022284

0000f7ac <stats_module_init>:
{
    f7ac:	b510      	push	{r4, lr}
    f7ae:	b082      	sub	sp, #8
    SYSINIT_ASSERT_ACTIVE();
    f7b0:	4b0c      	ldr	r3, [pc, #48]	; (f7e4 <stats_module_init+0x38>)
    f7b2:	781b      	ldrb	r3, [r3, #0]
    f7b4:	b123      	cbz	r3, f7c0 <stats_module_init+0x14>
    if (g_stats_stats.snum_registered) {
    f7b6:	4b0c      	ldr	r3, [pc, #48]	; (f7e8 <stats_module_init+0x3c>)
    f7b8:	695b      	ldr	r3, [r3, #20]
    f7ba:	b133      	cbz	r3, f7ca <stats_module_init+0x1e>
}
    f7bc:	b002      	add	sp, #8
    f7be:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    f7c0:	461a      	mov	r2, r3
    f7c2:	4619      	mov	r1, r3
    f7c4:	4618      	mov	r0, r3
    f7c6:	f7f9 fbc5 	bl	8f54 <__assert_func>
    rc = stats_module_init_internal();
    f7ca:	f7ff ffc3 	bl	f754 <stats_module_init_internal>
    SYSINIT_PANIC_ASSERT(rc == 0);
    f7ce:	2800      	cmp	r0, #0
    f7d0:	d0f4      	beq.n	f7bc <stats_module_init+0x10>
    f7d2:	2000      	movs	r0, #0
    f7d4:	9000      	str	r0, [sp, #0]
    f7d6:	4b05      	ldr	r3, [pc, #20]	; (f7ec <stats_module_init+0x40>)
    f7d8:	681c      	ldr	r4, [r3, #0]
    f7da:	4603      	mov	r3, r0
    f7dc:	4602      	mov	r2, r0
    f7de:	4601      	mov	r1, r0
    f7e0:	47a0      	blx	r4
    f7e2:	e7eb      	b.n	f7bc <stats_module_init+0x10>
    f7e4:	200065ac 	.word	0x200065ac
    f7e8:	20006560 	.word	0x20006560
    f7ec:	200001ec 	.word	0x200001ec

0000f7f0 <stats_group_walk>:
 *
 * @return 0 on success, non-zero error code on failure
 */
int
stats_group_walk(stats_group_walk_func_t walk_func, void *arg)
{
    f7f0:	b570      	push	{r4, r5, r6, lr}
    f7f2:	4606      	mov	r6, r0
    f7f4:	460d      	mov	r5, r1
    struct stats_hdr *hdr;
    int rc;

    STAILQ_FOREACH(hdr, &g_stats_registry, s_next) {
    f7f6:	4b07      	ldr	r3, [pc, #28]	; (f814 <stats_group_walk+0x24>)
    f7f8:	681c      	ldr	r4, [r3, #0]
    f7fa:	e000      	b.n	f7fe <stats_group_walk+0xe>
    f7fc:	6924      	ldr	r4, [r4, #16]
    f7fe:	b134      	cbz	r4, f80e <stats_group_walk+0x1e>
        rc = walk_func(hdr, arg);
    f800:	4629      	mov	r1, r5
    f802:	4620      	mov	r0, r4
    f804:	47b0      	blx	r6
        if (rc != 0) {
    f806:	4603      	mov	r3, r0
    f808:	2800      	cmp	r0, #0
    f80a:	d0f7      	beq.n	f7fc <stats_group_walk+0xc>
    f80c:	e000      	b.n	f810 <stats_group_walk+0x20>
            goto err;
        }
    }
    return (0);
    f80e:	2300      	movs	r3, #0
err:
    return (rc);
}
    f810:	4618      	mov	r0, r3
    f812:	bd70      	pop	{r4, r5, r6, pc}
    f814:	200001c4 	.word	0x200001c4

0000f818 <stats_group_find>:
 *
 * @return statistic structure if found, NULL if not found.
 */
struct stats_hdr *
stats_group_find(const char *name)
{
    f818:	b538      	push	{r3, r4, r5, lr}
    f81a:	4605      	mov	r5, r0
    struct stats_hdr *cur;

    cur = NULL;
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
    f81c:	4b06      	ldr	r3, [pc, #24]	; (f838 <stats_group_find+0x20>)
    f81e:	681c      	ldr	r4, [r3, #0]
    f820:	e000      	b.n	f824 <stats_group_find+0xc>
    f822:	6924      	ldr	r4, [r4, #16]
    f824:	b12c      	cbz	r4, f832 <stats_group_find+0x1a>
        if (!strcmp(cur->s_name, name)) {
    f826:	4629      	mov	r1, r5
    f828:	6820      	ldr	r0, [r4, #0]
    f82a:	f7fc fc5b 	bl	c0e4 <strcmp>
    f82e:	2800      	cmp	r0, #0
    f830:	d1f7      	bne.n	f822 <stats_group_find+0xa>
            break;
        }
    }

    return (cur);
}
    f832:	4620      	mov	r0, r4
    f834:	bd38      	pop	{r3, r4, r5, pc}
    f836:	bf00      	nop
    f838:	200001c4 	.word	0x200001c4

0000f83c <stats_register>:
 *
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_register(const char *name, struct stats_hdr *shdr)
{
    f83c:	b538      	push	{r3, r4, r5, lr}
    f83e:	4604      	mov	r4, r0
    f840:	460d      	mov	r5, r1
    /*
     * We should always have at least "stat" registered so if there are no stats
     * registered, try to initialize module first. This allows to register stat
     * before sysinit is called (e.g. from BSP).
     */
    if (g_stats_stats.snum_registered == 0) {
    f842:	4b07      	ldr	r3, [pc, #28]	; (f860 <stats_register+0x24>)
    f844:	695b      	ldr	r3, [r3, #20]
    f846:	b913      	cbnz	r3, f84e <stats_register+0x12>
        if (stats_module_init_internal()) {
    f848:	f7ff ff84 	bl	f754 <stats_module_init_internal>
    f84c:	b920      	cbnz	r0, f858 <stats_register+0x1c>
            return -1;
        }
    }

    return stats_register_internal(name, shdr);
    f84e:	4629      	mov	r1, r5
    f850:	4620      	mov	r0, r4
    f852:	f7ff fef1 	bl	f638 <stats_register_internal>
}
    f856:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
    f858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f85c:	e7fb      	b.n	f856 <stats_register+0x1a>
    f85e:	bf00      	nop
    f860:	20006560 	.word	0x20006560

0000f864 <stats_nmgr_encode_name>:
    return (g_err);
}

static int
stats_nmgr_encode_name(struct stats_hdr *hdr, void *arg)
{
    f864:	b538      	push	{r3, r4, r5, lr}
    f866:	460c      	mov	r4, r1
    CborEncoder *penc = (CborEncoder *) arg;

    return cbor_encode_text_stringz(penc, hdr->s_name);
    f868:	6805      	ldr	r5, [r0, #0]
    f86a:	4628      	mov	r0, r5
    f86c:	f7fc fc46 	bl	c0fc <strlen>
    f870:	4602      	mov	r2, r0
    f872:	4629      	mov	r1, r5
    f874:	4620      	mov	r0, r4
    f876:	f002 f87a 	bl	1196e <cbor_encode_text_string>
}
    f87a:	bd38      	pop	{r3, r4, r5, pc}

0000f87c <stats_nmgr_list>:
    return (0);
}

static int
stats_nmgr_list(struct mgmt_cbuf *cb)
{
    f87c:	b530      	push	{r4, r5, lr}
    f87e:	b085      	sub	sp, #20
    CborError g_err = CborNoError;
    CborEncoder stats;

    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
    f880:	f100 050c 	add.w	r5, r0, #12
    f884:	2202      	movs	r2, #2
    f886:	4914      	ldr	r1, [pc, #80]	; (f8d8 <stats_nmgr_list+0x5c>)
    f888:	4628      	mov	r0, r5
    f88a:	f002 f870 	bl	1196e <cbor_encode_text_string>
    f88e:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
    f890:	2200      	movs	r2, #0
    f892:	2300      	movs	r3, #0
    f894:	4628      	mov	r0, r5
    f896:	f001 ffef 	bl	11878 <cbor_encode_int>
    f89a:	4304      	orrs	r4, r0
    f89c:	2209      	movs	r2, #9
    f89e:	490f      	ldr	r1, [pc, #60]	; (f8dc <stats_nmgr_list+0x60>)
    f8a0:	4628      	mov	r0, r5
    f8a2:	f002 f864 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "stat_list");
    f8a6:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_array(&cb->encoder, &stats,
    f8a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f8ac:	4669      	mov	r1, sp
    f8ae:	4628      	mov	r0, r5
    f8b0:	f002 f864 	bl	1197c <cbor_encoder_create_array>
    f8b4:	4304      	orrs	r4, r0
                                       CborIndefiniteLength);
    stats_group_walk(stats_nmgr_encode_name, &stats);
    f8b6:	4669      	mov	r1, sp
    f8b8:	4809      	ldr	r0, [pc, #36]	; (f8e0 <stats_nmgr_list+0x64>)
    f8ba:	f7ff ff99 	bl	f7f0 <stats_group_walk>
    g_err |= cbor_encoder_close_container(&cb->encoder, &stats);
    f8be:	4669      	mov	r1, sp
    f8c0:	4628      	mov	r0, r5
    f8c2:	f002 f86e 	bl	119a2 <cbor_encoder_close_container>

    if (g_err) {
    f8c6:	ea54 0300 	orrs.w	r3, r4, r0
    f8ca:	d102      	bne.n	f8d2 <stats_nmgr_list+0x56>
        return MGMT_ERR_ENOMEM;
    }
    return (0);
    f8cc:	2000      	movs	r0, #0
}
    f8ce:	b005      	add	sp, #20
    f8d0:	bd30      	pop	{r4, r5, pc}
        return MGMT_ERR_ENOMEM;
    f8d2:	2002      	movs	r0, #2
    f8d4:	e7fb      	b.n	f8ce <stats_nmgr_list+0x52>
    f8d6:	bf00      	nop
    f8d8:	000222a4 	.word	0x000222a4
    f8dc:	000222a8 	.word	0x000222a8
    f8e0:	0000f865 	.word	0x0000f865

0000f8e4 <stats_nmgr_walk_func>:
{
    f8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f8e8:	4605      	mov	r5, r0
    f8ea:	460e      	mov	r6, r1
    f8ec:	4614      	mov	r4, r2
    f8ee:	461f      	mov	r7, r3
    stat_val = (uint8_t *)hdr + stat_off;
    f8f0:	eb00 0803 	add.w	r8, r0, r3
    f8f4:	4610      	mov	r0, r2
    f8f6:	f7fc fc01 	bl	c0fc <strlen>
    f8fa:	4602      	mov	r2, r0
    f8fc:	4621      	mov	r1, r4
    f8fe:	4630      	mov	r0, r6
    f900:	f002 f835 	bl	1196e <cbor_encode_text_string>
    f904:	4604      	mov	r4, r0
    switch (hdr->s_size) {
    f906:	792a      	ldrb	r2, [r5, #4]
    f908:	2a04      	cmp	r2, #4
    f90a:	d00d      	beq.n	f928 <stats_nmgr_walk_func+0x44>
    f90c:	2a08      	cmp	r2, #8
    f90e:	d012      	beq.n	f936 <stats_nmgr_walk_func+0x52>
    f910:	2a02      	cmp	r2, #2
    f912:	d002      	beq.n	f91a <stats_nmgr_walk_func+0x36>
}
    f914:	4620      	mov	r0, r4
    f916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            g_err |= cbor_encode_uint(penc, *(uint16_t *) stat_val);
    f91a:	5bea      	ldrh	r2, [r5, r7]
    f91c:	2300      	movs	r3, #0
    f91e:	4630      	mov	r0, r6
    f920:	f001 ff6a 	bl	117f8 <cbor_encode_uint>
    f924:	4304      	orrs	r4, r0
            break;
    f926:	e7f5      	b.n	f914 <stats_nmgr_walk_func+0x30>
            g_err |= cbor_encode_uint(penc, *(uint32_t *) stat_val);
    f928:	59ea      	ldr	r2, [r5, r7]
    f92a:	2300      	movs	r3, #0
    f92c:	4630      	mov	r0, r6
    f92e:	f001 ff63 	bl	117f8 <cbor_encode_uint>
    f932:	4304      	orrs	r4, r0
            break;
    f934:	e7ee      	b.n	f914 <stats_nmgr_walk_func+0x30>
            g_err |= cbor_encode_uint(penc, *(uint64_t *) stat_val);
    f936:	e9d8 2300 	ldrd	r2, r3, [r8]
    f93a:	4630      	mov	r0, r6
    f93c:	f001 ff5c 	bl	117f8 <cbor_encode_uint>
    f940:	4304      	orrs	r4, r0
            break;
    f942:	e7e7      	b.n	f914 <stats_nmgr_walk_func+0x30>

0000f944 <stats_nmgr_read>:
{
    f944:	b570      	push	{r4, r5, r6, lr}
    f946:	b0a4      	sub	sp, #144	; 0x90
    f948:	4605      	mov	r5, r0
    struct cbor_attr_t attrs[] = {
    f94a:	2260      	movs	r2, #96	; 0x60
    f94c:	2100      	movs	r1, #0
    f94e:	a804      	add	r0, sp, #16
    f950:	f7fc fb9d 	bl	c08e <memset>
    f954:	4b30      	ldr	r3, [pc, #192]	; (fa18 <stats_nmgr_read+0xd4>)
    f956:	9304      	str	r3, [sp, #16]
    f958:	2304      	movs	r3, #4
    f95a:	f88d 3014 	strb.w	r3, [sp, #20]
    f95e:	ab1c      	add	r3, sp, #112	; 0x70
    f960:	9306      	str	r3, [sp, #24]
    f962:	2320      	movs	r3, #32
    f964:	930e      	str	r3, [sp, #56]	; 0x38
    g_err = cbor_read_object(&cb->it, attrs);
    f966:	a904      	add	r1, sp, #16
    f968:	f105 001c 	add.w	r0, r5, #28
    f96c:	f001 fe18 	bl	115a0 <cbor_read_object>
    if (g_err != 0) {
    f970:	2800      	cmp	r0, #0
    f972:	d14a      	bne.n	fa0a <stats_nmgr_read+0xc6>
    f974:	4604      	mov	r4, r0
    hdr = stats_group_find(stats_name);
    f976:	a81c      	add	r0, sp, #112	; 0x70
    f978:	f7ff ff4e 	bl	f818 <stats_group_find>
    if (!hdr) {
    f97c:	4606      	mov	r6, r0
    f97e:	2800      	cmp	r0, #0
    f980:	d045      	beq.n	fa0e <stats_nmgr_read+0xca>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
    f982:	350c      	adds	r5, #12
    f984:	2202      	movs	r2, #2
    f986:	4925      	ldr	r1, [pc, #148]	; (fa1c <stats_nmgr_read+0xd8>)
    f988:	4628      	mov	r0, r5
    f98a:	f001 fff0 	bl	1196e <cbor_encode_text_string>
    f98e:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
    f990:	2200      	movs	r2, #0
    f992:	2300      	movs	r3, #0
    f994:	4628      	mov	r0, r5
    f996:	f001 ff6f 	bl	11878 <cbor_encode_int>
    f99a:	4304      	orrs	r4, r0
    f99c:	2204      	movs	r2, #4
    f99e:	491e      	ldr	r1, [pc, #120]	; (fa18 <stats_nmgr_read+0xd4>)
    f9a0:	4628      	mov	r0, r5
    f9a2:	f001 ffe4 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "name");
    f9a6:	4304      	orrs	r4, r0
    f9a8:	a81c      	add	r0, sp, #112	; 0x70
    f9aa:	f7fc fba7 	bl	c0fc <strlen>
    f9ae:	4602      	mov	r2, r0
    f9b0:	a91c      	add	r1, sp, #112	; 0x70
    f9b2:	4628      	mov	r0, r5
    f9b4:	f001 ffdb 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, stats_name);
    f9b8:	4304      	orrs	r4, r0
    f9ba:	2205      	movs	r2, #5
    f9bc:	4918      	ldr	r1, [pc, #96]	; (fa20 <stats_nmgr_read+0xdc>)
    f9be:	4628      	mov	r0, r5
    f9c0:	f001 ffd5 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "group");
    f9c4:	4304      	orrs	r4, r0
    g_err |= cbor_encode_text_string(&cb->encoder, "sys", sizeof("sys")-1);
    f9c6:	2203      	movs	r2, #3
    f9c8:	4916      	ldr	r1, [pc, #88]	; (fa24 <stats_nmgr_read+0xe0>)
    f9ca:	4628      	mov	r0, r5
    f9cc:	f001 ffcf 	bl	1196e <cbor_encode_text_string>
    f9d0:	4304      	orrs	r4, r0
    f9d2:	2206      	movs	r2, #6
    f9d4:	4914      	ldr	r1, [pc, #80]	; (fa28 <stats_nmgr_read+0xe4>)
    f9d6:	4628      	mov	r0, r5
    f9d8:	f001 ffc9 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "fields");
    f9dc:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &stats,
    f9de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f9e2:	4669      	mov	r1, sp
    f9e4:	4628      	mov	r0, r5
    f9e6:	f001 ffce 	bl	11986 <cbor_encoder_create_map>
    f9ea:	4304      	orrs	r4, r0
    stats_walk(hdr, stats_nmgr_walk_func, &stats);
    f9ec:	466a      	mov	r2, sp
    f9ee:	490f      	ldr	r1, [pc, #60]	; (fa2c <stats_nmgr_read+0xe8>)
    f9f0:	4630      	mov	r0, r6
    f9f2:	f7ff fe4d 	bl	f690 <stats_walk>
    g_err |= cbor_encoder_close_container(&cb->encoder, &stats);
    f9f6:	4669      	mov	r1, sp
    f9f8:	4628      	mov	r0, r5
    f9fa:	f001 ffd2 	bl	119a2 <cbor_encoder_close_container>
    if (g_err) {
    f9fe:	ea54 0300 	orrs.w	r3, r4, r0
    fa02:	d106      	bne.n	fa12 <stats_nmgr_read+0xce>
    return (0);
    fa04:	2000      	movs	r0, #0
}
    fa06:	b024      	add	sp, #144	; 0x90
    fa08:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_EINVAL;
    fa0a:	2003      	movs	r0, #3
    fa0c:	e7fb      	b.n	fa06 <stats_nmgr_read+0xc2>
        return MGMT_ERR_EINVAL;
    fa0e:	2003      	movs	r0, #3
    fa10:	e7f9      	b.n	fa06 <stats_nmgr_read+0xc2>
        return MGMT_ERR_ENOMEM;
    fa12:	2002      	movs	r0, #2
    fa14:	e7f7      	b.n	fa06 <stats_nmgr_read+0xc2>
    fa16:	bf00      	nop
    fa18:	00023ad0 	.word	0x00023ad0
    fa1c:	000222a4 	.word	0x000222a4
    fa20:	000222b4 	.word	0x000222b4
    fa24:	000222bc 	.word	0x000222bc
    fa28:	000222c0 	.word	0x000222c0
    fa2c:	0000f8e5 	.word	0x0000f8e5

0000fa30 <stats_nmgr_register_group>:
/**
 * Register nmgr group handlers
 */
int
stats_nmgr_register_group(void)
{
    fa30:	b508      	push	{r3, lr}
    int rc;

    MGMT_GROUP_SET_HANDLERS(&shell_nmgr_group, shell_nmgr_group_handlers);
    fa32:	4804      	ldr	r0, [pc, #16]	; (fa44 <stats_nmgr_register_group+0x14>)
    fa34:	4b04      	ldr	r3, [pc, #16]	; (fa48 <stats_nmgr_register_group+0x18>)
    fa36:	6003      	str	r3, [r0, #0]
    fa38:	2302      	movs	r3, #2
    fa3a:	8083      	strh	r3, [r0, #4]
    shell_nmgr_group.mg_group_id = MGMT_GROUP_ID_STATS;
    fa3c:	80c3      	strh	r3, [r0, #6]

    rc = mgmt_group_register(&shell_nmgr_group);
    fa3e:	f00b feef 	bl	1b820 <mgmt_group_register>
    }

    return (0);
err:
    return (rc);
}
    fa42:	bd08      	pop	{r3, pc}
    fa44:	20006578 	.word	0x20006578
    fa48:	200001cc 	.word	0x200001cc

0000fa4c <stats_shell_display_entry>:
uint8_t stats_shell_registered;

static int 
stats_shell_display_entry(struct stats_hdr *hdr, void *arg, char *name,
        uint16_t stat_off)
{
    fa4c:	b500      	push	{lr}
    fa4e:	b083      	sub	sp, #12
    fa50:	4684      	mov	ip, r0
    fa52:	4608      	mov	r0, r1
    struct streamer *streamer;
    void *stat_val;

    streamer = arg;

    stat_val = (uint8_t *)hdr + stat_off;
    fa54:	eb0c 0103 	add.w	r1, ip, r3
    switch (hdr->s_size) {
    fa58:	f89c e004 	ldrb.w	lr, [ip, #4]
    fa5c:	f1be 0f04 	cmp.w	lr, #4
    fa60:	d013      	beq.n	fa8a <stats_shell_display_entry+0x3e>
    fa62:	f1be 0f08 	cmp.w	lr, #8
    fa66:	d016      	beq.n	fa96 <stats_shell_display_entry+0x4a>
    fa68:	f1be 0f02 	cmp.w	lr, #2
    fa6c:	d004      	beq.n	fa78 <stats_shell_display_entry+0x2c>
        case sizeof(uint64_t):
            streamer_printf(streamer, "%s: %llu\n", name,
                    *(uint64_t *) stat_val);
            break;
        default:
            streamer_printf(streamer, "Unknown stat size for %s %u\n", name, 
    fa6e:	4673      	mov	r3, lr
    fa70:	490d      	ldr	r1, [pc, #52]	; (faa8 <stats_shell_display_entry+0x5c>)
    fa72:	f001 f886 	bl	10b82 <streamer_printf>
                    hdr->s_size);
            break;
    fa76:	e004      	b.n	fa82 <stats_shell_display_entry+0x36>
            streamer_printf(streamer, "%s: %u\n", name,
    fa78:	f83c 3003 	ldrh.w	r3, [ip, r3]
    fa7c:	490b      	ldr	r1, [pc, #44]	; (faac <stats_shell_display_entry+0x60>)
    fa7e:	f001 f880 	bl	10b82 <streamer_printf>
    }

    return (0);
}
    fa82:	2000      	movs	r0, #0
    fa84:	b003      	add	sp, #12
    fa86:	f85d fb04 	ldr.w	pc, [sp], #4
            streamer_printf(streamer, "%s: %lu\n", name,
    fa8a:	f85c 3003 	ldr.w	r3, [ip, r3]
    fa8e:	4908      	ldr	r1, [pc, #32]	; (fab0 <stats_shell_display_entry+0x64>)
    fa90:	f001 f877 	bl	10b82 <streamer_printf>
            break;
    fa94:	e7f5      	b.n	fa82 <stats_shell_display_entry+0x36>
            streamer_printf(streamer, "%s: %llu\n", name,
    fa96:	ed91 7b00 	vldr	d7, [r1]
    fa9a:	ed8d 7b00 	vstr	d7, [sp]
    fa9e:	4905      	ldr	r1, [pc, #20]	; (fab4 <stats_shell_display_entry+0x68>)
    faa0:	f001 f86f 	bl	10b82 <streamer_printf>
            break;
    faa4:	e7ed      	b.n	fa82 <stats_shell_display_entry+0x36>
    faa6:	bf00      	nop
    faa8:	000222e8 	.word	0x000222e8
    faac:	000222c8 	.word	0x000222c8
    fab0:	000222d0 	.word	0x000222d0
    fab4:	000222dc 	.word	0x000222dc

0000fab8 <stats_shell_display_group>:

static int 
stats_shell_display_group(struct stats_hdr *hdr, void *arg)
{
    fab8:	b508      	push	{r3, lr}
    faba:	460b      	mov	r3, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "\t%s\n", hdr->s_name);
    fabc:	6802      	ldr	r2, [r0, #0]
    fabe:	4903      	ldr	r1, [pc, #12]	; (facc <stats_shell_display_group+0x14>)
    fac0:	4618      	mov	r0, r3
    fac2:	f001 f85e 	bl	10b82 <streamer_printf>
    return (0);
}
    fac6:	2000      	movs	r0, #0
    fac8:	bd08      	pop	{r3, pc}
    faca:	bf00      	nop
    facc:	00022308 	.word	0x00022308

0000fad0 <shell_stats_display>:

static int
shell_stats_display(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
    fad0:	b538      	push	{r3, r4, r5, lr}
    fad2:	461c      	mov	r4, r3
    struct stats_hdr *hdr;
    char *name;
    int rc;

    name = argv[1];
    fad4:	6855      	ldr	r5, [r2, #4]
    if (name == NULL || !strcmp(name, "")) {
    fad6:	b155      	cbz	r5, faee <shell_stats_display+0x1e>
    fad8:	782b      	ldrb	r3, [r5, #0]
    fada:	b143      	cbz	r3, faee <shell_stats_display+0x1e>
        stats_group_walk(stats_shell_display_group, streamer);
        rc = OS_EINVAL;
        goto err;
    }

    hdr = stats_group_find(name);
    fadc:	4628      	mov	r0, r5
    fade:	f7ff fe9b 	bl	f818 <stats_group_find>
    if (!hdr) {
    fae2:	b170      	cbz	r0, fb02 <shell_stats_display+0x32>
        streamer_printf(streamer, "Could not find statistic group %s\n", name);
        rc = OS_EINVAL;
        goto err;
    }

    rc = stats_walk(hdr, stats_shell_display_entry, streamer);
    fae4:	4622      	mov	r2, r4
    fae6:	490a      	ldr	r1, [pc, #40]	; (fb10 <shell_stats_display+0x40>)
    fae8:	f7ff fdd2 	bl	f690 <stats_walk>
    }

    return (0);
err:
    return (rc);
}
    faec:	bd38      	pop	{r3, r4, r5, pc}
        streamer_printf(streamer, "Must specify a statistic name to dump, "
    faee:	4909      	ldr	r1, [pc, #36]	; (fb14 <shell_stats_display+0x44>)
    faf0:	4620      	mov	r0, r4
    faf2:	f001 f846 	bl	10b82 <streamer_printf>
        stats_group_walk(stats_shell_display_group, streamer);
    faf6:	4621      	mov	r1, r4
    faf8:	4807      	ldr	r0, [pc, #28]	; (fb18 <shell_stats_display+0x48>)
    fafa:	f7ff fe79 	bl	f7f0 <stats_group_walk>
        rc = OS_EINVAL;
    fafe:	2002      	movs	r0, #2
        goto err;
    fb00:	e7f4      	b.n	faec <shell_stats_display+0x1c>
        streamer_printf(streamer, "Could not find statistic group %s\n", name);
    fb02:	462a      	mov	r2, r5
    fb04:	4905      	ldr	r1, [pc, #20]	; (fb1c <shell_stats_display+0x4c>)
    fb06:	4620      	mov	r0, r4
    fb08:	f001 f83b 	bl	10b82 <streamer_printf>
        rc = OS_EINVAL;
    fb0c:	2002      	movs	r0, #2
        goto err;
    fb0e:	e7ed      	b.n	faec <shell_stats_display+0x1c>
    fb10:	0000fa4d 	.word	0x0000fa4d
    fb14:	00022310 	.word	0x00022310
    fb18:	0000fab9 	.word	0x0000fab9
    fb1c:	0002234c 	.word	0x0002234c

0000fb20 <stats_shell_register>:


int 
stats_shell_register(void)
{
    fb20:	b508      	push	{r3, lr}
    if (!stats_shell_registered) {
    fb22:	4b06      	ldr	r3, [pc, #24]	; (fb3c <stats_shell_register+0x1c>)
    fb24:	781b      	ldrb	r3, [r3, #0]
    fb26:	b10b      	cbz	r3, fb2c <stats_shell_register+0xc>
        stats_shell_registered = 1;
        shell_cmd_register(&shell_stats_cmd);
    }

    return (0);
}
    fb28:	2000      	movs	r0, #0
    fb2a:	bd08      	pop	{r3, pc}
        stats_shell_registered = 1;
    fb2c:	4b03      	ldr	r3, [pc, #12]	; (fb3c <stats_shell_register+0x1c>)
    fb2e:	2201      	movs	r2, #1
    fb30:	701a      	strb	r2, [r3, #0]
        shell_cmd_register(&shell_stats_cmd);
    fb32:	4803      	ldr	r0, [pc, #12]	; (fb40 <stats_shell_register+0x20>)
    fb34:	f7ff fa26 	bl	ef84 <shell_cmd_register>
    fb38:	e7f6      	b.n	fb28 <stats_shell_register+0x8>
    fb3a:	bf00      	nop
    fb3c:	20006584 	.word	0x20006584
    fb40:	200001dc 	.word	0x200001dc

0000fb44 <sysdown_timer_exp>:
    }
}

static void
sysdown_timer_exp(struct os_event *unused)
{
    fb44:	b508      	push	{r3, lr}
    assert(0);
    fb46:	2300      	movs	r3, #0
    fb48:	461a      	mov	r2, r3
    fb4a:	4619      	mov	r1, r3
    fb4c:	4618      	mov	r0, r3
    fb4e:	f7f9 fa01 	bl	8f54 <__assert_func>
	...

0000fb54 <sysdown_complete>:
{
    fb54:	b508      	push	{r3, lr}
    os_callout_stop(&sysdown_timer);
    fb56:	4803      	ldr	r0, [pc, #12]	; (fb64 <sysdown_complete+0x10>)
    fb58:	f7f9 fb90 	bl	927c <os_callout_stop>
    os_system_reset();
    fb5c:	f7f9 fb5f 	bl	921e <os_system_reset>
}
    fb60:	bd08      	pop	{r3, pc}
    fb62:	bf00      	nop
    fb64:	2000658c 	.word	0x2000658c

0000fb68 <sysdown>:
}

int
sysdown(int reason)
{
    fb68:	b570      	push	{r4, r5, r6, lr}
    fb6a:	4605      	mov	r5, r0
    os_sr_t sr;
    int rc;
    int i;

    /* Only allow one shutdown operation. */
    OS_ENTER_CRITICAL(sr);
    fb6c:	f7fa fbfc 	bl	a368 <os_arch_save_sr>
    if (sysdown_active) {
    fb70:	4b20      	ldr	r3, [pc, #128]	; (fbf4 <sysdown+0x8c>)
    fb72:	781b      	ldrb	r3, [r3, #0]
    fb74:	b943      	cbnz	r3, fb88 <sysdown+0x20>
        rc = SYS_EALREADY;
    } else {
        sysdown_active = true;
    fb76:	4b1f      	ldr	r3, [pc, #124]	; (fbf4 <sysdown+0x8c>)
    fb78:	2201      	movs	r2, #1
    fb7a:	701a      	strb	r2, [r3, #0]
        rc = 0;
    fb7c:	2600      	movs	r6, #0
    }
    OS_EXIT_CRITICAL(sr);
    fb7e:	f7fa fbf9 	bl	a374 <os_arch_restore_sr>

    if (rc != 0) {
    fb82:	b126      	cbz	r6, fb8e <sysdown+0x26>
    if (sysdown_num_in_progress == 0) {
        sysdown_complete();
    }

    return 0;
}
    fb84:	4630      	mov	r0, r6
    fb86:	bd70      	pop	{r4, r5, r6, pc}
        rc = SYS_EALREADY;
    fb88:	f06f 060a 	mvn.w	r6, #10
    fb8c:	e7f7      	b.n	fb7e <sysdown+0x16>
    os_callout_init(&sysdown_timer, os_eventq_dflt_get(), sysdown_timer_exp,
    fb8e:	f7f9 fdb5 	bl	96fc <os_eventq_dflt_get>
    fb92:	4601      	mov	r1, r0
    fb94:	4c18      	ldr	r4, [pc, #96]	; (fbf8 <sysdown+0x90>)
    fb96:	2300      	movs	r3, #0
    fb98:	4a18      	ldr	r2, [pc, #96]	; (fbfc <sysdown+0x94>)
    fb9a:	4620      	mov	r0, r4
    fb9c:	f7f9 fb60 	bl	9260 <os_callout_init>
    rc = os_callout_reset(&sysdown_timer, SYSDOWN_TIMEOUT_TICKS);
    fba0:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    fba4:	4620      	mov	r0, r4
    fba6:	f7f9 fb87 	bl	92b8 <os_callout_reset>
    assert(rc == 0);
    fbaa:	4606      	mov	r6, r0
    fbac:	b908      	cbnz	r0, fbb2 <sysdown+0x4a>
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
    fbae:	4604      	mov	r4, r0
    fbb0:	e006      	b.n	fbc0 <sysdown+0x58>
    assert(rc == 0);
    fbb2:	2300      	movs	r3, #0
    fbb4:	461a      	mov	r2, r3
    fbb6:	4619      	mov	r1, r3
    fbb8:	4618      	mov	r0, r3
    fbba:	f7f9 f9cb 	bl	8f54 <__assert_func>
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
    fbbe:	3401      	adds	r4, #1
    fbc0:	4b0f      	ldr	r3, [pc, #60]	; (fc00 <sysdown+0x98>)
    fbc2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    fbc6:	b163      	cbz	r3, fbe2 <sysdown+0x7a>
        rc = sysdown_cbs[i](reason);
    fbc8:	4628      	mov	r0, r5
    fbca:	4798      	blx	r3
        switch (rc) {
    fbcc:	2801      	cmp	r0, #1
    fbce:	d1f6      	bne.n	fbbe <sysdown+0x56>
            OS_ENTER_CRITICAL(sr);
    fbd0:	f7fa fbca 	bl	a368 <os_arch_save_sr>
            sysdown_num_in_progress++;
    fbd4:	4a0b      	ldr	r2, [pc, #44]	; (fc04 <sysdown+0x9c>)
    fbd6:	6813      	ldr	r3, [r2, #0]
    fbd8:	3301      	adds	r3, #1
    fbda:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
    fbdc:	f7fa fbca 	bl	a374 <os_arch_restore_sr>
            break;
    fbe0:	e7ed      	b.n	fbbe <sysdown+0x56>
    if (sysdown_num_in_progress == 0) {
    fbe2:	4b08      	ldr	r3, [pc, #32]	; (fc04 <sysdown+0x9c>)
    fbe4:	681c      	ldr	r4, [r3, #0]
    fbe6:	2c00      	cmp	r4, #0
    fbe8:	d1cc      	bne.n	fb84 <sysdown+0x1c>
        sysdown_complete();
    fbea:	f7ff ffb3 	bl	fb54 <sysdown_complete>
    return 0;
    fbee:	4626      	mov	r6, r4
    fbf0:	e7c8      	b.n	fb84 <sysdown+0x1c>
    fbf2:	bf00      	nop
    fbf4:	20006585 	.word	0x20006585
    fbf8:	2000658c 	.word	0x2000658c
    fbfc:	0000fb45 	.word	0x0000fb45
    fc00:	000227a4 	.word	0x000227a4
    fc04:	20006588 	.word	0x20006588

0000fc08 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    fc08:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    fc0a:	f7f9 f9a3 	bl	8f54 <__assert_func>
	...

0000fc10 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
    fc10:	4b01      	ldr	r3, [pc, #4]	; (fc18 <sysinit_start+0x8>)
    fc12:	2201      	movs	r2, #1
    fc14:	701a      	strb	r2, [r3, #0]
}
    fc16:	4770      	bx	lr
    fc18:	200065ac 	.word	0x200065ac

0000fc1c <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
    fc1c:	4b01      	ldr	r3, [pc, #4]	; (fc24 <sysinit_end+0x8>)
    fc1e:	2200      	movs	r2, #0
    fc20:	701a      	strb	r2, [r3, #0]
}
    fc22:	4770      	bx	lr
    fc24:	200065ac 	.word	0x200065ac

0000fc28 <uwbcfg_set>:

static int
uwbcfg_set(int argc, char **argv, char *val)
{
    int i;
    if (argc == 1) {
    fc28:	2801      	cmp	r0, #1
    fc2a:	d015      	beq.n	fc58 <uwbcfg_set+0x30>
        for (i=0;i<CFGSTR_MAX;i++) {
            if (!strcmp(argv[0], g_uwbcfg_str[i]))
                return CONF_VALUE_SET(val, CONF_STRING, g_uwb_config[i]);
        }
    }
    return DPL_ENOENT;
    fc2c:	200a      	movs	r0, #10
}
    fc2e:	4770      	bx	lr
        for (i=0;i<CFGSTR_MAX;i++) {
    fc30:	3401      	adds	r4, #1
    fc32:	2c15      	cmp	r4, #21
    fc34:	dc15      	bgt.n	fc62 <uwbcfg_set+0x3a>
            if (!strcmp(argv[0], g_uwbcfg_str[i]))
    fc36:	4b0c      	ldr	r3, [pc, #48]	; (fc68 <uwbcfg_set+0x40>)
    fc38:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    fc3c:	6828      	ldr	r0, [r5, #0]
    fc3e:	f7fc fa51 	bl	c0e4 <strcmp>
    fc42:	2800      	cmp	r0, #0
    fc44:	d1f4      	bne.n	fc30 <uwbcfg_set+0x8>
                return CONF_VALUE_SET(val, CONF_STRING, g_uwb_config[i]);
    fc46:	2308      	movs	r3, #8
    fc48:	4a08      	ldr	r2, [pc, #32]	; (fc6c <uwbcfg_set+0x44>)
    fc4a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    fc4e:	2106      	movs	r1, #6
    fc50:	4630      	mov	r0, r6
    fc52:	f7fd fa38 	bl	d0c6 <conf_value_from_str>
}
    fc56:	bd70      	pop	{r4, r5, r6, pc}
{
    fc58:	b570      	push	{r4, r5, r6, lr}
    fc5a:	460d      	mov	r5, r1
    fc5c:	4616      	mov	r6, r2
        for (i=0;i<CFGSTR_MAX;i++) {
    fc5e:	2400      	movs	r4, #0
    fc60:	e7e7      	b.n	fc32 <uwbcfg_set+0xa>
    return DPL_ENOENT;
    fc62:	200a      	movs	r0, #10
    fc64:	e7f7      	b.n	fc56 <uwbcfg_set+0x2e>
    fc66:	bf00      	nop
    fc68:	200002a0 	.word	0x200002a0
    fc6c:	200001f0 	.word	0x200001f0

0000fc70 <uwbcfg_get>:
    if (argc == 1) {
    fc70:	2801      	cmp	r0, #1
    fc72:	d10d      	bne.n	fc90 <uwbcfg_get+0x20>
{
    fc74:	b538      	push	{r3, r4, r5, lr}
    fc76:	460d      	mov	r5, r1
        for (i=0;i<CFGSTR_MAX;i++) {
    fc78:	2400      	movs	r4, #0
    fc7a:	2c15      	cmp	r4, #21
    fc7c:	dc0e      	bgt.n	fc9c <uwbcfg_get+0x2c>
            if (!strcmp(argv[0], g_uwbcfg_str[i])) return g_uwb_config[i];
    fc7e:	4b08      	ldr	r3, [pc, #32]	; (fca0 <uwbcfg_get+0x30>)
    fc80:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    fc84:	6828      	ldr	r0, [r5, #0]
    fc86:	f7fc fa2d 	bl	c0e4 <strcmp>
    fc8a:	b118      	cbz	r0, fc94 <uwbcfg_get+0x24>
        for (i=0;i<CFGSTR_MAX;i++) {
    fc8c:	3401      	adds	r4, #1
    fc8e:	e7f4      	b.n	fc7a <uwbcfg_get+0xa>
    return NULL;
    fc90:	2000      	movs	r0, #0
}
    fc92:	4770      	bx	lr
            if (!strcmp(argv[0], g_uwbcfg_str[i])) return g_uwb_config[i];
    fc94:	4803      	ldr	r0, [pc, #12]	; (fca4 <uwbcfg_get+0x34>)
    fc96:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
}
    fc9a:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
    fc9c:	2000      	movs	r0, #0
    fc9e:	e7fc      	b.n	fc9a <uwbcfg_get+0x2a>
    fca0:	200002a0 	.word	0x200002a0
    fca4:	200001f0 	.word	0x200001f0

0000fca8 <uwbcfg_export>:
}

static int
uwbcfg_export(void (*export_func)(char *name, char *val),
  enum conf_export_tgt tgt)
{
    fca8:	b530      	push	{r4, r5, lr}
    fcaa:	b08b      	sub	sp, #44	; 0x2c
    fcac:	4605      	mov	r5, r0
    int i;
    char b[32];
    for (i=0;i<CFGSTR_MAX;i++) {
    fcae:	2400      	movs	r4, #0
    fcb0:	e010      	b.n	fcd4 <uwbcfg_export+0x2c>
        snprintf(b, sizeof(b), "%s/%s", uwbcfg_handler.ch_name, g_uwbcfg_str[i]);
    fcb2:	4b0b      	ldr	r3, [pc, #44]	; (fce0 <uwbcfg_export+0x38>)
    fcb4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    fcb8:	9300      	str	r3, [sp, #0]
    fcba:	4b0a      	ldr	r3, [pc, #40]	; (fce4 <uwbcfg_export+0x3c>)
    fcbc:	685b      	ldr	r3, [r3, #4]
    fcbe:	4a0a      	ldr	r2, [pc, #40]	; (fce8 <uwbcfg_export+0x40>)
    fcc0:	2120      	movs	r1, #32
    fcc2:	a802      	add	r0, sp, #8
    fcc4:	f7fc fe25 	bl	c912 <snprintf>
        export_func(b, g_uwb_config[i]);
    fcc8:	4908      	ldr	r1, [pc, #32]	; (fcec <uwbcfg_export+0x44>)
    fcca:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
    fcce:	a802      	add	r0, sp, #8
    fcd0:	47a8      	blx	r5
    for (i=0;i<CFGSTR_MAX;i++) {
    fcd2:	3401      	adds	r4, #1
    fcd4:	2c15      	cmp	r4, #21
    fcd6:	ddec      	ble.n	fcb2 <uwbcfg_export+0xa>
    }
    return 0;
}
    fcd8:	2000      	movs	r0, #0
    fcda:	b00b      	add	sp, #44	; 0x2c
    fcdc:	bd30      	pop	{r4, r5, pc}
    fcde:	bf00      	nop
    fce0:	200002a0 	.word	0x200002a0
    fce4:	200002f8 	.word	0x200002f8
    fce8:	00022370 	.word	0x00022370
    fcec:	200001f0 	.word	0x200001f0

0000fcf0 <uwbcfg_commit_to_inst>:
{
    fcf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    fcf2:	b083      	sub	sp, #12
    fcf4:	4604      	mov	r4, r0
    fcf6:	460d      	mov	r5, r1
    conf_value_from_str(cfg[CFGSTR_CH], CONF_INT8, (void*)&(inst->config.channel), 0);
    fcf8:	2300      	movs	r3, #0
    fcfa:	f200 520c 	addw	r2, r0, #1292	; 0x50c
    fcfe:	2102      	movs	r1, #2
    fd00:	4628      	mov	r0, r5
    fd02:	f7fd f9e0 	bl	d0c6 <conf_value_from_str>
    if (!strcmp(cfg[CFGSTR_DATARATE], "6m8")) {
    fd06:	f105 0610 	add.w	r6, r5, #16
    fd0a:	4999      	ldr	r1, [pc, #612]	; (ff70 <uwbcfg_commit_to_inst+0x280>)
    fd0c:	4630      	mov	r0, r6
    fd0e:	f7fc f9e9 	bl	c0e4 <strcmp>
    fd12:	2800      	cmp	r0, #0
    fd14:	f040 80de 	bne.w	fed4 <uwbcfg_commit_to_inst+0x1e4>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(0.12821f);
    fd18:	f504 63a8 	add.w	r3, r4, #1344	; 0x540
    fd1c:	4a95      	ldr	r2, [pc, #596]	; (ff74 <uwbcfg_commit_to_inst+0x284>)
    fd1e:	601a      	str	r2, [r3, #0]
        sfd_len = 8;
    fd20:	2708      	movs	r7, #8
    conf_value_from_str(cfg[CFGSTR_RX_PACLEN], CONF_INT8, (void*)&paclen, 0);
    fd22:	2300      	movs	r3, #0
    fd24:	f10d 0207 	add.w	r2, sp, #7
    fd28:	2102      	movs	r1, #2
    fd2a:	f105 0018 	add.w	r0, r5, #24
    fd2e:	f7fd f9ca 	bl	d0c6 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_SFDTYPE], CONF_INT8,
    fd32:	2300      	movs	r3, #0
    fd34:	f204 5212 	addw	r2, r4, #1298	; 0x512
    fd38:	2102      	movs	r1, #2
    fd3a:	f105 0028 	add.w	r0, r5, #40	; 0x28
    fd3e:	f7fd f9c2 	bl	d0c6 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_SFD_TO], CONF_INT16, (void*)&sfd_timeout, 0);
    fd42:	2300      	movs	r3, #0
    fd44:	f10d 0202 	add.w	r2, sp, #2
    fd48:	2103      	movs	r1, #3
    fd4a:	f105 0030 	add.w	r0, r5, #48	; 0x30
    fd4e:	f7fd f9ba 	bl	d0c6 <conf_value_from_str>
    inst->config.rx.phrMode = (cfg[CFGSTR_RX_PHRMODE][0] == 's')? DWT_PHRMODE_STD : DWT_PHRMODE_EXT;
    fd52:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    fd56:	2b73      	cmp	r3, #115	; 0x73
    fd58:	f000 80d4 	beq.w	ff04 <uwbcfg_commit_to_inst+0x214>
    fd5c:	2303      	movs	r3, #3
    fd5e:	f884 3513 	strb.w	r3, [r4, #1299]	; 0x513
    if (inst->rxdiag) {
    fd62:	f8d4 24f8 	ldr.w	r2, [r4, #1272]	; 0x4f8
    fd66:	b192      	cbz	r2, fd8e <uwbcfg_commit_to_inst+0x9e>
        conf_value_from_str(cfg[CFGSTR_RX_DIAG_EN], CONF_INT16,
    fd68:	2300      	movs	r3, #0
    fd6a:	3202      	adds	r2, #2
    fd6c:	2103      	movs	r1, #3
    fd6e:	f105 0040 	add.w	r0, r5, #64	; 0x40
    fd72:	f7fd f9a8 	bl	d0c6 <conf_value_from_str>
        inst->config.rxdiag_enable = (inst->rxdiag->enabled != 0);
    fd76:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
    fd7a:	885b      	ldrh	r3, [r3, #2]
    fd7c:	3b00      	subs	r3, #0
    fd7e:	bf18      	it	ne
    fd80:	2301      	movne	r3, #1
    fd82:	f894 2530 	ldrb.w	r2, [r4, #1328]	; 0x530
    fd86:	f363 1286 	bfi	r2, r3, #6, #1
    fd8a:	f884 2530 	strb.w	r2, [r4, #1328]	; 0x530
    conf_value_from_str(cfg[CFGSTR_RX_PREAM_CIDX], CONF_INT8,
    fd8e:	2300      	movs	r3, #0
    fd90:	f204 5211 	addw	r2, r4, #1297	; 0x511
    fd94:	2102      	movs	r1, #2
    fd96:	f105 0020 	add.w	r0, r5, #32
    fd9a:	f7fd f994 	bl	d0c6 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TX_PREAM_CIDX], CONF_INT8,
    fd9e:	2300      	movs	r3, #0
    fda0:	f204 5224 	addw	r2, r4, #1316	; 0x524
    fda4:	2102      	movs	r1, #2
    fda6:	f105 0048 	add.w	r0, r5, #72	; 0x48
    fdaa:	f7fd f98c 	bl	d0c6 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_ANTDLY], CONF_INT16, (void*)&inst->rx_antenna_delay, 0);
    fdae:	2300      	movs	r3, #0
    fdb0:	f204 42cc 	addw	r2, r4, #1228	; 0x4cc
    fdb4:	2103      	movs	r1, #3
    fdb6:	f105 0068 	add.w	r0, r5, #104	; 0x68
    fdba:	f7fd f984 	bl	d0c6 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TX_ANTDLY], CONF_INT16, (void*)&inst->tx_antenna_delay, 0);
    fdbe:	2300      	movs	r3, #0
    fdc0:	f204 42ce 	addw	r2, r4, #1230	; 0x4ce
    fdc4:	2103      	movs	r1, #3
    fdc6:	f105 0070 	add.w	r0, r5, #112	; 0x70
    fdca:	f7fd f97c 	bl	d0c6 <conf_value_from_str>
    inst->rx_ant_separation = DPL_FLOAT32_FROM_F64(strtod_soft(cfg[CFGSTR_RX_ANTSEP], 0));
    fdce:	2100      	movs	r1, #0
    fdd0:	f105 0078 	add.w	r0, r5, #120	; 0x78
    fdd4:	f000 fabe 	bl	10354 <strtod_soft>
    fdd8:	ec51 0b10 	vmov	r0, r1, d0
    fddc:	f010 fb10 	bl	20400 <__aeabi_d2f>
    fde0:	f504 639a 	add.w	r3, r4, #1232	; 0x4d0
    fde4:	6018      	str	r0, [r3, #0]
    conf_value_from_str(cfg[CFGSTR_EXT_CLKDLY], CONF_INT32, (void*)&inst->ext_clock_delay, 0);
    fde6:	2300      	movs	r3, #0
    fde8:	f204 42d4 	addw	r2, r4, #1236	; 0x4d4
    fdec:	2104      	movs	r1, #4
    fdee:	f105 0080 	add.w	r0, r5, #128	; 0x80
    fdf2:	f7fd f968 	bl	d0c6 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_ROLE], CONF_INT16, (void*)&inst->role, 0);
    fdf6:	2300      	movs	r3, #0
    fdf8:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
    fdfc:	2103      	movs	r1, #3
    fdfe:	f105 0088 	add.w	r0, r5, #136	; 0x88
    fe02:	f7fd f960 	bl	d0c6 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_FRAME_FILTER], CONF_INT16,
    fe06:	2300      	movs	r3, #0
    fe08:	f204 521c 	addw	r2, r4, #1308	; 0x51c
    fe0c:	2103      	movs	r1, #3
    fe0e:	f105 0090 	add.w	r0, r5, #144	; 0x90
    fe12:	f7fd f958 	bl	d0c6 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_XTAL_TRIM], CONF_INT8,
    fe16:	2300      	movs	r3, #0
    fe18:	f204 521e 	addw	r2, r4, #1310	; 0x51e
    fe1c:	2102      	movs	r1, #2
    fe1e:	f105 0098 	add.w	r0, r5, #152	; 0x98
    fe22:	f7fd f950 	bl	d0c6 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_CIR_SIZE], CONF_INT16,
    fe26:	2300      	movs	r3, #0
    fe28:	f504 62a4 	add.w	r2, r4, #1312	; 0x520
    fe2c:	2103      	movs	r1, #3
    fe2e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    fe32:	f7fd f948 	bl	d0c6 <conf_value_from_str>
    inst->config.cir_enable = (inst->config.rx.cirSize > 0);
    fe36:	f8b4 3520 	ldrh.w	r3, [r4, #1312]	; 0x520
    fe3a:	1e19      	subs	r1, r3, #0
    fe3c:	bf18      	it	ne
    fe3e:	2101      	movne	r1, #1
    fe40:	f894 2531 	ldrb.w	r2, [r4, #1329]	; 0x531
    fe44:	f361 1286 	bfi	r2, r1, #6, #1
    fe48:	f884 2531 	strb.w	r2, [r4, #1329]	; 0x531
    if (inst->config.rx.cirSize > 1024) {
    fe4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    fe50:	d85a      	bhi.n	ff08 <uwbcfg_commit_to_inst+0x218>
    conf_value_from_str(cfg[CFGSTR_CIR_OFFSET], CONF_INT16,
    fe52:	2300      	movs	r3, #0
    fe54:	f204 5222 	addw	r2, r4, #1314	; 0x522
    fe58:	2103      	movs	r1, #3
    fe5a:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    fe5e:	f7fd f932 	bl	d0c6 <conf_value_from_str>
    txP = inst->config.tx.preambleLength;
    fe62:	f894 6525 	ldrb.w	r6, [r4, #1317]	; 0x525
    sfd_timeout = inst->config.rx.sfdTimeout;
    fe66:	f8b4 3516 	ldrh.w	r3, [r4, #1302]	; 0x516
    fe6a:	f8ad 3002 	strh.w	r3, [sp, #2]
    conf_value_from_str(cfg[CFGSTR_TX_PREAM_LEN], CONF_INT16,
    fe6e:	2300      	movs	r3, #0
    fe70:	aa01      	add	r2, sp, #4
    fe72:	2103      	movs	r1, #3
    fe74:	f105 0050 	add.w	r0, r5, #80	; 0x50
    fe78:	f7fd f925 	bl	d0c6 <conf_value_from_str>
    switch (preamble_len)
    fe7c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    fe80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    fe84:	d063      	beq.n	ff4e <uwbcfg_commit_to_inst+0x25e>
    fe86:	d84e      	bhi.n	ff26 <uwbcfg_commit_to_inst+0x236>
    fe88:	2b80      	cmp	r3, #128	; 0x80
    fe8a:	d062      	beq.n	ff52 <uwbcfg_commit_to_inst+0x262>
    fe8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    fe90:	d145      	bne.n	ff1e <uwbcfg_commit_to_inst+0x22e>
    case (256):  txP = DWT_PLEN_256 ;break;
    fe92:	2624      	movs	r6, #36	; 0x24
    if (sfd_timeout < 1) {
    fe94:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    fe98:	b94b      	cbnz	r3, feae <uwbcfg_commit_to_inst+0x1be>
        sfd_timeout = (preamble_len + 1 + sfd_len - paclen);
    fe9a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    fe9e:	443b      	add	r3, r7
    fea0:	b29b      	uxth	r3, r3
    fea2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fea6:	1a9b      	subs	r3, r3, r2
    fea8:	3301      	adds	r3, #1
    feaa:	f8ad 3002 	strh.w	r3, [sp, #2]
    inst->config.tx.preambleLength = txP;
    feae:	f884 6525 	strb.w	r6, [r4, #1317]	; 0x525
    inst->config.rx.sfdTimeout = sfd_timeout;
    feb2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    feb6:	f8a4 3516 	strh.w	r3, [r4, #1302]	; 0x516
    inst->attrib.nsfd = sfd_len;
    feba:	f884 7544 	strb.w	r7, [r4, #1348]	; 0x544
    inst->attrib.nsync = preamble_len;
    febe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    fec2:	f8a4 3546 	strh.w	r3, [r4, #1350]	; 0x546
    uwbcfg_commit_to_inst_dw1000(inst, cfg);
    fec6:	4629      	mov	r1, r5
    fec8:	4620      	mov	r0, r4
    feca:	f000 f921 	bl	10110 <uwbcfg_commit_to_inst_dw1000>
    SLIST_FOREACH(cb, &uwbcfg_callbacks, uc_list) {
    fece:	4b2a      	ldr	r3, [pc, #168]	; (ff78 <uwbcfg_commit_to_inst+0x288>)
    fed0:	681c      	ldr	r4, [r3, #0]
    fed2:	e044      	b.n	ff5e <uwbcfg_commit_to_inst+0x26e>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "850k")) {
    fed4:	4929      	ldr	r1, [pc, #164]	; (ff7c <uwbcfg_commit_to_inst+0x28c>)
    fed6:	4630      	mov	r0, r6
    fed8:	f7fc f904 	bl	c0e4 <strcmp>
    fedc:	b928      	cbnz	r0, feea <uwbcfg_commit_to_inst+0x1fa>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(1.02564f);
    fede:	f504 63a8 	add.w	r3, r4, #1344	; 0x540
    fee2:	4a27      	ldr	r2, [pc, #156]	; (ff80 <uwbcfg_commit_to_inst+0x290>)
    fee4:	601a      	str	r2, [r3, #0]
        sfd_len = 8;
    fee6:	2708      	movs	r7, #8
    fee8:	e71b      	b.n	fd22 <uwbcfg_commit_to_inst+0x32>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "110k")) {
    feea:	4926      	ldr	r1, [pc, #152]	; (ff84 <uwbcfg_commit_to_inst+0x294>)
    feec:	4630      	mov	r0, r6
    feee:	f7fc f8f9 	bl	c0e4 <strcmp>
    fef2:	b928      	cbnz	r0, ff00 <uwbcfg_commit_to_inst+0x210>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(8.20513f);
    fef4:	f504 63a8 	add.w	r3, r4, #1344	; 0x540
    fef8:	4a23      	ldr	r2, [pc, #140]	; (ff88 <uwbcfg_commit_to_inst+0x298>)
    fefa:	601a      	str	r2, [r3, #0]
        sfd_len = 64;
    fefc:	2740      	movs	r7, #64	; 0x40
    fefe:	e710      	b.n	fd22 <uwbcfg_commit_to_inst+0x32>
    int sfd_len=0;
    ff00:	2700      	movs	r7, #0
    ff02:	e70e      	b.n	fd22 <uwbcfg_commit_to_inst+0x32>
    inst->config.rx.phrMode = (cfg[CFGSTR_RX_PHRMODE][0] == 's')? DWT_PHRMODE_STD : DWT_PHRMODE_EXT;
    ff04:	2300      	movs	r3, #0
    ff06:	e72a      	b.n	fd5e <uwbcfg_commit_to_inst+0x6e>
        UC_WARN("inv cir_size\n");
    ff08:	4b20      	ldr	r3, [pc, #128]	; (ff8c <uwbcfg_commit_to_inst+0x29c>)
    ff0a:	2202      	movs	r2, #2
    ff0c:	215c      	movs	r1, #92	; 0x5c
    ff0e:	4820      	ldr	r0, [pc, #128]	; (ff90 <uwbcfg_commit_to_inst+0x2a0>)
    ff10:	f00c fdec 	bl	1caec <log_printf>
        inst->config.rx.cirSize = 1024;
    ff14:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ff18:	f8a4 3520 	strh.w	r3, [r4, #1312]	; 0x520
    ff1c:	e799      	b.n	fe52 <uwbcfg_commit_to_inst+0x162>
    switch (preamble_len)
    ff1e:	2b40      	cmp	r3, #64	; 0x40
    ff20:	d10e      	bne.n	ff40 <uwbcfg_commit_to_inst+0x250>
    ff22:	2604      	movs	r6, #4
    ff24:	e7b6      	b.n	fe94 <uwbcfg_commit_to_inst+0x1a4>
    ff26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    ff2a:	d014      	beq.n	ff56 <uwbcfg_commit_to_inst+0x266>
    ff2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    ff30:	d101      	bne.n	ff36 <uwbcfg_commit_to_inst+0x246>
    case (4096): txP = DWT_PLEN_4096;break;
    ff32:	260c      	movs	r6, #12
    ff34:	e7ae      	b.n	fe94 <uwbcfg_commit_to_inst+0x1a4>
    switch (preamble_len)
    ff36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    ff3a:	d101      	bne.n	ff40 <uwbcfg_commit_to_inst+0x250>
    case (1024): txP = DWT_PLEN_1024;break;
    ff3c:	2608      	movs	r6, #8
    ff3e:	e7a9      	b.n	fe94 <uwbcfg_commit_to_inst+0x1a4>
        UC_WARN("inv preamb_len\n");
    ff40:	4b14      	ldr	r3, [pc, #80]	; (ff94 <uwbcfg_commit_to_inst+0x2a4>)
    ff42:	2202      	movs	r2, #2
    ff44:	215c      	movs	r1, #92	; 0x5c
    ff46:	4812      	ldr	r0, [pc, #72]	; (ff90 <uwbcfg_commit_to_inst+0x2a0>)
    ff48:	f00c fdd0 	bl	1caec <log_printf>
        break;
    ff4c:	e7a2      	b.n	fe94 <uwbcfg_commit_to_inst+0x1a4>
    case (512):  txP = DWT_PLEN_512 ;break;
    ff4e:	2634      	movs	r6, #52	; 0x34
    ff50:	e7a0      	b.n	fe94 <uwbcfg_commit_to_inst+0x1a4>
    case (128):  txP = DWT_PLEN_128 ;break;
    ff52:	2614      	movs	r6, #20
    ff54:	e79e      	b.n	fe94 <uwbcfg_commit_to_inst+0x1a4>
    case (2048): txP = DWT_PLEN_2048;break;
    ff56:	2628      	movs	r6, #40	; 0x28
    ff58:	e79c      	b.n	fe94 <uwbcfg_commit_to_inst+0x1a4>
            cb->uc_update();
    ff5a:	4798      	blx	r3
    SLIST_FOREACH(cb, &uwbcfg_callbacks, uc_list) {
    ff5c:	6824      	ldr	r4, [r4, #0]
    ff5e:	b11c      	cbz	r4, ff68 <uwbcfg_commit_to_inst+0x278>
        if (cb->uc_update) {
    ff60:	6863      	ldr	r3, [r4, #4]
    ff62:	2b00      	cmp	r3, #0
    ff64:	d1f9      	bne.n	ff5a <uwbcfg_commit_to_inst+0x26a>
    ff66:	e7f9      	b.n	ff5c <uwbcfg_commit_to_inst+0x26c>
}
    ff68:	2000      	movs	r0, #0
    ff6a:	b003      	add	sp, #12
    ff6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff6e:	bf00      	nop
    ff70:	00022378 	.word	0x00022378
    ff74:	3e03497b 	.word	0x3e03497b
    ff78:	200065c8 	.word	0x200065c8
    ff7c:	0002237c 	.word	0x0002237c
    ff80:	3f83482c 	.word	0x3f83482c
    ff84:	00022384 	.word	0x00022384
    ff88:	41034836 	.word	0x41034836
    ff8c:	0002238c 	.word	0x0002238c
    ff90:	200065b0 	.word	0x200065b0
    ff94:	0002239c 	.word	0x0002239c

0000ff98 <uwbcfg_commit>:
{
    ff98:	b510      	push	{r4, lr}
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    ff9a:	2400      	movs	r4, #0
    ff9c:	e000      	b.n	ffa0 <uwbcfg_commit+0x8>
    ff9e:	3401      	adds	r4, #1
    ffa0:	2c02      	cmp	r4, #2
    ffa2:	dc08      	bgt.n	ffb6 <uwbcfg_commit+0x1e>
        udev = uwb_dev_idx_lookup(i);
    ffa4:	4620      	mov	r0, r4
    ffa6:	f7f8 fd2b 	bl	8a00 <uwb_dev_idx_lookup>
        if (!udev) {
    ffaa:	2800      	cmp	r0, #0
    ffac:	d0f7      	beq.n	ff9e <uwbcfg_commit+0x6>
        uwbcfg_commit_to_inst(udev, g_uwb_config);
    ffae:	4903      	ldr	r1, [pc, #12]	; (ffbc <uwbcfg_commit+0x24>)
    ffb0:	f7ff fe9e 	bl	fcf0 <uwbcfg_commit_to_inst>
    ffb4:	e7f3      	b.n	ff9e <uwbcfg_commit+0x6>
}
    ffb6:	2000      	movs	r0, #0
    ffb8:	bd10      	pop	{r4, pc}
    ffba:	bf00      	nop
    ffbc:	200001f0 	.word	0x200001f0

0000ffc0 <uwbcfg_register>:

int
uwbcfg_register(struct uwbcfg_cbs *handler)
{
    SLIST_INSERT_HEAD(&uwbcfg_callbacks, handler, uc_list);
    ffc0:	4b02      	ldr	r3, [pc, #8]	; (ffcc <uwbcfg_register+0xc>)
    ffc2:	681a      	ldr	r2, [r3, #0]
    ffc4:	6002      	str	r2, [r0, #0]
    ffc6:	6018      	str	r0, [r3, #0]
    return 0;
}
    ffc8:	2000      	movs	r0, #0
    ffca:	4770      	bx	lr
    ffcc:	200065c8 	.word	0x200065c8

0000ffd0 <uwbcfg_pkg_init>:
    return uwbcfg_commit();
}

int
uwbcfg_pkg_init(void)
{
    ffd0:	b510      	push	{r4, lr}
    ffd2:	b082      	sub	sp, #8
#ifndef __KERNEL__
    int rc;
    rc = conf_register(&uwbcfg_handler);
    ffd4:	480d      	ldr	r0, [pc, #52]	; (1000c <uwbcfg_pkg_init+0x3c>)
    ffd6:	f7fd f831 	bl	d03c <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ffda:	b138      	cbz	r0, ffec <uwbcfg_pkg_init+0x1c>
    ffdc:	2000      	movs	r0, #0
    ffde:	9000      	str	r0, [sp, #0]
    ffe0:	4b0b      	ldr	r3, [pc, #44]	; (10010 <uwbcfg_pkg_init+0x40>)
    ffe2:	681c      	ldr	r4, [r3, #0]
    ffe4:	4603      	mov	r3, r0
    ffe6:	4602      	mov	r2, r0
    ffe8:	4601      	mov	r1, r0
    ffea:	47a0      	blx	r4
#endif

    /* Init log and Config */
    log_register("uwbcfg", &_uwbcfg_log, &log_console_handler,
    ffec:	2400      	movs	r4, #0
    ffee:	9400      	str	r4, [sp, #0]
    fff0:	4623      	mov	r3, r4
    fff2:	4a08      	ldr	r2, [pc, #32]	; (10014 <uwbcfg_pkg_init+0x44>)
    fff4:	4908      	ldr	r1, [pc, #32]	; (10018 <uwbcfg_pkg_init+0x48>)
    fff6:	4809      	ldr	r0, [pc, #36]	; (1001c <uwbcfg_pkg_init+0x4c>)
    fff8:	f00c fdc0 	bl	1cb7c <log_register>
                 NULL, LOG_SYSLEVEL);

    SLIST_INIT(&uwbcfg_callbacks);
    fffc:	4b08      	ldr	r3, [pc, #32]	; (10020 <uwbcfg_pkg_init+0x50>)
    fffe:	601c      	str	r4, [r3, #0]
#if MYNEWT_VAL(UWBCFG_CLI)
    uwbcfg_cli_register();
#endif

#if MYNEWT_VAL(UWBCFG_APPLY_AT_INIT)
    uwbcfg_commit();
   10000:	f7ff ffca 	bl	ff98 <uwbcfg_commit>
#endif
#ifdef __KERNEL__
    uwbcfg_sysfs_init();
#endif
    return 0;
}
   10004:	4620      	mov	r0, r4
   10006:	b002      	add	sp, #8
   10008:	bd10      	pop	{r4, pc}
   1000a:	bf00      	nop
   1000c:	200002f8 	.word	0x200002f8
   10010:	200001ec 	.word	0x200001ec
   10014:	00023a30 	.word	0x00023a30
   10018:	200065b0 	.word	0x200065b0
   1001c:	000223ac 	.word	0x000223ac
   10020:	200065c8 	.word	0x200065c8

00010024 <uwbcfg_pkg_down>:
{
#ifdef __KERNEL__
    uwbcfg_sysfs_deinit();
#endif
    return 0;
}
   10024:	2000      	movs	r0, #0
   10026:	4770      	bx	lr

00010028 <check_preamble_code>:
#define power_value(COARSE,FINE) ((COARSE<<5) + FINE)

#if MYNEWT_VAL(DW1000_DEVICE_0)
static void
check_preamble_code(struct uwb_dev * inst, uint8_t *arg_code)
{
   10028:	b530      	push	{r4, r5, lr}
   1002a:	b083      	sub	sp, #12
   1002c:	460c      	mov	r4, r1
    int new_code = 0;
    int ch = inst->config.channel;
   1002e:	f890 250c 	ldrb.w	r2, [r0, #1292]	; 0x50c
    int prf = inst->config.prf;
   10032:	f890 150e 	ldrb.w	r1, [r0, #1294]	; 0x50e
    uint8_t code = *arg_code;
   10036:	7823      	ldrb	r3, [r4, #0]
    if (prf == DWT_PRF_16M) {
   10038:	2901      	cmp	r1, #1
   1003a:	d00a      	beq.n	10052 <check_preamble_code+0x2a>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
    } else {
        if (ch == 1 || ch==2 || ch==3 || ch==5) {
   1003c:	1e51      	subs	r1, r2, #1
   1003e:	2902      	cmp	r1, #2
   10040:	d932      	bls.n	100a8 <check_preamble_code+0x80>
   10042:	2a05      	cmp	r2, #5
   10044:	d030      	beq.n	100a8 <check_preamble_code+0x80>
            if (code < 9 || code > 12)  new_code = 9;
        } else { /* channels 4 and 7 */
            if (code < 17 || code > 20) new_code = 17;
   10046:	3b11      	subs	r3, #17
   10048:	b2db      	uxtb	r3, r3
   1004a:	2b03      	cmp	r3, #3
   1004c:	d939      	bls.n	100c2 <check_preamble_code+0x9a>
   1004e:	2511      	movs	r5, #17
   10050:	e02f      	b.n	100b2 <check_preamble_code+0x8a>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
   10052:	2a01      	cmp	r2, #1
   10054:	d00c      	beq.n	10070 <check_preamble_code+0x48>
    int new_code = 0;
   10056:	2500      	movs	r5, #0
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
   10058:	2a02      	cmp	r2, #2
   1005a:	d013      	beq.n	10084 <check_preamble_code+0x5c>
   1005c:	2a05      	cmp	r2, #5
   1005e:	d011      	beq.n	10084 <check_preamble_code+0x5c>
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
   10060:	2a03      	cmp	r2, #3
   10062:	d015      	beq.n	10090 <check_preamble_code+0x68>
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
   10064:	2a04      	cmp	r2, #4
   10066:	d019      	beq.n	1009c <check_preamble_code+0x74>
   10068:	2a07      	cmp	r2, #7
   1006a:	d017      	beq.n	1009c <check_preamble_code+0x74>
        }
    }
    if (new_code) {
   1006c:	b34d      	cbz	r5, 100c2 <check_preamble_code+0x9a>
   1006e:	e020      	b.n	100b2 <check_preamble_code+0x8a>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
   10070:	2b01      	cmp	r3, #1
   10072:	d005      	beq.n	10080 <check_preamble_code+0x58>
   10074:	2b02      	cmp	r3, #2
   10076:	d001      	beq.n	1007c <check_preamble_code+0x54>
   10078:	4615      	mov	r5, r2
   1007a:	e7ed      	b.n	10058 <check_preamble_code+0x30>
    int new_code = 0;
   1007c:	2500      	movs	r5, #0
   1007e:	e7eb      	b.n	10058 <check_preamble_code+0x30>
   10080:	2500      	movs	r5, #0
   10082:	e7e9      	b.n	10058 <check_preamble_code+0x30>
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
   10084:	2b03      	cmp	r3, #3
   10086:	d0eb      	beq.n	10060 <check_preamble_code+0x38>
   10088:	2b04      	cmp	r3, #4
   1008a:	d0e9      	beq.n	10060 <check_preamble_code+0x38>
   1008c:	2503      	movs	r5, #3
   1008e:	e7e7      	b.n	10060 <check_preamble_code+0x38>
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
   10090:	2b05      	cmp	r3, #5
   10092:	d0e7      	beq.n	10064 <check_preamble_code+0x3c>
   10094:	2b06      	cmp	r3, #6
   10096:	d0e5      	beq.n	10064 <check_preamble_code+0x3c>
   10098:	2505      	movs	r5, #5
   1009a:	e7e3      	b.n	10064 <check_preamble_code+0x3c>
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
   1009c:	2b07      	cmp	r3, #7
   1009e:	d0e5      	beq.n	1006c <check_preamble_code+0x44>
   100a0:	2b08      	cmp	r3, #8
   100a2:	d0e3      	beq.n	1006c <check_preamble_code+0x44>
   100a4:	2507      	movs	r5, #7
   100a6:	e004      	b.n	100b2 <check_preamble_code+0x8a>
            if (code < 9 || code > 12)  new_code = 9;
   100a8:	3b09      	subs	r3, #9
   100aa:	b2db      	uxtb	r3, r3
   100ac:	2b03      	cmp	r3, #3
   100ae:	d908      	bls.n	100c2 <check_preamble_code+0x9a>
   100b0:	2509      	movs	r5, #9
        UC_WARN("inv pream code (using %d)\n", new_code);
   100b2:	9500      	str	r5, [sp, #0]
   100b4:	4b04      	ldr	r3, [pc, #16]	; (100c8 <check_preamble_code+0xa0>)
   100b6:	2202      	movs	r2, #2
   100b8:	215c      	movs	r1, #92	; 0x5c
   100ba:	4804      	ldr	r0, [pc, #16]	; (100cc <check_preamble_code+0xa4>)
   100bc:	f00c fd16 	bl	1caec <log_printf>
        *arg_code = new_code;
   100c0:	7025      	strb	r5, [r4, #0]
    }
}
   100c2:	b003      	add	sp, #12
   100c4:	bd30      	pop	{r4, r5, pc}
   100c6:	bf00      	nop
   100c8:	000224cc 	.word	0x000224cc
   100cc:	200065b0 	.word	0x200065b0

000100d0 <remap_framefilter>:

uint16_t
remap_framefilter(uint16_t cfg_ff)
{
   100d0:	4603      	mov	r3, r0
    uint16_t r=0;
    if (cfg_ff & UWB_FF_BEACON_EN) r|= DWT_FF_BEACON_EN;
   100d2:	f010 0001 	ands.w	r0, r0, #1
   100d6:	d000      	beq.n	100da <remap_framefilter+0xa>
   100d8:	2004      	movs	r0, #4
    if (cfg_ff & UWB_FF_DATA_EN)   r|= DWT_FF_DATA_EN;
   100da:	f013 0f02 	tst.w	r3, #2
   100de:	d001      	beq.n	100e4 <remap_framefilter+0x14>
   100e0:	f040 0008 	orr.w	r0, r0, #8
    if (cfg_ff & UWB_FF_ACK_EN)    r|= DWT_FF_ACK_EN;
   100e4:	f013 0f04 	tst.w	r3, #4
   100e8:	d001      	beq.n	100ee <remap_framefilter+0x1e>
   100ea:	f040 0010 	orr.w	r0, r0, #16
    if (cfg_ff & UWB_FF_MAC_EN)    r|= DWT_FF_MAC_EN;
   100ee:	f013 0f08 	tst.w	r3, #8
   100f2:	d001      	beq.n	100f8 <remap_framefilter+0x28>
   100f4:	f040 0020 	orr.w	r0, r0, #32
    if (cfg_ff & UWB_FF_RSVD_EN)   r|= DWT_FF_RSVD_EN;
   100f8:	f013 0f10 	tst.w	r3, #16
   100fc:	d001      	beq.n	10102 <remap_framefilter+0x32>
   100fe:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    if (cfg_ff & UWB_FF_COORD_EN)  r|= DWT_FF_COORD_EN;
   10102:	f413 7f80 	tst.w	r3, #256	; 0x100
   10106:	d001      	beq.n	1010c <remap_framefilter+0x3c>
   10108:	f040 0002 	orr.w	r0, r0, #2
    return r;
}
   1010c:	4770      	bx	lr
	...

00010110 <uwbcfg_commit_to_inst_dw1000>:
{
#if MYNEWT_VAL(DW1000_DEVICE_0)
    uint8_t prf, coarse, fine, txpwr, paclen;

    /* Only proceed if this device is a dw1000 */
    if(inst->device_id != DWT_DEVICE_ID) {
   10110:	f8d0 24c8 	ldr.w	r2, [r0, #1224]	; 0x4c8
   10114:	4b84      	ldr	r3, [pc, #528]	; (10328 <uwbcfg_commit_to_inst_dw1000+0x218>)
   10116:	429a      	cmp	r2, r3
   10118:	d001      	beq.n	1011e <uwbcfg_commit_to_inst_dw1000+0xe>
     * dw1000 understands */
    inst->config.rx.frameFilter = remap_framefilter(
        inst->config.rx.frameFilter);
#endif
    return 0;
}
   1011a:	2000      	movs	r0, #0
   1011c:	4770      	bx	lr
{
   1011e:	b570      	push	{r4, r5, r6, lr}
   10120:	b084      	sub	sp, #16
   10122:	4604      	mov	r4, r0
   10124:	460d      	mov	r5, r1
    conf_value_from_str(cfg[CFGSTR_PRF], CONF_INT8, (void*)&prf, 0);
   10126:	2300      	movs	r3, #0
   10128:	f10d 020f 	add.w	r2, sp, #15
   1012c:	2102      	movs	r1, #2
   1012e:	f105 0008 	add.w	r0, r5, #8
   10132:	f7fc ffc8 	bl	d0c6 <conf_value_from_str>
    if (prf == 16) {
   10136:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1013a:	2b10      	cmp	r3, #16
   1013c:	d005      	beq.n	1014a <uwbcfg_commit_to_inst_dw1000+0x3a>
    } else if (prf == 64) {
   1013e:	2b40      	cmp	r3, #64	; 0x40
   10140:	d11b      	bne.n	1017a <uwbcfg_commit_to_inst_dw1000+0x6a>
        inst->config.prf = DWT_PRF_64M;
   10142:	2302      	movs	r3, #2
   10144:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
   10148:	e002      	b.n	10150 <uwbcfg_commit_to_inst_dw1000+0x40>
        inst->config.prf = DWT_PRF_16M;
   1014a:	2301      	movs	r3, #1
   1014c:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    check_preamble_code(inst, &inst->config.rx.preambleCodeIndex);
   10150:	f204 5111 	addw	r1, r4, #1297	; 0x511
   10154:	4620      	mov	r0, r4
   10156:	f7ff ff67 	bl	10028 <check_preamble_code>
    check_preamble_code(inst, &inst->config.tx.preambleCodeIndex);
   1015a:	f204 5124 	addw	r1, r4, #1316	; 0x524
   1015e:	4620      	mov	r0, r4
   10160:	f7ff ff62 	bl	10028 <check_preamble_code>
    switch (inst->config.channel) {
   10164:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
   10168:	3b01      	subs	r3, #1
   1016a:	2b06      	cmp	r3, #6
   1016c:	d842      	bhi.n	101f4 <uwbcfg_commit_to_inst_dw1000+0xe4>
   1016e:	e8df f003 	tbb	[pc, r3]
   10172:	2d0c      	.short	0x2d0c
   10174:	413d3531 	.word	0x413d3531
   10178:	39          	.byte	0x39
   10179:	00          	.byte	0x00
        UC_WARN("inv prf %d\n", prf);
   1017a:	9300      	str	r3, [sp, #0]
   1017c:	4b6b      	ldr	r3, [pc, #428]	; (1032c <uwbcfg_commit_to_inst_dw1000+0x21c>)
   1017e:	2202      	movs	r2, #2
   10180:	215c      	movs	r1, #92	; 0x5c
   10182:	486b      	ldr	r0, [pc, #428]	; (10330 <uwbcfg_commit_to_inst_dw1000+0x220>)
   10184:	f00c fcb2 	bl	1caec <log_printf>
   10188:	e7e2      	b.n	10150 <uwbcfg_commit_to_inst_dw1000+0x40>
    case (1): inst->config.txrf.PGdly = TC_PGDELAY_CH1;break;
   1018a:	23c9      	movs	r3, #201	; 0xc9
   1018c:	f884 3528 	strb.w	r3, [r4, #1320]	; 0x528
    if (!strcmp(cfg[CFGSTR_DATARATE], "6m8")) {
   10190:	f105 0610 	add.w	r6, r5, #16
   10194:	4967      	ldr	r1, [pc, #412]	; (10334 <uwbcfg_commit_to_inst_dw1000+0x224>)
   10196:	4630      	mov	r0, r6
   10198:	f7fb ffa4 	bl	c0e4 <strcmp>
   1019c:	bb88      	cbnz	r0, 10202 <uwbcfg_commit_to_inst_dw1000+0xf2>
        inst->config.dataRate = DWT_BR_6M8;
   1019e:	2302      	movs	r3, #2
   101a0:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
    conf_value_from_str(cfg[CFGSTR_RX_PACLEN], CONF_INT8, (void*)&paclen, 0);
   101a4:	2300      	movs	r3, #0
   101a6:	aa03      	add	r2, sp, #12
   101a8:	2102      	movs	r1, #2
   101aa:	f105 0018 	add.w	r0, r5, #24
   101ae:	f7fc ff8a 	bl	d0c6 <conf_value_from_str>
    switch (paclen) {
   101b2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   101b6:	2b20      	cmp	r3, #32
   101b8:	d06b      	beq.n	10292 <uwbcfg_commit_to_inst_dw1000+0x182>
   101ba:	d83b      	bhi.n	10234 <uwbcfg_commit_to_inst_dw1000+0x124>
   101bc:	2b08      	cmp	r3, #8
   101be:	d03f      	beq.n	10240 <uwbcfg_commit_to_inst_dw1000+0x130>
   101c0:	2b10      	cmp	r3, #16
   101c2:	d16a      	bne.n	1029a <uwbcfg_commit_to_inst_dw1000+0x18a>
    case (16): inst->config.rx.pacLength = DWT_PAC16;break;
   101c4:	2301      	movs	r3, #1
   101c6:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
   101ca:	e03c      	b.n	10246 <uwbcfg_commit_to_inst_dw1000+0x136>
    case (2): inst->config.txrf.PGdly = TC_PGDELAY_CH2;break;
   101cc:	23c2      	movs	r3, #194	; 0xc2
   101ce:	f884 3528 	strb.w	r3, [r4, #1320]	; 0x528
   101d2:	e7dd      	b.n	10190 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (3): inst->config.txrf.PGdly = TC_PGDELAY_CH3;break;
   101d4:	23c5      	movs	r3, #197	; 0xc5
   101d6:	f884 3528 	strb.w	r3, [r4, #1320]	; 0x528
   101da:	e7d9      	b.n	10190 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (4): inst->config.txrf.PGdly = TC_PGDELAY_CH4;break;
   101dc:	2395      	movs	r3, #149	; 0x95
   101de:	f884 3528 	strb.w	r3, [r4, #1320]	; 0x528
   101e2:	e7d5      	b.n	10190 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (7): inst->config.txrf.PGdly = TC_PGDELAY_CH7;break;
   101e4:	2393      	movs	r3, #147	; 0x93
   101e6:	f884 3528 	strb.w	r3, [r4, #1320]	; 0x528
   101ea:	e7d1      	b.n	10190 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (5): inst->config.txrf.PGdly = TC_PGDELAY_CH5;break;
   101ec:	23c0      	movs	r3, #192	; 0xc0
   101ee:	f884 3528 	strb.w	r3, [r4, #1320]	; 0x528
   101f2:	e7cd      	b.n	10190 <uwbcfg_commit_to_inst_dw1000+0x80>
        UC_WARN("inv ch\n");
   101f4:	4b50      	ldr	r3, [pc, #320]	; (10338 <uwbcfg_commit_to_inst_dw1000+0x228>)
   101f6:	2202      	movs	r2, #2
   101f8:	215c      	movs	r1, #92	; 0x5c
   101fa:	484d      	ldr	r0, [pc, #308]	; (10330 <uwbcfg_commit_to_inst_dw1000+0x220>)
   101fc:	f00c fc76 	bl	1caec <log_printf>
        break;
   10200:	e7c6      	b.n	10190 <uwbcfg_commit_to_inst_dw1000+0x80>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "850k")) {
   10202:	494e      	ldr	r1, [pc, #312]	; (1033c <uwbcfg_commit_to_inst_dw1000+0x22c>)
   10204:	4630      	mov	r0, r6
   10206:	f7fb ff6d 	bl	c0e4 <strcmp>
   1020a:	b918      	cbnz	r0, 10214 <uwbcfg_commit_to_inst_dw1000+0x104>
        inst->config.dataRate = DWT_BR_850K;
   1020c:	2301      	movs	r3, #1
   1020e:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
   10212:	e7c7      	b.n	101a4 <uwbcfg_commit_to_inst_dw1000+0x94>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "110k")) {
   10214:	494a      	ldr	r1, [pc, #296]	; (10340 <uwbcfg_commit_to_inst_dw1000+0x230>)
   10216:	4630      	mov	r0, r6
   10218:	f7fb ff64 	bl	c0e4 <strcmp>
   1021c:	b918      	cbnz	r0, 10226 <uwbcfg_commit_to_inst_dw1000+0x116>
        inst->config.dataRate = DWT_BR_110K;
   1021e:	2300      	movs	r3, #0
   10220:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
   10224:	e7be      	b.n	101a4 <uwbcfg_commit_to_inst_dw1000+0x94>
        UC_WARN("inv datarate\n");
   10226:	4b47      	ldr	r3, [pc, #284]	; (10344 <uwbcfg_commit_to_inst_dw1000+0x234>)
   10228:	2202      	movs	r2, #2
   1022a:	215c      	movs	r1, #92	; 0x5c
   1022c:	4840      	ldr	r0, [pc, #256]	; (10330 <uwbcfg_commit_to_inst_dw1000+0x220>)
   1022e:	f00c fc5d 	bl	1caec <log_printf>
   10232:	e7b7      	b.n	101a4 <uwbcfg_commit_to_inst_dw1000+0x94>
    switch (paclen) {
   10234:	2b40      	cmp	r3, #64	; 0x40
   10236:	d130      	bne.n	1029a <uwbcfg_commit_to_inst_dw1000+0x18a>
    case (64): inst->config.rx.pacLength = DWT_PAC64;break;
   10238:	2303      	movs	r3, #3
   1023a:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
   1023e:	e002      	b.n	10246 <uwbcfg_commit_to_inst_dw1000+0x136>
    case (8):  inst->config.rx.pacLength = DWT_PAC8;break;
   10240:	2300      	movs	r3, #0
   10242:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
    if (inst->config.rx.sfdType>1) {
   10246:	f894 3512 	ldrb.w	r3, [r4, #1298]	; 0x512
   1024a:	2b01      	cmp	r3, #1
   1024c:	d82c      	bhi.n	102a8 <uwbcfg_commit_to_inst_dw1000+0x198>
    conf_value_from_str(cfg[CFGSTR_TXRF_PWR_COARSE], CONF_INT8, (void*)&coarse, 0);
   1024e:	2300      	movs	r3, #0
   10250:	f10d 020e 	add.w	r2, sp, #14
   10254:	2102      	movs	r1, #2
   10256:	f105 0058 	add.w	r0, r5, #88	; 0x58
   1025a:	f7fc ff34 	bl	d0c6 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TXRF_PWR_FINE], CONF_INT8, (void*)&fine, 0);
   1025e:	2300      	movs	r3, #0
   10260:	f10d 020d 	add.w	r2, sp, #13
   10264:	2102      	movs	r1, #2
   10266:	f105 0060 	add.w	r0, r5, #96	; 0x60
   1026a:	f7fc ff2c 	bl	d0c6 <conf_value_from_str>
    txpwr = inst->config.txrf.BOOSTNORM;
   1026e:	f894 552c 	ldrb.w	r5, [r4, #1324]	; 0x52c
    switch (coarse) {
   10272:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10276:	2b12      	cmp	r3, #18
   10278:	d84e      	bhi.n	10318 <uwbcfg_commit_to_inst_dw1000+0x208>
   1027a:	e8df f003 	tbb	[pc, r3]
   1027e:	4d48      	.short	0x4d48
   10280:	4d4d434d 	.word	0x4d4d434d
   10284:	394d4d3e 	.word	0x394d4d3e
   10288:	4d344d4d 	.word	0x4d344d4d
   1028c:	4d4d2f4d 	.word	0x4d4d2f4d
   10290:	1c          	.byte	0x1c
   10291:	00          	.byte	0x00
    case (32): inst->config.rx.pacLength = DWT_PAC32;break;
   10292:	2302      	movs	r3, #2
   10294:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
   10298:	e7d5      	b.n	10246 <uwbcfg_commit_to_inst_dw1000+0x136>
        UC_WARN("inv paclen\n");
   1029a:	4b2b      	ldr	r3, [pc, #172]	; (10348 <uwbcfg_commit_to_inst_dw1000+0x238>)
   1029c:	2202      	movs	r2, #2
   1029e:	215c      	movs	r1, #92	; 0x5c
   102a0:	4823      	ldr	r0, [pc, #140]	; (10330 <uwbcfg_commit_to_inst_dw1000+0x220>)
   102a2:	f00c fc23 	bl	1caec <log_printf>
   102a6:	e7ce      	b.n	10246 <uwbcfg_commit_to_inst_dw1000+0x136>
        UC_WARN("inv sfdType\n");
   102a8:	4b28      	ldr	r3, [pc, #160]	; (1034c <uwbcfg_commit_to_inst_dw1000+0x23c>)
   102aa:	2202      	movs	r2, #2
   102ac:	215c      	movs	r1, #92	; 0x5c
   102ae:	4820      	ldr	r0, [pc, #128]	; (10330 <uwbcfg_commit_to_inst_dw1000+0x220>)
   102b0:	f00c fc1c 	bl	1caec <log_printf>
   102b4:	e7cb      	b.n	1024e <uwbcfg_commit_to_inst_dw1000+0x13e>
    case(18): txpwr = power_value(DW1000_txrf_config_18db, fine);break;
   102b6:	f89d 500d 	ldrb.w	r5, [sp, #13]
    inst->config.txrf.BOOSTNORM = txpwr;
   102ba:	f884 552c 	strb.w	r5, [r4, #1324]	; 0x52c
    inst->config.txrf.BOOSTP500 = txpwr;
   102be:	f884 552d 	strb.w	r5, [r4, #1325]	; 0x52d
    inst->config.txrf.BOOSTP250 = txpwr;
   102c2:	f884 552e 	strb.w	r5, [r4, #1326]	; 0x52e
    inst->config.txrf.BOOSTP125 = txpwr;
   102c6:	f884 552f 	strb.w	r5, [r4, #1327]	; 0x52f
    inst->config.rx.frameFilter = remap_framefilter(
   102ca:	f8b4 051c 	ldrh.w	r0, [r4, #1308]	; 0x51c
   102ce:	f7ff feff 	bl	100d0 <remap_framefilter>
   102d2:	f8a4 051c 	strh.w	r0, [r4, #1308]	; 0x51c
}
   102d6:	2000      	movs	r0, #0
   102d8:	b004      	add	sp, #16
   102da:	bd70      	pop	{r4, r5, r6, pc}
    case(15): txpwr = power_value(DW1000_txrf_config_15db, fine);break;
   102dc:	f89d 500d 	ldrb.w	r5, [sp, #13]
   102e0:	3520      	adds	r5, #32
   102e2:	b2ed      	uxtb	r5, r5
   102e4:	e7e9      	b.n	102ba <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(12): txpwr = power_value(DW1000_txrf_config_12db, fine);break;
   102e6:	f89d 500d 	ldrb.w	r5, [sp, #13]
   102ea:	3540      	adds	r5, #64	; 0x40
   102ec:	b2ed      	uxtb	r5, r5
   102ee:	e7e4      	b.n	102ba <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(9):  txpwr = power_value(DW1000_txrf_config_9db, fine);break;
   102f0:	f89d 500d 	ldrb.w	r5, [sp, #13]
   102f4:	3560      	adds	r5, #96	; 0x60
   102f6:	b2ed      	uxtb	r5, r5
   102f8:	e7df      	b.n	102ba <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(6):  txpwr = power_value(DW1000_txrf_config_6db, fine);break;
   102fa:	f89d 500d 	ldrb.w	r5, [sp, #13]
   102fe:	f085 0580 	eor.w	r5, r5, #128	; 0x80
   10302:	e7da      	b.n	102ba <uwbcfg_commit_to_inst_dw1000+0x1aa>
        txpwr = power_value(DW1000_txrf_config_3db, fine);
   10304:	f89d 500d 	ldrb.w	r5, [sp, #13]
   10308:	3d60      	subs	r5, #96	; 0x60
   1030a:	b2ed      	uxtb	r5, r5
        break;
   1030c:	e7d5      	b.n	102ba <uwbcfg_commit_to_inst_dw1000+0x1aa>
        txpwr = power_value(DW1000_txrf_config_0db, fine);
   1030e:	f89d 500d 	ldrb.w	r5, [sp, #13]
   10312:	3d40      	subs	r5, #64	; 0x40
   10314:	b2ed      	uxtb	r5, r5
        break;
   10316:	e7d0      	b.n	102ba <uwbcfg_commit_to_inst_dw1000+0x1aa>
        UC_WARN("inv coarse txpwr\n");
   10318:	4b0d      	ldr	r3, [pc, #52]	; (10350 <uwbcfg_commit_to_inst_dw1000+0x240>)
   1031a:	2202      	movs	r2, #2
   1031c:	215c      	movs	r1, #92	; 0x5c
   1031e:	4804      	ldr	r0, [pc, #16]	; (10330 <uwbcfg_commit_to_inst_dw1000+0x220>)
   10320:	f00c fbe4 	bl	1caec <log_printf>
   10324:	e7c9      	b.n	102ba <uwbcfg_commit_to_inst_dw1000+0x1aa>
   10326:	bf00      	nop
   10328:	deca0130 	.word	0xdeca0130
   1032c:	000224e8 	.word	0x000224e8
   10330:	200065b0 	.word	0x200065b0
   10334:	00022378 	.word	0x00022378
   10338:	000224f4 	.word	0x000224f4
   1033c:	0002237c 	.word	0x0002237c
   10340:	00022384 	.word	0x00022384
   10344:	000224fc 	.word	0x000224fc
   10348:	0002250c 	.word	0x0002250c
   1034c:	00022518 	.word	0x00022518
   10350:	00022528 	.word	0x00022528

00010354 <strtod_soft>:
#include <inttypes.h>

#ifndef __KERNEL__

double strtod_soft( const char *nptr, char **endptr )
{
   10354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10358:	ed2d 8b02 	vpush	{d8}
   1035c:	b085      	sub	sp, #20
   1035e:	4604      	mov	r4, r0
   10360:	460f      	mov	r7, r1
    int i, n;
    char *period_at;
    char *dash_at;
    char *exponent_at;
    char *ep = 0;
   10362:	2300      	movs	r3, #0
   10364:	9303      	str	r3, [sp, #12]
    int64_t ival, frac, div, exp;
    double f, f_frac;

    period_at = strchr(nptr, '.');
   10366:	212e      	movs	r1, #46	; 0x2e
   10368:	f00a faf2 	bl	1a950 <strchr>
   1036c:	4606      	mov	r6, r0
    dash_at = strchr(nptr, '-');
   1036e:	212d      	movs	r1, #45	; 0x2d
   10370:	4620      	mov	r0, r4
   10372:	f00a faed 	bl	1a950 <strchr>
   10376:	9001      	str	r0, [sp, #4]
    exponent_at = strchr(nptr, 'e');
   10378:	2165      	movs	r1, #101	; 0x65
   1037a:	4620      	mov	r0, r4
   1037c:	f00a fae8 	bl	1a950 <strchr>
   10380:	4682      	mov	sl, r0
    ival = strtoll(nptr, &ep, 10);
   10382:	220a      	movs	r2, #10
   10384:	a903      	add	r1, sp, #12
   10386:	4620      	mov	r0, r4
   10388:	f00a fb2c 	bl	1a9e4 <strtoll>
   1038c:	468b      	mov	fp, r1
    f = (double)(ival);
   1038e:	f00f fd11 	bl	1fdb4 <__aeabi_l2d>
   10392:	ec41 0b18 	vmov	d8, r0, r1

    if (period_at == 0 || *(period_at+1) == 0) {
   10396:	b10e      	cbz	r6, 1039c <strtod_soft+0x48>
   10398:	7873      	ldrb	r3, [r6, #1]
   1039a:	b95b      	cbnz	r3, 103b4 <strtod_soft+0x60>
        /* No period, or period at the very end, treat as integer */
        if (endptr) *endptr = ep;
   1039c:	b10f      	cbz	r7, 103a2 <strtod_soft+0x4e>
   1039e:	9b03      	ldr	r3, [sp, #12]
   103a0:	603b      	str	r3, [r7, #0]
        exp = 1;
        for (i = 0; i < n; i++) exp *= 10;
        f *= (double)exp;
    }
    return f;
}
   103a2:	eeb0 0a48 	vmov.f32	s0, s16
   103a6:	eef0 0a68 	vmov.f32	s1, s17
   103aa:	b005      	add	sp, #20
   103ac:	ecbd 8b02 	vpop	{d8}
   103b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    frac = strtoll(period_at+1, &ep, 10);
   103b4:	1c74      	adds	r4, r6, #1
   103b6:	220a      	movs	r2, #10
   103b8:	a903      	add	r1, sp, #12
   103ba:	4620      	mov	r0, r4
   103bc:	f00a fb12 	bl	1a9e4 <strtoll>
   103c0:	4680      	mov	r8, r0
   103c2:	4689      	mov	r9, r1
    if (endptr == 0) n = strlen(period_at + 1);
   103c4:	b137      	cbz	r7, 103d4 <strtod_soft+0x80>
    else n = *endptr - period_at + 1;
   103c6:	6838      	ldr	r0, [r7, #0]
   103c8:	1b80      	subs	r0, r0, r6
   103ca:	3001      	adds	r0, #1
    div = 1;
   103cc:	2401      	movs	r4, #1
   103ce:	2500      	movs	r5, #0
    for (i = 0; i < n; i++) div *= 10;
   103d0:	4629      	mov	r1, r5
   103d2:	e00d      	b.n	103f0 <strtod_soft+0x9c>
    if (endptr == 0) n = strlen(period_at + 1);
   103d4:	4620      	mov	r0, r4
   103d6:	f7fb fe91 	bl	c0fc <strlen>
   103da:	e7f7      	b.n	103cc <strtod_soft+0x78>
    for (i = 0; i < n; i++) div *= 10;
   103dc:	00aa      	lsls	r2, r5, #2
   103de:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
   103e2:	00a3      	lsls	r3, r4, #2
   103e4:	191c      	adds	r4, r3, r4
   103e6:	eb45 0502 	adc.w	r5, r5, r2
   103ea:	1924      	adds	r4, r4, r4
   103ec:	416d      	adcs	r5, r5
   103ee:	3101      	adds	r1, #1
   103f0:	4281      	cmp	r1, r0
   103f2:	dbf3      	blt.n	103dc <strtod_soft+0x88>
    f_frac = (double)frac / (double)div;
   103f4:	4640      	mov	r0, r8
   103f6:	4649      	mov	r1, r9
   103f8:	f00f fcdc 	bl	1fdb4 <__aeabi_l2d>
   103fc:	4680      	mov	r8, r0
   103fe:	4689      	mov	r9, r1
   10400:	4620      	mov	r0, r4
   10402:	4629      	mov	r1, r5
   10404:	f00f fcd6 	bl	1fdb4 <__aeabi_l2d>
   10408:	4602      	mov	r2, r0
   1040a:	460b      	mov	r3, r1
   1040c:	4640      	mov	r0, r8
   1040e:	4649      	mov	r1, r9
   10410:	f00f fe28 	bl	20064 <__aeabi_ddiv>
   10414:	4602      	mov	r2, r0
   10416:	460b      	mov	r3, r1
    if (ival < 0 || (dash_at != 0 && dash_at < period_at)) {
   10418:	f1bb 0f00 	cmp.w	fp, #0
   1041c:	db03      	blt.n	10426 <strtod_soft+0xd2>
   1041e:	9901      	ldr	r1, [sp, #4]
   10420:	b311      	cbz	r1, 10468 <strtod_soft+0x114>
   10422:	428e      	cmp	r6, r1
   10424:	d920      	bls.n	10468 <strtod_soft+0x114>
        f -= f_frac;
   10426:	ec51 0b18 	vmov	r0, r1, d8
   1042a:	f00f fb39 	bl	1faa0 <__aeabi_dsub>
   1042e:	ec41 0b18 	vmov	d8, r0, r1
    if (endptr) *endptr = ep;
   10432:	b10f      	cbz	r7, 10438 <strtod_soft+0xe4>
   10434:	9b03      	ldr	r3, [sp, #12]
   10436:	603b      	str	r3, [r7, #0]
    if (exponent_at == 0 || *(exponent_at+1) == 0|| ep == 0 || exponent_at != ep) {
   10438:	f1ba 0f00 	cmp.w	sl, #0
   1043c:	d0b1      	beq.n	103a2 <strtod_soft+0x4e>
   1043e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   10442:	2b00      	cmp	r3, #0
   10444:	d0ad      	beq.n	103a2 <strtod_soft+0x4e>
   10446:	9b03      	ldr	r3, [sp, #12]
   10448:	2b00      	cmp	r3, #0
   1044a:	d0aa      	beq.n	103a2 <strtod_soft+0x4e>
   1044c:	4553      	cmp	r3, sl
   1044e:	d1a8      	bne.n	103a2 <strtod_soft+0x4e>
    n = strtoll(exponent_at+1, &ep, 10);
   10450:	220a      	movs	r2, #10
   10452:	a903      	add	r1, sp, #12
   10454:	f10a 0001 	add.w	r0, sl, #1
   10458:	f00a fac4 	bl	1a9e4 <strtoll>
    if (n < 0) {
   1045c:	1e05      	subs	r5, r0, #0
   1045e:	db12      	blt.n	10486 <strtod_soft+0x132>
        exp = 1;
   10460:	2001      	movs	r0, #1
   10462:	2100      	movs	r1, #0
        for (i = 0; i < n; i++) exp *= 10;
   10464:	460c      	mov	r4, r1
   10466:	e028      	b.n	104ba <strtod_soft+0x166>
        f += f_frac;
   10468:	ec51 0b18 	vmov	r0, r1, d8
   1046c:	f00f fb1a 	bl	1faa4 <__adddf3>
   10470:	ec41 0b18 	vmov	d8, r0, r1
   10474:	e7dd      	b.n	10432 <strtod_soft+0xde>
        for (i = 0; i < n; i++) div *= 10;
   10476:	220a      	movs	r2, #10
   10478:	fb02 f401 	mul.w	r4, r2, r1
   1047c:	fba0 0102 	umull	r0, r1, r0, r2
   10480:	4421      	add	r1, r4
   10482:	3301      	adds	r3, #1
   10484:	e002      	b.n	1048c <strtod_soft+0x138>
        div = 1;
   10486:	2001      	movs	r0, #1
   10488:	2100      	movs	r1, #0
        for (i = 0; i < n; i++) div *= 10;
   1048a:	460b      	mov	r3, r1
   1048c:	42ab      	cmp	r3, r5
   1048e:	dbf2      	blt.n	10476 <strtod_soft+0x122>
        f /= (double)div;
   10490:	f00f fc90 	bl	1fdb4 <__aeabi_l2d>
   10494:	4602      	mov	r2, r0
   10496:	460b      	mov	r3, r1
   10498:	ec51 0b18 	vmov	r0, r1, d8
   1049c:	f00f fde2 	bl	20064 <__aeabi_ddiv>
   104a0:	ec41 0b18 	vmov	d8, r0, r1
   104a4:	e77d      	b.n	103a2 <strtod_soft+0x4e>
        for (i = 0; i < n; i++) exp *= 10;
   104a6:	008b      	lsls	r3, r1, #2
   104a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   104ac:	0082      	lsls	r2, r0, #2
   104ae:	1810      	adds	r0, r2, r0
   104b0:	eb41 0103 	adc.w	r1, r1, r3
   104b4:	1800      	adds	r0, r0, r0
   104b6:	4149      	adcs	r1, r1
   104b8:	3401      	adds	r4, #1
   104ba:	42ac      	cmp	r4, r5
   104bc:	dbf3      	blt.n	104a6 <strtod_soft+0x152>
        f *= (double)exp;
   104be:	f00f fc79 	bl	1fdb4 <__aeabi_l2d>
   104c2:	4602      	mov	r2, r0
   104c4:	460b      	mov	r3, r1
   104c6:	ec51 0b18 	vmov	r0, r1, d8
   104ca:	f00f fca1 	bl	1fe10 <__aeabi_dmul>
   104ce:	ec41 0b18 	vmov	d8, r0, r1
   104d2:	e766      	b.n	103a2 <strtod_soft+0x4e>

000104d4 <leapyear>:
 *     ((year % 400) == 0) )
 * It is otherwise equivalent.
 */
static int
leapyear(int year)
{
   104d4:	4603      	mov	r3, r0
    int rv = 0;

    if ((year & 3) == 0) {
   104d6:	f010 0f03 	tst.w	r0, #3
   104da:	d115      	bne.n	10508 <leapyear+0x34>
        rv = 1;
        if ((year % 100) == 0) {
   104dc:	4a0d      	ldr	r2, [pc, #52]	; (10514 <leapyear+0x40>)
   104de:	fb82 1200 	smull	r1, r2, r2, r0
   104e2:	17c0      	asrs	r0, r0, #31
   104e4:	ebc0 1062 	rsb	r0, r0, r2, asr #5
   104e8:	2264      	movs	r2, #100	; 0x64
   104ea:	fb02 3010 	mls	r0, r2, r0, r3
   104ee:	b968      	cbnz	r0, 1050c <leapyear+0x38>
            rv = 0;
            if ((year % 400) == 0)
   104f0:	4908      	ldr	r1, [pc, #32]	; (10514 <leapyear+0x40>)
   104f2:	fb81 2103 	smull	r2, r1, r1, r3
   104f6:	17da      	asrs	r2, r3, #31
   104f8:	ebc2 12e1 	rsb	r2, r2, r1, asr #7
   104fc:	f44f 71c8 	mov.w	r1, #400	; 0x190
   10500:	fb01 3212 	mls	r2, r1, r2, r3
   10504:	b122      	cbz	r2, 10510 <leapyear+0x3c>
   10506:	4770      	bx	lr
    int rv = 0;
   10508:	2000      	movs	r0, #0
   1050a:	4770      	bx	lr
        rv = 1;
   1050c:	2001      	movs	r0, #1
   1050e:	4770      	bx	lr
                rv = 1;
   10510:	2001      	movs	r0, #1
        }
    }
    return (rv);
}
   10512:	4770      	bx	lr
   10514:	51eb851f 	.word	0x51eb851f

00010518 <parse_number>:
    return (0);
}

static const char *
parse_number(const char *str, int digits, int *val)
{
   10518:	4684      	mov	ip, r0
    const char *cp;
    const char *end;

    *val = 0;
   1051a:	2300      	movs	r3, #0
   1051c:	6013      	str	r3, [r2, #0]
    cp = str;
    end = str + digits;
   1051e:	4408      	add	r0, r1
    while (cp < end) {
   10520:	4584      	cmp	ip, r0
   10522:	d21a      	bcs.n	1055a <parse_number+0x42>
        if (!isdigit((int) *cp)) {
   10524:	f89c 3000 	ldrb.w	r3, [ip]
   10528:	3b30      	subs	r3, #48	; 0x30
   1052a:	2b09      	cmp	r3, #9
   1052c:	d816      	bhi.n	1055c <parse_number+0x44>
{
   1052e:	b500      	push	{lr}
            return (NULL);
        }
        *val *= 10;
   10530:	6813      	ldr	r3, [r2, #0]
   10532:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   10536:	005b      	lsls	r3, r3, #1
   10538:	6013      	str	r3, [r2, #0]
        *val += (*cp - '0');
   1053a:	f81c eb01 	ldrb.w	lr, [ip], #1
   1053e:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   10542:	4473      	add	r3, lr
   10544:	6013      	str	r3, [r2, #0]
    while (cp < end) {
   10546:	4584      	cmp	ip, r0
   10548:	d205      	bcs.n	10556 <parse_number+0x3e>
        if (!isdigit((int) *cp)) {
   1054a:	f89c 3000 	ldrb.w	r3, [ip]
   1054e:	3b30      	subs	r3, #48	; 0x30
   10550:	2b09      	cmp	r3, #9
   10552:	d9ed      	bls.n	10530 <parse_number+0x18>
            return (NULL);
   10554:	2000      	movs	r0, #0
        cp++;
    }
    return (end);
}
   10556:	f85d fb04 	ldr.w	pc, [sp], #4
   1055a:	4770      	bx	lr
            return (NULL);
   1055c:	2000      	movs	r0, #0
}
   1055e:	4770      	bx	lr

00010560 <clocktime_to_timeval>:
{
   10560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10564:	b085      	sub	sp, #20
   10566:	9101      	str	r1, [sp, #4]
   10568:	9200      	str	r2, [sp, #0]
    year = ct->year;
   1056a:	6806      	ldr	r6, [r0, #0]
    if (year < POSIX_BASE_YEAR ||
   1056c:	f240 73b1 	movw	r3, #1969	; 0x7b1
   10570:	429e      	cmp	r6, r3
   10572:	f340 80bc 	ble.w	106ee <clocktime_to_timeval+0x18e>
   10576:	4604      	mov	r4, r0
        ct->mon < 1 || ct->mon > 12 ||
   10578:	6845      	ldr	r5, [r0, #4]
    if (year < POSIX_BASE_YEAR ||
   1057a:	2d00      	cmp	r5, #0
   1057c:	f340 80bb 	ble.w	106f6 <clocktime_to_timeval+0x196>
        ct->mon < 1 || ct->mon > 12 ||
   10580:	2d0c      	cmp	r5, #12
   10582:	f300 80ba 	bgt.w	106fa <clocktime_to_timeval+0x19a>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   10586:	f8d0 8008 	ldr.w	r8, [r0, #8]
        ct->mon < 1 || ct->mon > 12 ||
   1058a:	f1b8 0f00 	cmp.w	r8, #0
   1058e:	f340 80b6 	ble.w	106fe <clocktime_to_timeval+0x19e>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   10592:	1e6b      	subs	r3, r5, #1
   10594:	4a65      	ldr	r2, [pc, #404]	; (1072c <clocktime_to_timeval+0x1cc>)
   10596:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
   1059a:	2d02      	cmp	r5, #2
   1059c:	d02b      	beq.n	105f6 <clocktime_to_timeval+0x96>
   1059e:	2000      	movs	r0, #0
   105a0:	4407      	add	r7, r0
   105a2:	45b8      	cmp	r8, r7
   105a4:	f300 80ad 	bgt.w	10702 <clocktime_to_timeval+0x1a2>
        ct->hour < 0 || ct->hour > 23 ||
   105a8:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   105ac:	f1bb 0f00 	cmp.w	fp, #0
   105b0:	f2c0 80a9 	blt.w	10706 <clocktime_to_timeval+0x1a6>
        ct->hour < 0 || ct->hour > 23 ||
   105b4:	f1bb 0f17 	cmp.w	fp, #23
   105b8:	f300 80a7 	bgt.w	1070a <clocktime_to_timeval+0x1aa>
        ct->min < 0 || ct->min > 59 ||
   105bc:	6923      	ldr	r3, [r4, #16]
   105be:	9302      	str	r3, [sp, #8]
        ct->hour < 0 || ct->hour > 23 ||
   105c0:	2b00      	cmp	r3, #0
   105c2:	f2c0 80a4 	blt.w	1070e <clocktime_to_timeval+0x1ae>
        ct->min < 0 || ct->min > 59 ||
   105c6:	2b3b      	cmp	r3, #59	; 0x3b
   105c8:	f300 80a3 	bgt.w	10712 <clocktime_to_timeval+0x1b2>
        ct->sec < 0 || ct->sec > 59 ||
   105cc:	6963      	ldr	r3, [r4, #20]
   105ce:	9303      	str	r3, [sp, #12]
        ct->min < 0 || ct->min > 59 ||
   105d0:	2b00      	cmp	r3, #0
   105d2:	f2c0 80a0 	blt.w	10716 <clocktime_to_timeval+0x1b6>
        ct->sec < 0 || ct->sec > 59 ||
   105d6:	2b3b      	cmp	r3, #59	; 0x3b
   105d8:	f300 809f 	bgt.w	1071a <clocktime_to_timeval+0x1ba>
        ct->usec < 0 || ct->usec > 999999) {
   105dc:	69e3      	ldr	r3, [r4, #28]
        ct->sec < 0 || ct->sec > 59 ||
   105de:	2b00      	cmp	r3, #0
   105e0:	f2c0 809d 	blt.w	1071e <clocktime_to_timeval+0x1be>
        ct->usec < 0 || ct->usec > 999999) {
   105e4:	4a52      	ldr	r2, [pc, #328]	; (10730 <clocktime_to_timeval+0x1d0>)
   105e6:	4293      	cmp	r3, r2
   105e8:	f300 809b 	bgt.w	10722 <clocktime_to_timeval+0x1c2>
    days = 0;
   105ec:	f04f 0900 	mov.w	r9, #0
    for (i = POSIX_BASE_YEAR; i < year; i++)
   105f0:	f240 77b2 	movw	r7, #1970	; 0x7b2
   105f4:	e007      	b.n	10606 <clocktime_to_timeval+0xa6>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   105f6:	4630      	mov	r0, r6
   105f8:	f7ff ff6c 	bl	104d4 <leapyear>
   105fc:	e7d0      	b.n	105a0 <clocktime_to_timeval+0x40>
        days += days_in_year(i);
   105fe:	f240 136d 	movw	r3, #365	; 0x16d
   10602:	4499      	add	r9, r3
    for (i = POSIX_BASE_YEAR; i < year; i++)
   10604:	3701      	adds	r7, #1
   10606:	42b7      	cmp	r7, r6
   10608:	da07      	bge.n	1061a <clocktime_to_timeval+0xba>
        days += days_in_year(i);
   1060a:	4638      	mov	r0, r7
   1060c:	f7ff ff62 	bl	104d4 <leapyear>
   10610:	2800      	cmp	r0, #0
   10612:	d0f4      	beq.n	105fe <clocktime_to_timeval+0x9e>
   10614:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   10618:	e7f3      	b.n	10602 <clocktime_to_timeval+0xa2>
    for (i = 1; i < ct->mon; i++)
   1061a:	2701      	movs	r7, #1
   1061c:	46aa      	mov	sl, r5
   1061e:	e005      	b.n	1062c <clocktime_to_timeval+0xcc>
          days += days_in_month(year, i);
   10620:	4630      	mov	r0, r6
   10622:	f7ff ff57 	bl	104d4 <leapyear>
   10626:	4405      	add	r5, r0
   10628:	44a9      	add	r9, r5
    for (i = 1; i < ct->mon; i++)
   1062a:	3701      	adds	r7, #1
   1062c:	45ba      	cmp	sl, r7
   1062e:	dd07      	ble.n	10640 <clocktime_to_timeval+0xe0>
          days += days_in_month(year, i);
   10630:	1e7b      	subs	r3, r7, #1
   10632:	4a3e      	ldr	r2, [pc, #248]	; (1072c <clocktime_to_timeval+0x1cc>)
   10634:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   10638:	2f02      	cmp	r7, #2
   1063a:	d0f1      	beq.n	10620 <clocktime_to_timeval+0xc0>
   1063c:	2000      	movs	r0, #0
   1063e:	e7f2      	b.n	10626 <clocktime_to_timeval+0xc6>
    days += (ct->day - 1);
   10640:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   10644:	44c1      	add	r9, r8
    tv->tv_sec = (((int64_t)days * 24 + ct->hour) * 60 + ct->min) * 60 +
   10646:	ea4f 72e9 	mov.w	r2, r9, asr #31
   1064a:	eb19 0309 	adds.w	r3, r9, r9
   1064e:	eb42 0102 	adc.w	r1, r2, r2
   10652:	eb13 0309 	adds.w	r3, r3, r9
   10656:	eb42 0201 	adc.w	r2, r2, r1
   1065a:	00d2      	lsls	r2, r2, #3
   1065c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   10660:	00db      	lsls	r3, r3, #3
   10662:	eb13 030b 	adds.w	r3, r3, fp
   10666:	eb42 7beb 	adc.w	fp, r2, fp, asr #31
   1066a:	ea4f 120b 	mov.w	r2, fp, lsl #4
   1066e:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
   10672:	0119      	lsls	r1, r3, #4
   10674:	1acb      	subs	r3, r1, r3
   10676:	eb62 020b 	sbc.w	r2, r2, fp
   1067a:	0092      	lsls	r2, r2, #2
   1067c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   10680:	009b      	lsls	r3, r3, #2
   10682:	9802      	ldr	r0, [sp, #8]
   10684:	1819      	adds	r1, r3, r0
   10686:	eb42 70e0 	adc.w	r0, r2, r0, asr #31
   1068a:	0102      	lsls	r2, r0, #4
   1068c:	ea42 7211 	orr.w	r2, r2, r1, lsr #28
   10690:	010b      	lsls	r3, r1, #4
   10692:	1a5b      	subs	r3, r3, r1
   10694:	eb62 0200 	sbc.w	r2, r2, r0
   10698:	0092      	lsls	r2, r2, #2
   1069a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   1069e:	009b      	lsls	r3, r3, #2
   106a0:	9903      	ldr	r1, [sp, #12]
   106a2:	185b      	adds	r3, r3, r1
   106a4:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   106a8:	9800      	ldr	r0, [sp, #0]
   106aa:	6003      	str	r3, [r0, #0]
   106ac:	6042      	str	r2, [r0, #4]
    tv->tv_usec = ct->usec;
   106ae:	69e1      	ldr	r1, [r4, #28]
   106b0:	4604      	mov	r4, r0
   106b2:	6081      	str	r1, [r0, #8]
    if (tz != NULL) {
   106b4:	9d01      	ldr	r5, [sp, #4]
   106b6:	b3b5      	cbz	r5, 10726 <clocktime_to_timeval+0x1c6>
	tv->tv_sec += tz->tz_minuteswest * 60;
   106b8:	f9b5 1000 	ldrsh.w	r1, [r5]
   106bc:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
   106c0:	0088      	lsls	r0, r1, #2
   106c2:	181b      	adds	r3, r3, r0
   106c4:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   106c8:	6023      	str	r3, [r4, #0]
   106ca:	6062      	str	r2, [r4, #4]
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   106cc:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
   106d0:	b151      	cbz	r1, 106e8 <clocktime_to_timeval+0x188>
   106d2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   106d6:	2000      	movs	r0, #0
   106d8:	1a5b      	subs	r3, r3, r1
   106da:	eb62 0200 	sbc.w	r2, r2, r0
   106de:	9900      	ldr	r1, [sp, #0]
   106e0:	600b      	str	r3, [r1, #0]
   106e2:	604a      	str	r2, [r1, #4]
    return (0);
   106e4:	2000      	movs	r0, #0
   106e6:	e003      	b.n	106f0 <clocktime_to_timeval+0x190>
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   106e8:	2100      	movs	r1, #0
   106ea:	4608      	mov	r0, r1
   106ec:	e7f4      	b.n	106d8 <clocktime_to_timeval+0x178>
        return (OS_EINVAL);
   106ee:	2002      	movs	r0, #2
}
   106f0:	b005      	add	sp, #20
   106f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return (OS_EINVAL);
   106f6:	2002      	movs	r0, #2
   106f8:	e7fa      	b.n	106f0 <clocktime_to_timeval+0x190>
   106fa:	2002      	movs	r0, #2
   106fc:	e7f8      	b.n	106f0 <clocktime_to_timeval+0x190>
   106fe:	2002      	movs	r0, #2
   10700:	e7f6      	b.n	106f0 <clocktime_to_timeval+0x190>
   10702:	2002      	movs	r0, #2
   10704:	e7f4      	b.n	106f0 <clocktime_to_timeval+0x190>
   10706:	2002      	movs	r0, #2
   10708:	e7f2      	b.n	106f0 <clocktime_to_timeval+0x190>
   1070a:	2002      	movs	r0, #2
   1070c:	e7f0      	b.n	106f0 <clocktime_to_timeval+0x190>
   1070e:	2002      	movs	r0, #2
   10710:	e7ee      	b.n	106f0 <clocktime_to_timeval+0x190>
   10712:	2002      	movs	r0, #2
   10714:	e7ec      	b.n	106f0 <clocktime_to_timeval+0x190>
   10716:	2002      	movs	r0, #2
   10718:	e7ea      	b.n	106f0 <clocktime_to_timeval+0x190>
   1071a:	2002      	movs	r0, #2
   1071c:	e7e8      	b.n	106f0 <clocktime_to_timeval+0x190>
   1071e:	2002      	movs	r0, #2
   10720:	e7e6      	b.n	106f0 <clocktime_to_timeval+0x190>
   10722:	2002      	movs	r0, #2
   10724:	e7e4      	b.n	106f0 <clocktime_to_timeval+0x190>
    return (0);
   10726:	2000      	movs	r0, #0
   10728:	e7e2      	b.n	106f0 <clocktime_to_timeval+0x190>
   1072a:	bf00      	nop
   1072c:	0002256c 	.word	0x0002256c
   10730:	000f423f 	.word	0x000f423f

00010734 <timeval_to_clocktime>:
{
   10734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10738:	4606      	mov	r6, r0
   1073a:	4615      	mov	r5, r2
    secs = tv->tv_sec;
   1073c:	6807      	ldr	r7, [r0, #0]
   1073e:	f8d0 8004 	ldr.w	r8, [r0, #4]
    if (tz != NULL) {
   10742:	b189      	cbz	r1, 10768 <timeval_to_clocktime+0x34>
        secs -= tz->tz_minuteswest * 60;
   10744:	f9b1 3000 	ldrsh.w	r3, [r1]
   10748:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1074c:	009a      	lsls	r2, r3, #2
   1074e:	1abf      	subs	r7, r7, r2
   10750:	eb68 73e3 	sbc.w	r3, r8, r3, asr #31
        secs += tz->tz_dsttime ? 3600 : 0;
   10754:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
   10758:	b37a      	cbz	r2, 107ba <timeval_to_clocktime+0x86>
   1075a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   1075e:	f04f 0800 	mov.w	r8, #0
   10762:	19d7      	adds	r7, r2, r7
   10764:	eb48 0803 	adc.w	r8, r8, r3
    if (secs < 0 || tv->tv_usec < 0 || tv->tv_usec > 999999) {
   10768:	f1b8 0f00 	cmp.w	r8, #0
   1076c:	db73      	blt.n	10856 <timeval_to_clocktime+0x122>
   1076e:	68b3      	ldr	r3, [r6, #8]
   10770:	2b00      	cmp	r3, #0
   10772:	db72      	blt.n	1085a <timeval_to_clocktime+0x126>
   10774:	4a3b      	ldr	r2, [pc, #236]	; (10864 <timeval_to_clocktime+0x130>)
   10776:	4293      	cmp	r3, r2
   10778:	dc71      	bgt.n	1085e <timeval_to_clocktime+0x12a>
    days = secs / SECDAY;
   1077a:	4a3b      	ldr	r2, [pc, #236]	; (10868 <timeval_to_clocktime+0x134>)
   1077c:	2300      	movs	r3, #0
   1077e:	4638      	mov	r0, r7
   10780:	4641      	mov	r1, r8
   10782:	f00f fe8d 	bl	204a0 <__aeabi_ldivmod>
   10786:	4681      	mov	r9, r0
   10788:	4604      	mov	r4, r0
    rsec = secs % SECDAY;
   1078a:	4a37      	ldr	r2, [pc, #220]	; (10868 <timeval_to_clocktime+0x134>)
   1078c:	2300      	movs	r3, #0
   1078e:	4638      	mov	r0, r7
   10790:	4641      	mov	r1, r8
   10792:	f00f fe85 	bl	204a0 <__aeabi_ldivmod>
   10796:	4690      	mov	r8, r2
   10798:	461f      	mov	r7, r3
    ct->dow = day_of_week(days);
   1079a:	f109 0004 	add.w	r0, r9, #4
   1079e:	4b33      	ldr	r3, [pc, #204]	; (1086c <timeval_to_clocktime+0x138>)
   107a0:	fb83 2300 	smull	r2, r3, r3, r0
   107a4:	181a      	adds	r2, r3, r0
   107a6:	17c3      	asrs	r3, r0, #31
   107a8:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   107ac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   107b0:	1ac3      	subs	r3, r0, r3
   107b2:	61ab      	str	r3, [r5, #24]
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   107b4:	f240 79b2 	movw	r9, #1970	; 0x7b2
   107b8:	e009      	b.n	107ce <timeval_to_clocktime+0x9a>
        secs += tz->tz_dsttime ? 3600 : 0;
   107ba:	2200      	movs	r2, #0
   107bc:	4690      	mov	r8, r2
   107be:	e7d0      	b.n	10762 <timeval_to_clocktime+0x2e>
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   107c0:	f240 136d 	movw	r3, #365	; 0x16d
   107c4:	429c      	cmp	r4, r3
   107c6:	db0b      	blt.n	107e0 <timeval_to_clocktime+0xac>
        days -= days_in_year(year);
   107c8:	1ae4      	subs	r4, r4, r3
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   107ca:	f109 0901 	add.w	r9, r9, #1
   107ce:	4648      	mov	r0, r9
   107d0:	f7ff fe80 	bl	104d4 <leapyear>
   107d4:	4686      	mov	lr, r0
   107d6:	2800      	cmp	r0, #0
   107d8:	d0f2      	beq.n	107c0 <timeval_to_clocktime+0x8c>
   107da:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   107de:	e7f1      	b.n	107c4 <timeval_to_clocktime+0x90>
    ct->year = year;
   107e0:	f8c5 9000 	str.w	r9, [r5]
    for (i = 1; days >= days_in_month(year, i); i++)
   107e4:	2301      	movs	r3, #1
   107e6:	e006      	b.n	107f6 <timeval_to_clocktime+0xc2>
   107e8:	46f4      	mov	ip, lr
   107ea:	448c      	add	ip, r1
   107ec:	45a4      	cmp	ip, r4
   107ee:	dc0b      	bgt.n	10808 <timeval_to_clocktime+0xd4>
        days -= days_in_month(year, i);
   107f0:	eba4 040c 	sub.w	r4, r4, ip
    for (i = 1; days >= days_in_month(year, i); i++)
   107f4:	3301      	adds	r3, #1
   107f6:	1e5a      	subs	r2, r3, #1
   107f8:	491d      	ldr	r1, [pc, #116]	; (10870 <timeval_to_clocktime+0x13c>)
   107fa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   107fe:	2b02      	cmp	r3, #2
   10800:	d0f2      	beq.n	107e8 <timeval_to_clocktime+0xb4>
   10802:	f04f 0c00 	mov.w	ip, #0
   10806:	e7f0      	b.n	107ea <timeval_to_clocktime+0xb6>
    ct->mon = i;
   10808:	606b      	str	r3, [r5, #4]
    ct->day = days + 1;
   1080a:	3401      	adds	r4, #1
   1080c:	60ac      	str	r4, [r5, #8]
    ct->hour = rsec / 3600;
   1080e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   10812:	2300      	movs	r3, #0
   10814:	4640      	mov	r0, r8
   10816:	4639      	mov	r1, r7
   10818:	f00f fe42 	bl	204a0 <__aeabi_ldivmod>
   1081c:	60e8      	str	r0, [r5, #12]
    rsec = rsec % 3600;
   1081e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   10822:	2300      	movs	r3, #0
   10824:	4640      	mov	r0, r8
   10826:	4639      	mov	r1, r7
   10828:	f00f fe3a 	bl	204a0 <__aeabi_ldivmod>
   1082c:	4617      	mov	r7, r2
   1082e:	461c      	mov	r4, r3
    ct->min  = rsec / 60;
   10830:	223c      	movs	r2, #60	; 0x3c
   10832:	2300      	movs	r3, #0
   10834:	4638      	mov	r0, r7
   10836:	4621      	mov	r1, r4
   10838:	f00f fe32 	bl	204a0 <__aeabi_ldivmod>
   1083c:	6128      	str	r0, [r5, #16]
    rsec = rsec % 60;
   1083e:	223c      	movs	r2, #60	; 0x3c
   10840:	2300      	movs	r3, #0
   10842:	4638      	mov	r0, r7
   10844:	4621      	mov	r1, r4
   10846:	f00f fe2b 	bl	204a0 <__aeabi_ldivmod>
    ct->sec  = rsec;
   1084a:	616a      	str	r2, [r5, #20]
    ct->usec = tv->tv_usec;
   1084c:	68b3      	ldr	r3, [r6, #8]
   1084e:	61eb      	str	r3, [r5, #28]
    return (0);
   10850:	2000      	movs	r0, #0
}
   10852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return (OS_EINVAL);
   10856:	2002      	movs	r0, #2
   10858:	e7fb      	b.n	10852 <timeval_to_clocktime+0x11e>
   1085a:	2002      	movs	r0, #2
   1085c:	e7f9      	b.n	10852 <timeval_to_clocktime+0x11e>
   1085e:	2002      	movs	r0, #2
   10860:	e7f7      	b.n	10852 <timeval_to_clocktime+0x11e>
   10862:	bf00      	nop
   10864:	000f423f 	.word	0x000f423f
   10868:	00015180 	.word	0x00015180
   1086c:	92492493 	.word	0x92492493
   10870:	0002256c 	.word	0x0002256c

00010874 <datetime_parse>:
 * 2016-03-02T22:44:00.1                fractional seconds
 * 2016-03-02T22:44:00.101+05:30        fractional seconds with timezone
 */
int
datetime_parse(const char *input, struct os_timeval *tv, struct os_timezone *tz)
{
   10874:	b570      	push	{r4, r5, r6, lr}
   10876:	b08a      	sub	sp, #40	; 0x28
   10878:	4604      	mov	r4, r0
   1087a:	460d      	mov	r5, r1
   1087c:	4616      	mov	r6, r2
    int off_hour, off_min;
    const char *cp;
    const char *ep;
    struct clocktime ct;

    bzero(&ct, sizeof(struct clocktime));
   1087e:	2220      	movs	r2, #32
   10880:	2100      	movs	r1, #0
   10882:	4668      	mov	r0, sp
   10884:	f7fb fc03 	bl	c08e <memset>
    bzero(tv, sizeof(struct os_timeval));
   10888:	2300      	movs	r3, #0
   1088a:	602b      	str	r3, [r5, #0]
   1088c:	606b      	str	r3, [r5, #4]
   1088e:	60ab      	str	r3, [r5, #8]
   10890:	60eb      	str	r3, [r5, #12]
    bzero(tz, sizeof(struct os_timezone));      /* default to UTC time */
   10892:	6033      	str	r3, [r6, #0]

    cp = input;
    cp = parse_number(cp, 4, &ct.year);
   10894:	466a      	mov	r2, sp
   10896:	2104      	movs	r1, #4
   10898:	4620      	mov	r0, r4
   1089a:	f7ff fe3d 	bl	10518 <parse_number>
    if (cp == NULL || *cp != '-') {
   1089e:	2800      	cmp	r0, #0
   108a0:	f000 80a6 	beq.w	109f0 <datetime_parse+0x17c>
   108a4:	7802      	ldrb	r2, [r0, #0]
   108a6:	2a2d      	cmp	r2, #45	; 0x2d
   108a8:	f040 80a5 	bne.w	109f6 <datetime_parse+0x182>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.mon);
   108ac:	aa01      	add	r2, sp, #4
   108ae:	2102      	movs	r1, #2
   108b0:	3001      	adds	r0, #1
   108b2:	f7ff fe31 	bl	10518 <parse_number>
    if (cp == NULL || *cp != '-') {
   108b6:	2800      	cmp	r0, #0
   108b8:	f000 80a0 	beq.w	109fc <datetime_parse+0x188>
   108bc:	7802      	ldrb	r2, [r0, #0]
   108be:	2a2d      	cmp	r2, #45	; 0x2d
   108c0:	f040 809f 	bne.w	10a02 <datetime_parse+0x18e>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.day);
   108c4:	aa02      	add	r2, sp, #8
   108c6:	2102      	movs	r1, #2
   108c8:	3001      	adds	r0, #1
   108ca:	f7ff fe25 	bl	10518 <parse_number>
    if (cp == NULL || *cp != 'T') {
   108ce:	2800      	cmp	r0, #0
   108d0:	f000 809a 	beq.w	10a08 <datetime_parse+0x194>
   108d4:	7802      	ldrb	r2, [r0, #0]
   108d6:	2a54      	cmp	r2, #84	; 0x54
   108d8:	f040 8099 	bne.w	10a0e <datetime_parse+0x19a>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.hour);
   108dc:	aa03      	add	r2, sp, #12
   108de:	2102      	movs	r1, #2
   108e0:	3001      	adds	r0, #1
   108e2:	f7ff fe19 	bl	10518 <parse_number>
    if (cp == NULL || *cp != ':') {
   108e6:	2800      	cmp	r0, #0
   108e8:	f000 8094 	beq.w	10a14 <datetime_parse+0x1a0>
   108ec:	7802      	ldrb	r2, [r0, #0]
   108ee:	2a3a      	cmp	r2, #58	; 0x3a
   108f0:	f040 8093 	bne.w	10a1a <datetime_parse+0x1a6>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.min);
   108f4:	aa04      	add	r2, sp, #16
   108f6:	2102      	movs	r1, #2
   108f8:	3001      	adds	r0, #1
   108fa:	f7ff fe0d 	bl	10518 <parse_number>
    if (cp == NULL || *cp != ':') {
   108fe:	2800      	cmp	r0, #0
   10900:	f000 808e 	beq.w	10a20 <datetime_parse+0x1ac>
   10904:	7802      	ldrb	r2, [r0, #0]
   10906:	2a3a      	cmp	r2, #58	; 0x3a
   10908:	f040 808d 	bne.w	10a26 <datetime_parse+0x1b2>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.sec);
   1090c:	aa05      	add	r2, sp, #20
   1090e:	2102      	movs	r1, #2
   10910:	3001      	adds	r0, #1
   10912:	f7ff fe01 	bl	10518 <parse_number>
    if (cp == NULL) {
   10916:	4684      	mov	ip, r0
   10918:	2800      	cmp	r0, #0
   1091a:	f000 8087 	beq.w	10a2c <datetime_parse+0x1b8>
        goto err;
    }

    /* parse fractional seconds if specified */
    if (*cp == '.') {
   1091e:	7803      	ldrb	r3, [r0, #0]
   10920:	2b2e      	cmp	r3, #46	; 0x2e
   10922:	d037      	beq.n	10994 <datetime_parse+0x120>
        while (digits++ < 6) {
            ct.usec *= 10;
        }
    }

    if (*cp == 'Z' || *cp == 'z') {
   10924:	f89c 3000 	ldrb.w	r3, [ip]
   10928:	2b5a      	cmp	r3, #90	; 0x5a
   1092a:	d050      	beq.n	109ce <datetime_parse+0x15a>
   1092c:	2b7a      	cmp	r3, #122	; 0x7a
   1092e:	d04e      	beq.n	109ce <datetime_parse+0x15a>
        cp++;
    } else if (*cp == '+' || *cp == '-') {
   10930:	2b2b      	cmp	r3, #43	; 0x2b
   10932:	d001      	beq.n	10938 <datetime_parse+0xc4>
   10934:	2b2d      	cmp	r3, #45	; 0x2d
   10936:	d14c      	bne.n	109d2 <datetime_parse+0x15e>
        sign = (*cp == '+') ? +1 : -1;
   10938:	2b2b      	cmp	r3, #43	; 0x2b
   1093a:	d057      	beq.n	109ec <datetime_parse+0x178>
   1093c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        cp = parse_number(cp + 1, 2, &off_hour);
   10940:	aa09      	add	r2, sp, #36	; 0x24
   10942:	2102      	movs	r1, #2
   10944:	f10c 0001 	add.w	r0, ip, #1
   10948:	f7ff fde6 	bl	10518 <parse_number>
        if (cp == NULL || *cp != ':') {
   1094c:	2800      	cmp	r0, #0
   1094e:	d076      	beq.n	10a3e <datetime_parse+0x1ca>
   10950:	7802      	ldrb	r2, [r0, #0]
   10952:	2a3a      	cmp	r2, #58	; 0x3a
   10954:	d176      	bne.n	10a44 <datetime_parse+0x1d0>
            goto err;
        }

        cp = parse_number(cp + 1, 2, &off_min);
   10956:	aa08      	add	r2, sp, #32
   10958:	2102      	movs	r1, #2
   1095a:	3001      	adds	r0, #1
   1095c:	f7ff fddc 	bl	10518 <parse_number>
        if (cp == NULL) {
   10960:	4684      	mov	ip, r0
   10962:	2800      	cmp	r0, #0
   10964:	d071      	beq.n	10a4a <datetime_parse+0x1d6>
            goto err;
        }

        if (off_hour < 0 || off_hour > 23 || off_min < 0 || off_min > 59) {
   10966:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10968:	2a17      	cmp	r2, #23
   1096a:	d871      	bhi.n	10a50 <datetime_parse+0x1dc>
   1096c:	9b08      	ldr	r3, [sp, #32]
   1096e:	2b00      	cmp	r3, #0
   10970:	db71      	blt.n	10a56 <datetime_parse+0x1e2>
   10972:	2b3b      	cmp	r3, #59	; 0x3b
   10974:	dc72      	bgt.n	10a5c <datetime_parse+0x1e8>

        /*
         * Allow time zone offsets of up to 18 hours from the GMT.
         * https://docs.oracle.com/javase/8/docs/api/java/time/ZoneOffset.html
         */
        tz->tz_minuteswest = off_hour * 60 + off_min;
   10976:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   1097a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1097e:	b29a      	uxth	r2, r3
   10980:	b21b      	sxth	r3, r3
   10982:	8033      	strh	r3, [r6, #0]
        if (tz->tz_minuteswest > 18 * 60) {
   10984:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
   10988:	dc6b      	bgt.n	10a62 <datetime_parse+0x1ee>

        /*
         * Positive GMT offsets (i.e. timezones to the east of GMT) are
         * represented with a negative 'tz_minuteswest' value.
         */
        if (sign > 0) {
   1098a:	2c00      	cmp	r4, #0
   1098c:	dd21      	ble.n	109d2 <datetime_parse+0x15e>
            tz->tz_minuteswest = -tz->tz_minuteswest;
   1098e:	4252      	negs	r2, r2
   10990:	8032      	strh	r2, [r6, #0]
   10992:	e01e      	b.n	109d2 <datetime_parse+0x15e>
        ep = ++cp;
   10994:	3001      	adds	r0, #1
   10996:	4604      	mov	r4, r0
        while (isdigit((int) *ep)) {
   10998:	e000      	b.n	1099c <datetime_parse+0x128>
            ep++;
   1099a:	3401      	adds	r4, #1
        while (isdigit((int) *ep)) {
   1099c:	7823      	ldrb	r3, [r4, #0]
   1099e:	3b30      	subs	r3, #48	; 0x30
   109a0:	2b09      	cmp	r3, #9
   109a2:	d9fa      	bls.n	1099a <datetime_parse+0x126>
        digits = ep - cp;
   109a4:	1a24      	subs	r4, r4, r0
        if (digits <= 0 || digits > 6) {
   109a6:	1e63      	subs	r3, r4, #1
   109a8:	2b05      	cmp	r3, #5
   109aa:	d842      	bhi.n	10a32 <datetime_parse+0x1be>
        cp = parse_number(cp, digits, &ct.usec);
   109ac:	aa07      	add	r2, sp, #28
   109ae:	4621      	mov	r1, r4
   109b0:	f7ff fdb2 	bl	10518 <parse_number>
        if (cp == NULL) {
   109b4:	4684      	mov	ip, r0
   109b6:	2800      	cmp	r0, #0
   109b8:	d03e      	beq.n	10a38 <datetime_parse+0x1c4>
        while (digits++ < 6) {
   109ba:	1c62      	adds	r2, r4, #1
   109bc:	2c05      	cmp	r4, #5
   109be:	dcb1      	bgt.n	10924 <datetime_parse+0xb0>
            ct.usec *= 10;
   109c0:	9b07      	ldr	r3, [sp, #28]
   109c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   109c6:	005b      	lsls	r3, r3, #1
   109c8:	9307      	str	r3, [sp, #28]
        while (digits++ < 6) {
   109ca:	4614      	mov	r4, r2
   109cc:	e7f5      	b.n	109ba <datetime_parse+0x146>
        cp++;
   109ce:	f10c 0c01 	add.w	ip, ip, #1
        /*
         * 'time offset' is not specified so date/time defaults to UTC.
         */
    }

    if (*cp != '\0') {
   109d2:	f89c 3000 	ldrb.w	r3, [ip]
   109d6:	2b00      	cmp	r3, #0
   109d8:	d146      	bne.n	10a68 <datetime_parse+0x1f4>
        goto err;
    }

    if (clocktime_to_timeval(&ct, tz, tv) != 0) {
   109da:	462a      	mov	r2, r5
   109dc:	4631      	mov	r1, r6
   109de:	4668      	mov	r0, sp
   109e0:	f7ff fdbe 	bl	10560 <clocktime_to_timeval>
   109e4:	2800      	cmp	r0, #0
   109e6:	d142      	bne.n	10a6e <datetime_parse+0x1fa>
    }

    return (0);
err:
    return (-1);
}
   109e8:	b00a      	add	sp, #40	; 0x28
   109ea:	bd70      	pop	{r4, r5, r6, pc}
        sign = (*cp == '+') ? +1 : -1;
   109ec:	2401      	movs	r4, #1
   109ee:	e7a7      	b.n	10940 <datetime_parse+0xcc>
    return (-1);
   109f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   109f4:	e7f8      	b.n	109e8 <datetime_parse+0x174>
   109f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   109fa:	e7f5      	b.n	109e8 <datetime_parse+0x174>
   109fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a00:	e7f2      	b.n	109e8 <datetime_parse+0x174>
   10a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a06:	e7ef      	b.n	109e8 <datetime_parse+0x174>
   10a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a0c:	e7ec      	b.n	109e8 <datetime_parse+0x174>
   10a0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a12:	e7e9      	b.n	109e8 <datetime_parse+0x174>
   10a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a18:	e7e6      	b.n	109e8 <datetime_parse+0x174>
   10a1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a1e:	e7e3      	b.n	109e8 <datetime_parse+0x174>
   10a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a24:	e7e0      	b.n	109e8 <datetime_parse+0x174>
   10a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a2a:	e7dd      	b.n	109e8 <datetime_parse+0x174>
   10a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a30:	e7da      	b.n	109e8 <datetime_parse+0x174>
   10a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a36:	e7d7      	b.n	109e8 <datetime_parse+0x174>
   10a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a3c:	e7d4      	b.n	109e8 <datetime_parse+0x174>
   10a3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a42:	e7d1      	b.n	109e8 <datetime_parse+0x174>
   10a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a48:	e7ce      	b.n	109e8 <datetime_parse+0x174>
   10a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a4e:	e7cb      	b.n	109e8 <datetime_parse+0x174>
   10a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a54:	e7c8      	b.n	109e8 <datetime_parse+0x174>
   10a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a5a:	e7c5      	b.n	109e8 <datetime_parse+0x174>
   10a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a60:	e7c2      	b.n	109e8 <datetime_parse+0x174>
   10a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a66:	e7bf      	b.n	109e8 <datetime_parse+0x174>
   10a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a6c:	e7bc      	b.n	109e8 <datetime_parse+0x174>
   10a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a72:	e7b9      	b.n	109e8 <datetime_parse+0x174>

00010a74 <datetime_format>:

int
datetime_format(const struct os_timeval *tv, const struct os_timezone *tz,
    char *ostr, int olen)
{
   10a74:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a76:	b08f      	sub	sp, #60	; 0x3c
   10a78:	460e      	mov	r6, r1
   10a7a:	4617      	mov	r7, r2
   10a7c:	461c      	mov	r4, r3
    char *cp;
    int rc, rlen, minswest;
    int off_hour, off_min, sign;
    struct clocktime ct;

    rc = timeval_to_clocktime(tv, tz, &ct);
   10a7e:	aa06      	add	r2, sp, #24
   10a80:	f7ff fe58 	bl	10734 <timeval_to_clocktime>
    if (rc != 0) {
   10a84:	2800      	cmp	r0, #0
   10a86:	d147      	bne.n	10b18 <datetime_format+0xa4>
   10a88:	4605      	mov	r5, r0
    }

    cp = ostr;
    rlen = olen;

    rc = snprintf(cp, rlen, "%04d-%02d-%02dT%02d:%02d:%02d.%06d",
   10a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10a8c:	9305      	str	r3, [sp, #20]
   10a8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10a90:	9304      	str	r3, [sp, #16]
   10a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10a94:	9303      	str	r3, [sp, #12]
   10a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10a98:	9302      	str	r3, [sp, #8]
   10a9a:	9b08      	ldr	r3, [sp, #32]
   10a9c:	9301      	str	r3, [sp, #4]
   10a9e:	9b07      	ldr	r3, [sp, #28]
   10aa0:	9300      	str	r3, [sp, #0]
   10aa2:	9b06      	ldr	r3, [sp, #24]
   10aa4:	4a24      	ldr	r2, [pc, #144]	; (10b38 <datetime_format+0xc4>)
   10aa6:	4621      	mov	r1, r4
   10aa8:	4638      	mov	r0, r7
   10aaa:	f7fb ff32 	bl	c912 <snprintf>
   10aae:	4684      	mov	ip, r0
        ct.year, ct.mon, ct.day, ct.hour, ct.min, ct.sec, ct.usec);
    cp += rc;
   10ab0:	1838      	adds	r0, r7, r0
    rlen -= rc;
   10ab2:	eba4 040c 	sub.w	r4, r4, ip
    if (rc < 0 || rlen <= 0) {
   10ab6:	f1bc 0f00 	cmp.w	ip, #0
   10aba:	db30      	blt.n	10b1e <datetime_format+0xaa>
   10abc:	2c00      	cmp	r4, #0
   10abe:	dd31      	ble.n	10b24 <datetime_format+0xb0>
        goto err;
    }

    if (tz != NULL) {
   10ac0:	b15e      	cbz	r6, 10ada <datetime_format+0x66>
        minswest = tz->tz_minuteswest;
   10ac2:	f9b6 c000 	ldrsh.w	ip, [r6]
        if (tz->tz_dsttime) {
   10ac6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
   10aca:	b10b      	cbz	r3, 10ad0 <datetime_format+0x5c>
            minswest -= 60;
   10acc:	f1ac 0c3c 	sub.w	ip, ip, #60	; 0x3c
        }
    } else {
        minswest = 0;
    }

    if (minswest <= 0) {
   10ad0:	f1bc 0f00 	cmp.w	ip, #0
   10ad4:	dd02      	ble.n	10adc <datetime_format+0x68>
        sign = '+';
        minswest = -minswest;
    } else {
        sign = '-';
   10ad6:	232d      	movs	r3, #45	; 0x2d
   10ad8:	e003      	b.n	10ae2 <datetime_format+0x6e>
        minswest = 0;
   10ada:	46ac      	mov	ip, r5
        minswest = -minswest;
   10adc:	f1cc 0c00 	rsb	ip, ip, #0
        sign = '+';
   10ae0:	232b      	movs	r3, #43	; 0x2b
    }

    off_hour = minswest / 60;
   10ae2:	4a16      	ldr	r2, [pc, #88]	; (10b3c <datetime_format+0xc8>)
   10ae4:	fb82 120c 	smull	r1, r2, r2, ip
   10ae8:	eb02 010c 	add.w	r1, r2, ip
   10aec:	ea4f 72ec 	mov.w	r2, ip, asr #31
   10af0:	ebc2 1261 	rsb	r2, r2, r1, asr #5
    off_min = minswest % 60;
   10af4:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
   10af8:	ebac 0181 	sub.w	r1, ip, r1, lsl #2

    rc = snprintf(cp, rlen, "%c%02d:%02d", sign, off_hour, off_min);
   10afc:	9101      	str	r1, [sp, #4]
   10afe:	9200      	str	r2, [sp, #0]
   10b00:	4a0f      	ldr	r2, [pc, #60]	; (10b40 <datetime_format+0xcc>)
   10b02:	4621      	mov	r1, r4
   10b04:	f7fb ff05 	bl	c912 <snprintf>
    cp += rc;
    rlen -= rc;
   10b08:	1a24      	subs	r4, r4, r0
    if (rc < 0 || rlen <= 0) {
   10b0a:	2800      	cmp	r0, #0
   10b0c:	db0d      	blt.n	10b2a <datetime_format+0xb6>
   10b0e:	2c00      	cmp	r4, #0
   10b10:	dd0e      	ble.n	10b30 <datetime_format+0xbc>

    return (0);

err:
    return (-1);
}
   10b12:	4628      	mov	r0, r5
   10b14:	b00f      	add	sp, #60	; 0x3c
   10b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (-1);
   10b18:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10b1c:	e7f9      	b.n	10b12 <datetime_format+0x9e>
   10b1e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10b22:	e7f6      	b.n	10b12 <datetime_format+0x9e>
   10b24:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10b28:	e7f3      	b.n	10b12 <datetime_format+0x9e>
   10b2a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10b2e:	e7f0      	b.n	10b12 <datetime_format+0x9e>
   10b30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10b34:	e7ed      	b.n	10b12 <datetime_format+0x9e>
   10b36:	bf00      	nop
   10b38:	0002253c 	.word	0x0002253c
   10b3c:	88888889 	.word	0x88888889
   10b40:	00022560 	.word	0x00022560

00010b44 <crc16_ccitt>:
    int counter;

    crc = initial_crc;
    ptr = buf;

    for (counter = 0; counter < len; counter++) {
   10b44:	f04f 0c00 	mov.w	ip, #0
   10b48:	4594      	cmp	ip, r2
   10b4a:	da11      	bge.n	10b70 <crc16_ccitt+0x2c>
{
   10b4c:	b410      	push	{r4}
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *ptr++)&0x00FF];
   10b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
   10b52:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
   10b56:	4c07      	ldr	r4, [pc, #28]	; (10b74 <crc16_ccitt+0x30>)
   10b58:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
   10b5c:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
   10b60:	b280      	uxth	r0, r0
    for (counter = 0; counter < len; counter++) {
   10b62:	f10c 0c01 	add.w	ip, ip, #1
   10b66:	4594      	cmp	ip, r2
   10b68:	dbf1      	blt.n	10b4e <crc16_ccitt+0xa>
    }

    return crc;
}
   10b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
   10b6e:	4770      	bx	lr
   10b70:	4770      	bx	lr
   10b72:	bf00      	nop
   10b74:	0002259c 	.word	0x0002259c

00010b78 <streamer_vprintf>:
    return streamer->cfg->write_cb(streamer, src, len);
}

int
streamer_vprintf(struct streamer *streamer, const char *fmt, va_list ap)
{
   10b78:	b508      	push	{r3, lr}
    return streamer->cfg->vprintf_cb(streamer, fmt, ap);
   10b7a:	6803      	ldr	r3, [r0, #0]
   10b7c:	685b      	ldr	r3, [r3, #4]
   10b7e:	4798      	blx	r3
}
   10b80:	bd08      	pop	{r3, pc}

00010b82 <streamer_printf>:

int
streamer_printf(struct streamer *streamer, const char *fmt, ...)
{
   10b82:	b40e      	push	{r1, r2, r3}
   10b84:	b500      	push	{lr}
   10b86:	b082      	sub	sp, #8
   10b88:	aa03      	add	r2, sp, #12
   10b8a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list ap;
    int rc;

    va_start(ap, fmt);
   10b8e:	9201      	str	r2, [sp, #4]
    rc = streamer_vprintf(streamer, fmt, ap);
   10b90:	f7ff fff2 	bl	10b78 <streamer_vprintf>
    va_end(ap);

    return rc;
}
   10b94:	b002      	add	sp, #8
   10b96:	f85d eb04 	ldr.w	lr, [sp], #4
   10b9a:	b003      	add	sp, #12
   10b9c:	4770      	bx	lr

00010b9e <streamer_console_vprintf>:
}

static int
streamer_console_vprintf(struct streamer *streamer,
                         const char *fmt, va_list ap)
{
   10b9e:	b508      	push	{r3, lr}
   10ba0:	4608      	mov	r0, r1
    return console_vprintf(fmt, ap);
   10ba2:	4611      	mov	r1, r2
   10ba4:	f7fd f9fa 	bl	df9c <console_vprintf>
}
   10ba8:	bd08      	pop	{r3, pc}

00010baa <streamer_console_write>:
{
   10baa:	b508      	push	{r3, lr}
   10bac:	4608      	mov	r0, r1
    console_write(src, len);
   10bae:	4611      	mov	r1, r2
   10bb0:	f7fc ff12 	bl	d9d8 <console_write>
}
   10bb4:	2000      	movs	r0, #0
   10bb6:	bd08      	pop	{r3, pc}

00010bb8 <streamer_console_get>:

struct streamer *
streamer_console_get(void)
{
    return &streamer_console;
}
   10bb8:	4800      	ldr	r0, [pc, #0]	; (10bbc <streamer_console_get+0x4>)
   10bba:	4770      	bx	lr
   10bbc:	20000310 	.word	0x20000310

00010bc0 <sysinit_app>:
void nmgr_shell_pkg_init(void);
void uwb_rng_pkg_init2(void);

void
sysinit_app(void)
{
   10bc0:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   10bc2:	f7f8 fb31 	bl	9228 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   10bc6:	f00b fe0b 	bl	1c7e0 <flash_map_init>

    /*** Stage 10 */
    /* 10.0: stats_module_init (sys/stats/full) */
    stats_module_init();
   10bca:	f7fe fdef 	bl	f7ac <stats_module_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
   10bce:	f7fd f9bd 	bl	df4c <console_pkg_init>

    /*** Stage 50 */
    /* 50.0: config_pkg_init (sys/config) */
    config_pkg_init();
   10bd2:	f00b fb21 	bl	1c218 <config_pkg_init>

    /*** Stage 100 */
    /* 100.0: log_init (sys/log/full) */
    log_init();
   10bd6:	f00b fee7 	bl	1c9a8 <log_init>
    /* 100.1: mfg_init (sys/mfg) */
    mfg_init();
   10bda:	f00c ff9f 	bl	1db1c <mfg_init>
    /* 100.2: modlog_init (sys/log/modlog) */
    modlog_init();
   10bde:	f00c fe49 	bl	1d874 <modlog_init>

    /*** Stage 200 */
    /* 200.0: log_reboot_pkg_init (sys/reboot) */
    log_reboot_pkg_init();
   10be2:	f00d f913 	bl	1de0c <log_reboot_pkg_init>

    /*** Stage 220 */
    /* 220.0: config_pkg_init_stage2 (sys/config) */
    config_pkg_init_stage2();
   10be6:	f00b fb27 	bl	1c238 <config_pkg_init_stage2>

    /*** Stage 401 */
    /* 401.0: dw1000_pkg_init (hw/drivers/uwb/uwb_dw1000) */
    dw1000_pkg_init();
   10bea:	f005 fa4f 	bl	1608c <dw1000_pkg_init>

    /*** Stage 402 */
    /* 402.0: cir_pkg_init (lib/cir) */
    cir_pkg_init();
   10bee:	f007 ff83 	bl	18af8 <cir_pkg_init>

    /*** Stage 404 */
    /* 404.0: uwb_rng_pkg_init (lib/uwb_rng) */
    uwb_rng_pkg_init();
   10bf2:	f7fa fd8b 	bl	b70c <uwb_rng_pkg_init>

    /*** Stage 405 */
    /* 405.0: cir_dw1000_pkg_init (lib/cir/cir_dw1000) */
    cir_dw1000_pkg_init();
   10bf6:	f007 ff21 	bl	18a3c <cir_dw1000_pkg_init>

    /*** Stage 406 */
    /* 406.0: twr_ss_ack_pkg_init (lib/twr_ss_ack) */
    twr_ss_ack_pkg_init();
   10bfa:	f009 fc8f 	bl	1a51c <twr_ss_ack_pkg_init>
    /* 406.1: twr_ss_ext_pkg_init (lib/twr_ss_ext) */
    twr_ss_ext_pkg_init();
   10bfe:	f009 fe27 	bl	1a850 <twr_ss_ext_pkg_init>
    /* 406.2: twr_ss_pkg_init (lib/twr_ss) */
    twr_ss_pkg_init();
   10c02:	f009 fa35 	bl	1a070 <twr_ss_pkg_init>

    /*** Stage 408 */
    /* 408.0: twr_ds_pkg_init (lib/twr_ds) */
    twr_ds_pkg_init();
   10c06:	f008 fdd7 	bl	197b8 <twr_ds_pkg_init>

    /*** Stage 410 */
    /* 410.0: twr_ds_ext_pkg_init (lib/twr_ds_ext) */
    twr_ds_ext_pkg_init();
   10c0a:	f009 f87b 	bl	19d04 <twr_ds_ext_pkg_init>

    /*** Stage 500 */
    /* 500.0: imgmgr_module_init (mgmt/imgmgr) */
    imgmgr_module_init();
   10c0e:	f00a fb49 	bl	1b2a4 <imgmgr_module_init>
    /* 500.1: nmgr_pkg_init (mgmt/newtmgr) */
    nmgr_pkg_init();
   10c12:	f00a ffd5 	bl	1bbc0 <nmgr_pkg_init>
    /* 500.2: shell_init (sys/shell) */
    shell_init();
   10c16:	f7fe f9f7 	bl	f008 <shell_init>
    /* 500.3: split_app_init (boot/split) */
    split_app_init();
   10c1a:	f000 f807 	bl	10c2c <split_app_init>
    /* 500.4: uwbcfg_pkg_init (sys/uwbcfg) */
    uwbcfg_pkg_init();
   10c1e:	f7ff f9d7 	bl	ffd0 <uwbcfg_pkg_init>

    /*** Stage 501 */
    /* 501.0: nmgr_shell_pkg_init (mgmt/newtmgr/transport/nmgr_shell) */
    nmgr_shell_pkg_init();
   10c22:	f00b fa6f 	bl	1c104 <nmgr_shell_pkg_init>

    /*** Stage 999 */
    /* 999.0: uwb_rng_pkg_init2 (lib/uwb_rng) */
    uwb_rng_pkg_init2();
   10c26:	f7fa fdcd 	bl	b7c4 <uwb_rng_pkg_init2>
}
   10c2a:	bd08      	pop	{r3, pc}

00010c2c <split_app_init>:
static int8_t split_mode_cur;
static int8_t split_app_active;

void
split_app_init(void)
{
   10c2c:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   10c2e:	4b09      	ldr	r3, [pc, #36]	; (10c54 <split_app_init+0x28>)
   10c30:	781b      	ldrb	r3, [r3, #0]
   10c32:	b11b      	cbz	r3, 10c3c <split_app_init+0x10>

    rc = split_conf_init();
   10c34:	f000 f89e 	bl	10d74 <split_conf_init>
    assert(rc == 0);
   10c38:	b928      	cbnz	r0, 10c46 <split_app_init+0x1a>
}
   10c3a:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   10c3c:	461a      	mov	r2, r3
   10c3e:	4619      	mov	r1, r3
   10c40:	4618      	mov	r0, r3
   10c42:	f7f8 f987 	bl	8f54 <__assert_func>
    assert(rc == 0);
   10c46:	2300      	movs	r3, #0
   10c48:	461a      	mov	r2, r3
   10c4a:	4619      	mov	r1, r3
   10c4c:	4618      	mov	r0, r3
   10c4e:	f7f8 f981 	bl	8f54 <__assert_func>
   10c52:	bf00      	nop
   10c54:	200065ac 	.word	0x200065ac

00010c58 <split_check_status>:

split_status_t
split_check_status(void)
{
   10c58:	b500      	push	{lr}
   10c5a:	b083      	sub	sp, #12
    void *entry;
    int rc;

    rc = split_go(LOADER_IMAGE_SLOT, SPLIT_IMAGE_SLOT, &entry);
   10c5c:	aa01      	add	r2, sp, #4
   10c5e:	2101      	movs	r1, #1
   10c60:	2000      	movs	r0, #0
   10c62:	f00d fc1d 	bl	1e4a0 <split_go>
    switch (rc) {
   10c66:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   10c6a:	d009      	beq.n	10c80 <split_check_status+0x28>
   10c6c:	b150      	cbz	r0, 10c84 <split_check_status+0x2c>
   10c6e:	f110 0f02 	cmn.w	r0, #2
   10c72:	d00b      	beq.n	10c8c <split_check_status+0x34>

    case SPLIT_GO_OK:
        return SPLIT_STATUS_MATCHING;

    default:
        assert(0);
   10c74:	2300      	movs	r3, #0
   10c76:	461a      	mov	r2, r3
   10c78:	4619      	mov	r1, r3
   10c7a:	4618      	mov	r0, r3
   10c7c:	f7f8 f96a 	bl	8f54 <__assert_func>
        return SPLIT_STATUS_NOT_MATCHING;
   10c80:	2001      	movs	r0, #1
   10c82:	e000      	b.n	10c86 <split_check_status+0x2e>
        return SPLIT_STATUS_MATCHING;
   10c84:	2002      	movs	r0, #2
        return SPLIT_STATUS_INVALID;
    }
}
   10c86:	b003      	add	sp, #12
   10c88:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (rc) {
   10c8c:	2000      	movs	r0, #0
   10c8e:	e7fa      	b.n	10c86 <split_check_status+0x2e>

00010c90 <split_mode_get>:

split_mode_t
split_mode_get(void)
{
    return split_mode_cur;
}
   10c90:	4b01      	ldr	r3, [pc, #4]	; (10c98 <split_mode_get+0x8>)
   10c92:	7818      	ldrb	r0, [r3, #0]
   10c94:	4770      	bx	lr
   10c96:	bf00      	nop
   10c98:	200065cd 	.word	0x200065cd

00010c9c <split_app_active_get>:

int
split_app_active_get(void)
{
    return split_app_active;
}
   10c9c:	4b01      	ldr	r3, [pc, #4]	; (10ca4 <split_app_active_get+0x8>)
   10c9e:	f993 0000 	ldrsb.w	r0, [r3]
   10ca2:	4770      	bx	lr
   10ca4:	200065cc 	.word	0x200065cc

00010ca8 <split_mode_set>:
    /* XXX: For now, cast this as an integer.  This value should either be
     * treated as an enumeration generally (i.e. not read directly and assigned
     * from values in flash), or switched to a native type of integer.  However,
     * this is not a high priority change, so just cast it for now.
     */
    if ((int) split_mode < 0 || (int) split_mode >= SPLIT_MODE_CNT) {
   10ca8:	2803      	cmp	r0, #3
   10caa:	d803      	bhi.n	10cb4 <split_mode_set+0xc>
        return SYS_EINVAL;
    }

    split_mode_cur = split_mode;
   10cac:	4b03      	ldr	r3, [pc, #12]	; (10cbc <split_mode_set+0x14>)
   10cae:	7018      	strb	r0, [r3, #0]
    return 0;
   10cb0:	2000      	movs	r0, #0
   10cb2:	4770      	bx	lr
        return SYS_EINVAL;
   10cb4:	f06f 0001 	mvn.w	r0, #1
}
   10cb8:	4770      	bx	lr
   10cba:	bf00      	nop
   10cbc:	200065cd 	.word	0x200065cd

00010cc0 <split_conf_commit>:

static int
split_conf_commit(void)
{
    return 0;
}
   10cc0:	2000      	movs	r0, #0
   10cc2:	4770      	bx	lr

00010cc4 <split_conf_export>:

static int
split_conf_export(void (*func)(char *name, char *val), enum conf_export_tgt tgt)
{
   10cc4:	b510      	push	{r4, lr}
   10cc6:	b082      	sub	sp, #8
   10cc8:	4604      	mov	r4, r0
    split_mode_t split_mode;
    char buf[4];

    split_mode = split_mode_get();
   10cca:	f7ff ffe1 	bl	10c90 <split_mode_get>
   10cce:	f88d 0007 	strb.w	r0, [sp, #7]
    conf_str_from_value(CONF_INT8, &split_mode, buf, sizeof(buf));
   10cd2:	2304      	movs	r3, #4
   10cd4:	466a      	mov	r2, sp
   10cd6:	f10d 0107 	add.w	r1, sp, #7
   10cda:	2002      	movs	r0, #2
   10cdc:	f7fc fa58 	bl	d190 <conf_str_from_value>
    func("split/status", buf);
   10ce0:	4669      	mov	r1, sp
   10ce2:	4802      	ldr	r0, [pc, #8]	; (10cec <split_conf_export+0x28>)
   10ce4:	47a0      	blx	r4
    return 0;
}
   10ce6:	2000      	movs	r0, #0
   10ce8:	b002      	add	sp, #8
   10cea:	bd10      	pop	{r4, pc}
   10cec:	000227d0 	.word	0x000227d0

00010cf0 <split_conf_get>:
    if (argc == 1) {
   10cf0:	2801      	cmp	r0, #1
   10cf2:	d119      	bne.n	10d28 <split_conf_get+0x38>
{
   10cf4:	b530      	push	{r4, r5, lr}
   10cf6:	b083      	sub	sp, #12
   10cf8:	468c      	mov	ip, r1
   10cfa:	4614      	mov	r4, r2
   10cfc:	461d      	mov	r5, r3
        if (!strcmp(argv[0], "status")) {
   10cfe:	490b      	ldr	r1, [pc, #44]	; (10d2c <split_conf_get+0x3c>)
   10d00:	f8dc 0000 	ldr.w	r0, [ip]
   10d04:	f7fb f9ee 	bl	c0e4 <strcmp>
   10d08:	b110      	cbz	r0, 10d10 <split_conf_get+0x20>
    return NULL;
   10d0a:	2000      	movs	r0, #0
}
   10d0c:	b003      	add	sp, #12
   10d0e:	bd30      	pop	{r4, r5, pc}
            split_mode = split_mode_get();
   10d10:	f7ff ffbe 	bl	10c90 <split_mode_get>
   10d14:	f88d 0007 	strb.w	r0, [sp, #7]
            return conf_str_from_value(CONF_INT8, &split_mode, buf, max_len);
   10d18:	462b      	mov	r3, r5
   10d1a:	4622      	mov	r2, r4
   10d1c:	f10d 0107 	add.w	r1, sp, #7
   10d20:	2002      	movs	r0, #2
   10d22:	f7fc fa35 	bl	d190 <conf_str_from_value>
   10d26:	e7f1      	b.n	10d0c <split_conf_get+0x1c>
    return NULL;
   10d28:	2000      	movs	r0, #0
}
   10d2a:	4770      	bx	lr
   10d2c:	000227e0 	.word	0x000227e0

00010d30 <split_conf_set>:
    if (argc == 1) {
   10d30:	2801      	cmp	r0, #1
   10d32:	d117      	bne.n	10d64 <split_conf_set+0x34>
{
   10d34:	b510      	push	{r4, lr}
   10d36:	b082      	sub	sp, #8
   10d38:	460b      	mov	r3, r1
   10d3a:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "status")) {
   10d3c:	490c      	ldr	r1, [pc, #48]	; (10d70 <split_conf_set+0x40>)
   10d3e:	6818      	ldr	r0, [r3, #0]
   10d40:	f7fb f9d0 	bl	c0e4 <strcmp>
   10d44:	b988      	cbnz	r0, 10d6a <split_conf_set+0x3a>
            rc = CONF_VALUE_SET(val, CONF_INT8, split_mode);
   10d46:	2301      	movs	r3, #1
   10d48:	f10d 0207 	add.w	r2, sp, #7
   10d4c:	2102      	movs	r1, #2
   10d4e:	4620      	mov	r0, r4
   10d50:	f7fc f9b9 	bl	d0c6 <conf_value_from_str>
            if (rc != 0) {
   10d54:	b108      	cbz	r0, 10d5a <split_conf_set+0x2a>
}
   10d56:	b002      	add	sp, #8
   10d58:	bd10      	pop	{r4, pc}
            rc = split_mode_set(split_mode);
   10d5a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   10d5e:	f7ff ffa3 	bl	10ca8 <split_mode_set>
            if (rc != 0) {
   10d62:	e7f8      	b.n	10d56 <split_conf_set+0x26>
    return -1;
   10d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   10d68:	4770      	bx	lr
    return -1;
   10d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10d6e:	e7f2      	b.n	10d56 <split_conf_set+0x26>
   10d70:	000227e0 	.word	0x000227e0

00010d74 <split_conf_init>:
{
   10d74:	b508      	push	{r3, lr}
    rc = conf_register(&split_conf_handler);
   10d76:	4802      	ldr	r0, [pc, #8]	; (10d80 <split_conf_init+0xc>)
   10d78:	f7fc f960 	bl	d03c <conf_register>
}
   10d7c:	bd08      	pop	{r3, pc}
   10d7e:	bf00      	nop
   10d80:	20000314 	.word	0x20000314

00010d84 <split_write_split>:

int
split_write_split(split_mode_t split_mode)
{
   10d84:	b500      	push	{lr}
   10d86:	b085      	sub	sp, #20
   10d88:	f88d 0007 	strb.w	r0, [sp, #7]
    char str[CONF_STR_FROM_BYTES_LEN(sizeof(split_mode_t))];
    int rc;

    rc = split_mode_set(split_mode);
   10d8c:	b2c0      	uxtb	r0, r0
   10d8e:	f7ff ff8b 	bl	10ca8 <split_mode_set>
    if (rc != 0) {
   10d92:	b110      	cbz	r0, 10d9a <split_write_split+0x16>

    if (!conf_str_from_value(CONF_INT8, &split_mode, str, sizeof(str))) {
        return -1;
    }
    return conf_save_one("split/status", str);
}
   10d94:	b005      	add	sp, #20
   10d96:	f85d fb04 	ldr.w	pc, [sp], #4
    if (!conf_str_from_value(CONF_INT8, &split_mode, str, sizeof(str))) {
   10d9a:	2305      	movs	r3, #5
   10d9c:	aa02      	add	r2, sp, #8
   10d9e:	f10d 0107 	add.w	r1, sp, #7
   10da2:	2002      	movs	r0, #2
   10da4:	f7fc f9f4 	bl	d190 <conf_str_from_value>
   10da8:	b120      	cbz	r0, 10db4 <split_write_split+0x30>
    return conf_save_one("split/status", str);
   10daa:	a902      	add	r1, sp, #8
   10dac:	4803      	ldr	r0, [pc, #12]	; (10dbc <split_write_split+0x38>)
   10dae:	f7fc f891 	bl	ced4 <conf_save_one>
   10db2:	e7ef      	b.n	10d94 <split_write_split+0x10>
        return -1;
   10db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10db8:	e7ec      	b.n	10d94 <split_write_split+0x10>
   10dba:	bf00      	nop
   10dbc:	000227d0 	.word	0x000227d0

00010dc0 <pos>:

static int
pos(char c)
{
    const char *p;
    for (p = base64_chars; *p; p++)
   10dc0:	4b06      	ldr	r3, [pc, #24]	; (10ddc <pos+0x1c>)
   10dc2:	e000      	b.n	10dc6 <pos+0x6>
   10dc4:	3301      	adds	r3, #1
   10dc6:	781a      	ldrb	r2, [r3, #0]
   10dc8:	b122      	cbz	r2, 10dd4 <pos+0x14>
        if (*p == c)
   10dca:	4282      	cmp	r2, r0
   10dcc:	d1fa      	bne.n	10dc4 <pos+0x4>
            return p - base64_chars;
   10dce:	4803      	ldr	r0, [pc, #12]	; (10ddc <pos+0x1c>)
   10dd0:	1a18      	subs	r0, r3, r0
   10dd2:	4770      	bx	lr
    return -1;
   10dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   10dd8:	4770      	bx	lr
   10dda:	bf00      	nop
   10ddc:	000227f0 	.word	0x000227f0

00010de0 <token_decode>:

#define DECODE_ERROR -1

static unsigned int
token_decode(const char *token)
{
   10de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10de2:	4607      	mov	r7, r0
    int i;
    unsigned int val = 0;
    int marker = 0;
    if (strlen(token) < 4)
   10de4:	f7fb f98a 	bl	c0fc <strlen>
   10de8:	2803      	cmp	r0, #3
   10dea:	d916      	bls.n	10e1a <token_decode+0x3a>
    int marker = 0;
   10dec:	2600      	movs	r6, #0
    unsigned int val = 0;
   10dee:	4635      	mov	r5, r6
        return DECODE_ERROR;
    for (i = 0; i < 4; i++) {
   10df0:	4634      	mov	r4, r6
   10df2:	e001      	b.n	10df8 <token_decode+0x18>
        val *= 64;
        if (token[i] == '=')
            marker++;
   10df4:	3601      	adds	r6, #1
    for (i = 0; i < 4; i++) {
   10df6:	3401      	adds	r4, #1
   10df8:	2c03      	cmp	r4, #3
   10dfa:	dc09      	bgt.n	10e10 <token_decode+0x30>
        val *= 64;
   10dfc:	01ad      	lsls	r5, r5, #6
        if (token[i] == '=')
   10dfe:	5d38      	ldrb	r0, [r7, r4]
   10e00:	283d      	cmp	r0, #61	; 0x3d
   10e02:	d0f7      	beq.n	10df4 <token_decode+0x14>
        else if (marker > 0)
   10e04:	2e00      	cmp	r6, #0
   10e06:	dc0b      	bgt.n	10e20 <token_decode+0x40>
            return DECODE_ERROR;
        else
            val += pos(token[i]);
   10e08:	f7ff ffda 	bl	10dc0 <pos>
   10e0c:	4405      	add	r5, r0
   10e0e:	e7f2      	b.n	10df6 <token_decode+0x16>
    }
    if (marker > 2)
   10e10:	2e02      	cmp	r6, #2
   10e12:	dc08      	bgt.n	10e26 <token_decode+0x46>
        return DECODE_ERROR;
    return (marker << 24) | val;
   10e14:	ea45 6006 	orr.w	r0, r5, r6, lsl #24
}
   10e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DECODE_ERROR;
   10e1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10e1e:	e7fb      	b.n	10e18 <token_decode+0x38>
            return DECODE_ERROR;
   10e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10e24:	e7f8      	b.n	10e18 <token_decode+0x38>
        return DECODE_ERROR;
   10e26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10e2a:	e7f5      	b.n	10e18 <token_decode+0x38>

00010e2c <base64_encode>:
{
   10e2c:	b570      	push	{r4, r5, r6, lr}
   10e2e:	4615      	mov	r5, r2
    p = s;
   10e30:	4614      	mov	r4, r2
    last = NULL;
   10e32:	2600      	movs	r6, #0
    i = 0;
   10e34:	4632      	mov	r2, r6
    while (i < size) {
   10e36:	e021      	b.n	10e7c <base64_encode+0x50>
        i++;
   10e38:	1c96      	adds	r6, r2, #2
        c *= 256;
   10e3a:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
        if (i < size)
   10e3e:	42b1      	cmp	r1, r6
   10e40:	dd01      	ble.n	10e46 <base64_encode+0x1a>
            c += q[i];
   10e42:	5d86      	ldrb	r6, [r0, r6]
   10e44:	44b4      	add	ip, r6
        i++;
   10e46:	3203      	adds	r2, #3
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   10e48:	f3cc 4e85 	ubfx	lr, ip, #18, #6
   10e4c:	4e1b      	ldr	r6, [pc, #108]	; (10ebc <base64_encode+0x90>)
   10e4e:	f816 e00e 	ldrb.w	lr, [r6, lr]
   10e52:	f884 e000 	strb.w	lr, [r4]
        p[1] = base64_chars[(c & 0x0003f000) >> 12];
   10e56:	f3cc 3e05 	ubfx	lr, ip, #12, #6
   10e5a:	f816 e00e 	ldrb.w	lr, [r6, lr]
   10e5e:	f884 e001 	strb.w	lr, [r4, #1]
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   10e62:	f3cc 1e85 	ubfx	lr, ip, #6, #6
   10e66:	f816 e00e 	ldrb.w	lr, [r6, lr]
   10e6a:	f884 e002 	strb.w	lr, [r4, #2]
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
   10e6e:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
   10e72:	f816 600c 	ldrb.w	r6, [r6, ip]
   10e76:	70e6      	strb	r6, [r4, #3]
        last = p;
   10e78:	4626      	mov	r6, r4
        p += 4;
   10e7a:	3404      	adds	r4, #4
    while (i < size) {
   10e7c:	428a      	cmp	r2, r1
   10e7e:	da09      	bge.n	10e94 <base64_encode+0x68>
        c = q[i++];
   10e80:	1c56      	adds	r6, r2, #1
   10e82:	f810 c002 	ldrb.w	ip, [r0, r2]
        c *= 256;
   10e86:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
        if (i < size)
   10e8a:	42b1      	cmp	r1, r6
   10e8c:	ddd4      	ble.n	10e38 <base64_encode+0xc>
            c += q[i];
   10e8e:	5d86      	ldrb	r6, [r0, r6]
   10e90:	44b4      	add	ip, r6
   10e92:	e7d1      	b.n	10e38 <base64_encode+0xc>
    if (last) {
   10e94:	b136      	cbz	r6, 10ea4 <base64_encode+0x78>
        diff = i - size;
   10e96:	1a52      	subs	r2, r2, r1
        if (diff > 0) {
   10e98:	2a00      	cmp	r2, #0
   10e9a:	dd03      	ble.n	10ea4 <base64_encode+0x78>
            if (should_pad) {
   10e9c:	b933      	cbnz	r3, 10eac <base64_encode+0x80>
                p = last + (4 - diff);
   10e9e:	f1c2 0304 	rsb	r3, r2, #4
   10ea2:	18f4      	adds	r4, r6, r3
    *p = 0;
   10ea4:	2300      	movs	r3, #0
   10ea6:	7023      	strb	r3, [r4, #0]
}
   10ea8:	1b60      	subs	r0, r4, r5
   10eaa:	bd70      	pop	{r4, r5, r6, pc}
                memset(last + (4 - diff), '=', diff);
   10eac:	f1c2 0004 	rsb	r0, r2, #4
   10eb0:	213d      	movs	r1, #61	; 0x3d
   10eb2:	4430      	add	r0, r6
   10eb4:	f7fb f8eb 	bl	c08e <memset>
   10eb8:	e7f4      	b.n	10ea4 <base64_encode+0x78>
   10eba:	bf00      	nop
   10ebc:	000227f0 	.word	0x000227f0

00010ec0 <base64_pad>:
{
   10ec0:	b510      	push	{r4, lr}
    remainder = len % 4;
   10ec2:	424b      	negs	r3, r1
   10ec4:	f001 0203 	and.w	r2, r1, #3
   10ec8:	f003 0303 	and.w	r3, r3, #3
   10ecc:	bf58      	it	pl
   10ece:	425a      	negpl	r2, r3
    if (remainder == 0) {
   10ed0:	f011 0f03 	tst.w	r1, #3
   10ed4:	d102      	bne.n	10edc <base64_pad+0x1c>
        return (0);
   10ed6:	2400      	movs	r4, #0
}
   10ed8:	4620      	mov	r0, r4
   10eda:	bd10      	pop	{r4, pc}
    memset(buf, '=', 4 - remainder);
   10edc:	f1c2 0404 	rsb	r4, r2, #4
   10ee0:	4622      	mov	r2, r4
   10ee2:	213d      	movs	r1, #61	; 0x3d
   10ee4:	f7fb f8d3 	bl	c08e <memset>
    return (4 - remainder);
   10ee8:	e7f6      	b.n	10ed8 <base64_pad+0x18>
	...

00010eec <base64_decode>:

int
base64_decode(const char *str, void *data)
{
   10eec:	b570      	push	{r4, r5, r6, lr}
   10eee:	4604      	mov	r4, r0
   10ef0:	460d      	mov	r5, r1
    const char *p;
    unsigned char *q;

    q = data;
   10ef2:	460e      	mov	r6, r1
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   10ef4:	e005      	b.n	10f02 <base64_decode+0x16>
        unsigned int marker = (val >> 24) & 0xff;
        if (val == DECODE_ERROR)
            return -1;
        *q++ = (val >> 16) & 0xff;
        if (marker < 2)
            *q++ = (val >> 8) & 0xff;
   10ef6:	0a02      	lsrs	r2, r0, #8
   10ef8:	1cb3      	adds	r3, r6, #2
   10efa:	7072      	strb	r2, [r6, #1]
   10efc:	e016      	b.n	10f2c <base64_decode+0x40>
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   10efe:	3404      	adds	r4, #4
   10f00:	461e      	mov	r6, r3
   10f02:	7821      	ldrb	r1, [r4, #0]
   10f04:	b1b9      	cbz	r1, 10f36 <base64_decode+0x4a>
   10f06:	293d      	cmp	r1, #61	; 0x3d
   10f08:	d003      	beq.n	10f12 <base64_decode+0x26>
   10f0a:	480d      	ldr	r0, [pc, #52]	; (10f40 <base64_decode+0x54>)
   10f0c:	f009 fd20 	bl	1a950 <strchr>
   10f10:	b188      	cbz	r0, 10f36 <base64_decode+0x4a>
        unsigned int val = token_decode(p);
   10f12:	4620      	mov	r0, r4
   10f14:	f7ff ff64 	bl	10de0 <token_decode>
        unsigned int marker = (val >> 24) & 0xff;
   10f18:	0e01      	lsrs	r1, r0, #24
        if (val == DECODE_ERROR)
   10f1a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   10f1e:	d00c      	beq.n	10f3a <base64_decode+0x4e>
        *q++ = (val >> 16) & 0xff;
   10f20:	0c02      	lsrs	r2, r0, #16
   10f22:	4633      	mov	r3, r6
   10f24:	f803 2b01 	strb.w	r2, [r3], #1
        if (marker < 2)
   10f28:	2901      	cmp	r1, #1
   10f2a:	d9e4      	bls.n	10ef6 <base64_decode+0xa>
        if (marker < 1)
   10f2c:	2900      	cmp	r1, #0
   10f2e:	d1e6      	bne.n	10efe <base64_decode+0x12>
            *q++ = val & 0xff;
   10f30:	f803 0b01 	strb.w	r0, [r3], #1
   10f34:	e7e3      	b.n	10efe <base64_decode+0x12>
    }
    return q - (unsigned char *) data;
   10f36:	1b70      	subs	r0, r6, r5
}
   10f38:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
   10f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10f3e:	e7fb      	b.n	10f38 <base64_decode+0x4c>
   10f40:	000227f0 	.word	0x000227f0

00010f44 <valid_attr_type>:
 * one-to-one because of signedness of integers
 * and therefore we need a function to do this trickery */
static int
valid_attr_type(CborType ct, CborAttrType at)
{
    switch (at) {
   10f44:	3901      	subs	r1, #1
   10f46:	290a      	cmp	r1, #10
   10f48:	d828      	bhi.n	10f9c <valid_attr_type+0x58>
   10f4a:	e8df f001 	tbb	[pc, r1]
   10f4e:	0606      	.short	0x0606
   10f50:	13110d09 	.word	0x13110d09
   10f54:	271f1b17 	.word	0x271f1b17
   10f58:	23          	.byte	0x23
   10f59:	00          	.byte	0x00
    case CborAttrIntegerType:
    case CborAttrUnsignedIntegerType:
        if (ct == CborIntegerType) {
   10f5a:	b308      	cbz	r0, 10fa0 <valid_attr_type+0x5c>
        }
        break;
    default:
        break;
    }
    return 0;
   10f5c:	2000      	movs	r0, #0
   10f5e:	4770      	bx	lr
        if (ct == CborByteStringType) {
   10f60:	2840      	cmp	r0, #64	; 0x40
   10f62:	d01f      	beq.n	10fa4 <valid_attr_type+0x60>
    return 0;
   10f64:	2000      	movs	r0, #0
   10f66:	4770      	bx	lr
        if (ct == CborTextStringType) {
   10f68:	2860      	cmp	r0, #96	; 0x60
   10f6a:	d01d      	beq.n	10fa8 <valid_attr_type+0x64>
    return 0;
   10f6c:	2000      	movs	r0, #0
   10f6e:	4770      	bx	lr
        if (ct == CborBooleanType) {
   10f70:	28f5      	cmp	r0, #245	; 0xf5
   10f72:	d01b      	beq.n	10fac <valid_attr_type+0x68>
        if (ct == CborFloatType) {
   10f74:	28fa      	cmp	r0, #250	; 0xfa
   10f76:	d01b      	beq.n	10fb0 <valid_attr_type+0x6c>
    return 0;
   10f78:	2000      	movs	r0, #0
   10f7a:	4770      	bx	lr
        if (ct == CborDoubleType) {
   10f7c:	28fb      	cmp	r0, #251	; 0xfb
   10f7e:	d019      	beq.n	10fb4 <valid_attr_type+0x70>
    return 0;
   10f80:	2000      	movs	r0, #0
   10f82:	4770      	bx	lr
        if (ct == CborArrayType) {
   10f84:	2880      	cmp	r0, #128	; 0x80
   10f86:	d017      	beq.n	10fb8 <valid_attr_type+0x74>
    return 0;
   10f88:	2000      	movs	r0, #0
   10f8a:	4770      	bx	lr
        if (ct == CborMapType) {
   10f8c:	28a0      	cmp	r0, #160	; 0xa0
   10f8e:	d015      	beq.n	10fbc <valid_attr_type+0x78>
    return 0;
   10f90:	2000      	movs	r0, #0
   10f92:	4770      	bx	lr
        if (ct == CborNullType) {
   10f94:	28f6      	cmp	r0, #246	; 0xf6
   10f96:	d013      	beq.n	10fc0 <valid_attr_type+0x7c>
    return 0;
   10f98:	2000      	movs	r0, #0
   10f9a:	4770      	bx	lr
    switch (at) {
   10f9c:	2000      	movs	r0, #0
   10f9e:	4770      	bx	lr
            return 1;
   10fa0:	2001      	movs	r0, #1
   10fa2:	4770      	bx	lr
            return 1;
   10fa4:	2001      	movs	r0, #1
   10fa6:	4770      	bx	lr
            return 1;
   10fa8:	2001      	movs	r0, #1
   10faa:	4770      	bx	lr
            return 1;
   10fac:	2001      	movs	r0, #1
   10fae:	4770      	bx	lr
            return 1;
   10fb0:	2001      	movs	r0, #1
   10fb2:	4770      	bx	lr
            return 1;
   10fb4:	2001      	movs	r0, #1
   10fb6:	4770      	bx	lr
            return 1;
   10fb8:	2001      	movs	r0, #1
   10fba:	4770      	bx	lr
            return 1;
   10fbc:	2001      	movs	r0, #1
   10fbe:	4770      	bx	lr
            return 1;
   10fc0:	2001      	movs	r0, #1
}
   10fc2:	4770      	bx	lr

00010fc4 <cbor_target_address>:
cbor_target_address(const struct cbor_attr_t *cursor,
                    const struct cbor_array_t *parent, int offset)
{
    char *targetaddr = NULL;

    if (parent == NULL || parent->element_type != CborAttrStructObjectType) {
   10fc4:	460b      	mov	r3, r1
   10fc6:	b111      	cbz	r1, 10fce <cbor_target_address+0xa>
   10fc8:	7809      	ldrb	r1, [r1, #0]
   10fca:	290a      	cmp	r1, #10
   10fcc:	d020      	beq.n	11010 <cbor_target_address+0x4c>
        /* ordinary case - use the address in the cursor structure */
        switch (cursor->type) {
   10fce:	7903      	ldrb	r3, [r0, #4]
   10fd0:	3b01      	subs	r3, #1
   10fd2:	2b06      	cmp	r3, #6
   10fd4:	d823      	bhi.n	1101e <cbor_target_address+0x5a>
   10fd6:	e8df f003 	tbb	[pc, r3]
   10fda:	0804      	.short	0x0804
   10fdc:	0c181614 	.word	0x0c181614
   10fe0:	10          	.byte	0x10
   10fe1:	00          	.byte	0x00
        case CborAttrNullType:
            targetaddr = NULL;
            break;
        case CborAttrIntegerType:
            targetaddr = (char *)&cursor->addr.integer[offset];
   10fe2:	6880      	ldr	r0, [r0, #8]
   10fe4:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   10fe8:	4770      	bx	lr
        case CborAttrUnsignedIntegerType:
            targetaddr = (char *)&cursor->addr.uinteger[offset];
   10fea:	6880      	ldr	r0, [r0, #8]
   10fec:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   10ff0:	4770      	bx	lr
#if FLOAT_SUPPORT
        case CborAttrFloatType:
            targetaddr = (char *)&cursor->addr.fval[offset];
   10ff2:	6880      	ldr	r0, [r0, #8]
   10ff4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
            break;
   10ff8:	4770      	bx	lr
        case CborAttrDoubleType:
            targetaddr = (char *)&cursor->addr.real[offset];
   10ffa:	6880      	ldr	r0, [r0, #8]
   10ffc:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   11000:	4770      	bx	lr
#endif
        case CborAttrByteStringType:
            targetaddr = (char *) cursor->addr.bytestring.data;
   11002:	6880      	ldr	r0, [r0, #8]
            break;
   11004:	4770      	bx	lr
        case CborAttrTextStringType:
            targetaddr = cursor->addr.string;
   11006:	6880      	ldr	r0, [r0, #8]
            break;
   11008:	4770      	bx	lr
        case CborAttrBooleanType:
            targetaddr = (char *)&cursor->addr.boolean[offset];
   1100a:	6880      	ldr	r0, [r0, #8]
   1100c:	4410      	add	r0, r2
            break;
   1100e:	4770      	bx	lr
            break;
        }
    } else {
        /* tricky case - hacking a member in an array of structures */
        targetaddr =
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   11010:	6899      	ldr	r1, [r3, #8]
   11012:	68db      	ldr	r3, [r3, #12]
            cursor->addr.offset;
   11014:	6880      	ldr	r0, [r0, #8]
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   11016:	fb03 0002 	mla	r0, r3, r2, r0
        targetaddr =
   1101a:	4408      	add	r0, r1
   1101c:	4770      	bx	lr
        switch (cursor->type) {
   1101e:	2000      	movs	r0, #0
    }
    return targetaddr;
}
   11020:	4770      	bx	lr
	...

00011024 <cbor_read_array>:
    return err;
}

int
cbor_read_array(struct CborValue *value, const struct cbor_array_t *arr)
{
   11024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11028:	b08b      	sub	sp, #44	; 0x2c
   1102a:	9001      	str	r0, [sp, #4]
   1102c:	460c      	mov	r4, r1
    int off, arrcount;
    size_t len;
    void *lptr;
    char *tp;

    err = cbor_value_enter_container(value, &elem);
   1102e:	a906      	add	r1, sp, #24
   11030:	f000 ff59 	bl	11ee6 <cbor_value_enter_container>
    if (err) {
   11034:	4605      	mov	r5, r0
   11036:	2800      	cmp	r0, #0
   11038:	f040 80fd 	bne.w	11236 <cbor_read_array+0x212>
        return err;
    }
    arrcount = 0;
    tp = arr->arr.strings.store;
   1103c:	f8d4 8008 	ldr.w	r8, [r4, #8]
    arrcount = 0;
   11040:	2700      	movs	r7, #0
    for (off = 0; off < arr->maxlen; off++) {
   11042:	463e      	mov	r6, r7
   11044:	e0be      	b.n	111c4 <cbor_read_array+0x1a0>
        switch (arr->element_type) {
        case CborAttrBooleanType:
            lptr = &arr->arr.booleans.store[off];
   11046:	6862      	ldr	r2, [r4, #4]
CBOR_INLINE_API bool cbor_value_is_undefined(const CborValue *value)
{ return value->type == CborUndefinedType; }

/* Booleans */
CBOR_INLINE_API bool cbor_value_is_boolean(const CborValue *value)
{ return value->type == CborBooleanType; }
   11048:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
CBOR_INLINE_API CborError cbor_value_get_boolean(const CborValue *value, bool *result)
{
    assert(cbor_value_is_boolean(value));
   1104c:	2bf5      	cmp	r3, #245	; 0xf5
   1104e:	d106      	bne.n	1105e <cbor_read_array+0x3a>
    *result = !!value->extra;
   11050:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   11054:	3b00      	subs	r3, #0
   11056:	bf18      	it	ne
   11058:	2301      	movne	r3, #1
   1105a:	5593      	strb	r3, [r2, r6]
            err |= cbor_value_get_boolean(&elem, lptr);
            break;
   1105c:	e0a7      	b.n	111ae <cbor_read_array+0x18a>
    assert(cbor_value_is_boolean(value));
   1105e:	2300      	movs	r3, #0
   11060:	461a      	mov	r2, r3
   11062:	4619      	mov	r1, r3
   11064:	4618      	mov	r0, r3
   11066:	f7f7 ff75 	bl	8f54 <__assert_func>
        case CborAttrIntegerType:
            lptr = &arr->arr.integers.store[off];
   1106a:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1106e:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   11072:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    return CborNoError;
}

/* Integers */
CBOR_INLINE_API bool cbor_value_is_integer(const CborValue *value)
{ return value->type == CborIntegerType; }
   11076:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    return CborNoError;
}

CBOR_INLINE_API CborError cbor_value_get_int64(const CborValue *value, int64_t *result)
{
    assert(cbor_value_is_integer(value));
   1107a:	b9c3      	cbnz	r3, 110ae <cbor_read_array+0x8a>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   1107c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
                _cbor_value_decode_int64_internal(value) : value->extra;
   11080:	f013 0f01 	tst.w	r3, #1
   11084:	d119      	bne.n	110ba <cbor_read_array+0x96>
   11086:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   1108a:	2100      	movs	r1, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   1108c:	f849 000b 	str.w	r0, [r9, fp]
   11090:	f8ca 1004 	str.w	r1, [sl, #4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   11094:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   11098:	f013 0f02 	tst.w	r3, #2
   1109c:	f000 8087 	beq.w	111ae <cbor_read_array+0x18a>
        *result = -*result - 1;
   110a0:	43c0      	mvns	r0, r0
   110a2:	43c9      	mvns	r1, r1
   110a4:	f849 000b 	str.w	r0, [r9, fp]
   110a8:	f8ca 1004 	str.w	r1, [sl, #4]
            err |= cbor_value_get_int64(&elem, lptr);
            break;
   110ac:	e07f      	b.n	111ae <cbor_read_array+0x18a>
    assert(cbor_value_is_integer(value));
   110ae:	2300      	movs	r3, #0
   110b0:	461a      	mov	r2, r3
   110b2:	4619      	mov	r1, r3
   110b4:	4618      	mov	r0, r3
   110b6:	f7f7 ff4d 	bl	8f54 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   110ba:	a806      	add	r0, sp, #24
   110bc:	f000 fec5 	bl	11e4a <_cbor_value_decode_int64_internal>
   110c0:	e7e4      	b.n	1108c <cbor_read_array+0x68>
        case CborAttrUnsignedIntegerType:
            lptr = &arr->arr.uintegers.store[off];
   110c2:	f8d4 9004 	ldr.w	r9, [r4, #4]
   110c6:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   110ca:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
{ return value->type == CborIntegerType; }
   110ce:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   110d2:	b933      	cbnz	r3, 110e2 <cbor_read_array+0xbe>
   110d4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   110d8:	f013 0f02 	tst.w	r3, #2
   110dc:	d010      	beq.n	11100 <cbor_read_array+0xdc>
   110de:	2300      	movs	r3, #0
   110e0:	e000      	b.n	110e4 <cbor_read_array+0xc0>
   110e2:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   110e4:	b173      	cbz	r3, 11104 <cbor_read_array+0xe0>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   110e6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
                _cbor_value_decode_int64_internal(value) : value->extra;
   110ea:	f013 0f01 	tst.w	r3, #1
   110ee:	d10e      	bne.n	1110e <cbor_read_array+0xea>
   110f0:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   110f4:	2100      	movs	r1, #0
    *result = _cbor_value_extract_int64_helper(value);
   110f6:	f849 000b 	str.w	r0, [r9, fp]
   110fa:	f8ca 1004 	str.w	r1, [sl, #4]
            err |= cbor_value_get_uint64(&elem, lptr);
            break;
   110fe:	e056      	b.n	111ae <cbor_read_array+0x18a>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   11100:	2301      	movs	r3, #1
   11102:	e7ef      	b.n	110e4 <cbor_read_array+0xc0>
    assert(cbor_value_is_unsigned_integer(value));
   11104:	461a      	mov	r2, r3
   11106:	4619      	mov	r1, r3
   11108:	4618      	mov	r0, r3
   1110a:	f7f7 ff23 	bl	8f54 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   1110e:	a806      	add	r0, sp, #24
   11110:	f000 fe9b 	bl	11e4a <_cbor_value_decode_int64_internal>
   11114:	e7ef      	b.n	110f6 <cbor_read_array+0xd2>
#if FLOAT_SUPPORT
        case CborAttrFloatType:
        case CborAttrDoubleType:
            lptr = &arr->arr.reals.store[off];
   11116:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1111a:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   1111e:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    memcpy(result, &data, sizeof(*result));
    return CborNoError;
}

CBOR_INLINE_API bool cbor_value_is_double(const CborValue *value)
{ return value->type == CborDoubleType; }
   11122:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
CBOR_INLINE_API CborError cbor_value_get_double(const CborValue *value, double *result)
{
    assert(cbor_value_is_double(value));
   11126:	2bfb      	cmp	r3, #251	; 0xfb
   11128:	d110      	bne.n	1114c <cbor_read_array+0x128>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   1112a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1112e:	f013 0f01 	tst.w	r3, #1
   11132:	d011      	beq.n	11158 <cbor_read_array+0x134>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   11134:	a806      	add	r0, sp, #24
   11136:	f000 fe88 	bl	11e4a <_cbor_value_decode_int64_internal>
   1113a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   1113e:	ab02      	add	r3, sp, #8
   11140:	cb03      	ldmia	r3!, {r0, r1}
   11142:	f849 000b 	str.w	r0, [r9, fp]
   11146:	f8ca 1004 	str.w	r1, [sl, #4]
            err |= cbor_value_get_double(&elem, lptr);
            break;
   1114a:	e030      	b.n	111ae <cbor_read_array+0x18a>
    assert(cbor_value_is_double(value));
   1114c:	2300      	movs	r3, #0
   1114e:	461a      	mov	r2, r3
   11150:	4619      	mov	r1, r3
   11152:	4618      	mov	r0, r3
   11154:	f7f7 fefe 	bl	8f54 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   11158:	2300      	movs	r3, #0
   1115a:	461a      	mov	r2, r3
   1115c:	4619      	mov	r1, r3
   1115e:	4618      	mov	r0, r3
   11160:	f7f7 fef8 	bl	8f54 <__assert_func>
#endif
        case CborAttrTextStringType:
            len = arr->arr.strings.storelen - (tp - arr->arr.strings.store);
   11164:	68e3      	ldr	r3, [r4, #12]
   11166:	68a2      	ldr	r2, [r4, #8]
   11168:	eba8 0202 	sub.w	r2, r8, r2
   1116c:	1a9b      	subs	r3, r3, r2
   1116e:	9305      	str	r3, [sp, #20]
{ return value->type == CborTextStringType; }
   11170:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    assert(cbor_value_is_text_string(value));
   11174:	2b60      	cmp	r3, #96	; 0x60
   11176:	d10d      	bne.n	11194 <cbor_read_array+0x170>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   11178:	2300      	movs	r3, #0
   1117a:	aa05      	add	r2, sp, #20
   1117c:	4641      	mov	r1, r8
   1117e:	a806      	add	r0, sp, #24
   11180:	f000 ff66 	bl	12050 <_cbor_value_copy_string>
            err |= cbor_value_copy_text_string(&elem, tp, &len, NULL);
   11184:	4305      	orrs	r5, r0
            arr->arr.strings.ptrs[off] = tp;
   11186:	6863      	ldr	r3, [r4, #4]
   11188:	f843 8026 	str.w	r8, [r3, r6, lsl #2]
            tp += len + 1;
   1118c:	9b05      	ldr	r3, [sp, #20]
   1118e:	3301      	adds	r3, #1
   11190:	4498      	add	r8, r3
            break;
   11192:	e00c      	b.n	111ae <cbor_read_array+0x18a>
    assert(cbor_value_is_text_string(value));
   11194:	2300      	movs	r3, #0
   11196:	461a      	mov	r2, r3
   11198:	4619      	mov	r1, r3
   1119a:	4618      	mov	r0, r3
   1119c:	f7f7 feda 	bl	8f54 <__assert_func>
        case CborAttrStructObjectType:
            err |= cbor_internal_read_object(&elem, arr->arr.objects.subtype,
   111a0:	4633      	mov	r3, r6
   111a2:	4622      	mov	r2, r4
   111a4:	6861      	ldr	r1, [r4, #4]
   111a6:	a806      	add	r0, sp, #24
   111a8:	f000 f848 	bl	1123c <cbor_internal_read_object>
   111ac:	4305      	orrs	r5, r0
            break;
        default:
            err |= CborErrorIllegalType;
            break;
        }
        arrcount++;
   111ae:	3701      	adds	r7, #1
        if (arr->element_type != CborAttrStructObjectType) {
   111b0:	7823      	ldrb	r3, [r4, #0]
   111b2:	2b0a      	cmp	r3, #10
   111b4:	d127      	bne.n	11206 <cbor_read_array+0x1e2>
{ return value && value->type != CborInvalidType; }
   111b6:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   111ba:	2bff      	cmp	r3, #255	; 0xff
   111bc:	d028      	beq.n	11210 <cbor_read_array+0x1ec>
   111be:	2301      	movs	r3, #1
            err |= cbor_value_advance(&elem);
        }
        if (!cbor_value_is_valid(&elem)) {
   111c0:	b343      	cbz	r3, 11214 <cbor_read_array+0x1f0>
    for (off = 0; off < arr->maxlen; off++) {
   111c2:	3601      	adds	r6, #1
   111c4:	6963      	ldr	r3, [r4, #20]
   111c6:	42b3      	cmp	r3, r6
   111c8:	dd24      	ble.n	11214 <cbor_read_array+0x1f0>
        switch (arr->element_type) {
   111ca:	7823      	ldrb	r3, [r4, #0]
   111cc:	3b01      	subs	r3, #1
   111ce:	2b09      	cmp	r3, #9
   111d0:	d816      	bhi.n	11200 <cbor_read_array+0x1dc>
   111d2:	a201      	add	r2, pc, #4	; (adr r2, 111d8 <cbor_read_array+0x1b4>)
   111d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   111d8:	0001106b 	.word	0x0001106b
   111dc:	000110c3 	.word	0x000110c3
   111e0:	00011201 	.word	0x00011201
   111e4:	00011165 	.word	0x00011165
   111e8:	00011047 	.word	0x00011047
   111ec:	00011117 	.word	0x00011117
   111f0:	00011117 	.word	0x00011117
   111f4:	00011201 	.word	0x00011201
   111f8:	00011201 	.word	0x00011201
   111fc:	000111a1 	.word	0x000111a1
            err |= CborErrorIllegalType;
   11200:	f445 7582 	orr.w	r5, r5, #260	; 0x104
            break;
   11204:	e7d3      	b.n	111ae <cbor_read_array+0x18a>
            err |= cbor_value_advance(&elem);
   11206:	a806      	add	r0, sp, #24
   11208:	f000 ff7f 	bl	1210a <cbor_value_advance>
   1120c:	4305      	orrs	r5, r0
   1120e:	e7d2      	b.n	111b6 <cbor_read_array+0x192>
   11210:	2300      	movs	r3, #0
   11212:	e7d5      	b.n	111c0 <cbor_read_array+0x19c>
            break;
        }
    }
    if (arr->count) {
   11214:	6923      	ldr	r3, [r4, #16]
   11216:	b133      	cbz	r3, 11226 <cbor_read_array+0x202>
        *arr->count = arrcount;
   11218:	601f      	str	r7, [r3, #0]
   1121a:	e004      	b.n	11226 <cbor_read_array+0x202>
    }
    while (!cbor_value_at_end(&elem)) {
        err |= CborErrorDataTooLarge;
   1121c:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        cbor_value_advance(&elem);
   11220:	a806      	add	r0, sp, #24
   11222:	f000 ff72 	bl	1210a <cbor_value_advance>
{ return it->remaining == 0; }
   11226:	9b08      	ldr	r3, [sp, #32]
    while (!cbor_value_at_end(&elem)) {
   11228:	2b00      	cmp	r3, #0
   1122a:	d1f7      	bne.n	1121c <cbor_read_array+0x1f8>
    }
    err |= cbor_value_leave_container(value, &elem);
   1122c:	a906      	add	r1, sp, #24
   1122e:	9801      	ldr	r0, [sp, #4]
   11230:	f000 feee 	bl	12010 <cbor_value_leave_container>
   11234:	4328      	orrs	r0, r5
    return err;
}
   11236:	b00b      	add	sp, #44	; 0x2c
   11238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001123c <cbor_internal_read_object>:
{
   1123c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11240:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
   11244:	9001      	str	r0, [sp, #4]
   11246:	9100      	str	r1, [sp, #0]
   11248:	4691      	mov	r9, r2
   1124a:	469a      	mov	sl, r3
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   1124c:	460c      	mov	r4, r1
   1124e:	e004      	b.n	1125a <cbor_internal_read_object+0x1e>
                    memcpy(lptr, &cursor->dflt.integer, sizeof(long long int));
   11250:	6a21      	ldr	r1, [r4, #32]
   11252:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11254:	6001      	str	r1, [r0, #0]
   11256:	6043      	str	r3, [r0, #4]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   11258:	3430      	adds	r4, #48	; 0x30
   1125a:	6827      	ldr	r7, [r4, #0]
   1125c:	b38f      	cbz	r7, 112c2 <cbor_internal_read_object+0x86>
        if (!cursor->nodefault) {
   1125e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   11262:	2b00      	cmp	r3, #0
   11264:	d1f8      	bne.n	11258 <cbor_internal_read_object+0x1c>
            lptr = cbor_target_address(cursor, parent, offset);
   11266:	4652      	mov	r2, sl
   11268:	4649      	mov	r1, r9
   1126a:	4620      	mov	r0, r4
   1126c:	f7ff feaa 	bl	10fc4 <cbor_target_address>
            if (lptr != NULL) {
   11270:	2800      	cmp	r0, #0
   11272:	d0f1      	beq.n	11258 <cbor_internal_read_object+0x1c>
                switch (cursor->type) {
   11274:	7923      	ldrb	r3, [r4, #4]
   11276:	3b01      	subs	r3, #1
   11278:	2b06      	cmp	r3, #6
   1127a:	d8ed      	bhi.n	11258 <cbor_internal_read_object+0x1c>
   1127c:	a101      	add	r1, pc, #4	; (adr r1, 11284 <cbor_internal_read_object+0x48>)
   1127e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   11282:	bf00      	nop
   11284:	00011251 	.word	0x00011251
   11288:	000112a1 	.word	0x000112a1
   1128c:	00011259 	.word	0x00011259
   11290:	00011259 	.word	0x00011259
   11294:	000112ab 	.word	0x000112ab
   11298:	000112b3 	.word	0x000112b3
   1129c:	000112b9 	.word	0x000112b9
                    memcpy(lptr, &cursor->dflt.integer,
   112a0:	6a21      	ldr	r1, [r4, #32]
   112a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   112a4:	6001      	str	r1, [r0, #0]
   112a6:	6043      	str	r3, [r0, #4]
                    break;
   112a8:	e7d6      	b.n	11258 <cbor_internal_read_object+0x1c>
                    memcpy(lptr, &cursor->dflt.boolean, sizeof(bool));
   112aa:	f894 3020 	ldrb.w	r3, [r4, #32]
   112ae:	7003      	strb	r3, [r0, #0]
                    break;
   112b0:	e7d2      	b.n	11258 <cbor_internal_read_object+0x1c>
                    memcpy(lptr, &cursor->dflt.fval, sizeof(float));
   112b2:	6a23      	ldr	r3, [r4, #32]
   112b4:	6003      	str	r3, [r0, #0]
                    break;
   112b6:	e7cf      	b.n	11258 <cbor_internal_read_object+0x1c>
                    memcpy(lptr, &cursor->dflt.real, sizeof(double));
   112b8:	6a21      	ldr	r1, [r4, #32]
   112ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   112bc:	6001      	str	r1, [r0, #0]
   112be:	6043      	str	r3, [r0, #4]
                    break;
   112c0:	e7ca      	b.n	11258 <cbor_internal_read_object+0x1c>
{ return value->type == CborMapType; }
   112c2:	9801      	ldr	r0, [sp, #4]
   112c4:	7b83      	ldrb	r3, [r0, #14]
    if (cbor_value_is_map(root_value)) {
   112c6:	2ba0      	cmp	r3, #160	; 0xa0
   112c8:	d005      	beq.n	112d6 <cbor_internal_read_object+0x9a>
        return err;
   112ca:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   112ce:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
   112d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err |= cbor_value_enter_container(root_value, &cur_value);
   112d6:	a905      	add	r1, sp, #20
   112d8:	f000 fe05 	bl	11ee6 <cbor_value_enter_container>
   112dc:	4680      	mov	r8, r0
    while (cbor_value_is_valid(&cur_value) && !err) {
   112de:	e140      	b.n	11562 <cbor_internal_read_object+0x326>
            if (cbor_value_calculate_string_length(&cur_value, &len) == 0) {
   112e0:	a904      	add	r1, sp, #16
   112e2:	a805      	add	r0, sp, #20
   112e4:	f000 ff23 	bl	1212e <cbor_value_calculate_string_length>
   112e8:	b978      	cbnz	r0, 1130a <cbor_internal_read_object+0xce>
                if (len > MYNEWT_VAL(CBORATTR_MAX_SIZE)) {
   112ea:	9b04      	ldr	r3, [sp, #16]
   112ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   112f0:	d820      	bhi.n	11334 <cbor_internal_read_object+0xf8>
{ return value->type == CborTextStringType; }
   112f2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   112f6:	2b60      	cmp	r3, #96	; 0x60
   112f8:	d11f      	bne.n	1133a <cbor_internal_read_object+0xfe>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   112fa:	2300      	movs	r3, #0
   112fc:	aa04      	add	r2, sp, #16
   112fe:	a909      	add	r1, sp, #36	; 0x24
   11300:	a805      	add	r0, sp, #20
   11302:	f000 fea5 	bl	12050 <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, attrbuf, &len,
   11306:	ea48 0800 	orr.w	r8, r8, r0
            err |= cbor_value_advance(&cur_value);
   1130a:	a805      	add	r0, sp, #20
   1130c:	f000 fefd 	bl	1210a <cbor_value_advance>
   11310:	ea48 0800 	orr.w	r8, r8, r0
{ return value && value->type != CborInvalidType; }
   11314:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   11318:	2eff      	cmp	r6, #255	; 0xff
   1131a:	d014      	beq.n	11346 <cbor_internal_read_object+0x10a>
   1131c:	2301      	movs	r3, #1
            if (cbor_value_is_valid(&cur_value)) {
   1131e:	2b00      	cmp	r3, #0
   11320:	f040 8131 	bne.w	11586 <cbor_internal_read_object+0x34a>
                err |= CborErrorIllegalType;
   11324:	f448 7882 	orr.w	r8, r8, #260	; 0x104
    if (!err) {
   11328:	f1b8 0f00 	cmp.w	r8, #0
   1132c:	f000 8130 	beq.w	11590 <cbor_internal_read_object+0x354>
    return err;
   11330:	4640      	mov	r0, r8
   11332:	e7cc      	b.n	112ce <cbor_internal_read_object+0x92>
                    err |= CborErrorDataTooLarge;
   11334:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
                    break;
   11338:	e7f6      	b.n	11328 <cbor_internal_read_object+0xec>
    assert(cbor_value_is_text_string(value));
   1133a:	2300      	movs	r3, #0
   1133c:	461a      	mov	r2, r3
   1133e:	4619      	mov	r1, r3
   11340:	4618      	mov	r0, r3
   11342:	f7f7 fe07 	bl	8f54 <__assert_func>
{ return value && value->type != CborInvalidType; }
   11346:	2300      	movs	r3, #0
   11348:	e7e9      	b.n	1131e <cbor_internal_read_object+0xe2>
                    attrbuf[0] == '\0') {
   1134a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   1134e:	b963      	cbnz	r3, 1136a <cbor_internal_read_object+0x12e>
                    best_match = cursor;
   11350:	46a3      	mov	fp, r4
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   11352:	3430      	adds	r4, #48	; 0x30
   11354:	6825      	ldr	r5, [r4, #0]
   11356:	b1a5      	cbz	r5, 11382 <cbor_internal_read_object+0x146>
            if (valid_attr_type(type, cursor->type)) {
   11358:	7921      	ldrb	r1, [r4, #4]
   1135a:	4630      	mov	r0, r6
   1135c:	f7ff fdf2 	bl	10f44 <valid_attr_type>
   11360:	2800      	cmp	r0, #0
   11362:	d0f6      	beq.n	11352 <cbor_internal_read_object+0x116>
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   11364:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   11368:	d0ef      	beq.n	1134a <cbor_internal_read_object+0x10e>
                } else if (strlen(cursor->attribute) == len &&
   1136a:	4628      	mov	r0, r5
   1136c:	f7fa fec6 	bl	c0fc <strlen>
   11370:	9a04      	ldr	r2, [sp, #16]
   11372:	4290      	cmp	r0, r2
   11374:	d1ed      	bne.n	11352 <cbor_internal_read_object+0x116>
                    !memcmp(cursor->attribute, attrbuf, len)) {
   11376:	a909      	add	r1, sp, #36	; 0x24
   11378:	4628      	mov	r0, r5
   1137a:	f7fa fe57 	bl	c02c <memcmp>
                } else if (strlen(cursor->attribute) == len &&
   1137e:	2800      	cmp	r0, #0
   11380:	d1e7      	bne.n	11352 <cbor_internal_read_object+0x116>
        if (!cursor->attribute && best_match) {
   11382:	b1b5      	cbz	r5, 113b2 <cbor_internal_read_object+0x176>
        if (cursor->attribute != NULL) {
   11384:	6823      	ldr	r3, [r4, #0]
   11386:	2b00      	cmp	r3, #0
   11388:	f000 80e8 	beq.w	1155c <cbor_internal_read_object+0x320>
            lptr = cbor_target_address(cursor, parent, offset);
   1138c:	4652      	mov	r2, sl
   1138e:	4649      	mov	r1, r9
   11390:	4620      	mov	r0, r4
   11392:	f7ff fe17 	bl	10fc4 <cbor_target_address>
   11396:	4605      	mov	r5, r0
            switch (cursor->type) {
   11398:	7923      	ldrb	r3, [r4, #4]
   1139a:	3b01      	subs	r3, #1
   1139c:	2b0a      	cmp	r3, #10
   1139e:	f200 80db 	bhi.w	11558 <cbor_internal_read_object+0x31c>
   113a2:	e8df f003 	tbb	[pc, r3]
   113a6:	401c      	.short	0x401c
   113a8:	620bb39b 	.word	0x620bb39b
   113ac:	d9d0c87c 	.word	0xd9d0c87c
   113b0:	db          	.byte	0xdb
   113b1:	00          	.byte	0x00
        if (!cursor->attribute && best_match) {
   113b2:	f1bb 0f00 	cmp.w	fp, #0
   113b6:	d0e5      	beq.n	11384 <cbor_internal_read_object+0x148>
            cursor = best_match;
   113b8:	465c      	mov	r4, fp
   113ba:	e7e3      	b.n	11384 <cbor_internal_read_object+0x148>
{ return value->type == CborBooleanType; }
   113bc:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_boolean(value));
   113c0:	2bf5      	cmp	r3, #245	; 0xf5
   113c2:	d106      	bne.n	113d2 <cbor_internal_read_object+0x196>
    *result = !!value->extra;
   113c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   113c8:	3b00      	subs	r3, #0
   113ca:	bf18      	it	ne
   113cc:	2301      	movne	r3, #1
   113ce:	7003      	strb	r3, [r0, #0]
                break;
   113d0:	e0c4      	b.n	1155c <cbor_internal_read_object+0x320>
    assert(cbor_value_is_boolean(value));
   113d2:	2300      	movs	r3, #0
   113d4:	461a      	mov	r2, r3
   113d6:	4619      	mov	r1, r3
   113d8:	4618      	mov	r0, r3
   113da:	f7f7 fdbb 	bl	8f54 <__assert_func>
{ return value->type == CborIntegerType; }
   113de:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_integer(value));
   113e2:	b9a3      	cbnz	r3, 1140e <cbor_internal_read_object+0x1d2>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   113e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   113e8:	f013 0f01 	tst.w	r3, #1
   113ec:	d115      	bne.n	1141a <cbor_internal_read_object+0x1de>
   113ee:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   113f2:	2300      	movs	r3, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   113f4:	602a      	str	r2, [r5, #0]
   113f6:	606b      	str	r3, [r5, #4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   113f8:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   113fc:	f011 0f02 	tst.w	r1, #2
   11400:	f000 80ac 	beq.w	1155c <cbor_internal_read_object+0x320>
        *result = -*result - 1;
   11404:	43d2      	mvns	r2, r2
   11406:	43db      	mvns	r3, r3
   11408:	602a      	str	r2, [r5, #0]
   1140a:	606b      	str	r3, [r5, #4]
                break;
   1140c:	e0a6      	b.n	1155c <cbor_internal_read_object+0x320>
    assert(cbor_value_is_integer(value));
   1140e:	2300      	movs	r3, #0
   11410:	461a      	mov	r2, r3
   11412:	4619      	mov	r1, r3
   11414:	4618      	mov	r0, r3
   11416:	f7f7 fd9d 	bl	8f54 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   1141a:	a805      	add	r0, sp, #20
   1141c:	f000 fd15 	bl	11e4a <_cbor_value_decode_int64_internal>
   11420:	4602      	mov	r2, r0
   11422:	460b      	mov	r3, r1
   11424:	e7e6      	b.n	113f4 <cbor_internal_read_object+0x1b8>
{ return value->type == CborIntegerType; }
   11426:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   1142a:	b933      	cbnz	r3, 1143a <cbor_internal_read_object+0x1fe>
   1142c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   11430:	f013 0f02 	tst.w	r3, #2
   11434:	d00e      	beq.n	11454 <cbor_internal_read_object+0x218>
   11436:	2300      	movs	r3, #0
   11438:	e000      	b.n	1143c <cbor_internal_read_object+0x200>
   1143a:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   1143c:	b163      	cbz	r3, 11458 <cbor_internal_read_object+0x21c>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   1143e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   11442:	f013 0f01 	tst.w	r3, #1
   11446:	d10c      	bne.n	11462 <cbor_internal_read_object+0x226>
   11448:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   1144c:	2100      	movs	r1, #0
    *result = _cbor_value_extract_int64_helper(value);
   1144e:	6028      	str	r0, [r5, #0]
   11450:	6069      	str	r1, [r5, #4]
                break;
   11452:	e083      	b.n	1155c <cbor_internal_read_object+0x320>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   11454:	2301      	movs	r3, #1
   11456:	e7f1      	b.n	1143c <cbor_internal_read_object+0x200>
    assert(cbor_value_is_unsigned_integer(value));
   11458:	461a      	mov	r2, r3
   1145a:	4619      	mov	r1, r3
   1145c:	4618      	mov	r0, r3
   1145e:	f7f7 fd79 	bl	8f54 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   11462:	a805      	add	r0, sp, #20
   11464:	f000 fcf1 	bl	11e4a <_cbor_value_decode_int64_internal>
   11468:	e7f1      	b.n	1144e <cbor_internal_read_object+0x212>
{ return value->type == CborFloatType; }
   1146a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_float(value));
   1146e:	2bfa      	cmp	r3, #250	; 0xfa
   11470:	d109      	bne.n	11486 <cbor_internal_read_object+0x24a>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   11472:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   11476:	f013 0f01 	tst.w	r3, #1
   1147a:	d00a      	beq.n	11492 <cbor_internal_read_object+0x256>
    uint32_t data = (uint32_t)_cbor_value_decode_int64_internal(value);
   1147c:	a805      	add	r0, sp, #20
   1147e:	f000 fce4 	bl	11e4a <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   11482:	6028      	str	r0, [r5, #0]
                break;
   11484:	e06a      	b.n	1155c <cbor_internal_read_object+0x320>
    assert(cbor_value_is_float(value));
   11486:	2300      	movs	r3, #0
   11488:	461a      	mov	r2, r3
   1148a:	4619      	mov	r1, r3
   1148c:	4618      	mov	r0, r3
   1148e:	f7f7 fd61 	bl	8f54 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   11492:	2300      	movs	r3, #0
   11494:	461a      	mov	r2, r3
   11496:	4619      	mov	r1, r3
   11498:	4618      	mov	r0, r3
   1149a:	f7f7 fd5b 	bl	8f54 <__assert_func>
{ return value->type == CborDoubleType; }
   1149e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_double(value));
   114a2:	2bfb      	cmp	r3, #251	; 0xfb
   114a4:	d10e      	bne.n	114c4 <cbor_internal_read_object+0x288>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   114a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   114aa:	f013 0f01 	tst.w	r3, #1
   114ae:	d00f      	beq.n	114d0 <cbor_internal_read_object+0x294>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   114b0:	a805      	add	r0, sp, #20
   114b2:	f000 fcca 	bl	11e4a <_cbor_value_decode_int64_internal>
   114b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   114ba:	ab02      	add	r3, sp, #8
   114bc:	cb03      	ldmia	r3!, {r0, r1}
   114be:	6028      	str	r0, [r5, #0]
   114c0:	6069      	str	r1, [r5, #4]
                break;
   114c2:	e04b      	b.n	1155c <cbor_internal_read_object+0x320>
    assert(cbor_value_is_double(value));
   114c4:	2300      	movs	r3, #0
   114c6:	461a      	mov	r2, r3
   114c8:	4619      	mov	r1, r3
   114ca:	4618      	mov	r0, r3
   114cc:	f7f7 fd42 	bl	8f54 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   114d0:	2300      	movs	r3, #0
   114d2:	461a      	mov	r2, r3
   114d4:	4619      	mov	r1, r3
   114d6:	4618      	mov	r0, r3
   114d8:	f7f7 fd3c 	bl	8f54 <__assert_func>
                size_t len = cursor->len;
   114dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   114de:	9302      	str	r3, [sp, #8]
{ return value->type == CborByteStringType; }
   114e0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_byte_string(value));
   114e4:	2b40      	cmp	r3, #64	; 0x40
   114e6:	d10b      	bne.n	11500 <cbor_internal_read_object+0x2c4>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   114e8:	2300      	movs	r3, #0
   114ea:	aa02      	add	r2, sp, #8
   114ec:	4601      	mov	r1, r0
   114ee:	a805      	add	r0, sp, #20
   114f0:	f000 fdae 	bl	12050 <_cbor_value_copy_string>
                err |= cbor_value_copy_byte_string(&cur_value, lptr,
   114f4:	ea48 0800 	orr.w	r8, r8, r0
                *cursor->addr.bytestring.len = len;
   114f8:	68e3      	ldr	r3, [r4, #12]
   114fa:	9a02      	ldr	r2, [sp, #8]
   114fc:	601a      	str	r2, [r3, #0]
                break;
   114fe:	e02d      	b.n	1155c <cbor_internal_read_object+0x320>
    assert(cbor_value_is_byte_string(value));
   11500:	2300      	movs	r3, #0
   11502:	461a      	mov	r2, r3
   11504:	4619      	mov	r1, r3
   11506:	4618      	mov	r0, r3
   11508:	f7f7 fd24 	bl	8f54 <__assert_func>
                size_t len = cursor->len;
   1150c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1150e:	9302      	str	r3, [sp, #8]
{ return value->type == CborTextStringType; }
   11510:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   11514:	2b60      	cmp	r3, #96	; 0x60
   11516:	d108      	bne.n	1152a <cbor_internal_read_object+0x2ee>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   11518:	2300      	movs	r3, #0
   1151a:	aa02      	add	r2, sp, #8
   1151c:	4601      	mov	r1, r0
   1151e:	a805      	add	r0, sp, #20
   11520:	f000 fd96 	bl	12050 <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, lptr,
   11524:	ea48 0800 	orr.w	r8, r8, r0
                break;
   11528:	e018      	b.n	1155c <cbor_internal_read_object+0x320>
    assert(cbor_value_is_text_string(value));
   1152a:	2300      	movs	r3, #0
   1152c:	461a      	mov	r2, r3
   1152e:	4619      	mov	r1, r3
   11530:	4618      	mov	r0, r3
   11532:	f7f7 fd0f 	bl	8f54 <__assert_func>
                err |= cbor_read_array(&cur_value, &cursor->addr.array);
   11536:	f104 0108 	add.w	r1, r4, #8
   1153a:	a805      	add	r0, sp, #20
   1153c:	f7ff fd72 	bl	11024 <cbor_read_array>
   11540:	ea48 0800 	orr.w	r8, r8, r0
                continue;
   11544:	e00d      	b.n	11562 <cbor_internal_read_object+0x326>
                err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   11546:	2300      	movs	r3, #0
   11548:	461a      	mov	r2, r3
   1154a:	68a1      	ldr	r1, [r4, #8]
   1154c:	a805      	add	r0, sp, #20
   1154e:	f7ff fe75 	bl	1123c <cbor_internal_read_object>
   11552:	ea48 0800 	orr.w	r8, r8, r0
                continue;
   11556:	e004      	b.n	11562 <cbor_internal_read_object+0x326>
                err |= CborErrorIllegalType;
   11558:	f448 7882 	orr.w	r8, r8, #260	; 0x104
        cbor_value_advance(&cur_value);
   1155c:	a805      	add	r0, sp, #20
   1155e:	f000 fdd4 	bl	1210a <cbor_value_advance>
{ return value && value->type != CborInvalidType; }
   11562:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   11566:	2eff      	cmp	r6, #255	; 0xff
   11568:	d010      	beq.n	1158c <cbor_internal_read_object+0x350>
   1156a:	2301      	movs	r3, #1
    while (cbor_value_is_valid(&cur_value) && !err) {
   1156c:	2b00      	cmp	r3, #0
   1156e:	f43f aedb 	beq.w	11328 <cbor_internal_read_object+0xec>
   11572:	f1b8 0f00 	cmp.w	r8, #0
   11576:	f47f aed7 	bne.w	11328 <cbor_internal_read_object+0xec>
        if (cbor_value_is_text_string(&cur_value)) {
   1157a:	2e60      	cmp	r6, #96	; 0x60
   1157c:	f43f aeb0 	beq.w	112e0 <cbor_internal_read_object+0xa4>
            attrbuf[0] = '\0';
   11580:	2300      	movs	r3, #0
   11582:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        best_match = NULL;
   11586:	46bb      	mov	fp, r7
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   11588:	9c00      	ldr	r4, [sp, #0]
   1158a:	e6e3      	b.n	11354 <cbor_internal_read_object+0x118>
   1158c:	2300      	movs	r3, #0
   1158e:	e7ed      	b.n	1156c <cbor_internal_read_object+0x330>
        err |= cbor_value_leave_container(root_value, &cur_value);
   11590:	a905      	add	r1, sp, #20
   11592:	9801      	ldr	r0, [sp, #4]
   11594:	f000 fd3c 	bl	12010 <cbor_value_leave_container>
   11598:	ea48 0800 	orr.w	r8, r8, r0
   1159c:	e6c8      	b.n	11330 <cbor_internal_read_object+0xf4>
   1159e:	bf00      	nop

000115a0 <cbor_read_object>:

int
cbor_read_object(struct CborValue *value, const struct cbor_attr_t *attrs)
{
   115a0:	b508      	push	{r3, lr}
    int st;

    st = cbor_internal_read_object(value, attrs, NULL, 0);
   115a2:	2300      	movs	r3, #0
   115a4:	461a      	mov	r2, r3
   115a6:	f7ff fe49 	bl	1123c <cbor_internal_read_object>
    return st;
}
   115aa:	bd08      	pop	{r3, pc}

000115ac <cbor_mbuf_reader_cpy>:
}

static uintptr_t
cbor_mbuf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int offset,
                     size_t len)
{
   115ac:	b508      	push	{r3, lr}
   115ae:	4694      	mov	ip, r2
   115b0:	461a      	mov	r2, r3
    int rc;
    struct cbor_mbuf_reader *cb = (struct cbor_mbuf_reader *) d;

    rc = os_mbuf_copydata(cb->m, offset + cb->init_off, len, dst);
   115b2:	460b      	mov	r3, r1
   115b4:	69c1      	ldr	r1, [r0, #28]
   115b6:	4461      	add	r1, ip
   115b8:	6a00      	ldr	r0, [r0, #32]
   115ba:	f7f9 f896 	bl	a6ea <os_mbuf_copydata>
    if (rc == 0) {
   115be:	b108      	cbz	r0, 115c4 <cbor_mbuf_reader_cpy+0x18>
        return true;
    }
    return false;
   115c0:	2000      	movs	r0, #0
}
   115c2:	bd08      	pop	{r3, pc}
        return true;
   115c4:	2001      	movs	r0, #1
   115c6:	e7fc      	b.n	115c2 <cbor_mbuf_reader_cpy+0x16>

000115c8 <cbor_mbuf_reader_get8>:
{
   115c8:	b510      	push	{r4, lr}
   115ca:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   115cc:	f10d 0307 	add.w	r3, sp, #7
   115d0:	2201      	movs	r2, #1
   115d2:	69c4      	ldr	r4, [r0, #28]
   115d4:	4421      	add	r1, r4
   115d6:	6a00      	ldr	r0, [r0, #32]
   115d8:	f7f9 f887 	bl	a6ea <os_mbuf_copydata>
}
   115dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   115e0:	b002      	add	sp, #8
   115e2:	bd10      	pop	{r4, pc}

000115e4 <cbor_mbuf_reader_cmp>:
{
   115e4:	b508      	push	{r3, lr}
   115e6:	4694      	mov	ip, r2
    return os_mbuf_cmpf(cb->m, offset + cb->init_off, buf, len) == 0;
   115e8:	460a      	mov	r2, r1
   115ea:	69c1      	ldr	r1, [r0, #28]
   115ec:	4461      	add	r1, ip
   115ee:	6a00      	ldr	r0, [r0, #32]
   115f0:	f7f9 f8ff 	bl	a7f2 <os_mbuf_cmpf>
}
   115f4:	fab0 f080 	clz	r0, r0
   115f8:	0940      	lsrs	r0, r0, #5
   115fa:	bd08      	pop	{r3, pc}

000115fc <cbor_mbuf_reader_get64>:
{
   115fc:	b510      	push	{r4, lr}
   115fe:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   11600:	466b      	mov	r3, sp
   11602:	2208      	movs	r2, #8
   11604:	69c4      	ldr	r4, [r0, #28]
   11606:	4421      	add	r1, r4
   11608:	6a00      	ldr	r0, [r0, #32]
   1160a:	f7f9 f86e 	bl	a6ea <os_mbuf_copydata>
}
   1160e:	9801      	ldr	r0, [sp, #4]
   11610:	ba00      	rev	r0, r0
   11612:	9900      	ldr	r1, [sp, #0]
   11614:	ba09      	rev	r1, r1
   11616:	b002      	add	sp, #8
   11618:	bd10      	pop	{r4, pc}

0001161a <cbor_mbuf_reader_get32>:
{
   1161a:	b510      	push	{r4, lr}
   1161c:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   1161e:	ab01      	add	r3, sp, #4
   11620:	2204      	movs	r2, #4
   11622:	69c4      	ldr	r4, [r0, #28]
   11624:	4421      	add	r1, r4
   11626:	6a00      	ldr	r0, [r0, #32]
   11628:	f7f9 f85f 	bl	a6ea <os_mbuf_copydata>
}
   1162c:	9801      	ldr	r0, [sp, #4]
   1162e:	ba00      	rev	r0, r0
   11630:	b002      	add	sp, #8
   11632:	bd10      	pop	{r4, pc}

00011634 <cbor_mbuf_reader_get16>:
{
   11634:	b510      	push	{r4, lr}
   11636:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   11638:	f10d 0306 	add.w	r3, sp, #6
   1163c:	2202      	movs	r2, #2
   1163e:	69c4      	ldr	r4, [r0, #28]
   11640:	4421      	add	r1, r4
   11642:	6a00      	ldr	r0, [r0, #32]
   11644:	f7f9 f851 	bl	a6ea <os_mbuf_copydata>
    return cbor_ntohs(val);
   11648:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1164c:	ba40      	rev16	r0, r0
}
   1164e:	b280      	uxth	r0, r0
   11650:	b002      	add	sp, #8
   11652:	bd10      	pop	{r4, pc}

00011654 <cbor_mbuf_reader_init>:

void
cbor_mbuf_reader_init(struct cbor_mbuf_reader *cb, struct os_mbuf *m,
                      int initial_offset)
{
   11654:	b508      	push	{r3, lr}
    struct os_mbuf_pkthdr *hdr;

    cb->r.get8 = &cbor_mbuf_reader_get8;
   11656:	4b0d      	ldr	r3, [pc, #52]	; (1168c <cbor_mbuf_reader_init+0x38>)
   11658:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbor_mbuf_reader_get16;
   1165a:	4b0d      	ldr	r3, [pc, #52]	; (11690 <cbor_mbuf_reader_init+0x3c>)
   1165c:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbor_mbuf_reader_get32;
   1165e:	4b0d      	ldr	r3, [pc, #52]	; (11694 <cbor_mbuf_reader_init+0x40>)
   11660:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbor_mbuf_reader_get64;
   11662:	4b0d      	ldr	r3, [pc, #52]	; (11698 <cbor_mbuf_reader_init+0x44>)
   11664:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_mbuf_reader_cmp;
   11666:	4b0d      	ldr	r3, [pc, #52]	; (1169c <cbor_mbuf_reader_init+0x48>)
   11668:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_mbuf_reader_cpy;
   1166a:	4b0d      	ldr	r3, [pc, #52]	; (116a0 <cbor_mbuf_reader_init+0x4c>)
   1166c:	6143      	str	r3, [r0, #20]

    assert(OS_MBUF_IS_PKTHDR(m));
   1166e:	794b      	ldrb	r3, [r1, #5]
   11670:	2b07      	cmp	r3, #7
   11672:	d905      	bls.n	11680 <cbor_mbuf_reader_init+0x2c>
    hdr = OS_MBUF_PKTHDR(m);
    cb->m = m;
   11674:	6201      	str	r1, [r0, #32]
    cb->init_off = initial_offset;
   11676:	61c2      	str	r2, [r0, #28]
    cb->r.message_size = hdr->omp_len - initial_offset;
   11678:	8a0b      	ldrh	r3, [r1, #16]
   1167a:	1a9a      	subs	r2, r3, r2
   1167c:	6182      	str	r2, [r0, #24]
}
   1167e:	bd08      	pop	{r3, pc}
    assert(OS_MBUF_IS_PKTHDR(m));
   11680:	2300      	movs	r3, #0
   11682:	461a      	mov	r2, r3
   11684:	4619      	mov	r1, r3
   11686:	4618      	mov	r0, r3
   11688:	f7f7 fc64 	bl	8f54 <__assert_func>
   1168c:	000115c9 	.word	0x000115c9
   11690:	00011635 	.word	0x00011635
   11694:	0001161b 	.word	0x0001161b
   11698:	000115fd 	.word	0x000115fd
   1169c:	000115e5 	.word	0x000115e5
   116a0:	000115ad 	.word	0x000115ad

000116a4 <cbor_mbuf_writer>:
#include <tinycbor/cbor.h>
#include <tinycbor/cbor_mbuf_writer.h>

int
cbor_mbuf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   116a4:	b538      	push	{r3, r4, r5, lr}
   116a6:	4604      	mov	r4, r0
   116a8:	4615      	mov	r5, r2
    int rc;
    struct cbor_mbuf_writer *cb = (struct cbor_mbuf_writer *) arg;

    rc = os_mbuf_append(cb->m, data, len);
   116aa:	b292      	uxth	r2, r2
   116ac:	6880      	ldr	r0, [r0, #8]
   116ae:	f7f8 ffb6 	bl	a61e <os_mbuf_append>
    if (rc) {
   116b2:	b918      	cbnz	r0, 116bc <cbor_mbuf_writer+0x18>
        return CborErrorOutOfMemory;
    }
    cb->enc.bytes_written += len;
   116b4:	6862      	ldr	r2, [r4, #4]
   116b6:	442a      	add	r2, r5
   116b8:	6062      	str	r2, [r4, #4]
    return CborNoError;
}
   116ba:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   116bc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   116c0:	e7fb      	b.n	116ba <cbor_mbuf_writer+0x16>
	...

000116c4 <cbor_mbuf_writer_init>:


void
cbor_mbuf_writer_init(struct cbor_mbuf_writer *cb, struct os_mbuf *m)
{
    cb->m = m;
   116c4:	6081      	str	r1, [r0, #8]
    cb->enc.bytes_written = 0;
   116c6:	2300      	movs	r3, #0
   116c8:	6043      	str	r3, [r0, #4]
    cb->enc.write = &cbor_mbuf_writer;
   116ca:	4b01      	ldr	r3, [pc, #4]	; (116d0 <cbor_mbuf_writer_init+0xc>)
   116cc:	6003      	str	r3, [r0, #0]
}
   116ce:	4770      	bx	lr
   116d0:	000116a5 	.word	0x000116a5

000116d4 <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
   116d4:	b510      	push	{r4, lr}
   116d6:	b084      	sub	sp, #16
   116d8:	468c      	mov	ip, r1
    CborError err;
    container->writer = encoder->writer;
   116da:	6801      	ldr	r1, [r0, #0]
   116dc:	f8cc 1000 	str.w	r1, [ip]
    ++encoder->added;
   116e0:	6881      	ldr	r1, [r0, #8]
   116e2:	3101      	adds	r1, #1
   116e4:	6081      	str	r1, [r0, #8]
    container->added = 0;
   116e6:	2100      	movs	r1, #0
   116e8:	f8cc 1008 	str.w	r1, [ip, #8]

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
   116ec:	f003 0120 	and.w	r1, r3, #32
   116f0:	f8cc 100c 	str.w	r1, [ip, #12]

    if (length == CborIndefiniteLength) {
   116f4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   116f8:	d10f      	bne.n	1171a <create_container+0x46>
        container->flags |= CborIteratorFlag_UnknownLength;
   116fa:	f041 0104 	orr.w	r1, r1, #4
   116fe:	f8cc 100c 	str.w	r1, [ip, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
   11702:	331f      	adds	r3, #31
   11704:	f88d 3000 	strb.w	r3, [sp]
    return encoder->writer->write(encoder->writer, data, len);
   11708:	f8dc 0000 	ldr.w	r0, [ip]
   1170c:	6803      	ldr	r3, [r0, #0]
   1170e:	2201      	movs	r2, #1
   11710:	4669      	mov	r1, sp
   11712:	4798      	blx	r3
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
   11714:	2000      	movs	r0, #0
   11716:	b004      	add	sp, #16
   11718:	bd10      	pop	{r4, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
   1171a:	2100      	movs	r1, #0
    v = cbor_htonll(v);
   1171c:	ba10      	rev	r0, r2
    memcpy(where, &v, sizeof(v));
   1171e:	9102      	str	r1, [sp, #8]
   11720:	9003      	str	r0, [sp, #12]
    if (ui < Value8Bit) {
   11722:	2a18      	cmp	r2, #24
   11724:	f171 0400 	sbcs.w	r4, r1, #0
   11728:	d20c      	bcs.n	11744 <create_container+0x70>
        *bufstart += shiftedMajorType;
   1172a:	eb03 6310 	add.w	r3, r3, r0, lsr #24
   1172e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   11732:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   11736:	f8dc 0000 	ldr.w	r0, [ip]
   1173a:	6803      	ldr	r3, [r0, #0]
   1173c:	aa04      	add	r2, sp, #16
   1173e:	1a52      	subs	r2, r2, r1
   11740:	4798      	blx	r3
    return append_to_buffer(encoder, bufstart, bufend - bufstart);
   11742:	e7e7      	b.n	11714 <create_container+0x40>
        if (ui > 0xffU)
   11744:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   11748:	f171 0000 	sbcs.w	r0, r1, #0
   1174c:	d210      	bcs.n	11770 <create_container+0x9c>
        unsigned more = 0;
   1174e:	2000      	movs	r0, #0
        if (ui > 0xffffU)
   11750:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   11754:	f171 0200 	sbcs.w	r2, r1, #0
   11758:	d300      	bcc.n	1175c <create_container+0x88>
            ++more;
   1175a:	3001      	adds	r0, #1
        bufstart -= (size_t)1 << more;
   1175c:	2101      	movs	r1, #1
   1175e:	fa01 f200 	lsl.w	r2, r1, r0
   11762:	f10d 010f 	add.w	r1, sp, #15
   11766:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   11768:	4403      	add	r3, r0
   1176a:	3318      	adds	r3, #24
   1176c:	700b      	strb	r3, [r1, #0]
   1176e:	e7e2      	b.n	11736 <create_container+0x62>
            ++more;
   11770:	2001      	movs	r0, #1
   11772:	e7ed      	b.n	11750 <create_container+0x7c>

00011774 <encode_string>:
{
   11774:	b570      	push	{r4, r5, r6, lr}
   11776:	b084      	sub	sp, #16
   11778:	4605      	mov	r5, r0
   1177a:	460c      	mov	r4, r1
   1177c:	461e      	mov	r6, r3
    CborError err = encode_number(encoder, length, shiftedMajorType);
   1177e:	2300      	movs	r3, #0
    ++encoder->added;
   11780:	6881      	ldr	r1, [r0, #8]
   11782:	3101      	adds	r1, #1
   11784:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   11786:	ba21      	rev	r1, r4
    memcpy(where, &v, sizeof(v));
   11788:	9302      	str	r3, [sp, #8]
   1178a:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   1178c:	2c18      	cmp	r4, #24
   1178e:	f173 0000 	sbcs.w	r0, r3, #0
   11792:	d211      	bcs.n	117b8 <encode_string+0x44>
        *bufstart += shiftedMajorType;
   11794:	eb02 6211 	add.w	r2, r2, r1, lsr #24
   11798:	f88d 200f 	strb.w	r2, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   1179c:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   117a0:	6828      	ldr	r0, [r5, #0]
   117a2:	6803      	ldr	r3, [r0, #0]
   117a4:	aa04      	add	r2, sp, #16
   117a6:	1a52      	subs	r2, r2, r1
   117a8:	4798      	blx	r3
   117aa:	6828      	ldr	r0, [r5, #0]
   117ac:	6803      	ldr	r3, [r0, #0]
   117ae:	4622      	mov	r2, r4
   117b0:	4631      	mov	r1, r6
   117b2:	4798      	blx	r3
}
   117b4:	b004      	add	sp, #16
   117b6:	bd70      	pop	{r4, r5, r6, pc}
        if (ui > 0xffU)
   117b8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   117bc:	f173 0100 	sbcs.w	r1, r3, #0
   117c0:	d212      	bcs.n	117e8 <encode_string+0x74>
        unsigned more = 0;
   117c2:	f04f 0c00 	mov.w	ip, #0
        if (ui > 0xffffU)
   117c6:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   117ca:	f173 0300 	sbcs.w	r3, r3, #0
   117ce:	d301      	bcc.n	117d4 <encode_string+0x60>
            ++more;
   117d0:	f10c 0c01 	add.w	ip, ip, #1
        bufstart -= (size_t)1 << more;
   117d4:	2101      	movs	r1, #1
   117d6:	fa01 f10c 	lsl.w	r1, r1, ip
   117da:	f10d 000f 	add.w	r0, sp, #15
   117de:	1a41      	subs	r1, r0, r1
        *bufstart = shiftedMajorType + Value8Bit + more;
   117e0:	4462      	add	r2, ip
   117e2:	3218      	adds	r2, #24
   117e4:	700a      	strb	r2, [r1, #0]
   117e6:	e7db      	b.n	117a0 <encode_string+0x2c>
            ++more;
   117e8:	f04f 0c01 	mov.w	ip, #1
   117ec:	e7eb      	b.n	117c6 <encode_string+0x52>

000117ee <cbor_encoder_init>:
    encoder->writer = writer;
   117ee:	6001      	str	r1, [r0, #0]
    encoder->added = 0;
   117f0:	2300      	movs	r3, #0
   117f2:	6083      	str	r3, [r0, #8]
    encoder->flags = flags;
   117f4:	60c2      	str	r2, [r0, #12]
}
   117f6:	4770      	bx	lr

000117f8 <cbor_encode_uint>:
{
   117f8:	b510      	push	{r4, lr}
   117fa:	b084      	sub	sp, #16
    ++encoder->added;
   117fc:	6881      	ldr	r1, [r0, #8]
   117fe:	3101      	adds	r1, #1
   11800:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   11802:	ba11      	rev	r1, r2
   11804:	ba1c      	rev	r4, r3
    memcpy(where, &v, sizeof(v));
   11806:	9402      	str	r4, [sp, #8]
   11808:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   1180a:	2a18      	cmp	r2, #24
   1180c:	f173 0400 	sbcs.w	r4, r3, #0
   11810:	d20c      	bcs.n	1182c <cbor_encode_uint+0x34>
        *bufstart += shiftedMajorType;
   11812:	f3c1 6107 	ubfx	r1, r1, #24, #8
   11816:	f88d 100f 	strb.w	r1, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   1181a:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   1181e:	6800      	ldr	r0, [r0, #0]
   11820:	6803      	ldr	r3, [r0, #0]
   11822:	aa04      	add	r2, sp, #16
   11824:	1a52      	subs	r2, r2, r1
   11826:	4798      	blx	r3
}
   11828:	b004      	add	sp, #16
   1182a:	bd10      	pop	{r4, pc}
        if (ui > 0xffU)
   1182c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   11830:	f173 0100 	sbcs.w	r1, r3, #0
   11834:	d21d      	bcs.n	11872 <cbor_encode_uint+0x7a>
        unsigned more = 0;
   11836:	f04f 0c00 	mov.w	ip, #0
        if (ui > 0xffffU)
   1183a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   1183e:	f173 0100 	sbcs.w	r1, r3, #0
   11842:	d301      	bcc.n	11848 <cbor_encode_uint+0x50>
            ++more;
   11844:	f10c 0c01 	add.w	ip, ip, #1
        if (ui > 0xffffffffU)
   11848:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1184c:	4291      	cmp	r1, r2
   1184e:	f04f 0200 	mov.w	r2, #0
   11852:	eb72 0303 	sbcs.w	r3, r2, r3
   11856:	d201      	bcs.n	1185c <cbor_encode_uint+0x64>
            ++more;
   11858:	f10c 0c01 	add.w	ip, ip, #1
        bufstart -= (size_t)1 << more;
   1185c:	2101      	movs	r1, #1
   1185e:	fa01 f30c 	lsl.w	r3, r1, ip
   11862:	f10d 010f 	add.w	r1, sp, #15
   11866:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   11868:	f10c 0c18 	add.w	ip, ip, #24
   1186c:	f881 c000 	strb.w	ip, [r1]
   11870:	e7d5      	b.n	1181e <cbor_encode_uint+0x26>
            ++more;
   11872:	f04f 0c01 	mov.w	ip, #1
   11876:	e7e0      	b.n	1183a <cbor_encode_uint+0x42>

00011878 <cbor_encode_int>:
{
   11878:	b510      	push	{r4, lr}
   1187a:	b084      	sub	sp, #16
    uint64_t ui = value >> 63;              /* extend sign to whole length */
   1187c:	17d9      	asrs	r1, r3, #31
    uint8_t majorType = ui & 0x20;          /* extract major type */
   1187e:	f001 0c20 	and.w	ip, r1, #32
    ui ^= value;                            /* complement negatives */
   11882:	404a      	eors	r2, r1
   11884:	404b      	eors	r3, r1
    ++encoder->added;
   11886:	6881      	ldr	r1, [r0, #8]
   11888:	3101      	adds	r1, #1
   1188a:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   1188c:	ba11      	rev	r1, r2
   1188e:	ba1c      	rev	r4, r3
    memcpy(where, &v, sizeof(v));
   11890:	9402      	str	r4, [sp, #8]
   11892:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   11894:	2a18      	cmp	r2, #24
   11896:	f173 0400 	sbcs.w	r4, r3, #0
   1189a:	d20c      	bcs.n	118b6 <cbor_encode_int+0x3e>
        *bufstart += shiftedMajorType;
   1189c:	eb0c 6111 	add.w	r1, ip, r1, lsr #24
   118a0:	f88d 100f 	strb.w	r1, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   118a4:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   118a8:	6800      	ldr	r0, [r0, #0]
   118aa:	6803      	ldr	r3, [r0, #0]
   118ac:	aa04      	add	r2, sp, #16
   118ae:	1a52      	subs	r2, r2, r1
   118b0:	4798      	blx	r3
}
   118b2:	b004      	add	sp, #16
   118b4:	bd10      	pop	{r4, pc}
        if (ui > 0xffU)
   118b6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   118ba:	f173 0100 	sbcs.w	r1, r3, #0
   118be:	d21e      	bcs.n	118fe <cbor_encode_int+0x86>
        unsigned more = 0;
   118c0:	f04f 0e00 	mov.w	lr, #0
        if (ui > 0xffffU)
   118c4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   118c8:	f173 0100 	sbcs.w	r1, r3, #0
   118cc:	d301      	bcc.n	118d2 <cbor_encode_int+0x5a>
            ++more;
   118ce:	f10e 0e01 	add.w	lr, lr, #1
        if (ui > 0xffffffffU)
   118d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   118d6:	4291      	cmp	r1, r2
   118d8:	f04f 0200 	mov.w	r2, #0
   118dc:	eb72 0303 	sbcs.w	r3, r2, r3
   118e0:	d201      	bcs.n	118e6 <cbor_encode_int+0x6e>
            ++more;
   118e2:	f10e 0e01 	add.w	lr, lr, #1
        bufstart -= (size_t)1 << more;
   118e6:	2101      	movs	r1, #1
   118e8:	fa01 f30e 	lsl.w	r3, r1, lr
   118ec:	f10d 010f 	add.w	r1, sp, #15
   118f0:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   118f2:	44f4      	add	ip, lr
   118f4:	f10c 0c18 	add.w	ip, ip, #24
   118f8:	f881 c000 	strb.w	ip, [r1]
   118fc:	e7d4      	b.n	118a8 <cbor_encode_int+0x30>
            ++more;
   118fe:	f04f 0e01 	mov.w	lr, #1
   11902:	e7df      	b.n	118c4 <cbor_encode_int+0x4c>

00011904 <cbor_encode_simple_value>:
    if (value >= HalfPrecisionFloat && value <= Break)
   11904:	f1a1 0319 	sub.w	r3, r1, #25
   11908:	b2db      	uxtb	r3, r3
   1190a:	2b06      	cmp	r3, #6
   1190c:	d925      	bls.n	1195a <cbor_encode_simple_value+0x56>
{
   1190e:	b500      	push	{lr}
   11910:	b085      	sub	sp, #20
    return encode_number(encoder, value, SimpleTypesType << MajorTypeShift);
   11912:	2200      	movs	r2, #0
    ++encoder->added;
   11914:	6883      	ldr	r3, [r0, #8]
   11916:	3301      	adds	r3, #1
   11918:	6083      	str	r3, [r0, #8]
    v = cbor_htonll(v);
   1191a:	ba0b      	rev	r3, r1
    memcpy(where, &v, sizeof(v));
   1191c:	9202      	str	r2, [sp, #8]
   1191e:	9303      	str	r3, [sp, #12]
    if (ui < Value8Bit) {
   11920:	2918      	cmp	r1, #24
   11922:	f172 0200 	sbcs.w	r2, r2, #0
   11926:	d20e      	bcs.n	11946 <cbor_encode_simple_value+0x42>
        *bufstart += shiftedMajorType;
   11928:	f3c3 6307 	ubfx	r3, r3, #24, #8
   1192c:	3b20      	subs	r3, #32
   1192e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   11932:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   11936:	6800      	ldr	r0, [r0, #0]
   11938:	6803      	ldr	r3, [r0, #0]
   1193a:	aa04      	add	r2, sp, #16
   1193c:	1a52      	subs	r2, r2, r1
   1193e:	4798      	blx	r3
}
   11940:	b005      	add	sp, #20
   11942:	f85d fb04 	ldr.w	pc, [sp], #4
        unsigned more = 0;
   11946:	2300      	movs	r3, #0
        bufstart -= (size_t)1 << more;
   11948:	2101      	movs	r1, #1
   1194a:	fa01 f203 	lsl.w	r2, r1, r3
   1194e:	f10d 010f 	add.w	r1, sp, #15
   11952:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   11954:	3b08      	subs	r3, #8
   11956:	700b      	strb	r3, [r1, #0]
   11958:	e7ed      	b.n	11936 <cbor_encode_simple_value+0x32>
        return CborErrorIllegalSimpleType;
   1195a:	f44f 7083 	mov.w	r0, #262	; 0x106
}
   1195e:	4770      	bx	lr

00011960 <cbor_encode_byte_string>:
{
   11960:	b508      	push	{r3, lr}
   11962:	460b      	mov	r3, r1
   11964:	4611      	mov	r1, r2
    return encode_string(encoder, length, ByteStringType << MajorTypeShift, string);
   11966:	2240      	movs	r2, #64	; 0x40
   11968:	f7ff ff04 	bl	11774 <encode_string>
}
   1196c:	bd08      	pop	{r3, pc}

0001196e <cbor_encode_text_string>:
{
   1196e:	b508      	push	{r3, lr}
   11970:	460b      	mov	r3, r1
   11972:	4611      	mov	r1, r2
    return encode_string(encoder, length, TextStringType << MajorTypeShift, string);
   11974:	2260      	movs	r2, #96	; 0x60
   11976:	f7ff fefd 	bl	11774 <encode_string>
}
   1197a:	bd08      	pop	{r3, pc}

0001197c <cbor_encoder_create_array>:
 * length instead.
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
   1197c:	b508      	push	{r3, lr}
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
   1197e:	2380      	movs	r3, #128	; 0x80
   11980:	f7ff fea8 	bl	116d4 <create_container>
}
   11984:	bd08      	pop	{r3, pc}

00011986 <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
   11986:	b508      	push	{r3, lr}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
   11988:	f102 4c00 	add.w	ip, r2, #2147483648	; 0x80000000
   1198c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   11990:	459c      	cmp	ip, r3
   11992:	d303      	bcc.n	1199c <cbor_encoder_create_map+0x16>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
   11994:	23a0      	movs	r3, #160	; 0xa0
   11996:	f7ff fe9d 	bl	116d4 <create_container>
}
   1199a:	bd08      	pop	{r3, pc}
        return CborErrorDataTooLarge;
   1199c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   119a0:	e7fb      	b.n	1199a <cbor_encoder_create_map+0x14>

000119a2 <cbor_encoder_close_container>:
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
    encoder->writer = containerEncoder->writer;
   119a2:	680b      	ldr	r3, [r1, #0]
   119a4:	6003      	str	r3, [r0, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   119a6:	68cb      	ldr	r3, [r1, #12]
   119a8:	f013 0f04 	tst.w	r3, #4
   119ac:	d101      	bne.n	119b2 <cbor_encoder_close_container+0x10>
        return append_byte_to_buffer(encoder, BreakByte);
    return CborNoError;
   119ae:	2000      	movs	r0, #0
}
   119b0:	4770      	bx	lr
{
   119b2:	b500      	push	{lr}
   119b4:	b083      	sub	sp, #12
        return append_byte_to_buffer(encoder, BreakByte);
   119b6:	23ff      	movs	r3, #255	; 0xff
   119b8:	f88d 3007 	strb.w	r3, [sp, #7]
    return encoder->writer->write(encoder->writer, data, len);
   119bc:	6800      	ldr	r0, [r0, #0]
   119be:	6803      	ldr	r3, [r0, #0]
   119c0:	2201      	movs	r2, #1
   119c2:	f10d 0107 	add.w	r1, sp, #7
   119c6:	4798      	blx	r3
}
   119c8:	b003      	add	sp, #12
   119ca:	f85d fb04 	ldr.w	pc, [sp], #4

000119ce <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   119ce:	2860      	cmp	r0, #96	; 0x60
   119d0:	d009      	beq.n	119e6 <is_fixed_type+0x18>
   119d2:	2840      	cmp	r0, #64	; 0x40
   119d4:	d009      	beq.n	119ea <is_fixed_type+0x1c>
   119d6:	2880      	cmp	r0, #128	; 0x80
   119d8:	d009      	beq.n	119ee <is_fixed_type+0x20>
   119da:	28a0      	cmp	r0, #160	; 0xa0
   119dc:	d001      	beq.n	119e2 <is_fixed_type+0x14>
   119de:	2001      	movs	r0, #1
           type != CborMapType;
}
   119e0:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   119e2:	2000      	movs	r0, #0
   119e4:	4770      	bx	lr
   119e6:	2000      	movs	r0, #0
   119e8:	4770      	bx	lr
   119ea:	2000      	movs	r0, #0
   119ec:	4770      	bx	lr
   119ee:	2000      	movs	r0, #0
   119f0:	4770      	bx	lr

000119f2 <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   119f2:	2001      	movs	r0, #1
   119f4:	4770      	bx	lr

000119f6 <preparse_value>:
{
   119f6:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   119f8:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   119fa:	23ff      	movs	r3, #255	; 0xff
   119fc:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   119fe:	6841      	ldr	r1, [r0, #4]
   11a00:	686b      	ldr	r3, [r5, #4]
   11a02:	4299      	cmp	r1, r3
   11a04:	f000 8089 	beq.w	11b1a <preparse_value+0x124>
   11a08:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   11a0a:	6828      	ldr	r0, [r5, #0]
   11a0c:	6803      	ldr	r3, [r0, #0]
   11a0e:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   11a10:	f000 06e0 	and.w	r6, r0, #224	; 0xe0
    it->type = type;
   11a14:	73a6      	strb	r6, [r4, #14]
    it->flags = 0;
   11a16:	2300      	movs	r3, #0
   11a18:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   11a1a:	f000 031f 	and.w	r3, r0, #31
   11a1e:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   11a20:	2b1b      	cmp	r3, #27
   11a22:	d91d      	bls.n	11a60 <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   11a24:	2b1f      	cmp	r3, #31
   11a26:	d10b      	bne.n	11a40 <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   11a28:	4630      	mov	r0, r6
   11a2a:	f7ff ffd0 	bl	119ce <is_fixed_type>
   11a2e:	f080 0001 	eor.w	r0, r0, #1
   11a32:	f010 0fff 	tst.w	r0, #255	; 0xff
   11a36:	d00b      	beq.n	11a50 <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   11a38:	2304      	movs	r3, #4
   11a3a:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   11a3c:	2000      	movs	r0, #0
}
   11a3e:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   11a40:	2ee0      	cmp	r6, #224	; 0xe0
   11a42:	d002      	beq.n	11a4a <preparse_value+0x54>
   11a44:	f240 1005 	movw	r0, #261	; 0x105
   11a48:	e7f9      	b.n	11a3e <preparse_value+0x48>
   11a4a:	f240 1003 	movw	r0, #259	; 0x103
   11a4e:	e7f6      	b.n	11a3e <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   11a50:	2ee0      	cmp	r6, #224	; 0xe0
   11a52:	d002      	beq.n	11a5a <preparse_value+0x64>
   11a54:	f240 1005 	movw	r0, #261	; 0x105
   11a58:	e7f1      	b.n	11a3e <preparse_value+0x48>
   11a5a:	f44f 7081 	mov.w	r0, #258	; 0x102
   11a5e:	e7ee      	b.n	11a3e <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   11a60:	2b17      	cmp	r3, #23
   11a62:	d91a      	bls.n	11a9a <preparse_value+0xa4>
   11a64:	f1a3 0118 	sub.w	r1, r3, #24
   11a68:	2201      	movs	r2, #1
   11a6a:	408a      	lsls	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   11a6c:	3201      	adds	r2, #1
   11a6e:	6868      	ldr	r0, [r5, #4]
   11a70:	6861      	ldr	r1, [r4, #4]
   11a72:	1a40      	subs	r0, r0, r1
   11a74:	4282      	cmp	r2, r0
   11a76:	d853      	bhi.n	11b20 <preparse_value+0x12a>
    uint8_t majortype = type >> MajorTypeShift;
   11a78:	0972      	lsrs	r2, r6, #5
    if (majortype == NegativeIntegerType) {
   11a7a:	2e20      	cmp	r6, #32
   11a7c:	d00f      	beq.n	11a9e <preparse_value+0xa8>
    } else if (majortype == SimpleTypesType) {
   11a7e:	2a07      	cmp	r2, #7
   11a80:	d012      	beq.n	11aa8 <preparse_value+0xb2>
    if (descriptor < Value8Bit)
   11a82:	2b17      	cmp	r3, #23
   11a84:	d94f      	bls.n	11b26 <preparse_value+0x130>
    if (descriptor == Value8Bit)
   11a86:	2b18      	cmp	r3, #24
   11a88:	d039      	beq.n	11afe <preparse_value+0x108>
    else if (descriptor == Value16Bit)
   11a8a:	2b19      	cmp	r3, #25
   11a8c:	d03e      	beq.n	11b0c <preparse_value+0x116>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   11a8e:	7be3      	ldrb	r3, [r4, #15]
   11a90:	f043 0301 	orr.w	r3, r3, #1
   11a94:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   11a96:	2000      	movs	r0, #0
   11a98:	e7d1      	b.n	11a3e <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   11a9a:	2200      	movs	r2, #0
   11a9c:	e7e6      	b.n	11a6c <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   11a9e:	2202      	movs	r2, #2
   11aa0:	73e2      	strb	r2, [r4, #15]
        it->type = CborIntegerType;
   11aa2:	2200      	movs	r2, #0
   11aa4:	73a2      	strb	r2, [r4, #14]
   11aa6:	e7ec      	b.n	11a82 <preparse_value+0x8c>
        switch (descriptor) {
   11aa8:	3b14      	subs	r3, #20
   11aaa:	2b0b      	cmp	r3, #11
   11aac:	d812      	bhi.n	11ad4 <preparse_value+0xde>
   11aae:	e8df f003 	tbb	[pc, r3]
   11ab2:	0d06      	.short	0x0d06
   11ab4:	0d130d0d 	.word	0x0d130d0d
   11ab8:	20200b0b 	.word	0x20200b0b
   11abc:	2020      	.short	0x2020
            it->extra = false;
   11abe:	2300      	movs	r3, #0
   11ac0:	81a3      	strh	r3, [r4, #12]
            it->type = CborBooleanType;
   11ac2:	23f5      	movs	r3, #245	; 0xf5
   11ac4:	73a3      	strb	r3, [r4, #14]
            break;
   11ac6:	e005      	b.n	11ad4 <preparse_value+0xde>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   11ac8:	2301      	movs	r3, #1
   11aca:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   11acc:	6828      	ldr	r0, [r5, #0]
   11ace:	6803      	ldr	r3, [r0, #0]
   11ad0:	4798      	blx	r3
   11ad2:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   11ad4:	2000      	movs	r0, #0
   11ad6:	e7b2      	b.n	11a3e <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   11ad8:	6828      	ldr	r0, [r5, #0]
   11ada:	6803      	ldr	r3, [r0, #0]
   11adc:	3101      	adds	r1, #1
   11ade:	4798      	blx	r3
   11ae0:	b283      	uxth	r3, r0
   11ae2:	81a3      	strh	r3, [r4, #12]
            if (unlikely(it->extra < 32)) {
   11ae4:	2b1f      	cmp	r3, #31
   11ae6:	d8f5      	bhi.n	11ad4 <preparse_value+0xde>
                it->type = CborInvalidType;
   11ae8:	23ff      	movs	r3, #255	; 0xff
   11aea:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   11aec:	f44f 7083 	mov.w	r0, #262	; 0x106
   11af0:	e7a5      	b.n	11a3e <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   11af2:	2300      	movs	r3, #0
   11af4:	461a      	mov	r2, r3
   11af6:	4619      	mov	r1, r3
   11af8:	4618      	mov	r0, r3
   11afa:	f7f7 fa2b 	bl	8f54 <__assert_func>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   11afe:	6828      	ldr	r0, [r5, #0]
   11b00:	6803      	ldr	r3, [r0, #0]
   11b02:	3101      	adds	r1, #1
   11b04:	4798      	blx	r3
   11b06:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   11b08:	2000      	movs	r0, #0
   11b0a:	e798      	b.n	11a3e <preparse_value+0x48>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   11b0c:	6828      	ldr	r0, [r5, #0]
   11b0e:	6843      	ldr	r3, [r0, #4]
   11b10:	3101      	adds	r1, #1
   11b12:	4798      	blx	r3
   11b14:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   11b16:	2000      	movs	r0, #0
   11b18:	e791      	b.n	11a3e <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   11b1a:	f240 1001 	movw	r0, #257	; 0x101
   11b1e:	e78e      	b.n	11a3e <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   11b20:	f240 1001 	movw	r0, #257	; 0x101
   11b24:	e78b      	b.n	11a3e <preparse_value+0x48>
        return CborNoError;
   11b26:	2000      	movs	r0, #0
   11b28:	e789      	b.n	11a3e <preparse_value+0x48>

00011b2a <preparse_next_value>:
{
   11b2a:	b510      	push	{r4, lr}
   11b2c:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   11b2e:	6880      	ldr	r0, [r0, #8]
   11b30:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   11b34:	d00c      	beq.n	11b50 <preparse_next_value+0x26>
        if (it->type != CborTagType && !--it->remaining) {
   11b36:	7ba2      	ldrb	r2, [r4, #14]
   11b38:	2ac0      	cmp	r2, #192	; 0xc0
   11b3a:	d002      	beq.n	11b42 <preparse_next_value+0x18>
   11b3c:	3801      	subs	r0, #1
   11b3e:	60a0      	str	r0, [r4, #8]
   11b40:	b118      	cbz	r0, 11b4a <preparse_next_value+0x20>
    return preparse_value(it);
   11b42:	4620      	mov	r0, r4
   11b44:	f7ff ff57 	bl	119f6 <preparse_value>
}
   11b48:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   11b4a:	23ff      	movs	r3, #255	; 0xff
   11b4c:	73a3      	strb	r3, [r4, #14]
            return CborNoError;
   11b4e:	e7fb      	b.n	11b48 <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   11b50:	6861      	ldr	r1, [r4, #4]
   11b52:	6823      	ldr	r3, [r4, #0]
   11b54:	685a      	ldr	r2, [r3, #4]
   11b56:	4291      	cmp	r1, r2
   11b58:	d0f3      	beq.n	11b42 <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   11b5a:	6818      	ldr	r0, [r3, #0]
   11b5c:	6803      	ldr	r3, [r0, #0]
   11b5e:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   11b60:	28ff      	cmp	r0, #255	; 0xff
   11b62:	d1ee      	bne.n	11b42 <preparse_next_value+0x18>
        ++it->offset;
   11b64:	6863      	ldr	r3, [r4, #4]
   11b66:	3301      	adds	r3, #1
   11b68:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   11b6a:	23ff      	movs	r3, #255	; 0xff
   11b6c:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   11b6e:	2000      	movs	r0, #0
   11b70:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   11b72:	e7e9      	b.n	11b48 <preparse_next_value+0x1e>

00011b74 <extract_length>:
{
   11b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b76:	4607      	mov	r7, r0
   11b78:	460c      	mov	r4, r1
   11b7a:	4615      	mov	r5, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   11b7c:	6800      	ldr	r0, [r0, #0]
   11b7e:	6803      	ldr	r3, [r0, #0]
   11b80:	6809      	ldr	r1, [r1, #0]
   11b82:	4798      	blx	r3
   11b84:	f000 031f 	and.w	r3, r0, #31
    ++*offset;
   11b88:	6822      	ldr	r2, [r4, #0]
   11b8a:	3201      	adds	r2, #1
   11b8c:	6022      	str	r2, [r4, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   11b8e:	2b17      	cmp	r3, #23
   11b90:	d914      	bls.n	11bbc <extract_length+0x48>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   11b92:	2b1b      	cmp	r3, #27
   11b94:	d82e      	bhi.n	11bf4 <extract_length+0x80>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   11b96:	3b18      	subs	r3, #24
   11b98:	2601      	movs	r6, #1
   11b9a:	409e      	lsls	r6, r3
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   11b9c:	687b      	ldr	r3, [r7, #4]
   11b9e:	6821      	ldr	r1, [r4, #0]
   11ba0:	1a5b      	subs	r3, r3, r1
   11ba2:	429e      	cmp	r6, r3
   11ba4:	d82b      	bhi.n	11bfe <extract_length+0x8a>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   11ba6:	2e01      	cmp	r6, #1
   11ba8:	d00b      	beq.n	11bc2 <extract_length+0x4e>
        *len = p->d->get8(p->d, *offset);
    } else if (bytesNeeded == 2) {
   11baa:	2e02      	cmp	r6, #2
   11bac:	d016      	beq.n	11bdc <extract_length+0x68>
        *len =  p->d->get16(p->d, *offset);
    } else if (bytesNeeded == 4) {
   11bae:	2e04      	cmp	r6, #4
   11bb0:	d01a      	beq.n	11be8 <extract_length+0x74>
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
   11bb2:	6838      	ldr	r0, [r7, #0]
   11bb4:	68c3      	ldr	r3, [r0, #12]
   11bb6:	4798      	blx	r3
   11bb8:	4603      	mov	r3, r0
   11bba:	e007      	b.n	11bcc <extract_length+0x58>
        *len = additional_information;
   11bbc:	2000      	movs	r0, #0
   11bbe:	4601      	mov	r1, r0
        return CborNoError;
   11bc0:	e008      	b.n	11bd4 <extract_length+0x60>
        *len = p->d->get8(p->d, *offset);
   11bc2:	6838      	ldr	r0, [r7, #0]
   11bc4:	6803      	ldr	r3, [r0, #0]
   11bc6:	4798      	blx	r3
   11bc8:	4603      	mov	r3, r0
   11bca:	2100      	movs	r1, #0
    }
    *offset += bytesNeeded;
   11bcc:	6822      	ldr	r2, [r4, #0]
   11bce:	4432      	add	r2, r6
   11bd0:	6022      	str	r2, [r4, #0]
    return CborNoError;
   11bd2:	2000      	movs	r0, #0
    if (err) {
   11bd4:	b9c0      	cbnz	r0, 11c08 <extract_length+0x94>
    *len = v;
   11bd6:	602b      	str	r3, [r5, #0]
    if (v != *len)
   11bd8:	b9c9      	cbnz	r1, 11c0e <extract_length+0x9a>
}
   11bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *len =  p->d->get16(p->d, *offset);
   11bdc:	6838      	ldr	r0, [r7, #0]
   11bde:	6843      	ldr	r3, [r0, #4]
   11be0:	4798      	blx	r3
   11be2:	4603      	mov	r3, r0
   11be4:	2100      	movs	r1, #0
   11be6:	e7f1      	b.n	11bcc <extract_length+0x58>
        *len =  p->d->get32(p->d, *offset);
   11be8:	6838      	ldr	r0, [r7, #0]
   11bea:	6883      	ldr	r3, [r0, #8]
   11bec:	4798      	blx	r3
   11bee:	4603      	mov	r3, r0
   11bf0:	2100      	movs	r1, #0
   11bf2:	e7eb      	b.n	11bcc <extract_length+0x58>
    *len = 1;
   11bf4:	2301      	movs	r3, #1
   11bf6:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   11bf8:	f240 1005 	movw	r0, #261	; 0x105
   11bfc:	e7ea      	b.n	11bd4 <extract_length+0x60>
    *len = 1;
   11bfe:	2301      	movs	r3, #1
   11c00:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   11c02:	f240 1001 	movw	r0, #257	; 0x101
   11c06:	e7e5      	b.n	11bd4 <extract_length+0x60>
        *len = 0;
   11c08:	2300      	movs	r3, #0
   11c0a:	602b      	str	r3, [r5, #0]
        return err;
   11c0c:	e7e5      	b.n	11bda <extract_length+0x66>
        return CborErrorDataTooLarge;
   11c0e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   11c12:	e7e2      	b.n	11bda <extract_length+0x66>

00011c14 <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   11c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11c18:	b085      	sub	sp, #20
   11c1a:	4604      	mov	r4, r0
   11c1c:	4689      	mov	r9, r1
   11c1e:	4616      	mov	r6, r2
   11c20:	461d      	mov	r5, r3
{ return value->type == CborByteStringType; }
   11c22:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   11c24:	2b40      	cmp	r3, #64	; 0x40
   11c26:	d001      	beq.n	11c2c <iterate_string_chunks+0x18>
   11c28:	2b60      	cmp	r3, #96	; 0x60
   11c2a:	d10c      	bne.n	11c46 <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   11c2c:	6863      	ldr	r3, [r4, #4]
   11c2e:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   11c30:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   11c32:	f012 0f04 	tst.w	r2, #4
   11c36:	d00c      	beq.n	11c52 <iterate_string_chunks+0x3e>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   11c38:	3301      	adds	r3, #1
   11c3a:	9302      	str	r3, [sp, #8]
        total = 0;
   11c3c:	2300      	movs	r3, #0
   11c3e:	9303      	str	r3, [sp, #12]
        *result = true;
   11c40:	2301      	movs	r3, #1
   11c42:	702b      	strb	r3, [r5, #0]
   11c44:	e048      	b.n	11cd8 <iterate_string_chunks+0xc4>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   11c46:	2300      	movs	r3, #0
   11c48:	461a      	mov	r2, r3
   11c4a:	4619      	mov	r1, r3
   11c4c:	4618      	mov	r0, r3
   11c4e:	f7f7 f981 	bl	8f54 <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   11c52:	aa03      	add	r2, sp, #12
   11c54:	a902      	add	r1, sp, #8
   11c56:	6820      	ldr	r0, [r4, #0]
   11c58:	f7ff ff8c 	bl	11b74 <extract_length>
        if (err)
   11c5c:	4603      	mov	r3, r0
   11c5e:	2800      	cmp	r0, #0
   11c60:	d178      	bne.n	11d54 <iterate_string_chunks+0x140>
        if (total > (size_t)(value->parser->end - offset))
   11c62:	6820      	ldr	r0, [r4, #0]
   11c64:	6843      	ldr	r3, [r0, #4]
   11c66:	9a02      	ldr	r2, [sp, #8]
   11c68:	1a99      	subs	r1, r3, r2
   11c6a:	9b03      	ldr	r3, [sp, #12]
   11c6c:	4299      	cmp	r1, r3
   11c6e:	f0c0 8084 	bcc.w	11d7a <iterate_string_chunks+0x166>
        if (total <= *buflen)
   11c72:	6831      	ldr	r1, [r6, #0]
   11c74:	428b      	cmp	r3, r1
   11c76:	d81e      	bhi.n	11cb6 <iterate_string_chunks+0xa2>
            *result = !!func(value->parser->d, buffer, offset, total);
   11c78:	4649      	mov	r1, r9
   11c7a:	6800      	ldr	r0, [r0, #0]
   11c7c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   11c7e:	47b8      	blx	r7
   11c80:	3800      	subs	r0, #0
   11c82:	bf18      	it	ne
   11c84:	2001      	movne	r0, #1
   11c86:	7028      	strb	r0, [r5, #0]
        offset += total;
   11c88:	9b02      	ldr	r3, [sp, #8]
   11c8a:	9a03      	ldr	r2, [sp, #12]
   11c8c:	4413      	add	r3, r2
   11c8e:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   11c90:	782b      	ldrb	r3, [r5, #0]
   11c92:	b14b      	cbz	r3, 11ca8 <iterate_string_chunks+0x94>
   11c94:	6832      	ldr	r2, [r6, #0]
   11c96:	9b03      	ldr	r3, [sp, #12]
   11c98:	429a      	cmp	r2, r3
   11c9a:	d905      	bls.n	11ca8 <iterate_string_chunks+0x94>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   11c9c:	f1b9 0f00 	cmp.w	r9, #0
   11ca0:	d002      	beq.n	11ca8 <iterate_string_chunks+0x94>
            *(buffer + total) = '\0';
   11ca2:	2200      	movs	r2, #0
   11ca4:	f809 2003 	strb.w	r2, [r9, r3]
        }
    }
    *buflen = total;
   11ca8:	9b03      	ldr	r3, [sp, #12]
   11caa:	6033      	str	r3, [r6, #0]

    if (next) {
   11cac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11cae:	2b00      	cmp	r3, #0
   11cb0:	d157      	bne.n	11d62 <iterate_string_chunks+0x14e>
        *next = *value;
        next->offset = offset;
        return preparse_next_value(next);
    }
    return CborNoError;
   11cb2:	2300      	movs	r3, #0
   11cb4:	e04e      	b.n	11d54 <iterate_string_chunks+0x140>
            *result = false;
   11cb6:	2300      	movs	r3, #0
   11cb8:	702b      	strb	r3, [r5, #0]
   11cba:	e7e5      	b.n	11c88 <iterate_string_chunks+0x74>
                ++offset;
   11cbc:	9b02      	ldr	r3, [sp, #8]
   11cbe:	3301      	adds	r3, #1
   11cc0:	9302      	str	r3, [sp, #8]
                break;
   11cc2:	e7e5      	b.n	11c90 <iterate_string_chunks+0x7c>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   11cc4:	2201      	movs	r2, #1
   11cc6:	e023      	b.n	11d10 <iterate_string_chunks+0xfc>
                *result = false;
   11cc8:	2300      	movs	r3, #0
   11cca:	702b      	strb	r3, [r5, #0]
            offset += chunkLen;
   11ccc:	9b02      	ldr	r3, [sp, #8]
   11cce:	9a01      	ldr	r2, [sp, #4]
   11cd0:	4413      	add	r3, r2
   11cd2:	9302      	str	r3, [sp, #8]
            total = newTotal;
   11cd4:	f8cd 800c 	str.w	r8, [sp, #12]
            if (offset == value->parser->end)
   11cd8:	6823      	ldr	r3, [r4, #0]
   11cda:	685a      	ldr	r2, [r3, #4]
   11cdc:	9902      	ldr	r1, [sp, #8]
   11cde:	428a      	cmp	r2, r1
   11ce0:	d030      	beq.n	11d44 <iterate_string_chunks+0x130>
            val = value->parser->d->get8(value->parser->d, offset);
   11ce2:	6818      	ldr	r0, [r3, #0]
   11ce4:	6803      	ldr	r3, [r0, #0]
   11ce6:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   11ce8:	28ff      	cmp	r0, #255	; 0xff
   11cea:	d0e7      	beq.n	11cbc <iterate_string_chunks+0xa8>
            if ((val & MajorTypeMask) != value->type)
   11cec:	f020 001f 	bic.w	r0, r0, #31
   11cf0:	7ba3      	ldrb	r3, [r4, #14]
   11cf2:	4298      	cmp	r0, r3
   11cf4:	d129      	bne.n	11d4a <iterate_string_chunks+0x136>
            err = extract_length(value->parser, &offset, &chunkLen);
   11cf6:	aa01      	add	r2, sp, #4
   11cf8:	a902      	add	r1, sp, #8
   11cfa:	6820      	ldr	r0, [r4, #0]
   11cfc:	f7ff ff3a 	bl	11b74 <extract_length>
            if (err)
   11d00:	4603      	mov	r3, r0
   11d02:	bb38      	cbnz	r0, 11d54 <iterate_string_chunks+0x140>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   11d04:	9803      	ldr	r0, [sp, #12]
   11d06:	9b01      	ldr	r3, [sp, #4]
   11d08:	2200      	movs	r2, #0
   11d0a:	eb10 0803 	adds.w	r8, r0, r3
   11d0e:	d2d9      	bcs.n	11cc4 <iterate_string_chunks+0xb0>
   11d10:	b9f2      	cbnz	r2, 11d50 <iterate_string_chunks+0x13c>
            if (chunkLen > (size_t)(value->parser->end - offset))
   11d12:	f8d4 c000 	ldr.w	ip, [r4]
   11d16:	f8dc 1004 	ldr.w	r1, [ip, #4]
   11d1a:	9a02      	ldr	r2, [sp, #8]
   11d1c:	1a89      	subs	r1, r1, r2
   11d1e:	428b      	cmp	r3, r1
   11d20:	d81c      	bhi.n	11d5c <iterate_string_chunks+0x148>
            if (*result && *buflen >= newTotal)
   11d22:	7829      	ldrb	r1, [r5, #0]
   11d24:	2900      	cmp	r1, #0
   11d26:	d0cf      	beq.n	11cc8 <iterate_string_chunks+0xb4>
   11d28:	6831      	ldr	r1, [r6, #0]
   11d2a:	4541      	cmp	r1, r8
   11d2c:	d3cc      	bcc.n	11cc8 <iterate_string_chunks+0xb4>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   11d2e:	eb09 0100 	add.w	r1, r9, r0
   11d32:	f8dc 0000 	ldr.w	r0, [ip]
   11d36:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   11d38:	47b8      	blx	r7
   11d3a:	3800      	subs	r0, #0
   11d3c:	bf18      	it	ne
   11d3e:	2001      	movne	r0, #1
   11d40:	7028      	strb	r0, [r5, #0]
   11d42:	e7c3      	b.n	11ccc <iterate_string_chunks+0xb8>
                return CborErrorUnexpectedEOF;
   11d44:	f240 1301 	movw	r3, #257	; 0x101
   11d48:	e004      	b.n	11d54 <iterate_string_chunks+0x140>
                return CborErrorIllegalType;
   11d4a:	f44f 7382 	mov.w	r3, #260	; 0x104
   11d4e:	e001      	b.n	11d54 <iterate_string_chunks+0x140>
                return CborErrorDataTooLarge;
   11d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
}
   11d54:	4618      	mov	r0, r3
   11d56:	b005      	add	sp, #20
   11d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   11d5c:	f240 1301 	movw	r3, #257	; 0x101
   11d60:	e7f8      	b.n	11d54 <iterate_string_chunks+0x140>
        *next = *value;
   11d62:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   11d66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   11d68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   11d6c:	9b02      	ldr	r3, [sp, #8]
   11d6e:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   11d70:	4620      	mov	r0, r4
   11d72:	f7ff feda 	bl	11b2a <preparse_next_value>
   11d76:	4603      	mov	r3, r0
   11d78:	e7ec      	b.n	11d54 <iterate_string_chunks+0x140>
            return CborErrorUnexpectedEOF;
   11d7a:	f240 1301 	movw	r3, #257	; 0x101
   11d7e:	e7e9      	b.n	11d54 <iterate_string_chunks+0x140>

00011d80 <advance_internal>:
{
   11d80:	b570      	push	{r4, r5, r6, lr}
   11d82:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   11d84:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   11d86:	6830      	ldr	r0, [r6, #0]
   11d88:	6803      	ldr	r3, [r0, #0]
   11d8a:	6861      	ldr	r1, [r4, #4]
   11d8c:	4798      	blx	r3
   11d8e:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   11d92:	6863      	ldr	r3, [r4, #4]
   11d94:	3301      	adds	r3, #1
   11d96:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   11d98:	2817      	cmp	r0, #23
   11d9a:	d913      	bls.n	11dc4 <advance_internal+0x44>
    if (unlikely(additional_information > Value64Bit))
   11d9c:	281b      	cmp	r0, #27
   11d9e:	d838      	bhi.n	11e12 <advance_internal+0x92>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   11da0:	3818      	subs	r0, #24
   11da2:	2501      	movs	r5, #1
   11da4:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   11da6:	6873      	ldr	r3, [r6, #4]
   11da8:	6861      	ldr	r1, [r4, #4]
   11daa:	1a5b      	subs	r3, r3, r1
   11dac:	429d      	cmp	r5, r3
   11dae:	d835      	bhi.n	11e1c <advance_internal+0x9c>
    } else if (bytesNeeded == 1) {
   11db0:	2d01      	cmp	r5, #1
   11db2:	d00a      	beq.n	11dca <advance_internal+0x4a>
    } else if (bytesNeeded == 2) {
   11db4:	2d02      	cmp	r5, #2
   11db6:	d022      	beq.n	11dfe <advance_internal+0x7e>
    } else if (bytesNeeded == 4) {
   11db8:	2d04      	cmp	r5, #4
   11dba:	d025      	beq.n	11e08 <advance_internal+0x88>
        *len =  p->d->get64(p->d, *offset);
   11dbc:	6830      	ldr	r0, [r6, #0]
   11dbe:	68c3      	ldr	r3, [r0, #12]
   11dc0:	4798      	blx	r3
   11dc2:	e006      	b.n	11dd2 <advance_internal+0x52>
        *len = additional_information;
   11dc4:	2300      	movs	r3, #0
   11dc6:	4619      	mov	r1, r3
        return CborNoError;
   11dc8:	e007      	b.n	11dda <advance_internal+0x5a>
        *len = p->d->get8(p->d, *offset);
   11dca:	6830      	ldr	r0, [r6, #0]
   11dcc:	6803      	ldr	r3, [r0, #0]
   11dce:	4798      	blx	r3
   11dd0:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   11dd2:	6863      	ldr	r3, [r4, #4]
   11dd4:	442b      	add	r3, r5
   11dd6:	6063      	str	r3, [r4, #4]
    return CborNoError;
   11dd8:	2300      	movs	r3, #0
    assert(err == CborNoError);
   11dda:	bb23      	cbnz	r3, 11e26 <advance_internal+0xa6>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   11ddc:	7ba3      	ldrb	r3, [r4, #14]
   11dde:	2b40      	cmp	r3, #64	; 0x40
   11de0:	d001      	beq.n	11de6 <advance_internal+0x66>
   11de2:	2b60      	cmp	r3, #96	; 0x60
   11de4:	d107      	bne.n	11df6 <advance_internal+0x76>
        assert(length == (size_t)length);
   11de6:	bb21      	cbnz	r1, 11e32 <advance_internal+0xb2>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   11de8:	7be3      	ldrb	r3, [r4, #15]
   11dea:	f013 0f04 	tst.w	r3, #4
   11dee:	d126      	bne.n	11e3e <advance_internal+0xbe>
        it->offset += length;
   11df0:	6863      	ldr	r3, [r4, #4]
   11df2:	4418      	add	r0, r3
   11df4:	6060      	str	r0, [r4, #4]
    return preparse_next_value(it);
   11df6:	4620      	mov	r0, r4
   11df8:	f7ff fe97 	bl	11b2a <preparse_next_value>
}
   11dfc:	bd70      	pop	{r4, r5, r6, pc}
        *len =  p->d->get16(p->d, *offset);
   11dfe:	6830      	ldr	r0, [r6, #0]
   11e00:	6843      	ldr	r3, [r0, #4]
   11e02:	4798      	blx	r3
   11e04:	2100      	movs	r1, #0
   11e06:	e7e4      	b.n	11dd2 <advance_internal+0x52>
        *len =  p->d->get32(p->d, *offset);
   11e08:	6830      	ldr	r0, [r6, #0]
   11e0a:	6883      	ldr	r3, [r0, #8]
   11e0c:	4798      	blx	r3
   11e0e:	2100      	movs	r1, #0
   11e10:	e7df      	b.n	11dd2 <advance_internal+0x52>
    *len = 1;
   11e12:	2001      	movs	r0, #1
   11e14:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   11e16:	f240 1305 	movw	r3, #261	; 0x105
   11e1a:	e7de      	b.n	11dda <advance_internal+0x5a>
    *len = 1;
   11e1c:	2001      	movs	r0, #1
   11e1e:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   11e20:	f240 1301 	movw	r3, #257	; 0x101
   11e24:	e7d9      	b.n	11dda <advance_internal+0x5a>
    assert(err == CborNoError);
   11e26:	2300      	movs	r3, #0
   11e28:	461a      	mov	r2, r3
   11e2a:	4619      	mov	r1, r3
   11e2c:	4618      	mov	r0, r3
   11e2e:	f7f7 f891 	bl	8f54 <__assert_func>
        assert(length == (size_t)length);
   11e32:	2300      	movs	r3, #0
   11e34:	461a      	mov	r2, r3
   11e36:	4619      	mov	r1, r3
   11e38:	4618      	mov	r0, r3
   11e3a:	f7f7 f88b 	bl	8f54 <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   11e3e:	2300      	movs	r3, #0
   11e40:	461a      	mov	r2, r3
   11e42:	4619      	mov	r1, r3
   11e44:	4618      	mov	r0, r3
   11e46:	f7f7 f885 	bl	8f54 <__assert_func>

00011e4a <_cbor_value_decode_int64_internal>:
{
   11e4a:	b510      	push	{r4, lr}
   11e4c:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   11e4e:	6803      	ldr	r3, [r0, #0]
   11e50:	6818      	ldr	r0, [r3, #0]
   11e52:	6803      	ldr	r3, [r0, #0]
   11e54:	6861      	ldr	r1, [r4, #4]
   11e56:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   11e58:	7be3      	ldrb	r3, [r4, #15]
   11e5a:	f013 0f01 	tst.w	r3, #1
   11e5e:	d104      	bne.n	11e6a <_cbor_value_decode_int64_internal+0x20>
   11e60:	7ba3      	ldrb	r3, [r4, #14]
   11e62:	2bfa      	cmp	r3, #250	; 0xfa
   11e64:	d001      	beq.n	11e6a <_cbor_value_decode_int64_internal+0x20>
   11e66:	2bfb      	cmp	r3, #251	; 0xfb
   11e68:	d111      	bne.n	11e8e <_cbor_value_decode_int64_internal+0x44>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   11e6a:	f000 031e 	and.w	r3, r0, #30
   11e6e:	2b1a      	cmp	r3, #26
   11e70:	d113      	bne.n	11e9a <_cbor_value_decode_int64_internal+0x50>
    if ((val & 1) == (Value32Bit & 1))
   11e72:	f010 0f01 	tst.w	r0, #1
   11e76:	d016      	beq.n	11ea6 <_cbor_value_decode_int64_internal+0x5c>
    assert((val & SmallValueMask) == Value64Bit);
   11e78:	f000 001f 	and.w	r0, r0, #31
   11e7c:	281b      	cmp	r0, #27
   11e7e:	d11a      	bne.n	11eb6 <_cbor_value_decode_int64_internal+0x6c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   11e80:	6823      	ldr	r3, [r4, #0]
   11e82:	6818      	ldr	r0, [r3, #0]
   11e84:	68c3      	ldr	r3, [r0, #12]
   11e86:	6861      	ldr	r1, [r4, #4]
   11e88:	3101      	adds	r1, #1
   11e8a:	4798      	blx	r3
}
   11e8c:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   11e8e:	2300      	movs	r3, #0
   11e90:	461a      	mov	r2, r3
   11e92:	4619      	mov	r1, r3
   11e94:	4618      	mov	r0, r3
   11e96:	f7f7 f85d 	bl	8f54 <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   11e9a:	2300      	movs	r3, #0
   11e9c:	461a      	mov	r2, r3
   11e9e:	4619      	mov	r1, r3
   11ea0:	4618      	mov	r0, r3
   11ea2:	f7f7 f857 	bl	8f54 <__assert_func>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   11ea6:	6823      	ldr	r3, [r4, #0]
   11ea8:	6818      	ldr	r0, [r3, #0]
   11eaa:	6883      	ldr	r3, [r0, #8]
   11eac:	6861      	ldr	r1, [r4, #4]
   11eae:	3101      	adds	r1, #1
   11eb0:	4798      	blx	r3
   11eb2:	2100      	movs	r1, #0
   11eb4:	e7ea      	b.n	11e8c <_cbor_value_decode_int64_internal+0x42>
    assert((val & SmallValueMask) == Value64Bit);
   11eb6:	2300      	movs	r3, #0
   11eb8:	461a      	mov	r2, r3
   11eba:	4619      	mov	r1, r3
   11ebc:	4618      	mov	r0, r3
   11ebe:	f7f7 f849 	bl	8f54 <__assert_func>

00011ec2 <cbor_parser_init>:
{
   11ec2:	b510      	push	{r4, lr}
   11ec4:	4604      	mov	r4, r0
   11ec6:	4618      	mov	r0, r3
    memset(parser, 0, sizeof(*parser));
   11ec8:	2300      	movs	r3, #0
   11eca:	6013      	str	r3, [r2, #0]
   11ecc:	6053      	str	r3, [r2, #4]
   11ece:	6093      	str	r3, [r2, #8]
    parser->d = d;
   11ed0:	6014      	str	r4, [r2, #0]
    parser->end = d->message_size;
   11ed2:	69a4      	ldr	r4, [r4, #24]
   11ed4:	6054      	str	r4, [r2, #4]
    parser->flags = flags;
   11ed6:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   11ed8:	6002      	str	r2, [r0, #0]
    it->offset = 0;
   11eda:	6043      	str	r3, [r0, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   11edc:	2301      	movs	r3, #1
   11ede:	6083      	str	r3, [r0, #8]
    return preparse_value(it);
   11ee0:	f7ff fd89 	bl	119f6 <preparse_value>
}
   11ee4:	bd10      	pop	{r4, pc}

00011ee6 <cbor_value_enter_container>:
{
   11ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ee8:	4605      	mov	r5, r0
   11eea:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   11eec:	7b83      	ldrb	r3, [r0, #14]
   11eee:	2b80      	cmp	r3, #128	; 0x80
   11ef0:	d021      	beq.n	11f36 <cbor_value_enter_container+0x50>
   11ef2:	2ba0      	cmp	r3, #160	; 0xa0
   11ef4:	d01d      	beq.n	11f32 <cbor_value_enter_container+0x4c>
   11ef6:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   11ef8:	b1fb      	cbz	r3, 11f3a <cbor_value_enter_container+0x54>
    *recursed = *it;
   11efa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   11efe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   11f02:	7beb      	ldrb	r3, [r5, #15]
   11f04:	f013 0f04 	tst.w	r3, #4
   11f08:	d01c      	beq.n	11f44 <cbor_value_enter_container+0x5e>
        recursed->remaining = UINT32_MAX;
   11f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11f0e:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   11f10:	460b      	mov	r3, r1
   11f12:	3301      	adds	r3, #1
   11f14:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   11f16:	4620      	mov	r0, r4
   11f18:	f7ff fd6d 	bl	119f6 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   11f1c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   11f20:	d106      	bne.n	11f30 <cbor_value_enter_container+0x4a>
        ++recursed->offset;
   11f22:	6863      	ldr	r3, [r4, #4]
   11f24:	3301      	adds	r3, #1
   11f26:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   11f28:	23ff      	movs	r3, #255	; 0xff
   11f2a:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   11f2c:	2000      	movs	r0, #0
   11f2e:	60a0      	str	r0, [r4, #8]
}
   11f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11f32:	2301      	movs	r3, #1
   11f34:	e7e0      	b.n	11ef8 <cbor_value_enter_container+0x12>
   11f36:	2301      	movs	r3, #1
   11f38:	e7de      	b.n	11ef8 <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   11f3a:	461a      	mov	r2, r3
   11f3c:	4619      	mov	r1, r3
   11f3e:	4618      	mov	r0, r3
   11f40:	f7f7 f808 	bl	8f54 <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   11f44:	6827      	ldr	r7, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   11f46:	6838      	ldr	r0, [r7, #0]
   11f48:	6803      	ldr	r3, [r0, #0]
   11f4a:	6861      	ldr	r1, [r4, #4]
   11f4c:	4798      	blx	r3
   11f4e:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   11f52:	6863      	ldr	r3, [r4, #4]
   11f54:	3301      	adds	r3, #1
   11f56:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   11f58:	2817      	cmp	r0, #23
   11f5a:	d913      	bls.n	11f84 <cbor_value_enter_container+0x9e>
    if (unlikely(additional_information > Value64Bit))
   11f5c:	281b      	cmp	r0, #27
   11f5e:	d838      	bhi.n	11fd2 <cbor_value_enter_container+0xec>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   11f60:	3818      	subs	r0, #24
   11f62:	2601      	movs	r6, #1
   11f64:	4086      	lsls	r6, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   11f66:	687b      	ldr	r3, [r7, #4]
   11f68:	6861      	ldr	r1, [r4, #4]
   11f6a:	1a5b      	subs	r3, r3, r1
   11f6c:	429e      	cmp	r6, r3
   11f6e:	d835      	bhi.n	11fdc <cbor_value_enter_container+0xf6>
    } else if (bytesNeeded == 1) {
   11f70:	2e01      	cmp	r6, #1
   11f72:	d00a      	beq.n	11f8a <cbor_value_enter_container+0xa4>
    } else if (bytesNeeded == 2) {
   11f74:	2e02      	cmp	r6, #2
   11f76:	d022      	beq.n	11fbe <cbor_value_enter_container+0xd8>
    } else if (bytesNeeded == 4) {
   11f78:	2e04      	cmp	r6, #4
   11f7a:	d025      	beq.n	11fc8 <cbor_value_enter_container+0xe2>
        *len =  p->d->get64(p->d, *offset);
   11f7c:	6838      	ldr	r0, [r7, #0]
   11f7e:	68c3      	ldr	r3, [r0, #12]
   11f80:	4798      	blx	r3
   11f82:	e006      	b.n	11f92 <cbor_value_enter_container+0xac>
        *len = additional_information;
   11f84:	2300      	movs	r3, #0
   11f86:	4619      	mov	r1, r3
        return CborNoError;
   11f88:	e007      	b.n	11f9a <cbor_value_enter_container+0xb4>
        *len = p->d->get8(p->d, *offset);
   11f8a:	6838      	ldr	r0, [r7, #0]
   11f8c:	6803      	ldr	r3, [r0, #0]
   11f8e:	4798      	blx	r3
   11f90:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   11f92:	6863      	ldr	r3, [r4, #4]
   11f94:	4433      	add	r3, r6
   11f96:	6063      	str	r3, [r4, #4]
    return CborNoError;
   11f98:	2300      	movs	r3, #0
        assert(err == CborNoError);
   11f9a:	bb23      	cbnz	r3, 11fe6 <cbor_value_enter_container+0x100>
        recursed->remaining = (uint32_t)len;
   11f9c:	60a0      	str	r0, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   11f9e:	bb41      	cbnz	r1, 11ff2 <cbor_value_enter_container+0x10c>
   11fa0:	2900      	cmp	r1, #0
   11fa2:	bf08      	it	eq
   11fa4:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   11fa8:	d023      	beq.n	11ff2 <cbor_value_enter_container+0x10c>
        if (recursed->type == CborMapType) {
   11faa:	7ba2      	ldrb	r2, [r4, #14]
   11fac:	2aa0      	cmp	r2, #160	; 0xa0
   11fae:	d025      	beq.n	11ffc <cbor_value_enter_container+0x116>
        if (len != 0)
   11fb0:	ea50 0301 	orrs.w	r3, r0, r1
   11fb4:	d0b8      	beq.n	11f28 <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   11fb6:	4620      	mov	r0, r4
   11fb8:	f7ff fd1d 	bl	119f6 <preparse_value>
   11fbc:	e7b8      	b.n	11f30 <cbor_value_enter_container+0x4a>
        *len =  p->d->get16(p->d, *offset);
   11fbe:	6838      	ldr	r0, [r7, #0]
   11fc0:	6843      	ldr	r3, [r0, #4]
   11fc2:	4798      	blx	r3
   11fc4:	2100      	movs	r1, #0
   11fc6:	e7e4      	b.n	11f92 <cbor_value_enter_container+0xac>
        *len =  p->d->get32(p->d, *offset);
   11fc8:	6838      	ldr	r0, [r7, #0]
   11fca:	6883      	ldr	r3, [r0, #8]
   11fcc:	4798      	blx	r3
   11fce:	2100      	movs	r1, #0
   11fd0:	e7df      	b.n	11f92 <cbor_value_enter_container+0xac>
    *len = 1;
   11fd2:	2001      	movs	r0, #1
   11fd4:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   11fd6:	f240 1305 	movw	r3, #261	; 0x105
   11fda:	e7de      	b.n	11f9a <cbor_value_enter_container+0xb4>
    *len = 1;
   11fdc:	2001      	movs	r0, #1
   11fde:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   11fe0:	f240 1301 	movw	r3, #257	; 0x101
   11fe4:	e7d9      	b.n	11f9a <cbor_value_enter_container+0xb4>
        assert(err == CborNoError);
   11fe6:	2300      	movs	r3, #0
   11fe8:	461a      	mov	r2, r3
   11fea:	4619      	mov	r1, r3
   11fec:	4618      	mov	r0, r3
   11fee:	f7f6 ffb1 	bl	8f54 <__assert_func>
            recursed->offset = it->offset;
   11ff2:	686b      	ldr	r3, [r5, #4]
   11ff4:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   11ff6:	f44f 6080 	mov.w	r0, #1024	; 0x400
   11ffa:	e799      	b.n	11f30 <cbor_value_enter_container+0x4a>
            if (recursed->remaining > UINT32_MAX / 2) {
   11ffc:	2800      	cmp	r0, #0
   11ffe:	db02      	blt.n	12006 <cbor_value_enter_container+0x120>
            recursed->remaining *= 2;
   12000:	0043      	lsls	r3, r0, #1
   12002:	60a3      	str	r3, [r4, #8]
   12004:	e7d4      	b.n	11fb0 <cbor_value_enter_container+0xca>
                recursed->offset = it->offset;
   12006:	686b      	ldr	r3, [r5, #4]
   12008:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   1200a:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1200e:	e78f      	b.n	11f30 <cbor_value_enter_container+0x4a>

00012010 <cbor_value_leave_container>:
{
   12010:	b508      	push	{r3, lr}
   12012:	7b83      	ldrb	r3, [r0, #14]
   12014:	2b80      	cmp	r3, #128	; 0x80
   12016:	d00d      	beq.n	12034 <cbor_value_leave_container+0x24>
   12018:	2ba0      	cmp	r3, #160	; 0xa0
   1201a:	d009      	beq.n	12030 <cbor_value_leave_container+0x20>
   1201c:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   1201e:	b15b      	cbz	r3, 12038 <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   12020:	7b8b      	ldrb	r3, [r1, #14]
   12022:	2bff      	cmp	r3, #255	; 0xff
   12024:	d10d      	bne.n	12042 <cbor_value_leave_container+0x32>
    it->offset = recursed->offset;
   12026:	684b      	ldr	r3, [r1, #4]
   12028:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   1202a:	f7ff fd7e 	bl	11b2a <preparse_next_value>
}
   1202e:	bd08      	pop	{r3, pc}
   12030:	2301      	movs	r3, #1
   12032:	e7f4      	b.n	1201e <cbor_value_leave_container+0xe>
   12034:	2301      	movs	r3, #1
   12036:	e7f2      	b.n	1201e <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   12038:	461a      	mov	r2, r3
   1203a:	4619      	mov	r1, r3
   1203c:	4618      	mov	r0, r3
   1203e:	f7f6 ff89 	bl	8f54 <__assert_func>
    assert(recursed->type == CborInvalidType);
   12042:	2300      	movs	r3, #0
   12044:	461a      	mov	r2, r3
   12046:	4619      	mov	r1, r3
   12048:	4618      	mov	r0, r3
   1204a:	f7f6 ff83 	bl	8f54 <__assert_func>
	...

00012050 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   12050:	b500      	push	{lr}
   12052:	b085      	sub	sp, #20
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   12054:	468c      	mov	ip, r1
   12056:	b181      	cbz	r1, 1207a <_cbor_value_copy_string+0x2a>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   12058:	6801      	ldr	r1, [r0, #0]
   1205a:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   1205c:	6949      	ldr	r1, [r1, #20]
   1205e:	9101      	str	r1, [sp, #4]
   12060:	9300      	str	r3, [sp, #0]
   12062:	f10d 030f 	add.w	r3, sp, #15
   12066:	4661      	mov	r1, ip
   12068:	f7ff fdd4 	bl	11c14 <iterate_string_chunks>
    return err ? err :
   1206c:	b910      	cbnz	r0, 12074 <_cbor_value_copy_string+0x24>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   1206e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    return err ? err :
   12072:	b123      	cbz	r3, 1207e <_cbor_value_copy_string+0x2e>
}
   12074:	b005      	add	sp, #20
   12076:	f85d fb04 	ldr.w	pc, [sp], #4
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   1207a:	4902      	ldr	r1, [pc, #8]	; (12084 <_cbor_value_copy_string+0x34>)
   1207c:	e7ef      	b.n	1205e <_cbor_value_copy_string+0xe>
    return err ? err :
   1207e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   12082:	e7f7      	b.n	12074 <_cbor_value_copy_string+0x24>
   12084:	000119f3 	.word	0x000119f3

00012088 <advance_recursive>:
{
   12088:	b570      	push	{r4, r5, r6, lr}
   1208a:	b086      	sub	sp, #24
   1208c:	4604      	mov	r4, r0
   1208e:	460d      	mov	r5, r1
    if (is_fixed_type(it->type))
   12090:	7b86      	ldrb	r6, [r0, #14]
   12092:	4630      	mov	r0, r6
   12094:	f7ff fc9b 	bl	119ce <is_fixed_type>
   12098:	b9c0      	cbnz	r0, 120cc <advance_recursive+0x44>
   1209a:	2e80      	cmp	r6, #128	; 0x80
   1209c:	d01f      	beq.n	120de <advance_recursive+0x56>
   1209e:	2ea0      	cmp	r6, #160	; 0xa0
   120a0:	d01b      	beq.n	120da <advance_recursive+0x52>
   120a2:	2300      	movs	r3, #0
    if (!cbor_value_is_container(it)) {
   120a4:	b1eb      	cbz	r3, 120e2 <advance_recursive+0x5a>
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
   120a6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   120aa:	d02b      	beq.n	12104 <advance_recursive+0x7c>
    err = cbor_value_enter_container(it, &recursed);
   120ac:	a902      	add	r1, sp, #8
   120ae:	4620      	mov	r0, r4
   120b0:	f7ff ff19 	bl	11ee6 <cbor_value_enter_container>
    if (err)
   120b4:	4603      	mov	r3, r0
   120b6:	b968      	cbnz	r0, 120d4 <advance_recursive+0x4c>
{ return it->remaining == 0; }
   120b8:	9b04      	ldr	r3, [sp, #16]
    while (!cbor_value_at_end(&recursed)) {
   120ba:	b1eb      	cbz	r3, 120f8 <advance_recursive+0x70>
        err = advance_recursive(&recursed, nestingLevel + 1);
   120bc:	1c69      	adds	r1, r5, #1
   120be:	a802      	add	r0, sp, #8
   120c0:	f7ff ffe2 	bl	12088 <advance_recursive>
        if (err)
   120c4:	4603      	mov	r3, r0
   120c6:	2800      	cmp	r0, #0
   120c8:	d0f6      	beq.n	120b8 <advance_recursive+0x30>
   120ca:	e003      	b.n	120d4 <advance_recursive+0x4c>
        return advance_internal(it);
   120cc:	4620      	mov	r0, r4
   120ce:	f7ff fe57 	bl	11d80 <advance_internal>
   120d2:	4603      	mov	r3, r0
}
   120d4:	4618      	mov	r0, r3
   120d6:	b006      	add	sp, #24
   120d8:	bd70      	pop	{r4, r5, r6, pc}
{ return it->type == CborArrayType || it->type == CborMapType; }
   120da:	2301      	movs	r3, #1
   120dc:	e7e2      	b.n	120a4 <advance_recursive+0x1c>
   120de:	2301      	movs	r3, #1
   120e0:	e7e0      	b.n	120a4 <advance_recursive+0x1c>
        size_t len = SIZE_MAX;
   120e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   120e6:	9301      	str	r3, [sp, #4]
        return _cbor_value_copy_string(it, NULL, &len, it);
   120e8:	4623      	mov	r3, r4
   120ea:	aa01      	add	r2, sp, #4
   120ec:	2100      	movs	r1, #0
   120ee:	4620      	mov	r0, r4
   120f0:	f7ff ffae 	bl	12050 <_cbor_value_copy_string>
   120f4:	4603      	mov	r3, r0
   120f6:	e7ed      	b.n	120d4 <advance_recursive+0x4c>
    return cbor_value_leave_container(it, &recursed);
   120f8:	a902      	add	r1, sp, #8
   120fa:	4620      	mov	r0, r4
   120fc:	f7ff ff88 	bl	12010 <cbor_value_leave_container>
   12100:	4603      	mov	r3, r0
   12102:	e7e7      	b.n	120d4 <advance_recursive+0x4c>
        return CborErrorNestingTooDeep;
   12104:	f240 4301 	movw	r3, #1025	; 0x401
   12108:	e7e4      	b.n	120d4 <advance_recursive+0x4c>

0001210a <cbor_value_advance>:
{
   1210a:	b508      	push	{r3, lr}
    assert(it->type != CborInvalidType);
   1210c:	7b83      	ldrb	r3, [r0, #14]
   1210e:	2bff      	cmp	r3, #255	; 0xff
   12110:	d005      	beq.n	1211e <cbor_value_advance+0x14>
    if (!it->remaining)
   12112:	6883      	ldr	r3, [r0, #8]
   12114:	b14b      	cbz	r3, 1212a <cbor_value_advance+0x20>
    return advance_recursive(it, 0);
   12116:	2100      	movs	r1, #0
   12118:	f7ff ffb6 	bl	12088 <advance_recursive>
}
   1211c:	bd08      	pop	{r3, pc}
    assert(it->type != CborInvalidType);
   1211e:	2300      	movs	r3, #0
   12120:	461a      	mov	r2, r3
   12122:	4619      	mov	r1, r3
   12124:	4618      	mov	r0, r3
   12126:	f7f6 ff15 	bl	8f54 <__assert_func>
        return CborErrorAdvancePastEOF;
   1212a:	2003      	movs	r0, #3
   1212c:	e7f6      	b.n	1211c <cbor_value_advance+0x12>

0001212e <cbor_value_calculate_string_length>:
{
   1212e:	b508      	push	{r3, lr}
   12130:	460a      	mov	r2, r1
    *len = SIZE_MAX;
   12132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12136:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
   12138:	2300      	movs	r3, #0
   1213a:	4619      	mov	r1, r3
   1213c:	f7ff ff88 	bl	12050 <_cbor_value_copy_string>
}
   12140:	bd08      	pop	{r3, pc}
	...

00012144 <hal_bsp_flash_dev>:


const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    switch (id) {
   12144:	b908      	cbnz	r0, 1214a <hal_bsp_flash_dev+0x6>
    case 0:
        /* MCU internal flash. */
        return &nrf52k_flash_dev;
   12146:	4802      	ldr	r0, [pc, #8]	; (12150 <hal_bsp_flash_dev+0xc>)
   12148:	4770      	bx	lr
    default:
        /* External flash.  Assume not present in this BSP. */
        return NULL;
   1214a:	2000      	movs	r0, #0
    }
}
   1214c:	4770      	bx	lr
   1214e:	bf00      	nop
   12150:	00023510 	.word	0x00023510

00012154 <hal_bsp_init>:
}


void
hal_bsp_init(void)
{
   12154:	b500      	push	{lr}
   12156:	b083      	sub	sp, #12
    int rc;

    (void)rc;

    /* Make sure system clocks have started */
    hal_system_clock_start();
   12158:	f7f6 f850 	bl	81fc <hal_system_clock_start>

    /* Create all available nRF52832 peripherals */
    nrf52_periph_create();
   1215c:	f006 f9e6 	bl	1852c <nrf52_periph_create>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   12160:	2101      	movs	r1, #1
   12162:	4811      	ldr	r0, [pc, #68]	; (121a8 <hal_bsp_init+0x54>)
   12164:	f7f7 fe00 	bl	9d68 <os_sem_init>

#if MYNEWT_VAL(SPI_0_MASTER)
    rc = dpl_sem_init(&g_spi0_sem, 0x1);
    assert(rc == 0);
   12168:	b988      	cbnz	r0, 1218e <hal_bsp_init+0x3a>
#endif

#if MYNEWT_VAL(DW1000_DEVICE_0)
    dw1000_0 = hal_dw1000_inst(0);
   1216a:	2000      	movs	r0, #0
   1216c:	f000 feac 	bl	12ec8 <hal_dw1000_inst>
   12170:	4b0e      	ldr	r3, [pc, #56]	; (121ac <hal_bsp_init+0x58>)
   12172:	6018      	str	r0, [r3, #0]
    rc = os_dev_create((struct os_dev *) dw1000_0, "dw1000_0",
   12174:	4b0e      	ldr	r3, [pc, #56]	; (121b0 <hal_bsp_init+0x5c>)
   12176:	9301      	str	r3, [sp, #4]
   12178:	4b0e      	ldr	r3, [pc, #56]	; (121b4 <hal_bsp_init+0x60>)
   1217a:	9300      	str	r3, [sp, #0]
   1217c:	2300      	movs	r3, #0
   1217e:	2201      	movs	r2, #1
   12180:	490d      	ldr	r1, [pc, #52]	; (121b8 <hal_bsp_init+0x64>)
   12182:	f7f7 f981 	bl	9488 <os_dev_create>
      OS_DEV_INIT_PRIMARY, 0, dw1000_dev_init, (void *)&dw1000_0_cfg);
    assert(rc == 0);
   12186:	b940      	cbnz	r0, 1219a <hal_bsp_init+0x46>
#endif
}
   12188:	b003      	add	sp, #12
   1218a:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   1218e:	2300      	movs	r3, #0
   12190:	461a      	mov	r2, r3
   12192:	4619      	mov	r1, r3
   12194:	4618      	mov	r0, r3
   12196:	f7f6 fedd 	bl	8f54 <__assert_func>
    assert(rc == 0);
   1219a:	2300      	movs	r3, #0
   1219c:	461a      	mov	r2, r3
   1219e:	4619      	mov	r1, r3
   121a0:	4618      	mov	r0, r3
   121a2:	f7f6 fed7 	bl	8f54 <__assert_func>
   121a6:	bf00      	nop
   121a8:	200065d4 	.word	0x200065d4
   121ac:	200065d0 	.word	0x200065d0
   121b0:	00022840 	.word	0x00022840
   121b4:	00012ca5 	.word	0x00012ca5
   121b8:	00022834 	.word	0x00022834

000121bc <uwb_dw1000_read_sts_rxtime>:
inline static uint64_t
uwb_dw1000_read_sts_rxtime(struct uwb_dev* __attribute((unused)) dev)
{
    /* No such functionality */
    return 0xffffffffffffffffULL;
}
   121bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   121c4:	4770      	bx	lr

000121c6 <uwb_dw1000_hal_noblock_wait>:
{
   121c6:	b508      	push	{r3, lr}
    return hal_dw1000_rw_noblock_wait((dw1000_dev_instance_t *)dev, timeout);
   121c8:	f001 fade 	bl	13788 <hal_dw1000_rw_noblock_wait>
}
   121cc:	bd08      	pop	{r3, pc}

000121ce <uwb_dw1000_mac_framefilter>:
    assert(0);
}

struct uwb_dev_status
uwb_dw1000_mac_framefilter(struct uwb_dev * dev, uint16_t enable)
{
   121ce:	b508      	push	{r3, lr}
   121d0:	460b      	mov	r3, r1
    uint16_t dw1k_en = 0;

    /* Translate uwb-level frame filtering flags to dw1000 reg */
    if (enable & UWB_FF_BEACON_EN) dw1k_en |= DWT_FF_BEACON_EN;
   121d2:	f011 0101 	ands.w	r1, r1, #1
   121d6:	d000      	beq.n	121da <uwb_dw1000_mac_framefilter+0xc>
   121d8:	2104      	movs	r1, #4
    if (enable & UWB_FF_DATA_EN)   dw1k_en |= DWT_FF_DATA_EN;
   121da:	f013 0f02 	tst.w	r3, #2
   121de:	d001      	beq.n	121e4 <uwb_dw1000_mac_framefilter+0x16>
   121e0:	f041 0108 	orr.w	r1, r1, #8
    if (enable & UWB_FF_ACK_EN)    dw1k_en |= DWT_FF_ACK_EN;
   121e4:	f013 0f04 	tst.w	r3, #4
   121e8:	d001      	beq.n	121ee <uwb_dw1000_mac_framefilter+0x20>
   121ea:	f041 0110 	orr.w	r1, r1, #16
    if (enable & UWB_FF_MAC_EN)    dw1k_en |= DWT_FF_MAC_EN;
   121ee:	f013 0f08 	tst.w	r3, #8
   121f2:	d001      	beq.n	121f8 <uwb_dw1000_mac_framefilter+0x2a>
   121f4:	f041 0120 	orr.w	r1, r1, #32
    if (enable & UWB_FF_RSVD_EN)   dw1k_en |= DWT_FF_RSVD_EN;
   121f8:	f013 0f10 	tst.w	r3, #16
   121fc:	d001      	beq.n	12202 <uwb_dw1000_mac_framefilter+0x34>
   121fe:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    if (enable & UWB_FF_COORD_EN)  dw1k_en |= DWT_FF_COORD_EN;
   12202:	f413 7f80 	tst.w	r3, #256	; 0x100
   12206:	d001      	beq.n	1220c <uwb_dw1000_mac_framefilter+0x3e>
   12208:	f041 0102 	orr.w	r1, r1, #2

    return dw1000_mac_framefilter((dw1000_dev_instance_t *)dev, dw1k_en);
   1220c:	f001 ff36 	bl	1407c <dw1000_mac_framefilter>
}
   12210:	bd08      	pop	{r3, pc}

00012212 <uwb_dw1000_set_autoack>:

struct uwb_dev_status
uwb_dw1000_set_autoack(struct uwb_dev * dev, bool enable)
{
   12212:	b508      	push	{r3, lr}
    return dw1000_set_autoack((dw1000_dev_instance_t *)dev, enable);
   12214:	f001 ff72 	bl	140fc <dw1000_set_autoack>
}
   12218:	bd08      	pop	{r3, pc}

0001221a <uwb_dw1000_set_autoack_delay>:

struct uwb_dev_status
uwb_dw1000_set_autoack_delay(struct uwb_dev * dev, uint8_t delay)
{
   1221a:	b508      	push	{r3, lr}
    return dw1000_set_autoack_delay((dw1000_dev_instance_t *)dev, delay);
   1221c:	f001 ffba 	bl	14194 <dw1000_set_autoack_delay>
}
   12220:	bd08      	pop	{r3, pc}

00012222 <uwb_dw1000_event_cnt_ctrl>:

struct uwb_dev_status
uwb_dw1000_event_cnt_ctrl(struct uwb_dev * dev, bool enable, bool reset)
{
   12222:	b508      	push	{r3, lr}
    return dw1000_phy_event_cnt_ctrl((dw1000_dev_instance_t *)dev, enable, reset);
   12224:	f003 fee3 	bl	15fee <dw1000_phy_event_cnt_ctrl>
}
   12228:	bd08      	pop	{r3, pc}

0001222a <uwb_dw1000_event_cnt_read>:

struct uwb_dev_status
uwb_dw1000_event_cnt_read(struct uwb_dev * dev, struct uwb_dev_evcnt *res)
{
   1222a:	b508      	push	{r3, lr}
    return dw1000_phy_event_cnt_read((dw1000_dev_instance_t *)dev, res);
   1222c:	f003 ff02 	bl	16034 <dw1000_phy_event_cnt_read>
}
   12230:	bd08      	pop	{r3, pc}
	...

00012234 <uwb_dw1000_calc_pdoa>:
{
   12234:	b508      	push	{r3, lr}
    printf("%s not implemented\n", __func__);
   12236:	4905      	ldr	r1, [pc, #20]	; (1224c <uwb_dw1000_calc_pdoa+0x18>)
   12238:	4805      	ldr	r0, [pc, #20]	; (12250 <uwb_dw1000_calc_pdoa+0x1c>)
   1223a:	f7fa fb3b 	bl	c8b4 <printf>
    assert(0);
   1223e:	2300      	movs	r3, #0
   12240:	461a      	mov	r2, r3
   12242:	4619      	mov	r1, r3
   12244:	4618      	mov	r0, r3
   12246:	f7f6 fe85 	bl	8f54 <__assert_func>
   1224a:	bf00      	nop
   1224c:	00022898 	.word	0x00022898
   12250:	00022858 	.word	0x00022858

00012254 <uwb_dw1000_estimate_los>:
{
   12254:	b508      	push	{r3, lr}
    return dw1000_estimate_los(rssi, fppl);
   12256:	f003 f987 	bl	15568 <dw1000_estimate_los>
}
   1225a:	bd08      	pop	{r3, pc}

0001225c <uwb_dw1000_calc_fppl>:
{
   1225c:	b508      	push	{r3, lr}
    return dw1000_calc_fppl((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
   1225e:	f003 f8e7 	bl	15430 <dw1000_calc_fppl>
}
   12262:	bd08      	pop	{r3, pc}

00012264 <uwb_dw1000_calc_seq_rssi>:
{
   12264:	b508      	push	{r3, lr}
    return dw1000_calc_rssi((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
   12266:	f003 f93f 	bl	154e8 <dw1000_calc_rssi>
}
   1226a:	bd08      	pop	{r3, pc}

0001226c <uwb_dw1000_calc_rssi>:
{
   1226c:	b508      	push	{r3, lr}
    return dw1000_calc_rssi((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
   1226e:	f003 f93b 	bl	154e8 <dw1000_calc_rssi>
}
   12272:	bd08      	pop	{r3, pc}

00012274 <uwb_dw1000_get_fppl>:
{
   12274:	b508      	push	{r3, lr}
    return dw1000_get_fppl((dw1000_dev_instance_t *)dev);
   12276:	f003 f927 	bl	154c8 <dw1000_get_fppl>
}
   1227a:	bd08      	pop	{r3, pc}

0001227c <uwb_dw1000_get_rssi>:
{
   1227c:	b508      	push	{r3, lr}
    return dw1000_get_rssi((dw1000_dev_instance_t *)dev);
   1227e:	f003 f963 	bl	15548 <dw1000_get_rssi>
}
   12282:	bd08      	pop	{r3, pc}
   12284:	0000      	movs	r0, r0
	...

00012288 <uwb_dw1000_calc_clock_offset_ratio>:
{
   12288:	b508      	push	{r3, lr}
    if (type == UWB_CR_CARRIER_INTEGRATOR) {
   1228a:	b122      	cbz	r2, 12296 <uwb_dw1000_calc_clock_offset_ratio+0xe>
    } else if (type == UWB_CR_RXTTCKO) {
   1228c:	2a01      	cmp	r2, #1
   1228e:	d005      	beq.n	1229c <uwb_dw1000_calc_clock_offset_ratio+0x14>
    return DPL_FLOAT64_INIT(0.0f);
   12290:	ed9f 0b05 	vldr	d0, [pc, #20]	; 122a8 <uwb_dw1000_calc_clock_offset_ratio+0x20>
}
   12294:	bd08      	pop	{r3, pc}
        return dw1000_calc_clock_offset_ratio((dw1000_dev_instance_t *)dev, val);
   12296:	f002 fa43 	bl	14720 <dw1000_calc_clock_offset_ratio>
   1229a:	e7fb      	b.n	12294 <uwb_dw1000_calc_clock_offset_ratio+0xc>
        return dw1000_calc_clock_offset_ratio_ttco((dw1000_dev_instance_t *)dev, val);
   1229c:	f002 fac1 	bl	14822 <dw1000_calc_clock_offset_ratio_ttco>
   122a0:	e7f8      	b.n	12294 <uwb_dw1000_calc_clock_offset_ratio+0xc>
   122a2:	bf00      	nop
   122a4:	f3af 8000 	nop.w
	...

000122b0 <uwb_dw1000_set_on_error_continue>:
{
   122b0:	b508      	push	{r3, lr}
    return dw1000_set_on_error_continue((dw1000_dev_instance_t *)dev, enable);
   122b2:	f001 fdd0 	bl	13e56 <dw1000_set_on_error_continue>
}
   122b6:	bd08      	pop	{r3, pc}

000122b8 <uwb_dw1000_phy_repeated_frames>:
{
   122b8:	b508      	push	{r3, lr}
    return dw1000_phy_repeated_frames((dw1000_dev_instance_t *)dev, rate);
   122ba:	f003 fd39 	bl	15d30 <dw1000_phy_repeated_frames>
}
   122be:	bd08      	pop	{r3, pc}

000122c0 <uwb_dw1000_phy_rx_reset>:
{
   122c0:	b508      	push	{r3, lr}
    return dw1000_phy_rx_reset((dw1000_dev_instance_t *)dev);
   122c2:	f003 fc3c 	bl	15b3e <dw1000_phy_rx_reset>
}
   122c6:	bd08      	pop	{r3, pc}

000122c8 <uwb_dw1000_phy_forcetrxoff>:
{
   122c8:	b508      	push	{r3, lr}
    return dw1000_phy_forcetrxoff((dw1000_dev_instance_t *)dev);
   122ca:	f003 fc6d 	bl	15ba8 <dw1000_phy_forcetrxoff>
}
   122ce:	bd08      	pop	{r3, pc}

000122d0 <uwb_dw1000_phy_data_duration>:
{
   122d0:	b508      	push	{r3, lr}
    return dw1000_phy_data_duration(&dev->attrib, nlen);
   122d2:	f500 60a7 	add.w	r0, r0, #1336	; 0x538
   122d6:	f003 fded 	bl	15eb4 <dw1000_phy_data_duration>
}
   122da:	bd08      	pop	{r3, pc}

000122dc <uwb_dw1000_phy_SHR_duration>:
{
   122dc:	b508      	push	{r3, lr}
    return dw1000_phy_SHR_duration(&dev->attrib);
   122de:	f500 60a7 	add.w	r0, r0, #1336	; 0x538
   122e2:	f003 fdd3 	bl	15e8c <dw1000_phy_SHR_duration>
}
   122e6:	bd08      	pop	{r3, pc}

000122e8 <uwb_dw1000_phy_frame_duration>:
{
   122e8:	b508      	push	{r3, lr}
    return dw1000_phy_frame_duration(&dev->attrib, nlen);
   122ea:	f500 60a7 	add.w	r0, r0, #1336	; 0x538
   122ee:	f003 fe0b 	bl	15f08 <dw1000_phy_frame_duration>
}
   122f2:	bd08      	pop	{r3, pc}

000122f4 <uwb_dw1000_read_txtime_lo32>:
{
   122f4:	b508      	push	{r3, lr}
    return dw1000_read_txtime_lo((dw1000_dev_instance_t *)dev);
   122f6:	f003 f98d 	bl	15614 <dw1000_read_txtime_lo>
}
   122fa:	bd08      	pop	{r3, pc}

000122fc <uwb_dw1000_read_txtime>:
{
   122fc:	b508      	push	{r3, lr}
    return dw1000_read_txtime((dw1000_dev_instance_t *)dev);
   122fe:	f003 f981 	bl	15604 <dw1000_read_txtime>
}
   12302:	bd08      	pop	{r3, pc}

00012304 <uwb_dw1000_read_rxtime_lo32>:
{
   12304:	b508      	push	{r3, lr}
    return dw1000_read_rxtime_lo((dw1000_dev_instance_t *)dev);
   12306:	f003 f976 	bl	155f6 <dw1000_read_rxtime_lo>
}
   1230a:	bd08      	pop	{r3, pc}

0001230c <uwb_dw1000_read_rxtime>:
{
   1230c:	b508      	push	{r3, lr}
    return dw1000_read_rxtime((dw1000_dev_instance_t *)dev);
   1230e:	f003 f96a 	bl	155e6 <dw1000_read_rxtime>
}
   12312:	bd08      	pop	{r3, pc}

00012314 <uwb_dw1000_read_systime_lo32>:
{
   12314:	b508      	push	{r3, lr}
    return dw1000_read_systime_lo((dw1000_dev_instance_t *)dev);
   12316:	f003 f957 	bl	155c8 <dw1000_read_systime_lo>
}
   1231a:	bd08      	pop	{r3, pc}

0001231c <uwb_dw1000_read_systime>:
{
   1231c:	b508      	push	{r3, lr}
    return dw1000_read_systime((dw1000_dev_instance_t *)dev);
   1231e:	f003 f94b 	bl	155b8 <dw1000_read_systime>
}
   12322:	bd08      	pop	{r3, pc}

00012324 <uwb_dw1000_set_rxauto_disable>:
{
   12324:	b508      	push	{r3, lr}
    return dw1000_set_rxauto_disable((dw1000_dev_instance_t *)dev, disable);
   12326:	f001 fd9f 	bl	13e68 <dw1000_set_rxauto_disable>
}
   1232a:	bd08      	pop	{r3, pc}

0001232c <uwb_dw1000_set_wait4resp_delay>:
{
   1232c:	b508      	push	{r3, lr}
    return dw1000_set_wait4resp_delay((dw1000_dev_instance_t *)dev, delay);
   1232e:	f001 ff45 	bl	141bc <dw1000_set_wait4resp_delay>
}
   12332:	bd08      	pop	{r3, pc}

00012334 <uwb_dw1000_set_wait4resp>:
{
   12334:	b508      	push	{r3, lr}
    return dw1000_set_wait4resp((dw1000_dev_instance_t *)dev, enable);
   12336:	f001 fd7f 	bl	13e38 <dw1000_set_wait4resp>
}
   1233a:	bd08      	pop	{r3, pc}

0001233c <uwb_dw1000_tx_wait>:
{
   1233c:	b508      	push	{r3, lr}
    return dw1000_tx_wait((dw1000_dev_instance_t *)dev, timeout);
   1233e:	f001 fc0d 	bl	13b5c <dw1000_tx_wait>
}
   12342:	bd08      	pop	{r3, pc}

00012344 <uwb_dw1000_write_tx_fctrl>:
{
   12344:	b508      	push	{r3, lr}
    dw1000_write_tx_fctrl((dw1000_dev_instance_t *)dev, tx_frame_length,
   12346:	f001 fb2d 	bl	139a4 <dw1000_write_tx_fctrl>
}
   1234a:	bd08      	pop	{r3, pc}

0001234c <uwb_dw1000_write_tx>:
{
   1234c:	b508      	push	{r3, lr}
    return dw1000_write_tx((dw1000_dev_instance_t *)dev, tx_frame_bytes,
   1234e:	f001 fadc 	bl	1390a <dw1000_write_tx>
}
   12352:	bd08      	pop	{r3, pc}

00012354 <uwb_dw1000_stop_rx>:
{
   12354:	b508      	push	{r3, lr}
    return dw1000_stop_rx((dw1000_dev_instance_t *)dev);
   12356:	f001 fd1b 	bl	13d90 <dw1000_stop_rx>
}
   1235a:	bd08      	pop	{r3, pc}

0001235c <uwb_dw1000_start_rx>:
{
   1235c:	b508      	push	{r3, lr}
    return dw1000_start_rx((dw1000_dev_instance_t *)dev);
   1235e:	f001 fc3e 	bl	13bde <dw1000_start_rx>
}
   12362:	bd08      	pop	{r3, pc}

00012364 <uwb_dw1000_start_tx>:
{
   12364:	b508      	push	{r3, lr}
    return dw1000_start_tx((dw1000_dev_instance_t *)dev);
   12366:	f001 fb5e 	bl	13a26 <dw1000_start_tx>
}
   1236a:	bd08      	pop	{r3, pc}

0001236c <uwb_dw1000_set_delay_start>:
{
   1236c:	b508      	push	{r3, lr}
    return dw1000_set_delay_start((dw1000_dev_instance_t *)dev, dx_time);
   1236e:	f001 fc01 	bl	13b74 <dw1000_set_delay_start>
}
   12372:	bd08      	pop	{r3, pc}

00012374 <uwb_dw1000_set_abs_timeout>:
{
   12374:	b508      	push	{r3, lr}
    return dw1000_set_abs_timeout((dw1000_dev_instance_t *)dev, rx_end);
   12376:	f001 fe17 	bl	13fa8 <dw1000_set_abs_timeout>
}
   1237a:	bd08      	pop	{r3, pc}

0001237c <uwb_dw1000_set_rx_window>:
{
   1237c:	b500      	push	{lr}
   1237e:	b083      	sub	sp, #12
    return dw1000_set_rx_window((dw1000_dev_instance_t *)dev, rx_start, rx_end);
   12380:	ed9d 7b04 	vldr	d7, [sp, #16]
   12384:	ed8d 7b00 	vstr	d7, [sp]
   12388:	f001 fded 	bl	13f66 <dw1000_set_rx_window>
}
   1238c:	b003      	add	sp, #12
   1238e:	f85d fb04 	ldr.w	pc, [sp], #4

00012392 <uwb_dw1000_adj_rx_timeout>:
{
   12392:	b508      	push	{r3, lr}
    return dw1000_adj_rx_timeout((dw1000_dev_instance_t *)dev, timeout);
   12394:	b289      	uxth	r1, r1
   12396:	f001 fd70 	bl	13e7a <dw1000_adj_rx_timeout>
}
   1239a:	bd08      	pop	{r3, pc}

0001239c <uwb_dw1000_set_rx_timeout>:
{
   1239c:	b508      	push	{r3, lr}
    return dw1000_set_rx_timeout((dw1000_dev_instance_t *)dev, timeout);
   1239e:	b289      	uxth	r1, r1
   123a0:	f001 fd8b 	bl	13eba <dw1000_set_rx_timeout>
}
   123a4:	bd08      	pop	{r3, pc}

000123a6 <uwb_dw1000_set_dblrxbuf>:
{
   123a6:	b508      	push	{r3, lr}
    return dw1000_set_dblrxbuff((dw1000_dev_instance_t *)dev, enable);
   123a8:	f001 ff4d 	bl	14246 <dw1000_set_dblrxbuff>
}
   123ac:	bd08      	pop	{r3, pc}

000123ae <uwb_dw1000_txrf_power_value>:
{
   123ae:	b508      	push	{r3, lr}
    return dw1000_phy_txrf_power_value((dw1000_dev_instance_t *)dev, reg, coarse, fine);
   123b0:	f003 fdb7 	bl	15f22 <dw1000_phy_txrf_power_value>
}
   123b4:	bd08      	pop	{r3, pc}

000123b6 <uwb_dw1000_txrf_config>:
{
   123b6:	b508      	push	{r3, lr}
    dw1000_phy_config_txrf((dw1000_dev_instance_t *)dev, config);
   123b8:	f003 fabe 	bl	15938 <dw1000_phy_config_txrf>
}
   123bc:	bd08      	pop	{r3, pc}

000123be <uwb_dw1000_mac_config>:
{
   123be:	b508      	push	{r3, lr}
    return dw1000_mac_config((dw1000_dev_instance_t *)dev, config);
   123c0:	f001 ffa6 	bl	14310 <dw1000_mac_config>
}
   123c4:	bd08      	pop	{r3, pc}
	...

000123c8 <dw1000_read>:
{
   123c8:	b570      	push	{r4, r5, r6, lr}
   123ca:	b084      	sub	sp, #16
   123cc:	4604      	mov	r4, r0
   123ce:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    dw1000_cmd_t cmd = {
   123d2:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   123d6:	f04f 0e00 	mov.w	lr, #0
   123da:	f360 0e05 	bfi	lr, r0, #0, #6
        .subindex = subaddress != 0,
   123de:	4694      	mov	ip, r2
   123e0:	3a00      	subs	r2, #0
   123e2:	bf18      	it	ne
   123e4:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   123e6:	f362 1e86 	bfi	lr, r2, #6, #1
   123ea:	f36f 1ec7 	bfc	lr, #7, #1
        .extended = subaddress > 0x7F,
   123ee:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   123f2:	bf94      	ite	ls
   123f4:	2600      	movls	r6, #0
   123f6:	2601      	movhi	r6, #1
    dw1000_cmd_t cmd = {
   123f8:	f366 2e08 	bfi	lr, r6, #8, #1
   123fc:	f36c 2e57 	bfi	lr, ip, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   12400:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
    uint8_t header[] = {
   12404:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   12408:	fa4f f28c 	sxtb.w	r2, ip
   1240c:	ea42 12c6 	orr.w	r2, r2, r6, lsl #7
    uint8_t header[] = {
   12410:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   12414:	f3cc 12c7 	ubfx	r2, ip, #7, #8
    uint8_t header[] = {
   12418:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   1241c:	4a1b      	ldr	r2, [pc, #108]	; (1248c <dw1000_read+0xc4>)
   1241e:	ea0e 0202 	and.w	r2, lr, r2
   12422:	b122      	cbz	r2, 1242e <dw1000_read+0x66>
   12424:	f41e 7f80 	tst.w	lr, #256	; 0x100
   12428:	d01b      	beq.n	12462 <dw1000_read+0x9a>
   1242a:	2203      	movs	r2, #3
   1242c:	e000      	b.n	12430 <dw1000_read+0x68>
   1242e:	2201      	movs	r2, #1
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   12430:	293f      	cmp	r1, #63	; 0x3f
   12432:	d818      	bhi.n	12466 <dw1000_read+0x9e>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   12434:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   12438:	d11b      	bne.n	12472 <dw1000_read+0xaa>
   1243a:	44ac      	add	ip, r5
   1243c:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
   12440:	da17      	bge.n	12472 <dw1000_read+0xaa>
    if (length < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   12442:	2d08      	cmp	r5, #8
   12444:	d904      	bls.n	12450 <dw1000_read+0x88>
   12446:	f894 1532 	ldrb.w	r1, [r4, #1330]	; 0x532
   1244a:	f011 0f01 	tst.w	r1, #1
   1244e:	d016      	beq.n	1247e <dw1000_read+0xb6>
        hal_dw1000_read(inst, header, len, buffer, length);
   12450:	9500      	str	r5, [sp, #0]
   12452:	a903      	add	r1, sp, #12
   12454:	4620      	mov	r0, r4
   12456:	f000 fd6d 	bl	12f34 <hal_dw1000_read>
}
   1245a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1245e:	b004      	add	sp, #16
   12460:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   12462:	2202      	movs	r2, #2
   12464:	e7e4      	b.n	12430 <dw1000_read+0x68>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   12466:	2300      	movs	r3, #0
   12468:	461a      	mov	r2, r3
   1246a:	4619      	mov	r1, r3
   1246c:	4618      	mov	r0, r3
   1246e:	f7f6 fd71 	bl	8f54 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   12472:	2300      	movs	r3, #0
   12474:	461a      	mov	r2, r3
   12476:	4619      	mov	r1, r3
   12478:	4618      	mov	r0, r3
   1247a:	f7f6 fd6b 	bl	8f54 <__assert_func>
        hal_dw1000_read_noblock(inst, header, len, buffer, length);
   1247e:	9500      	str	r5, [sp, #0]
   12480:	a903      	add	r1, sp, #12
   12482:	4620      	mov	r0, r4
   12484:	f000 fe0a 	bl	1309c <hal_dw1000_read_noblock>
   12488:	e7e7      	b.n	1245a <dw1000_read+0x92>
   1248a:	bf00      	nop
   1248c:	00fffe00 	.word	0x00fffe00

00012490 <dw1000_write>:
{
   12490:	b570      	push	{r4, r5, r6, lr}
   12492:	b084      	sub	sp, #16
   12494:	4604      	mov	r4, r0
   12496:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    dw1000_cmd_t cmd = {
   1249a:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   1249e:	f04f 0e00 	mov.w	lr, #0
   124a2:	f360 0e05 	bfi	lr, r0, #0, #6
        .subindex = subaddress != 0,
   124a6:	4694      	mov	ip, r2
   124a8:	3a00      	subs	r2, #0
   124aa:	bf18      	it	ne
   124ac:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   124ae:	f362 1e86 	bfi	lr, r2, #6, #1
   124b2:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
        .extended = subaddress > 0x7F,
   124b6:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   124ba:	bf94      	ite	ls
   124bc:	2600      	movls	r6, #0
   124be:	2601      	movhi	r6, #1
    dw1000_cmd_t cmd = {
   124c0:	f366 2e08 	bfi	lr, r6, #8, #1
   124c4:	f36c 2e57 	bfi	lr, ip, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   124c8:	0192      	lsls	r2, r2, #6
   124ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
   124ce:	4302      	orrs	r2, r0
    uint8_t header[] = {
   124d0:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   124d4:	fa4f f28c 	sxtb.w	r2, ip
   124d8:	ea42 12c6 	orr.w	r2, r2, r6, lsl #7
    uint8_t header[] = {
   124dc:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   124e0:	f3cc 12c7 	ubfx	r2, ip, #7, #8
    uint8_t header[] = {
   124e4:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   124e8:	4a1b      	ldr	r2, [pc, #108]	; (12558 <dw1000_write+0xc8>)
   124ea:	ea0e 0202 	and.w	r2, lr, r2
   124ee:	b122      	cbz	r2, 124fa <dw1000_write+0x6a>
   124f0:	f41e 7f80 	tst.w	lr, #256	; 0x100
   124f4:	d01c      	beq.n	12530 <dw1000_write+0xa0>
   124f6:	2203      	movs	r2, #3
   124f8:	e000      	b.n	124fc <dw1000_write+0x6c>
   124fa:	2201      	movs	r2, #1
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   124fc:	293f      	cmp	r1, #63	; 0x3f
   124fe:	d819      	bhi.n	12534 <dw1000_write+0xa4>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   12500:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   12504:	d11c      	bne.n	12540 <dw1000_write+0xb0>
   12506:	44ac      	add	ip, r5
   12508:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
   1250c:	da18      	bge.n	12540 <dw1000_write+0xb0>
    if (len+length < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   1250e:	1951      	adds	r1, r2, r5
   12510:	2908      	cmp	r1, #8
   12512:	dd04      	ble.n	1251e <dw1000_write+0x8e>
   12514:	f894 1532 	ldrb.w	r1, [r4, #1330]	; 0x532
   12518:	f011 0f01 	tst.w	r1, #1
   1251c:	d016      	beq.n	1254c <dw1000_write+0xbc>
        hal_dw1000_write(inst, header, len, buffer, length);
   1251e:	9500      	str	r5, [sp, #0]
   12520:	a903      	add	r1, sp, #12
   12522:	4620      	mov	r0, r4
   12524:	f000 ff4e 	bl	133c4 <hal_dw1000_write>
}
   12528:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1252c:	b004      	add	sp, #16
   1252e:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   12530:	2202      	movs	r2, #2
   12532:	e7e3      	b.n	124fc <dw1000_write+0x6c>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   12534:	2300      	movs	r3, #0
   12536:	461a      	mov	r2, r3
   12538:	4619      	mov	r1, r3
   1253a:	4618      	mov	r0, r3
   1253c:	f7f6 fd0a 	bl	8f54 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   12540:	2300      	movs	r3, #0
   12542:	461a      	mov	r2, r3
   12544:	4619      	mov	r1, r3
   12546:	4618      	mov	r0, r3
   12548:	f7f6 fd04 	bl	8f54 <__assert_func>
        hal_dw1000_write_noblock(inst, header, len, buffer, length);
   1254c:	9500      	str	r5, [sp, #0]
   1254e:	a903      	add	r1, sp, #12
   12550:	4620      	mov	r0, r4
   12552:	f000 ffe5 	bl	13520 <hal_dw1000_write_noblock>
   12556:	e7e7      	b.n	12528 <dw1000_write+0x98>
   12558:	00fffe00 	.word	0x00fffe00

0001255c <dw1000_read_reg>:
{
   1255c:	b530      	push	{r4, r5, lr}
   1255e:	b087      	sub	sp, #28
    } __attribute__((__packed__, aligned (8))) buffer = {0};
   12560:	2400      	movs	r4, #0
   12562:	2500      	movs	r5, #0
   12564:	e9cd 4504 	strd	r4, r5, [sp, #16]
    dw1000_cmd_t cmd = {
   12568:	f001 043f 	and.w	r4, r1, #63	; 0x3f
   1256c:	f04f 0e00 	mov.w	lr, #0
   12570:	f364 0e05 	bfi	lr, r4, #0, #6
        .subindex = subaddress != 0,
   12574:	4694      	mov	ip, r2
   12576:	3a00      	subs	r2, #0
   12578:	bf18      	it	ne
   1257a:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   1257c:	f362 1e86 	bfi	lr, r2, #6, #1
   12580:	f36f 1ec7 	bfc	lr, #7, #1
        .extended = subaddress > 0x7F,
   12584:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   12588:	bf94      	ite	ls
   1258a:	2500      	movls	r5, #0
   1258c:	2501      	movhi	r5, #1
    dw1000_cmd_t cmd = {
   1258e:	f365 2e08 	bfi	lr, r5, #8, #1
   12592:	f36c 2e57 	bfi	lr, ip, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   12596:	ea44 1282 	orr.w	r2, r4, r2, lsl #6
    uint8_t header[] = {
   1259a:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   1259e:	fa4f f28c 	sxtb.w	r2, ip
   125a2:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
    uint8_t header[] = {
   125a6:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   125aa:	f3cc 12c7 	ubfx	r2, ip, #7, #8
    uint8_t header[] = {
   125ae:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   125b2:	4a21      	ldr	r2, [pc, #132]	; (12638 <dw1000_read_reg+0xdc>)
   125b4:	ea0e 0202 	and.w	r2, lr, r2
   125b8:	b122      	cbz	r2, 125c4 <dw1000_read_reg+0x68>
   125ba:	f41e 7f80 	tst.w	lr, #256	; 0x100
   125be:	d01f      	beq.n	12600 <dw1000_read_reg+0xa4>
   125c0:	2203      	movs	r2, #3
   125c2:	e000      	b.n	125c6 <dw1000_read_reg+0x6a>
   125c4:	2201      	movs	r2, #1
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   125c6:	293f      	cmp	r1, #63	; 0x3f
   125c8:	d81c      	bhi.n	12604 <dw1000_read_reg+0xa8>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   125ca:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   125ce:	d11f      	bne.n	12610 <dw1000_read_reg+0xb4>
   125d0:	449c      	add	ip, r3
   125d2:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
   125d6:	d21b      	bcs.n	12610 <dw1000_read_reg+0xb4>
    assert(nbytes <= sizeof(uint64_t));
   125d8:	2b08      	cmp	r3, #8
   125da:	d81f      	bhi.n	1261c <dw1000_read_reg+0xc0>
    if (len+nbytes < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   125dc:	18d1      	adds	r1, r2, r3
   125de:	2908      	cmp	r1, #8
   125e0:	d904      	bls.n	125ec <dw1000_read_reg+0x90>
   125e2:	f890 1532 	ldrb.w	r1, [r0, #1330]	; 0x532
   125e6:	f011 0f01 	tst.w	r1, #1
   125ea:	d01d      	beq.n	12628 <dw1000_read_reg+0xcc>
        hal_dw1000_read(inst, header, len, buffer.array, nbytes);
   125ec:	b29b      	uxth	r3, r3
   125ee:	9300      	str	r3, [sp, #0]
   125f0:	ab04      	add	r3, sp, #16
   125f2:	a903      	add	r1, sp, #12
   125f4:	f000 fc9e 	bl	12f34 <hal_dw1000_read>
}
   125f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   125fc:	b007      	add	sp, #28
   125fe:	bd30      	pop	{r4, r5, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   12600:	2202      	movs	r2, #2
   12602:	e7e0      	b.n	125c6 <dw1000_read_reg+0x6a>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   12604:	2300      	movs	r3, #0
   12606:	461a      	mov	r2, r3
   12608:	4619      	mov	r1, r3
   1260a:	4618      	mov	r0, r3
   1260c:	f7f6 fca2 	bl	8f54 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   12610:	2300      	movs	r3, #0
   12612:	461a      	mov	r2, r3
   12614:	4619      	mov	r1, r3
   12616:	4618      	mov	r0, r3
   12618:	f7f6 fc9c 	bl	8f54 <__assert_func>
    assert(nbytes <= sizeof(uint64_t));
   1261c:	2300      	movs	r3, #0
   1261e:	461a      	mov	r2, r3
   12620:	4619      	mov	r1, r3
   12622:	4618      	mov	r0, r3
   12624:	f7f6 fc96 	bl	8f54 <__assert_func>
        hal_dw1000_read_noblock(inst, header, len, buffer.array, nbytes);
   12628:	b29b      	uxth	r3, r3
   1262a:	9300      	str	r3, [sp, #0]
   1262c:	ab04      	add	r3, sp, #16
   1262e:	a903      	add	r1, sp, #12
   12630:	f000 fd34 	bl	1309c <hal_dw1000_read_noblock>
   12634:	e7e0      	b.n	125f8 <dw1000_read_reg+0x9c>
   12636:	bf00      	nop
   12638:	00fffe00 	.word	0x00fffe00

0001263c <dw1000_write_reg>:
{
   1263c:	b530      	push	{r4, r5, lr}
   1263e:	b087      	sub	sp, #28
   12640:	4604      	mov	r4, r0
   12642:	980c      	ldr	r0, [sp, #48]	; 0x30
    dw1000_cmd_t cmd = {
   12644:	f001 0e3f 	and.w	lr, r1, #63	; 0x3f
   12648:	f04f 0c00 	mov.w	ip, #0
   1264c:	f36e 0c05 	bfi	ip, lr, #0, #6
        .subindex = subaddress != 0,
   12650:	4613      	mov	r3, r2
   12652:	3a00      	subs	r2, #0
   12654:	bf18      	it	ne
   12656:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   12658:	f362 1c86 	bfi	ip, r2, #6, #1
   1265c:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
        .extended = subaddress > 0x7F,
   12660:	2b7f      	cmp	r3, #127	; 0x7f
   12662:	bf94      	ite	ls
   12664:	2500      	movls	r5, #0
   12666:	2501      	movhi	r5, #1
    dw1000_cmd_t cmd = {
   12668:	f365 2c08 	bfi	ip, r5, #8, #1
   1266c:	f363 2c57 	bfi	ip, r3, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   12670:	0192      	lsls	r2, r2, #6
   12672:	f062 027f 	orn	r2, r2, #127	; 0x7f
   12676:	ea4e 0202 	orr.w	r2, lr, r2
    uint8_t header[] = {
   1267a:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   1267e:	b25a      	sxtb	r2, r3
   12680:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
    uint8_t header[] = {
   12684:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   12688:	f3c3 12c7 	ubfx	r2, r3, #7, #8
    uint8_t header[] = {
   1268c:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   12690:	4a25      	ldr	r2, [pc, #148]	; (12728 <dw1000_write_reg+0xec>)
   12692:	ea0c 0202 	and.w	r2, ip, r2
   12696:	b122      	cbz	r2, 126a2 <dw1000_write_reg+0x66>
   12698:	f41c 7f80 	tst.w	ip, #256	; 0x100
   1269c:	d022      	beq.n	126e4 <dw1000_write_reg+0xa8>
   1269e:	2203      	movs	r2, #3
   126a0:	e000      	b.n	126a4 <dw1000_write_reg+0x68>
   126a2:	2201      	movs	r2, #1
    buffer.value = val;
   126a4:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
   126a8:	ed8d 7b04 	vstr	d7, [sp, #16]
    assert(nbytes <= sizeof(uint64_t));
   126ac:	2808      	cmp	r0, #8
   126ae:	d81b      	bhi.n	126e8 <dw1000_write_reg+0xac>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   126b0:	293f      	cmp	r1, #63	; 0x3f
   126b2:	d81f      	bhi.n	126f4 <dw1000_write_reg+0xb8>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   126b4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   126b8:	d122      	bne.n	12700 <dw1000_write_reg+0xc4>
   126ba:	4403      	add	r3, r0
   126bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   126c0:	d21e      	bcs.n	12700 <dw1000_write_reg+0xc4>
    if (len+nbytes < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   126c2:	1813      	adds	r3, r2, r0
   126c4:	2b08      	cmp	r3, #8
   126c6:	d904      	bls.n	126d2 <dw1000_write_reg+0x96>
   126c8:	f894 3532 	ldrb.w	r3, [r4, #1330]	; 0x532
   126cc:	f013 0f01 	tst.w	r3, #1
   126d0:	d01c      	beq.n	1270c <dw1000_write_reg+0xd0>
        hal_dw1000_write(inst, header, len, buffer.array, nbytes);
   126d2:	b280      	uxth	r0, r0
   126d4:	9000      	str	r0, [sp, #0]
   126d6:	ab04      	add	r3, sp, #16
   126d8:	a903      	add	r1, sp, #12
   126da:	4620      	mov	r0, r4
   126dc:	f000 fe72 	bl	133c4 <hal_dw1000_write>
}
   126e0:	b007      	add	sp, #28
   126e2:	bd30      	pop	{r4, r5, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   126e4:	2202      	movs	r2, #2
   126e6:	e7dd      	b.n	126a4 <dw1000_write_reg+0x68>
    assert(nbytes <= sizeof(uint64_t));
   126e8:	2300      	movs	r3, #0
   126ea:	461a      	mov	r2, r3
   126ec:	4619      	mov	r1, r3
   126ee:	4618      	mov	r0, r3
   126f0:	f7f6 fc30 	bl	8f54 <__assert_func>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   126f4:	2300      	movs	r3, #0
   126f6:	461a      	mov	r2, r3
   126f8:	4619      	mov	r1, r3
   126fa:	4618      	mov	r0, r3
   126fc:	f7f6 fc2a 	bl	8f54 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   12700:	2300      	movs	r3, #0
   12702:	461a      	mov	r2, r3
   12704:	4619      	mov	r1, r3
   12706:	4618      	mov	r0, r3
   12708:	f7f6 fc24 	bl	8f54 <__assert_func>
        hal_dw1000_write_noblock(inst, header, len, buffer.array, nbytes);
   1270c:	b280      	uxth	r0, r0
   1270e:	9000      	str	r0, [sp, #0]
   12710:	ab04      	add	r3, sp, #16
   12712:	a903      	add	r1, sp, #12
   12714:	4620      	mov	r0, r4
   12716:	f000 ff03 	bl	13520 <hal_dw1000_write_noblock>
        hal_dw1000_rw_noblock_wait(inst, DPL_TIMEOUT_NEVER);
   1271a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1271e:	4620      	mov	r0, r4
   12720:	f001 f832 	bl	13788 <hal_dw1000_rw_noblock_wait>
}
   12724:	e7dc      	b.n	126e0 <dw1000_write_reg+0xa4>
   12726:	bf00      	nop
   12728:	00fffe00 	.word	0x00fffe00

0001272c <uwb_dw1000_set_euid>:
{
   1272c:	b500      	push	{lr}
   1272e:	b085      	sub	sp, #20
    return dw1000_set_eui((dw1000_dev_instance_t *)dev, euid);
   12730:	2108      	movs	r1, #8
   12732:	9102      	str	r1, [sp, #8]
   12734:	e9cd 2300 	strd	r2, r3, [sp]
   12738:	2200      	movs	r2, #0
   1273a:	2101      	movs	r1, #1
   1273c:	f7ff ff7e 	bl	1263c <dw1000_write_reg>
}
   12740:	b005      	add	sp, #20
   12742:	f85d fb04 	ldr.w	pc, [sp], #4

00012746 <uwb_dw1000_set_uid>:
{
   12746:	b500      	push	{lr}
   12748:	b085      	sub	sp, #20
    return dw1000_set_address16((dw1000_dev_instance_t *)dev, uid);
   1274a:	2302      	movs	r3, #2
   1274c:	9302      	str	r3, [sp, #8]
   1274e:	2200      	movs	r2, #0
   12750:	9100      	str	r1, [sp, #0]
   12752:	9201      	str	r2, [sp, #4]
   12754:	2103      	movs	r1, #3
   12756:	f7ff ff71 	bl	1263c <dw1000_write_reg>
}
   1275a:	b005      	add	sp, #20
   1275c:	f85d fb04 	ldr.w	pc, [sp], #4

00012760 <uwb_dw1000_set_panid>:
{
   12760:	b500      	push	{lr}
   12762:	b085      	sub	sp, #20
    return dw1000_set_panid((dw1000_dev_instance_t *)dev, pan_id);
   12764:	2202      	movs	r2, #2
   12766:	9202      	str	r2, [sp, #8]
   12768:	9100      	str	r1, [sp, #0]
   1276a:	2300      	movs	r3, #0
   1276c:	9301      	str	r3, [sp, #4]
   1276e:	2103      	movs	r1, #3
   12770:	f7ff ff64 	bl	1263c <dw1000_write_reg>
}
   12774:	b005      	add	sp, #20
   12776:	f85d fb04 	ldr.w	pc, [sp], #4

0001277a <dw1000_softreset>:
{
   1277a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1277e:	b084      	sub	sp, #16
   12780:	4604      	mov	r4, r0
    dw1000_phy_sysclk_XTAL(inst);
   12782:	f002 ffef 	bl	15764 <dw1000_phy_sysclk_XTAL>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, sizeof(uint16_t)); // Disable PMSC ctrl of RF and RX clk blocks
   12786:	f04f 0802 	mov.w	r8, #2
   1278a:	f8cd 8008 	str.w	r8, [sp, #8]
   1278e:	2600      	movs	r6, #0
   12790:	2700      	movs	r7, #0
   12792:	e9cd 6700 	strd	r6, r7, [sp]
   12796:	2204      	movs	r2, #4
   12798:	2136      	movs	r1, #54	; 0x36
   1279a:	4620      	mov	r0, r4
   1279c:	f7ff ff4e 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET, 0x0, sizeof(uint16_t)); // Clear any AON auto download bits (as reset will trigger AON download)
   127a0:	f8cd 8008 	str.w	r8, [sp, #8]
   127a4:	e9cd 6700 	strd	r6, r7, [sp]
   127a8:	2200      	movs	r2, #0
   127aa:	212c      	movs	r1, #44	; 0x2c
   127ac:	4620      	mov	r0, r4
   127ae:	f7ff ff45 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, 0x0, sizeof(uint8_t));  // Clear the wake-up configuration
   127b2:	2501      	movs	r5, #1
   127b4:	9502      	str	r5, [sp, #8]
   127b6:	e9cd 6700 	strd	r6, r7, [sp]
   127ba:	2206      	movs	r2, #6
   127bc:	212c      	movs	r1, #44	; 0x2c
   127be:	4620      	mov	r0, r4
   127c0:	f7ff ff3c 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, 0x0, sizeof(uint8_t)); // Clear the register
   127c4:	9502      	str	r5, [sp, #8]
   127c6:	e9cd 6700 	strd	r6, r7, [sp]
   127ca:	4642      	mov	r2, r8
   127cc:	212c      	movs	r1, #44	; 0x2c
   127ce:	4620      	mov	r0, r4
   127d0:	f7ff ff34 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, sizeof(uint8_t));
   127d4:	9502      	str	r5, [sp, #8]
   127d6:	2202      	movs	r2, #2
   127d8:	2300      	movs	r3, #0
   127da:	e9cd 2300 	strd	r2, r3, [sp]
   127de:	4642      	mov	r2, r8
   127e0:	212c      	movs	r1, #44	; 0x2c
   127e2:	4620      	mov	r0, r4
   127e4:	f7ff ff2a 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL, sizeof(uint8_t));// Reset HIF, TX, RX and PMSC
   127e8:	9502      	str	r5, [sp, #8]
   127ea:	e9cd 6700 	strd	r6, r7, [sp]
   127ee:	2203      	movs	r2, #3
   127f0:	2136      	movs	r1, #54	; 0x36
   127f2:	4620      	mov	r0, r4
   127f4:	f7ff ff22 	bl	1263c <dw1000_write_reg>
    dpl_cputime_delay_usecs(10);
   127f8:	200a      	movs	r0, #10
   127fa:	f7fa f8d1 	bl	c9a0 <dpl_cputime_delay_usecs>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t)); // Clear reset
   127fe:	9502      	str	r5, [sp, #8]
   12800:	22f0      	movs	r2, #240	; 0xf0
   12802:	2300      	movs	r3, #0
   12804:	e9cd 2300 	strd	r2, r3, [sp]
   12808:	2203      	movs	r2, #3
   1280a:	2136      	movs	r1, #54	; 0x36
   1280c:	4620      	mov	r0, r4
   1280e:	f7ff ff15 	bl	1263c <dw1000_write_reg>
}
   12812:	b004      	add	sp, #16
   12814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012818 <dw1000_dev_configure_sleep>:
{
   12818:	b530      	push	{r4, r5, lr}
   1281a:	b085      	sub	sp, #20
   1281c:	4604      	mov	r4, r0
    uint16_t reg = dw1000_read_reg(inst, AON_ID, AON_WCFG_OFFSET, sizeof(uint16_t));
   1281e:	2302      	movs	r3, #2
   12820:	2200      	movs	r2, #0
   12822:	212c      	movs	r1, #44	; 0x2c
   12824:	f7ff fe9a 	bl	1255c <dw1000_read_reg>
   12828:	b283      	uxth	r3, r0
    if (inst->uwb_dev.status.LDE_enabled)
   1282a:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   1282e:	f012 0f10 	tst.w	r2, #16
   12832:	d03a      	beq.n	128aa <dw1000_dev_configure_sleep+0x92>
        reg |= AON_WCFG_ONW_LLDE;
   12834:	f443 630c 	orr.w	r3, r3, #2240	; 0x8c0
    if (inst->uwb_dev.status.LDO_enabled)
   12838:	f012 0f20 	tst.w	r2, #32
   1283c:	d03a      	beq.n	128b4 <dw1000_dev_configure_sleep+0x9c>
        reg |= AON_WCFG_ONW_LLDO;
   1283e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    if (inst->uwb_dev.config.wakeup_rx_enable)
   12842:	f894 2531 	ldrb.w	r2, [r4, #1329]	; 0x531
   12846:	f012 0f10 	tst.w	r2, #16
   1284a:	d037      	beq.n	128bc <dw1000_dev_configure_sleep+0xa4>
        reg |= AON_WCFG_ONW_RX;
   1284c:	f043 0302 	orr.w	r3, r3, #2
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET, reg, sizeof(uint16_t));
   12850:	2502      	movs	r5, #2
   12852:	9502      	str	r5, [sp, #8]
   12854:	2200      	movs	r2, #0
   12856:	9300      	str	r3, [sp, #0]
   12858:	9201      	str	r2, [sp, #4]
   1285a:	212c      	movs	r1, #44	; 0x2c
   1285c:	4620      	mov	r0, r4
   1285e:	f7ff feed 	bl	1263c <dw1000_write_reg>
    reg = dw1000_read_reg(inst, AON_ID, AON_CFG0_OFFSET, sizeof(uint16_t));
   12862:	462b      	mov	r3, r5
   12864:	2206      	movs	r2, #6
   12866:	212c      	movs	r1, #44	; 0x2c
   12868:	4620      	mov	r0, r4
   1286a:	f7ff fe77 	bl	1255c <dw1000_read_reg>
   1286e:	b280      	uxth	r0, r0
    inst->uwb_dev.status.sleep_enabled = inst->uwb_dev.config.sleep_enable;
   12870:	f894 3531 	ldrb.w	r3, [r4, #1329]	; 0x531
   12874:	f3c3 1340 	ubfx	r3, r3, #5, #1
   12878:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   1287c:	f363 12c7 	bfi	r2, r3, #7, #1
   12880:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    if (inst->uwb_dev.status.sleep_enabled)
   12884:	b253      	sxtb	r3, r2
   12886:	2b00      	cmp	r3, #0
   12888:	db1c      	blt.n	128c4 <dw1000_dev_configure_sleep+0xac>
        reg &= ~(AON_CFG0_WAKE_CNT | AON_CFG0_SLEEP_EN);
   1288a:	f020 0009 	bic.w	r0, r0, #9
   1288e:	f040 0006 	orr.w	r0, r0, #6
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, reg, sizeof(uint16_t));
   12892:	2302      	movs	r3, #2
   12894:	9302      	str	r3, [sp, #8]
   12896:	9000      	str	r0, [sp, #0]
   12898:	2300      	movs	r3, #0
   1289a:	9301      	str	r3, [sp, #4]
   1289c:	2206      	movs	r2, #6
   1289e:	212c      	movs	r1, #44	; 0x2c
   128a0:	4620      	mov	r0, r4
   128a2:	f7ff fecb 	bl	1263c <dw1000_write_reg>
}
   128a6:	b005      	add	sp, #20
   128a8:	bd30      	pop	{r4, r5, pc}
        reg &= ~AON_WCFG_ONW_LLDE;
   128aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   128ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   128b2:	e7c1      	b.n	12838 <dw1000_dev_configure_sleep+0x20>
        reg &= ~AON_WCFG_ONW_LLDO;
   128b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   128b8:	b29b      	uxth	r3, r3
   128ba:	e7c2      	b.n	12842 <dw1000_dev_configure_sleep+0x2a>
        reg &= ~AON_WCFG_ONW_RX;
   128bc:	f023 0302 	bic.w	r3, r3, #2
   128c0:	b29b      	uxth	r3, r3
   128c2:	e7c5      	b.n	12850 <dw1000_dev_configure_sleep+0x38>
        reg |= AON_CFG0_WAKE_CNT | AON_CFG0_SLEEP_EN;
   128c4:	f040 000f 	orr.w	r0, r0, #15
   128c8:	e7e3      	b.n	12892 <dw1000_dev_configure_sleep+0x7a>

000128ca <uwb_dw1000_sleep_config>:
{
   128ca:	b508      	push	{r3, lr}
    dw1000_dev_configure_sleep((dw1000_dev_instance_t *)dev);
   128cc:	f7ff ffa4 	bl	12818 <dw1000_dev_configure_sleep>
}
   128d0:	bd08      	pop	{r3, pc}

000128d2 <dw1000_dev_enter_sleep>:
{
   128d2:	b570      	push	{r4, r5, r6, lr}
   128d4:	b084      	sub	sp, #16
   128d6:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   128d8:	f500 65ae 	add.w	r5, r0, #1392	; 0x570
   128dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   128e0:	4628      	mov	r0, r5
   128e2:	f7f8 f89b 	bl	aa1c <os_mutex_pend>
    if (err != DPL_OK) {
   128e6:	b148      	cbz	r0, 128fc <dw1000_dev_enter_sleep+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   128e8:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   128ec:	f043 0308 	orr.w	r3, r3, #8
   128f0:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   128f4:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   128f8:	b004      	add	sp, #16
   128fa:	bd70      	pop	{r4, r5, r6, pc}
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, 0x0, sizeof(uint16_t));
   128fc:	2602      	movs	r6, #2
   128fe:	9602      	str	r6, [sp, #8]
   12900:	2200      	movs	r2, #0
   12902:	2300      	movs	r3, #0
   12904:	e9cd 2300 	strd	r2, r3, [sp]
   12908:	4632      	mov	r2, r6
   1290a:	212c      	movs	r1, #44	; 0x2c
   1290c:	4620      	mov	r0, r4
   1290e:	f7ff fe95 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, sizeof(uint16_t));
   12912:	9602      	str	r6, [sp, #8]
   12914:	2202      	movs	r2, #2
   12916:	2300      	movs	r3, #0
   12918:	e9cd 2300 	strd	r2, r3, [sp]
   1291c:	4632      	mov	r2, r6
   1291e:	212c      	movs	r1, #44	; 0x2c
   12920:	4620      	mov	r0, r4
   12922:	f7ff fe8b 	bl	1263c <dw1000_write_reg>
    inst->uwb_dev.status.sleeping = 1;
   12926:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1292a:	f043 0301 	orr.w	r3, r3, #1
   1292e:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    return (dpl_error_t)os_mutex_release(&mu->mu);
   12932:	4628      	mov	r0, r5
   12934:	f7f8 f816 	bl	a964 <os_mutex_release>
    assert(err == DPL_OK);
   12938:	2800      	cmp	r0, #0
   1293a:	d0db      	beq.n	128f4 <dw1000_dev_enter_sleep+0x22>
   1293c:	2300      	movs	r3, #0
   1293e:	461a      	mov	r2, r3
   12940:	4619      	mov	r1, r3
   12942:	4618      	mov	r0, r3
   12944:	f7f6 fb06 	bl	8f54 <__assert_func>

00012948 <uwb_dw1000_enter_sleep>:
{
   12948:	b508      	push	{r3, lr}
    return dw1000_dev_enter_sleep((dw1000_dev_instance_t *)dev);
   1294a:	f7ff ffc2 	bl	128d2 <dw1000_dev_enter_sleep>
}
   1294e:	bd08      	pop	{r3, pc}

00012950 <dw1000_dev_wakeup>:
{
   12950:	b5f0      	push	{r4, r5, r6, r7, lr}
   12952:	b085      	sub	sp, #20
   12954:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   12956:	f500 66ae 	add.w	r6, r0, #1392	; 0x570
   1295a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1295e:	4630      	mov	r0, r6
   12960:	f7f8 f85c 	bl	aa1c <os_mutex_pend>
    if (err != DPL_OK) {
   12964:	b148      	cbz	r0, 1297a <dw1000_dev_wakeup+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   12966:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1296a:	f043 0308 	orr.w	r3, r3, #8
   1296e:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   12972:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   12976:	b005      	add	sp, #20
   12978:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->uwb_dev.status.sleeping = 0;
   1297a:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1297e:	f36f 0300 	bfc	r3, #0, #1
   12982:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    devid = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   12986:	2304      	movs	r3, #4
   12988:	2200      	movs	r2, #0
   1298a:	4611      	mov	r1, r2
   1298c:	4620      	mov	r0, r4
   1298e:	f7ff fde5 	bl	1255c <dw1000_read_reg>
    int timeout=5;
   12992:	2505      	movs	r5, #5
    while (devid != 0xDECA0130 && --timeout)
   12994:	e008      	b.n	129a8 <dw1000_dev_wakeup+0x58>
        hal_dw1000_wakeup(inst);
   12996:	4620      	mov	r0, r4
   12998:	f000 ff14 	bl	137c4 <hal_dw1000_wakeup>
        devid = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   1299c:	2304      	movs	r3, #4
   1299e:	2200      	movs	r2, #0
   129a0:	4611      	mov	r1, r2
   129a2:	4620      	mov	r0, r4
   129a4:	f7ff fdda 	bl	1255c <dw1000_read_reg>
    while (devid != 0xDECA0130 && --timeout)
   129a8:	4b29      	ldr	r3, [pc, #164]	; (12a50 <dw1000_dev_wakeup+0x100>)
   129aa:	4298      	cmp	r0, r3
   129ac:	d001      	beq.n	129b2 <dw1000_dev_wakeup+0x62>
   129ae:	3d01      	subs	r5, #1
   129b0:	d1f1      	bne.n	12996 <dw1000_dev_wakeup+0x46>
    inst->uwb_dev.status.sleeping = (devid != DWT_DEVICE_ID);
   129b2:	4b27      	ldr	r3, [pc, #156]	; (12a50 <dw1000_dev_wakeup+0x100>)
   129b4:	1ac0      	subs	r0, r0, r3
   129b6:	bf18      	it	ne
   129b8:	2001      	movne	r0, #1
   129ba:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   129be:	f360 0300 	bfi	r3, r0, #0, #1
   129c2:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_SLP2INIT, sizeof(uint32_t));
   129c6:	2504      	movs	r5, #4
   129c8:	9502      	str	r5, [sp, #8]
   129ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   129ce:	2300      	movs	r3, #0
   129d0:	e9cd 2300 	strd	r2, r3, [sp]
   129d4:	2200      	movs	r2, #0
   129d6:	210f      	movs	r1, #15
   129d8:	4620      	mov	r0, r4
   129da:	f7ff fe2f 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_RX_ERR, sizeof(uint32_t));
   129de:	9502      	str	r5, [sp, #8]
   129e0:	a319      	add	r3, pc, #100	; (adr r3, 12a48 <dw1000_dev_wakeup+0xf8>)
   129e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   129e6:	e9cd 2300 	strd	r2, r3, [sp]
   129ea:	2200      	movs	r2, #0
   129ec:	210f      	movs	r1, #15
   129ee:	4620      	mov	r0, r4
   129f0:	f7ff fe24 	bl	1263c <dw1000_write_reg>
    dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   129f4:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
   129f8:	2702      	movs	r7, #2
   129fa:	9702      	str	r7, [sp, #8]
   129fc:	2500      	movs	r5, #0
   129fe:	9300      	str	r3, [sp, #0]
   12a00:	9501      	str	r5, [sp, #4]
   12a02:	f641 0204 	movw	r2, #6148	; 0x1804
   12a06:	212e      	movs	r1, #46	; 0x2e
   12a08:	4620      	mov	r0, r4
   12a0a:	f7ff fe17 	bl	1263c <dw1000_write_reg>
    dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
   12a0e:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   12a12:	9702      	str	r7, [sp, #8]
   12a14:	9300      	str	r3, [sp, #0]
   12a16:	9501      	str	r5, [sp, #4]
   12a18:	462a      	mov	r2, r5
   12a1a:	2118      	movs	r1, #24
   12a1c:	4620      	mov	r0, r4
   12a1e:	f7ff fe0d 	bl	1263c <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   12a22:	4630      	mov	r0, r6
   12a24:	f7f7 ff9e 	bl	a964 <os_mutex_release>
    assert(err == DPL_OK);
   12a28:	b940      	cbnz	r0, 12a3c <dw1000_dev_wakeup+0xec>
   12a2a:	f8b4 356e 	ldrh.w	r3, [r4, #1390]	; 0x56e
    if(dpl_sem_get_count(&inst->tx_sem) == 0) {
   12a2e:	2b00      	cmp	r3, #0
   12a30:	d19f      	bne.n	12972 <dw1000_dev_wakeup+0x22>
    return (dpl_error_t)os_sem_release(&sem->sem);
   12a32:	f504 60ad 	add.w	r0, r4, #1384	; 0x568
   12a36:	f7f7 f99f 	bl	9d78 <os_sem_release>
   12a3a:	e79a      	b.n	12972 <dw1000_dev_wakeup+0x22>
    assert(err == DPL_OK);
   12a3c:	462b      	mov	r3, r5
   12a3e:	462a      	mov	r2, r5
   12a40:	4629      	mov	r1, r5
   12a42:	4628      	mov	r0, r5
   12a44:	f7f6 fa86 	bl	8f54 <__assert_func>
   12a48:	24119000 	.word	0x24119000
   12a4c:	00000000 	.word	0x00000000
   12a50:	deca0130 	.word	0xdeca0130

00012a54 <dw1000_dev_config>:
{
   12a54:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a56:	b085      	sub	sp, #20
   12a58:	4604      	mov	r4, r0
    int timeout = 3;
   12a5a:	2503      	movs	r5, #3
    inst->spi_settings.baudrate = inst->spi_baudrate_low;
   12a5c:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
   12a60:	f8c4 35a0 	str.w	r3, [r4, #1440]	; 0x5a0
    hal_dw1000_reset(inst);
   12a64:	4620      	mov	r0, r4
   12a66:	f000 fa3b 	bl	12ee0 <hal_dw1000_reset>
    rc = hal_spi_disable(inst->spi_num);
   12a6a:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   12a6e:	f005 f9ad 	bl	17dcc <hal_spi_disable>
    assert(rc == 0);
   12a72:	bb48      	cbnz	r0, 12ac8 <dw1000_dev_config+0x74>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   12a74:	f204 569c 	addw	r6, r4, #1436	; 0x59c
   12a78:	4631      	mov	r1, r6
   12a7a:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   12a7e:	f005 f963 	bl	17d48 <hal_spi_config>
    assert(rc == 0);
   12a82:	bb38      	cbnz	r0, 12ad4 <dw1000_dev_config+0x80>
    rc = hal_spi_enable(inst->spi_num);
   12a84:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   12a88:	f005 f97a 	bl	17d80 <hal_spi_enable>
    assert(rc == 0);
   12a8c:	bb40      	cbnz	r0, 12ae0 <dw1000_dev_config+0x8c>
    inst->uwb_dev.device_id = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   12a8e:	2304      	movs	r3, #4
   12a90:	2200      	movs	r2, #0
   12a92:	4611      	mov	r1, r2
   12a94:	4620      	mov	r0, r4
   12a96:	f7ff fd61 	bl	1255c <dw1000_read_reg>
   12a9a:	f8c4 04c8 	str.w	r0, [r4, #1224]	; 0x4c8
    inst->uwb_dev.status.initialized = (inst->uwb_dev.device_id == DWT_DEVICE_ID);
   12a9e:	4b55      	ldr	r3, [pc, #340]	; (12bf4 <dw1000_dev_config+0x1a0>)
   12aa0:	4298      	cmp	r0, r3
   12aa2:	bf14      	ite	ne
   12aa4:	2000      	movne	r0, #0
   12aa6:	2001      	moveq	r0, #1
   12aa8:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   12aac:	f360 0341 	bfi	r3, r0, #1, #1
   12ab0:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    if (!inst->uwb_dev.status.initialized && --timeout)
   12ab4:	b2db      	uxtb	r3, r3
   12ab6:	f013 0302 	ands.w	r3, r3, #2
   12aba:	d117      	bne.n	12aec <dw1000_dev_config+0x98>
   12abc:	3d01      	subs	r5, #1
   12abe:	d015      	beq.n	12aec <dw1000_dev_config+0x98>
        dw1000_dev_wakeup(inst);
   12ac0:	4620      	mov	r0, r4
   12ac2:	f7ff ff45 	bl	12950 <dw1000_dev_wakeup>
        goto retry;
   12ac6:	e7c9      	b.n	12a5c <dw1000_dev_config+0x8>
    assert(rc == 0);
   12ac8:	2300      	movs	r3, #0
   12aca:	461a      	mov	r2, r3
   12acc:	4619      	mov	r1, r3
   12ace:	4618      	mov	r0, r3
   12ad0:	f7f6 fa40 	bl	8f54 <__assert_func>
    assert(rc == 0);
   12ad4:	2300      	movs	r3, #0
   12ad6:	461a      	mov	r2, r3
   12ad8:	4619      	mov	r1, r3
   12ada:	4618      	mov	r0, r3
   12adc:	f7f6 fa3a 	bl	8f54 <__assert_func>
    assert(rc == 0);
   12ae0:	2300      	movs	r3, #0
   12ae2:	461a      	mov	r2, r3
   12ae4:	4619      	mov	r1, r3
   12ae6:	4618      	mov	r0, r3
   12ae8:	f7f6 fa34 	bl	8f54 <__assert_func>
    if(!inst->uwb_dev.status.initialized)
   12aec:	2b00      	cmp	r3, #0
   12aee:	d07f      	beq.n	12bf0 <dw1000_dev_config+0x19c>
    dw1000_phy_init(inst, NULL);
   12af0:	2100      	movs	r1, #0
   12af2:	4620      	mov	r0, r4
   12af4:	f002 ff3a 	bl	1596c <dw1000_phy_init>
    inst->spi_settings.baudrate = inst->spi_baudrate;
   12af8:	f8d4 355c 	ldr.w	r3, [r4, #1372]	; 0x55c
   12afc:	f8c4 35a0 	str.w	r3, [r4, #1440]	; 0x5a0
    rc = hal_spi_disable(inst->spi_num);
   12b00:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   12b04:	f005 f962 	bl	17dcc <hal_spi_disable>
    assert(rc == 0);
   12b08:	2800      	cmp	r0, #0
   12b0a:	d15f      	bne.n	12bcc <dw1000_dev_config+0x178>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   12b0c:	4631      	mov	r1, r6
   12b0e:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   12b12:	f005 f919 	bl	17d48 <hal_spi_config>
    assert(rc == 0);
   12b16:	2800      	cmp	r0, #0
   12b18:	d15e      	bne.n	12bd8 <dw1000_dev_config+0x184>
    rc = hal_spi_enable(inst->spi_num);
   12b1a:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   12b1e:	f005 f92f 	bl	17d80 <hal_spi_enable>
    assert(rc == 0);
   12b22:	4607      	mov	r7, r0
   12b24:	2800      	cmp	r0, #0
   12b26:	d15d      	bne.n	12be4 <dw1000_dev_config+0x190>
    inst->uwb_dev.pan_id = MYNEWT_VAL(PANID);
   12b28:	f64d 63ca 	movw	r3, #57034	; 0xdeca
   12b2c:	f8a4 34c0 	strh.w	r3, [r4, #1216]	; 0x4c0
    inst->uwb_dev.uid = inst->part_id & 0xffff;
   12b30:	f8d4 357c 	ldr.w	r3, [r4, #1404]	; 0x57c
   12b34:	f8a4 34b6 	strh.w	r3, [r4, #1206]	; 0x4b6
    if (inst == hal_dw1000_inst(0)) {
   12b38:	2000      	movs	r0, #0
   12b3a:	f000 f9c5 	bl	12ec8 <hal_dw1000_inst>
   12b3e:	4284      	cmp	r4, r0
   12b40:	d007      	beq.n	12b52 <dw1000_dev_config+0xfe>
    } else if (inst == hal_dw1000_inst(1)){
   12b42:	2001      	movs	r0, #1
   12b44:	f000 f9c0 	bl	12ec8 <hal_dw1000_inst>
   12b48:	4284      	cmp	r4, r0
   12b4a:	d002      	beq.n	12b52 <dw1000_dev_config+0xfe>
    } else if (inst == hal_dw1000_inst(2)){
   12b4c:	2002      	movs	r0, #2
   12b4e:	f000 f9bb 	bl	12ec8 <hal_dw1000_inst>
    inst->uwb_dev.euid = (((uint64_t)inst->lot_id) << 32) + inst->part_id;
   12b52:	f8d4 2580 	ldr.w	r2, [r4, #1408]	; 0x580
   12b56:	f8d4 157c 	ldr.w	r1, [r4, #1404]	; 0x57c
   12b5a:	f8c4 14b8 	str.w	r1, [r4, #1208]	; 0x4b8
   12b5e:	f8c4 24bc 	str.w	r2, [r4, #1212]	; 0x4bc
    dw1000_mac_init(inst, NULL);
   12b62:	2100      	movs	r1, #0
   12b64:	4620      	mov	r0, r4
   12b66:	f001 fed5 	bl	14914 <dw1000_mac_init>
    if (!inst->uwb_dev.uid || inst->uwb_dev.uid == 0xFFFF) {
   12b6a:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   12b6e:	3b01      	subs	r3, #1
   12b70:	b29b      	uxth	r3, r3
   12b72:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   12b76:	4293      	cmp	r3, r2
   12b78:	d902      	bls.n	12b80 <dw1000_dev_config+0x12c>
        inst->uwb_dev.uid = 0x1;
   12b7a:	2301      	movs	r3, #1
   12b7c:	f8a4 34b6 	strh.w	r3, [r4, #1206]	; 0x4b6
    dw1000_set_panid(inst,inst->uwb_dev.pan_id);
   12b80:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
   12b84:	2602      	movs	r6, #2
   12b86:	9602      	str	r6, [sp, #8]
   12b88:	2500      	movs	r5, #0
   12b8a:	9300      	str	r3, [sp, #0]
   12b8c:	9501      	str	r5, [sp, #4]
   12b8e:	4632      	mov	r2, r6
   12b90:	2103      	movs	r1, #3
   12b92:	4620      	mov	r0, r4
   12b94:	f7ff fd52 	bl	1263c <dw1000_write_reg>
    dw1000_set_eui(inst,inst->uwb_dev.euid);
   12b98:	2308      	movs	r3, #8
   12b9a:	9302      	str	r3, [sp, #8]
   12b9c:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
   12ba0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   12ba4:	e9cd 2300 	strd	r2, r3, [sp]
   12ba8:	462a      	mov	r2, r5
   12baa:	2101      	movs	r1, #1
   12bac:	4620      	mov	r0, r4
   12bae:	f7ff fd45 	bl	1263c <dw1000_write_reg>
    dw1000_set_address16(inst,inst->uwb_dev.uid);
   12bb2:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   12bb6:	9602      	str	r6, [sp, #8]
   12bb8:	9300      	str	r3, [sp, #0]
   12bba:	9501      	str	r5, [sp, #4]
   12bbc:	462a      	mov	r2, r5
   12bbe:	2103      	movs	r1, #3
   12bc0:	4620      	mov	r0, r4
   12bc2:	f7ff fd3b 	bl	1263c <dw1000_write_reg>
}
   12bc6:	4638      	mov	r0, r7
   12bc8:	b005      	add	sp, #20
   12bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(rc == 0);
   12bcc:	2300      	movs	r3, #0
   12bce:	461a      	mov	r2, r3
   12bd0:	4619      	mov	r1, r3
   12bd2:	4618      	mov	r0, r3
   12bd4:	f7f6 f9be 	bl	8f54 <__assert_func>
    assert(rc == 0);
   12bd8:	2300      	movs	r3, #0
   12bda:	461a      	mov	r2, r3
   12bdc:	4619      	mov	r1, r3
   12bde:	4618      	mov	r0, r3
   12be0:	f7f6 f9b8 	bl	8f54 <__assert_func>
    assert(rc == 0);
   12be4:	2300      	movs	r3, #0
   12be6:	461a      	mov	r2, r3
   12be8:	4619      	mov	r1, r3
   12bea:	4618      	mov	r0, r3
   12bec:	f7f6 f9b2 	bl	8f54 <__assert_func>
        return DPL_TIMEOUT;
   12bf0:	2706      	movs	r7, #6
   12bf2:	e7e8      	b.n	12bc6 <dw1000_dev_config+0x172>
   12bf4:	deca0130 	.word	0xdeca0130

00012bf8 <uwb_dw1000_wakeup>:
{
   12bf8:	b508      	push	{r3, lr}
    return dw1000_dev_wakeup((dw1000_dev_instance_t *)dev);
   12bfa:	f7ff fea9 	bl	12950 <dw1000_dev_wakeup>
}
   12bfe:	bd08      	pop	{r3, pc}

00012c00 <dw1000_dev_enter_sleep_after_tx>:
{
   12c00:	b530      	push	{r4, r5, lr}
   12c02:	b085      	sub	sp, #20
   12c04:	4604      	mov	r4, r0
   12c06:	460d      	mov	r5, r1
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
   12c08:	2304      	movs	r3, #4
   12c0a:	461a      	mov	r2, r3
   12c0c:	2136      	movs	r1, #54	; 0x36
   12c0e:	f7ff fca5 	bl	1255c <dw1000_read_reg>
    inst->control.sleep_after_tx = enable;
   12c12:	f894 35bc 	ldrb.w	r3, [r4, #1468]	; 0x5bc
   12c16:	f365 13c7 	bfi	r3, r5, #7, #1
   12c1a:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    if(inst->control.sleep_after_tx)
   12c1e:	b25b      	sxtb	r3, r3
   12c20:	2b00      	cmp	r3, #0
   12c22:	db0e      	blt.n	12c42 <dw1000_dev_enter_sleep_after_tx+0x42>
        reg &= ~(PMSC_CTRL1_ATXSLP);
   12c24:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, reg, sizeof(uint32_t));
   12c28:	2204      	movs	r2, #4
   12c2a:	9202      	str	r2, [sp, #8]
   12c2c:	9000      	str	r0, [sp, #0]
   12c2e:	2300      	movs	r3, #0
   12c30:	9301      	str	r3, [sp, #4]
   12c32:	2136      	movs	r1, #54	; 0x36
   12c34:	4620      	mov	r0, r4
   12c36:	f7ff fd01 	bl	1263c <dw1000_write_reg>
}
   12c3a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   12c3e:	b005      	add	sp, #20
   12c40:	bd30      	pop	{r4, r5, pc}
        reg |= PMSC_CTRL1_ATXSLP;
   12c42:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
   12c46:	e7ef      	b.n	12c28 <dw1000_dev_enter_sleep_after_tx+0x28>

00012c48 <uwb_dw1000_enter_sleep_after_tx>:
{
   12c48:	b508      	push	{r3, lr}
    return dw1000_dev_enter_sleep_after_tx((dw1000_dev_instance_t *)dev, enable);
   12c4a:	f7ff ffd9 	bl	12c00 <dw1000_dev_enter_sleep_after_tx>
}
   12c4e:	bd08      	pop	{r3, pc}

00012c50 <dw1000_dev_enter_sleep_after_rx>:
{
   12c50:	b530      	push	{r4, r5, lr}
   12c52:	b085      	sub	sp, #20
   12c54:	4604      	mov	r4, r0
   12c56:	460d      	mov	r5, r1
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
   12c58:	2304      	movs	r3, #4
   12c5a:	461a      	mov	r2, r3
   12c5c:	2136      	movs	r1, #54	; 0x36
   12c5e:	f7ff fc7d 	bl	1255c <dw1000_read_reg>
    inst->control.sleep_after_rx = enable;
   12c62:	f894 35bd 	ldrb.w	r3, [r4, #1469]	; 0x5bd
   12c66:	f365 0300 	bfi	r3, r5, #0, #1
   12c6a:	f884 35bd 	strb.w	r3, [r4, #1469]	; 0x5bd
    if(inst->control.sleep_after_rx)
   12c6e:	b2db      	uxtb	r3, r3
   12c70:	f013 0f01 	tst.w	r3, #1
   12c74:	d00e      	beq.n	12c94 <dw1000_dev_enter_sleep_after_rx+0x44>
        reg |= PMSC_CTRL1_ARXSLP;
   12c76:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, reg, sizeof(uint32_t));
   12c7a:	2204      	movs	r2, #4
   12c7c:	9202      	str	r2, [sp, #8]
   12c7e:	9000      	str	r0, [sp, #0]
   12c80:	2300      	movs	r3, #0
   12c82:	9301      	str	r3, [sp, #4]
   12c84:	2136      	movs	r1, #54	; 0x36
   12c86:	4620      	mov	r0, r4
   12c88:	f7ff fcd8 	bl	1263c <dw1000_write_reg>
}
   12c8c:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   12c90:	b005      	add	sp, #20
   12c92:	bd30      	pop	{r4, r5, pc}
        reg &= ~(PMSC_CTRL1_ARXSLP);
   12c94:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
   12c98:	e7ef      	b.n	12c7a <dw1000_dev_enter_sleep_after_rx+0x2a>

00012c9a <uwb_dw1000_enter_sleep_after_rx>:
{
   12c9a:	b508      	push	{r3, lr}
    return dw1000_dev_enter_sleep_after_rx((dw1000_dev_instance_t *)dev, enable);
   12c9c:	f7ff ffd8 	bl	12c50 <dw1000_dev_enter_sleep_after_rx>
}
   12ca0:	bd08      	pop	{r3, pc}
	...

00012ca4 <dw1000_dev_init>:
 * @param arg   Argument to set as pointer to struct dw1000_dev_cfg.
 * @return DPL_OK on success
 */
int
dw1000_dev_init(struct os_dev *odev, void *arg)
{
   12ca4:	b538      	push	{r3, r4, r5, lr}
   12ca6:	4604      	mov	r4, r0
   12ca8:	460d      	mov	r5, r1
    dpl_error_t err;
    struct dw1000_dev_cfg *cfg = (struct dw1000_dev_cfg*)arg;
    struct uwb_dev *udev = (struct uwb_dev*)odev;
    dw1000_dev_instance_t *inst = (dw1000_dev_instance_t *)odev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"dw1000_dev_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   12caa:	f7f9 fe69 	bl	c980 <dpl_cputime_get32>
   12cae:	4601      	mov	r1, r0
   12cb0:	4847      	ldr	r0, [pc, #284]	; (12dd0 <dw1000_dev_init+0x12c>)
   12cb2:	f7f9 fdff 	bl	c8b4 <printf>
#endif
    /* TODO, replace with open anch close function pointers below */
    OS_DEV_SETHANDLERS(odev, 0, 0);
   12cb6:	2300      	movs	r3, #0
   12cb8:	6023      	str	r3, [r4, #0]
   12cba:	60e3      	str	r3, [r4, #12]

    if (inst == NULL) {
   12cbc:	2c00      	cmp	r4, #0
   12cbe:	d060      	beq.n	12d82 <dw1000_dev_init+0xde>
        assert(inst);
        inst->uwb_dev.status.selfmalloc = 1;
        udev = (struct uwb_dev*)inst;
    }

    udev->rxbuf_size = MYNEWT_VAL(UWB_RX_BUFFER_SIZE);
   12cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   12cc4:	f8a4 3504 	strh.w	r3, [r4, #1284]	; 0x504
    udev->txbuf_size = MYNEWT_VAL(DW1000_HAL_SPI_BUFFER_SIZE);
   12cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
   12ccc:	f8a4 3506 	strh.w	r3, [r4, #1286]	; 0x506
    uwb_dev_init(udev);
   12cd0:	4620      	mov	r0, r4
   12cd2:	f7f5 ff69 	bl	8ba8 <uwb_dev_init>

    /* Setup common uwb interface */
    udev->uw_funcs = &dw1000_uwb_funcs;
   12cd6:	4b3f      	ldr	r3, [pc, #252]	; (12dd4 <dw1000_dev_init+0x130>)
   12cd8:	6263      	str	r3, [r4, #36]	; 0x24
    udev->rxdiag = (struct uwb_dev_rxdiag*)&inst->rxdiag;
   12cda:	f504 63b5 	add.w	r3, r4, #1448	; 0x5a8
   12cde:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
    udev->rxdiag->rxd_len = sizeof(inst->rxdiag);
   12ce2:	2314      	movs	r3, #20
   12ce4:	f8a4 35a8 	strh.w	r3, [r4, #1448]	; 0x5a8
#if MYNEWT_VAL(CIR_ENABLED)
    udev->cir = (struct cir_instance*)inst->cir;
   12ce8:	f8d4 35a4 	ldr.w	r3, [r4, #1444]	; 0x5a4
   12cec:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#endif
#if MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)
    inst->sys_status_bt_idx = 0;
   12cf0:	2300      	movs	r3, #0
   12cf2:	f8a4 3dfc 	strh.w	r3, [r4, #3580]	; 0xdfc
    inst->sys_status_bt_lock = 0;
   12cf6:	f884 3dfe 	strb.w	r3, [r4, #3582]	; 0xdfe

    /* Check size requirements */
    assert(sizeof(inst->rxdiag) <= MYNEWT_VAL(UWB_DEV_RXDIAG_MAXLEN));

    /* Capture dev_cfg parameters */
    inst->spi_sem = cfg->spi_sem;
   12cfa:	682b      	ldr	r3, [r5, #0]
   12cfc:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    inst->spi_num = cfg->spi_num;
   12d00:	7b2b      	ldrb	r3, [r5, #12]
   12d02:	f884 3564 	strb.w	r3, [r4, #1380]	; 0x564
    inst->spi_baudrate = cfg->spi_baudrate;
   12d06:	686b      	ldr	r3, [r5, #4]
   12d08:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
    inst->spi_baudrate_low = cfg->spi_baudrate_low;
   12d0c:	68ab      	ldr	r3, [r5, #8]
   12d0e:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    inst->irq_pin = cfg->irq_pin;
   12d12:	7bab      	ldrb	r3, [r5, #14]
   12d14:	f884 3565 	strb.w	r3, [r4, #1381]	; 0x565
    inst->rst_pin = cfg->rst_pin;
   12d18:	7b6b      	ldrb	r3, [r5, #13]
   12d1a:	f884 3567 	strb.w	r3, [r4, #1383]	; 0x567
    inst->ss_pin  = cfg->ss_pin;
   12d1e:	7beb      	ldrb	r3, [r5, #15]
   12d20:	f884 3566 	strb.w	r3, [r4, #1382]	; 0x566

    udev->rx_antenna_delay = cfg->rx_antenna_delay;
   12d24:	8a2b      	ldrh	r3, [r5, #16]
   12d26:	f8a4 34cc 	strh.w	r3, [r4, #1228]	; 0x4cc
    udev->tx_antenna_delay = cfg->tx_antenna_delay;
   12d2a:	8a6b      	ldrh	r3, [r5, #18]
   12d2c:	f8a4 34ce 	strh.w	r3, [r4, #1230]	; 0x4ce
    udev->ext_clock_delay = cfg->ext_clock_delay;
   12d30:	696b      	ldr	r3, [r5, #20]
   12d32:	f8c4 34d4 	str.w	r3, [r4, #1236]	; 0x4d4
    return (dpl_error_t)os_mutex_init(&mu->mu);
   12d36:	f504 60ae 	add.w	r0, r4, #1392	; 0x570
   12d3a:	f7f7 fe09 	bl	a950 <os_mutex_init>

    err = dpl_mutex_init(&inst->mutex);
    assert(err == DPL_OK);
   12d3e:	bba0      	cbnz	r0, 12daa <dw1000_dev_init+0x106>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   12d40:	2101      	movs	r1, #1
   12d42:	f504 60ad 	add.w	r0, r4, #1384	; 0x568
   12d46:	f7f7 f80f 	bl	9d68 <os_sem_init>
    err = dpl_sem_init(&inst->tx_sem, 0x1);
    assert(err == DPL_OK);
   12d4a:	bba0      	cbnz	r0, 12db6 <dw1000_dev_init+0x112>
   12d4c:	2101      	movs	r1, #1
   12d4e:	f204 5054 	addw	r0, r4, #1364	; 0x554
   12d52:	f7f7 f809 	bl	9d68 <os_sem_init>
    err = dpl_sem_init(&inst->spi_nb_sem, 0x1);
    assert(err == DPL_OK);
   12d56:	bba0      	cbnz	r0, 12dc2 <dw1000_dev_init+0x11e>

    /* phy attritubes per the IEEE802.15.4-2011 standard, Table 99 and Table 101 */
    udev->attrib.Tpsym = DPL_FLOAT32_INIT(1.0176282f); //!< Preamble symbols duration (usec) for MPRF of 62.89Mhz
   12d58:	f504 63a7 	add.w	r3, r4, #1336	; 0x538
   12d5c:	4a1e      	ldr	r2, [pc, #120]	; (12dd8 <dw1000_dev_init+0x134>)
   12d5e:	601a      	str	r2, [r3, #0]
    udev->attrib.Tbsym = DPL_FLOAT32_INIT(1.0256410f); //!< Baserate symbols duration (usec) 850khz
   12d60:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   12d64:	4a1d      	ldr	r2, [pc, #116]	; (12ddc <dw1000_dev_init+0x138>)
   12d66:	601a      	str	r2, [r3, #0]
    udev->attrib.Tdsym = DPL_FLOAT32_INIT(0.1282051f); //!< Datarate symbols duration (usec) 6.81Mhz
   12d68:	f504 63a8 	add.w	r3, r4, #1344	; 0x540
   12d6c:	4a1c      	ldr	r2, [pc, #112]	; (12de0 <dw1000_dev_init+0x13c>)
   12d6e:	601a      	str	r2, [r3, #0]

    SLIST_INIT(&inst->uwb_dev.interface_cbs);
   12d70:	2000      	movs	r0, #0
   12d72:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534

#if MYNEWT_VAL(DW1000_SPI_BACKTRACE_LEN) || MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)
    inst->bt_ticks2usec = 1000000/MYNEWT_VAL(OS_CPUTIME_FREQ);
   12d76:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
   12d7a:	2301      	movs	r3, #1
   12d7c:	f8c4 3608 	str.w	r3, [r4, #1544]	; 0x608
#endif
    return DPL_OK;
}
   12d80:	bd38      	pop	{r3, r4, r5, pc}
        inst = (dw1000_dev_instance_t *) calloc(1, sizeof(dw1000_dev_instance_t));
   12d82:	f242 6110 	movw	r1, #9744	; 0x2610
   12d86:	2001      	movs	r0, #1
   12d88:	f7f9 f840 	bl	be0c <calloc>
        assert(inst);
   12d8c:	4604      	mov	r4, r0
   12d8e:	b130      	cbz	r0, 12d9e <dw1000_dev_init+0xfa>
        inst->uwb_dev.status.selfmalloc = 1;
   12d90:	f890 3508 	ldrb.w	r3, [r0, #1288]	; 0x508
   12d94:	f043 0301 	orr.w	r3, r3, #1
   12d98:	f880 3508 	strb.w	r3, [r0, #1288]	; 0x508
        udev = (struct uwb_dev*)inst;
   12d9c:	e790      	b.n	12cc0 <dw1000_dev_init+0x1c>
        assert(inst);
   12d9e:	2300      	movs	r3, #0
   12da0:	461a      	mov	r2, r3
   12da2:	4619      	mov	r1, r3
   12da4:	4618      	mov	r0, r3
   12da6:	f7f6 f8d5 	bl	8f54 <__assert_func>
    assert(err == DPL_OK);
   12daa:	2300      	movs	r3, #0
   12dac:	461a      	mov	r2, r3
   12dae:	4619      	mov	r1, r3
   12db0:	4618      	mov	r0, r3
   12db2:	f7f6 f8cf 	bl	8f54 <__assert_func>
    assert(err == DPL_OK);
   12db6:	2300      	movs	r3, #0
   12db8:	461a      	mov	r2, r3
   12dba:	4619      	mov	r1, r3
   12dbc:	4618      	mov	r0, r3
   12dbe:	f7f6 f8c9 	bl	8f54 <__assert_func>
    assert(err == DPL_OK);
   12dc2:	2300      	movs	r3, #0
   12dc4:	461a      	mov	r2, r3
   12dc6:	4619      	mov	r1, r3
   12dc8:	4618      	mov	r0, r3
   12dca:	f7f6 f8c3 	bl	8f54 <__assert_func>
   12dce:	bf00      	nop
   12dd0:	0002286c 	.word	0x0002286c
   12dd4:	000228b0 	.word	0x000228b0
   12dd8:	3f8241a4 	.word	0x3f8241a4
   12ddc:	3f834834 	.word	0x3f834834
   12de0:	3e034833 	.word	0x3e034833

00012de4 <dw1000_dev_deinit>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void
dw1000_dev_deinit(dw1000_dev_instance_t * inst)
{
   12de4:	b510      	push	{r4, lr}
    assert(inst);
   12de6:	b1d8      	cbz	r0, 12e20 <dw1000_dev_deinit+0x3c>
   12de8:	4604      	mov	r4, r0
    hal_spi_disable(inst->spi_num);
   12dea:	f890 0564 	ldrb.w	r0, [r0, #1380]	; 0x564
   12dee:	f004 ffed 	bl	17dcc <hal_spi_disable>

    /* De-Initialise task structures in uwb_dev */
    uwb_task_deinit(&inst->uwb_dev);
   12df2:	4620      	mov	r0, r4
   12df4:	f7f5 fecc 	bl	8b90 <uwb_task_deinit>
    hal_gpio_irq_disable(inst->irq_pin);
   12df8:	f894 0565 	ldrb.w	r0, [r4, #1381]	; 0x565
   12dfc:	f7f6 f87e 	bl	8efc <hal_gpio_irq_disable>
    hal_gpio_irq_release(inst->irq_pin);
   12e00:	f894 0565 	ldrb.w	r0, [r4, #1381]	; 0x565
   12e04:	f7f6 f888 	bl	8f18 <hal_gpio_irq_release>

    if (inst->uwb_dev.status.selfmalloc) {
   12e08:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   12e0c:	f013 0f01 	tst.w	r3, #1
   12e10:	d10c      	bne.n	12e2c <dw1000_dev_deinit+0x48>
        free(inst);
    } else {
        inst->uwb_dev.status.initialized = 0;
   12e12:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   12e16:	f36f 0341 	bfc	r3, #1, #1
   12e1a:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    }
}
   12e1e:	bd10      	pop	{r4, pc}
    assert(inst);
   12e20:	2300      	movs	r3, #0
   12e22:	461a      	mov	r2, r3
   12e24:	4619      	mov	r1, r3
   12e26:	4618      	mov	r0, r3
   12e28:	f7f6 f894 	bl	8f54 <__assert_func>
        free(inst);
   12e2c:	4620      	mov	r0, r4
   12e2e:	f7f9 f8e7 	bl	c000 <free>
   12e32:	e7f4      	b.n	12e1e <dw1000_dev_deinit+0x3a>

00012e34 <hal_dw1000_spi_txrx_cb>:
 * @param ev    pointer to os_event
 * @return void
 */
void
hal_dw1000_spi_txrx_cb(void *arg, int len)
{
   12e34:	b570      	push	{r4, r5, r6, lr}
    dpl_error_t err;
    struct _dw1000_dev_instance_t * inst = arg;
    assert(inst!=0);
   12e36:	b170      	cbz	r0, 12e56 <hal_dw1000_spi_txrx_cb+0x22>
   12e38:	4604      	mov	r4, r0
   12e3a:	f8b0 355a 	ldrh.w	r3, [r0, #1370]	; 0x55a

    /* Check for longer nonblocking read/write op */
    if (dpl_sem_get_count(&inst->spi_nb_sem) == 0) {
   12e3e:	b983      	cbnz	r3, 12e62 <hal_dw1000_spi_txrx_cb+0x2e>
    return (dpl_error_t)os_sem_release(&sem->sem);
   12e40:	f200 5054 	addw	r0, r0, #1364	; 0x554
   12e44:	f7f6 ff98 	bl	9d78 <os_sem_release>
        err = dpl_sem_release(&inst->spi_nb_sem);
        assert(err == DPL_OK);
   12e48:	b1d0      	cbz	r0, 12e80 <hal_dw1000_spi_txrx_cb+0x4c>
   12e4a:	2300      	movs	r3, #0
   12e4c:	461a      	mov	r2, r3
   12e4e:	4619      	mov	r1, r3
   12e50:	4618      	mov	r0, r3
   12e52:	f7f6 f87f 	bl	8f54 <__assert_func>
    assert(inst!=0);
   12e56:	2300      	movs	r3, #0
   12e58:	461a      	mov	r2, r3
   12e5a:	4619      	mov	r1, r3
   12e5c:	4618      	mov	r0, r3
   12e5e:	f7f6 f879 	bl	8f54 <__assert_func>
    } else {
        hal_gpio_write(inst->ss_pin, 1);
   12e62:	2101      	movs	r1, #1
   12e64:	f890 0566 	ldrb.w	r0, [r0, #1382]	; 0x566
   12e68:	f7f5 ffc0 	bl	8dec <hal_gpio_write>
        DW1000_SPI_BT_ADD_END(inst);
   12e6c:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   12e70:	f893 3602 	ldrb.w	r3, [r3, #1538]	; 0x602
   12e74:	b12b      	cbz	r3, 12e82 <hal_dw1000_spi_txrx_cb+0x4e>
   12e76:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
   12e7a:	f7f6 ff7d 	bl	9d78 <os_sem_release>
        err = dpl_sem_release(inst->spi_sem);
        assert(err == DPL_OK);
   12e7e:	b9e8      	cbnz	r0, 12ebc <hal_dw1000_spi_txrx_cb+0x88>
    }
}
   12e80:	bd70      	pop	{r4, r5, r6, pc}
        DW1000_SPI_BT_ADD_END(inst);
   12e82:	f504 5600 	add.w	r6, r4, #8192	; 0x2000
   12e86:	f896 5600 	ldrb.w	r5, [r6, #1536]	; 0x600
   12e8a:	f7f9 fd79 	bl	c980 <dpl_cputime_get32>
   12e8e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   12e92:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   12e96:	f8c3 0e14 	str.w	r0, [r3, #3604]	; 0xe14
   12e9a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   12e9e:	00c0      	lsls	r0, r0, #3
   12ea0:	f600 6008 	addw	r0, r0, #3592	; 0xe08
   12ea4:	4420      	add	r0, r4
   12ea6:	f8b3 2e12 	ldrh.w	r2, [r3, #3602]	; 0xe12
   12eaa:	2a08      	cmp	r2, #8
   12eac:	bf28      	it	cs
   12eae:	2208      	movcs	r2, #8
   12eb0:	f8d6 1604 	ldr.w	r1, [r6, #1540]	; 0x604
   12eb4:	3002      	adds	r0, #2
   12eb6:	f7f9 f8dd 	bl	c074 <memcpy>
   12eba:	e7dc      	b.n	12e76 <hal_dw1000_spi_txrx_cb+0x42>
        assert(err == DPL_OK);
   12ebc:	2300      	movs	r3, #0
   12ebe:	461a      	mov	r2, r3
   12ec0:	4619      	mov	r1, r3
   12ec2:	4618      	mov	r0, r3
   12ec4:	f7f6 f846 	bl	8f54 <__assert_func>

00012ec8 <hal_dw1000_inst>:
    if (idx < ARRAY_SIZE(hal_dw1000_instances)) {
   12ec8:	4603      	mov	r3, r0
   12eca:	b928      	cbnz	r0, 12ed8 <hal_dw1000_inst+0x10>
        return &hal_dw1000_instances[idx];
   12ecc:	f242 6210 	movw	r2, #9744	; 0x2610
   12ed0:	4802      	ldr	r0, [pc, #8]	; (12edc <hal_dw1000_inst+0x14>)
   12ed2:	fb02 0003 	mla	r0, r2, r3, r0
   12ed6:	4770      	bx	lr
    return 0;
   12ed8:	2000      	movs	r0, #0
}
   12eda:	4770      	bx	lr
   12edc:	20000330 	.word	0x20000330

00012ee0 <hal_dw1000_reset>:
{
   12ee0:	b510      	push	{r4, lr}
    assert(inst);
   12ee2:	b308      	cbz	r0, 12f28 <hal_dw1000_reset+0x48>
   12ee4:	4604      	mov	r4, r0
    hal_gpio_init_out(inst->ss_pin, 1);
   12ee6:	2101      	movs	r1, #1
   12ee8:	f890 0566 	ldrb.w	r0, [r0, #1382]	; 0x566
   12eec:	f7f5 ff62 	bl	8db4 <hal_gpio_init_out>
    hal_gpio_init_out(inst->rst_pin, 0);
   12ef0:	2100      	movs	r1, #0
   12ef2:	f894 0567 	ldrb.w	r0, [r4, #1383]	; 0x567
   12ef6:	f7f5 ff5d 	bl	8db4 <hal_gpio_init_out>
    hal_gpio_write(inst->rst_pin, 0);
   12efa:	2100      	movs	r1, #0
   12efc:	f894 0567 	ldrb.w	r0, [r4, #1383]	; 0x567
   12f00:	f7f5 ff74 	bl	8dec <hal_gpio_write>
    dpl_cputime_delay_usecs(1);
   12f04:	2001      	movs	r0, #1
   12f06:	f7f9 fd4b 	bl	c9a0 <dpl_cputime_delay_usecs>
    hal_gpio_write(inst->rst_pin, 1);
   12f0a:	2101      	movs	r1, #1
   12f0c:	f894 0567 	ldrb.w	r0, [r4, #1383]	; 0x567
   12f10:	f7f5 ff6c 	bl	8dec <hal_gpio_write>
    hal_gpio_init_in(inst->rst_pin, HAL_GPIO_PULL_NONE);
   12f14:	2100      	movs	r1, #0
   12f16:	f894 0567 	ldrb.w	r0, [r4, #1383]	; 0x567
   12f1a:	f7f5 ff35 	bl	8d88 <hal_gpio_init_in>
    dpl_cputime_delay_usecs(5000);
   12f1e:	f241 3088 	movw	r0, #5000	; 0x1388
   12f22:	f7f9 fd3d 	bl	c9a0 <dpl_cputime_delay_usecs>
}
   12f26:	bd10      	pop	{r4, pc}
    assert(inst);
   12f28:	2300      	movs	r3, #0
   12f2a:	461a      	mov	r2, r3
   12f2c:	4619      	mov	r1, r3
   12f2e:	4618      	mov	r0, r3
   12f30:	f7f6 f810 	bl	8f54 <__assert_func>

00012f34 <hal_dw1000_read>:
{
   12f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12f38:	4605      	mov	r5, r0
   12f3a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    assert(inst->spi_sem);
   12f3e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
   12f42:	b310      	cbz	r0, 12f8a <hal_dw1000_read+0x56>
   12f44:	460f      	mov	r7, r1
   12f46:	4616      	mov	r6, r2
   12f48:	4698      	mov	r8, r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   12f4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12f4e:	f7f6 ff45 	bl	9ddc <os_sem_pend>
    if (rc != DPL_OK) {
   12f52:	bb00      	cbnz	r0, 12f96 <hal_dw1000_read+0x62>
    DW1000_SPI_BT_ADD(inst, cmd, cmd_size, buffer, length, 0, 0);
   12f54:	f505 5300 	add.w	r3, r5, #8192	; 0x2000
   12f58:	f893 3602 	ldrb.w	r3, [r3, #1538]	; 0x602
   12f5c:	b313      	cbz	r3, 12fa4 <hal_dw1000_read+0x70>
    hal_gpio_write(inst->ss_pin, 0);
   12f5e:	2100      	movs	r1, #0
   12f60:	f895 0566 	ldrb.w	r0, [r5, #1382]	; 0x566
   12f64:	f7f5 ff42 	bl	8dec <hal_gpio_write>
    rc = hal_spi_txrx(inst->spi_num, (void*)cmd, 0, cmd_size);
   12f68:	4633      	mov	r3, r6
   12f6a:	2200      	movs	r2, #0
   12f6c:	4639      	mov	r1, r7
   12f6e:	f895 0564 	ldrb.w	r0, [r5, #1380]	; 0x564
   12f72:	f004 ffa5 	bl	17ec0 <hal_spi_txrx>
    assert(rc == DPL_OK);
   12f76:	2800      	cmp	r0, #0
   12f78:	d144      	bne.n	13004 <hal_dw1000_read+0xd0>
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT)) ?
   12f7a:	f8b5 7506 	ldrh.w	r7, [r5, #1286]	; 0x506
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
   12f7e:	2fff      	cmp	r7, #255	; 0xff
   12f80:	bf28      	it	cs
   12f82:	27ff      	movcs	r7, #255	; 0xff
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   12f84:	4604      	mov	r4, r0
    int bytes_left = length;
   12f86:	464e      	mov	r6, r9
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   12f88:	e050      	b.n	1302c <hal_dw1000_read+0xf8>
    assert(inst->spi_sem);
   12f8a:	2300      	movs	r3, #0
   12f8c:	461a      	mov	r2, r3
   12f8e:	4619      	mov	r1, r3
   12f90:	4618      	mov	r0, r3
   12f92:	f7f5 ffdf 	bl	8f54 <__assert_func>
        inst->uwb_dev.status.sem_error = 1;
   12f96:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   12f9a:	f043 0304 	orr.w	r3, r3, #4
   12f9e:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
        goto early_exit;
   12fa2:	e056      	b.n	13052 <hal_dw1000_read+0x11e>
    DW1000_SPI_BT_ADD(inst, cmd, cmd_size, buffer, length, 0, 0);
   12fa4:	f505 5a00 	add.w	sl, r5, #8192	; 0x2000
   12fa8:	f8ba 4600 	ldrh.w	r4, [sl, #1536]	; 0x600
   12fac:	3401      	adds	r4, #1
   12fae:	b2a4      	uxth	r4, r4
   12fb0:	f8aa 4600 	strh.w	r4, [sl, #1536]	; 0x600
   12fb4:	b2e4      	uxtb	r4, r4
   12fb6:	f7f9 fce3 	bl	c980 <dpl_cputime_get32>
   12fba:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   12fbe:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   12fc2:	2200      	movs	r2, #0
   12fc4:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
   12fc8:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
   12fcc:	f8c3 2e08 	str.w	r2, [r3, #3592]	; 0xe08
   12fd0:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
   12fd4:	f8c3 2e10 	str.w	r2, [r3, #3600]	; 0xe10
   12fd8:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
   12fdc:	f8c3 0e00 	str.w	r0, [r3, #3584]	; 0xe00
   12fe0:	f883 6e08 	strb.w	r6, [r3, #3592]	; 0xe08
   12fe4:	f8a3 9e12 	strh.w	r9, [r3, #3602]	; 0xe12
   12fe8:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   12fec:	00c0      	lsls	r0, r0, #3
   12fee:	f500 6060 	add.w	r0, r0, #3584	; 0xe00
   12ff2:	4428      	add	r0, r5
   12ff4:	4632      	mov	r2, r6
   12ff6:	4639      	mov	r1, r7
   12ff8:	3004      	adds	r0, #4
   12ffa:	f7f9 f83b 	bl	c074 <memcpy>
   12ffe:	f8ca 8604 	str.w	r8, [sl, #1540]	; 0x604
   13002:	e7ac      	b.n	12f5e <hal_dw1000_read+0x2a>
    assert(rc == DPL_OK);
   13004:	2300      	movs	r3, #0
   13006:	461a      	mov	r2, r3
   13008:	4619      	mov	r1, r3
   1300a:	4618      	mov	r0, r3
   1300c:	f7f5 ffa2 	bl	8f54 <__assert_func>
        int bytes_to_read = (bytes_left > step) ? step : bytes_left;
   13010:	4633      	mov	r3, r6
   13012:	42be      	cmp	r6, r7
   13014:	bfa8      	it	ge
   13016:	463b      	movge	r3, r7
        bytes_left-=bytes_to_read;
   13018:	1af6      	subs	r6, r6, r3
        rc = hal_spi_txrx(inst->spi_num, inst->uwb_dev.txbuf, buffer+offset, bytes_to_read);
   1301a:	eb08 0204 	add.w	r2, r8, r4
   1301e:	f8d5 1500 	ldr.w	r1, [r5, #1280]	; 0x500
   13022:	f895 0564 	ldrb.w	r0, [r5, #1380]	; 0x564
   13026:	f004 ff4b 	bl	17ec0 <hal_spi_txrx>
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   1302a:	443c      	add	r4, r7
   1302c:	454c      	cmp	r4, r9
   1302e:	da01      	bge.n	13034 <hal_dw1000_read+0x100>
   13030:	2800      	cmp	r0, #0
   13032:	d0ed      	beq.n	13010 <hal_dw1000_read+0xdc>
    hal_gpio_write(inst->ss_pin, 1);
   13034:	2101      	movs	r1, #1
   13036:	f895 0566 	ldrb.w	r0, [r5, #1382]	; 0x566
   1303a:	f7f5 fed7 	bl	8dec <hal_gpio_write>
    DW1000_SPI_BT_ADD_END(inst);
   1303e:	f505 5300 	add.w	r3, r5, #8192	; 0x2000
   13042:	f893 3602 	ldrb.w	r3, [r3, #1538]	; 0x602
   13046:	b133      	cbz	r3, 13056 <hal_dw1000_read+0x122>
    return (dpl_error_t)os_sem_release(&sem->sem);
   13048:	f8d5 0550 	ldr.w	r0, [r5, #1360]	; 0x550
   1304c:	f7f6 fe94 	bl	9d78 <os_sem_release>
    assert(rc == DPL_OK);
   13050:	b9f0      	cbnz	r0, 13090 <hal_dw1000_read+0x15c>
}
   13052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    DW1000_SPI_BT_ADD_END(inst);
   13056:	f505 5600 	add.w	r6, r5, #8192	; 0x2000
   1305a:	f896 4600 	ldrb.w	r4, [r6, #1536]	; 0x600
   1305e:	f7f9 fc8f 	bl	c980 <dpl_cputime_get32>
   13062:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   13066:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   1306a:	f8c3 0e14 	str.w	r0, [r3, #3604]	; 0xe14
   1306e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   13072:	00c0      	lsls	r0, r0, #3
   13074:	f600 6008 	addw	r0, r0, #3592	; 0xe08
   13078:	4428      	add	r0, r5
   1307a:	f8b3 2e12 	ldrh.w	r2, [r3, #3602]	; 0xe12
   1307e:	2a08      	cmp	r2, #8
   13080:	bf28      	it	cs
   13082:	2208      	movcs	r2, #8
   13084:	f8d6 1604 	ldr.w	r1, [r6, #1540]	; 0x604
   13088:	3002      	adds	r0, #2
   1308a:	f7f8 fff3 	bl	c074 <memcpy>
   1308e:	e7db      	b.n	13048 <hal_dw1000_read+0x114>
    assert(rc == DPL_OK);
   13090:	2300      	movs	r3, #0
   13092:	461a      	mov	r2, r3
   13094:	4619      	mov	r1, r3
   13096:	4618      	mov	r0, r3
   13098:	f7f5 ff5c 	bl	8f54 <__assert_func>

0001309c <hal_dw1000_read_noblock>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_read_noblock(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
   1309c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130a0:	4604      	mov	r4, r0
   130a2:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    int rc = DPL_OK;
    assert(inst->spi_sem);
   130a6:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
   130aa:	b340      	cbz	r0, 130fe <hal_dw1000_read_noblock+0x62>
   130ac:	4688      	mov	r8, r1
   130ae:	4616      	mov	r6, r2
   130b0:	461f      	mov	r7, r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   130b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   130b6:	f7f6 fe91 	bl	9ddc <os_sem_pend>

    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   130ba:	bb30      	cbnz	r0, 1310a <hal_dw1000_read_noblock+0x6e>
        inst->uwb_dev.status.sem_error = 1;
        goto early_exit;
    }
    DW1000_SPI_BT_ADD(inst, cmd, cmd_size, buffer, length, 0, 1);
   130bc:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   130c0:	f893 3602 	ldrb.w	r3, [r3, #1538]	; 0x602
   130c4:	b343      	cbz	r3, 13118 <hal_dw1000_read_noblock+0x7c>

    /* Reset the txrx_cb to make sure it has the correct instance
     * as argument */
    rc = hal_spi_disable(inst->spi_num);
   130c6:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   130ca:	f004 fe7f 	bl	17dcc <hal_spi_disable>
   130ce:	4605      	mov	r5, r0
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
   130d0:	4622      	mov	r2, r4
   130d2:	49bb      	ldr	r1, [pc, #748]	; (133c0 <hal_dw1000_read_noblock+0x324>)
   130d4:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   130d8:	f004 fedc 	bl	17e94 <hal_spi_set_txrx_cb>
   130dc:	4305      	orrs	r5, r0
    rc |= hal_spi_enable(inst->spi_num);
   130de:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   130e2:	f004 fe4d 	bl	17d80 <hal_spi_enable>
    if (rc != DPL_OK) {
   130e6:	ea55 0300 	orrs.w	r3, r5, r0
   130ea:	d04b      	beq.n	13184 <hal_dw1000_read_noblock+0xe8>
    return (dpl_error_t)os_sem_release(&sem->sem);
   130ec:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
   130f0:	f7f6 fe42 	bl	9d78 <os_sem_release>
#else
    assert(0);
#endif
err_return:
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
   130f4:	2800      	cmp	r0, #0
   130f6:	f040 815d 	bne.w	133b4 <hal_dw1000_read_noblock+0x318>

early_exit:
    return rc;
}
   130fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(inst->spi_sem);
   130fe:	2300      	movs	r3, #0
   13100:	461a      	mov	r2, r3
   13102:	4619      	mov	r1, r3
   13104:	4618      	mov	r0, r3
   13106:	f7f5 ff25 	bl	8f54 <__assert_func>
        inst->uwb_dev.status.sem_error = 1;
   1310a:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1310e:	f043 0304 	orr.w	r3, r3, #4
   13112:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto early_exit;
   13116:	e7f0      	b.n	130fa <hal_dw1000_read_noblock+0x5e>
    DW1000_SPI_BT_ADD(inst, cmd, cmd_size, buffer, length, 0, 1);
   13118:	f504 5a00 	add.w	sl, r4, #8192	; 0x2000
   1311c:	f8ba 5600 	ldrh.w	r5, [sl, #1536]	; 0x600
   13120:	3501      	adds	r5, #1
   13122:	b2ad      	uxth	r5, r5
   13124:	f8aa 5600 	strh.w	r5, [sl, #1536]	; 0x600
   13128:	b2ed      	uxtb	r5, r5
   1312a:	f7f9 fc29 	bl	c980 <dpl_cputime_get32>
   1312e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   13132:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   13136:	2200      	movs	r2, #0
   13138:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
   1313c:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
   13140:	f8c3 2e08 	str.w	r2, [r3, #3592]	; 0xe08
   13144:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
   13148:	f8c3 2e10 	str.w	r2, [r3, #3600]	; 0xe10
   1314c:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
   13150:	f8c3 0e00 	str.w	r0, [r3, #3584]	; 0xe00
   13154:	f883 6e08 	strb.w	r6, [r3, #3592]	; 0xe08
   13158:	f893 2e09 	ldrb.w	r2, [r3, #3593]	; 0xe09
   1315c:	f042 0202 	orr.w	r2, r2, #2
   13160:	f883 2e09 	strb.w	r2, [r3, #3593]	; 0xe09
   13164:	f8a3 9e12 	strh.w	r9, [r3, #3602]	; 0xe12
   13168:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   1316c:	00c0      	lsls	r0, r0, #3
   1316e:	f500 6060 	add.w	r0, r0, #3584	; 0xe00
   13172:	4420      	add	r0, r4
   13174:	4632      	mov	r2, r6
   13176:	4641      	mov	r1, r8
   13178:	3004      	adds	r0, #4
   1317a:	f7f8 ff7b 	bl	c074 <memcpy>
   1317e:	f8ca 7604 	str.w	r7, [sl, #1540]	; 0x604
   13182:	e7a0      	b.n	130c6 <hal_dw1000_read_noblock+0x2a>
    hal_gpio_write(inst->ss_pin, 0);
   13184:	2100      	movs	r1, #0
   13186:	f894 0566 	ldrb.w	r0, [r4, #1382]	; 0x566
   1318a:	f7f5 fe2f 	bl	8dec <hal_gpio_write>
    if (cmd_size + length < inst->uwb_dev.txbuf_size &&
   1318e:	eb06 0509 	add.w	r5, r6, r9
   13192:	f8b4 3506 	ldrh.w	r3, [r4, #1286]	; 0x506
   13196:	429d      	cmp	r5, r3
   13198:	da01      	bge.n	1319e <hal_dw1000_read_noblock+0x102>
   1319a:	2dfe      	cmp	r5, #254	; 0xfe
   1319c:	dd0f      	ble.n	131be <hal_dw1000_read_noblock+0x122>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1319e:	f204 5a54 	addw	sl, r4, #1364	; 0x554
   131a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   131a6:	4650      	mov	r0, sl
   131a8:	f7f6 fe18 	bl	9ddc <os_sem_pend>
    if (rc != DPL_OK) {
   131ac:	2800      	cmp	r0, #0
   131ae:	d07b      	beq.n	132a8 <hal_dw1000_read_noblock+0x20c>
        inst->uwb_dev.status.sem_error = 1;
   131b0:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   131b4:	f043 0304 	orr.w	r3, r3, #4
   131b8:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   131bc:	e796      	b.n	130ec <hal_dw1000_read_noblock+0x50>
        memset(inst->uwb_dev.txbuf, 0, cmd_size + length);
   131be:	462a      	mov	r2, r5
   131c0:	2100      	movs	r1, #0
   131c2:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   131c6:	f7f8 ff62 	bl	c08e <memset>
        memcpy(inst->uwb_dev.txbuf, cmd, cmd_size);
   131ca:	4632      	mov	r2, r6
   131cc:	4641      	mov	r1, r8
   131ce:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   131d2:	f7f8 ff4f 	bl	c074 <memcpy>
   131d6:	f204 5854 	addw	r8, r4, #1364	; 0x554
   131da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   131de:	4640      	mov	r0, r8
   131e0:	f7f6 fdfc 	bl	9ddc <os_sem_pend>
        if (rc != DPL_OK) {
   131e4:	b130      	cbz	r0, 131f4 <hal_dw1000_read_noblock+0x158>
            inst->uwb_dev.status.sem_error = 1;
   131e6:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   131ea:	f043 0304 	orr.w	r3, r3, #4
   131ee:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
            goto err_return;
   131f2:	e77b      	b.n	130ec <hal_dw1000_read_noblock+0x50>
        rc = hal_spi_txrx_noblock(inst->spi_num, inst->uwb_dev.txbuf,
   131f4:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   131f8:	462b      	mov	r3, r5
   131fa:	460a      	mov	r2, r1
   131fc:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   13200:	f004 feb4 	bl	17f6c <hal_spi_txrx_noblock>
   13204:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13208:	4640      	mov	r0, r8
   1320a:	f7f6 fde7 	bl	9ddc <os_sem_pend>
        if (rc != DPL_OK) {
   1320e:	b130      	cbz	r0, 1321e <hal_dw1000_read_noblock+0x182>
            inst->uwb_dev.status.sem_error = 1;
   13210:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   13214:	f043 0304 	orr.w	r3, r3, #4
   13218:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
            goto err_return;
   1321c:	e766      	b.n	130ec <hal_dw1000_read_noblock+0x50>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1321e:	4640      	mov	r0, r8
   13220:	f7f6 fdaa 	bl	9d78 <os_sem_release>
        assert(rc == DPL_OK);
   13224:	b9e8      	cbnz	r0, 13262 <hal_dw1000_read_noblock+0x1c6>
        hal_gpio_write(inst->ss_pin, 1);
   13226:	2101      	movs	r1, #1
   13228:	f894 0566 	ldrb.w	r0, [r4, #1382]	; 0x566
   1322c:	f7f5 fdde 	bl	8dec <hal_gpio_write>
        memcpy(buffer, inst->uwb_dev.txbuf + cmd_size, length);
   13230:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   13234:	464a      	mov	r2, r9
   13236:	4431      	add	r1, r6
   13238:	4638      	mov	r0, r7
   1323a:	f7f8 ff1b 	bl	c074 <memcpy>
        DW1000_SPI_BT_ADD_END(inst);
   1323e:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   13242:	f893 3602 	ldrb.w	r3, [r3, #1538]	; 0x602
   13246:	b193      	cbz	r3, 1326e <hal_dw1000_read_noblock+0x1d2>
   13248:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
   1324c:	f7f6 fd94 	bl	9d78 <os_sem_release>
        assert(rc == DPL_OK);
   13250:	2800      	cmp	r0, #0
   13252:	f43f af52 	beq.w	130fa <hal_dw1000_read_noblock+0x5e>
   13256:	2300      	movs	r3, #0
   13258:	461a      	mov	r2, r3
   1325a:	4619      	mov	r1, r3
   1325c:	4618      	mov	r0, r3
   1325e:	f7f5 fe79 	bl	8f54 <__assert_func>
        assert(rc == DPL_OK);
   13262:	2300      	movs	r3, #0
   13264:	461a      	mov	r2, r3
   13266:	4619      	mov	r1, r3
   13268:	4618      	mov	r0, r3
   1326a:	f7f5 fe73 	bl	8f54 <__assert_func>
        DW1000_SPI_BT_ADD_END(inst);
   1326e:	f504 5600 	add.w	r6, r4, #8192	; 0x2000
   13272:	f896 5600 	ldrb.w	r5, [r6, #1536]	; 0x600
   13276:	f7f9 fb83 	bl	c980 <dpl_cputime_get32>
   1327a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   1327e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   13282:	f8c3 0e14 	str.w	r0, [r3, #3604]	; 0xe14
   13286:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   1328a:	00c0      	lsls	r0, r0, #3
   1328c:	f600 6008 	addw	r0, r0, #3592	; 0xe08
   13290:	4420      	add	r0, r4
   13292:	f8b3 2e12 	ldrh.w	r2, [r3, #3602]	; 0xe12
   13296:	2a08      	cmp	r2, #8
   13298:	bf28      	it	cs
   1329a:	2208      	movcs	r2, #8
   1329c:	f8d6 1604 	ldr.w	r1, [r6, #1540]	; 0x604
   132a0:	3002      	adds	r0, #2
   132a2:	f7f8 fee7 	bl	c074 <memcpy>
   132a6:	e7cf      	b.n	13248 <hal_dw1000_read_noblock+0x1ac>
    rc = hal_spi_txrx_noblock(inst->spi_num, (void*)cmd, inst->uwb_dev.txbuf, cmd_size);
   132a8:	4633      	mov	r3, r6
   132aa:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   132ae:	4641      	mov	r1, r8
   132b0:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   132b4:	f004 fe5a 	bl	17f6c <hal_spi_txrx_noblock>
    if (rc != DPL_OK) {
   132b8:	4680      	mov	r8, r0
   132ba:	2800      	cmp	r0, #0
   132bc:	f47f af16 	bne.w	130ec <hal_dw1000_read_noblock+0x50>
    memset(inst->uwb_dev.txbuf, 0, (length < inst->uwb_dev.txbuf_size)? length : inst->uwb_dev.txbuf_size);
   132c0:	f8b4 2506 	ldrh.w	r2, [r4, #1286]	; 0x506
   132c4:	454a      	cmp	r2, r9
   132c6:	bf28      	it	cs
   132c8:	464a      	movcs	r2, r9
   132ca:	2100      	movs	r1, #0
   132cc:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   132d0:	f7f8 fedd 	bl	c08e <memset>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   132d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   132d8:	4650      	mov	r0, sl
   132da:	f7f6 fd7f 	bl	9ddc <os_sem_pend>
    if (rc != DPL_OK) {
   132de:	b130      	cbz	r0, 132ee <hal_dw1000_read_noblock+0x252>
        inst->uwb_dev.status.sem_error = 1;
   132e0:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   132e4:	f043 0304 	orr.w	r3, r3, #4
   132e8:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   132ec:	e6fe      	b.n	130ec <hal_dw1000_read_noblock+0x50>
    return (dpl_error_t)os_sem_release(&sem->sem);
   132ee:	4650      	mov	r0, sl
   132f0:	f7f6 fd42 	bl	9d78 <os_sem_release>
    assert(rc == DPL_OK);
   132f4:	b940      	cbnz	r0, 13308 <hal_dw1000_read_noblock+0x26c>
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT))?
   132f6:	f8b4 b506 	ldrh.w	fp, [r4, #1286]	; 0x506
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
   132fa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   132fe:	bf28      	it	cs
   13300:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    int bytes_left = length;
   13304:	464d      	mov	r5, r9
    while (offset<length) {
   13306:	e011      	b.n	1332c <hal_dw1000_read_noblock+0x290>
    assert(rc == DPL_OK);
   13308:	2300      	movs	r3, #0
   1330a:	461a      	mov	r2, r3
   1330c:	4619      	mov	r1, r3
   1330e:	4618      	mov	r0, r3
   13310:	f7f5 fe20 	bl	8f54 <__assert_func>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)inst->uwb_dev.txbuf,
   13314:	4633      	mov	r3, r6
   13316:	eb07 0208 	add.w	r2, r7, r8
   1331a:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   1331e:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   13322:	f004 fe23 	bl	17f6c <hal_spi_txrx_noblock>
        assert(rc==DPL_OK);
   13326:	b9b8      	cbnz	r0, 13358 <hal_dw1000_read_noblock+0x2bc>
        if (bytes_left) {
   13328:	b9e5      	cbnz	r5, 13364 <hal_dw1000_read_noblock+0x2c8>
        offset+=bytes_to_read;
   1332a:	44b0      	add	r8, r6
    while (offset<length) {
   1332c:	45c1      	cmp	r9, r8
   1332e:	dd31      	ble.n	13394 <hal_dw1000_read_noblock+0x2f8>
        int bytes_to_read = (bytes_left > step) ? step : bytes_left;
   13330:	462e      	mov	r6, r5
   13332:	455d      	cmp	r5, fp
   13334:	bfa8      	it	ge
   13336:	465e      	movge	r6, fp
        if (bytes_left) {
   13338:	1bad      	subs	r5, r5, r6
   1333a:	d0eb      	beq.n	13314 <hal_dw1000_read_noblock+0x278>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1333c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13340:	4650      	mov	r0, sl
   13342:	f7f6 fd4b 	bl	9ddc <os_sem_pend>
            if (rc != DPL_OK) {
   13346:	2800      	cmp	r0, #0
   13348:	d0e4      	beq.n	13314 <hal_dw1000_read_noblock+0x278>
                inst->uwb_dev.status.sem_error = 1;
   1334a:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1334e:	f043 0304 	orr.w	r3, r3, #4
   13352:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   13356:	e6c9      	b.n	130ec <hal_dw1000_read_noblock+0x50>
        assert(rc==DPL_OK);
   13358:	2300      	movs	r3, #0
   1335a:	461a      	mov	r2, r3
   1335c:	4619      	mov	r1, r3
   1335e:	4618      	mov	r0, r3
   13360:	f7f5 fdf8 	bl	8f54 <__assert_func>
   13364:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13368:	4650      	mov	r0, sl
   1336a:	f7f6 fd37 	bl	9ddc <os_sem_pend>
            if (rc != DPL_OK) {
   1336e:	b950      	cbnz	r0, 13386 <hal_dw1000_read_noblock+0x2ea>
    return (dpl_error_t)os_sem_release(&sem->sem);
   13370:	4650      	mov	r0, sl
   13372:	f7f6 fd01 	bl	9d78 <os_sem_release>
            assert(rc == DPL_OK);
   13376:	2800      	cmp	r0, #0
   13378:	d0d7      	beq.n	1332a <hal_dw1000_read_noblock+0x28e>
   1337a:	2300      	movs	r3, #0
   1337c:	461a      	mov	r2, r3
   1337e:	4619      	mov	r1, r3
   13380:	4618      	mov	r0, r3
   13382:	f7f5 fde7 	bl	8f54 <__assert_func>
                inst->uwb_dev.status.sem_error = 1;
   13386:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1338a:	f043 0304 	orr.w	r3, r3, #4
   1338e:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   13392:	e6ab      	b.n	130ec <hal_dw1000_read_noblock+0x50>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   13394:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13398:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
   1339c:	f7f6 fd1e 	bl	9ddc <os_sem_pend>
    if (rc != DPL_OK) {
   133a0:	2800      	cmp	r0, #0
   133a2:	f43f aea3 	beq.w	130ec <hal_dw1000_read_noblock+0x50>
        inst->uwb_dev.status.sem_error = 1;
   133a6:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   133aa:	f043 0304 	orr.w	r3, r3, #4
   133ae:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   133b2:	e69b      	b.n	130ec <hal_dw1000_read_noblock+0x50>
    assert(rc == DPL_OK);
   133b4:	2300      	movs	r3, #0
   133b6:	461a      	mov	r2, r3
   133b8:	4619      	mov	r1, r3
   133ba:	4618      	mov	r0, r3
   133bc:	f7f5 fdca 	bl	8f54 <__assert_func>
   133c0:	00012e35 	.word	0x00012e35

000133c4 <hal_dw1000_write>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_write(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
   133c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   133c8:	4604      	mov	r4, r0
   133ca:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    int rc = DPL_OK;
    assert(inst->spi_sem);
   133ce:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
   133d2:	b380      	cbz	r0, 13436 <hal_dw1000_write+0x72>
   133d4:	460f      	mov	r7, r1
   133d6:	4616      	mov	r6, r2
   133d8:	4698      	mov	r8, r3
   133da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   133de:	f7f6 fcfd 	bl	9ddc <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   133e2:	bb70      	cbnz	r0, 13442 <hal_dw1000_write+0x7e>
        inst->uwb_dev.status.sem_error = 1;
        goto early_exit;
    }
    DW1000_SPI_BT_ADD(inst, cmd, cmd_size, buffer, length, 1, 0);
   133e4:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   133e8:	f893 3602 	ldrb.w	r3, [r3, #1538]	; 0x602
   133ec:	b383      	cbz	r3, 13450 <hal_dw1000_write+0x8c>

    hal_gpio_write(inst->ss_pin, 0);
   133ee:	2100      	movs	r1, #0
   133f0:	f894 0566 	ldrb.w	r0, [r4, #1382]	; 0x566
   133f4:	f7f5 fcfa 	bl	8dec <hal_gpio_write>

    rc = hal_spi_txrx(inst->spi_num, inst->uwb_dev.txbuf,
                      0, cmd_size+length);
    assert(rc == DPL_OK);
#else
    rc = hal_spi_txrx(inst->spi_num, (void*)cmd, 0, cmd_size);
   133f8:	4633      	mov	r3, r6
   133fa:	2200      	movs	r2, #0
   133fc:	4639      	mov	r1, r7
   133fe:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   13402:	f004 fd5d 	bl	17ec0 <hal_spi_txrx>
    assert(rc == DPL_OK);
   13406:	2800      	cmp	r0, #0
   13408:	d158      	bne.n	134bc <hal_dw1000_write+0xf8>
    if (length) {
   1340a:	f1b9 0f00 	cmp.w	r9, #0
   1340e:	d15b      	bne.n	134c8 <hal_dw1000_write+0x104>
        hal_spi_txrx(inst->spi_num, (void*)buffer, 0, length);
    }
#endif

    hal_gpio_write(inst->ss_pin, 1);
   13410:	2101      	movs	r1, #1
   13412:	f894 0566 	ldrb.w	r0, [r4, #1382]	; 0x566
   13416:	f7f5 fce9 	bl	8dec <hal_gpio_write>

    DW1000_SPI_BT_ADD_END(inst);
   1341a:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   1341e:	f893 3602 	ldrb.w	r3, [r3, #1538]	; 0x602
   13422:	2b00      	cmp	r3, #0
   13424:	d058      	beq.n	134d8 <hal_dw1000_write+0x114>
    return (dpl_error_t)os_sem_release(&sem->sem);
   13426:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
   1342a:	f7f6 fca5 	bl	9d78 <os_sem_release>
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
   1342e:	2800      	cmp	r0, #0
   13430:	d16f      	bne.n	13512 <hal_dw1000_write+0x14e>
early_exit:
    return rc;
}
   13432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    assert(inst->spi_sem);
   13436:	2300      	movs	r3, #0
   13438:	461a      	mov	r2, r3
   1343a:	4619      	mov	r1, r3
   1343c:	4618      	mov	r0, r3
   1343e:	f7f5 fd89 	bl	8f54 <__assert_func>
        inst->uwb_dev.status.sem_error = 1;
   13442:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   13446:	f043 0304 	orr.w	r3, r3, #4
   1344a:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto early_exit;
   1344e:	e7f0      	b.n	13432 <hal_dw1000_write+0x6e>
    DW1000_SPI_BT_ADD(inst, cmd, cmd_size, buffer, length, 1, 0);
   13450:	f504 5a00 	add.w	sl, r4, #8192	; 0x2000
   13454:	f8ba 5600 	ldrh.w	r5, [sl, #1536]	; 0x600
   13458:	3501      	adds	r5, #1
   1345a:	b2ad      	uxth	r5, r5
   1345c:	f8aa 5600 	strh.w	r5, [sl, #1536]	; 0x600
   13460:	b2ed      	uxtb	r5, r5
   13462:	f7f9 fa8d 	bl	c980 <dpl_cputime_get32>
   13466:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   1346a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   1346e:	2200      	movs	r2, #0
   13470:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
   13474:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
   13478:	f8c3 2e08 	str.w	r2, [r3, #3592]	; 0xe08
   1347c:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
   13480:	f8c3 2e10 	str.w	r2, [r3, #3600]	; 0xe10
   13484:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
   13488:	f8c3 0e00 	str.w	r0, [r3, #3584]	; 0xe00
   1348c:	f883 6e08 	strb.w	r6, [r3, #3592]	; 0xe08
   13490:	f893 2e09 	ldrb.w	r2, [r3, #3593]	; 0xe09
   13494:	f042 0201 	orr.w	r2, r2, #1
   13498:	f883 2e09 	strb.w	r2, [r3, #3593]	; 0xe09
   1349c:	f8a3 9e12 	strh.w	r9, [r3, #3602]	; 0xe12
   134a0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   134a4:	00c0      	lsls	r0, r0, #3
   134a6:	f500 6060 	add.w	r0, r0, #3584	; 0xe00
   134aa:	4420      	add	r0, r4
   134ac:	4632      	mov	r2, r6
   134ae:	4639      	mov	r1, r7
   134b0:	3004      	adds	r0, #4
   134b2:	f7f8 fddf 	bl	c074 <memcpy>
   134b6:	f8ca 8604 	str.w	r8, [sl, #1540]	; 0x604
   134ba:	e798      	b.n	133ee <hal_dw1000_write+0x2a>
    assert(rc == DPL_OK);
   134bc:	2300      	movs	r3, #0
   134be:	461a      	mov	r2, r3
   134c0:	4619      	mov	r1, r3
   134c2:	4618      	mov	r0, r3
   134c4:	f7f5 fd46 	bl	8f54 <__assert_func>
        hal_spi_txrx(inst->spi_num, (void*)buffer, 0, length);
   134c8:	464b      	mov	r3, r9
   134ca:	2200      	movs	r2, #0
   134cc:	4641      	mov	r1, r8
   134ce:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   134d2:	f004 fcf5 	bl	17ec0 <hal_spi_txrx>
   134d6:	e79b      	b.n	13410 <hal_dw1000_write+0x4c>
    DW1000_SPI_BT_ADD_END(inst);
   134d8:	f504 5600 	add.w	r6, r4, #8192	; 0x2000
   134dc:	f896 5600 	ldrb.w	r5, [r6, #1536]	; 0x600
   134e0:	f7f9 fa4e 	bl	c980 <dpl_cputime_get32>
   134e4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   134e8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   134ec:	f8c3 0e14 	str.w	r0, [r3, #3604]	; 0xe14
   134f0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   134f4:	00c0      	lsls	r0, r0, #3
   134f6:	f600 6008 	addw	r0, r0, #3592	; 0xe08
   134fa:	4420      	add	r0, r4
   134fc:	f8b3 2e12 	ldrh.w	r2, [r3, #3602]	; 0xe12
   13500:	2a08      	cmp	r2, #8
   13502:	bf28      	it	cs
   13504:	2208      	movcs	r2, #8
   13506:	f8d6 1604 	ldr.w	r1, [r6, #1540]	; 0x604
   1350a:	3002      	adds	r0, #2
   1350c:	f7f8 fdb2 	bl	c074 <memcpy>
   13510:	e789      	b.n	13426 <hal_dw1000_write+0x62>
    assert(rc == DPL_OK);
   13512:	2300      	movs	r3, #0
   13514:	461a      	mov	r2, r3
   13516:	4619      	mov	r1, r3
   13518:	4618      	mov	r0, r3
   1351a:	f7f5 fd1b 	bl	8f54 <__assert_func>
	...

00013520 <hal_dw1000_write_noblock>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_write_noblock(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
   13520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13524:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    int rc = DPL_OK;
    assert(length);
   13528:	f1b9 0f00 	cmp.w	r9, #0
   1352c:	d02f      	beq.n	1358e <hal_dw1000_write_noblock+0x6e>
   1352e:	4604      	mov	r4, r0
   13530:	460f      	mov	r7, r1
   13532:	4616      	mov	r6, r2
   13534:	4698      	mov	r8, r3
    assert(inst->spi_sem);
   13536:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
   1353a:	b370      	cbz	r0, 1359a <hal_dw1000_write_noblock+0x7a>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1353c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13540:	f7f6 fc4c 	bl	9ddc <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
   13544:	4603      	mov	r3, r0
    if (rc != DPL_OK) {
   13546:	bb70      	cbnz	r0, 135a6 <hal_dw1000_write_noblock+0x86>
        inst->uwb_dev.status.sem_error = 1;
        goto early_exit;
    }
    DW1000_SPI_BT_ADD(inst, cmd, cmd_size, buffer, length, 1, 1);
   13548:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   1354c:	f893 3602 	ldrb.w	r3, [r3, #1538]	; 0x602
   13550:	b383      	cbz	r3, 135b4 <hal_dw1000_write_noblock+0x94>

    /* Reset the txrx_cb to make sure it has the correct instance
     * as argument */
    rc = hal_spi_disable(inst->spi_num);
   13552:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   13556:	f004 fc39 	bl	17dcc <hal_spi_disable>
   1355a:	4605      	mov	r5, r0
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
   1355c:	4622      	mov	r2, r4
   1355e:	4989      	ldr	r1, [pc, #548]	; (13784 <hal_dw1000_write_noblock+0x264>)
   13560:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   13564:	f004 fc96 	bl	17e94 <hal_spi_set_txrx_cb>
   13568:	4305      	orrs	r5, r0
    rc |= hal_spi_enable(inst->spi_num);
   1356a:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   1356e:	f004 fc07 	bl	17d80 <hal_spi_enable>
    if (rc != DPL_OK) {
   13572:	ea55 0300 	orrs.w	r3, r5, r0
   13576:	d058      	beq.n	1362a <hal_dw1000_write_noblock+0x10a>
    return (dpl_error_t)os_sem_release(&sem->sem);
   13578:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
   1357c:	f7f6 fbfc 	bl	9d78 <os_sem_release>
#endif
early_exit:
    return rc;

err_return:
    rc = dpl_sem_release(inst->spi_sem);
   13580:	4603      	mov	r3, r0
    assert(rc == DPL_OK);
   13582:	2800      	cmp	r0, #0
   13584:	f040 80f8 	bne.w	13778 <hal_dw1000_write_noblock+0x258>
    return rc;
}
   13588:	4618      	mov	r0, r3
   1358a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(length);
   1358e:	2300      	movs	r3, #0
   13590:	461a      	mov	r2, r3
   13592:	4619      	mov	r1, r3
   13594:	4618      	mov	r0, r3
   13596:	f7f5 fcdd 	bl	8f54 <__assert_func>
    assert(inst->spi_sem);
   1359a:	2300      	movs	r3, #0
   1359c:	461a      	mov	r2, r3
   1359e:	4619      	mov	r1, r3
   135a0:	4618      	mov	r0, r3
   135a2:	f7f5 fcd7 	bl	8f54 <__assert_func>
        inst->uwb_dev.status.sem_error = 1;
   135a6:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
   135aa:	f042 0204 	orr.w	r2, r2, #4
   135ae:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
        goto early_exit;
   135b2:	e7e9      	b.n	13588 <hal_dw1000_write_noblock+0x68>
    DW1000_SPI_BT_ADD(inst, cmd, cmd_size, buffer, length, 1, 1);
   135b4:	f504 5a00 	add.w	sl, r4, #8192	; 0x2000
   135b8:	f8ba 5600 	ldrh.w	r5, [sl, #1536]	; 0x600
   135bc:	3501      	adds	r5, #1
   135be:	b2ad      	uxth	r5, r5
   135c0:	f8aa 5600 	strh.w	r5, [sl, #1536]	; 0x600
   135c4:	b2ed      	uxtb	r5, r5
   135c6:	f7f9 f9db 	bl	c980 <dpl_cputime_get32>
   135ca:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   135ce:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   135d2:	2200      	movs	r2, #0
   135d4:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
   135d8:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
   135dc:	f8c3 2e08 	str.w	r2, [r3, #3592]	; 0xe08
   135e0:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
   135e4:	f8c3 2e10 	str.w	r2, [r3, #3600]	; 0xe10
   135e8:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
   135ec:	f8c3 0e00 	str.w	r0, [r3, #3584]	; 0xe00
   135f0:	f883 6e08 	strb.w	r6, [r3, #3592]	; 0xe08
   135f4:	f893 1e09 	ldrb.w	r1, [r3, #3593]	; 0xe09
   135f8:	f041 0101 	orr.w	r1, r1, #1
   135fc:	f883 1e09 	strb.w	r1, [r3, #3593]	; 0xe09
   13600:	b2c9      	uxtb	r1, r1
   13602:	f041 0102 	orr.w	r1, r1, #2
   13606:	f883 1e09 	strb.w	r1, [r3, #3593]	; 0xe09
   1360a:	f8a3 9e12 	strh.w	r9, [r3, #3602]	; 0xe12
   1360e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   13612:	00c0      	lsls	r0, r0, #3
   13614:	f500 6060 	add.w	r0, r0, #3584	; 0xe00
   13618:	4420      	add	r0, r4
   1361a:	4632      	mov	r2, r6
   1361c:	4639      	mov	r1, r7
   1361e:	3004      	adds	r0, #4
   13620:	f7f8 fd28 	bl	c074 <memcpy>
   13624:	f8ca 8604 	str.w	r8, [sl, #1540]	; 0x604
   13628:	e793      	b.n	13552 <hal_dw1000_write_noblock+0x32>
    hal_gpio_write(inst->ss_pin, 0);
   1362a:	2100      	movs	r1, #0
   1362c:	f894 0566 	ldrb.w	r0, [r4, #1382]	; 0x566
   13630:	f7f5 fbdc 	bl	8dec <hal_gpio_write>
    if (cmd_size + length < inst->uwb_dev.txbuf_size &&
   13634:	eb06 0509 	add.w	r5, r6, r9
   13638:	f8b4 3506 	ldrh.w	r3, [r4, #1286]	; 0x506
   1363c:	429d      	cmp	r5, r3
   1363e:	da01      	bge.n	13644 <hal_dw1000_write_noblock+0x124>
   13640:	2dfe      	cmp	r5, #254	; 0xfe
   13642:	dd0e      	ble.n	13662 <hal_dw1000_write_noblock+0x142>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   13644:	f204 5a54 	addw	sl, r4, #1364	; 0x554
   13648:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1364c:	4650      	mov	r0, sl
   1364e:	f7f6 fbc5 	bl	9ddc <os_sem_pend>
    if (rc != DPL_OK) {
   13652:	b1e8      	cbz	r0, 13690 <hal_dw1000_write_noblock+0x170>
        inst->uwb_dev.status.sem_error = 1;
   13654:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   13658:	f043 0304 	orr.w	r3, r3, #4
   1365c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   13660:	e78a      	b.n	13578 <hal_dw1000_write_noblock+0x58>
        memcpy(inst->uwb_dev.txbuf, cmd, cmd_size);
   13662:	4632      	mov	r2, r6
   13664:	4639      	mov	r1, r7
   13666:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   1366a:	f7f8 fd03 	bl	c074 <memcpy>
        memcpy(inst->uwb_dev.txbuf+cmd_size, buffer, length);
   1366e:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   13672:	464a      	mov	r2, r9
   13674:	4641      	mov	r1, r8
   13676:	4430      	add	r0, r6
   13678:	f7f8 fcfc 	bl	c074 <memcpy>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)inst->uwb_dev.txbuf,
   1367c:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   13680:	462b      	mov	r3, r5
   13682:	460a      	mov	r2, r1
   13684:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   13688:	f004 fc70 	bl	17f6c <hal_spi_txrx_noblock>
   1368c:	4603      	mov	r3, r0
        return rc;
   1368e:	e77b      	b.n	13588 <hal_dw1000_write_noblock+0x68>
    rc = hal_spi_txrx_noblock(inst->spi_num, (void*)cmd, inst->uwb_dev.txbuf, cmd_size);
   13690:	4633      	mov	r3, r6
   13692:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   13696:	4639      	mov	r1, r7
   13698:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   1369c:	f004 fc66 	bl	17f6c <hal_spi_txrx_noblock>
    assert(rc==DPL_OK);
   136a0:	b960      	cbnz	r0, 136bc <hal_dw1000_write_noblock+0x19c>
   136a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   136a6:	4650      	mov	r0, sl
   136a8:	f7f6 fb98 	bl	9ddc <os_sem_pend>
    if (rc != DPL_OK) {
   136ac:	b160      	cbz	r0, 136c8 <hal_dw1000_write_noblock+0x1a8>
        inst->uwb_dev.status.sem_error = 1;
   136ae:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   136b2:	f043 0304 	orr.w	r3, r3, #4
   136b6:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   136ba:	e75d      	b.n	13578 <hal_dw1000_write_noblock+0x58>
    assert(rc==DPL_OK);
   136bc:	2300      	movs	r3, #0
   136be:	461a      	mov	r2, r3
   136c0:	4619      	mov	r1, r3
   136c2:	4618      	mov	r0, r3
   136c4:	f7f5 fc46 	bl	8f54 <__assert_func>
    return (dpl_error_t)os_sem_release(&sem->sem);
   136c8:	4650      	mov	r0, sl
   136ca:	f7f6 fb55 	bl	9d78 <os_sem_release>
   136ce:	4607      	mov	r7, r0
    rc = dpl_sem_release(&inst->spi_nb_sem);
   136d0:	4603      	mov	r3, r0
    assert(rc == DPL_OK);
   136d2:	b940      	cbnz	r0, 136e6 <hal_dw1000_write_noblock+0x1c6>
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT)) ?
   136d4:	f8b4 b506 	ldrh.w	fp, [r4, #1286]	; 0x506
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
   136d8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   136dc:	bf28      	it	cs
   136de:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    int bytes_left = length;
   136e2:	464d      	mov	r5, r9
    while (offset<length) {
   136e4:	e012      	b.n	1370c <hal_dw1000_write_noblock+0x1ec>
    assert(rc == DPL_OK);
   136e6:	2300      	movs	r3, #0
   136e8:	461a      	mov	r2, r3
   136ea:	4619      	mov	r1, r3
   136ec:	4618      	mov	r0, r3
   136ee:	f7f5 fc31 	bl	8f54 <__assert_func>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)buffer+offset,
   136f2:	4633      	mov	r3, r6
   136f4:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   136f8:	eb08 0107 	add.w	r1, r8, r7
   136fc:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   13700:	f004 fc34 	bl	17f6c <hal_spi_txrx_noblock>
        assert(rc==DPL_OK);
   13704:	4603      	mov	r3, r0
   13706:	b9c0      	cbnz	r0, 1373a <hal_dw1000_write_noblock+0x21a>
        if (bytes_left) {
   13708:	b9ed      	cbnz	r5, 13746 <hal_dw1000_write_noblock+0x226>
        offset+=bytes_to_write;
   1370a:	4437      	add	r7, r6
    while (offset<length) {
   1370c:	45b9      	cmp	r9, r7
   1370e:	f77f af3b 	ble.w	13588 <hal_dw1000_write_noblock+0x68>
        int bytes_to_write = (bytes_left > step) ? step : bytes_left;
   13712:	462e      	mov	r6, r5
   13714:	455d      	cmp	r5, fp
   13716:	bfa8      	it	ge
   13718:	465e      	movge	r6, fp
        if (bytes_left) {
   1371a:	1bad      	subs	r5, r5, r6
   1371c:	d0e9      	beq.n	136f2 <hal_dw1000_write_noblock+0x1d2>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1371e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13722:	4650      	mov	r0, sl
   13724:	f7f6 fb5a 	bl	9ddc <os_sem_pend>
            if (rc != DPL_OK) {
   13728:	2800      	cmp	r0, #0
   1372a:	d0e2      	beq.n	136f2 <hal_dw1000_write_noblock+0x1d2>
                inst->uwb_dev.status.sem_error = 1;
   1372c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   13730:	f043 0304 	orr.w	r3, r3, #4
   13734:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   13738:	e71e      	b.n	13578 <hal_dw1000_write_noblock+0x58>
        assert(rc==DPL_OK);
   1373a:	2300      	movs	r3, #0
   1373c:	461a      	mov	r2, r3
   1373e:	4619      	mov	r1, r3
   13740:	4618      	mov	r0, r3
   13742:	f7f5 fc07 	bl	8f54 <__assert_func>
   13746:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1374a:	4650      	mov	r0, sl
   1374c:	f7f6 fb46 	bl	9ddc <os_sem_pend>
            if (rc != DPL_OK) {
   13750:	b958      	cbnz	r0, 1376a <hal_dw1000_write_noblock+0x24a>
    return (dpl_error_t)os_sem_release(&sem->sem);
   13752:	4650      	mov	r0, sl
   13754:	f7f6 fb10 	bl	9d78 <os_sem_release>
            rc = dpl_sem_release(&inst->spi_nb_sem);
   13758:	4603      	mov	r3, r0
            assert(rc == DPL_OK);
   1375a:	2800      	cmp	r0, #0
   1375c:	d0d5      	beq.n	1370a <hal_dw1000_write_noblock+0x1ea>
   1375e:	2300      	movs	r3, #0
   13760:	461a      	mov	r2, r3
   13762:	4619      	mov	r1, r3
   13764:	4618      	mov	r0, r3
   13766:	f7f5 fbf5 	bl	8f54 <__assert_func>
                inst->uwb_dev.status.sem_error = 1;
   1376a:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1376e:	f043 0304 	orr.w	r3, r3, #4
   13772:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   13776:	e6ff      	b.n	13578 <hal_dw1000_write_noblock+0x58>
    assert(rc == DPL_OK);
   13778:	2300      	movs	r3, #0
   1377a:	461a      	mov	r2, r3
   1377c:	4619      	mov	r1, r3
   1377e:	4618      	mov	r0, r3
   13780:	f7f5 fbe8 	bl	8f54 <__assert_func>
   13784:	00012e35 	.word	0x00012e35

00013788 <hal_dw1000_rw_noblock_wait>:
 * @param timeout  Time in ms to wait, use DPL_TIMEOUT_NEVER (UINT32_MAX) to wait indefinitely
 * @return int  Returns 0 on success, error code otherwise
 */
int
hal_dw1000_rw_noblock_wait(struct _dw1000_dev_instance_t * inst, uint32_t timeout_ms)
{
   13788:	b530      	push	{r4, r5, lr}
   1378a:	b083      	sub	sp, #12
   1378c:	4604      	mov	r4, r0
    int err;
    dpl_time_t ticks;
    if (timeout_ms != DPL_TIMEOUT_NEVER) {
   1378e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   13792:	d10f      	bne.n	137b4 <hal_dw1000_rw_noblock_wait+0x2c>
        dpl_time_ms_to_ticks(timeout_ms, &ticks);
    } else {
        ticks = DPL_TIMEOUT_NEVER;
   13794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13798:	9301      	str	r3, [sp, #4]
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1379a:	9901      	ldr	r1, [sp, #4]
   1379c:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
   137a0:	f7f6 fb1c 	bl	9ddc <os_sem_pend>
   137a4:	4605      	mov	r5, r0
    }
    err = dpl_sem_pend(inst->spi_sem, ticks);
    if (dpl_sem_get_count(inst->spi_sem) == 0) {
   137a6:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
   137aa:	88c3      	ldrh	r3, [r0, #6]
   137ac:	b13b      	cbz	r3, 137be <hal_dw1000_rw_noblock_wait+0x36>
        dpl_sem_release(inst->spi_sem);
    }
    return err;
}
   137ae:	4628      	mov	r0, r5
   137b0:	b003      	add	sp, #12
   137b2:	bd30      	pop	{r4, r5, pc}
   137b4:	4608      	mov	r0, r1
    return (dpl_error_t)os_time_ms_to_ticks(ms, out_ticks);
   137b6:	a901      	add	r1, sp, #4
   137b8:	f7f6 fdb9 	bl	a32e <os_time_ms_to_ticks>
   137bc:	e7ed      	b.n	1379a <hal_dw1000_rw_noblock_wait+0x12>
    return (dpl_error_t)os_sem_release(&sem->sem);
   137be:	f7f6 fadb 	bl	9d78 <os_sem_release>
    return err;
   137c2:	e7f4      	b.n	137ae <hal_dw1000_rw_noblock_wait+0x26>

000137c4 <hal_dw1000_wakeup>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return int  DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_wakeup(struct _dw1000_dev_instance_t * inst)
{
   137c4:	b538      	push	{r3, r4, r5, lr}
   137c6:	4604      	mov	r4, r0
    int rc = DPL_OK;
    os_sr_t sr;
    assert(inst->spi_sem);
   137c8:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
   137cc:	b158      	cbz	r0, 137e6 <hal_dw1000_wakeup+0x22>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   137ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   137d2:	f7f6 fb03 	bl	9ddc <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   137d6:	b160      	cbz	r0, 137f2 <hal_dw1000_wakeup+0x2e>
        inst->uwb_dev.status.sem_error = 1;
   137d8:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   137dc:	f043 0304 	orr.w	r3, r3, #4
   137e0:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b

    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
early_exit:
    return rc;
}
   137e4:	bd38      	pop	{r3, r4, r5, pc}
    assert(inst->spi_sem);
   137e6:	2300      	movs	r3, #0
   137e8:	461a      	mov	r2, r3
   137ea:	4619      	mov	r1, r3
   137ec:	4618      	mov	r0, r3
   137ee:	f7f5 fbb1 	bl	8f54 <__assert_func>
    return os_arch_save_sr();
   137f2:	f7f6 fdb9 	bl	a368 <os_arch_save_sr>
   137f6:	4605      	mov	r5, r0
    hal_spi_disable(inst->spi_num);
   137f8:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   137fc:	f004 fae6 	bl	17dcc <hal_spi_disable>
    hal_gpio_write(inst->ss_pin, 0);
   13800:	2100      	movs	r1, #0
   13802:	f894 0566 	ldrb.w	r0, [r4, #1382]	; 0x566
   13806:	f7f5 faf1 	bl	8dec <hal_gpio_write>
    dpl_cputime_delay_usecs(2000);
   1380a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   1380e:	f7f9 f8c7 	bl	c9a0 <dpl_cputime_delay_usecs>
    hal_gpio_write(inst->ss_pin, 1);
   13812:	2101      	movs	r1, #1
   13814:	f894 0566 	ldrb.w	r0, [r4, #1382]	; 0x566
   13818:	f7f5 fae8 	bl	8dec <hal_gpio_write>
    hal_spi_enable(inst->spi_num);
   1381c:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   13820:	f004 faae 	bl	17d80 <hal_spi_enable>
    dpl_cputime_delay_usecs(5000);
   13824:	f241 3088 	movw	r0, #5000	; 0x1388
   13828:	f7f9 f8ba 	bl	c9a0 <dpl_cputime_delay_usecs>
    os_arch_restore_sr(ctx);
   1382c:	4628      	mov	r0, r5
   1382e:	f7f6 fda1 	bl	a374 <os_arch_restore_sr>
    return (dpl_error_t)os_sem_release(&sem->sem);
   13832:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
   13836:	f7f6 fa9f 	bl	9d78 <os_sem_release>
    assert(rc == DPL_OK);
   1383a:	2800      	cmp	r0, #0
   1383c:	d0d2      	beq.n	137e4 <hal_dw1000_wakeup+0x20>
   1383e:	2300      	movs	r3, #0
   13840:	461a      	mov	r2, r3
   13842:	4619      	mov	r1, r3
   13844:	4618      	mov	r0, r3
   13846:	f7f5 fb85 	bl	8f54 <__assert_func>

0001384a <calc_rx_window_timeout>:
}

static uint16_t
calc_rx_window_timeout(uint64_t rx_start, uint64_t rx_end)
{
    uint32_t timeout = ((rx_end - rx_start) & UWB_DTU_40BMASK) >> 16;
   1384a:	1a12      	subs	r2, r2, r0
   1384c:	eb63 0301 	sbc.w	r3, r3, r1
   13850:	0c12      	lsrs	r2, r2, #16
   13852:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   13856:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    /* If more than 8.4s away (more than 1/2 period)- the end has likely
     * already passed so set a short timeout as to trigger a timeout */
    if (timeout > 0x7fffff) {
   1385a:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1385e:	d105      	bne.n	1386c <calc_rx_window_timeout+0x22>
        timeout = 1;
    }
    /* DW1000 can't have a rx-timeout greater than 0xffff */
    if (timeout > 0xffff) {
   13860:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   13864:	d303      	bcc.n	1386e <calc_rx_window_timeout+0x24>
        timeout = 0xffff;
   13866:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1386a:	e000      	b.n	1386e <calc_rx_window_timeout+0x24>
        timeout = 1;
   1386c:	2001      	movs	r0, #1
    }
    return timeout;
}
   1386e:	b280      	uxth	r0, r0
   13870:	4770      	bx	lr

00013872 <dw1000_checkoverrun>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return uint8_t 1 = overrun error has occured, 0 otherwise
 */
static uint8_t
dw1000_checkoverrun(dw1000_dev_instance_t * inst)
{
   13872:	b508      	push	{r3, lr}
    uint8_t ov = dw1000_read_reg(inst, SYS_STATUS_ID, 2, sizeof(uint8_t)) & (SYS_STATUS_RXOVRR >> 16);
   13874:	2301      	movs	r3, #1
   13876:	2202      	movs	r2, #2
   13878:	210f      	movs	r1, #15
   1387a:	f7fe fe6f 	bl	1255c <dw1000_read_reg>
    return (ov!=0);
}
   1387e:	f3c0 1000 	ubfx	r0, r0, #4, #1
   13882:	bd08      	pop	{r3, pc}

00013884 <dw1000_irq>:
{
   13884:	b510      	push	{r4, lr}
   13886:	4604      	mov	r4, r0
    inst->uwb_dev.irq_at_ticks = dpl_cputime_get32();
   13888:	f7f9 f87a 	bl	c980 <dpl_cputime_get32>
   1388c:	6320      	str	r0, [r4, #48]	; 0x30
    if (!inst->uwb_dev.status.sleeping) {
   1388e:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   13892:	f013 0f01 	tst.w	r3, #1
   13896:	d000      	beq.n	1389a <dw1000_irq+0x16>
}
   13898:	bd10      	pop	{r4, pc}
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   1389a:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1389e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   138a2:	f7f5 fe7d 	bl	95a0 <os_eventq_put>
   138a6:	e7f7      	b.n	13898 <dw1000_irq+0x14>

000138a8 <dw1000_read_rx>:
{
   138a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138ac:	b082      	sub	sp, #8
   138ae:	4604      	mov	r4, r0
   138b0:	460f      	mov	r7, r1
   138b2:	4616      	mov	r6, r2
   138b4:	461d      	mov	r5, r3
    MAC_STATS_INCN(rx_bytes, rxFrameLength);
   138b6:	f8d0 05d8 	ldr.w	r0, [r0, #1496]	; 0x5d8
   138ba:	4418      	add	r0, r3
   138bc:	f8c4 05d8 	str.w	r0, [r4, #1496]	; 0x5d8
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   138c0:	f504 68ae 	add.w	r8, r4, #1392	; 0x570
   138c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   138c8:	4640      	mov	r0, r8
   138ca:	f7f7 f8a7 	bl	aa1c <os_mutex_pend>
    if (err != DPL_OK) {
   138ce:	b150      	cbz	r0, 138e6 <dw1000_read_rx+0x3e>
        inst->uwb_dev.status.mtx_error = 1;
   138d0:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   138d4:	f043 0308 	orr.w	r3, r3, #8
   138d8:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   138dc:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   138e0:	b002      	add	sp, #8
   138e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dw1000_read(inst, RX_BUFFER_ID, rxBufferOffset, rxFrameBytes, rxFrameLength);
   138e6:	9500      	str	r5, [sp, #0]
   138e8:	463b      	mov	r3, r7
   138ea:	4632      	mov	r2, r6
   138ec:	2111      	movs	r1, #17
   138ee:	4620      	mov	r0, r4
   138f0:	f7fe fd6a 	bl	123c8 <dw1000_read>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   138f4:	4640      	mov	r0, r8
   138f6:	f7f7 f835 	bl	a964 <os_mutex_release>
    assert(err == DPL_OK);
   138fa:	2800      	cmp	r0, #0
   138fc:	d0ee      	beq.n	138dc <dw1000_read_rx+0x34>
   138fe:	2300      	movs	r3, #0
   13900:	461a      	mov	r2, r3
   13902:	4619      	mov	r1, r3
   13904:	4618      	mov	r0, r3
   13906:	f7f5 fb25 	bl	8f54 <__assert_func>

0001390a <dw1000_write_tx>:
{
   1390a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1390e:	b082      	sub	sp, #8
   13910:	4604      	mov	r4, r0
   13912:	460f      	mov	r7, r1
   13914:	4616      	mov	r6, r2
   13916:	461d      	mov	r5, r3
    MAC_STATS_INCN(tx_bytes, txFrameLength);
   13918:	f8d0 25d4 	ldr.w	r2, [r0, #1492]	; 0x5d4
   1391c:	441a      	add	r2, r3
   1391e:	f8c0 25d4 	str.w	r2, [r0, #1492]	; 0x5d4
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   13922:	f500 68ae 	add.w	r8, r0, #1392	; 0x570
   13926:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1392a:	4640      	mov	r0, r8
   1392c:	f7f7 f876 	bl	aa1c <os_mutex_pend>
    if (err != DPL_OK) {
   13930:	b990      	cbnz	r0, 13958 <dw1000_write_tx+0x4e>
    if ((txBufferOffset + txFrameLength) <= 1024){
   13932:	1973      	adds	r3, r6, r5
   13934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   13938:	dd15      	ble.n	13966 <dw1000_write_tx+0x5c>
        inst->uwb_dev.status.tx_frame_error = 1;
   1393a:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1393e:	f043 0310 	orr.w	r3, r3, #16
   13942:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    return (dpl_error_t)os_mutex_release(&mu->mu);
   13946:	4640      	mov	r0, r8
   13948:	f7f7 f80c 	bl	a964 <os_mutex_release>
    assert(err == DPL_OK);
   1394c:	bb20      	cbnz	r0, 13998 <dw1000_write_tx+0x8e>
}
   1394e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   13952:	b002      	add	sp, #8
   13954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->uwb_dev.status.mtx_error = 1;
   13958:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1395c:	f043 0308 	orr.w	r3, r3, #8
   13960:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto mtx_error;
   13964:	e7f3      	b.n	1394e <dw1000_write_tx+0x44>
        dw1000_write(inst, TX_BUFFER_ID, txBufferOffset,  txFrameBytes, txFrameLength);
   13966:	9500      	str	r5, [sp, #0]
   13968:	463b      	mov	r3, r7
   1396a:	4632      	mov	r2, r6
   1396c:	2109      	movs	r1, #9
   1396e:	4620      	mov	r0, r4
   13970:	f7fe fd8e 	bl	12490 <dw1000_write>
        if (txBufferOffset == 0) {
   13974:	b176      	cbz	r6, 13994 <dw1000_write_tx+0x8a>
        inst->uwb_dev.status.tx_frame_error = 0;
   13976:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1397a:	f36f 1304 	bfc	r3, #4, #1
   1397e:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
   13982:	e7e0      	b.n	13946 <dw1000_write_tx+0x3c>
                inst->uwb_dev.fctrl_array[i] =  txFrameBytes[i];
   13984:	5cf9      	ldrb	r1, [r7, r3]
   13986:	18e2      	adds	r2, r4, r3
   13988:	f882 14e0 	strb.w	r1, [r2, #1248]	; 0x4e0
            for (i = 0; i< sizeof(inst->uwb_dev.fctrl); i++)
   1398c:	3301      	adds	r3, #1
   1398e:	2b01      	cmp	r3, #1
   13990:	d9f8      	bls.n	13984 <dw1000_write_tx+0x7a>
   13992:	e7f0      	b.n	13976 <dw1000_write_tx+0x6c>
   13994:	2300      	movs	r3, #0
   13996:	e7fa      	b.n	1398e <dw1000_write_tx+0x84>
    assert(err == DPL_OK);
   13998:	2300      	movs	r3, #0
   1399a:	461a      	mov	r2, r3
   1399c:	4619      	mov	r1, r3
   1399e:	4618      	mov	r0, r3
   139a0:	f7f5 fad8 	bl	8f54 <__assert_func>

000139a4 <dw1000_write_tx_fctrl>:
{
   139a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   139a8:	b084      	sub	sp, #16
   139aa:	4605      	mov	r5, r0
   139ac:	460c      	mov	r4, r1
   139ae:	4690      	mov	r8, r2
   139b0:	461e      	mov	r6, r3
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   139b2:	f500 67ae 	add.w	r7, r0, #1392	; 0x570
   139b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   139ba:	4638      	mov	r0, r7
   139bc:	f7f7 f82e 	bl	aa1c <os_mutex_pend>
    if (err != DPL_OK) {
   139c0:	bb08      	cbnz	r0, 13a06 <dw1000_write_tx_fctrl+0x62>
    if (ext) {
   139c2:	b33e      	cbz	r6, 13a14 <dw1000_write_tx_fctrl+0x70>
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   139c4:	7873      	ldrb	r3, [r6, #1]
   139c6:	f895 250e 	ldrb.w	r2, [r5, #1294]	; 0x50e
   139ca:	431a      	orrs	r2, r3
            (((uint32_t)ext->dataRate) << TX_FCTRL_TXBR_SHFT) |
   139cc:	7833      	ldrb	r3, [r6, #0]
   139ce:	035b      	lsls	r3, r3, #13
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   139d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            (((uint32_t)ext->ranging_en_bit) << TX_FCTRL_TR_SHFT);
   139d4:	78b2      	ldrb	r2, [r6, #2]
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   139d6:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    tx_fctrl_reg |= ((txFrameLength + 2) & TX_FCTRL_FLE_MASK)  |
   139da:	3402      	adds	r4, #2
   139dc:	f3c4 0409 	ubfx	r4, r4, #0, #10
   139e0:	ea44 5488 	orr.w	r4, r4, r8, lsl #22
   139e4:	431c      	orrs	r4, r3
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, tx_fctrl_reg, sizeof(uint32_t));
   139e6:	2304      	movs	r3, #4
   139e8:	9302      	str	r3, [sp, #8]
   139ea:	2200      	movs	r2, #0
   139ec:	9400      	str	r4, [sp, #0]
   139ee:	9201      	str	r2, [sp, #4]
   139f0:	2108      	movs	r1, #8
   139f2:	4628      	mov	r0, r5
   139f4:	f7fe fe22 	bl	1263c <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   139f8:	4638      	mov	r0, r7
   139fa:	f7f6 ffb3 	bl	a964 <os_mutex_release>
    assert(err == DPL_OK);
   139fe:	b960      	cbnz	r0, 13a1a <dw1000_write_tx_fctrl+0x76>
}
   13a00:	b004      	add	sp, #16
   13a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->uwb_dev.status.mtx_error = 1;
   13a06:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   13a0a:	f043 0308 	orr.w	r3, r3, #8
   13a0e:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
        goto mtx_error;
   13a12:	e7f5      	b.n	13a00 <dw1000_write_tx_fctrl+0x5c>
        tx_fctrl_reg = inst->tx_fctrl;
   13a14:	f8d5 3590 	ldr.w	r3, [r5, #1424]	; 0x590
   13a18:	e7df      	b.n	139da <dw1000_write_tx_fctrl+0x36>
    assert(err == DPL_OK);
   13a1a:	2300      	movs	r3, #0
   13a1c:	461a      	mov	r2, r3
   13a1e:	4619      	mov	r1, r3
   13a20:	4618      	mov	r0, r3
   13a22:	f7f5 fa97 	bl	8f54 <__assert_func>

00013a26 <dw1000_start_tx>:
{
   13a26:	b570      	push	{r4, r5, r6, lr}
   13a28:	b084      	sub	sp, #16
   13a2a:	4604      	mov	r4, r0
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   13a2c:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   13a30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13a34:	4630      	mov	r0, r6
   13a36:	f7f6 f9d1 	bl	9ddc <os_sem_pend>
    if (err != DPL_OK) {
   13a3a:	2800      	cmp	r0, #0
   13a3c:	d144      	bne.n	13ac8 <dw1000_start_tx+0xa2>
    control = inst->control;
   13a3e:	f8d4 55bc 	ldr.w	r5, [r4, #1468]	; 0x5bc
    if (config->trxoff_enable){ // force return to idle state
   13a42:	f894 3530 	ldrb.w	r3, [r4, #1328]	; 0x530
   13a46:	f013 0f20 	tst.w	r3, #32
   13a4a:	d144      	bne.n	13ad6 <dw1000_start_tx+0xb0>
    if (control.wait4resp_enabled){
   13a4c:	b2eb      	uxtb	r3, r5
   13a4e:	f015 0f01 	tst.w	r5, #1
   13a52:	d14c      	bne.n	13aee <dw1000_start_tx+0xc8>
    sys_ctrl_reg = SYS_CTRL_TXSTRT;
   13a54:	2202      	movs	r2, #2
    if (control.delay_start_enabled)
   13a56:	f013 0504 	ands.w	r5, r3, #4
   13a5a:	d001      	beq.n	13a60 <dw1000_start_tx+0x3a>
        sys_ctrl_reg |= SYS_CTRL_TXDLYS;
   13a5c:	f042 0204 	orr.w	r2, r2, #4
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) sys_ctrl_reg, sizeof(uint8_t));
   13a60:	b2d3      	uxtb	r3, r2
   13a62:	2201      	movs	r2, #1
   13a64:	9202      	str	r2, [sp, #8]
   13a66:	2200      	movs	r2, #0
   13a68:	9300      	str	r3, [sp, #0]
   13a6a:	9201      	str	r2, [sp, #4]
   13a6c:	210d      	movs	r1, #13
   13a6e:	4620      	mov	r0, r4
   13a70:	f7fe fde4 	bl	1263c <dw1000_write_reg>
    if (control.delay_start_enabled){
   13a74:	2d00      	cmp	r5, #0
   13a76:	d13c      	bne.n	13af2 <dw1000_start_tx+0xcc>
        inst->uwb_dev.status.start_tx_error = 0;
   13a78:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   13a7c:	f36f 0382 	bfc	r3, #2, #1
   13a80:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    if(inst->control.sleep_after_tx) {
   13a84:	f994 35bc 	ldrsb.w	r3, [r4, #1468]	; 0x5bc
   13a88:	2b00      	cmp	r3, #0
   13a8a:	db5d      	blt.n	13b48 <dw1000_start_tx+0x122>
    inst->control.wait4resp_enabled = false;
   13a8c:	f894 35bc 	ldrb.w	r3, [r4, #1468]	; 0x5bc
   13a90:	f36f 0300 	bfc	r3, #0, #1
   13a94:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    inst->control.wait4resp_delay_enabled = false;
   13a98:	b2db      	uxtb	r3, r3
   13a9a:	f36f 0341 	bfc	r3, #1, #1
   13a9e:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    inst->control.delay_start_enabled = false;
   13aa2:	b2db      	uxtb	r3, r3
   13aa4:	f36f 0382 	bfc	r3, #2, #1
   13aa8:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    inst->control.autoack_delay_enabled = false;
   13aac:	b2db      	uxtb	r3, r3
   13aae:	f36f 03c3 	bfc	r3, #3, #1
   13ab2:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    inst->control.on_error_continue_enabled = false;
   13ab6:	b2db      	uxtb	r3, r3
   13ab8:	f36f 1386 	bfc	r3, #6, #1
   13abc:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
}
   13ac0:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   13ac4:	b004      	add	sp, #16
   13ac6:	bd70      	pop	{r4, r5, r6, pc}
        inst->uwb_dev.status.sem_error = 1;
   13ac8:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   13acc:	f043 0304 	orr.w	r3, r3, #4
   13ad0:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto sem_error;
   13ad4:	e7f4      	b.n	13ac0 <dw1000_start_tx+0x9a>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   13ad6:	2301      	movs	r3, #1
   13ad8:	9302      	str	r3, [sp, #8]
   13ada:	2240      	movs	r2, #64	; 0x40
   13adc:	2300      	movs	r3, #0
   13ade:	e9cd 2300 	strd	r2, r3, [sp]
   13ae2:	2200      	movs	r2, #0
   13ae4:	210d      	movs	r1, #13
   13ae6:	4620      	mov	r0, r4
   13ae8:	f7fe fda8 	bl	1263c <dw1000_write_reg>
   13aec:	e7ae      	b.n	13a4c <dw1000_start_tx+0x26>
        sys_ctrl_reg |= SYS_CTRL_WAIT4RESP;
   13aee:	2282      	movs	r2, #130	; 0x82
   13af0:	e7b1      	b.n	13a56 <dw1000_start_tx+0x30>
        sys_status_reg = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint16_t)); // Read at offset 3 to get the upper 2 bytes out of 5
   13af2:	2302      	movs	r3, #2
   13af4:	2203      	movs	r2, #3
   13af6:	210f      	movs	r1, #15
   13af8:	4620      	mov	r0, r4
   13afa:	f7fe fd2f 	bl	1255c <dw1000_read_reg>
        inst->uwb_dev.status.start_tx_error = (sys_status_reg & ((SYS_STATUS_HPDWARN | SYS_STATUS_TXPUTE) >> 24)) != 0;
   13afe:	f410 6f81 	tst.w	r0, #1032	; 0x408
   13b02:	bf14      	ite	ne
   13b04:	2201      	movne	r2, #1
   13b06:	2200      	moveq	r2, #0
   13b08:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   13b0c:	f362 0382 	bfi	r3, r2, #2, #1
   13b10:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
        if (inst->uwb_dev.status.start_tx_error){
   13b14:	b2db      	uxtb	r3, r3
   13b16:	f013 0f04 	tst.w	r3, #4
   13b1a:	d0b3      	beq.n	13a84 <dw1000_start_tx+0x5e>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   13b1c:	2301      	movs	r3, #1
   13b1e:	9302      	str	r3, [sp, #8]
   13b20:	2240      	movs	r2, #64	; 0x40
   13b22:	2300      	movs	r3, #0
   13b24:	e9cd 2300 	strd	r2, r3, [sp]
   13b28:	2200      	movs	r2, #0
   13b2a:	210d      	movs	r1, #13
   13b2c:	4620      	mov	r0, r4
   13b2e:	f7fe fd85 	bl	1263c <dw1000_write_reg>
    return (dpl_error_t)os_sem_release(&sem->sem);
   13b32:	4630      	mov	r0, r6
   13b34:	f7f6 f920 	bl	9d78 <os_sem_release>
            assert(err == DPL_OK);
   13b38:	2800      	cmp	r0, #0
   13b3a:	d0a3      	beq.n	13a84 <dw1000_start_tx+0x5e>
   13b3c:	2300      	movs	r3, #0
   13b3e:	461a      	mov	r2, r3
   13b40:	4619      	mov	r1, r3
   13b42:	4618      	mov	r0, r3
   13b44:	f7f5 fa06 	bl	8f54 <__assert_func>
        inst->uwb_dev.status.sleeping = 1;
   13b48:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   13b4c:	f043 0301 	orr.w	r3, r3, #1
   13b50:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
   13b54:	4630      	mov	r0, r6
   13b56:	f7f6 f90f 	bl	9d78 <os_sem_release>
   13b5a:	e797      	b.n	13a8c <dw1000_start_tx+0x66>

00013b5c <dw1000_tx_wait>:
{
   13b5c:	b510      	push	{r4, lr}
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   13b5e:	f500 64ad 	add.w	r4, r0, #1384	; 0x568
   13b62:	4620      	mov	r0, r4
   13b64:	f7f6 f93a 	bl	9ddc <os_sem_pend>
    if (rc == DPL_OK) {
   13b68:	b100      	cbz	r0, 13b6c <dw1000_tx_wait+0x10>
}
   13b6a:	bd10      	pop	{r4, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
   13b6c:	4620      	mov	r0, r4
   13b6e:	f7f6 f903 	bl	9d78 <os_sem_release>
    return rc;
   13b72:	e7fa      	b.n	13b6a <dw1000_tx_wait+0xe>

00013b74 <dw1000_set_delay_start>:
{
   13b74:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b76:	b085      	sub	sp, #20
   13b78:	4604      	mov	r4, r0
   13b7a:	4616      	mov	r6, r2
   13b7c:	461d      	mov	r5, r3
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   13b7e:	f500 67ae 	add.w	r7, r0, #1392	; 0x570
   13b82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13b86:	4638      	mov	r0, r7
   13b88:	f7f6 ff48 	bl	aa1c <os_mutex_pend>
    if (err != DPL_OK) {
   13b8c:	b148      	cbz	r0, 13ba2 <dw1000_set_delay_start+0x2e>
        inst->uwb_dev.status.mtx_error = 1;
   13b8e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   13b92:	f043 0308 	orr.w	r3, r3, #8
   13b96:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   13b9a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   13b9e:	b005      	add	sp, #20
   13ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->control.delay_start_enabled = true;
   13ba2:	f894 35bc 	ldrb.w	r3, [r4, #1468]	; 0x5bc
   13ba6:	f043 0304 	orr.w	r3, r3, #4
   13baa:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    dw1000_write_reg(inst, DX_TIME_ID, 1, dx_time >> 8, DX_TIME_LEN-1);
   13bae:	2304      	movs	r3, #4
   13bb0:	9302      	str	r3, [sp, #8]
   13bb2:	0a36      	lsrs	r6, r6, #8
   13bb4:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
   13bb8:	0a2d      	lsrs	r5, r5, #8
   13bba:	9600      	str	r6, [sp, #0]
   13bbc:	9501      	str	r5, [sp, #4]
   13bbe:	2201      	movs	r2, #1
   13bc0:	210a      	movs	r1, #10
   13bc2:	4620      	mov	r0, r4
   13bc4:	f7fe fd3a 	bl	1263c <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   13bc8:	4638      	mov	r0, r7
   13bca:	f7f6 fecb 	bl	a964 <os_mutex_release>
    assert(err == DPL_OK);
   13bce:	2800      	cmp	r0, #0
   13bd0:	d0e3      	beq.n	13b9a <dw1000_set_delay_start+0x26>
   13bd2:	2300      	movs	r3, #0
   13bd4:	461a      	mov	r2, r3
   13bd6:	4619      	mov	r1, r3
   13bd8:	4618      	mov	r0, r3
   13bda:	f7f5 f9bb 	bl	8f54 <__assert_func>

00013bde <dw1000_start_rx>:
{
   13bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13be2:	b084      	sub	sp, #16
   13be4:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   13be6:	f500 67ae 	add.w	r7, r0, #1392	; 0x570
   13bea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13bee:	4638      	mov	r0, r7
   13bf0:	f7f6 ff14 	bl	aa1c <os_mutex_pend>
    if (err != DPL_OK) {
   13bf4:	2800      	cmp	r0, #0
   13bf6:	d157      	bne.n	13ca8 <dw1000_start_rx+0xca>
    control = inst->control;
   13bf8:	f8d4 55bc 	ldr.w	r5, [r4, #1468]	; 0x5bc
    inst->uwb_dev.status.rx_restarted = 0;
   13bfc:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   13c00:	f36f 03c3 	bfc	r3, #3, #1
   13c04:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    if (config->trxoff_enable){ // force return to idle state, if in RX state
   13c08:	f894 3530 	ldrb.w	r3, [r4, #1328]	; 0x530
   13c0c:	f013 0f20 	tst.w	r3, #32
   13c10:	d151      	bne.n	13cb6 <dw1000_start_rx+0xd8>
    if (config->dblbuffon_enabled) {
   13c12:	f894 3530 	ldrb.w	r3, [r4, #1328]	; 0x530
   13c16:	f013 0f10 	tst.w	r3, #16
   13c1a:	d161      	bne.n	13ce0 <dw1000_start_rx+0x102>
    if (control.delay_start_enabled)
   13c1c:	fa5f f885 	uxtb.w	r8, r5
   13c20:	f015 0504 	ands.w	r5, r5, #4
   13c24:	d17a      	bne.n	13d1c <dw1000_start_rx+0x13e>
    sys_ctrl = SYS_CTRL_RXENAB;
   13c26:	f44f 7680 	mov.w	r6, #256	; 0x100
    if (control.wait4resp_enabled) {
   13c2a:	f018 0f01 	tst.w	r8, #1
   13c2e:	d001      	beq.n	13c34 <dw1000_start_rx+0x56>
        sys_ctrl |= SYS_CTRL_WAIT4RESP;
   13c30:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, sys_ctrl, sizeof(uint16_t));
   13c34:	2302      	movs	r3, #2
   13c36:	9302      	str	r3, [sp, #8]
   13c38:	2200      	movs	r2, #0
   13c3a:	9600      	str	r6, [sp, #0]
   13c3c:	9201      	str	r2, [sp, #4]
   13c3e:	210d      	movs	r1, #13
   13c40:	4620      	mov	r0, r4
   13c42:	f7fe fcfb 	bl	1263c <dw1000_write_reg>
    if (control.delay_start_enabled){   // check for errors
   13c46:	2d00      	cmp	r5, #0
   13c48:	d16b      	bne.n	13d22 <dw1000_start_rx+0x144>
        inst->uwb_dev.status.start_rx_error = 0;
   13c4a:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   13c4e:	f36f 03c3 	bfc	r3, #3, #1
   13c52:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    inst->control.wait4resp_enabled = false;
   13c56:	f894 35bc 	ldrb.w	r3, [r4, #1468]	; 0x5bc
   13c5a:	f36f 0300 	bfc	r3, #0, #1
   13c5e:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    inst->control.wait4resp_delay_enabled = false;
   13c62:	b2db      	uxtb	r3, r3
   13c64:	f36f 0341 	bfc	r3, #1, #1
   13c68:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    inst->control.delay_start_enabled = false;
   13c6c:	b2db      	uxtb	r3, r3
   13c6e:	f36f 0382 	bfc	r3, #2, #1
   13c72:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    inst->control.autoack_delay_enabled = false;
   13c76:	b2db      	uxtb	r3, r3
   13c78:	f36f 03c3 	bfc	r3, #3, #1
   13c7c:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    inst->control.start_rx_syncbuf_enabled = false;
   13c80:	b2db      	uxtb	r3, r3
   13c82:	f36f 1304 	bfc	r3, #4, #1
   13c86:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    inst->control.on_error_continue_enabled = false;
   13c8a:	b2db      	uxtb	r3, r3
   13c8c:	f36f 1386 	bfc	r3, #6, #1
   13c90:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    return (dpl_error_t)os_mutex_release(&mu->mu);
   13c94:	4638      	mov	r0, r7
   13c96:	f7f6 fe65 	bl	a964 <os_mutex_release>
    assert(err == DPL_OK);
   13c9a:	2800      	cmp	r0, #0
   13c9c:	d16f      	bne.n	13d7e <dw1000_start_rx+0x1a0>
}
   13c9e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   13ca2:	b004      	add	sp, #16
   13ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->uwb_dev.status.mtx_error = 1;
   13ca8:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   13cac:	f043 0308 	orr.w	r3, r3, #8
   13cb0:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto mtx_error;
   13cb4:	e7f3      	b.n	13c9e <dw1000_start_rx+0xc0>
        uint8_t state = (uint8_t) dw1000_read_reg(inst, SYS_STATE_ID, PMSC_STATE_OFFSET, sizeof(uint8_t));
   13cb6:	2301      	movs	r3, #1
   13cb8:	2202      	movs	r2, #2
   13cba:	2119      	movs	r1, #25
   13cbc:	4620      	mov	r0, r4
   13cbe:	f7fe fc4d 	bl	1255c <dw1000_read_reg>
   13cc2:	b2c0      	uxtb	r0, r0
        if(state != PMSC_STATE_IDLE){
   13cc4:	2801      	cmp	r0, #1
   13cc6:	d0a4      	beq.n	13c12 <dw1000_start_rx+0x34>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   13cc8:	2301      	movs	r3, #1
   13cca:	9302      	str	r3, [sp, #8]
   13ccc:	2240      	movs	r2, #64	; 0x40
   13cce:	2300      	movs	r3, #0
   13cd0:	e9cd 2300 	strd	r2, r3, [sp]
   13cd4:	2200      	movs	r2, #0
   13cd6:	210d      	movs	r1, #13
   13cd8:	4620      	mov	r0, r4
   13cda:	f7fe fcaf 	bl	1263c <dw1000_write_reg>
   13cde:	e798      	b.n	13c12 <dw1000_start_rx+0x34>
    inst->control.start_rx_syncbuf_enabled = 1;
   13ce0:	f894 35bc 	ldrb.w	r3, [r4, #1468]	; 0x5bc
   13ce4:	f043 0310 	orr.w	r3, r3, #16
   13ce8:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   13cec:	2301      	movs	r3, #1
   13cee:	2203      	movs	r2, #3
   13cf0:	210f      	movs	r1, #15
   13cf2:	4620      	mov	r0, r4
   13cf4:	f7fe fc32 	bl	1255c <dw1000_read_reg>
   13cf8:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   13cfa:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   13cfe:	f010 0f80 	tst.w	r0, #128	; 0x80
   13d02:	d08b      	beq.n	13c1c <dw1000_start_rx+0x3e>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   13d04:	2301      	movs	r3, #1
   13d06:	9302      	str	r3, [sp, #8]
   13d08:	2201      	movs	r2, #1
   13d0a:	2300      	movs	r3, #0
   13d0c:	e9cd 2300 	strd	r2, r3, [sp]
   13d10:	2203      	movs	r2, #3
   13d12:	210d      	movs	r1, #13
   13d14:	4620      	mov	r0, r4
   13d16:	f7fe fc91 	bl	1263c <dw1000_write_reg>
    return inst->uwb_dev.status;
   13d1a:	e77f      	b.n	13c1c <dw1000_start_rx+0x3e>
        sys_ctrl |= SYS_CTRL_RXDLYE;
   13d1c:	f44f 7640 	mov.w	r6, #768	; 0x300
   13d20:	e783      	b.n	13c2a <dw1000_start_rx+0x4c>
        sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t));  // Read 1 byte at offset 3 to get the 4th byte out of 5
   13d22:	2301      	movs	r3, #1
   13d24:	2203      	movs	r2, #3
   13d26:	210f      	movs	r1, #15
   13d28:	4620      	mov	r0, r4
   13d2a:	f7fe fc17 	bl	1255c <dw1000_read_reg>
        inst->uwb_dev.status.start_rx_error = (sys_status & (SYS_STATUS_HPDWARN >> 24)) != 0;
   13d2e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   13d32:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   13d36:	f360 03c3 	bfi	r3, r0, #3, #1
   13d3a:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
        if (inst->uwb_dev.status.start_rx_error){   // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
   13d3e:	b2db      	uxtb	r3, r3
   13d40:	f013 0f08 	tst.w	r3, #8
   13d44:	d087      	beq.n	13c56 <dw1000_start_rx+0x78>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t)); // return to idle state
   13d46:	2301      	movs	r3, #1
   13d48:	9302      	str	r3, [sp, #8]
   13d4a:	2240      	movs	r2, #64	; 0x40
   13d4c:	2300      	movs	r3, #0
   13d4e:	e9cd 2300 	strd	r2, r3, [sp]
   13d52:	2200      	movs	r2, #0
   13d54:	210d      	movs	r1, #13
   13d56:	4620      	mov	r0, r4
   13d58:	f7fe fc70 	bl	1263c <dw1000_write_reg>
            if (control.on_error_continue_enabled){
   13d5c:	f018 0f40 	tst.w	r8, #64	; 0x40
   13d60:	f43f af79 	beq.w	13c56 <dw1000_start_rx+0x78>
                sys_ctrl &= ~SYS_CTRL_RXDLYE;
   13d64:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   13d68:	b2b6      	uxth	r6, r6
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, sys_ctrl, sizeof(uint16_t)); // turn on receiver
   13d6a:	2302      	movs	r3, #2
   13d6c:	9302      	str	r3, [sp, #8]
   13d6e:	2200      	movs	r2, #0
   13d70:	9600      	str	r6, [sp, #0]
   13d72:	9201      	str	r2, [sp, #4]
   13d74:	210d      	movs	r1, #13
   13d76:	4620      	mov	r0, r4
   13d78:	f7fe fc60 	bl	1263c <dw1000_write_reg>
   13d7c:	e76b      	b.n	13c56 <dw1000_start_rx+0x78>
    assert(err == DPL_OK);
   13d7e:	2300      	movs	r3, #0
   13d80:	461a      	mov	r2, r3
   13d82:	4619      	mov	r1, r3
   13d84:	4618      	mov	r0, r3
   13d86:	f7f5 f8e5 	bl	8f54 <__assert_func>
   13d8a:	0000      	movs	r0, r0
   13d8c:	0000      	movs	r0, r0
	...

00013d90 <dw1000_stop_rx>:
{
   13d90:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d92:	b085      	sub	sp, #20
   13d94:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   13d96:	f500 65ae 	add.w	r5, r0, #1392	; 0x570
   13d9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13d9e:	4628      	mov	r0, r5
   13da0:	f7f6 fe3c 	bl	aa1c <os_mutex_pend>
    if (err != DPL_OK) {
   13da4:	b148      	cbz	r0, 13dba <dw1000_stop_rx+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   13da6:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   13daa:	f043 0308 	orr.w	r3, r3, #8
   13dae:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   13db2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   13db6:	b005      	add	sp, #20
   13db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
   13dba:	2304      	movs	r3, #4
   13dbc:	2200      	movs	r2, #0
   13dbe:	210e      	movs	r1, #14
   13dc0:	4620      	mov	r0, r4
   13dc2:	f7fe fbcb 	bl	1255c <dw1000_read_reg>
   13dc6:	4606      	mov	r6, r0
    dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t)) ; // Clear interrupt mask - so we don't get any unwanted events
   13dc8:	2704      	movs	r7, #4
   13dca:	9702      	str	r7, [sp, #8]
   13dcc:	2200      	movs	r2, #0
   13dce:	2300      	movs	r3, #0
   13dd0:	e9cd 2300 	strd	r2, r3, [sp]
   13dd4:	210e      	movs	r1, #14
   13dd6:	4620      	mov	r0, r4
   13dd8:	f7fe fc30 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t)); // return to idle state
   13ddc:	2301      	movs	r3, #1
   13dde:	9302      	str	r3, [sp, #8]
   13de0:	2240      	movs	r2, #64	; 0x40
   13de2:	2300      	movs	r3, #0
   13de4:	e9cd 2300 	strd	r2, r3, [sp]
   13de8:	2200      	movs	r2, #0
   13dea:	210d      	movs	r1, #13
   13dec:	4620      	mov	r0, r4
   13dee:	f7fe fc25 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD), sizeof(uint32_t));
   13df2:	9702      	str	r7, [sp, #8]
   13df4:	a30e      	add	r3, pc, #56	; (adr r3, 13e30 <dw1000_stop_rx+0xa0>)
   13df6:	e9d3 2300 	ldrd	r2, r3, [r3]
   13dfa:	e9cd 2300 	strd	r2, r3, [sp]
   13dfe:	2200      	movs	r2, #0
   13e00:	210f      	movs	r1, #15
   13e02:	4620      	mov	r0, r4
   13e04:	f7fe fc1a 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t)); // Restore mask to what it was
   13e08:	9702      	str	r7, [sp, #8]
   13e0a:	2200      	movs	r2, #0
   13e0c:	9600      	str	r6, [sp, #0]
   13e0e:	9201      	str	r2, [sp, #4]
   13e10:	210e      	movs	r1, #14
   13e12:	4620      	mov	r0, r4
   13e14:	f7fe fc12 	bl	1263c <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   13e18:	4628      	mov	r0, r5
   13e1a:	f7f6 fda3 	bl	a964 <os_mutex_release>
    assert(err == DPL_OK);
   13e1e:	2800      	cmp	r0, #0
   13e20:	d0c7      	beq.n	13db2 <dw1000_stop_rx+0x22>
   13e22:	2300      	movs	r3, #0
   13e24:	461a      	mov	r2, r3
   13e26:	4619      	mov	r1, r3
   13e28:	4618      	mov	r0, r3
   13e2a:	f7f5 f893 	bl	8f54 <__assert_func>
   13e2e:	bf00      	nop
   13e30:	2433fbf8 	.word	0x2433fbf8
   13e34:	00000000 	.word	0x00000000

00013e38 <dw1000_set_wait4resp>:
    inst->uwb_dev.status.rx_restarted = 0;
   13e38:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
   13e3c:	f36f 03c3 	bfc	r3, #3, #1
   13e40:	f880 350a 	strb.w	r3, [r0, #1290]	; 0x50a
    inst->control.wait4resp_enabled = enable;
   13e44:	f890 35bc 	ldrb.w	r3, [r0, #1468]	; 0x5bc
   13e48:	f361 0300 	bfi	r3, r1, #0, #1
   13e4c:	f880 35bc 	strb.w	r3, [r0, #1468]	; 0x5bc
}
   13e50:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   13e54:	4770      	bx	lr

00013e56 <dw1000_set_on_error_continue>:
    inst->control.on_error_continue_enabled = enable;
   13e56:	f890 35bc 	ldrb.w	r3, [r0, #1468]	; 0x5bc
   13e5a:	f361 1386 	bfi	r3, r1, #6, #1
   13e5e:	f880 35bc 	strb.w	r3, [r0, #1468]	; 0x5bc
}
   13e62:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   13e66:	4770      	bx	lr

00013e68 <dw1000_set_rxauto_disable>:
    inst->control.rxauto_disable = disable;
   13e68:	f890 35bd 	ldrb.w	r3, [r0, #1469]	; 0x5bd
   13e6c:	f361 0382 	bfi	r3, r1, #2, #1
   13e70:	f880 35bd 	strb.w	r3, [r0, #1469]	; 0x5bd
}
   13e74:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   13e78:	4770      	bx	lr

00013e7a <dw1000_adj_rx_timeout>:
{
   13e7a:	b510      	push	{r4, lr}
   13e7c:	b084      	sub	sp, #16
   13e7e:	4604      	mov	r4, r0
    dw1000_write_reg(inst, RX_FWTO_ID, RX_FWTO_OFFSET, timeout, sizeof(uint16_t));
   13e80:	2302      	movs	r3, #2
   13e82:	9302      	str	r3, [sp, #8]
   13e84:	2200      	movs	r2, #0
   13e86:	9100      	str	r1, [sp, #0]
   13e88:	9201      	str	r2, [sp, #4]
   13e8a:	210c      	movs	r1, #12
   13e8c:	f7fe fbd6 	bl	1263c <dw1000_write_reg>
}
   13e90:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   13e94:	b004      	add	sp, #16
   13e96:	bd10      	pop	{r4, pc}

00013e98 <update_rx_window_timeout>:
{
   13e98:	b538      	push	{r3, r4, r5, lr}
   13e9a:	4605      	mov	r5, r0
   13e9c:	4610      	mov	r0, r2
   13e9e:	4619      	mov	r1, r3
    uint32_t timeout = calc_rx_window_timeout(rel_start, inst->uwb_dev.abs_timeout);
   13ea0:	f505 639c 	add.w	r3, r5, #1248	; 0x4e0
   13ea4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   13ea8:	f7ff fccf 	bl	1384a <calc_rx_window_timeout>
   13eac:	4604      	mov	r4, r0
    dw1000_adj_rx_timeout(inst, timeout);
   13eae:	4601      	mov	r1, r0
   13eb0:	4628      	mov	r0, r5
   13eb2:	f7ff ffe2 	bl	13e7a <dw1000_adj_rx_timeout>
}
   13eb6:	4620      	mov	r0, r4
   13eb8:	bd38      	pop	{r3, r4, r5, pc}

00013eba <dw1000_set_rx_timeout>:
{
   13eba:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ebc:	b085      	sub	sp, #20
   13ebe:	4604      	mov	r4, r0
   13ec0:	460e      	mov	r6, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   13ec2:	f500 67ae 	add.w	r7, r0, #1392	; 0x570
   13ec6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13eca:	4638      	mov	r0, r7
   13ecc:	f7f6 fda6 	bl	aa1c <os_mutex_pend>
    if (err != DPL_OK) {
   13ed0:	b148      	cbz	r0, 13ee6 <dw1000_set_rx_timeout+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   13ed2:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   13ed6:	f043 0308 	orr.w	r3, r3, #8
   13eda:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   13ede:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   13ee2:	b005      	add	sp, #20
   13ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->uwb_dev.status.rx_timeout_error = 0;
   13ee6:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   13eea:	f36f 13c7 	bfc	r3, #7, #1
   13eee:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    sys_cfg_reg = dw1000_read_reg(inst, SYS_CFG_ID, 3, sizeof(uint8_t));
   13ef2:	2301      	movs	r3, #1
   13ef4:	2203      	movs	r2, #3
   13ef6:	2104      	movs	r1, #4
   13ef8:	4620      	mov	r0, r4
   13efa:	f7fe fb2f 	bl	1255c <dw1000_read_reg>
   13efe:	b2c5      	uxtb	r5, r0
    inst->control.rx_timeout_enabled = timeout > 0;
   13f00:	1e32      	subs	r2, r6, #0
   13f02:	bf18      	it	ne
   13f04:	2201      	movne	r2, #1
   13f06:	f894 35bc 	ldrb.w	r3, [r4, #1468]	; 0x5bc
   13f0a:	f362 1345 	bfi	r3, r2, #5, #1
   13f0e:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    if(inst->control.rx_timeout_enabled) {
   13f12:	b2db      	uxtb	r3, r3
   13f14:	f013 0f20 	tst.w	r3, #32
   13f18:	d10e      	bne.n	13f38 <dw1000_set_rx_timeout+0x7e>
        new_reg_val = sys_cfg_reg & (~(SYS_CFG_RXWTOE>>24));
   13f1a:	f005 03ef 	and.w	r3, r5, #239	; 0xef
    if (sys_cfg_reg != new_reg_val) {
   13f1e:	42ab      	cmp	r3, r5
   13f20:	d116      	bne.n	13f50 <dw1000_set_rx_timeout+0x96>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   13f22:	4638      	mov	r0, r7
   13f24:	f7f6 fd1e 	bl	a964 <os_mutex_release>
    assert(err == DPL_OK);
   13f28:	2800      	cmp	r0, #0
   13f2a:	d0d8      	beq.n	13ede <dw1000_set_rx_timeout+0x24>
   13f2c:	2300      	movs	r3, #0
   13f2e:	461a      	mov	r2, r3
   13f30:	4619      	mov	r1, r3
   13f32:	4618      	mov	r0, r3
   13f34:	f7f5 f80e 	bl	8f54 <__assert_func>
        dw1000_write_reg(inst, RX_FWTO_ID, RX_FWTO_OFFSET, timeout, sizeof(uint16_t));
   13f38:	2302      	movs	r3, #2
   13f3a:	9302      	str	r3, [sp, #8]
   13f3c:	2200      	movs	r2, #0
   13f3e:	9600      	str	r6, [sp, #0]
   13f40:	9201      	str	r2, [sp, #4]
   13f42:	210c      	movs	r1, #12
   13f44:	4620      	mov	r0, r4
   13f46:	f7fe fb79 	bl	1263c <dw1000_write_reg>
        new_reg_val = sys_cfg_reg | (SYS_CFG_RXWTOE>>24);
   13f4a:	f045 0310 	orr.w	r3, r5, #16
   13f4e:	e7e6      	b.n	13f1e <dw1000_set_rx_timeout+0x64>
        dw1000_write_reg(inst, SYS_CFG_ID, 3, new_reg_val, sizeof(uint8_t));
   13f50:	2201      	movs	r2, #1
   13f52:	9202      	str	r2, [sp, #8]
   13f54:	9300      	str	r3, [sp, #0]
   13f56:	2300      	movs	r3, #0
   13f58:	9301      	str	r3, [sp, #4]
   13f5a:	2203      	movs	r2, #3
   13f5c:	2104      	movs	r1, #4
   13f5e:	4620      	mov	r0, r4
   13f60:	f7fe fb6c 	bl	1263c <dw1000_write_reg>
   13f64:	e7dd      	b.n	13f22 <dw1000_set_rx_timeout+0x68>

00013f66 <dw1000_set_rx_window>:
{
   13f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f6a:	4604      	mov	r4, r0
   13f6c:	4690      	mov	r8, r2
   13f6e:	461d      	mov	r5, r3
   13f70:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    dw1000_set_delay_start(inst, rx_start);
   13f74:	f7ff fdfe 	bl	13b74 <dw1000_set_delay_start>
    timeout = calc_rx_window_timeout(rx_start, rx_end);
   13f78:	4632      	mov	r2, r6
   13f7a:	463b      	mov	r3, r7
   13f7c:	4640      	mov	r0, r8
   13f7e:	4629      	mov	r1, r5
   13f80:	f7ff fc63 	bl	1384a <calc_rx_window_timeout>
   13f84:	4601      	mov	r1, r0
    inst->control.abs_timeout = 1;
   13f86:	f894 35bd 	ldrb.w	r3, [r4, #1469]	; 0x5bd
   13f8a:	f043 0308 	orr.w	r3, r3, #8
   13f8e:	f884 35bd 	strb.w	r3, [r4, #1469]	; 0x5bd
    inst->uwb_dev.abs_timeout = rx_end;
   13f92:	f504 639c 	add.w	r3, r4, #1248	; 0x4e0
   13f96:	e943 6702 	strd	r6, r7, [r3, #-8]
    dw1000_set_rx_timeout(inst, timeout);
   13f9a:	4620      	mov	r0, r4
   13f9c:	f7ff ff8d 	bl	13eba <dw1000_set_rx_timeout>
}
   13fa0:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   13fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013fa8 <dw1000_set_abs_timeout>:
{
   13fa8:	b430      	push	{r4, r5}
   13faa:	4614      	mov	r4, r2
   13fac:	461d      	mov	r5, r3
    inst->control.abs_timeout = 1;
   13fae:	f890 35bd 	ldrb.w	r3, [r0, #1469]	; 0x5bd
   13fb2:	f043 0308 	orr.w	r3, r3, #8
   13fb6:	f880 35bd 	strb.w	r3, [r0, #1469]	; 0x5bd
    inst->uwb_dev.abs_timeout = rx_end;
   13fba:	f500 639c 	add.w	r3, r0, #1248	; 0x4e0
   13fbe:	e943 4502 	strd	r4, r5, [r3, #-8]
}
   13fc2:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   13fc6:	bc30      	pop	{r4, r5}
   13fc8:	4770      	bx	lr

00013fca <dw1000_sync_rxbufptrs>:
{
   13fca:	b510      	push	{r4, lr}
   13fcc:	b084      	sub	sp, #16
   13fce:	4604      	mov	r4, r0
    inst->control.start_rx_syncbuf_enabled = 1;
   13fd0:	f890 35bc 	ldrb.w	r3, [r0, #1468]	; 0x5bc
   13fd4:	f043 0310 	orr.w	r3, r3, #16
   13fd8:	f880 35bc 	strb.w	r3, [r0, #1468]	; 0x5bc
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   13fdc:	2301      	movs	r3, #1
   13fde:	2203      	movs	r2, #3
   13fe0:	210f      	movs	r1, #15
   13fe2:	f7fe fabb 	bl	1255c <dw1000_read_reg>
   13fe6:	b2c3      	uxtb	r3, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   13fe8:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
   13fec:	f013 0f80 	tst.w	r3, #128	; 0x80
   13ff0:	d103      	bne.n	13ffa <dw1000_sync_rxbufptrs+0x30>
}
   13ff2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   13ff6:	b004      	add	sp, #16
   13ff8:	bd10      	pop	{r4, pc}
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   13ffa:	2301      	movs	r3, #1
   13ffc:	9302      	str	r3, [sp, #8]
   13ffe:	2201      	movs	r2, #1
   14000:	2300      	movs	r3, #0
   14002:	e9cd 2300 	strd	r2, r3, [sp]
   14006:	2203      	movs	r2, #3
   14008:	210d      	movs	r1, #13
   1400a:	4620      	mov	r0, r4
   1400c:	f7fe fb16 	bl	1263c <dw1000_write_reg>
   14010:	e7ef      	b.n	13ff2 <dw1000_sync_rxbufptrs+0x28>

00014012 <dw1000_read_accdata>:
{
   14012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14016:	b082      	sub	sp, #8
   14018:	4604      	mov	r4, r0
   1401a:	460e      	mov	r6, r1
   1401c:	4615      	mov	r5, r2
   1401e:	461f      	mov	r7, r3
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   14020:	f500 68ae 	add.w	r8, r0, #1392	; 0x570
   14024:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14028:	4640      	mov	r0, r8
   1402a:	f7f6 fcf7 	bl	aa1c <os_mutex_pend>
    if (err != DPL_OK) {
   1402e:	b150      	cbz	r0, 14046 <dw1000_read_accdata+0x34>
        inst->uwb_dev.status.mtx_error = 1;
   14030:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14034:	f043 0308 	orr.w	r3, r3, #8
   14038:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1403c:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   14040:	b002      	add	sp, #8
   14042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dw1000_phy_sysclk_ACC(inst, true);
   14046:	2101      	movs	r1, #1
   14048:	4620      	mov	r0, r4
   1404a:	f001 fbfe 	bl	1584a <dw1000_phy_sysclk_ACC>
    dw1000_read(inst, ACC_MEM_ID, accOffset, buffer, len) ;
   1404e:	9700      	str	r7, [sp, #0]
   14050:	4633      	mov	r3, r6
   14052:	462a      	mov	r2, r5
   14054:	2125      	movs	r1, #37	; 0x25
   14056:	4620      	mov	r0, r4
   14058:	f7fe f9b6 	bl	123c8 <dw1000_read>
    dw1000_phy_sysclk_ACC(inst, false);
   1405c:	2100      	movs	r1, #0
   1405e:	4620      	mov	r0, r4
   14060:	f001 fbf3 	bl	1584a <dw1000_phy_sysclk_ACC>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   14064:	4640      	mov	r0, r8
   14066:	f7f6 fc7d 	bl	a964 <os_mutex_release>
    assert(err == DPL_OK);
   1406a:	2800      	cmp	r0, #0
   1406c:	d0e6      	beq.n	1403c <dw1000_read_accdata+0x2a>
   1406e:	2300      	movs	r3, #0
   14070:	461a      	mov	r2, r3
   14072:	4619      	mov	r1, r3
   14074:	4618      	mov	r0, r3
   14076:	f7f4 ff6d 	bl	8f54 <__assert_func>
	...

0001407c <dw1000_mac_framefilter>:
{
   1407c:	b570      	push	{r4, r5, r6, lr}
   1407e:	b084      	sub	sp, #16
   14080:	4604      	mov	r4, r0
   14082:	460d      	mov	r5, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   14084:	f500 66ae 	add.w	r6, r0, #1392	; 0x570
   14088:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1408c:	4630      	mov	r0, r6
   1408e:	f7f6 fcc5 	bl	aa1c <os_mutex_pend>
    if (err != DPL_OK) {
   14092:	b148      	cbz	r0, 140a8 <dw1000_mac_framefilter+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   14094:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14098:	f043 0308 	orr.w	r3, r3, #8
   1409c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   140a0:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   140a4:	b004      	add	sp, #16
   140a6:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)) ; // Read sysconfig register
   140a8:	2304      	movs	r3, #4
   140aa:	2200      	movs	r2, #0
   140ac:	4619      	mov	r1, r3
   140ae:	4620      	mov	r0, r4
   140b0:	f7fe fa54 	bl	1255c <dw1000_read_reg>
    inst->uwb_dev.config.rx.frameFilter = enable;
   140b4:	f8a4 551c 	strh.w	r5, [r4, #1308]	; 0x51c
    if(enable > 0){   // Enable frame filtering and configure frame types
   140b8:	b1cd      	cbz	r5, 140ee <dw1000_mac_framefilter+0x72>
        sys_cfg_reg &= ~(SYS_CFG_FF_ALL_EN);  // Clear all
   140ba:	4b0e      	ldr	r3, [pc, #56]	; (140f4 <dw1000_mac_framefilter+0x78>)
   140bc:	4003      	ands	r3, r0
        sys_cfg_reg |= (enable & SYS_CFG_FF_ALL_EN) | SYS_CFG_FFE;
   140be:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
   140c2:	431d      	orrs	r5, r3
   140c4:	f045 0501 	orr.w	r5, r5, #1
    dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   140c8:	2104      	movs	r1, #4
   140ca:	9102      	str	r1, [sp, #8]
   140cc:	2200      	movs	r2, #0
   140ce:	9500      	str	r5, [sp, #0]
   140d0:	9201      	str	r2, [sp, #4]
   140d2:	4620      	mov	r0, r4
   140d4:	f7fe fab2 	bl	1263c <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   140d8:	4630      	mov	r0, r6
   140da:	f7f6 fc43 	bl	a964 <os_mutex_release>
    assert(err == DPL_OK);
   140de:	2800      	cmp	r0, #0
   140e0:	d0de      	beq.n	140a0 <dw1000_mac_framefilter+0x24>
   140e2:	2300      	movs	r3, #0
   140e4:	461a      	mov	r2, r3
   140e6:	4619      	mov	r1, r3
   140e8:	4618      	mov	r0, r3
   140ea:	f7f4 ff33 	bl	8f54 <__assert_func>
        sys_cfg_reg &= ~(SYS_CFG_FFE);
   140ee:	4d02      	ldr	r5, [pc, #8]	; (140f8 <dw1000_mac_framefilter+0x7c>)
   140f0:	4005      	ands	r5, r0
   140f2:	e7e9      	b.n	140c8 <dw1000_mac_framefilter+0x4c>
   140f4:	f047fe01 	.word	0xf047fe01
   140f8:	f047fffe 	.word	0xf047fffe

000140fc <dw1000_set_autoack>:
{
   140fc:	b570      	push	{r4, r5, r6, lr}
   140fe:	b084      	sub	sp, #16
   14100:	4604      	mov	r4, r0
   14102:	460d      	mov	r5, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   14104:	f500 66ae 	add.w	r6, r0, #1392	; 0x570
   14108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1410c:	4630      	mov	r0, r6
   1410e:	f7f6 fc85 	bl	aa1c <os_mutex_pend>
    if (err != DPL_OK) {
   14112:	b148      	cbz	r0, 14128 <dw1000_set_autoack+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   14114:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14118:	f043 0308 	orr.w	r3, r3, #8
   1411c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   14120:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   14124:	b004      	add	sp, #16
   14126:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)); // Read sysconfig register
   14128:	2304      	movs	r3, #4
   1412a:	2200      	movs	r2, #0
   1412c:	4619      	mov	r1, r3
   1412e:	4620      	mov	r0, r4
   14130:	f7fe fa14 	bl	1255c <dw1000_read_reg>
   14134:	f020 637b 	bic.w	r3, r0, #263192576	; 0xfb00000
   14138:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    inst->uwb_dev.config.autoack_enabled = enable;
   1413c:	f894 2530 	ldrb.w	r2, [r4, #1328]	; 0x530
   14140:	f365 0282 	bfi	r2, r5, #2, #1
   14144:	f884 2530 	strb.w	r2, [r4, #1328]	; 0x530
    if(inst->uwb_dev.config.autoack_enabled){
   14148:	b2d2      	uxtb	r2, r2
   1414a:	f012 0f04 	tst.w	r2, #4
   1414e:	d014      	beq.n	1417a <dw1000_set_autoack+0x7e>
        sys_cfg_reg |= SYS_CFG_AUTOACK;
   14150:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
        dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   14154:	2104      	movs	r1, #4
   14156:	9102      	str	r1, [sp, #8]
   14158:	2200      	movs	r2, #0
   1415a:	9300      	str	r3, [sp, #0]
   1415c:	9201      	str	r2, [sp, #4]
   1415e:	4620      	mov	r0, r4
   14160:	f7fe fa6c 	bl	1263c <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   14164:	4630      	mov	r0, r6
   14166:	f7f6 fbfd 	bl	a964 <os_mutex_release>
    assert(err == DPL_OK);
   1416a:	2800      	cmp	r0, #0
   1416c:	d0d8      	beq.n	14120 <dw1000_set_autoack+0x24>
   1416e:	2300      	movs	r3, #0
   14170:	461a      	mov	r2, r3
   14172:	4619      	mov	r1, r3
   14174:	4618      	mov	r0, r3
   14176:	f7f4 feed 	bl	8f54 <__assert_func>
        sys_cfg_reg &= ~SYS_CFG_AUTOACK;
   1417a:	f020 409f 	bic.w	r0, r0, #1333788672	; 0x4f800000
   1417e:	f420 1060 	bic.w	r0, r0, #3670016	; 0x380000
        dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   14182:	2104      	movs	r1, #4
   14184:	9102      	str	r1, [sp, #8]
   14186:	2200      	movs	r2, #0
   14188:	9000      	str	r0, [sp, #0]
   1418a:	9201      	str	r2, [sp, #4]
   1418c:	4620      	mov	r0, r4
   1418e:	f7fe fa55 	bl	1263c <dw1000_write_reg>
   14192:	e7e7      	b.n	14164 <dw1000_set_autoack+0x68>

00014194 <dw1000_set_autoack_delay>:
{
   14194:	b530      	push	{r4, r5, lr}
   14196:	b085      	sub	sp, #20
   14198:	4604      	mov	r4, r0
    dw1000_write_reg(inst, ACK_RESP_T_ID, ACK_RESP_T_ACK_TIM_OFFSET, delay, sizeof(uint8_t));
   1419a:	2501      	movs	r5, #1
   1419c:	9502      	str	r5, [sp, #8]
   1419e:	9100      	str	r1, [sp, #0]
   141a0:	2300      	movs	r3, #0
   141a2:	9301      	str	r3, [sp, #4]
   141a4:	2203      	movs	r2, #3
   141a6:	211a      	movs	r1, #26
   141a8:	f7fe fa48 	bl	1263c <dw1000_write_reg>
    dw1000_set_autoack(inst, true);
   141ac:	4629      	mov	r1, r5
   141ae:	4620      	mov	r0, r4
   141b0:	f7ff ffa4 	bl	140fc <dw1000_set_autoack>
}
   141b4:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   141b8:	b005      	add	sp, #20
   141ba:	bd30      	pop	{r4, r5, pc}

000141bc <dw1000_set_wait4resp_delay>:
{
   141bc:	b570      	push	{r4, r5, r6, lr}
   141be:	b084      	sub	sp, #16
   141c0:	4604      	mov	r4, r0
   141c2:	460e      	mov	r6, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   141c4:	f500 65ae 	add.w	r5, r0, #1392	; 0x570
   141c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   141cc:	4628      	mov	r0, r5
   141ce:	f7f6 fc25 	bl	aa1c <os_mutex_pend>
    if (err != DPL_OK) {
   141d2:	b148      	cbz	r0, 141e8 <dw1000_set_wait4resp_delay+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   141d4:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   141d8:	f043 0308 	orr.w	r3, r3, #8
   141dc:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   141e0:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   141e4:	b004      	add	sp, #16
   141e6:	bd70      	pop	{r4, r5, r6, pc}
    ack_resp_reg = dw1000_read_reg(inst, ACK_RESP_T_ID, 0, sizeof(uint32_t));
   141e8:	2304      	movs	r3, #4
   141ea:	2200      	movs	r2, #0
   141ec:	211a      	movs	r1, #26
   141ee:	4620      	mov	r0, r4
   141f0:	f7fe f9b4 	bl	1255c <dw1000_read_reg>
    inst->control.wait4resp_delay_enabled = delay > 0;
   141f4:	1e32      	subs	r2, r6, #0
   141f6:	bf18      	it	ne
   141f8:	2201      	movne	r2, #1
   141fa:	f894 35bc 	ldrb.w	r3, [r4, #1468]	; 0x5bc
   141fe:	f362 0341 	bfi	r3, r2, #1, #1
   14202:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    if (inst->control.wait4resp_delay_enabled || (ack_resp_reg&ACK_RESP_T_W4R_TIM_MASK)) {
   14206:	b2db      	uxtb	r3, r3
   14208:	f013 0f02 	tst.w	r3, #2
   1420c:	d102      	bne.n	14214 <dw1000_set_wait4resp_delay+0x58>
   1420e:	f3c0 0313 	ubfx	r3, r0, #0, #20
   14212:	b16b      	cbz	r3, 14230 <dw1000_set_wait4resp_delay+0x74>
        ack_resp_reg &= ~(ACK_RESP_T_W4R_TIM_MASK) ;        // Clear the timer (19:0)
   14214:	0d00      	lsrs	r0, r0, #20
   14216:	0500      	lsls	r0, r0, #20
        ack_resp_reg |= (delay & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
   14218:	f3c6 0113 	ubfx	r1, r6, #0, #20
   1421c:	4308      	orrs	r0, r1
        dw1000_write_reg(inst, ACK_RESP_T_ID, 0, ack_resp_reg, sizeof(uint32_t));
   1421e:	2304      	movs	r3, #4
   14220:	9302      	str	r3, [sp, #8]
   14222:	2200      	movs	r2, #0
   14224:	9000      	str	r0, [sp, #0]
   14226:	9201      	str	r2, [sp, #4]
   14228:	211a      	movs	r1, #26
   1422a:	4620      	mov	r0, r4
   1422c:	f7fe fa06 	bl	1263c <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   14230:	4628      	mov	r0, r5
   14232:	f7f6 fb97 	bl	a964 <os_mutex_release>
    assert(err == DPL_OK);
   14236:	2800      	cmp	r0, #0
   14238:	d0d2      	beq.n	141e0 <dw1000_set_wait4resp_delay+0x24>
   1423a:	2300      	movs	r3, #0
   1423c:	461a      	mov	r2, r3
   1423e:	4619      	mov	r1, r3
   14240:	4618      	mov	r0, r3
   14242:	f7f4 fe87 	bl	8f54 <__assert_func>

00014246 <dw1000_set_dblrxbuff>:
{
   14246:	b570      	push	{r4, r5, r6, lr}
   14248:	b084      	sub	sp, #16
   1424a:	4604      	mov	r4, r0
   1424c:	460d      	mov	r5, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1424e:	f500 66ae 	add.w	r6, r0, #1392	; 0x570
   14252:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14256:	4630      	mov	r0, r6
   14258:	f7f6 fbe0 	bl	aa1c <os_mutex_pend>
    if (err != DPL_OK) {
   1425c:	b148      	cbz	r0, 14272 <dw1000_set_dblrxbuff+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   1425e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   14262:	f043 0308 	orr.w	r3, r3, #8
   14266:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1426a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1426e:	b004      	add	sp, #16
   14270:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
   14272:	2304      	movs	r3, #4
   14274:	2200      	movs	r2, #0
   14276:	4619      	mov	r1, r3
   14278:	4620      	mov	r0, r4
   1427a:	f7fe f96f 	bl	1255c <dw1000_read_reg>
   1427e:	f020 637b 	bic.w	r3, r0, #263192576	; 0xfb00000
   14282:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    inst->uwb_dev.config.dblbuffon_enabled = enable;
   14286:	f894 2530 	ldrb.w	r2, [r4, #1328]	; 0x530
   1428a:	f365 1204 	bfi	r2, r5, #4, #1
   1428e:	f884 2530 	strb.w	r2, [r4, #1328]	; 0x530
    if(inst->uwb_dev.config.dblbuffon_enabled)
   14292:	b2d2      	uxtb	r2, r2
   14294:	f012 0f10 	tst.w	r2, #16
   14298:	d028      	beq.n	142ec <dw1000_set_dblrxbuff+0xa6>
        sys_cfg_reg &= ~SYS_CFG_DIS_DRXB;
   1429a:	f020 637b 	bic.w	r3, r0, #263192576	; 0xfb00000
   1429e:	f423 2301 	bic.w	r3, r3, #528384	; 0x81000
    dw1000_write_reg(inst, SYS_CFG_ID, 0, sys_cfg_reg, sizeof(uint32_t));
   142a2:	2104      	movs	r1, #4
   142a4:	9102      	str	r1, [sp, #8]
   142a6:	2200      	movs	r2, #0
   142a8:	9300      	str	r3, [sp, #0]
   142aa:	9201      	str	r2, [sp, #4]
   142ac:	4620      	mov	r0, r4
   142ae:	f7fe f9c5 	bl	1263c <dw1000_write_reg>
    inst->control.start_rx_syncbuf_enabled = 1;
   142b2:	f894 35bc 	ldrb.w	r3, [r4, #1468]	; 0x5bc
   142b6:	f043 0310 	orr.w	r3, r3, #16
   142ba:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   142be:	2301      	movs	r3, #1
   142c0:	2203      	movs	r2, #3
   142c2:	210f      	movs	r1, #15
   142c4:	4620      	mov	r0, r4
   142c6:	f7fe f949 	bl	1255c <dw1000_read_reg>
   142ca:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   142cc:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   142d0:	f010 0f80 	tst.w	r0, #128	; 0x80
   142d4:	d10d      	bne.n	142f2 <dw1000_set_dblrxbuff+0xac>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   142d6:	4630      	mov	r0, r6
   142d8:	f7f6 fb44 	bl	a964 <os_mutex_release>
    assert(err == DPL_OK);
   142dc:	2800      	cmp	r0, #0
   142de:	d0c4      	beq.n	1426a <dw1000_set_dblrxbuff+0x24>
   142e0:	2300      	movs	r3, #0
   142e2:	461a      	mov	r2, r3
   142e4:	4619      	mov	r1, r3
   142e6:	4618      	mov	r0, r3
   142e8:	f7f4 fe34 	bl	8f54 <__assert_func>
        sys_cfg_reg |= SYS_CFG_DIS_DRXB;
   142ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   142f0:	e7d7      	b.n	142a2 <dw1000_set_dblrxbuff+0x5c>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   142f2:	2301      	movs	r3, #1
   142f4:	9302      	str	r3, [sp, #8]
   142f6:	2201      	movs	r2, #1
   142f8:	2300      	movs	r3, #0
   142fa:	e9cd 2300 	strd	r2, r3, [sp]
   142fe:	2203      	movs	r2, #3
   14300:	210d      	movs	r1, #13
   14302:	4620      	mov	r0, r4
   14304:	f7fe f99a 	bl	1263c <dw1000_write_reg>
   14308:	e7e5      	b.n	142d6 <dw1000_set_dblrxbuff+0x90>
   1430a:	0000      	movs	r0, r0
   1430c:	0000      	movs	r0, r0
	...

00014310 <dw1000_mac_config>:
{
   14310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14314:	b087      	sub	sp, #28
   14316:	4604      	mov	r4, r0
    if (config == NULL) {
   14318:	2900      	cmp	r1, #0
   1431a:	f000 8181 	beq.w	14620 <dw1000_mac_config+0x310>
   1431e:	460d      	mov	r5, r1
        memcpy(&inst->uwb_dev.config, config, sizeof(struct uwb_dev_config));
   14320:	460b      	mov	r3, r1
   14322:	f200 520c 	addw	r2, r0, #1292	; 0x50c
   14326:	f101 0c20 	add.w	ip, r1, #32
   1432a:	681f      	ldr	r7, [r3, #0]
   1432c:	685e      	ldr	r6, [r3, #4]
   1432e:	6898      	ldr	r0, [r3, #8]
   14330:	68d9      	ldr	r1, [r3, #12]
   14332:	6017      	str	r7, [r2, #0]
   14334:	6056      	str	r6, [r2, #4]
   14336:	6090      	str	r0, [r2, #8]
   14338:	60d1      	str	r1, [r2, #12]
   1433a:	3310      	adds	r3, #16
   1433c:	3210      	adds	r2, #16
   1433e:	4563      	cmp	r3, ip
   14340:	d1f3      	bne.n	1432a <dw1000_mac_config+0x1a>
   14342:	6819      	ldr	r1, [r3, #0]
   14344:	685b      	ldr	r3, [r3, #4]
   14346:	6011      	str	r1, [r2, #0]
   14348:	6053      	str	r3, [r2, #4]
    chan = config->channel;
   1434a:	782f      	ldrb	r7, [r5, #0]
    prfIndex = config->prf - DWT_PRF_16M;
   1434c:	f895 8002 	ldrb.w	r8, [r5, #2]
   14350:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   14354:	fa5f f888 	uxtb.w	r8, r8
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
   14358:	2f04      	cmp	r7, #4
   1435a:	f000 8167 	beq.w	1462c <dw1000_mac_config+0x31c>
   1435e:	2f07      	cmp	r7, #7
   14360:	f000 8161 	beq.w	14626 <dw1000_mac_config+0x316>
   14364:	2300      	movs	r3, #0
   14366:	9305      	str	r3, [sp, #20]
    reg16 = lde_replicaCoeff[config->rx.preambleCodeIndex];
   14368:	796a      	ldrb	r2, [r5, #5]
   1436a:	4bcb      	ldr	r3, [pc, #812]	; (14698 <dw1000_mac_config+0x388>)
   1436c:	f833 b012 	ldrh.w	fp, [r3, r2, lsl #1]
    inst->sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
   14370:	2304      	movs	r3, #4
   14372:	2200      	movs	r2, #0
   14374:	4619      	mov	r1, r3
   14376:	4620      	mov	r0, r4
   14378:	f7fe f8f0 	bl	1255c <dw1000_read_reg>
   1437c:	f020 607b 	bic.w	r0, r0, #263192576	; 0xfb00000
   14380:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
   14384:	f8c4 058c 	str.w	r0, [r4, #1420]	; 0x58c
    if(config->dataRate == DWT_BR_110K){
   14388:	786b      	ldrb	r3, [r5, #1]
   1438a:	2b00      	cmp	r3, #0
   1438c:	f040 8151 	bne.w	14632 <dw1000_mac_config+0x322>
        inst->sys_cfg_reg |= SYS_CFG_RXM110K;
   14390:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
   14394:	f8c4 058c 	str.w	r0, [r4, #1420]	; 0x58c
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
   14398:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
    inst->sys_cfg_reg &= ~SYS_CFG_PHR_MODE_11;
   1439c:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   143a0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   143a4:	f8c4 358c 	str.w	r3, [r4, #1420]	; 0x58c
    inst->sys_cfg_reg |= (SYS_CFG_PHR_MODE_11 & (((uint32_t)config->rx.phrMode) << SYS_CFG_PHR_MODE_SHFT));
   143a8:	79ea      	ldrb	r2, [r5, #7]
   143aa:	0412      	lsls	r2, r2, #16
   143ac:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
   143b0:	4313      	orrs	r3, r2
   143b2:	f8c4 358c 	str.w	r3, [r4, #1420]	; 0x58c
    if (config->rxauto_enable)
   143b6:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   143ba:	f012 0f01 	tst.w	r2, #1
   143be:	f000 813d 	beq.w	1463c <dw1000_mac_config+0x32c>
        inst->sys_cfg_reg |=SYS_CFG_RXAUTR;
   143c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   143c6:	f8c4 358c 	str.w	r3, [r4, #1420]	; 0x58c
    inst->sys_cfg_reg |= SYS_CFG_DIS_DRXB;
   143ca:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   143ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   143d2:	f8c4 358c 	str.w	r3, [r4, #1420]	; 0x58c
    dw1000_write_reg(inst, SYS_CFG_ID, 0, inst->sys_cfg_reg, sizeof(uint32_t));
   143d6:	f04f 0904 	mov.w	r9, #4
   143da:	f8cd 9008 	str.w	r9, [sp, #8]
   143de:	2600      	movs	r6, #0
   143e0:	9300      	str	r3, [sp, #0]
   143e2:	9601      	str	r6, [sp, #4]
   143e4:	4632      	mov	r2, r6
   143e6:	4649      	mov	r1, r9
   143e8:	4620      	mov	r0, r4
   143ea:	f7fe f927 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, LDE_IF_ID, LDE_REPC_OFFSET, reg16, sizeof(uint16_t));
   143ee:	f04f 0a02 	mov.w	sl, #2
   143f2:	f8cd a008 	str.w	sl, [sp, #8]
   143f6:	f8cd b000 	str.w	fp, [sp]
   143fa:	9601      	str	r6, [sp, #4]
   143fc:	f642 0204 	movw	r2, #10244	; 0x2804
   14400:	212e      	movs	r1, #46	; 0x2e
   14402:	4620      	mov	r0, r4
   14404:	f7fe f91a 	bl	1263c <dw1000_write_reg>
    dw1000_phy_config_lde(inst, prfIndex);
   14408:	4641      	mov	r1, r8
   1440a:	4620      	mov	r0, r4
   1440c:	f001 fa67 	bl	158de <dw1000_phy_config_lde>
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]], sizeof(uint32_t));
   14410:	4ba2      	ldr	r3, [pc, #648]	; (1469c <dw1000_mac_config+0x38c>)
   14412:	f813 b007 	ldrb.w	fp, [r3, r7]
   14416:	4ba2      	ldr	r3, [pc, #648]	; (146a0 <dw1000_mac_config+0x390>)
   14418:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   1441c:	f8cd 9008 	str.w	r9, [sp, #8]
   14420:	9300      	str	r3, [sp, #0]
   14422:	9601      	str	r6, [sp, #4]
   14424:	2207      	movs	r2, #7
   14426:	212b      	movs	r1, #43	; 0x2b
   14428:	4620      	mov	r0, r4
   1442a:	f7fe f907 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]], sizeof(uint8_t));
   1442e:	4b9d      	ldr	r3, [pc, #628]	; (146a4 <dw1000_mac_config+0x394>)
   14430:	f813 300b 	ldrb.w	r3, [r3, fp]
   14434:	2201      	movs	r2, #1
   14436:	9202      	str	r2, [sp, #8]
   14438:	9300      	str	r3, [sp, #0]
   1443a:	9601      	str	r6, [sp, #4]
   1443c:	220b      	movs	r2, #11
   1443e:	212b      	movs	r1, #43	; 0x2b
   14440:	4620      	mov	r0, r4
   14442:	f7fe f8fb 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw], sizeof(uint8_t));
   14446:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1444a:	4a97      	ldr	r2, [pc, #604]	; (146a8 <dw1000_mac_config+0x398>)
   1444c:	5cd3      	ldrb	r3, [r2, r3]
   1444e:	2201      	movs	r2, #1
   14450:	9202      	str	r2, [sp, #8]
   14452:	9300      	str	r3, [sp, #0]
   14454:	9601      	str	r6, [sp, #4]
   14456:	220b      	movs	r2, #11
   14458:	2128      	movs	r1, #40	; 0x28
   1445a:	4620      	mov	r0, r4
   1445c:	f7fe f8ee 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]], sizeof(uint32_t));
   14460:	4b92      	ldr	r3, [pc, #584]	; (146ac <dw1000_mac_config+0x39c>)
   14462:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   14466:	f8cd 9008 	str.w	r9, [sp, #8]
   1446a:	9300      	str	r3, [sp, #0]
   1446c:	9601      	str	r6, [sp, #4]
   1446e:	220c      	movs	r2, #12
   14470:	2128      	movs	r1, #40	; 0x28
   14472:	4620      	mov	r0, r4
   14474:	f7fe f8e2 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->rx.sfdType], sizeof(uint16_t));
   14478:	786a      	ldrb	r2, [r5, #1]
   1447a:	79ab      	ldrb	r3, [r5, #6]
   1447c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   14480:	4a8b      	ldr	r2, [pc, #556]	; (146b0 <dw1000_mac_config+0x3a0>)
   14482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   14486:	f8cd a008 	str.w	sl, [sp, #8]
   1448a:	9300      	str	r3, [sp, #0]
   1448c:	9601      	str	r6, [sp, #4]
   1448e:	4652      	mov	r2, sl
   14490:	2127      	movs	r1, #39	; 0x27
   14492:	4620      	mov	r0, r4
   14494:	f7fe f8d2 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex], sizeof(uint16_t));
   14498:	4b86      	ldr	r3, [pc, #536]	; (146b4 <dw1000_mac_config+0x3a4>)
   1449a:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
   1449e:	f8cd a008 	str.w	sl, [sp, #8]
   144a2:	9300      	str	r3, [sp, #0]
   144a4:	9601      	str	r6, [sp, #4]
   144a6:	464a      	mov	r2, r9
   144a8:	2127      	movs	r1, #39	; 0x27
   144aa:	4620      	mov	r0, r4
   144ac:	f7fe f8c6 	bl	1263c <dw1000_write_reg>
    if(config->dataRate == DWT_BR_110K){
   144b0:	786b      	ldrb	r3, [r5, #1]
   144b2:	2b00      	cmp	r3, #0
   144b4:	f000 80c7 	beq.w	14646 <dw1000_mac_config+0x336>
        if(config->tx.preambleLength == DWT_PLEN_64){
   144b8:	7e6b      	ldrb	r3, [r5, #25]
   144ba:	2b04      	cmp	r3, #4
   144bc:	f000 80cf 	beq.w	1465e <dw1000_mac_config+0x34e>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8, sizeof(uint16_t));
   144c0:	2602      	movs	r6, #2
   144c2:	9602      	str	r6, [sp, #8]
   144c4:	2220      	movs	r2, #32
   144c6:	2300      	movs	r3, #0
   144c8:	e9cd 2300 	strd	r2, r3, [sp]
   144cc:	2206      	movs	r2, #6
   144ce:	2127      	movs	r1, #39	; 0x27
   144d0:	4620      	mov	r0, r4
   144d2:	f7fe f8b3 	bl	1263c <dw1000_write_reg>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS, sizeof(uint16_t));
   144d6:	9602      	str	r6, [sp, #8]
   144d8:	2228      	movs	r2, #40	; 0x28
   144da:	2300      	movs	r3, #0
   144dc:	e9cd 2300 	strd	r2, r3, [sp]
   144e0:	2226      	movs	r2, #38	; 0x26
   144e2:	2127      	movs	r1, #39	; 0x27
   144e4:	4620      	mov	r0, r4
   144e6:	f7fe f8a9 	bl	1263c <dw1000_write_reg>
                     digital_bb_config[prfIndex][config->rx.pacLength], sizeof(uint32_t));
   144ea:	792b      	ldrb	r3, [r5, #4]
   144ec:	eb03 0388 	add.w	r3, r3, r8, lsl #2
   144f0:	4a71      	ldr	r2, [pc, #452]	; (146b8 <dw1000_mac_config+0x3a8>)
   144f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE2_OFFSET,
   144f6:	2204      	movs	r2, #4
   144f8:	9202      	str	r2, [sp, #8]
   144fa:	9300      	str	r3, [sp, #0]
   144fc:	2300      	movs	r3, #0
   144fe:	9301      	str	r3, [sp, #4]
   14500:	2208      	movs	r2, #8
   14502:	2127      	movs	r1, #39	; 0x27
   14504:	4620      	mov	r0, r4
   14506:	f7fe f899 	bl	1263c <dw1000_write_reg>
    if(config->rx.sfdTimeout == 0)
   1450a:	896b      	ldrh	r3, [r5, #10]
   1450c:	b90b      	cbnz	r3, 14512 <dw1000_mac_config+0x202>
        config->rx.sfdTimeout= DWT_SFDTOC_DEF;
   1450e:	2381      	movs	r3, #129	; 0x81
   14510:	816b      	strh	r3, [r5, #10]
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->rx.sfdTimeout, sizeof(uint16_t));
   14512:	896b      	ldrh	r3, [r5, #10]
   14514:	f04f 0a02 	mov.w	sl, #2
   14518:	f8cd a008 	str.w	sl, [sp, #8]
   1451c:	f04f 0900 	mov.w	r9, #0
   14520:	9300      	str	r3, [sp, #0]
   14522:	f8cd 9004 	str.w	r9, [sp, #4]
   14526:	2220      	movs	r2, #32
   14528:	2127      	movs	r1, #39	; 0x27
   1452a:	4620      	mov	r0, r4
   1452c:	f7fe f886 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, AGC_CTRL_ID, AGC_TUNE2_OFFSET, agc_config.lo32, sizeof(uint32_t));
   14530:	2604      	movs	r6, #4
   14532:	9602      	str	r6, [sp, #8]
   14534:	a356      	add	r3, pc, #344	; (adr r3, 14690 <dw1000_mac_config+0x380>)
   14536:	e9d3 2300 	ldrd	r2, r3, [r3]
   1453a:	e9cd 2300 	strd	r2, r3, [sp]
   1453e:	220c      	movs	r2, #12
   14540:	2123      	movs	r1, #35	; 0x23
   14542:	4620      	mov	r0, r4
   14544:	f7fe f87a 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, AGC_CTRL_ID, AGC_TUNE1_OFFSET, agc_config.target[prfIndex], sizeof(uint16_t));
   14548:	4b5c      	ldr	r3, [pc, #368]	; (146bc <dw1000_mac_config+0x3ac>)
   1454a:	eb03 0848 	add.w	r8, r3, r8, lsl #1
   1454e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   14552:	f8cd a008 	str.w	sl, [sp, #8]
   14556:	9300      	str	r3, [sp, #0]
   14558:	f8cd 9004 	str.w	r9, [sp, #4]
   1455c:	4632      	mov	r2, r6
   1455e:	2123      	movs	r1, #35	; 0x23
   14560:	4620      	mov	r0, r4
   14562:	f7fe f86b 	bl	1263c <dw1000_write_reg>
    if(config->rx.sfdType){
   14566:	79aa      	ldrb	r2, [r5, #6]
   14568:	2a00      	cmp	r2, #0
   1456a:	f040 80a9 	bne.w	146c0 <dw1000_mac_config+0x3b0>
    uint8_t useDWnsSFD = 0;
   1456e:	4611      	mov	r1, r2
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   14570:	f007 030f 	and.w	r3, r7, #15
        (CHAN_CTRL_RX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_RX_CHAN_SHIFT)) |                         // Receive Channel
   14574:	013f      	lsls	r7, r7, #4
   14576:	b2ff      	uxtb	r7, r7
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   14578:	433b      	orrs	r3, r7
        (CHAN_CTRL_RXFPRF_MASK & (((uint32_t)config->prf) << CHAN_CTRL_RXFPRF_SHIFT)) |                    // RX PRF
   1457a:	78af      	ldrb	r7, [r5, #2]
   1457c:	04bf      	lsls	r7, r7, #18
   1457e:	f407 2740 	and.w	r7, r7, #786432	; 0xc0000
        (CHAN_CTRL_RX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_RX_CHAN_SHIFT)) |                         // Receive Channel
   14582:	433b      	orrs	r3, r7
        ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (((uint32_t)nsSfd_result) << CHAN_CTRL_TNSSFD_SHIFT)) |     // nsSFD enable RX&TX
   14584:	0512      	lsls	r2, r2, #20
   14586:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
        (CHAN_CTRL_RXFPRF_MASK & (((uint32_t)config->prf) << CHAN_CTRL_RXFPRF_SHIFT)) |                    // RX PRF
   1458a:	4313      	orrs	r3, r2
        (CHAN_CTRL_DWSFD & (((uint32_t)useDWnsSFD) << CHAN_CTRL_DWSFD_SHIFT)) |                            // Use DW nsSFD
   1458c:	044a      	lsls	r2, r1, #17
   1458e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
        ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (((uint32_t)nsSfd_result) << CHAN_CTRL_TNSSFD_SHIFT)) |     // nsSFD enable RX&TX
   14592:	4313      	orrs	r3, r2
        (CHAN_CTRL_TX_PCOD_MASK & (((uint32_t)config->tx.preambleCodeIndex) << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
   14594:	7e2a      	ldrb	r2, [r5, #24]
   14596:	0592      	lsls	r2, r2, #22
   14598:	f002 62f8 	and.w	r2, r2, #130023424	; 0x7c00000
        (CHAN_CTRL_DWSFD & (((uint32_t)useDWnsSFD) << CHAN_CTRL_DWSFD_SHIFT)) |                            // Use DW nsSFD
   1459c:	4313      	orrs	r3, r2
        (CHAN_CTRL_RX_PCOD_MASK & (((uint32_t)config->rx.preambleCodeIndex) << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
   1459e:	796a      	ldrb	r2, [r5, #5]
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   145a0:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
    dw1000_write_reg(inst, CHAN_CTRL_ID, 0, regval, sizeof(uint32_t)) ;
   145a4:	2704      	movs	r7, #4
   145a6:	9702      	str	r7, [sp, #8]
   145a8:	2600      	movs	r6, #0
   145aa:	9300      	str	r3, [sp, #0]
   145ac:	9601      	str	r6, [sp, #4]
   145ae:	4632      	mov	r2, r6
   145b0:	211f      	movs	r1, #31
   145b2:	4620      	mov	r0, r4
   145b4:	f7fe f842 	bl	1263c <dw1000_write_reg>
    inst->tx_fctrl = (((uint32_t)(config->tx.preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   145b8:	7e6b      	ldrb	r3, [r5, #25]
   145ba:	78aa      	ldrb	r2, [r5, #2]
   145bc:	431a      	orrs	r2, r3
        (((uint32_t)config->dataRate) << TX_FCTRL_TXBR_SHFT);
   145be:	786b      	ldrb	r3, [r5, #1]
   145c0:	035b      	lsls	r3, r3, #13
    inst->tx_fctrl = (((uint32_t)(config->tx.preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   145c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   145c6:	f8c4 3590 	str.w	r3, [r4, #1424]	; 0x590
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, inst->tx_fctrl, sizeof(uint32_t));
   145ca:	9702      	str	r7, [sp, #8]
   145cc:	9300      	str	r3, [sp, #0]
   145ce:	9601      	str	r6, [sp, #4]
   145d0:	4632      	mov	r2, r6
   145d2:	2108      	movs	r1, #8
   145d4:	4620      	mov	r0, r4
   145d6:	f7fe f831 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF, sizeof(uint8_t));
   145da:	2301      	movs	r3, #1
   145dc:	9302      	str	r3, [sp, #8]
   145de:	2242      	movs	r2, #66	; 0x42
   145e0:	2300      	movs	r3, #0
   145e2:	e9cd 2300 	strd	r2, r3, [sp]
   145e6:	4632      	mov	r2, r6
   145e8:	210d      	movs	r1, #13
   145ea:	4620      	mov	r0, r4
   145ec:	f7fe f826 	bl	1263c <dw1000_write_reg>
    dw1000_mac_framefilter(inst, config->rx.frameFilter);
   145f0:	8a29      	ldrh	r1, [r5, #16]
   145f2:	4620      	mov	r0, r4
   145f4:	f7ff fd42 	bl	1407c <dw1000_mac_framefilter>
    if (config->rxauto_enable)
   145f8:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   145fc:	f013 0f01 	tst.w	r3, #1
   14600:	d004      	beq.n	1460c <dw1000_mac_config+0x2fc>
        assert(config->trxoff_enable);
   14602:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   14606:	f013 0f20 	tst.w	r3, #32
   1460a:	d069      	beq.n	146e0 <dw1000_mac_config+0x3d0>
    if(config->dblbuffon_enabled)
   1460c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   14610:	f013 0f10 	tst.w	r3, #16
   14614:	d16a      	bne.n	146ec <dw1000_mac_config+0x3dc>
}
   14616:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1461a:	b007      	add	sp, #28
   1461c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        config = &inst->uwb_dev.config;
   14620:	f200 550c 	addw	r5, r0, #1292	; 0x50c
   14624:	e691      	b.n	1434a <dw1000_mac_config+0x3a>
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
   14626:	2301      	movs	r3, #1
   14628:	9305      	str	r3, [sp, #20]
   1462a:	e69d      	b.n	14368 <dw1000_mac_config+0x58>
   1462c:	2301      	movs	r3, #1
   1462e:	9305      	str	r3, [sp, #20]
   14630:	e69a      	b.n	14368 <dw1000_mac_config+0x58>
        inst->sys_cfg_reg &= (~SYS_CFG_RXM110K);
   14632:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
   14636:	f8c4 058c 	str.w	r0, [r4, #1420]	; 0x58c
   1463a:	e6af      	b.n	1439c <dw1000_mac_config+0x8c>
        inst->sys_cfg_reg &= (~SYS_CFG_RXAUTR);
   1463c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   14640:	f8c4 358c 	str.w	r3, [r4, #1420]	; 0x58c
   14644:	e6c1      	b.n	143ca <dw1000_mac_config+0xba>
        dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K, sizeof(uint16_t));
   14646:	f8cd a008 	str.w	sl, [sp, #8]
   1464a:	2264      	movs	r2, #100	; 0x64
   1464c:	2300      	movs	r3, #0
   1464e:	e9cd 2300 	strd	r2, r3, [sp]
   14652:	2206      	movs	r2, #6
   14654:	2127      	movs	r1, #39	; 0x27
   14656:	4620      	mov	r0, r4
   14658:	f7fd fff0 	bl	1263c <dw1000_write_reg>
   1465c:	e745      	b.n	144ea <dw1000_mac_config+0x1da>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64, sizeof(uint16_t));
   1465e:	2602      	movs	r6, #2
   14660:	9602      	str	r6, [sp, #8]
   14662:	f04f 0a10 	mov.w	sl, #16
   14666:	f04f 0b00 	mov.w	fp, #0
   1466a:	e9cd ab00 	strd	sl, fp, [sp]
   1466e:	2206      	movs	r2, #6
   14670:	2127      	movs	r1, #39	; 0x27
   14672:	4620      	mov	r0, r4
   14674:	f7fd ffe2 	bl	1263c <dw1000_write_reg>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64, sizeof(uint16_t));
   14678:	9602      	str	r6, [sp, #8]
   1467a:	e9cd ab00 	strd	sl, fp, [sp]
   1467e:	2226      	movs	r2, #38	; 0x26
   14680:	2127      	movs	r1, #39	; 0x27
   14682:	4620      	mov	r0, r4
   14684:	f7fd ffda 	bl	1263c <dw1000_write_reg>
   14688:	e72f      	b.n	144ea <dw1000_mac_config+0x1da>
   1468a:	bf00      	nop
   1468c:	f3af 8000 	nop.w
   14690:	2502a907 	.word	0x2502a907
   14694:	00000000 	.word	0x00000000
   14698:	00022a84 	.word	0x00022a84
   1469c:	000229f8 	.word	0x000229f8
   146a0:	00022a28 	.word	0x00022a28
   146a4:	00022a40 	.word	0x00022a40
   146a8:	00022ab8 	.word	0x00022ab8
   146ac:	00022ac8 	.word	0x00022ac8
   146b0:	00022abc 	.word	0x00022abc
   146b4:	00022a20 	.word	0x00022a20
   146b8:	00022a00 	.word	0x00022a00
   146bc:	000229f0 	.word	0x000229f0
        dw1000_write_reg(inst, USR_SFD_ID, 0x0, dwnsSFDlen[config->dataRate], sizeof(uint8_t));
   146c0:	786b      	ldrb	r3, [r5, #1]
   146c2:	4a0d      	ldr	r2, [pc, #52]	; (146f8 <dw1000_mac_config+0x3e8>)
   146c4:	5cd3      	ldrb	r3, [r2, r3]
   146c6:	2601      	movs	r6, #1
   146c8:	9602      	str	r6, [sp, #8]
   146ca:	464a      	mov	r2, r9
   146cc:	9300      	str	r3, [sp, #0]
   146ce:	f8cd 9004 	str.w	r9, [sp, #4]
   146d2:	2121      	movs	r1, #33	; 0x21
   146d4:	4620      	mov	r0, r4
   146d6:	f7fd ffb1 	bl	1263c <dw1000_write_reg>
        useDWnsSFD = 1 ;
   146da:	4631      	mov	r1, r6
        nsSfd_result = 3 ;
   146dc:	2203      	movs	r2, #3
   146de:	e747      	b.n	14570 <dw1000_mac_config+0x260>
        assert(config->trxoff_enable);
   146e0:	4633      	mov	r3, r6
   146e2:	4632      	mov	r2, r6
   146e4:	4631      	mov	r1, r6
   146e6:	4630      	mov	r0, r6
   146e8:	f7f4 fc34 	bl	8f54 <__assert_func>
        dw1000_set_dblrxbuff(inst, true);
   146ec:	2101      	movs	r1, #1
   146ee:	4620      	mov	r0, r4
   146f0:	f7ff fda9 	bl	14246 <dw1000_set_dblrxbuff>
   146f4:	e78f      	b.n	14616 <dw1000_mac_config+0x306>
   146f6:	bf00      	nop
   146f8:	00022a24 	.word	0x00022a24

000146fc <dw1000_read_carrier_integrator>:
{
   146fc:	b508      	push	{r3, lr}
    regval = dw1000_read_reg(inst, DRX_CONF_ID, DRX_CARRIER_INT_OFFSET, DRX_CARRIER_INT_LEN);
   146fe:	2303      	movs	r3, #3
   14700:	2228      	movs	r2, #40	; 0x28
   14702:	2127      	movs	r1, #39	; 0x27
   14704:	f7fd ff2a 	bl	1255c <dw1000_read_reg>
    if (regval & B20_SIGN_EXTEND_TEST) {
   14708:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
   1470c:	d005      	beq.n	1471a <dw1000_read_carrier_integrator+0x1e>
        regval |= B20_SIGN_EXTEND_MASK;
   1470e:	ea6f 3000 	mvn.w	r0, r0, lsl #12
   14712:	ea6f 3010 	mvn.w	r0, r0, lsr #12
}
   14716:	4240      	negs	r0, r0
   14718:	bd08      	pop	{r3, pc}
        regval &= DRX_CARRIER_INT_MASK;
   1471a:	f3c0 0014 	ubfx	r0, r0, #0, #21
   1471e:	e7fa      	b.n	14716 <dw1000_read_carrier_integrator+0x1a>

00014720 <dw1000_calc_clock_offset_ratio>:
{
   14720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14724:	4603      	mov	r3, r0
   14726:	4608      	mov	r0, r1
    if (inst->uwb_dev.config.dataRate == DWT_BR_110K) {
   14728:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
   1472c:	b172      	cbz	r2, 1474c <dw1000_calc_clock_offset_ratio+0x2c>
    dpl_float64_t fom = DPL_FLOAT64_INIT(DWT_FREQ_OFFSET_MULTIPLIER);
   1472e:	f20f 0998 	addw	r9, pc, #152	; 0x98
   14732:	e9d9 8900 	ldrd	r8, r9, [r9]
    switch ( inst->uwb_dev.config.channel ) {
   14736:	f893 350c 	ldrb.w	r3, [r3, #1292]	; 0x50c
   1473a:	3b01      	subs	r3, #1
   1473c:	2b06      	cmp	r3, #6
   1473e:	d832      	bhi.n	147a6 <dw1000_calc_clock_offset_ratio+0x86>
   14740:	e8df f003 	tbb	[pc, r3]
   14744:	25093b37 	.word	0x25093b37
   14748:	3129      	.short	0x3129
   1474a:	2d          	.byte	0x2d
   1474b:	00          	.byte	0x00
        fom = DPL_FLOAT64_INIT(DWT_FREQ_OFFSET_MULTIPLIER_110KB);
   1474c:	f20f 0980 	addw	r9, pc, #128	; 0x80
   14750:	e9d9 8900 	ldrd	r8, r9, [r9]
   14754:	e7ef      	b.n	14736 <dw1000_calc_clock_offset_ratio+0x16>
    case 3: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_3);break;
   14756:	a720      	add	r7, pc, #128	; (adr r7, 147d8 <dw1000_calc_clock_offset_ratio+0xb8>)
   14758:	e9d7 6700 	ldrd	r6, r7, [r7]
    ccor = DPL_FLOAT64_MUL(DPL_FLOAT64_I32_TO_F64(integrator_val), DPL_FLOAT64_MUL(fom, hz_to_ppm));
   1475c:	f00b faee 	bl	1fd3c <__aeabi_i2d>
   14760:	4604      	mov	r4, r0
   14762:	460d      	mov	r5, r1
   14764:	4632      	mov	r2, r6
   14766:	463b      	mov	r3, r7
   14768:	4640      	mov	r0, r8
   1476a:	4649      	mov	r1, r9
   1476c:	f00b fb50 	bl	1fe10 <__aeabi_dmul>
   14770:	4602      	mov	r2, r0
   14772:	460b      	mov	r3, r1
   14774:	4620      	mov	r0, r4
   14776:	4629      	mov	r1, r5
   14778:	f00b fb4a 	bl	1fe10 <__aeabi_dmul>
    ccor = DPL_FLOAT64_DIV(ccor, DPL_FLOAT64_INIT(1.0e6));
   1477c:	a318      	add	r3, pc, #96	; (adr r3, 147e0 <dw1000_calc_clock_offset_ratio+0xc0>)
   1477e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14782:	f00b fc6f 	bl	20064 <__aeabi_ddiv>
}
   14786:	ec41 0b10 	vmov	d0, r0, r1
   1478a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    case 4: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_4);break;
   1478e:	a712      	add	r7, pc, #72	; (adr r7, 147d8 <dw1000_calc_clock_offset_ratio+0xb8>)
   14790:	e9d7 6700 	ldrd	r6, r7, [r7]
   14794:	e7e2      	b.n	1475c <dw1000_calc_clock_offset_ratio+0x3c>
    case 5: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_5);break;
   14796:	a714      	add	r7, pc, #80	; (adr r7, 147e8 <dw1000_calc_clock_offset_ratio+0xc8>)
   14798:	e9d7 6700 	ldrd	r6, r7, [r7]
   1479c:	e7de      	b.n	1475c <dw1000_calc_clock_offset_ratio+0x3c>
    case 7: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_7);break;
   1479e:	a712      	add	r7, pc, #72	; (adr r7, 147e8 <dw1000_calc_clock_offset_ratio+0xc8>)
   147a0:	e9d7 6700 	ldrd	r6, r7, [r7]
   147a4:	e7da      	b.n	1475c <dw1000_calc_clock_offset_ratio+0x3c>
    default: assert(0);
   147a6:	2300      	movs	r3, #0
   147a8:	461a      	mov	r2, r3
   147aa:	4619      	mov	r1, r3
   147ac:	4618      	mov	r0, r3
   147ae:	f7f4 fbd1 	bl	8f54 <__assert_func>
    switch ( inst->uwb_dev.config.channel ) {
   147b2:	a70f      	add	r7, pc, #60	; (adr r7, 147f0 <dw1000_calc_clock_offset_ratio+0xd0>)
   147b4:	e9d7 6700 	ldrd	r6, r7, [r7]
   147b8:	e7d0      	b.n	1475c <dw1000_calc_clock_offset_ratio+0x3c>
    case 2: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_2);break;
   147ba:	a70f      	add	r7, pc, #60	; (adr r7, 147f8 <dw1000_calc_clock_offset_ratio+0xd8>)
   147bc:	e9d7 6700 	ldrd	r6, r7, [r7]
   147c0:	e7cc      	b.n	1475c <dw1000_calc_clock_offset_ratio+0x3c>
   147c2:	bf00      	nop
   147c4:	f3af 8000 	nop.w
   147c8:	00000000 	.word	0x00000000
   147cc:	400dc130 	.word	0x400dc130
   147d0:	00000000 	.word	0x00000000
   147d4:	3fddc130 	.word	0x3fddc130
   147d8:	7281d2c8 	.word	0x7281d2c8
   147dc:	3f2d2c7d 	.word	0x3f2d2c7d
   147e0:	00000000 	.word	0x00000000
   147e4:	412e8480 	.word	0x412e8480
   147e8:	3b94f463 	.word	0x3b94f463
   147ec:	3f24327e 	.word	0x3f24327e
   147f0:	12c12c13 	.word	0x12c12c13
   147f4:	3f32c12c 	.word	0x3f32c12c
   147f8:	90690690 	.word	0x90690690
   147fc:	3f306906 	.word	0x3f306906

00014800 <dw1000_read_time_tracking_offset>:
{
   14800:	b508      	push	{r3, lr}
    regval = dw1000_read_reg(inst, RX_TTCKO_ID, 0, 3);
   14802:	2303      	movs	r3, #3
   14804:	2200      	movs	r2, #0
   14806:	2114      	movs	r1, #20
   14808:	f7fd fea8 	bl	1255c <dw1000_read_reg>
    if (regval & B18_SIGN_EXTEND_TEST) {
   1480c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   14810:	d004      	beq.n	1481c <dw1000_read_time_tracking_offset+0x1c>
        regval |= B18_SIGN_EXTEND_MASK;
   14812:	ea6f 3080 	mvn.w	r0, r0, lsl #14
   14816:	ea6f 3090 	mvn.w	r0, r0, lsr #14
}
   1481a:	bd08      	pop	{r3, pc}
        regval &= RX_TTCKO_RXTOFS_MASK;
   1481c:	f3c0 0012 	ubfx	r0, r0, #0, #19
   14820:	e7fb      	b.n	1481a <dw1000_read_time_tracking_offset+0x1a>

00014822 <dw1000_calc_clock_offset_ratio_ttco>:
{
   14822:	b570      	push	{r4, r5, r6, lr}
    if (inst->uwb_dev.config.prf != DWT_PRF_16M) {
   14824:	f890 350e 	ldrb.w	r3, [r0, #1294]	; 0x50e
   14828:	2b01      	cmp	r3, #1
   1482a:	d012      	beq.n	14852 <dw1000_calc_clock_offset_ratio_ttco+0x30>
        denom = 0x01FC0000;
   1482c:	f04f 76fe 	mov.w	r6, #33292288	; 0x1fc0000
    return DPL_FLOAT64_DIV(DPL_FLOAT64_I32_TO_F64(-ttcko), DPL_FLOAT64_I32_TO_F64(denom));
   14830:	4248      	negs	r0, r1
   14832:	f00b fa83 	bl	1fd3c <__aeabi_i2d>
   14836:	4604      	mov	r4, r0
   14838:	460d      	mov	r5, r1
   1483a:	4630      	mov	r0, r6
   1483c:	f00b fa7e 	bl	1fd3c <__aeabi_i2d>
   14840:	4602      	mov	r2, r0
   14842:	460b      	mov	r3, r1
   14844:	4620      	mov	r0, r4
   14846:	4629      	mov	r1, r5
   14848:	f00b fc0c 	bl	20064 <__aeabi_ddiv>
}
   1484c:	ec41 0b10 	vmov	d0, r0, r1
   14850:	bd70      	pop	{r4, r5, r6, pc}
    int32_t denom = 0x01F00000;
   14852:	f04f 76f8 	mov.w	r6, #32505856	; 0x1f00000
   14856:	e7eb      	b.n	14830 <dw1000_calc_clock_offset_ratio_ttco+0xe>

00014858 <dw1000_read_rxdiag>:
{
   14858:	b570      	push	{r4, r5, r6, lr}
   1485a:	b082      	sub	sp, #8
   1485c:	4605      	mov	r5, r0
   1485e:	460c      	mov	r4, r1
    dw1000_read(inst, RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET, (uint8_t*)&diag->rx_time, sizeof(diag->rx_time));
   14860:	2604      	movs	r6, #4
   14862:	9600      	str	r6, [sp, #0]
   14864:	1d8b      	adds	r3, r1, #6
   14866:	2205      	movs	r2, #5
   14868:	2115      	movs	r1, #21
   1486a:	f7fd fdad 	bl	123c8 <dw1000_read>
    dw1000_read(inst, RX_FQUAL_ID, 0, (uint8_t*)&diag->rx_fqual, sizeof(diag->rx_fqual));
   1486e:	2308      	movs	r3, #8
   14870:	9300      	str	r3, [sp, #0]
   14872:	f104 030a 	add.w	r3, r4, #10
   14876:	2200      	movs	r2, #0
   14878:	2112      	movs	r1, #18
   1487a:	4628      	mov	r0, r5
   1487c:	f7fd fda4 	bl	123c8 <dw1000_read>
    diag->pacc_cnt =  (dw1000_read_reg(inst, RX_FINFO_ID, 0, sizeof(uint32_t)) & RX_FINFO_RXPACC_MASK) >> RX_FINFO_RXPACC_SHIFT;
   14880:	4633      	mov	r3, r6
   14882:	2200      	movs	r2, #0
   14884:	2110      	movs	r1, #16
   14886:	4628      	mov	r0, r5
   14888:	f7fd fe68 	bl	1255c <dw1000_read_reg>
   1488c:	0d00      	lsrs	r0, r0, #20
   1488e:	8260      	strh	r0, [r4, #18]
}
   14890:	b002      	add	sp, #8
   14892:	bd70      	pop	{r4, r5, r6, pc}
   14894:	0000      	movs	r0, r0
	...

00014898 <dw1000_tasks_init>:
{
   14898:	b530      	push	{r4, r5, lr}
   1489a:	b085      	sub	sp, #20
   1489c:	4604      	mov	r4, r0
    return os_eventq_inited((struct os_eventq *) evq);
   1489e:	303c      	adds	r0, #60	; 0x3c
   148a0:	f7f4 fe79 	bl	9596 <os_eventq_inited>
    if (!dpl_eventq_inited(&inst->uwb_dev.eventq))
   148a4:	b1c0      	cbz	r0, 148d8 <dw1000_tasks_init+0x40>
    dw1000_phy_interrupt_mask(inst,          SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO   | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR, false);
   148a6:	4d18      	ldr	r5, [pc, #96]	; (14908 <dw1000_tasks_init+0x70>)
   148a8:	2200      	movs	r2, #0
   148aa:	4629      	mov	r1, r5
   148ac:	4620      	mov	r0, r4
   148ae:	f001 fa0b 	bl	15cc8 <dw1000_phy_interrupt_mask>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_SLP2INIT | SYS_STATUS_CPLOCK| SYS_STATUS_RXDFR | SYS_STATUS_LDEERR | SYS_STATUS_TXFRB | SYS_STATUS_TXFRS | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_TXBERR, sizeof(uint32_t));
   148b2:	2304      	movs	r3, #4
   148b4:	9302      	str	r3, [sp, #8]
   148b6:	a312      	add	r3, pc, #72	; (adr r3, 14900 <dw1000_tasks_init+0x68>)
   148b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   148bc:	e9cd 2300 	strd	r2, r3, [sp]
   148c0:	2200      	movs	r2, #0
   148c2:	210f      	movs	r1, #15
   148c4:	4620      	mov	r0, r4
   148c6:	f7fd feb9 	bl	1263c <dw1000_write_reg>
    dw1000_phy_interrupt_mask(inst,          SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO   | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR, true);
   148ca:	2201      	movs	r2, #1
   148cc:	4629      	mov	r1, r5
   148ce:	4620      	mov	r0, r4
   148d0:	f001 f9fa 	bl	15cc8 <dw1000_phy_interrupt_mask>
}
   148d4:	b005      	add	sp, #20
   148d6:	bd30      	pop	{r4, r5, pc}
        uwb_task_init(&inst->uwb_dev, dw1000_interrupt_ev_cb);
   148d8:	490c      	ldr	r1, [pc, #48]	; (1490c <dw1000_tasks_init+0x74>)
   148da:	4620      	mov	r0, r4
   148dc:	f7f4 f91e 	bl	8b1c <uwb_task_init>
        hal_gpio_irq_init(inst->irq_pin, dw1000_irq, inst, HAL_GPIO_TRIG_RISING, HAL_GPIO_PULL_DOWN);
   148e0:	2302      	movs	r3, #2
   148e2:	9300      	str	r3, [sp, #0]
   148e4:	2301      	movs	r3, #1
   148e6:	4622      	mov	r2, r4
   148e8:	4909      	ldr	r1, [pc, #36]	; (14910 <dw1000_tasks_init+0x78>)
   148ea:	f894 0565 	ldrb.w	r0, [r4, #1381]	; 0x565
   148ee:	f7f4 fab5 	bl	8e5c <hal_gpio_irq_init>
        hal_gpio_irq_enable(inst->irq_pin);
   148f2:	f894 0565 	ldrb.w	r0, [r4, #1381]	; 0x565
   148f6:	f7f4 faed 	bl	8ed4 <hal_gpio_irq_enable>
   148fa:	e7d4      	b.n	148a6 <dw1000_tasks_init+0xe>
   148fc:	f3af 8000 	nop.w
   14900:	34b7b092 	.word	0x34b7b092
   14904:	00000000 	.word	0x00000000
   14908:	3437b092 	.word	0x3437b092
   1490c:	00014991 	.word	0x00014991
   14910:	00013885 	.word	0x00013885

00014914 <dw1000_mac_init>:
{
   14914:	b530      	push	{r4, r5, lr}
   14916:	b083      	sub	sp, #12
   14918:	4604      	mov	r4, r0
    dw1000_mac_config(inst, config);
   1491a:	f7ff fcf9 	bl	14310 <dw1000_mac_config>
    dw1000_tasks_init(inst);
   1491e:	4620      	mov	r0, r4
   14920:	f7ff ffba 	bl	14898 <dw1000_tasks_init>
        int rc = stats_init(
   14924:	f504 65b8 	add.w	r5, r4, #1472	; 0x5c0
   14928:	220a      	movs	r2, #10
   1492a:	9200      	str	r2, [sp, #0]
   1492c:	4b0d      	ldr	r3, [pc, #52]	; (14964 <dw1000_mac_init+0x50>)
   1492e:	2104      	movs	r1, #4
   14930:	4628      	mov	r0, r5
   14932:	f7fa fef9 	bl	f728 <stats_init>
        assert(rc == 0);
   14936:	b940      	cbnz	r0, 1494a <dw1000_mac_init+0x36>
        rc = stats_register("mac", STATS_HDR(inst->stat));
   14938:	4629      	mov	r1, r5
   1493a:	480b      	ldr	r0, [pc, #44]	; (14968 <dw1000_mac_init+0x54>)
   1493c:	f7fa ff7e 	bl	f83c <stats_register>
        assert(rc == 0);
   14940:	b948      	cbnz	r0, 14956 <dw1000_mac_init+0x42>
}
   14942:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   14946:	b003      	add	sp, #12
   14948:	bd30      	pop	{r4, r5, pc}
        assert(rc == 0);
   1494a:	2300      	movs	r3, #0
   1494c:	461a      	mov	r2, r3
   1494e:	4619      	mov	r1, r3
   14950:	4618      	mov	r0, r3
   14952:	f7f4 faff 	bl	8f54 <__assert_func>
        assert(rc == 0);
   14956:	2300      	movs	r3, #0
   14958:	461a      	mov	r2, r3
   1495a:	4619      	mov	r1, r3
   1495c:	4618      	mov	r0, r3
   1495e:	f7f4 faf9 	bl	8f54 <__assert_func>
   14962:	bf00      	nop
   14964:	00022a48 	.word	0x00022a48
   14968:	0002298c 	.word	0x0002298c

0001496c <dw1000_ic_and_host_ptrs_equal>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return uint8_t 1 = host and ic pointers match, 0 otherwise
 */
uint8_t
dw1000_ic_and_host_ptrs_equal(dw1000_dev_instance_t * inst)
{
   1496c:	b508      	push	{r3, lr}
    uint8_t b = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t));
   1496e:	2301      	movs	r3, #1
   14970:	2203      	movs	r2, #3
   14972:	210f      	movs	r1, #15
   14974:	f7fd fdf2 	bl	1255c <dw1000_read_reg>
   14978:	b2c0      	uxtb	r0, r0
    /* Check where the receiver is at, and if it's in the same buffer as the host */
    return (uint8_t)((b & (SYS_STATUS_ICRBP >> 24)) == ((b & (SYS_STATUS_HSRBP >> 24)) << 1));
   1497a:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   1497e:	09c0      	lsrs	r0, r0, #7
   14980:	f080 0001 	eor.w	r0, r0, #1
}
   14984:	f000 0001 	and.w	r0, r0, #1
   14988:	bd08      	pop	{r3, pc}
   1498a:	0000      	movs	r0, r0
   1498c:	0000      	movs	r0, r0
	...

00014990 <dw1000_interrupt_ev_cb>:
 * @return void
 *
 */
static void
dw1000_interrupt_ev_cb(struct dpl_event *ev)
{
   14990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14994:	b085      	sub	sp, #20
   14996:	4606      	mov	r6, r0
    return ev->ev.ev_arg;
   14998:	6884      	ldr	r4, [r0, #8]
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1499a:	f104 0734 	add.w	r7, r4, #52	; 0x34
   1499e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   149a2:	4638      	mov	r0, r7
   149a4:	f7f5 fa1a 	bl	9ddc <os_sem_pend>
    uint16_t finfo;
    struct uwb_mac_interface * cbs = NULL;
    dw1000_dev_instance_t * inst = dpl_event_get_arg(ev);
    dpl_error_t err = dpl_sem_pend(&inst->uwb_dev.irq_sem,  DPL_TIMEOUT_NEVER);
    if (err != DPL_OK) {
   149a8:	b1b0      	cbz	r0, 149d8 <dw1000_interrupt_ev_cb+0x48>
        inst->uwb_dev.status.sem_error = 1;
   149aa:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   149ae:	f043 0304 	orr.w	r3, r3, #4
   149b2:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    /* Check for possibly missed interrupts occuring whilst we were looking at this one
     * NOTE: Because the interrupt is edge based we will only register an event if the irq pin
     * goes low and then comes back up. If the pin is high now and no event is queued just after
     * swapping rx-buffers this means we didn't have time to finish reading the data
     * from the previous irq until a new one arrived -> queue another irq event for the task */
    if (hal_gpio_read(inst->irq_pin) && !dpl_event_is_queued(ev)) {
   149b6:	f894 0565 	ldrb.w	r0, [r4, #1381]	; 0x565
   149ba:	f7f4 fa28 	bl	8e0e <hal_gpio_read>
   149be:	b118      	cbz	r0, 149c8 <dw1000_interrupt_ev_cb+0x38>
    return ev->ev.ev_queued;
   149c0:	7833      	ldrb	r3, [r6, #0]
   149c2:	2b00      	cmp	r3, #0
   149c4:	f000 8509 	beq.w	153da <dw1000_interrupt_ev_cb+0xa4a>
        }
#endif
    }

#if MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)
    if(!inst->sys_status_bt_lock) {
   149c8:	f894 3dfe 	ldrb.w	r3, [r4, #3582]	; 0xdfe
   149cc:	2b00      	cmp	r3, #0
   149ce:	f000 851c 	beq.w	1540a <dw1000_interrupt_ev_cb+0xa7a>
        DW1000_SYS_STATUS_BT_PTR(inst).utime_end = dpl_cputime_get32();
    }
#endif
}
   149d2:	b005      	add	sp, #20
   149d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uint32_t irq_utime = dpl_cputime_get32();
   149d8:	f7f7 ffd2 	bl	c980 <dpl_cputime_get32>
   149dc:	4605      	mov	r5, r0
        inst->sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 0, sizeof(uint32_t));
   149de:	2304      	movs	r3, #4
   149e0:	2200      	movs	r2, #0
   149e2:	210f      	movs	r1, #15
   149e4:	4620      	mov	r0, r4
   149e6:	f7fd fdb9 	bl	1255c <dw1000_read_reg>
   149ea:	f8c4 0594 	str.w	r0, [r4, #1428]	; 0x594
        if (!(inst->sys_status & (SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR))) {
   149ee:	4bc5      	ldr	r3, [pc, #788]	; (14d04 <dw1000_interrupt_ev_cb+0x374>)
   149f0:	4003      	ands	r3, r0
   149f2:	2b00      	cmp	r3, #0
   149f4:	f000 816f 	beq.w	14cd6 <dw1000_interrupt_ev_cb+0x346>
        if(!inst->sys_status_bt_lock) {
   149f8:	f894 3dfe 	ldrb.w	r3, [r4, #3582]	; 0xdfe
   149fc:	b9c3      	cbnz	r3, 14a30 <dw1000_interrupt_ev_cb+0xa0>
            DW1000_SYS_STATUS_BT_ADD(inst, inst->sys_status, irq_utime);
   149fe:	f8b4 3dfc 	ldrh.w	r3, [r4, #3580]	; 0xdfc
   14a02:	3301      	adds	r3, #1
   14a04:	b29b      	uxth	r3, r3
   14a06:	f8a4 3dfc 	strh.w	r3, [r4, #3580]	; 0xdfc
   14a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14a0e:	f8d4 0594 	ldr.w	r0, [r4, #1428]	; 0x594
   14a12:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   14a16:	2200      	movs	r2, #0
   14a18:	f8c3 25fc 	str.w	r2, [r3, #1532]	; 0x5fc
   14a1c:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
   14a20:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
   14a24:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
   14a28:	f8c3 55fc 	str.w	r5, [r3, #1532]	; 0x5fc
   14a2c:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
    inst->uwb_dev.status.rx_error = (inst->sys_status & SYS_STATUS_ALL_RX_ERR) !=0;
   14a30:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
   14a34:	4ab4      	ldr	r2, [pc, #720]	; (14d08 <dw1000_interrupt_ev_cb+0x378>)
   14a36:	401a      	ands	r2, r3
   14a38:	3a00      	subs	r2, #0
   14a3a:	bf18      	it	ne
   14a3c:	2201      	movne	r2, #1
   14a3e:	f894 1508 	ldrb.w	r1, [r4, #1288]	; 0x508
   14a42:	f362 1186 	bfi	r1, r2, #6, #1
   14a46:	f884 1508 	strb.w	r1, [r4, #1288]	; 0x508
    inst->uwb_dev.status.rx_error |= (inst->sys_status_hi & (SYS_STATUS_RXRSCS>>32)) != 0;
   14a4a:	f894 1598 	ldrb.w	r1, [r4, #1432]	; 0x598
   14a4e:	f001 0001 	and.w	r0, r1, #1
   14a52:	4302      	orrs	r2, r0
   14a54:	f894 0508 	ldrb.w	r0, [r4, #1288]	; 0x508
   14a58:	f362 1086 	bfi	r0, r2, #6, #1
   14a5c:	f884 0508 	strb.w	r0, [r4, #1288]	; 0x508
    inst->uwb_dev.status.rx_autoframefilt_rej = (inst->sys_status & SYS_STATUS_AFFREJ) !=0;
   14a60:	f3c3 7040 	ubfx	r0, r3, #29, #1
   14a64:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   14a68:	f360 0200 	bfi	r2, r0, #0, #1
   14a6c:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    inst->uwb_dev.status.rx_timeout_error = (inst->sys_status & SYS_STATUS_ALL_RX_TO) !=0;
   14a70:	f413 1f08 	tst.w	r3, #2228224	; 0x220000
   14a74:	bf14      	ite	ne
   14a76:	2001      	movne	r0, #1
   14a78:	2000      	moveq	r0, #0
   14a7a:	f894 2508 	ldrb.w	r2, [r4, #1288]	; 0x508
   14a7e:	f360 12c7 	bfi	r2, r0, #7, #1
   14a82:	f884 2508 	strb.w	r2, [r4, #1288]	; 0x508
    inst->uwb_dev.status.lde_error = (inst->sys_status & SYS_STATUS_LDEDONE) == 0;
   14a86:	f413 6f80 	tst.w	r3, #1024	; 0x400
   14a8a:	bf0c      	ite	eq
   14a8c:	2001      	moveq	r0, #1
   14a8e:	2000      	movne	r0, #0
   14a90:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   14a94:	f360 0282 	bfi	r2, r0, #2, #1
   14a98:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    inst->uwb_dev.status.overrun_error = (inst->sys_status & SYS_STATUS_RXOVRR) != 0;
   14a9c:	f3c3 5000 	ubfx	r0, r3, #20, #1
   14aa0:	f894 250a 	ldrb.w	r2, [r4, #1290]	; 0x50a
   14aa4:	f360 0282 	bfi	r2, r0, #2, #1
   14aa8:	f884 250a 	strb.w	r2, [r4, #1290]	; 0x50a
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
   14aac:	f3c3 7000 	ubfx	r0, r3, #28, #1
   14ab0:	f894 2508 	ldrb.w	r2, [r4, #1288]	; 0x508
   14ab4:	f360 1245 	bfi	r2, r0, #5, #1
   14ab8:	f884 2508 	strb.w	r2, [r4, #1288]	; 0x508
    inst->uwb_dev.status.autoack_triggered = (inst->sys_status & SYS_STATUS_AAT) != 0;
   14abc:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   14ac0:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   14ac4:	f360 1286 	bfi	r2, r0, #6, #1
   14ac8:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    inst->uwb_dev.status.rx_prej = (inst->sys_status_hi & (SYS_STATUS_RXPREJ>>32)) != 0;
   14acc:	f3c1 0140 	ubfx	r1, r1, #1, #1
   14ad0:	b2d2      	uxtb	r2, r2
   14ad2:	f361 0241 	bfi	r2, r1, #1, #1
   14ad6:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
   14ada:	f8b4 256e 	ldrh.w	r2, [r4, #1390]	; 0x56e
    if(dpl_sem_get_count(&inst->tx_sem) == 0 && !(
   14ade:	b922      	cbnz	r2, 14aea <dw1000_interrupt_ev_cb+0x15a>
   14ae0:	f003 0390 	and.w	r3, r3, #144	; 0x90
   14ae4:	2b10      	cmp	r3, #16
   14ae6:	f040 80ff 	bne.w	14ce8 <dw1000_interrupt_ev_cb+0x358>
    if((inst->sys_status & SYS_STATUS_RXFCG)){
   14aea:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
   14aee:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   14af2:	f000 80b7 	beq.w	14c64 <dw1000_interrupt_ev_cb+0x2d4>
        MAC_STATS_INC(DFR_cnt);
   14af6:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
   14afa:	3301      	adds	r3, #1
   14afc:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
        if (inst->uwb_dev.status.overrun_error){
   14b00:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   14b04:	f013 0f04 	tst.w	r3, #4
   14b08:	f040 8100 	bne.w	14d0c <dw1000_interrupt_ev_cb+0x37c>
        if (inst->uwb_dev.config.rxauto_enable == 0 && inst->uwb_dev.config.dblbuffon_enabled) {
   14b0c:	f8b4 3530 	ldrh.w	r3, [r4, #1328]	; 0x530
   14b10:	f403 7388 	and.w	r3, r3, #272	; 0x110
   14b14:	2b10      	cmp	r3, #16
   14b16:	f000 8138 	beq.w	14d8a <dw1000_interrupt_ev_cb+0x3fa>
        finfo = dw1000_read_reg(inst, RX_FINFO_ID, RX_FINFO_OFFSET, sizeof(uint16_t));
   14b1a:	2302      	movs	r3, #2
   14b1c:	2200      	movs	r2, #0
   14b1e:	2110      	movs	r1, #16
   14b20:	4620      	mov	r0, r4
   14b22:	f7fd fd1b 	bl	1255c <dw1000_read_reg>
        inst->uwb_dev.frame_len = (finfo & RX_FINFO_RXFL_MASK_1023);
   14b26:	f3c0 0009 	ubfx	r0, r0, #0, #10
   14b2a:	f8a4 04e2 	strh.w	r0, [r4, #1250]	; 0x4e2
        if (inst->uwb_dev.frame_len) inst->uwb_dev.frame_len -= 2;
   14b2e:	b110      	cbz	r0, 14b36 <dw1000_interrupt_ev_cb+0x1a6>
   14b30:	3802      	subs	r0, #2
   14b32:	f8a4 04e2 	strh.w	r0, [r4, #1250]	; 0x4e2
                       (inst->uwb_dev.frame_len < inst->uwb_dev.rxbuf_size) ?
   14b36:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
   14b3a:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
        dw1000_read_rx(inst, inst->uwb_dev.rxbuf, 0,
   14b3e:	4293      	cmp	r3, r2
   14b40:	bf28      	it	cs
   14b42:	4613      	movcs	r3, r2
   14b44:	2200      	movs	r2, #0
   14b46:	f8d4 14fc 	ldr.w	r1, [r4, #1276]	; 0x4fc
   14b4a:	4620      	mov	r0, r4
   14b4c:	f7fe feac 	bl	138a8 <dw1000_read_rx>
        inst->uwb_dev.fctrl = ((uint16_t)inst->uwb_dev.rxbuf[1]<<8) | inst->uwb_dev.rxbuf[0];
   14b50:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
   14b54:	7851      	ldrb	r1, [r2, #1]
   14b56:	7813      	ldrb	r3, [r2, #0]
   14b58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   14b5c:	f8a4 34e0 	strh.w	r3, [r4, #1248]	; 0x4e0
        if(!inst->sys_status_bt_lock) {
   14b60:	f894 2dfe 	ldrb.w	r2, [r4, #3582]	; 0xdfe
   14b64:	b93a      	cbnz	r2, 14b76 <dw1000_interrupt_ev_cb+0x1e6>
            DW1000_SYS_STATUS_BT_FCTRL(inst, inst->uwb_dev.fctrl);
   14b66:	f8b4 2dfc 	ldrh.w	r2, [r4, #3580]	; 0xdfc
   14b6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   14b6e:	3260      	adds	r2, #96	; 0x60
   14b70:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   14b74:	80d3      	strh	r3, [r2, #6]
        if (inst->uwb_dev.status.lde_error) // retest lde_error condition
   14b76:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   14b7a:	f013 0f04 	tst.w	r3, #4
   14b7e:	f040 8126 	bne.w	14dce <dw1000_interrupt_ev_cb+0x43e>
        if (inst->uwb_dev.status.lde_error) // LDE error or LDE late
   14b82:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   14b86:	f013 0f04 	tst.w	r3, #4
   14b8a:	d004      	beq.n	14b96 <dw1000_interrupt_ev_cb+0x206>
            MAC_STATS_INC(LDE_err);
   14b8c:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
   14b90:	3301      	adds	r3, #1
   14b92:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec
 *
 * @return time
 */

inline uint64_t dw1000_read_rxtime(struct _dw1000_dev_instance_t * inst){
    uint64_t time = (uint64_t)  dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   14b96:	2305      	movs	r3, #5
   14b98:	2200      	movs	r2, #0
   14b9a:	2115      	movs	r1, #21
   14b9c:	4620      	mov	r0, r4
   14b9e:	f7fd fcdd 	bl	1255c <dw1000_read_reg>
   14ba2:	b2cb      	uxtb	r3, r1
        inst->uwb_dev.rxtimestamp = dw1000_read_rxtime(inst);
   14ba4:	f8c4 04e8 	str.w	r0, [r4, #1256]	; 0x4e8
   14ba8:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
        if (inst->control.abs_timeout) {
   14bac:	f894 15bd 	ldrb.w	r1, [r4, #1469]	; 0x5bd
   14bb0:	f011 0f08 	tst.w	r1, #8
   14bb4:	f040 811d 	bne.w	14df2 <dw1000_interrupt_ev_cb+0x462>
        if (inst->uwb_dev.status.autoack_triggered) {
   14bb8:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   14bbc:	f013 0f40 	tst.w	r3, #64	; 0x40
   14bc0:	d01c      	beq.n	14bfc <dw1000_interrupt_ev_cb+0x26c>
            if ((inst->uwb_dev.fctrl & UWB_FCTRL_ACK_REQUESTED) == 0){
   14bc2:	f8b4 34e0 	ldrh.w	r3, [r4, #1248]	; 0x4e0
   14bc6:	f013 0f20 	tst.w	r3, #32
   14bca:	f040 8117 	bne.w	14dfc <dw1000_interrupt_ev_cb+0x46c>
                dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_AAT, sizeof(uint8_t));
   14bce:	2301      	movs	r3, #1
   14bd0:	9302      	str	r3, [sp, #8]
   14bd2:	2208      	movs	r2, #8
   14bd4:	2300      	movs	r3, #0
   14bd6:	e9cd 2300 	strd	r2, r3, [sp]
   14bda:	2200      	movs	r2, #0
   14bdc:	210f      	movs	r1, #15
   14bde:	4620      	mov	r0, r4
   14be0:	f7fd fd2c 	bl	1263c <dw1000_write_reg>
                inst->sys_status &= ~SYS_STATUS_AAT;
   14be4:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
   14be8:	f023 0308 	bic.w	r3, r3, #8
   14bec:	f8c4 3594 	str.w	r3, [r4, #1428]	; 0x594
                inst->uwb_dev.status.autoack_triggered = 0;
   14bf0:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   14bf4:	f36f 1386 	bfc	r3, #6, #1
   14bf8:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
        if(inst->uwb_dev.config.rxdiag_enable)
   14bfc:	f894 3530 	ldrb.w	r3, [r4, #1328]	; 0x530
   14c00:	f013 0f40 	tst.w	r3, #64	; 0x40
   14c04:	f040 8109 	bne.w	14e1a <dw1000_interrupt_ev_cb+0x48a>
        if (inst->uwb_dev.config.dblbuffon_enabled) {
   14c08:	f894 3530 	ldrb.w	r3, [r4, #1328]	; 0x530
   14c0c:	f013 0f10 	tst.w	r3, #16
   14c10:	f000 8190 	beq.w	14f34 <dw1000_interrupt_ev_cb+0x5a4>
            if (inst->uwb_dev.config.rxttcko_enable) {
   14c14:	f013 0f80 	tst.w	r3, #128	; 0x80
   14c18:	f040 8105 	bne.w	14e26 <dw1000_interrupt_ev_cb+0x496>
            inst->uwb_dev.status.overrun_error = dw1000_checkoverrun(inst);
   14c1c:	4620      	mov	r0, r4
   14c1e:	f7fe fe28 	bl	13872 <dw1000_checkoverrun>
   14c22:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   14c26:	f360 0382 	bfi	r3, r0, #2, #1
   14c2a:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
            if (inst->uwb_dev.status.overrun_error == 0) {
   14c2e:	b2db      	uxtb	r3, r3
   14c30:	f013 0f04 	tst.w	r3, #4
   14c34:	f040 813e 	bne.w	14eb4 <dw1000_interrupt_ev_cb+0x524>
                if (inst->uwb_dev.config.rxauto_enable) {
   14c38:	f894 3531 	ldrb.w	r3, [r4, #1329]	; 0x531
   14c3c:	f013 0f01 	tst.w	r3, #1
   14c40:	f040 80f7 	bne.w	14e32 <dw1000_interrupt_ev_cb+0x4a2>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0b1, sizeof(uint8_t));
   14c44:	2301      	movs	r3, #1
   14c46:	9302      	str	r3, [sp, #8]
   14c48:	2201      	movs	r2, #1
   14c4a:	2300      	movs	r3, #0
   14c4c:	e9cd 2300 	strd	r2, r3, [sp]
   14c50:	2203      	movs	r2, #3
   14c52:	210d      	movs	r1, #13
   14c54:	4620      	mov	r0, r4
   14c56:	f7fd fcf1 	bl	1263c <dw1000_write_reg>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   14c5a:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
   14c5e:	2d00      	cmp	r5, #0
   14c60:	f040 81b8 	bne.w	14fd4 <dw1000_interrupt_ev_cb+0x644>
    if(inst->sys_status & SYS_STATUS_TXFRB) {
   14c64:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
   14c68:	f013 0f10 	tst.w	r3, #16
   14c6c:	f040 81b9 	bne.w	14fe2 <dw1000_interrupt_ev_cb+0x652>
    if(inst->sys_status & SYS_STATUS_TXFRS) {
   14c70:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
   14c74:	f013 0f80 	tst.w	r3, #128	; 0x80
   14c78:	f040 81d2 	bne.w	15020 <dw1000_interrupt_ev_cb+0x690>
    if(inst->uwb_dev.status.txbuf_error){
   14c7c:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   14c80:	f013 0f20 	tst.w	r3, #32
   14c84:	f040 8229 	bne.w	150da <dw1000_interrupt_ev_cb+0x74a>
    if(inst->sys_status & SYS_STATUS_LDEERR){
   14c88:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
   14c8c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   14c90:	f040 8246 	bne.w	15120 <dw1000_interrupt_ev_cb+0x790>
    if(inst->uwb_dev.status.rx_timeout_error){
   14c94:	f994 3508 	ldrsb.w	r3, [r4, #1288]	; 0x508
   14c98:	2b00      	cmp	r3, #0
   14c9a:	f2c0 8253 	blt.w	15144 <dw1000_interrupt_ev_cb+0x7b4>
    if(inst->uwb_dev.status.rx_error) {
   14c9e:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   14ca2:	f013 0f40 	tst.w	r3, #64	; 0x40
   14ca6:	f040 82bc 	bne.w	15222 <dw1000_interrupt_ev_cb+0x892>
    if(inst->sys_status & SYS_STATUS_SLP2INIT){
   14caa:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
   14cae:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   14cb2:	f040 833a 	bne.w	1532a <dw1000_interrupt_ev_cb+0x99a>
    if(inst->sys_status & SYS_STATUS_CLKPLL_LL){
   14cb6:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
   14cba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   14cbe:	f040 8340 	bne.w	15342 <dw1000_interrupt_ev_cb+0x9b2>
    if(inst->sys_status & SYS_MASK_MCPLOCK){
   14cc2:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
   14cc6:	f013 0f02 	tst.w	r3, #2
   14cca:	f040 834c 	bne.w	15366 <dw1000_interrupt_ev_cb+0x9d6>
    return (dpl_error_t)os_sem_release(&sem->sem);
   14cce:	4638      	mov	r0, r7
   14cd0:	f7f5 f852 	bl	9d78 <os_sem_release>
   14cd4:	e66f      	b.n	149b6 <dw1000_interrupt_ev_cb+0x26>
            inst->sys_status_hi = dw1000_read_reg(inst, SYS_STATUS_ID, 4, sizeof(uint8_t));
   14cd6:	2301      	movs	r3, #1
   14cd8:	2204      	movs	r2, #4
   14cda:	210f      	movs	r1, #15
   14cdc:	4620      	mov	r0, r4
   14cde:	f7fd fc3d 	bl	1255c <dw1000_read_reg>
   14ce2:	f884 0598 	strb.w	r0, [r4, #1432]	; 0x598
   14ce6:	e687      	b.n	149f8 <dw1000_interrupt_ev_cb+0x68>
   14ce8:	f504 60ad 	add.w	r0, r4, #1384	; 0x568
   14cec:	f7f5 f844 	bl	9d78 <os_sem_release>
        assert(err == DPL_OK);
   14cf0:	2800      	cmp	r0, #0
   14cf2:	f43f aefa 	beq.w	14aea <dw1000_interrupt_ev_cb+0x15a>
   14cf6:	2300      	movs	r3, #0
   14cf8:	461a      	mov	r2, r3
   14cfa:	4619      	mov	r1, r3
   14cfc:	4618      	mov	r0, r3
   14cfe:	f7f4 f929 	bl	8f54 <__assert_func>
   14d02:	bf00      	nop
   14d04:	3437b092 	.word	0x3437b092
   14d08:	24119000 	.word	0x24119000
            MAC_STATS_INC(ROV_err);
   14d0c:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
   14d10:	3301      	adds	r3, #1
   14d12:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
            dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_RXOVRR |SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR), sizeof(uint32_t));
   14d16:	2304      	movs	r3, #4
   14d18:	9302      	str	r3, [sp, #8]
   14d1a:	4ac0      	ldr	r2, [pc, #768]	; (1501c <dw1000_interrupt_ev_cb+0x68c>)
   14d1c:	2300      	movs	r3, #0
   14d1e:	e9cd 2300 	strd	r2, r3, [sp]
   14d22:	2200      	movs	r2, #0
   14d24:	210f      	movs	r1, #15
   14d26:	4620      	mov	r0, r4
   14d28:	f7fd fc88 	bl	1263c <dw1000_write_reg>
            dw1000_phy_forcetrxoff(inst);
   14d2c:	4620      	mov	r0, r4
   14d2e:	f000 ff3b 	bl	15ba8 <dw1000_phy_forcetrxoff>
            dw1000_phy_rx_reset(inst);
   14d32:	4620      	mov	r0, r4
   14d34:	f000 ff03 	bl	15b3e <dw1000_phy_rx_reset>
    inst->control.start_rx_syncbuf_enabled = 1;
   14d38:	f894 35bc 	ldrb.w	r3, [r4, #1468]	; 0x5bc
   14d3c:	f043 0310 	orr.w	r3, r3, #16
   14d40:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   14d44:	2301      	movs	r3, #1
   14d46:	2203      	movs	r2, #3
   14d48:	210f      	movs	r1, #15
   14d4a:	4620      	mov	r0, r4
   14d4c:	f7fd fc06 	bl	1255c <dw1000_read_reg>
   14d50:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   14d52:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   14d56:	f010 0f80 	tst.w	r0, #128	; 0x80
   14d5a:	d10a      	bne.n	14d72 <dw1000_interrupt_ev_cb+0x3e2>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   14d5c:	2201      	movs	r2, #1
   14d5e:	9202      	str	r2, [sp, #8]
   14d60:	2001      	movs	r0, #1
   14d62:	2100      	movs	r1, #0
   14d64:	e9cd 0100 	strd	r0, r1, [sp]
   14d68:	210d      	movs	r1, #13
   14d6a:	4620      	mov	r0, r4
   14d6c:	f7fd fc66 	bl	1263c <dw1000_write_reg>
            goto early_exit;
   14d70:	e7ad      	b.n	14cce <dw1000_interrupt_ev_cb+0x33e>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   14d72:	2301      	movs	r3, #1
   14d74:	9302      	str	r3, [sp, #8]
   14d76:	2201      	movs	r2, #1
   14d78:	2300      	movs	r3, #0
   14d7a:	e9cd 2300 	strd	r2, r3, [sp]
   14d7e:	2203      	movs	r2, #3
   14d80:	210d      	movs	r1, #13
   14d82:	4620      	mov	r0, r4
   14d84:	f7fd fc5a 	bl	1263c <dw1000_write_reg>
   14d88:	e7e8      	b.n	14d5c <dw1000_interrupt_ev_cb+0x3cc>
            if (inst->control.rxauto_disable == false && !inst->uwb_dev.status.autoack_triggered) {
   14d8a:	f894 35bd 	ldrb.w	r3, [r4, #1469]	; 0x5bd
   14d8e:	f013 0f04 	tst.w	r3, #4
   14d92:	d104      	bne.n	14d9e <dw1000_interrupt_ev_cb+0x40e>
   14d94:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   14d98:	f013 0f40 	tst.w	r3, #64	; 0x40
   14d9c:	d006      	beq.n	14dac <dw1000_interrupt_ev_cb+0x41c>
            inst->control.rxauto_disable = false;
   14d9e:	f894 35bd 	ldrb.w	r3, [r4, #1469]	; 0x5bd
   14da2:	f36f 0382 	bfc	r3, #2, #1
   14da6:	f884 35bd 	strb.w	r3, [r4, #1469]	; 0x5bd
   14daa:	e6b6      	b.n	14b1a <dw1000_interrupt_ev_cb+0x18a>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   14dac:	2201      	movs	r2, #1
   14dae:	9202      	str	r2, [sp, #8]
   14db0:	2001      	movs	r0, #1
   14db2:	2100      	movs	r1, #0
   14db4:	e9cd 0100 	strd	r0, r1, [sp]
   14db8:	210d      	movs	r1, #13
   14dba:	4620      	mov	r0, r4
   14dbc:	f7fd fc3e 	bl	1263c <dw1000_write_reg>
                inst->uwb_dev.status.rx_restarted = 1;
   14dc0:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   14dc4:	f043 0308 	orr.w	r3, r3, #8
   14dc8:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
   14dcc:	e7e7      	b.n	14d9e <dw1000_interrupt_ev_cb+0x40e>
            inst->uwb_dev.status.lde_error = (dw1000_read_reg(inst, SYS_STATUS_ID, 1, sizeof(uint8_t))  & (SYS_STATUS_LDEDONE >> 8)) == 0;
   14dce:	2301      	movs	r3, #1
   14dd0:	461a      	mov	r2, r3
   14dd2:	210f      	movs	r1, #15
   14dd4:	4620      	mov	r0, r4
   14dd6:	f7fd fbc1 	bl	1255c <dw1000_read_reg>
   14dda:	f010 0f04 	tst.w	r0, #4
   14dde:	bf0c      	ite	eq
   14de0:	2201      	moveq	r2, #1
   14de2:	2200      	movne	r2, #0
   14de4:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   14de8:	f362 0382 	bfi	r3, r2, #2, #1
   14dec:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
   14df0:	e6c7      	b.n	14b82 <dw1000_interrupt_ev_cb+0x1f2>
            update_rx_window_timeout(inst, inst->uwb_dev.rxtimestamp);
   14df2:	4602      	mov	r2, r0
   14df4:	4620      	mov	r0, r4
   14df6:	f7ff f84f 	bl	13e98 <update_rx_window_timeout>
   14dfa:	e6dd      	b.n	14bb8 <dw1000_interrupt_ev_cb+0x228>
                dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   14dfc:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
   14e00:	0a1b      	lsrs	r3, r3, #8
   14e02:	2201      	movs	r2, #1
   14e04:	9202      	str	r2, [sp, #8]
   14e06:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
   14e0a:	9300      	str	r3, [sp, #0]
   14e0c:	2300      	movs	r3, #0
   14e0e:	9301      	str	r3, [sp, #4]
   14e10:	210f      	movs	r1, #15
   14e12:	4620      	mov	r0, r4
   14e14:	f7fd fc12 	bl	1263c <dw1000_write_reg>
   14e18:	e6f0      	b.n	14bfc <dw1000_interrupt_ev_cb+0x26c>
            dw1000_read_rxdiag(inst, &inst->rxdiag);
   14e1a:	f504 61b5 	add.w	r1, r4, #1448	; 0x5a8
   14e1e:	4620      	mov	r0, r4
   14e20:	f7ff fd1a 	bl	14858 <dw1000_read_rxdiag>
   14e24:	e6f0      	b.n	14c08 <dw1000_interrupt_ev_cb+0x278>
                inst->uwb_dev.rxttcko = dw1000_read_time_tracking_offset(inst);
   14e26:	4620      	mov	r0, r4
   14e28:	f7ff fcea 	bl	14800 <dw1000_read_time_tracking_offset>
   14e2c:	f8c4 04f4 	str.w	r0, [r4, #1268]	; 0x4f4
   14e30:	e6f4      	b.n	14c1c <dw1000_interrupt_ev_cb+0x28c>
                    if (dw1000_ic_and_host_ptrs_equal(inst)) {
   14e32:	4620      	mov	r0, r4
   14e34:	f7ff fd9a 	bl	1496c <dw1000_ic_and_host_ptrs_equal>
   14e38:	b368      	cbz	r0, 14e96 <dw1000_interrupt_ev_cb+0x506>
                        uint8_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 1 , sizeof(uint8_t));
   14e3a:	2301      	movs	r3, #1
   14e3c:	461a      	mov	r2, r3
   14e3e:	210e      	movs	r1, #14
   14e40:	4620      	mov	r0, r4
   14e42:	f7fd fb8b 	bl	1255c <dw1000_read_reg>
   14e46:	4680      	mov	r8, r0
                        dw1000_write_reg(inst, SYS_MASK_ID, 1, 0, sizeof(uint8_t));
   14e48:	2501      	movs	r5, #1
   14e4a:	9502      	str	r5, [sp, #8]
   14e4c:	2200      	movs	r2, #0
   14e4e:	2300      	movs	r3, #0
   14e50:	e9cd 2300 	strd	r2, r3, [sp]
   14e54:	462a      	mov	r2, r5
   14e56:	210e      	movs	r1, #14
   14e58:	4620      	mov	r0, r4
   14e5a:	f7fd fbef 	bl	1263c <dw1000_write_reg>
                        dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   14e5e:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
   14e62:	0a1b      	lsrs	r3, r3, #8
   14e64:	9502      	str	r5, [sp, #8]
   14e66:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
   14e6a:	f04f 0900 	mov.w	r9, #0
   14e6e:	9300      	str	r3, [sp, #0]
   14e70:	f8cd 9004 	str.w	r9, [sp, #4]
   14e74:	462a      	mov	r2, r5
   14e76:	210f      	movs	r1, #15
   14e78:	4620      	mov	r0, r4
   14e7a:	f7fd fbdf 	bl	1263c <dw1000_write_reg>
                        dw1000_write_reg(inst, SYS_MASK_ID, 1, mask, sizeof(uint8_t));
   14e7e:	9502      	str	r5, [sp, #8]
   14e80:	f008 03ff 	and.w	r3, r8, #255	; 0xff
   14e84:	9300      	str	r3, [sp, #0]
   14e86:	f8cd 9004 	str.w	r9, [sp, #4]
   14e8a:	462a      	mov	r2, r5
   14e8c:	210e      	movs	r1, #14
   14e8e:	4620      	mov	r0, r4
   14e90:	f7fd fbd4 	bl	1263c <dw1000_write_reg>
   14e94:	e6d6      	b.n	14c44 <dw1000_interrupt_ev_cb+0x2b4>
                        dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   14e96:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
   14e9a:	0a1b      	lsrs	r3, r3, #8
   14e9c:	2201      	movs	r2, #1
   14e9e:	9202      	str	r2, [sp, #8]
   14ea0:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
   14ea4:	9300      	str	r3, [sp, #0]
   14ea6:	2300      	movs	r3, #0
   14ea8:	9301      	str	r3, [sp, #4]
   14eaa:	210f      	movs	r1, #15
   14eac:	4620      	mov	r0, r4
   14eae:	f7fd fbc5 	bl	1263c <dw1000_write_reg>
   14eb2:	e6c7      	b.n	14c44 <dw1000_interrupt_ev_cb+0x2b4>
                MAC_STATS_INC(ROV_err);
   14eb4:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
   14eb8:	3301      	adds	r3, #1
   14eba:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
                dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_RXOVRR, sizeof(uint32_t));
   14ebe:	2304      	movs	r3, #4
   14ec0:	9302      	str	r3, [sp, #8]
   14ec2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   14ec6:	2300      	movs	r3, #0
   14ec8:	e9cd 2300 	strd	r2, r3, [sp]
   14ecc:	2200      	movs	r2, #0
   14ece:	210f      	movs	r1, #15
   14ed0:	4620      	mov	r0, r4
   14ed2:	f7fd fbb3 	bl	1263c <dw1000_write_reg>
                dw1000_phy_forcetrxoff(inst);
   14ed6:	4620      	mov	r0, r4
   14ed8:	f000 fe66 	bl	15ba8 <dw1000_phy_forcetrxoff>
                dw1000_phy_rx_reset(inst);
   14edc:	4620      	mov	r0, r4
   14ede:	f000 fe2e 	bl	15b3e <dw1000_phy_rx_reset>
    inst->control.start_rx_syncbuf_enabled = 1;
   14ee2:	f894 35bc 	ldrb.w	r3, [r4, #1468]	; 0x5bc
   14ee6:	f043 0310 	orr.w	r3, r3, #16
   14eea:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   14eee:	2301      	movs	r3, #1
   14ef0:	2203      	movs	r2, #3
   14ef2:	210f      	movs	r1, #15
   14ef4:	4620      	mov	r0, r4
   14ef6:	f7fd fb31 	bl	1255c <dw1000_read_reg>
   14efa:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   14efc:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   14f00:	f010 0f80 	tst.w	r0, #128	; 0x80
   14f04:	d10a      	bne.n	14f1c <dw1000_interrupt_ev_cb+0x58c>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   14f06:	2201      	movs	r2, #1
   14f08:	9202      	str	r2, [sp, #8]
   14f0a:	2001      	movs	r0, #1
   14f0c:	2100      	movs	r1, #0
   14f0e:	e9cd 0100 	strd	r0, r1, [sp]
   14f12:	210d      	movs	r1, #13
   14f14:	4620      	mov	r0, r4
   14f16:	f7fd fb91 	bl	1263c <dw1000_write_reg>
   14f1a:	e69e      	b.n	14c5a <dw1000_interrupt_ev_cb+0x2ca>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   14f1c:	2301      	movs	r3, #1
   14f1e:	9302      	str	r3, [sp, #8]
   14f20:	2201      	movs	r2, #1
   14f22:	2300      	movs	r3, #0
   14f24:	e9cd 2300 	strd	r2, r3, [sp]
   14f28:	2203      	movs	r2, #3
   14f2a:	210d      	movs	r1, #13
   14f2c:	4620      	mov	r0, r4
   14f2e:	f7fd fb85 	bl	1263c <dw1000_write_reg>
   14f32:	e7e8      	b.n	14f06 <dw1000_interrupt_ev_cb+0x576>
            inst->uwb_dev.carrier_integrator = dw1000_read_carrier_integrator(inst);
   14f34:	4620      	mov	r0, r4
   14f36:	f7ff fbe1 	bl	146fc <dw1000_read_carrier_integrator>
   14f3a:	f8c4 04f0 	str.w	r0, [r4, #1264]	; 0x4f0
            if(inst->uwb_dev.config.cir_enable || inst->control.cir_enable) {
   14f3e:	f894 3531 	ldrb.w	r3, [r4, #1329]	; 0x531
   14f42:	f013 0f40 	tst.w	r3, #64	; 0x40
   14f46:	d104      	bne.n	14f52 <dw1000_interrupt_ev_cb+0x5c2>
   14f48:	f894 35bd 	ldrb.w	r3, [r4, #1469]	; 0x5bd
   14f4c:	f013 0f02 	tst.w	r3, #2
   14f50:	d008      	beq.n	14f64 <dw1000_interrupt_ev_cb+0x5d4>
                if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))) {
   14f52:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
   14f56:	b9fd      	cbnz	r5, 14f98 <dw1000_interrupt_ev_cb+0x608>
                inst->control.cir_enable = false;
   14f58:	f894 35bd 	ldrb.w	r3, [r4, #1469]	; 0x5bd
   14f5c:	f36f 0341 	bfc	r3, #1, #1
   14f60:	f884 35bd 	strb.w	r3, [r4, #1469]	; 0x5bd
                             inst->sys_status & (SYS_STATUS_LDEDONE | SYS_STATUS_RXPHD | SYS_STATUS_RXDFR |
   14f64:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
            dw1000_write_reg(inst, SYS_STATUS_ID, 0,
   14f68:	2202      	movs	r2, #2
   14f6a:	9202      	str	r2, [sp, #8]
   14f6c:	f403 436c 	and.w	r3, r3, #60416	; 0xec00
   14f70:	2200      	movs	r2, #0
   14f72:	9300      	str	r3, [sp, #0]
   14f74:	9201      	str	r2, [sp, #4]
   14f76:	210f      	movs	r1, #15
   14f78:	4620      	mov	r0, r4
   14f7a:	f7fd fb5f 	bl	1263c <dw1000_write_reg>
            if (inst->control.rxauto_disable == false){
   14f7e:	f894 35bd 	ldrb.w	r3, [r4, #1469]	; 0x5bd
   14f82:	f013 0f04 	tst.w	r3, #4
   14f86:	d010      	beq.n	14faa <dw1000_interrupt_ev_cb+0x61a>
            inst->control.rxauto_disable = false;
   14f88:	f894 35bd 	ldrb.w	r3, [r4, #1469]	; 0x5bd
   14f8c:	f36f 0382 	bfc	r3, #2, #1
   14f90:	f884 35bd 	strb.w	r3, [r4, #1469]	; 0x5bd
   14f94:	e661      	b.n	14c5a <dw1000_interrupt_ev_cb+0x2ca>
                    SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next) {
   14f96:	6bad      	ldr	r5, [r5, #56]	; 0x38
   14f98:	2d00      	cmp	r5, #0
   14f9a:	d0dd      	beq.n	14f58 <dw1000_interrupt_ev_cb+0x5c8>
                        if (cbs != NULL && cbs->cir_complete_cb) {
   14f9c:	696b      	ldr	r3, [r5, #20]
   14f9e:	2b00      	cmp	r3, #0
   14fa0:	d0f9      	beq.n	14f96 <dw1000_interrupt_ev_cb+0x606>
                            if(cbs->cir_complete_cb((struct uwb_dev*)inst,cbs)) continue;
   14fa2:	4629      	mov	r1, r5
   14fa4:	4620      	mov	r0, r4
   14fa6:	4798      	blx	r3
   14fa8:	e7f5      	b.n	14f96 <dw1000_interrupt_ev_cb+0x606>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   14faa:	2201      	movs	r2, #1
   14fac:	9202      	str	r2, [sp, #8]
   14fae:	2001      	movs	r0, #1
   14fb0:	2100      	movs	r1, #0
   14fb2:	e9cd 0100 	strd	r0, r1, [sp]
   14fb6:	210d      	movs	r1, #13
   14fb8:	4620      	mov	r0, r4
   14fba:	f7fd fb3f 	bl	1263c <dw1000_write_reg>
                inst->uwb_dev.status.rx_restarted = 1;
   14fbe:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   14fc2:	f043 0308 	orr.w	r3, r3, #8
   14fc6:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
   14fca:	e7dd      	b.n	14f88 <dw1000_interrupt_ev_cb+0x5f8>
                if(cbs->rx_complete_cb((struct uwb_dev*)inst,cbs)) continue;
   14fcc:	4629      	mov	r1, r5
   14fce:	4620      	mov	r0, r4
   14fd0:	4798      	blx	r3
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   14fd2:	6bad      	ldr	r5, [r5, #56]	; 0x38
   14fd4:	2d00      	cmp	r5, #0
   14fd6:	f43f ae45 	beq.w	14c64 <dw1000_interrupt_ev_cb+0x2d4>
            if (cbs != NULL && cbs->rx_complete_cb)
   14fda:	692b      	ldr	r3, [r5, #16]
   14fdc:	2b00      	cmp	r3, #0
   14fde:	d1f5      	bne.n	14fcc <dw1000_interrupt_ev_cb+0x63c>
   14fe0:	e7f7      	b.n	14fd2 <dw1000_interrupt_ev_cb+0x642>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_TXFRB, sizeof(uint8_t)); // Clear TX Frame Begins
   14fe2:	2301      	movs	r3, #1
   14fe4:	9302      	str	r3, [sp, #8]
   14fe6:	2210      	movs	r2, #16
   14fe8:	2300      	movs	r3, #0
   14fea:	e9cd 2300 	strd	r2, r3, [sp]
   14fee:	2200      	movs	r2, #0
   14ff0:	210f      	movs	r1, #15
   14ff2:	4620      	mov	r0, r4
   14ff4:	f7fd fb22 	bl	1263c <dw1000_write_reg>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   14ff8:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
   14ffc:	b90d      	cbnz	r5, 15002 <dw1000_interrupt_ev_cb+0x672>
   14ffe:	e637      	b.n	14c70 <dw1000_interrupt_ev_cb+0x2e0>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   15000:	6bad      	ldr	r5, [r5, #56]	; 0x38
   15002:	2d00      	cmp	r5, #0
   15004:	f43f ae34 	beq.w	14c70 <dw1000_interrupt_ev_cb+0x2e0>
            if (cbs!=NULL && cbs->tx_begins_cb)
   15008:	68ab      	ldr	r3, [r5, #8]
   1500a:	2b00      	cmp	r3, #0
   1500c:	d0f8      	beq.n	15000 <dw1000_interrupt_ev_cb+0x670>
                if(cbs->tx_begins_cb((struct uwb_dev*)inst,cbs)) break;
   1500e:	4629      	mov	r1, r5
   15010:	4620      	mov	r0, r4
   15012:	4798      	blx	r3
   15014:	2800      	cmp	r0, #0
   15016:	d0f3      	beq.n	15000 <dw1000_interrupt_ev_cb+0x670>
   15018:	e62a      	b.n	14c70 <dw1000_interrupt_ev_cb+0x2e0>
   1501a:	bf00      	nop
   1501c:	0010e400 	.word	0x0010e400
        MAC_STATS_INC(TFG_cnt);
   15020:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
   15024:	3301      	adds	r3, #1
   15026:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_TX, sizeof(uint8_t)); // Clear TX event bits
   1502a:	2301      	movs	r3, #1
   1502c:	9302      	str	r3, [sp, #8]
   1502e:	22f8      	movs	r2, #248	; 0xf8
   15030:	2300      	movs	r3, #0
   15032:	e9cd 2300 	strd	r2, r3, [sp]
   15036:	2200      	movs	r2, #0
   15038:	210f      	movs	r1, #15
   1503a:	4620      	mov	r0, r4
   1503c:	f7fd fafe 	bl	1263c <dw1000_write_reg>
        if (inst->control.abs_timeout) {
   15040:	f894 35bd 	ldrb.w	r3, [r4, #1469]	; 0x5bd
   15044:	f013 0f08 	tst.w	r3, #8
   15048:	d118      	bne.n	1507c <dw1000_interrupt_ev_cb+0x6ec>
   1504a:	f8b4 356e 	ldrh.w	r3, [r4, #1390]	; 0x56e
        if(dpl_sem_get_count(&inst->tx_sem) == 0){
   1504e:	b35b      	cbz	r3, 150a8 <dw1000_interrupt_ev_cb+0x718>
        if(!inst->sys_status_bt_lock && !inst->uwb_dev.status.autoack_triggered) {
   15050:	f894 3dfe 	ldrb.w	r3, [r4, #3582]	; 0xdfe
   15054:	b973      	cbnz	r3, 15074 <dw1000_interrupt_ev_cb+0x6e4>
   15056:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1505a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1505e:	d109      	bne.n	15074 <dw1000_interrupt_ev_cb+0x6e4>
            DW1000_SYS_STATUS_BT_FCTRL(inst, inst->uwb_dev.fctrl);
   15060:	f8b4 3dfc 	ldrh.w	r3, [r4, #3580]	; 0xdfc
   15064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15068:	f8b4 24e0 	ldrh.w	r2, [r4, #1248]	; 0x4e0
   1506c:	3360      	adds	r3, #96	; 0x60
   1506e:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   15072:	80da      	strh	r2, [r3, #6]
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   15074:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
   15078:	bb1d      	cbnz	r5, 150c2 <dw1000_interrupt_ev_cb+0x732>
   1507a:	e5ff      	b.n	14c7c <dw1000_interrupt_ev_cb+0x2ec>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1507c:	2201      	movs	r2, #1
   1507e:	9202      	str	r2, [sp, #8]
   15080:	2001      	movs	r0, #1
   15082:	2100      	movs	r1, #0
   15084:	e9cd 0100 	strd	r0, r1, [sp]
   15088:	210d      	movs	r1, #13
   1508a:	4620      	mov	r0, r4
   1508c:	f7fd fad6 	bl	1263c <dw1000_write_reg>
 *
 * @return time
 *
 */
inline uint64_t dw1000_read_txtime(struct _dw1000_dev_instance_t * inst){
    uint64_t time = (uint64_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   15090:	2305      	movs	r3, #5
   15092:	2200      	movs	r2, #0
   15094:	2117      	movs	r1, #23
   15096:	4620      	mov	r0, r4
   15098:	f7fd fa60 	bl	1255c <dw1000_read_reg>
   1509c:	4602      	mov	r2, r0
            update_rx_window_timeout(inst, dw1000_read_txtime(inst));
   1509e:	b2cb      	uxtb	r3, r1
   150a0:	4620      	mov	r0, r4
   150a2:	f7fe fef9 	bl	13e98 <update_rx_window_timeout>
   150a6:	e7d0      	b.n	1504a <dw1000_interrupt_ev_cb+0x6ba>
   150a8:	f504 60ad 	add.w	r0, r4, #1384	; 0x568
   150ac:	f7f4 fe64 	bl	9d78 <os_sem_release>
            assert(err == DPL_OK);
   150b0:	2800      	cmp	r0, #0
   150b2:	d0cd      	beq.n	15050 <dw1000_interrupt_ev_cb+0x6c0>
   150b4:	2300      	movs	r3, #0
   150b6:	461a      	mov	r2, r3
   150b8:	4619      	mov	r1, r3
   150ba:	4618      	mov	r0, r3
   150bc:	f7f3 ff4a 	bl	8f54 <__assert_func>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   150c0:	6bad      	ldr	r5, [r5, #56]	; 0x38
   150c2:	2d00      	cmp	r5, #0
   150c4:	f43f adda 	beq.w	14c7c <dw1000_interrupt_ev_cb+0x2ec>
            if (cbs!=NULL && cbs->tx_complete_cb)
   150c8:	68eb      	ldr	r3, [r5, #12]
   150ca:	2b00      	cmp	r3, #0
   150cc:	d0f8      	beq.n	150c0 <dw1000_interrupt_ev_cb+0x730>
                if(cbs->tx_complete_cb((struct uwb_dev*)inst,cbs)) break;
   150ce:	4629      	mov	r1, r5
   150d0:	4620      	mov	r0, r4
   150d2:	4798      	blx	r3
   150d4:	2800      	cmp	r0, #0
   150d6:	d0f3      	beq.n	150c0 <dw1000_interrupt_ev_cb+0x730>
   150d8:	e5d0      	b.n	14c7c <dw1000_interrupt_ev_cb+0x2ec>
        MAC_STATS_INC(TXBUF_err);
   150da:	f8d4 35f4 	ldr.w	r3, [r4, #1524]	; 0x5f4
   150de:	3301      	adds	r3, #1
   150e0:	f8c4 35f4 	str.w	r3, [r4, #1524]	; 0x5f4
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_TXBERR, sizeof(uint32_t));
   150e4:	2304      	movs	r3, #4
   150e6:	9302      	str	r3, [sp, #8]
   150e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   150ec:	2300      	movs	r3, #0
   150ee:	e9cd 2300 	strd	r2, r3, [sp]
   150f2:	2200      	movs	r2, #0
   150f4:	210f      	movs	r1, #15
   150f6:	4620      	mov	r0, r4
   150f8:	f7fd faa0 	bl	1263c <dw1000_write_reg>
   150fc:	f8b4 356e 	ldrh.w	r3, [r4, #1390]	; 0x56e
        if(dpl_sem_get_count(&inst->tx_sem) == 0){
   15100:	2b00      	cmp	r3, #0
   15102:	f47f adc1 	bne.w	14c88 <dw1000_interrupt_ev_cb+0x2f8>
   15106:	f504 60ad 	add.w	r0, r4, #1384	; 0x568
   1510a:	f7f4 fe35 	bl	9d78 <os_sem_release>
            assert(err == DPL_OK);
   1510e:	2800      	cmp	r0, #0
   15110:	f43f adba 	beq.w	14c88 <dw1000_interrupt_ev_cb+0x2f8>
   15114:	2300      	movs	r3, #0
   15116:	461a      	mov	r2, r3
   15118:	4619      	mov	r1, r3
   1511a:	4618      	mov	r0, r3
   1511c:	f7f3 ff1a 	bl	8f54 <__assert_func>
        MAC_STATS_INC(LDE_err);
   15120:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
   15124:	3301      	adds	r3, #1
   15126:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_LDEERR, sizeof(uint32_t));
   1512a:	2304      	movs	r3, #4
   1512c:	9302      	str	r3, [sp, #8]
   1512e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   15132:	2300      	movs	r3, #0
   15134:	e9cd 2300 	strd	r2, r3, [sp]
   15138:	2200      	movs	r2, #0
   1513a:	210f      	movs	r1, #15
   1513c:	4620      	mov	r0, r4
   1513e:	f7fd fa7d 	bl	1263c <dw1000_write_reg>
   15142:	e5a7      	b.n	14c94 <dw1000_interrupt_ev_cb+0x304>
        MAC_STATS_INC(RTO_cnt);
   15144:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
   15148:	3301      	adds	r3, #1
   1514a:	f8c4 35e0 	str.w	r3, [r4, #1504]	; 0x5e0
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_RX_TO, sizeof(uint32_t)); // Clear RX timeout event bits
   1514e:	2304      	movs	r3, #4
   15150:	9302      	str	r3, [sp, #8]
   15152:	f44f 1208 	mov.w	r2, #2228224	; 0x220000
   15156:	2300      	movs	r3, #0
   15158:	e9cd 2300 	strd	r2, r3, [sp]
   1515c:	2200      	movs	r2, #0
   1515e:	210f      	movs	r1, #15
   15160:	4620      	mov	r0, r4
   15162:	f7fd fa6b 	bl	1263c <dw1000_write_reg>
        if (inst->control.abs_timeout) {
   15166:	f894 35bd 	ldrb.w	r3, [r4, #1469]	; 0x5bd
   1516a:	f013 0f08 	tst.w	r3, #8
   1516e:	d127      	bne.n	151c0 <dw1000_interrupt_ev_cb+0x830>
        if (!inst->control.abs_timeout) {
   15170:	f894 35bd 	ldrb.w	r3, [r4, #1469]	; 0x5bd
   15174:	f013 0f08 	tst.w	r3, #8
   15178:	f47f ad91 	bne.w	14c9e <dw1000_interrupt_ev_cb+0x30e>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint16_t)SYS_CTRL_TRXOFF, sizeof(uint16_t)) ; // Disable the radio
   1517c:	2302      	movs	r3, #2
   1517e:	9302      	str	r3, [sp, #8]
   15180:	2240      	movs	r2, #64	; 0x40
   15182:	2300      	movs	r3, #0
   15184:	e9cd 2300 	strd	r2, r3, [sp]
   15188:	2200      	movs	r2, #0
   1518a:	210d      	movs	r1, #13
   1518c:	4620      	mov	r0, r4
   1518e:	f7fd fa55 	bl	1263c <dw1000_write_reg>
            dw1000_phy_rx_reset(inst);
   15192:	4620      	mov	r0, r4
   15194:	f000 fcd3 	bl	15b3e <dw1000_phy_rx_reset>
            inst->control.cir_enable = false;
   15198:	f894 35bd 	ldrb.w	r3, [r4, #1469]	; 0x5bd
   1519c:	f36f 0341 	bfc	r3, #1, #1
   151a0:	f884 35bd 	strb.w	r3, [r4, #1469]	; 0x5bd
            inst->control.rxauto_disable = false;
   151a4:	b2db      	uxtb	r3, r3
   151a6:	f36f 0382 	bfc	r3, #2, #1
   151aa:	f884 35bd 	strb.w	r3, [r4, #1469]	; 0x5bd
            inst->control.abs_timeout = false;
   151ae:	b2db      	uxtb	r3, r3
   151b0:	f36f 03c3 	bfc	r3, #3, #1
   151b4:	f884 35bd 	strb.w	r3, [r4, #1469]	; 0x5bd
            if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   151b8:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
   151bc:	bb3d      	cbnz	r5, 1520e <dw1000_interrupt_ev_cb+0x87e>
   151be:	e56e      	b.n	14c9e <dw1000_interrupt_ev_cb+0x30e>
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
   151c0:	2305      	movs	r3, #5
   151c2:	2200      	movs	r2, #0
   151c4:	2106      	movs	r1, #6
   151c6:	4620      	mov	r0, r4
   151c8:	f7fd f9c8 	bl	1255c <dw1000_read_reg>
            uint32_t new_timeout = calc_rx_window_timeout(systime, inst->uwb_dev.abs_timeout);
   151cc:	f504 639c 	add.w	r3, r4, #1248	; 0x4e0
   151d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   151d4:	b2c9      	uxtb	r1, r1
   151d6:	f7fe fb38 	bl	1384a <calc_rx_window_timeout>
   151da:	4605      	mov	r5, r0
            if (new_timeout > 1) {
   151dc:	2801      	cmp	r0, #1
   151de:	d806      	bhi.n	151ee <dw1000_interrupt_ev_cb+0x85e>
                inst->control.abs_timeout = false;
   151e0:	f894 35bd 	ldrb.w	r3, [r4, #1469]	; 0x5bd
   151e4:	f36f 03c3 	bfc	r3, #3, #1
   151e8:	f884 35bd 	strb.w	r3, [r4, #1469]	; 0x5bd
   151ec:	e7c0      	b.n	15170 <dw1000_interrupt_ev_cb+0x7e0>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   151ee:	2201      	movs	r2, #1
   151f0:	9202      	str	r2, [sp, #8]
   151f2:	2001      	movs	r0, #1
   151f4:	2100      	movs	r1, #0
   151f6:	e9cd 0100 	strd	r0, r1, [sp]
   151fa:	210d      	movs	r1, #13
   151fc:	4620      	mov	r0, r4
   151fe:	f7fd fa1d 	bl	1263c <dw1000_write_reg>
                dw1000_adj_rx_timeout(inst, new_timeout);
   15202:	4629      	mov	r1, r5
   15204:	4620      	mov	r0, r4
   15206:	f7fe fe38 	bl	13e7a <dw1000_adj_rx_timeout>
   1520a:	e7b1      	b.n	15170 <dw1000_interrupt_ev_cb+0x7e0>
                SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1520c:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1520e:	2d00      	cmp	r5, #0
   15210:	f43f ad45 	beq.w	14c9e <dw1000_interrupt_ev_cb+0x30e>
                    if (cbs!=NULL && cbs->rx_timeout_cb)
   15214:	69ab      	ldr	r3, [r5, #24]
   15216:	2b00      	cmp	r3, #0
   15218:	d0f8      	beq.n	1520c <dw1000_interrupt_ev_cb+0x87c>
                        if(cbs->rx_timeout_cb((struct uwb_dev*)inst,cbs)) continue;
   1521a:	4629      	mov	r1, r5
   1521c:	4620      	mov	r0, r4
   1521e:	4798      	blx	r3
   15220:	e7f4      	b.n	1520c <dw1000_interrupt_ev_cb+0x87c>
        MAC_STATS_INC(RX_err);
   15222:	f8d4 35f0 	ldr.w	r3, [r4, #1520]	; 0x5f0
   15226:	3301      	adds	r3, #1
   15228:	f8c4 35f0 	str.w	r3, [r4, #1520]	; 0x5f0
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_RX_ERR), sizeof(uint32_t)); // Clear RX error event bits
   1522c:	2304      	movs	r3, #4
   1522e:	9302      	str	r3, [sp, #8]
   15230:	a37d      	add	r3, pc, #500	; (adr r3, 15428 <dw1000_interrupt_ev_cb+0xa98>)
   15232:	e9d3 2300 	ldrd	r2, r3, [r3]
   15236:	e9cd 2300 	strd	r2, r3, [sp]
   1523a:	2200      	movs	r2, #0
   1523c:	210f      	movs	r1, #15
   1523e:	4620      	mov	r0, r4
   15240:	f7fd f9fc 	bl	1263c <dw1000_write_reg>
        if (inst->uwb_dev.config.dblbuffon_enabled && inst->uwb_dev.status.overrun_error) {
   15244:	f894 3530 	ldrb.w	r3, [r4, #1328]	; 0x530
   15248:	f013 0f10 	tst.w	r3, #16
   1524c:	d004      	beq.n	15258 <dw1000_interrupt_ev_cb+0x8c8>
   1524e:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   15252:	f013 0f04 	tst.w	r3, #4
   15256:	d121      	bne.n	1529c <dw1000_interrupt_ev_cb+0x90c>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   15258:	2301      	movs	r3, #1
   1525a:	9302      	str	r3, [sp, #8]
   1525c:	2240      	movs	r2, #64	; 0x40
   1525e:	2300      	movs	r3, #0
   15260:	e9cd 2300 	strd	r2, r3, [sp]
   15264:	2200      	movs	r2, #0
   15266:	210d      	movs	r1, #13
   15268:	4620      	mov	r0, r4
   1526a:	f7fd f9e7 	bl	1263c <dw1000_write_reg>
            dw1000_phy_rx_reset(inst);
   1526e:	4620      	mov	r0, r4
   15270:	f000 fc65 	bl	15b3e <dw1000_phy_rx_reset>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   15274:	2201      	movs	r2, #1
   15276:	9202      	str	r2, [sp, #8]
   15278:	2001      	movs	r0, #1
   1527a:	2100      	movs	r1, #0
   1527c:	e9cd 0100 	strd	r0, r1, [sp]
   15280:	210d      	movs	r1, #13
   15282:	4620      	mov	r0, r4
   15284:	f7fd f9da 	bl	1263c <dw1000_write_reg>
        if (inst->control.abs_timeout) {
   15288:	f894 35bd 	ldrb.w	r3, [r4, #1469]	; 0x5bd
   1528c:	f013 0f08 	tst.w	r3, #8
   15290:	d134      	bne.n	152fc <dw1000_interrupt_ev_cb+0x96c>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   15292:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
   15296:	2d00      	cmp	r5, #0
   15298:	d13d      	bne.n	15316 <dw1000_interrupt_ev_cb+0x986>
   1529a:	e506      	b.n	14caa <dw1000_interrupt_ev_cb+0x31a>
            MAC_STATS_INC(ROV_err);
   1529c:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
   152a0:	3301      	adds	r3, #1
   152a2:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
            dw1000_phy_rx_reset(inst);
   152a6:	4620      	mov	r0, r4
   152a8:	f000 fc49 	bl	15b3e <dw1000_phy_rx_reset>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0b1, sizeof(uint8_t));
   152ac:	2501      	movs	r5, #1
   152ae:	9502      	str	r5, [sp, #8]
   152b0:	2201      	movs	r2, #1
   152b2:	2300      	movs	r3, #0
   152b4:	e9cd 2300 	strd	r2, r3, [sp]
   152b8:	2203      	movs	r2, #3
   152ba:	210d      	movs	r1, #13
   152bc:	4620      	mov	r0, r4
   152be:	f7fd f9bd 	bl	1263c <dw1000_write_reg>
    inst->control.start_rx_syncbuf_enabled = 1;
   152c2:	f894 35bc 	ldrb.w	r3, [r4, #1468]	; 0x5bc
   152c6:	f043 0310 	orr.w	r3, r3, #16
   152ca:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   152ce:	462b      	mov	r3, r5
   152d0:	2203      	movs	r2, #3
   152d2:	210f      	movs	r1, #15
   152d4:	4620      	mov	r0, r4
   152d6:	f7fd f941 	bl	1255c <dw1000_read_reg>
   152da:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   152dc:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   152e0:	f010 0f80 	tst.w	r0, #128	; 0x80
   152e4:	d0c6      	beq.n	15274 <dw1000_interrupt_ev_cb+0x8e4>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   152e6:	9502      	str	r5, [sp, #8]
   152e8:	2201      	movs	r2, #1
   152ea:	2300      	movs	r3, #0
   152ec:	e9cd 2300 	strd	r2, r3, [sp]
   152f0:	2203      	movs	r2, #3
   152f2:	210d      	movs	r1, #13
   152f4:	4620      	mov	r0, r4
   152f6:	f7fd f9a1 	bl	1263c <dw1000_write_reg>
            dw1000_sync_rxbufptrs(inst);
   152fa:	e7bb      	b.n	15274 <dw1000_interrupt_ev_cb+0x8e4>
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
   152fc:	2305      	movs	r3, #5
   152fe:	2200      	movs	r2, #0
   15300:	2106      	movs	r1, #6
   15302:	4620      	mov	r0, r4
   15304:	f7fd f92a 	bl	1255c <dw1000_read_reg>
   15308:	4602      	mov	r2, r0
            update_rx_window_timeout(inst, dw1000_read_systime(inst));
   1530a:	b2cb      	uxtb	r3, r1
   1530c:	4620      	mov	r0, r4
   1530e:	f7fe fdc3 	bl	13e98 <update_rx_window_timeout>
   15312:	e7be      	b.n	15292 <dw1000_interrupt_ev_cb+0x902>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   15314:	6bad      	ldr	r5, [r5, #56]	; 0x38
   15316:	2d00      	cmp	r5, #0
   15318:	f43f acc7 	beq.w	14caa <dw1000_interrupt_ev_cb+0x31a>
            if (cbs!=NULL && cbs->rx_error_cb)
   1531c:	69eb      	ldr	r3, [r5, #28]
   1531e:	2b00      	cmp	r3, #0
   15320:	d0f8      	beq.n	15314 <dw1000_interrupt_ev_cb+0x984>
                if(cbs->rx_error_cb((struct uwb_dev*)inst,cbs)) continue;
   15322:	4629      	mov	r1, r5
   15324:	4620      	mov	r0, r4
   15326:	4798      	blx	r3
   15328:	e7f4      	b.n	15314 <dw1000_interrupt_ev_cb+0x984>
        dw1000_write_reg(inst, SYS_STATUS_ID, 2, SYS_STATUS_SLP2INIT>>16, 1);
   1532a:	2301      	movs	r3, #1
   1532c:	9302      	str	r3, [sp, #8]
   1532e:	2280      	movs	r2, #128	; 0x80
   15330:	2300      	movs	r3, #0
   15332:	e9cd 2300 	strd	r2, r3, [sp]
   15336:	2202      	movs	r2, #2
   15338:	210f      	movs	r1, #15
   1533a:	4620      	mov	r0, r4
   1533c:	f7fd f97e 	bl	1263c <dw1000_write_reg>
   15340:	e4b9      	b.n	14cb6 <dw1000_interrupt_ev_cb+0x326>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_CLKPLL_LL, sizeof(uint32_t));
   15342:	2304      	movs	r3, #4
   15344:	9302      	str	r3, [sp, #8]
   15346:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1534a:	2300      	movs	r3, #0
   1534c:	e9cd 2300 	strd	r2, r3, [sp]
   15350:	2200      	movs	r2, #0
   15352:	210f      	movs	r1, #15
   15354:	4620      	mov	r0, r4
   15356:	f7fd f971 	bl	1263c <dw1000_write_reg>
        MAC_STATS_INC(PLL_LL_err);
   1535a:	f8d4 35f8 	ldr.w	r3, [r4, #1528]	; 0x5f8
   1535e:	3301      	adds	r3, #1
   15360:	f8c4 35f8 	str.w	r3, [r4, #1528]	; 0x5f8
   15364:	e4ad      	b.n	14cc2 <dw1000_interrupt_ev_cb+0x332>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_MASK_MCPLOCK, sizeof(uint32_t));
   15366:	2304      	movs	r3, #4
   15368:	9302      	str	r3, [sp, #8]
   1536a:	2202      	movs	r2, #2
   1536c:	2300      	movs	r3, #0
   1536e:	e9cd 2300 	strd	r2, r3, [sp]
   15372:	2200      	movs	r2, #0
   15374:	210f      	movs	r1, #15
   15376:	4620      	mov	r0, r4
   15378:	f7fd f960 	bl	1263c <dw1000_write_reg>
        dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   1537c:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
   15380:	f04f 0802 	mov.w	r8, #2
   15384:	f8cd 8008 	str.w	r8, [sp, #8]
   15388:	2500      	movs	r5, #0
   1538a:	9300      	str	r3, [sp, #0]
   1538c:	9501      	str	r5, [sp, #4]
   1538e:	f641 0204 	movw	r2, #6148	; 0x1804
   15392:	212e      	movs	r1, #46	; 0x2e
   15394:	4620      	mov	r0, r4
   15396:	f7fd f951 	bl	1263c <dw1000_write_reg>
        dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
   1539a:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   1539e:	f8cd 8008 	str.w	r8, [sp, #8]
   153a2:	9300      	str	r3, [sp, #0]
   153a4:	9501      	str	r5, [sp, #4]
   153a6:	462a      	mov	r2, r5
   153a8:	2118      	movs	r1, #24
   153aa:	4620      	mov	r0, r4
   153ac:	f7fd f946 	bl	1263c <dw1000_write_reg>
        inst->uwb_dev.status.sleeping = 0;
   153b0:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   153b4:	f365 0300 	bfi	r3, r5, #0, #1
   153b8:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   153bc:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
   153c0:	b90d      	cbnz	r5, 153c6 <dw1000_interrupt_ev_cb+0xa36>
   153c2:	e484      	b.n	14cce <dw1000_interrupt_ev_cb+0x33e>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   153c4:	6bad      	ldr	r5, [r5, #56]	; 0x38
   153c6:	2d00      	cmp	r5, #0
   153c8:	f43f ac81 	beq.w	14cce <dw1000_interrupt_ev_cb+0x33e>
            if (cbs!=NULL && cbs->sleep_cb)
   153cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   153ce:	2b00      	cmp	r3, #0
   153d0:	d0f8      	beq.n	153c4 <dw1000_interrupt_ev_cb+0xa34>
                if (cbs->sleep_cb((struct uwb_dev*)inst,cbs)) continue;
   153d2:	4629      	mov	r1, r5
   153d4:	4620      	mov	r0, r4
   153d6:	4798      	blx	r3
   153d8:	e7f4      	b.n	153c4 <dw1000_interrupt_ev_cb+0xa34>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   153da:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   153de:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   153e2:	f7f4 f8dd 	bl	95a0 <os_eventq_put>
        if(!inst->sys_status_bt_lock) {
   153e6:	f894 3dfe 	ldrb.w	r3, [r4, #3582]	; 0xdfe
   153ea:	2b00      	cmp	r3, #0
   153ec:	f47f aaec 	bne.w	149c8 <dw1000_interrupt_ev_cb+0x38>
            DW1000_SYS_STATUS_BT_PTR(inst).interrupt_reentry = 1;
   153f0:	f8b4 3dfc 	ldrh.w	r3, [r4, #3580]	; 0xdfc
   153f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   153f8:	3360      	adds	r3, #96	; 0x60
   153fa:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   153fe:	795a      	ldrb	r2, [r3, #5]
   15400:	f042 0201 	orr.w	r2, r2, #1
   15404:	715a      	strb	r2, [r3, #5]
   15406:	f7ff badf 	b.w	149c8 <dw1000_interrupt_ev_cb+0x38>
        DW1000_SYS_STATUS_BT_PTR(inst).utime_end = dpl_cputime_get32();
   1540a:	f8b4 5dfc 	ldrh.w	r5, [r4, #3580]	; 0xdfc
   1540e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   15412:	f7f7 fab5 	bl	c980 <dpl_cputime_get32>
   15416:	3560      	adds	r5, #96	; 0x60
   15418:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   1541c:	60a0      	str	r0, [r4, #8]
}
   1541e:	f7ff bad8 	b.w	149d2 <dw1000_interrupt_ev_cb+0x42>
   15422:	bf00      	nop
   15424:	f3af 8000 	nop.w
   15428:	24119000 	.word	0x24119000
   1542c:	00000000 	.word	0x00000000

00015430 <dw1000_calc_fppl>:
    if (diag->pacc_cnt == 0 ||
   15430:	8a4a      	ldrh	r2, [r1, #18]
   15432:	b3e2      	cbz	r2, 154ae <dw1000_calc_fppl+0x7e>
{
   15434:	b510      	push	{r4, lr}
   15436:	ed2d 8b02 	vpush	{d8}
        (!diag->fp_amp && !diag->fp_amp2 && !diag->fp_amp3)) {
   1543a:	890b      	ldrh	r3, [r1, #8]
    if (diag->pacc_cnt == 0 ||
   1543c:	b91b      	cbnz	r3, 15446 <dw1000_calc_fppl+0x16>
        (!diag->fp_amp && !diag->fp_amp2 && !diag->fp_amp3)) {
   1543e:	898c      	ldrh	r4, [r1, #12]
   15440:	b90c      	cbnz	r4, 15446 <dw1000_calc_fppl+0x16>
   15442:	89cc      	ldrh	r4, [r1, #14]
   15444:	b3b4      	cbz	r4, 154b4 <dw1000_calc_fppl+0x84>
    A = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   15446:	f890 050e 	ldrb.w	r0, [r0, #1294]	; 0x50e
   1544a:	2801      	cmp	r0, #1
   1544c:	d02c      	beq.n	154a8 <dw1000_calc_fppl+0x78>
   1544e:	ed9f 8a1b 	vldr	s16, [pc, #108]	; 154bc <dw1000_calc_fppl+0x8c>
    N = (float)(diag->pacc_cnt);
   15452:	ee07 2a90 	vmov	s15, r2
   15456:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
   1545a:	fb03 f303 	mul.w	r3, r3, r3
   1545e:	ee07 3a90 	vmov	s15, r3
   15462:	eef8 6ae7 	vcvt.f32.s32	s13, s15
        (float)(diag->fp_amp2*diag->fp_amp2) +
   15466:	898b      	ldrh	r3, [r1, #12]
   15468:	fb03 f303 	mul.w	r3, r3, r3
   1546c:	ee07 3a90 	vmov	s15, r3
   15470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
   15474:	ee36 7aa7 	vadd.f32	s14, s13, s15
        (float)(diag->fp_amp3*diag->fp_amp3);
   15478:	89cb      	ldrh	r3, [r1, #14]
   1547a:	fb03 f303 	mul.w	r3, r3, r3
   1547e:	ee07 3a90 	vmov	s15, r3
   15482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
   15486:	ee77 7a27 	vadd.f32	s15, s14, s15
    v /= N * N;
   1548a:	ee20 0a00 	vmul.f32	s0, s0, s0
    fppl = 10.0f * log10f(v) - A;
   1548e:	ee87 0a80 	vdiv.f32	s0, s15, s0
   15492:	f00b fa85 	bl	209a0 <log10f>
   15496:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   1549a:	ee20 0a27 	vmul.f32	s0, s0, s15
   1549e:	ee30 0a48 	vsub.f32	s0, s0, s16
}
   154a2:	ecbd 8b02 	vpop	{d8}
   154a6:	bd10      	pop	{r4, pc}
    A = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   154a8:	ed9f 8a05 	vldr	s16, [pc, #20]	; 154c0 <dw1000_calc_fppl+0x90>
   154ac:	e7d1      	b.n	15452 <dw1000_calc_fppl+0x22>
        return DPL_FLOAT32_NAN();
   154ae:	ed9f 0a05 	vldr	s0, [pc, #20]	; 154c4 <dw1000_calc_fppl+0x94>
}
   154b2:	4770      	bx	lr
        return DPL_FLOAT32_NAN();
   154b4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 154c4 <dw1000_calc_fppl+0x94>
   154b8:	e7f3      	b.n	154a2 <dw1000_calc_fppl+0x72>
   154ba:	bf00      	nop
   154bc:	42f37ae1 	.word	0x42f37ae1
   154c0:	42e38a3d 	.word	0x42e38a3d
   154c4:	7fc00000 	.word	0x7fc00000

000154c8 <dw1000_get_fppl>:
{
   154c8:	b508      	push	{r3, lr}
    if (!inst->uwb_dev.config.rxdiag_enable) {
   154ca:	f890 3530 	ldrb.w	r3, [r0, #1328]	; 0x530
   154ce:	f013 0f40 	tst.w	r3, #64	; 0x40
   154d2:	d102      	bne.n	154da <dw1000_get_fppl+0x12>
        return DPL_FLOAT32_NAN();
   154d4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 154e4 <dw1000_get_fppl+0x1c>
}
   154d8:	bd08      	pop	{r3, pc}
    return dw1000_calc_fppl(inst, &inst->rxdiag);
   154da:	f500 61b5 	add.w	r1, r0, #1448	; 0x5a8
   154de:	f7ff ffa7 	bl	15430 <dw1000_calc_fppl>
   154e2:	e7f9      	b.n	154d8 <dw1000_get_fppl+0x10>
   154e4:	7fc00000 	.word	0x7fc00000

000154e8 <dw1000_calc_rssi>:
{
   154e8:	b508      	push	{r3, lr}
   154ea:	ed2d 8b02 	vpush	{d8}
    uint32_t pacc_cnt = diag->pacc_cnt;
   154ee:	8a4a      	ldrh	r2, [r1, #18]
    uint32_t cir_pwr = diag->cir_pwr;
   154f0:	8a0b      	ldrh	r3, [r1, #16]
    if (cir_pwr == 0 || pacc_cnt == 0) {
   154f2:	b1eb      	cbz	r3, 15530 <dw1000_calc_rssi+0x48>
   154f4:	b1fa      	cbz	r2, 15536 <dw1000_calc_rssi+0x4e>
    B = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   154f6:	f890 150e 	ldrb.w	r1, [r0, #1294]	; 0x50e
   154fa:	2901      	cmp	r1, #1
   154fc:	d015      	beq.n	1552a <dw1000_calc_rssi+0x42>
   154fe:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 1553c <dw1000_calc_rssi+0x54>
    A = cir_pwr * 0x20000/(pacc_cnt * pacc_cnt);
   15502:	045b      	lsls	r3, r3, #17
   15504:	fb02 f202 	mul.w	r2, r2, r2
   15508:	fbb3 f3f2 	udiv	r3, r3, r2
   1550c:	ee00 3a10 	vmov	s0, r3
    rssi = 10.0f * log10f(A) - B;
   15510:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   15514:	f00b fa44 	bl	209a0 <log10f>
   15518:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   1551c:	ee20 0a27 	vmul.f32	s0, s0, s15
   15520:	ee30 0a48 	vsub.f32	s0, s0, s16
}
   15524:	ecbd 8b02 	vpop	{d8}
   15528:	bd08      	pop	{r3, pc}
    B = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   1552a:	ed9f 8a05 	vldr	s16, [pc, #20]	; 15540 <dw1000_calc_rssi+0x58>
   1552e:	e7e8      	b.n	15502 <dw1000_calc_rssi+0x1a>
        return DPL_FLOAT32_NAN();
   15530:	ed9f 0a04 	vldr	s0, [pc, #16]	; 15544 <dw1000_calc_rssi+0x5c>
   15534:	e7f6      	b.n	15524 <dw1000_calc_rssi+0x3c>
   15536:	ed9f 0a03 	vldr	s0, [pc, #12]	; 15544 <dw1000_calc_rssi+0x5c>
   1553a:	e7f3      	b.n	15524 <dw1000_calc_rssi+0x3c>
   1553c:	42f37ae1 	.word	0x42f37ae1
   15540:	42e38a3d 	.word	0x42e38a3d
   15544:	7fc00000 	.word	0x7fc00000

00015548 <dw1000_get_rssi>:
{
   15548:	b508      	push	{r3, lr}
    if (!inst->uwb_dev.config.rxdiag_enable) {
   1554a:	f890 3530 	ldrb.w	r3, [r0, #1328]	; 0x530
   1554e:	f013 0f40 	tst.w	r3, #64	; 0x40
   15552:	d102      	bne.n	1555a <dw1000_get_rssi+0x12>
        return DPL_FLOAT32_NAN();
   15554:	ed9f 0a03 	vldr	s0, [pc, #12]	; 15564 <dw1000_get_rssi+0x1c>
}
   15558:	bd08      	pop	{r3, pc}
    return dw1000_calc_rssi(inst, &inst->rxdiag);
   1555a:	f500 61b5 	add.w	r1, r0, #1448	; 0x5a8
   1555e:	f7ff ffc3 	bl	154e8 <dw1000_calc_rssi>
   15562:	e7f9      	b.n	15558 <dw1000_get_rssi+0x10>
   15564:	7fc00000 	.word	0x7fc00000

00015568 <dw1000_estimate_los>:
    d = DPL_FLOAT32_FABS(DPL_FLOAT32_SUB(rssi, fppl));
   15568:	ee30 0a60 	vsub.f32	s0, s0, s1
   1556c:	eeb0 0ac0 	vabs.f32	s0, s0
    if (d < DPL_FLOAT32_INIT(6.0f))  return DPL_FLOAT32_INIT(1.0f);
   15570:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   15574:	eeb4 0ae7 	vcmpe.f32	s0, s15
   15578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1557c:	d413      	bmi.n	155a6 <dw1000_estimate_los+0x3e>
    if (d > DPL_FLOAT32_INIT(10.0f)) return DPL_FLOAT32_INIT(0.0f);
   1557e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   15582:	eeb4 0ae7 	vcmpe.f32	s0, s15
   15586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1558a:	dc0f      	bgt.n	155ac <dw1000_estimate_los+0x44>
    los = DPL_FLOAT32_SUB(DPL_FLOAT32_INIT(1.0f),
   1558c:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
   15590:	ee30 0a60 	vsub.f32	s0, s0, s1
   15594:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
   15598:	ee20 0a27 	vmul.f32	s0, s0, s15
   1559c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   155a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
    return los;
   155a4:	4770      	bx	lr
    if (d < DPL_FLOAT32_INIT(6.0f))  return DPL_FLOAT32_INIT(1.0f);
   155a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   155aa:	4770      	bx	lr
    if (d > DPL_FLOAT32_INIT(10.0f)) return DPL_FLOAT32_INIT(0.0f);
   155ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 155b4 <dw1000_estimate_los+0x4c>
}
   155b0:	4770      	bx	lr
   155b2:	bf00      	nop
   155b4:	00000000 	.word	0x00000000

000155b8 <dw1000_read_systime>:
inline uint64_t dw1000_read_systime(struct _dw1000_dev_instance_t * inst){
   155b8:	b508      	push	{r3, lr}
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
   155ba:	2305      	movs	r3, #5
   155bc:	2200      	movs	r2, #0
   155be:	2106      	movs	r1, #6
   155c0:	f7fc ffcc 	bl	1255c <dw1000_read_reg>
}
   155c4:	b2c9      	uxtb	r1, r1
   155c6:	bd08      	pop	{r3, pc}

000155c8 <dw1000_read_systime_lo>:
inline uint32_t dw1000_read_systime_lo(struct _dw1000_dev_instance_t * inst){
   155c8:	b508      	push	{r3, lr}
    uint32_t time = (uint32_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, sizeof(uint32_t));
   155ca:	2304      	movs	r3, #4
   155cc:	2200      	movs	r2, #0
   155ce:	2106      	movs	r1, #6
   155d0:	f7fc ffc4 	bl	1255c <dw1000_read_reg>
}
   155d4:	bd08      	pop	{r3, pc}

000155d6 <dw1000_read_rawrxtime>:
uint64_t dw1000_read_rawrxtime(struct _dw1000_dev_instance_t * inst){
   155d6:	b508      	push	{r3, lr}
    uint64_t time = (uint64_t)  dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_FP_RAWST_OFFSET, RX_TIME_RX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   155d8:	2305      	movs	r3, #5
   155da:	2209      	movs	r2, #9
   155dc:	2115      	movs	r1, #21
   155de:	f7fc ffbd 	bl	1255c <dw1000_read_reg>
}
   155e2:	b2c9      	uxtb	r1, r1
   155e4:	bd08      	pop	{r3, pc}

000155e6 <dw1000_read_rxtime>:
inline uint64_t dw1000_read_rxtime(struct _dw1000_dev_instance_t * inst){
   155e6:	b508      	push	{r3, lr}
    uint64_t time = (uint64_t)  dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   155e8:	2305      	movs	r3, #5
   155ea:	2200      	movs	r2, #0
   155ec:	2115      	movs	r1, #21
   155ee:	f7fc ffb5 	bl	1255c <dw1000_read_reg>
}
   155f2:	b2c9      	uxtb	r1, r1
   155f4:	bd08      	pop	{r3, pc}

000155f6 <dw1000_read_rxtime_lo>:
inline uint32_t dw1000_read_rxtime_lo(struct _dw1000_dev_instance_t * inst){
   155f6:	b508      	push	{r3, lr}
    uint64_t time = (uint32_t) dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, sizeof(uint32_t));
   155f8:	2304      	movs	r3, #4
   155fa:	2200      	movs	r2, #0
   155fc:	2115      	movs	r1, #21
   155fe:	f7fc ffad 	bl	1255c <dw1000_read_reg>
}
   15602:	bd08      	pop	{r3, pc}

00015604 <dw1000_read_txtime>:
inline uint64_t dw1000_read_txtime(struct _dw1000_dev_instance_t * inst){
   15604:	b508      	push	{r3, lr}
    uint64_t time = (uint64_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   15606:	2305      	movs	r3, #5
   15608:	2200      	movs	r2, #0
   1560a:	2117      	movs	r1, #23
   1560c:	f7fc ffa6 	bl	1255c <dw1000_read_reg>
    return time;
}
   15610:	b2c9      	uxtb	r1, r1
   15612:	bd08      	pop	{r3, pc}

00015614 <dw1000_read_txtime_lo>:
 *
 * @param inst  Pointer to _dw1000_dev_instance_t.
 *
 * @return time
 */
inline uint32_t dw1000_read_txtime_lo(struct _dw1000_dev_instance_t * inst){
   15614:	b508      	push	{r3, lr}
    uint32_t time = (uint32_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, sizeof(uint32_t));
   15616:	2304      	movs	r3, #4
   15618:	2200      	movs	r2, #0
   1561a:	2117      	movs	r1, #23
   1561c:	f7fc ff9e 	bl	1255c <dw1000_read_reg>
    return time;
}
   15620:	bd08      	pop	{r3, pc}
	...

00015624 <dw1000_configcwmode>:
 * @param chan - specifies the operating channel (e.g. 1, 2, 3, 4, 5, 6 or 7)
 *
 */
void
dw1000_configcwmode(struct _dw1000_dev_instance_t * inst, uint8_t chan)
{
   15624:	b5f0      	push	{r4, r5, r6, r7, lr}
   15626:	b085      	sub	sp, #20
    int rc;
    if ((chan < 1) || (chan > 7) || (6 == chan)) {
   15628:	1e4b      	subs	r3, r1, #1
   1562a:	b2db      	uxtb	r3, r3
   1562c:	2b06      	cmp	r3, #6
   1562e:	d879      	bhi.n	15724 <dw1000_configcwmode+0x100>
   15630:	4604      	mov	r4, r0
   15632:	460d      	mov	r5, r1
   15634:	2906      	cmp	r1, #6
   15636:	d075      	beq.n	15724 <dw1000_configcwmode+0x100>
    }

    /* Lower the speed of the SPI bus before activating CW mode.
     * This is needed because we disable the hiher sysclk and thus
     * dw1000 only support < 2Mbit spi */
    inst->spi_settings.baudrate = inst->spi_baudrate_low;
   15638:	f8d0 3560 	ldr.w	r3, [r0, #1376]	; 0x560
   1563c:	f8c0 35a0 	str.w	r3, [r0, #1440]	; 0x5a0
    rc = hal_spi_disable(inst->spi_num);
   15640:	f890 0564 	ldrb.w	r0, [r0, #1380]	; 0x564
   15644:	f002 fbc2 	bl	17dcc <hal_spi_disable>
    assert(rc == 0);
   15648:	2800      	cmp	r0, #0
   1564a:	d171      	bne.n	15730 <dw1000_configcwmode+0x10c>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   1564c:	f204 519c 	addw	r1, r4, #1436	; 0x59c
   15650:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   15654:	f002 fb78 	bl	17d48 <hal_spi_config>
    assert(rc == 0);
   15658:	2800      	cmp	r0, #0
   1565a:	d16f      	bne.n	1573c <dw1000_configcwmode+0x118>
    rc = hal_spi_enable(inst->spi_num);
   1565c:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   15660:	f002 fb8e 	bl	17d80 <hal_spi_enable>
    assert(rc == 0);
   15664:	2800      	cmp	r0, #0
   15666:	d16f      	bne.n	15748 <dw1000_configcwmode+0x124>

    /* disable TX/RX RF block sequencing (needed for cw frame mode) */
    dw1000_phy_disable_sequencing(inst);
   15668:	4620      	mov	r0, r4
   1566a:	f000 f926 	bl	158ba <dw1000_phy_disable_sequencing>

    /* config RF pll (for a given channel) */
    /* configure PLL2/RF PLL block CFG */
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET,
                     fs_pll_cfg[chan_idx[chan]], sizeof(uint32_t));
   1566e:	4b39      	ldr	r3, [pc, #228]	; (15754 <dw1000_configcwmode+0x130>)
   15670:	5d5d      	ldrb	r5, [r3, r5]
   15672:	4b39      	ldr	r3, [pc, #228]	; (15758 <dw1000_configcwmode+0x134>)
   15674:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET,
   15678:	2704      	movs	r7, #4
   1567a:	9702      	str	r7, [sp, #8]
   1567c:	2600      	movs	r6, #0
   1567e:	9300      	str	r3, [sp, #0]
   15680:	9601      	str	r6, [sp, #4]
   15682:	2207      	movs	r2, #7
   15684:	212b      	movs	r1, #43	; 0x2b
   15686:	4620      	mov	r0, r4
   15688:	f7fc ffd8 	bl	1263c <dw1000_write_reg>

    /* Configure RF TX blocks (for specified channel and prf) */
    /* Config RF TX control */
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET,
                     tx_config[chan_idx[chan]], sizeof(uint32_t));
   1568c:	4b33      	ldr	r3, [pc, #204]	; (1575c <dw1000_configcwmode+0x138>)
   1568e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET,
   15692:	9702      	str	r7, [sp, #8]
   15694:	9300      	str	r3, [sp, #0]
   15696:	9601      	str	r6, [sp, #4]
   15698:	220c      	movs	r2, #12
   1569a:	2128      	movs	r1, #40	; 0x28
   1569c:	4620      	mov	r0, r4
   1569e:	f7fc ffcd 	bl	1263c <dw1000_write_reg>

    /* enable RF PLL */
    dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXPLLPOWEN_MASK, sizeof(uint32_t));
   156a2:	9702      	str	r7, [sp, #8]
   156a4:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
   156a8:	2300      	movs	r3, #0
   156aa:	e9cd 2300 	strd	r2, r3, [sp]
   156ae:	4632      	mov	r2, r6
   156b0:	2128      	movs	r1, #40	; 0x28
   156b2:	4620      	mov	r0, r4
   156b4:	f7fc ffc2 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXALLEN_MASK, sizeof(uint32_t));
   156b8:	9702      	str	r7, [sp, #8]
   156ba:	4a29      	ldr	r2, [pc, #164]	; (15760 <dw1000_configcwmode+0x13c>)
   156bc:	2300      	movs	r3, #0
   156be:	e9cd 2300 	strd	r2, r3, [sp]
   156c2:	4632      	mov	r2, r6
   156c4:	2128      	movs	r1, #40	; 0x28
   156c6:	4620      	mov	r0, r4
   156c8:	f7fc ffb8 	bl	1263c <dw1000_write_reg>

    /* configure TX clocks */
    dw1000_write_reg(inst, PMSC_ID,PMSC_CTRL0_OFFSET, 0x22, 1);
   156cc:	2501      	movs	r5, #1
   156ce:	9502      	str	r5, [sp, #8]
   156d0:	2222      	movs	r2, #34	; 0x22
   156d2:	2300      	movs	r3, #0
   156d4:	e9cd 2300 	strd	r2, r3, [sp]
   156d8:	4632      	mov	r2, r6
   156da:	2136      	movs	r1, #54	; 0x36
   156dc:	4620      	mov	r0, r4
   156de:	f7fc ffad 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, 0x1, 0x07, 1);
   156e2:	9502      	str	r5, [sp, #8]
   156e4:	2207      	movs	r2, #7
   156e6:	2300      	movs	r3, #0
   156e8:	e9cd 2300 	strd	r2, r3, [sp]
   156ec:	462a      	mov	r2, r5
   156ee:	2136      	movs	r1, #54	; 0x36
   156f0:	4620      	mov	r0, r4
   156f2:	f7fc ffa3 	bl	1263c <dw1000_write_reg>

    /* disable fine grain TX seq */
    dw1000_write_reg(inst, PMSC_ID, PMSC_TXFINESEQ_OFFSET,
   156f6:	2302      	movs	r3, #2
   156f8:	9302      	str	r3, [sp, #8]
   156fa:	2200      	movs	r2, #0
   156fc:	2300      	movs	r3, #0
   156fe:	e9cd 2300 	strd	r2, r3, [sp]
   15702:	2226      	movs	r2, #38	; 0x26
   15704:	2136      	movs	r1, #54	; 0x36
   15706:	4620      	mov	r0, r4
   15708:	f7fc ff98 	bl	1263c <dw1000_write_reg>
                     PMSC_TXFINESEQ_DISABLE, sizeof(uint16_t));

    /* configure CW mode */
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGTEST_OFFSET,
   1570c:	9502      	str	r5, [sp, #8]
   1570e:	2213      	movs	r2, #19
   15710:	2300      	movs	r3, #0
   15712:	e9cd 2300 	strd	r2, r3, [sp]
   15716:	220c      	movs	r2, #12
   15718:	212a      	movs	r1, #42	; 0x2a
   1571a:	4620      	mov	r0, r4
   1571c:	f7fc ff8e 	bl	1263c <dw1000_write_reg>
                     TC_PGTEST_CW, TC_PGTEST_LEN);
}
   15720:	b005      	add	sp, #20
   15722:	bdf0      	pop	{r4, r5, r6, r7, pc}
        assert(0);
   15724:	2300      	movs	r3, #0
   15726:	461a      	mov	r2, r3
   15728:	4619      	mov	r1, r3
   1572a:	4618      	mov	r0, r3
   1572c:	f7f3 fc12 	bl	8f54 <__assert_func>
    assert(rc == 0);
   15730:	2300      	movs	r3, #0
   15732:	461a      	mov	r2, r3
   15734:	4619      	mov	r1, r3
   15736:	4618      	mov	r0, r3
   15738:	f7f3 fc0c 	bl	8f54 <__assert_func>
    assert(rc == 0);
   1573c:	2300      	movs	r3, #0
   1573e:	461a      	mov	r2, r3
   15740:	4619      	mov	r1, r3
   15742:	4618      	mov	r0, r3
   15744:	f7f3 fc06 	bl	8f54 <__assert_func>
    assert(rc == 0);
   15748:	2300      	movs	r3, #0
   1574a:	461a      	mov	r2, r3
   1574c:	4619      	mov	r1, r3
   1574e:	4618      	mov	r0, r3
   15750:	f7f3 fc00 	bl	8f54 <__assert_func>
   15754:	000229f8 	.word	0x000229f8
   15758:	00022a28 	.word	0x00022a28
   1575c:	00022ac8 	.word	0x00022ac8
   15760:	005fff00 	.word	0x005fff00

00015764 <dw1000_phy_sysclk_XTAL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_XTAL(struct _dw1000_dev_instance_t * inst)
{
   15764:	b510      	push	{r4, lr}
   15766:	b084      	sub	sp, #16
   15768:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   1576a:	2301      	movs	r3, #1
   1576c:	2200      	movs	r2, #0
   1576e:	2136      	movs	r1, #54	; 0x36
   15770:	f7fc fef4 	bl	1255c <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
   15774:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    reg |= (uint8_t) PMSC_CTRL0_SYSCLKS_19M;
   15778:	f043 0301 	orr.w	r3, r3, #1
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   1577c:	2201      	movs	r2, #1
   1577e:	9202      	str	r2, [sp, #8]
   15780:	2200      	movs	r2, #0
   15782:	9300      	str	r3, [sp, #0]
   15784:	9201      	str	r2, [sp, #4]
   15786:	2136      	movs	r1, #54	; 0x36
   15788:	4620      	mov	r0, r4
   1578a:	f7fc ff57 	bl	1263c <dw1000_write_reg>
}
   1578e:	b004      	add	sp, #16
   15790:	bd10      	pop	{r4, pc}

00015792 <dw1000_phy_sysclk_PLL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_PLL(struct _dw1000_dev_instance_t * inst)
{
   15792:	b510      	push	{r4, lr}
   15794:	b084      	sub	sp, #16
   15796:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   15798:	2301      	movs	r3, #1
   1579a:	2200      	movs	r2, #0
   1579c:	2136      	movs	r1, #54	; 0x36
   1579e:	f7fc fedd 	bl	1255c <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
   157a2:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    reg |= (uint8_t) PMSC_CTRL0_SYSCLKS_125M;
   157a6:	f043 0302 	orr.w	r3, r3, #2
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   157aa:	2201      	movs	r2, #1
   157ac:	9202      	str	r2, [sp, #8]
   157ae:	2200      	movs	r2, #0
   157b0:	9300      	str	r3, [sp, #0]
   157b2:	9201      	str	r2, [sp, #4]
   157b4:	2136      	movs	r1, #54	; 0x36
   157b6:	4620      	mov	r0, r4
   157b8:	f7fc ff40 	bl	1263c <dw1000_write_reg>
}
   157bc:	b004      	add	sp, #16
   157be:	bd10      	pop	{r4, pc}

000157c0 <dw1000_phy_txclk_PLL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_txclk_PLL(struct _dw1000_dev_instance_t * inst)
{
   157c0:	b510      	push	{r4, lr}
   157c2:	b084      	sub	sp, #16
   157c4:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   157c6:	2301      	movs	r3, #1
   157c8:	2200      	movs	r2, #0
   157ca:	2136      	movs	r1, #54	; 0x36
   157cc:	f7fc fec6 	bl	1255c <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_TXCLKS_19M & (uint8_t)~PMSC_CTRL0_TXCLKS_125M;
   157d0:	f000 03cf 	and.w	r3, r0, #207	; 0xcf
    reg |= (uint8_t) PMSC_CTRL0_TXCLKS_125M;
   157d4:	f043 0320 	orr.w	r3, r3, #32
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   157d8:	2201      	movs	r2, #1
   157da:	9202      	str	r2, [sp, #8]
   157dc:	2200      	movs	r2, #0
   157de:	9300      	str	r3, [sp, #0]
   157e0:	9201      	str	r2, [sp, #4]
   157e2:	2136      	movs	r1, #54	; 0x36
   157e4:	4620      	mov	r0, r4
   157e6:	f7fc ff29 	bl	1263c <dw1000_write_reg>
}
   157ea:	b004      	add	sp, #16
   157ec:	bd10      	pop	{r4, pc}

000157ee <dw1000_phy_sysclk_LDE>:
 * API to enable running of the LDE algorithm.
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_LDE(struct _dw1000_dev_instance_t * inst){
   157ee:	b530      	push	{r4, r5, lr}
   157f0:	b085      	sub	sp, #20
   157f2:	4604      	mov	r4, r0
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, 0x01, sizeof(uint8_t));
   157f4:	2501      	movs	r5, #1
   157f6:	9502      	str	r5, [sp, #8]
   157f8:	2201      	movs	r2, #1
   157fa:	2300      	movs	r3, #0
   157fc:	e9cd 2300 	strd	r2, r3, [sp]
   15800:	2200      	movs	r2, #0
   15802:	2136      	movs	r1, #54	; 0x36
   15804:	f7fc ff1a 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET + 1 , 0x03, sizeof(uint8_t));
   15808:	9502      	str	r5, [sp, #8]
   1580a:	2203      	movs	r2, #3
   1580c:	2300      	movs	r3, #0
   1580e:	e9cd 2300 	strd	r2, r3, [sp]
   15812:	462a      	mov	r2, r5
   15814:	2136      	movs	r1, #54	; 0x36
   15816:	4620      	mov	r0, r4
   15818:	f7fc ff10 	bl	1263c <dw1000_write_reg>
}
   1581c:	b005      	add	sp, #20
   1581e:	bd30      	pop	{r4, r5, pc}

00015820 <dw1000_phy_sysclk_SEQ>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_SEQ(struct _dw1000_dev_instance_t * inst)
{
   15820:	b510      	push	{r4, lr}
   15822:	b084      	sub	sp, #16
   15824:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   15826:	2301      	movs	r3, #1
   15828:	2200      	movs	r2, #0
   1582a:	2136      	movs	r1, #54	; 0x36
   1582c:	f7fc fe96 	bl	1255c <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
   15830:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   15834:	2301      	movs	r3, #1
   15836:	9302      	str	r3, [sp, #8]
   15838:	2200      	movs	r2, #0
   1583a:	9000      	str	r0, [sp, #0]
   1583c:	9201      	str	r2, [sp, #4]
   1583e:	2136      	movs	r1, #54	; 0x36
   15840:	4620      	mov	r0, r4
   15842:	f7fc fefb 	bl	1263c <dw1000_write_reg>
}
   15846:	b004      	add	sp, #16
   15848:	bd10      	pop	{r4, pc}

0001584a <dw1000_phy_sysclk_ACC>:
 * @param inst   Pointer to dw1000_dev_instance_t.
 * @param mode   Switch to the case specified.
 * @return void
 */
void dw1000_phy_sysclk_ACC(struct _dw1000_dev_instance_t * inst, uint8_t mode)
{
   1584a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1584e:	b084      	sub	sp, #16
   15850:	4605      	mov	r5, r0
   15852:	460f      	mov	r7, r1
    uint8_t pmsc_ctrl_lo = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   15854:	2301      	movs	r3, #1
   15856:	2200      	movs	r2, #0
   15858:	2136      	movs	r1, #54	; 0x36
   1585a:	f7fc fe7f 	bl	1255c <dw1000_read_reg>
   1585e:	4604      	mov	r4, r0
   15860:	fa5f f880 	uxtb.w	r8, r0
    uint8_t pmsc_ctrl_hi = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET + 1, sizeof(uint8_t));
   15864:	2301      	movs	r3, #1
   15866:	461a      	mov	r2, r3
   15868:	2136      	movs	r1, #54	; 0x36
   1586a:	4628      	mov	r0, r5
   1586c:	f7fc fe76 	bl	1255c <dw1000_read_reg>
   15870:	b2c6      	uxtb	r6, r0

    switch(mode){
   15872:	2f01      	cmp	r7, #1
   15874:	d018      	beq.n	158a8 <dw1000_phy_sysclk_ACC+0x5e>
        case true:
            pmsc_ctrl_lo  =  0x48 | (pmsc_ctrl_lo & 0xb3);
            pmsc_ctrl_hi  =  0x80 | pmsc_ctrl_hi;
            break;
        default:
            pmsc_ctrl_lo  =  pmsc_ctrl_lo & 0xb3;
   15876:	f008 03b3 	and.w	r3, r8, #179	; 0xb3
            pmsc_ctrl_hi  =  0x7f & pmsc_ctrl_hi ;
   1587a:	f006 067f 	and.w	r6, r6, #127	; 0x7f
            break;
    }
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, pmsc_ctrl_lo, sizeof(uint8_t));
   1587e:	2701      	movs	r7, #1
   15880:	9702      	str	r7, [sp, #8]
   15882:	2400      	movs	r4, #0
   15884:	9300      	str	r3, [sp, #0]
   15886:	9401      	str	r4, [sp, #4]
   15888:	4622      	mov	r2, r4
   1588a:	2136      	movs	r1, #54	; 0x36
   1588c:	4628      	mov	r0, r5
   1588e:	f7fc fed5 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET+1, pmsc_ctrl_hi, sizeof(uint8_t));
   15892:	9702      	str	r7, [sp, #8]
   15894:	9600      	str	r6, [sp, #0]
   15896:	9401      	str	r4, [sp, #4]
   15898:	463a      	mov	r2, r7
   1589a:	2136      	movs	r1, #54	; 0x36
   1589c:	4628      	mov	r0, r5
   1589e:	f7fc fecd 	bl	1263c <dw1000_write_reg>
}
   158a2:	b004      	add	sp, #16
   158a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            pmsc_ctrl_lo  =  0x48 | (pmsc_ctrl_lo & 0xb3);
   158a8:	f024 044c 	bic.w	r4, r4, #76	; 0x4c
   158ac:	b264      	sxtb	r4, r4
   158ae:	f044 0448 	orr.w	r4, r4, #72	; 0x48
   158b2:	b2e3      	uxtb	r3, r4
            pmsc_ctrl_hi  =  0x80 | pmsc_ctrl_hi;
   158b4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
   158b8:	e7e1      	b.n	1587e <dw1000_phy_sysclk_ACC+0x34>

000158ba <dw1000_phy_disable_sequencing>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_disable_sequencing(struct _dw1000_dev_instance_t * inst)
{
   158ba:	b510      	push	{r4, lr}
   158bc:	b084      	sub	sp, #16
   158be:	4604      	mov	r4, r0
    dw1000_phy_sysclk_XTAL(inst);
   158c0:	f7ff ff50 	bl	15764 <dw1000_phy_sysclk_XTAL>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, sizeof(uint16_t)); // Disable PMSC ctrl of RF and RX clk blocks
   158c4:	2302      	movs	r3, #2
   158c6:	9302      	str	r3, [sp, #8]
   158c8:	2200      	movs	r2, #0
   158ca:	2300      	movs	r3, #0
   158cc:	e9cd 2300 	strd	r2, r3, [sp]
   158d0:	2204      	movs	r2, #4
   158d2:	2136      	movs	r1, #54	; 0x36
   158d4:	4620      	mov	r0, r4
   158d6:	f7fc feb1 	bl	1263c <dw1000_write_reg>
}
   158da:	b004      	add	sp, #16
   158dc:	bd10      	pop	{r4, pc}

000158de <dw1000_phy_config_lde>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @param prf   This is the PRF index (0 or 1) 0 corresponds to 16 and 1 to 64 PRF.
 * @return void
 */
void dw1000_phy_config_lde(struct _dw1000_dev_instance_t * inst, int prfIndex)
{
   158de:	b530      	push	{r4, r5, lr}
   158e0:	b085      	sub	sp, #20
   158e2:	4604      	mov	r4, r0
   158e4:	460d      	mov	r5, r1
    dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1, sizeof(uint8_t)); // 8-bit configuration register
   158e6:	2301      	movs	r3, #1
   158e8:	9302      	str	r3, [sp, #8]
   158ea:	226d      	movs	r2, #109	; 0x6d
   158ec:	2300      	movs	r3, #0
   158ee:	e9cd 2300 	strd	r2, r3, [sp]
   158f2:	f640 0206 	movw	r2, #2054	; 0x806
   158f6:	212e      	movs	r1, #46	; 0x2e
   158f8:	f7fc fea0 	bl	1263c <dw1000_write_reg>

    if(prfIndex)
   158fc:	b175      	cbz	r5, 1591c <dw1000_phy_config_lde+0x3e>
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_64, sizeof(uint16_t)); // 16-bit LDE configuration tuning register
   158fe:	2302      	movs	r3, #2
   15900:	9302      	str	r3, [sp, #8]
   15902:	f240 6207 	movw	r2, #1543	; 0x607
   15906:	2300      	movs	r3, #0
   15908:	e9cd 2300 	strd	r2, r3, [sp]
   1590c:	f641 0206 	movw	r2, #6150	; 0x1806
   15910:	212e      	movs	r1, #46	; 0x2e
   15912:	4620      	mov	r0, r4
   15914:	f7fc fe92 	bl	1263c <dw1000_write_reg>
    else
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_16, sizeof(uint16_t));
}
   15918:	b005      	add	sp, #20
   1591a:	bd30      	pop	{r4, r5, pc}
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_16, sizeof(uint16_t));
   1591c:	2302      	movs	r3, #2
   1591e:	9302      	str	r3, [sp, #8]
   15920:	f241 6207 	movw	r2, #5639	; 0x1607
   15924:	2300      	movs	r3, #0
   15926:	e9cd 2300 	strd	r2, r3, [sp]
   1592a:	f641 0206 	movw	r2, #6150	; 0x1806
   1592e:	212e      	movs	r1, #46	; 0x2e
   15930:	4620      	mov	r0, r4
   15932:	f7fc fe83 	bl	1263c <dw1000_write_reg>
}
   15936:	e7ef      	b.n	15918 <dw1000_phy_config_lde+0x3a>

00015938 <dw1000_phy_config_txrf>:
 * @param inst      Pointer to dw1000_dev_instance_t.
 * @param config    Pointer to dw1000_dev_txrf_config_t.
 * @return void
 */
void dw1000_phy_config_txrf(struct _dw1000_dev_instance_t * inst, struct uwb_dev_txrf_config *config)
{
   15938:	b570      	push	{r4, r5, r6, lr}
   1593a:	b084      	sub	sp, #16
   1593c:	4605      	mov	r5, r0
   1593e:	460c      	mov	r4, r1
    // Configure RF TX PG_DELAY
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly, sizeof(uint8_t));
   15940:	780b      	ldrb	r3, [r1, #0]
   15942:	2201      	movs	r2, #1
   15944:	9202      	str	r2, [sp, #8]
   15946:	2600      	movs	r6, #0
   15948:	9300      	str	r3, [sp, #0]
   1594a:	9601      	str	r6, [sp, #4]
   1594c:	220b      	movs	r2, #11
   1594e:	212a      	movs	r1, #42	; 0x2a
   15950:	f7fc fe74 	bl	1263c <dw1000_write_reg>
    // Configure TX power
    dw1000_write_reg(inst, TX_POWER_ID, 0, config->power, sizeof(uint32_t));
   15954:	6863      	ldr	r3, [r4, #4]
   15956:	2204      	movs	r2, #4
   15958:	9202      	str	r2, [sp, #8]
   1595a:	9300      	str	r3, [sp, #0]
   1595c:	9601      	str	r6, [sp, #4]
   1595e:	4632      	mov	r2, r6
   15960:	211e      	movs	r1, #30
   15962:	4628      	mov	r0, r5
   15964:	f7fc fe6a 	bl	1263c <dw1000_write_reg>
}
   15968:	b004      	add	sp, #16
   1596a:	bd70      	pop	{r4, r5, r6, pc}

0001596c <dw1000_phy_init>:
{
   1596c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1596e:	b085      	sub	sp, #20
   15970:	4604      	mov	r4, r0
    if (txrf_config == NULL)
   15972:	2900      	cmp	r1, #0
   15974:	f000 80af 	beq.w	15ad6 <dw1000_phy_init+0x16a>
   15978:	460e      	mov	r6, r1
        memcpy(&inst->uwb_dev.config.txrf, txrf_config, sizeof(struct uwb_dev_txrf_config));
   1597a:	680a      	ldr	r2, [r1, #0]
   1597c:	684b      	ldr	r3, [r1, #4]
   1597e:	f8c0 2528 	str.w	r2, [r0, #1320]	; 0x528
   15982:	f8c0 352c 	str.w	r3, [r0, #1324]	; 0x52c
    dw1000_softreset(inst);
   15986:	4620      	mov	r0, r4
   15988:	f7fc fef7 	bl	1277a <dw1000_softreset>
    dw1000_phy_sysclk_XTAL(inst);
   1598c:	4620      	mov	r0, r4
   1598e:	f7ff fee9 	bl	15764 <dw1000_phy_sysclk_XTAL>
    dw1000_gpio_config_leds(inst, DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
   15992:	2106      	movs	r1, #6
   15994:	4620      	mov	r0, r4
   15996:	f001 fe39 	bl	1760c <dw1000_gpio_config_leds>
    reg = dw1000_read_reg(inst, EXT_SYNC_ID, EC_CTRL_OFFSET, sizeof(uint8_t));
   1599a:	2301      	movs	r3, #1
   1599c:	2200      	movs	r2, #0
   1599e:	2124      	movs	r1, #36	; 0x24
   159a0:	4620      	mov	r0, r4
   159a2:	f7fc fddb 	bl	1255c <dw1000_read_reg>
   159a6:	b2c0      	uxtb	r0, r0
    reg |= EC_CTRL_PLLLCK;
   159a8:	f040 0004 	orr.w	r0, r0, #4
    dw1000_write_reg(inst, EXT_SYNC_ID, EC_CTRL_OFFSET, reg, sizeof(uint8_t));
   159ac:	2301      	movs	r3, #1
   159ae:	9302      	str	r3, [sp, #8]
   159b0:	2200      	movs	r2, #0
   159b2:	9000      	str	r0, [sp, #0]
   159b4:	9201      	str	r2, [sp, #4]
   159b6:	2124      	movs	r1, #36	; 0x24
   159b8:	4620      	mov	r0, r4
   159ba:	f7fc fe3f 	bl	1263c <dw1000_write_reg>
    otp_addr = (uint32_t) _dw1000_otp_read(inst, OTP_XTRIM_ADDRESS) & 0xffff;    // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
   159be:	211e      	movs	r1, #30
   159c0:	4620      	mov	r0, r4
   159c2:	f001 fe8c 	bl	176de <_dw1000_otp_read>
   159c6:	b285      	uxth	r5, r0
    inst->otp_rev = (otp_addr >> 8) & 0xff;                                               // OTP revision is next byte
   159c8:	f3c0 2007 	ubfx	r0, r0, #8, #8
   159cc:	f8a4 0584 	strh.w	r0, [r4, #1412]	; 0x584
    ldo_tune = _dw1000_otp_read(inst, OTP_LDOTUNE_ADDRESS);
   159d0:	2104      	movs	r1, #4
   159d2:	4620      	mov	r0, r4
   159d4:	f001 fe83 	bl	176de <_dw1000_otp_read>
    if((ldo_tune & 0xFF) != 0){
   159d8:	f010 0fff 	tst.w	r0, #255	; 0xff
   159dc:	d17e      	bne.n	15adc <dw1000_phy_init+0x170>
    inst->part_id = _dw1000_otp_read(inst, OTP_PARTID_ADDRESS);
   159de:	2106      	movs	r1, #6
   159e0:	4620      	mov	r0, r4
   159e2:	f001 fe7c 	bl	176de <_dw1000_otp_read>
   159e6:	f8c4 057c 	str.w	r0, [r4, #1404]	; 0x57c
    inst->lot_id = _dw1000_otp_read(inst, OTP_LOTID_ADDRESS);
   159ea:	2107      	movs	r1, #7
   159ec:	4620      	mov	r0, r4
   159ee:	f001 fe76 	bl	176de <_dw1000_otp_read>
   159f2:	f8c4 0580 	str.w	r0, [r4, #1408]	; 0x580
    inst->otp_vbat = _dw1000_otp_read(inst, OTP_VBAT_ADDRESS);
   159f6:	2108      	movs	r1, #8
   159f8:	4620      	mov	r0, r4
   159fa:	f001 fe70 	bl	176de <_dw1000_otp_read>
   159fe:	f884 0586 	strb.w	r0, [r4, #1414]	; 0x586
    inst->otp_temp = _dw1000_otp_read(inst, OTP_VTEMP_ADDRESS);
   15a02:	2109      	movs	r1, #9
   15a04:	4620      	mov	r0, r4
   15a06:	f001 fe6a 	bl	176de <_dw1000_otp_read>
   15a0a:	f884 0587 	strb.w	r0, [r4, #1415]	; 0x587
    inst->otp_xtal_trim = otp_addr & 0x1F;
   15a0e:	f005 051f 	and.w	r5, r5, #31
   15a12:	f884 5588 	strb.w	r5, [r4, #1416]	; 0x588
    if (inst->otp_xtal_trim && (inst->uwb_dev.config.rx.xtalTrim == 0xff)) {
   15a16:	b11d      	cbz	r5, 15a20 <dw1000_phy_init+0xb4>
   15a18:	f894 251e 	ldrb.w	r2, [r4, #1310]	; 0x51e
   15a1c:	2aff      	cmp	r2, #255	; 0xff
   15a1e:	d06f      	beq.n	15b00 <dw1000_phy_init+0x194>
    reg = (3 << 5) | (inst->uwb_dev.config.rx.xtalTrim & FS_XTALT_MASK);
   15a20:	f994 351e 	ldrsb.w	r3, [r4, #1310]	; 0x51e
   15a24:	f003 031f 	and.w	r3, r3, #31
   15a28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    dw1000_write_reg(inst, FS_CTRL_ID, FS_XTALT_OFFSET, reg, sizeof(uint8_t));
   15a2c:	2201      	movs	r2, #1
   15a2e:	9202      	str	r2, [sp, #8]
   15a30:	9300      	str	r3, [sp, #0]
   15a32:	2300      	movs	r3, #0
   15a34:	9301      	str	r3, [sp, #4]
   15a36:	220e      	movs	r2, #14
   15a38:	212b      	movs	r1, #43	; 0x2b
   15a3a:	4620      	mov	r0, r4
   15a3c:	f7fc fdfe 	bl	1263c <dw1000_write_reg>
    if(inst->uwb_dev.config.LDE_enable)
   15a40:	f894 3531 	ldrb.w	r3, [r4, #1329]	; 0x531
   15a44:	f013 0f04 	tst.w	r3, #4
   15a48:	d15d      	bne.n	15b06 <dw1000_phy_init+0x19a>
    dw1000_phy_sysclk_SEQ(inst);    // Enable clocks for sequencing
   15a4a:	4620      	mov	r0, r4
   15a4c:	f7ff fee8 	bl	15820 <dw1000_phy_sysclk_SEQ>
    reg = dw1000_read_reg(inst, AON_ID, AON_CFG1_OFFSET, sizeof(uint8_t));
   15a50:	2301      	movs	r3, #1
   15a52:	220a      	movs	r2, #10
   15a54:	212c      	movs	r1, #44	; 0x2c
   15a56:	4620      	mov	r0, r4
   15a58:	f7fc fd80 	bl	1255c <dw1000_read_reg>
    reg |= ~AON_CFG1_SMXX;
   15a5c:	f060 0002 	orn	r0, r0, #2
   15a60:	b2c0      	uxtb	r0, r0
    dw1000_write_reg(inst, AON_ID, AON_CFG1_OFFSET, reg, sizeof(uint8_t));
   15a62:	2301      	movs	r3, #1
   15a64:	9302      	str	r3, [sp, #8]
   15a66:	2500      	movs	r5, #0
   15a68:	9000      	str	r0, [sp, #0]
   15a6a:	9501      	str	r5, [sp, #4]
   15a6c:	220a      	movs	r2, #10
   15a6e:	212c      	movs	r1, #44	; 0x2c
   15a70:	4620      	mov	r0, r4
   15a72:	f7fc fde3 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET , AON_WCFG_ONW_RADC, sizeof(uint16_t));
   15a76:	2702      	movs	r7, #2
   15a78:	9702      	str	r7, [sp, #8]
   15a7a:	2201      	movs	r2, #1
   15a7c:	2300      	movs	r3, #0
   15a7e:	e9cd 2300 	strd	r2, r3, [sp]
   15a82:	462a      	mov	r2, r5
   15a84:	212c      	movs	r1, #44	; 0x2c
   15a86:	4620      	mov	r0, r4
   15a88:	f7fc fdd8 	bl	1263c <dw1000_write_reg>
    dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   15a8c:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
   15a90:	9702      	str	r7, [sp, #8]
   15a92:	9300      	str	r3, [sp, #0]
   15a94:	9501      	str	r5, [sp, #4]
   15a96:	f641 0204 	movw	r2, #6148	; 0x1804
   15a9a:	212e      	movs	r1, #46	; 0x2e
   15a9c:	4620      	mov	r0, r4
   15a9e:	f7fc fdcd 	bl	1263c <dw1000_write_reg>
    dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
   15aa2:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   15aa6:	9702      	str	r7, [sp, #8]
   15aa8:	9300      	str	r3, [sp, #0]
   15aaa:	9501      	str	r5, [sp, #4]
   15aac:	462a      	mov	r2, r5
   15aae:	2118      	movs	r1, #24
   15ab0:	4620      	mov	r0, r4
   15ab2:	f7fc fdc3 	bl	1263c <dw1000_write_reg>
    dw1000_phy_config_txrf(inst, txrf_config);
   15ab6:	4631      	mov	r1, r6
   15ab8:	4620      	mov	r0, r4
   15aba:	f7ff ff3d 	bl	15938 <dw1000_phy_config_txrf>
    inst->sys_cfg_reg = dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)) ; // Read sysconfig register
   15abe:	2304      	movs	r3, #4
   15ac0:	462a      	mov	r2, r5
   15ac2:	4619      	mov	r1, r3
   15ac4:	4620      	mov	r0, r4
   15ac6:	f7fc fd49 	bl	1255c <dw1000_read_reg>
   15aca:	f8c4 058c 	str.w	r0, [r4, #1420]	; 0x58c
}
   15ace:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   15ad2:	b005      	add	sp, #20
   15ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txrf_config = &inst->uwb_dev.config.txrf;
   15ad6:	f500 66a5 	add.w	r6, r0, #1320	; 0x528
   15ada:	e754      	b.n	15986 <dw1000_phy_init+0x1a>
        dw1000_write_reg(inst, OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK, sizeof(uint8_t)); // Set load LDE kick bit
   15adc:	2301      	movs	r3, #1
   15ade:	9302      	str	r3, [sp, #8]
   15ae0:	2202      	movs	r2, #2
   15ae2:	2300      	movs	r3, #0
   15ae4:	e9cd 2300 	strd	r2, r3, [sp]
   15ae8:	2212      	movs	r2, #18
   15aea:	212d      	movs	r1, #45	; 0x2d
   15aec:	4620      	mov	r0, r4
   15aee:	f7fc fda5 	bl	1263c <dw1000_write_reg>
        inst->uwb_dev.status.LDO_enabled = 1; // LDO tune must be kicked at wake-up
   15af2:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   15af6:	f043 0320 	orr.w	r3, r3, #32
   15afa:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
   15afe:	e76e      	b.n	159de <dw1000_phy_init+0x72>
        inst->uwb_dev.config.rx.xtalTrim = inst->otp_xtal_trim;
   15b00:	f884 551e 	strb.w	r5, [r4, #1310]	; 0x51e
   15b04:	e78c      	b.n	15a20 <dw1000_phy_init+0xb4>
    dw1000_phy_sysclk_LDE(inst);
   15b06:	4620      	mov	r0, r4
   15b08:	f7ff fe71 	bl	157ee <dw1000_phy_sysclk_LDE>
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD, sizeof(uint16_t)); // Set load LDE kick bit
   15b0c:	2302      	movs	r3, #2
   15b0e:	9302      	str	r3, [sp, #8]
   15b10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   15b14:	2300      	movs	r3, #0
   15b16:	e9cd 2300 	strd	r2, r3, [sp]
   15b1a:	2206      	movs	r2, #6
   15b1c:	212d      	movs	r1, #45	; 0x2d
   15b1e:	4620      	mov	r0, r4
   15b20:	f7fc fd8c 	bl	1263c <dw1000_write_reg>
    dpl_cputime_delay_usecs(120); // Allow time for code to upload (should take up to 120 us)
   15b24:	2078      	movs	r0, #120	; 0x78
   15b26:	f7f6 ff3b 	bl	c9a0 <dpl_cputime_delay_usecs>
    dw1000_phy_sysclk_SEQ(inst); // Enable clocks for sequencing
   15b2a:	4620      	mov	r0, r4
   15b2c:	f7ff fe78 	bl	15820 <dw1000_phy_sysclk_SEQ>
    inst->uwb_dev.status.LDE_enabled = 1;
   15b30:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   15b34:	f043 0310 	orr.w	r3, r3, #16
   15b38:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
}
   15b3c:	e785      	b.n	15a4a <dw1000_phy_init+0xde>

00015b3e <dw1000_phy_rx_reset>:
 *
 * @param inst   Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_rx_reset(struct _dw1000_dev_instance_t * inst)
{
   15b3e:	b570      	push	{r4, r5, r6, lr}
   15b40:	b084      	sub	sp, #16
   15b42:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   15b44:	f500 65ae 	add.w	r5, r0, #1392	; 0x570
   15b48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15b4c:	4628      	mov	r0, r5
   15b4e:	f7f4 ff65 	bl	aa1c <os_mutex_pend>
    dpl_error_t err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
   15b52:	b138      	cbz	r0, 15b64 <dw1000_phy_rx_reset+0x26>
        inst->uwb_dev.status.mtx_error = 1;
   15b54:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   15b58:	f043 0308 	orr.w	r3, r3, #8
   15b5c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    // Clear RX reset
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t));

    err = dpl_mutex_release(&inst->mutex);
    assert(err == DPL_OK);
}
   15b60:	b004      	add	sp, #16
   15b62:	bd70      	pop	{r4, r5, r6, pc}
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX, sizeof(uint8_t));
   15b64:	2601      	movs	r6, #1
   15b66:	9602      	str	r6, [sp, #8]
   15b68:	22e0      	movs	r2, #224	; 0xe0
   15b6a:	2300      	movs	r3, #0
   15b6c:	e9cd 2300 	strd	r2, r3, [sp]
   15b70:	2203      	movs	r2, #3
   15b72:	2136      	movs	r1, #54	; 0x36
   15b74:	4620      	mov	r0, r4
   15b76:	f7fc fd61 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t));
   15b7a:	9602      	str	r6, [sp, #8]
   15b7c:	22f0      	movs	r2, #240	; 0xf0
   15b7e:	2300      	movs	r3, #0
   15b80:	e9cd 2300 	strd	r2, r3, [sp]
   15b84:	2203      	movs	r2, #3
   15b86:	2136      	movs	r1, #54	; 0x36
   15b88:	4620      	mov	r0, r4
   15b8a:	f7fc fd57 	bl	1263c <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   15b8e:	4628      	mov	r0, r5
   15b90:	f7f4 fee8 	bl	a964 <os_mutex_release>
    assert(err == DPL_OK);
   15b94:	2800      	cmp	r0, #0
   15b96:	d0e3      	beq.n	15b60 <dw1000_phy_rx_reset+0x22>
   15b98:	2300      	movs	r3, #0
   15b9a:	461a      	mov	r2, r3
   15b9c:	4619      	mov	r1, r3
   15b9e:	4618      	mov	r0, r3
   15ba0:	f7f3 f9d8 	bl	8f54 <__assert_func>
   15ba4:	0000      	movs	r0, r0
	...

00015ba8 <dw1000_phy_forcetrxoff>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_forcetrxoff(struct _dw1000_dev_instance_t * inst)
{
   15ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
   15baa:	b085      	sub	sp, #20
   15bac:	4605      	mov	r5, r0
    dpl_error_t err;
    struct uwb_mac_interface * cbs = NULL;
    uint32_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
   15bae:	2304      	movs	r3, #4
   15bb0:	2200      	movs	r2, #0
   15bb2:	210e      	movs	r1, #14
   15bb4:	f7fc fcd2 	bl	1255c <dw1000_read_reg>
   15bb8:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   15bba:	f505 66ae 	add.w	r6, r5, #1392	; 0x570
   15bbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15bc2:	4630      	mov	r0, r6
   15bc4:	f7f4 ff2a 	bl	aa1c <os_mutex_pend>
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation

    err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
   15bc8:	b138      	cbz	r0, 15bda <dw1000_phy_forcetrxoff+0x32>
        inst->uwb_dev.status.mtx_error = 1;
   15bca:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   15bce:	f043 0308 	orr.w	r3, r3, #8
   15bd2:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
    if (dpl_sem_get_count(&inst->tx_sem) == 0) {
        err = dpl_sem_release(&inst->tx_sem);
        assert(err == DPL_OK);
        inst->uwb_dev.status.sem_force_released = 1;
    }
}
   15bd6:	b005      	add	sp, #20
   15bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t)) ; // Clear interrupt mask - so we don't get any unwanted events
   15bda:	2704      	movs	r7, #4
   15bdc:	9702      	str	r7, [sp, #8]
   15bde:	2200      	movs	r2, #0
   15be0:	2300      	movs	r3, #0
   15be2:	e9cd 2300 	strd	r2, r3, [sp]
   15be6:	210e      	movs	r1, #14
   15be8:	4628      	mov	r0, r5
   15bea:	f7fc fd27 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TRXOFF, sizeof(uint8_t)) ; // Disable the radio
   15bee:	2301      	movs	r3, #1
   15bf0:	9302      	str	r3, [sp, #8]
   15bf2:	2240      	movs	r2, #64	; 0x40
   15bf4:	2300      	movs	r3, #0
   15bf6:	e9cd 2300 	strd	r2, r3, [sp]
   15bfa:	2200      	movs	r2, #0
   15bfc:	210d      	movs	r1, #13
   15bfe:	4628      	mov	r0, r5
   15c00:	f7fc fd1c 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD| SYS_STATUS_TXBERR), sizeof(uint32_t));
   15c04:	9702      	str	r7, [sp, #8]
   15c06:	a32e      	add	r3, pc, #184	; (adr r3, 15cc0 <dw1000_phy_forcetrxoff+0x118>)
   15c08:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c0c:	e9cd 2300 	strd	r2, r3, [sp]
   15c10:	2200      	movs	r2, #0
   15c12:	210f      	movs	r1, #15
   15c14:	4628      	mov	r0, r5
   15c16:	f7fc fd11 	bl	1263c <dw1000_write_reg>
    if (inst->uwb_dev.config.dblbuffon_enabled)
   15c1a:	f895 3530 	ldrb.w	r3, [r5, #1328]	; 0x530
   15c1e:	f013 0f10 	tst.w	r3, #16
   15c22:	d130      	bne.n	15c86 <dw1000_phy_forcetrxoff+0xde>
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t)); // Restore mask to what it was
   15c24:	2304      	movs	r3, #4
   15c26:	9302      	str	r3, [sp, #8]
   15c28:	2200      	movs	r2, #0
   15c2a:	9400      	str	r4, [sp, #0]
   15c2c:	9201      	str	r2, [sp, #4]
   15c2e:	210e      	movs	r1, #14
   15c30:	4628      	mov	r0, r5
   15c32:	f7fc fd03 	bl	1263c <dw1000_write_reg>
    if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   15c36:	f8d5 4534 	ldr.w	r4, [r5, #1332]	; 0x534
   15c3a:	bb64      	cbnz	r4, 15c96 <dw1000_phy_forcetrxoff+0xee>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   15c3c:	4630      	mov	r0, r6
   15c3e:	f7f4 fe91 	bl	a964 <os_mutex_release>
    assert(err == DPL_OK);
   15c42:	bb70      	cbnz	r0, 15ca2 <dw1000_phy_forcetrxoff+0xfa>
    inst->control.wait4resp_enabled = 0;
   15c44:	f895 35bc 	ldrb.w	r3, [r5, #1468]	; 0x5bc
   15c48:	f36f 0300 	bfc	r3, #0, #1
   15c4c:	f885 35bc 	strb.w	r3, [r5, #1468]	; 0x5bc
    inst->control.rxauto_disable = false;
   15c50:	f895 35bd 	ldrb.w	r3, [r5, #1469]	; 0x5bd
   15c54:	f36f 0382 	bfc	r3, #2, #1
   15c58:	f885 35bd 	strb.w	r3, [r5, #1469]	; 0x5bd
    inst->control.abs_timeout = false;
   15c5c:	b2db      	uxtb	r3, r3
   15c5e:	f36f 03c3 	bfc	r3, #3, #1
   15c62:	f885 35bd 	strb.w	r3, [r5, #1469]	; 0x5bd
   15c66:	f8b5 356e 	ldrh.w	r3, [r5, #1390]	; 0x56e
    if (dpl_sem_get_count(&inst->tx_sem) == 0) {
   15c6a:	2b00      	cmp	r3, #0
   15c6c:	d1b3      	bne.n	15bd6 <dw1000_phy_forcetrxoff+0x2e>
    return (dpl_error_t)os_sem_release(&sem->sem);
   15c6e:	f505 60ad 	add.w	r0, r5, #1384	; 0x568
   15c72:	f7f4 f881 	bl	9d78 <os_sem_release>
        assert(err == DPL_OK);
   15c76:	b9d0      	cbnz	r0, 15cae <dw1000_phy_forcetrxoff+0x106>
        inst->uwb_dev.status.sem_force_released = 1;
   15c78:	f895 350a 	ldrb.w	r3, [r5, #1290]	; 0x50a
   15c7c:	f043 0302 	orr.w	r3, r3, #2
   15c80:	f885 350a 	strb.w	r3, [r5, #1290]	; 0x50a
   15c84:	e7a7      	b.n	15bd6 <dw1000_phy_forcetrxoff+0x2e>
        dw1000_sync_rxbufptrs(inst);
   15c86:	4628      	mov	r0, r5
   15c88:	f7fe f99f 	bl	13fca <dw1000_sync_rxbufptrs>
   15c8c:	e7ca      	b.n	15c24 <dw1000_phy_forcetrxoff+0x7c>
                if(cbs->reset_cb((struct uwb_dev*)inst, cbs)) continue;
   15c8e:	4621      	mov	r1, r4
   15c90:	4628      	mov	r0, r5
   15c92:	4798      	blx	r3
        SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   15c94:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   15c96:	2c00      	cmp	r4, #0
   15c98:	d0d0      	beq.n	15c3c <dw1000_phy_forcetrxoff+0x94>
            if (cbs!=NULL && cbs->reset_cb)
   15c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15c9c:	2b00      	cmp	r3, #0
   15c9e:	d1f6      	bne.n	15c8e <dw1000_phy_forcetrxoff+0xe6>
   15ca0:	e7f8      	b.n	15c94 <dw1000_phy_forcetrxoff+0xec>
    assert(err == DPL_OK);
   15ca2:	2300      	movs	r3, #0
   15ca4:	461a      	mov	r2, r3
   15ca6:	4619      	mov	r1, r3
   15ca8:	4618      	mov	r0, r3
   15caa:	f7f3 f953 	bl	8f54 <__assert_func>
        assert(err == DPL_OK);
   15cae:	2300      	movs	r3, #0
   15cb0:	461a      	mov	r2, r3
   15cb2:	4619      	mov	r1, r3
   15cb4:	4618      	mov	r0, r3
   15cb6:	f7f3 f94d 	bl	8f54 <__assert_func>
   15cba:	bf00      	nop
   15cbc:	f3af 8000 	nop.w
   15cc0:	3433fbf8 	.word	0x3433fbf8
   15cc4:	00000000 	.word	0x00000000

00015cc8 <dw1000_phy_interrupt_mask>:
 * @param bitmask   Sets the events which generates interrupt.
 * @param enable    If set, the interrupts are enabled else they are cleared.
 * @return void
 */
void dw1000_phy_interrupt_mask(struct _dw1000_dev_instance_t * inst, uint32_t bitmask, uint8_t enable)
{
   15cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   15cca:	b085      	sub	sp, #20
   15ccc:	4604      	mov	r4, r0
   15cce:	460d      	mov	r5, r1
   15cd0:	4616      	mov	r6, r2
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   15cd2:	f500 67ae 	add.w	r7, r0, #1392	; 0x570
   15cd6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15cda:	4638      	mov	r0, r7
   15cdc:	f7f4 fe9e 	bl	aa1c <os_mutex_pend>
    // Critical region, atomic lock with mutex
    uint32_t mask;
    dpl_error_t err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
   15ce0:	b138      	cbz	r0, 15cf2 <dw1000_phy_interrupt_mask+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   15ce2:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   15ce6:	f043 0308 	orr.w	r3, r3, #8
   15cea:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    // Critical region, unlock mutex
    err = dpl_mutex_release(&inst->mutex);
    assert(err == DPL_OK);
mtx_error:
    return;
}
   15cee:	b005      	add	sp, #20
   15cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mask = dw1000_read_reg(inst, SYS_MASK_ID, 0, sizeof(uint32_t)) ; // Read register
   15cf2:	2304      	movs	r3, #4
   15cf4:	2200      	movs	r2, #0
   15cf6:	210e      	movs	r1, #14
   15cf8:	4620      	mov	r0, r4
   15cfa:	f7fc fc2f 	bl	1255c <dw1000_read_reg>
    if(enable)
   15cfe:	b1a6      	cbz	r6, 15d2a <dw1000_phy_interrupt_mask+0x62>
        mask |= bitmask ;
   15d00:	4328      	orrs	r0, r5
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t));
   15d02:	2304      	movs	r3, #4
   15d04:	9302      	str	r3, [sp, #8]
   15d06:	2200      	movs	r2, #0
   15d08:	9000      	str	r0, [sp, #0]
   15d0a:	9201      	str	r2, [sp, #4]
   15d0c:	210e      	movs	r1, #14
   15d0e:	4620      	mov	r0, r4
   15d10:	f7fc fc94 	bl	1263c <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   15d14:	4638      	mov	r0, r7
   15d16:	f7f4 fe25 	bl	a964 <os_mutex_release>
    assert(err == DPL_OK);
   15d1a:	2800      	cmp	r0, #0
   15d1c:	d0e7      	beq.n	15cee <dw1000_phy_interrupt_mask+0x26>
   15d1e:	2300      	movs	r3, #0
   15d20:	461a      	mov	r2, r3
   15d22:	4619      	mov	r1, r3
   15d24:	4618      	mov	r0, r3
   15d26:	f7f3 f915 	bl	8f54 <__assert_func>
        mask &= ~bitmask ; // Clear the bit
   15d2a:	ea20 0005 	bic.w	r0, r0, r5
   15d2e:	e7e8      	b.n	15d02 <dw1000_phy_interrupt_mask+0x3a>

00015d30 <dw1000_phy_repeated_frames>:
 * @param rate     Rate at which frames with be repeated in dtu, set to 0 to disable
 * @return void
 */
void
dw1000_phy_repeated_frames(struct _dw1000_dev_instance_t * inst, uint64_t rate)
{
   15d30:	b5f0      	push	{r4, r5, r6, r7, lr}
   15d32:	b085      	sub	sp, #20
   15d34:	4604      	mov	r4, r0
   15d36:	461d      	mov	r5, r3
    int rc;

    if (!rate) {
   15d38:	ea52 0305 	orrs.w	r3, r2, r5
   15d3c:	d114      	bne.n	15d68 <dw1000_phy_repeated_frames+0x38>
        /* Stop sending packets */
        dw1000_write_reg(inst, RF_CONF_ID, 0, 0, sizeof(uint32_t));
   15d3e:	2304      	movs	r3, #4
   15d40:	9302      	str	r3, [sp, #8]
   15d42:	2600      	movs	r6, #0
   15d44:	2700      	movs	r7, #0
   15d46:	e9cd 6700 	strd	r6, r7, [sp]
   15d4a:	2200      	movs	r2, #0
   15d4c:	2128      	movs	r1, #40	; 0x28
   15d4e:	f7fc fc75 	bl	1263c <dw1000_write_reg>
        dw1000_write_reg(inst, DIG_DIAG_ID, DIAG_TMC_OFFSET, 0, sizeof(uint8_t));
   15d52:	2301      	movs	r3, #1
   15d54:	9302      	str	r3, [sp, #8]
   15d56:	e9cd 6700 	strd	r6, r7, [sp]
   15d5a:	2224      	movs	r2, #36	; 0x24
   15d5c:	212f      	movs	r1, #47	; 0x2f
   15d5e:	4620      	mov	r0, r4
   15d60:	f7fc fc6c 	bl	1263c <dw1000_write_reg>
                         (uint8_t)(DIAG_TMC_TX_PSTM), sizeof(uint8_t));

        /* Trigger first frame - Needed?? */
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT, sizeof(uint8_t));
    }
}
   15d64:	b005      	add	sp, #20
   15d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15d68:	4616      	mov	r6, r2
        inst->spi_settings.baudrate = inst->spi_baudrate_low;
   15d6a:	f8d0 3560 	ldr.w	r3, [r0, #1376]	; 0x560
   15d6e:	f8c0 35a0 	str.w	r3, [r0, #1440]	; 0x5a0
        rc = hal_spi_disable(inst->spi_num);
   15d72:	f890 0564 	ldrb.w	r0, [r0, #1380]	; 0x564
   15d76:	f002 f829 	bl	17dcc <hal_spi_disable>
        assert(rc == 0);
   15d7a:	2800      	cmp	r0, #0
   15d7c:	d16e      	bne.n	15e5c <dw1000_phy_repeated_frames+0x12c>
        rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   15d7e:	f204 519c 	addw	r1, r4, #1436	; 0x59c
   15d82:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   15d86:	f001 ffdf 	bl	17d48 <hal_spi_config>
        assert(rc == 0);
   15d8a:	2800      	cmp	r0, #0
   15d8c:	d16c      	bne.n	15e68 <dw1000_phy_repeated_frames+0x138>
        rc = hal_spi_enable(inst->spi_num);
   15d8e:	f894 0564 	ldrb.w	r0, [r4, #1380]	; 0x564
   15d92:	f001 fff5 	bl	17d80 <hal_spi_enable>
        assert(rc == 0);
   15d96:	2800      	cmp	r0, #0
   15d98:	d16c      	bne.n	15e74 <dw1000_phy_repeated_frames+0x144>
        printf("PMSC_ID[0]: %"PRIx32"\n", (uint32_t)dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint32_t)));
   15d9a:	2304      	movs	r3, #4
   15d9c:	2200      	movs	r2, #0
   15d9e:	2136      	movs	r1, #54	; 0x36
   15da0:	4620      	mov	r0, r4
   15da2:	f7fc fbdb 	bl	1255c <dw1000_read_reg>
   15da6:	4601      	mov	r1, r0
   15da8:	4835      	ldr	r0, [pc, #212]	; (15e80 <dw1000_phy_repeated_frames+0x150>)
   15daa:	f7f6 fd83 	bl	c8b4 <printf>
        printf("PMSC_ID[1]: %"PRIx32"\n", (uint32_t)dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t)));
   15dae:	2304      	movs	r3, #4
   15db0:	461a      	mov	r2, r3
   15db2:	2136      	movs	r1, #54	; 0x36
   15db4:	4620      	mov	r0, r4
   15db6:	f7fc fbd1 	bl	1255c <dw1000_read_reg>
   15dba:	4601      	mov	r1, r0
   15dbc:	4831      	ldr	r0, [pc, #196]	; (15e84 <dw1000_phy_repeated_frames+0x154>)
   15dbe:	f7f6 fd79 	bl	c8b4 <printf>
        dw1000_phy_disable_sequencing(inst);
   15dc2:	4620      	mov	r0, r4
   15dc4:	f7ff fd79 	bl	158ba <dw1000_phy_disable_sequencing>
        dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXPLLPOWEN_MASK, sizeof(uint32_t));
   15dc8:	2704      	movs	r7, #4
   15dca:	9702      	str	r7, [sp, #8]
   15dcc:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
   15dd0:	2300      	movs	r3, #0
   15dd2:	e9cd 2300 	strd	r2, r3, [sp]
   15dd6:	2200      	movs	r2, #0
   15dd8:	2128      	movs	r1, #40	; 0x28
   15dda:	4620      	mov	r0, r4
   15ddc:	f7fc fc2e 	bl	1263c <dw1000_write_reg>
        dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXALLEN_MASK, sizeof(uint32_t));
   15de0:	9702      	str	r7, [sp, #8]
   15de2:	4a29      	ldr	r2, [pc, #164]	; (15e88 <dw1000_phy_repeated_frames+0x158>)
   15de4:	2300      	movs	r3, #0
   15de6:	e9cd 2300 	strd	r2, r3, [sp]
   15dea:	2200      	movs	r2, #0
   15dec:	2128      	movs	r1, #40	; 0x28
   15dee:	4620      	mov	r0, r4
   15df0:	f7fc fc24 	bl	1263c <dw1000_write_reg>
        dw1000_phy_sysclk_PLL(inst);
   15df4:	4620      	mov	r0, r4
   15df6:	f7ff fccc 	bl	15792 <dw1000_phy_sysclk_PLL>
        dw1000_phy_txclk_PLL(inst);
   15dfa:	4620      	mov	r0, r4
   15dfc:	f7ff fce0 	bl	157c0 <dw1000_phy_txclk_PLL>
        if ((rate>>8) < 4) {
   15e00:	0a32      	lsrs	r2, r6, #8
   15e02:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   15e06:	0a2b      	lsrs	r3, r5, #8
   15e08:	42ba      	cmp	r2, r7
   15e0a:	f173 0300 	sbcs.w	r3, r3, #0
   15e0e:	d202      	bcs.n	15e16 <dw1000_phy_repeated_frames+0xe6>
            rate = ((uint64_t)4<<8);
   15e10:	f44f 6680 	mov.w	r6, #1024	; 0x400
   15e14:	2500      	movs	r5, #0
        dw1000_write_reg(inst, DX_TIME_ID, 0, rate>>8, sizeof(uint32_t));
   15e16:	2304      	movs	r3, #4
   15e18:	9302      	str	r3, [sp, #8]
   15e1a:	0a36      	lsrs	r6, r6, #8
   15e1c:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
   15e20:	0a2d      	lsrs	r5, r5, #8
   15e22:	9600      	str	r6, [sp, #0]
   15e24:	9501      	str	r5, [sp, #4]
   15e26:	2200      	movs	r2, #0
   15e28:	210a      	movs	r1, #10
   15e2a:	4620      	mov	r0, r4
   15e2c:	f7fc fc06 	bl	1263c <dw1000_write_reg>
        dw1000_write_reg(inst, DIG_DIAG_ID, DIAG_TMC_OFFSET,
   15e30:	2501      	movs	r5, #1
   15e32:	9502      	str	r5, [sp, #8]
   15e34:	2210      	movs	r2, #16
   15e36:	2300      	movs	r3, #0
   15e38:	e9cd 2300 	strd	r2, r3, [sp]
   15e3c:	2224      	movs	r2, #36	; 0x24
   15e3e:	212f      	movs	r1, #47	; 0x2f
   15e40:	4620      	mov	r0, r4
   15e42:	f7fc fbfb 	bl	1263c <dw1000_write_reg>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT, sizeof(uint8_t));
   15e46:	9502      	str	r5, [sp, #8]
   15e48:	2202      	movs	r2, #2
   15e4a:	2300      	movs	r3, #0
   15e4c:	e9cd 2300 	strd	r2, r3, [sp]
   15e50:	2200      	movs	r2, #0
   15e52:	210d      	movs	r1, #13
   15e54:	4620      	mov	r0, r4
   15e56:	f7fc fbf1 	bl	1263c <dw1000_write_reg>
}
   15e5a:	e783      	b.n	15d64 <dw1000_phy_repeated_frames+0x34>
        assert(rc == 0);
   15e5c:	2300      	movs	r3, #0
   15e5e:	461a      	mov	r2, r3
   15e60:	4619      	mov	r1, r3
   15e62:	4618      	mov	r0, r3
   15e64:	f7f3 f876 	bl	8f54 <__assert_func>
        assert(rc == 0);
   15e68:	2300      	movs	r3, #0
   15e6a:	461a      	mov	r2, r3
   15e6c:	4619      	mov	r1, r3
   15e6e:	4618      	mov	r0, r3
   15e70:	f7f3 f870 	bl	8f54 <__assert_func>
        assert(rc == 0);
   15e74:	2300      	movs	r3, #0
   15e76:	461a      	mov	r2, r3
   15e78:	4619      	mov	r1, r3
   15e7a:	4618      	mov	r0, r3
   15e7c:	f7f3 f86a 	bl	8f54 <__assert_func>
   15e80:	00022ae0 	.word	0x00022ae0
   15e84:	00022af4 	.word	0x00022af4
   15e88:	005fff00 	.word	0x005fff00

00015e8c <dw1000_phy_SHR_duration>:
 * @param nlen      The length of the frame to be transmitted/received excluding crc
 * @return uint16_t duration in usec
 */
uint16_t
dw1000_phy_SHR_duration(struct uwb_phy_attributes * attrib)
{
   15e8c:	b508      	push	{r3, lr}
    /* TXsym is represented as a float32_t */
#ifdef __KERNEL__
    duration = f32_to_i32(
        f32_mul(attrib->Tpsym, ui32_to_f32(attrib->nsync + attrib->nsfd)), 3, false);
#else
    duration = ceilf(attrib->Tpsym * (attrib->nsync + attrib->nsfd));
   15e8e:	ed90 0a00 	vldr	s0, [r0]
   15e92:	89c3      	ldrh	r3, [r0, #14]
   15e94:	7b02      	ldrb	r2, [r0, #12]
   15e96:	4413      	add	r3, r2
   15e98:	ee07 3a90 	vmov	s15, r3
   15e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   15ea0:	ee27 0a80 	vmul.f32	s0, s15, s0
   15ea4:	f00a fcce 	bl	20844 <ceilf>
   15ea8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
#endif
    return duration;
}
   15eac:	ee10 3a10 	vmov	r3, s0
   15eb0:	b298      	uxth	r0, r3
   15eb2:	bd08      	pop	{r3, pc}

00015eb4 <dw1000_phy_data_duration>:
 *                  when using Cipher Mode 3 (no payload)
 * @return uint16_t duration in usec
 */
uint16_t
dw1000_phy_data_duration(struct uwb_phy_attributes * attrib, uint16_t nlen)
{
   15eb4:	b508      	push	{r3, lr}
    int32_t total_payload_bits;
    uint16_t duration;
    /* We need to add 48 parity bits for every 330 bits in the data payload (including crc)
     * I.e. for < 330 bits we need 48 parity bits, for > 330 bits we need 48+48 parity bits,
     * for > 660 bits we need 3*48 parity bits, etc. */
    parity_data_bits += ((8*(nlen+2))/330) * 48;
   15eb6:	3102      	adds	r1, #2
   15eb8:	00c9      	lsls	r1, r1, #3
   15eba:	4b12      	ldr	r3, [pc, #72]	; (15f04 <dw1000_phy_data_duration+0x50>)
   15ebc:	fb83 2301 	smull	r2, r3, r3, r1
   15ec0:	11db      	asrs	r3, r3, #7
   15ec2:	3301      	adds	r3, #1
   15ec4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    total_payload_bits = 8*(nlen+2) + parity_data_bits;
   15ec8:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   15ecc:	ee07 3a90 	vmov	s15, r3
        tmp = DPL_FLOAT32_MUL(attrib->Tbsym, DPL_FLOAT32_I32_TO_F32(attrib->nphr));
        tmp = DPL_FLOAT32_ADD(tmp, DPL_FLOAT32_MUL(attrib->Tdsym, DPL_FLOAT32_I32_TO_F32(total_payload_bits)));
        duration = f32_to_i32(DPL_FLOAT32_CEIL(tmp), softfloat_round_max, false);
    }
#else
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
   15ed0:	ed90 7a01 	vldr	s14, [r0, #4]
   15ed4:	7c83      	ldrb	r3, [r0, #18]
   15ed6:	ee00 3a10 	vmov	s0, r3
   15eda:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   15ede:	ee20 0a07 	vmul.f32	s0, s0, s14
                          attrib->Tdsym * total_payload_bits);
   15ee2:	ed90 7a02 	vldr	s14, [r0, #8]
   15ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   15eea:	ee67 7a87 	vmul.f32	s15, s15, s14
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
   15eee:	ee30 0a27 	vadd.f32	s0, s0, s15
   15ef2:	f00a fca7 	bl	20844 <ceilf>
   15ef6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
#endif
    return duration;
}
   15efa:	ee10 3a10 	vmov	r3, s0
   15efe:	b298      	uxth	r0, r3
   15f00:	bd08      	pop	{r3, pc}
   15f02:	bf00      	nop
   15f04:	634c0635 	.word	0x634c0635

00015f08 <dw1000_phy_frame_duration>:
 * @param nlen      The length of the frame to be transmitted/received excluding crc
 * @return uint16_t duration in usec
 */
inline uint16_t
dw1000_phy_frame_duration(struct uwb_phy_attributes * attrib, uint16_t nlen)
{
   15f08:	b570      	push	{r4, r5, r6, lr}
   15f0a:	4605      	mov	r5, r0
   15f0c:	460e      	mov	r6, r1
    return dw1000_phy_SHR_duration(attrib) + dw1000_phy_data_duration(attrib, nlen);
   15f0e:	f7ff ffbd 	bl	15e8c <dw1000_phy_SHR_duration>
   15f12:	4604      	mov	r4, r0
   15f14:	4631      	mov	r1, r6
   15f16:	4628      	mov	r0, r5
   15f18:	f7ff ffcc 	bl	15eb4 <dw1000_phy_data_duration>
   15f1c:	4420      	add	r0, r4
}
   15f1e:	b280      	uxth	r0, r0
   15f20:	bd70      	pop	{r4, r5, r6, pc}

00015f22 <dw1000_phy_txrf_power_value>:
 */
bool
dw1000_phy_txrf_power_value(struct _dw1000_dev_instance_t * inst, uint8_t *reg,
                            dpl_float32_t coarse, dpl_float32_t fine)
{
    int c = DPL_FLOAT32_INT(coarse);
   15f22:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    if (!reg) {
   15f26:	460a      	mov	r2, r1
   15f28:	2900      	cmp	r1, #0
   15f2a:	d05a      	beq.n	15fe2 <dw1000_phy_txrf_power_value+0xc0>
        return false;
    }
    if (DPL_FLOAT32_INT(fine) < 0 || DPL_FLOAT32_INT(fine) > 32) {
   15f2c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
   15f30:	ee17 3a90 	vmov	r3, s15
   15f34:	2b20      	cmp	r3, #32
   15f36:	d856      	bhi.n	15fe6 <dw1000_phy_txrf_power_value+0xc4>
        return false;
    }

    switch (c) {
   15f38:	ee10 3a10 	vmov	r3, s0
   15f3c:	2b12      	cmp	r3, #18
   15f3e:	d854      	bhi.n	15fea <dw1000_phy_txrf_power_value+0xc8>
   15f40:	e8df f003 	tbb	[pc, r3]
   15f44:	3b535345 	.word	0x3b535345
   15f48:	53315353 	.word	0x53315353
   15f4c:	53532753 	.word	0x53532753
   15f50:	1353531d 	.word	0x1353531d
   15f54:	5353      	.short	0x5353
   15f56:	0a          	.byte	0x0a
   15f57:	00          	.byte	0x00
    case(18): *reg = dw1000_power_valuef(DW1000_txrf_config_18db, fine);break;
   15f58:	ee70 0aa0 	vadd.f32	s1, s1, s1
   15f5c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
   15f60:	ee17 3a90 	vmov	r3, s15
   15f64:	7013      	strb	r3, [r2, #0]
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
    default:
        return false;
    }
    return true;
   15f66:	2001      	movs	r0, #1
    case(18): *reg = dw1000_power_valuef(DW1000_txrf_config_18db, fine);break;
   15f68:	4770      	bx	lr
    case(15): *reg = dw1000_power_valuef(DW1000_txrf_config_15db, fine);break;
   15f6a:	ee70 0aa0 	vadd.f32	s1, s1, s1
   15f6e:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   15f72:	ee10 3a90 	vmov	r3, s1
   15f76:	3320      	adds	r3, #32
   15f78:	7013      	strb	r3, [r2, #0]
    return true;
   15f7a:	2001      	movs	r0, #1
    case(15): *reg = dw1000_power_valuef(DW1000_txrf_config_15db, fine);break;
   15f7c:	4770      	bx	lr
    case(12): *reg = dw1000_power_valuef(DW1000_txrf_config_12db, fine);break;
   15f7e:	ee70 0aa0 	vadd.f32	s1, s1, s1
   15f82:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   15f86:	ee10 3a90 	vmov	r3, s1
   15f8a:	3340      	adds	r3, #64	; 0x40
   15f8c:	7013      	strb	r3, [r2, #0]
    return true;
   15f8e:	2001      	movs	r0, #1
    case(12): *reg = dw1000_power_valuef(DW1000_txrf_config_12db, fine);break;
   15f90:	4770      	bx	lr
    case(9):  *reg = dw1000_power_valuef(DW1000_txrf_config_9db, fine);break;
   15f92:	ee70 0aa0 	vadd.f32	s1, s1, s1
   15f96:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   15f9a:	ee10 3a90 	vmov	r3, s1
   15f9e:	3360      	adds	r3, #96	; 0x60
   15fa0:	7013      	strb	r3, [r2, #0]
    return true;
   15fa2:	2001      	movs	r0, #1
    case(9):  *reg = dw1000_power_valuef(DW1000_txrf_config_9db, fine);break;
   15fa4:	4770      	bx	lr
    case(6):  *reg = dw1000_power_valuef(DW1000_txrf_config_6db, fine);break;
   15fa6:	ee70 0aa0 	vadd.f32	s1, s1, s1
   15faa:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   15fae:	ee10 3a90 	vmov	r3, s1
   15fb2:	3b80      	subs	r3, #128	; 0x80
   15fb4:	7013      	strb	r3, [r2, #0]
    return true;
   15fb6:	2001      	movs	r0, #1
    case(6):  *reg = dw1000_power_valuef(DW1000_txrf_config_6db, fine);break;
   15fb8:	4770      	bx	lr
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
   15fba:	ee70 0aa0 	vadd.f32	s1, s1, s1
   15fbe:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   15fc2:	ee10 3a90 	vmov	r3, s1
   15fc6:	3b60      	subs	r3, #96	; 0x60
   15fc8:	7013      	strb	r3, [r2, #0]
    return true;
   15fca:	2001      	movs	r0, #1
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
   15fcc:	4770      	bx	lr
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
   15fce:	ee70 0aa0 	vadd.f32	s1, s1, s1
   15fd2:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   15fd6:	ee10 3a90 	vmov	r3, s1
   15fda:	3b40      	subs	r3, #64	; 0x40
   15fdc:	7013      	strb	r3, [r2, #0]
    return true;
   15fde:	2001      	movs	r0, #1
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
   15fe0:	4770      	bx	lr
        return false;
   15fe2:	2000      	movs	r0, #0
   15fe4:	4770      	bx	lr
        return false;
   15fe6:	2000      	movs	r0, #0
   15fe8:	4770      	bx	lr
    switch (c) {
   15fea:	2000      	movs	r0, #0
}
   15fec:	4770      	bx	lr

00015fee <dw1000_phy_event_cnt_ctrl>:
 * @param reset   If true, reset counters
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
dw1000_phy_event_cnt_ctrl(struct _dw1000_dev_instance_t *inst, bool enable, bool reset)
{
   15fee:	b530      	push	{r4, r5, lr}
   15ff0:	b085      	sub	sp, #20
   15ff2:	4604      	mov	r4, r0
   15ff4:	460d      	mov	r5, r1
    if (reset) {
   15ff6:	b97a      	cbnz	r2, 16018 <dw1000_phy_event_cnt_ctrl+0x2a>
        dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, EVC_CLR, sizeof(uint32_t));
    }

    /* Intentionally writing 32 bits here and above as the register requires at least 16 bits
     * written to take effect. */
    dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, (enable) ? EVC_EN : 0, sizeof(uint32_t));
   15ff8:	b1cd      	cbz	r5, 1602e <dw1000_phy_event_cnt_ctrl+0x40>
   15ffa:	2201      	movs	r2, #1
   15ffc:	2300      	movs	r3, #0
   15ffe:	2104      	movs	r1, #4
   16000:	9102      	str	r1, [sp, #8]
   16002:	e9cd 2300 	strd	r2, r3, [sp]
   16006:	2200      	movs	r2, #0
   16008:	212f      	movs	r1, #47	; 0x2f
   1600a:	4620      	mov	r0, r4
   1600c:	f7fc fb16 	bl	1263c <dw1000_write_reg>
    return inst->uwb_dev.status;
}
   16010:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   16014:	b005      	add	sp, #20
   16016:	bd30      	pop	{r4, r5, pc}
        dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, EVC_CLR, sizeof(uint32_t));
   16018:	2304      	movs	r3, #4
   1601a:	9302      	str	r3, [sp, #8]
   1601c:	2202      	movs	r2, #2
   1601e:	2300      	movs	r3, #0
   16020:	e9cd 2300 	strd	r2, r3, [sp]
   16024:	2200      	movs	r2, #0
   16026:	212f      	movs	r1, #47	; 0x2f
   16028:	f7fc fb08 	bl	1263c <dw1000_write_reg>
   1602c:	e7e4      	b.n	15ff8 <dw1000_phy_event_cnt_ctrl+0xa>
    dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, (enable) ? EVC_EN : 0, sizeof(uint32_t));
   1602e:	2200      	movs	r2, #0
   16030:	2300      	movs	r3, #0
   16032:	e7e4      	b.n	15ffe <dw1000_phy_event_cnt_ctrl+0x10>

00016034 <dw1000_phy_event_cnt_read>:
 * @param res     Pointer to struct uwb_dev_evcnt
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
dw1000_phy_event_cnt_read(struct _dw1000_dev_instance_t *inst, struct uwb_dev_evcnt *res)
{
   16034:	b530      	push	{r4, r5, lr}
   16036:	b083      	sub	sp, #12
   16038:	4605      	mov	r5, r0
    if (!res) {
   1603a:	b319      	cbz	r1, 16084 <dw1000_phy_event_cnt_read+0x50>
   1603c:	460c      	mov	r4, r1
        return inst->uwb_dev.status;
    }
    /* Read first 6 counter registers in one go */
    dw1000_read(inst, DIG_DIAG_ID, EVC_PHE_OFFSET, (uint8_t*)res,
   1603e:	2318      	movs	r3, #24
   16040:	9300      	str	r3, [sp, #0]
   16042:	460b      	mov	r3, r1
   16044:	2204      	movs	r2, #4
   16046:	212f      	movs	r1, #47	; 0x2f
   16048:	f7fc f9be 	bl	123c8 <dw1000_read>
                offsetof(struct uwb_dev_evcnt, event_count6));
    /* Apply masks */
    res->event_count0 &= ((EVC_RSE_MASK << 16) | EVC_PHE_MASK);
   1604c:	6823      	ldr	r3, [r4, #0]
   1604e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   16052:	6023      	str	r3, [r4, #0]
    res->event_count1 &= ((EVC_FCE_MASK << 16) | EVC_FCG_MASK);
   16054:	6863      	ldr	r3, [r4, #4]
   16056:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1605a:	6063      	str	r3, [r4, #4]
    res->event_count2 &= ((EVC_OVR_MASK << 16) | EVC_FFR_MASK);
   1605c:	68a3      	ldr	r3, [r4, #8]
   1605e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   16062:	60a3      	str	r3, [r4, #8]
    res->event_count3 &= ((EVC_PTO_MASK << 16) | EVC_STO_MASK);
   16064:	68e3      	ldr	r3, [r4, #12]
   16066:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1606a:	60e3      	str	r3, [r4, #12]
    res->event_count4 &= ((EVC_TXFS_MASK << 16) | EVC_FWTO_MASK);
   1606c:	6923      	ldr	r3, [r4, #16]
   1606e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   16072:	6123      	str	r3, [r4, #16]
    res->event_count5 &= ((EVC_TPW_MASK << 16) | EVC_HPW_MASK);
   16074:	6963      	ldr	r3, [r4, #20]
   16076:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1607a:	6163      	str	r3, [r4, #20]
    return inst->uwb_dev.status;
   1607c:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
}
   16080:	b003      	add	sp, #12
   16082:	bd30      	pop	{r4, r5, pc}
        return inst->uwb_dev.status;
   16084:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   16088:	e7fa      	b.n	16080 <dw1000_phy_event_cnt_read+0x4c>
	...

0001608c <dw1000_pkg_init>:
 *
 * @param void
 * @return void
 */
void dw1000_pkg_init(void)
{
   1608c:	b508      	push	{r3, lr}
#if defined(MYNEWT)

#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %lu,\"msg\": \"dw1000_pkg_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   1608e:	f7f6 fc77 	bl	c980 <dpl_cputime_get32>
   16092:	4601      	mov	r1, r0
   16094:	4805      	ldr	r0, [pc, #20]	; (160ac <dw1000_pkg_init+0x20>)
   16096:	f7f6 fc0d 	bl	c8b4 <printf>
#endif

#if MYNEWT_VAL(DW1000_DEVICE_0)
    dw1000_dev_config(hal_dw1000_inst(0));
   1609a:	2000      	movs	r0, #0
   1609c:	f7fc ff14 	bl	12ec8 <hal_dw1000_inst>
   160a0:	f7fc fcd8 	bl	12a54 <dw1000_dev_config>
        dw1000_dev_config((struct _dw1000_dev_instance_t*)dev);
    }
#endif

#if MYNEWT_VAL(DW1000_CLI)
    dw1000_cli_register();
   160a4:	f001 faa8 	bl	175f8 <dw1000_cli_register>
#endif
}
   160a8:	bd08      	pop	{r3, pc}
   160aa:	bf00      	nop
   160ac:	00022b08 	.word	0x00022b08

000160b0 <dw1000_pkg_down>:

int dw1000_pkg_down(int reason)
{
   160b0:	b510      	push	{r4, lr}
   160b2:	4604      	mov	r4, r0
    struct os_dev *dev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"dw1000_pkg_down\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   160b4:	f7f6 fc64 	bl	c980 <dpl_cputime_get32>
   160b8:	4601      	mov	r1, r0
   160ba:	480d      	ldr	r0, [pc, #52]	; (160f0 <dw1000_pkg_down+0x40>)
   160bc:	f7f6 fbfa 	bl	c8b4 <printf>
#endif

    dev = os_dev_lookup("dw1000_0");
   160c0:	480c      	ldr	r0, [pc, #48]	; (160f4 <dw1000_pkg_down+0x44>)
   160c2:	f7f3 fa13 	bl	94ec <os_dev_lookup>
    if (dev) {
   160c6:	b108      	cbz	r0, 160cc <dw1000_pkg_down+0x1c>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   160c8:	f7fc fe8c 	bl	12de4 <dw1000_dev_deinit>
    }
    dev = os_dev_lookup("dw1000_1");
   160cc:	480a      	ldr	r0, [pc, #40]	; (160f8 <dw1000_pkg_down+0x48>)
   160ce:	f7f3 fa0d 	bl	94ec <os_dev_lookup>
    if (dev) {
   160d2:	b108      	cbz	r0, 160d8 <dw1000_pkg_down+0x28>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   160d4:	f7fc fe86 	bl	12de4 <dw1000_dev_deinit>
    }
    dev = os_dev_lookup("dw1000_2");
   160d8:	4808      	ldr	r0, [pc, #32]	; (160fc <dw1000_pkg_down+0x4c>)
   160da:	f7f3 fa07 	bl	94ec <os_dev_lookup>
    if (dev) {
   160de:	b108      	cbz	r0, 160e4 <dw1000_pkg_down+0x34>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   160e0:	f7fc fe80 	bl	12de4 <dw1000_dev_deinit>
    }
#if MYNEWT_VAL(DW1000_CLI)
    dw1000_cli_down(reason);
   160e4:	4620      	mov	r0, r4
   160e6:	f001 fa8f 	bl	17608 <dw1000_cli_down>
#endif
    return 0;
}
   160ea:	2000      	movs	r0, #0
   160ec:	bd10      	pop	{r4, pc}
   160ee:	bf00      	nop
   160f0:	00022b34 	.word	0x00022b34
   160f4:	00022834 	.word	0x00022834
   160f8:	00022b60 	.word	0x00022b60
   160fc:	00022b6c 	.word	0x00022b6c

00016100 <fctrl_ledgend>:
    return b;
}

static void
fctrl_ledgend(struct streamer *streamer)
{
   16100:	b510      	push	{r4, lr}
   16102:	4604      	mov	r4, r0
    streamer_printf(streamer, "   D=Data, A=Ack, M=Mac\n");
   16104:	4909      	ldr	r1, [pc, #36]	; (1612c <fctrl_ledgend+0x2c>)
   16106:	f7fa fd3c 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, "   Secr: Security enabled, fPnd: Frame pending, ACKr: Ack requested, PANc: PANID Compress\n");
   1610a:	4909      	ldr	r1, [pc, #36]	; (16130 <fctrl_ledgend+0x30>)
   1610c:	4620      	mov	r0, r4
   1610e:	f7fa fd38 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, "   Dst: No=no dest addres, Rs=Reserved, 16-bit address, 64-bit address\n");
   16112:	4908      	ldr	r1, [pc, #32]	; (16134 <fctrl_ledgend+0x34>)
   16114:	4620      	mov	r0, r4
   16116:	f7fa fd34 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, "   Frame version: I-IEEE 802.15.4, I2003-IEEE 802.15.4-2003, iFv-Invalid Frame Version\n");
   1611a:	4907      	ldr	r1, [pc, #28]	; (16138 <fctrl_ledgend+0x38>)
   1611c:	4620      	mov	r0, r4
   1611e:	f7fa fd30 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, "   Src: No=no src addres, Rs=Reserved, 16-bit address, 64-bit address\n");
   16122:	4906      	ldr	r1, [pc, #24]	; (1613c <fctrl_ledgend+0x3c>)
   16124:	4620      	mov	r0, r4
   16126:	f7fa fd2c 	bl	10b82 <streamer_printf>
}
   1612a:	bd10      	pop	{r4, pc}
   1612c:	00022b78 	.word	0x00022b78
   16130:	00022b94 	.word	0x00022b94
   16134:	00022bf0 	.word	0x00022bf0
   16138:	00022c38 	.word	0x00022c38
   1613c:	00022c90 	.word	0x00022c90

00016140 <dw1000_cli_too_few_args>:
#endif

#ifndef __KERNEL__
static void
dw1000_cli_too_few_args(struct streamer *streamer)
{
   16140:	b508      	push	{r3, lr}
    streamer_printf(streamer, "Too few args\n");
   16142:	4902      	ldr	r1, [pc, #8]	; (1614c <dw1000_cli_too_few_args+0xc>)
   16144:	f7fa fd1d 	bl	10b82 <streamer_printf>
}
   16148:	bd08      	pop	{r3, pc}
   1614a:	bf00      	nop
   1614c:	00022cd8 	.word	0x00022cd8

00016150 <fctrl_to_string>:
{
   16150:	b570      	push	{r4, r5, r6, lr}
   16152:	4605      	mov	r5, r0
    memset(b,0,sizeof(b));
   16154:	2228      	movs	r2, #40	; 0x28
   16156:	2100      	movs	r1, #0
   16158:	489c      	ldr	r0, [pc, #624]	; (163cc <fctrl_to_string+0x27c>)
   1615a:	f7f5 ff98 	bl	c08e <memset>
    if ((s & 0x0007) == 0x0001) bp += snprintf(bp,sizeof(b)-(bp-b), "D|");  /* Data */
   1615e:	f005 0607 	and.w	r6, r5, #7
   16162:	2e01      	cmp	r6, #1
   16164:	d04e      	beq.n	16204 <fctrl_to_string+0xb4>
    char *bp = b;
   16166:	4c99      	ldr	r4, [pc, #612]	; (163cc <fctrl_to_string+0x27c>)
    if ((s & 0x0007) == 0x0002) bp += snprintf(bp,sizeof(b)-(bp-b), "A|");  /* Acknowledge */
   16168:	2e02      	cmp	r6, #2
   1616a:	d054      	beq.n	16216 <fctrl_to_string+0xc6>
    if ((s & 0x0007) == 0x0003) bp += snprintf(bp,sizeof(b)-(bp-b), "M|");  /* Reserved */
   1616c:	2e03      	cmp	r6, #3
   1616e:	d05c      	beq.n	1622a <fctrl_to_string+0xda>
    if ((s & 0x0007) == 0x0004) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   16170:	2e04      	cmp	r6, #4
   16172:	d064      	beq.n	1623e <fctrl_to_string+0xee>
    if ((s & 0x0007) == 0x0005) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   16174:	2e05      	cmp	r6, #5
   16176:	d06c      	beq.n	16252 <fctrl_to_string+0x102>
    if ((s & 0x0007) == 0x0006) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   16178:	2e06      	cmp	r6, #6
   1617a:	d074      	beq.n	16266 <fctrl_to_string+0x116>
    if ((s & 0x0007) == 0x0007) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   1617c:	2e07      	cmp	r6, #7
   1617e:	d07c      	beq.n	1627a <fctrl_to_string+0x12a>
    if ((s & 0x0008) == 0x0008) bp += snprintf(bp,sizeof(b)-(bp-b), "Secr|"); /* Security Enabeled */
   16180:	f015 0f08 	tst.w	r5, #8
   16184:	f040 8083 	bne.w	1628e <fctrl_to_string+0x13e>
    if ((s & 0x0010) == 0x0010) bp += snprintf(bp,sizeof(b)-(bp-b), "fPnd|"); /* Frame Pending */
   16188:	f015 0f10 	tst.w	r5, #16
   1618c:	f040 8089 	bne.w	162a2 <fctrl_to_string+0x152>
    if ((s & 0x0020) == 0x0020) bp += snprintf(bp,sizeof(b)-(bp-b), "ACKr|"); /* Ack requested */
   16190:	f015 0f20 	tst.w	r5, #32
   16194:	f040 808f 	bne.w	162b6 <fctrl_to_string+0x166>
    if ((s & 0x0040) == 0x0040) bp += snprintf(bp,sizeof(b)-(bp-b), "PANc|"); /* PANID Compress */
   16198:	f015 0f40 	tst.w	r5, #64	; 0x40
   1619c:	f040 8095 	bne.w	162ca <fctrl_to_string+0x17a>
    if ((s & 0x0C00) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "DstNo|"); /* No destination address */
   161a0:	f415 6640 	ands.w	r6, r5, #3072	; 0xc00
   161a4:	f000 809b 	beq.w	162de <fctrl_to_string+0x18e>
    if ((s & 0x0C00) == 0x0400) bp += snprintf(bp,sizeof(b)-(bp-b), "DstRs|"); /* Reserved */
   161a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   161ac:	f000 80a1 	beq.w	162f2 <fctrl_to_string+0x1a2>
    if ((s & 0x0C00) == 0x0800) bp += snprintf(bp,sizeof(b)-(bp-b), "Dst16|"); /* 16-bit destination address */
   161b0:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
   161b4:	f000 80a7 	beq.w	16306 <fctrl_to_string+0x1b6>
    if ((s & 0x0C00) == 0x0C00) bp += snprintf(bp,sizeof(b)-(bp-b), "Dst64|"); /* 64-bit destination address */
   161b8:	f5b6 6f40 	cmp.w	r6, #3072	; 0xc00
   161bc:	f000 80ad 	beq.w	1631a <fctrl_to_string+0x1ca>
    if ((s & 0x3000) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "I2003|");
   161c0:	f415 5640 	ands.w	r6, r5, #12288	; 0x3000
   161c4:	f000 80b3 	beq.w	1632e <fctrl_to_string+0x1de>
    if ((s & 0x3000) == 0x1000) bp += snprintf(bp,sizeof(b)-(bp-b), "I|");
   161c8:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   161cc:	f000 80b9 	beq.w	16342 <fctrl_to_string+0x1f2>
    if ((s & 0x3000) == 0x2000) bp += snprintf(bp,sizeof(b)-(bp-b), "iFv|"); /* Invalid frame version */
   161d0:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
   161d4:	f000 80bf 	beq.w	16356 <fctrl_to_string+0x206>
    if ((s & 0x3000) == 0x3000) bp += snprintf(bp,sizeof(b)-(bp-b), "iFv|");
   161d8:	f5b6 5f40 	cmp.w	r6, #12288	; 0x3000
   161dc:	f000 80c5 	beq.w	1636a <fctrl_to_string+0x21a>
    if ((s & 0xC000) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "SrcNo"); /* No destination address */
   161e0:	f415 4540 	ands.w	r5, r5, #49152	; 0xc000
   161e4:	f000 80cb 	beq.w	1637e <fctrl_to_string+0x22e>
    if ((s & 0xC000) == 0x4000) bp += snprintf(bp,sizeof(b)-(bp-b), "SrcRs"); /* Reserved */
   161e8:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
   161ec:	f000 80d1 	beq.w	16392 <fctrl_to_string+0x242>
    if ((s & 0xC000) == 0x8000) bp += snprintf(bp,sizeof(b)-(bp-b), "Src16"); /* 16-bit destination address */
   161f0:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   161f4:	f000 80d7 	beq.w	163a6 <fctrl_to_string+0x256>
    if ((s & 0xC000) == 0xC000) bp += snprintf(bp,sizeof(b)-(bp-b), "Src64"); /* 64-bit destination address */
   161f8:	f5b5 4f40 	cmp.w	r5, #49152	; 0xc000
   161fc:	f000 80dd 	beq.w	163ba <fctrl_to_string+0x26a>
}
   16200:	4872      	ldr	r0, [pc, #456]	; (163cc <fctrl_to_string+0x27c>)
   16202:	bd70      	pop	{r4, r5, r6, pc}
    if ((s & 0x0007) == 0x0001) bp += snprintf(bp,sizeof(b)-(bp-b), "D|");  /* Data */
   16204:	4a71      	ldr	r2, [pc, #452]	; (163cc <fctrl_to_string+0x27c>)
   16206:	4b72      	ldr	r3, [pc, #456]	; (163d0 <fctrl_to_string+0x280>)
   16208:	681b      	ldr	r3, [r3, #0]
   1620a:	4614      	mov	r4, r2
   1620c:	f824 3b02 	strh.w	r3, [r4], #2
   16210:	0c1b      	lsrs	r3, r3, #16
   16212:	7093      	strb	r3, [r2, #2]
   16214:	e7a8      	b.n	16168 <fctrl_to_string+0x18>
    if ((s & 0x0007) == 0x0002) bp += snprintf(bp,sizeof(b)-(bp-b), "A|");  /* Acknowledge */
   16216:	496d      	ldr	r1, [pc, #436]	; (163cc <fctrl_to_string+0x27c>)
   16218:	1a61      	subs	r1, r4, r1
   1621a:	4a6e      	ldr	r2, [pc, #440]	; (163d4 <fctrl_to_string+0x284>)
   1621c:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   16220:	4620      	mov	r0, r4
   16222:	f7f6 fb76 	bl	c912 <snprintf>
   16226:	4404      	add	r4, r0
   16228:	e7a0      	b.n	1616c <fctrl_to_string+0x1c>
    if ((s & 0x0007) == 0x0003) bp += snprintf(bp,sizeof(b)-(bp-b), "M|");  /* Reserved */
   1622a:	4968      	ldr	r1, [pc, #416]	; (163cc <fctrl_to_string+0x27c>)
   1622c:	1a61      	subs	r1, r4, r1
   1622e:	4a6a      	ldr	r2, [pc, #424]	; (163d8 <fctrl_to_string+0x288>)
   16230:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   16234:	4620      	mov	r0, r4
   16236:	f7f6 fb6c 	bl	c912 <snprintf>
   1623a:	4404      	add	r4, r0
   1623c:	e798      	b.n	16170 <fctrl_to_string+0x20>
    if ((s & 0x0007) == 0x0004) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   1623e:	4963      	ldr	r1, [pc, #396]	; (163cc <fctrl_to_string+0x27c>)
   16240:	1a61      	subs	r1, r4, r1
   16242:	4a66      	ldr	r2, [pc, #408]	; (163dc <fctrl_to_string+0x28c>)
   16244:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   16248:	4620      	mov	r0, r4
   1624a:	f7f6 fb62 	bl	c912 <snprintf>
   1624e:	4404      	add	r4, r0
   16250:	e790      	b.n	16174 <fctrl_to_string+0x24>
    if ((s & 0x0007) == 0x0005) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   16252:	495e      	ldr	r1, [pc, #376]	; (163cc <fctrl_to_string+0x27c>)
   16254:	1a61      	subs	r1, r4, r1
   16256:	4a61      	ldr	r2, [pc, #388]	; (163dc <fctrl_to_string+0x28c>)
   16258:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1625c:	4620      	mov	r0, r4
   1625e:	f7f6 fb58 	bl	c912 <snprintf>
   16262:	4404      	add	r4, r0
   16264:	e788      	b.n	16178 <fctrl_to_string+0x28>
    if ((s & 0x0007) == 0x0006) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   16266:	4959      	ldr	r1, [pc, #356]	; (163cc <fctrl_to_string+0x27c>)
   16268:	1a61      	subs	r1, r4, r1
   1626a:	4a5c      	ldr	r2, [pc, #368]	; (163dc <fctrl_to_string+0x28c>)
   1626c:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   16270:	4620      	mov	r0, r4
   16272:	f7f6 fb4e 	bl	c912 <snprintf>
   16276:	4404      	add	r4, r0
   16278:	e780      	b.n	1617c <fctrl_to_string+0x2c>
    if ((s & 0x0007) == 0x0007) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   1627a:	4954      	ldr	r1, [pc, #336]	; (163cc <fctrl_to_string+0x27c>)
   1627c:	1a61      	subs	r1, r4, r1
   1627e:	4a57      	ldr	r2, [pc, #348]	; (163dc <fctrl_to_string+0x28c>)
   16280:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   16284:	4620      	mov	r0, r4
   16286:	f7f6 fb44 	bl	c912 <snprintf>
   1628a:	4404      	add	r4, r0
   1628c:	e778      	b.n	16180 <fctrl_to_string+0x30>
    if ((s & 0x0008) == 0x0008) bp += snprintf(bp,sizeof(b)-(bp-b), "Secr|"); /* Security Enabeled */
   1628e:	494f      	ldr	r1, [pc, #316]	; (163cc <fctrl_to_string+0x27c>)
   16290:	1a61      	subs	r1, r4, r1
   16292:	4a53      	ldr	r2, [pc, #332]	; (163e0 <fctrl_to_string+0x290>)
   16294:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   16298:	4620      	mov	r0, r4
   1629a:	f7f6 fb3a 	bl	c912 <snprintf>
   1629e:	4404      	add	r4, r0
   162a0:	e772      	b.n	16188 <fctrl_to_string+0x38>
    if ((s & 0x0010) == 0x0010) bp += snprintf(bp,sizeof(b)-(bp-b), "fPnd|"); /* Frame Pending */
   162a2:	494a      	ldr	r1, [pc, #296]	; (163cc <fctrl_to_string+0x27c>)
   162a4:	1a61      	subs	r1, r4, r1
   162a6:	4a4f      	ldr	r2, [pc, #316]	; (163e4 <fctrl_to_string+0x294>)
   162a8:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   162ac:	4620      	mov	r0, r4
   162ae:	f7f6 fb30 	bl	c912 <snprintf>
   162b2:	4404      	add	r4, r0
   162b4:	e76c      	b.n	16190 <fctrl_to_string+0x40>
    if ((s & 0x0020) == 0x0020) bp += snprintf(bp,sizeof(b)-(bp-b), "ACKr|"); /* Ack requested */
   162b6:	4945      	ldr	r1, [pc, #276]	; (163cc <fctrl_to_string+0x27c>)
   162b8:	1a61      	subs	r1, r4, r1
   162ba:	4a4b      	ldr	r2, [pc, #300]	; (163e8 <fctrl_to_string+0x298>)
   162bc:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   162c0:	4620      	mov	r0, r4
   162c2:	f7f6 fb26 	bl	c912 <snprintf>
   162c6:	4404      	add	r4, r0
   162c8:	e766      	b.n	16198 <fctrl_to_string+0x48>
    if ((s & 0x0040) == 0x0040) bp += snprintf(bp,sizeof(b)-(bp-b), "PANc|"); /* PANID Compress */
   162ca:	4940      	ldr	r1, [pc, #256]	; (163cc <fctrl_to_string+0x27c>)
   162cc:	1a61      	subs	r1, r4, r1
   162ce:	4a47      	ldr	r2, [pc, #284]	; (163ec <fctrl_to_string+0x29c>)
   162d0:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   162d4:	4620      	mov	r0, r4
   162d6:	f7f6 fb1c 	bl	c912 <snprintf>
   162da:	4404      	add	r4, r0
   162dc:	e760      	b.n	161a0 <fctrl_to_string+0x50>
    if ((s & 0x0C00) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "DstNo|"); /* No destination address */
   162de:	493b      	ldr	r1, [pc, #236]	; (163cc <fctrl_to_string+0x27c>)
   162e0:	1a61      	subs	r1, r4, r1
   162e2:	4a43      	ldr	r2, [pc, #268]	; (163f0 <fctrl_to_string+0x2a0>)
   162e4:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   162e8:	4620      	mov	r0, r4
   162ea:	f7f6 fb12 	bl	c912 <snprintf>
   162ee:	4404      	add	r4, r0
   162f0:	e75a      	b.n	161a8 <fctrl_to_string+0x58>
    if ((s & 0x0C00) == 0x0400) bp += snprintf(bp,sizeof(b)-(bp-b), "DstRs|"); /* Reserved */
   162f2:	4936      	ldr	r1, [pc, #216]	; (163cc <fctrl_to_string+0x27c>)
   162f4:	1a61      	subs	r1, r4, r1
   162f6:	4a3f      	ldr	r2, [pc, #252]	; (163f4 <fctrl_to_string+0x2a4>)
   162f8:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   162fc:	4620      	mov	r0, r4
   162fe:	f7f6 fb08 	bl	c912 <snprintf>
   16302:	4404      	add	r4, r0
   16304:	e754      	b.n	161b0 <fctrl_to_string+0x60>
    if ((s & 0x0C00) == 0x0800) bp += snprintf(bp,sizeof(b)-(bp-b), "Dst16|"); /* 16-bit destination address */
   16306:	4931      	ldr	r1, [pc, #196]	; (163cc <fctrl_to_string+0x27c>)
   16308:	1a61      	subs	r1, r4, r1
   1630a:	4a3b      	ldr	r2, [pc, #236]	; (163f8 <fctrl_to_string+0x2a8>)
   1630c:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   16310:	4620      	mov	r0, r4
   16312:	f7f6 fafe 	bl	c912 <snprintf>
   16316:	4404      	add	r4, r0
   16318:	e74e      	b.n	161b8 <fctrl_to_string+0x68>
    if ((s & 0x0C00) == 0x0C00) bp += snprintf(bp,sizeof(b)-(bp-b), "Dst64|"); /* 64-bit destination address */
   1631a:	492c      	ldr	r1, [pc, #176]	; (163cc <fctrl_to_string+0x27c>)
   1631c:	1a61      	subs	r1, r4, r1
   1631e:	4a37      	ldr	r2, [pc, #220]	; (163fc <fctrl_to_string+0x2ac>)
   16320:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   16324:	4620      	mov	r0, r4
   16326:	f7f6 faf4 	bl	c912 <snprintf>
   1632a:	4404      	add	r4, r0
   1632c:	e748      	b.n	161c0 <fctrl_to_string+0x70>
    if ((s & 0x3000) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "I2003|");
   1632e:	4927      	ldr	r1, [pc, #156]	; (163cc <fctrl_to_string+0x27c>)
   16330:	1a61      	subs	r1, r4, r1
   16332:	4a33      	ldr	r2, [pc, #204]	; (16400 <fctrl_to_string+0x2b0>)
   16334:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   16338:	4620      	mov	r0, r4
   1633a:	f7f6 faea 	bl	c912 <snprintf>
   1633e:	4404      	add	r4, r0
   16340:	e742      	b.n	161c8 <fctrl_to_string+0x78>
    if ((s & 0x3000) == 0x1000) bp += snprintf(bp,sizeof(b)-(bp-b), "I|");
   16342:	4922      	ldr	r1, [pc, #136]	; (163cc <fctrl_to_string+0x27c>)
   16344:	1a61      	subs	r1, r4, r1
   16346:	4a2f      	ldr	r2, [pc, #188]	; (16404 <fctrl_to_string+0x2b4>)
   16348:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1634c:	4620      	mov	r0, r4
   1634e:	f7f6 fae0 	bl	c912 <snprintf>
   16352:	4404      	add	r4, r0
   16354:	e73c      	b.n	161d0 <fctrl_to_string+0x80>
    if ((s & 0x3000) == 0x2000) bp += snprintf(bp,sizeof(b)-(bp-b), "iFv|"); /* Invalid frame version */
   16356:	491d      	ldr	r1, [pc, #116]	; (163cc <fctrl_to_string+0x27c>)
   16358:	1a61      	subs	r1, r4, r1
   1635a:	4a2b      	ldr	r2, [pc, #172]	; (16408 <fctrl_to_string+0x2b8>)
   1635c:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   16360:	4620      	mov	r0, r4
   16362:	f7f6 fad6 	bl	c912 <snprintf>
   16366:	4404      	add	r4, r0
   16368:	e736      	b.n	161d8 <fctrl_to_string+0x88>
    if ((s & 0x3000) == 0x3000) bp += snprintf(bp,sizeof(b)-(bp-b), "iFv|");
   1636a:	4918      	ldr	r1, [pc, #96]	; (163cc <fctrl_to_string+0x27c>)
   1636c:	1a61      	subs	r1, r4, r1
   1636e:	4a26      	ldr	r2, [pc, #152]	; (16408 <fctrl_to_string+0x2b8>)
   16370:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   16374:	4620      	mov	r0, r4
   16376:	f7f6 facc 	bl	c912 <snprintf>
   1637a:	4404      	add	r4, r0
   1637c:	e730      	b.n	161e0 <fctrl_to_string+0x90>
    if ((s & 0xC000) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "SrcNo"); /* No destination address */
   1637e:	4913      	ldr	r1, [pc, #76]	; (163cc <fctrl_to_string+0x27c>)
   16380:	1a61      	subs	r1, r4, r1
   16382:	4a22      	ldr	r2, [pc, #136]	; (1640c <fctrl_to_string+0x2bc>)
   16384:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   16388:	4620      	mov	r0, r4
   1638a:	f7f6 fac2 	bl	c912 <snprintf>
   1638e:	4404      	add	r4, r0
   16390:	e72a      	b.n	161e8 <fctrl_to_string+0x98>
    if ((s & 0xC000) == 0x4000) bp += snprintf(bp,sizeof(b)-(bp-b), "SrcRs"); /* Reserved */
   16392:	490e      	ldr	r1, [pc, #56]	; (163cc <fctrl_to_string+0x27c>)
   16394:	1a61      	subs	r1, r4, r1
   16396:	4a1e      	ldr	r2, [pc, #120]	; (16410 <fctrl_to_string+0x2c0>)
   16398:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1639c:	4620      	mov	r0, r4
   1639e:	f7f6 fab8 	bl	c912 <snprintf>
   163a2:	4404      	add	r4, r0
   163a4:	e724      	b.n	161f0 <fctrl_to_string+0xa0>
    if ((s & 0xC000) == 0x8000) bp += snprintf(bp,sizeof(b)-(bp-b), "Src16"); /* 16-bit destination address */
   163a6:	4909      	ldr	r1, [pc, #36]	; (163cc <fctrl_to_string+0x27c>)
   163a8:	1a61      	subs	r1, r4, r1
   163aa:	4a1a      	ldr	r2, [pc, #104]	; (16414 <fctrl_to_string+0x2c4>)
   163ac:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   163b0:	4620      	mov	r0, r4
   163b2:	f7f6 faae 	bl	c912 <snprintf>
   163b6:	4404      	add	r4, r0
   163b8:	e71e      	b.n	161f8 <fctrl_to_string+0xa8>
    if ((s & 0xC000) == 0xC000) bp += snprintf(bp,sizeof(b)-(bp-b), "Src64"); /* 64-bit destination address */
   163ba:	4904      	ldr	r1, [pc, #16]	; (163cc <fctrl_to_string+0x27c>)
   163bc:	1a61      	subs	r1, r4, r1
   163be:	4a16      	ldr	r2, [pc, #88]	; (16418 <fctrl_to_string+0x2c8>)
   163c0:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   163c4:	4620      	mov	r0, r4
   163c6:	f7f6 faa4 	bl	c912 <snprintf>
   163ca:	e719      	b.n	16200 <fctrl_to_string+0xb0>
   163cc:	2000666c 	.word	0x2000666c
   163d0:	00022ce8 	.word	0x00022ce8
   163d4:	00022cec 	.word	0x00022cec
   163d8:	00022cf0 	.word	0x00022cf0
   163dc:	00022cf4 	.word	0x00022cf4
   163e0:	00022cf8 	.word	0x00022cf8
   163e4:	00022d00 	.word	0x00022d00
   163e8:	00022d08 	.word	0x00022d08
   163ec:	00022d10 	.word	0x00022d10
   163f0:	00022d18 	.word	0x00022d18
   163f4:	00022d20 	.word	0x00022d20
   163f8:	00022d28 	.word	0x00022d28
   163fc:	00022d30 	.word	0x00022d30
   16400:	00022d38 	.word	0x00022d38
   16404:	00022d40 	.word	0x00022d40
   16408:	00022d44 	.word	0x00022d44
   1640c:	00022d4c 	.word	0x00022d4c
   16410:	00022d54 	.word	0x00022d54
   16414:	00022d5c 	.word	0x00022d5c
   16418:	00022d64 	.word	0x00022d64

0001641c <sys_status_to_string>:
{
   1641c:	b570      	push	{r4, r5, r6, lr}
   1641e:	4605      	mov	r5, r0
   16420:	460e      	mov	r6, r1
    memset(b,0,sizeof(b));
   16422:	2280      	movs	r2, #128	; 0x80
   16424:	2100      	movs	r1, #0
   16426:	48c0      	ldr	r0, [pc, #768]	; (16728 <sys_status_to_string+0x30c>)
   16428:	f7f5 fe31 	bl	c08e <memset>
    if (s & 0x0400000000) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPwrUpTmErr|" );
   1642c:	f016 0f04 	tst.w	r6, #4
   16430:	f040 808a 	bne.w	16548 <sys_status_to_string+0x12c>
    char *bp = b;
   16434:	4cbc      	ldr	r4, [pc, #752]	; (16728 <sys_status_to_string+0x30c>)
    if (s & 0x0200000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreambRej|");
   16436:	f016 0f02 	tst.w	r6, #2
   1643a:	f040 808f 	bne.w	1655c <sys_status_to_string+0x140>
    if (s & 0x0100000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxReedSolCorr|");
   1643e:	f016 0f01 	tst.w	r6, #1
   16442:	f040 8095 	bne.w	16570 <sys_status_to_string+0x154>
    if (s & 0x80000000) bp += snprintf(bp,sizeof(b)-(bp-b), "ICRxBufPtr=1|");
   16446:	2d00      	cmp	r5, #0
   16448:	f2c0 809c 	blt.w	16584 <sys_status_to_string+0x168>
    if (s & 0x40000000) bp += snprintf(bp,sizeof(b)-(bp-b), "HostRxBufPtr=1|");
   1644c:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
   16450:	f040 80a2 	bne.w	16598 <sys_status_to_string+0x17c>
    if (s & 0x20000000) bp += snprintf(bp,sizeof(b)-(bp-b), "AutFrameFiltRej|");
   16454:	f015 5f00 	tst.w	r5, #536870912	; 0x20000000
   16458:	f040 80a8 	bne.w	165ac <sys_status_to_string+0x190>
    if (s & 0x10000000) bp += snprintf(bp,sizeof(b)-(bp-b), "TransmitBufferError|");
   1645c:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
   16460:	f040 80ae 	bne.w	165c0 <sys_status_to_string+0x1a4>
    if (s & 0x08000000) bp += snprintf(bp,sizeof(b)-(bp-b), "HalfPeriodDelayWarn|");
   16464:	f015 6f00 	tst.w	r5, #134217728	; 0x8000000
   16468:	f040 80b4 	bne.w	165d4 <sys_status_to_string+0x1b8>
    if (s & 0x04000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RXSFDTimeout|");
   1646c:	f015 6f80 	tst.w	r5, #67108864	; 0x4000000
   16470:	f040 80ba 	bne.w	165e8 <sys_status_to_string+0x1cc>
    if (s & 0x02000000) bp += snprintf(bp,sizeof(b)-(bp-b), "ClockPLLLosingLock|");
   16474:	f015 7f00 	tst.w	r5, #33554432	; 0x2000000
   16478:	f040 80c0 	bne.w	165fc <sys_status_to_string+0x1e0>
    if (s & 0x01000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RFPLLLosingLock|");
   1647c:	f015 7f80 	tst.w	r5, #16777216	; 0x1000000
   16480:	f040 80c6 	bne.w	16610 <sys_status_to_string+0x1f4>
    if (s & 0x00800000) bp += snprintf(bp,sizeof(b)-(bp-b), "SLEEP2INIT|");
   16484:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   16488:	f040 80cc 	bne.w	16624 <sys_status_to_string+0x208>
    if (s & 0x00400000) bp += snprintf(bp,sizeof(b)-(bp-b), "GpioInt|");
   1648c:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
   16490:	f040 80d2 	bne.w	16638 <sys_status_to_string+0x21c>
    if (s & 0x00200000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreamDetTimeout|");
   16494:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
   16498:	f040 80d8 	bne.w	1664c <sys_status_to_string+0x230>
    if (s & 0x00100000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxOvErr|");
   1649c:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
   164a0:	f040 80de 	bne.w	16660 <sys_status_to_string+0x244>
    if (s & 0x00080000) bp += snprintf(bp,sizeof(b)-(bp-b), "(bit19 reserved)|");
   164a4:	f415 2f00 	tst.w	r5, #524288	; 0x80000
   164a8:	f040 80e4 	bne.w	16674 <sys_status_to_string+0x258>
    if (s & 0x00040000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxLDEerr|");
   164ac:	f415 2f80 	tst.w	r5, #262144	; 0x40000
   164b0:	f040 80ea 	bne.w	16688 <sys_status_to_string+0x26c>
    if (s & 0x00020000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxTimeout|");
   164b4:	f415 3f00 	tst.w	r5, #131072	; 0x20000
   164b8:	f040 80f0 	bne.w	1669c <sys_status_to_string+0x280>
    if (s & 0x00010000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxReedSolomonFrameSyncLoss|");
   164bc:	f415 3f80 	tst.w	r5, #65536	; 0x10000
   164c0:	f040 80f6 	bne.w	166b0 <sys_status_to_string+0x294>
    if (s & 0x00008000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxFCSErr|");
   164c4:	f415 4f00 	tst.w	r5, #32768	; 0x8000
   164c8:	f040 80fc 	bne.w	166c4 <sys_status_to_string+0x2a8>
    if (s & 0x00004000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxFCSGood|");
   164cc:	f415 4f80 	tst.w	r5, #16384	; 0x4000
   164d0:	f040 8102 	bne.w	166d8 <sys_status_to_string+0x2bc>
    if (s & 0x00002000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxDataFrmRdy|");
   164d4:	f415 5f00 	tst.w	r5, #8192	; 0x2000
   164d8:	f040 8108 	bne.w	166ec <sys_status_to_string+0x2d0>
    if (s & 0x00001000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPHYErr|");
   164dc:	f415 5f80 	tst.w	r5, #4096	; 0x1000
   164e0:	f040 810e 	bne.w	16700 <sys_status_to_string+0x2e4>
    if (s & 0x00000800) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPHYDet|");
   164e4:	f415 6f00 	tst.w	r5, #2048	; 0x800
   164e8:	f040 8114 	bne.w	16714 <sys_status_to_string+0x2f8>
    if (s & 0x00000400) bp += snprintf(bp,sizeof(b)-(bp-b), "RxLDEdone|");
   164ec:	f415 6f80 	tst.w	r5, #1024	; 0x400
   164f0:	f040 814c 	bne.w	1678c <sys_status_to_string+0x370>
    if (s & 0x00000200) bp += snprintf(bp,sizeof(b)-(bp-b), "RxSFDet|");
   164f4:	f415 7f00 	tst.w	r5, #512	; 0x200
   164f8:	f040 8152 	bne.w	167a0 <sys_status_to_string+0x384>
    if (s & 0x00000100) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreamDet|");
   164fc:	f415 7f80 	tst.w	r5, #256	; 0x100
   16500:	f040 8158 	bne.w	167b4 <sys_status_to_string+0x398>
    if (s & 0x00000080) bp += snprintf(bp,sizeof(b)-(bp-b), "TxFrameSent|");
   16504:	f015 0f80 	tst.w	r5, #128	; 0x80
   16508:	f040 815e 	bne.w	167c8 <sys_status_to_string+0x3ac>
    if (s & 0x00000040) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPHYDone|");
   1650c:	f015 0f40 	tst.w	r5, #64	; 0x40
   16510:	f040 8164 	bne.w	167dc <sys_status_to_string+0x3c0>
    if (s & 0x00000020) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPreamDone|");
   16514:	f015 0f20 	tst.w	r5, #32
   16518:	f040 816a 	bne.w	167f0 <sys_status_to_string+0x3d4>
    if (s & 0x00000010) bp += snprintf(bp,sizeof(b)-(bp-b), "TxStart|");
   1651c:	f015 0f10 	tst.w	r5, #16
   16520:	f040 8170 	bne.w	16804 <sys_status_to_string+0x3e8>
    if (s & 0x00000008) bp += snprintf(bp,sizeof(b)-(bp-b), "AutoAck|");
   16524:	f015 0f08 	tst.w	r5, #8
   16528:	f040 8176 	bne.w	16818 <sys_status_to_string+0x3fc>
    if (s & 0x00000004) bp += snprintf(bp,sizeof(b)-(bp-b), "ExtClock Reset|");
   1652c:	f015 0f04 	tst.w	r5, #4
   16530:	f040 817c 	bne.w	1682c <sys_status_to_string+0x410>
    if (s & 0x00000002) bp += snprintf(bp,sizeof(b)-(bp-b), "Clock PLL Lock|");
   16534:	f015 0f02 	tst.w	r5, #2
   16538:	f040 8182 	bne.w	16840 <sys_status_to_string+0x424>
    if (s & 0x00000001) bp += snprintf(bp,sizeof(b)-(bp-b), "IRS");
   1653c:	f015 0f01 	tst.w	r5, #1
   16540:	f040 8188 	bne.w	16854 <sys_status_to_string+0x438>
}
   16544:	4878      	ldr	r0, [pc, #480]	; (16728 <sys_status_to_string+0x30c>)
   16546:	bd70      	pop	{r4, r5, r6, pc}
    if (s & 0x0400000000) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPwrUpTmErr|" );
   16548:	4c77      	ldr	r4, [pc, #476]	; (16728 <sys_status_to_string+0x30c>)
   1654a:	4b78      	ldr	r3, [pc, #480]	; (1672c <sys_status_to_string+0x310>)
   1654c:	46a4      	mov	ip, r4
   1654e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   16550:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
   16554:	f8ac 3000 	strh.w	r3, [ip]
   16558:	340d      	adds	r4, #13
   1655a:	e76c      	b.n	16436 <sys_status_to_string+0x1a>
    if (s & 0x0200000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreambRej|");
   1655c:	4972      	ldr	r1, [pc, #456]	; (16728 <sys_status_to_string+0x30c>)
   1655e:	1a61      	subs	r1, r4, r1
   16560:	4a73      	ldr	r2, [pc, #460]	; (16730 <sys_status_to_string+0x314>)
   16562:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   16566:	4620      	mov	r0, r4
   16568:	f7f6 f9d3 	bl	c912 <snprintf>
   1656c:	4404      	add	r4, r0
   1656e:	e766      	b.n	1643e <sys_status_to_string+0x22>
    if (s & 0x0100000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxReedSolCorr|");
   16570:	496d      	ldr	r1, [pc, #436]	; (16728 <sys_status_to_string+0x30c>)
   16572:	1a61      	subs	r1, r4, r1
   16574:	4a6f      	ldr	r2, [pc, #444]	; (16734 <sys_status_to_string+0x318>)
   16576:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1657a:	4620      	mov	r0, r4
   1657c:	f7f6 f9c9 	bl	c912 <snprintf>
   16580:	4404      	add	r4, r0
   16582:	e760      	b.n	16446 <sys_status_to_string+0x2a>
    if (s & 0x80000000) bp += snprintf(bp,sizeof(b)-(bp-b), "ICRxBufPtr=1|");
   16584:	4968      	ldr	r1, [pc, #416]	; (16728 <sys_status_to_string+0x30c>)
   16586:	1a61      	subs	r1, r4, r1
   16588:	4a6b      	ldr	r2, [pc, #428]	; (16738 <sys_status_to_string+0x31c>)
   1658a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1658e:	4620      	mov	r0, r4
   16590:	f7f6 f9bf 	bl	c912 <snprintf>
   16594:	4404      	add	r4, r0
   16596:	e759      	b.n	1644c <sys_status_to_string+0x30>
    if (s & 0x40000000) bp += snprintf(bp,sizeof(b)-(bp-b), "HostRxBufPtr=1|");
   16598:	4963      	ldr	r1, [pc, #396]	; (16728 <sys_status_to_string+0x30c>)
   1659a:	1a61      	subs	r1, r4, r1
   1659c:	4a67      	ldr	r2, [pc, #412]	; (1673c <sys_status_to_string+0x320>)
   1659e:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   165a2:	4620      	mov	r0, r4
   165a4:	f7f6 f9b5 	bl	c912 <snprintf>
   165a8:	4404      	add	r4, r0
   165aa:	e753      	b.n	16454 <sys_status_to_string+0x38>
    if (s & 0x20000000) bp += snprintf(bp,sizeof(b)-(bp-b), "AutFrameFiltRej|");
   165ac:	495e      	ldr	r1, [pc, #376]	; (16728 <sys_status_to_string+0x30c>)
   165ae:	1a61      	subs	r1, r4, r1
   165b0:	4a63      	ldr	r2, [pc, #396]	; (16740 <sys_status_to_string+0x324>)
   165b2:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   165b6:	4620      	mov	r0, r4
   165b8:	f7f6 f9ab 	bl	c912 <snprintf>
   165bc:	4404      	add	r4, r0
   165be:	e74d      	b.n	1645c <sys_status_to_string+0x40>
    if (s & 0x10000000) bp += snprintf(bp,sizeof(b)-(bp-b), "TransmitBufferError|");
   165c0:	4959      	ldr	r1, [pc, #356]	; (16728 <sys_status_to_string+0x30c>)
   165c2:	1a61      	subs	r1, r4, r1
   165c4:	4a5f      	ldr	r2, [pc, #380]	; (16744 <sys_status_to_string+0x328>)
   165c6:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   165ca:	4620      	mov	r0, r4
   165cc:	f7f6 f9a1 	bl	c912 <snprintf>
   165d0:	4404      	add	r4, r0
   165d2:	e747      	b.n	16464 <sys_status_to_string+0x48>
    if (s & 0x08000000) bp += snprintf(bp,sizeof(b)-(bp-b), "HalfPeriodDelayWarn|");
   165d4:	4954      	ldr	r1, [pc, #336]	; (16728 <sys_status_to_string+0x30c>)
   165d6:	1a61      	subs	r1, r4, r1
   165d8:	4a5b      	ldr	r2, [pc, #364]	; (16748 <sys_status_to_string+0x32c>)
   165da:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   165de:	4620      	mov	r0, r4
   165e0:	f7f6 f997 	bl	c912 <snprintf>
   165e4:	4404      	add	r4, r0
   165e6:	e741      	b.n	1646c <sys_status_to_string+0x50>
    if (s & 0x04000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RXSFDTimeout|");
   165e8:	494f      	ldr	r1, [pc, #316]	; (16728 <sys_status_to_string+0x30c>)
   165ea:	1a61      	subs	r1, r4, r1
   165ec:	4a57      	ldr	r2, [pc, #348]	; (1674c <sys_status_to_string+0x330>)
   165ee:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   165f2:	4620      	mov	r0, r4
   165f4:	f7f6 f98d 	bl	c912 <snprintf>
   165f8:	4404      	add	r4, r0
   165fa:	e73b      	b.n	16474 <sys_status_to_string+0x58>
    if (s & 0x02000000) bp += snprintf(bp,sizeof(b)-(bp-b), "ClockPLLLosingLock|");
   165fc:	494a      	ldr	r1, [pc, #296]	; (16728 <sys_status_to_string+0x30c>)
   165fe:	1a61      	subs	r1, r4, r1
   16600:	4a53      	ldr	r2, [pc, #332]	; (16750 <sys_status_to_string+0x334>)
   16602:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   16606:	4620      	mov	r0, r4
   16608:	f7f6 f983 	bl	c912 <snprintf>
   1660c:	4404      	add	r4, r0
   1660e:	e735      	b.n	1647c <sys_status_to_string+0x60>
    if (s & 0x01000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RFPLLLosingLock|");
   16610:	4945      	ldr	r1, [pc, #276]	; (16728 <sys_status_to_string+0x30c>)
   16612:	1a61      	subs	r1, r4, r1
   16614:	4a4f      	ldr	r2, [pc, #316]	; (16754 <sys_status_to_string+0x338>)
   16616:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1661a:	4620      	mov	r0, r4
   1661c:	f7f6 f979 	bl	c912 <snprintf>
   16620:	4404      	add	r4, r0
   16622:	e72f      	b.n	16484 <sys_status_to_string+0x68>
    if (s & 0x00800000) bp += snprintf(bp,sizeof(b)-(bp-b), "SLEEP2INIT|");
   16624:	4940      	ldr	r1, [pc, #256]	; (16728 <sys_status_to_string+0x30c>)
   16626:	1a61      	subs	r1, r4, r1
   16628:	4a4b      	ldr	r2, [pc, #300]	; (16758 <sys_status_to_string+0x33c>)
   1662a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1662e:	4620      	mov	r0, r4
   16630:	f7f6 f96f 	bl	c912 <snprintf>
   16634:	4404      	add	r4, r0
   16636:	e729      	b.n	1648c <sys_status_to_string+0x70>
    if (s & 0x00400000) bp += snprintf(bp,sizeof(b)-(bp-b), "GpioInt|");
   16638:	493b      	ldr	r1, [pc, #236]	; (16728 <sys_status_to_string+0x30c>)
   1663a:	1a61      	subs	r1, r4, r1
   1663c:	4a47      	ldr	r2, [pc, #284]	; (1675c <sys_status_to_string+0x340>)
   1663e:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   16642:	4620      	mov	r0, r4
   16644:	f7f6 f965 	bl	c912 <snprintf>
   16648:	4404      	add	r4, r0
   1664a:	e723      	b.n	16494 <sys_status_to_string+0x78>
    if (s & 0x00200000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreamDetTimeout|");
   1664c:	4936      	ldr	r1, [pc, #216]	; (16728 <sys_status_to_string+0x30c>)
   1664e:	1a61      	subs	r1, r4, r1
   16650:	4a43      	ldr	r2, [pc, #268]	; (16760 <sys_status_to_string+0x344>)
   16652:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   16656:	4620      	mov	r0, r4
   16658:	f7f6 f95b 	bl	c912 <snprintf>
   1665c:	4404      	add	r4, r0
   1665e:	e71d      	b.n	1649c <sys_status_to_string+0x80>
    if (s & 0x00100000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxOvErr|");
   16660:	4931      	ldr	r1, [pc, #196]	; (16728 <sys_status_to_string+0x30c>)
   16662:	1a61      	subs	r1, r4, r1
   16664:	4a3f      	ldr	r2, [pc, #252]	; (16764 <sys_status_to_string+0x348>)
   16666:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1666a:	4620      	mov	r0, r4
   1666c:	f7f6 f951 	bl	c912 <snprintf>
   16670:	4404      	add	r4, r0
   16672:	e717      	b.n	164a4 <sys_status_to_string+0x88>
    if (s & 0x00080000) bp += snprintf(bp,sizeof(b)-(bp-b), "(bit19 reserved)|");
   16674:	492c      	ldr	r1, [pc, #176]	; (16728 <sys_status_to_string+0x30c>)
   16676:	1a61      	subs	r1, r4, r1
   16678:	4a3b      	ldr	r2, [pc, #236]	; (16768 <sys_status_to_string+0x34c>)
   1667a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1667e:	4620      	mov	r0, r4
   16680:	f7f6 f947 	bl	c912 <snprintf>
   16684:	4404      	add	r4, r0
   16686:	e711      	b.n	164ac <sys_status_to_string+0x90>
    if (s & 0x00040000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxLDEerr|");
   16688:	4927      	ldr	r1, [pc, #156]	; (16728 <sys_status_to_string+0x30c>)
   1668a:	1a61      	subs	r1, r4, r1
   1668c:	4a37      	ldr	r2, [pc, #220]	; (1676c <sys_status_to_string+0x350>)
   1668e:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   16692:	4620      	mov	r0, r4
   16694:	f7f6 f93d 	bl	c912 <snprintf>
   16698:	4404      	add	r4, r0
   1669a:	e70b      	b.n	164b4 <sys_status_to_string+0x98>
    if (s & 0x00020000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxTimeout|");
   1669c:	4922      	ldr	r1, [pc, #136]	; (16728 <sys_status_to_string+0x30c>)
   1669e:	1a61      	subs	r1, r4, r1
   166a0:	4a33      	ldr	r2, [pc, #204]	; (16770 <sys_status_to_string+0x354>)
   166a2:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   166a6:	4620      	mov	r0, r4
   166a8:	f7f6 f933 	bl	c912 <snprintf>
   166ac:	4404      	add	r4, r0
   166ae:	e705      	b.n	164bc <sys_status_to_string+0xa0>
    if (s & 0x00010000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxReedSolomonFrameSyncLoss|");
   166b0:	491d      	ldr	r1, [pc, #116]	; (16728 <sys_status_to_string+0x30c>)
   166b2:	1a61      	subs	r1, r4, r1
   166b4:	4a2f      	ldr	r2, [pc, #188]	; (16774 <sys_status_to_string+0x358>)
   166b6:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   166ba:	4620      	mov	r0, r4
   166bc:	f7f6 f929 	bl	c912 <snprintf>
   166c0:	4404      	add	r4, r0
   166c2:	e6ff      	b.n	164c4 <sys_status_to_string+0xa8>
    if (s & 0x00008000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxFCSErr|");
   166c4:	4918      	ldr	r1, [pc, #96]	; (16728 <sys_status_to_string+0x30c>)
   166c6:	1a61      	subs	r1, r4, r1
   166c8:	4a2b      	ldr	r2, [pc, #172]	; (16778 <sys_status_to_string+0x35c>)
   166ca:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   166ce:	4620      	mov	r0, r4
   166d0:	f7f6 f91f 	bl	c912 <snprintf>
   166d4:	4404      	add	r4, r0
   166d6:	e6f9      	b.n	164cc <sys_status_to_string+0xb0>
    if (s & 0x00004000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxFCSGood|");
   166d8:	4913      	ldr	r1, [pc, #76]	; (16728 <sys_status_to_string+0x30c>)
   166da:	1a61      	subs	r1, r4, r1
   166dc:	4a27      	ldr	r2, [pc, #156]	; (1677c <sys_status_to_string+0x360>)
   166de:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   166e2:	4620      	mov	r0, r4
   166e4:	f7f6 f915 	bl	c912 <snprintf>
   166e8:	4404      	add	r4, r0
   166ea:	e6f3      	b.n	164d4 <sys_status_to_string+0xb8>
    if (s & 0x00002000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxDataFrmRdy|");
   166ec:	490e      	ldr	r1, [pc, #56]	; (16728 <sys_status_to_string+0x30c>)
   166ee:	1a61      	subs	r1, r4, r1
   166f0:	4a23      	ldr	r2, [pc, #140]	; (16780 <sys_status_to_string+0x364>)
   166f2:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   166f6:	4620      	mov	r0, r4
   166f8:	f7f6 f90b 	bl	c912 <snprintf>
   166fc:	4404      	add	r4, r0
   166fe:	e6ed      	b.n	164dc <sys_status_to_string+0xc0>
    if (s & 0x00001000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPHYErr|");
   16700:	4909      	ldr	r1, [pc, #36]	; (16728 <sys_status_to_string+0x30c>)
   16702:	1a61      	subs	r1, r4, r1
   16704:	4a1f      	ldr	r2, [pc, #124]	; (16784 <sys_status_to_string+0x368>)
   16706:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1670a:	4620      	mov	r0, r4
   1670c:	f7f6 f901 	bl	c912 <snprintf>
   16710:	4404      	add	r4, r0
   16712:	e6e7      	b.n	164e4 <sys_status_to_string+0xc8>
    if (s & 0x00000800) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPHYDet|");
   16714:	4904      	ldr	r1, [pc, #16]	; (16728 <sys_status_to_string+0x30c>)
   16716:	1a61      	subs	r1, r4, r1
   16718:	4a1b      	ldr	r2, [pc, #108]	; (16788 <sys_status_to_string+0x36c>)
   1671a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1671e:	4620      	mov	r0, r4
   16720:	f7f6 f8f7 	bl	c912 <snprintf>
   16724:	4404      	add	r4, r0
   16726:	e6e1      	b.n	164ec <sys_status_to_string+0xd0>
   16728:	200065ec 	.word	0x200065ec
   1672c:	00022d6c 	.word	0x00022d6c
   16730:	00022d7c 	.word	0x00022d7c
   16734:	00022d8c 	.word	0x00022d8c
   16738:	00022d9c 	.word	0x00022d9c
   1673c:	00022dac 	.word	0x00022dac
   16740:	00022dbc 	.word	0x00022dbc
   16744:	00022dd0 	.word	0x00022dd0
   16748:	00022de8 	.word	0x00022de8
   1674c:	00022e00 	.word	0x00022e00
   16750:	00022e10 	.word	0x00022e10
   16754:	00022e24 	.word	0x00022e24
   16758:	00022e38 	.word	0x00022e38
   1675c:	00022e44 	.word	0x00022e44
   16760:	00022e50 	.word	0x00022e50
   16764:	00022e64 	.word	0x00022e64
   16768:	00022e70 	.word	0x00022e70
   1676c:	00022e84 	.word	0x00022e84
   16770:	00022e90 	.word	0x00022e90
   16774:	00022e9c 	.word	0x00022e9c
   16778:	00022eb8 	.word	0x00022eb8
   1677c:	00022ec4 	.word	0x00022ec4
   16780:	00022ed0 	.word	0x00022ed0
   16784:	00022ee0 	.word	0x00022ee0
   16788:	00022eec 	.word	0x00022eec
    if (s & 0x00000400) bp += snprintf(bp,sizeof(b)-(bp-b), "RxLDEdone|");
   1678c:	4936      	ldr	r1, [pc, #216]	; (16868 <sys_status_to_string+0x44c>)
   1678e:	1a61      	subs	r1, r4, r1
   16790:	4a36      	ldr	r2, [pc, #216]	; (1686c <sys_status_to_string+0x450>)
   16792:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   16796:	4620      	mov	r0, r4
   16798:	f7f6 f8bb 	bl	c912 <snprintf>
   1679c:	4404      	add	r4, r0
   1679e:	e6a9      	b.n	164f4 <sys_status_to_string+0xd8>
    if (s & 0x00000200) bp += snprintf(bp,sizeof(b)-(bp-b), "RxSFDet|");
   167a0:	4931      	ldr	r1, [pc, #196]	; (16868 <sys_status_to_string+0x44c>)
   167a2:	1a61      	subs	r1, r4, r1
   167a4:	4a32      	ldr	r2, [pc, #200]	; (16870 <sys_status_to_string+0x454>)
   167a6:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   167aa:	4620      	mov	r0, r4
   167ac:	f7f6 f8b1 	bl	c912 <snprintf>
   167b0:	4404      	add	r4, r0
   167b2:	e6a3      	b.n	164fc <sys_status_to_string+0xe0>
    if (s & 0x00000100) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreamDet|");
   167b4:	492c      	ldr	r1, [pc, #176]	; (16868 <sys_status_to_string+0x44c>)
   167b6:	1a61      	subs	r1, r4, r1
   167b8:	4a2e      	ldr	r2, [pc, #184]	; (16874 <sys_status_to_string+0x458>)
   167ba:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   167be:	4620      	mov	r0, r4
   167c0:	f7f6 f8a7 	bl	c912 <snprintf>
   167c4:	4404      	add	r4, r0
   167c6:	e69d      	b.n	16504 <sys_status_to_string+0xe8>
    if (s & 0x00000080) bp += snprintf(bp,sizeof(b)-(bp-b), "TxFrameSent|");
   167c8:	4927      	ldr	r1, [pc, #156]	; (16868 <sys_status_to_string+0x44c>)
   167ca:	1a61      	subs	r1, r4, r1
   167cc:	4a2a      	ldr	r2, [pc, #168]	; (16878 <sys_status_to_string+0x45c>)
   167ce:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   167d2:	4620      	mov	r0, r4
   167d4:	f7f6 f89d 	bl	c912 <snprintf>
   167d8:	4404      	add	r4, r0
   167da:	e697      	b.n	1650c <sys_status_to_string+0xf0>
    if (s & 0x00000040) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPHYDone|");
   167dc:	4922      	ldr	r1, [pc, #136]	; (16868 <sys_status_to_string+0x44c>)
   167de:	1a61      	subs	r1, r4, r1
   167e0:	4a26      	ldr	r2, [pc, #152]	; (1687c <sys_status_to_string+0x460>)
   167e2:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   167e6:	4620      	mov	r0, r4
   167e8:	f7f6 f893 	bl	c912 <snprintf>
   167ec:	4404      	add	r4, r0
   167ee:	e691      	b.n	16514 <sys_status_to_string+0xf8>
    if (s & 0x00000020) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPreamDone|");
   167f0:	491d      	ldr	r1, [pc, #116]	; (16868 <sys_status_to_string+0x44c>)
   167f2:	1a61      	subs	r1, r4, r1
   167f4:	4a22      	ldr	r2, [pc, #136]	; (16880 <sys_status_to_string+0x464>)
   167f6:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   167fa:	4620      	mov	r0, r4
   167fc:	f7f6 f889 	bl	c912 <snprintf>
   16800:	4404      	add	r4, r0
   16802:	e68b      	b.n	1651c <sys_status_to_string+0x100>
    if (s & 0x00000010) bp += snprintf(bp,sizeof(b)-(bp-b), "TxStart|");
   16804:	4918      	ldr	r1, [pc, #96]	; (16868 <sys_status_to_string+0x44c>)
   16806:	1a61      	subs	r1, r4, r1
   16808:	4a1e      	ldr	r2, [pc, #120]	; (16884 <sys_status_to_string+0x468>)
   1680a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1680e:	4620      	mov	r0, r4
   16810:	f7f6 f87f 	bl	c912 <snprintf>
   16814:	4404      	add	r4, r0
   16816:	e685      	b.n	16524 <sys_status_to_string+0x108>
    if (s & 0x00000008) bp += snprintf(bp,sizeof(b)-(bp-b), "AutoAck|");
   16818:	4913      	ldr	r1, [pc, #76]	; (16868 <sys_status_to_string+0x44c>)
   1681a:	1a61      	subs	r1, r4, r1
   1681c:	4a1a      	ldr	r2, [pc, #104]	; (16888 <sys_status_to_string+0x46c>)
   1681e:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   16822:	4620      	mov	r0, r4
   16824:	f7f6 f875 	bl	c912 <snprintf>
   16828:	4404      	add	r4, r0
   1682a:	e67f      	b.n	1652c <sys_status_to_string+0x110>
    if (s & 0x00000004) bp += snprintf(bp,sizeof(b)-(bp-b), "ExtClock Reset|");
   1682c:	490e      	ldr	r1, [pc, #56]	; (16868 <sys_status_to_string+0x44c>)
   1682e:	1a61      	subs	r1, r4, r1
   16830:	4a16      	ldr	r2, [pc, #88]	; (1688c <sys_status_to_string+0x470>)
   16832:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   16836:	4620      	mov	r0, r4
   16838:	f7f6 f86b 	bl	c912 <snprintf>
   1683c:	4404      	add	r4, r0
   1683e:	e679      	b.n	16534 <sys_status_to_string+0x118>
    if (s & 0x00000002) bp += snprintf(bp,sizeof(b)-(bp-b), "Clock PLL Lock|");
   16840:	4909      	ldr	r1, [pc, #36]	; (16868 <sys_status_to_string+0x44c>)
   16842:	1a61      	subs	r1, r4, r1
   16844:	4a12      	ldr	r2, [pc, #72]	; (16890 <sys_status_to_string+0x474>)
   16846:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1684a:	4620      	mov	r0, r4
   1684c:	f7f6 f861 	bl	c912 <snprintf>
   16850:	4404      	add	r4, r0
   16852:	e673      	b.n	1653c <sys_status_to_string+0x120>
    if (s & 0x00000001) bp += snprintf(bp,sizeof(b)-(bp-b), "IRS");
   16854:	4904      	ldr	r1, [pc, #16]	; (16868 <sys_status_to_string+0x44c>)
   16856:	1a61      	subs	r1, r4, r1
   16858:	4a0e      	ldr	r2, [pc, #56]	; (16894 <sys_status_to_string+0x478>)
   1685a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1685e:	4620      	mov	r0, r4
   16860:	f7f6 f857 	bl	c912 <snprintf>
   16864:	e66e      	b.n	16544 <sys_status_to_string+0x128>
   16866:	bf00      	nop
   16868:	200065ec 	.word	0x200065ec
   1686c:	00022ef8 	.word	0x00022ef8
   16870:	00022f04 	.word	0x00022f04
   16874:	00022f10 	.word	0x00022f10
   16878:	00022f1c 	.word	0x00022f1c
   1687c:	00022f2c 	.word	0x00022f2c
   16880:	00022f38 	.word	0x00022f38
   16884:	00022f48 	.word	0x00022f48
   16888:	00022f54 	.word	0x00022f54
   1688c:	00022f60 	.word	0x00022f60
   16890:	00022f70 	.word	0x00022f70
   16894:	00022f80 	.word	0x00022f80

00016898 <print_interrupt_bt_line>:
{
   16898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1689c:	b085      	sub	sp, #20
   1689e:	4614      	mov	r4, r2
   168a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    if (!p->utime) return 0;
   168a2:	6812      	ldr	r2, [r2, #0]
   168a4:	2a00      	cmp	r2, #0
   168a6:	d078      	beq.n	1699a <print_interrupt_bt_line+0x102>
   168a8:	4606      	mov	r6, r0
   168aa:	460f      	mov	r7, r1
    if (!*start_t) *start_t = p->utime;
   168ac:	6801      	ldr	r1, [r0, #0]
   168ae:	b901      	cbnz	r1, 168b2 <print_interrupt_bt_line+0x1a>
   168b0:	6002      	str	r2, [r0, #0]
    int32_t diff = (p_last)? p->utime-p_last->utime : 0;
   168b2:	2b00      	cmp	r3, #0
   168b4:	d055      	beq.n	16962 <print_interrupt_bt_line+0xca>
   168b6:	6822      	ldr	r2, [r4, #0]
   168b8:	681b      	ldr	r3, [r3, #0]
    if (diff < 0) diff = 0;
   168ba:	ebb2 0803 	subs.w	r8, r2, r3
   168be:	d453      	bmi.n	16968 <print_interrupt_bt_line+0xd0>
    streamer_printf(streamer, " %10lu ", dpl_cputime_ticks_to_usecs(p->utime));
   168c0:	f8df 910c 	ldr.w	r9, [pc, #268]	; 169d0 <print_interrupt_bt_line+0x138>
   168c4:	6822      	ldr	r2, [r4, #0]
   168c6:	4649      	mov	r1, r9
   168c8:	4628      	mov	r0, r5
   168ca:	f7fa f95a 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %10lu ", dpl_cputime_ticks_to_usecs(p->utime-*start_t));
   168ce:	6822      	ldr	r2, [r4, #0]
   168d0:	6833      	ldr	r3, [r6, #0]
   168d2:	1ad2      	subs	r2, r2, r3
   168d4:	4649      	mov	r1, r9
   168d6:	4628      	mov	r0, r5
   168d8:	f7fa f953 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %8lu ", dpl_cputime_ticks_to_usecs(diff));
   168dc:	4642      	mov	r2, r8
   168de:	4930      	ldr	r1, [pc, #192]	; (169a0 <print_interrupt_bt_line+0x108>)
   168e0:	4628      	mov	r0, r5
   168e2:	f7fa f94e 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %6lu ", dpl_cputime_ticks_to_usecs(p->utime_end-p->utime));
   168e6:	68e2      	ldr	r2, [r4, #12]
   168e8:	6823      	ldr	r3, [r4, #0]
   168ea:	1ad2      	subs	r2, r2, r3
   168ec:	492d      	ldr	r1, [pc, #180]	; (169a4 <print_interrupt_bt_line+0x10c>)
   168ee:	4628      	mov	r0, r5
   168f0:	f7fa f947 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %2s ", p->interrupt_reentry ? "r":" ");
   168f4:	7a63      	ldrb	r3, [r4, #9]
   168f6:	f013 0f01 	tst.w	r3, #1
   168fa:	d038      	beq.n	1696e <print_interrupt_bt_line+0xd6>
   168fc:	4a2a      	ldr	r2, [pc, #168]	; (169a8 <print_interrupt_bt_line+0x110>)
   168fe:	492b      	ldr	r1, [pc, #172]	; (169ac <print_interrupt_bt_line+0x114>)
   16900:	4628      	mov	r0, r5
   16902:	f7fa f93e 	bl	10b82 <streamer_printf>
    if (p->fctrl) {
   16906:	8960      	ldrh	r0, [r4, #10]
   16908:	2800      	cmp	r0, #0
   1690a:	d039      	beq.n	16980 <print_interrupt_bt_line+0xe8>
        if (verbose&0x1) {
   1690c:	f017 0f01 	tst.w	r7, #1
   16910:	d02f      	beq.n	16972 <print_interrupt_bt_line+0xda>
            char *s = fctrl_to_string(p->fctrl);
   16912:	f7ff fc1d 	bl	16150 <fctrl_to_string>
   16916:	4606      	mov	r6, r0
            streamer_printf(streamer, " %02X %02X (%s)%*s", p->fctrl&0xff, p->fctrl>>8, s, 32-strlen(s), " ");
   16918:	8967      	ldrh	r7, [r4, #10]
   1691a:	f7f5 fbef 	bl	c0fc <strlen>
   1691e:	4b24      	ldr	r3, [pc, #144]	; (169b0 <print_interrupt_bt_line+0x118>)
   16920:	9302      	str	r3, [sp, #8]
   16922:	f1c0 0020 	rsb	r0, r0, #32
   16926:	9001      	str	r0, [sp, #4]
   16928:	9600      	str	r6, [sp, #0]
   1692a:	0a3b      	lsrs	r3, r7, #8
   1692c:	b2fa      	uxtb	r2, r7
   1692e:	4921      	ldr	r1, [pc, #132]	; (169b4 <print_interrupt_bt_line+0x11c>)
   16930:	4628      	mov	r0, r5
   16932:	f7fa f926 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %0*llX ", 2*DW1000_SYS_STATUS_ASSEMBLE_LEN, DW1000_SYS_STATUS_ASSEMBLE(p));
   16936:	6863      	ldr	r3, [r4, #4]
   16938:	2600      	movs	r6, #0
   1693a:	9300      	str	r3, [sp, #0]
   1693c:	9601      	str	r6, [sp, #4]
   1693e:	2208      	movs	r2, #8
   16940:	491d      	ldr	r1, [pc, #116]	; (169b8 <print_interrupt_bt_line+0x120>)
   16942:	4628      	mov	r0, r5
   16944:	f7fa f91d 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %s", sys_status_to_string(DW1000_SYS_STATUS_ASSEMBLE(p)));
   16948:	6860      	ldr	r0, [r4, #4]
   1694a:	4631      	mov	r1, r6
   1694c:	f7ff fd66 	bl	1641c <sys_status_to_string>
   16950:	4602      	mov	r2, r0
   16952:	491a      	ldr	r1, [pc, #104]	; (169bc <print_interrupt_bt_line+0x124>)
   16954:	4628      	mov	r0, r5
   16956:	f7fa f914 	bl	10b82 <streamer_printf>
    return 1;
   1695a:	2001      	movs	r0, #1
}
   1695c:	b005      	add	sp, #20
   1695e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    int32_t diff = (p_last)? p->utime-p_last->utime : 0;
   16962:	f04f 0800 	mov.w	r8, #0
   16966:	e7ab      	b.n	168c0 <print_interrupt_bt_line+0x28>
    if (diff < 0) diff = 0;
   16968:	f04f 0800 	mov.w	r8, #0
   1696c:	e7a8      	b.n	168c0 <print_interrupt_bt_line+0x28>
    streamer_printf(streamer, " %2s ", p->interrupt_reentry ? "r":" ");
   1696e:	4a10      	ldr	r2, [pc, #64]	; (169b0 <print_interrupt_bt_line+0x118>)
   16970:	e7c5      	b.n	168fe <print_interrupt_bt_line+0x66>
            streamer_printf(streamer, " %02X %02X ", p->fctrl&0xff, p->fctrl>>8);
   16972:	0a03      	lsrs	r3, r0, #8
   16974:	b2c2      	uxtb	r2, r0
   16976:	4912      	ldr	r1, [pc, #72]	; (169c0 <print_interrupt_bt_line+0x128>)
   16978:	4628      	mov	r0, r5
   1697a:	f7fa f902 	bl	10b82 <streamer_printf>
   1697e:	e7da      	b.n	16936 <print_interrupt_bt_line+0x9e>
        streamer_printf(streamer, "       ");
   16980:	4910      	ldr	r1, [pc, #64]	; (169c4 <print_interrupt_bt_line+0x12c>)
   16982:	4628      	mov	r0, r5
   16984:	f7fa f8fd 	bl	10b82 <streamer_printf>
        if (verbose&0x1) {
   16988:	f017 0f01 	tst.w	r7, #1
   1698c:	d0d3      	beq.n	16936 <print_interrupt_bt_line+0x9e>
            streamer_printf(streamer, " %32s ", "");
   1698e:	4a0e      	ldr	r2, [pc, #56]	; (169c8 <print_interrupt_bt_line+0x130>)
   16990:	490e      	ldr	r1, [pc, #56]	; (169cc <print_interrupt_bt_line+0x134>)
   16992:	4628      	mov	r0, r5
   16994:	f7fa f8f5 	bl	10b82 <streamer_printf>
   16998:	e7cd      	b.n	16936 <print_interrupt_bt_line+0x9e>
    if (!p->utime) return 0;
   1699a:	2000      	movs	r0, #0
   1699c:	e7de      	b.n	1695c <print_interrupt_bt_line+0xc4>
   1699e:	bf00      	nop
   169a0:	00022f8c 	.word	0x00022f8c
   169a4:	00022f94 	.word	0x00022f94
   169a8:	000233fc 	.word	0x000233fc
   169ac:	00022f9c 	.word	0x00022f9c
   169b0:	000231d4 	.word	0x000231d4
   169b4:	00022fa4 	.word	0x00022fa4
   169b8:	00022fd4 	.word	0x00022fd4
   169bc:	00022fe0 	.word	0x00022fe0
   169c0:	00022fb8 	.word	0x00022fb8
   169c4:	00022fc4 	.word	0x00022fc4
   169c8:	000232e8 	.word	0x000232e8
   169cc:	00022fcc 	.word	0x00022fcc
   169d0:	00022f84 	.word	0x00022f84

000169d4 <cmd_to_string>:
{
   169d4:	b570      	push	{r4, r5, r6, lr}
   169d6:	4605      	mov	r5, r0
   169d8:	460e      	mov	r6, r1
    memset(b,0,sizeof(b));
   169da:	4b1b      	ldr	r3, [pc, #108]	; (16a48 <cmd_to_string+0x74>)
   169dc:	2200      	movs	r2, #0
   169de:	601a      	str	r2, [r3, #0]
   169e0:	605a      	str	r2, [r3, #4]
   169e2:	609a      	str	r2, [r3, #8]
   169e4:	60da      	str	r2, [r3, #12]
    if (cmd[0] & 0x80) bp += snprintf(bp,sizeof(b)-(bp-b), "W");
   169e6:	f990 3000 	ldrsb.w	r3, [r0]
   169ea:	4293      	cmp	r3, r2
   169ec:	db26      	blt.n	16a3c <cmd_to_string+0x68>
    else               bp += snprintf(bp,sizeof(b)-(bp-b), "R");
   169ee:	4c16      	ldr	r4, [pc, #88]	; (16a48 <cmd_to_string+0x74>)
   169f0:	2352      	movs	r3, #82	; 0x52
   169f2:	f824 3b01 	strh.w	r3, [r4], #1
    uint8_t cmd_reg  = cmd[0]&0x3F;
   169f6:	782b      	ldrb	r3, [r5, #0]
    bp += snprintf(bp,sizeof(b)-(bp-b), "@%02X", cmd_reg);
   169f8:	4913      	ldr	r1, [pc, #76]	; (16a48 <cmd_to_string+0x74>)
   169fa:	1a61      	subs	r1, r4, r1
   169fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16a00:	4a12      	ldr	r2, [pc, #72]	; (16a4c <cmd_to_string+0x78>)
   16a02:	f1c1 0110 	rsb	r1, r1, #16
   16a06:	4620      	mov	r0, r4
   16a08:	f7f5 ff83 	bl	c912 <snprintf>
   16a0c:	4420      	add	r0, r4
    if (cmd_len > 1) {
   16a0e:	2e01      	cmp	r6, #1
   16a10:	d912      	bls.n	16a38 <cmd_to_string+0x64>
        uint8_t cmd_extended = (0x8 & cmd[1]) != 0;
   16a12:	786a      	ldrb	r2, [r5, #1]
        uint16_t subaddress = 0x7F & cmd[1];
   16a14:	f002 017f 	and.w	r1, r2, #127	; 0x7f
   16a18:	460b      	mov	r3, r1
        if (cmd_extended && cmd_len > 2) {
   16a1a:	f012 0f08 	tst.w	r2, #8
   16a1e:	d004      	beq.n	16a2a <cmd_to_string+0x56>
   16a20:	2e02      	cmp	r6, #2
   16a22:	d902      	bls.n	16a2a <cmd_to_string+0x56>
            subaddress |= ((uint16_t)cmd[2]) << 7;
   16a24:	78ab      	ldrb	r3, [r5, #2]
   16a26:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
        bp += snprintf(bp,sizeof(b)-(bp-b), ":%x", subaddress);
   16a2a:	4907      	ldr	r1, [pc, #28]	; (16a48 <cmd_to_string+0x74>)
   16a2c:	1a41      	subs	r1, r0, r1
   16a2e:	4a08      	ldr	r2, [pc, #32]	; (16a50 <cmd_to_string+0x7c>)
   16a30:	f1c1 0110 	rsb	r1, r1, #16
   16a34:	f7f5 ff6d 	bl	c912 <snprintf>
}
   16a38:	4803      	ldr	r0, [pc, #12]	; (16a48 <cmd_to_string+0x74>)
   16a3a:	bd70      	pop	{r4, r5, r6, pc}
    if (cmd[0] & 0x80) bp += snprintf(bp,sizeof(b)-(bp-b), "W");
   16a3c:	4c02      	ldr	r4, [pc, #8]	; (16a48 <cmd_to_string+0x74>)
   16a3e:	2357      	movs	r3, #87	; 0x57
   16a40:	f824 3b01 	strh.w	r3, [r4], #1
   16a44:	e7d7      	b.n	169f6 <cmd_to_string+0x22>
   16a46:	bf00      	nop
   16a48:	200065dc 	.word	0x200065dc
   16a4c:	00022fe4 	.word	0x00022fe4
   16a50:	00022fec 	.word	0x00022fec

00016a54 <print_spi_bt_line>:
{
   16a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16a58:	b083      	sub	sp, #12
   16a5a:	4614      	mov	r4, r2
   16a5c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    if (!p->utime) return 0;
   16a5e:	6812      	ldr	r2, [r2, #0]
   16a60:	2a00      	cmp	r2, #0
   16a62:	d07d      	beq.n	16b60 <print_spi_bt_line+0x10c>
   16a64:	4605      	mov	r5, r0
   16a66:	460f      	mov	r7, r1
    if (!*start_t) *start_t = p->utime;
   16a68:	6801      	ldr	r1, [r0, #0]
   16a6a:	b901      	cbnz	r1, 16a6e <print_spi_bt_line+0x1a>
   16a6c:	6002      	str	r2, [r0, #0]
    int32_t diff = (p_last)? p->utime-p_last->utime : 0;
   16a6e:	b38b      	cbz	r3, 16ad4 <print_spi_bt_line+0x80>
   16a70:	6822      	ldr	r2, [r4, #0]
   16a72:	681b      	ldr	r3, [r3, #0]
    if (diff < 0) diff = 0;
   16a74:	ebb2 0803 	subs.w	r8, r2, r3
   16a78:	d42f      	bmi.n	16ada <print_spi_bt_line+0x86>
    streamer_printf(streamer, " %10lu ", dpl_cputime_ticks_to_usecs(p->utime));
   16a7a:	f8df 911c 	ldr.w	r9, [pc, #284]	; 16b98 <print_spi_bt_line+0x144>
   16a7e:	6822      	ldr	r2, [r4, #0]
   16a80:	4649      	mov	r1, r9
   16a82:	4630      	mov	r0, r6
   16a84:	f7fa f87d 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %10lu ", dpl_cputime_ticks_to_usecs(p->utime-*start_t));
   16a88:	6822      	ldr	r2, [r4, #0]
   16a8a:	682b      	ldr	r3, [r5, #0]
   16a8c:	1ad2      	subs	r2, r2, r3
   16a8e:	4649      	mov	r1, r9
   16a90:	4630      	mov	r0, r6
   16a92:	f7fa f876 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %8lu ", dpl_cputime_ticks_to_usecs(diff));
   16a96:	4642      	mov	r2, r8
   16a98:	4933      	ldr	r1, [pc, #204]	; (16b68 <print_spi_bt_line+0x114>)
   16a9a:	4630      	mov	r0, r6
   16a9c:	f7fa f871 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %6lu ", dpl_cputime_ticks_to_usecs(p->utime_end-p->utime));
   16aa0:	6962      	ldr	r2, [r4, #20]
   16aa2:	6823      	ldr	r3, [r4, #0]
   16aa4:	1ad2      	subs	r2, r2, r3
   16aa6:	4931      	ldr	r1, [pc, #196]	; (16b6c <print_spi_bt_line+0x118>)
   16aa8:	4630      	mov	r0, r6
   16aaa:	f7fa f86a 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %3s%s  ", (p->non_blocking)?"NB-":"", (p->is_write)?"W":"R");
   16aae:	7a63      	ldrb	r3, [r4, #9]
   16ab0:	f013 0f02 	tst.w	r3, #2
   16ab4:	d014      	beq.n	16ae0 <print_spi_bt_line+0x8c>
   16ab6:	4a2e      	ldr	r2, [pc, #184]	; (16b70 <print_spi_bt_line+0x11c>)
   16ab8:	f013 0f01 	tst.w	r3, #1
   16abc:	d012      	beq.n	16ae4 <print_spi_bt_line+0x90>
   16abe:	4b2d      	ldr	r3, [pc, #180]	; (16b74 <print_spi_bt_line+0x120>)
   16ac0:	492d      	ldr	r1, [pc, #180]	; (16b78 <print_spi_bt_line+0x124>)
   16ac2:	4630      	mov	r0, r6
   16ac4:	f7fa f85d 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " ");
   16ac8:	492c      	ldr	r1, [pc, #176]	; (16b7c <print_spi_bt_line+0x128>)
   16aca:	4630      	mov	r0, r6
   16acc:	f7fa f859 	bl	10b82 <streamer_printf>
    for (j=0;j<4;j++) {
   16ad0:	2500      	movs	r5, #0
   16ad2:	e00e      	b.n	16af2 <print_spi_bt_line+0x9e>
    int32_t diff = (p_last)? p->utime-p_last->utime : 0;
   16ad4:	f04f 0800 	mov.w	r8, #0
   16ad8:	e7cf      	b.n	16a7a <print_spi_bt_line+0x26>
    if (diff < 0) diff = 0;
   16ada:	f04f 0800 	mov.w	r8, #0
   16ade:	e7cc      	b.n	16a7a <print_spi_bt_line+0x26>
    streamer_printf(streamer, " %3s%s  ", (p->non_blocking)?"NB-":"", (p->is_write)?"W":"R");
   16ae0:	4a27      	ldr	r2, [pc, #156]	; (16b80 <print_spi_bt_line+0x12c>)
   16ae2:	e7e9      	b.n	16ab8 <print_spi_bt_line+0x64>
   16ae4:	4b27      	ldr	r3, [pc, #156]	; (16b84 <print_spi_bt_line+0x130>)
   16ae6:	e7eb      	b.n	16ac0 <print_spi_bt_line+0x6c>
            streamer_printf(streamer, "  ");
   16ae8:	4927      	ldr	r1, [pc, #156]	; (16b88 <print_spi_bt_line+0x134>)
   16aea:	4630      	mov	r0, r6
   16aec:	f7fa f849 	bl	10b82 <streamer_printf>
    for (j=0;j<4;j++) {
   16af0:	3501      	adds	r5, #1
   16af2:	2d03      	cmp	r5, #3
   16af4:	dc09      	bgt.n	16b0a <print_spi_bt_line+0xb6>
        if (j<p->cmd_len) {
   16af6:	7a23      	ldrb	r3, [r4, #8]
   16af8:	42ab      	cmp	r3, r5
   16afa:	ddf5      	ble.n	16ae8 <print_spi_bt_line+0x94>
            streamer_printf(streamer, "%02X", p->cmd[j]);
   16afc:	1963      	adds	r3, r4, r5
   16afe:	791a      	ldrb	r2, [r3, #4]
   16b00:	4922      	ldr	r1, [pc, #136]	; (16b8c <print_spi_bt_line+0x138>)
   16b02:	4630      	mov	r0, r6
   16b04:	f7fa f83d 	bl	10b82 <streamer_printf>
   16b08:	e7f2      	b.n	16af0 <print_spi_bt_line+0x9c>
    if (verbose&0x1) {
   16b0a:	f017 0f01 	tst.w	r7, #1
   16b0e:	d106      	bne.n	16b1e <print_spi_bt_line+0xca>
    streamer_printf(streamer, " %4d ", p->data_len);
   16b10:	8a62      	ldrh	r2, [r4, #18]
   16b12:	491f      	ldr	r1, [pc, #124]	; (16b90 <print_spi_bt_line+0x13c>)
   16b14:	4630      	mov	r0, r6
   16b16:	f7fa f834 	bl	10b82 <streamer_printf>
    for (j=0;j<p->data_len&&j<sizeof(p->data);j++) {
   16b1a:	2500      	movs	r5, #0
   16b1c:	e017      	b.n	16b4e <print_spi_bt_line+0xfa>
        char *s = cmd_to_string(p->cmd, p->cmd_len);
   16b1e:	7a21      	ldrb	r1, [r4, #8]
   16b20:	1d20      	adds	r0, r4, #4
   16b22:	f7ff ff57 	bl	169d4 <cmd_to_string>
   16b26:	4605      	mov	r5, r0
        streamer_printf(streamer, " (%s)%*s", s, 17-strlen(s), " ");
   16b28:	f7f5 fae8 	bl	c0fc <strlen>
   16b2c:	4b13      	ldr	r3, [pc, #76]	; (16b7c <print_spi_bt_line+0x128>)
   16b2e:	9300      	str	r3, [sp, #0]
   16b30:	f1c0 0311 	rsb	r3, r0, #17
   16b34:	462a      	mov	r2, r5
   16b36:	4917      	ldr	r1, [pc, #92]	; (16b94 <print_spi_bt_line+0x140>)
   16b38:	4630      	mov	r0, r6
   16b3a:	f7fa f822 	bl	10b82 <streamer_printf>
   16b3e:	e7e7      	b.n	16b10 <print_spi_bt_line+0xbc>
        streamer_printf(streamer, "%02X", p->data[j]);
   16b40:	1963      	adds	r3, r4, r5
   16b42:	7a9a      	ldrb	r2, [r3, #10]
   16b44:	4911      	ldr	r1, [pc, #68]	; (16b8c <print_spi_bt_line+0x138>)
   16b46:	4630      	mov	r0, r6
   16b48:	f7fa f81b 	bl	10b82 <streamer_printf>
    for (j=0;j<p->data_len&&j<sizeof(p->data);j++) {
   16b4c:	3501      	adds	r5, #1
   16b4e:	8a63      	ldrh	r3, [r4, #18]
   16b50:	42ab      	cmp	r3, r5
   16b52:	dd07      	ble.n	16b64 <print_spi_bt_line+0x110>
   16b54:	2d07      	cmp	r5, #7
   16b56:	d9f3      	bls.n	16b40 <print_spi_bt_line+0xec>
    return 1;
   16b58:	2001      	movs	r0, #1
}
   16b5a:	b003      	add	sp, #12
   16b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!p->utime) return 0;
   16b60:	2000      	movs	r0, #0
   16b62:	e7fa      	b.n	16b5a <print_spi_bt_line+0x106>
    return 1;
   16b64:	2001      	movs	r0, #1
   16b66:	e7f8      	b.n	16b5a <print_spi_bt_line+0x106>
   16b68:	00022f8c 	.word	0x00022f8c
   16b6c:	00022f94 	.word	0x00022f94
   16b70:	00022ff0 	.word	0x00022ff0
   16b74:	00022ff4 	.word	0x00022ff4
   16b78:	00022ff8 	.word	0x00022ff8
   16b7c:	000231d4 	.word	0x000231d4
   16b80:	000232e8 	.word	0x000232e8
   16b84:	00023a7c 	.word	0x00023a7c
   16b88:	0002300c 	.word	0x0002300c
   16b8c:	00023004 	.word	0x00023004
   16b90:	0002301c 	.word	0x0002301c
   16b94:	00023010 	.word	0x00023010
   16b98:	00022f84 	.word	0x00022f84

00016b9c <dw1000_cli_dump_registers>:
{
   16b9c:	b570      	push	{r4, r5, r6, lr}
   16b9e:	b082      	sub	sp, #8
   16ba0:	4605      	mov	r5, r0
   16ba2:	460e      	mov	r6, r1
    for(i=0; i<0x37; i++)
   16ba4:	2400      	movs	r4, #0
   16ba6:	e00e      	b.n	16bc6 <dw1000_cli_dump_registers+0x2a>
            reg = dw1000_read_reg(inst, i, 0, 4);
   16ba8:	2304      	movs	r3, #4
   16baa:	2200      	movs	r2, #0
   16bac:	b2a1      	uxth	r1, r4
   16bae:	4628      	mov	r0, r5
   16bb0:	f7fb fcd4 	bl	1255c <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%08llX\"}\n",i,reg&0xffffffff);
   16bb4:	9000      	str	r0, [sp, #0]
   16bb6:	2300      	movs	r3, #0
   16bb8:	9301      	str	r3, [sp, #4]
   16bba:	4622      	mov	r2, r4
   16bbc:	494b      	ldr	r1, [pc, #300]	; (16cec <dw1000_cli_dump_registers+0x150>)
   16bbe:	4630      	mov	r0, r6
   16bc0:	f7f9 ffdf 	bl	10b82 <streamer_printf>
    for(i=0; i<0x37; i++)
   16bc4:	3401      	adds	r4, #1
   16bc6:	2c36      	cmp	r4, #54	; 0x36
   16bc8:	dc77      	bgt.n	16cba <dw1000_cli_dump_registers+0x11e>
        if (i==0x05 || i==0x07 || i==0x0B ||
   16bca:	2c05      	cmp	r4, #5
   16bcc:	d0fa      	beq.n	16bc4 <dw1000_cli_dump_registers+0x28>
   16bce:	2c07      	cmp	r4, #7
   16bd0:	d0f8      	beq.n	16bc4 <dw1000_cli_dump_registers+0x28>
   16bd2:	2c0b      	cmp	r4, #11
   16bd4:	d0f6      	beq.n	16bc4 <dw1000_cli_dump_registers+0x28>
   16bd6:	2c16      	cmp	r4, #22
   16bd8:	d0f4      	beq.n	16bc4 <dw1000_cli_dump_registers+0x28>
            i==0x16 || i==0x1B || i==0x1C ||
   16bda:	2c1b      	cmp	r4, #27
   16bdc:	d0f2      	beq.n	16bc4 <dw1000_cli_dump_registers+0x28>
   16bde:	2c1c      	cmp	r4, #28
   16be0:	d0f0      	beq.n	16bc4 <dw1000_cli_dump_registers+0x28>
   16be2:	2c20      	cmp	r4, #32
   16be4:	d0ee      	beq.n	16bc4 <dw1000_cli_dump_registers+0x28>
            i==0x20 || i==0x22 || i==0x29 ||
   16be6:	2c22      	cmp	r4, #34	; 0x22
   16be8:	d0ec      	beq.n	16bc4 <dw1000_cli_dump_registers+0x28>
   16bea:	2c29      	cmp	r4, #41	; 0x29
   16bec:	d0ea      	beq.n	16bc4 <dw1000_cli_dump_registers+0x28>
            (i>0x29 && i<0x36)) {
   16bee:	f1a4 032a 	sub.w	r3, r4, #42	; 0x2a
            i==0x20 || i==0x22 || i==0x29 ||
   16bf2:	2b0b      	cmp	r3, #11
   16bf4:	d9e6      	bls.n	16bc4 <dw1000_cli_dump_registers+0x28>
        switch (i) {
   16bf6:	2c1f      	cmp	r4, #31
   16bf8:	d851      	bhi.n	16c9e <dw1000_cli_dump_registers+0x102>
   16bfa:	a301      	add	r3, pc, #4	; (adr r3, 16c00 <dw1000_cli_dump_registers+0x64>)
   16bfc:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
   16c00:	00016ba9 	.word	0x00016ba9
   16c04:	00016c9f 	.word	0x00016c9f
   16c08:	00016c9f 	.word	0x00016c9f
   16c0c:	00016ba9 	.word	0x00016ba9
   16c10:	00016ba9 	.word	0x00016ba9
   16c14:	00016c9f 	.word	0x00016c9f
   16c18:	00016c81 	.word	0x00016c81
   16c1c:	00016c9f 	.word	0x00016c9f
   16c20:	00016c81 	.word	0x00016c81
   16c24:	00016c9f 	.word	0x00016c9f
   16c28:	00016c81 	.word	0x00016c81
   16c2c:	00016c9f 	.word	0x00016c9f
   16c30:	00016ba9 	.word	0x00016ba9
   16c34:	00016ba9 	.word	0x00016ba9
   16c38:	00016c81 	.word	0x00016c81
   16c3c:	00016c81 	.word	0x00016c81
   16c40:	00016ba9 	.word	0x00016ba9
   16c44:	00016c9f 	.word	0x00016c9f
   16c48:	00016c9f 	.word	0x00016c9f
   16c4c:	00016ba9 	.word	0x00016ba9
   16c50:	00016c81 	.word	0x00016c81
   16c54:	00016c81 	.word	0x00016c81
   16c58:	00016c9f 	.word	0x00016c9f
   16c5c:	00016c81 	.word	0x00016c81
   16c60:	00016ba9 	.word	0x00016ba9
   16c64:	00016c81 	.word	0x00016c81
   16c68:	00016ba9 	.word	0x00016ba9
   16c6c:	00016c9f 	.word	0x00016c9f
   16c70:	00016c9f 	.word	0x00016c9f
   16c74:	00016ba9 	.word	0x00016ba9
   16c78:	00016ba9 	.word	0x00016ba9
   16c7c:	00016ba9 	.word	0x00016ba9
            reg = dw1000_read_reg(inst, i, 0, 5);
   16c80:	2305      	movs	r3, #5
   16c82:	2200      	movs	r2, #0
   16c84:	b2a1      	uxth	r1, r4
   16c86:	4628      	mov	r0, r5
   16c88:	f7fb fc68 	bl	1255c <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%010llX\"}\n",i,reg&0xffffffffffll);
   16c8c:	b2c9      	uxtb	r1, r1
   16c8e:	9000      	str	r0, [sp, #0]
   16c90:	9101      	str	r1, [sp, #4]
   16c92:	4622      	mov	r2, r4
   16c94:	4916      	ldr	r1, [pc, #88]	; (16cf0 <dw1000_cli_dump_registers+0x154>)
   16c96:	4630      	mov	r0, r6
   16c98:	f7f9 ff73 	bl	10b82 <streamer_printf>
            break;
   16c9c:	e792      	b.n	16bc4 <dw1000_cli_dump_registers+0x28>
            reg = dw1000_read_reg(inst, i, 0, l);
   16c9e:	2308      	movs	r3, #8
   16ca0:	2200      	movs	r2, #0
   16ca2:	b2a1      	uxth	r1, r4
   16ca4:	4628      	mov	r0, r5
   16ca6:	f7fb fc59 	bl	1255c <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%016llX\"}\n",i,
   16caa:	e9cd 0100 	strd	r0, r1, [sp]
   16cae:	4622      	mov	r2, r4
   16cb0:	4910      	ldr	r1, [pc, #64]	; (16cf4 <dw1000_cli_dump_registers+0x158>)
   16cb2:	4630      	mov	r0, r6
   16cb4:	f7f9 ff65 	bl	10b82 <streamer_printf>
   16cb8:	e784      	b.n	16bc4 <dw1000_cli_dump_registers+0x28>
    streamer_printf(streamer, "{\"inst->irq_sem\"=%d}\n", dpl_sem_get_count(&inst->uwb_dev.irq_sem));
   16cba:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
   16cbc:	490e      	ldr	r1, [pc, #56]	; (16cf8 <dw1000_cli_dump_registers+0x15c>)
   16cbe:	4630      	mov	r0, r6
   16cc0:	f7f9 ff5f 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, "{\"inst->tx_sem\"=%d}\n", dpl_sem_get_count(&inst->tx_sem));
   16cc4:	f8b5 256e 	ldrh.w	r2, [r5, #1390]	; 0x56e
   16cc8:	490c      	ldr	r1, [pc, #48]	; (16cfc <dw1000_cli_dump_registers+0x160>)
   16cca:	4630      	mov	r0, r6
   16ccc:	f7f9 ff59 	bl	10b82 <streamer_printf>
    struct uwb_rng_instance *rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(&inst->uwb_dev, UWBEXT_RNG);
   16cd0:	2104      	movs	r1, #4
   16cd2:	4628      	mov	r0, r5
   16cd4:	f7f1 ff19 	bl	8b0a <uwb_mac_find_cb_inst_ptr>
    if (rng)
   16cd8:	b128      	cbz	r0, 16ce6 <dw1000_cli_dump_registers+0x14a>
        streamer_printf(streamer, "{\"rng->sem\"=%d}\n", dpl_sem_get_count(&rng->sem));
   16cda:	f8b0 2052 	ldrh.w	r2, [r0, #82]	; 0x52
   16cde:	4908      	ldr	r1, [pc, #32]	; (16d00 <dw1000_cli_dump_registers+0x164>)
   16ce0:	4630      	mov	r0, r6
   16ce2:	f7f9 ff4e 	bl	10b82 <streamer_printf>
}
   16ce6:	b002      	add	sp, #8
   16ce8:	bd70      	pop	{r4, r5, r6, pc}
   16cea:	bf00      	nop
   16cec:	00023024 	.word	0x00023024
   16cf0:	00023040 	.word	0x00023040
   16cf4:	0002305c 	.word	0x0002305c
   16cf8:	00023078 	.word	0x00023078
   16cfc:	00023090 	.word	0x00023090
   16d00:	000230a8 	.word	0x000230a8

00016d04 <dw1000_cli_dump_address>:
{
   16d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d08:	b09b      	sub	sp, #108	; 0x6c
   16d0a:	9013      	str	r0, [sp, #76]	; 0x4c
   16d0c:	9114      	str	r1, [sp, #80]	; 0x50
   16d0e:	9212      	str	r2, [sp, #72]	; 0x48
   16d10:	9315      	str	r3, [sp, #84]	; 0x54
    streamer_printf(streamer, "Dump starting at %06"PRIX32":\n", addr);
   16d12:	460a      	mov	r2, r1
   16d14:	492d      	ldr	r1, [pc, #180]	; (16dcc <dw1000_cli_dump_address+0xc8>)
   16d16:	4618      	mov	r0, r3
   16d18:	f7f9 ff33 	bl	10b82 <streamer_printf>
    for (i=0;i<length;i+=step) {
   16d1c:	f04f 0800 	mov.w	r8, #0
   16d20:	e04d      	b.n	16dbe <dw1000_cli_dump_address+0xba>
        memset(b,0,sizeof(b));
   16d22:	2300      	movs	r3, #0
   16d24:	9316      	str	r3, [sp, #88]	; 0x58
   16d26:	9317      	str	r3, [sp, #92]	; 0x5c
   16d28:	9318      	str	r3, [sp, #96]	; 0x60
   16d2a:	9319      	str	r3, [sp, #100]	; 0x64
        dw1000_read(inst, addr, i, b, step);
   16d2c:	2310      	movs	r3, #16
   16d2e:	9300      	str	r3, [sp, #0]
   16d30:	ab16      	add	r3, sp, #88	; 0x58
   16d32:	fa1f f288 	uxth.w	r2, r8
   16d36:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
   16d3a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   16d3c:	f7fb fb44 	bl	123c8 <dw1000_read>
               i, b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7],
   16d40:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   16d44:	9310      	str	r3, [sp, #64]	; 0x40
   16d46:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   16d4a:	f89d 205b 	ldrb.w	r2, [sp, #91]	; 0x5b
   16d4e:	9211      	str	r2, [sp, #68]	; 0x44
   16d50:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
   16d54:	f89d 005d 	ldrb.w	r0, [sp, #93]	; 0x5d
   16d58:	f89d 405e 	ldrb.w	r4, [sp, #94]	; 0x5e
   16d5c:	f89d 505f 	ldrb.w	r5, [sp, #95]	; 0x5f
               b[8], b[9], b[10], b[11], b[12], b[13], b[14], b[15]);
   16d60:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
   16d64:	f89d 7061 	ldrb.w	r7, [sp, #97]	; 0x61
   16d68:	f89d c062 	ldrb.w	ip, [sp, #98]	; 0x62
   16d6c:	f89d e063 	ldrb.w	lr, [sp, #99]	; 0x63
   16d70:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   16d74:	f89d 9065 	ldrb.w	r9, [sp, #101]	; 0x65
   16d78:	f89d a066 	ldrb.w	sl, [sp, #102]	; 0x66
   16d7c:	f89d b067 	ldrb.w	fp, [sp, #103]	; 0x67
        streamer_printf(streamer, "%04X: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n",
   16d80:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   16d84:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   16d88:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   16d8c:	920b      	str	r2, [sp, #44]	; 0x2c
   16d8e:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
   16d92:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   16d96:	9708      	str	r7, [sp, #32]
   16d98:	9607      	str	r6, [sp, #28]
   16d9a:	9506      	str	r5, [sp, #24]
   16d9c:	9405      	str	r4, [sp, #20]
   16d9e:	9004      	str	r0, [sp, #16]
   16da0:	9103      	str	r1, [sp, #12]
   16da2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16da4:	9202      	str	r2, [sp, #8]
   16da6:	9301      	str	r3, [sp, #4]
   16da8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16daa:	9300      	str	r3, [sp, #0]
   16dac:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   16db0:	4642      	mov	r2, r8
   16db2:	4907      	ldr	r1, [pc, #28]	; (16dd0 <dw1000_cli_dump_address+0xcc>)
   16db4:	9815      	ldr	r0, [sp, #84]	; 0x54
   16db6:	f7f9 fee4 	bl	10b82 <streamer_printf>
    for (i=0;i<length;i+=step) {
   16dba:	f108 0810 	add.w	r8, r8, #16
   16dbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16dc0:	4543      	cmp	r3, r8
   16dc2:	dcae      	bgt.n	16d22 <dw1000_cli_dump_address+0x1e>
}
   16dc4:	b01b      	add	sp, #108	; 0x6c
   16dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dca:	bf00      	nop
   16dcc:	000230bc 	.word	0x000230bc
   16dd0:	000230d8 	.word	0x000230d8

00016dd4 <dw1000_cli_interrupt_backtrace>:
{
   16dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16dd8:	b085      	sub	sp, #20
   16dda:	4607      	mov	r7, r0
   16ddc:	4688      	mov	r8, r1
   16dde:	4616      	mov	r6, r2
    uint32_t start_t = 0;
   16de0:	2300      	movs	r3, #0
   16de2:	9303      	str	r3, [sp, #12]
    streamer_printf(streamer, " %10s ", "abs");
   16de4:	4c44      	ldr	r4, [pc, #272]	; (16ef8 <dw1000_cli_interrupt_backtrace+0x124>)
   16de6:	4a45      	ldr	r2, [pc, #276]	; (16efc <dw1000_cli_interrupt_backtrace+0x128>)
   16de8:	4621      	mov	r1, r4
   16dea:	4630      	mov	r0, r6
   16dec:	f7f9 fec9 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %10s ", "usec");
   16df0:	4a43      	ldr	r2, [pc, #268]	; (16f00 <dw1000_cli_interrupt_backtrace+0x12c>)
   16df2:	4621      	mov	r1, r4
   16df4:	4630      	mov	r0, r6
   16df6:	f7f9 fec4 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %8s ", "diff");
   16dfa:	4a42      	ldr	r2, [pc, #264]	; (16f04 <dw1000_cli_interrupt_backtrace+0x130>)
   16dfc:	4942      	ldr	r1, [pc, #264]	; (16f08 <dw1000_cli_interrupt_backtrace+0x134>)
   16dfe:	4630      	mov	r0, r6
   16e00:	f7f9 febf 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %6s ", "dur");
   16e04:	4a41      	ldr	r2, [pc, #260]	; (16f0c <dw1000_cli_interrupt_backtrace+0x138>)
   16e06:	4942      	ldr	r1, [pc, #264]	; (16f10 <dw1000_cli_interrupt_backtrace+0x13c>)
   16e08:	4630      	mov	r0, r6
   16e0a:	f7f9 feba 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %2s", "ir");
   16e0e:	4a41      	ldr	r2, [pc, #260]	; (16f14 <dw1000_cli_interrupt_backtrace+0x140>)
   16e10:	4941      	ldr	r1, [pc, #260]	; (16f18 <dw1000_cli_interrupt_backtrace+0x144>)
   16e12:	4630      	mov	r0, r6
   16e14:	f7f9 feb5 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %5s", "fctrl");
   16e18:	4a40      	ldr	r2, [pc, #256]	; (16f1c <dw1000_cli_interrupt_backtrace+0x148>)
   16e1a:	4941      	ldr	r1, [pc, #260]	; (16f20 <dw1000_cli_interrupt_backtrace+0x14c>)
   16e1c:	4630      	mov	r0, r6
   16e1e:	f7f9 feb0 	bl	10b82 <streamer_printf>
    if (verbose&0x1) {
   16e22:	f018 0901 	ands.w	r9, r8, #1
   16e26:	d10b      	bne.n	16e40 <dw1000_cli_interrupt_backtrace+0x6c>
    streamer_printf(streamer, " %*s ", 2*DW1000_SYS_STATUS_ASSEMBLE_LEN, "status");
   16e28:	4b3e      	ldr	r3, [pc, #248]	; (16f24 <dw1000_cli_interrupt_backtrace+0x150>)
   16e2a:	2208      	movs	r2, #8
   16e2c:	493e      	ldr	r1, [pc, #248]	; (16f28 <dw1000_cli_interrupt_backtrace+0x154>)
   16e2e:	4630      	mov	r0, r6
   16e30:	f7f9 fea7 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, "   status2txt\n");
   16e34:	493d      	ldr	r1, [pc, #244]	; (16f2c <dw1000_cli_interrupt_backtrace+0x158>)
   16e36:	4630      	mov	r0, r6
   16e38:	f7f9 fea3 	bl	10b82 <streamer_printf>
    for (i=0;i<80;i++) streamer_printf(streamer, "-");
   16e3c:	2400      	movs	r4, #0
   16e3e:	e00a      	b.n	16e56 <dw1000_cli_interrupt_backtrace+0x82>
        streamer_printf(streamer, "(fctrl2txt)%21s ", "");
   16e40:	4a3b      	ldr	r2, [pc, #236]	; (16f30 <dw1000_cli_interrupt_backtrace+0x15c>)
   16e42:	493c      	ldr	r1, [pc, #240]	; (16f34 <dw1000_cli_interrupt_backtrace+0x160>)
   16e44:	4630      	mov	r0, r6
   16e46:	f7f9 fe9c 	bl	10b82 <streamer_printf>
   16e4a:	e7ed      	b.n	16e28 <dw1000_cli_interrupt_backtrace+0x54>
    for (i=0;i<80;i++) streamer_printf(streamer, "-");
   16e4c:	493a      	ldr	r1, [pc, #232]	; (16f38 <dw1000_cli_interrupt_backtrace+0x164>)
   16e4e:	4630      	mov	r0, r6
   16e50:	f7f9 fe97 	bl	10b82 <streamer_printf>
   16e54:	3401      	adds	r4, #1
   16e56:	2c4f      	cmp	r4, #79	; 0x4f
   16e58:	ddf8      	ble.n	16e4c <dw1000_cli_interrupt_backtrace+0x78>
    if (verbose&0x1) {
   16e5a:	f1b9 0f00 	cmp.w	r9, #0
   16e5e:	d111      	bne.n	16e84 <dw1000_cli_interrupt_backtrace+0xb0>
    streamer_printf(streamer, "\n");
   16e60:	4936      	ldr	r1, [pc, #216]	; (16f3c <dw1000_cli_interrupt_backtrace+0x168>)
   16e62:	4630      	mov	r0, r6
   16e64:	f7f9 fe8d 	bl	10b82 <streamer_printf>
    inst->sys_status_bt_lock = 1;
   16e68:	2301      	movs	r3, #1
   16e6a:	f887 3dfe 	strb.w	r3, [r7, #3582]	; 0xdfe
    struct dw1000_sys_status_backtrace *p, *p_last=0;
   16e6e:	2300      	movs	r3, #0
    for (i=0;i<MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN);i++) {
   16e70:	461d      	mov	r5, r3
   16e72:	e00b      	b.n	16e8c <dw1000_cli_interrupt_backtrace+0xb8>
        for (i=0;i<34;i++) streamer_printf(streamer, "-");
   16e74:	4930      	ldr	r1, [pc, #192]	; (16f38 <dw1000_cli_interrupt_backtrace+0x164>)
   16e76:	4630      	mov	r0, r6
   16e78:	f7f9 fe83 	bl	10b82 <streamer_printf>
   16e7c:	3401      	adds	r4, #1
   16e7e:	2c21      	cmp	r4, #33	; 0x21
   16e80:	ddf8      	ble.n	16e74 <dw1000_cli_interrupt_backtrace+0xa0>
   16e82:	e7ed      	b.n	16e60 <dw1000_cli_interrupt_backtrace+0x8c>
   16e84:	2400      	movs	r4, #0
   16e86:	e7fa      	b.n	16e7e <dw1000_cli_interrupt_backtrace+0xaa>
    for (i=0;i<MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN);i++) {
   16e88:	3501      	adds	r5, #1
        p_last = p;
   16e8a:	4623      	mov	r3, r4
    for (i=0;i<MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN);i++) {
   16e8c:	2d7f      	cmp	r5, #127	; 0x7f
   16e8e:	dc21      	bgt.n	16ed4 <dw1000_cli_interrupt_backtrace+0x100>
        uint16_t i_mod = (inst->sys_status_bt_idx + i + 1) % MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN);
   16e90:	f8b7 cdfc 	ldrh.w	ip, [r7, #3580]	; 0xdfc
   16e94:	44ac      	add	ip, r5
   16e96:	f10c 0c01 	add.w	ip, ip, #1
   16e9a:	f1dc 0200 	rsbs	r2, ip, #0
   16e9e:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   16ea2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16ea6:	bf58      	it	pl
   16ea8:	f1c2 0c00 	rsbpl	ip, r2, #0
        p = &inst->sys_status_bt[i_mod];
   16eac:	fa1f f48c 	uxth.w	r4, ip
   16eb0:	0124      	lsls	r4, r4, #4
   16eb2:	f504 64bf 	add.w	r4, r4, #1528	; 0x5f8
   16eb6:	443c      	add	r4, r7
   16eb8:	3404      	adds	r4, #4
        if (print_interrupt_bt_line(&start_t, verbose, p, p_last, streamer)) {
   16eba:	9600      	str	r6, [sp, #0]
   16ebc:	4622      	mov	r2, r4
   16ebe:	4641      	mov	r1, r8
   16ec0:	a803      	add	r0, sp, #12
   16ec2:	f7ff fce9 	bl	16898 <print_interrupt_bt_line>
   16ec6:	2800      	cmp	r0, #0
   16ec8:	d0de      	beq.n	16e88 <dw1000_cli_interrupt_backtrace+0xb4>
            streamer_printf(streamer, "\n");
   16eca:	491c      	ldr	r1, [pc, #112]	; (16f3c <dw1000_cli_interrupt_backtrace+0x168>)
   16ecc:	4630      	mov	r0, r6
   16ece:	f7f9 fe58 	bl	10b82 <streamer_printf>
   16ed2:	e7d9      	b.n	16e88 <dw1000_cli_interrupt_backtrace+0xb4>
    inst->sys_status_bt_lock = 0;
   16ed4:	2300      	movs	r3, #0
   16ed6:	f887 3dfe 	strb.w	r3, [r7, #3582]	; 0xdfe
    if (verbose&0x1) {
   16eda:	f1b9 0f00 	cmp.w	r9, #0
   16ede:	d102      	bne.n	16ee6 <dw1000_cli_interrupt_backtrace+0x112>
}
   16ee0:	b005      	add	sp, #20
   16ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        streamer_printf(streamer, "----\n fctrl2txt: \n");
   16ee6:	4916      	ldr	r1, [pc, #88]	; (16f40 <dw1000_cli_interrupt_backtrace+0x16c>)
   16ee8:	4630      	mov	r0, r6
   16eea:	f7f9 fe4a 	bl	10b82 <streamer_printf>
        fctrl_ledgend(streamer);
   16eee:	4630      	mov	r0, r6
   16ef0:	f7ff f906 	bl	16100 <fctrl_ledgend>
}
   16ef4:	e7f4      	b.n	16ee0 <dw1000_cli_interrupt_backtrace+0x10c>
   16ef6:	bf00      	nop
   16ef8:	00023134 	.word	0x00023134
   16efc:	00023130 	.word	0x00023130
   16f00:	0002313c 	.word	0x0002313c
   16f04:	00023144 	.word	0x00023144
   16f08:	0002314c 	.word	0x0002314c
   16f0c:	00023154 	.word	0x00023154
   16f10:	00023158 	.word	0x00023158
   16f14:	00023160 	.word	0x00023160
   16f18:	00023164 	.word	0x00023164
   16f1c:	0002316c 	.word	0x0002316c
   16f20:	00023174 	.word	0x00023174
   16f24:	000227e0 	.word	0x000227e0
   16f28:	00023190 	.word	0x00023190
   16f2c:	00023198 	.word	0x00023198
   16f30:	000232e8 	.word	0x000232e8
   16f34:	0002317c 	.word	0x0002317c
   16f38:	000231a8 	.word	0x000231a8
   16f3c:	00021d7c 	.word	0x00021d7c
   16f40:	000231ac 	.word	0x000231ac

00016f44 <dw1000_cli_spi_backtrace>:
{
   16f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f48:	b084      	sub	sp, #16
   16f4a:	4607      	mov	r7, r0
   16f4c:	4688      	mov	r8, r1
   16f4e:	4616      	mov	r6, r2
    uint32_t start_t = 0;
   16f50:	2300      	movs	r3, #0
   16f52:	9303      	str	r3, [sp, #12]
    streamer_printf(streamer, " %10s ", "abs");
   16f54:	4c41      	ldr	r4, [pc, #260]	; (1705c <dw1000_cli_spi_backtrace+0x118>)
   16f56:	4a42      	ldr	r2, [pc, #264]	; (17060 <dw1000_cli_spi_backtrace+0x11c>)
   16f58:	4621      	mov	r1, r4
   16f5a:	4630      	mov	r0, r6
   16f5c:	f7f9 fe11 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %10s ", "usec");
   16f60:	4a40      	ldr	r2, [pc, #256]	; (17064 <dw1000_cli_spi_backtrace+0x120>)
   16f62:	4621      	mov	r1, r4
   16f64:	4630      	mov	r0, r6
   16f66:	f7f9 fe0c 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %8s ", "diff");
   16f6a:	4a3f      	ldr	r2, [pc, #252]	; (17068 <dw1000_cli_spi_backtrace+0x124>)
   16f6c:	493f      	ldr	r1, [pc, #252]	; (1706c <dw1000_cli_spi_backtrace+0x128>)
   16f6e:	4630      	mov	r0, r6
   16f70:	f7f9 fe07 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %6s ", "dur");
   16f74:	4a3e      	ldr	r2, [pc, #248]	; (17070 <dw1000_cli_spi_backtrace+0x12c>)
   16f76:	493f      	ldr	r1, [pc, #252]	; (17074 <dw1000_cli_spi_backtrace+0x130>)
   16f78:	4630      	mov	r0, r6
   16f7a:	f7f9 fe02 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %5s", "flags");
   16f7e:	4a3e      	ldr	r2, [pc, #248]	; (17078 <dw1000_cli_spi_backtrace+0x134>)
   16f80:	493e      	ldr	r1, [pc, #248]	; (1707c <dw1000_cli_spi_backtrace+0x138>)
   16f82:	4630      	mov	r0, r6
   16f84:	f7f9 fdfd 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %s      ", "cmd");
   16f88:	4a3d      	ldr	r2, [pc, #244]	; (17080 <dw1000_cli_spi_backtrace+0x13c>)
   16f8a:	493e      	ldr	r1, [pc, #248]	; (17084 <dw1000_cli_spi_backtrace+0x140>)
   16f8c:	4630      	mov	r0, r6
   16f8e:	f7f9 fdf8 	bl	10b82 <streamer_printf>
    if (verbose&0x1) {
   16f92:	f018 0501 	ands.w	r5, r8, #1
   16f96:	d10b      	bne.n	16fb0 <dw1000_cli_spi_backtrace+0x6c>
    streamer_printf(streamer, " %4s ", "dlen");
   16f98:	4a3b      	ldr	r2, [pc, #236]	; (17088 <dw1000_cli_spi_backtrace+0x144>)
   16f9a:	493c      	ldr	r1, [pc, #240]	; (1708c <dw1000_cli_spi_backtrace+0x148>)
   16f9c:	4630      	mov	r0, r6
   16f9e:	f7f9 fdf0 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %s\n", "data");
   16fa2:	4a3b      	ldr	r2, [pc, #236]	; (17090 <dw1000_cli_spi_backtrace+0x14c>)
   16fa4:	493b      	ldr	r1, [pc, #236]	; (17094 <dw1000_cli_spi_backtrace+0x150>)
   16fa6:	4630      	mov	r0, r6
   16fa8:	f7f9 fdeb 	bl	10b82 <streamer_printf>
    for (i=0;i<80;i++) streamer_printf(streamer, "-");
   16fac:	2400      	movs	r4, #0
   16fae:	e00a      	b.n	16fc6 <dw1000_cli_spi_backtrace+0x82>
        streamer_printf(streamer, "(cmd2txt)%21s ", "");
   16fb0:	4a39      	ldr	r2, [pc, #228]	; (17098 <dw1000_cli_spi_backtrace+0x154>)
   16fb2:	493a      	ldr	r1, [pc, #232]	; (1709c <dw1000_cli_spi_backtrace+0x158>)
   16fb4:	4630      	mov	r0, r6
   16fb6:	f7f9 fde4 	bl	10b82 <streamer_printf>
   16fba:	e7ed      	b.n	16f98 <dw1000_cli_spi_backtrace+0x54>
    for (i=0;i<80;i++) streamer_printf(streamer, "-");
   16fbc:	4938      	ldr	r1, [pc, #224]	; (170a0 <dw1000_cli_spi_backtrace+0x15c>)
   16fbe:	4630      	mov	r0, r6
   16fc0:	f7f9 fddf 	bl	10b82 <streamer_printf>
   16fc4:	3401      	adds	r4, #1
   16fc6:	2c4f      	cmp	r4, #79	; 0x4f
   16fc8:	ddf8      	ble.n	16fbc <dw1000_cli_spi_backtrace+0x78>
    if (verbose&0x1) {
   16fca:	b99d      	cbnz	r5, 16ff4 <dw1000_cli_spi_backtrace+0xb0>
    streamer_printf(streamer, "\n");
   16fcc:	4935      	ldr	r1, [pc, #212]	; (170a4 <dw1000_cli_spi_backtrace+0x160>)
   16fce:	4630      	mov	r0, r6
   16fd0:	f7f9 fdd7 	bl	10b82 <streamer_printf>
    inst->spi_bt_lock = 1;
   16fd4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   16fd8:	2201      	movs	r2, #1
   16fda:	f883 2602 	strb.w	r2, [r3, #1538]	; 0x602
    struct dw1000_spi_backtrace *p, *p_last=0;
   16fde:	2300      	movs	r3, #0
    for (i=0;i<MYNEWT_VAL(DW1000_SPI_BACKTRACE_LEN);i++) {
   16fe0:	461d      	mov	r5, r3
   16fe2:	e00b      	b.n	16ffc <dw1000_cli_spi_backtrace+0xb8>
        for (i=0;i<34;i++) streamer_printf(streamer, "-");
   16fe4:	492e      	ldr	r1, [pc, #184]	; (170a0 <dw1000_cli_spi_backtrace+0x15c>)
   16fe6:	4630      	mov	r0, r6
   16fe8:	f7f9 fdcb 	bl	10b82 <streamer_printf>
   16fec:	3401      	adds	r4, #1
   16fee:	2c21      	cmp	r4, #33	; 0x21
   16ff0:	ddf8      	ble.n	16fe4 <dw1000_cli_spi_backtrace+0xa0>
   16ff2:	e7eb      	b.n	16fcc <dw1000_cli_spi_backtrace+0x88>
   16ff4:	2400      	movs	r4, #0
   16ff6:	e7fa      	b.n	16fee <dw1000_cli_spi_backtrace+0xaa>
    for (i=0;i<MYNEWT_VAL(DW1000_SPI_BACKTRACE_LEN);i++) {
   16ff8:	3501      	adds	r5, #1
        p_last = p;
   16ffa:	4623      	mov	r3, r4
    for (i=0;i<MYNEWT_VAL(DW1000_SPI_BACKTRACE_LEN);i++) {
   16ffc:	2dff      	cmp	r5, #255	; 0xff
   16ffe:	dc24      	bgt.n	1704a <dw1000_cli_spi_backtrace+0x106>
        uint16_t i_mod = (inst->spi_bt_idx + i + 1) % MYNEWT_VAL(DW1000_SPI_BACKTRACE_LEN);
   17000:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   17004:	f8b2 c600 	ldrh.w	ip, [r2, #1536]	; 0x600
   17008:	44ac      	add	ip, r5
   1700a:	f10c 0c01 	add.w	ip, ip, #1
   1700e:	f1dc 0200 	rsbs	r2, ip, #0
   17012:	fa5f fc8c 	uxtb.w	ip, ip
   17016:	b2d2      	uxtb	r2, r2
   17018:	bf58      	it	pl
   1701a:	f1c2 0c00 	rsbpl	ip, r2, #0
        p = &inst->spi_bt[i_mod];
   1701e:	fa1f fc8c 	uxth.w	ip, ip
   17022:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   17026:	ea4f 04cc 	mov.w	r4, ip, lsl #3
   1702a:	f504 6460 	add.w	r4, r4, #3584	; 0xe00
   1702e:	443c      	add	r4, r7
        if (print_spi_bt_line(&start_t, verbose, p, p_last, streamer)) {
   17030:	9600      	str	r6, [sp, #0]
   17032:	4622      	mov	r2, r4
   17034:	4641      	mov	r1, r8
   17036:	a803      	add	r0, sp, #12
   17038:	f7ff fd0c 	bl	16a54 <print_spi_bt_line>
   1703c:	2800      	cmp	r0, #0
   1703e:	d0db      	beq.n	16ff8 <dw1000_cli_spi_backtrace+0xb4>
            streamer_printf(streamer, "\n");
   17040:	4918      	ldr	r1, [pc, #96]	; (170a4 <dw1000_cli_spi_backtrace+0x160>)
   17042:	4630      	mov	r0, r6
   17044:	f7f9 fd9d 	bl	10b82 <streamer_printf>
   17048:	e7d6      	b.n	16ff8 <dw1000_cli_spi_backtrace+0xb4>
    inst->spi_bt_lock = 0;
   1704a:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   1704e:	2300      	movs	r3, #0
   17050:	f887 3602 	strb.w	r3, [r7, #1538]	; 0x602
}
   17054:	b004      	add	sp, #16
   17056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1705a:	bf00      	nop
   1705c:	00023134 	.word	0x00023134
   17060:	00023130 	.word	0x00023130
   17064:	0002313c 	.word	0x0002313c
   17068:	00023144 	.word	0x00023144
   1706c:	0002314c 	.word	0x0002314c
   17070:	00023154 	.word	0x00023154
   17074:	00023158 	.word	0x00023158
   17078:	000231c0 	.word	0x000231c0
   1707c:	00023174 	.word	0x00023174
   17080:	000231c8 	.word	0x000231c8
   17084:	000231cc 	.word	0x000231cc
   17088:	000231e8 	.word	0x000231e8
   1708c:	000231f0 	.word	0x000231f0
   17090:	000231f8 	.word	0x000231f8
   17094:	000232a4 	.word	0x000232a4
   17098:	000232e8 	.word	0x000232e8
   1709c:	000231d8 	.word	0x000231d8
   170a0:	000231a8 	.word	0x000231a8
   170a4:	00021d7c 	.word	0x00021d7c

000170a8 <dw1000_cli_backtrace>:
{
   170a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170ac:	b087      	sub	sp, #28
   170ae:	4606      	mov	r6, r0
   170b0:	468b      	mov	fp, r1
   170b2:	4615      	mov	r5, r2
    uint32_t start_t = 0;
   170b4:	2400      	movs	r4, #0
   170b6:	9405      	str	r4, [sp, #20]
    streamer_printf(streamer, " %10s ", "abs");
   170b8:	4f5a      	ldr	r7, [pc, #360]	; (17224 <dw1000_cli_backtrace+0x17c>)
   170ba:	4a5b      	ldr	r2, [pc, #364]	; (17228 <dw1000_cli_backtrace+0x180>)
   170bc:	4639      	mov	r1, r7
   170be:	4628      	mov	r0, r5
   170c0:	f7f9 fd5f 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %10s ", "usec");
   170c4:	4a59      	ldr	r2, [pc, #356]	; (1722c <dw1000_cli_backtrace+0x184>)
   170c6:	4639      	mov	r1, r7
   170c8:	4628      	mov	r0, r5
   170ca:	f7f9 fd5a 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %8s ", "diff");
   170ce:	4a58      	ldr	r2, [pc, #352]	; (17230 <dw1000_cli_backtrace+0x188>)
   170d0:	4958      	ldr	r1, [pc, #352]	; (17234 <dw1000_cli_backtrace+0x18c>)
   170d2:	4628      	mov	r0, r5
   170d4:	f7f9 fd55 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %6s ", "dur");
   170d8:	4a57      	ldr	r2, [pc, #348]	; (17238 <dw1000_cli_backtrace+0x190>)
   170da:	4958      	ldr	r1, [pc, #352]	; (1723c <dw1000_cli_backtrace+0x194>)
   170dc:	4628      	mov	r0, r5
   170de:	f7f9 fd50 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " %5s", "flags");
   170e2:	4a57      	ldr	r2, [pc, #348]	; (17240 <dw1000_cli_backtrace+0x198>)
   170e4:	4957      	ldr	r1, [pc, #348]	; (17244 <dw1000_cli_backtrace+0x19c>)
   170e6:	4628      	mov	r0, r5
   170e8:	f7f9 fd4b 	bl	10b82 <streamer_printf>
    streamer_printf(streamer, " cmd/status data\n");
   170ec:	4956      	ldr	r1, [pc, #344]	; (17248 <dw1000_cli_backtrace+0x1a0>)
   170ee:	4628      	mov	r0, r5
   170f0:	f7f9 fd47 	bl	10b82 <streamer_printf>
    for (i=0;i<80;i++) streamer_printf(streamer, "-");
   170f4:	e004      	b.n	17100 <dw1000_cli_backtrace+0x58>
   170f6:	4955      	ldr	r1, [pc, #340]	; (1724c <dw1000_cli_backtrace+0x1a4>)
   170f8:	4628      	mov	r0, r5
   170fa:	f7f9 fd42 	bl	10b82 <streamer_printf>
   170fe:	3401      	adds	r4, #1
   17100:	2c4f      	cmp	r4, #79	; 0x4f
   17102:	ddf8      	ble.n	170f6 <dw1000_cli_backtrace+0x4e>
    if (verbose&0x1) {
   17104:	f01b 0f01 	tst.w	fp, #1
   17108:	d118      	bne.n	1713c <dw1000_cli_backtrace+0x94>
    streamer_printf(streamer, "\n");
   1710a:	4951      	ldr	r1, [pc, #324]	; (17250 <dw1000_cli_backtrace+0x1a8>)
   1710c:	4628      	mov	r0, r5
   1710e:	f7f9 fd38 	bl	10b82 <streamer_printf>
    inst->spi_bt_lock = 1;
   17112:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
   17116:	2201      	movs	r2, #1
   17118:	f883 2602 	strb.w	r2, [r3, #1538]	; 0x602
    inst->sys_status_bt_lock = 1;
   1711c:	f886 2dfe 	strb.w	r2, [r6, #3582]	; 0xdfe
    struct dw1000_sys_status_backtrace *irq_p, *irq_p_last=0;
   17120:	2300      	movs	r3, #0
   17122:	461f      	mov	r7, r3
   17124:	9303      	str	r3, [sp, #12]
    struct dw1000_spi_backtrace *spi_p, *spi_p_last=0;
   17126:	469a      	mov	sl, r3
    uint16_t spi_i=0, irq_i=0;
   17128:	4699      	mov	r9, r3
    while (spi_i<MYNEWT_VAL(DW1000_SPI_BACKTRACE_LEN) || irq_i<MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)) {
   1712a:	e018      	b.n	1715e <dw1000_cli_backtrace+0xb6>
        for (i=0;i<34;i++) streamer_printf(streamer, "-");
   1712c:	4947      	ldr	r1, [pc, #284]	; (1724c <dw1000_cli_backtrace+0x1a4>)
   1712e:	4628      	mov	r0, r5
   17130:	f7f9 fd27 	bl	10b82 <streamer_printf>
   17134:	3401      	adds	r4, #1
   17136:	2c21      	cmp	r4, #33	; 0x21
   17138:	ddf8      	ble.n	1712c <dw1000_cli_backtrace+0x84>
   1713a:	e7e6      	b.n	1710a <dw1000_cli_backtrace+0x62>
   1713c:	2400      	movs	r4, #0
   1713e:	e7fa      	b.n	17136 <dw1000_cli_backtrace+0x8e>
        if ((spi_p->utime < irq_p->utime && spi_i < MYNEWT_VAL(DW1000_SPI_BACKTRACE_LEN)) ||
   17140:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
   17144:	d947      	bls.n	171d6 <dw1000_cli_backtrace+0x12e>
            if (print_spi_bt_line(&start_t, verbose, spi_p, spi_p_last, streamer)) {
   17146:	9500      	str	r5, [sp, #0]
   17148:	4653      	mov	r3, sl
   1714a:	4622      	mov	r2, r4
   1714c:	4659      	mov	r1, fp
   1714e:	a805      	add	r0, sp, #20
   17150:	f7ff fc80 	bl	16a54 <print_spi_bt_line>
   17154:	2800      	cmp	r0, #0
   17156:	d139      	bne.n	171cc <dw1000_cli_backtrace+0x124>
            spi_i++;
   17158:	3701      	adds	r7, #1
   1715a:	b2bf      	uxth	r7, r7
            spi_p_last = spi_p;
   1715c:	46a2      	mov	sl, r4
    while (spi_i<MYNEWT_VAL(DW1000_SPI_BACKTRACE_LEN) || irq_i<MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)) {
   1715e:	2fff      	cmp	r7, #255	; 0xff
   17160:	d902      	bls.n	17168 <dw1000_cli_backtrace+0xc0>
   17162:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
   17166:	d852      	bhi.n	1720e <dw1000_cli_backtrace+0x166>
        uint16_t spi_i_mod = (inst->spi_bt_idx + spi_i + 1) % MYNEWT_VAL(DW1000_SPI_BACKTRACE_LEN);
   17168:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
   1716c:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
   17170:	443b      	add	r3, r7
   17172:	3301      	adds	r3, #1
   17174:	425a      	negs	r2, r3
   17176:	b2db      	uxtb	r3, r3
   17178:	b2d2      	uxtb	r2, r2
   1717a:	bf58      	it	pl
   1717c:	4253      	negpl	r3, r2
        uint16_t irq_i_mod = (inst->sys_status_bt_idx + irq_i + 1) % MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN);
   1717e:	f8b6 2dfc 	ldrh.w	r2, [r6, #3580]	; 0xdfc
   17182:	444a      	add	r2, r9
   17184:	3201      	adds	r2, #1
   17186:	4251      	negs	r1, r2
   17188:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1718c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   17190:	bf58      	it	pl
   17192:	424a      	negpl	r2, r1
        spi_p = &inst->spi_bt[spi_i_mod];
   17194:	b29b      	uxth	r3, r3
   17196:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1719a:	00e4      	lsls	r4, r4, #3
   1719c:	f504 6460 	add.w	r4, r4, #3584	; 0xe00
   171a0:	4434      	add	r4, r6
        irq_p = &inst->sys_status_bt[irq_i_mod];
   171a2:	b292      	uxth	r2, r2
   171a4:	0112      	lsls	r2, r2, #4
   171a6:	f502 68bf 	add.w	r8, r2, #1528	; 0x5f8
   171aa:	44b0      	add	r8, r6
   171ac:	f108 0804 	add.w	r8, r8, #4
        if ((spi_p->utime < irq_p->utime && spi_i < MYNEWT_VAL(DW1000_SPI_BACKTRACE_LEN)) ||
   171b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   171b4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   171b8:	f8d3 1e00 	ldr.w	r1, [r3, #3584]	; 0xe00
   171bc:	4432      	add	r2, r6
   171be:	f8d2 35fc 	ldr.w	r3, [r2, #1532]	; 0x5fc
   171c2:	4299      	cmp	r1, r3
   171c4:	d2bc      	bcs.n	17140 <dw1000_cli_backtrace+0x98>
   171c6:	2fff      	cmp	r7, #255	; 0xff
   171c8:	d9bd      	bls.n	17146 <dw1000_cli_backtrace+0x9e>
   171ca:	e7b9      	b.n	17140 <dw1000_cli_backtrace+0x98>
                streamer_printf(streamer, "\n");
   171cc:	4920      	ldr	r1, [pc, #128]	; (17250 <dw1000_cli_backtrace+0x1a8>)
   171ce:	4628      	mov	r0, r5
   171d0:	f7f9 fcd7 	bl	10b82 <streamer_printf>
   171d4:	e7c0      	b.n	17158 <dw1000_cli_backtrace+0xb0>
            streamer_printf(streamer, "\e[93m");   /* Set to bright yellow */
   171d6:	491f      	ldr	r1, [pc, #124]	; (17254 <dw1000_cli_backtrace+0x1ac>)
   171d8:	4628      	mov	r0, r5
   171da:	f7f9 fcd2 	bl	10b82 <streamer_printf>
            if (print_interrupt_bt_line(&start_t, verbose, irq_p, irq_p_last, streamer)) {
   171de:	9500      	str	r5, [sp, #0]
   171e0:	9b03      	ldr	r3, [sp, #12]
   171e2:	4642      	mov	r2, r8
   171e4:	4659      	mov	r1, fp
   171e6:	a805      	add	r0, sp, #20
   171e8:	f7ff fb56 	bl	16898 <print_interrupt_bt_line>
   171ec:	b150      	cbz	r0, 17204 <dw1000_cli_backtrace+0x15c>
                streamer_printf(streamer, "\e[39m\n");   /* Set to default colour */
   171ee:	491a      	ldr	r1, [pc, #104]	; (17258 <dw1000_cli_backtrace+0x1b0>)
   171f0:	4628      	mov	r0, r5
   171f2:	f7f9 fcc6 	bl	10b82 <streamer_printf>
            irq_i++;
   171f6:	f109 0901 	add.w	r9, r9, #1
   171fa:	fa1f f989 	uxth.w	r9, r9
            irq_p_last = irq_p;
   171fe:	f8cd 800c 	str.w	r8, [sp, #12]
   17202:	e7ac      	b.n	1715e <dw1000_cli_backtrace+0xb6>
                streamer_printf(streamer, "\e[39m");     /* Set to default colour */
   17204:	4915      	ldr	r1, [pc, #84]	; (1725c <dw1000_cli_backtrace+0x1b4>)
   17206:	4628      	mov	r0, r5
   17208:	f7f9 fcbb 	bl	10b82 <streamer_printf>
   1720c:	e7f3      	b.n	171f6 <dw1000_cli_backtrace+0x14e>
    inst->spi_bt_lock = 0;
   1720e:	f506 5200 	add.w	r2, r6, #8192	; 0x2000
   17212:	2300      	movs	r3, #0
   17214:	f882 3602 	strb.w	r3, [r2, #1538]	; 0x602
    inst->sys_status_bt_lock = 0;
   17218:	f886 3dfe 	strb.w	r3, [r6, #3582]	; 0xdfe
}
   1721c:	b007      	add	sp, #28
   1721e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17222:	bf00      	nop
   17224:	00023134 	.word	0x00023134
   17228:	00023130 	.word	0x00023130
   1722c:	0002313c 	.word	0x0002313c
   17230:	00023144 	.word	0x00023144
   17234:	0002314c 	.word	0x0002314c
   17238:	00023154 	.word	0x00023154
   1723c:	00023158 	.word	0x00023158
   17240:	000231c0 	.word	0x000231c0
   17244:	00023174 	.word	0x00023174
   17248:	00023200 	.word	0x00023200
   1724c:	000231a8 	.word	0x000231a8
   17250:	00021d7c 	.word	0x00021d7c
   17254:	00023214 	.word	0x00023214
   17258:	0002321c 	.word	0x0002321c
   1725c:	00023224 	.word	0x00023224

00017260 <dw1000_cli_cmd>:
#endif

static int
dw1000_cli_cmd(const struct shell_cmd *cmd, int argc, char **argv, struct streamer *streamer)
{
   17260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17264:	b085      	sub	sp, #20
   17266:	461f      	mov	r7, r3
#ifndef __KERNEL__
    struct _dw1000_dev_instance_t * inst = 0;
    uint16_t inst_n;

    if (argc < 2) {
   17268:	2901      	cmp	r1, #1
   1726a:	dd1a      	ble.n	172a2 <dw1000_cli_cmd+0x42>
   1726c:	460c      	mov	r4, r1
   1726e:	4615      	mov	r5, r2
        dw1000_cli_too_few_args(streamer);
        return 0;
    }

    if (!strcmp(argv[1], "dump")) {
   17270:	6856      	ldr	r6, [r2, #4]
   17272:	49ba      	ldr	r1, [pc, #744]	; (1755c <dw1000_cli_cmd+0x2fc>)
   17274:	4630      	mov	r0, r6
   17276:	f7f4 ff35 	bl	c0e4 <strcmp>
   1727a:	b9e8      	cbnz	r0, 172b8 <dw1000_cli_cmd+0x58>
        if (argc < 3) {
   1727c:	2c02      	cmp	r4, #2
   1727e:	dc14      	bgt.n	172aa <dw1000_cli_cmd+0x4a>
            inst_n=0;
   17280:	2000      	movs	r0, #0
        } else {
            inst_n = strtol(argv[2], NULL, 0);
        }
        inst = hal_dw1000_inst(inst_n);
   17282:	b2c0      	uxtb	r0, r0
   17284:	f7fb fe20 	bl	12ec8 <hal_dw1000_inst>
   17288:	4604      	mov	r4, r0
        console_no_ticks();
   1728a:	f7f6 feb3 	bl	dff4 <console_no_ticks>
        dw1000_cli_dump_registers(inst, streamer);
   1728e:	4639      	mov	r1, r7
   17290:	4620      	mov	r0, r4
   17292:	f7ff fc83 	bl	16b9c <dw1000_cli_dump_registers>
        console_yes_ticks();
   17296:	f7f6 feb3 	bl	e000 <console_yes_ticks>
        streamer_printf(streamer, "Unknown cmd\n");
    }
#endif  /* ifndef __KERNEL__ */

    return 0;
}
   1729a:	2000      	movs	r0, #0
   1729c:	b005      	add	sp, #20
   1729e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        dw1000_cli_too_few_args(streamer);
   172a2:	4618      	mov	r0, r3
   172a4:	f7fe ff4c 	bl	16140 <dw1000_cli_too_few_args>
        return 0;
   172a8:	e7f7      	b.n	1729a <dw1000_cli_cmd+0x3a>
            inst_n = strtol(argv[2], NULL, 0);
   172aa:	2200      	movs	r2, #0
   172ac:	4611      	mov	r1, r2
   172ae:	68a8      	ldr	r0, [r5, #8]
   172b0:	f003 fb92 	bl	1a9d8 <strtol>
   172b4:	b280      	uxth	r0, r0
   172b6:	e7e4      	b.n	17282 <dw1000_cli_cmd+0x22>
    } else if (!strcmp(argv[1], "da")) {
   172b8:	49a9      	ldr	r1, [pc, #676]	; (17560 <dw1000_cli_cmd+0x300>)
   172ba:	4630      	mov	r0, r6
   172bc:	f7f4 ff12 	bl	c0e4 <strcmp>
   172c0:	bb08      	cbnz	r0, 17306 <dw1000_cli_cmd+0xa6>
        if (argc<3) {
   172c2:	2c02      	cmp	r4, #2
   172c4:	dde9      	ble.n	1729a <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   172c6:	2200      	movs	r2, #0
   172c8:	4611      	mov	r1, r2
   172ca:	68a8      	ldr	r0, [r5, #8]
   172cc:	f003 fb84 	bl	1a9d8 <strtol>
   172d0:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   172d2:	2200      	movs	r2, #0
   172d4:	4611      	mov	r1, r2
   172d6:	68e8      	ldr	r0, [r5, #12]
   172d8:	f003 fb7e 	bl	1a9d8 <strtol>
   172dc:	4606      	mov	r6, r0
        if (argc>4) {
   172de:	2c04      	cmp	r4, #4
   172e0:	dc0a      	bgt.n	172f8 <dw1000_cli_cmd+0x98>
        int length = 128;
   172e2:	2480      	movs	r4, #128	; 0x80
        inst = hal_dw1000_inst(inst_n);
   172e4:	fa5f f088 	uxtb.w	r0, r8
   172e8:	f7fb fdee 	bl	12ec8 <hal_dw1000_inst>
        dw1000_cli_dump_address(inst, addr, length, streamer);
   172ec:	463b      	mov	r3, r7
   172ee:	b2a2      	uxth	r2, r4
   172f0:	4631      	mov	r1, r6
   172f2:	f7ff fd07 	bl	16d04 <dw1000_cli_dump_address>
   172f6:	e7d0      	b.n	1729a <dw1000_cli_cmd+0x3a>
            length = strtol(argv[4], NULL, 0);
   172f8:	2200      	movs	r2, #0
   172fa:	4611      	mov	r1, r2
   172fc:	6928      	ldr	r0, [r5, #16]
   172fe:	f003 fb6b 	bl	1a9d8 <strtol>
   17302:	4604      	mov	r4, r0
   17304:	e7ee      	b.n	172e4 <dw1000_cli_cmd+0x84>
    } else if (!strcmp(argv[1], "cw")) {
   17306:	4997      	ldr	r1, [pc, #604]	; (17564 <dw1000_cli_cmd+0x304>)
   17308:	4630      	mov	r0, r6
   1730a:	f7f4 feeb 	bl	c0e4 <strcmp>
   1730e:	2800      	cmp	r0, #0
   17310:	d034      	beq.n	1737c <dw1000_cli_cmd+0x11c>
    } else if (!strcmp(argv[1], "wr")) {
   17312:	4995      	ldr	r1, [pc, #596]	; (17568 <dw1000_cli_cmd+0x308>)
   17314:	4630      	mov	r0, r6
   17316:	f7f4 fee5 	bl	c0e4 <strcmp>
   1731a:	2800      	cmp	r0, #0
   1731c:	d15e      	bne.n	173dc <dw1000_cli_cmd+0x17c>
        if (argc < 7) {
   1731e:	2c06      	cmp	r4, #6
   17320:	ddbb      	ble.n	1729a <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   17322:	2200      	movs	r2, #0
   17324:	4611      	mov	r1, r2
   17326:	68a8      	ldr	r0, [r5, #8]
   17328:	f003 fb56 	bl	1a9d8 <strtol>
   1732c:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   1732e:	2200      	movs	r2, #0
   17330:	4611      	mov	r1, r2
   17332:	68e8      	ldr	r0, [r5, #12]
   17334:	f003 fb50 	bl	1a9d8 <strtol>
   17338:	4606      	mov	r6, r0
        uint32_t sub  = strtol(argv[4], NULL, 0);
   1733a:	2200      	movs	r2, #0
   1733c:	4611      	mov	r1, r2
   1733e:	6928      	ldr	r0, [r5, #16]
   17340:	f003 fb4a 	bl	1a9d8 <strtol>
   17344:	4607      	mov	r7, r0
        uint64_t val  = strtol(argv[5], NULL, 0);
   17346:	2200      	movs	r2, #0
   17348:	4611      	mov	r1, r2
   1734a:	6968      	ldr	r0, [r5, #20]
   1734c:	f003 fb44 	bl	1a9d8 <strtol>
   17350:	4604      	mov	r4, r0
   17352:	ea4f 79e0 	mov.w	r9, r0, asr #31
        int length = strtol(argv[6], NULL, 0);
   17356:	2200      	movs	r2, #0
   17358:	4611      	mov	r1, r2
   1735a:	69a8      	ldr	r0, [r5, #24]
   1735c:	f003 fb3c 	bl	1a9d8 <strtol>
   17360:	4605      	mov	r5, r0
        dw1000_write_reg(hal_dw1000_inst(inst_n), addr, sub, val, length);
   17362:	fa5f f088 	uxtb.w	r0, r8
   17366:	f7fb fdaf 	bl	12ec8 <hal_dw1000_inst>
   1736a:	9502      	str	r5, [sp, #8]
   1736c:	9400      	str	r4, [sp, #0]
   1736e:	f8cd 9004 	str.w	r9, [sp, #4]
   17372:	b2ba      	uxth	r2, r7
   17374:	b2b1      	uxth	r1, r6
   17376:	f7fb f961 	bl	1263c <dw1000_write_reg>
   1737a:	e78e      	b.n	1729a <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   1737c:	2200      	movs	r2, #0
   1737e:	4611      	mov	r1, r2
   17380:	68a8      	ldr	r0, [r5, #8]
   17382:	f003 fb29 	bl	1a9d8 <strtol>
   17386:	4605      	mov	r5, r0
        inst = hal_dw1000_inst(inst_n);
   17388:	b2c0      	uxtb	r0, r0
   1738a:	f7fb fd9d 	bl	12ec8 <hal_dw1000_inst>
   1738e:	4604      	mov	r4, r0
        hal_gpio_irq_disable(inst->irq_pin);
   17390:	f890 0565 	ldrb.w	r0, [r0, #1381]	; 0x565
   17394:	f7f1 fdb2 	bl	8efc <hal_gpio_irq_disable>
        dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t));
   17398:	2304      	movs	r3, #4
   1739a:	9302      	str	r3, [sp, #8]
   1739c:	2200      	movs	r2, #0
   1739e:	2300      	movs	r3, #0
   173a0:	e9cd 2300 	strd	r2, r3, [sp]
   173a4:	210e      	movs	r1, #14
   173a6:	4620      	mov	r0, r4
   173a8:	f7fb f948 	bl	1263c <dw1000_write_reg>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TRXOFF, sizeof(uint8_t));
   173ac:	2301      	movs	r3, #1
   173ae:	9302      	str	r3, [sp, #8]
   173b0:	2240      	movs	r2, #64	; 0x40
   173b2:	2300      	movs	r3, #0
   173b4:	e9cd 2300 	strd	r2, r3, [sp]
   173b8:	2200      	movs	r2, #0
   173ba:	210d      	movs	r1, #13
   173bc:	4620      	mov	r0, r4
   173be:	f7fb f93d 	bl	1263c <dw1000_write_reg>
        dw1000_configcwmode(inst, inst->uwb_dev.config.channel);
   173c2:	f894 150c 	ldrb.w	r1, [r4, #1292]	; 0x50c
   173c6:	4620      	mov	r0, r4
   173c8:	f7fe f92c 	bl	15624 <dw1000_configcwmode>
        streamer_printf(streamer, "Device[%d] now in CW mode on ch %d. Reset to continue\n",
   173cc:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
   173d0:	b2aa      	uxth	r2, r5
   173d2:	4966      	ldr	r1, [pc, #408]	; (1756c <dw1000_cli_cmd+0x30c>)
   173d4:	4638      	mov	r0, r7
   173d6:	f7f9 fbd4 	bl	10b82 <streamer_printf>
   173da:	e75e      	b.n	1729a <dw1000_cli_cmd+0x3a>
    } else if (!strcmp(argv[1], "rd")) {
   173dc:	4964      	ldr	r1, [pc, #400]	; (17570 <dw1000_cli_cmd+0x310>)
   173de:	4630      	mov	r0, r6
   173e0:	f7f4 fe80 	bl	c0e4 <strcmp>
   173e4:	bb60      	cbnz	r0, 17440 <dw1000_cli_cmd+0x1e0>
        if (argc < 6) {
   173e6:	2c05      	cmp	r4, #5
   173e8:	f77f af57 	ble.w	1729a <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   173ec:	2200      	movs	r2, #0
   173ee:	4611      	mov	r1, r2
   173f0:	68a8      	ldr	r0, [r5, #8]
   173f2:	f003 faf1 	bl	1a9d8 <strtol>
   173f6:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   173f8:	2200      	movs	r2, #0
   173fa:	4611      	mov	r1, r2
   173fc:	68e8      	ldr	r0, [r5, #12]
   173fe:	f003 faeb 	bl	1a9d8 <strtol>
   17402:	4604      	mov	r4, r0
        uint16_t sub  = strtol(argv[4], NULL, 0);
   17404:	2200      	movs	r2, #0
   17406:	4611      	mov	r1, r2
   17408:	6928      	ldr	r0, [r5, #16]
   1740a:	f003 fae5 	bl	1a9d8 <strtol>
   1740e:	b286      	uxth	r6, r0
        int length = strtol(argv[5], NULL, 0);
   17410:	2200      	movs	r2, #0
   17412:	4611      	mov	r1, r2
   17414:	6968      	ldr	r0, [r5, #20]
   17416:	f003 fadf 	bl	1a9d8 <strtol>
   1741a:	4605      	mov	r5, r0
        uint64_t reg = dw1000_read_reg(hal_dw1000_inst(inst_n), addr, sub, length);
   1741c:	fa5f f088 	uxtb.w	r0, r8
   17420:	f7fb fd52 	bl	12ec8 <hal_dw1000_inst>
   17424:	462b      	mov	r3, r5
   17426:	4632      	mov	r2, r6
   17428:	b2a1      	uxth	r1, r4
   1742a:	f7fb f897 	bl	1255c <dw1000_read_reg>
        streamer_printf(streamer, "0x%06"PRIX32",0x%04X: 0x%"PRIX64"\n", addr, sub, reg);
   1742e:	e9cd 0100 	strd	r0, r1, [sp]
   17432:	4633      	mov	r3, r6
   17434:	4622      	mov	r2, r4
   17436:	494f      	ldr	r1, [pc, #316]	; (17574 <dw1000_cli_cmd+0x314>)
   17438:	4638      	mov	r0, r7
   1743a:	f7f9 fba2 	bl	10b82 <streamer_printf>
   1743e:	e72c      	b.n	1729a <dw1000_cli_cmd+0x3a>
    } else if (!strcmp(argv[1], "ibt")){
   17440:	494d      	ldr	r1, [pc, #308]	; (17578 <dw1000_cli_cmd+0x318>)
   17442:	4630      	mov	r0, r6
   17444:	f7f4 fe4e 	bl	c0e4 <strcmp>
   17448:	bb08      	cbnz	r0, 1748e <dw1000_cli_cmd+0x22e>
        if (argc < 3) {
   1744a:	2c02      	cmp	r4, #2
   1744c:	dc11      	bgt.n	17472 <dw1000_cli_cmd+0x212>
            inst_n=0;
   1744e:	2600      	movs	r6, #0
        if (argc < 4) {
   17450:	2c03      	cmp	r4, #3
   17452:	dc15      	bgt.n	17480 <dw1000_cli_cmd+0x220>
            d=0;
   17454:	2500      	movs	r5, #0
        inst = hal_dw1000_inst(inst_n);
   17456:	b2f0      	uxtb	r0, r6
   17458:	f7fb fd36 	bl	12ec8 <hal_dw1000_inst>
   1745c:	4604      	mov	r4, r0
        console_no_ticks();
   1745e:	f7f6 fdc9 	bl	dff4 <console_no_ticks>
        dw1000_cli_interrupt_backtrace(inst, d, streamer);
   17462:	463a      	mov	r2, r7
   17464:	4629      	mov	r1, r5
   17466:	4620      	mov	r0, r4
   17468:	f7ff fcb4 	bl	16dd4 <dw1000_cli_interrupt_backtrace>
        console_yes_ticks();
   1746c:	f7f6 fdc8 	bl	e000 <console_yes_ticks>
   17470:	e713      	b.n	1729a <dw1000_cli_cmd+0x3a>
            inst_n = strtol(argv[2], NULL, 0);
   17472:	2200      	movs	r2, #0
   17474:	4611      	mov	r1, r2
   17476:	68a8      	ldr	r0, [r5, #8]
   17478:	f003 faae 	bl	1a9d8 <strtol>
   1747c:	b286      	uxth	r6, r0
   1747e:	e7e7      	b.n	17450 <dw1000_cli_cmd+0x1f0>
            d = strtol(argv[3], NULL, 0);
   17480:	2200      	movs	r2, #0
   17482:	4611      	mov	r1, r2
   17484:	68e8      	ldr	r0, [r5, #12]
   17486:	f003 faa7 	bl	1a9d8 <strtol>
   1748a:	b2c5      	uxtb	r5, r0
   1748c:	e7e3      	b.n	17456 <dw1000_cli_cmd+0x1f6>
    } else if (!strcmp(argv[1], "status2txt")){
   1748e:	493b      	ldr	r1, [pc, #236]	; (1757c <dw1000_cli_cmd+0x31c>)
   17490:	4630      	mov	r0, r6
   17492:	f7f4 fe27 	bl	c0e4 <strcmp>
   17496:	b328      	cbz	r0, 174e4 <dw1000_cli_cmd+0x284>
    } else if (!strcmp(argv[1], "fctrl2txt")){
   17498:	4939      	ldr	r1, [pc, #228]	; (17580 <dw1000_cli_cmd+0x320>)
   1749a:	4630      	mov	r0, r6
   1749c:	f7f4 fe22 	bl	c0e4 <strcmp>
   174a0:	bba0      	cbnz	r0, 1750c <dw1000_cli_cmd+0x2ac>
        if (argc < 4) {
   174a2:	2c03      	cmp	r4, #3
   174a4:	dd2e      	ble.n	17504 <dw1000_cli_cmd+0x2a4>
            d = strtol(argv[2], NULL, 16);
   174a6:	2210      	movs	r2, #16
   174a8:	2100      	movs	r1, #0
   174aa:	68a8      	ldr	r0, [r5, #8]
   174ac:	f003 fa94 	bl	1a9d8 <strtol>
   174b0:	b2c4      	uxtb	r4, r0
            d2 = strtol(argv[3], NULL, 16);
   174b2:	2210      	movs	r2, #16
   174b4:	2100      	movs	r1, #0
   174b6:	68e8      	ldr	r0, [r5, #12]
   174b8:	f003 fa8e 	bl	1a9d8 <strtol>
        streamer_printf(streamer, "%02X %02X: %s\n", (uint8_t)d, (uint8_t)d2, fctrl_to_string((d2<<8)|d));
   174bc:	b2c5      	uxtb	r5, r0
   174be:	ea44 2005 	orr.w	r0, r4, r5, lsl #8
   174c2:	f7fe fe45 	bl	16150 <fctrl_to_string>
   174c6:	9000      	str	r0, [sp, #0]
   174c8:	462b      	mov	r3, r5
   174ca:	4622      	mov	r2, r4
   174cc:	492d      	ldr	r1, [pc, #180]	; (17584 <dw1000_cli_cmd+0x324>)
   174ce:	4638      	mov	r0, r7
   174d0:	f7f9 fb57 	bl	10b82 <streamer_printf>
        streamer_printf(streamer, "----\n ledgend: \n");
   174d4:	492c      	ldr	r1, [pc, #176]	; (17588 <dw1000_cli_cmd+0x328>)
   174d6:	4638      	mov	r0, r7
   174d8:	f7f9 fb53 	bl	10b82 <streamer_printf>
        fctrl_ledgend(streamer);
   174dc:	4638      	mov	r0, r7
   174de:	f7fe fe0f 	bl	16100 <fctrl_ledgend>
   174e2:	e6da      	b.n	1729a <dw1000_cli_cmd+0x3a>
        uint64_t d = strtoll(argv[2], NULL, 0);
   174e4:	2200      	movs	r2, #0
   174e6:	4611      	mov	r1, r2
   174e8:	68a8      	ldr	r0, [r5, #8]
   174ea:	f003 fa7b 	bl	1a9e4 <strtoll>
   174ee:	4605      	mov	r5, r0
   174f0:	460c      	mov	r4, r1
        console_printf("%010llX: %s\n", d, sys_status_to_string(d));
   174f2:	f7fe ff93 	bl	1641c <sys_status_to_string>
   174f6:	9000      	str	r0, [sp, #0]
   174f8:	462a      	mov	r2, r5
   174fa:	4623      	mov	r3, r4
   174fc:	4823      	ldr	r0, [pc, #140]	; (1758c <dw1000_cli_cmd+0x32c>)
   174fe:	f7f6 fd6b 	bl	dfd8 <console_printf>
   17502:	e6ca      	b.n	1729a <dw1000_cli_cmd+0x3a>
            console_printf("2 bytes needed\n");
   17504:	4822      	ldr	r0, [pc, #136]	; (17590 <dw1000_cli_cmd+0x330>)
   17506:	f7f6 fd67 	bl	dfd8 <console_printf>
            return 0;
   1750a:	e6c6      	b.n	1729a <dw1000_cli_cmd+0x3a>
    } else if (!strcmp(argv[1], "spibt")){
   1750c:	4921      	ldr	r1, [pc, #132]	; (17594 <dw1000_cli_cmd+0x334>)
   1750e:	4630      	mov	r0, r6
   17510:	f7f4 fde8 	bl	c0e4 <strcmp>
   17514:	2800      	cmp	r0, #0
   17516:	d13f      	bne.n	17598 <dw1000_cli_cmd+0x338>
        if (argc < 3) {
   17518:	2c02      	cmp	r4, #2
   1751a:	dc11      	bgt.n	17540 <dw1000_cli_cmd+0x2e0>
            inst_n=0;
   1751c:	2600      	movs	r6, #0
        if (argc < 4) {
   1751e:	2c03      	cmp	r4, #3
   17520:	dc15      	bgt.n	1754e <dw1000_cli_cmd+0x2ee>
            d=0;
   17522:	2500      	movs	r5, #0
        inst = hal_dw1000_inst(inst_n);
   17524:	b2f0      	uxtb	r0, r6
   17526:	f7fb fccf 	bl	12ec8 <hal_dw1000_inst>
   1752a:	4604      	mov	r4, r0
        console_no_ticks();
   1752c:	f7f6 fd62 	bl	dff4 <console_no_ticks>
        dw1000_cli_spi_backtrace(inst, d, streamer);
   17530:	463a      	mov	r2, r7
   17532:	4629      	mov	r1, r5
   17534:	4620      	mov	r0, r4
   17536:	f7ff fd05 	bl	16f44 <dw1000_cli_spi_backtrace>
        console_yes_ticks();
   1753a:	f7f6 fd61 	bl	e000 <console_yes_ticks>
   1753e:	e6ac      	b.n	1729a <dw1000_cli_cmd+0x3a>
            inst_n = strtol(argv[2], NULL, 0);
   17540:	2200      	movs	r2, #0
   17542:	4611      	mov	r1, r2
   17544:	68a8      	ldr	r0, [r5, #8]
   17546:	f003 fa47 	bl	1a9d8 <strtol>
   1754a:	b286      	uxth	r6, r0
   1754c:	e7e7      	b.n	1751e <dw1000_cli_cmd+0x2be>
            d = strtol(argv[3], NULL, 0);
   1754e:	2200      	movs	r2, #0
   17550:	4611      	mov	r1, r2
   17552:	68e8      	ldr	r0, [r5, #12]
   17554:	f003 fa40 	bl	1a9d8 <strtol>
   17558:	b2c5      	uxtb	r5, r0
   1755a:	e7e3      	b.n	17524 <dw1000_cli_cmd+0x2c4>
   1755c:	00021c34 	.word	0x00021c34
   17560:	0002322c 	.word	0x0002322c
   17564:	00023230 	.word	0x00023230
   17568:	0002326c 	.word	0x0002326c
   1756c:	00023234 	.word	0x00023234
   17570:	00023270 	.word	0x00023270
   17574:	00023274 	.word	0x00023274
   17578:	0002328c 	.word	0x0002328c
   1757c:	00023290 	.word	0x00023290
   17580:	000232ac 	.word	0x000232ac
   17584:	000232c8 	.word	0x000232c8
   17588:	000232d8 	.word	0x000232d8
   1758c:	0002329c 	.word	0x0002329c
   17590:	000232b8 	.word	0x000232b8
   17594:	000232ec 	.word	0x000232ec
    } else if (!strcmp(argv[1], "bt")){
   17598:	4915      	ldr	r1, [pc, #84]	; (175f0 <dw1000_cli_cmd+0x390>)
   1759a:	4630      	mov	r0, r6
   1759c:	f7f4 fda2 	bl	c0e4 <strcmp>
   175a0:	bb08      	cbnz	r0, 175e6 <dw1000_cli_cmd+0x386>
        if (argc < 3) {
   175a2:	2c02      	cmp	r4, #2
   175a4:	dc11      	bgt.n	175ca <dw1000_cli_cmd+0x36a>
            inst_n=0;
   175a6:	2600      	movs	r6, #0
        if (argc < 4) {
   175a8:	2c03      	cmp	r4, #3
   175aa:	dc15      	bgt.n	175d8 <dw1000_cli_cmd+0x378>
            d=0;
   175ac:	2500      	movs	r5, #0
        inst = hal_dw1000_inst(inst_n);
   175ae:	b2f0      	uxtb	r0, r6
   175b0:	f7fb fc8a 	bl	12ec8 <hal_dw1000_inst>
   175b4:	4604      	mov	r4, r0
        console_no_ticks();
   175b6:	f7f6 fd1d 	bl	dff4 <console_no_ticks>
        dw1000_cli_backtrace(inst, d, streamer);
   175ba:	463a      	mov	r2, r7
   175bc:	4629      	mov	r1, r5
   175be:	4620      	mov	r0, r4
   175c0:	f7ff fd72 	bl	170a8 <dw1000_cli_backtrace>
        console_yes_ticks();
   175c4:	f7f6 fd1c 	bl	e000 <console_yes_ticks>
   175c8:	e667      	b.n	1729a <dw1000_cli_cmd+0x3a>
            inst_n = strtol(argv[2], NULL, 0);
   175ca:	2200      	movs	r2, #0
   175cc:	4611      	mov	r1, r2
   175ce:	68a8      	ldr	r0, [r5, #8]
   175d0:	f003 fa02 	bl	1a9d8 <strtol>
   175d4:	b286      	uxth	r6, r0
   175d6:	e7e7      	b.n	175a8 <dw1000_cli_cmd+0x348>
            d = strtol(argv[3], NULL, 0);
   175d8:	2200      	movs	r2, #0
   175da:	4611      	mov	r1, r2
   175dc:	68e8      	ldr	r0, [r5, #12]
   175de:	f003 f9fb 	bl	1a9d8 <strtol>
   175e2:	b2c5      	uxtb	r5, r0
   175e4:	e7e3      	b.n	175ae <dw1000_cli_cmd+0x34e>
        streamer_printf(streamer, "Unknown cmd\n");
   175e6:	4903      	ldr	r1, [pc, #12]	; (175f4 <dw1000_cli_cmd+0x394>)
   175e8:	4638      	mov	r0, r7
   175ea:	f7f9 faca 	bl	10b82 <streamer_printf>
   175ee:	e654      	b.n	1729a <dw1000_cli_cmd+0x3a>
   175f0:	000232f4 	.word	0x000232f4
   175f4:	000232f8 	.word	0x000232f8

000175f8 <dw1000_cli_register>:
#endif


int
dw1000_cli_register(void)
{
   175f8:	b508      	push	{r3, lr}
#if MYNEWT_VAL(DW1000_CLI)
    int rc;
    rc = shell_cmd_register(&shell_dw1000_cmd);
   175fa:	4802      	ldr	r0, [pc, #8]	; (17604 <dw1000_cli_register+0xc>)
   175fc:	f7f7 fcc2 	bl	ef84 <shell_cmd_register>
#endif
    return rc;
#else
    return 0;
#endif
}
   17600:	bd08      	pop	{r3, pc}
   17602:	bf00      	nop
   17604:	20002940 	.word	0x20002940

00017608 <dw1000_cli_down>:
        dw1000_sysfs_deinit(i);
    }
    dw1000_debugfs_deinit();
#endif
    return 0;
}
   17608:	2000      	movs	r0, #0
   1760a:	4770      	bx	lr

0001760c <dw1000_gpio_config_leds>:
 *          - bit 2 to 7: reserved
 *
 * @return void
 */
void dw1000_gpio_config_leds(struct _dw1000_dev_instance_t * inst, dw1000_led_modes_t mode)
{
   1760c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1760e:	b085      	sub	sp, #20
   17610:	4604      	mov	r4, r0
    uint32_t reg;

    if (mode & DWT_LEDS_ENABLE){
   17612:	f011 0f02 	tst.w	r1, #2
   17616:	d050      	beq.n	176ba <dw1000_gpio_config_leds+0xae>
   17618:	460d      	mov	r5, r1
        // Set up MFIO for LED output.
        reg = (uint32_t) dw1000_read_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, sizeof(uint32_t));
   1761a:	2304      	movs	r3, #4
   1761c:	2200      	movs	r2, #0
   1761e:	2126      	movs	r1, #38	; 0x26
   17620:	f7fa ff9c 	bl	1255c <dw1000_read_reg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
   17624:	f420 5070 	bic.w	r0, r0, #15360	; 0x3c00
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
   17628:	f440 50a0 	orr.w	r0, r0, #5120	; 0x1400
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
   1762c:	2704      	movs	r7, #4
   1762e:	9702      	str	r7, [sp, #8]
   17630:	2600      	movs	r6, #0
   17632:	9000      	str	r0, [sp, #0]
   17634:	9601      	str	r6, [sp, #4]
   17636:	4632      	mov	r2, r6
   17638:	2126      	movs	r1, #38	; 0x26
   1763a:	4620      	mov	r0, r4
   1763c:	f7fa fffe 	bl	1263c <dw1000_write_reg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = (uint32_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint32_t));
   17640:	463b      	mov	r3, r7
   17642:	4632      	mov	r2, r6
   17644:	2136      	movs	r1, #54	; 0x36
   17646:	4620      	mov	r0, r4
   17648:	f7fa ff88 	bl	1255c <dw1000_read_reg>
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
   1764c:	f440 0004 	orr.w	r0, r0, #8650752	; 0x840000
        dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint32_t));
   17650:	9702      	str	r7, [sp, #8]
   17652:	9000      	str	r0, [sp, #0]
   17654:	9601      	str	r6, [sp, #4]
   17656:	4632      	mov	r2, r6
   17658:	2136      	movs	r1, #54	; 0x36
   1765a:	4620      	mov	r0, r4
   1765c:	f7fa ffee 	bl	1263c <dw1000_write_reg>
        dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF, sizeof(uint32_t));
   17660:	9702      	str	r7, [sp, #8]
   17662:	f44f 7288 	mov.w	r2, #272	; 0x110
   17666:	2300      	movs	r3, #0
   17668:	e9cd 2300 	strd	r2, r3, [sp]
   1766c:	2228      	movs	r2, #40	; 0x28
   1766e:	2136      	movs	r1, #54	; 0x36
   17670:	4620      	mov	r0, r4
   17672:	f7fa ffe3 	bl	1263c <dw1000_write_reg>

        if (mode & DWT_LEDS_INIT_BLINK){
   17676:	f015 0f04 	tst.w	r5, #4
   1767a:	d02e      	beq.n	176da <dw1000_gpio_config_leds+0xce>
            // Single blink sign-of-life.
            reg = (uint32_t) dw1000_read_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, sizeof(uint32_t));
   1767c:	463b      	mov	r3, r7
   1767e:	2228      	movs	r2, #40	; 0x28
   17680:	2136      	movs	r1, #54	; 0x36
   17682:	4620      	mov	r0, r4
   17684:	f7fa ff6a 	bl	1255c <dw1000_read_reg>
   17688:	4605      	mov	r5, r0
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
   1768a:	f440 2370 	orr.w	r3, r0, #983040	; 0xf0000

            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
   1768e:	9702      	str	r7, [sp, #8]
   17690:	9300      	str	r3, [sp, #0]
   17692:	9601      	str	r6, [sp, #4]
   17694:	2228      	movs	r2, #40	; 0x28
   17696:	2136      	movs	r1, #54	; 0x36
   17698:	4620      	mov	r0, r4
   1769a:	f7fa ffcf 	bl	1263c <dw1000_write_reg>
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
            dpl_cputime_delay_usecs(10);
   1769e:	200a      	movs	r0, #10
   176a0:	f7f5 f97e 	bl	c9a0 <dpl_cputime_delay_usecs>
            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
   176a4:	9702      	str	r7, [sp, #8]
   176a6:	f425 2570 	bic.w	r5, r5, #983040	; 0xf0000
   176aa:	9500      	str	r5, [sp, #0]
   176ac:	9601      	str	r6, [sp, #4]
   176ae:	2228      	movs	r2, #40	; 0x28
   176b0:	2136      	movs	r1, #54	; 0x36
   176b2:	4620      	mov	r0, r4
   176b4:	f7fa ffc2 	bl	1263c <dw1000_write_reg>
   176b8:	e00f      	b.n	176da <dw1000_gpio_config_leds+0xce>
        }
    }else{
        // Clear the GPIO bits that are used for LED control.
        reg = dw1000_read_reg(inst,GPIO_CTRL_ID, GPIO_MODE_OFFSET,sizeof(uint32_t));
   176ba:	2304      	movs	r3, #4
   176bc:	2200      	movs	r2, #0
   176be:	2126      	movs	r1, #38	; 0x26
   176c0:	f7fa ff4c 	bl	1255c <dw1000_read_reg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
   176c4:	f420 5070 	bic.w	r0, r0, #15360	; 0x3c00
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
   176c8:	2304      	movs	r3, #4
   176ca:	9302      	str	r3, [sp, #8]
   176cc:	2200      	movs	r2, #0
   176ce:	9000      	str	r0, [sp, #0]
   176d0:	9201      	str	r2, [sp, #4]
   176d2:	2126      	movs	r1, #38	; 0x26
   176d4:	4620      	mov	r0, r4
   176d6:	f7fa ffb1 	bl	1263c <dw1000_write_reg>
    }
}
   176da:	b005      	add	sp, #20
   176dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000176de <_dw1000_otp_read>:
 * @param address  From where it starts reading
 * @return data value read from an OTP location.
 */

uint32_t _dw1000_otp_read(struct _dw1000_dev_instance_t * inst, uint16_t address)
{
   176de:	b530      	push	{r4, r5, lr}
   176e0:	b085      	sub	sp, #20
   176e2:	4604      	mov	r4, r0
    // Write the address
    dw1000_write_reg(inst, OTP_IF_ID, OTP_ADDR, address, sizeof(uint16_t));
   176e4:	2302      	movs	r3, #2
   176e6:	9302      	str	r3, [sp, #8]
   176e8:	9100      	str	r1, [sp, #0]
   176ea:	2300      	movs	r3, #0
   176ec:	9301      	str	r3, [sp, #4]
   176ee:	2204      	movs	r2, #4
   176f0:	212d      	movs	r1, #45	; 0x2d
   176f2:	f7fa ffa3 	bl	1263c <dw1000_write_reg>

    // Perform OTP Read - Manual read mode has to be set
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN, sizeof(uint8_t));
   176f6:	2501      	movs	r5, #1
   176f8:	9502      	str	r5, [sp, #8]
   176fa:	2203      	movs	r2, #3
   176fc:	2300      	movs	r3, #0
   176fe:	e9cd 2300 	strd	r2, r3, [sp]
   17702:	2206      	movs	r2, #6
   17704:	212d      	movs	r1, #45	; 0x2d
   17706:	4620      	mov	r0, r4
   17708:	f7fa ff98 	bl	1263c <dw1000_write_reg>
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, 0x0, sizeof(uint8_t)); // OTPREAD is self clearing but OTPRDEN is not
   1770c:	9502      	str	r5, [sp, #8]
   1770e:	2200      	movs	r2, #0
   17710:	2300      	movs	r3, #0
   17712:	e9cd 2300 	strd	r2, r3, [sp]
   17716:	2206      	movs	r2, #6
   17718:	212d      	movs	r1, #45	; 0x2d
   1771a:	4620      	mov	r0, r4
   1771c:	f7fa ff8e 	bl	1263c <dw1000_write_reg>

    // Read data, available 40ns after rising edge of OTP_READ
    dpl_cputime_delay_usecs(1);
   17720:	4628      	mov	r0, r5
   17722:	f7f5 f93d 	bl	c9a0 <dpl_cputime_delay_usecs>
    return  (uint32_t) dw1000_read_reg(inst, OTP_IF_ID, OTP_RDAT, sizeof(uint32_t));
   17726:	2304      	movs	r3, #4
   17728:	220a      	movs	r2, #10
   1772a:	212d      	movs	r1, #45	; 0x2d
   1772c:	4620      	mov	r0, r4
   1772e:	f7fa ff15 	bl	1255c <dw1000_read_reg>
}
   17732:	b005      	add	sp, #20
   17734:	bd30      	pop	{r4, r5, pc}
	...

00017738 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   17738:	2300      	movs	r3, #0
   1773a:	4a07      	ldr	r2, [pc, #28]	; (17758 <nrf52k_flash_wait_ready+0x20>)
   1773c:	4293      	cmp	r3, r2
   1773e:	dc06      	bgt.n	1774e <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   17740:	4a06      	ldr	r2, [pc, #24]	; (1775c <nrf52k_flash_wait_ready+0x24>)
   17742:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   17746:	2a01      	cmp	r2, #1
   17748:	d004      	beq.n	17754 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1774a:	3301      	adds	r3, #1
   1774c:	e7f5      	b.n	1773a <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1774e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17752:	4770      	bx	lr
            return 0;
   17754:	2000      	movs	r0, #0
}
   17756:	4770      	bx	lr
   17758:	0001869f 	.word	0x0001869f
   1775c:	4001e000 	.word	0x4001e000

00017760 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   17760:	b538      	push	{r3, r4, r5, lr}
   17762:	460c      	mov	r4, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   17764:	f7ff ffe8 	bl	17738 <nrf52k_flash_wait_ready>
   17768:	b9e0      	cbnz	r0, 177a4 <nrf52k_flash_erase_sector+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1776a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1776e:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   17770:	4b0e      	ldr	r3, [pc, #56]	; (177ac <nrf52k_flash_erase_sector+0x4c>)
   17772:	2202      	movs	r2, #2
   17774:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   17778:	f7ff ffde 	bl	17738 <nrf52k_flash_wait_ready>
   1777c:	b140      	cbz	r0, 17790 <nrf52k_flash_erase_sector+0x30>
    int rc = -1;
   1777e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   17782:	4b0a      	ldr	r3, [pc, #40]	; (177ac <nrf52k_flash_erase_sector+0x4c>)
   17784:	2200      	movs	r2, #0
   17786:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1778a:	b905      	cbnz	r5, 1778e <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1778c:	b662      	cpsie	i
    return rc;
}
   1778e:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   17790:	4b06      	ldr	r3, [pc, #24]	; (177ac <nrf52k_flash_erase_sector+0x4c>)
   17792:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   17796:	f7ff ffcf 	bl	17738 <nrf52k_flash_wait_ready>
   1779a:	2800      	cmp	r0, #0
   1779c:	d0f1      	beq.n	17782 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1779e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   177a2:	e7ee      	b.n	17782 <nrf52k_flash_erase_sector+0x22>
        return -1;
   177a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   177a8:	e7f1      	b.n	1778e <nrf52k_flash_erase_sector+0x2e>
   177aa:	bf00      	nop
   177ac:	4001e000 	.word	0x4001e000

000177b0 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   177b0:	2000      	movs	r0, #0
   177b2:	4770      	bx	lr

000177b4 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   177b4:	297f      	cmp	r1, #127	; 0x7f
   177b6:	dc06      	bgt.n	177c6 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   177b8:	0309      	lsls	r1, r1, #12
   177ba:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   177bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   177c0:	601a      	str	r2, [r3, #0]
}
   177c2:	2000      	movs	r0, #0
   177c4:	4770      	bx	lr
{
   177c6:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   177c8:	2300      	movs	r3, #0
   177ca:	461a      	mov	r2, r3
   177cc:	4619      	mov	r1, r3
   177ce:	4618      	mov	r0, r3
   177d0:	f7f1 fbc0 	bl	8f54 <__assert_func>

000177d4 <nrf52k_flash_write>:
{
   177d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   177d8:	b082      	sub	sp, #8
   177da:	460d      	mov	r5, r1
   177dc:	4616      	mov	r6, r2
   177de:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   177e0:	f7ff ffaa 	bl	17738 <nrf52k_flash_wait_ready>
   177e4:	2800      	cmp	r0, #0
   177e6:	d154      	bne.n	17892 <nrf52k_flash_write+0xbe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   177e8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   177ec:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   177ee:	4b2a      	ldr	r3, [pc, #168]	; (17898 <nrf52k_flash_write+0xc4>)
   177f0:	2201      	movs	r2, #1
   177f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   177f6:	f015 0803 	ands.w	r8, r5, #3
   177fa:	d10a      	bne.n	17812 <nrf52k_flash_write+0x3e>
    while (num_bytes >= sizeof(uint32_t)) {
   177fc:	2c03      	cmp	r4, #3
   177fe:	d924      	bls.n	1784a <nrf52k_flash_write+0x76>
        if (nrf52k_flash_wait_ready()) {
   17800:	f7ff ff9a 	bl	17738 <nrf52k_flash_wait_ready>
   17804:	bbb8      	cbnz	r0, 17876 <nrf52k_flash_write+0xa2>
        *(uint32_t *)address = *(uint32_t *)src;
   17806:	f856 3b04 	ldr.w	r3, [r6], #4
   1780a:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1780e:	3c04      	subs	r4, #4
   17810:	e7f4      	b.n	177fc <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   17812:	f7ff ff91 	bl	17738 <nrf52k_flash_wait_ready>
   17816:	bb58      	cbnz	r0, 17870 <nrf52k_flash_write+0x9c>
        val = *(uint32_t *)(address & ~0x3);
   17818:	f025 0a03 	bic.w	sl, r5, #3
   1781c:	f8da 3000 	ldr.w	r3, [sl]
   17820:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   17822:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   17826:	45a1      	cmp	r9, r4
   17828:	d900      	bls.n	1782c <nrf52k_flash_write+0x58>
            cnt = num_bytes;
   1782a:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1782c:	464a      	mov	r2, r9
   1782e:	4631      	mov	r1, r6
   17830:	ab01      	add	r3, sp, #4
   17832:	eb03 0008 	add.w	r0, r3, r8
   17836:	f7f4 fc1d 	bl	c074 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1783a:	9b01      	ldr	r3, [sp, #4]
   1783c:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   17840:	444d      	add	r5, r9
        num_bytes -= cnt;
   17842:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   17846:	444e      	add	r6, r9
   17848:	e7d8      	b.n	177fc <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1784a:	b15c      	cbz	r4, 17864 <nrf52k_flash_write+0x90>
        val = *(uint32_t *)address;
   1784c:	682b      	ldr	r3, [r5, #0]
   1784e:	9301      	str	r3, [sp, #4]
        memcpy(&val, src, num_bytes);
   17850:	4622      	mov	r2, r4
   17852:	4631      	mov	r1, r6
   17854:	a801      	add	r0, sp, #4
   17856:	f7f4 fc0d 	bl	c074 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1785a:	f7ff ff6d 	bl	17738 <nrf52k_flash_wait_ready>
   1785e:	b9a8      	cbnz	r0, 1788c <nrf52k_flash_write+0xb8>
        *(uint32_t *)address = val;
   17860:	9b01      	ldr	r3, [sp, #4]
   17862:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   17864:	f7ff ff68 	bl	17738 <nrf52k_flash_wait_ready>
   17868:	b138      	cbz	r0, 1787a <nrf52k_flash_write+0xa6>
        rc = -1;
   1786a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1786e:	e004      	b.n	1787a <nrf52k_flash_write+0xa6>
    int rc = -1;
   17870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17874:	e001      	b.n	1787a <nrf52k_flash_write+0xa6>
   17876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1787a:	4b07      	ldr	r3, [pc, #28]	; (17898 <nrf52k_flash_write+0xc4>)
   1787c:	2200      	movs	r2, #0
   1787e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   17882:	b907      	cbnz	r7, 17886 <nrf52k_flash_write+0xb2>
  __ASM volatile ("cpsie i" : : : "memory");
   17884:	b662      	cpsie	i
}
   17886:	b002      	add	sp, #8
   17888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1788c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17890:	e7f3      	b.n	1787a <nrf52k_flash_write+0xa6>
        return -1;
   17892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17896:	e7f6      	b.n	17886 <nrf52k_flash_write+0xb2>
   17898:	4001e000 	.word	0x4001e000

0001789c <nrf52k_flash_read>:
{
   1789c:	b508      	push	{r3, lr}
   1789e:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   178a0:	461a      	mov	r2, r3
   178a2:	f7f4 fbe7 	bl	c074 <memcpy>
}
   178a6:	2000      	movs	r0, #0
   178a8:	bd08      	pop	{r3, pc}
	...

000178ac <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   178ac:	b570      	push	{r4, r5, r6, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   178ae:	f7f2 fd5b 	bl	a368 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   178b2:	4b31      	ldr	r3, [pc, #196]	; (17978 <nrf52_timer_handler+0xcc>)
   178b4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   178b8:	4b30      	ldr	r3, [pc, #192]	; (1797c <nrf52_timer_handler+0xd0>)
   178ba:	689c      	ldr	r4, [r3, #8]
    assert(x <= 0xffffff);
   178bc:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   178c0:	d227      	bcs.n	17912 <nrf52_timer_handler+0x66>
   178c2:	4605      	mov	r5, r0
    assert(y <= 0xffffff);
   178c4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
   178c8:	d229      	bcs.n	1791e <nrf52_timer_handler+0x72>
    result = x - y;
   178ca:	1b12      	subs	r2, r2, r4
    if (result & 0x800000) {
   178cc:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   178d0:	d02b      	beq.n	1792a <nrf52_timer_handler+0x7e>
        return (result | 0xff800000);
   178d2:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   178d6:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   178da:	4e28      	ldr	r6, [pc, #160]	; (1797c <nrf52_timer_handler+0xd0>)
   178dc:	6834      	ldr	r4, [r6, #0]
   178de:	fb92 f4f4 	sdiv	r4, r2, r4
    os_time_advance(ticks);
   178e2:	4620      	mov	r0, r4
   178e4:	f7f2 fc20 	bl	a128 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   178e8:	4b23      	ldr	r3, [pc, #140]	; (17978 <nrf52_timer_handler+0xcc>)
   178ea:	2200      	movs	r2, #0
   178ec:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   178f0:	68b3      	ldr	r3, [r6, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   178f2:	6831      	ldr	r1, [r6, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   178f4:	fb04 3201 	mla	r2, r4, r1, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   178f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   178fc:	60b2      	str	r2, [r6, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   178fe:	1854      	adds	r4, r2, r1
    OS_ASSERT_CRITICAL();
   17900:	f7f2 fd3b 	bl	a37a <os_arch_in_critical>
   17904:	bb08      	cbnz	r0, 1794a <nrf52_timer_handler+0x9e>
   17906:	2300      	movs	r3, #0
   17908:	461a      	mov	r2, r3
   1790a:	4619      	mov	r1, r3
   1790c:	4618      	mov	r0, r3
   1790e:	f7f1 fb21 	bl	8f54 <__assert_func>
    assert(x <= 0xffffff);
   17912:	2300      	movs	r3, #0
   17914:	461a      	mov	r2, r3
   17916:	4619      	mov	r1, r3
   17918:	4618      	mov	r0, r3
   1791a:	f7f1 fb1b 	bl	8f54 <__assert_func>
    assert(y <= 0xffffff);
   1791e:	2300      	movs	r3, #0
   17920:	461a      	mov	r2, r3
   17922:	4619      	mov	r1, r3
   17924:	4618      	mov	r0, r3
   17926:	f7f1 fb15 	bl	8f54 <__assert_func>
        return (result & 0x007fffff);
   1792a:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1792e:	e7d4      	b.n	178da <nrf52_timer_handler+0x2e>
    assert(y <= 0xffffff);
   17930:	2300      	movs	r3, #0
   17932:	461a      	mov	r2, r3
   17934:	4619      	mov	r1, r3
   17936:	4618      	mov	r0, r3
   17938:	f7f1 fb0c 	bl	8f54 <__assert_func>
        return (result & 0x007fffff);
   1793c:	f3c3 0316 	ubfx	r3, r3, #0, #23
        if (delta > 2) {
   17940:	2b02      	cmp	r3, #2
   17942:	dc15      	bgt.n	17970 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   17944:	4b0d      	ldr	r3, [pc, #52]	; (1797c <nrf52_timer_handler+0xd0>)
   17946:	681c      	ldr	r4, [r3, #0]
   17948:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1794a:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1794e:	4b0a      	ldr	r3, [pc, #40]	; (17978 <nrf52_timer_handler+0xcc>)
   17950:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   17954:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   17958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1795c:	d2e8      	bcs.n	17930 <nrf52_timer_handler+0x84>
    result = x - y;
   1795e:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   17960:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   17964:	d0ea      	beq.n	1793c <nrf52_timer_handler+0x90>
        return (result | 0xff800000);
   17966:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1796a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1796e:	e7e7      	b.n	17940 <nrf52_timer_handler+0x94>

    OS_EXIT_CRITICAL(sr);
   17970:	4628      	mov	r0, r5
   17972:	f7f2 fcff 	bl	a374 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   17976:	bd70      	pop	{r4, r5, r6, pc}
   17978:	40011000 	.word	0x40011000
   1797c:	20006694 	.word	0x20006694

00017980 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   17980:	b538      	push	{r3, r4, r5, lr}
   17982:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   17984:	f7f2 fcf9 	bl	a37a <os_arch_in_critical>
   17988:	b1a0      	cbz	r0, 179b4 <os_tick_idle+0x34>

    if (ticks > 0) {
   1798a:	2d00      	cmp	r5, #0
   1798c:	d038      	beq.n	17a00 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1798e:	4b20      	ldr	r3, [pc, #128]	; (17a10 <os_tick_idle+0x90>)
   17990:	685b      	ldr	r3, [r3, #4]
   17992:	42ab      	cmp	r3, r5
   17994:	d200      	bcs.n	17998 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   17996:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   17998:	4b1d      	ldr	r3, [pc, #116]	; (17a10 <os_tick_idle+0x90>)
   1799a:	689a      	ldr	r2, [r3, #8]
   1799c:	681c      	ldr	r4, [r3, #0]
   1799e:	fb05 2404 	mla	r4, r5, r4, r2
    OS_ASSERT_CRITICAL();
   179a2:	f7f2 fcea 	bl	a37a <os_arch_in_critical>
   179a6:	b9c0      	cbnz	r0, 179da <os_tick_idle+0x5a>
   179a8:	2300      	movs	r3, #0
   179aa:	461a      	mov	r2, r3
   179ac:	4619      	mov	r1, r3
   179ae:	4618      	mov	r0, r3
   179b0:	f7f1 fad0 	bl	8f54 <__assert_func>
    OS_ASSERT_CRITICAL();
   179b4:	2300      	movs	r3, #0
   179b6:	461a      	mov	r2, r3
   179b8:	4619      	mov	r1, r3
   179ba:	4618      	mov	r0, r3
   179bc:	f7f1 faca 	bl	8f54 <__assert_func>
    assert(y <= 0xffffff);
   179c0:	2300      	movs	r3, #0
   179c2:	461a      	mov	r2, r3
   179c4:	4619      	mov	r1, r3
   179c6:	4618      	mov	r0, r3
   179c8:	f7f1 fac4 	bl	8f54 <__assert_func>
        return (result & 0x007fffff);
   179cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
        if (delta > 2) {
   179d0:	2b02      	cmp	r3, #2
   179d2:	dc15      	bgt.n	17a00 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   179d4:	4b0e      	ldr	r3, [pc, #56]	; (17a10 <os_tick_idle+0x90>)
   179d6:	681c      	ldr	r4, [r3, #0]
   179d8:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   179da:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   179de:	4b0d      	ldr	r3, [pc, #52]	; (17a14 <os_tick_idle+0x94>)
   179e0:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   179e4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   179e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   179ec:	d2e8      	bcs.n	179c0 <os_tick_idle+0x40>
    result = x - y;
   179ee:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   179f0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   179f4:	d0ea      	beq.n	179cc <os_tick_idle+0x4c>
        return (result | 0xff800000);
   179f6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   179fa:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   179fe:	e7e7      	b.n	179d0 <os_tick_idle+0x50>
  __ASM volatile ("dsb 0xF":::"memory");
   17a00:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   17a04:	bf30      	wfi

    if (ticks > 0) {
   17a06:	b905      	cbnz	r5, 17a0a <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   17a08:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   17a0a:	f7ff ff4f 	bl	178ac <nrf52_timer_handler>
}
   17a0e:	e7fb      	b.n	17a08 <os_tick_idle+0x88>
   17a10:	20006694 	.word	0x20006694
   17a14:	40011000 	.word	0x40011000

00017a18 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   17a18:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   17a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   17a1e:	fbb3 f3f0 	udiv	r3, r3, r0
   17a22:	fb00 f303 	mul.w	r3, r0, r3
   17a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   17a2a:	d136      	bne.n	17a9a <os_tick_init+0x82>
   17a2c:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   17a2e:	4d1e      	ldr	r5, [pc, #120]	; (17aa8 <os_tick_init+0x90>)
   17a30:	2600      	movs	r6, #0
   17a32:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   17a34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   17a38:	fbb3 f0f0 	udiv	r0, r3, r0
   17a3c:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   17a3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   17a42:	fbb3 f0f0 	udiv	r0, r3, r0
   17a46:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   17a48:	f7f2 fc8e 	bl	a368 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17a4c:	0164      	lsls	r4, r4, #5
   17a4e:	b2e4      	uxtb	r4, r4
   17a50:	4b16      	ldr	r3, [pc, #88]	; (17aac <os_tick_init+0x94>)
   17a52:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   17a56:	4a16      	ldr	r2, [pc, #88]	; (17ab0 <os_tick_init+0x98>)
   17a58:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   17a5a:	4916      	ldr	r1, [pc, #88]	; (17ab4 <os_tick_init+0x9c>)
   17a5c:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17a60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   17a64:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   17a66:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   17a6a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   17a6e:	2201      	movs	r2, #1
   17a70:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   17a72:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   17a74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17a78:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   17a7c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   17a80:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   17a84:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   17a88:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   17a8c:	6829      	ldr	r1, [r5, #0]
   17a8e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   17a92:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   17a94:	f7f2 fc6e 	bl	a374 <os_arch_restore_sr>
}
   17a98:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   17a9a:	2300      	movs	r3, #0
   17a9c:	461a      	mov	r2, r3
   17a9e:	4619      	mov	r1, r3
   17aa0:	4618      	mov	r0, r3
   17aa2:	f7f1 fa57 	bl	8f54 <__assert_func>
   17aa6:	bf00      	nop
   17aa8:	20006694 	.word	0x20006694
   17aac:	e000e100 	.word	0xe000e100
   17ab0:	e000ed00 	.word	0xe000ed00
   17ab4:	000178ad 	.word	0x000178ad

00017ab8 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER) || MYNEWT_VAL(SPI_3_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   17ab8:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   17aba:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   17abc:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   17ac0:	b333      	cbz	r3, 17b10 <nrf52_irqm_handler+0x58>
   17ac2:	4604      	mov	r4, r0
        spim->EVENTS_END = 0;
   17ac4:	2300      	movs	r3, #0
   17ac6:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   17aca:	7843      	ldrb	r3, [r0, #1]
   17acc:	b303      	cbz	r3, 17b10 <nrf52_irqm_handler+0x58>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   17ace:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   17ad2:	88c3      	ldrh	r3, [r0, #6]
   17ad4:	fa13 f382 	uxtah	r3, r3, r2
   17ad8:	b29b      	uxth	r3, r3
   17ada:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   17adc:	8881      	ldrh	r1, [r0, #4]
   17ade:	428b      	cmp	r3, r1
   17ae0:	d217      	bcs.n	17b12 <nrf52_irqm_handler+0x5a>
            spi->nhs_txbuf += xfr_bytes;
   17ae2:	b292      	uxth	r2, r2
   17ae4:	6980      	ldr	r0, [r0, #24]
   17ae6:	4410      	add	r0, r2
   17ae8:	61a0      	str	r0, [r4, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   17aea:	1ac9      	subs	r1, r1, r3
   17aec:	b289      	uxth	r1, r1
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   17aee:	29ff      	cmp	r1, #255	; 0xff
   17af0:	bf28      	it	cs
   17af2:	21ff      	movcs	r1, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   17af4:	f8c5 0544 	str.w	r0, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   17af8:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   17afc:	69e3      	ldr	r3, [r4, #28]
   17afe:	b12b      	cbz	r3, 17b0c <nrf52_irqm_handler+0x54>
                spi->nhs_rxbuf += xfr_bytes;
   17b00:	441a      	add	r2, r3
   17b02:	61e2      	str	r2, [r4, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   17b04:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   17b08:	f8c5 1538 	str.w	r1, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   17b0c:	2301      	movs	r3, #1
   17b0e:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   17b10:	bd38      	pop	{r3, r4, r5, pc}
            if (spi->txrx_cb_func) {
   17b12:	6a03      	ldr	r3, [r0, #32]
   17b14:	b10b      	cbz	r3, 17b1a <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   17b16:	6a40      	ldr	r0, [r0, #36]	; 0x24
   17b18:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   17b1a:	2300      	movs	r3, #0
   17b1c:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   17b1e:	2340      	movs	r3, #64	; 0x40
   17b20:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   17b24:	e7f4      	b.n	17b10 <nrf52_irqm_handler+0x58>
	...

00017b28 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   17b28:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   17b2a:	4b04      	ldr	r3, [pc, #16]	; (17b3c <nrf52_spi0_irq_handler+0x14>)
   17b2c:	781b      	ldrb	r3, [r3, #0]
   17b2e:	b103      	cbz	r3, 17b32 <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   17b30:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   17b32:	4802      	ldr	r0, [pc, #8]	; (17b3c <nrf52_spi0_irq_handler+0x14>)
   17b34:	f7ff ffc0 	bl	17ab8 <nrf52_irqm_handler>
}
   17b38:	e7fa      	b.n	17b30 <nrf52_spi0_irq_handler+0x8>
   17b3a:	bf00      	nop
   17b3c:	200066a0 	.word	0x200066a0

00017b40 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   17b40:	2301      	movs	r3, #1
   17b42:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   17b44:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   17b48:	2b00      	cmp	r3, #0
   17b4a:	d0fb      	beq.n	17b44 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   17b4c:	2300      	movs	r3, #0
   17b4e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   17b52:	4770      	bx	lr

00017b54 <hal_spi_config_slave>:
{
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   17b54:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   17b56:	780b      	ldrb	r3, [r1, #0]
   17b58:	2b03      	cmp	r3, #3
   17b5a:	d815      	bhi.n	17b88 <hal_spi_config_slave+0x34>
   17b5c:	e8df f003 	tbb	[pc, r3]
   17b60:	110e1702 	.word	0x110e1702
   17b64:	2300      	movs	r3, #0
   17b66:	4618      	mov	r0, r3
            nrf_config = 0;
            rc = EINVAL;
            break;
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   17b68:	f891 c001 	ldrb.w	ip, [r1, #1]
   17b6c:	f1bc 0f01 	cmp.w	ip, #1
   17b70:	d010      	beq.n	17b94 <hal_spi_config_slave+0x40>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   17b72:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   17b76:	788b      	ldrb	r3, [r1, #2]
   17b78:	b97b      	cbnz	r3, 17b9a <hal_spi_config_slave+0x46>
            rc = EINVAL;
            break;
    }

    return rc;
}
   17b7a:	4770      	bx	lr
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   17b7c:	2304      	movs	r3, #4
    rc = 0;
   17b7e:	2000      	movs	r0, #0
            break;
   17b80:	e7f2      	b.n	17b68 <hal_spi_config_slave+0x14>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   17b82:	2306      	movs	r3, #6
    rc = 0;
   17b84:	2000      	movs	r0, #0
            break;
   17b86:	e7ef      	b.n	17b68 <hal_spi_config_slave+0x14>
            nrf_config = 0;
   17b88:	2300      	movs	r3, #0
            rc = EINVAL;
   17b8a:	2016      	movs	r0, #22
            break;
   17b8c:	e7ec      	b.n	17b68 <hal_spi_config_slave+0x14>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   17b8e:	2302      	movs	r3, #2
    rc = 0;
   17b90:	2000      	movs	r0, #0
   17b92:	e7e9      	b.n	17b68 <hal_spi_config_slave+0x14>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   17b94:	f043 0301 	orr.w	r3, r3, #1
   17b98:	e7eb      	b.n	17b72 <hal_spi_config_slave+0x1e>
            rc = EINVAL;
   17b9a:	2016      	movs	r0, #22
    return rc;
   17b9c:	e7ed      	b.n	17b7a <hal_spi_config_slave+0x26>
	...

00017ba0 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   17ba0:	b410      	push	{r4}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   17ba2:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   17ba4:	2401      	movs	r4, #1
   17ba6:	409c      	lsls	r4, r3
   17ba8:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
   17bac:	f8cc 450c 	str.w	r4, [ip, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   17bb0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17bb4:	2403      	movs	r4, #3
   17bb6:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   17bba:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   17bbc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17bc0:	2400      	movs	r4, #0
   17bc2:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   17bc6:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   17bc8:	780c      	ldrb	r4, [r1, #0]
   17bca:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   17bce:	784c      	ldrb	r4, [r1, #1]
   17bd0:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   17bd4:	7889      	ldrb	r1, [r1, #2]
   17bd6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   17bda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17bde:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   17be2:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   17be6:	491a      	ldr	r1, [pc, #104]	; (17c50 <hal_spi_init_master+0xb0>)
   17be8:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   17bea:	3310      	adds	r3, #16
   17bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   17bf0:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   17bf4:	2b00      	cmp	r3, #0
   17bf6:	db23      	blt.n	17c40 <hal_spi_init_master+0xa0>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17bf8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   17bfc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   17c00:	22e0      	movs	r2, #224	; 0xe0
   17c02:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   17c06:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   17c0a:	2b00      	cmp	r3, #0
   17c0c:	db08      	blt.n	17c20 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17c0e:	f003 011f 	and.w	r1, r3, #31
   17c12:	095b      	lsrs	r3, r3, #5
   17c14:	2201      	movs	r2, #1
   17c16:	408a      	lsls	r2, r1
   17c18:	3360      	adds	r3, #96	; 0x60
   17c1a:	490e      	ldr	r1, [pc, #56]	; (17c54 <hal_spi_init_master+0xb4>)
   17c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   17c20:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   17c24:	2b00      	cmp	r3, #0
   17c26:	db07      	blt.n	17c38 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17c28:	f003 011f 	and.w	r1, r3, #31
   17c2c:	095b      	lsrs	r3, r3, #5
   17c2e:	2201      	movs	r2, #1
   17c30:	408a      	lsls	r2, r1
   17c32:	4908      	ldr	r1, [pc, #32]	; (17c54 <hal_spi_init_master+0xb4>)
   17c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   17c38:	2000      	movs	r0, #0
   17c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
   17c3e:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17c40:	f003 030f 	and.w	r3, r3, #15
   17c44:	4a04      	ldr	r2, [pc, #16]	; (17c58 <hal_spi_init_master+0xb8>)
   17c46:	441a      	add	r2, r3
   17c48:	23e0      	movs	r3, #224	; 0xe0
   17c4a:	7613      	strb	r3, [r2, #24]
   17c4c:	e7db      	b.n	17c06 <hal_spi_init_master+0x66>
   17c4e:	bf00      	nop
   17c50:	e000ed00 	.word	0xe000ed00
   17c54:	e000e100 	.word	0xe000e100
   17c58:	e000ecfc 	.word	0xe000ecfc

00017c5c <hal_spi_config_master>:
{
   17c5c:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   17c5e:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   17c60:	680c      	ldr	r4, [r1, #0]
   17c62:	684b      	ldr	r3, [r1, #4]
   17c64:	6084      	str	r4, [r0, #8]
   17c66:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   17c68:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   17c6c:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   17c70:	7808      	ldrb	r0, [r1, #0]
   17c72:	2801      	cmp	r0, #1
   17c74:	d916      	bls.n	17ca4 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   17c76:	2001      	movs	r0, #1
   17c78:	4098      	lsls	r0, r3
   17c7a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   17c7e:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   17c82:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17c86:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   17c8a:	2403      	movs	r4, #3
   17c8c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   17c90:	788b      	ldrb	r3, [r1, #2]
   17c92:	b973      	cbnz	r3, 17cb2 <hal_spi_config_master+0x56>
    rc = 0;
   17c94:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   17c96:	780b      	ldrb	r3, [r1, #0]
   17c98:	2b03      	cmp	r3, #3
   17c9a:	d825      	bhi.n	17ce8 <hal_spi_config_master+0x8c>
   17c9c:	e8df f003 	tbb	[pc, r3]
   17ca0:	2220270b 	.word	0x2220270b
        port->OUTCLR = (1UL << pin);
   17ca4:	2001      	movs	r0, #1
   17ca6:	4098      	lsls	r0, r3
   17ca8:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   17cac:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   17cb0:	e7e7      	b.n	17c82 <hal_spi_config_master+0x26>
            rc = EINVAL;
   17cb2:	2016      	movs	r0, #22
   17cb4:	e7ef      	b.n	17c96 <hal_spi_config_master+0x3a>
    switch (settings->data_mode) {
   17cb6:	2300      	movs	r3, #0
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   17cb8:	f891 c001 	ldrb.w	ip, [r1, #1]
   17cbc:	f1bc 0f01 	cmp.w	ip, #1
   17cc0:	d017      	beq.n	17cf2 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   17cc2:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   17cc6:	684b      	ldr	r3, [r1, #4]
   17cc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   17ccc:	d02c      	beq.n	17d28 <hal_spi_config_master+0xcc>
   17cce:	d81c      	bhi.n	17d0a <hal_spi_config_master+0xae>
   17cd0:	2bfa      	cmp	r3, #250	; 0xfa
   17cd2:	d02c      	beq.n	17d2e <hal_spi_config_master+0xd2>
   17cd4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   17cd8:	d10e      	bne.n	17cf8 <hal_spi_config_master+0x9c>
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   17cda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   17cde:	e00f      	b.n	17d00 <hal_spi_config_master+0xa4>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   17ce0:	2304      	movs	r3, #4
            break;
   17ce2:	e7e9      	b.n	17cb8 <hal_spi_config_master+0x5c>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   17ce4:	2306      	movs	r3, #6
            break;
   17ce6:	e7e7      	b.n	17cb8 <hal_spi_config_master+0x5c>
            nrf_config = 0;
   17ce8:	2300      	movs	r3, #0
            rc = EINVAL;
   17cea:	2016      	movs	r0, #22
            break;
   17cec:	e7e4      	b.n	17cb8 <hal_spi_config_master+0x5c>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   17cee:	2302      	movs	r3, #2
   17cf0:	e7e2      	b.n	17cb8 <hal_spi_config_master+0x5c>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   17cf2:	f043 0301 	orr.w	r3, r3, #1
   17cf6:	e7e4      	b.n	17cc2 <hal_spi_config_master+0x66>
    switch (settings->baudrate) {
   17cf8:	2b7d      	cmp	r3, #125	; 0x7d
   17cfa:	d11b      	bne.n	17d34 <hal_spi_config_master+0xd8>
   17cfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   17d00:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   17d04:	f85d 4b04 	ldr.w	r4, [sp], #4
   17d08:	4770      	bx	lr
    switch (settings->baudrate) {
   17d0a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   17d0e:	d014      	beq.n	17d3a <hal_spi_config_master+0xde>
   17d10:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   17d14:	d102      	bne.n	17d1c <hal_spi_config_master+0xc0>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   17d16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   17d1a:	e7f1      	b.n	17d00 <hal_spi_config_master+0xa4>
    switch (settings->baudrate) {
   17d1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   17d20:	d10e      	bne.n	17d40 <hal_spi_config_master+0xe4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   17d22:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   17d26:	e7eb      	b.n	17d00 <hal_spi_config_master+0xa4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   17d28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   17d2c:	e7e8      	b.n	17d00 <hal_spi_config_master+0xa4>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   17d2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   17d32:	e7e5      	b.n	17d00 <hal_spi_config_master+0xa4>
            frequency = 0;
   17d34:	2300      	movs	r3, #0
            rc = EINVAL;
   17d36:	2016      	movs	r0, #22
   17d38:	e7e2      	b.n	17d00 <hal_spi_config_master+0xa4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   17d3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17d3e:	e7df      	b.n	17d00 <hal_spi_config_master+0xa4>
            frequency = 0;
   17d40:	2300      	movs	r3, #0
            rc = EINVAL;
   17d42:	2016      	movs	r0, #22
   17d44:	e7dc      	b.n	17d00 <hal_spi_config_master+0xa4>
	...

00017d48 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17d48:	2803      	cmp	r0, #3
   17d4a:	dc10      	bgt.n	17d6e <hal_spi_config+0x26>
{
   17d4c:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17d4e:	4b0b      	ldr	r3, [pc, #44]	; (17d7c <hal_spi_config+0x34>)
   17d50:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   17d54:	b168      	cbz	r0, 17d72 <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   17d56:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   17d58:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   17d5c:	b95b      	cbnz	r3, 17d76 <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17d5e:	7803      	ldrb	r3, [r0, #0]
   17d60:	b913      	cbnz	r3, 17d68 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
   17d62:	f7ff ff7b 	bl	17c5c <hal_spi_config_master>
        rc = hal_spi_config_slave(spi, settings);
    }

err:
    return (rc);
}
   17d66:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_slave(spi, settings);
   17d68:	f7ff fef4 	bl	17b54 <hal_spi_config_slave>
   17d6c:	e7fb      	b.n	17d66 <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17d6e:	2016      	movs	r0, #22
}
   17d70:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17d72:	2016      	movs	r0, #22
   17d74:	e7f7      	b.n	17d66 <hal_spi_config+0x1e>
        return -1;
   17d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17d7a:	e7f4      	b.n	17d66 <hal_spi_config+0x1e>
   17d7c:	00023544 	.word	0x00023544

00017d80 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17d80:	2803      	cmp	r0, #3
   17d82:	dc1b      	bgt.n	17dbc <hal_spi_enable+0x3c>
   17d84:	4b10      	ldr	r3, [pc, #64]	; (17dc8 <hal_spi_enable+0x48>)
   17d86:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17d8a:	b1cb      	cbz	r3, 17dc0 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17d8c:	781a      	ldrb	r2, [r3, #0]
   17d8e:	b92a      	cbnz	r2, 17d9c <hal_spi_enable+0x1c>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   17d90:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   17d92:	2201      	movs	r2, #1
   17d94:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
        spis->EVENTS_END = 0;
        spis->EVENTS_ACQUIRED = 0;
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
    }
    rc = 0;
   17d98:	2000      	movs	r0, #0
   17d9a:	4770      	bx	lr
        if (spi->txrx_cb_func == NULL) {
   17d9c:	6a1a      	ldr	r2, [r3, #32]
   17d9e:	b18a      	cbz	r2, 17dc4 <hal_spi_enable+0x44>
        spis = spi->nhs_spi.spis;
   17da0:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   17da2:	2000      	movs	r0, #0
   17da4:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   17da8:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   17dac:	f240 4202 	movw	r2, #1026	; 0x402
   17db0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   17db4:	2202      	movs	r2, #2
   17db6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   17dba:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17dbc:	2016      	movs	r0, #22
   17dbe:	4770      	bx	lr
   17dc0:	2016      	movs	r0, #22
   17dc2:	4770      	bx	lr
            rc = EINVAL;
   17dc4:	2016      	movs	r0, #22

err:
    return rc;
}
   17dc6:	4770      	bx	lr
   17dc8:	00023544 	.word	0x00023544

00017dcc <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17dcc:	2803      	cmp	r0, #3
   17dce:	dc2a      	bgt.n	17e26 <hal_spi_disable+0x5a>
{
   17dd0:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17dd2:	4b17      	ldr	r3, [pc, #92]	; (17e30 <hal_spi_disable+0x64>)
   17dd4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   17dd8:	b33c      	cbz	r4, 17e2a <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17dda:	7823      	ldrb	r3, [r4, #0]
   17ddc:	b9ab      	cbnz	r3, 17e0a <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   17dde:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   17de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17de4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   17de8:	7863      	ldrb	r3, [r4, #1]
   17dea:	b943      	cbnz	r3, 17dfe <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   17dec:	2300      	movs	r3, #0
   17dee:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   17df2:	2000      	movs	r0, #0
   17df4:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   17df6:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   17df8:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   17dfa:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   17dfc:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   17dfe:	4628      	mov	r0, r5
   17e00:	f7ff fe9e 	bl	17b40 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   17e04:	2300      	movs	r3, #0
   17e06:	7063      	strb	r3, [r4, #1]
   17e08:	e7f0      	b.n	17dec <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   17e0a:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   17e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17e10:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   17e14:	2300      	movs	r3, #0
   17e16:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   17e1a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   17e1e:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   17e22:	70e3      	strb	r3, [r4, #3]
   17e24:	e7e5      	b.n	17df2 <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17e26:	2016      	movs	r0, #22
}
   17e28:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17e2a:	2016      	movs	r0, #22
    return rc;
   17e2c:	e7e6      	b.n	17dfc <hal_spi_disable+0x30>
   17e2e:	bf00      	nop
   17e30:	00023544 	.word	0x00023544

00017e34 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17e34:	2803      	cmp	r0, #3
   17e36:	dc1d      	bgt.n	17e74 <hal_spi_init+0x40>
{
   17e38:	b538      	push	{r3, r4, r5, lr}
   17e3a:	460c      	mov	r4, r1
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17e3c:	4b12      	ldr	r3, [pc, #72]	; (17e88 <hal_spi_init+0x54>)
   17e3e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   17e42:	b1cd      	cbz	r5, 17e78 <hal_spi_init+0x44>
    if (cfg == NULL) {
   17e44:	b1d1      	cbz	r1, 17e7c <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   17e46:	2a01      	cmp	r2, #1
   17e48:	d81a      	bhi.n	17e80 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   17e4a:	702a      	strb	r2, [r5, #0]
    if (spi_num == 0) {
   17e4c:	b9d0      	cbnz	r0, 17e84 <hal_spi_init+0x50>
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   17e4e:	2303      	movs	r3, #3
   17e50:	752b      	strb	r3, [r5, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   17e52:	b94a      	cbnz	r2, 17e68 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   17e54:	4b0d      	ldr	r3, [pc, #52]	; (17e8c <hal_spi_init+0x58>)
   17e56:	612b      	str	r3, [r5, #16]
    hal_spi_disable(spi_num);
   17e58:	f7ff ffb8 	bl	17dcc <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   17e5c:	4a0c      	ldr	r2, [pc, #48]	; (17e90 <hal_spi_init+0x5c>)
   17e5e:	4621      	mov	r1, r4
   17e60:	4628      	mov	r0, r5
   17e62:	f7ff fe9d 	bl	17ba0 <hal_spi_init_master>
   17e66:	e00e      	b.n	17e86 <hal_spi_init+0x52>
            assert(0);
   17e68:	2300      	movs	r3, #0
   17e6a:	461a      	mov	r2, r3
   17e6c:	4619      	mov	r1, r3
   17e6e:	4618      	mov	r0, r3
   17e70:	f7f1 f870 	bl	8f54 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17e74:	2016      	movs	r0, #22
}
   17e76:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17e78:	2016      	movs	r0, #22
   17e7a:	e004      	b.n	17e86 <hal_spi_init+0x52>
    rc = EINVAL;
   17e7c:	2016      	movs	r0, #22
   17e7e:	e002      	b.n	17e86 <hal_spi_init+0x52>
   17e80:	2016      	movs	r0, #22
   17e82:	e000      	b.n	17e86 <hal_spi_init+0x52>
   17e84:	2016      	movs	r0, #22
}
   17e86:	bd38      	pop	{r3, r4, r5, pc}
   17e88:	00023544 	.word	0x00023544
   17e8c:	40003000 	.word	0x40003000
   17e90:	00017b29 	.word	0x00017b29

00017e94 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17e94:	2803      	cmp	r0, #3
   17e96:	dc0a      	bgt.n	17eae <hal_spi_set_txrx_cb+0x1a>
   17e98:	4b08      	ldr	r3, [pc, #32]	; (17ebc <hal_spi_set_txrx_cb+0x28>)
   17e9a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17e9e:	b143      	cbz	r3, 17eb2 <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   17ea0:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   17ea2:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   17ea6:	b930      	cbnz	r0, 17eb6 <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   17ea8:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   17eaa:	625a      	str	r2, [r3, #36]	; 0x24
        rc = 0;
   17eac:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17eae:	2016      	movs	r0, #22
   17eb0:	4770      	bx	lr
   17eb2:	2016      	movs	r0, #22
   17eb4:	4770      	bx	lr
        rc = -1;
   17eb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

err:
    return rc;
}
   17eba:	4770      	bx	lr
   17ebc:	00023544 	.word	0x00023544

00017ec0 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   17ec0:	2b00      	cmp	r3, #0
   17ec2:	d046      	beq.n	17f52 <hal_spi_txrx+0x92>
{
   17ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17ec6:	460d      	mov	r5, r1
   17ec8:	4616      	mov	r6, r2
   17eca:	461f      	mov	r7, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   17ecc:	2803      	cmp	r0, #3
   17ece:	dc42      	bgt.n	17f56 <hal_spi_txrx+0x96>
   17ed0:	4b25      	ldr	r3, [pc, #148]	; (17f68 <hal_spi_txrx+0xa8>)
   17ed2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17ed6:	2b00      	cmp	r3, #0
   17ed8:	d03f      	beq.n	17f5a <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17eda:	781a      	ldrb	r2, [r3, #0]
   17edc:	2a00      	cmp	r2, #0
   17ede:	d13e      	bne.n	17f5e <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   17ee0:	2900      	cmp	r1, #0
   17ee2:	d03e      	beq.n	17f62 <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   17ee4:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   17ee6:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   17eea:	2b07      	cmp	r3, #7
   17eec:	d004      	beq.n	17ef8 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   17eee:	b95b      	cbnz	r3, 17f08 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   17ef0:	2301      	movs	r3, #1
   17ef2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   17ef6:	e007      	b.n	17f08 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   17ef8:	f7ff ff68 	bl	17dcc <hal_spi_disable>
        if (enabled == 0) {
   17efc:	e7f8      	b.n	17ef0 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   17efe:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   17f02:	2300      	movs	r3, #0
   17f04:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   17f08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17f0c:	2b00      	cmp	r3, #0
   17f0e:	d1f6      	bne.n	17efe <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   17f10:	782b      	ldrb	r3, [r5, #0]
   17f12:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   17f16:	1e7a      	subs	r2, r7, #1
        rxd = (uint8_t *)rxbuf;
   17f18:	4631      	mov	r1, r6
        for (i = 0; i < len; ++i) {
   17f1a:	2000      	movs	r0, #0
   17f1c:	e00d      	b.n	17f3a <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   17f1e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17f22:	2b00      	cmp	r3, #0
   17f24:	d0fb      	beq.n	17f1e <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   17f26:	2300      	movs	r3, #0
   17f28:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   17f2c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   17f30:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   17f32:	b10e      	cbz	r6, 17f38 <hal_spi_txrx+0x78>
                *rxd = rxval;
   17f34:	f801 3b01 	strb.w	r3, [r1], #1
        for (i = 0; i < len; ++i) {
   17f38:	3001      	adds	r0, #1
   17f3a:	42b8      	cmp	r0, r7
   17f3c:	da07      	bge.n	17f4e <hal_spi_txrx+0x8e>
            if (txcnt) {
   17f3e:	2a00      	cmp	r2, #0
   17f40:	d0ed      	beq.n	17f1e <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   17f42:	786b      	ldrb	r3, [r5, #1]
   17f44:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   17f48:	3a01      	subs	r2, #1
                ++txd;
   17f4a:	3501      	adds	r5, #1
   17f4c:	e7e7      	b.n	17f1e <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   17f4e:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   17f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   17f52:	2016      	movs	r0, #22
}
   17f54:	4770      	bx	lr
    return rc;
   17f56:	2016      	movs	r0, #22
   17f58:	e7fa      	b.n	17f50 <hal_spi_txrx+0x90>
   17f5a:	2016      	movs	r0, #22
   17f5c:	e7f8      	b.n	17f50 <hal_spi_txrx+0x90>
   17f5e:	2016      	movs	r0, #22
   17f60:	e7f6      	b.n	17f50 <hal_spi_txrx+0x90>
   17f62:	2016      	movs	r0, #22
   17f64:	e7f4      	b.n	17f50 <hal_spi_txrx+0x90>
   17f66:	bf00      	nop
   17f68:	00023544 	.word	0x00023544

00017f6c <hal_spi_txrx_noblock>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_txrx_noblock(int spi_num, void *txbuf, void *rxbuf, int len)
{
   17f6c:	b570      	push	{r4, r5, r6, lr}
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17f6e:	2803      	cmp	r0, #3
   17f70:	dc63      	bgt.n	1803a <hal_spi_txrx_noblock+0xce>
   17f72:	461c      	mov	r4, r3
   17f74:	4b3a      	ldr	r3, [pc, #232]	; (18060 <hal_spi_txrx_noblock+0xf4>)
   17f76:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   17f7a:	2d00      	cmp	r5, #0
   17f7c:	d060      	beq.n	18040 <hal_spi_txrx_noblock+0xd4>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   17f7e:	6a2b      	ldr	r3, [r5, #32]
   17f80:	2b00      	cmp	r3, #0
   17f82:	d05f      	beq.n	18044 <hal_spi_txrx_noblock+0xd8>
   17f84:	2c00      	cmp	r4, #0
   17f86:	d05f      	beq.n	18048 <hal_spi_txrx_noblock+0xdc>
#if MYNEWT_VAL_CHOICE(MCU_TARGET,nRF52832)
    /* There is a known issue in nRF52832 with sending 1 byte in SPIM mode that
     * it clocks out additional byte. For this reason, let us use SPI mode
     * for such a write
     */
    if (len == 1) {
   17f88:	2c01      	cmp	r4, #1
   17f8a:	d033      	beq.n	17ff4 <hal_spi_txrx_noblock+0x88>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17f8c:	782b      	ldrb	r3, [r5, #0]
   17f8e:	2b00      	cmp	r3, #0
   17f90:	d141      	bne.n	18016 <hal_spi_txrx_noblock+0xaa>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   17f92:	2900      	cmp	r1, #0
   17f94:	d05a      	beq.n	1804c <hal_spi_txrx_noblock+0xe0>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   17f96:	786b      	ldrb	r3, [r5, #1]
   17f98:	2b00      	cmp	r3, #0
   17f9a:	d159      	bne.n	18050 <hal_spi_txrx_noblock+0xe4>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   17f9c:	6928      	ldr	r0, [r5, #16]
#if MYNEWT_VAL(SPI_3_MASTER)
        if (spim == NRF_SPIM3) {
            anomaly_198_enable(txbuf, len);
        }
#endif
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   17f9e:	2340      	movs	r3, #64	; 0x40
   17fa0:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   17fa4:	2301      	movs	r3, #1
   17fa6:	706b      	strb	r3, [r5, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   17fa8:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
   17fac:	2b07      	cmp	r3, #7
   17fae:	d005      	beq.n	17fbc <hal_spi_txrx_noblock+0x50>
            spim->ENABLE = 0;
   17fb0:	2300      	movs	r3, #0
   17fb2:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   17fb6:	2307      	movs	r3, #7
   17fb8:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   17fbc:	2300      	movs	r3, #0
   17fbe:	80eb      	strh	r3, [r5, #6]
        spi->nhs_buflen = len;
   17fc0:	80ac      	strh	r4, [r5, #4]
        spi->nhs_txbuf = txbuf;
   17fc2:	61a9      	str	r1, [r5, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   17fc4:	2cff      	cmp	r4, #255	; 0xff
   17fc6:	bfa8      	it	ge
   17fc8:	24ff      	movge	r4, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   17fca:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   17fce:	f8c0 4548 	str.w	r4, [r0, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   17fd2:	61ea      	str	r2, [r5, #28]
        if (rxbuf == NULL) {
   17fd4:	b1c2      	cbz	r2, 18008 <hal_spi_txrx_noblock+0x9c>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   17fd6:	f8c0 2534 	str.w	r2, [r0, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   17fda:	f8c0 4538 	str.w	r4, [r0, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   17fde:	2600      	movs	r6, #0
   17fe0:	f8c0 6118 	str.w	r6, [r0, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   17fe4:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
        spim->TASKS_START = 1;
   17fe8:	2301      	movs	r3, #1
   17fea:	6103      	str	r3, [r0, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   17fec:	2340      	movs	r3, #64	; 0x40
   17fee:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
   17ff2:	e023      	b.n	1803c <hal_spi_txrx_noblock+0xd0>
        rc = hal_spi_txrx(spi_num, txbuf, rxbuf, len);
   17ff4:	4623      	mov	r3, r4
   17ff6:	f7ff ff63 	bl	17ec0 <hal_spi_txrx>
        if (rc == 0) {
   17ffa:	4606      	mov	r6, r0
   17ffc:	b9f0      	cbnz	r0, 1803c <hal_spi_txrx_noblock+0xd0>
            spi->txrx_cb_func(spi->txrx_cb_arg, len);
   17ffe:	6a2b      	ldr	r3, [r5, #32]
   18000:	4621      	mov	r1, r4
   18002:	6a68      	ldr	r0, [r5, #36]	; 0x24
   18004:	4798      	blx	r3
        return rc;
   18006:	e019      	b.n	1803c <hal_spi_txrx_noblock+0xd0>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   18008:	3502      	adds	r5, #2
   1800a:	f8c0 5534 	str.w	r5, [r0, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   1800e:	2301      	movs	r3, #1
   18010:	f8c0 3538 	str.w	r3, [r0, #1336]	; 0x538
   18014:	e7e3      	b.n	17fde <hal_spi_txrx_noblock+0x72>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   18016:	b161      	cbz	r1, 18032 <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   18018:	2cff      	cmp	r4, #255	; 0xff
   1801a:	dc1c      	bgt.n	18056 <hal_spi_txrx_noblock+0xea>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   1801c:	78eb      	ldrb	r3, [r5, #3]
   1801e:	b9e3      	cbnz	r3, 1805a <hal_spi_txrx_noblock+0xee>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   18020:	61ea      	str	r2, [r5, #28]
        spi->nhs_txbuf = txbuf;
   18022:	61a9      	str	r1, [r5, #24]
        spi->nhs_buflen = len;
   18024:	80ac      	strh	r4, [r5, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   18026:	2301      	movs	r3, #1
   18028:	70eb      	strb	r3, [r5, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   1802a:	692a      	ldr	r2, [r5, #16]
   1802c:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   1802e:	2600      	movs	r6, #0
   18030:	e004      	b.n	1803c <hal_spi_txrx_noblock+0xd0>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   18032:	2a00      	cmp	r2, #0
   18034:	d1f0      	bne.n	18018 <hal_spi_txrx_noblock+0xac>
    rc = EINVAL;
   18036:	2616      	movs	r6, #22
   18038:	e000      	b.n	1803c <hal_spi_txrx_noblock+0xd0>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1803a:	2616      	movs	r6, #22

err:
    return rc;
}
   1803c:	4630      	mov	r0, r6
   1803e:	bd70      	pop	{r4, r5, r6, pc}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18040:	2616      	movs	r6, #22
   18042:	e7fb      	b.n	1803c <hal_spi_txrx_noblock+0xd0>
    rc = EINVAL;
   18044:	2616      	movs	r6, #22
   18046:	e7f9      	b.n	1803c <hal_spi_txrx_noblock+0xd0>
   18048:	2616      	movs	r6, #22
   1804a:	e7f7      	b.n	1803c <hal_spi_txrx_noblock+0xd0>
   1804c:	2616      	movs	r6, #22
   1804e:	e7f5      	b.n	1803c <hal_spi_txrx_noblock+0xd0>
            rc = -1;
   18050:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   18054:	e7f2      	b.n	1803c <hal_spi_txrx_noblock+0xd0>
    rc = EINVAL;
   18056:	2616      	movs	r6, #22
   18058:	e7f0      	b.n	1803c <hal_spi_txrx_noblock+0xd0>
            rc = -1;
   1805a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1805e:	e7ed      	b.n	1803c <hal_spi_txrx_noblock+0xd0>
   18060:	00023544 	.word	0x00023544

00018064 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   18064:	2301      	movs	r3, #1
   18066:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   18068:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1806c:	4770      	bx	lr
	...

00018070 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   18070:	b538      	push	{r3, r4, r5, lr}
   18072:	4604      	mov	r4, r0
   18074:	460d      	mov	r5, r1
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   18076:	7883      	ldrb	r3, [r0, #2]
   18078:	b39b      	cbz	r3, 180e2 <nrf_timer_set_ocmp+0x72>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1807a:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1807c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   18080:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   18084:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   18086:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1808a:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
   1808e:	b118      	cbz	r0, 18098 <nrf_timer_set_ocmp+0x28>
            temp += (1UL << 24);
   18090:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   18094:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   18098:	430b      	orrs	r3, r1
        delta_t = (int32_t)(expiry - temp);
   1809a:	1aeb      	subs	r3, r5, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1809c:	2b02      	cmp	r3, #2
   1809e:	dc0f      	bgt.n	180c0 <nrf_timer_set_ocmp+0x50>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   180a0:	7862      	ldrb	r2, [r4, #1]
   180a2:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   180a6:	2b00      	cmp	r3, #0
   180a8:	db15      	blt.n	180d6 <nrf_timer_set_ocmp+0x66>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   180aa:	f002 021f 	and.w	r2, r2, #31
   180ae:	095b      	lsrs	r3, r3, #5
   180b0:	2101      	movs	r1, #1
   180b2:	fa01 f202 	lsl.w	r2, r1, r2
   180b6:	3340      	adds	r3, #64	; 0x40
   180b8:	491a      	ldr	r1, [pc, #104]	; (18124 <nrf_timer_set_ocmp+0xb4>)
   180ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   180be:	e00a      	b.n	180d6 <nrf_timer_set_ocmp+0x66>
        } else  {
            if (delta_t < (1UL << 24)) {
   180c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   180c4:	d208      	bcs.n	180d8 <nrf_timer_set_ocmp+0x68>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   180c6:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
   180ca:	f8c2 5548 	str.w	r5, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   180ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   180d2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   180d6:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   180d8:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
   180dc:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
   180e0:	e7f5      	b.n	180ce <nrf_timer_set_ocmp+0x5e>
        hwtimer = bsptimer->tmr_reg;
   180e2:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   180e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   180e8:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   180ec:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   180f0:	2200      	movs	r2, #0
   180f2:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   180f6:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   180fa:	f7ff ffb3 	bl	18064 <nrf_read_timer_cntr>
   180fe:	1b45      	subs	r5, r0, r5
   18100:	2d00      	cmp	r5, #0
   18102:	dbe8      	blt.n	180d6 <nrf_timer_set_ocmp+0x66>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   18104:	7862      	ldrb	r2, [r4, #1]
   18106:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   1810a:	2b00      	cmp	r3, #0
   1810c:	dbe3      	blt.n	180d6 <nrf_timer_set_ocmp+0x66>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1810e:	f002 021f 	and.w	r2, r2, #31
   18112:	095b      	lsrs	r3, r3, #5
   18114:	2101      	movs	r1, #1
   18116:	fa01 f202 	lsl.w	r2, r1, r2
   1811a:	3340      	adds	r3, #64	; 0x40
   1811c:	4901      	ldr	r1, [pc, #4]	; (18124 <nrf_timer_set_ocmp+0xb4>)
   1811e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   18122:	e7d8      	b.n	180d6 <nrf_timer_set_ocmp+0x66>
   18124:	e000e100 	.word	0xe000e100

00018128 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   18128:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1812c:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   18130:	4770      	bx	lr

00018132 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   18132:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   18136:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1813a:	4770      	bx	lr

0001813c <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1813c:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1813e:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   18140:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18144:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   18146:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   18148:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1814c:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   18150:	b1b5      	cbz	r5, 18180 <hal_timer_read_bsptimer+0x44>
        tcntr += (1UL << 24);
   18152:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   18156:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   18158:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1815c:	2500      	movs	r5, #0
   1815e:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   18162:	7845      	ldrb	r5, [r0, #1]
   18164:	f990 2001 	ldrsb.w	r2, [r0, #1]
  if ((int32_t)(IRQn) >= 0)
   18168:	2a00      	cmp	r2, #0
   1816a:	db09      	blt.n	18180 <hal_timer_read_bsptimer+0x44>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1816c:	f005 051f 	and.w	r5, r5, #31
   18170:	0952      	lsrs	r2, r2, #5
   18172:	2001      	movs	r0, #1
   18174:	fa00 f505 	lsl.w	r5, r0, r5
   18178:	3240      	adds	r2, #64	; 0x40
   1817a:	4804      	ldr	r0, [pc, #16]	; (1818c <hal_timer_read_bsptimer+0x50>)
   1817c:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
    }
    tcntr |= low32;
   18180:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   18184:	b904      	cbnz	r4, 18188 <hal_timer_read_bsptimer+0x4c>
  __ASM volatile ("cpsie i" : : : "memory");
   18186:	b662      	cpsie	i

    return tcntr;
}
   18188:	bc30      	pop	{r4, r5}
   1818a:	4770      	bx	lr
   1818c:	e000e100 	.word	0xe000e100

00018190 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   18190:	b570      	push	{r4, r5, r6, lr}
   18192:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   18194:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18198:	b672      	cpsid	i
}
   1819a:	e013      	b.n	181c4 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1819c:	6928      	ldr	r0, [r5, #16]
   1819e:	f7ff ff61 	bl	18064 <nrf_read_timer_cntr>
            delta = 0;
   181a2:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   181a4:	68e3      	ldr	r3, [r4, #12]
   181a6:	1ac3      	subs	r3, r0, r3
   181a8:	4293      	cmp	r3, r2
   181aa:	db19      	blt.n	181e0 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   181ac:	6923      	ldr	r3, [r4, #16]
   181ae:	b1a3      	cbz	r3, 181da <hal_timer_chk_queue+0x4a>
   181b0:	6962      	ldr	r2, [r4, #20]
   181b2:	615a      	str	r2, [r3, #20]
   181b4:	6963      	ldr	r3, [r4, #20]
   181b6:	6922      	ldr	r2, [r4, #16]
   181b8:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   181ba:	2300      	movs	r3, #0
   181bc:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   181be:	6863      	ldr	r3, [r4, #4]
   181c0:	68a0      	ldr	r0, [r4, #8]
   181c2:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   181c4:	696c      	ldr	r4, [r5, #20]
   181c6:	b15c      	cbz	r4, 181e0 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   181c8:	78ab      	ldrb	r3, [r5, #2]
   181ca:	2b00      	cmp	r3, #0
   181cc:	d0e6      	beq.n	1819c <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   181ce:	4628      	mov	r0, r5
   181d0:	f7ff ffb4 	bl	1813c <hal_timer_read_bsptimer>
            delta = -3;
   181d4:	f06f 0202 	mvn.w	r2, #2
   181d8:	e7e4      	b.n	181a4 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   181da:	6963      	ldr	r3, [r4, #20]
   181dc:	61ab      	str	r3, [r5, #24]
   181de:	e7e9      	b.n	181b4 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   181e0:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   181e2:	b133      	cbz	r3, 181f2 <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   181e4:	68d9      	ldr	r1, [r3, #12]
   181e6:	4628      	mov	r0, r5
   181e8:	f7ff ff42 	bl	18070 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   181ec:	b906      	cbnz	r6, 181f0 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   181ee:	b662      	cpsie	i
}
   181f0:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   181f2:	78ab      	ldrb	r3, [r5, #2]
   181f4:	b11b      	cbz	r3, 181fe <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   181f6:	6928      	ldr	r0, [r5, #16]
   181f8:	f7ff ff9b 	bl	18132 <nrf_rtc_disable_ocmp>
   181fc:	e7f6      	b.n	181ec <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   181fe:	6928      	ldr	r0, [r5, #16]
   18200:	f7ff ff92 	bl	18128 <nrf_timer_disable_ocmp>
   18204:	e7f2      	b.n	181ec <hal_timer_chk_queue+0x5c>

00018206 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   18206:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   18208:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1820a:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1820e:	b113      	cbz	r3, 18216 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   18210:	2300      	movs	r3, #0
   18212:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   18216:	6883      	ldr	r3, [r0, #8]
   18218:	3301      	adds	r3, #1
   1821a:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1821c:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   18220:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   18224:	d100      	bne.n	18228 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   18226:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   18228:	f7ff ffb2 	bl	18190 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1822c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   18230:	e7f9      	b.n	18226 <hal_timer_irq_handler+0x20>
	...

00018234 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   18234:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   18236:	4802      	ldr	r0, [pc, #8]	; (18240 <nrf52_timer0_irq_handler+0xc>)
   18238:	f7ff ffe5 	bl	18206 <hal_timer_irq_handler>
}
   1823c:	bd08      	pop	{r3, pc}
   1823e:	bf00      	nop
   18240:	200066c8 	.word	0x200066c8

00018244 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   18244:	2805      	cmp	r0, #5
   18246:	dc1c      	bgt.n	18282 <hal_timer_init+0x3e>
   18248:	4b12      	ldr	r3, [pc, #72]	; (18294 <hal_timer_init+0x50>)
   1824a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1824e:	b1d3      	cbz	r3, 18286 <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   18250:	781a      	ldrb	r2, [r3, #0]
   18252:	b9d2      	cbnz	r2, 1828a <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   18254:	b9d8      	cbnz	r0, 1828e <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   18256:	4a10      	ldr	r2, [pc, #64]	; (18298 <hal_timer_init+0x54>)
   18258:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1825a:	2208      	movs	r2, #8
   1825c:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1825e:	4b0f      	ldr	r3, [pc, #60]	; (1829c <hal_timer_init+0x58>)
   18260:	f44f 7280 	mov.w	r2, #256	; 0x100
   18264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   18268:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1826c:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18270:	22e0      	movs	r2, #224	; 0xe0
   18272:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18276:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1827a:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1827c:	4a08      	ldr	r2, [pc, #32]	; (182a0 <hal_timer_init+0x5c>)
   1827e:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   18280:	4770      	bx	lr

err:
    return rc;
   18282:	2016      	movs	r0, #22
   18284:	4770      	bx	lr
   18286:	2016      	movs	r0, #22
   18288:	4770      	bx	lr
   1828a:	2016      	movs	r0, #22
   1828c:	4770      	bx	lr
   1828e:	2016      	movs	r0, #22
}
   18290:	4770      	bx	lr
   18292:	bf00      	nop
   18294:	00023554 	.word	0x00023554
   18298:	40008000 	.word	0x40008000
   1829c:	e000e100 	.word	0xe000e100
   182a0:	00018235 	.word	0x00018235

000182a4 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   182a4:	2805      	cmp	r0, #5
   182a6:	dc65      	bgt.n	18374 <hal_timer_config+0xd0>
{
   182a8:	b430      	push	{r4, r5}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   182aa:	4b3a      	ldr	r3, [pc, #232]	; (18394 <hal_timer_config+0xf0>)
   182ac:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   182b0:	2c00      	cmp	r4, #0
   182b2:	d061      	beq.n	18378 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   182b4:	4838      	ldr	r0, [pc, #224]	; (18398 <hal_timer_config+0xf4>)
   182b6:	fbb0 f0f1 	udiv	r0, r0, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   182ba:	7823      	ldrb	r3, [r4, #0]
   182bc:	2b00      	cmp	r3, #0
   182be:	d15d      	bne.n	1837c <hal_timer_config+0xd8>
   182c0:	4a35      	ldr	r2, [pc, #212]	; (18398 <hal_timer_config+0xf4>)
   182c2:	4291      	cmp	r1, r2
   182c4:	d85d      	bhi.n	18382 <hal_timer_config+0xde>
   182c6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   182ca:	d85c      	bhi.n	18386 <hal_timer_config+0xe2>
        (bsptimer->tmr_reg == NULL)) {
   182cc:	6922      	ldr	r2, [r4, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   182ce:	2a00      	cmp	r2, #0
   182d0:	d05b      	beq.n	1838a <hal_timer_config+0xe6>
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   182d2:	2801      	cmp	r0, #1
   182d4:	d013      	beq.n	182fe <hal_timer_config+0x5a>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   182d6:	2301      	movs	r3, #1
   182d8:	2b09      	cmp	r3, #9
   182da:	d810      	bhi.n	182fe <hal_timer_config+0x5a>
            if (div <= (1 << prescaler)) {
   182dc:	2201      	movs	r2, #1
   182de:	409a      	lsls	r2, r3
   182e0:	4282      	cmp	r2, r0
   182e2:	d202      	bcs.n	182ea <hal_timer_config+0x46>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   182e4:	3301      	adds	r3, #1
   182e6:	b2db      	uxtb	r3, r3
   182e8:	e7f6      	b.n	182d8 <hal_timer_config+0x34>
                min_delta = div - (1 << (prescaler - 1));
   182ea:	1e59      	subs	r1, r3, #1
   182ec:	2501      	movs	r5, #1
   182ee:	fa05 f101 	lsl.w	r1, r5, r1
   182f2:	1a41      	subs	r1, r0, r1
                max_delta = (1 << prescaler) - div;
   182f4:	1a12      	subs	r2, r2, r0
                if (min_delta < max_delta) {
   182f6:	4291      	cmp	r1, r2
   182f8:	d201      	bcs.n	182fe <hal_timer_config+0x5a>
                    prescaler -= 1;
   182fa:	3b01      	subs	r3, #1
   182fc:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   182fe:	4a26      	ldr	r2, [pc, #152]	; (18398 <hal_timer_config+0xf4>)
   18300:	411a      	asrs	r2, r3
   18302:	60e2      	str	r2, [r4, #12]
    bsptimer->tmr_enabled = 1;
   18304:	2201      	movs	r2, #1
   18306:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   18308:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1830c:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1830e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18312:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   18316:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1831a:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1831e:	d00c      	beq.n	1833a <hal_timer_config+0x96>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   18320:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18324:	2100      	movs	r1, #0
   18326:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1832a:	2101      	movs	r1, #1
   1832c:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1832e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18332:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   18336:	2a00      	cmp	r2, #0
   18338:	d0f9      	beq.n	1832e <hal_timer_config+0x8a>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1833a:	6922      	ldr	r2, [r4, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1833c:	2101      	movs	r1, #1
   1833e:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   18340:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   18342:	2500      	movs	r5, #0
   18344:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   18348:	2503      	movs	r5, #3
   1834a:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1834e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   18352:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   18354:	7862      	ldrb	r2, [r4, #1]
   18356:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   1835a:	2b00      	cmp	r3, #0
   1835c:	db07      	blt.n	1836e <hal_timer_config+0xca>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1835e:	f002 021f 	and.w	r2, r2, #31
   18362:	095b      	lsrs	r3, r3, #5
   18364:	fa01 f202 	lsl.w	r2, r1, r2
   18368:	490c      	ldr	r1, [pc, #48]	; (1839c <hal_timer_config+0xf8>)
   1836a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1836e:	b970      	cbnz	r0, 1838e <hal_timer_config+0xea>
  __ASM volatile ("cpsie i" : : : "memory");
   18370:	b662      	cpsie	i
}
   18372:	e004      	b.n	1837e <hal_timer_config+0xda>

    return 0;

err:
    return rc;
   18374:	2016      	movs	r0, #22
}
   18376:	4770      	bx	lr
    return rc;
   18378:	2016      	movs	r0, #22
   1837a:	e000      	b.n	1837e <hal_timer_config+0xda>
   1837c:	2016      	movs	r0, #22
}
   1837e:	bc30      	pop	{r4, r5}
   18380:	4770      	bx	lr
    return rc;
   18382:	2016      	movs	r0, #22
   18384:	e7fb      	b.n	1837e <hal_timer_config+0xda>
   18386:	2016      	movs	r0, #22
   18388:	e7f9      	b.n	1837e <hal_timer_config+0xda>
   1838a:	2016      	movs	r0, #22
   1838c:	e7f7      	b.n	1837e <hal_timer_config+0xda>
    return 0;
   1838e:	2000      	movs	r0, #0
   18390:	e7f5      	b.n	1837e <hal_timer_config+0xda>
   18392:	bf00      	nop
   18394:	00023554 	.word	0x00023554
   18398:	00f42400 	.word	0x00f42400
   1839c:	e000e100 	.word	0xe000e100

000183a0 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   183a0:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   183a2:	2805      	cmp	r0, #5
   183a4:	dc0c      	bgt.n	183c0 <hal_timer_read+0x20>
   183a6:	4b09      	ldr	r3, [pc, #36]	; (183cc <hal_timer_read+0x2c>)
   183a8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   183ac:	b140      	cbz	r0, 183c0 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   183ae:	7883      	ldrb	r3, [r0, #2]
   183b0:	b113      	cbz	r3, 183b8 <hal_timer_read+0x18>
        tcntr = hal_timer_read_bsptimer(bsptimer);
   183b2:	f7ff fec3 	bl	1813c <hal_timer_read_bsptimer>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   183b6:	bd08      	pop	{r3, pc}
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   183b8:	6900      	ldr	r0, [r0, #16]
   183ba:	f7ff fe53 	bl	18064 <nrf_read_timer_cntr>
    return tcntr;
   183be:	e7fa      	b.n	183b6 <hal_timer_read+0x16>
    assert(0);
   183c0:	2300      	movs	r3, #0
   183c2:	461a      	mov	r2, r3
   183c4:	4619      	mov	r1, r3
   183c6:	4618      	mov	r0, r3
   183c8:	f7f0 fdc4 	bl	8f54 <__assert_func>
   183cc:	00023554 	.word	0x00023554

000183d0 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   183d0:	b508      	push	{r3, lr}
    assert(0);
   183d2:	2300      	movs	r3, #0
   183d4:	461a      	mov	r2, r3
   183d6:	4619      	mov	r1, r3
   183d8:	4618      	mov	r0, r3
   183da:	f7f0 fdbb 	bl	8f54 <__assert_func>
	...

000183e0 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   183e0:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   183e2:	4b06      	ldr	r3, [pc, #24]	; (183fc <nrf52_wdt_irq_handler+0x1c>)
   183e4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   183e8:	f013 0f01 	tst.w	r3, #1
   183ec:	d100      	bne.n	183f0 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   183ee:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   183f0:	4b02      	ldr	r3, [pc, #8]	; (183fc <nrf52_wdt_irq_handler+0x1c>)
   183f2:	2200      	movs	r2, #0
   183f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   183f8:	f7ff ffea 	bl	183d0 <nrf52_hal_wdt_default_handler>
   183fc:	40010000 	.word	0x40010000

00018400 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   18400:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   18402:	4b17      	ldr	r3, [pc, #92]	; (18460 <hal_watchdog_init+0x60>)
   18404:	2201      	movs	r2, #1
   18406:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   1840a:	4b16      	ldr	r3, [pc, #88]	; (18464 <hal_watchdog_init+0x64>)
   1840c:	4298      	cmp	r0, r3
   1840e:	d821      	bhi.n	18454 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   18410:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18414:	015b      	lsls	r3, r3, #5
   18416:	4a14      	ldr	r2, [pc, #80]	; (18468 <hal_watchdog_init+0x68>)
   18418:	fba2 2303 	umull	r2, r3, r2, r3
   1841c:	08db      	lsrs	r3, r3, #3
   1841e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   18422:	4b0f      	ldr	r3, [pc, #60]	; (18460 <hal_watchdog_init+0x60>)
   18424:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18428:	4a10      	ldr	r2, [pc, #64]	; (1846c <hal_watchdog_init+0x6c>)
   1842a:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1842c:	4910      	ldr	r1, [pc, #64]	; (18470 <hal_watchdog_init+0x70>)
   1842e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18432:	4a10      	ldr	r2, [pc, #64]	; (18474 <hal_watchdog_init+0x74>)
   18434:	21e0      	movs	r1, #224	; 0xe0
   18436:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1843a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1843e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18442:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   18444:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   18448:	f042 0201 	orr.w	r2, r2, #1
   1844c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   18450:	2000      	movs	r0, #0
   18452:	bd08      	pop	{r3, pc}
        assert(0);
   18454:	2300      	movs	r3, #0
   18456:	461a      	mov	r2, r3
   18458:	4619      	mov	r1, r3
   1845a:	4618      	mov	r0, r3
   1845c:	f7f0 fd7a 	bl	8f54 <__assert_func>
   18460:	40010000 	.word	0x40010000
   18464:	02aaaaaa 	.word	0x02aaaaaa
   18468:	10624dd3 	.word	0x10624dd3
   1846c:	e000ed00 	.word	0xe000ed00
   18470:	000183e1 	.word	0x000183e1
   18474:	e000e100 	.word	0xe000e100

00018478 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   18478:	4b02      	ldr	r3, [pc, #8]	; (18484 <hal_watchdog_enable+0xc>)
   1847a:	2201      	movs	r2, #1
   1847c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   18480:	601a      	str	r2, [r3, #0]
}
   18482:	4770      	bx	lr
   18484:	40010000 	.word	0x40010000

00018488 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   18488:	4b02      	ldr	r3, [pc, #8]	; (18494 <hal_watchdog_tickle+0xc>)
   1848a:	4a03      	ldr	r2, [pc, #12]	; (18498 <hal_watchdog_tickle+0x10>)
   1848c:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   18490:	4770      	bx	lr
   18492:	bf00      	nop
   18494:	40010000 	.word	0x40010000
   18498:	6e524635 	.word	0x6e524635

0001849c <nrf52_periph_create_timers>:
#endif
#endif

static void
nrf52_periph_create_timers(void)
{
   1849c:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1849e:	2100      	movs	r1, #0
   184a0:	4608      	mov	r0, r1
   184a2:	f7ff fecf 	bl	18244 <hal_timer_init>
    assert(rc == 0);
   184a6:	b920      	cbnz	r0, 184b2 <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   184a8:	4808      	ldr	r0, [pc, #32]	; (184cc <nrf52_periph_create_timers+0x30>)
   184aa:	f7f0 ff89 	bl	93c0 <os_cputime_init>
    assert(rc == 0);
   184ae:	b930      	cbnz	r0, 184be <nrf52_periph_create_timers+0x22>
#endif
}
   184b0:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   184b2:	2300      	movs	r3, #0
   184b4:	461a      	mov	r2, r3
   184b6:	4619      	mov	r1, r3
   184b8:	4618      	mov	r0, r3
   184ba:	f7f0 fd4b 	bl	8f54 <__assert_func>
    assert(rc == 0);
   184be:	2300      	movs	r3, #0
   184c0:	461a      	mov	r2, r3
   184c2:	4619      	mov	r1, r3
   184c4:	4618      	mov	r0, r3
   184c6:	f7f0 fd45 	bl	8f54 <__assert_func>
   184ca:	bf00      	nop
   184cc:	000f4240 	.word	0x000f4240

000184d0 <nrf52_periph_create_uart>:
#endif
}

static void
nrf52_periph_create_uart(void)
{
   184d0:	b500      	push	{lr}
   184d2:	b083      	sub	sp, #12
    int rc;

    (void)rc;

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create(&os_bsp_uart0.ud_dev, "uart0",
   184d4:	4b09      	ldr	r3, [pc, #36]	; (184fc <nrf52_periph_create_uart+0x2c>)
   184d6:	9301      	str	r3, [sp, #4]
   184d8:	4b09      	ldr	r3, [pc, #36]	; (18500 <nrf52_periph_create_uart+0x30>)
   184da:	9300      	str	r3, [sp, #0]
   184dc:	2300      	movs	r3, #0
   184de:	2201      	movs	r2, #1
   184e0:	4908      	ldr	r1, [pc, #32]	; (18504 <nrf52_periph_create_uart+0x34>)
   184e2:	4809      	ldr	r0, [pc, #36]	; (18508 <nrf52_periph_create_uart+0x38>)
   184e4:	f7f0 ffd0 	bl	9488 <os_dev_create>
                       OS_DEV_INIT_PRIMARY, 0, uart_hal_init,
                       (void *)&os_bsp_uart0_cfg);
    assert(rc == 0);
   184e8:	b910      	cbnz	r0, 184f0 <nrf52_periph_create_uart+0x20>
    rc = os_dev_create(&os_bsp_uart1.ud_dev, "uart1",
                       OS_DEV_INIT_PRIMARY, 1, uart_hal_init,
                       (void *)&os_bsp_uart1_cfg);
    assert(rc == 0);
#endif
}
   184ea:	b003      	add	sp, #12
   184ec:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   184f0:	2300      	movs	r3, #0
   184f2:	461a      	mov	r2, r3
   184f4:	4619      	mov	r1, r3
   184f6:	4618      	mov	r0, r3
   184f8:	f7f0 fd2c 	bl	8f54 <__assert_func>
   184fc:	00023570 	.word	0x00023570
   18500:	0001f27d 	.word	0x0001f27d
   18504:	00021cb8 	.word	0x00021cb8
   18508:	200066e4 	.word	0x200066e4

0001850c <nrf52_periph_create_spi>:
#endif
}

static void
nrf52_periph_create_spi(void)
{
   1850c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1850e:	2200      	movs	r2, #0
   18510:	4905      	ldr	r1, [pc, #20]	; (18528 <nrf52_periph_create_spi+0x1c>)
   18512:	4610      	mov	r0, r2
   18514:	f7ff fc8e 	bl	17e34 <hal_spi_init>
    assert(rc == 0);
   18518:	b900      	cbnz	r0, 1851c <nrf52_periph_create_spi+0x10>
#else
    rc = hal_spi_init(3, (void *)&os_bsp_spi3m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif
#endif
}
   1851a:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1851c:	2300      	movs	r3, #0
   1851e:	461a      	mov	r2, r3
   18520:	4619      	mov	r1, r3
   18522:	4618      	mov	r0, r3
   18524:	f7f0 fd16 	bl	8f54 <__assert_func>
   18528:	0002356c 	.word	0x0002356c

0001852c <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1852c:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1852e:	f7ff ffb5 	bl	1849c <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
   18532:	f7ff ffcd 	bl	184d0 <nrf52_periph_create_uart>
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
   18536:	f7ff ffe9 	bl	1850c <nrf52_periph_create_spi>
}
   1853a:	bd08      	pop	{r3, pc}

0001853c <read_from_acc>:
 * @param fp_idx - where to read
 *
 */
static void
read_from_acc(struct cir_dw1000_instance * cir, uint16_t fp_idx)
{
   1853c:	b510      	push	{r4, lr}
   1853e:	4604      	mov	r4, r0
    /* Sanity check, only a fp_index within the accumulator makes sense */
    cir->offset = cir->dev_inst->uwb_dev.config.rx.cirOffset;
   18540:	6880      	ldr	r0, [r0, #8]
   18542:	f8b0 2522 	ldrh.w	r2, [r0, #1314]	; 0x522
   18546:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    cir->length = cir->dev_inst->uwb_dev.config.rx.cirSize;
   1854a:	f8b0 3520 	ldrh.w	r3, [r0, #1312]	; 0x520
   1854e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54

    /* Really a duplicate as uwbcfg sets config.cir_enable to false if length is 0 */
    if (!cir->length) {
   18552:	2b00      	cmp	r3, #0
   18554:	d03d      	beq.n	185d2 <read_from_acc+0x96>
        /* Nothing to do */
        return;
    }

    /* If we can't extract CIR from required offset, start at zero */
    if(fp_idx < cir->offset) {
   18556:	428a      	cmp	r2, r1
   18558:	d901      	bls.n	1855e <read_from_acc+0x22>
        cir->offset = fp_idx;
   1855a:	f8a4 1056 	strh.w	r1, [r4, #86]	; 0x56
    }

    /* If we can't extract full length CIR, truncate */
    if((fp_idx - cir->offset + cir->length) > 1023) {
   1855e:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
   18562:	eba1 0c02 	sub.w	ip, r1, r2
   18566:	4463      	add	r3, ip
   18568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1856c:	db04      	blt.n	18578 <read_from_acc+0x3c>
        cir->length = 1023 - (fp_idx - cir->offset);
   1856e:	1a53      	subs	r3, r2, r1
   18570:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
   18574:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    }

    if(cir->length > MYNEWT_VAL(CIR_MAX_SIZE)) {
   18578:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
   1857c:	2b10      	cmp	r3, #16
   1857e:	d902      	bls.n	18586 <read_from_acc+0x4a>
        cir->length = MYNEWT_VAL(CIR_MAX_SIZE);
   18580:	2310      	movs	r3, #16
   18582:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    }
    dw1000_read_accdata(cir->dev_inst, (uint8_t *)&cir->cir, (fp_idx - cir->offset) * sizeof(cir_dw1000_complex_t),
                        1 + cir->length * sizeof(struct  _cir_dw1000_complex_t));
   18586:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
   1858a:	009b      	lsls	r3, r3, #2
   1858c:	b29b      	uxth	r3, r3
    dw1000_read_accdata(cir->dev_inst, (uint8_t *)&cir->cir, (fp_idx - cir->offset) * sizeof(cir_dw1000_complex_t),
   1858e:	3301      	adds	r3, #1
   18590:	1a8a      	subs	r2, r1, r2
   18592:	0092      	lsls	r2, r2, #2
   18594:	b292      	uxth	r2, r2
   18596:	b29b      	uxth	r3, r3
   18598:	f104 0158 	add.w	r1, r4, #88	; 0x58
   1859c:	f7fb fd39 	bl	14012 <dw1000_read_accdata>

#ifndef __KERNEL__
    cir->angle = atan2f((dpl_float32_t)cir->cir.array[cir->offset].imag,
   185a0:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   185a4:	3316      	adds	r3, #22
   185a6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   185aa:	f9b3 2003 	ldrsh.w	r2, [r3, #3]
   185ae:	ee00 2a10 	vmov	s0, r2
                        (dpl_float32_t)cir->cir.array[cir->offset].real);
   185b2:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
   185b6:	ee00 3a90 	vmov	s1, r3
    cir->angle = atan2f((dpl_float32_t)cir->cir.array[cir->offset].imag,
   185ba:	eef8 0ae0 	vcvt.f32.s32	s1, s1
   185be:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   185c2:	f008 f9c1 	bl	20948 <atan2f>
   185c6:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    dpl_float64_t tmp = DPL_FLOAT64_ATAN(
        DPL_FLOAT64_DIV(DPL_FLOAT64_I32_TO_F64((int32_t)cir->cir.array[cir->offset].imag),
                        DPL_FLOAT64_I32_TO_F64((int32_t)cir->cir.array[cir->offset].real)));
    cir->angle = DPL_FLOAT32_FROM_F64(tmp);
#endif
    cir->cir_inst.status.valid = 1;
   185ca:	7923      	ldrb	r3, [r4, #4]
   185cc:	f043 0304 	orr.w	r3, r3, #4
   185d0:	7123      	strb	r3, [r4, #4]
}
   185d2:	bd10      	pop	{r4, pc}

000185d4 <cir_complete_ev_cb>:
{
   185d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   185d6:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
    return ev->ev.ev_arg;
   185da:	6885      	ldr	r5, [r0, #8]
    cir_dw1000_t * cir  = &inst->cir->cir;
   185dc:	f8d5 45a4 	ldr.w	r4, [r5, #1444]	; 0x5a4
    struct cir_json json = {
   185e0:	f44f 7250 	mov.w	r2, #832	; 0x340
   185e4:	2100      	movs	r1, #0
   185e6:	4668      	mov	r0, sp
   185e8:	f7f3 fd51 	bl	c08e <memset>
   185ec:	4b2a      	ldr	r3, [pc, #168]	; (18698 <cir_complete_ev_cb+0xc4>)
   185ee:	931a      	str	r3, [sp, #104]	; 0x68
        .utime = inst->uwb_dev.rxtimestamp,
   185f0:	f505 659e 	add.w	r5, r5, #1264	; 0x4f0
   185f4:	e955 2302 	ldrd	r2, r3, [r5, #-8]
    struct cir_json json = {
   185f8:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
        .raw_ts = inst->cir->raw_ts,
   185fc:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
    struct cir_json json = {
   18600:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
        .resampler_delay = inst->cir->resampler_delay,
   18604:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   18608:	2500      	movs	r5, #0
    struct cir_json json = {
   1860a:	9320      	str	r3, [sp, #128]	; 0x80
   1860c:	9521      	str	r5, [sp, #132]	; 0x84
        .fp_power = DPL_FLOAT64_FROM_F32(inst->cir->fp_power),
   1860e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   18610:	f007 fba6 	bl	1fd60 <__aeabi_f2d>
    struct cir_json json = {
   18614:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
        .angle  = DPL_FLOAT64_FROM_F32(inst->cir->angle),
   18618:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1861a:	f007 fba1 	bl	1fd60 <__aeabi_f2d>
    struct cir_json json = {
   1861e:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
        .fp_idx = DPL_FLOAT64_FROM_F32(inst->cir->fp_idx),
   18622:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   18624:	f007 fb9c 	bl	1fd60 <__aeabi_f2d>
    struct cir_json json = {
   18628:	e9cd 0126 	strd	r0, r1, [sp, #152]	; 0x98
        .accumulator_count = inst->cir->pacc_cnt,
   1862c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    struct cir_json json = {
   18630:	9328      	str	r3, [sp, #160]	; 0xa0
   18632:	9529      	str	r5, [sp, #164]	; 0xa4
        .cir_offset = inst->cir->offset,
   18634:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    struct cir_json json = {
   18638:	932a      	str	r3, [sp, #168]	; 0xa8
   1863a:	952b      	str	r5, [sp, #172]	; 0xac
        .cir_count = inst->cir->length,
   1863c:	f8b4 7054 	ldrh.w	r7, [r4, #84]	; 0x54
    struct cir_json json = {
   18640:	972c      	str	r7, [sp, #176]	; 0xb0
   18642:	952d      	str	r5, [sp, #180]	; 0xb4
    for (i=0; i < json.cir_count; i++) {
   18644:	462b      	mov	r3, r5
   18646:	e019      	b.n	1867c <cir_complete_ev_cb+0xa8>
        json.real[i] = cir->array[i].real;
   18648:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   1864c:	f9b2 0059 	ldrsh.w	r0, [r2, #89]	; 0x59
   18650:	ea4f 7ce0 	mov.w	ip, r0, asr #31
   18654:	f103 0117 	add.w	r1, r3, #23
   18658:	eb0d 06c1 	add.w	r6, sp, r1, lsl #3
   1865c:	f84d 0031 	str.w	r0, [sp, r1, lsl #3]
   18660:	f8c6 c004 	str.w	ip, [r6, #4]
        json.imag[i] = cir->array[i].imag;
   18664:	f9b2 105b 	ldrsh.w	r1, [r2, #91]	; 0x5b
   18668:	17ce      	asrs	r6, r1, #31
   1866a:	f103 0227 	add.w	r2, r3, #39	; 0x27
   1866e:	eb0d 00c2 	add.w	r0, sp, r2, lsl #3
   18672:	f84d 1032 	str.w	r1, [sp, r2, lsl #3]
   18676:	6046      	str	r6, [r0, #4]
    for (i=0; i < json.cir_count; i++) {
   18678:	3301      	adds	r3, #1
   1867a:	b29b      	uxth	r3, r3
   1867c:	42bb      	cmp	r3, r7
   1867e:	f04f 0200 	mov.w	r2, #0
   18682:	41aa      	sbcs	r2, r5
   18684:	d3e0      	bcc.n	18648 <cir_complete_ev_cb+0x74>
    cir_json_write(&json);
   18686:	4668      	mov	r0, sp
   18688:	f000 fa5a 	bl	18b40 <cir_json_write>
    printf("%s\n", json.iobuf);
   1868c:	a86e      	add	r0, sp, #440	; 0x1b8
   1868e:	f7f3 fbe5 	bl	be5c <puts>
}
   18692:	f50d 7d51 	add.w	sp, sp, #836	; 0x344
   18696:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18698:	00023574 	.word	0x00023574

0001869c <cir_dw1000_remap_fp_index>:
{
   1869c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   186a0:	ed2d 8b02 	vpush	{d8}
   186a4:	4604      	mov	r4, r0
   186a6:	460d      	mov	r5, r1
    tmp = DPL_FLOAT64_I64_TO_F64((int64_t) cir0->raw_ts + ((int64_t)cir0->resampler_delay)*8 -
   186a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
   186aa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   186ac:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   186b0:	00db      	lsls	r3, r3, #3
   186b2:	181b      	adds	r3, r3, r0
   186b4:	f141 0100 	adc.w	r1, r1, #0
   186b8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   186ba:	6bee      	ldr	r6, [r5, #60]	; 0x3c
   186bc:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
   186c0:	00d2      	lsls	r2, r2, #3
   186c2:	1812      	adds	r2, r2, r0
   186c4:	f146 0600 	adc.w	r6, r6, #0
   186c8:	1a98      	subs	r0, r3, r2
   186ca:	eb61 0106 	sbc.w	r1, r1, r6
   186ce:	f007 fb71 	bl	1fdb4 <__aeabi_l2d>
    raw_ts_diff = DPL_FLOAT64_DIV(tmp, tmp64);
   186d2:	2200      	movs	r2, #0
   186d4:	4b1d      	ldr	r3, [pc, #116]	; (1874c <cir_dw1000_remap_fp_index+0xb0>)
   186d6:	f007 fb9b 	bl	1fe10 <__aeabi_dmul>
   186da:	4606      	mov	r6, r0
   186dc:	460f      	mov	r7, r1
    if (cir0->dev_inst && cir1->dev_inst) {
   186de:	f8d4 8008 	ldr.w	r8, [r4, #8]
   186e2:	f1b8 0f00 	cmp.w	r8, #0
   186e6:	d023      	beq.n	18730 <cir_dw1000_remap_fp_index+0x94>
   186e8:	68ad      	ldr	r5, [r5, #8]
   186ea:	b30d      	cbz	r5, 18730 <cir_dw1000_remap_fp_index+0x94>
        raw_ts_diff = DPL_FLOAT64_ADD(raw_ts_diff,
   186ec:	f8d8 04d4 	ldr.w	r0, [r8, #1236]	; 0x4d4
   186f0:	f8d5 34d4 	ldr.w	r3, [r5, #1236]	; 0x4d4
   186f4:	1ac0      	subs	r0, r0, r3
   186f6:	f007 fb21 	bl	1fd3c <__aeabi_i2d>
   186fa:	2200      	movs	r2, #0
   186fc:	4b13      	ldr	r3, [pc, #76]	; (1874c <cir_dw1000_remap_fp_index+0xb0>)
   186fe:	f007 fb87 	bl	1fe10 <__aeabi_dmul>
   18702:	4632      	mov	r2, r6
   18704:	463b      	mov	r3, r7
   18706:	f007 f9cd 	bl	1faa4 <__adddf3>
   1870a:	4606      	mov	r6, r0
   1870c:	460f      	mov	r7, r1
        raw_ts_diff = DPL_FLOAT64_ADD(raw_ts_diff,
   1870e:	f8b8 04cc 	ldrh.w	r0, [r8, #1228]	; 0x4cc
   18712:	f8b5 34cc 	ldrh.w	r3, [r5, #1228]	; 0x4cc
   18716:	1ac0      	subs	r0, r0, r3
   18718:	f007 fb10 	bl	1fd3c <__aeabi_i2d>
   1871c:	2200      	movs	r2, #0
   1871e:	4b0b      	ldr	r3, [pc, #44]	; (1874c <cir_dw1000_remap_fp_index+0xb0>)
   18720:	f007 fb76 	bl	1fe10 <__aeabi_dmul>
   18724:	4632      	mov	r2, r6
   18726:	463b      	mov	r3, r7
   18728:	f007 f9bc 	bl	1faa4 <__adddf3>
   1872c:	4606      	mov	r6, r0
   1872e:	460f      	mov	r7, r1
    fp_idx_0_given_1 = DPL_FLOAT32_ADD(cir0->fp_idx, DPL_FLOAT32_FROM_F64(raw_ts_diff));
   18730:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
   18734:	4630      	mov	r0, r6
   18736:	4639      	mov	r1, r7
   18738:	f007 fe62 	bl	20400 <__aeabi_d2f>
   1873c:	ee00 0a10 	vmov	s0, r0
}
   18740:	ee38 0a00 	vadd.f32	s0, s16, s0
   18744:	ecbd 8b02 	vpop	{d8}
   18748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1874c:	3f900000 	.word	0x3f900000

00018750 <cir_dw1000_reread_from_cir>:

bool
cir_dw1000_reread_from_cir(dw1000_dev_instance_t * inst, struct cir_dw1000_instance *master_cir)
{
   18750:	4603      	mov	r3, r0
    /* CIR-data is lost already if the receiver has been turned back on */
    if (inst->uwb_dev.status.rx_restarted) {
   18752:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
   18756:	f012 0f08 	tst.w	r2, #8
   1875a:	d123      	bne.n	187a4 <cir_dw1000_reread_from_cir+0x54>
{
   1875c:	b510      	push	{r4, lr}
   1875e:	4608      	mov	r0, r1
        return false;
    }
    struct cir_dw1000_instance * cir = inst->cir;
   18760:	f8d3 45a4 	ldr.w	r4, [r3, #1444]	; 0x5a4

    /* Correct aligment by remapping master_cir's fp_idx into our cir */
    dpl_float32_t fp_idx_override  = cir_dw1000_remap_fp_index(master_cir, cir);
   18764:	4621      	mov	r1, r4
   18766:	f7ff ff99 	bl	1869c <cir_dw1000_remap_fp_index>

    /* Sanity check, only a fp_index within the accumulator makes sense */
    if(DPL_FLOAT32_INT(fp_idx_override) < 0 ||
   1876a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   1876e:	ee17 3a90 	vmov	r3, s15
   18772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   18776:	d305      	bcc.n	18784 <cir_dw1000_reread_from_cir+0x34>
       DPL_FLOAT32_INT(fp_idx_override) > 1023) {
        /* Can't extract CIR from required offset, abort */
        cir->cir_inst.status.valid = 0;
   18778:	7923      	ldrb	r3, [r4, #4]
   1877a:	f36f 0382 	bfc	r3, #2, #1
   1877e:	7123      	strb	r3, [r4, #4]
        return false;
   18780:	2000      	movs	r0, #0
    cir->cir_inst.status.lde_override = 1;
    uint16_t fp_idx = DPL_FLOAT32_INT(DPL_FLOAT32_CEIL(fp_idx_override));

    read_from_acc(cir, fp_idx);
    return true;
}
   18782:	bd10      	pop	{r4, pc}
    cir->cir_inst.status.lde_override = 1;
   18784:	7923      	ldrb	r3, [r4, #4]
   18786:	f043 0308 	orr.w	r3, r3, #8
   1878a:	7123      	strb	r3, [r4, #4]
    uint16_t fp_idx = DPL_FLOAT32_INT(DPL_FLOAT32_CEIL(fp_idx_override));
   1878c:	f008 f85a 	bl	20844 <ceilf>
   18790:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    read_from_acc(cir, fp_idx);
   18794:	ee10 3a10 	vmov	r3, s0
   18798:	b299      	uxth	r1, r3
   1879a:	4620      	mov	r0, r4
   1879c:	f7ff fece 	bl	1853c <read_from_acc>
    return true;
   187a0:	2001      	movs	r0, #1
   187a2:	e7ee      	b.n	18782 <cir_dw1000_reread_from_cir+0x32>
        return false;
   187a4:	2000      	movs	r0, #0
}
   187a6:	4770      	bx	lr

000187a8 <cir_complete_cb>:
 * returns none
 */
#if MYNEWT_VAL(CIR_ENABLED)
static bool
cir_complete_cb(struct uwb_dev * udev, struct uwb_mac_interface * cbs)
{
   187a8:	b570      	push	{r4, r5, r6, lr}
   187aa:	4605      	mov	r5, r0
    uint16_t fp_idx, fp_idx_reg;
    dpl_float32_t _rcphase;
    struct cir_dw1000_instance * cir = (struct cir_dw1000_instance *)cbs->inst_ptr;
   187ac:	684c      	ldr	r4, [r1, #4]
    struct _dw1000_dev_instance_t *inst = (struct _dw1000_dev_instance_t *)udev;
    struct _dw1000_dev_instance_t *master_inst;

    cir->cir_inst.status.valid = 0;
   187ae:	7923      	ldrb	r3, [r4, #4]
   187b0:	f36f 0382 	bfc	r3, #2, #1
   187b4:	7123      	strb	r3, [r4, #4]
    CIR_STATS_INC(complete);
   187b6:	6a23      	ldr	r3, [r4, #32]
   187b8:	3301      	adds	r3, #1
   187ba:	6223      	str	r3, [r4, #32]

    cir->raw_ts = dw1000_read_rawrxtime(cir->dev_inst);
   187bc:	68a0      	ldr	r0, [r4, #8]
   187be:	f7fc ff0a 	bl	155d6 <dw1000_read_rawrxtime>
   187c2:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    cir->resampler_delay = dw1000_read_reg(inst, RX_TTCKO_ID, 3, sizeof(uint8_t));
   187c6:	2301      	movs	r3, #1
   187c8:	2203      	movs	r2, #3
   187ca:	2114      	movs	r1, #20
   187cc:	4628      	mov	r0, r5
   187ce:	f7f9 fec5 	bl	1255c <dw1000_read_reg>
   187d2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    cir->fp_power = dw1000_get_fppl(inst);
   187d6:	4628      	mov	r0, r5
   187d8:	f7fc fe76 	bl	154c8 <dw1000_get_fppl>
   187dc:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c

    fp_idx_reg = inst->rxdiag.fp_idx;
   187e0:	f8b5 65ae 	ldrh.w	r6, [r5, #1454]	; 0x5ae
    cir->pacc_cnt = inst->rxdiag.pacc_cnt;
   187e4:	f8b5 35ba 	ldrh.w	r3, [r5, #1466]	; 0x5ba
   187e8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    if(!inst->uwb_dev.config.rxdiag_enable) {
   187ec:	f895 3530 	ldrb.w	r3, [r5, #1328]	; 0x530
   187f0:	f013 0f40 	tst.w	r3, #64	; 0x40
   187f4:	d056      	beq.n	188a4 <cir_complete_cb+0xfc>
        fp_idx_reg = dw1000_read_reg(cir->dev_inst, RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET, sizeof(uint16_t));
        cir->pacc_cnt = (dw1000_read_reg(inst, RX_FINFO_ID, 0, sizeof(uint32_t)) & RX_FINFO_RXPACC_MASK) >> RX_FINFO_RXPACC_SHIFT;
    }
    cir->fp_idx = DPL_FLOAT32_DIV(DPL_FLOAT32_I32_TO_F32(fp_idx_reg), DPL_FLOAT32_INIT(64.0f));
   187f6:	ee07 6a90 	vmov	s15, r6
   187fa:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   187fe:	eddf 7a3b 	vldr	s15, [pc, #236]	; 188ec <cir_complete_cb+0x144>
   18802:	ee20 0a27 	vmul.f32	s0, s0, s15
   18806:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    fp_idx = DPL_FLOAT32_INT(DPL_FLOAT32_CEIL(cir->fp_idx));
   1880a:	f008 f81b 	bl	20844 <ceilf>
   1880e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   18812:	ee10 3a10 	vmov	r3, s0
   18816:	b29e      	uxth	r6, r3

    master_inst = hal_dw1000_inst(0);
   18818:	2000      	movs	r0, #0
   1881a:	f7fa fb55 	bl	12ec8 <hal_dw1000_inst>
    if (inst->uwb_dev.config.cir_pdoa_slave && master_inst->cir) {
   1881e:	f995 3531 	ldrsb.w	r3, [r5, #1329]	; 0x531
   18822:	2b00      	cmp	r3, #0
   18824:	da1d      	bge.n	18862 <cir_complete_cb+0xba>
   18826:	f8d0 05a4 	ldr.w	r0, [r0, #1444]	; 0x5a4
   1882a:	b1d0      	cbz	r0, 18862 <cir_complete_cb+0xba>
         * the earliest first path. This assumes all receivers are within 30mm of
         * each other (or rather their antennas).
         * */

        struct cir_dw1000_instance * master_cir = master_inst->cir;
        dpl_float32_t fp_idx_from_master  = cir_dw1000_remap_fp_index(master_cir, cir);
   1882c:	4621      	mov	r1, r4
   1882e:	f7ff ff35 	bl	1869c <cir_dw1000_remap_fp_index>

        /* Check if our first path comes before the master's first path.
         * If so, reread the master's CIR data if possible */
        if (DPL_FLOAT32_INT(fp_idx_from_master) - DPL_FLOAT32_INT(cir->fp_idx) > MYNEWT_VAL(CIR_PDOA_SLAVE_MAX_LEAD)) {
   18832:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   18836:	ee17 3a90 	vmov	r3, s15
   1883a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
   1883e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   18842:	ee17 2a90 	vmov	r2, s15
   18846:	1a9b      	subs	r3, r3, r2
   18848:	2b00      	cmp	r3, #0
   1884a:	dc3c      	bgt.n	188c6 <cir_complete_cb+0x11e>
            if (!b) {
                return true;
            }
        } else {
            /* Override our local LDE with master's LDE */
            cir->cir_inst.status.lde_override = 1;
   1884c:	7923      	ldrb	r3, [r4, #4]
   1884e:	f043 0308 	orr.w	r3, r3, #8
   18852:	7123      	strb	r3, [r4, #4]
            fp_idx = DPL_FLOAT32_INT(DPL_FLOAT32_CEIL(fp_idx_from_master));
   18854:	f007 fff6 	bl	20844 <ceilf>
   18858:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   1885c:	ee10 3a10 	vmov	r3, s0
   18860:	b29e      	uxth	r6, r3
        }
    }

    read_from_acc(cir, fp_idx);
   18862:	4631      	mov	r1, r6
   18864:	4620      	mov	r0, r4
   18866:	f7ff fe69 	bl	1853c <read_from_acc>

    _rcphase = DPL_FLOAT32_I32_TO_F32((int32_t)dw1000_read_reg(cir->dev_inst, RX_TTCKO_ID, 4, sizeof(uint8_t)) & 0x7F);
   1886a:	2301      	movs	r3, #1
   1886c:	2204      	movs	r2, #4
   1886e:	2114      	movs	r1, #20
   18870:	68a0      	ldr	r0, [r4, #8]
   18872:	f7f9 fe73 	bl	1255c <dw1000_read_reg>
   18876:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1887a:	ee07 3a90 	vmov	s15, r3
   1887e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    cir->rcphase = DPL_FLOAT32_MUL(_rcphase, DPL_FLOAT32_INIT(M_PI/64.0f));
   18882:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 188f0 <cir_complete_cb+0x148>
   18886:	ee67 7a87 	vmul.f32	s15, s15, s14
   1888a:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30

    cir->cir_inst.status.valid = 1;
   1888e:	7923      	ldrb	r3, [r4, #4]
   18890:	f043 0304 	orr.w	r3, r3, #4
   18894:	7123      	strb	r3, [r4, #4]

#if MYNEWT_VAL(CIR_VERBOSE)
    if (inst->rxdiag.rxd.enabled & UWB_RXDIAG_IPATOV_CIR) {
   18896:	f8b5 35aa 	ldrh.w	r3, [r5, #1450]	; 0x5aa
   1889a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1889e:	d11c      	bne.n	188da <cir_complete_cb+0x132>
        dpl_eventq_put(dpl_eventq_dflt_get(), &cir->display_event);
    }
#endif
    return false;
   188a0:	2000      	movs	r0, #0
}
   188a2:	bd70      	pop	{r4, r5, r6, pc}
        fp_idx_reg = dw1000_read_reg(cir->dev_inst, RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET, sizeof(uint16_t));
   188a4:	2302      	movs	r3, #2
   188a6:	2205      	movs	r2, #5
   188a8:	2115      	movs	r1, #21
   188aa:	68a0      	ldr	r0, [r4, #8]
   188ac:	f7f9 fe56 	bl	1255c <dw1000_read_reg>
   188b0:	b286      	uxth	r6, r0
        cir->pacc_cnt = (dw1000_read_reg(inst, RX_FINFO_ID, 0, sizeof(uint32_t)) & RX_FINFO_RXPACC_MASK) >> RX_FINFO_RXPACC_SHIFT;
   188b2:	2304      	movs	r3, #4
   188b4:	2200      	movs	r2, #0
   188b6:	2110      	movs	r1, #16
   188b8:	4628      	mov	r0, r5
   188ba:	f7f9 fe4f 	bl	1255c <dw1000_read_reg>
   188be:	0d00      	lsrs	r0, r0, #20
   188c0:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
   188c4:	e797      	b.n	187f6 <cir_complete_cb+0x4e>
            bool b = cir_dw1000_reread_from_cir(hal_dw1000_inst(0), cir);
   188c6:	2000      	movs	r0, #0
   188c8:	f7fa fafe 	bl	12ec8 <hal_dw1000_inst>
   188cc:	4621      	mov	r1, r4
   188ce:	f7ff ff3f 	bl	18750 <cir_dw1000_reread_from_cir>
            if (!b) {
   188d2:	2800      	cmp	r0, #0
   188d4:	d1c5      	bne.n	18862 <cir_complete_cb+0xba>
                return true;
   188d6:	2001      	movs	r0, #1
   188d8:	e7e3      	b.n	188a2 <cir_complete_cb+0xfa>
    return (struct dpl_eventq *) os_eventq_dflt_get();
   188da:	f7f0 ff0f 	bl	96fc <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   188de:	f104 0144 	add.w	r1, r4, #68	; 0x44
   188e2:	f7f0 fe5d 	bl	95a0 <os_eventq_put>
    return false;
   188e6:	2000      	movs	r0, #0
}
   188e8:	e7db      	b.n	188a2 <cir_complete_cb+0xfa>
   188ea:	bf00      	nop
   188ec:	3c800000 	.word	0x3c800000
   188f0:	3d490fdb 	.word	0x3d490fdb

000188f4 <cir_dw1000_enable>:
 */
void
cir_dw1000_enable(struct cir_dw1000_instance * cir, bool mode)
{
#if MYNEWT_VAL(CIR_ENABLED)
    dw1000_dev_instance_t * inst = cir->dev_inst;
   188f4:	6883      	ldr	r3, [r0, #8]
    cir->cir_inst.status.valid = 0;
   188f6:	7902      	ldrb	r2, [r0, #4]
   188f8:	f36f 0282 	bfc	r2, #2, #1
   188fc:	7102      	strb	r2, [r0, #4]
    inst->control.cir_enable = mode;
   188fe:	f893 25bd 	ldrb.w	r2, [r3, #1469]	; 0x5bd
   18902:	f361 0241 	bfi	r2, r1, #1, #1
   18906:	f883 25bd 	strb.w	r2, [r3, #1469]	; 0x5bd
#endif
}
   1890a:	4770      	bx	lr

0001890c <map_cir_dw1000_enable>:
                               (struct cir_dw1000_instance*)slave);
}

inline static void
map_cir_dw1000_enable(struct cir_instance * cir, bool mode)
{
   1890c:	b508      	push	{r3, lr}
    return cir_dw1000_enable((struct cir_dw1000_instance*)cir, mode);
   1890e:	f7ff fff1 	bl	188f4 <cir_dw1000_enable>
}
   18912:	bd08      	pop	{r3, pc}
   18914:	0000      	movs	r0, r0
	...

00018918 <cir_dw1000_get_pdoa>:
{
   18918:	b508      	push	{r3, lr}
    return fmodf((slave->angle - slave->rcphase) - (master->angle - master->rcphase) + 3*M_PI, 2*M_PI) - M_PI;
   1891a:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
   1891e:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
   18922:	ee37 7a67 	vsub.f32	s14, s14, s15
   18926:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
   1892a:	edd0 6a0c 	vldr	s13, [r0, #48]	; 0x30
   1892e:	ee77 7ae6 	vsub.f32	s15, s15, s13
   18932:	ee77 7a67 	vsub.f32	s15, s14, s15
   18936:	ee17 0a90 	vmov	r0, s15
   1893a:	f007 fa11 	bl	1fd60 <__aeabi_f2d>
   1893e:	a311      	add	r3, pc, #68	; (adr r3, 18984 <cir_dw1000_get_pdoa+0x6c>)
   18940:	e9d3 2300 	ldrd	r2, r3, [r3]
   18944:	f007 f8ae 	bl	1faa4 <__adddf3>
   18948:	f007 fd5a 	bl	20400 <__aeabi_d2f>
   1894c:	eddf 0a0c 	vldr	s1, [pc, #48]	; 18980 <cir_dw1000_get_pdoa+0x68>
   18950:	ee00 0a10 	vmov	s0, r0
   18954:	f007 fffa 	bl	2094c <fmodf>
   18958:	ee10 0a10 	vmov	r0, s0
   1895c:	f007 fa00 	bl	1fd60 <__aeabi_f2d>
   18960:	a305      	add	r3, pc, #20	; (adr r3, 18978 <cir_dw1000_get_pdoa+0x60>)
   18962:	e9d3 2300 	ldrd	r2, r3, [r3]
   18966:	f007 f89b 	bl	1faa0 <__aeabi_dsub>
   1896a:	f007 fd49 	bl	20400 <__aeabi_d2f>
}
   1896e:	ee00 0a10 	vmov	s0, r0
   18972:	bd08      	pop	{r3, pc}
   18974:	f3af 8000 	nop.w
   18978:	54442d18 	.word	0x54442d18
   1897c:	400921fb 	.word	0x400921fb
   18980:	40c90fdb 	.word	0x40c90fdb
   18984:	7f3321d2 	.word	0x7f3321d2
   18988:	4022d97c 	.word	0x4022d97c

0001898c <map_cir_dw1000_get_pdoa>:
{
   1898c:	b508      	push	{r3, lr}
    return cir_dw1000_get_pdoa((struct cir_dw1000_instance*)master,
   1898e:	f7ff ffc3 	bl	18918 <cir_dw1000_get_pdoa>
}
   18992:	bd08      	pop	{r3, pc}

00018994 <cir_dw1000_init>:
{
   18994:	b570      	push	{r4, r5, r6, lr}
   18996:	b082      	sub	sp, #8
   18998:	4605      	mov	r5, r0
    if (cir == NULL) {
   1899a:	460c      	mov	r4, r1
   1899c:	b1e1      	cbz	r1, 189d8 <cir_dw1000_init+0x44>
    cir->dev_inst = inst;
   1899e:	60a5      	str	r5, [r4, #8]
    memset(ev, 0, sizeof(*ev));
   189a0:	2300      	movs	r3, #0
   189a2:	6463      	str	r3, [r4, #68]	; 0x44
   189a4:	64a3      	str	r3, [r4, #72]	; 0x48
   189a6:	64e3      	str	r3, [r4, #76]	; 0x4c
   189a8:	6523      	str	r3, [r4, #80]	; 0x50
    ev->ev.ev_cb = (os_event_fn *)fn;
   189aa:	4b17      	ldr	r3, [pc, #92]	; (18a08 <cir_dw1000_init+0x74>)
   189ac:	64a3      	str	r3, [r4, #72]	; 0x48
    ev->ev.ev_arg = arg;
   189ae:	64e5      	str	r5, [r4, #76]	; 0x4c
    int rc = stats_init(
   189b0:	f104 050c 	add.w	r5, r4, #12
   189b4:	2201      	movs	r2, #1
   189b6:	9200      	str	r2, [sp, #0]
   189b8:	4b14      	ldr	r3, [pc, #80]	; (18a0c <cir_dw1000_init+0x78>)
   189ba:	2104      	movs	r1, #4
   189bc:	4628      	mov	r0, r5
   189be:	f7f6 feb3 	bl	f728 <stats_init>
   189c2:	4606      	mov	r6, r0
    rc |= stats_register("cir", STATS_HDR(cir->stat));
   189c4:	4629      	mov	r1, r5
   189c6:	4812      	ldr	r0, [pc, #72]	; (18a10 <cir_dw1000_init+0x7c>)
   189c8:	f7f6 ff38 	bl	f83c <stats_register>
    assert(rc == 0);
   189cc:	ea56 0300 	orrs.w	r3, r6, r0
   189d0:	d113      	bne.n	189fa <cir_dw1000_init+0x66>
}
   189d2:	4620      	mov	r0, r4
   189d4:	b002      	add	sp, #8
   189d6:	bd70      	pop	{r4, r5, r6, pc}
        cir = (struct cir_dw1000_instance *) calloc(1, sizeof(struct cir_dw1000_instance));
   189d8:	21a0      	movs	r1, #160	; 0xa0
   189da:	2001      	movs	r0, #1
   189dc:	f7f3 fa16 	bl	be0c <calloc>
        assert(cir);
   189e0:	4604      	mov	r4, r0
   189e2:	b120      	cbz	r0, 189ee <cir_dw1000_init+0x5a>
        cir->cir_inst.status.selfmalloc = 1;
   189e4:	7903      	ldrb	r3, [r0, #4]
   189e6:	f043 0301 	orr.w	r3, r3, #1
   189ea:	7103      	strb	r3, [r0, #4]
   189ec:	e7d7      	b.n	1899e <cir_dw1000_init+0xa>
        assert(cir);
   189ee:	2300      	movs	r3, #0
   189f0:	461a      	mov	r2, r3
   189f2:	4619      	mov	r1, r3
   189f4:	4618      	mov	r0, r3
   189f6:	f7f0 faad 	bl	8f54 <__assert_func>
    assert(rc == 0);
   189fa:	2300      	movs	r3, #0
   189fc:	461a      	mov	r2, r3
   189fe:	4619      	mov	r1, r3
   18a00:	4618      	mov	r0, r3
   18a02:	f7f0 faa7 	bl	8f54 <__assert_func>
   18a06:	bf00      	nop
   18a08:	000185d5 	.word	0x000185d5
   18a0c:	000235c4 	.word	0x000235c4
   18a10:	0002357c 	.word	0x0002357c

00018a14 <cir_dw1000_free>:
{
   18a14:	b508      	push	{r3, lr}
    assert(cir);
   18a16:	b140      	cbz	r0, 18a2a <cir_dw1000_free+0x16>
    if (cir->cir_inst.status.selfmalloc) {
   18a18:	7902      	ldrb	r2, [r0, #4]
   18a1a:	f012 0f01 	tst.w	r2, #1
   18a1e:	d10a      	bne.n	18a36 <cir_dw1000_free+0x22>
        cir->cir_inst.status.initialized = 0;
   18a20:	7902      	ldrb	r2, [r0, #4]
   18a22:	f36f 0241 	bfc	r2, #1, #1
   18a26:	7102      	strb	r2, [r0, #4]
}
   18a28:	bd08      	pop	{r3, pc}
    assert(cir);
   18a2a:	2300      	movs	r3, #0
   18a2c:	461a      	mov	r2, r3
   18a2e:	4619      	mov	r1, r3
   18a30:	4618      	mov	r0, r3
   18a32:	f7f0 fa8f 	bl	8f54 <__assert_func>
        free(cir);
   18a36:	f7f3 fae3 	bl	c000 <free>
   18a3a:	e7f5      	b.n	18a28 <cir_dw1000_free+0x14>

00018a3c <cir_dw1000_pkg_init>:
/**
 * API to initialise the cir package.
 * @return void
 */
void cir_dw1000_pkg_init(void)
{
   18a3c:	b538      	push	{r3, r4, r5, lr}
#if MYNEWT_VAL(CIR_ENABLED)
    int i;
    struct uwb_dev *udev;
    dw1000_dev_instance_t * inst;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"cir_dw1000_pkg_init\"}\n",
   18a3e:	f7f3 ff9f 	bl	c980 <dpl_cputime_get32>
   18a42:	4601      	mov	r1, r0
   18a44:	4813      	ldr	r0, [pc, #76]	; (18a94 <cir_dw1000_pkg_init+0x58>)
   18a46:	f7f3 ff35 	bl	c8b4 <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   18a4a:	2400      	movs	r4, #0
   18a4c:	e000      	b.n	18a50 <cir_dw1000_pkg_init+0x14>
   18a4e:	3401      	adds	r4, #1
   18a50:	2c02      	cmp	r4, #2
   18a52:	dc1d      	bgt.n	18a90 <cir_dw1000_pkg_init+0x54>
        udev = uwb_dev_idx_lookup(i);
   18a54:	4620      	mov	r0, r4
   18a56:	f7ef ffd3 	bl	8a00 <uwb_dev_idx_lookup>
        if (!udev) {
   18a5a:	4605      	mov	r5, r0
   18a5c:	2800      	cmp	r0, #0
   18a5e:	d0f6      	beq.n	18a4e <cir_dw1000_pkg_init+0x12>
            continue;
        }
        if (udev->device_id != DWT_DEVICE_ID) {
   18a60:	f8d0 24c8 	ldr.w	r2, [r0, #1224]	; 0x4c8
   18a64:	4b0c      	ldr	r3, [pc, #48]	; (18a98 <cir_dw1000_pkg_init+0x5c>)
   18a66:	429a      	cmp	r2, r3
   18a68:	d1f1      	bne.n	18a4e <cir_dw1000_pkg_init+0x12>
            continue;
        }
        inst = (dw1000_dev_instance_t *)udev;
        cbs[i].inst_ptr = inst->cir = cir_dw1000_init(inst, NULL);
   18a6a:	2100      	movs	r1, #0
   18a6c:	f7ff ff92 	bl	18994 <cir_dw1000_init>
   18a70:	f8c5 05a4 	str.w	r0, [r5, #1444]	; 0x5a4
   18a74:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
   18a78:	4b08      	ldr	r3, [pc, #32]	; (18a9c <cir_dw1000_pkg_init+0x60>)
   18a7a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   18a7e:	6048      	str	r0, [r1, #4]
        inst->uwb_dev.cir = (struct cir_instance*)inst->cir;
   18a80:	f8c5 054c 	str.w	r0, [r5, #1356]	; 0x54c
        inst->cir->cir_inst.cir_funcs = &cir_dw1000_funcs;
   18a84:	4b06      	ldr	r3, [pc, #24]	; (18aa0 <cir_dw1000_pkg_init+0x64>)
   18a86:	6003      	str	r3, [r0, #0]
        uwb_mac_append_interface(udev, &cbs[i]);
   18a88:	4628      	mov	r0, r5
   18a8a:	f7ef ffe9 	bl	8a60 <uwb_mac_append_interface>
   18a8e:	e7de      	b.n	18a4e <cir_dw1000_pkg_init+0x12>
    }
#endif // MYNEWT_VAL(CIR_ENABLED)
}
   18a90:	bd38      	pop	{r3, r4, r5, pc}
   18a92:	bf00      	nop
   18a94:	00023580 	.word	0x00023580
   18a98:	deca0130 	.word	0xdeca0130
   18a9c:	20002950 	.word	0x20002950
   18aa0:	000235bc 	.word	0x000235bc

00018aa4 <cir_dw1000_pkg_down>:
 * @brief Uninitialise cir
 *
 * @return void
 */
int cir_dw1000_pkg_down(int reason)
{
   18aa4:	b570      	push	{r4, r5, r6, lr}
    int i;
    struct uwb_dev *udev;
    struct cir_dw1000_instance *cir;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   18aa6:	2400      	movs	r4, #0
   18aa8:	e000      	b.n	18aac <cir_dw1000_pkg_down+0x8>
   18aaa:	3401      	adds	r4, #1
   18aac:	2c02      	cmp	r4, #2
   18aae:	dc1d      	bgt.n	18aec <cir_dw1000_pkg_down+0x48>
        udev = uwb_dev_idx_lookup(i);
   18ab0:	4620      	mov	r0, r4
   18ab2:	f7ef ffa5 	bl	8a00 <uwb_dev_idx_lookup>
        if (!udev) {
   18ab6:	4605      	mov	r5, r0
   18ab8:	2800      	cmp	r0, #0
   18aba:	d0f6      	beq.n	18aaa <cir_dw1000_pkg_down+0x6>
            continue;
        }
        if (udev->device_id != DWT_DEVICE_ID) {
   18abc:	f8d0 24c8 	ldr.w	r2, [r0, #1224]	; 0x4c8
   18ac0:	4b0b      	ldr	r3, [pc, #44]	; (18af0 <cir_dw1000_pkg_down+0x4c>)
   18ac2:	429a      	cmp	r2, r3
   18ac4:	d1f1      	bne.n	18aaa <cir_dw1000_pkg_down+0x6>
            continue;
        }
        cir = (struct cir_dw1000_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CIR);
   18ac6:	2115      	movs	r1, #21
   18ac8:	f7f0 f81f 	bl	8b0a <uwb_mac_find_cb_inst_ptr>
        if (!cir) {
   18acc:	4606      	mov	r6, r0
   18ace:	2800      	cmp	r0, #0
   18ad0:	d0eb      	beq.n	18aaa <cir_dw1000_pkg_down+0x6>
            continue;
        }
        uwb_mac_remove_interface(udev, cbs[i].id);
   18ad2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   18ad6:	4a07      	ldr	r2, [pc, #28]	; (18af4 <cir_dw1000_pkg_down+0x50>)
   18ad8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   18adc:	8859      	ldrh	r1, [r3, #2]
   18ade:	4628      	mov	r0, r5
   18ae0:	f7ef ffe3 	bl	8aaa <uwb_mac_remove_interface>
        cir_dw1000_free(cir);
   18ae4:	4630      	mov	r0, r6
   18ae6:	f7ff ff95 	bl	18a14 <cir_dw1000_free>
   18aea:	e7de      	b.n	18aaa <cir_dw1000_pkg_down+0x6>
    }

    return 0;
}
   18aec:	2000      	movs	r0, #0
   18aee:	bd70      	pop	{r4, r5, r6, pc}
   18af0:	deca0130 	.word	0xdeca0130
   18af4:	20002950 	.word	0x20002950

00018af8 <cir_pkg_init>:
{
#ifdef __KERNEL__
    cir_chrdev_pkg_init();
    pr_info("uwbcir: cat /dev/uwbcir\n");
#endif  /* __KERNEL__ */
}
   18af8:	4770      	bx	lr

00018afa <cir_pkg_down>:
{
#if __KERNEL__
    cir_chrdev_pkg_down(reason);
#endif
    return 0;
}
   18afa:	2000      	movs	r0, #0
   18afc:	4770      	bx	lr

00018afe <cir_write_line>:
    }
}

int
cir_write_line(void *buf, char* data, int len)
{
   18afe:	b510      	push	{r4, lr}
   18b00:	4686      	mov	lr, r0
   18b02:	4610      	mov	r0, r2
    uint16_t i;
    struct cir_json * json = buf;
    for (i=0; i < len; i++) {
   18b04:	2300      	movs	r3, #0
   18b06:	e001      	b.n	18b0c <cir_write_line+0xe>
   18b08:	3301      	adds	r3, #1
   18b0a:	b29b      	uxth	r3, r3
   18b0c:	4283      	cmp	r3, r0
   18b0e:	da0c      	bge.n	18b2a <cir_write_line+0x2c>
        json->iobuf[json->idx++] = data[i];
   18b10:	f8be c338 	ldrh.w	ip, [lr, #824]	; 0x338
   18b14:	f10c 0401 	add.w	r4, ip, #1
   18b18:	f8ae 4338 	strh.w	r4, [lr, #824]	; 0x338
   18b1c:	5ccc      	ldrb	r4, [r1, r3]
   18b1e:	44f4      	add	ip, lr
   18b20:	f88c 41b8 	strb.w	r4, [ip, #440]	; 0x1b8
        if (data[i]=='\0'){
   18b24:	5ccc      	ldrb	r4, [r1, r3]
   18b26:	2c00      	cmp	r4, #0
   18b28:	d1ee      	bne.n	18b08 <cir_write_line+0xa>
            break;
        }
    }
    if (json->iobuf[json->idx-1]=='\0') {
   18b2a:	f8be 3338 	ldrh.w	r3, [lr, #824]	; 0x338
   18b2e:	3b01      	subs	r3, #1
   18b30:	4473      	add	r3, lr
   18b32:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
   18b36:	b90b      	cbnz	r3, 18b3c <cir_write_line+0x3e>
        json->idx = 0;
   18b38:	f8ae 3338 	strh.w	r3, [lr, #824]	; 0x338
    }

    return len;
}
   18b3c:	bd10      	pop	{r4, pc}
	...

00018b40 <cir_json_write>:


int
cir_json_write(struct cir_json * json)
{
   18b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18b44:	b084      	sub	sp, #16
   18b46:	4604      	mov	r4, r0
    int rc;
    int i;
    struct json_value value;

    json->encoder.je_write = cir_write_line;
   18b48:	4b7d      	ldr	r3, [pc, #500]	; (18d40 <cir_json_write+0x200>)
   18b4a:	6183      	str	r3, [r0, #24]
    json->encoder.je_arg = (void *)json;
   18b4c:	61c0      	str	r0, [r0, #28]
    json->decoder.json_buf.jb_read_next = json_read_next;
   18b4e:	4b7d      	ldr	r3, [pc, #500]	; (18d44 <cir_json_write+0x204>)
   18b50:	6043      	str	r3, [r0, #4]
    json->decoder.json_buf.jb_read_prev = json_read_prev;
   18b52:	4b7d      	ldr	r3, [pc, #500]	; (18d48 <cir_json_write+0x208>)
   18b54:	6083      	str	r3, [r0, #8]
    json->decoder.json_buf.jb_readn = json_readn;
   18b56:	4b7d      	ldr	r3, [pc, #500]	; (18d4c <cir_json_write+0x20c>)
   18b58:	6003      	str	r3, [r0, #0]

    json->encoder.je_wr_commas = 0;
   18b5a:	f890 3020 	ldrb.w	r3, [r0, #32]
   18b5e:	f36f 0300 	bfc	r3, #0, #1
   18b62:	f880 3020 	strb.w	r3, [r0, #32]
    rc = json_encode_object_start(&json->encoder);
   18b66:	f100 0618 	add.w	r6, r0, #24
   18b6a:	4630      	mov	r0, r6
   18b6c:	f000 f908 	bl	18d80 <json_encode_object_start>
   18b70:	4605      	mov	r5, r0
    JSON_VALUE_UINT(&value, json->utime);
   18b72:	2701      	movs	r7, #1
   18b74:	f88d 7001 	strb.w	r7, [sp, #1]
   18b78:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
   18b7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rc |= json_encode_object_entry(&json->encoder, "utime", &value);
   18b80:	466a      	mov	r2, sp
   18b82:	4973      	ldr	r1, [pc, #460]	; (18d50 <cir_json_write+0x210>)
   18b84:	4630      	mov	r0, r6
   18b86:	f000 f943 	bl	18e10 <json_encode_object_entry>
   18b8a:	4305      	orrs	r5, r0

    JSON_VALUE_STRING(&value, json->type);
   18b8c:	2303      	movs	r3, #3
   18b8e:	f88d 3001 	strb.w	r3, [sp, #1]
   18b92:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
   18b96:	4640      	mov	r0, r8
   18b98:	f7f3 fab0 	bl	c0fc <strlen>
   18b9c:	f8ad 0002 	strh.w	r0, [sp, #2]
   18ba0:	f8cd 8008 	str.w	r8, [sp, #8]
    rc |= json_encode_object_entry(&json->encoder, "cir_type", &value);
   18ba4:	466a      	mov	r2, sp
   18ba6:	496b      	ldr	r1, [pc, #428]	; (18d54 <cir_json_write+0x214>)
   18ba8:	4630      	mov	r0, r6
   18baa:	f000 f931 	bl	18e10 <json_encode_object_entry>
   18bae:	4305      	orrs	r5, r0

    JSON_VALUE_UINT(&value, json->raw_ts);
   18bb0:	f88d 7001 	strb.w	r7, [sp, #1]
   18bb4:	e9d4 231e 	ldrd	r2, r3, [r4, #120]	; 0x78
   18bb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rc |= json_encode_object_entry(&json->encoder, "raw_ts", &value);
   18bbc:	466a      	mov	r2, sp
   18bbe:	4966      	ldr	r1, [pc, #408]	; (18d58 <cir_json_write+0x218>)
   18bc0:	4630      	mov	r0, r6
   18bc2:	f000 f925 	bl	18e10 <json_encode_object_entry>
   18bc6:	4305      	orrs	r5, r0

    JSON_VALUE_UINT(&value, json->resampler_delay);
   18bc8:	f88d 7001 	strb.w	r7, [sp, #1]
   18bcc:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
   18bd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rc |= json_encode_object_entry(&json->encoder, "resam_dly", &value);
   18bd4:	466a      	mov	r2, sp
   18bd6:	4961      	ldr	r1, [pc, #388]	; (18d5c <cir_json_write+0x21c>)
   18bd8:	4630      	mov	r0, r6
   18bda:	f000 f919 	bl	18e10 <json_encode_object_entry>
   18bde:	4305      	orrs	r5, r0

    JSON_VALUE_FLOAT64(&value, json->fp_idx);
   18be0:	f04f 0806 	mov.w	r8, #6
   18be4:	f88d 8001 	strb.w	r8, [sp, #1]
   18be8:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
   18bec:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rc |= json_encode_object_entry(&json->encoder, "fp_idx", &value);
   18bf0:	466a      	mov	r2, sp
   18bf2:	495b      	ldr	r1, [pc, #364]	; (18d60 <cir_json_write+0x220>)
   18bf4:	4630      	mov	r0, r6
   18bf6:	f000 f90b 	bl	18e10 <json_encode_object_entry>
   18bfa:	4305      	orrs	r5, r0

    JSON_VALUE_FLOAT64(&value, json->fp_power);
   18bfc:	f88d 8001 	strb.w	r8, [sp, #1]
   18c00:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	; 0x88
   18c04:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rc |= json_encode_object_entry(&json->encoder, "fp_power", &value);
   18c08:	466a      	mov	r2, sp
   18c0a:	4956      	ldr	r1, [pc, #344]	; (18d64 <cir_json_write+0x224>)
   18c0c:	4630      	mov	r0, r6
   18c0e:	f000 f8ff 	bl	18e10 <json_encode_object_entry>
   18c12:	4305      	orrs	r5, r0

    JSON_VALUE_FLOAT64(&value, json->angle);
   18c14:	f88d 8001 	strb.w	r8, [sp, #1]
   18c18:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
   18c1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rc |= json_encode_object_entry(&json->encoder, "angle", &value);
   18c20:	466a      	mov	r2, sp
   18c22:	4951      	ldr	r1, [pc, #324]	; (18d68 <cir_json_write+0x228>)
   18c24:	4630      	mov	r0, r6
   18c26:	f000 f8f3 	bl	18e10 <json_encode_object_entry>
   18c2a:	4305      	orrs	r5, r0

    JSON_VALUE_UINT(&value, json->accumulator_count);
   18c2c:	f88d 7001 	strb.w	r7, [sp, #1]
   18c30:	e9d4 2328 	ldrd	r2, r3, [r4, #160]	; 0xa0
   18c34:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rc |= json_encode_object_entry(&json->encoder, "acc_cnt", &value);
   18c38:	466a      	mov	r2, sp
   18c3a:	494c      	ldr	r1, [pc, #304]	; (18d6c <cir_json_write+0x22c>)
   18c3c:	4630      	mov	r0, r6
   18c3e:	f000 f8e7 	bl	18e10 <json_encode_object_entry>
   18c42:	4305      	orrs	r5, r0

    if (json->cir_count) {
   18c44:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
   18c48:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   18c4c:	4313      	orrs	r3, r2
   18c4e:	d113      	bne.n	18c78 <cir_json_write+0x138>
            rc |= json_encode_array_value(&json->encoder, &value);
        }
        rc |= json_encode_array_finish(&json->encoder);
    }

    rc |= json_encode_object_finish(&json->encoder);
   18c50:	4630      	mov	r0, r6
   18c52:	f000 fa83 	bl	1915c <json_encode_object_finish>
    json->encoder.je_wr_commas = 0;
   18c56:	f894 3020 	ldrb.w	r3, [r4, #32]
   18c5a:	f36f 0300 	bfc	r3, #0, #1
   18c5e:	f884 3020 	strb.w	r3, [r4, #32]
    assert(rc == 0);
   18c62:	4305      	orrs	r5, r0
   18c64:	d165      	bne.n	18d32 <cir_json_write+0x1f2>

    cir_write_line(json->encoder.je_arg, "\0", 1);
   18c66:	2201      	movs	r2, #1
   18c68:	4941      	ldr	r1, [pc, #260]	; (18d70 <cir_json_write+0x230>)
   18c6a:	69e0      	ldr	r0, [r4, #28]
   18c6c:	f7ff ff47 	bl	18afe <cir_write_line>
    return rc;
}
   18c70:	4628      	mov	r0, r5
   18c72:	b004      	add	sp, #16
   18c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        JSON_VALUE_UINT(&value, json->cir_offset);
   18c78:	f88d 7001 	strb.w	r7, [sp, #1]
   18c7c:	e9d4 232a 	ldrd	r2, r3, [r4, #168]	; 0xa8
   18c80:	e9cd 2302 	strd	r2, r3, [sp, #8]
        rc |= json_encode_object_entry(&json->encoder, "offset", &value);
   18c84:	466a      	mov	r2, sp
   18c86:	493b      	ldr	r1, [pc, #236]	; (18d74 <cir_json_write+0x234>)
   18c88:	4630      	mov	r0, r6
   18c8a:	f000 f8c1 	bl	18e10 <json_encode_object_entry>
   18c8e:	4305      	orrs	r5, r0
        rc |= json_encode_array_name(&json->encoder, "real");
   18c90:	4939      	ldr	r1, [pc, #228]	; (18d78 <cir_json_write+0x238>)
   18c92:	4630      	mov	r0, r6
   18c94:	f000 fa72 	bl	1917c <json_encode_array_name>
   18c98:	4305      	orrs	r5, r0
        rc |= json_encode_array_start(&json->encoder);
   18c9a:	4630      	mov	r0, r6
   18c9c:	f000 fa72 	bl	19184 <json_encode_array_start>
   18ca0:	4305      	orrs	r5, r0
        for (i = 0; i< json->cir_count; i++) {
   18ca2:	2700      	movs	r7, #0
   18ca4:	e010      	b.n	18cc8 <cir_json_write+0x188>
            JSON_VALUE_INT(&value, json->real[i]);
   18ca6:	2302      	movs	r3, #2
   18ca8:	f88d 3001 	strb.w	r3, [sp, #1]
   18cac:	f107 0317 	add.w	r3, r7, #23
   18cb0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   18cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   18cb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
            rc |= json_encode_array_value(&json->encoder, &value);
   18cbc:	4669      	mov	r1, sp
   18cbe:	4630      	mov	r0, r6
   18cc0:	f000 fa70 	bl	191a4 <json_encode_array_value>
   18cc4:	4305      	orrs	r5, r0
        for (i = 0; i< json->cir_count; i++) {
   18cc6:	3701      	adds	r7, #1
   18cc8:	17fb      	asrs	r3, r7, #31
   18cca:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
   18cce:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   18cd2:	428f      	cmp	r7, r1
   18cd4:	4193      	sbcs	r3, r2
   18cd6:	d3e6      	bcc.n	18ca6 <cir_json_write+0x166>
        rc |= json_encode_array_finish(&json->encoder);
   18cd8:	4630      	mov	r0, r6
   18cda:	f000 fa7f 	bl	191dc <json_encode_array_finish>
   18cde:	4305      	orrs	r5, r0
        rc |= json_encode_array_name(&json->encoder, "imag");
   18ce0:	4926      	ldr	r1, [pc, #152]	; (18d7c <cir_json_write+0x23c>)
   18ce2:	4630      	mov	r0, r6
   18ce4:	f000 fa4a 	bl	1917c <json_encode_array_name>
   18ce8:	4305      	orrs	r5, r0
        rc |= json_encode_array_start(&json->encoder);
   18cea:	4630      	mov	r0, r6
   18cec:	f000 fa4a 	bl	19184 <json_encode_array_start>
   18cf0:	4305      	orrs	r5, r0
        for (i = 0; i< json->cir_count; i++) {
   18cf2:	2700      	movs	r7, #0
   18cf4:	e010      	b.n	18d18 <cir_json_write+0x1d8>
            JSON_VALUE_INT(&value, json->imag[i]);
   18cf6:	2302      	movs	r3, #2
   18cf8:	f88d 3001 	strb.w	r3, [sp, #1]
   18cfc:	f107 0327 	add.w	r3, r7, #39	; 0x27
   18d00:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   18d04:	e9d3 2300 	ldrd	r2, r3, [r3]
   18d08:	e9cd 2302 	strd	r2, r3, [sp, #8]
            rc |= json_encode_array_value(&json->encoder, &value);
   18d0c:	4669      	mov	r1, sp
   18d0e:	4630      	mov	r0, r6
   18d10:	f000 fa48 	bl	191a4 <json_encode_array_value>
   18d14:	4305      	orrs	r5, r0
        for (i = 0; i< json->cir_count; i++) {
   18d16:	3701      	adds	r7, #1
   18d18:	17fb      	asrs	r3, r7, #31
   18d1a:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
   18d1e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   18d22:	428f      	cmp	r7, r1
   18d24:	4193      	sbcs	r3, r2
   18d26:	d3e6      	bcc.n	18cf6 <cir_json_write+0x1b6>
        rc |= json_encode_array_finish(&json->encoder);
   18d28:	4630      	mov	r0, r6
   18d2a:	f000 fa57 	bl	191dc <json_encode_array_finish>
   18d2e:	4305      	orrs	r5, r0
   18d30:	e78e      	b.n	18c50 <cir_json_write+0x110>
    assert(rc == 0);
   18d32:	2300      	movs	r3, #0
   18d34:	461a      	mov	r2, r3
   18d36:	4619      	mov	r1, r3
   18d38:	4618      	mov	r0, r3
   18d3a:	f7f0 f90b 	bl	8f54 <__assert_func>
   18d3e:	bf00      	nop
   18d40:	00018aff 	.word	0x00018aff
   18d44:	000191f9 	.word	0x000191f9
   18d48:	00019215 	.word	0x00019215
   18d4c:	00019227 	.word	0x00019227
   18d50:	00021ba0 	.word	0x00021ba0
   18d54:	000235cc 	.word	0x000235cc
   18d58:	000235d8 	.word	0x000235d8
   18d5c:	000235e0 	.word	0x000235e0
   18d60:	000235ec 	.word	0x000235ec
   18d64:	000235f4 	.word	0x000235f4
   18d68:	00023600 	.word	0x00023600
   18d6c:	00023608 	.word	0x00023608
   18d70:	00023628 	.word	0x00023628
   18d74:	00023610 	.word	0x00023610
   18d78:	00023618 	.word	0x00023618
   18d7c:	00023620 	.word	0x00023620

00018d80 <json_encode_object_start>:
    (__e)->je_write((__e)->je_arg, "]", sizeof("]")-1);


int
json_encode_object_start(struct json_encoder *encoder)
{
   18d80:	b510      	push	{r4, lr}
   18d82:	4604      	mov	r4, r0
    if (encoder->je_wr_commas) {
   18d84:	7a03      	ldrb	r3, [r0, #8]
   18d86:	f013 0f01 	tst.w	r3, #1
   18d8a:	d008      	beq.n	18d9e <json_encode_object_start+0x1e>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   18d8c:	6803      	ldr	r3, [r0, #0]
   18d8e:	2201      	movs	r2, #1
   18d90:	4908      	ldr	r1, [pc, #32]	; (18db4 <json_encode_object_start+0x34>)
   18d92:	6840      	ldr	r0, [r0, #4]
   18d94:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   18d96:	7a23      	ldrb	r3, [r4, #8]
   18d98:	f36f 0300 	bfc	r3, #0, #1
   18d9c:	7223      	strb	r3, [r4, #8]
    }
    JSON_ENCODE_OBJECT_START(encoder);
   18d9e:	6823      	ldr	r3, [r4, #0]
   18da0:	2201      	movs	r2, #1
   18da2:	4905      	ldr	r1, [pc, #20]	; (18db8 <json_encode_object_start+0x38>)
   18da4:	6860      	ldr	r0, [r4, #4]
   18da6:	4798      	blx	r3
    encoder->je_wr_commas = 0;
   18da8:	7a23      	ldrb	r3, [r4, #8]
   18daa:	f36f 0300 	bfc	r3, #0, #1
   18dae:	7223      	strb	r3, [r4, #8]

    return (0);
}
   18db0:	2000      	movs	r0, #0
   18db2:	bd10      	pop	{r4, pc}
   18db4:	0002362c 	.word	0x0002362c
   18db8:	00023630 	.word	0x00023630

00018dbc <json_encode_object_key>:
}
EXPORT_SYMBOL(json_encode_value);

int
json_encode_object_key(struct json_encoder *encoder, char *key)
{
   18dbc:	b570      	push	{r4, r5, r6, lr}
   18dbe:	4604      	mov	r4, r0
   18dc0:	460d      	mov	r5, r1
    if (encoder->je_wr_commas) {
   18dc2:	7a03      	ldrb	r3, [r0, #8]
   18dc4:	f013 0f01 	tst.w	r3, #1
   18dc8:	d008      	beq.n	18ddc <json_encode_object_key+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   18dca:	6803      	ldr	r3, [r0, #0]
   18dcc:	2201      	movs	r2, #1
   18dce:	490d      	ldr	r1, [pc, #52]	; (18e04 <json_encode_object_key+0x48>)
   18dd0:	6840      	ldr	r0, [r0, #4]
   18dd2:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   18dd4:	7a23      	ldrb	r3, [r4, #8]
   18dd6:	f36f 0300 	bfc	r3, #0, #1
   18dda:	7223      	strb	r3, [r4, #8]
    }

    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   18ddc:	6823      	ldr	r3, [r4, #0]
   18dde:	2201      	movs	r2, #1
   18de0:	4909      	ldr	r1, [pc, #36]	; (18e08 <json_encode_object_key+0x4c>)
   18de2:	6860      	ldr	r0, [r4, #4]
   18de4:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
   18de6:	6826      	ldr	r6, [r4, #0]
   18de8:	4628      	mov	r0, r5
   18dea:	f7f3 f987 	bl	c0fc <strlen>
   18dee:	4602      	mov	r2, r0
   18df0:	4629      	mov	r1, r5
   18df2:	6860      	ldr	r0, [r4, #4]
   18df4:	47b0      	blx	r6
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
   18df6:	6823      	ldr	r3, [r4, #0]
   18df8:	2203      	movs	r2, #3
   18dfa:	4904      	ldr	r1, [pc, #16]	; (18e0c <json_encode_object_key+0x50>)
   18dfc:	6860      	ldr	r0, [r4, #4]
   18dfe:	4798      	blx	r3

    return (0);
}
   18e00:	2000      	movs	r0, #0
   18e02:	bd70      	pop	{r4, r5, r6, pc}
   18e04:	0002362c 	.word	0x0002362c
   18e08:	00023634 	.word	0x00023634
   18e0c:	00023638 	.word	0x00023638

00018e10 <json_encode_object_entry>:
EXPORT_SYMBOL(json_encode_object_key);

int
json_encode_object_entry(struct json_encoder *encoder, char *key,
        struct json_value *val)
{
   18e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18e12:	4604      	mov	r4, r0
   18e14:	460d      	mov	r5, r1
   18e16:	4616      	mov	r6, r2
    int rc;

    if (encoder->je_wr_commas) {
   18e18:	7a03      	ldrb	r3, [r0, #8]
   18e1a:	f013 0f01 	tst.w	r3, #1
   18e1e:	d008      	beq.n	18e32 <json_encode_object_entry+0x22>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   18e20:	6803      	ldr	r3, [r0, #0]
   18e22:	2201      	movs	r2, #1
   18e24:	4911      	ldr	r1, [pc, #68]	; (18e6c <json_encode_object_entry+0x5c>)
   18e26:	6840      	ldr	r0, [r0, #4]
   18e28:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   18e2a:	7a23      	ldrb	r3, [r4, #8]
   18e2c:	f36f 0300 	bfc	r3, #0, #1
   18e30:	7223      	strb	r3, [r4, #8]
    }
    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   18e32:	6823      	ldr	r3, [r4, #0]
   18e34:	2201      	movs	r2, #1
   18e36:	490e      	ldr	r1, [pc, #56]	; (18e70 <json_encode_object_entry+0x60>)
   18e38:	6860      	ldr	r0, [r4, #4]
   18e3a:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
   18e3c:	6827      	ldr	r7, [r4, #0]
   18e3e:	4628      	mov	r0, r5
   18e40:	f7f3 f95c 	bl	c0fc <strlen>
   18e44:	4602      	mov	r2, r0
   18e46:	4629      	mov	r1, r5
   18e48:	6860      	ldr	r0, [r4, #4]
   18e4a:	47b8      	blx	r7
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
   18e4c:	6823      	ldr	r3, [r4, #0]
   18e4e:	2203      	movs	r2, #3
   18e50:	4908      	ldr	r1, [pc, #32]	; (18e74 <json_encode_object_entry+0x64>)
   18e52:	6860      	ldr	r0, [r4, #4]
   18e54:	4798      	blx	r3

    rc = json_encode_value(encoder, val);
   18e56:	4631      	mov	r1, r6
   18e58:	4620      	mov	r0, r4
   18e5a:	f000 f80d 	bl	18e78 <json_encode_value>
    if (rc != 0) {
   18e5e:	b918      	cbnz	r0, 18e68 <json_encode_object_entry+0x58>
        goto err;
    }
    encoder->je_wr_commas = 1;
   18e60:	7a23      	ldrb	r3, [r4, #8]
   18e62:	f043 0301 	orr.w	r3, r3, #1
   18e66:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
   18e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18e6a:	bf00      	nop
   18e6c:	0002362c 	.word	0x0002362c
   18e70:	00023634 	.word	0x00023634
   18e74:	00023638 	.word	0x00023638

00018e78 <json_encode_value>:
{
   18e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18e7a:	4605      	mov	r5, r0
   18e7c:	460c      	mov	r4, r1
    switch (jv->jv_type) {
   18e7e:	784b      	ldrb	r3, [r1, #1]
   18e80:	2b06      	cmp	r3, #6
   18e82:	f200 8141 	bhi.w	19108 <json_encode_value+0x290>
   18e86:	e8df f013 	tbh	[pc, r3, lsl #1]
   18e8a:	0007      	.short	0x0007
   18e8c:	002b001c 	.word	0x002b001c
   18e90:	00fa005a 	.word	0x00fa005a
   18e94:	003a0120 	.word	0x003a0120
            len = sprintf(encoder->je_encode_buf, "%s",
   18e98:	f100 0609 	add.w	r6, r0, #9
                    jv->jv_val.u > 0 ? "true" : "false");
   18e9c:	688a      	ldr	r2, [r1, #8]
   18e9e:	68cb      	ldr	r3, [r1, #12]
            len = sprintf(encoder->je_encode_buf, "%s",
   18ea0:	4313      	orrs	r3, r2
   18ea2:	d00c      	beq.n	18ebe <json_encode_value+0x46>
   18ea4:	4a9a      	ldr	r2, [pc, #616]	; (19110 <json_encode_value+0x298>)
   18ea6:	499b      	ldr	r1, [pc, #620]	; (19114 <json_encode_value+0x29c>)
   18ea8:	4630      	mov	r0, r6
   18eaa:	f001 fd41 	bl	1a930 <sprintf>
   18eae:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   18eb0:	682b      	ldr	r3, [r5, #0]
   18eb2:	4631      	mov	r1, r6
   18eb4:	6868      	ldr	r0, [r5, #4]
   18eb6:	4798      	blx	r3
    return (0);
   18eb8:	2300      	movs	r3, #0
}
   18eba:	4618      	mov	r0, r3
   18ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            len = sprintf(encoder->je_encode_buf, "%s",
   18ebe:	4a96      	ldr	r2, [pc, #600]	; (19118 <json_encode_value+0x2a0>)
   18ec0:	e7f1      	b.n	18ea6 <json_encode_value+0x2e>
            len = sprintf(encoder->je_encode_buf, "%" PRIu64,
   18ec2:	f100 0609 	add.w	r6, r0, #9
   18ec6:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   18eca:	4994      	ldr	r1, [pc, #592]	; (1911c <json_encode_value+0x2a4>)
   18ecc:	4630      	mov	r0, r6
   18ece:	f001 fd2f 	bl	1a930 <sprintf>
   18ed2:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   18ed4:	682b      	ldr	r3, [r5, #0]
   18ed6:	4631      	mov	r1, r6
   18ed8:	6868      	ldr	r0, [r5, #4]
   18eda:	4798      	blx	r3
    return (0);
   18edc:	2300      	movs	r3, #0
            break;
   18ede:	e7ec      	b.n	18eba <json_encode_value+0x42>
            len = sprintf(encoder->je_encode_buf, "%" PRIi64,
   18ee0:	f100 0609 	add.w	r6, r0, #9
   18ee4:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   18ee8:	498d      	ldr	r1, [pc, #564]	; (19120 <json_encode_value+0x2a8>)
   18eea:	4630      	mov	r0, r6
   18eec:	f001 fd20 	bl	1a930 <sprintf>
   18ef0:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   18ef2:	682b      	ldr	r3, [r5, #0]
   18ef4:	4631      	mov	r1, r6
   18ef6:	6868      	ldr	r0, [r5, #4]
   18ef8:	4798      	blx	r3
    return (0);
   18efa:	2300      	movs	r3, #0
            break;
   18efc:	e7dd      	b.n	18eba <json_encode_value+0x42>
        if  (DPL_FLOAT64_ISNAN(jv->jv_val.fl)){
   18efe:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
   18f02:	4632      	mov	r2, r6
   18f04:	463b      	mov	r3, r7
   18f06:	4630      	mov	r0, r6
   18f08:	4639      	mov	r1, r7
   18f0a:	f007 fa1b 	bl	20344 <__aeabi_dcmpun>
   18f0e:	b970      	cbnz	r0, 18f2e <json_encode_value+0xb6>
            len = sprintf(encoder->je_encode_buf,
   18f10:	4632      	mov	r2, r6
   18f12:	463b      	mov	r3, r7
   18f14:	4983      	ldr	r1, [pc, #524]	; (19124 <json_encode_value+0x2ac>)
   18f16:	f105 0009 	add.w	r0, r5, #9
   18f1a:	f001 fd09 	bl	1a930 <sprintf>
   18f1e:	4602      	mov	r2, r0
        encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   18f20:	4629      	mov	r1, r5
   18f22:	f851 3b09 	ldr.w	r3, [r1], #9
   18f26:	6868      	ldr	r0, [r5, #4]
   18f28:	4798      	blx	r3
    return (0);
   18f2a:	2300      	movs	r3, #0
        break;
   18f2c:	e7c5      	b.n	18eba <json_encode_value+0x42>
            len = sprintf(encoder->je_encode_buf, "null");
   18f2e:	4b7e      	ldr	r3, [pc, #504]	; (19128 <json_encode_value+0x2b0>)
   18f30:	6818      	ldr	r0, [r3, #0]
   18f32:	f8c5 0009 	str.w	r0, [r5, #9]
   18f36:	791b      	ldrb	r3, [r3, #4]
   18f38:	736b      	strb	r3, [r5, #13]
   18f3a:	2204      	movs	r2, #4
   18f3c:	e7f0      	b.n	18f20 <json_encode_value+0xa8>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   18f3e:	6803      	ldr	r3, [r0, #0]
   18f40:	2201      	movs	r2, #1
   18f42:	497a      	ldr	r1, [pc, #488]	; (1912c <json_encode_value+0x2b4>)
   18f44:	6840      	ldr	r0, [r0, #4]
   18f46:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   18f48:	2600      	movs	r6, #0
   18f4a:	e012      	b.n	18f72 <json_encode_value+0xfa>
   18f4c:	2b5c      	cmp	r3, #92	; 0x5c
   18f4e:	d004      	beq.n	18f5a <json_encode_value+0xe2>
                        encoder->je_write(encoder->je_arg,
   18f50:	682b      	ldr	r3, [r5, #0]
   18f52:	2201      	movs	r2, #1
   18f54:	6868      	ldr	r0, [r5, #4]
   18f56:	4798      	blx	r3
                        break;
   18f58:	e00a      	b.n	18f70 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\",
   18f5a:	682b      	ldr	r3, [r5, #0]
   18f5c:	2201      	movs	r2, #1
   18f5e:	4974      	ldr	r1, [pc, #464]	; (19130 <json_encode_value+0x2b8>)
   18f60:	6868      	ldr	r0, [r5, #4]
   18f62:	4798      	blx	r3
                        encoder->je_write(encoder->je_arg,
   18f64:	682b      	ldr	r3, [r5, #0]
                                (char *) &jv->jv_val.str[i], 1);
   18f66:	68a1      	ldr	r1, [r4, #8]
                        encoder->je_write(encoder->je_arg,
   18f68:	2201      	movs	r2, #1
   18f6a:	4439      	add	r1, r7
   18f6c:	6868      	ldr	r0, [r5, #4]
   18f6e:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   18f70:	3601      	adds	r6, #1
   18f72:	8863      	ldrh	r3, [r4, #2]
   18f74:	42b3      	cmp	r3, r6
   18f76:	dd7b      	ble.n	19070 <json_encode_value+0x1f8>
                switch (jv->jv_val.str[i]) {
   18f78:	68a3      	ldr	r3, [r4, #8]
   18f7a:	4637      	mov	r7, r6
   18f7c:	1999      	adds	r1, r3, r6
   18f7e:	5d9b      	ldrb	r3, [r3, r6]
   18f80:	2b2f      	cmp	r3, #47	; 0x2f
   18f82:	d8e3      	bhi.n	18f4c <json_encode_value+0xd4>
   18f84:	2b08      	cmp	r3, #8
   18f86:	d3e3      	bcc.n	18f50 <json_encode_value+0xd8>
   18f88:	3b08      	subs	r3, #8
   18f8a:	2b27      	cmp	r3, #39	; 0x27
   18f8c:	d8e0      	bhi.n	18f50 <json_encode_value+0xd8>
   18f8e:	a201      	add	r2, pc, #4	; (adr r2, 18f94 <json_encode_value+0x11c>)
   18f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18f94:	00019065 	.word	0x00019065
   18f98:	00019035 	.word	0x00019035
   18f9c:	0001904d 	.word	0x0001904d
   18fa0:	00018f51 	.word	0x00018f51
   18fa4:	00019059 	.word	0x00019059
   18fa8:	00019041 	.word	0x00019041
   18fac:	00018f51 	.word	0x00018f51
   18fb0:	00018f51 	.word	0x00018f51
   18fb4:	00018f51 	.word	0x00018f51
   18fb8:	00018f51 	.word	0x00018f51
   18fbc:	00018f51 	.word	0x00018f51
   18fc0:	00018f51 	.word	0x00018f51
   18fc4:	00018f51 	.word	0x00018f51
   18fc8:	00018f51 	.word	0x00018f51
   18fcc:	00018f51 	.word	0x00018f51
   18fd0:	00018f51 	.word	0x00018f51
   18fd4:	00018f51 	.word	0x00018f51
   18fd8:	00018f51 	.word	0x00018f51
   18fdc:	00018f51 	.word	0x00018f51
   18fe0:	00018f51 	.word	0x00018f51
   18fe4:	00018f51 	.word	0x00018f51
   18fe8:	00018f51 	.word	0x00018f51
   18fec:	00018f51 	.word	0x00018f51
   18ff0:	00018f51 	.word	0x00018f51
   18ff4:	00018f51 	.word	0x00018f51
   18ff8:	00018f51 	.word	0x00018f51
   18ffc:	00018f5b 	.word	0x00018f5b
   19000:	00018f51 	.word	0x00018f51
   19004:	00018f51 	.word	0x00018f51
   19008:	00018f51 	.word	0x00018f51
   1900c:	00018f51 	.word	0x00018f51
   19010:	00018f51 	.word	0x00018f51
   19014:	00018f51 	.word	0x00018f51
   19018:	00018f51 	.word	0x00018f51
   1901c:	00018f51 	.word	0x00018f51
   19020:	00018f51 	.word	0x00018f51
   19024:	00018f51 	.word	0x00018f51
   19028:	00018f51 	.word	0x00018f51
   1902c:	00018f51 	.word	0x00018f51
   19030:	00018f5b 	.word	0x00018f5b
                        encoder->je_write(encoder->je_arg, "\\t",
   19034:	682b      	ldr	r3, [r5, #0]
   19036:	2202      	movs	r2, #2
   19038:	493e      	ldr	r1, [pc, #248]	; (19134 <json_encode_value+0x2bc>)
   1903a:	6868      	ldr	r0, [r5, #4]
   1903c:	4798      	blx	r3
                        break;
   1903e:	e797      	b.n	18f70 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\r",
   19040:	682b      	ldr	r3, [r5, #0]
   19042:	2202      	movs	r2, #2
   19044:	493c      	ldr	r1, [pc, #240]	; (19138 <json_encode_value+0x2c0>)
   19046:	6868      	ldr	r0, [r5, #4]
   19048:	4798      	blx	r3
                        break;
   1904a:	e791      	b.n	18f70 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\n",
   1904c:	682b      	ldr	r3, [r5, #0]
   1904e:	2202      	movs	r2, #2
   19050:	493a      	ldr	r1, [pc, #232]	; (1913c <json_encode_value+0x2c4>)
   19052:	6868      	ldr	r0, [r5, #4]
   19054:	4798      	blx	r3
                        break;
   19056:	e78b      	b.n	18f70 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\f",
   19058:	682b      	ldr	r3, [r5, #0]
   1905a:	2202      	movs	r2, #2
   1905c:	4938      	ldr	r1, [pc, #224]	; (19140 <json_encode_value+0x2c8>)
   1905e:	6868      	ldr	r0, [r5, #4]
   19060:	4798      	blx	r3
                        break;
   19062:	e785      	b.n	18f70 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\b",
   19064:	682b      	ldr	r3, [r5, #0]
   19066:	2202      	movs	r2, #2
   19068:	4936      	ldr	r1, [pc, #216]	; (19144 <json_encode_value+0x2cc>)
   1906a:	6868      	ldr	r0, [r5, #4]
   1906c:	4798      	blx	r3
                        break;
   1906e:	e77f      	b.n	18f70 <json_encode_value+0xf8>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   19070:	682b      	ldr	r3, [r5, #0]
   19072:	2201      	movs	r2, #1
   19074:	492d      	ldr	r1, [pc, #180]	; (1912c <json_encode_value+0x2b4>)
   19076:	6868      	ldr	r0, [r5, #4]
   19078:	4798      	blx	r3
    return (0);
   1907a:	2300      	movs	r3, #0
            break;
   1907c:	e71d      	b.n	18eba <json_encode_value+0x42>
            JSON_ENCODE_ARRAY_START(encoder);
   1907e:	6803      	ldr	r3, [r0, #0]
   19080:	2201      	movs	r2, #1
   19082:	4931      	ldr	r1, [pc, #196]	; (19148 <json_encode_value+0x2d0>)
   19084:	6840      	ldr	r0, [r0, #4]
   19086:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   19088:	2600      	movs	r6, #0
   1908a:	e000      	b.n	1908e <json_encode_value+0x216>
   1908c:	3601      	adds	r6, #1
   1908e:	8863      	ldrh	r3, [r4, #2]
   19090:	42b3      	cmp	r3, r6
   19092:	dd13      	ble.n	190bc <json_encode_value+0x244>
                rc = json_encode_value(encoder, jv->jv_val.composite.values[i]);
   19094:	68e3      	ldr	r3, [r4, #12]
   19096:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   1909a:	4628      	mov	r0, r5
   1909c:	f7ff feec 	bl	18e78 <json_encode_value>
                if (rc != 0) {
   190a0:	4603      	mov	r3, r0
   190a2:	2800      	cmp	r0, #0
   190a4:	f47f af09 	bne.w	18eba <json_encode_value+0x42>
                if (i != jv->jv_len - 1) {
   190a8:	8863      	ldrh	r3, [r4, #2]
   190aa:	3b01      	subs	r3, #1
   190ac:	42b3      	cmp	r3, r6
   190ae:	d0ed      	beq.n	1908c <json_encode_value+0x214>
                    encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   190b0:	682b      	ldr	r3, [r5, #0]
   190b2:	2201      	movs	r2, #1
   190b4:	4925      	ldr	r1, [pc, #148]	; (1914c <json_encode_value+0x2d4>)
   190b6:	6868      	ldr	r0, [r5, #4]
   190b8:	4798      	blx	r3
   190ba:	e7e7      	b.n	1908c <json_encode_value+0x214>
            JSON_ENCODE_ARRAY_END(encoder);
   190bc:	682b      	ldr	r3, [r5, #0]
   190be:	2201      	movs	r2, #1
   190c0:	4923      	ldr	r1, [pc, #140]	; (19150 <json_encode_value+0x2d8>)
   190c2:	6868      	ldr	r0, [r5, #4]
   190c4:	4798      	blx	r3
    return (0);
   190c6:	2300      	movs	r3, #0
            break;
   190c8:	e6f7      	b.n	18eba <json_encode_value+0x42>
            JSON_ENCODE_OBJECT_START(encoder);
   190ca:	6803      	ldr	r3, [r0, #0]
   190cc:	2201      	movs	r2, #1
   190ce:	4921      	ldr	r1, [pc, #132]	; (19154 <json_encode_value+0x2dc>)
   190d0:	6840      	ldr	r0, [r0, #4]
   190d2:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   190d4:	2600      	movs	r6, #0
   190d6:	e000      	b.n	190da <json_encode_value+0x262>
   190d8:	3601      	adds	r6, #1
   190da:	8863      	ldrh	r3, [r4, #2]
   190dc:	42b3      	cmp	r3, r6
   190de:	dd0c      	ble.n	190fa <json_encode_value+0x282>
                        jv->jv_val.composite.keys[i],
   190e0:	68a3      	ldr	r3, [r4, #8]
                        jv->jv_val.composite.values[i]);
   190e2:	68e2      	ldr	r2, [r4, #12]
                rc = json_encode_object_entry(encoder,
   190e4:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
   190e8:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   190ec:	4628      	mov	r0, r5
   190ee:	f7ff fe8f 	bl	18e10 <json_encode_object_entry>
                if (rc != 0) {
   190f2:	4603      	mov	r3, r0
   190f4:	2800      	cmp	r0, #0
   190f6:	d0ef      	beq.n	190d8 <json_encode_value+0x260>
   190f8:	e6df      	b.n	18eba <json_encode_value+0x42>
            JSON_ENCODE_OBJECT_END(encoder);
   190fa:	682b      	ldr	r3, [r5, #0]
   190fc:	2201      	movs	r2, #1
   190fe:	4916      	ldr	r1, [pc, #88]	; (19158 <json_encode_value+0x2e0>)
   19100:	6868      	ldr	r0, [r5, #4]
   19102:	4798      	blx	r3
    return (0);
   19104:	2300      	movs	r3, #0
            break;
   19106:	e6d8      	b.n	18eba <json_encode_value+0x42>
    switch (jv->jv_type) {
   19108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1910c:	e6d5      	b.n	18eba <json_encode_value+0x42>
   1910e:	bf00      	nop
   19110:	00023644 	.word	0x00023644
   19114:	00021c30 	.word	0x00021c30
   19118:	0002363c 	.word	0x0002363c
   1911c:	0002364c 	.word	0x0002364c
   19120:	00023654 	.word	0x00023654
   19124:	00023664 	.word	0x00023664
   19128:	0002365c 	.word	0x0002365c
   1912c:	00023634 	.word	0x00023634
   19130:	00023668 	.word	0x00023668
   19134:	0002366c 	.word	0x0002366c
   19138:	00023670 	.word	0x00023670
   1913c:	00023674 	.word	0x00023674
   19140:	00023678 	.word	0x00023678
   19144:	0002367c 	.word	0x0002367c
   19148:	00023680 	.word	0x00023680
   1914c:	0002362c 	.word	0x0002362c
   19150:	00022230 	.word	0x00022230
   19154:	00023630 	.word	0x00023630
   19158:	00023684 	.word	0x00023684

0001915c <json_encode_object_finish>:
EXPORT_SYMBOL(json_encode_object_entry);

int
json_encode_object_finish(struct json_encoder *encoder)
{
   1915c:	b510      	push	{r4, lr}
   1915e:	4604      	mov	r4, r0
    JSON_ENCODE_OBJECT_END(encoder);
   19160:	6803      	ldr	r3, [r0, #0]
   19162:	2201      	movs	r2, #1
   19164:	4904      	ldr	r1, [pc, #16]	; (19178 <json_encode_object_finish+0x1c>)
   19166:	6840      	ldr	r0, [r0, #4]
   19168:	4798      	blx	r3
    /* Useful in case of nested objects. */
    encoder->je_wr_commas = 1;
   1916a:	7a23      	ldrb	r3, [r4, #8]
   1916c:	f043 0301 	orr.w	r3, r3, #1
   19170:	7223      	strb	r3, [r4, #8]

    return (0);
}
   19172:	2000      	movs	r0, #0
   19174:	bd10      	pop	{r4, pc}
   19176:	bf00      	nop
   19178:	00023684 	.word	0x00023684

0001917c <json_encode_array_name>:
EXPORT_SYMBOL(json_encode_object_finish);

int
json_encode_array_name(struct json_encoder *encoder, char *name)
{
   1917c:	b508      	push	{r3, lr}
    return json_encode_object_key(encoder, name);
   1917e:	f7ff fe1d 	bl	18dbc <json_encode_object_key>
}
   19182:	bd08      	pop	{r3, pc}

00019184 <json_encode_array_start>:
EXPORT_SYMBOL(json_encode_array_name);

int
json_encode_array_start(struct json_encoder *encoder)
{
   19184:	b510      	push	{r4, lr}
   19186:	4604      	mov	r4, r0
    JSON_ENCODE_ARRAY_START(encoder);
   19188:	6803      	ldr	r3, [r0, #0]
   1918a:	2201      	movs	r2, #1
   1918c:	4904      	ldr	r1, [pc, #16]	; (191a0 <json_encode_array_start+0x1c>)
   1918e:	6840      	ldr	r0, [r0, #4]
   19190:	4798      	blx	r3
    encoder->je_wr_commas = 0;
   19192:	7a23      	ldrb	r3, [r4, #8]
   19194:	f36f 0300 	bfc	r3, #0, #1
   19198:	7223      	strb	r3, [r4, #8]

    return (0);
}
   1919a:	2000      	movs	r0, #0
   1919c:	bd10      	pop	{r4, pc}
   1919e:	bf00      	nop
   191a0:	00023680 	.word	0x00023680

000191a4 <json_encode_array_value>:
EXPORT_SYMBOL(json_encode_array_start);

int
json_encode_array_value(struct json_encoder *encoder, struct json_value *jv)
{
   191a4:	b538      	push	{r3, r4, r5, lr}
   191a6:	4604      	mov	r4, r0
   191a8:	460d      	mov	r5, r1
    int rc;

    if (encoder->je_wr_commas) {
   191aa:	7a03      	ldrb	r3, [r0, #8]
   191ac:	f013 0f01 	tst.w	r3, #1
   191b0:	d008      	beq.n	191c4 <json_encode_array_value+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   191b2:	6803      	ldr	r3, [r0, #0]
   191b4:	2201      	movs	r2, #1
   191b6:	4908      	ldr	r1, [pc, #32]	; (191d8 <json_encode_array_value+0x34>)
   191b8:	6840      	ldr	r0, [r0, #4]
   191ba:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   191bc:	7a23      	ldrb	r3, [r4, #8]
   191be:	f36f 0300 	bfc	r3, #0, #1
   191c2:	7223      	strb	r3, [r4, #8]
    }

    rc = json_encode_value(encoder, jv);
   191c4:	4629      	mov	r1, r5
   191c6:	4620      	mov	r0, r4
   191c8:	f7ff fe56 	bl	18e78 <json_encode_value>
    if (rc != 0) {
   191cc:	b918      	cbnz	r0, 191d6 <json_encode_array_value+0x32>
        goto err;
    }
    encoder->je_wr_commas = 1;
   191ce:	7a23      	ldrb	r3, [r4, #8]
   191d0:	f043 0301 	orr.w	r3, r3, #1
   191d4:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
   191d6:	bd38      	pop	{r3, r4, r5, pc}
   191d8:	0002362c 	.word	0x0002362c

000191dc <json_encode_array_finish>:
EXPORT_SYMBOL(json_encode_array_value);

int
json_encode_array_finish(struct json_encoder *encoder)
{
   191dc:	b508      	push	{r3, lr}
    encoder->je_wr_commas = 1;
   191de:	7a03      	ldrb	r3, [r0, #8]
   191e0:	f043 0301 	orr.w	r3, r3, #1
   191e4:	7203      	strb	r3, [r0, #8]
    JSON_ENCODE_ARRAY_END(encoder);
   191e6:	6803      	ldr	r3, [r0, #0]
   191e8:	2201      	movs	r2, #1
   191ea:	4902      	ldr	r1, [pc, #8]	; (191f4 <json_encode_array_finish+0x18>)
   191ec:	6840      	ldr	r0, [r0, #4]
   191ee:	4798      	blx	r3

    return (0);
}
   191f0:	2000      	movs	r0, #0
   191f2:	bd08      	pop	{r3, pc}
   191f4:	00022230 	.word	0x00022230

000191f8 <json_read_next>:
    return len;
}

char
json_read_next(struct json_buffer * jb)
{
   191f8:	4603      	mov	r3, r0
    json_decoder_t * decoder = (json_decoder_t *) jb;
    char c;

    if ((decoder->start_buf + decoder->current_position) <= decoder->end_buf) {
   191fa:	68c1      	ldr	r1, [r0, #12]
   191fc:	6942      	ldr	r2, [r0, #20]
   191fe:	eb01 0c02 	add.w	ip, r1, r2
   19202:	6900      	ldr	r0, [r0, #16]
   19204:	4584      	cmp	ip, r0
   19206:	d901      	bls.n	1920c <json_read_next+0x14>
        c = *(decoder->start_buf + decoder->current_position);
        decoder->current_position++;
        return c;
    }
   return '\0';
   19208:	2000      	movs	r0, #0
}
   1920a:	4770      	bx	lr
        c = *(decoder->start_buf + decoder->current_position);
   1920c:	5c88      	ldrb	r0, [r1, r2]
        decoder->current_position++;
   1920e:	3201      	adds	r2, #1
   19210:	615a      	str	r2, [r3, #20]
        return c;
   19212:	4770      	bx	lr

00019214 <json_read_prev>:
json_read_prev(struct json_buffer * jb)
{
    json_decoder_t * decoder = (json_decoder_t *) jb;

    char c;
    if (decoder->current_position) {
   19214:	6943      	ldr	r3, [r0, #20]
   19216:	b90b      	cbnz	r3, 1921c <json_read_prev+0x8>
       decoder->current_position--;
       c = *(decoder->start_buf + decoder->current_position);
       return c;
    }
    /* can't rewind */
    return '\0';
   19218:	2000      	movs	r0, #0
}
   1921a:	4770      	bx	lr
       decoder->current_position--;
   1921c:	3b01      	subs	r3, #1
   1921e:	6143      	str	r3, [r0, #20]
       c = *(decoder->start_buf + decoder->current_position);
   19220:	68c2      	ldr	r2, [r0, #12]
   19222:	5cd0      	ldrb	r0, [r2, r3]
       return c;
   19224:	4770      	bx	lr

00019226 <json_readn>:
EXPORT_SYMBOL(json_read_prev);

int
json_readn(struct json_buffer * jb, char *buf, int size)
{
   19226:	b538      	push	{r3, r4, r5, lr}
   19228:	4604      	mov	r4, r0
   1922a:	4608      	mov	r0, r1
    json_decoder_t * decoder = (json_decoder_t *) jb;
    int remlen;

    remlen = (int)(decoder->end_buf - (decoder->start_buf + decoder->current_position));
   1922c:	6925      	ldr	r5, [r4, #16]
   1922e:	68e3      	ldr	r3, [r4, #12]
   19230:	6961      	ldr	r1, [r4, #20]
   19232:	4419      	add	r1, r3
   19234:	1a6d      	subs	r5, r5, r1
    if (size > remlen) {
   19236:	4295      	cmp	r5, r2
   19238:	db00      	blt.n	1923c <json_readn+0x16>
   1923a:	4615      	mov	r5, r2
        size = remlen;
    }

    memcpy(buf, decoder->start_buf + decoder->current_position, size);
   1923c:	462a      	mov	r2, r5
   1923e:	f7f2 ff19 	bl	c074 <memcpy>
    decoder->current_position += size;
   19242:	6963      	ldr	r3, [r4, #20]
   19244:	442b      	add	r3, r5
   19246:	6163      	str	r3, [r4, #20]
    return size;
}
   19248:	4628      	mov	r0, r5
   1924a:	bd38      	pop	{r3, r4, r5, pc}
   1924c:	0000      	movs	r0, r0
	...

00019250 <uwb_rng_tof_to_meters>:
 *
 * @return range in meters
 */
dpl_float64_t
uwb_rng_tof_to_meters(dpl_float64_t ToF)
{
   19250:	b538      	push	{r3, r4, r5, lr}
   19252:	ec55 4b10 	vmov	r4, r5, d0
    if (DPL_FLOAT64_ISNAN(ToF)) {
   19256:	ee10 2a10 	vmov	r2, s0
   1925a:	462b      	mov	r3, r5
   1925c:	ee10 0a10 	vmov	r0, s0
   19260:	4629      	mov	r1, r5
   19262:	f007 f86f 	bl	20344 <__aeabi_dcmpun>
   19266:	b948      	cbnz	r0, 1927c <uwb_rng_tof_to_meters+0x2c>
        return DPL_FLOAT64_NAN();
    }
    /* ToF * (299792458.0l/1.000293l) * (1.0/499.2e6/128.0) */
    dpl_float64_t tmp = DPL_FLOAT64_INIT((299792458.0l/1.000293l) * (1.0/499.2e6/128.0));
    return DPL_FLOAT64_MUL(ToF, tmp);
   19268:	a309      	add	r3, pc, #36	; (adr r3, 19290 <uwb_rng_tof_to_meters+0x40>)
   1926a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1926e:	4620      	mov	r0, r4
   19270:	4629      	mov	r1, r5
   19272:	f006 fdcd 	bl	1fe10 <__aeabi_dmul>
   19276:	ec41 0b10 	vmov	d0, r0, r1
}
   1927a:	bd38      	pop	{r3, r4, r5, pc}
        return DPL_FLOAT64_NAN();
   1927c:	ed9f 0b02 	vldr	d0, [pc, #8]	; 19288 <uwb_rng_tof_to_meters+0x38>
   19280:	e7fb      	b.n	1927a <uwb_rng_tof_to_meters+0x2a>
   19282:	bf00      	nop
   19284:	f3af 8000 	nop.w
   19288:	00000000 	.word	0x00000000
   1928c:	7ff80000 	.word	0x7ff80000
   19290:	e57d514d 	.word	0xe57d514d
   19294:	3f73363a 	.word	0x3f73363a

00019298 <calc_tof_ss>:

dpl_float64_t
calc_tof_ss(uint32_t response_timestamp, uint32_t request_timestamp,
            uint64_t transmission_timestamp,
            uint64_t reception_timestamp,  dpl_float64_t skew)
{
   19298:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1929c:	ec59 8b10 	vmov	r8, r9, d0
    dpl_float64_t ToF = DPL_FLOAT64_I32_TO_F64(0), tmpf;
    uint64_t T1R, T1r;

    T1R = (response_timestamp - request_timestamp);
   192a0:	1a46      	subs	r6, r0, r1
    T1r = (transmission_timestamp - reception_timestamp) & MASK32;
    tmpf = DPL_FLOAT64_MUL(DPL_FLOAT64_U64_TO_F64(T1r),
   192a2:	9806      	ldr	r0, [sp, #24]
   192a4:	1a10      	subs	r0, r2, r0
   192a6:	2100      	movs	r1, #0
   192a8:	f006 fd7c 	bl	1fda4 <__aeabi_ul2d>
   192ac:	4604      	mov	r4, r0
   192ae:	460d      	mov	r5, r1
   192b0:	4642      	mov	r2, r8
   192b2:	464b      	mov	r3, r9
   192b4:	2000      	movs	r0, #0
   192b6:	490d      	ldr	r1, [pc, #52]	; (192ec <calc_tof_ss+0x54>)
   192b8:	f006 fbf2 	bl	1faa0 <__aeabi_dsub>
   192bc:	4602      	mov	r2, r0
   192be:	460b      	mov	r3, r1
   192c0:	4620      	mov	r0, r4
   192c2:	4629      	mov	r1, r5
   192c4:	f006 fda4 	bl	1fe10 <__aeabi_dmul>
   192c8:	4604      	mov	r4, r0
   192ca:	460d      	mov	r5, r1
                                DPL_FLOAT64_SUB(DPL_FLOAT64_INIT(1.0), skew));
    ToF = DPL_FLOAT64_SUB(DPL_FLOAT64_U64_TO_F64(T1R), tmpf);
   192cc:	4630      	mov	r0, r6
   192ce:	f006 fd25 	bl	1fd1c <__aeabi_ui2d>
   192d2:	4622      	mov	r2, r4
   192d4:	462b      	mov	r3, r5
   192d6:	f006 fbe3 	bl	1faa0 <__aeabi_dsub>
    ToF = DPL_FLOAT64_DIV(ToF, DPL_FLOAT64_INIT(2.0));
   192da:	2200      	movs	r2, #0
   192dc:	4b04      	ldr	r3, [pc, #16]	; (192f0 <calc_tof_ss+0x58>)
   192de:	f006 fd97 	bl	1fe10 <__aeabi_dmul>

    return ToF;
}
   192e2:	ec41 0b10 	vmov	d0, r0, r1
   192e6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   192ea:	bf00      	nop
   192ec:	3ff00000 	.word	0x3ff00000
   192f0:	3fe00000 	.word	0x3fe00000
   192f4:	00000000 	.word	0x00000000

000192f8 <calc_tof_ds>:
dpl_float64_t
calc_tof_ds(uint32_t first_response_timestamp, uint32_t first_request_timestamp,
            uint64_t first_transmission_timestamp, uint64_t first_reception_timestamp,
            uint32_t response_timestamp, uint32_t request_timestamp,
            uint64_t transmission_timestamp, uint64_t reception_timestamp)
{
   192f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   192fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dpl_float64_t ToF = DPL_FLOAT64_I32_TO_F64(0);
    uint64_t T1R, T1r, T2R, T2r;
    int64_t nom, denom;

    T1R = (first_response_timestamp - first_request_timestamp);
   192fc:	1a43      	subs	r3, r0, r1
   192fe:	f04f 0c00 	mov.w	ip, #0
    T1r = (first_transmission_timestamp  - first_reception_timestamp) & MASK32;
   19302:	9906      	ldr	r1, [sp, #24]
   19304:	1a52      	subs	r2, r2, r1
    T2R = (response_timestamp - request_timestamp);
   19306:	9d08      	ldr	r5, [sp, #32]
   19308:	9909      	ldr	r1, [sp, #36]	; 0x24
   1930a:	1a6d      	subs	r5, r5, r1
    T2r = (transmission_timestamp - reception_timestamp) & MASK32;
   1930c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1930e:	1b0c      	subs	r4, r1, r4
    nom = T1R * T2R  - T1r * T2r;
   19310:	fba3 e105 	umull	lr, r1, r3, r5
   19314:	fba2 0604 	umull	r0, r6, r2, r4
   19318:	ebbe 0000 	subs.w	r0, lr, r0
   1931c:	eb61 0106 	sbc.w	r1, r1, r6
    denom = T1R + T2R  + T1r + T2r;
   19320:	195b      	adds	r3, r3, r5
   19322:	eb4c 0c0c 	adc.w	ip, ip, ip
   19326:	189b      	adds	r3, r3, r2
   19328:	f14c 0500 	adc.w	r5, ip, #0
   1932c:	191c      	adds	r4, r3, r4
   1932e:	f145 0500 	adc.w	r5, r5, #0

    if (denom == 0) {
   19332:	ea54 0305 	orrs.w	r3, r4, r5
   19336:	d010      	beq.n	1935a <calc_tof_ds+0x62>
        return DPL_FLOAT64_NAN();
    }

    ToF = DPL_FLOAT64_DIV(DPL_FLOAT64_I64_TO_F64(nom),
   19338:	f006 fd3c 	bl	1fdb4 <__aeabi_l2d>
   1933c:	4606      	mov	r6, r0
   1933e:	460f      	mov	r7, r1
   19340:	4620      	mov	r0, r4
   19342:	4629      	mov	r1, r5
   19344:	f006 fd36 	bl	1fdb4 <__aeabi_l2d>
   19348:	4602      	mov	r2, r0
   1934a:	460b      	mov	r3, r1
   1934c:	4630      	mov	r0, r6
   1934e:	4639      	mov	r1, r7
   19350:	f006 fe88 	bl	20064 <__aeabi_ddiv>
   19354:	ec41 0b10 	vmov	d0, r0, r1
                                                DPL_FLOAT64_I64_TO_F64(denom));
    return ToF;
}
   19358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DPL_FLOAT64_NAN();
   1935a:	ed9f 0b01 	vldr	d0, [pc, #4]	; 19360 <calc_tof_ds+0x68>
   1935e:	e7fb      	b.n	19358 <calc_tof_ds+0x60>
   19360:	00000000 	.word	0x00000000
   19364:	7ff80000 	.word	0x7ff80000

00019368 <rx_complete_cb>:
 */
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    struct uwb_rng_txd txd;
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   19368:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   1936c:	f648 0341 	movw	r3, #34881	; 0x8841
   19370:	429a      	cmp	r2, r3
   19372:	f040 8211 	bne.w	19798 <rx_complete_cb+0x430>
{
   19376:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1937a:	b089      	sub	sp, #36	; 0x24
   1937c:	4604      	mov	r4, r0
        return false;

    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1937e:	684d      	ldr	r5, [r1, #4]
    assert(rng);
   19380:	b18d      	cbz	r5, 193a6 <rx_complete_cb+0x3e>
   19382:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
    if(dpl_sem_get_count(&rng->sem) == 1) {
   19386:	2b01      	cmp	r3, #1
   19388:	f000 8208 	beq.w	1979c <rx_complete_cb+0x434>
        // unsolicited inbound
        return false;
    }

    switch(rng->code){
   1938c:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
   19390:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
   19394:	2b03      	cmp	r3, #3
   19396:	f200 8205 	bhi.w	197a4 <rx_complete_cb+0x43c>
   1939a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1939e:	000a      	.short	0x000a
   193a0:	015b00a0 	.word	0x015b00a0
   193a4:	01f0      	.short	0x01f0
    assert(rng);
   193a6:	2300      	movs	r3, #0
   193a8:	461a      	mov	r2, r3
   193aa:	4619      	mov	r1, r3
   193ac:	4618      	mov	r0, r3
   193ae:	f7ef fdd1 	bl	8f54 <__assert_func>
       case UWB_DATA_CODE_DS_TWR:
            {
                // This code executes on the device that is responding to a original request
                twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];  // Frame already read within loader layers.
   193b2:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   193b6:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
   193ba:	fbb3 f1f2 	udiv	r1, r3, r2
   193be:	fb02 3311 	mls	r3, r2, r1, r3
   193c2:	b29b      	uxth	r3, r3
   193c4:	3326      	adds	r3, #38	; 0x26
   193c6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   193ca:	685e      	ldr	r6, [r3, #4]

                if (inst->frame_len != sizeof(ieee_rng_request_frame_t))
   193cc:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   193d0:	2b0b      	cmp	r3, #11
   193d2:	d001      	beq.n	193d8 <rx_complete_cb+0x70>
            }
        default:
                return false;
                break;
    }
    return true;
   193d4:	2001      	movs	r0, #1
   193d6:	e1e2      	b.n	1979e <rx_complete_cb+0x436>
                uint64_t request_timestamp = inst->rxtimestamp;
   193d8:	f8d0 74e8 	ldr.w	r7, [r0, #1256]	; 0x4e8
   193dc:	f8d0 24ec 	ldr.w	r2, [r0, #1260]	; 0x4ec
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, request_timestamp, inst->frame_len);
   193e0:	9302      	str	r3, [sp, #8]
   193e2:	9700      	str	r7, [sp, #0]
   193e4:	9201      	str	r2, [sp, #4]
   193e6:	4aa4      	ldr	r2, [pc, #656]	; (19678 <rx_complete_cb+0x310>)
   193e8:	a904      	add	r1, sp, #16
   193ea:	4628      	mov	r0, r5
   193ec:	f7f1 fdf4 	bl	afd8 <uwb_rng_calc_rel_tx>
                frame->reception_timestamp =  (uint32_t) (request_timestamp & 0xFFFFFFFFUL);
   193f0:	f8c6 700b 	str.w	r7, [r6, #11]
                frame->transmission_timestamp =  (uint32_t) (txd.response_timestamp & 0xFFFFFFFFUL);
   193f4:	9b06      	ldr	r3, [sp, #24]
   193f6:	f8c6 300f 	str.w	r3, [r6, #15]
                frame->dst_address = frame->src_address;
   193fa:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   193fe:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   19402:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   19406:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->carrier_integrator  = - inst->carrier_integrator;
   1940a:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   1940e:	425b      	negs	r3, r3
   19410:	f8c6 301b 	str.w	r3, [r6, #27]
                frame->code = UWB_DATA_CODE_DS_TWR_T1;
   19414:	2700      	movs	r7, #0
   19416:	2321      	movs	r3, #33	; 0x21
   19418:	7273      	strb	r3, [r6, #9]
   1941a:	2301      	movs	r3, #1
   1941c:	72b3      	strb	r3, [r6, #10]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1941e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19420:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
   19424:	2313      	movs	r3, #19
   19426:	463a      	mov	r2, r7
   19428:	4631      	mov	r1, r6
   1942a:	4620      	mov	r0, r4
   1942c:	47c0      	blx	r8
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1942e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19430:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   19432:	463b      	mov	r3, r7
   19434:	463a      	mov	r2, r7
   19436:	2113      	movs	r1, #19
   19438:	4620      	mov	r0, r4
   1943a:	47b0      	blx	r6
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1943c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1943e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   19440:	2101      	movs	r1, #1
   19442:	4620      	mov	r0, r4
   19444:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   19446:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19448:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1944a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1944e:	4620      	mov	r0, r4
   19450:	4788      	blx	r1
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   19452:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   19456:	2101      	movs	r1, #1
   19458:	4620      	mov	r0, r4
   1945a:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
   1945c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1945e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19460:	4620      	mov	r0, r4
   19462:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error){
   19464:	f010 0f04 	tst.w	r0, #4
   19468:	d130      	bne.n	194cc <rx_complete_cb+0x164>
                uwb_set_wait4resp_delay(inst, g_config.tx_holdoff_delay -
   1946a:	4d83      	ldr	r5, [pc, #524]	; (19678 <rx_complete_cb+0x310>)
   1946c:	6869      	ldr	r1, [r5, #4]
                                        inst->config.rx.timeToRxStable);
   1946e:	f894 251b 	ldrb.w	r2, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   19472:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   19476:	1a89      	subs	r1, r1, r2
   19478:	4620      	mov	r0, r4
   1947a:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1947c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1947e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   19480:	2113      	movs	r1, #19
   19482:	4620      	mov	r0, r4
   19484:	4798      	blx	r3
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(ieee_rng_response_frame_t))) +
   19486:	f006 fc59 	bl	1fd3c <__aeabi_i2d>
   1948a:	a379      	add	r3, pc, #484	; (adr r3, 19670 <rx_complete_cb+0x308>)
   1948c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19490:	f006 fde8 	bl	20064 <__aeabi_ddiv>
   19494:	4606      	mov	r6, r0
   19496:	460f      	mov	r7, r1
   19498:	89a8      	ldrh	r0, [r5, #12]
   1949a:	f006 fc4f 	bl	1fd3c <__aeabi_i2d>
   1949e:	4632      	mov	r2, r6
   194a0:	463b      	mov	r3, r7
   194a2:	f006 faff 	bl	1faa4 <__adddf3>
   194a6:	4606      	mov	r6, r0
   194a8:	460f      	mov	r7, r1
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   194aa:	f894 051b 	ldrb.w	r0, [r4, #1307]	; 0x51b
   194ae:	f006 fc45 	bl	1fd3c <__aeabi_i2d>
   194b2:	4632      	mov	r2, r6
   194b4:	463b      	mov	r3, r7
   194b6:	f006 faf5 	bl	1faa4 <__adddf3>
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(ieee_rng_response_frame_t))) +
   194ba:	f006 ff81 	bl	203c0 <__aeabi_d2uiz>
   194be:	4601      	mov	r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   194c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   194c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   194c4:	4620      	mov	r0, r4
   194c6:	4798      	blx	r3
    return true;
   194c8:	2001      	movs	r0, #1
                break;
   194ca:	e168      	b.n	1979e <rx_complete_cb+0x436>
                    DS_STATS_INC(start_tx_error);
   194cc:	4a6b      	ldr	r2, [pc, #428]	; (1967c <rx_complete_cb+0x314>)
   194ce:	6993      	ldr	r3, [r2, #24]
   194d0:	3301      	adds	r3, #1
   194d2:	6193      	str	r3, [r2, #24]
    return (dpl_error_t)os_sem_release(&sem->sem);
   194d4:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   194d8:	f7f0 fc4e 	bl	9d78 <os_sem_release>
   194dc:	e7c5      	b.n	1946a <rx_complete_cb+0x102>
                if(inst->status.lde_error)
   194de:	f890 3509 	ldrb.w	r3, [r0, #1289]	; 0x509
   194e2:	f013 0f04 	tst.w	r3, #4
   194e6:	f040 815f 	bne.w	197a8 <rx_complete_cb+0x440>
                if (inst->frame_len != sizeof(ieee_rng_response_frame_t))
   194ea:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   194ee:	2b13      	cmp	r3, #19
   194f0:	d001      	beq.n	194f6 <rx_complete_cb+0x18e>
    return true;
   194f2:	2001      	movs	r0, #1
   194f4:	e153      	b.n	1979e <rx_complete_cb+0x436>
                twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   194f6:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   194fa:	f8b5 107a 	ldrh.w	r1, [r5, #122]	; 0x7a
   194fe:	fbb3 f2f1 	udiv	r2, r3, r1
   19502:	fb01 3212 	mls	r2, r1, r2, r3
   19506:	b292      	uxth	r2, r2
   19508:	3226      	adds	r2, #38	; 0x26
   1950a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   1950e:	6856      	ldr	r6, [r2, #4]
                twr_frame_t * next_frame = rng->frames[(rng->idx+1)%rng->nframes];
   19510:	3301      	adds	r3, #1
   19512:	fb93 f2f1 	sdiv	r2, r3, r1
   19516:	fb01 3312 	mls	r3, r1, r2, r3
   1951a:	3326      	adds	r3, #38	; 0x26
   1951c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   19520:	685f      	ldr	r7, [r3, #4]
                uint64_t request_timestamp = inst->rxtimestamp;
   19522:	f8d0 84e8 	ldr.w	r8, [r0, #1256]	; 0x4e8
   19526:	f8d0 94ec 	ldr.w	r9, [r0, #1260]	; 0x4ec
    return (dev->uw_funcs->uf_read_txtime_lo32(dev));
   1952a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1952c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1952e:	4798      	blx	r3
                frame->request_timestamp = next_frame->request_timestamp = uwb_read_txtime_lo32(inst); // This corresponds to when the original request was actually sent
   19530:	f8c7 0013 	str.w	r0, [r7, #19]
   19534:	f8c6 0013 	str.w	r0, [r6, #19]
                frame->response_timestamp = next_frame->response_timestamp = (uint32_t)(request_timestamp & 0xFFFFFFFFUL); // This corresponds to the response just received
   19538:	f8c7 8017 	str.w	r8, [r7, #23]
   1953c:	f8c6 8017 	str.w	r8, [r6, #23]
                uint16_t src_address = frame->src_address;
   19540:	f8b6 2007 	ldrh.w	r2, [r6, #7]
                uint8_t seq_num = frame->seq_num;
   19544:	78b3      	ldrb	r3, [r6, #2]
                frame->carrier_integrator  = inst->carrier_integrator;
   19546:	f8d4 14f0 	ldr.w	r1, [r4, #1264]	; 0x4f0
   1954a:	f8c6 101b 	str.w	r1, [r6, #27]
                frame->dst_address = src_address;
   1954e:	f8a7 2005 	strh.w	r2, [r7, #5]
                frame->src_address = inst->my_short_address;
   19552:	f8b4 24b6 	ldrh.w	r2, [r4, #1206]	; 0x4b6
   19556:	f8a7 2007 	strh.w	r2, [r7, #7]
                frame->seq_num = seq_num + 1;
   1955a:	3301      	adds	r3, #1
   1955c:	70bb      	strb	r3, [r7, #2]
                frame->code = UWB_DATA_CODE_DS_TWR_T2;
   1955e:	2322      	movs	r3, #34	; 0x22
   19560:	727b      	strb	r3, [r7, #9]
   19562:	2301      	movs	r3, #1
   19564:	72bb      	strb	r3, [r7, #10]
                if(inst->status.lde_error)
   19566:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1956a:	f013 0f04 	tst.w	r3, #4
   1956e:	d001      	beq.n	19574 <rx_complete_cb+0x20c>
    return true;
   19570:	2001      	movs	r0, #1
   19572:	e114      	b.n	1979e <rx_complete_cb+0x436>
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, request_timestamp, inst->frame_len);
   19574:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   19578:	9302      	str	r3, [sp, #8]
   1957a:	f8cd 8000 	str.w	r8, [sp]
   1957e:	f8cd 9004 	str.w	r9, [sp, #4]
   19582:	4a3d      	ldr	r2, [pc, #244]	; (19678 <rx_complete_cb+0x310>)
   19584:	a904      	add	r1, sp, #16
   19586:	4628      	mov	r0, r5
   19588:	f7f1 fd26 	bl	afd8 <uwb_rng_calc_rel_tx>
                frame->reception_timestamp =  (uint32_t) (request_timestamp & 0xFFFFFFFFUL);
   1958c:	f8c7 800b 	str.w	r8, [r7, #11]
                frame->transmission_timestamp =  (uint32_t) (txd.response_timestamp & 0xFFFFFFFFUL);
   19590:	9b06      	ldr	r3, [sp, #24]
   19592:	f8c7 300f 	str.w	r3, [r7, #15]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   19596:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19598:	6c5e      	ldr	r6, [r3, #68]	; 0x44
   1959a:	231f      	movs	r3, #31
   1959c:	2200      	movs	r2, #0
   1959e:	4639      	mov	r1, r7
   195a0:	4620      	mov	r0, r4
   195a2:	47b0      	blx	r6
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   195a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   195a6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   195a8:	2300      	movs	r3, #0
   195aa:	461a      	mov	r2, r3
   195ac:	211f      	movs	r1, #31
   195ae:	4620      	mov	r0, r4
   195b0:	47b0      	blx	r6
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   195b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   195b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   195b6:	2101      	movs	r1, #1
   195b8:	4620      	mov	r0, r4
   195ba:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   195bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   195be:	6b59      	ldr	r1, [r3, #52]	; 0x34
   195c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   195c4:	4620      	mov	r0, r4
   195c6:	4788      	blx	r1
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   195c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   195ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   195cc:	2101      	movs	r1, #1
   195ce:	4620      	mov	r0, r4
   195d0:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
   195d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   195d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   195d6:	4620      	mov	r0, r4
   195d8:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error){
   195da:	f010 0f04 	tst.w	r0, #4
   195de:	d130      	bne.n	19642 <rx_complete_cb+0x2da>
                uwb_set_wait4resp_delay(inst, g_config.tx_holdoff_delay -
   195e0:	4d25      	ldr	r5, [pc, #148]	; (19678 <rx_complete_cb+0x310>)
   195e2:	6869      	ldr	r1, [r5, #4]
                                        inst->config.rx.timeToRxStable);
   195e4:	f894 251b 	ldrb.w	r2, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   195e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   195ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   195ec:	1a89      	subs	r1, r1, r2
   195ee:	4620      	mov	r0, r4
   195f0:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   195f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   195f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   195f6:	211f      	movs	r1, #31
   195f8:	4620      	mov	r0, r4
   195fa:	4798      	blx	r3
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(twr_frame_final_t))) +
   195fc:	f006 fb9e 	bl	1fd3c <__aeabi_i2d>
   19600:	a31b      	add	r3, pc, #108	; (adr r3, 19670 <rx_complete_cb+0x308>)
   19602:	e9d3 2300 	ldrd	r2, r3, [r3]
   19606:	f006 fd2d 	bl	20064 <__aeabi_ddiv>
   1960a:	4606      	mov	r6, r0
   1960c:	460f      	mov	r7, r1
   1960e:	89a8      	ldrh	r0, [r5, #12]
   19610:	f006 fb94 	bl	1fd3c <__aeabi_i2d>
   19614:	4632      	mov	r2, r6
   19616:	463b      	mov	r3, r7
   19618:	f006 fa44 	bl	1faa4 <__adddf3>
   1961c:	4606      	mov	r6, r0
   1961e:	460f      	mov	r7, r1
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   19620:	f894 051b 	ldrb.w	r0, [r4, #1307]	; 0x51b
   19624:	f006 fb8a 	bl	1fd3c <__aeabi_i2d>
   19628:	4632      	mov	r2, r6
   1962a:	463b      	mov	r3, r7
   1962c:	f006 fa3a 	bl	1faa4 <__adddf3>
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(twr_frame_final_t))) +
   19630:	f006 fec6 	bl	203c0 <__aeabi_d2uiz>
   19634:	4601      	mov	r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   19636:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1963a:	4620      	mov	r0, r4
   1963c:	4798      	blx	r3
    return true;
   1963e:	2001      	movs	r0, #1
                break;
   19640:	e0ad      	b.n	1979e <rx_complete_cb+0x436>
                    DS_STATS_INC(start_tx_error);
   19642:	4a0e      	ldr	r2, [pc, #56]	; (1967c <rx_complete_cb+0x314>)
   19644:	6993      	ldr	r3, [r2, #24]
   19646:	3301      	adds	r3, #1
   19648:	6193      	str	r3, [r2, #24]
   1964a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   1964e:	f7f0 fb93 	bl	9d78 <os_sem_release>
   19652:	e7c5      	b.n	195e0 <rx_complete_cb+0x278>
                if(inst->status.lde_error)
   19654:	f890 3509 	ldrb.w	r3, [r0, #1289]	; 0x509
   19658:	f013 0f04 	tst.w	r3, #4
   1965c:	f040 80a6 	bne.w	197ac <rx_complete_cb+0x444>
                if (inst->frame_len != sizeof(twr_frame_final_t))
   19660:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   19664:	2b1f      	cmp	r3, #31
   19666:	d00b      	beq.n	19680 <rx_complete_cb+0x318>
    return true;
   19668:	2001      	movs	r0, #1
   1966a:	e098      	b.n	1979e <rx_complete_cb+0x436>
   1966c:	f3af 8000 	nop.w
   19670:	90690691 	.word	0x90690691
   19674:	3ff06906 	.word	0x3ff06906
   19678:	200029c8 	.word	0x200029c8
   1967c:	20006720 	.word	0x20006720
                twr_frame_t * previous_frame = rng->frames[(uint16_t)(rng->idx-1)%rng->nframes];
   19680:	f8b5 2076 	ldrh.w	r2, [r5, #118]	; 0x76
   19684:	1e53      	subs	r3, r2, #1
   19686:	b29b      	uxth	r3, r3
   19688:	f8b5 107a 	ldrh.w	r1, [r5, #122]	; 0x7a
   1968c:	fbb3 f0f1 	udiv	r0, r3, r1
   19690:	fb01 3310 	mls	r3, r1, r0, r3
   19694:	b29b      	uxth	r3, r3
   19696:	3326      	adds	r3, #38	; 0x26
   19698:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1969c:	6858      	ldr	r0, [r3, #4]
                twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   1969e:	fbb2 f3f1 	udiv	r3, r2, r1
   196a2:	fb01 2313 	mls	r3, r1, r3, r2
   196a6:	b29b      	uxth	r3, r3
   196a8:	3326      	adds	r3, #38	; 0x26
   196aa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   196ae:	685e      	ldr	r6, [r3, #4]
                previous_frame->request_timestamp = frame->request_timestamp;
   196b0:	f8d6 3013 	ldr.w	r3, [r6, #19]
   196b4:	f8c0 3013 	str.w	r3, [r0, #19]
                previous_frame->response_timestamp = frame->response_timestamp;
   196b8:	f8d6 3017 	ldr.w	r3, [r6, #23]
   196bc:	f8c0 3017 	str.w	r3, [r0, #23]
                uint64_t request_timestamp = inst->rxtimestamp;
   196c0:	f504 689e 	add.w	r8, r4, #1264	; 0x4f0
   196c4:	f8d4 74e8 	ldr.w	r7, [r4, #1256]	; 0x4e8
    return (dev->uw_funcs->uf_read_txtime_lo32(dev));
   196c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   196ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   196cc:	4620      	mov	r0, r4
   196ce:	4798      	blx	r3
                frame->request_timestamp = uwb_read_txtime_lo32(inst);   // This corresponds to when the original request was actually sent
   196d0:	f8c6 0013 	str.w	r0, [r6, #19]
                frame->response_timestamp = (uint32_t) (request_timestamp & 0xFFFFFFFFUL);  // This corresponds to the response just received
   196d4:	f8c6 7017 	str.w	r7, [r6, #23]
                frame->dst_address = frame->src_address;
   196d8:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   196dc:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   196e0:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   196e4:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->carrier_integrator  = - inst->carrier_integrator;
   196e8:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   196ec:	425b      	negs	r3, r3
   196ee:	f8c6 301b 	str.w	r3, [r6, #27]
                frame->code = UWB_DATA_CODE_DS_TWR_FINAL;
   196f2:	2700      	movs	r7, #0
   196f4:	2323      	movs	r3, #35	; 0x23
   196f6:	7273      	strb	r3, [r6, #9]
   196f8:	2301      	movs	r3, #1
   196fa:	72b3      	strb	r3, [r6, #10]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   196fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   196fe:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
   19702:	231f      	movs	r3, #31
   19704:	463a      	mov	r2, r7
   19706:	4631      	mov	r1, r6
   19708:	4620      	mov	r0, r4
   1970a:	47c8      	blx	r9
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1970c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1970e:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   19710:	463b      	mov	r3, r7
   19712:	463a      	mov	r2, r7
   19714:	211f      	movs	r1, #31
   19716:	4620      	mov	r0, r4
   19718:	47b0      	blx	r6
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, inst->rxtimestamp, inst->frame_len);
   1971a:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   1971e:	9302      	str	r3, [sp, #8]
   19720:	e958 2302 	ldrd	r2, r3, [r8, #-8]
   19724:	e9cd 2300 	strd	r2, r3, [sp]
   19728:	4a21      	ldr	r2, [pc, #132]	; (197b0 <rx_complete_cb+0x448>)
   1972a:	a904      	add	r1, sp, #16
   1972c:	4628      	mov	r0, r5
   1972e:	f7f1 fc53 	bl	afd8 <uwb_rng_calc_rel_tx>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   19732:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19734:	6b59      	ldr	r1, [r3, #52]	; 0x34
   19736:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1973a:	4620      	mov	r0, r4
   1973c:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   1973e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19742:	4620      	mov	r0, r4
   19744:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error) {
   19746:	f010 0f04 	tst.w	r0, #4
   1974a:	d10b      	bne.n	19764 <rx_complete_cb+0x3fc>
                    DS_STATS_INC(complete);
   1974c:	4a19      	ldr	r2, [pc, #100]	; (197b4 <rx_complete_cb+0x44c>)
   1974e:	6953      	ldr	r3, [r2, #20]
   19750:	3301      	adds	r3, #1
   19752:	6153      	str	r3, [r2, #20]
                    rng->control.complete_after_tx = 1;
   19754:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   19758:	f043 0302 	orr.w	r3, r3, #2
   1975c:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
    return true;
   19760:	2001      	movs	r0, #1
   19762:	e01c      	b.n	1979e <rx_complete_cb+0x436>
                    DS_STATS_INC(start_tx_error);
   19764:	4a13      	ldr	r2, [pc, #76]	; (197b4 <rx_complete_cb+0x44c>)
   19766:	6993      	ldr	r3, [r2, #24]
   19768:	3301      	adds	r3, #1
   1976a:	6193      	str	r3, [r2, #24]
   1976c:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   19770:	f7f0 fb02 	bl	9d78 <os_sem_release>
                    rng_issue_complete(inst);
   19774:	4620      	mov	r0, r4
   19776:	f7f1 ff87 	bl	b688 <rng_issue_complete>
    return true;
   1977a:	2001      	movs	r0, #1
   1977c:	e00f      	b.n	1979e <rx_complete_cb+0x436>
                DS_STATS_INC(complete);
   1977e:	4a0d      	ldr	r2, [pc, #52]	; (197b4 <rx_complete_cb+0x44c>)
   19780:	6953      	ldr	r3, [r2, #20]
   19782:	3301      	adds	r3, #1
   19784:	6153      	str	r3, [r2, #20]
   19786:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   1978a:	f7f0 faf5 	bl	9d78 <os_sem_release>
                rng_issue_complete(inst);
   1978e:	4620      	mov	r0, r4
   19790:	f7f1 ff7a 	bl	b688 <rng_issue_complete>
    return true;
   19794:	2001      	movs	r0, #1
                break;
   19796:	e002      	b.n	1979e <rx_complete_cb+0x436>
        return false;
   19798:	2000      	movs	r0, #0
}
   1979a:	4770      	bx	lr
        return false;
   1979c:	2000      	movs	r0, #0
}
   1979e:	b009      	add	sp, #36	; 0x24
   197a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(rng->code){
   197a4:	2000      	movs	r0, #0
   197a6:	e7fa      	b.n	1979e <rx_complete_cb+0x436>
    return true;
   197a8:	2001      	movs	r0, #1
   197aa:	e7f8      	b.n	1979e <rx_complete_cb+0x436>
   197ac:	2001      	movs	r0, #1
   197ae:	e7f6      	b.n	1979e <rx_complete_cb+0x436>
   197b0:	200029c8 	.word	0x200029c8
   197b4:	20006720 	.word	0x20006720

000197b8 <twr_ds_pkg_init>:
{
   197b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   197ba:	b083      	sub	sp, #12
    printf("{\"utime\": %"PRIu32",\"msg\": \"twr_ds_pkg_init\"}\n",
   197bc:	f7f3 f8e0 	bl	c980 <dpl_cputime_get32>
   197c0:	4601      	mov	r1, r0
   197c2:	481d      	ldr	r0, [pc, #116]	; (19838 <twr_ds_pkg_init+0x80>)
   197c4:	f7f3 f876 	bl	c8b4 <printf>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   197c8:	2400      	movs	r4, #0
   197ca:	b174      	cbz	r4, 197ea <twr_ds_pkg_init+0x32>
    rc = stats_init(
   197cc:	2202      	movs	r2, #2
   197ce:	9200      	str	r2, [sp, #0]
   197d0:	4b1a      	ldr	r3, [pc, #104]	; (1983c <twr_ds_pkg_init+0x84>)
   197d2:	2104      	movs	r1, #4
   197d4:	481a      	ldr	r0, [pc, #104]	; (19840 <twr_ds_pkg_init+0x88>)
   197d6:	f7f5 ffa7 	bl	f728 <stats_init>
    assert(rc == 0);
   197da:	bb00      	cbnz	r0, 1981e <twr_ds_pkg_init+0x66>
    rc = stats_register("twr_ds", STATS_HDR(g_twr_ds_stat));
   197dc:	4918      	ldr	r1, [pc, #96]	; (19840 <twr_ds_pkg_init+0x88>)
   197de:	4819      	ldr	r0, [pc, #100]	; (19844 <twr_ds_pkg_init+0x8c>)
   197e0:	f7f6 f82c 	bl	f83c <stats_register>
    assert(rc == 0);
   197e4:	bb08      	cbnz	r0, 1982a <twr_ds_pkg_init+0x72>
}
   197e6:	b003      	add	sp, #12
   197e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        udev = uwb_dev_idx_lookup(i);
   197ea:	4620      	mov	r0, r4
   197ec:	f7ef f908 	bl	8a00 <uwb_dev_idx_lookup>
        if (!udev) {
   197f0:	4607      	mov	r7, r0
   197f2:	b190      	cbz	r0, 1981a <twr_ds_pkg_init+0x62>
        g_cbs[i].inst_ptr = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
   197f4:	2104      	movs	r1, #4
   197f6:	f7ef f988 	bl	8b0a <uwb_mac_find_cb_inst_ptr>
   197fa:	0126      	lsls	r6, r4, #4
   197fc:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
   19800:	4b11      	ldr	r3, [pc, #68]	; (19848 <twr_ds_pkg_init+0x90>)
   19802:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   19806:	6068      	str	r0, [r5, #4]
        uwb_mac_append_interface(udev, &g_cbs[i]);
   19808:	4629      	mov	r1, r5
   1980a:	4638      	mov	r0, r7
   1980c:	f7ef f928 	bl	8a60 <uwb_mac_append_interface>
        uwb_rng_append_config(g_cbs[i].inst_ptr, &g_rng_cfgs[i]);
   19810:	490e      	ldr	r1, [pc, #56]	; (1984c <twr_ds_pkg_init+0x94>)
   19812:	4431      	add	r1, r6
   19814:	6868      	ldr	r0, [r5, #4]
   19816:	f7f1 fba7 	bl	af68 <uwb_rng_append_config>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1981a:	3401      	adds	r4, #1
   1981c:	e7d5      	b.n	197ca <twr_ds_pkg_init+0x12>
    assert(rc == 0);
   1981e:	2300      	movs	r3, #0
   19820:	461a      	mov	r2, r3
   19822:	4619      	mov	r1, r3
   19824:	4618      	mov	r0, r3
   19826:	f7ef fb95 	bl	8f54 <__assert_func>
    assert(rc == 0);
   1982a:	2300      	movs	r3, #0
   1982c:	461a      	mov	r2, r3
   1982e:	4619      	mov	r1, r3
   19830:	4618      	mov	r0, r3
   19832:	f7ef fb8f 	bl	8f54 <__assert_func>
   19836:	bf00      	nop
   19838:	00023688 	.word	0x00023688
   1983c:	000236cc 	.word	0x000236cc
   19840:	20006720 	.word	0x20006720
   19844:	000236b4 	.word	0x000236b4
   19848:	2000298c 	.word	0x2000298c
   1984c:	200029d8 	.word	0x200029d8

00019850 <twr_ds_free>:
twr_ds_free(struct uwb_dev * inst){
   19850:	b508      	push	{r3, lr}
    assert(inst);
   19852:	b118      	cbz	r0, 1985c <twr_ds_free+0xc>
    uwb_mac_remove_interface(inst, UWBEXT_RNG_DS);
   19854:	2108      	movs	r1, #8
   19856:	f7ef f928 	bl	8aaa <uwb_mac_remove_interface>
}
   1985a:	bd08      	pop	{r3, pc}
    assert(inst);
   1985c:	2300      	movs	r3, #0
   1985e:	461a      	mov	r2, r3
   19860:	4619      	mov	r1, r3
   19862:	4618      	mov	r0, r3
   19864:	f7ef fb76 	bl	8f54 <__assert_func>

00019868 <twr_ds_pkg_down>:
{
   19868:	b538      	push	{r3, r4, r5, lr}
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1986a:	2400      	movs	r4, #0
   1986c:	b10c      	cbz	r4, 19872 <twr_ds_pkg_down+0xa>
}
   1986e:	2000      	movs	r0, #0
   19870:	bd38      	pop	{r3, r4, r5, pc}
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
   19872:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   19876:	009a      	lsls	r2, r3, #2
   19878:	4b07      	ldr	r3, [pc, #28]	; (19898 <twr_ds_pkg_down+0x30>)
   1987a:	4413      	add	r3, r2
   1987c:	685d      	ldr	r5, [r3, #4]
        if (!rng) continue;
   1987e:	b145      	cbz	r5, 19892 <twr_ds_pkg_down+0x2a>
        uwb_rng_remove_config(g_cbs[i].inst_ptr, g_rng_cfgs[i].rng_code);
   19880:	0123      	lsls	r3, r4, #4
   19882:	4a06      	ldr	r2, [pc, #24]	; (1989c <twr_ds_pkg_down+0x34>)
   19884:	5ad1      	ldrh	r1, [r2, r3]
   19886:	4628      	mov	r0, r5
   19888:	f7f1 fb87 	bl	af9a <uwb_rng_remove_config>
        twr_ds_free(rng->dev_inst);
   1988c:	6828      	ldr	r0, [r5, #0]
   1988e:	f7ff ffdf 	bl	19850 <twr_ds_free>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   19892:	3401      	adds	r4, #1
   19894:	e7ea      	b.n	1986c <twr_ds_pkg_down+0x4>
   19896:	bf00      	nop
   19898:	2000298c 	.word	0x2000298c
   1989c:	200029d8 	.word	0x200029d8

000198a0 <rx_complete_cb>:
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    struct uwb_rng_txd txd;
    struct uwb_mac_interface * cbs_i;
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   198a0:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   198a4:	f648 0341 	movw	r3, #34881	; 0x8841
   198a8:	429a      	cmp	r2, r3
   198aa:	f040 821e 	bne.w	19cea <rx_complete_cb+0x44a>
{
   198ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   198b2:	b089      	sub	sp, #36	; 0x24
   198b4:	4604      	mov	r4, r0
        return false;

    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   198b6:	684e      	ldr	r6, [r1, #4]
   198b8:	f8b6 3052 	ldrh.w	r3, [r6, #82]	; 0x52
    if(dpl_sem_get_count(&rng->sem) == 1){
   198bc:	2b01      	cmp	r3, #1
   198be:	f000 8216 	beq.w	19cee <rx_complete_cb+0x44e>
        // unsolicited inbound
        return false;
    }

    switch(rng->code){
   198c2:	f8b6 3048 	ldrh.w	r3, [r6, #72]	; 0x48
   198c6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
   198ca:	2b03      	cmp	r3, #3
   198cc:	f200 8213 	bhi.w	19cf6 <rx_complete_cb+0x456>
   198d0:	e8df f013 	tbh	[pc, r3, lsl #1]
   198d4:	00960004 	.word	0x00960004
   198d8:	01fe0166 	.word	0x01fe0166
        case UWB_DATA_CODE_DS_TWR_EXT:
            {
                // This code executes on the device that is responding to a original request

                twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   198dc:	f8b6 3076 	ldrh.w	r3, [r6, #118]	; 0x76
   198e0:	f8b6 207a 	ldrh.w	r2, [r6, #122]	; 0x7a
   198e4:	fbb3 f1f2 	udiv	r1, r3, r2
   198e8:	fb02 3311 	mls	r3, r2, r1, r3
   198ec:	b29b      	uxth	r3, r3
   198ee:	3326      	adds	r3, #38	; 0x26
   198f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   198f4:	685d      	ldr	r5, [r3, #4]

                uint64_t request_timestamp = inst->rxtimestamp;
   198f6:	f8d0 74e8 	ldr.w	r7, [r0, #1256]	; 0x4e8
   198fa:	f8d0 34ec 	ldr.w	r3, [r0, #1260]	; 0x4ec
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, request_timestamp, inst->frame_len);
   198fe:	f8b0 24e2 	ldrh.w	r2, [r0, #1250]	; 0x4e2
   19902:	9202      	str	r2, [sp, #8]
   19904:	9700      	str	r7, [sp, #0]
   19906:	9301      	str	r3, [sp, #4]
   19908:	4aa3      	ldr	r2, [pc, #652]	; (19b98 <rx_complete_cb+0x2f8>)
   1990a:	a904      	add	r1, sp, #16
   1990c:	4630      	mov	r0, r6
   1990e:	f7f1 fb63 	bl	afd8 <uwb_rng_calc_rel_tx>

                frame->reception_timestamp =  (uint32_t) (request_timestamp & 0xFFFFFFFFUL);
   19912:	f8c5 700b 	str.w	r7, [r5, #11]
                frame->transmission_timestamp =  (uint32_t) (txd.response_timestamp & 0xFFFFFFFFUL);
   19916:	9b06      	ldr	r3, [sp, #24]
   19918:	f8c5 300f 	str.w	r3, [r5, #15]

                frame->dst_address = frame->src_address;
   1991c:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   19920:	f8a5 3005 	strh.w	r3, [r5, #5]
                frame->src_address = inst->my_short_address;
   19924:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   19928:	f8a5 3007 	strh.w	r3, [r5, #7]
#if MYNEWT_VAL(UWB_WCS_ENABLED)
                frame->carrier_integrator  = 0.0l;
#else
                frame->carrier_integrator  = - inst->carrier_integrator;
   1992c:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   19930:	425b      	negs	r3, r3
   19932:	f8c5 301b 	str.w	r3, [r5, #27]
#endif
                frame->code = UWB_DATA_CODE_DS_TWR_EXT_T1;
   19936:	2700      	movs	r7, #0
   19938:	2326      	movs	r3, #38	; 0x26
   1993a:	726b      	strb	r3, [r5, #9]
   1993c:	2301      	movs	r3, #1
   1993e:	72ab      	strb	r3, [r5, #10]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   19940:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19942:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
   19946:	2313      	movs	r3, #19
   19948:	463a      	mov	r2, r7
   1994a:	4629      	mov	r1, r5
   1994c:	4620      	mov	r0, r4
   1994e:	47c0      	blx	r8
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   19950:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19952:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   19954:	463b      	mov	r3, r7
   19956:	463a      	mov	r2, r7
   19958:	2113      	movs	r1, #19
   1995a:	4620      	mov	r0, r4
   1995c:	47a8      	blx	r5
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1995e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   19962:	2101      	movs	r1, #1
   19964:	4620      	mov	r0, r4
   19966:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   19968:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1996a:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1996c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19970:	4620      	mov	r0, r4
   19972:	4788      	blx	r1
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   19974:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   19978:	2101      	movs	r1, #1
   1997a:	4620      	mov	r0, r4
   1997c:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
   1997e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19982:	4620      	mov	r0, r4
   19984:	4798      	blx	r3

                uwb_set_delay_start(inst, txd.response_tx_delay);
                // Disable default behavor, do not RXENAB on RXFCG thereby avoiding rx timeout events
                uwb_set_rxauto_disable(inst, true);

                if (uwb_start_tx(inst).start_tx_error){
   19986:	f010 0f04 	tst.w	r0, #4
   1998a:	d130      	bne.n	199ee <rx_complete_cb+0x14e>
                    DS_STATS_INC(tx_error);
                    dpl_sem_release(&rng->sem);
                }

                /* Setup when to listen for response, relative the end of our transmitted frame */
                uwb_set_wait4resp_delay(inst, g_config.tx_holdoff_delay -
   1998c:	4d82      	ldr	r5, [pc, #520]	; (19b98 <rx_complete_cb+0x2f8>)
   1998e:	6869      	ldr	r1, [r5, #4]
                                        inst->config.rx.timeToRxStable);
   19990:	f894 251b 	ldrb.w	r2, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   19994:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   19998:	1a89      	subs	r1, r1, r2
   1999a:	4620      	mov	r0, r4
   1999c:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1999e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   199a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   199a2:	2120      	movs	r1, #32
   199a4:	4620      	mov	r0, r4
   199a6:	4798      	blx	r3
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, TWR_EXT_FRAME_SIZE)) +
   199a8:	f006 f9c8 	bl	1fd3c <__aeabi_i2d>
   199ac:	a378      	add	r3, pc, #480	; (adr r3, 19b90 <rx_complete_cb+0x2f0>)
   199ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   199b2:	f006 fb57 	bl	20064 <__aeabi_ddiv>
   199b6:	4606      	mov	r6, r0
   199b8:	460f      	mov	r7, r1
   199ba:	89a8      	ldrh	r0, [r5, #12]
   199bc:	f006 f9be 	bl	1fd3c <__aeabi_i2d>
   199c0:	4632      	mov	r2, r6
   199c2:	463b      	mov	r3, r7
   199c4:	f006 f86e 	bl	1faa4 <__adddf3>
   199c8:	4606      	mov	r6, r0
   199ca:	460f      	mov	r7, r1
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   199cc:	f894 051b 	ldrb.w	r0, [r4, #1307]	; 0x51b
   199d0:	f006 f9b4 	bl	1fd3c <__aeabi_i2d>
   199d4:	4632      	mov	r2, r6
   199d6:	463b      	mov	r3, r7
   199d8:	f006 f864 	bl	1faa4 <__adddf3>
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, TWR_EXT_FRAME_SIZE)) +
   199dc:	f006 fcf0 	bl	203c0 <__aeabi_d2uiz>
   199e0:	4601      	mov	r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   199e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   199e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   199e6:	4620      	mov	r0, r4
   199e8:	4798      	blx	r3
            }
        default:
                return false;
                break;
    }
    return true;
   199ea:	2001      	movs	r0, #1
                break;
   199ec:	e180      	b.n	19cf0 <rx_complete_cb+0x450>
                    DS_STATS_INC(tx_error);
   199ee:	4a6b      	ldr	r2, [pc, #428]	; (19b9c <rx_complete_cb+0x2fc>)
   199f0:	6993      	ldr	r3, [r2, #24]
   199f2:	3301      	adds	r3, #1
   199f4:	6193      	str	r3, [r2, #24]
   199f6:	f106 004c 	add.w	r0, r6, #76	; 0x4c
   199fa:	f7f0 f9bd 	bl	9d78 <os_sem_release>
   199fe:	e7c5      	b.n	1998c <rx_complete_cb+0xec>
                if (inst->frame_len != sizeof(ieee_rng_response_frame_t))
   19a00:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   19a04:	2b13      	cmp	r3, #19
   19a06:	d001      	beq.n	19a0c <rx_complete_cb+0x16c>
    return true;
   19a08:	2001      	movs	r0, #1
   19a0a:	e171      	b.n	19cf0 <rx_complete_cb+0x450>
                twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   19a0c:	f8b6 3076 	ldrh.w	r3, [r6, #118]	; 0x76
   19a10:	f8b6 107a 	ldrh.w	r1, [r6, #122]	; 0x7a
   19a14:	fbb3 f2f1 	udiv	r2, r3, r1
   19a18:	fb01 3212 	mls	r2, r1, r2, r3
   19a1c:	b292      	uxth	r2, r2
   19a1e:	3226      	adds	r2, #38	; 0x26
   19a20:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   19a24:	6855      	ldr	r5, [r2, #4]
                twr_frame_t * next_frame = rng->frames[(rng->idx+1)%rng->nframes];
   19a26:	3301      	adds	r3, #1
   19a28:	fb93 f2f1 	sdiv	r2, r3, r1
   19a2c:	fb01 3312 	mls	r3, r1, r2, r3
   19a30:	3326      	adds	r3, #38	; 0x26
   19a32:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   19a36:	685f      	ldr	r7, [r3, #4]
                uint64_t request_timestamp = inst->rxtimestamp;
   19a38:	f8d0 84e8 	ldr.w	r8, [r0, #1256]	; 0x4e8
   19a3c:	f8d0 94ec 	ldr.w	r9, [r0, #1260]	; 0x4ec
    return (dev->uw_funcs->uf_read_txtime_lo32(dev));
   19a40:	6a43      	ldr	r3, [r0, #36]	; 0x24
   19a42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   19a44:	4798      	blx	r3
                frame->request_timestamp = next_frame->request_timestamp = uwb_read_txtime_lo32(inst); // This corresponds to when the original request was actually sent
   19a46:	f8c7 0013 	str.w	r0, [r7, #19]
   19a4a:	f8c5 0013 	str.w	r0, [r5, #19]
                frame->response_timestamp = next_frame->response_timestamp = (uint32_t)(request_timestamp & 0xFFFFFFFFUL); // This corresponds to the response just received
   19a4e:	f8c7 8017 	str.w	r8, [r7, #23]
   19a52:	f8c5 8017 	str.w	r8, [r5, #23]
                uint16_t src_address = frame->src_address;
   19a56:	f8b5 2007 	ldrh.w	r2, [r5, #7]
                uint8_t seq_num = frame->seq_num;
   19a5a:	78ab      	ldrb	r3, [r5, #2]
                frame->carrier_integrator  = inst->carrier_integrator;
   19a5c:	f8d4 14f0 	ldr.w	r1, [r4, #1264]	; 0x4f0
   19a60:	f8c5 101b 	str.w	r1, [r5, #27]
                frame->dst_address = src_address;
   19a64:	f8a7 2005 	strh.w	r2, [r7, #5]
                frame->src_address = inst->my_short_address;
   19a68:	f8b4 24b6 	ldrh.w	r2, [r4, #1206]	; 0x4b6
   19a6c:	f8a7 2007 	strh.w	r2, [r7, #7]
                frame->seq_num = seq_num + 1;
   19a70:	3301      	adds	r3, #1
   19a72:	70bb      	strb	r3, [r7, #2]
                frame->code = UWB_DATA_CODE_DS_TWR_EXT_T2;
   19a74:	2327      	movs	r3, #39	; 0x27
   19a76:	727b      	strb	r3, [r7, #9]
   19a78:	2301      	movs	r3, #1
   19a7a:	72bb      	strb	r3, [r7, #10]
                if(inst->status.lde_error)
   19a7c:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   19a80:	f013 0f04 	tst.w	r3, #4
   19a84:	d001      	beq.n	19a8a <rx_complete_cb+0x1ea>
    return true;
   19a86:	2001      	movs	r0, #1
   19a88:	e132      	b.n	19cf0 <rx_complete_cb+0x450>
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, request_timestamp, inst->frame_len);
   19a8a:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   19a8e:	9302      	str	r3, [sp, #8]
   19a90:	f8cd 8000 	str.w	r8, [sp]
   19a94:	f8cd 9004 	str.w	r9, [sp, #4]
   19a98:	4a3f      	ldr	r2, [pc, #252]	; (19b98 <rx_complete_cb+0x2f8>)
   19a9a:	a904      	add	r1, sp, #16
   19a9c:	4630      	mov	r0, r6
   19a9e:	f7f1 fa9b 	bl	afd8 <uwb_rng_calc_rel_tx>
                frame->reception_timestamp =  (uint32_t) (request_timestamp & 0xFFFFFFFFUL);
   19aa2:	f8c7 800b 	str.w	r8, [r7, #11]
                frame->transmission_timestamp =  (uint32_t) (txd.response_timestamp & 0xFFFFFFFFUL);
   19aa6:	9b06      	ldr	r3, [sp, #24]
   19aa8:	f8c7 300f 	str.w	r3, [r7, #15]
                if(!(SLIST_EMPTY(&inst->interface_cbs))) {
   19aac:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
   19ab0:	2d00      	cmp	r5, #0
   19ab2:	d156      	bne.n	19b62 <rx_complete_cb+0x2c2>
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   19ab4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19ab6:	6c5d      	ldr	r5, [r3, #68]	; 0x44
   19ab8:	2320      	movs	r3, #32
   19aba:	2200      	movs	r2, #0
   19abc:	4639      	mov	r1, r7
   19abe:	4620      	mov	r0, r4
   19ac0:	47a8      	blx	r5
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   19ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19ac4:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   19ac6:	2300      	movs	r3, #0
   19ac8:	461a      	mov	r2, r3
   19aca:	2120      	movs	r1, #32
   19acc:	4620      	mov	r0, r4
   19ace:	47a8      	blx	r5
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   19ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   19ad4:	2101      	movs	r1, #1
   19ad6:	4620      	mov	r0, r4
   19ad8:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   19ada:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19adc:	6b59      	ldr	r1, [r3, #52]	; 0x34
   19ade:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19ae2:	4620      	mov	r0, r4
   19ae4:	4788      	blx	r1
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   19ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   19aea:	2101      	movs	r1, #1
   19aec:	4620      	mov	r0, r4
   19aee:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
   19af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19af4:	4620      	mov	r0, r4
   19af6:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error){
   19af8:	f010 0f04 	tst.w	r0, #4
   19afc:	d13c      	bne.n	19b78 <rx_complete_cb+0x2d8>
                uwb_set_wait4resp_delay(inst, g_config.tx_holdoff_delay -
   19afe:	4d26      	ldr	r5, [pc, #152]	; (19b98 <rx_complete_cb+0x2f8>)
   19b00:	6869      	ldr	r1, [r5, #4]
                                        inst->config.rx.timeToRxStable);
   19b02:	f894 251b 	ldrb.w	r2, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   19b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   19b0a:	1a89      	subs	r1, r1, r2
   19b0c:	4620      	mov	r0, r4
   19b0e:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   19b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19b12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   19b14:	2120      	movs	r1, #32
   19b16:	4620      	mov	r0, r4
   19b18:	4798      	blx	r3
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, TWR_EXT_FRAME_SIZE)) +
   19b1a:	f006 f90f 	bl	1fd3c <__aeabi_i2d>
   19b1e:	a31c      	add	r3, pc, #112	; (adr r3, 19b90 <rx_complete_cb+0x2f0>)
   19b20:	e9d3 2300 	ldrd	r2, r3, [r3]
   19b24:	f006 fa9e 	bl	20064 <__aeabi_ddiv>
   19b28:	4606      	mov	r6, r0
   19b2a:	460f      	mov	r7, r1
   19b2c:	89a8      	ldrh	r0, [r5, #12]
   19b2e:	f006 f905 	bl	1fd3c <__aeabi_i2d>
   19b32:	4632      	mov	r2, r6
   19b34:	463b      	mov	r3, r7
   19b36:	f005 ffb5 	bl	1faa4 <__adddf3>
   19b3a:	4606      	mov	r6, r0
   19b3c:	460f      	mov	r7, r1
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   19b3e:	f894 051b 	ldrb.w	r0, [r4, #1307]	; 0x51b
   19b42:	f006 f8fb 	bl	1fd3c <__aeabi_i2d>
   19b46:	4632      	mov	r2, r6
   19b48:	463b      	mov	r3, r7
   19b4a:	f005 ffab 	bl	1faa4 <__adddf3>
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, TWR_EXT_FRAME_SIZE)) +
   19b4e:	f006 fc37 	bl	203c0 <__aeabi_d2uiz>
   19b52:	4601      	mov	r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   19b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19b58:	4620      	mov	r0, r4
   19b5a:	4798      	blx	r3
    return true;
   19b5c:	2001      	movs	r0, #1
                break;
   19b5e:	e0c7      	b.n	19cf0 <rx_complete_cb+0x450>
                    SLIST_FOREACH(cbs_i, &inst->interface_cbs, next) {
   19b60:	6bad      	ldr	r5, [r5, #56]	; 0x38
   19b62:	2d00      	cmp	r5, #0
   19b64:	d0a6      	beq.n	19ab4 <rx_complete_cb+0x214>
                        if (cbs_i != NULL && cbs_i->final_cb)
   19b66:	6aab      	ldr	r3, [r5, #40]	; 0x28
   19b68:	2b00      	cmp	r3, #0
   19b6a:	d0f9      	beq.n	19b60 <rx_complete_cb+0x2c0>
                            if(cbs_i->final_cb(inst, cbs_i)) break;
   19b6c:	4629      	mov	r1, r5
   19b6e:	4620      	mov	r0, r4
   19b70:	4798      	blx	r3
   19b72:	2800      	cmp	r0, #0
   19b74:	d0f4      	beq.n	19b60 <rx_complete_cb+0x2c0>
   19b76:	e79d      	b.n	19ab4 <rx_complete_cb+0x214>
                    DS_STATS_INC(tx_error);
   19b78:	4a08      	ldr	r2, [pc, #32]	; (19b9c <rx_complete_cb+0x2fc>)
   19b7a:	6993      	ldr	r3, [r2, #24]
   19b7c:	3301      	adds	r3, #1
   19b7e:	6193      	str	r3, [r2, #24]
   19b80:	f106 004c 	add.w	r0, r6, #76	; 0x4c
   19b84:	f7f0 f8f8 	bl	9d78 <os_sem_release>
   19b88:	e7b9      	b.n	19afe <rx_complete_cb+0x25e>
   19b8a:	bf00      	nop
   19b8c:	f3af 8000 	nop.w
   19b90:	90690691 	.word	0x90690691
   19b94:	3ff06906 	.word	0x3ff06906
   19b98:	20002a24 	.word	0x20002a24
   19b9c:	2000673c 	.word	0x2000673c
                twr_frame_t * previous_frame = rng->frames[(uint16_t)(rng->idx-1)%rng->nframes];
   19ba0:	f8b6 2076 	ldrh.w	r2, [r6, #118]	; 0x76
   19ba4:	1e53      	subs	r3, r2, #1
   19ba6:	b29b      	uxth	r3, r3
   19ba8:	f8b6 107a 	ldrh.w	r1, [r6, #122]	; 0x7a
   19bac:	fbb3 f0f1 	udiv	r0, r3, r1
   19bb0:	fb01 3310 	mls	r3, r1, r0, r3
   19bb4:	b29b      	uxth	r3, r3
   19bb6:	3326      	adds	r3, #38	; 0x26
   19bb8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   19bbc:	6858      	ldr	r0, [r3, #4]
                twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   19bbe:	fbb2 f3f1 	udiv	r3, r2, r1
   19bc2:	fb01 2313 	mls	r3, r1, r3, r2
   19bc6:	b29b      	uxth	r3, r3
   19bc8:	3326      	adds	r3, #38	; 0x26
   19bca:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   19bce:	685f      	ldr	r7, [r3, #4]
                previous_frame->request_timestamp = frame->request_timestamp;
   19bd0:	f8d7 3013 	ldr.w	r3, [r7, #19]
   19bd4:	f8c0 3013 	str.w	r3, [r0, #19]
                previous_frame->response_timestamp = frame->response_timestamp;
   19bd8:	f8d7 3017 	ldr.w	r3, [r7, #23]
   19bdc:	f8c0 3017 	str.w	r3, [r0, #23]
                uint64_t request_timestamp = inst->rxtimestamp;
   19be0:	f8d4 54e8 	ldr.w	r5, [r4, #1256]	; 0x4e8
    return (dev->uw_funcs->uf_read_txtime_lo32(dev));
   19be4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19be6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   19be8:	4620      	mov	r0, r4
   19bea:	4798      	blx	r3
                frame->request_timestamp = uwb_read_txtime_lo32(inst);   // This corresponds to when the original request was actually sent
   19bec:	f8c7 0013 	str.w	r0, [r7, #19]
                frame->response_timestamp = (uint32_t) (request_timestamp & 0xFFFFFFFFUL);  // This corresponds to the response just received
   19bf0:	f8c7 5017 	str.w	r5, [r7, #23]
                frame->dst_address = frame->src_address;
   19bf4:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   19bf8:	f8a7 3005 	strh.w	r3, [r7, #5]
                frame->src_address = inst->my_short_address;
   19bfc:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   19c00:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->carrier_integrator  = - inst->carrier_integrator;
   19c04:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   19c08:	425b      	negs	r3, r3
   19c0a:	f8c7 301b 	str.w	r3, [r7, #27]
                frame->code = UWB_DATA_CODE_DS_TWR_EXT_FINAL;
   19c0e:	2328      	movs	r3, #40	; 0x28
   19c10:	727b      	strb	r3, [r7, #9]
   19c12:	2301      	movs	r3, #1
   19c14:	72bb      	strb	r3, [r7, #10]
                if(!(SLIST_EMPTY(&inst->interface_cbs))) {
   19c16:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
   19c1a:	2d00      	cmp	r5, #0
   19c1c:	d140      	bne.n	19ca0 <rx_complete_cb+0x400>
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   19c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19c20:	6c5d      	ldr	r5, [r3, #68]	; 0x44
   19c22:	2320      	movs	r3, #32
   19c24:	2200      	movs	r2, #0
   19c26:	4639      	mov	r1, r7
   19c28:	4620      	mov	r0, r4
   19c2a:	47a8      	blx	r5
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   19c2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19c2e:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   19c30:	2300      	movs	r3, #0
   19c32:	461a      	mov	r2, r3
   19c34:	2120      	movs	r1, #32
   19c36:	4620      	mov	r0, r4
   19c38:	47a8      	blx	r5
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, inst->rxtimestamp, inst->frame_len);
   19c3a:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   19c3e:	9302      	str	r3, [sp, #8]
   19c40:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
   19c44:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   19c48:	e9cd 2300 	strd	r2, r3, [sp]
   19c4c:	4a2b      	ldr	r2, [pc, #172]	; (19cfc <rx_complete_cb+0x45c>)
   19c4e:	a904      	add	r1, sp, #16
   19c50:	4630      	mov	r0, r6
   19c52:	f7f1 f9c1 	bl	afd8 <uwb_rng_calc_rel_tx>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   19c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19c58:	6b59      	ldr	r1, [r3, #52]	; 0x34
   19c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19c5e:	4620      	mov	r0, r4
   19c60:	4788      	blx	r1
                memcpy(&frame->local, &frame->remote, sizeof(frame->local));
   19c62:	f107 0520 	add.w	r5, r7, #32
   19c66:	2268      	movs	r2, #104	; 0x68
   19c68:	4629      	mov	r1, r5
   19c6a:	f107 0088 	add.w	r0, r7, #136	; 0x88
   19c6e:	f7f2 fa01 	bl	c074 <memcpy>
                uwb_rng_clear_twr_data(&frame->remote);
   19c72:	4628      	mov	r0, r5
   19c74:	f7f1 f9f0 	bl	b058 <uwb_rng_clear_twr_data>
    return (dev->uw_funcs->uf_start_tx(dev));
   19c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19c7c:	4620      	mov	r0, r4
   19c7e:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error) {
   19c80:	f010 0f04 	tst.w	r0, #4
   19c84:	d117      	bne.n	19cb6 <rx_complete_cb+0x416>
                    DS_STATS_INC(complete);
   19c86:	4a1e      	ldr	r2, [pc, #120]	; (19d00 <rx_complete_cb+0x460>)
   19c88:	6953      	ldr	r3, [r2, #20]
   19c8a:	3301      	adds	r3, #1
   19c8c:	6153      	str	r3, [r2, #20]
                    rng->control.complete_after_tx = 1;
   19c8e:	f896 3070 	ldrb.w	r3, [r6, #112]	; 0x70
   19c92:	f043 0302 	orr.w	r3, r3, #2
   19c96:	f886 3070 	strb.w	r3, [r6, #112]	; 0x70
    return true;
   19c9a:	2001      	movs	r0, #1
   19c9c:	e028      	b.n	19cf0 <rx_complete_cb+0x450>
                    SLIST_FOREACH(cbs_i, &inst->interface_cbs, next) {
   19c9e:	6bad      	ldr	r5, [r5, #56]	; 0x38
   19ca0:	2d00      	cmp	r5, #0
   19ca2:	d0bc      	beq.n	19c1e <rx_complete_cb+0x37e>
                        if (cbs_i != NULL && cbs_i->final_cb)
   19ca4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   19ca6:	2b00      	cmp	r3, #0
   19ca8:	d0f9      	beq.n	19c9e <rx_complete_cb+0x3fe>
                            if(cbs_i->final_cb(inst, cbs_i)) break;
   19caa:	4629      	mov	r1, r5
   19cac:	4620      	mov	r0, r4
   19cae:	4798      	blx	r3
   19cb0:	2800      	cmp	r0, #0
   19cb2:	d0f4      	beq.n	19c9e <rx_complete_cb+0x3fe>
   19cb4:	e7b3      	b.n	19c1e <rx_complete_cb+0x37e>
                    DS_STATS_INC(tx_error);
   19cb6:	4a12      	ldr	r2, [pc, #72]	; (19d00 <rx_complete_cb+0x460>)
   19cb8:	6993      	ldr	r3, [r2, #24]
   19cba:	3301      	adds	r3, #1
   19cbc:	6193      	str	r3, [r2, #24]
   19cbe:	f106 004c 	add.w	r0, r6, #76	; 0x4c
   19cc2:	f7f0 f859 	bl	9d78 <os_sem_release>
                    rng_issue_complete(inst);
   19cc6:	4620      	mov	r0, r4
   19cc8:	f7f1 fcde 	bl	b688 <rng_issue_complete>
    return true;
   19ccc:	2001      	movs	r0, #1
   19cce:	e00f      	b.n	19cf0 <rx_complete_cb+0x450>
                DS_STATS_INC(complete);
   19cd0:	4a0b      	ldr	r2, [pc, #44]	; (19d00 <rx_complete_cb+0x460>)
   19cd2:	6953      	ldr	r3, [r2, #20]
   19cd4:	3301      	adds	r3, #1
   19cd6:	6153      	str	r3, [r2, #20]
   19cd8:	f106 004c 	add.w	r0, r6, #76	; 0x4c
   19cdc:	f7f0 f84c 	bl	9d78 <os_sem_release>
                rng_issue_complete(inst);
   19ce0:	4620      	mov	r0, r4
   19ce2:	f7f1 fcd1 	bl	b688 <rng_issue_complete>
    return true;
   19ce6:	2001      	movs	r0, #1
                break;
   19ce8:	e002      	b.n	19cf0 <rx_complete_cb+0x450>
        return false;
   19cea:	2000      	movs	r0, #0
}
   19cec:	4770      	bx	lr
        return false;
   19cee:	2000      	movs	r0, #0
}
   19cf0:	b009      	add	sp, #36	; 0x24
   19cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(rng->code){
   19cf6:	2000      	movs	r0, #0
   19cf8:	e7fa      	b.n	19cf0 <rx_complete_cb+0x450>
   19cfa:	bf00      	nop
   19cfc:	20002a24 	.word	0x20002a24
   19d00:	2000673c 	.word	0x2000673c

00019d04 <twr_ds_ext_pkg_init>:
{
   19d04:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d06:	b083      	sub	sp, #12
    printf("{\"utime\": %"PRIu32",\"msg\": \"twr_ds_ext_pkg_init\"}\n",
   19d08:	f7f2 fe3a 	bl	c980 <dpl_cputime_get32>
   19d0c:	4601      	mov	r1, r0
   19d0e:	481d      	ldr	r0, [pc, #116]	; (19d84 <twr_ds_ext_pkg_init+0x80>)
   19d10:	f7f2 fdd0 	bl	c8b4 <printf>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   19d14:	2400      	movs	r4, #0
   19d16:	b174      	cbz	r4, 19d36 <twr_ds_ext_pkg_init+0x32>
    rc = stats_init(
   19d18:	2202      	movs	r2, #2
   19d1a:	9200      	str	r2, [sp, #0]
   19d1c:	4b1a      	ldr	r3, [pc, #104]	; (19d88 <twr_ds_ext_pkg_init+0x84>)
   19d1e:	2104      	movs	r1, #4
   19d20:	481a      	ldr	r0, [pc, #104]	; (19d8c <twr_ds_ext_pkg_init+0x88>)
   19d22:	f7f5 fd01 	bl	f728 <stats_init>
    assert(rc == 0);
   19d26:	bb00      	cbnz	r0, 19d6a <twr_ds_ext_pkg_init+0x66>
    rc = stats_register("twr_ds_ext", STATS_HDR(g_twr_ds_ext_stat));
   19d28:	4918      	ldr	r1, [pc, #96]	; (19d8c <twr_ds_ext_pkg_init+0x88>)
   19d2a:	4819      	ldr	r0, [pc, #100]	; (19d90 <twr_ds_ext_pkg_init+0x8c>)
   19d2c:	f7f5 fd86 	bl	f83c <stats_register>
    assert(rc == 0);
   19d30:	bb08      	cbnz	r0, 19d76 <twr_ds_ext_pkg_init+0x72>
}
   19d32:	b003      	add	sp, #12
   19d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        udev = uwb_dev_idx_lookup(i);
   19d36:	4620      	mov	r0, r4
   19d38:	f7ee fe62 	bl	8a00 <uwb_dev_idx_lookup>
        if (!udev) {
   19d3c:	4607      	mov	r7, r0
   19d3e:	b190      	cbz	r0, 19d66 <twr_ds_ext_pkg_init+0x62>
        g_cbs[i].inst_ptr = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
   19d40:	2104      	movs	r1, #4
   19d42:	f7ee fee2 	bl	8b0a <uwb_mac_find_cb_inst_ptr>
   19d46:	0126      	lsls	r6, r4, #4
   19d48:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
   19d4c:	4b11      	ldr	r3, [pc, #68]	; (19d94 <twr_ds_ext_pkg_init+0x90>)
   19d4e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   19d52:	6068      	str	r0, [r5, #4]
        uwb_mac_append_interface(udev, &g_cbs[i]);
   19d54:	4629      	mov	r1, r5
   19d56:	4638      	mov	r0, r7
   19d58:	f7ee fe82 	bl	8a60 <uwb_mac_append_interface>
        uwb_rng_append_config(g_cbs[i].inst_ptr, &g_rng_cfgs[i]);
   19d5c:	490e      	ldr	r1, [pc, #56]	; (19d98 <twr_ds_ext_pkg_init+0x94>)
   19d5e:	4431      	add	r1, r6
   19d60:	6868      	ldr	r0, [r5, #4]
   19d62:	f7f1 f901 	bl	af68 <uwb_rng_append_config>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   19d66:	3401      	adds	r4, #1
   19d68:	e7d5      	b.n	19d16 <twr_ds_ext_pkg_init+0x12>
    assert(rc == 0);
   19d6a:	2300      	movs	r3, #0
   19d6c:	461a      	mov	r2, r3
   19d6e:	4619      	mov	r1, r3
   19d70:	4618      	mov	r0, r3
   19d72:	f7ef f8ef 	bl	8f54 <__assert_func>
    assert(rc == 0);
   19d76:	2300      	movs	r3, #0
   19d78:	461a      	mov	r2, r3
   19d7a:	4619      	mov	r1, r3
   19d7c:	4618      	mov	r0, r3
   19d7e:	f7ef f8e9 	bl	8f54 <__assert_func>
   19d82:	bf00      	nop
   19d84:	000236d8 	.word	0x000236d8
   19d88:	00023714 	.word	0x00023714
   19d8c:	2000673c 	.word	0x2000673c
   19d90:	00023708 	.word	0x00023708
   19d94:	200029e8 	.word	0x200029e8
   19d98:	20002a34 	.word	0x20002a34

00019d9c <twr_ds_ext_free>:
twr_ds_ext_free(struct uwb_dev * inst){
   19d9c:	b508      	push	{r3, lr}
    assert(inst);
   19d9e:	b118      	cbz	r0, 19da8 <twr_ds_ext_free+0xc>
    uwb_mac_remove_interface(inst, UWBEXT_RNG_DS_EXT);
   19da0:	2109      	movs	r1, #9
   19da2:	f7ee fe82 	bl	8aaa <uwb_mac_remove_interface>
}
   19da6:	bd08      	pop	{r3, pc}
    assert(inst);
   19da8:	2300      	movs	r3, #0
   19daa:	461a      	mov	r2, r3
   19dac:	4619      	mov	r1, r3
   19dae:	4618      	mov	r0, r3
   19db0:	f7ef f8d0 	bl	8f54 <__assert_func>

00019db4 <twr_ds_ext_pkg_down>:
{
   19db4:	b538      	push	{r3, r4, r5, lr}
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   19db6:	2400      	movs	r4, #0
   19db8:	b10c      	cbz	r4, 19dbe <twr_ds_ext_pkg_down+0xa>
}
   19dba:	2000      	movs	r0, #0
   19dbc:	bd38      	pop	{r3, r4, r5, pc}
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
   19dbe:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   19dc2:	009a      	lsls	r2, r3, #2
   19dc4:	4b07      	ldr	r3, [pc, #28]	; (19de4 <twr_ds_ext_pkg_down+0x30>)
   19dc6:	4413      	add	r3, r2
   19dc8:	685d      	ldr	r5, [r3, #4]
        if (!rng) continue;
   19dca:	b145      	cbz	r5, 19dde <twr_ds_ext_pkg_down+0x2a>
        uwb_rng_remove_config(g_cbs[i].inst_ptr, g_rng_cfgs[i].rng_code);
   19dcc:	0123      	lsls	r3, r4, #4
   19dce:	4a06      	ldr	r2, [pc, #24]	; (19de8 <twr_ds_ext_pkg_down+0x34>)
   19dd0:	5ad1      	ldrh	r1, [r2, r3]
   19dd2:	4628      	mov	r0, r5
   19dd4:	f7f1 f8e1 	bl	af9a <uwb_rng_remove_config>
        twr_ds_ext_free(rng->dev_inst);
   19dd8:	6828      	ldr	r0, [r5, #0]
   19dda:	f7ff ffdf 	bl	19d9c <twr_ds_ext_free>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   19dde:	3401      	adds	r4, #1
   19de0:	e7ea      	b.n	19db8 <twr_ds_ext_pkg_down+0x4>
   19de2:	bf00      	nop
   19de4:	200029e8 	.word	0x200029e8
   19de8:	20002a34 	.word	0x20002a34
   19dec:	00000000 	.word	0x00000000

00019df0 <rx_complete_cb>:
 *
 * @return true on sucess
 */
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   19df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19df4:	b088      	sub	sp, #32
    twr_frame_t * frame;
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   19df6:	684d      	ldr	r5, [r1, #4]
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   19df8:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   19dfc:	f648 0341 	movw	r3, #34881	; 0x8841
   19e00:	429a      	cmp	r2, r3
   19e02:	f040 8125 	bne.w	1a050 <rx_complete_cb+0x260>
   19e06:	4604      	mov	r4, r0
        return false;

    assert(rng);
   19e08:	b30d      	cbz	r5, 19e4e <rx_complete_cb+0x5e>
   19e0a:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
    if(dpl_sem_get_count(&rng->sem) == 1) // unsolicited inbound
   19e0e:	2b01      	cmp	r3, #1
   19e10:	f000 8122 	beq.w	1a058 <rx_complete_cb+0x268>
        return false;

    frame = rng->frames[(rng->idx)%rng->nframes]; // Frame already read within loader layers.
   19e14:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   19e18:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
   19e1c:	fbb3 f1f2 	udiv	r1, r3, r2
   19e20:	fb02 3311 	mls	r3, r2, r1, r3
   19e24:	b29b      	uxth	r3, r3
   19e26:	3326      	adds	r3, #38	; 0x26
   19e28:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   19e2c:	685e      	ldr	r6, [r3, #4]

    switch(rng->code){
   19e2e:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
   19e32:	f240 1211 	movw	r2, #273	; 0x111
   19e36:	4293      	cmp	r3, r2
   19e38:	f000 8094 	beq.w	19f64 <rx_complete_cb+0x174>
   19e3c:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
   19e40:	f000 80f3 	beq.w	1a02a <rx_complete_cb+0x23a>
   19e44:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
   19e48:	d007      	beq.n	19e5a <rx_complete_cb+0x6a>
   19e4a:	2000      	movs	r0, #0
   19e4c:	e101      	b.n	1a052 <rx_complete_cb+0x262>
    assert(rng);
   19e4e:	2300      	movs	r3, #0
   19e50:	461a      	mov	r2, r3
   19e52:	4619      	mov	r1, r3
   19e54:	4618      	mov	r0, r3
   19e56:	f7ef f87d 	bl	8f54 <__assert_func>
        case UWB_DATA_CODE_SS_TWR:
            {
                // This code executes on the device that is responding to a request
                uint64_t request_timestamp = inst->rxtimestamp;
   19e5a:	f8d0 74e8 	ldr.w	r7, [r0, #1256]	; 0x4e8
   19e5e:	f8d0 34ec 	ldr.w	r3, [r0, #1260]	; 0x4ec
                struct uwb_rng_txd txd;
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, request_timestamp, inst->frame_len);
   19e62:	f8b0 24e2 	ldrh.w	r2, [r0, #1250]	; 0x4e2
   19e66:	9202      	str	r2, [sp, #8]
   19e68:	9700      	str	r7, [sp, #0]
   19e6a:	9301      	str	r3, [sp, #4]
   19e6c:	4a7e      	ldr	r2, [pc, #504]	; (1a068 <rx_complete_cb+0x278>)
   19e6e:	a904      	add	r1, sp, #16
   19e70:	4628      	mov	r0, r5
   19e72:	f7f1 f8b1 	bl	afd8 <uwb_rng_calc_rel_tx>
#if MYNEWT_VAL(UWB_WCS_ENABLED)
                struct uwb_wcs_instance * wcs = rng->ccp_inst->wcs;
                frame->reception_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, request_timestamp)) & 0xFFFFFFFFULL;
                frame->transmission_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, txd.response_timestamp)) & 0xFFFFFFFFULL;
#else
                frame->reception_timestamp = request_timestamp & 0xFFFFFFFFULL;
   19e76:	f8c6 700b 	str.w	r7, [r6, #11]
                frame->transmission_timestamp = txd.response_timestamp & 0xFFFFFFFFULL;
   19e7a:	9b06      	ldr	r3, [sp, #24]
   19e7c:	f8c6 300f 	str.w	r3, [r6, #15]
#endif

                frame->dst_address = frame->src_address;
   19e80:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   19e84:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   19e88:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   19e8c:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_T1;
   19e90:	2700      	movs	r7, #0
   19e92:	2311      	movs	r3, #17
   19e94:	7273      	strb	r3, [r6, #9]
   19e96:	2301      	movs	r3, #1
   19e98:	72b3      	strb	r3, [r6, #10]

#if MYNEWT_VAL(UWB_WCS_ENABLED)
                frame->carrier_integrator  = 0l;
#else
                frame->carrier_integrator  = - inst->carrier_integrator;
   19e9a:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   19e9e:	425b      	negs	r3, r3
   19ea0:	f8c6 301b 	str.w	r3, [r6, #27]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   19ea4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19ea6:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
   19eaa:	2313      	movs	r3, #19
   19eac:	463a      	mov	r2, r7
   19eae:	4631      	mov	r1, r6
   19eb0:	4620      	mov	r0, r4
   19eb2:	47c0      	blx	r8
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   19eb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19eb6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   19eb8:	463b      	mov	r3, r7
   19eba:	463a      	mov	r2, r7
   19ebc:	2113      	movs	r1, #19
   19ebe:	4620      	mov	r0, r4
   19ec0:	47b0      	blx	r6
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   19ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   19ec6:	2101      	movs	r1, #1
   19ec8:	4620      	mov	r0, r4
   19eca:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   19ecc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19ece:	6b59      	ldr	r1, [r3, #52]	; 0x34
   19ed0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19ed4:	4620      	mov	r0, r4
   19ed6:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   19ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19edc:	4620      	mov	r0, r4
   19ede:	4798      	blx	r3
                uwb_write_tx_fctrl(inst, sizeof(ieee_rng_response_frame_t), 0);
                uwb_set_wait4resp(inst, true);
                uwb_set_delay_start(inst, txd.response_tx_delay);

                /* Start tx now, the remaining settings can be done whilst sending anyway */
                if (uwb_start_tx(inst).start_tx_error){
   19ee0:	f010 0f04 	tst.w	r0, #4
   19ee4:	d135      	bne.n	19f52 <rx_complete_cb+0x162>
                    SS_STATS_INC(tx_error);
                    dpl_sem_release(&rng->sem);
                }

                /* Setup when to listen for response, relative the end of our transmitted frame */
                uwb_set_wait4resp_delay(inst, g_config.tx_holdoff_delay -
   19ee6:	4d60      	ldr	r5, [pc, #384]	; (1a068 <rx_complete_cb+0x278>)
   19ee8:	6869      	ldr	r1, [r5, #4]
                                        inst->config.rx.timeToRxStable);
   19eea:	f894 251b 	ldrb.w	r2, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   19eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   19ef2:	1a89      	subs	r1, r1, r2
   19ef4:	4620      	mov	r0, r4
   19ef6:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   19ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   19efc:	211f      	movs	r1, #31
   19efe:	4620      	mov	r0, r4
   19f00:	4798      	blx	r3
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(twr_frame_final_t))) +
   19f02:	f005 ff1b 	bl	1fd3c <__aeabi_i2d>
   19f06:	a356      	add	r3, pc, #344	; (adr r3, 1a060 <rx_complete_cb+0x270>)
   19f08:	e9d3 2300 	ldrd	r2, r3, [r3]
   19f0c:	f006 f8aa 	bl	20064 <__aeabi_ddiv>
   19f10:	4606      	mov	r6, r0
   19f12:	460f      	mov	r7, r1
   19f14:	89a8      	ldrh	r0, [r5, #12]
   19f16:	f005 ff11 	bl	1fd3c <__aeabi_i2d>
   19f1a:	4632      	mov	r2, r6
   19f1c:	463b      	mov	r3, r7
   19f1e:	f005 fdc1 	bl	1faa4 <__adddf3>
   19f22:	4606      	mov	r6, r0
   19f24:	460f      	mov	r7, r1
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   19f26:	f894 051b 	ldrb.w	r0, [r4, #1307]	; 0x51b
   19f2a:	f005 ff07 	bl	1fd3c <__aeabi_i2d>
   19f2e:	4632      	mov	r2, r6
   19f30:	463b      	mov	r3, r7
   19f32:	f005 fdb7 	bl	1faa4 <__adddf3>
                uwb_set_rx_timeout(inst, uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(twr_frame_final_t))) +
   19f36:	f006 fa43 	bl	203c0 <__aeabi_d2uiz>
   19f3a:	4601      	mov	r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   19f3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19f40:	4620      	mov	r0, r4
   19f42:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   19f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   19f48:	2101      	movs	r1, #1
   19f4a:	4620      	mov	r0, r4
   19f4c:	4798      	blx	r3
        default:
                return false;
                break;
    }

    return true;
   19f4e:	2001      	movs	r0, #1
   19f50:	e07f      	b.n	1a052 <rx_complete_cb+0x262>
                    SS_STATS_INC(tx_error);
   19f52:	4a46      	ldr	r2, [pc, #280]	; (1a06c <rx_complete_cb+0x27c>)
   19f54:	6993      	ldr	r3, [r2, #24]
   19f56:	3301      	adds	r3, #1
   19f58:	6193      	str	r3, [r2, #24]
   19f5a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   19f5e:	f7ef ff0b 	bl	9d78 <os_sem_release>
   19f62:	e7c0      	b.n	19ee6 <rx_complete_cb+0xf6>
                uint64_t response_timestamp = inst->rxtimestamp;
   19f64:	f8d0 74e8 	ldr.w	r7, [r0, #1256]	; 0x4e8
   19f68:	f8d0 24ec 	ldr.w	r2, [r0, #1260]	; 0x4ec
                if (inst->frame_len != sizeof(ieee_rng_response_frame_t))
   19f6c:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   19f70:	2b13      	cmp	r3, #19
   19f72:	d001      	beq.n	19f78 <rx_complete_cb+0x188>
    return true;
   19f74:	2001      	movs	r0, #1
   19f76:	e06c      	b.n	1a052 <rx_complete_cb+0x262>
                if(inst->status.lde_error)
   19f78:	f890 1509 	ldrb.w	r1, [r0, #1289]	; 0x509
   19f7c:	f011 0f04 	tst.w	r1, #4
   19f80:	d1f8      	bne.n	19f74 <rx_complete_cb+0x184>
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, response_timestamp, inst->frame_len);
   19f82:	9302      	str	r3, [sp, #8]
   19f84:	9700      	str	r7, [sp, #0]
   19f86:	9201      	str	r2, [sp, #4]
   19f88:	4a37      	ldr	r2, [pc, #220]	; (1a068 <rx_complete_cb+0x278>)
   19f8a:	a904      	add	r1, sp, #16
   19f8c:	4628      	mov	r0, r5
   19f8e:	f7f1 f823 	bl	afd8 <uwb_rng_calc_rel_tx>
    return (dev->uw_funcs->uf_read_txtime_lo32(dev));
   19f92:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   19f96:	4620      	mov	r0, r4
   19f98:	4798      	blx	r3
                frame->request_timestamp = uwb_read_txtime_lo32(inst) & 0xFFFFFFFFULL;
   19f9a:	f8c6 0013 	str.w	r0, [r6, #19]
                frame->response_timestamp = (uint32_t)(response_timestamp & 0xFFFFFFFFULL);
   19f9e:	f8c6 7017 	str.w	r7, [r6, #23]
                frame->dst_address = frame->src_address;
   19fa2:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   19fa6:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   19faa:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   19fae:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_FINAL;
   19fb2:	2700      	movs	r7, #0
   19fb4:	2312      	movs	r3, #18
   19fb6:	7273      	strb	r3, [r6, #9]
   19fb8:	2301      	movs	r3, #1
   19fba:	72b3      	strb	r3, [r6, #10]
                frame->carrier_integrator = inst->carrier_integrator;
   19fbc:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   19fc0:	f8c6 301b 	str.w	r3, [r6, #27]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   19fc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19fc6:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
   19fca:	231f      	movs	r3, #31
   19fcc:	463a      	mov	r2, r7
   19fce:	4631      	mov	r1, r6
   19fd0:	4620      	mov	r0, r4
   19fd2:	47c0      	blx	r8
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   19fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19fd6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   19fd8:	463b      	mov	r3, r7
   19fda:	463a      	mov	r2, r7
   19fdc:	211f      	movs	r1, #31
   19fde:	4620      	mov	r0, r4
   19fe0:	47b0      	blx	r6
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   19fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19fe4:	6b59      	ldr	r1, [r3, #52]	; 0x34
   19fe6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19fea:	4620      	mov	r0, r4
   19fec:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   19fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19ff2:	4620      	mov	r0, r4
   19ff4:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error) {
   19ff6:	f010 0f04 	tst.w	r0, #4
   19ffa:	d10a      	bne.n	1a012 <rx_complete_cb+0x222>
                    SS_STATS_INC(complete);
   19ffc:	4a1b      	ldr	r2, [pc, #108]	; (1a06c <rx_complete_cb+0x27c>)
   19ffe:	6953      	ldr	r3, [r2, #20]
   1a000:	3301      	adds	r3, #1
   1a002:	6153      	str	r3, [r2, #20]
                    rng->control.complete_after_tx = 1;
   1a004:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   1a008:	f043 0302 	orr.w	r3, r3, #2
   1a00c:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
   1a010:	e7b0      	b.n	19f74 <rx_complete_cb+0x184>
                    SS_STATS_INC(tx_error);
   1a012:	4a16      	ldr	r2, [pc, #88]	; (1a06c <rx_complete_cb+0x27c>)
   1a014:	6993      	ldr	r3, [r2, #24]
   1a016:	3301      	adds	r3, #1
   1a018:	6193      	str	r3, [r2, #24]
   1a01a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   1a01e:	f7ef feab 	bl	9d78 <os_sem_release>
                    rng_issue_complete(inst);
   1a022:	4620      	mov	r0, r4
   1a024:	f7f1 fb30 	bl	b688 <rng_issue_complete>
   1a028:	e7a4      	b.n	19f74 <rx_complete_cb+0x184>
                if (inst->frame_len != sizeof(twr_frame_final_t))
   1a02a:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1a02e:	2b1f      	cmp	r3, #31
   1a030:	d001      	beq.n	1a036 <rx_complete_cb+0x246>
    return true;
   1a032:	2001      	movs	r0, #1
   1a034:	e00d      	b.n	1a052 <rx_complete_cb+0x262>
                SS_STATS_INC(complete);
   1a036:	4a0d      	ldr	r2, [pc, #52]	; (1a06c <rx_complete_cb+0x27c>)
   1a038:	6953      	ldr	r3, [r2, #20]
   1a03a:	3301      	adds	r3, #1
   1a03c:	6153      	str	r3, [r2, #20]
   1a03e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   1a042:	f7ef fe99 	bl	9d78 <os_sem_release>
                rng_issue_complete(inst);
   1a046:	4620      	mov	r0, r4
   1a048:	f7f1 fb1e 	bl	b688 <rng_issue_complete>
    return true;
   1a04c:	2001      	movs	r0, #1
                break;
   1a04e:	e000      	b.n	1a052 <rx_complete_cb+0x262>
        return false;
   1a050:	2000      	movs	r0, #0
}
   1a052:	b008      	add	sp, #32
   1a054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
   1a058:	2000      	movs	r0, #0
   1a05a:	e7fa      	b.n	1a052 <rx_complete_cb+0x262>
   1a05c:	f3af 8000 	nop.w
   1a060:	90690691 	.word	0x90690691
   1a064:	3ff06906 	.word	0x3ff06906
   1a068:	20002a80 	.word	0x20002a80
   1a06c:	20006758 	.word	0x20006758

0001a070 <twr_ss_pkg_init>:
{
   1a070:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a072:	b083      	sub	sp, #12
    printf("{\"utime\": %"PRIu32",\"msg\": \"twr_ss_pkg_init\"}\n",
   1a074:	f7f2 fc84 	bl	c980 <dpl_cputime_get32>
   1a078:	4601      	mov	r1, r0
   1a07a:	481e      	ldr	r0, [pc, #120]	; (1a0f4 <twr_ss_pkg_init+0x84>)
   1a07c:	f7f2 fc1a 	bl	c8b4 <printf>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1a080:	2400      	movs	r4, #0
   1a082:	b18c      	cbz	r4, 1a0a8 <twr_ss_pkg_init+0x38>
    rc = stats_init(
   1a084:	2202      	movs	r2, #2
   1a086:	9200      	str	r2, [sp, #0]
   1a088:	4b1b      	ldr	r3, [pc, #108]	; (1a0f8 <twr_ss_pkg_init+0x88>)
   1a08a:	2104      	movs	r1, #4
   1a08c:	481b      	ldr	r0, [pc, #108]	; (1a0fc <twr_ss_pkg_init+0x8c>)
   1a08e:	f7f5 fb4b 	bl	f728 <stats_init>
    assert(rc == 0);
   1a092:	4604      	mov	r4, r0
   1a094:	bb10      	cbnz	r0, 1a0dc <twr_ss_pkg_init+0x6c>
    rc |= stats_register("twr_ss", STATS_HDR(g_twr_ss_stat));
   1a096:	4919      	ldr	r1, [pc, #100]	; (1a0fc <twr_ss_pkg_init+0x8c>)
   1a098:	4819      	ldr	r0, [pc, #100]	; (1a100 <twr_ss_pkg_init+0x90>)
   1a09a:	f7f5 fbcf 	bl	f83c <stats_register>
    assert(rc == 0);
   1a09e:	ea54 0300 	orrs.w	r3, r4, r0
   1a0a2:	d121      	bne.n	1a0e8 <twr_ss_pkg_init+0x78>
}
   1a0a4:	b003      	add	sp, #12
   1a0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        udev = uwb_dev_idx_lookup(i);
   1a0a8:	4620      	mov	r0, r4
   1a0aa:	f7ee fca9 	bl	8a00 <uwb_dev_idx_lookup>
        if (!udev) {
   1a0ae:	4607      	mov	r7, r0
   1a0b0:	b190      	cbz	r0, 1a0d8 <twr_ss_pkg_init+0x68>
        g_cbs[i].inst_ptr = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
   1a0b2:	2104      	movs	r1, #4
   1a0b4:	f7ee fd29 	bl	8b0a <uwb_mac_find_cb_inst_ptr>
   1a0b8:	0126      	lsls	r6, r4, #4
   1a0ba:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
   1a0be:	4b11      	ldr	r3, [pc, #68]	; (1a104 <twr_ss_pkg_init+0x94>)
   1a0c0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1a0c4:	6068      	str	r0, [r5, #4]
        uwb_mac_append_interface(udev, &g_cbs[i]);
   1a0c6:	4629      	mov	r1, r5
   1a0c8:	4638      	mov	r0, r7
   1a0ca:	f7ee fcc9 	bl	8a60 <uwb_mac_append_interface>
        uwb_rng_append_config(g_cbs[i].inst_ptr, &g_rng_cfgs[i]);
   1a0ce:	490e      	ldr	r1, [pc, #56]	; (1a108 <twr_ss_pkg_init+0x98>)
   1a0d0:	4431      	add	r1, r6
   1a0d2:	6868      	ldr	r0, [r5, #4]
   1a0d4:	f7f0 ff48 	bl	af68 <uwb_rng_append_config>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1a0d8:	3401      	adds	r4, #1
   1a0da:	e7d2      	b.n	1a082 <twr_ss_pkg_init+0x12>
    assert(rc == 0);
   1a0dc:	2300      	movs	r3, #0
   1a0de:	461a      	mov	r2, r3
   1a0e0:	4619      	mov	r1, r3
   1a0e2:	4618      	mov	r0, r3
   1a0e4:	f7ee ff36 	bl	8f54 <__assert_func>
    assert(rc == 0);
   1a0e8:	2300      	movs	r3, #0
   1a0ea:	461a      	mov	r2, r3
   1a0ec:	4619      	mov	r1, r3
   1a0ee:	4618      	mov	r0, r3
   1a0f0:	f7ee ff30 	bl	8f54 <__assert_func>
   1a0f4:	00023720 	.word	0x00023720
   1a0f8:	00023754 	.word	0x00023754
   1a0fc:	20006758 	.word	0x20006758
   1a100:	0002374c 	.word	0x0002374c
   1a104:	20002a44 	.word	0x20002a44
   1a108:	20002a90 	.word	0x20002a90

0001a10c <twr_ss_free>:
{
   1a10c:	b508      	push	{r3, lr}
    assert(dev);
   1a10e:	b118      	cbz	r0, 1a118 <twr_ss_free+0xc>
    uwb_mac_remove_interface(dev, UWBEXT_RNG_SS);
   1a110:	2105      	movs	r1, #5
   1a112:	f7ee fcca 	bl	8aaa <uwb_mac_remove_interface>
}
   1a116:	bd08      	pop	{r3, pc}
    assert(dev);
   1a118:	2300      	movs	r3, #0
   1a11a:	461a      	mov	r2, r3
   1a11c:	4619      	mov	r1, r3
   1a11e:	4618      	mov	r0, r3
   1a120:	f7ee ff18 	bl	8f54 <__assert_func>

0001a124 <twr_ss_pkg_down>:
{
   1a124:	b538      	push	{r3, r4, r5, lr}
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1a126:	2400      	movs	r4, #0
   1a128:	b10c      	cbz	r4, 1a12e <twr_ss_pkg_down+0xa>
}
   1a12a:	2000      	movs	r0, #0
   1a12c:	bd38      	pop	{r3, r4, r5, pc}
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
   1a12e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1a132:	009a      	lsls	r2, r3, #2
   1a134:	4b07      	ldr	r3, [pc, #28]	; (1a154 <twr_ss_pkg_down+0x30>)
   1a136:	4413      	add	r3, r2
   1a138:	685d      	ldr	r5, [r3, #4]
        if (!rng) continue;
   1a13a:	b145      	cbz	r5, 1a14e <twr_ss_pkg_down+0x2a>
        uwb_rng_remove_config(g_cbs[i].inst_ptr, g_rng_cfgs[i].rng_code);
   1a13c:	0123      	lsls	r3, r4, #4
   1a13e:	4a06      	ldr	r2, [pc, #24]	; (1a158 <twr_ss_pkg_down+0x34>)
   1a140:	5ad1      	ldrh	r1, [r2, r3]
   1a142:	4628      	mov	r0, r5
   1a144:	f7f0 ff29 	bl	af9a <uwb_rng_remove_config>
        twr_ss_free(rng->dev_inst);
   1a148:	6828      	ldr	r0, [r5, #0]
   1a14a:	f7ff ffdf 	bl	1a10c <twr_ss_free>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1a14e:	3401      	adds	r4, #1
   1a150:	e7ea      	b.n	1a128 <twr_ss_pkg_down+0x4>
   1a152:	bf00      	nop
   1a154:	20002a44 	.word	0x20002a44
   1a158:	20002a90 	.word	0x20002a90
   1a15c:	00000000 	.word	0x00000000

0001a160 <rx_complete_cb>:
 *
 * @return true on sucess
 */
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1a160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a164:	4605      	mov	r5, r0
    twr_frame_t * frame;
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
   1a166:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
   1a16a:	f648 0241 	movw	r2, #34881	; 0x8841
   1a16e:	4293      	cmp	r3, r2
   1a170:	d006      	beq.n	1a180 <rx_complete_cb+0x20>
   1a172:	f648 0261 	movw	r2, #34913	; 0x8861
   1a176:	4293      	cmp	r3, r2
   1a178:	d002      	beq.n	1a180 <rx_complete_cb+0x20>
        inst->fctrl != (FCNTL_IEEE_RANGE_16|UWB_FCTRL_ACK_REQUESTED) &&
   1a17a:	2b02      	cmp	r3, #2
   1a17c:	f040 8116 	bne.w	1a3ac <rx_complete_cb+0x24c>
        inst->fctrl != UWB_FCTRL_FRAME_TYPE_ACK) {
        return false;
    }

    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1a180:	684c      	ldr	r4, [r1, #4]
    assert(rng);
   1a182:	b394      	cbz	r4, 1a1ea <rx_complete_cb+0x8a>
   1a184:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
    if(dpl_sem_get_count(&rng->sem) == 1) // unsolicited inbound
   1a188:	2a01      	cmp	r2, #1
   1a18a:	f000 8111 	beq.w	1a3b0 <rx_complete_cb+0x250>
        return false;

    if (inst->fctrl == UWB_FCTRL_FRAME_TYPE_ACK && !rng->status.rx_ack_expected) {
   1a18e:	2b02      	cmp	r3, #2
   1a190:	d031      	beq.n	1a1f6 <rx_complete_cb+0x96>
        return false;
    }
    rng->status.rx_ack_expected = 0;
   1a192:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1a196:	f36f 1345 	bfc	r3, #5, #1
   1a19a:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    rng->status.tx_ack_expected = 0;
   1a19e:	b2db      	uxtb	r3, r3
   1a1a0:	f36f 1304 	bfc	r3, #4, #1
   1a1a4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    frame = rng->frames[(rng->idx)%rng->nframes]; // Frame already read within loader layers.
   1a1a8:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   1a1ac:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   1a1b0:	fbb3 f1f2 	udiv	r1, r3, r2
   1a1b4:	fb02 3311 	mls	r3, r2, r1, r3
   1a1b8:	b29b      	uxth	r3, r3
   1a1ba:	3326      	adds	r3, #38	; 0x26
   1a1bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1a1c0:	685e      	ldr	r6, [r3, #4]

    /* Receive the ack response from the other side and store timestamp */
    if (inst->fctrl == UWB_FCTRL_FRAME_TYPE_ACK) {
   1a1c2:	f8b5 34e0 	ldrh.w	r3, [r5, #1248]	; 0x4e0
   1a1c6:	2b02      	cmp	r3, #2
   1a1c8:	d01c      	beq.n	1a204 <rx_complete_cb+0xa4>
        /* Need to set, not just adjust, timeout here */
        uwb_set_rx_timeout(inst, g_config.tx_holdoff_delay + frame_duration + g_config.rx_timeout_delay);
        return true;
    }

    switch(rng->code){
   1a1ca:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1a1ce:	f240 1219 	movw	r2, #281	; 0x119
   1a1d2:	4293      	cmp	r3, r2
   1a1d4:	d076      	beq.n	1a2c4 <rx_complete_cb+0x164>
   1a1d6:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
   1a1da:	f000 80d4 	beq.w	1a386 <rx_complete_cb+0x226>
   1a1de:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   1a1e2:	d040      	beq.n	1a266 <rx_complete_cb+0x106>
   1a1e4:	2000      	movs	r0, #0
                return false;
                break;
    }

    return true;
}
   1a1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(rng);
   1a1ea:	2300      	movs	r3, #0
   1a1ec:	461a      	mov	r2, r3
   1a1ee:	4619      	mov	r1, r3
   1a1f0:	4618      	mov	r0, r3
   1a1f2:	f7ee feaf 	bl	8f54 <__assert_func>
    if (inst->fctrl == UWB_FCTRL_FRAME_TYPE_ACK && !rng->status.rx_ack_expected) {
   1a1f6:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1a1fa:	f013 0f20 	tst.w	r3, #32
   1a1fe:	d1c8      	bne.n	1a192 <rx_complete_cb+0x32>
        return false;
   1a200:	2000      	movs	r0, #0
   1a202:	e7f0      	b.n	1a1e6 <rx_complete_cb+0x86>
        if (inst->rxbuf[2] != (rng->seq_num&0xff)) {
   1a204:	f8d5 34fc 	ldr.w	r3, [r5, #1276]	; 0x4fc
   1a208:	789a      	ldrb	r2, [r3, #2]
   1a20a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   1a20e:	429a      	cmp	r2, r3
   1a210:	d11f      	bne.n	1a252 <rx_complete_cb+0xf2>
        rng->ack_rx_timestamp = inst->rxtimestamp;
   1a212:	f505 639e 	add.w	r3, r5, #1264	; 0x4f0
   1a216:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1a21a:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1a21e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1a222:	2113      	movs	r1, #19
   1a224:	4628      	mov	r0, r5
   1a226:	4798      	blx	r3
        uint16_t frame_duration = uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst,sizeof(ieee_rng_response_frame_t)));
   1a228:	f005 fd88 	bl	1fd3c <__aeabi_i2d>
   1a22c:	a364      	add	r3, pc, #400	; (adr r3, 1a3c0 <rx_complete_cb+0x260>)
   1a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a232:	f005 ff17 	bl	20064 <__aeabi_ddiv>
   1a236:	f006 f8c3 	bl	203c0 <__aeabi_d2uiz>
        uwb_set_rx_timeout(inst, g_config.tx_holdoff_delay + frame_duration + g_config.rx_timeout_delay);
   1a23a:	4b5f      	ldr	r3, [pc, #380]	; (1a3b8 <rx_complete_cb+0x258>)
   1a23c:	6859      	ldr	r1, [r3, #4]
   1a23e:	fa11 f080 	uxtah	r0, r1, r0
   1a242:	8999      	ldrh	r1, [r3, #12]
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1a244:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a248:	4401      	add	r1, r0
   1a24a:	4628      	mov	r0, r5
   1a24c:	4798      	blx	r3
        return true;
   1a24e:	2001      	movs	r0, #1
   1a250:	e7c9      	b.n	1a1e6 <rx_complete_cb+0x86>
            SS_STATS_INC(ack_seq_err);
   1a252:	4a5a      	ldr	r2, [pc, #360]	; (1a3bc <rx_complete_cb+0x25c>)
   1a254:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1a256:	3301      	adds	r3, #1
   1a258:	6253      	str	r3, [r2, #36]	; 0x24
   1a25a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1a25e:	f7ef fd8b 	bl	9d78 <os_sem_release>
            return false;
   1a262:	2000      	movs	r0, #0
   1a264:	e7bf      	b.n	1a1e6 <rx_complete_cb+0x86>
                if (!inst->status.autoack_triggered) {
   1a266:	f895 3509 	ldrb.w	r3, [r5, #1289]	; 0x509
   1a26a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1a26e:	d01f      	beq.n	1a2b0 <rx_complete_cb+0x150>
                uint64_t request_timestamp = inst->rxtimestamp;
   1a270:	f8d5 34e8 	ldr.w	r3, [r5, #1256]	; 0x4e8
                frame->reception_timestamp = request_timestamp & 0xFFFFFFFFULL;
   1a274:	f8c6 300b 	str.w	r3, [r6, #11]
                frame->fctrl = FCNTL_IEEE_RANGE_16;
   1a278:	f648 0341 	movw	r3, #34881	; 0x8841
   1a27c:	8033      	strh	r3, [r6, #0]
                frame->dst_address = frame->src_address;
   1a27e:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1a282:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   1a286:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
   1a28a:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_ACK_T1;
   1a28e:	2319      	movs	r3, #25
   1a290:	7273      	strb	r3, [r6, #9]
   1a292:	2301      	movs	r3, #1
   1a294:	72b3      	strb	r3, [r6, #10]
                frame->carrier_integrator  = - inst->carrier_integrator;
   1a296:	f8d5 34f0 	ldr.w	r3, [r5, #1264]	; 0x4f0
   1a29a:	425b      	negs	r3, r3
   1a29c:	f8c6 301b 	str.w	r3, [r6, #27]
                rng->status.tx_ack_expected = 1;
   1a2a0:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1a2a4:	f043 0310 	orr.w	r3, r3, #16
   1a2a8:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    return true;
   1a2ac:	2001      	movs	r0, #1
                break;
   1a2ae:	e79a      	b.n	1a1e6 <rx_complete_cb+0x86>
                    SS_STATS_INC(ack_tx_err);
   1a2b0:	4a42      	ldr	r2, [pc, #264]	; (1a3bc <rx_complete_cb+0x25c>)
   1a2b2:	69d3      	ldr	r3, [r2, #28]
   1a2b4:	3301      	adds	r3, #1
   1a2b6:	61d3      	str	r3, [r2, #28]
   1a2b8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1a2bc:	f7ef fd5c 	bl	9d78 <os_sem_release>
                    return true;
   1a2c0:	2001      	movs	r0, #1
   1a2c2:	e790      	b.n	1a1e6 <rx_complete_cb+0x86>
                if (inst->frame_len != sizeof(ieee_rng_response_frame_t))
   1a2c4:	f8b5 34e2 	ldrh.w	r3, [r5, #1250]	; 0x4e2
   1a2c8:	2b13      	cmp	r3, #19
   1a2ca:	d001      	beq.n	1a2d0 <rx_complete_cb+0x170>
    return true;
   1a2cc:	2001      	movs	r0, #1
   1a2ce:	e78a      	b.n	1a1e6 <rx_complete_cb+0x86>
                if(inst->status.lde_error)
   1a2d0:	f895 3509 	ldrb.w	r3, [r5, #1289]	; 0x509
   1a2d4:	f013 0f04 	tst.w	r3, #4
   1a2d8:	d16c      	bne.n	1a3b4 <rx_complete_cb+0x254>
                uint64_t response_timestamp = rng->ack_rx_timestamp;
   1a2da:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
    return (dev->uw_funcs->uf_read_txtime_lo32(dev));
   1a2de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a2e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1a2e2:	4628      	mov	r0, r5
   1a2e4:	4798      	blx	r3
                frame->request_timestamp = uwb_read_txtime_lo32(inst) & 0xFFFFFFFFULL;
   1a2e6:	f8c6 0013 	str.w	r0, [r6, #19]
                frame->response_timestamp = (uint32_t)(response_timestamp & 0xFFFFFFFFULL);
   1a2ea:	f8c6 7017 	str.w	r7, [r6, #23]
                if (!rng->ack_rx_timestamp) {
   1a2ee:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   1a2f2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   1a2f6:	4313      	orrs	r3, r2
   1a2f8:	d105      	bne.n	1a306 <rx_complete_cb+0x1a6>
                    SS_STATS_INC(ack_rx_err);
   1a2fa:	4a30      	ldr	r2, [pc, #192]	; (1a3bc <rx_complete_cb+0x25c>)
   1a2fc:	6a13      	ldr	r3, [r2, #32]
   1a2fe:	3301      	adds	r3, #1
   1a300:	6213      	str	r3, [r2, #32]
    return true;
   1a302:	2001      	movs	r0, #1
                    break;
   1a304:	e76f      	b.n	1a1e6 <rx_complete_cb+0x86>
                frame->dst_address = frame->src_address;
   1a306:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1a30a:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   1a30e:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
   1a312:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_ACK_FINAL;
   1a316:	2700      	movs	r7, #0
   1a318:	231a      	movs	r3, #26
   1a31a:	7273      	strb	r3, [r6, #9]
   1a31c:	2301      	movs	r3, #1
   1a31e:	72b3      	strb	r3, [r6, #10]
                frame->carrier_integrator  = inst->carrier_integrator;
   1a320:	f8d5 34f0 	ldr.w	r3, [r5, #1264]	; 0x4f0
   1a324:	f8c6 301b 	str.w	r3, [r6, #27]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1a328:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a32a:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
   1a32e:	231f      	movs	r3, #31
   1a330:	463a      	mov	r2, r7
   1a332:	4631      	mov	r1, r6
   1a334:	4628      	mov	r0, r5
   1a336:	47c0      	blx	r8
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1a338:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a33a:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   1a33c:	463b      	mov	r3, r7
   1a33e:	463a      	mov	r2, r7
   1a340:	211f      	movs	r1, #31
   1a342:	4628      	mov	r0, r5
   1a344:	47b0      	blx	r6
    return (dev->uw_funcs->uf_start_tx(dev));
   1a346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a34a:	4628      	mov	r0, r5
   1a34c:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error) {
   1a34e:	f010 0f04 	tst.w	r0, #4
   1a352:	d10b      	bne.n	1a36c <rx_complete_cb+0x20c>
                    SS_STATS_INC(complete);
   1a354:	4a19      	ldr	r2, [pc, #100]	; (1a3bc <rx_complete_cb+0x25c>)
   1a356:	6953      	ldr	r3, [r2, #20]
   1a358:	3301      	adds	r3, #1
   1a35a:	6153      	str	r3, [r2, #20]
                    rng->control.complete_after_tx = 1;
   1a35c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1a360:	f043 0302 	orr.w	r3, r3, #2
   1a364:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    return true;
   1a368:	2001      	movs	r0, #1
   1a36a:	e73c      	b.n	1a1e6 <rx_complete_cb+0x86>
                    SS_STATS_INC(tx_error);
   1a36c:	4a13      	ldr	r2, [pc, #76]	; (1a3bc <rx_complete_cb+0x25c>)
   1a36e:	6993      	ldr	r3, [r2, #24]
   1a370:	3301      	adds	r3, #1
   1a372:	6193      	str	r3, [r2, #24]
   1a374:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1a378:	f7ef fcfe 	bl	9d78 <os_sem_release>
                    rng_issue_complete(inst);
   1a37c:	4628      	mov	r0, r5
   1a37e:	f7f1 f983 	bl	b688 <rng_issue_complete>
    return true;
   1a382:	2001      	movs	r0, #1
   1a384:	e72f      	b.n	1a1e6 <rx_complete_cb+0x86>
                if (inst->frame_len != sizeof(twr_frame_final_t))
   1a386:	f8b5 34e2 	ldrh.w	r3, [r5, #1250]	; 0x4e2
   1a38a:	2b1f      	cmp	r3, #31
   1a38c:	d001      	beq.n	1a392 <rx_complete_cb+0x232>
    return true;
   1a38e:	2001      	movs	r0, #1
   1a390:	e729      	b.n	1a1e6 <rx_complete_cb+0x86>
                SS_STATS_INC(complete);
   1a392:	4a0a      	ldr	r2, [pc, #40]	; (1a3bc <rx_complete_cb+0x25c>)
   1a394:	6953      	ldr	r3, [r2, #20]
   1a396:	3301      	adds	r3, #1
   1a398:	6153      	str	r3, [r2, #20]
   1a39a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1a39e:	f7ef fceb 	bl	9d78 <os_sem_release>
                rng_issue_complete(inst);
   1a3a2:	4628      	mov	r0, r5
   1a3a4:	f7f1 f970 	bl	b688 <rng_issue_complete>
    return true;
   1a3a8:	2001      	movs	r0, #1
                break;
   1a3aa:	e71c      	b.n	1a1e6 <rx_complete_cb+0x86>
        return false;
   1a3ac:	2000      	movs	r0, #0
   1a3ae:	e71a      	b.n	1a1e6 <rx_complete_cb+0x86>
        return false;
   1a3b0:	2000      	movs	r0, #0
   1a3b2:	e718      	b.n	1a1e6 <rx_complete_cb+0x86>
    return true;
   1a3b4:	2001      	movs	r0, #1
   1a3b6:	e716      	b.n	1a1e6 <rx_complete_cb+0x86>
   1a3b8:	20002adc 	.word	0x20002adc
   1a3bc:	20006774 	.word	0x20006774
   1a3c0:	90690691 	.word	0x90690691
   1a3c4:	3ff06906 	.word	0x3ff06906

0001a3c8 <tx_complete_cb>:

static bool
tx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1a3c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1a3cc:	684c      	ldr	r4, [r1, #4]
    assert(rng);
   1a3ce:	b33c      	cbz	r4, 1a420 <tx_complete_cb+0x58>
   1a3d0:	4605      	mov	r5, r0
   1a3d2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    if(dpl_sem_get_count(&rng->sem) == 1) // unsolicited inbound
   1a3d6:	2b01      	cmp	r3, #1
   1a3d8:	f000 8090 	beq.w	1a4fc <tx_complete_cb+0x134>
        return false;

    if (rng->status.tx_ack_expected != 1) {
   1a3dc:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1a3e0:	f013 0f10 	tst.w	r3, #16
   1a3e4:	f000 808c 	beq.w	1a500 <tx_complete_cb+0x138>
        return false;
    }
    rng->status.tx_ack_expected = 0;
   1a3e8:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1a3ec:	f36f 1304 	bfc	r3, #4, #1
   1a3f0:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72

    twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes]; // Frame already read in rx_complete_cb
   1a3f4:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   1a3f8:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   1a3fc:	fbb3 f1f2 	udiv	r1, r3, r2
   1a400:	fb02 3311 	mls	r3, r2, r1, r3
   1a404:	b29b      	uxth	r3, r3
   1a406:	3326      	adds	r3, #38	; 0x26
   1a408:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1a40c:	f8d3 a004 	ldr.w	sl, [r3, #4]

    if (rng->code == UWB_DATA_CODE_SS_TWR_ACK) {
   1a410:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1a414:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   1a418:	d008      	beq.n	1a42c <tx_complete_cb+0x64>
        if (uwb_start_tx(inst).start_tx_error){
            SS_STATS_INC(tx_error);
            dpl_sem_release(&rng->sem);
        }
    }
    return true;
   1a41a:	2001      	movs	r0, #1
}
   1a41c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(rng);
   1a420:	2300      	movs	r3, #0
   1a422:	461a      	mov	r2, r3
   1a424:	4619      	mov	r1, r3
   1a426:	4618      	mov	r0, r3
   1a428:	f7ee fd94 	bl	8f54 <__assert_func>
    return (dev->uw_funcs->uf_read_txtime(dev));
   1a42c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1a42e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1a430:	4798      	blx	r3
   1a432:	4606      	mov	r6, r0
   1a434:	4688      	mov	r8, r1
    return (dev->uw_funcs->uf_read_systime(dev));
   1a436:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1a43a:	4628      	mov	r0, r5
   1a43c:	4798      	blx	r3
   1a43e:	4607      	mov	r7, r0
   1a440:	4689      	mov	r9, r1
        frame->transmission_timestamp = response_timestamp & 0xFFFFFFFFULL;
   1a442:	f8ca 600f 	str.w	r6, [sl, #15]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1a446:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a448:	f8d3 b044 	ldr.w	fp, [r3, #68]	; 0x44
   1a44c:	2313      	movs	r3, #19
   1a44e:	2200      	movs	r2, #0
   1a450:	4651      	mov	r1, sl
   1a452:	4628      	mov	r0, r5
   1a454:	47d8      	blx	fp
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1a456:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a458:	f8d3 a048 	ldr.w	sl, [r3, #72]	; 0x48
   1a45c:	2300      	movs	r3, #0
   1a45e:	461a      	mov	r2, r3
   1a460:	2113      	movs	r1, #19
   1a462:	4628      	mov	r0, r5
   1a464:	47d0      	blx	sl
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1a466:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1a46a:	2101      	movs	r1, #1
   1a46c:	4628      	mov	r0, r5
   1a46e:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   1a470:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1a474:	2100      	movs	r1, #0
   1a476:	4628      	mov	r0, r5
   1a478:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1a47a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a47c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1a47e:	2113      	movs	r1, #19
   1a480:	4628      	mov	r0, r5
   1a482:	4798      	blx	r3
        uint16_t frame_duration = uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst,sizeof(ieee_rng_response_frame_t)));
   1a484:	f005 fc5a 	bl	1fd3c <__aeabi_i2d>
   1a488:	a322      	add	r3, pc, #136	; (adr r3, 1a514 <tx_complete_cb+0x14c>)
   1a48a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a48e:	f005 fde9 	bl	20064 <__aeabi_ddiv>
   1a492:	f005 ff95 	bl	203c0 <__aeabi_d2uiz>
        uwb_set_rx_timeout(inst, g_config.tx_holdoff_delay + frame_duration + g_config.rx_timeout_delay);
   1a496:	4b1c      	ldr	r3, [pc, #112]	; (1a508 <tx_complete_cb+0x140>)
   1a498:	6859      	ldr	r1, [r3, #4]
   1a49a:	fa11 f080 	uxtah	r0, r1, r0
   1a49e:	8999      	ldrh	r1, [r3, #12]
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1a4a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a4a4:	4401      	add	r1, r0
   1a4a6:	4628      	mov	r0, r5
   1a4a8:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   1a4aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a4ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1a4ae:	2101      	movs	r1, #1
   1a4b0:	4628      	mov	r0, r5
   1a4b2:	4798      	blx	r3
        if (((0xffffffffffULL&(current_timestamp - response_timestamp))>>16) < MYNEWT_VAL(TWR_SS_ACK_TX_HOLDOFF)/4) {
   1a4b4:	1bbe      	subs	r6, r7, r6
   1a4b6:	eb69 0808 	sbc.w	r8, r9, r8
   1a4ba:	0c36      	lsrs	r6, r6, #16
   1a4bc:	ea46 4608 	orr.w	r6, r6, r8, lsl #16
   1a4c0:	4b12      	ldr	r3, [pc, #72]	; (1a50c <tx_complete_cb+0x144>)
   1a4c2:	4033      	ands	r3, r6
   1a4c4:	b93b      	cbnz	r3, 1a4d6 <tx_complete_cb+0x10e>
            uwb_set_delay_start(inst, current_timestamp + (MYNEWT_VAL(TWR_SS_ACK_TX_HOLDOFF)*3/4 << 16));
   1a4c6:	f117 62c0 	adds.w	r2, r7, #100663296	; 0x6000000
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1a4ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a4cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1a4ce:	f149 0300 	adc.w	r3, r9, #0
   1a4d2:	4628      	mov	r0, r5
   1a4d4:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   1a4d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a4da:	4628      	mov	r0, r5
   1a4dc:	4798      	blx	r3
        if (uwb_start_tx(inst).start_tx_error){
   1a4de:	f010 0f04 	tst.w	r0, #4
   1a4e2:	d101      	bne.n	1a4e8 <tx_complete_cb+0x120>
    return true;
   1a4e4:	2001      	movs	r0, #1
   1a4e6:	e799      	b.n	1a41c <tx_complete_cb+0x54>
            SS_STATS_INC(tx_error);
   1a4e8:	4a09      	ldr	r2, [pc, #36]	; (1a510 <tx_complete_cb+0x148>)
   1a4ea:	6993      	ldr	r3, [r2, #24]
   1a4ec:	3301      	adds	r3, #1
   1a4ee:	6193      	str	r3, [r2, #24]
   1a4f0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1a4f4:	f7ef fc40 	bl	9d78 <os_sem_release>
    return true;
   1a4f8:	2001      	movs	r0, #1
   1a4fa:	e78f      	b.n	1a41c <tx_complete_cb+0x54>
        return false;
   1a4fc:	2000      	movs	r0, #0
   1a4fe:	e78d      	b.n	1a41c <tx_complete_cb+0x54>
        return false;
   1a500:	2000      	movs	r0, #0
   1a502:	e78b      	b.n	1a41c <tx_complete_cb+0x54>
   1a504:	f3af 8000 	nop.w
   1a508:	20002adc 	.word	0x20002adc
   1a50c:	00fffe00 	.word	0x00fffe00
   1a510:	20006774 	.word	0x20006774
   1a514:	90690691 	.word	0x90690691
   1a518:	3ff06906 	.word	0x3ff06906

0001a51c <twr_ss_ack_pkg_init>:
{
   1a51c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a51e:	b083      	sub	sp, #12
    printf("{\"utime\": %"PRIu32",\"msg\": \"twr_ss_ack_pkg_init\"}\n",
   1a520:	f7f2 fa2e 	bl	c980 <dpl_cputime_get32>
   1a524:	4601      	mov	r1, r0
   1a526:	481e      	ldr	r0, [pc, #120]	; (1a5a0 <twr_ss_ack_pkg_init+0x84>)
   1a528:	f7f2 f9c4 	bl	c8b4 <printf>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1a52c:	2400      	movs	r4, #0
   1a52e:	b18c      	cbz	r4, 1a554 <twr_ss_ack_pkg_init+0x38>
    rc = stats_init(
   1a530:	2205      	movs	r2, #5
   1a532:	9200      	str	r2, [sp, #0]
   1a534:	4b1b      	ldr	r3, [pc, #108]	; (1a5a4 <twr_ss_ack_pkg_init+0x88>)
   1a536:	2104      	movs	r1, #4
   1a538:	481b      	ldr	r0, [pc, #108]	; (1a5a8 <twr_ss_ack_pkg_init+0x8c>)
   1a53a:	f7f5 f8f5 	bl	f728 <stats_init>
    assert(rc == 0);
   1a53e:	4604      	mov	r4, r0
   1a540:	bb10      	cbnz	r0, 1a588 <twr_ss_ack_pkg_init+0x6c>
    rc |= stats_register("twr_ss_ack", STATS_HDR(g_twr_ss_ack_stat));
   1a542:	4919      	ldr	r1, [pc, #100]	; (1a5a8 <twr_ss_ack_pkg_init+0x8c>)
   1a544:	4819      	ldr	r0, [pc, #100]	; (1a5ac <twr_ss_ack_pkg_init+0x90>)
   1a546:	f7f5 f979 	bl	f83c <stats_register>
    assert(rc == 0);
   1a54a:	ea54 0300 	orrs.w	r3, r4, r0
   1a54e:	d121      	bne.n	1a594 <twr_ss_ack_pkg_init+0x78>
}
   1a550:	b003      	add	sp, #12
   1a552:	bdf0      	pop	{r4, r5, r6, r7, pc}
        udev = uwb_dev_idx_lookup(i);
   1a554:	4620      	mov	r0, r4
   1a556:	f7ee fa53 	bl	8a00 <uwb_dev_idx_lookup>
        if (!udev) {
   1a55a:	4607      	mov	r7, r0
   1a55c:	b190      	cbz	r0, 1a584 <twr_ss_ack_pkg_init+0x68>
        g_cbs[i].inst_ptr = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
   1a55e:	2104      	movs	r1, #4
   1a560:	f7ee fad3 	bl	8b0a <uwb_mac_find_cb_inst_ptr>
   1a564:	0126      	lsls	r6, r4, #4
   1a566:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
   1a56a:	4b11      	ldr	r3, [pc, #68]	; (1a5b0 <twr_ss_ack_pkg_init+0x94>)
   1a56c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1a570:	6068      	str	r0, [r5, #4]
        uwb_mac_append_interface(udev, &g_cbs[i]);
   1a572:	4629      	mov	r1, r5
   1a574:	4638      	mov	r0, r7
   1a576:	f7ee fa73 	bl	8a60 <uwb_mac_append_interface>
        uwb_rng_append_config(g_cbs[i].inst_ptr, &g_rng_cfgs[i]);
   1a57a:	490e      	ldr	r1, [pc, #56]	; (1a5b4 <twr_ss_ack_pkg_init+0x98>)
   1a57c:	4431      	add	r1, r6
   1a57e:	6868      	ldr	r0, [r5, #4]
   1a580:	f7f0 fcf2 	bl	af68 <uwb_rng_append_config>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1a584:	3401      	adds	r4, #1
   1a586:	e7d2      	b.n	1a52e <twr_ss_ack_pkg_init+0x12>
    assert(rc == 0);
   1a588:	2300      	movs	r3, #0
   1a58a:	461a      	mov	r2, r3
   1a58c:	4619      	mov	r1, r3
   1a58e:	4618      	mov	r0, r3
   1a590:	f7ee fce0 	bl	8f54 <__assert_func>
    assert(rc == 0);
   1a594:	2300      	movs	r3, #0
   1a596:	461a      	mov	r2, r3
   1a598:	4619      	mov	r1, r3
   1a59a:	4618      	mov	r0, r3
   1a59c:	f7ee fcda 	bl	8f54 <__assert_func>
   1a5a0:	00023760 	.word	0x00023760
   1a5a4:	000237c0 	.word	0x000237c0
   1a5a8:	20006774 	.word	0x20006774
   1a5ac:	00023790 	.word	0x00023790
   1a5b0:	20002aa0 	.word	0x20002aa0
   1a5b4:	20002aec 	.word	0x20002aec

0001a5b8 <twr_ss_ack_free>:
{
   1a5b8:	b508      	push	{r3, lr}
    assert(dev);
   1a5ba:	b118      	cbz	r0, 1a5c4 <twr_ss_ack_free+0xc>
    uwb_mac_remove_interface(dev, UWBEXT_RNG_SS_ACK);
   1a5bc:	2107      	movs	r1, #7
   1a5be:	f7ee fa74 	bl	8aaa <uwb_mac_remove_interface>
}
   1a5c2:	bd08      	pop	{r3, pc}
    assert(dev);
   1a5c4:	2300      	movs	r3, #0
   1a5c6:	461a      	mov	r2, r3
   1a5c8:	4619      	mov	r1, r3
   1a5ca:	4618      	mov	r0, r3
   1a5cc:	f7ee fcc2 	bl	8f54 <__assert_func>

0001a5d0 <twr_ss_ack_pkg_down>:
{
   1a5d0:	b508      	push	{r3, lr}
    if (g_cbs[0].inst_ptr) {
   1a5d2:	4b04      	ldr	r3, [pc, #16]	; (1a5e4 <twr_ss_ack_pkg_down+0x14>)
   1a5d4:	685b      	ldr	r3, [r3, #4]
   1a5d6:	b113      	cbz	r3, 1a5de <twr_ss_ack_pkg_down+0xe>
        twr_ss_ack_free(rng->dev_inst);
   1a5d8:	6818      	ldr	r0, [r3, #0]
   1a5da:	f7ff ffed 	bl	1a5b8 <twr_ss_ack_free>
}
   1a5de:	2000      	movs	r0, #0
   1a5e0:	bd08      	pop	{r3, pc}
   1a5e2:	bf00      	nop
   1a5e4:	20002aa0 	.word	0x20002aa0

0001a5e8 <rx_complete_cb>:
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    struct uwb_rng_txd txd;
    struct uwb_mac_interface * cbs_i = NULL;
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   1a5e8:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   1a5ec:	f648 0341 	movw	r3, #34881	; 0x8841
   1a5f0:	429a      	cmp	r2, r3
   1a5f2:	f040 8125 	bne.w	1a840 <rx_complete_cb+0x258>
{
   1a5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a5fa:	b088      	sub	sp, #32
   1a5fc:	4604      	mov	r4, r0
        return false;

    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1a5fe:	684e      	ldr	r6, [r1, #4]
    assert(rng);
   1a600:	b31e      	cbz	r6, 1a64a <rx_complete_cb+0x62>
   1a602:	f8b6 3052 	ldrh.w	r3, [r6, #82]	; 0x52
    if(dpl_sem_get_count(&rng->sem) == 1) // unsolicited inbound
   1a606:	2b01      	cmp	r3, #1
   1a608:	f000 811c 	beq.w	1a844 <rx_complete_cb+0x25c>
        return false;

    twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes]; // Frame already read within loader layers.
   1a60c:	f8b6 3076 	ldrh.w	r3, [r6, #118]	; 0x76
   1a610:	f8b6 207a 	ldrh.w	r2, [r6, #122]	; 0x7a
   1a614:	fbb3 f1f2 	udiv	r1, r3, r2
   1a618:	fb02 3311 	mls	r3, r2, r1, r3
   1a61c:	b29b      	uxth	r3, r3
   1a61e:	3326      	adds	r3, #38	; 0x26
   1a620:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1a624:	685f      	ldr	r7, [r3, #4]

    switch(rng->code){
   1a626:	f8b6 3048 	ldrh.w	r3, [r6, #72]	; 0x48
   1a62a:	f240 1215 	movw	r2, #277	; 0x115
   1a62e:	4293      	cmp	r3, r2
   1a630:	f000 808c 	beq.w	1a74c <rx_complete_cb+0x164>
   1a634:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
   1a638:	f000 80ef 	beq.w	1a81a <rx_complete_cb+0x232>
   1a63c:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
   1a640:	d009      	beq.n	1a656 <rx_complete_cb+0x6e>
   1a642:	2000      	movs	r0, #0
        default:
                return false;
                break;
    }
    return true;
}
   1a644:	b008      	add	sp, #32
   1a646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(rng);
   1a64a:	2300      	movs	r3, #0
   1a64c:	461a      	mov	r2, r3
   1a64e:	4619      	mov	r1, r3
   1a650:	4618      	mov	r0, r3
   1a652:	f7ee fc7f 	bl	8f54 <__assert_func>
                uint64_t request_timestamp = inst->rxtimestamp;
   1a656:	f8d0 54e8 	ldr.w	r5, [r0, #1256]	; 0x4e8
   1a65a:	f8d0 34ec 	ldr.w	r3, [r0, #1260]	; 0x4ec
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, request_timestamp, inst->frame_len);
   1a65e:	f8b0 24e2 	ldrh.w	r2, [r0, #1250]	; 0x4e2
   1a662:	9202      	str	r2, [sp, #8]
   1a664:	9500      	str	r5, [sp, #0]
   1a666:	9301      	str	r3, [sp, #4]
   1a668:	4a77      	ldr	r2, [pc, #476]	; (1a848 <rx_complete_cb+0x260>)
   1a66a:	a904      	add	r1, sp, #16
   1a66c:	4630      	mov	r0, r6
   1a66e:	f7f0 fcb3 	bl	afd8 <uwb_rng_calc_rel_tx>
                frame->reception_timestamp = request_timestamp & 0xFFFFFFFFULL;
   1a672:	f8c7 500b 	str.w	r5, [r7, #11]
                frame->transmission_timestamp = txd.response_timestamp & 0xFFFFFFFFULL;
   1a676:	9b06      	ldr	r3, [sp, #24]
   1a678:	f8c7 300f 	str.w	r3, [r7, #15]
                frame->dst_address = frame->src_address;
   1a67c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   1a680:	f8a7 3005 	strh.w	r3, [r7, #5]
                frame->src_address = inst->my_short_address;
   1a684:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1a688:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_EXT_T1;
   1a68c:	2315      	movs	r3, #21
   1a68e:	727b      	strb	r3, [r7, #9]
   1a690:	2301      	movs	r3, #1
   1a692:	72bb      	strb	r3, [r7, #10]
                frame->carrier_integrator  = - inst->carrier_integrator;
   1a694:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   1a698:	425b      	negs	r3, r3
   1a69a:	f8c7 301b 	str.w	r3, [r7, #27]
                if(!(SLIST_EMPTY(&inst->interface_cbs))) {
   1a69e:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
   1a6a2:	2d00      	cmp	r5, #0
   1a6a4:	d13e      	bne.n	1a724 <rx_complete_cb+0x13c>
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1a6a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a6a8:	6c5d      	ldr	r5, [r3, #68]	; 0x44
   1a6aa:	2320      	movs	r3, #32
   1a6ac:	2200      	movs	r2, #0
   1a6ae:	4639      	mov	r1, r7
   1a6b0:	4620      	mov	r0, r4
   1a6b2:	47a8      	blx	r5
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1a6b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a6b6:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1a6b8:	2300      	movs	r3, #0
   1a6ba:	461a      	mov	r2, r3
   1a6bc:	2120      	movs	r1, #32
   1a6be:	4620      	mov	r0, r4
   1a6c0:	47a8      	blx	r5
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1a6c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a6c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1a6c6:	2101      	movs	r1, #1
   1a6c8:	4620      	mov	r0, r4
   1a6ca:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1a6cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a6ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1a6d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1a6d4:	4620      	mov	r0, r4
   1a6d6:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   1a6d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a6dc:	4620      	mov	r0, r4
   1a6de:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error){
   1a6e0:	f010 0f04 	tst.w	r0, #4
   1a6e4:	d129      	bne.n	1a73a <rx_complete_cb+0x152>
                uwb_set_wait4resp_delay(inst, g_config.tx_holdoff_delay -
   1a6e6:	4d58      	ldr	r5, [pc, #352]	; (1a848 <rx_complete_cb+0x260>)
   1a6e8:	6869      	ldr	r1, [r5, #4]
                                        inst->config.rx.timeToRxStable);
   1a6ea:	f894 251b 	ldrb.w	r2, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   1a6ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a6f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1a6f2:	1a89      	subs	r1, r1, r2
   1a6f4:	4620      	mov	r0, r4
   1a6f6:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1a6f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a6fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1a6fc:	211f      	movs	r1, #31
   1a6fe:	4620      	mov	r0, r4
   1a700:	4798      	blx	r3
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   1a702:	89a9      	ldrh	r1, [r5, #12]
                uwb_set_rx_timeout(inst, uwb_phy_frame_duration(inst, sizeof(twr_frame_final_t)) +
   1a704:	4408      	add	r0, r1
                                   g_config.rx_timeout_delay + inst->config.rx.timeToRxStable);
   1a706:	f894 151b 	ldrb.w	r1, [r4, #1307]	; 0x51b
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1a70a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a70e:	4401      	add	r1, r0
   1a710:	4620      	mov	r0, r4
   1a712:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   1a714:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1a718:	2101      	movs	r1, #1
   1a71a:	4620      	mov	r0, r4
   1a71c:	4798      	blx	r3
    return true;
   1a71e:	2001      	movs	r0, #1
                break;
   1a720:	e790      	b.n	1a644 <rx_complete_cb+0x5c>
                    SLIST_FOREACH(cbs_i, &inst->interface_cbs, next) {
   1a722:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1a724:	2d00      	cmp	r5, #0
   1a726:	d0be      	beq.n	1a6a6 <rx_complete_cb+0xbe>
                        if (cbs_i != NULL && cbs_i->final_cb)
   1a728:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1a72a:	2b00      	cmp	r3, #0
   1a72c:	d0f9      	beq.n	1a722 <rx_complete_cb+0x13a>
                            if(cbs_i->final_cb(inst, cbs_i)) break;
   1a72e:	4629      	mov	r1, r5
   1a730:	4620      	mov	r0, r4
   1a732:	4798      	blx	r3
   1a734:	2800      	cmp	r0, #0
   1a736:	d0f4      	beq.n	1a722 <rx_complete_cb+0x13a>
   1a738:	e7b5      	b.n	1a6a6 <rx_complete_cb+0xbe>
                    SS_STATS_INC(tx_error);
   1a73a:	4a44      	ldr	r2, [pc, #272]	; (1a84c <rx_complete_cb+0x264>)
   1a73c:	6993      	ldr	r3, [r2, #24]
   1a73e:	3301      	adds	r3, #1
   1a740:	6193      	str	r3, [r2, #24]
   1a742:	f106 004c 	add.w	r0, r6, #76	; 0x4c
   1a746:	f7ef fb17 	bl	9d78 <os_sem_release>
   1a74a:	e7cc      	b.n	1a6e6 <rx_complete_cb+0xfe>
                if (inst->frame_len != TWR_EXT_FRAME_SIZE)
   1a74c:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1a750:	2b20      	cmp	r3, #32
   1a752:	d001      	beq.n	1a758 <rx_complete_cb+0x170>
    return true;
   1a754:	2001      	movs	r0, #1
   1a756:	e775      	b.n	1a644 <rx_complete_cb+0x5c>
                if(inst->status.lde_error)
   1a758:	f890 2509 	ldrb.w	r2, [r0, #1289]	; 0x509
   1a75c:	f012 0f04 	tst.w	r2, #4
   1a760:	d001      	beq.n	1a766 <rx_complete_cb+0x17e>
    return true;
   1a762:	2001      	movs	r0, #1
   1a764:	e76e      	b.n	1a644 <rx_complete_cb+0x5c>
                uint64_t response_timestamp = inst->rxtimestamp;
   1a766:	f8d0 54e8 	ldr.w	r5, [r0, #1256]	; 0x4e8
   1a76a:	f8d0 24ec 	ldr.w	r2, [r0, #1260]	; 0x4ec
                uwb_rng_calc_rel_tx(rng, &txd, &g_config, response_timestamp, inst->frame_len);
   1a76e:	9302      	str	r3, [sp, #8]
   1a770:	9500      	str	r5, [sp, #0]
   1a772:	9201      	str	r2, [sp, #4]
   1a774:	4a34      	ldr	r2, [pc, #208]	; (1a848 <rx_complete_cb+0x260>)
   1a776:	a904      	add	r1, sp, #16
   1a778:	4630      	mov	r0, r6
   1a77a:	f7f0 fc2d 	bl	afd8 <uwb_rng_calc_rel_tx>
    return (dev->uw_funcs->uf_read_txtime_lo32(dev));
   1a77e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1a782:	4620      	mov	r0, r4
   1a784:	4798      	blx	r3
                frame->request_timestamp = uwb_read_txtime_lo32(inst) & 0xFFFFFFFFULL;
   1a786:	f8c7 0013 	str.w	r0, [r7, #19]
                frame->response_timestamp = (uint32_t)(response_timestamp & 0xFFFFFFFFULL);
   1a78a:	f8c7 5017 	str.w	r5, [r7, #23]
                frame->dst_address = frame->src_address;
   1a78e:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   1a792:	f8a7 3005 	strh.w	r3, [r7, #5]
                frame->src_address = inst->my_short_address;
   1a796:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1a79a:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_EXT_FINAL;
   1a79e:	2500      	movs	r5, #0
   1a7a0:	2316      	movs	r3, #22
   1a7a2:	727b      	strb	r3, [r7, #9]
   1a7a4:	2301      	movs	r3, #1
   1a7a6:	72bb      	strb	r3, [r7, #10]
                frame->carrier_integrator  = inst->carrier_integrator;
   1a7a8:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   1a7ac:	f8c7 301b 	str.w	r3, [r7, #27]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1a7b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a7b2:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
   1a7b6:	231f      	movs	r3, #31
   1a7b8:	462a      	mov	r2, r5
   1a7ba:	4639      	mov	r1, r7
   1a7bc:	4620      	mov	r0, r4
   1a7be:	47c0      	blx	r8
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1a7c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a7c2:	6c9f      	ldr	r7, [r3, #72]	; 0x48
   1a7c4:	462b      	mov	r3, r5
   1a7c6:	462a      	mov	r2, r5
   1a7c8:	211f      	movs	r1, #31
   1a7ca:	4620      	mov	r0, r4
   1a7cc:	47b8      	blx	r7
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1a7ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a7d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1a7d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1a7d6:	4620      	mov	r0, r4
   1a7d8:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   1a7da:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a7de:	4620      	mov	r0, r4
   1a7e0:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error){
   1a7e2:	f010 0f04 	tst.w	r0, #4
   1a7e6:	d10b      	bne.n	1a800 <rx_complete_cb+0x218>
                    SS_STATS_INC(complete);
   1a7e8:	4a18      	ldr	r2, [pc, #96]	; (1a84c <rx_complete_cb+0x264>)
   1a7ea:	6953      	ldr	r3, [r2, #20]
   1a7ec:	3301      	adds	r3, #1
   1a7ee:	6153      	str	r3, [r2, #20]
                    rng->control.complete_after_tx = 1;
   1a7f0:	f896 3070 	ldrb.w	r3, [r6, #112]	; 0x70
   1a7f4:	f043 0302 	orr.w	r3, r3, #2
   1a7f8:	f886 3070 	strb.w	r3, [r6, #112]	; 0x70
    return true;
   1a7fc:	2001      	movs	r0, #1
   1a7fe:	e721      	b.n	1a644 <rx_complete_cb+0x5c>
                    SS_STATS_INC(tx_error);
   1a800:	4a12      	ldr	r2, [pc, #72]	; (1a84c <rx_complete_cb+0x264>)
   1a802:	6993      	ldr	r3, [r2, #24]
   1a804:	3301      	adds	r3, #1
   1a806:	6193      	str	r3, [r2, #24]
   1a808:	f106 004c 	add.w	r0, r6, #76	; 0x4c
   1a80c:	f7ef fab4 	bl	9d78 <os_sem_release>
                    rng_issue_complete(inst);
   1a810:	4620      	mov	r0, r4
   1a812:	f7f0 ff39 	bl	b688 <rng_issue_complete>
    return true;
   1a816:	2001      	movs	r0, #1
   1a818:	e714      	b.n	1a644 <rx_complete_cb+0x5c>
                if (inst->frame_len != sizeof(twr_frame_final_t))
   1a81a:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   1a81e:	2b1f      	cmp	r3, #31
   1a820:	d001      	beq.n	1a826 <rx_complete_cb+0x23e>
    return true;
   1a822:	2001      	movs	r0, #1
   1a824:	e70e      	b.n	1a644 <rx_complete_cb+0x5c>
                SS_STATS_INC(complete);
   1a826:	4a09      	ldr	r2, [pc, #36]	; (1a84c <rx_complete_cb+0x264>)
   1a828:	6953      	ldr	r3, [r2, #20]
   1a82a:	3301      	adds	r3, #1
   1a82c:	6153      	str	r3, [r2, #20]
   1a82e:	f106 004c 	add.w	r0, r6, #76	; 0x4c
   1a832:	f7ef faa1 	bl	9d78 <os_sem_release>
                rng_issue_complete(inst);
   1a836:	4620      	mov	r0, r4
   1a838:	f7f0 ff26 	bl	b688 <rng_issue_complete>
    return true;
   1a83c:	2001      	movs	r0, #1
                break;
   1a83e:	e701      	b.n	1a644 <rx_complete_cb+0x5c>
        return false;
   1a840:	2000      	movs	r0, #0
}
   1a842:	4770      	bx	lr
        return false;
   1a844:	2000      	movs	r0, #0
   1a846:	e6fd      	b.n	1a644 <rx_complete_cb+0x5c>
   1a848:	20002b38 	.word	0x20002b38
   1a84c:	2000679c 	.word	0x2000679c

0001a850 <twr_ss_ext_pkg_init>:
{
   1a850:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a852:	b083      	sub	sp, #12
    printf("{\"utime\": %"PRIu32",\"msg\": \"twr_ss_ext_pkg_init\"}\n",
   1a854:	f7f2 f894 	bl	c980 <dpl_cputime_get32>
   1a858:	4601      	mov	r1, r0
   1a85a:	481b      	ldr	r0, [pc, #108]	; (1a8c8 <twr_ss_ext_pkg_init+0x78>)
   1a85c:	f7f2 f82a 	bl	c8b4 <printf>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1a860:	2400      	movs	r4, #0
   1a862:	b18c      	cbz	r4, 1a888 <twr_ss_ext_pkg_init+0x38>
    rc = stats_init(
   1a864:	4d19      	ldr	r5, [pc, #100]	; (1a8cc <twr_ss_ext_pkg_init+0x7c>)
   1a866:	2202      	movs	r2, #2
   1a868:	9200      	str	r2, [sp, #0]
   1a86a:	4b19      	ldr	r3, [pc, #100]	; (1a8d0 <twr_ss_ext_pkg_init+0x80>)
   1a86c:	2104      	movs	r1, #4
   1a86e:	4628      	mov	r0, r5
   1a870:	f7f4 ff5a 	bl	f728 <stats_init>
   1a874:	4604      	mov	r4, r0
    rc |= stats_register("twr_ss_ext", STATS_HDR(g_twr_ss_ext_stat));
   1a876:	4629      	mov	r1, r5
   1a878:	4816      	ldr	r0, [pc, #88]	; (1a8d4 <twr_ss_ext_pkg_init+0x84>)
   1a87a:	f7f4 ffdf 	bl	f83c <stats_register>
    assert(rc == 0);
   1a87e:	ea54 0300 	orrs.w	r3, r4, r0
   1a882:	d11b      	bne.n	1a8bc <twr_ss_ext_pkg_init+0x6c>
}
   1a884:	b003      	add	sp, #12
   1a886:	bdf0      	pop	{r4, r5, r6, r7, pc}
        udev = uwb_dev_idx_lookup(i);
   1a888:	4620      	mov	r0, r4
   1a88a:	f7ee f8b9 	bl	8a00 <uwb_dev_idx_lookup>
        if (!udev) {
   1a88e:	4607      	mov	r7, r0
   1a890:	b190      	cbz	r0, 1a8b8 <twr_ss_ext_pkg_init+0x68>
        g_cbs[i].inst_ptr = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
   1a892:	2104      	movs	r1, #4
   1a894:	f7ee f939 	bl	8b0a <uwb_mac_find_cb_inst_ptr>
   1a898:	0126      	lsls	r6, r4, #4
   1a89a:	ebc4 1504 	rsb	r5, r4, r4, lsl #4
   1a89e:	4b0e      	ldr	r3, [pc, #56]	; (1a8d8 <twr_ss_ext_pkg_init+0x88>)
   1a8a0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1a8a4:	6068      	str	r0, [r5, #4]
        uwb_mac_append_interface(udev, &g_cbs[i]);
   1a8a6:	4629      	mov	r1, r5
   1a8a8:	4638      	mov	r0, r7
   1a8aa:	f7ee f8d9 	bl	8a60 <uwb_mac_append_interface>
        uwb_rng_append_config(g_cbs[i].inst_ptr, &g_rng_cfgs[i]);
   1a8ae:	490b      	ldr	r1, [pc, #44]	; (1a8dc <twr_ss_ext_pkg_init+0x8c>)
   1a8b0:	4431      	add	r1, r6
   1a8b2:	6868      	ldr	r0, [r5, #4]
   1a8b4:	f7f0 fb58 	bl	af68 <uwb_rng_append_config>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1a8b8:	3401      	adds	r4, #1
   1a8ba:	e7d2      	b.n	1a862 <twr_ss_ext_pkg_init+0x12>
    assert(rc == 0);
   1a8bc:	2300      	movs	r3, #0
   1a8be:	461a      	mov	r2, r3
   1a8c0:	4619      	mov	r1, r3
   1a8c2:	4618      	mov	r0, r3
   1a8c4:	f7ee fb46 	bl	8f54 <__assert_func>
   1a8c8:	000237e0 	.word	0x000237e0
   1a8cc:	2000679c 	.word	0x2000679c
   1a8d0:	0002381c 	.word	0x0002381c
   1a8d4:	00023810 	.word	0x00023810
   1a8d8:	20002afc 	.word	0x20002afc
   1a8dc:	20002b48 	.word	0x20002b48

0001a8e0 <twr_ss_ext_free>:
twr_ss_ext_free(struct uwb_dev * inst){
   1a8e0:	b508      	push	{r3, lr}
    assert(inst);
   1a8e2:	b118      	cbz	r0, 1a8ec <twr_ss_ext_free+0xc>
    uwb_mac_remove_interface(inst, UWBEXT_RNG_SS_EXT);
   1a8e4:	2106      	movs	r1, #6
   1a8e6:	f7ee f8e0 	bl	8aaa <uwb_mac_remove_interface>
}
   1a8ea:	bd08      	pop	{r3, pc}
    assert(inst);
   1a8ec:	2300      	movs	r3, #0
   1a8ee:	461a      	mov	r2, r3
   1a8f0:	4619      	mov	r1, r3
   1a8f2:	4618      	mov	r0, r3
   1a8f4:	f7ee fb2e 	bl	8f54 <__assert_func>

0001a8f8 <twr_ss_ext_pkg_down>:
{
   1a8f8:	b538      	push	{r3, r4, r5, lr}
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1a8fa:	2400      	movs	r4, #0
   1a8fc:	b10c      	cbz	r4, 1a902 <twr_ss_ext_pkg_down+0xa>
}
   1a8fe:	2000      	movs	r0, #0
   1a900:	bd38      	pop	{r3, r4, r5, pc}
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
   1a902:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1a906:	009a      	lsls	r2, r3, #2
   1a908:	4b07      	ldr	r3, [pc, #28]	; (1a928 <twr_ss_ext_pkg_down+0x30>)
   1a90a:	4413      	add	r3, r2
   1a90c:	685d      	ldr	r5, [r3, #4]
        if (!rng) continue;
   1a90e:	b145      	cbz	r5, 1a922 <twr_ss_ext_pkg_down+0x2a>
        uwb_rng_remove_config(g_cbs[i].inst_ptr, g_rng_cfgs[i].rng_code);
   1a910:	0123      	lsls	r3, r4, #4
   1a912:	4a06      	ldr	r2, [pc, #24]	; (1a92c <twr_ss_ext_pkg_down+0x34>)
   1a914:	5ad1      	ldrh	r1, [r2, r3]
   1a916:	4628      	mov	r0, r5
   1a918:	f7f0 fb3f 	bl	af9a <uwb_rng_remove_config>
        twr_ss_ext_free(rng->dev_inst);
   1a91c:	6828      	ldr	r0, [r5, #0]
   1a91e:	f7ff ffdf 	bl	1a8e0 <twr_ss_ext_free>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   1a922:	3401      	adds	r4, #1
   1a924:	e7ea      	b.n	1a8fc <twr_ss_ext_pkg_down+0x4>
   1a926:	bf00      	nop
   1a928:	20002afc 	.word	0x20002afc
   1a92c:	20002b48 	.word	0x20002b48

0001a930 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1a930:	b40e      	push	{r1, r2, r3}
   1a932:	b500      	push	{lr}
   1a934:	b082      	sub	sp, #8
   1a936:	ab03      	add	r3, sp, #12
   1a938:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1a93c:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1a93e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a942:	f7f1 ffc9 	bl	c8d8 <vsnprintf>
	va_end(ap);

	return rv;
}
   1a946:	b002      	add	sp, #8
   1a948:	f85d eb04 	ldr.w	lr, [sp], #4
   1a94c:	b003      	add	sp, #12
   1a94e:	4770      	bx	lr

0001a950 <strchr>:

#include <string.h>

char *strchr(const char *s, int c)
{
	while (*s != (char)c) {
   1a950:	e000      	b.n	1a954 <strchr+0x4>
		if (!*s)
			return NULL;
		s++;
   1a952:	3001      	adds	r0, #1
	while (*s != (char)c) {
   1a954:	7803      	ldrb	r3, [r0, #0]
   1a956:	b2ca      	uxtb	r2, r1
   1a958:	4293      	cmp	r3, r2
   1a95a:	d003      	beq.n	1a964 <strchr+0x14>
		if (!*s)
   1a95c:	2b00      	cmp	r3, #0
   1a95e:	d1f8      	bne.n	1a952 <strchr+0x2>
			return NULL;
   1a960:	2000      	movs	r0, #0
	}

	return (char *)s;
}
   1a962:	4770      	bx	lr
   1a964:	4770      	bx	lr

0001a966 <strcpy>:
 */

#include <string.h>

char *strcpy(char *dst, const char *src)
{
   1a966:	b410      	push	{r4}
	char *q = dst;
   1a968:	4602      	mov	r2, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
   1a96a:	780c      	ldrb	r4, [r1, #0]
   1a96c:	3101      	adds	r1, #1
   1a96e:	7014      	strb	r4, [r2, #0]
   1a970:	3201      	adds	r2, #1
	} while (ch);
   1a972:	2c00      	cmp	r4, #0
   1a974:	d1f9      	bne.n	1a96a <strcpy+0x4>

	return dst;
}
   1a976:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a97a:	4770      	bx	lr

0001a97c <strncmp>:
 */

#include <string.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
   1a97c:	b410      	push	{r4}
   1a97e:	4603      	mov	r3, r0
	const unsigned char *c1 = (const unsigned char *)s1;
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;
   1a980:	2000      	movs	r0, #0

	while (n--) {
   1a982:	4614      	mov	r4, r2
   1a984:	3a01      	subs	r2, #1
   1a986:	b13c      	cbz	r4, 1a998 <strncmp+0x1c>
		d = (int)(ch = *c1++) - (int)*c2++;
   1a988:	f813 4b01 	ldrb.w	r4, [r3], #1
   1a98c:	f811 0b01 	ldrb.w	r0, [r1], #1
		if (d || !ch)
   1a990:	1a20      	subs	r0, r4, r0
   1a992:	d101      	bne.n	1a998 <strncmp+0x1c>
   1a994:	2c00      	cmp	r4, #0
   1a996:	d1f4      	bne.n	1a982 <strncmp+0x6>
			break;
	}

	return d;
}
   1a998:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a99c:	4770      	bx	lr

0001a99e <strrchr>:
 */

#include <string.h>

char *strrchr(const char *s, int c)
{
   1a99e:	4603      	mov	r3, r0
	const char *found = NULL;
   1a9a0:	2000      	movs	r0, #0

	while (*s) {
   1a9a2:	e000      	b.n	1a9a6 <strrchr+0x8>
		if (*s == (char)c)
			found = s;
		s++;
   1a9a4:	3301      	adds	r3, #1
	while (*s) {
   1a9a6:	781a      	ldrb	r2, [r3, #0]
   1a9a8:	b12a      	cbz	r2, 1a9b6 <strrchr+0x18>
		if (*s == (char)c)
   1a9aa:	fa5f fc81 	uxtb.w	ip, r1
   1a9ae:	4594      	cmp	ip, r2
   1a9b0:	d1f8      	bne.n	1a9a4 <strrchr+0x6>
			found = s;
   1a9b2:	4618      	mov	r0, r3
   1a9b4:	e7f6      	b.n	1a9a4 <strrchr+0x6>
	}

	return (char *)found;
}
   1a9b6:	4770      	bx	lr

0001a9b8 <strtok_r>:
#include <string.h>

char *strtok_r(char *s, const char *delim, char **holder)
{
   1a9b8:	b538      	push	{r3, r4, r5, lr}
   1a9ba:	460d      	mov	r5, r1
   1a9bc:	4614      	mov	r4, r2
	if (s)
   1a9be:	b100      	cbz	r0, 1a9c2 <strtok_r+0xa>
		*holder = s;
   1a9c0:	6020      	str	r0, [r4, #0]

	do {
		s = strsep(holder, delim);
   1a9c2:	4629      	mov	r1, r5
   1a9c4:	4620      	mov	r0, r4
   1a9c6:	f000 f89d 	bl	1ab04 <strsep>
	} while (s && !*s);
   1a9ca:	4603      	mov	r3, r0
   1a9cc:	b110      	cbz	r0, 1a9d4 <strtok_r+0x1c>
   1a9ce:	7800      	ldrb	r0, [r0, #0]
   1a9d0:	2800      	cmp	r0, #0
   1a9d2:	d0f6      	beq.n	1a9c2 <strtok_r+0xa>

	return s;
}
   1a9d4:	4618      	mov	r0, r3
   1a9d6:	bd38      	pop	{r3, r4, r5, pc}

0001a9d8 <strtol>:
#include <stddef.h>
#include <stdlib.h>
#include <inttypes.h>

TYPE NAME(const char *nptr, char **endptr, int base)
{
   1a9d8:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1a9da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a9de:	f000 f811 	bl	1aa04 <strntoumax>
}
   1a9e2:	bd08      	pop	{r3, pc}

0001a9e4 <strtoll>:
{
   1a9e4:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1a9e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a9ea:	f000 f80b 	bl	1aa04 <strntoumax>
}
   1a9ee:	bd08      	pop	{r3, pc}

0001a9f0 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1a9f0:	b508      	push	{r3, lr}
   1a9f2:	460a      	mov	r2, r1
	return vfprintf(stdout, format, ap);
   1a9f4:	4601      	mov	r1, r0
   1a9f6:	4b02      	ldr	r3, [pc, #8]	; (1aa00 <vprintf+0x10>)
   1a9f8:	6818      	ldr	r0, [r3, #0]
   1a9fa:	f7f1 ff57 	bl	c8ac <vfprintf>
}
   1a9fe:	bd08      	pop	{r3, pc}
   1aa00:	00021bdc 	.word	0x00021bdc

0001aa04 <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
   1aa04:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa06:	4604      	mov	r4, r0
   1aa08:	460d      	mov	r5, r1
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
   1aa0a:	e001      	b.n	1aa10 <strntoumax+0xc>
		nptr++;
   1aa0c:	3401      	adds	r4, #1
		n--;
   1aa0e:	3b01      	subs	r3, #1
	while (n && isspace((unsigned char)*nptr)) {
   1aa10:	b143      	cbz	r3, 1aa24 <strntoumax+0x20>
   1aa12:	7821      	ldrb	r1, [r4, #0]
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   1aa14:	2920      	cmp	r1, #32
   1aa16:	d0f9      	beq.n	1aa0c <strntoumax+0x8>
   1aa18:	290a      	cmp	r1, #10
   1aa1a:	d0f7      	beq.n	1aa0c <strntoumax+0x8>
   1aa1c:	2909      	cmp	r1, #9
   1aa1e:	d0f5      	beq.n	1aa0c <strntoumax+0x8>
   1aa20:	290d      	cmp	r1, #13
   1aa22:	d0f3      	beq.n	1aa0c <strntoumax+0x8>
	}

	/* Single optional + or - */
	if (n) {
   1aa24:	b16b      	cbz	r3, 1aa42 <strntoumax+0x3e>
		char c = *nptr;
   1aa26:	7827      	ldrb	r7, [r4, #0]
		if (c == '-' || c == '+') {
   1aa28:	2f2d      	cmp	r7, #45	; 0x2d
   1aa2a:	d003      	beq.n	1aa34 <strntoumax+0x30>
   1aa2c:	2f2b      	cmp	r7, #43	; 0x2b
   1aa2e:	d001      	beq.n	1aa34 <strntoumax+0x30>
	int minus = 0;
   1aa30:	2700      	movs	r7, #0
   1aa32:	e007      	b.n	1aa44 <strntoumax+0x40>
			minus = (c == '-');
   1aa34:	2f2d      	cmp	r7, #45	; 0x2d
   1aa36:	bf14      	ite	ne
   1aa38:	2700      	movne	r7, #0
   1aa3a:	2701      	moveq	r7, #1
			nptr++;
   1aa3c:	3401      	adds	r4, #1
			n--;
   1aa3e:	3b01      	subs	r3, #1
   1aa40:	e000      	b.n	1aa44 <strntoumax+0x40>
	int minus = 0;
   1aa42:	2700      	movs	r7, #0
		}
	}

	if (base == 0) {
   1aa44:	b9ba      	cbnz	r2, 1aa76 <strntoumax+0x72>
		if (n >= 2 && nptr[0] == '0' &&
   1aa46:	2b01      	cmp	r3, #1
   1aa48:	d902      	bls.n	1aa50 <strntoumax+0x4c>
   1aa4a:	7822      	ldrb	r2, [r4, #0]
   1aa4c:	2a30      	cmp	r2, #48	; 0x30
   1aa4e:	d005      	beq.n	1aa5c <strntoumax+0x58>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
			n -= 2;
			nptr += 2;
			base = 16;
		} else if (n >= 1 && nptr[0] == '0') {
   1aa50:	b31b      	cbz	r3, 1aa9a <strntoumax+0x96>
   1aa52:	7822      	ldrb	r2, [r4, #0]
   1aa54:	2a30      	cmp	r2, #48	; 0x30
   1aa56:	d00a      	beq.n	1aa6e <strntoumax+0x6a>
			n--;
			nptr++;
			base = 8;
		} else {
			base = 10;
   1aa58:	220a      	movs	r2, #10
   1aa5a:	e00e      	b.n	1aa7a <strntoumax+0x76>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1aa5c:	7862      	ldrb	r2, [r4, #1]
		if (n >= 2 && nptr[0] == '0' &&
   1aa5e:	2a78      	cmp	r2, #120	; 0x78
   1aa60:	d001      	beq.n	1aa66 <strntoumax+0x62>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1aa62:	2a58      	cmp	r2, #88	; 0x58
   1aa64:	d1f4      	bne.n	1aa50 <strntoumax+0x4c>
			n -= 2;
   1aa66:	3b02      	subs	r3, #2
			nptr += 2;
   1aa68:	3402      	adds	r4, #2
			base = 16;
   1aa6a:	2210      	movs	r2, #16
   1aa6c:	e005      	b.n	1aa7a <strntoumax+0x76>
			n--;
   1aa6e:	3b01      	subs	r3, #1
			nptr++;
   1aa70:	3401      	adds	r4, #1
			base = 8;
   1aa72:	2208      	movs	r2, #8
   1aa74:	e001      	b.n	1aa7a <strntoumax+0x76>
		}
	} else if (base == 16) {
   1aa76:	2a10      	cmp	r2, #16
   1aa78:	d002      	beq.n	1aa80 <strntoumax+0x7c>
			base = 16;
   1aa7a:	2000      	movs	r0, #0
   1aa7c:	4601      	mov	r1, r0
   1aa7e:	e028      	b.n	1aad2 <strntoumax+0xce>
		if (n >= 2 && nptr[0] == '0' &&
   1aa80:	2b01      	cmp	r3, #1
   1aa82:	d9fa      	bls.n	1aa7a <strntoumax+0x76>
   1aa84:	7821      	ldrb	r1, [r4, #0]
   1aa86:	2930      	cmp	r1, #48	; 0x30
   1aa88:	d1f7      	bne.n	1aa7a <strntoumax+0x76>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1aa8a:	7861      	ldrb	r1, [r4, #1]
		if (n >= 2 && nptr[0] == '0' &&
   1aa8c:	2978      	cmp	r1, #120	; 0x78
   1aa8e:	d001      	beq.n	1aa94 <strntoumax+0x90>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1aa90:	2958      	cmp	r1, #88	; 0x58
   1aa92:	d1f2      	bne.n	1aa7a <strntoumax+0x76>
			n -= 2;
   1aa94:	3b02      	subs	r3, #2
			nptr += 2;
   1aa96:	3402      	adds	r4, #2
   1aa98:	e7ef      	b.n	1aa7a <strntoumax+0x76>
			base = 10;
   1aa9a:	220a      	movs	r2, #10
   1aa9c:	e7ed      	b.n	1aa7a <strntoumax+0x76>
		return ch - '0';
   1aa9e:	46b4      	mov	ip, r6
   1aaa0:	e004      	b.n	1aaac <strntoumax+0xa8>
		return ch - 'A' + 10;
   1aaa2:	f1ac 0c37 	sub.w	ip, ip, #55	; 0x37
   1aaa6:	e001      	b.n	1aaac <strntoumax+0xa8>
		return ch - 'a' + 10;
   1aaa8:	f1ac 0c57 	sub.w	ip, ip, #87	; 0x57
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   1aaac:	f1bc 0f00 	cmp.w	ip, #0
   1aab0:	db21      	blt.n	1aaf6 <strntoumax+0xf2>
   1aab2:	4562      	cmp	r2, ip
   1aab4:	dd1f      	ble.n	1aaf6 <strntoumax+0xf2>
		v = v * base + d;
   1aab6:	17d6      	asrs	r6, r2, #31
   1aab8:	fb02 fe01 	mul.w	lr, r2, r1
   1aabc:	fb00 e106 	mla	r1, r0, r6, lr
   1aac0:	fba2 0600 	umull	r0, r6, r2, r0
   1aac4:	4431      	add	r1, r6
   1aac6:	eb10 000c 	adds.w	r0, r0, ip
   1aaca:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
		n--;
   1aace:	3b01      	subs	r3, #1
		nptr++;
   1aad0:	3401      	adds	r4, #1
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   1aad2:	b183      	cbz	r3, 1aaf6 <strntoumax+0xf2>
   1aad4:	f894 c000 	ldrb.w	ip, [r4]
	if (ch >= '0' && ch <= '9') {
   1aad8:	f1ac 0630 	sub.w	r6, ip, #48	; 0x30
   1aadc:	2e09      	cmp	r6, #9
   1aade:	d9de      	bls.n	1aa9e <strntoumax+0x9a>
	} else if (ch >= 'A' && ch <= 'Z') {
   1aae0:	f1ac 0641 	sub.w	r6, ip, #65	; 0x41
   1aae4:	2e19      	cmp	r6, #25
   1aae6:	d9dc      	bls.n	1aaa2 <strntoumax+0x9e>
	} else if (ch >= 'a' && ch <= 'z') {
   1aae8:	f1ac 0661 	sub.w	r6, ip, #97	; 0x61
   1aaec:	2e19      	cmp	r6, #25
   1aaee:	d9db      	bls.n	1aaa8 <strntoumax+0xa4>
		return -1;
   1aaf0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1aaf4:	e7da      	b.n	1aaac <strntoumax+0xa8>
	}

	if (endptr)
   1aaf6:	b105      	cbz	r5, 1aafa <strntoumax+0xf6>
		*endptr = (char *)nptr;
   1aaf8:	602c      	str	r4, [r5, #0]

	return minus ? -v : v;
   1aafa:	b117      	cbz	r7, 1ab02 <strntoumax+0xfe>
   1aafc:	4240      	negs	r0, r0
   1aafe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
}
   1ab02:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ab04 <strsep>:
 */

#include <string.h>

char *strsep(char **stringp, const char *delim)
{
   1ab04:	b538      	push	{r3, r4, r5, lr}
	char *s = *stringp;
   1ab06:	6805      	ldr	r5, [r0, #0]
	char *e;

	if (!s)
   1ab08:	b14d      	cbz	r5, 1ab1e <strsep+0x1a>
   1ab0a:	4604      	mov	r4, r0
		return NULL;

	e = strpbrk(s, delim);
   1ab0c:	4628      	mov	r0, r5
   1ab0e:	f000 f808 	bl	1ab22 <strpbrk>
	if (e)
   1ab12:	4603      	mov	r3, r0
   1ab14:	b110      	cbz	r0, 1ab1c <strsep+0x18>
		*e++ = '\0';
   1ab16:	2200      	movs	r2, #0
   1ab18:	f803 2b01 	strb.w	r2, [r3], #1

	*stringp = e;
   1ab1c:	6023      	str	r3, [r4, #0]
	return s;
}
   1ab1e:	4628      	mov	r0, r5
   1ab20:	bd38      	pop	{r3, r4, r5, pc}

0001ab22 <strpbrk>:
*/

#include <string.h>

char *strpbrk(const char *s1, const char *s2)
{
   1ab22:	468c      	mov	ip, r1
  const char *c = s2;
  if (!*s1)
   1ab24:	7803      	ldrb	r3, [r0, #0]
   1ab26:	b183      	cbz	r3, 1ab4a <strpbrk+0x28>
  const char *c = s2;
   1ab28:	460a      	mov	r2, r1
   1ab2a:	e001      	b.n	1ab30 <strpbrk+0xe>
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
	    break;
	}
      if (*c)
   1ab2c:	b953      	cbnz	r3, 1ab44 <strpbrk+0x22>
	break;
      s1++;
   1ab2e:	3001      	adds	r0, #1
  while (*s1)
   1ab30:	7801      	ldrb	r1, [r0, #0]
   1ab32:	b139      	cbz	r1, 1ab44 <strpbrk+0x22>
      for (c = s2; *c; c++)
   1ab34:	4662      	mov	r2, ip
   1ab36:	7813      	ldrb	r3, [r2, #0]
   1ab38:	2b00      	cmp	r3, #0
   1ab3a:	d0f7      	beq.n	1ab2c <strpbrk+0xa>
	  if (*s1 == *c)
   1ab3c:	428b      	cmp	r3, r1
   1ab3e:	d0f5      	beq.n	1ab2c <strpbrk+0xa>
      for (c = s2; *c; c++)
   1ab40:	3201      	adds	r2, #1
   1ab42:	e7f8      	b.n	1ab36 <strpbrk+0x14>
    }

  if (*c == '\0')
   1ab44:	7813      	ldrb	r3, [r2, #0]
   1ab46:	b113      	cbz	r3, 1ab4e <strpbrk+0x2c>
   1ab48:	4770      	bx	lr
    return (char *) NULL;
   1ab4a:	2000      	movs	r0, #0
   1ab4c:	4770      	bx	lr
    s1 = NULL;
   1ab4e:	2000      	movs	r0, #0

  return (char *) s1;
}
   1ab50:	4770      	bx	lr

0001ab52 <imgr_vercmp>:
 * @return                       1 if a > b
 */
static int
imgr_vercmp(const struct image_version *a, const struct image_version *b)
{
    if (a->iv_major < b->iv_major) {
   1ab52:	7802      	ldrb	r2, [r0, #0]
   1ab54:	780b      	ldrb	r3, [r1, #0]
   1ab56:	429a      	cmp	r2, r3
   1ab58:	d30c      	bcc.n	1ab74 <imgr_vercmp+0x22>
        return -1;
    } else if (a->iv_major > b->iv_major) {
   1ab5a:	d80e      	bhi.n	1ab7a <imgr_vercmp+0x28>
        return 1;
    }

    if (a->iv_minor < b->iv_minor) {
   1ab5c:	7842      	ldrb	r2, [r0, #1]
   1ab5e:	784b      	ldrb	r3, [r1, #1]
   1ab60:	429a      	cmp	r2, r3
   1ab62:	d30c      	bcc.n	1ab7e <imgr_vercmp+0x2c>
        return -1;
    } else if (a->iv_minor > b->iv_minor) {
   1ab64:	d80e      	bhi.n	1ab84 <imgr_vercmp+0x32>
        return 1;
    }

    if (a->iv_revision < b->iv_revision) {
   1ab66:	8842      	ldrh	r2, [r0, #2]
   1ab68:	884b      	ldrh	r3, [r1, #2]
   1ab6a:	429a      	cmp	r2, r3
   1ab6c:	d30c      	bcc.n	1ab88 <imgr_vercmp+0x36>
        return -1;
    } else if (a->iv_revision > b->iv_revision) {
   1ab6e:	d80e      	bhi.n	1ab8e <imgr_vercmp+0x3c>
        return 1;
    }

    /* Note: For semver compatibility, don't compare the 32-bit build num. */

    return 0;
   1ab70:	2000      	movs	r0, #0
   1ab72:	4770      	bx	lr
        return -1;
   1ab74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ab78:	4770      	bx	lr
        return 1;
   1ab7a:	2001      	movs	r0, #1
   1ab7c:	4770      	bx	lr
        return -1;
   1ab7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ab82:	4770      	bx	lr
        return 1;
   1ab84:	2001      	movs	r0, #1
   1ab86:	4770      	bx	lr
        return -1;
   1ab88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ab8c:	4770      	bx	lr
        return 1;
   1ab8e:	2001      	movs	r0, #1
}
   1ab90:	4770      	bx	lr

0001ab92 <imgr_img_tlvs>:
{
   1ab92:	b530      	push	{r4, r5, lr}
   1ab94:	b083      	sub	sp, #12
   1ab96:	4614      	mov	r4, r2
   1ab98:	461d      	mov	r5, r3
    rc = flash_area_read(fa, *start_off, &tlv_info, sizeof(tlv_info));
   1ab9a:	2304      	movs	r3, #4
   1ab9c:	eb0d 0203 	add.w	r2, sp, r3
   1aba0:	6821      	ldr	r1, [r4, #0]
   1aba2:	f001 fdaf 	bl	1c704 <flash_area_read>
    if (rc) {
   1aba6:	b968      	cbnz	r0, 1abc4 <imgr_img_tlvs+0x32>
    if (tlv_info.it_magic != IMAGE_TLV_INFO_MAGIC) {
   1aba8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1abac:	f646 1307 	movw	r3, #26887	; 0x6907
   1abb0:	429a      	cmp	r2, r3
   1abb2:	d10b      	bne.n	1abcc <imgr_img_tlvs+0x3a>
    *start_off += sizeof(tlv_info);
   1abb4:	6822      	ldr	r2, [r4, #0]
   1abb6:	3204      	adds	r2, #4
   1abb8:	6022      	str	r2, [r4, #0]
    *end_off = *start_off + tlv_info.it_tlv_tot;
   1abba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1abbe:	441a      	add	r2, r3
   1abc0:	602a      	str	r2, [r5, #0]
    rc = 0;
   1abc2:	e001      	b.n	1abc8 <imgr_img_tlvs+0x36>
        rc = -1;
   1abc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1abc8:	b003      	add	sp, #12
   1abca:	bd30      	pop	{r4, r5, pc}
        rc = 1;
   1abcc:	2001      	movs	r0, #1
    return rc;
   1abce:	e7fb      	b.n	1abc8 <imgr_img_tlvs+0x36>

0001abd0 <imgr_upload_good_rsp>:
    return 0;
}

static int
imgr_upload_good_rsp(struct mgmt_cbuf *cb)
{
   1abd0:	b538      	push	{r3, r4, r5, lr}
    CborError err = CborNoError;

    err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1abd2:	f100 040c 	add.w	r4, r0, #12
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1abd6:	2202      	movs	r2, #2
   1abd8:	490e      	ldr	r1, [pc, #56]	; (1ac14 <imgr_upload_good_rsp+0x44>)
   1abda:	4620      	mov	r0, r4
   1abdc:	f7f6 fec7 	bl	1196e <cbor_encode_text_string>
   1abe0:	4605      	mov	r5, r0
    err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1abe2:	2200      	movs	r2, #0
   1abe4:	2300      	movs	r3, #0
   1abe6:	4620      	mov	r0, r4
   1abe8:	f7f6 fe46 	bl	11878 <cbor_encode_int>
   1abec:	4305      	orrs	r5, r0
   1abee:	2203      	movs	r2, #3
   1abf0:	4909      	ldr	r1, [pc, #36]	; (1ac18 <imgr_upload_good_rsp+0x48>)
   1abf2:	4620      	mov	r0, r4
   1abf4:	f7f6 febb 	bl	1196e <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&cb->encoder, "off");
   1abf8:	4305      	orrs	r5, r0
    err |= cbor_encode_int(&cb->encoder, imgr_state.off);
   1abfa:	4b08      	ldr	r3, [pc, #32]	; (1ac1c <imgr_upload_good_rsp+0x4c>)
   1abfc:	685a      	ldr	r2, [r3, #4]
   1abfe:	2300      	movs	r3, #0
   1ac00:	4620      	mov	r0, r4
   1ac02:	f7f6 fe39 	bl	11878 <cbor_encode_int>

    if (err != 0) {
   1ac06:	ea55 0300 	orrs.w	r3, r5, r0
   1ac0a:	d101      	bne.n	1ac10 <imgr_upload_good_rsp+0x40>
        return MGMT_ERR_ENOMEM;
    }

    return 0;
   1ac0c:	2000      	movs	r0, #0
}
   1ac0e:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOMEM;
   1ac10:	2002      	movs	r0, #2
   1ac12:	e7fc      	b.n	1ac0e <imgr_upload_good_rsp+0x3e>
   1ac14:	000222a4 	.word	0x000222a4
   1ac18:	000221c8 	.word	0x000221c8
   1ac1c:	200067bc 	.word	0x200067bc

0001ac20 <imgr_read_info>:
{
   1ac20:	b570      	push	{r4, r5, r6, lr}
   1ac22:	b08c      	sub	sp, #48	; 0x30
   1ac24:	460c      	mov	r4, r1
   1ac26:	4615      	mov	r5, r2
   1ac28:	461e      	mov	r6, r3
    data_end = 0;
   1ac2a:	2200      	movs	r2, #0
   1ac2c:	9201      	str	r2, [sp, #4]
    area_id = flash_area_id_from_image_slot(image_slot);
   1ac2e:	f001 fdc9 	bl	1c7c4 <flash_area_id_from_image_slot>
    rc2 = flash_area_open(area_id, &fa);
   1ac32:	a90b      	add	r1, sp, #44	; 0x2c
   1ac34:	b2c0      	uxtb	r0, r0
   1ac36:	f001 fd05 	bl	1c644 <flash_area_open>
    if (rc2) {
   1ac3a:	2800      	cmp	r0, #0
   1ac3c:	d163      	bne.n	1ad06 <imgr_read_info+0xe6>
    rc2 = flash_area_read_is_empty(fa, 0, hdr, sizeof(*hdr));
   1ac3e:	2320      	movs	r3, #32
   1ac40:	aa03      	add	r2, sp, #12
   1ac42:	2100      	movs	r1, #0
   1ac44:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1ac46:	f001 fdb6 	bl	1c7b6 <flash_area_read_is_empty>
    if (rc2 < 0) {
   1ac4a:	2800      	cmp	r0, #0
   1ac4c:	db5e      	blt.n	1ad0c <imgr_read_info+0xec>
    if (ver) {
   1ac4e:	b11c      	cbz	r4, 1ac58 <imgr_read_info+0x38>
        memset(ver, 0xff, sizeof(*ver));
   1ac50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ac54:	6023      	str	r3, [r4, #0]
   1ac56:	6063      	str	r3, [r4, #4]
    if (hdr->ih_magic == IMAGE_MAGIC) {
   1ac58:	9a03      	ldr	r2, [sp, #12]
   1ac5a:	4b2f      	ldr	r3, [pc, #188]	; (1ad18 <imgr_read_info+0xf8>)
   1ac5c:	429a      	cmp	r2, r3
   1ac5e:	d005      	beq.n	1ac6c <imgr_read_info+0x4c>
    } else if (rc2 == 1) {
   1ac60:	2801      	cmp	r0, #1
   1ac62:	d020      	beq.n	1aca6 <imgr_read_info+0x86>
        rc = 1;
   1ac64:	2401      	movs	r4, #1
}
   1ac66:	4620      	mov	r0, r4
   1ac68:	b00c      	add	sp, #48	; 0x30
   1ac6a:	bd70      	pop	{r4, r5, r6, pc}
        if (ver) {
   1ac6c:	b11c      	cbz	r4, 1ac76 <imgr_read_info+0x56>
            memcpy(ver, &hdr->ih_ver, sizeof(*ver));
   1ac6e:	ab08      	add	r3, sp, #32
   1ac70:	cb03      	ldmia	r3!, {r0, r1}
   1ac72:	6020      	str	r0, [r4, #0]
   1ac74:	6061      	str	r1, [r4, #4]
    if (flags) {
   1ac76:	b10e      	cbz	r6, 1ac7c <imgr_read_info+0x5c>
        *flags = hdr->ih_flags;
   1ac78:	9b07      	ldr	r3, [sp, #28]
   1ac7a:	6033      	str	r3, [r6, #0]
    data_off = hdr->ih_hdr_size + hdr->ih_img_size;
   1ac7c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1ac80:	9a06      	ldr	r2, [sp, #24]
   1ac82:	4413      	add	r3, r2
   1ac84:	9302      	str	r3, [sp, #8]
    rc = imgr_img_tlvs(fa, hdr, &data_off, &data_end);
   1ac86:	ab01      	add	r3, sp, #4
   1ac88:	aa02      	add	r2, sp, #8
   1ac8a:	a903      	add	r1, sp, #12
   1ac8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1ac8e:	f7ff ff80 	bl	1ab92 <imgr_img_tlvs>
    if (rc) {
   1ac92:	4604      	mov	r4, r0
   1ac94:	2800      	cmp	r0, #0
   1ac96:	d1e6      	bne.n	1ac66 <imgr_read_info+0x46>
    if (data_end > fa->fa_size) {
   1ac98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ac9a:	689a      	ldr	r2, [r3, #8]
   1ac9c:	9b01      	ldr	r3, [sp, #4]
   1ac9e:	429a      	cmp	r2, r3
   1aca0:	d209      	bcs.n	1acb6 <imgr_read_info+0x96>
        rc = 1;
   1aca2:	2401      	movs	r4, #1
   1aca4:	e7df      	b.n	1ac66 <imgr_read_info+0x46>
        rc = 2;
   1aca6:	2402      	movs	r4, #2
   1aca8:	e7dd      	b.n	1ac66 <imgr_read_info+0x46>
            data_off += sizeof(*tlv) + tlv->it_len;
   1acaa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1acae:	9a02      	ldr	r2, [sp, #8]
   1acb0:	4413      	add	r3, r2
   1acb2:	3304      	adds	r3, #4
   1acb4:	9302      	str	r3, [sp, #8]
    while (data_off + sizeof(*tlv) <= data_end) {
   1acb6:	9902      	ldr	r1, [sp, #8]
   1acb8:	1d0a      	adds	r2, r1, #4
   1acba:	9b01      	ldr	r3, [sp, #4]
   1acbc:	429a      	cmp	r2, r3
   1acbe:	d820      	bhi.n	1ad02 <imgr_read_info+0xe2>
        rc2 = flash_area_read_is_empty(fa, data_off, tlv, sizeof(*tlv));
   1acc0:	2304      	movs	r3, #4
   1acc2:	aa03      	add	r2, sp, #12
   1acc4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1acc6:	f001 fd76 	bl	1c7b6 <flash_area_read_is_empty>
        if (rc2 < 0) {
   1acca:	2800      	cmp	r0, #0
   1accc:	dbcb      	blt.n	1ac66 <imgr_read_info+0x46>
        if (rc2 == 1) {
   1acce:	2801      	cmp	r0, #1
   1acd0:	d01f      	beq.n	1ad12 <imgr_read_info+0xf2>
        if (tlv->it_type != IMAGE_TLV_SHA256 ||
   1acd2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1acd6:	2b10      	cmp	r3, #16
   1acd8:	d1e7      	bne.n	1acaa <imgr_read_info+0x8a>
          tlv->it_len != IMGMGR_HASH_LEN) {
   1acda:	f8bd 300e 	ldrh.w	r3, [sp, #14]
        if (tlv->it_type != IMAGE_TLV_SHA256 ||
   1acde:	2b20      	cmp	r3, #32
   1ace0:	d1e3      	bne.n	1acaa <imgr_read_info+0x8a>
        data_off += sizeof(*tlv);
   1ace2:	9902      	ldr	r1, [sp, #8]
   1ace4:	3104      	adds	r1, #4
   1ace6:	9102      	str	r1, [sp, #8]
        if (hash) {
   1ace8:	2d00      	cmp	r5, #0
   1acea:	d0bc      	beq.n	1ac66 <imgr_read_info+0x46>
            if (data_off + IMGMGR_HASH_LEN > data_end) {
   1acec:	f101 0320 	add.w	r3, r1, #32
   1acf0:	9a01      	ldr	r2, [sp, #4]
   1acf2:	4293      	cmp	r3, r2
   1acf4:	d8b7      	bhi.n	1ac66 <imgr_read_info+0x46>
            rc2 = flash_area_read(fa, data_off, hash, IMGMGR_HASH_LEN);
   1acf6:	2320      	movs	r3, #32
   1acf8:	462a      	mov	r2, r5
   1acfa:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1acfc:	f001 fd02 	bl	1c704 <flash_area_read>
            if (rc2) {
   1ad00:	e7b1      	b.n	1ac66 <imgr_read_info+0x46>
    rc = 1;
   1ad02:	2401      	movs	r4, #1
   1ad04:	e7af      	b.n	1ac66 <imgr_read_info+0x46>
        return -1;
   1ad06:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1ad0a:	e7ac      	b.n	1ac66 <imgr_read_info+0x46>
    int rc = -1;
   1ad0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1ad10:	e7a9      	b.n	1ac66 <imgr_read_info+0x46>
    rc = 1;
   1ad12:	4604      	mov	r4, r0
   1ad14:	e7a7      	b.n	1ac66 <imgr_read_info+0x46>
   1ad16:	bf00      	nop
   1ad18:	96f3b83d 	.word	0x96f3b83d

0001ad1c <imgr_upload_log>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
imgr_upload_log(bool is_first, bool is_last, int status)
{
   1ad1c:	b510      	push	{r4, lr}
   1ad1e:	b088      	sub	sp, #32
   1ad20:	4614      	mov	r4, r2
    uint8_t hash[IMGMGR_HASH_LEN];
    const uint8_t *hashp;
    int rc;

    if (is_first) {
   1ad22:	b920      	cbnz	r0, 1ad2e <imgr_upload_log+0x12>
        return imgmgr_log_upload_start(status);
    }

    if (is_last || status != 0) {
   1ad24:	b939      	cbnz	r1, 1ad36 <imgr_upload_log+0x1a>
   1ad26:	b932      	cbnz	r2, 1ad36 <imgr_upload_log+0x1a>

        return imgmgr_log_upload_done(status, hashp);
    }

    /* Nothing to log. */
    return 0;
   1ad28:	4610      	mov	r0, r2
}
   1ad2a:	b008      	add	sp, #32
   1ad2c:	bd10      	pop	{r4, pc}
        return imgmgr_log_upload_start(status);
   1ad2e:	4610      	mov	r0, r2
   1ad30:	f000 fad8 	bl	1b2e4 <imgmgr_log_upload_start>
   1ad34:	e7f9      	b.n	1ad2a <imgr_upload_log+0xe>
        rc = imgr_read_info(1, NULL, hash, NULL);
   1ad36:	2300      	movs	r3, #0
   1ad38:	466a      	mov	r2, sp
   1ad3a:	4619      	mov	r1, r3
   1ad3c:	2001      	movs	r0, #1
   1ad3e:	f7ff ff6f 	bl	1ac20 <imgr_read_info>
        if (rc != 0) {
   1ad42:	b120      	cbz	r0, 1ad4e <imgr_upload_log+0x32>
            hashp = NULL;
   1ad44:	2100      	movs	r1, #0
        return imgmgr_log_upload_done(status, hashp);
   1ad46:	4620      	mov	r0, r4
   1ad48:	f000 fad6 	bl	1b2f8 <imgmgr_log_upload_done>
   1ad4c:	e7ed      	b.n	1ad2a <imgr_upload_log+0xe>
            hashp = hash;
   1ad4e:	4669      	mov	r1, sp
   1ad50:	e7f9      	b.n	1ad46 <imgr_upload_log+0x2a>
	...

0001ad54 <imgr_my_version>:
{
   1ad54:	b508      	push	{r3, lr}
   1ad56:	4601      	mov	r1, r0
    return imgr_read_info(boot_current_slot, ver, NULL, NULL);
   1ad58:	2300      	movs	r3, #0
   1ad5a:	461a      	mov	r2, r3
   1ad5c:	4802      	ldr	r0, [pc, #8]	; (1ad68 <imgr_my_version+0x14>)
   1ad5e:	6800      	ldr	r0, [r0, #0]
   1ad60:	f7ff ff5e 	bl	1ac20 <imgr_read_info>
}
   1ad64:	bd08      	pop	{r3, pc}
   1ad66:	bf00      	nop
   1ad68:	20006b8c 	.word	0x20006b8c

0001ad6c <imgr_find_by_hash>:
{
   1ad6c:	b570      	push	{r4, r5, r6, lr}
   1ad6e:	b088      	sub	sp, #32
   1ad70:	4606      	mov	r6, r0
   1ad72:	460d      	mov	r5, r1
    for (i = 0; i < 2; i++) {
   1ad74:	2400      	movs	r4, #0
   1ad76:	e000      	b.n	1ad7a <imgr_find_by_hash+0xe>
   1ad78:	3401      	adds	r4, #1
   1ad7a:	2c01      	cmp	r4, #1
   1ad7c:	dc0f      	bgt.n	1ad9e <imgr_find_by_hash+0x32>
        if (imgr_read_info(i, ver, hash, NULL) != 0) {
   1ad7e:	2300      	movs	r3, #0
   1ad80:	466a      	mov	r2, sp
   1ad82:	4629      	mov	r1, r5
   1ad84:	4620      	mov	r0, r4
   1ad86:	f7ff ff4b 	bl	1ac20 <imgr_read_info>
   1ad8a:	2800      	cmp	r0, #0
   1ad8c:	d1f4      	bne.n	1ad78 <imgr_find_by_hash+0xc>
        if (!memcmp(hash, find, IMGMGR_HASH_LEN)) {
   1ad8e:	2220      	movs	r2, #32
   1ad90:	4631      	mov	r1, r6
   1ad92:	4668      	mov	r0, sp
   1ad94:	f7f1 f94a 	bl	c02c <memcmp>
   1ad98:	2800      	cmp	r0, #0
   1ad9a:	d1ed      	bne.n	1ad78 <imgr_find_by_hash+0xc>
   1ad9c:	e001      	b.n	1ada2 <imgr_find_by_hash+0x36>
    return -1;
   1ad9e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1ada2:	4620      	mov	r0, r4
   1ada4:	b008      	add	sp, #32
   1ada6:	bd70      	pop	{r4, r5, r6, pc}

0001ada8 <imgmgr_find_best_area_id>:
{
   1ada8:	b530      	push	{r4, r5, lr}
   1adaa:	b083      	sub	sp, #12
    for (i = 0; i < 2; i++) {
   1adac:	2400      	movs	r4, #0
    int best = -1;
   1adae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < 2; i++) {
   1adb2:	e000      	b.n	1adb6 <imgmgr_find_best_area_id+0xe>
   1adb4:	3401      	adds	r4, #1
   1adb6:	2c01      	cmp	r4, #1
   1adb8:	dc10      	bgt.n	1addc <imgmgr_find_best_area_id+0x34>
        rc = imgr_read_info(i, &ver, NULL, NULL);
   1adba:	2300      	movs	r3, #0
   1adbc:	461a      	mov	r2, r3
   1adbe:	4669      	mov	r1, sp
   1adc0:	4620      	mov	r0, r4
   1adc2:	f7ff ff2d 	bl	1ac20 <imgr_read_info>
        if (rc < 0) {
   1adc6:	2800      	cmp	r0, #0
   1adc8:	dbf4      	blt.n	1adb4 <imgmgr_find_best_area_id+0xc>
        if (rc == 0) {
   1adca:	b930      	cbnz	r0, 1adda <imgmgr_find_best_area_id+0x32>
            if (imgmgr_state_slot_in_use(i)) {
   1adcc:	4620      	mov	r0, r4
   1adce:	f000 fb1f 	bl	1b410 <imgmgr_state_slot_in_use>
   1add2:	2800      	cmp	r0, #0
   1add4:	d1ee      	bne.n	1adb4 <imgmgr_find_best_area_id+0xc>
                best = i;
   1add6:	4625      	mov	r5, r4
   1add8:	e7ec      	b.n	1adb4 <imgmgr_find_best_area_id+0xc>
        best = i;
   1adda:	4625      	mov	r5, r4
    if (best >= 0) {
   1addc:	2d00      	cmp	r5, #0
   1adde:	da02      	bge.n	1ade6 <imgmgr_find_best_area_id+0x3e>
}
   1ade0:	4628      	mov	r0, r5
   1ade2:	b003      	add	sp, #12
   1ade4:	bd30      	pop	{r4, r5, pc}
        best = flash_area_id_from_image_slot(best);
   1ade6:	4628      	mov	r0, r5
   1ade8:	f001 fcec 	bl	1c7c4 <flash_area_id_from_image_slot>
   1adec:	4605      	mov	r5, r0
    return best;
   1adee:	e7f7      	b.n	1ade0 <imgmgr_find_best_area_id+0x38>

0001adf0 <imgr_erase_state>:
{
   1adf0:	b570      	push	{r4, r5, r6, lr}
   1adf2:	b082      	sub	sp, #8
   1adf4:	4604      	mov	r4, r0
    area_id = imgmgr_find_best_area_id();
   1adf6:	f7ff ffd7 	bl	1ada8 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   1adfa:	2800      	cmp	r0, #0
   1adfc:	db1f      	blt.n	1ae3e <imgr_erase_state+0x4e>
        rc = flash_area_open(area_id, &fa);
   1adfe:	a901      	add	r1, sp, #4
   1ae00:	b2c0      	uxtb	r0, r0
   1ae02:	f001 fc1f 	bl	1c644 <flash_area_open>
        if (rc) {
   1ae06:	b9f0      	cbnz	r0, 1ae46 <imgr_erase_state+0x56>
        rc = flash_area_erase(fa, 0, sizeof(struct image_header));
   1ae08:	2220      	movs	r2, #32
   1ae0a:	2100      	movs	r1, #0
   1ae0c:	9801      	ldr	r0, [sp, #4]
   1ae0e:	f001 fca1 	bl	1c754 <flash_area_erase>
        if (rc) {
   1ae12:	4605      	mov	r5, r0
   1ae14:	b9c8      	cbnz	r0, 1ae4a <imgr_erase_state+0x5a>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1ae16:	340c      	adds	r4, #12
   1ae18:	2202      	movs	r2, #2
   1ae1a:	490e      	ldr	r1, [pc, #56]	; (1ae54 <imgr_erase_state+0x64>)
   1ae1c:	4620      	mov	r0, r4
   1ae1e:	f7f6 fda6 	bl	1196e <cbor_encode_text_string>
   1ae22:	4606      	mov	r6, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1ae24:	2200      	movs	r2, #0
   1ae26:	2300      	movs	r3, #0
   1ae28:	4620      	mov	r0, r4
   1ae2a:	f7f6 fd25 	bl	11878 <cbor_encode_int>
    if (g_err) {
   1ae2e:	ea50 0306 	orrs.w	r3, r0, r6
   1ae32:	d10c      	bne.n	1ae4e <imgr_erase_state+0x5e>
    imgr_state.area_id = -1;
   1ae34:	4b08      	ldr	r3, [pc, #32]	; (1ae58 <imgr_erase_state+0x68>)
   1ae36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ae3a:	601a      	str	r2, [r3, #0]
    return 0;
   1ae3c:	e000      	b.n	1ae40 <imgr_erase_state+0x50>
        return imgr_error_rsp(cb, MGMT_ERR_ENOMEM, imgmgr_err_str_no_slot);
   1ae3e:	2502      	movs	r5, #2
}
   1ae40:	4628      	mov	r0, r5
   1ae42:	b002      	add	sp, #8
   1ae44:	bd70      	pop	{r4, r5, r6, pc}
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1ae46:	2503      	movs	r5, #3
   1ae48:	e7fa      	b.n	1ae40 <imgr_erase_state+0x50>
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1ae4a:	2503      	movs	r5, #3
   1ae4c:	e7f8      	b.n	1ae40 <imgr_erase_state+0x50>
        return MGMT_ERR_ENOMEM;
   1ae4e:	2502      	movs	r5, #2
   1ae50:	e7f6      	b.n	1ae40 <imgr_erase_state+0x50>
   1ae52:	bf00      	nop
   1ae54:	000222a4 	.word	0x000222a4
   1ae58:	200067bc 	.word	0x200067bc

0001ae5c <imgr_erase>:
{
   1ae5c:	b570      	push	{r4, r5, r6, lr}
   1ae5e:	b082      	sub	sp, #8
   1ae60:	4604      	mov	r4, r0
    area_id = imgmgr_find_best_area_id();
   1ae62:	f7ff ffa1 	bl	1ada8 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   1ae66:	2800      	cmp	r0, #0
   1ae68:	db1f      	blt.n	1aeaa <imgr_erase+0x4e>
        rc = flash_area_open(area_id, &fa);
   1ae6a:	a901      	add	r1, sp, #4
   1ae6c:	b2c0      	uxtb	r0, r0
   1ae6e:	f001 fbe9 	bl	1c644 <flash_area_open>
        if (rc) {
   1ae72:	b9f0      	cbnz	r0, 1aeb2 <imgr_erase+0x56>
        rc = flash_area_erase(fa, 0, fa->fa_size);
   1ae74:	9801      	ldr	r0, [sp, #4]
   1ae76:	6882      	ldr	r2, [r0, #8]
   1ae78:	2100      	movs	r1, #0
   1ae7a:	f001 fc6b 	bl	1c754 <flash_area_erase>
        if (rc) {
   1ae7e:	4605      	mov	r5, r0
   1ae80:	b9c8      	cbnz	r0, 1aeb6 <imgr_erase+0x5a>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1ae82:	340c      	adds	r4, #12
   1ae84:	2202      	movs	r2, #2
   1ae86:	490e      	ldr	r1, [pc, #56]	; (1aec0 <imgr_erase+0x64>)
   1ae88:	4620      	mov	r0, r4
   1ae8a:	f7f6 fd70 	bl	1196e <cbor_encode_text_string>
   1ae8e:	4606      	mov	r6, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1ae90:	2200      	movs	r2, #0
   1ae92:	2300      	movs	r3, #0
   1ae94:	4620      	mov	r0, r4
   1ae96:	f7f6 fcef 	bl	11878 <cbor_encode_int>
    if (g_err) {
   1ae9a:	ea50 0306 	orrs.w	r3, r0, r6
   1ae9e:	d10c      	bne.n	1aeba <imgr_erase+0x5e>
    imgr_state.area_id = -1;
   1aea0:	4b08      	ldr	r3, [pc, #32]	; (1aec4 <imgr_erase+0x68>)
   1aea2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1aea6:	601a      	str	r2, [r3, #0]
    return 0;
   1aea8:	e000      	b.n	1aeac <imgr_erase+0x50>
        return imgr_error_rsp(cb, MGMT_ERR_ENOMEM, imgmgr_err_str_no_slot);
   1aeaa:	2502      	movs	r5, #2
}
   1aeac:	4628      	mov	r0, r5
   1aeae:	b002      	add	sp, #8
   1aeb0:	bd70      	pop	{r4, r5, r6, pc}
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1aeb2:	2503      	movs	r5, #3
   1aeb4:	e7fa      	b.n	1aeac <imgr_erase+0x50>
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1aeb6:	2503      	movs	r5, #3
   1aeb8:	e7f8      	b.n	1aeac <imgr_erase+0x50>
        return MGMT_ERR_ENOMEM;
   1aeba:	2502      	movs	r5, #2
   1aebc:	e7f6      	b.n	1aeac <imgr_erase+0x50>
   1aebe:	bf00      	nop
   1aec0:	000222a4 	.word	0x000222a4
   1aec4:	200067bc 	.word	0x200067bc

0001aec8 <imgr_upload_inspect>:
{
   1aec8:	b570      	push	{r4, r5, r6, lr}
   1aeca:	b084      	sub	sp, #16
   1aecc:	460c      	mov	r4, r1
   1aece:	4616      	mov	r6, r2
    memset(action, 0, sizeof *action);
   1aed0:	2300      	movs	r3, #0
   1aed2:	600b      	str	r3, [r1, #0]
   1aed4:	604b      	str	r3, [r1, #4]
   1aed6:	608b      	str	r3, [r1, #8]
   1aed8:	60cb      	str	r3, [r1, #12]
   1aeda:	610b      	str	r3, [r1, #16]
   1aedc:	614b      	str	r3, [r1, #20]
    if (req->off == -1) {
   1aede:	6801      	ldr	r1, [r0, #0]
   1aee0:	6843      	ldr	r3, [r0, #4]
   1aee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1aee6:	bf08      	it	eq
   1aee8:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
   1aeec:	d03e      	beq.n	1af6c <imgr_upload_inspect+0xa4>
   1aeee:	4605      	mov	r5, r0
    if (req->off == 0) {
   1aef0:	430b      	orrs	r3, r1
   1aef2:	d168      	bne.n	1afc6 <imgr_upload_inspect+0xfe>
        if (req->data_len < sizeof(struct image_header)) {
   1aef4:	6903      	ldr	r3, [r0, #16]
   1aef6:	2b1f      	cmp	r3, #31
   1aef8:	d93c      	bls.n	1af74 <imgr_upload_inspect+0xac>
        if (req->size == -1) {
   1aefa:	6882      	ldr	r2, [r0, #8]
   1aefc:	68c3      	ldr	r3, [r0, #12]
   1aefe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1af02:	bf08      	it	eq
   1af04:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1af08:	d038      	beq.n	1af7c <imgr_upload_inspect+0xb4>
        action->size = req->size;
   1af0a:	6022      	str	r2, [r4, #0]
   1af0c:	6063      	str	r3, [r4, #4]
        if (hdr->ih_magic != IMAGE_MAGIC) {
   1af0e:	6982      	ldr	r2, [r0, #24]
   1af10:	4b4e      	ldr	r3, [pc, #312]	; (1b04c <imgr_upload_inspect+0x184>)
   1af12:	429a      	cmp	r2, r3
   1af14:	d136      	bne.n	1af84 <imgr_upload_inspect+0xbc>
        if (req->data_sha_len > IMGMGR_DATA_SHA_LEN) {
   1af16:	6942      	ldr	r2, [r0, #20]
   1af18:	2a20      	cmp	r2, #32
   1af1a:	f200 808d 	bhi.w	1b038 <imgr_upload_inspect+0x170>
        if ((req->data_sha_len > 0) && (imgr_state.area_id != -1)) {
   1af1e:	b142      	cbz	r2, 1af32 <imgr_upload_inspect+0x6a>
   1af20:	4b4b      	ldr	r3, [pc, #300]	; (1b050 <imgr_upload_inspect+0x188>)
   1af22:	681b      	ldr	r3, [r3, #0]
   1af24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1af28:	d003      	beq.n	1af32 <imgr_upload_inspect+0x6a>
            if ((imgr_state.data_sha_len == req->data_sha_len) &&
   1af2a:	4b49      	ldr	r3, [pc, #292]	; (1b050 <imgr_upload_inspect+0x188>)
   1af2c:	7b1b      	ldrb	r3, [r3, #12]
   1af2e:	429a      	cmp	r2, r3
   1af30:	d02c      	beq.n	1af8c <imgr_upload_inspect+0xc4>
        action->area_id = imgmgr_find_best_area_id();
   1af32:	f7ff ff39 	bl	1ada8 <imgmgr_find_best_area_id>
   1af36:	60e0      	str	r0, [r4, #12]
        if (action->area_id < 0) {
   1af38:	2800      	cmp	r0, #0
   1af3a:	db2f      	blt.n	1af9c <imgr_upload_inspect+0xd4>
        if (req->upgrade) {
   1af3c:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
   1af40:	b15b      	cbz	r3, 1af5a <imgr_upload_inspect+0x92>
            rc = imgr_my_version(&cur_ver);
   1af42:	a801      	add	r0, sp, #4
   1af44:	f7ff ff06 	bl	1ad54 <imgr_my_version>
            if (rc != 0) {
   1af48:	2800      	cmp	r0, #0
   1af4a:	d177      	bne.n	1b03c <imgr_upload_inspect+0x174>
            if (imgr_vercmp(&cur_ver, &hdr->ih_ver) >= 0) {
   1af4c:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   1af50:	a801      	add	r0, sp, #4
   1af52:	f7ff fdfe 	bl	1ab52 <imgr_vercmp>
   1af56:	2800      	cmp	r0, #0
   1af58:	da24      	bge.n	1afa4 <imgr_upload_inspect+0xdc>
        rc = flash_area_open(action->area_id, &fa);
   1af5a:	a903      	add	r1, sp, #12
   1af5c:	7b20      	ldrb	r0, [r4, #12]
   1af5e:	f001 fb71 	bl	1c644 <flash_area_open>
        if (rc) {
   1af62:	b318      	cbz	r0, 1afac <imgr_upload_inspect+0xe4>
            *errstr = imgmgr_err_str_flash_open_failed;
   1af64:	2300      	movs	r3, #0
   1af66:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EUNKNOWN;
   1af68:	2001      	movs	r0, #1
   1af6a:	e06c      	b.n	1b046 <imgr_upload_inspect+0x17e>
        *errstr = imgmgr_err_str_hdr_malformed;
   1af6c:	2300      	movs	r3, #0
   1af6e:	6013      	str	r3, [r2, #0]
        return MGMT_ERR_EINVAL;
   1af70:	2003      	movs	r0, #3
   1af72:	e068      	b.n	1b046 <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_hdr_malformed;
   1af74:	2300      	movs	r3, #0
   1af76:	6013      	str	r3, [r2, #0]
            return MGMT_ERR_EINVAL;
   1af78:	2003      	movs	r0, #3
   1af7a:	e064      	b.n	1b046 <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_hdr_malformed;
   1af7c:	2300      	movs	r3, #0
   1af7e:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EINVAL;
   1af80:	2003      	movs	r0, #3
   1af82:	e060      	b.n	1b046 <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_magic_mismatch;
   1af84:	2300      	movs	r3, #0
   1af86:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EINVAL;
   1af88:	2003      	movs	r0, #3
   1af8a:	e05c      	b.n	1b046 <imgr_upload_inspect+0x17e>
                            !memcmp(imgr_state.data_sha, req->data_sha,
   1af8c:	f500 7106 	add.w	r1, r0, #536	; 0x218
   1af90:	4830      	ldr	r0, [pc, #192]	; (1b054 <imgr_upload_inspect+0x18c>)
   1af92:	f7f1 f84b 	bl	c02c <memcmp>
            if ((imgr_state.data_sha_len == req->data_sha_len) &&
   1af96:	2800      	cmp	r0, #0
   1af98:	d1cb      	bne.n	1af32 <imgr_upload_inspect+0x6a>
   1af9a:	e054      	b.n	1b046 <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_no_slot;
   1af9c:	2300      	movs	r3, #0
   1af9e:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_ENOMEM;
   1afa0:	2002      	movs	r0, #2
   1afa2:	e050      	b.n	1b046 <imgr_upload_inspect+0x17e>
                *errstr = imgmgr_err_str_downgrade;
   1afa4:	2300      	movs	r3, #0
   1afa6:	6033      	str	r3, [r6, #0]
                return MGMT_ERR_EBADSTATE;
   1afa8:	2006      	movs	r0, #6
   1afaa:	e04c      	b.n	1b046 <imgr_upload_inspect+0x17e>
        rc = flash_area_is_empty(fa, &empty);
   1afac:	f10d 0103 	add.w	r1, sp, #3
   1afb0:	9803      	ldr	r0, [sp, #12]
   1afb2:	f001 fbed 	bl	1c790 <flash_area_is_empty>
        if (rc) {
   1afb6:	2800      	cmp	r0, #0
   1afb8:	d142      	bne.n	1b040 <imgr_upload_inspect+0x178>
        action->erase = !empty;
   1afba:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1afbe:	f083 0301 	eor.w	r3, r3, #1
   1afc2:	7463      	strb	r3, [r4, #17]
   1afc4:	e00d      	b.n	1afe2 <imgr_upload_inspect+0x11a>
        action->area_id = imgr_state.area_id;
   1afc6:	4b22      	ldr	r3, [pc, #136]	; (1b050 <imgr_upload_inspect+0x188>)
   1afc8:	681a      	ldr	r2, [r3, #0]
   1afca:	60e2      	str	r2, [r4, #12]
        action->size = imgr_state.size;
   1afcc:	6899      	ldr	r1, [r3, #8]
   1afce:	2200      	movs	r2, #0
   1afd0:	6021      	str	r1, [r4, #0]
   1afd2:	6062      	str	r2, [r4, #4]
        if (req->off != imgr_state.off) {
   1afd4:	6800      	ldr	r0, [r0, #0]
   1afd6:	6869      	ldr	r1, [r5, #4]
   1afd8:	685b      	ldr	r3, [r3, #4]
   1afda:	4291      	cmp	r1, r2
   1afdc:	bf08      	it	eq
   1afde:	4298      	cmpeq	r0, r3
   1afe0:	d130      	bne.n	1b044 <imgr_upload_inspect+0x17c>
    action->write_bytes = req->data_len;
   1afe2:	692b      	ldr	r3, [r5, #16]
   1afe4:	60a3      	str	r3, [r4, #8]
    if (req->off + req->data_len < action->size) {
   1afe6:	682b      	ldr	r3, [r5, #0]
   1afe8:	686a      	ldr	r2, [r5, #4]
   1afea:	6929      	ldr	r1, [r5, #16]
   1afec:	185b      	adds	r3, r3, r1
   1afee:	f142 0200 	adc.w	r2, r2, #0
   1aff2:	6820      	ldr	r0, [r4, #0]
   1aff4:	6861      	ldr	r1, [r4, #4]
   1aff6:	4283      	cmp	r3, r0
   1aff8:	eb72 0301 	sbcs.w	r3, r2, r1
   1affc:	d303      	bcc.n	1b006 <imgr_upload_inspect+0x13e>
    action->proceed = true;
   1affe:	2301      	movs	r3, #1
   1b000:	7423      	strb	r3, [r4, #16]
    return 0;
   1b002:	2000      	movs	r0, #0
   1b004:	e01f      	b.n	1b046 <imgr_upload_inspect+0x17e>
        rc = flash_area_open(action->area_id, &fa);
   1b006:	a903      	add	r1, sp, #12
   1b008:	7b20      	ldrb	r0, [r4, #12]
   1b00a:	f001 fb1b 	bl	1c644 <flash_area_open>
        if (rc) {
   1b00e:	b118      	cbz	r0, 1b018 <imgr_upload_inspect+0x150>
            *errstr = imgmgr_err_str_flash_open_failed;
   1b010:	2300      	movs	r3, #0
   1b012:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EUNKNOWN;
   1b014:	2001      	movs	r0, #1
   1b016:	e016      	b.n	1b046 <imgr_upload_inspect+0x17e>
        rem_bytes = req->data_len % flash_area_align(fa);
   1b018:	692d      	ldr	r5, [r5, #16]
   1b01a:	9803      	ldr	r0, [sp, #12]
   1b01c:	f001 fbae 	bl	1c77c <flash_area_align>
   1b020:	fbb5 f3f0 	udiv	r3, r5, r0
   1b024:	fb00 5513 	mls	r5, r0, r3, r5
        if (rem_bytes) {
   1b028:	f015 0fff 	tst.w	r5, #255	; 0xff
   1b02c:	d0e7      	beq.n	1affe <imgr_upload_inspect+0x136>
            action->write_bytes -= rem_bytes;
   1b02e:	b2ed      	uxtb	r5, r5
   1b030:	68a3      	ldr	r3, [r4, #8]
   1b032:	1b5d      	subs	r5, r3, r5
   1b034:	60a5      	str	r5, [r4, #8]
   1b036:	e7e2      	b.n	1affe <imgr_upload_inspect+0x136>
            return MGMT_ERR_EINVAL;
   1b038:	2003      	movs	r0, #3
   1b03a:	e004      	b.n	1b046 <imgr_upload_inspect+0x17e>
                return MGMT_ERR_EUNKNOWN;
   1b03c:	2001      	movs	r0, #1
   1b03e:	e002      	b.n	1b046 <imgr_upload_inspect+0x17e>
            return MGMT_ERR_EUNKNOWN;
   1b040:	2001      	movs	r0, #1
   1b042:	e000      	b.n	1b046 <imgr_upload_inspect+0x17e>
            return 0;
   1b044:	2000      	movs	r0, #0
}
   1b046:	b004      	add	sp, #16
   1b048:	bd70      	pop	{r4, r5, r6, pc}
   1b04a:	bf00      	nop
   1b04c:	96f3b83d 	.word	0x96f3b83d
   1b050:	200067bc 	.word	0x200067bc
   1b054:	200067c9 	.word	0x200067c9

0001b058 <imgmgr_dfu_stopped>:
    return imgr_upload_good_rsp(cb);
}

void
imgmgr_dfu_stopped(void)
{
   1b058:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_stopped_cb) {
   1b05a:	4b03      	ldr	r3, [pc, #12]	; (1b068 <imgmgr_dfu_stopped+0x10>)
   1b05c:	681b      	ldr	r3, [r3, #0]
   1b05e:	b113      	cbz	r3, 1b066 <imgmgr_dfu_stopped+0xe>
   1b060:	685b      	ldr	r3, [r3, #4]
   1b062:	b103      	cbz	r3, 1b066 <imgmgr_dfu_stopped+0xe>
        imgmgr_dfu_callbacks_fn->dfu_stopped_cb();
   1b064:	4798      	blx	r3
    }
}
   1b066:	bd08      	pop	{r3, pc}
   1b068:	200067b8 	.word	0x200067b8

0001b06c <imgmgr_dfu_started>:

void
imgmgr_dfu_started(void)
{
   1b06c:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_started_cb) {
   1b06e:	4b03      	ldr	r3, [pc, #12]	; (1b07c <imgmgr_dfu_started+0x10>)
   1b070:	681b      	ldr	r3, [r3, #0]
   1b072:	b113      	cbz	r3, 1b07a <imgmgr_dfu_started+0xe>
   1b074:	681b      	ldr	r3, [r3, #0]
   1b076:	b103      	cbz	r3, 1b07a <imgmgr_dfu_started+0xe>
        imgmgr_dfu_callbacks_fn->dfu_started_cb();
   1b078:	4798      	blx	r3
    }
}
   1b07a:	bd08      	pop	{r3, pc}
   1b07c:	200067b8 	.word	0x200067b8

0001b080 <imgmgr_dfu_pending>:

void
imgmgr_dfu_pending(void)
{
   1b080:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_pending_cb) {
   1b082:	4b03      	ldr	r3, [pc, #12]	; (1b090 <imgmgr_dfu_pending+0x10>)
   1b084:	681b      	ldr	r3, [r3, #0]
   1b086:	b113      	cbz	r3, 1b08e <imgmgr_dfu_pending+0xe>
   1b088:	689b      	ldr	r3, [r3, #8]
   1b08a:	b103      	cbz	r3, 1b08e <imgmgr_dfu_pending+0xe>
        imgmgr_dfu_callbacks_fn->dfu_pending_cb();
   1b08c:	4798      	blx	r3
    }
}
   1b08e:	bd08      	pop	{r3, pc}
   1b090:	200067b8 	.word	0x200067b8

0001b094 <imgr_upload>:
{
   1b094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b098:	f5ad 7d62 	sub.w	sp, sp, #904	; 0x388
   1b09c:	4605      	mov	r5, r0
    struct imgr_upload_req req = {
   1b09e:	ac52      	add	r4, sp, #328	; 0x148
   1b0a0:	f44f 7210 	mov.w	r2, #576	; 0x240
   1b0a4:	2100      	movs	r1, #0
   1b0a6:	4620      	mov	r0, r4
   1b0a8:	f7f0 fff1 	bl	c08e <memset>
   1b0ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b0b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b0b4:	e9cd 2352 	strd	r2, r3, [sp, #328]	; 0x148
   1b0b8:	e9cd 2354 	strd	r2, r3, [sp, #336]	; 0x150
    const struct cbor_attr_t off_attr[] = {
   1b0bc:	f44f 7290 	mov.w	r2, #288	; 0x120
   1b0c0:	2100      	movs	r1, #0
   1b0c2:	a80a      	add	r0, sp, #40	; 0x28
   1b0c4:	f7f0 ffe3 	bl	c08e <memset>
   1b0c8:	4b69      	ldr	r3, [pc, #420]	; (1b270 <imgr_upload+0x1dc>)
   1b0ca:	930a      	str	r3, [sp, #40]	; 0x28
   1b0cc:	2303      	movs	r3, #3
   1b0ce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1b0d2:	aa58      	add	r2, sp, #352	; 0x160
   1b0d4:	920c      	str	r2, [sp, #48]	; 0x30
   1b0d6:	aa56      	add	r2, sp, #344	; 0x158
   1b0d8:	920d      	str	r2, [sp, #52]	; 0x34
   1b0da:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b0de:	9214      	str	r2, [sp, #80]	; 0x50
   1b0e0:	4a64      	ldr	r2, [pc, #400]	; (1b274 <imgr_upload+0x1e0>)
   1b0e2:	9216      	str	r2, [sp, #88]	; 0x58
   1b0e4:	2102      	movs	r1, #2
   1b0e6:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
   1b0ea:	aa54      	add	r2, sp, #336	; 0x150
   1b0ec:	9218      	str	r2, [sp, #96]	; 0x60
   1b0ee:	2201      	movs	r2, #1
   1b0f0:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   1b0f4:	4860      	ldr	r0, [pc, #384]	; (1b278 <imgr_upload+0x1e4>)
   1b0f6:	9022      	str	r0, [sp, #136]	; 0x88
   1b0f8:	f88d 108c 	strb.w	r1, [sp, #140]	; 0x8c
   1b0fc:	9424      	str	r4, [sp, #144]	; 0x90
   1b0fe:	f88d 20b4 	strb.w	r2, [sp, #180]	; 0xb4
   1b102:	4a5e      	ldr	r2, [pc, #376]	; (1b27c <imgr_upload+0x1e8>)
   1b104:	922e      	str	r2, [sp, #184]	; 0xb8
   1b106:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
   1b10a:	abd8      	add	r3, sp, #864	; 0x360
   1b10c:	9330      	str	r3, [sp, #192]	; 0xc0
   1b10e:	ab57      	add	r3, sp, #348	; 0x15c
   1b110:	9331      	str	r3, [sp, #196]	; 0xc4
   1b112:	2320      	movs	r3, #32
   1b114:	9338      	str	r3, [sp, #224]	; 0xe0
   1b116:	4b5a      	ldr	r3, [pc, #360]	; (1b280 <imgr_upload+0x1ec>)
   1b118:	933a      	str	r3, [sp, #232]	; 0xe8
   1b11a:	2305      	movs	r3, #5
   1b11c:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
   1b120:	abe0      	add	r3, sp, #896	; 0x380
   1b122:	933c      	str	r3, [sp, #240]	; 0xf0
    const char *errstr = NULL;
   1b124:	2300      	movs	r3, #0
   1b126:	9309      	str	r3, [sp, #36]	; 0x24
    const struct flash_area *fa = NULL;
   1b128:	9301      	str	r3, [sp, #4]
    rc = cbor_read_object(&cb->it, off_attr);
   1b12a:	a90a      	add	r1, sp, #40	; 0x28
   1b12c:	f105 001c 	add.w	r0, r5, #28
   1b130:	f7f6 fa36 	bl	115a0 <cbor_read_object>
    if (rc != 0) {
   1b134:	2800      	cmp	r0, #0
   1b136:	f040 8095 	bne.w	1b264 <imgr_upload+0x1d0>
    rc = imgr_upload_inspect(&req, &action, &errstr);
   1b13a:	aa09      	add	r2, sp, #36	; 0x24
   1b13c:	a902      	add	r1, sp, #8
   1b13e:	4620      	mov	r0, r4
   1b140:	f7ff fec2 	bl	1aec8 <imgr_upload_inspect>
    if (rc != 0) {
   1b144:	4604      	mov	r4, r0
   1b146:	2800      	cmp	r0, #0
   1b148:	d137      	bne.n	1b1ba <imgr_upload+0x126>
    if (!action.proceed) {
   1b14a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1b14e:	2b00      	cmp	r3, #0
   1b150:	d036      	beq.n	1b1c0 <imgr_upload+0x12c>
    if (imgr_upload_cb != NULL) {
   1b152:	4b4c      	ldr	r3, [pc, #304]	; (1b284 <imgr_upload+0x1f0>)
   1b154:	681b      	ldr	r3, [r3, #0]
   1b156:	b13b      	cbz	r3, 1b168 <imgr_upload+0xd4>
        rc = imgr_upload_cb(req.off, action.size, imgr_upload_arg);
   1b158:	4a4b      	ldr	r2, [pc, #300]	; (1b288 <imgr_upload+0x1f4>)
   1b15a:	6812      	ldr	r2, [r2, #0]
   1b15c:	9902      	ldr	r1, [sp, #8]
   1b15e:	9852      	ldr	r0, [sp, #328]	; 0x148
   1b160:	4798      	blx	r3
        if (rc != 0) {
   1b162:	4604      	mov	r4, r0
   1b164:	2800      	cmp	r0, #0
   1b166:	d130      	bne.n	1b1ca <imgr_upload+0x136>
    imgr_state.area_id = action.area_id;
   1b168:	9805      	ldr	r0, [sp, #20]
   1b16a:	4b48      	ldr	r3, [pc, #288]	; (1b28c <imgr_upload+0x1f8>)
   1b16c:	6018      	str	r0, [r3, #0]
    imgr_state.size = action.size;
   1b16e:	9a02      	ldr	r2, [sp, #8]
   1b170:	609a      	str	r2, [r3, #8]
    rc = flash_area_open(imgr_state.area_id, &fa);
   1b172:	a901      	add	r1, sp, #4
   1b174:	b2c0      	uxtb	r0, r0
   1b176:	f001 fa65 	bl	1c644 <flash_area_open>
    if (rc != 0) {
   1b17a:	4604      	mov	r4, r0
   1b17c:	bb40      	cbnz	r0, 1b1d0 <imgr_upload+0x13c>
    if (req.off == 0) {
   1b17e:	9a52      	ldr	r2, [sp, #328]	; 0x148
   1b180:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   1b182:	4313      	orrs	r3, r2
   1b184:	d028      	beq.n	1b1d8 <imgr_upload+0x144>
    if (req.data_len != 0) {
   1b186:	9b56      	ldr	r3, [sp, #344]	; 0x158
   1b188:	2b00      	cmp	r3, #0
   1b18a:	d14d      	bne.n	1b228 <imgr_upload+0x194>
    imgr_upload_log(req.off == 0, imgr_state.off == imgr_state.size, rc);
   1b18c:	9852      	ldr	r0, [sp, #328]	; 0x148
   1b18e:	9a53      	ldr	r2, [sp, #332]	; 0x14c
   1b190:	4b3e      	ldr	r3, [pc, #248]	; (1b28c <imgr_upload+0x1f8>)
   1b192:	6859      	ldr	r1, [r3, #4]
   1b194:	689b      	ldr	r3, [r3, #8]
   1b196:	4302      	orrs	r2, r0
   1b198:	bf0c      	ite	eq
   1b19a:	2001      	moveq	r0, #1
   1b19c:	2000      	movne	r0, #0
   1b19e:	4622      	mov	r2, r4
   1b1a0:	4299      	cmp	r1, r3
   1b1a2:	bf14      	ite	ne
   1b1a4:	2100      	movne	r1, #0
   1b1a6:	2101      	moveq	r1, #1
   1b1a8:	f7ff fdb8 	bl	1ad1c <imgr_upload_log>
    if (rc != 0) {
   1b1ac:	2c00      	cmp	r4, #0
   1b1ae:	d156      	bne.n	1b25e <imgr_upload+0x1ca>
    return imgr_upload_good_rsp(cb);
   1b1b0:	4628      	mov	r0, r5
   1b1b2:	f7ff fd0d 	bl	1abd0 <imgr_upload_good_rsp>
   1b1b6:	4604      	mov	r4, r0
   1b1b8:	e055      	b.n	1b266 <imgr_upload+0x1d2>
        imgmgr_dfu_stopped();
   1b1ba:	f7ff ff4d 	bl	1b058 <imgmgr_dfu_stopped>
        return rc;
   1b1be:	e052      	b.n	1b266 <imgr_upload+0x1d2>
        return imgr_upload_good_rsp(cb);
   1b1c0:	4628      	mov	r0, r5
   1b1c2:	f7ff fd05 	bl	1abd0 <imgr_upload_good_rsp>
   1b1c6:	4604      	mov	r4, r0
   1b1c8:	e04d      	b.n	1b266 <imgr_upload+0x1d2>
            errstr = imgmgr_err_str_app_reject;
   1b1ca:	2300      	movs	r3, #0
   1b1cc:	9309      	str	r3, [sp, #36]	; 0x24
            goto end;
   1b1ce:	e7dd      	b.n	1b18c <imgr_upload+0xf8>
        errstr = imgmgr_err_str_flash_open_failed;
   1b1d0:	2300      	movs	r3, #0
   1b1d2:	9309      	str	r3, [sp, #36]	; 0x24
        rc = MGMT_ERR_EUNKNOWN;
   1b1d4:	2401      	movs	r4, #1
        goto end;
   1b1d6:	e7d9      	b.n	1b18c <imgr_upload+0xf8>
        imgr_state.off = 0;
   1b1d8:	4e2c      	ldr	r6, [pc, #176]	; (1b28c <imgr_upload+0x1f8>)
   1b1da:	f04f 0800 	mov.w	r8, #0
   1b1de:	f8c6 8004 	str.w	r8, [r6, #4]
        imgmgr_dfu_started();
   1b1e2:	f7ff ff43 	bl	1b06c <imgmgr_dfu_started>
        imgr_state.data_sha_len = req.data_sha_len;
   1b1e6:	9f57      	ldr	r7, [sp, #348]	; 0x15c
   1b1e8:	7337      	strb	r7, [r6, #12]
        memcpy(imgr_state.data_sha, req.data_sha, req.data_sha_len);
   1b1ea:	463a      	mov	r2, r7
   1b1ec:	a9d8      	add	r1, sp, #864	; 0x360
   1b1ee:	f106 000d 	add.w	r0, r6, #13
   1b1f2:	f7f0 ff3f 	bl	c074 <memcpy>
        memset(&imgr_state.data_sha[req.data_sha_len], 0,
   1b1f6:	f107 0008 	add.w	r0, r7, #8
   1b1fa:	4430      	add	r0, r6
   1b1fc:	f1c7 0220 	rsb	r2, r7, #32
   1b200:	4641      	mov	r1, r8
   1b202:	3005      	adds	r0, #5
   1b204:	f7f0 ff43 	bl	c08e <memset>
        if (action.erase) {
   1b208:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1b20c:	2b00      	cmp	r3, #0
   1b20e:	d0ba      	beq.n	1b186 <imgr_upload+0xf2>
            rc = flash_area_erase(fa, 0, req.size);
   1b210:	9a54      	ldr	r2, [sp, #336]	; 0x150
   1b212:	4641      	mov	r1, r8
   1b214:	9801      	ldr	r0, [sp, #4]
   1b216:	f001 fa9d 	bl	1c754 <flash_area_erase>
            if (rc != 0) {
   1b21a:	4604      	mov	r4, r0
   1b21c:	2800      	cmp	r0, #0
   1b21e:	d0b2      	beq.n	1b186 <imgr_upload+0xf2>
                errstr = imgmgr_err_str_flash_erase_failed;
   1b220:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
                rc = MGMT_ERR_EUNKNOWN;
   1b224:	2401      	movs	r4, #1
                goto end;
   1b226:	e7b1      	b.n	1b18c <imgr_upload+0xf8>
        rc = flash_area_write(fa, req.off, req.img_data, action.write_bytes);
   1b228:	9b04      	ldr	r3, [sp, #16]
   1b22a:	aa58      	add	r2, sp, #352	; 0x160
   1b22c:	9952      	ldr	r1, [sp, #328]	; 0x148
   1b22e:	9801      	ldr	r0, [sp, #4]
   1b230:	f001 fa7c 	bl	1c72c <flash_area_write>
        if (rc != 0) {
   1b234:	4604      	mov	r4, r0
   1b236:	b970      	cbnz	r0, 1b256 <imgr_upload+0x1c2>
            imgr_state.off += action.write_bytes;
   1b238:	9b04      	ldr	r3, [sp, #16]
   1b23a:	4a14      	ldr	r2, [pc, #80]	; (1b28c <imgr_upload+0x1f8>)
   1b23c:	6851      	ldr	r1, [r2, #4]
   1b23e:	440b      	add	r3, r1
   1b240:	6053      	str	r3, [r2, #4]
            if (imgr_state.off == imgr_state.size) {
   1b242:	6892      	ldr	r2, [r2, #8]
   1b244:	4293      	cmp	r3, r2
   1b246:	d1a1      	bne.n	1b18c <imgr_upload+0xf8>
                imgmgr_dfu_pending();
   1b248:	f7ff ff1a 	bl	1b080 <imgmgr_dfu_pending>
                imgr_state.area_id = -1;
   1b24c:	4b0f      	ldr	r3, [pc, #60]	; (1b28c <imgr_upload+0x1f8>)
   1b24e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b252:	601a      	str	r2, [r3, #0]
   1b254:	e79a      	b.n	1b18c <imgr_upload+0xf8>
            errstr = imgmgr_err_str_flash_write_failed;
   1b256:	2300      	movs	r3, #0
   1b258:	9309      	str	r3, [sp, #36]	; 0x24
            rc = MGMT_ERR_EUNKNOWN;
   1b25a:	2401      	movs	r4, #1
            goto end;
   1b25c:	e796      	b.n	1b18c <imgr_upload+0xf8>
        imgmgr_dfu_stopped();
   1b25e:	f7ff fefb 	bl	1b058 <imgmgr_dfu_stopped>
        return imgr_error_rsp(cb, rc, errstr);
   1b262:	e000      	b.n	1b266 <imgr_upload+0x1d2>
        return MGMT_ERR_EINVAL;
   1b264:	2403      	movs	r4, #3
}
   1b266:	4620      	mov	r0, r4
   1b268:	f50d 7d62 	add.w	sp, sp, #904	; 0x388
   1b26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b270:	000231f8 	.word	0x000231f8
   1b274:	00023828 	.word	0x00023828
   1b278:	000221c8 	.word	0x000221c8
   1b27c:	0002382c 	.word	0x0002382c
   1b280:	00023830 	.word	0x00023830
   1b284:	200067f0 	.word	0x200067f0
   1b288:	200067ec 	.word	0x200067ec
   1b28c:	200067bc 	.word	0x200067bc

0001b290 <imgmgr_dfu_confirmed>:

void
imgmgr_dfu_confirmed(void)
{
   1b290:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_confirmed_cb) {
   1b292:	4b03      	ldr	r3, [pc, #12]	; (1b2a0 <imgmgr_dfu_confirmed+0x10>)
   1b294:	681b      	ldr	r3, [r3, #0]
   1b296:	b113      	cbz	r3, 1b29e <imgmgr_dfu_confirmed+0xe>
   1b298:	68db      	ldr	r3, [r3, #12]
   1b29a:	b103      	cbz	r3, 1b29e <imgmgr_dfu_confirmed+0xe>
        imgmgr_dfu_callbacks_fn->dfu_confirmed_cb();
   1b29c:	4798      	blx	r3
    }
}
   1b29e:	bd08      	pop	{r3, pc}
   1b2a0:	200067b8 	.word	0x200067b8

0001b2a4 <imgmgr_module_init>:
    imgmgr_dfu_callbacks_fn = cb_struct;
}

void
imgmgr_module_init(void)
{
   1b2a4:	b510      	push	{r4, lr}
   1b2a6:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b2a8:	4b0a      	ldr	r3, [pc, #40]	; (1b2d4 <imgmgr_module_init+0x30>)
   1b2aa:	781b      	ldrb	r3, [r3, #0]
   1b2ac:	b16b      	cbz	r3, 1b2ca <imgmgr_module_init+0x26>

    rc = mgmt_group_register(&imgr_nmgr_group);
   1b2ae:	480a      	ldr	r0, [pc, #40]	; (1b2d8 <imgmgr_module_init+0x34>)
   1b2b0:	f000 fab6 	bl	1b820 <mgmt_group_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b2b4:	b138      	cbz	r0, 1b2c6 <imgmgr_module_init+0x22>
   1b2b6:	2000      	movs	r0, #0
   1b2b8:	9000      	str	r0, [sp, #0]
   1b2ba:	4b08      	ldr	r3, [pc, #32]	; (1b2dc <imgmgr_module_init+0x38>)
   1b2bc:	681c      	ldr	r4, [r3, #0]
   1b2be:	4603      	mov	r3, r0
   1b2c0:	4602      	mov	r2, r0
   1b2c2:	4601      	mov	r1, r0
   1b2c4:	47a0      	blx	r4
     */
    if (imgmgr_state_slot_in_use(1)) {
        log_fcb_slot1_lock();
    }
#endif
}
   1b2c6:	b002      	add	sp, #8
   1b2c8:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b2ca:	461a      	mov	r2, r3
   1b2cc:	4619      	mov	r1, r3
   1b2ce:	4618      	mov	r0, r3
   1b2d0:	f7ed fe40 	bl	8f54 <__assert_func>
   1b2d4:	200065ac 	.word	0x200065ac
   1b2d8:	20002b58 	.word	0x20002b58
   1b2dc:	200001ec 	.word	0x200001ec

0001b2e0 <imgmgr_log_gen>:
    modlog_append_mbuf(MYNEWT_VAL(IMGMGR_LOG_MOD), LOG_LEVEL_INFO,
                       LOG_ETYPE_CBOR, om);
#endif

    return 0;
}
   1b2e0:	2000      	movs	r0, #0
   1b2e2:	4770      	bx	lr

0001b2e4 <imgmgr_log_upload_start>:

int
imgmgr_log_upload_start(int status)
{
   1b2e4:	b508      	push	{r3, lr}
   1b2e6:	4601      	mov	r1, r0
    return imgmgr_log_gen(IMGMGR_LOG_EV_UPSTART, status, NULL);
   1b2e8:	2200      	movs	r2, #0
   1b2ea:	4802      	ldr	r0, [pc, #8]	; (1b2f4 <imgmgr_log_upload_start+0x10>)
   1b2ec:	f7ff fff8 	bl	1b2e0 <imgmgr_log_gen>
}
   1b2f0:	bd08      	pop	{r3, pc}
   1b2f2:	bf00      	nop
   1b2f4:	00023870 	.word	0x00023870

0001b2f8 <imgmgr_log_upload_done>:

int
imgmgr_log_upload_done(int status, const uint8_t *hash)
{
   1b2f8:	b508      	push	{r3, lr}
   1b2fa:	460a      	mov	r2, r1
    return imgmgr_log_gen(IMGMGR_LOG_EV_UPDONE, 0, hash);
   1b2fc:	2100      	movs	r1, #0
   1b2fe:	4802      	ldr	r0, [pc, #8]	; (1b308 <imgmgr_log_upload_done+0x10>)
   1b300:	f7ff ffee 	bl	1b2e0 <imgmgr_log_gen>
}
   1b304:	bd08      	pop	{r3, pc}
   1b306:	bf00      	nop
   1b308:	00023878 	.word	0x00023878

0001b30c <imgmgr_log_pending>:

int
imgmgr_log_pending(int status, const uint8_t *hash)
{
   1b30c:	b508      	push	{r3, lr}
   1b30e:	460a      	mov	r2, r1
    return imgmgr_log_gen(IMGMGR_LOG_EV_PEND, status, hash);
   1b310:	4601      	mov	r1, r0
   1b312:	4802      	ldr	r0, [pc, #8]	; (1b31c <imgmgr_log_pending+0x10>)
   1b314:	f7ff ffe4 	bl	1b2e0 <imgmgr_log_gen>
}
   1b318:	bd08      	pop	{r3, pc}
   1b31a:	bf00      	nop
   1b31c:	00023880 	.word	0x00023880

0001b320 <imgmgr_log_confirm>:

int
imgmgr_log_confirm(int status, const uint8_t *hash)
{
   1b320:	b508      	push	{r3, lr}
   1b322:	460a      	mov	r2, r1
    return imgmgr_log_gen(IMGMGR_LOG_EV_CONF, status, hash);
   1b324:	4601      	mov	r1, r0
   1b326:	4802      	ldr	r0, [pc, #8]	; (1b330 <imgmgr_log_confirm+0x10>)
   1b328:	f7ff ffda 	bl	1b2e0 <imgmgr_log_gen>
}
   1b32c:	bd08      	pop	{r3, pc}
   1b32e:	bf00      	nop
   1b330:	00023888 	.word	0x00023888

0001b334 <imgmgr_state_flags>:
#include "imgmgr_priv.h"
#include "log/log_fcb_slot1.h"

uint8_t
imgmgr_state_flags(int query_slot)
{
   1b334:	b538      	push	{r3, r4, r5, lr}
    split_mode_t split_mode;
    uint8_t flags;
    int swap_type;

    assert(query_slot == 0 || query_slot == 1);
   1b336:	2801      	cmp	r0, #1
   1b338:	d809      	bhi.n	1b34e <imgmgr_state_flags+0x1a>
   1b33a:	4604      	mov	r4, r0
    flags = 0;

    /* Determine if this is is pending or confirmed (only applicable for
     * unified images and loaders.
     */
    swap_type = boot_swap_type();
   1b33c:	f002 ff46 	bl	1e1cc <boot_swap_type>
    switch (swap_type) {
   1b340:	3801      	subs	r0, #1
   1b342:	2803      	cmp	r0, #3
   1b344:	d825      	bhi.n	1b392 <imgmgr_state_flags+0x5e>
   1b346:	e8df f000 	tbb	[pc, r0]
   1b34a:	1508      	.short	0x1508
   1b34c:	1f1a      	.short	0x1f1a
    assert(query_slot == 0 || query_slot == 1);
   1b34e:	2300      	movs	r3, #0
   1b350:	461a      	mov	r2, r3
   1b352:	4619      	mov	r1, r3
   1b354:	4618      	mov	r0, r3
   1b356:	f7ed fdfd 	bl	8f54 <__assert_func>
    case BOOT_SWAP_TYPE_NONE:
        if (query_slot == 0) {
   1b35a:	b1e4      	cbz	r4, 1b396 <imgmgr_state_flags+0x62>
    flags = 0;
   1b35c:	2500      	movs	r5, #0

    /* Slot 0 is always active.  Slot 1 is also active if a split app is
     * currently running.
     */
    /* XXX: The slot 0 assumption only holds when running from flash. */
    if (query_slot == 0 || split_app_active_get()) {
   1b35e:	bb44      	cbnz	r4, 1b3b2 <imgmgr_state_flags+0x7e>
        flags |= IMGMGR_STATE_F_ACTIVE;
   1b360:	f045 0504 	orr.w	r5, r5, #4
    }

    /* Read the split/status config state to determine any pending split-image
     * state changes.
     */
    split_mode = split_mode_get();
   1b364:	f7f5 fc94 	bl	10c90 <split_mode_get>
    switch (split_mode) {
   1b368:	2803      	cmp	r0, #3
   1b36a:	d838      	bhi.n	1b3de <imgmgr_state_flags+0xaa>
   1b36c:	e8df f000 	tbb	[pc, r0]
   1b370:	2d263228 	.word	0x2d263228
        if (query_slot == 0) {
   1b374:	b18c      	cbz	r4, 1b39a <imgmgr_state_flags+0x66>
        } else if (query_slot == 1) {
   1b376:	2c01      	cmp	r4, #1
   1b378:	d011      	beq.n	1b39e <imgmgr_state_flags+0x6a>
    flags = 0;
   1b37a:	2500      	movs	r5, #0
   1b37c:	e7ef      	b.n	1b35e <imgmgr_state_flags+0x2a>
        if (query_slot == 0) {
   1b37e:	b184      	cbz	r4, 1b3a2 <imgmgr_state_flags+0x6e>
        } else if (query_slot == 1) {
   1b380:	2c01      	cmp	r4, #1
   1b382:	d010      	beq.n	1b3a6 <imgmgr_state_flags+0x72>
    flags = 0;
   1b384:	2500      	movs	r5, #0
   1b386:	e7ea      	b.n	1b35e <imgmgr_state_flags+0x2a>
        if (query_slot == 0) {
   1b388:	b17c      	cbz	r4, 1b3aa <imgmgr_state_flags+0x76>
        } else if (query_slot == 1) {
   1b38a:	2c01      	cmp	r4, #1
   1b38c:	d00f      	beq.n	1b3ae <imgmgr_state_flags+0x7a>
    flags = 0;
   1b38e:	2500      	movs	r5, #0
   1b390:	e7e5      	b.n	1b35e <imgmgr_state_flags+0x2a>
    switch (swap_type) {
   1b392:	2500      	movs	r5, #0
   1b394:	e7e3      	b.n	1b35e <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_ACTIVE;
   1b396:	2506      	movs	r5, #6
   1b398:	e7e1      	b.n	1b35e <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1b39a:	2502      	movs	r5, #2
   1b39c:	e7df      	b.n	1b35e <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_PENDING;
   1b39e:	2501      	movs	r5, #1
   1b3a0:	e7dd      	b.n	1b35e <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1b3a2:	2502      	movs	r5, #2
   1b3a4:	e7db      	b.n	1b35e <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_PENDING | IMGMGR_STATE_F_PERMANENT;
   1b3a6:	2509      	movs	r5, #9
   1b3a8:	e7d9      	b.n	1b35e <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_ACTIVE;
   1b3aa:	2504      	movs	r5, #4
   1b3ac:	e7d7      	b.n	1b35e <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1b3ae:	2502      	movs	r5, #2
   1b3b0:	e7d5      	b.n	1b35e <imgmgr_state_flags+0x2a>
    if (query_slot == 0 || split_app_active_get()) {
   1b3b2:	f7f5 fc73 	bl	10c9c <split_app_active_get>
   1b3b6:	2800      	cmp	r0, #0
   1b3b8:	d0d4      	beq.n	1b364 <imgmgr_state_flags+0x30>
   1b3ba:	e7d1      	b.n	1b360 <imgmgr_state_flags+0x2c>
    case SPLIT_MODE_LOADER:
        break;

    case SPLIT_MODE_APP:
        if (query_slot == 1) {
   1b3bc:	2c01      	cmp	r4, #1
   1b3be:	d001      	beq.n	1b3c4 <imgmgr_state_flags+0x90>
        assert(0);
        break;
    }

    return flags;
}
   1b3c0:	4628      	mov	r0, r5
   1b3c2:	bd38      	pop	{r3, r4, r5, pc}
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1b3c4:	f045 0502 	orr.w	r5, r5, #2
   1b3c8:	e7fa      	b.n	1b3c0 <imgmgr_state_flags+0x8c>
        if (query_slot == 0) {
   1b3ca:	2c00      	cmp	r4, #0
   1b3cc:	d1f8      	bne.n	1b3c0 <imgmgr_state_flags+0x8c>
            flags |= IMGMGR_STATE_F_PENDING;
   1b3ce:	f045 0501 	orr.w	r5, r5, #1
   1b3d2:	e7f5      	b.n	1b3c0 <imgmgr_state_flags+0x8c>
        if (query_slot == 1) {
   1b3d4:	2c01      	cmp	r4, #1
   1b3d6:	d1f3      	bne.n	1b3c0 <imgmgr_state_flags+0x8c>
            flags |= IMGMGR_STATE_F_PENDING;
   1b3d8:	f045 0501 	orr.w	r5, r5, #1
   1b3dc:	e7f0      	b.n	1b3c0 <imgmgr_state_flags+0x8c>
        assert(0);
   1b3de:	2300      	movs	r3, #0
   1b3e0:	461a      	mov	r2, r3
   1b3e2:	4619      	mov	r1, r3
   1b3e4:	4618      	mov	r0, r3
   1b3e6:	f7ed fdb5 	bl	8f54 <__assert_func>

0001b3ea <imgmgr_state_any_pending>:

static int
imgmgr_state_any_pending(void)
{
   1b3ea:	b508      	push	{r3, lr}
    return (imgmgr_state_flags(0) & IMGMGR_STATE_F_PENDING) ||
   1b3ec:	2000      	movs	r0, #0
   1b3ee:	f7ff ffa1 	bl	1b334 <imgmgr_state_flags>
   1b3f2:	f010 0f01 	tst.w	r0, #1
   1b3f6:	d001      	beq.n	1b3fc <imgmgr_state_any_pending+0x12>
   1b3f8:	2001      	movs	r0, #1
           (imgmgr_state_flags(1) & IMGMGR_STATE_F_PENDING);
}
   1b3fa:	bd08      	pop	{r3, pc}
           (imgmgr_state_flags(1) & IMGMGR_STATE_F_PENDING);
   1b3fc:	2001      	movs	r0, #1
   1b3fe:	f7ff ff99 	bl	1b334 <imgmgr_state_flags>
    return (imgmgr_state_flags(0) & IMGMGR_STATE_F_PENDING) ||
   1b402:	f010 0f01 	tst.w	r0, #1
   1b406:	d101      	bne.n	1b40c <imgmgr_state_any_pending+0x22>
   1b408:	2000      	movs	r0, #0
   1b40a:	e7f6      	b.n	1b3fa <imgmgr_state_any_pending+0x10>
   1b40c:	2001      	movs	r0, #1
   1b40e:	e7f4      	b.n	1b3fa <imgmgr_state_any_pending+0x10>

0001b410 <imgmgr_state_slot_in_use>:

int
imgmgr_state_slot_in_use(int slot)
{
   1b410:	b508      	push	{r3, lr}
    uint8_t state_flags;

    state_flags = imgmgr_state_flags(slot);
   1b412:	f7ff ff8f 	bl	1b334 <imgmgr_state_flags>
    return (state_flags & IMGMGR_STATE_F_ACTIVE)       ||
           (state_flags & IMGMGR_STATE_F_CONFIRMED)    ||
   1b416:	f010 0f06 	tst.w	r0, #6
   1b41a:	d104      	bne.n	1b426 <imgmgr_state_slot_in_use+0x16>
   1b41c:	f010 0f01 	tst.w	r0, #1
   1b420:	d003      	beq.n	1b42a <imgmgr_state_slot_in_use+0x1a>
   1b422:	2001      	movs	r0, #1
   1b424:	e000      	b.n	1b428 <imgmgr_state_slot_in_use+0x18>
   1b426:	2001      	movs	r0, #1
           (state_flags & IMGMGR_STATE_F_PENDING);
}
   1b428:	bd08      	pop	{r3, pc}
           (state_flags & IMGMGR_STATE_F_CONFIRMED)    ||
   1b42a:	2000      	movs	r0, #0
   1b42c:	e7fc      	b.n	1b428 <imgmgr_state_slot_in_use+0x18>

0001b42e <imgmgr_state_set_pending>:

int
imgmgr_state_set_pending(int slot, int permanent)
{
   1b42e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b430:	b08b      	sub	sp, #44	; 0x2c
   1b432:	4605      	mov	r5, r0
   1b434:	460c      	mov	r4, r1
    uint8_t hash[IMGMGR_HASH_LEN];
    const uint8_t *hashp;
    int split_app_active;
    int rc;

    state_flags = imgmgr_state_flags(slot);
   1b436:	f7ff ff7d 	bl	1b334 <imgmgr_state_flags>
   1b43a:	4606      	mov	r6, r0
    split_app_active = split_app_active_get();
   1b43c:	f7f5 fc2e 	bl	10c9c <split_app_active_get>
   1b440:	4607      	mov	r7, r0
    hashp = NULL;

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if ((state_flags & IMGMGR_STATE_F_CONFIRMED) &&
   1b442:	f016 0f02 	tst.w	r6, #2
   1b446:	d001      	beq.n	1b44c <imgmgr_state_set_pending+0x1e>
   1b448:	bb6d      	cbnz	r5, 1b4a6 <imgmgr_state_set_pending+0x78>
        (slot != 0 || !split_app_active)) {
   1b44a:	b378      	cbz	r0, 1b4ac <imgmgr_state_set_pending+0x7e>

        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    rc = imgr_read_info(slot, NULL, hash, &image_flags);
   1b44c:	ab09      	add	r3, sp, #36	; 0x24
   1b44e:	aa01      	add	r2, sp, #4
   1b450:	2100      	movs	r1, #0
   1b452:	4628      	mov	r0, r5
   1b454:	f7ff fbe4 	bl	1ac20 <imgr_read_info>
    if (rc != 0) {
   1b458:	bb58      	cbnz	r0, 1b4b2 <imgmgr_state_set_pending+0x84>
        rc = MGMT_ERR_EUNKNOWN;
        goto done;
    }
    hashp = hash;

    if (!(image_flags & IMAGE_F_NON_BOOTABLE)) {
   1b45a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b45c:	f013 0f10 	tst.w	r3, #16
   1b460:	d114      	bne.n	1b48c <imgmgr_state_set_pending+0x5e>
        /* Unified image or loader. */
        if (!split_app_active) {
   1b462:	b13f      	cbz	r7, 1b474 <imgmgr_state_set_pending+0x46>
                rc = MGMT_ERR_EUNKNOWN;
                goto done;
            }
        } else {
            /* Currently loader + app; testing loader-only. */
            if (permanent) {
   1b464:	b16c      	cbz	r4, 1b482 <imgmgr_state_set_pending+0x54>
                rc = split_write_split(SPLIT_MODE_LOADER);
   1b466:	2000      	movs	r0, #0
   1b468:	f7f5 fc8c 	bl	10d84 <split_write_split>
   1b46c:	4605      	mov	r5, r0
            } else {
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
            }
            if (rc != 0) {
   1b46e:	bb65      	cbnz	r5, 1b4ca <imgmgr_state_set_pending+0x9c>
    hashp = hash;
   1b470:	a901      	add	r1, sp, #4
   1b472:	e020      	b.n	1b4b6 <imgmgr_state_set_pending+0x88>
            rc = boot_set_pending(permanent);
   1b474:	4620      	mov	r0, r4
   1b476:	f002 fefb 	bl	1e270 <boot_set_pending>
            if (rc != 0) {
   1b47a:	4605      	mov	r5, r0
   1b47c:	bb10      	cbnz	r0, 1b4c4 <imgmgr_state_set_pending+0x96>
    hashp = hash;
   1b47e:	a901      	add	r1, sp, #4
   1b480:	e019      	b.n	1b4b6 <imgmgr_state_set_pending+0x88>
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
   1b482:	2003      	movs	r0, #3
   1b484:	f7f5 fc7e 	bl	10d84 <split_write_split>
   1b488:	4605      	mov	r5, r0
   1b48a:	e7f0      	b.n	1b46e <imgmgr_state_set_pending+0x40>
                goto done;
            }
        }
    } else {
        /* Testing split app. */
        if (permanent) {
   1b48c:	b134      	cbz	r4, 1b49c <imgmgr_state_set_pending+0x6e>
            rc = split_write_split(SPLIT_MODE_APP);
   1b48e:	2002      	movs	r0, #2
   1b490:	f7f5 fc78 	bl	10d84 <split_write_split>
   1b494:	4605      	mov	r5, r0
        } else {
            rc = split_write_split(SPLIT_MODE_TEST_APP);
        }
        if (rc != 0) {
   1b496:	b9dd      	cbnz	r5, 1b4d0 <imgmgr_state_set_pending+0xa2>
    hashp = hash;
   1b498:	a901      	add	r1, sp, #4
   1b49a:	e00c      	b.n	1b4b6 <imgmgr_state_set_pending+0x88>
            rc = split_write_split(SPLIT_MODE_TEST_APP);
   1b49c:	2001      	movs	r0, #1
   1b49e:	f7f5 fc71 	bl	10d84 <split_write_split>
   1b4a2:	4605      	mov	r5, r0
   1b4a4:	e7f7      	b.n	1b496 <imgmgr_state_set_pending+0x68>
        rc = MGMT_ERR_EBADSTATE;
   1b4a6:	2506      	movs	r5, #6
    hashp = NULL;
   1b4a8:	2100      	movs	r1, #0
   1b4aa:	e004      	b.n	1b4b6 <imgmgr_state_set_pending+0x88>
        rc = MGMT_ERR_EBADSTATE;
   1b4ac:	2506      	movs	r5, #6
    hashp = NULL;
   1b4ae:	2100      	movs	r1, #0
   1b4b0:	e001      	b.n	1b4b6 <imgmgr_state_set_pending+0x88>
        rc = MGMT_ERR_EUNKNOWN;
   1b4b2:	2501      	movs	r5, #1
    hashp = NULL;
   1b4b4:	2100      	movs	r1, #0
            goto done;
        }
    }

done:
    if (permanent) {
   1b4b6:	b174      	cbz	r4, 1b4d6 <imgmgr_state_set_pending+0xa8>
        imgmgr_log_confirm(rc, hashp);
   1b4b8:	4628      	mov	r0, r5
   1b4ba:	f7ff ff31 	bl	1b320 <imgmgr_log_confirm>
    } else {
        imgmgr_log_pending(rc, hashp);
    }
    return rc;
}
   1b4be:	4628      	mov	r0, r5
   1b4c0:	b00b      	add	sp, #44	; 0x2c
   1b4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                rc = MGMT_ERR_EUNKNOWN;
   1b4c4:	2501      	movs	r5, #1
    hashp = hash;
   1b4c6:	a901      	add	r1, sp, #4
   1b4c8:	e7f5      	b.n	1b4b6 <imgmgr_state_set_pending+0x88>
                rc = MGMT_ERR_EUNKNOWN;
   1b4ca:	2501      	movs	r5, #1
    hashp = hash;
   1b4cc:	a901      	add	r1, sp, #4
   1b4ce:	e7f2      	b.n	1b4b6 <imgmgr_state_set_pending+0x88>
            rc = MGMT_ERR_EUNKNOWN;
   1b4d0:	2501      	movs	r5, #1
    hashp = hash;
   1b4d2:	a901      	add	r1, sp, #4
   1b4d4:	e7ef      	b.n	1b4b6 <imgmgr_state_set_pending+0x88>
        imgmgr_log_pending(rc, hashp);
   1b4d6:	4628      	mov	r0, r5
   1b4d8:	f7ff ff18 	bl	1b30c <imgmgr_log_pending>
    return rc;
   1b4dc:	e7ef      	b.n	1b4be <imgmgr_state_set_pending+0x90>

0001b4de <imgmgr_state_confirm>:

int
imgmgr_state_confirm(void)
{
   1b4de:	b510      	push	{r4, lr}
    int rc;

    /* Confirm disallowed if a test is pending. */
    if (imgmgr_state_any_pending()) {
   1b4e0:	f7ff ff83 	bl	1b3ea <imgmgr_state_any_pending>
   1b4e4:	b9b8      	cbnz	r0, 1b516 <imgmgr_state_confirm+0x38>
        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    /* Confirm the unified image or loader in slot 0. */
    rc = boot_set_confirmed();
   1b4e6:	f002 ff06 	bl	1e2f6 <boot_set_confirmed>
    if (rc != 0) {
   1b4ea:	b108      	cbz	r0, 1b4f0 <imgmgr_state_confirm+0x12>
        rc = MGMT_ERR_EUNKNOWN;
   1b4ec:	2401      	movs	r4, #1
   1b4ee:	e013      	b.n	1b518 <imgmgr_state_confirm+0x3a>
        goto done;
    }

    /* If a split app in slot 1 is active, confirm it as well. */
    if (split_app_active_get()) {
   1b4f0:	f7f5 fbd4 	bl	10c9c <split_app_active_get>
   1b4f4:	b138      	cbz	r0, 1b506 <imgmgr_state_confirm+0x28>
        rc = split_write_split(SPLIT_MODE_APP);
   1b4f6:	2002      	movs	r0, #2
   1b4f8:	f7f5 fc44 	bl	10d84 <split_write_split>
        if (rc != 0) {
   1b4fc:	4604      	mov	r4, r0
   1b4fe:	b988      	cbnz	r0, 1b524 <imgmgr_state_confirm+0x46>
        /* If logging to slot1 is enabled, we can unlock slot1 here. */
        log_fcb_slot1_unlock();
#endif
    }

    imgmgr_dfu_confirmed();
   1b500:	f7ff fec6 	bl	1b290 <imgmgr_dfu_confirmed>
   1b504:	e008      	b.n	1b518 <imgmgr_state_confirm+0x3a>
        rc = split_write_split(SPLIT_MODE_LOADER);
   1b506:	2000      	movs	r0, #0
   1b508:	f7f5 fc3c 	bl	10d84 <split_write_split>
        if (rc != 0) {
   1b50c:	4604      	mov	r4, r0
   1b50e:	2800      	cmp	r0, #0
   1b510:	d0f6      	beq.n	1b500 <imgmgr_state_confirm+0x22>
            rc = MGMT_ERR_EUNKNOWN;
   1b512:	2401      	movs	r4, #1
   1b514:	e000      	b.n	1b518 <imgmgr_state_confirm+0x3a>
        rc = MGMT_ERR_EBADSTATE;
   1b516:	2406      	movs	r4, #6

done:
    imgmgr_log_confirm(rc, NULL);
   1b518:	2100      	movs	r1, #0
   1b51a:	4620      	mov	r0, r4
   1b51c:	f7ff ff00 	bl	1b320 <imgmgr_log_confirm>
    return rc;
}
   1b520:	4620      	mov	r0, r4
   1b522:	bd10      	pop	{r4, pc}
            rc = MGMT_ERR_EUNKNOWN;
   1b524:	2401      	movs	r4, #1
   1b526:	e7f7      	b.n	1b518 <imgmgr_state_confirm+0x3a>

0001b528 <imgmgr_state_read>:

int
imgmgr_state_read(struct mgmt_cbuf *cb)
{
   1b528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b52c:	b09a      	sub	sp, #104	; 0x68
    CborEncoder images;
    CborEncoder image;

    any_non_bootable = 0;

    g_err |= cbor_encode_text_stringz(&cb->encoder, "images");
   1b52e:	f100 070c 	add.w	r7, r0, #12
   1b532:	2206      	movs	r2, #6
   1b534:	4961      	ldr	r1, [pc, #388]	; (1b6bc <imgmgr_state_read+0x194>)
   1b536:	4638      	mov	r0, r7
   1b538:	f7f6 fa19 	bl	1196e <cbor_encode_text_string>
   1b53c:	4604      	mov	r4, r0

    g_err |= cbor_encoder_create_array(&cb->encoder, &images,
   1b53e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b542:	a904      	add	r1, sp, #16
   1b544:	4638      	mov	r0, r7
   1b546:	f7f6 fa19 	bl	1197c <cbor_encoder_create_array>
   1b54a:	4304      	orrs	r4, r0
    any_non_bootable = 0;
   1b54c:	f04f 0800 	mov.w	r8, #0
                                       CborIndefiniteLength);
    for (i = 0; i < 2; i++) {
   1b550:	4645      	mov	r5, r8
   1b552:	e080      	b.n	1b656 <imgmgr_state_read+0x12e>

        if (flags & IMAGE_F_NON_BOOTABLE) {
            any_non_bootable = 1;
        }

        state_flags = imgmgr_state_flags(i);
   1b554:	4628      	mov	r0, r5
   1b556:	f7ff feed 	bl	1b334 <imgmgr_state_flags>
   1b55a:	4606      	mov	r6, r0

        g_err |= cbor_encoder_create_map(&images, &image,
   1b55c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b560:	4669      	mov	r1, sp
   1b562:	a804      	add	r0, sp, #16
   1b564:	f7f6 fa0f 	bl	11986 <cbor_encoder_create_map>
   1b568:	4304      	orrs	r4, r0
   1b56a:	2204      	movs	r2, #4
   1b56c:	4954      	ldr	r1, [pc, #336]	; (1b6c0 <imgmgr_state_read+0x198>)
   1b56e:	4668      	mov	r0, sp
   1b570:	f7f6 f9fd 	bl	1196e <cbor_encode_text_string>
                                         CborIndefiniteLength);
        g_err |= cbor_encode_text_stringz(&image, "slot");
   1b574:	4304      	orrs	r4, r0
        g_err |= cbor_encode_int(&image, i);
   1b576:	462a      	mov	r2, r5
   1b578:	17eb      	asrs	r3, r5, #31
   1b57a:	4668      	mov	r0, sp
   1b57c:	f7f6 f97c 	bl	11878 <cbor_encode_int>
   1b580:	4304      	orrs	r4, r0
   1b582:	2207      	movs	r2, #7
   1b584:	494f      	ldr	r1, [pc, #316]	; (1b6c4 <imgmgr_state_read+0x19c>)
   1b586:	4668      	mov	r0, sp
   1b588:	f7f6 f9f1 	bl	1196e <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "version");
   1b58c:	4304      	orrs	r4, r0
        imgr_ver_str(&ver, vers_str);
   1b58e:	a908      	add	r1, sp, #32
   1b590:	a817      	add	r0, sp, #92	; 0x5c
   1b592:	f000 f8f5 	bl	1b780 <imgr_ver_str>
   1b596:	a808      	add	r0, sp, #32
   1b598:	f7f0 fdb0 	bl	c0fc <strlen>
   1b59c:	4602      	mov	r2, r0
   1b59e:	a908      	add	r1, sp, #32
   1b5a0:	4668      	mov	r0, sp
   1b5a2:	f7f6 f9e4 	bl	1196e <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&image, vers_str);
   1b5a6:	4304      	orrs	r4, r0
   1b5a8:	2204      	movs	r2, #4
   1b5aa:	4947      	ldr	r1, [pc, #284]	; (1b6c8 <imgmgr_state_read+0x1a0>)
   1b5ac:	4668      	mov	r0, sp
   1b5ae:	f7f6 f9de 	bl	1196e <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "hash");
   1b5b2:	4304      	orrs	r4, r0
        g_err |= cbor_encode_byte_string(&image, hash, IMGMGR_HASH_LEN);
   1b5b4:	2220      	movs	r2, #32
   1b5b6:	a90f      	add	r1, sp, #60	; 0x3c
   1b5b8:	4668      	mov	r0, sp
   1b5ba:	f7f6 f9d1 	bl	11960 <cbor_encode_byte_string>
   1b5be:	4304      	orrs	r4, r0
   1b5c0:	2208      	movs	r2, #8
   1b5c2:	4942      	ldr	r1, [pc, #264]	; (1b6cc <imgmgr_state_read+0x1a4>)
   1b5c4:	4668      	mov	r0, sp
   1b5c6:	f7f6 f9d2 	bl	1196e <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "bootable");
   1b5ca:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   1b5cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1b5ce:	f013 0f10 	tst.w	r3, #16
   1b5d2:	bf0c      	ite	eq
   1b5d4:	2101      	moveq	r1, #1
   1b5d6:	2100      	movne	r1, #0
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1b5d8:	3114      	adds	r1, #20
   1b5da:	4668      	mov	r0, sp
   1b5dc:	f7f6 f992 	bl	11904 <cbor_encode_simple_value>
   1b5e0:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1b5e2:	2207      	movs	r2, #7
   1b5e4:	493a      	ldr	r1, [pc, #232]	; (1b6d0 <imgmgr_state_read+0x1a8>)
   1b5e6:	4668      	mov	r0, sp
   1b5e8:	f7f6 f9c1 	bl	1196e <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "pending");
   1b5ec:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   1b5ee:	f006 0101 	and.w	r1, r6, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1b5f2:	3114      	adds	r1, #20
   1b5f4:	4668      	mov	r0, sp
   1b5f6:	f7f6 f985 	bl	11904 <cbor_encode_simple_value>
   1b5fa:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1b5fc:	2209      	movs	r2, #9
   1b5fe:	4935      	ldr	r1, [pc, #212]	; (1b6d4 <imgmgr_state_read+0x1ac>)
   1b600:	4668      	mov	r0, sp
   1b602:	f7f6 f9b4 	bl	1196e <cbor_encode_text_string>
                                     state_flags & IMGMGR_STATE_F_PENDING);

        g_err |= cbor_encode_text_stringz(&image, "confirmed");
   1b606:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   1b608:	f3c6 0140 	ubfx	r1, r6, #1, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1b60c:	3114      	adds	r1, #20
   1b60e:	4668      	mov	r0, sp
   1b610:	f7f6 f978 	bl	11904 <cbor_encode_simple_value>
   1b614:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1b616:	2206      	movs	r2, #6
   1b618:	492f      	ldr	r1, [pc, #188]	; (1b6d8 <imgmgr_state_read+0x1b0>)
   1b61a:	4668      	mov	r0, sp
   1b61c:	f7f6 f9a7 	bl	1196e <cbor_encode_text_string>
                                     state_flags & IMGMGR_STATE_F_CONFIRMED);

        g_err |= cbor_encode_text_stringz(&image, "active");
   1b620:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   1b622:	f3c6 0180 	ubfx	r1, r6, #2, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1b626:	3114      	adds	r1, #20
   1b628:	4668      	mov	r0, sp
   1b62a:	f7f6 f96b 	bl	11904 <cbor_encode_simple_value>
   1b62e:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1b630:	2209      	movs	r2, #9
   1b632:	492a      	ldr	r1, [pc, #168]	; (1b6dc <imgmgr_state_read+0x1b4>)
   1b634:	4668      	mov	r0, sp
   1b636:	f7f6 f99a 	bl	1196e <cbor_encode_text_string>
                                     state_flags & IMGMGR_STATE_F_ACTIVE);

        g_err |= cbor_encode_text_stringz(&image, "permanent");
   1b63a:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   1b63c:	f3c6 01c0 	ubfx	r1, r6, #3, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1b640:	3114      	adds	r1, #20
   1b642:	4668      	mov	r0, sp
   1b644:	f7f6 f95e 	bl	11904 <cbor_encode_simple_value>
   1b648:	4304      	orrs	r4, r0
                                     state_flags & IMGMGR_STATE_F_PERMANENT);

        g_err |= cbor_encoder_close_container(&images, &image);
   1b64a:	4669      	mov	r1, sp
   1b64c:	a804      	add	r0, sp, #16
   1b64e:	f7f6 f9a8 	bl	119a2 <cbor_encoder_close_container>
   1b652:	4304      	orrs	r4, r0
    for (i = 0; i < 2; i++) {
   1b654:	3501      	adds	r5, #1
   1b656:	2d01      	cmp	r5, #1
   1b658:	dc0f      	bgt.n	1b67a <imgmgr_state_read+0x152>
        rc = imgr_read_info(i, &ver, hash, &flags);
   1b65a:	ab19      	add	r3, sp, #100	; 0x64
   1b65c:	aa0f      	add	r2, sp, #60	; 0x3c
   1b65e:	a917      	add	r1, sp, #92	; 0x5c
   1b660:	4628      	mov	r0, r5
   1b662:	f7ff fadd 	bl	1ac20 <imgr_read_info>
        if (rc != 0) {
   1b666:	2800      	cmp	r0, #0
   1b668:	d1f4      	bne.n	1b654 <imgmgr_state_read+0x12c>
        if (flags & IMAGE_F_NON_BOOTABLE) {
   1b66a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1b66c:	f013 0f10 	tst.w	r3, #16
   1b670:	f43f af70 	beq.w	1b554 <imgmgr_state_read+0x2c>
            any_non_bootable = 1;
   1b674:	f04f 0801 	mov.w	r8, #1
   1b678:	e76c      	b.n	1b554 <imgmgr_state_read+0x2c>
    }

    g_err |= cbor_encoder_close_container(&cb->encoder, &images);
   1b67a:	a904      	add	r1, sp, #16
   1b67c:	4638      	mov	r0, r7
   1b67e:	f7f6 f990 	bl	119a2 <cbor_encoder_close_container>
   1b682:	4304      	orrs	r4, r0

    if (any_non_bootable) {
   1b684:	f1b8 0f00 	cmp.w	r8, #0
   1b688:	d112      	bne.n	1b6b0 <imgmgr_state_read+0x188>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1b68a:	220b      	movs	r2, #11
   1b68c:	4914      	ldr	r1, [pc, #80]	; (1b6e0 <imgmgr_state_read+0x1b8>)
   1b68e:	4638      	mov	r0, r7
   1b690:	f7f6 f96d 	bl	1196e <cbor_encode_text_string>
        split_status = split_check_status();
    } else {
        split_status = SPLIT_STATUS_INVALID;
    }

    g_err |= cbor_encode_text_stringz(&cb->encoder, "splitStatus");
   1b694:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, split_status);
   1b696:	4642      	mov	r2, r8
   1b698:	ea4f 73e8 	mov.w	r3, r8, asr #31
   1b69c:	4638      	mov	r0, r7
   1b69e:	f7f6 f8eb 	bl	11878 <cbor_encode_int>

    if (g_err) {
   1b6a2:	ea54 0300 	orrs.w	r3, r4, r0
   1b6a6:	d107      	bne.n	1b6b8 <imgmgr_state_read+0x190>
        return MGMT_ERR_ENOMEM;
    }
    return 0;
   1b6a8:	2000      	movs	r0, #0
}
   1b6aa:	b01a      	add	sp, #104	; 0x68
   1b6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        split_status = split_check_status();
   1b6b0:	f7f5 fad2 	bl	10c58 <split_check_status>
   1b6b4:	4680      	mov	r8, r0
   1b6b6:	e7e8      	b.n	1b68a <imgmgr_state_read+0x162>
        return MGMT_ERR_ENOMEM;
   1b6b8:	2002      	movs	r0, #2
   1b6ba:	e7f6      	b.n	1b6aa <imgmgr_state_read+0x182>
   1b6bc:	00023890 	.word	0x00023890
   1b6c0:	00023898 	.word	0x00023898
   1b6c4:	000238a0 	.word	0x000238a0
   1b6c8:	000238a8 	.word	0x000238a8
   1b6cc:	000238b0 	.word	0x000238b0
   1b6d0:	000238bc 	.word	0x000238bc
   1b6d4:	000238c4 	.word	0x000238c4
   1b6d8:	000238d0 	.word	0x000238d0
   1b6dc:	000238d8 	.word	0x000238d8
   1b6e0:	000238e4 	.word	0x000238e4

0001b6e4 <imgmgr_state_write>:

int
imgmgr_state_write(struct mgmt_cbuf *cb)
{
   1b6e4:	b510      	push	{r4, lr}
   1b6e6:	b0ae      	sub	sp, #184	; 0xb8
   1b6e8:	4604      	mov	r4, r0
    uint8_t hash[IMGMGR_HASH_LEN];
    size_t hash_len = 0;
   1b6ea:	2100      	movs	r1, #0
   1b6ec:	9125      	str	r1, [sp, #148]	; 0x94
    bool confirm;
    int slot;
    int rc;

    const struct cbor_attr_t write_attr[] = {
   1b6ee:	2290      	movs	r2, #144	; 0x90
   1b6f0:	4668      	mov	r0, sp
   1b6f2:	f7f0 fccc 	bl	c08e <memset>
   1b6f6:	4b20      	ldr	r3, [pc, #128]	; (1b778 <imgmgr_state_write+0x94>)
   1b6f8:	9300      	str	r3, [sp, #0]
   1b6fa:	2303      	movs	r3, #3
   1b6fc:	f88d 3004 	strb.w	r3, [sp, #4]
   1b700:	ab26      	add	r3, sp, #152	; 0x98
   1b702:	9302      	str	r3, [sp, #8]
   1b704:	ab25      	add	r3, sp, #148	; 0x94
   1b706:	9303      	str	r3, [sp, #12]
   1b708:	2320      	movs	r3, #32
   1b70a:	930a      	str	r3, [sp, #40]	; 0x28
   1b70c:	4b1b      	ldr	r3, [pc, #108]	; (1b77c <imgmgr_state_write+0x98>)
   1b70e:	930c      	str	r3, [sp, #48]	; 0x30
   1b710:	2305      	movs	r3, #5
   1b712:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1b716:	f10d 0393 	add.w	r3, sp, #147	; 0x93
   1b71a:	930e      	str	r3, [sp, #56]	; 0x38
            .dflt.boolean = false,
        },
        [2] = { 0 },
    };

    rc = cbor_read_object(&cb->it, write_attr);
   1b71c:	4669      	mov	r1, sp
   1b71e:	f104 001c 	add.w	r0, r4, #28
   1b722:	f7f5 ff3d 	bl	115a0 <cbor_read_object>
    if (rc != 0) {
   1b726:	bb10      	cbnz	r0, 1b76e <imgmgr_state_write+0x8a>
   1b728:	4603      	mov	r3, r0
        return MGMT_ERR_EINVAL;
    }

    /* Determine which slot is being operated on. */
    if (hash_len == 0) {
   1b72a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1b72c:	b97a      	cbnz	r2, 1b74e <imgmgr_state_write+0x6a>
        if (confirm) {
   1b72e:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   1b732:	b152      	cbz	r2, 1b74a <imgmgr_state_write+0x66>
        if (slot < 0) {
            return MGMT_ERR_EINVAL;
        }
    }

    if (slot == 0 && confirm) {
   1b734:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   1b738:	b992      	cbnz	r2, 1b760 <imgmgr_state_write+0x7c>
        /* Confirm current setup. */
        rc = imgmgr_state_confirm();
    } else {
        rc = imgmgr_state_set_pending(slot, confirm);
   1b73a:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
   1b73e:	4618      	mov	r0, r3
   1b740:	f7ff fe75 	bl	1b42e <imgmgr_state_set_pending>
    }
    if (rc != 0) {
   1b744:	b178      	cbz	r0, 1b766 <imgmgr_state_write+0x82>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1b746:	b02e      	add	sp, #184	; 0xb8
   1b748:	bd10      	pop	{r4, pc}
            return MGMT_ERR_EINVAL;
   1b74a:	2003      	movs	r0, #3
   1b74c:	e7fb      	b.n	1b746 <imgmgr_state_write+0x62>
        slot = imgr_find_by_hash(hash, NULL);
   1b74e:	2100      	movs	r1, #0
   1b750:	a826      	add	r0, sp, #152	; 0x98
   1b752:	f7ff fb0b 	bl	1ad6c <imgr_find_by_hash>
        if (slot < 0) {
   1b756:	1e03      	subs	r3, r0, #0
   1b758:	db0b      	blt.n	1b772 <imgmgr_state_write+0x8e>
    if (slot == 0 && confirm) {
   1b75a:	2b00      	cmp	r3, #0
   1b75c:	d1ed      	bne.n	1b73a <imgmgr_state_write+0x56>
   1b75e:	e7e9      	b.n	1b734 <imgmgr_state_write+0x50>
        rc = imgmgr_state_confirm();
   1b760:	f7ff febd 	bl	1b4de <imgmgr_state_confirm>
   1b764:	e7ee      	b.n	1b744 <imgmgr_state_write+0x60>
    rc = imgmgr_state_read(cb);
   1b766:	4620      	mov	r0, r4
   1b768:	f7ff fede 	bl	1b528 <imgmgr_state_read>
    if (rc != 0) {
   1b76c:	e7eb      	b.n	1b746 <imgmgr_state_write+0x62>
        return MGMT_ERR_EINVAL;
   1b76e:	2003      	movs	r0, #3
   1b770:	e7e9      	b.n	1b746 <imgmgr_state_write+0x62>
            return MGMT_ERR_EINVAL;
   1b772:	2003      	movs	r0, #3
   1b774:	e7e7      	b.n	1b746 <imgmgr_state_write+0x62>
   1b776:	bf00      	nop
   1b778:	000238a8 	.word	0x000238a8
   1b77c:	000238f0 	.word	0x000238f0

0001b780 <imgr_ver_str>:
    return 0;
}

int
imgr_ver_str(struct image_version *ver, char *dst)
{
   1b780:	b500      	push	{lr}
   1b782:	b083      	sub	sp, #12
   1b784:	4602      	mov	r2, r0
   1b786:	4608      	mov	r0, r1
    if (ver->iv_build_num) {
   1b788:	6853      	ldr	r3, [r2, #4]
   1b78a:	b153      	cbz	r3, 1b7a2 <imgr_ver_str+0x22>
        return sprintf(dst, "%u.%u.%u.%lu",
          ver->iv_major, ver->iv_minor, ver->iv_revision,
   1b78c:	8851      	ldrh	r1, [r2, #2]
        return sprintf(dst, "%u.%u.%u.%lu",
   1b78e:	9301      	str	r3, [sp, #4]
   1b790:	9100      	str	r1, [sp, #0]
   1b792:	7853      	ldrb	r3, [r2, #1]
   1b794:	7812      	ldrb	r2, [r2, #0]
   1b796:	4907      	ldr	r1, [pc, #28]	; (1b7b4 <imgr_ver_str+0x34>)
   1b798:	f7ff f8ca 	bl	1a930 <sprintf>
          (unsigned long)ver->iv_build_num);
    } else {
        return sprintf(dst, "%u.%u.%u",
          ver->iv_major, ver->iv_minor, ver->iv_revision);
    }
}
   1b79c:	b003      	add	sp, #12
   1b79e:	f85d fb04 	ldr.w	pc, [sp], #4
          ver->iv_major, ver->iv_minor, ver->iv_revision);
   1b7a2:	8853      	ldrh	r3, [r2, #2]
        return sprintf(dst, "%u.%u.%u",
   1b7a4:	9300      	str	r3, [sp, #0]
   1b7a6:	7853      	ldrb	r3, [r2, #1]
   1b7a8:	7812      	ldrb	r2, [r2, #0]
   1b7aa:	4903      	ldr	r1, [pc, #12]	; (1b7b8 <imgr_ver_str+0x38>)
   1b7ac:	f7ff f8c0 	bl	1a930 <sprintf>
   1b7b0:	e7f4      	b.n	1b79c <imgr_ver_str+0x1c>
   1b7b2:	bf00      	nop
   1b7b4:	000238f8 	.word	0x000238f8
   1b7b8:	00023908 	.word	0x00023908

0001b7bc <mgmt_group_list_lock>:
static STAILQ_HEAD(, mgmt_group) mgmt_group_list =
    STAILQ_HEAD_INITIALIZER(mgmt_group_list);

static int
mgmt_group_list_lock(void)
{
   1b7bc:	b508      	push	{r3, lr}
    int rc;

    if (!os_started()) {
   1b7be:	f7ed fc83 	bl	90c8 <os_started>
   1b7c2:	b900      	cbnz	r0, 1b7c6 <mgmt_group_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1b7c4:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&mgmt_group_lock, OS_WAIT_FOREVER);
   1b7c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b7ca:	4802      	ldr	r0, [pc, #8]	; (1b7d4 <mgmt_group_list_lock+0x18>)
   1b7cc:	f7ef f926 	bl	aa1c <os_mutex_pend>
    if (rc != 0) {
   1b7d0:	e7f8      	b.n	1b7c4 <mgmt_group_list_lock+0x8>
   1b7d2:	bf00      	nop
   1b7d4:	200067f4 	.word	0x200067f4

0001b7d8 <mgmt_group_list_unlock>:

int
mgmt_group_list_unlock(void)
{
   1b7d8:	b508      	push	{r3, lr}
    int rc;

    if (!os_started()) {
   1b7da:	f7ed fc75 	bl	90c8 <os_started>
   1b7de:	b900      	cbnz	r0, 1b7e2 <mgmt_group_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1b7e0:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&mgmt_group_lock);
   1b7e2:	4802      	ldr	r0, [pc, #8]	; (1b7ec <mgmt_group_list_unlock+0x14>)
   1b7e4:	f7ef f8be 	bl	a964 <os_mutex_release>
    if (rc != 0) {
   1b7e8:	e7fa      	b.n	1b7e0 <mgmt_group_list_unlock+0x8>
   1b7ea:	bf00      	nop
   1b7ec:	200067f4 	.word	0x200067f4

0001b7f0 <mgmt_find_group>:
    return (rc);
}

static struct mgmt_group *
mgmt_find_group(uint16_t group_id)
{
   1b7f0:	b538      	push	{r3, r4, r5, lr}
   1b7f2:	4605      	mov	r5, r0
    struct mgmt_group *group;
    int rc;

    group = NULL;

    rc = mgmt_group_list_lock();
   1b7f4:	f7ff ffe2 	bl	1b7bc <mgmt_group_list_lock>
    if (rc != 0) {
   1b7f8:	b960      	cbnz	r0, 1b814 <mgmt_find_group+0x24>
        goto err;
    }

    STAILQ_FOREACH(group, &mgmt_group_list, mg_next) {
   1b7fa:	4b08      	ldr	r3, [pc, #32]	; (1b81c <mgmt_find_group+0x2c>)
   1b7fc:	681c      	ldr	r4, [r3, #0]
   1b7fe:	b124      	cbz	r4, 1b80a <mgmt_find_group+0x1a>
        if (group->mg_group_id == group_id) {
   1b800:	88e3      	ldrh	r3, [r4, #6]
   1b802:	42ab      	cmp	r3, r5
   1b804:	d001      	beq.n	1b80a <mgmt_find_group+0x1a>
    STAILQ_FOREACH(group, &mgmt_group_list, mg_next) {
   1b806:	68a4      	ldr	r4, [r4, #8]
   1b808:	e7f9      	b.n	1b7fe <mgmt_find_group+0xe>
            break;
        }
    }

    rc = mgmt_group_list_unlock();
   1b80a:	f7ff ffe5 	bl	1b7d8 <mgmt_group_list_unlock>
    if (rc != 0) {
   1b80e:	b918      	cbnz	r0, 1b818 <mgmt_find_group+0x28>
    }

    return (group);
err:
    return (NULL);
}
   1b810:	4620      	mov	r0, r4
   1b812:	bd38      	pop	{r3, r4, r5, pc}
    return (NULL);
   1b814:	2400      	movs	r4, #0
   1b816:	e7fb      	b.n	1b810 <mgmt_find_group+0x20>
   1b818:	2400      	movs	r4, #0
   1b81a:	e7f9      	b.n	1b810 <mgmt_find_group+0x20>
   1b81c:	20002b64 	.word	0x20002b64

0001b820 <mgmt_group_register>:
{
   1b820:	b510      	push	{r4, lr}
   1b822:	4604      	mov	r4, r0
    rc = mgmt_group_list_lock();
   1b824:	f7ff ffca 	bl	1b7bc <mgmt_group_list_lock>
    if (rc != 0) {
   1b828:	b100      	cbz	r0, 1b82c <mgmt_group_register+0xc>
}
   1b82a:	bd10      	pop	{r4, pc}
    STAILQ_INSERT_TAIL(&mgmt_group_list, group, mg_next);
   1b82c:	60a0      	str	r0, [r4, #8]
   1b82e:	4b04      	ldr	r3, [pc, #16]	; (1b840 <mgmt_group_register+0x20>)
   1b830:	685a      	ldr	r2, [r3, #4]
   1b832:	6014      	str	r4, [r2, #0]
   1b834:	3408      	adds	r4, #8
   1b836:	605c      	str	r4, [r3, #4]
    rc = mgmt_group_list_unlock();
   1b838:	f7ff ffce 	bl	1b7d8 <mgmt_group_list_unlock>
    if (rc != 0) {
   1b83c:	e7f5      	b.n	1b82a <mgmt_group_register+0xa>
   1b83e:	bf00      	nop
   1b840:	20002b64 	.word	0x20002b64

0001b844 <mgmt_find_handler>:

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t handler_id)
{
   1b844:	b510      	push	{r4, lr}
   1b846:	460c      	mov	r4, r1
    struct mgmt_group *group;
    const struct mgmt_handler *handler;

    group = mgmt_find_group(group_id);
   1b848:	f7ff ffd2 	bl	1b7f0 <mgmt_find_group>
    if (!group) {
   1b84c:	4603      	mov	r3, r0
   1b84e:	b128      	cbz	r0, 1b85c <mgmt_find_handler+0x18>
        goto err;
    }

    if (handler_id >= group->mg_handlers_count) {
   1b850:	8882      	ldrh	r2, [r0, #4]
   1b852:	42a2      	cmp	r2, r4
   1b854:	d904      	bls.n	1b860 <mgmt_find_handler+0x1c>
        goto err;
    }

    handler = &group->mg_handlers[handler_id];
   1b856:	6803      	ldr	r3, [r0, #0]
   1b858:	eb03 03c4 	add.w	r3, r3, r4, lsl #3

    return (handler);
err:
    return (NULL);
}
   1b85c:	4618      	mov	r0, r3
   1b85e:	bd10      	pop	{r4, pc}
    return (NULL);
   1b860:	2300      	movs	r3, #0
   1b862:	e7fb      	b.n	1b85c <mgmt_find_handler+0x18>

0001b864 <mgmt_cbuf_setoerr>:

int
mgmt_cbuf_setoerr(struct mgmt_cbuf *cb, int errcode)
{
   1b864:	b538      	push	{r3, r4, r5, lr}
   1b866:	460d      	mov	r5, r1
    int rc;

    rc = cbor_encode_text_stringz(&cb->encoder, "rc");
   1b868:	f100 040c 	add.w	r4, r0, #12
   1b86c:	2202      	movs	r2, #2
   1b86e:	4906      	ldr	r1, [pc, #24]	; (1b888 <mgmt_cbuf_setoerr+0x24>)
   1b870:	4620      	mov	r0, r4
   1b872:	f7f6 f87c 	bl	1196e <cbor_encode_text_string>
    if (rc != 0) {
   1b876:	b100      	cbz	r0, 1b87a <mgmt_cbuf_setoerr+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1b878:	bd38      	pop	{r3, r4, r5, pc}
    rc = cbor_encode_int(&cb->encoder, errcode);
   1b87a:	462a      	mov	r2, r5
   1b87c:	17eb      	asrs	r3, r5, #31
   1b87e:	4620      	mov	r0, r4
   1b880:	f7f5 fffa 	bl	11878 <cbor_encode_int>
    if (rc != 0) {
   1b884:	e7f8      	b.n	1b878 <mgmt_cbuf_setoerr+0x14>
   1b886:	bf00      	nop
   1b888:	000222a4 	.word	0x000222a4

0001b88c <nmgr_rsp_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing response fragment.
 */
static struct os_mbuf *
nmgr_rsp_frag_alloc(uint16_t frag_size, void *arg)
{
   1b88c:	b538      	push	{r3, r4, r5, lr}
   1b88e:	460c      	mov	r4, r1
    /* We need to duplicate the user header from the source response, as that
     * is where transport-specific information is stored.
     */
    src_rsp = arg;

    frag = os_msys_get_pkthdr(frag_size, OS_MBUF_USRHDR_LEN(src_rsp));
   1b890:	7949      	ldrb	r1, [r1, #5]
   1b892:	3908      	subs	r1, #8
   1b894:	b289      	uxth	r1, r1
   1b896:	f7ee f849 	bl	992c <os_msys_get_pkthdr>
    if (frag != NULL) {
   1b89a:	4605      	mov	r5, r0
   1b89c:	b130      	cbz	r0, 1b8ac <nmgr_rsp_frag_alloc+0x20>
        /* Copy the user header from the response into the fragment mbuf. */
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
               OS_MBUF_USRHDR_LEN(src_rsp));
   1b89e:	7962      	ldrb	r2, [r4, #5]
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
   1b8a0:	3a08      	subs	r2, #8
   1b8a2:	f104 0118 	add.w	r1, r4, #24
   1b8a6:	3018      	adds	r0, #24
   1b8a8:	f7f0 fbe4 	bl	c074 <memcpy>
    }

    return frag;
}
   1b8ac:	4628      	mov	r0, r5
   1b8ae:	bd38      	pop	{r3, r4, r5, pc}

0001b8b0 <nmgr_init_rsp>:
{
   1b8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b8b2:	4606      	mov	r6, r0
   1b8b4:	460d      	mov	r5, r1
    hdr = (struct nmgr_hdr *) os_mbuf_extend(m, sizeof(struct nmgr_hdr));
   1b8b6:	2108      	movs	r1, #8
   1b8b8:	f7ef f81c 	bl	a8f4 <os_mbuf_extend>
    if (!hdr) {
   1b8bc:	4604      	mov	r4, r0
   1b8be:	b318      	cbz	r0, 1b908 <nmgr_init_rsp+0x58>
    memcpy(hdr, src, sizeof(*hdr));
   1b8c0:	682a      	ldr	r2, [r5, #0]
   1b8c2:	686b      	ldr	r3, [r5, #4]
   1b8c4:	6002      	str	r2, [r0, #0]
   1b8c6:	6043      	str	r3, [r0, #4]
    hdr->nh_len = 0;
   1b8c8:	2300      	movs	r3, #0
   1b8ca:	8043      	strh	r3, [r0, #2]
    hdr->nh_flags = 0;
   1b8cc:	7043      	strb	r3, [r0, #1]
    hdr->nh_op = (src->nh_op == NMGR_OP_READ) ? NMGR_OP_READ_RSP :
   1b8ce:	782b      	ldrb	r3, [r5, #0]
   1b8d0:	f013 0f07 	tst.w	r3, #7
   1b8d4:	d11a      	bne.n	1b90c <nmgr_init_rsp+0x5c>
   1b8d6:	2201      	movs	r2, #1
   1b8d8:	7823      	ldrb	r3, [r4, #0]
   1b8da:	f362 0302 	bfi	r3, r2, #0, #3
   1b8de:	7023      	strb	r3, [r4, #0]
    hdr->nh_group = src->nh_group;
   1b8e0:	88ab      	ldrh	r3, [r5, #4]
   1b8e2:	80a3      	strh	r3, [r4, #4]
    hdr->nh_seq = src->nh_seq;
   1b8e4:	79ab      	ldrb	r3, [r5, #6]
   1b8e6:	71a3      	strb	r3, [r4, #6]
    hdr->nh_id = src->nh_id;
   1b8e8:	79eb      	ldrb	r3, [r5, #7]
   1b8ea:	71e3      	strb	r3, [r4, #7]
    cbor_mbuf_writer_init(&nmgr_task_cbuf.writer, m);
   1b8ec:	4d08      	ldr	r5, [pc, #32]	; (1b910 <nmgr_init_rsp+0x60>)
   1b8ee:	f105 072c 	add.w	r7, r5, #44	; 0x2c
   1b8f2:	4631      	mov	r1, r6
   1b8f4:	4638      	mov	r0, r7
   1b8f6:	f7f5 fee5 	bl	116c4 <cbor_mbuf_writer_init>
    cbor_encoder_init(&nmgr_task_cbuf.n_b.encoder, &nmgr_task_cbuf.writer.enc, 0);
   1b8fa:	2200      	movs	r2, #0
   1b8fc:	4639      	mov	r1, r7
   1b8fe:	f105 000c 	add.w	r0, r5, #12
   1b902:	f7f5 ff74 	bl	117ee <cbor_encoder_init>
    nmgr_task_cbuf.n_out_m = m;
   1b906:	65ee      	str	r6, [r5, #92]	; 0x5c
}
   1b908:	4620      	mov	r0, r4
   1b90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdr->nh_op = (src->nh_op == NMGR_OP_READ) ? NMGR_OP_READ_RSP :
   1b90c:	2203      	movs	r2, #3
   1b90e:	e7e3      	b.n	1b8d8 <nmgr_init_rsp+0x28>
   1b910:	20006804 	.word	0x20006804

0001b914 <nmgr_rsp_tx>:
 * reason for this is to allow the caller to reuse the mbuf for an error
 * response.
 */
static int
nmgr_rsp_tx(struct nmgr_transport *nt, struct os_mbuf **rsp, uint16_t mtu)
{
   1b914:	b570      	push	{r4, r5, r6, lr}
   1b916:	4605      	mov	r5, r0
   1b918:	460c      	mov	r4, r1
   1b91a:	4616      	mov	r6, r2
    struct os_mbuf *frag;
    int rc;

    while (*rsp != NULL) {
   1b91c:	6823      	ldr	r3, [r4, #0]
   1b91e:	b16b      	cbz	r3, 1b93c <nmgr_rsp_tx+0x28>
        frag = mem_split_frag(rsp, mtu, nmgr_rsp_frag_alloc, *rsp);
   1b920:	4a08      	ldr	r2, [pc, #32]	; (1b944 <nmgr_rsp_tx+0x30>)
   1b922:	4631      	mov	r1, r6
   1b924:	4620      	mov	r0, r4
   1b926:	f7f1 f857 	bl	c9d8 <mem_split_frag>
        if (frag == NULL) {
   1b92a:	4601      	mov	r1, r0
   1b92c:	b140      	cbz	r0, 1b940 <nmgr_rsp_tx+0x2c>
            return MGMT_ERR_ENOMEM;
        }

        rc = nt->nt_output(nt, frag);
   1b92e:	69ab      	ldr	r3, [r5, #24]
   1b930:	4628      	mov	r0, r5
   1b932:	4798      	blx	r3
        if (rc != 0) {
   1b934:	2800      	cmp	r0, #0
   1b936:	d0f1      	beq.n	1b91c <nmgr_rsp_tx+0x8>
            /* Output function already freed mbuf. */
            return MGMT_ERR_EUNKNOWN;
   1b938:	2001      	movs	r0, #1
   1b93a:	e000      	b.n	1b93e <nmgr_rsp_tx+0x2a>
        }
    }

    return MGMT_ERR_EOK;
   1b93c:	2000      	movs	r0, #0
}
   1b93e:	bd70      	pop	{r4, r5, r6, pc}
            return MGMT_ERR_ENOMEM;
   1b940:	2002      	movs	r0, #2
   1b942:	e7fc      	b.n	1b93e <nmgr_rsp_tx+0x2a>
   1b944:	0001b88d 	.word	0x0001b88d

0001b948 <nmgr_send_err_rsp>:
{
   1b948:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b94a:	b085      	sub	sp, #20
   1b94c:	4606      	mov	r6, r0
   1b94e:	460c      	mov	r4, r1
   1b950:	461d      	mov	r5, r3
    hdr = nmgr_init_rsp(m, hdr);
   1b952:	4611      	mov	r1, r2
   1b954:	4620      	mov	r0, r4
   1b956:	f7ff ffab 	bl	1b8b0 <nmgr_init_rsp>
    if (!hdr) {
   1b95a:	b148      	cbz	r0, 1b970 <nmgr_send_err_rsp+0x28>
   1b95c:	4607      	mov	r7, r0
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &map,
   1b95e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b962:	4669      	mov	r1, sp
   1b964:	4811      	ldr	r0, [pc, #68]	; (1b9ac <nmgr_send_err_rsp+0x64>)
   1b966:	f7f6 f80e 	bl	11986 <cbor_encoder_create_map>
    if (rc != 0) {
   1b96a:	b128      	cbz	r0, 1b978 <nmgr_send_err_rsp+0x30>
}
   1b96c:	b005      	add	sp, #20
   1b96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        os_mbuf_free_chain(m);
   1b970:	4620      	mov	r0, r4
   1b972:	f7ee fe44 	bl	a5fe <os_mbuf_free_chain>
        return;
   1b976:	e7f9      	b.n	1b96c <nmgr_send_err_rsp+0x24>
    rc = mgmt_cbuf_setoerr(&nmgr_task_cbuf.n_b, status);
   1b978:	4629      	mov	r1, r5
   1b97a:	480d      	ldr	r0, [pc, #52]	; (1b9b0 <nmgr_send_err_rsp+0x68>)
   1b97c:	f7ff ff72 	bl	1b864 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   1b980:	2800      	cmp	r0, #0
   1b982:	d1f3      	bne.n	1b96c <nmgr_send_err_rsp+0x24>
    rc = cbor_encoder_close_container(&nmgr_task_cbuf.n_b.encoder, &map);
   1b984:	4669      	mov	r1, sp
   1b986:	4809      	ldr	r0, [pc, #36]	; (1b9ac <nmgr_send_err_rsp+0x64>)
   1b988:	f7f6 f80b 	bl	119a2 <cbor_encoder_close_container>
    if (rc != 0) {
   1b98c:	2800      	cmp	r0, #0
   1b98e:	d1ed      	bne.n	1b96c <nmgr_send_err_rsp+0x24>
{   return encoder->writer->bytes_written; }
   1b990:	4907      	ldr	r1, [pc, #28]	; (1b9b0 <nmgr_send_err_rsp+0x68>)
   1b992:	68cb      	ldr	r3, [r1, #12]
   1b994:	685a      	ldr	r2, [r3, #4]
        htons(cbor_encode_bytes_written(&nmgr_task_cbuf.n_b.encoder));
   1b996:	0213      	lsls	r3, r2, #8
   1b998:	b29b      	uxth	r3, r3
   1b99a:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1b99e:	4313      	orrs	r3, r2
    hdr->nh_len =
   1b9a0:	807b      	strh	r3, [r7, #2]
    nt->nt_output(nt, nmgr_task_cbuf.n_out_m);
   1b9a2:	69b3      	ldr	r3, [r6, #24]
   1b9a4:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
   1b9a6:	4630      	mov	r0, r6
   1b9a8:	4798      	blx	r3
   1b9aa:	e7df      	b.n	1b96c <nmgr_send_err_rsp+0x24>
   1b9ac:	20006810 	.word	0x20006810
   1b9b0:	20006804 	.word	0x20006804

0001b9b4 <nmgr_handle_req>:

static void
nmgr_handle_req(struct nmgr_transport *nt, struct os_mbuf *req)
{
   1b9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b9b8:	b088      	sub	sp, #32
   1b9ba:	4606      	mov	r6, r0
   1b9bc:	460c      	mov	r4, r1
    uint16_t mtu;
    int rc;

    rsp_hdr = NULL;

    rsp = os_msys_get_pkthdr(512, OS_MBUF_USRHDR_LEN(req));
   1b9be:	7949      	ldrb	r1, [r1, #5]
   1b9c0:	3908      	subs	r1, #8
   1b9c2:	b289      	uxth	r1, r1
   1b9c4:	f44f 7000 	mov.w	r0, #512	; 0x200
   1b9c8:	f7ed ffb0 	bl	992c <os_msys_get_pkthdr>
   1b9cc:	9007      	str	r0, [sp, #28]
    if (!rsp) {
   1b9ce:	b168      	cbz	r0, 1b9ec <nmgr_handle_req+0x38>
        rsp = req;
        req = NULL;
        goto err;
    }

    mtu = nt->nt_get_mtu(req);
   1b9d0:	69f3      	ldr	r3, [r6, #28]
   1b9d2:	4620      	mov	r0, r4
   1b9d4:	4798      	blx	r3
    if (mtu == 0) {
   1b9d6:	4605      	mov	r5, r0
   1b9d8:	bb08      	cbnz	r0, 1ba1e <nmgr_handle_req+0x6a>
    nmgr_send_err_rsp(nt, rsp, &hdr, rc);
    os_mbuf_free_chain(req);
    return;

err_norsp:
    os_mbuf_free_chain(rsp);
   1b9da:	9807      	ldr	r0, [sp, #28]
   1b9dc:	f7ee fe0f 	bl	a5fe <os_mbuf_free_chain>
    os_mbuf_free_chain(req);
   1b9e0:	4620      	mov	r0, r4
   1b9e2:	f7ee fe0c 	bl	a5fe <os_mbuf_free_chain>
    return;
}
   1b9e6:	b008      	add	sp, #32
   1b9e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b9ec:	4605      	mov	r5, r0
        rc = os_mbuf_copydata(req, 0, sizeof(hdr), &hdr);
   1b9ee:	ab01      	add	r3, sp, #4
   1b9f0:	2208      	movs	r2, #8
   1b9f2:	2100      	movs	r1, #0
   1b9f4:	4620      	mov	r0, r4
   1b9f6:	f7ee fe78 	bl	a6ea <os_mbuf_copydata>
        if (rc < 0) {
   1b9fa:	1e07      	subs	r7, r0, #0
   1b9fc:	dbed      	blt.n	1b9da <nmgr_handle_req+0x26>
        rsp = req;
   1b9fe:	9407      	str	r4, [sp, #28]
        req = NULL;
   1ba00:	462c      	mov	r4, r5
    os_mbuf_adj(rsp, OS_MBUF_PKTLEN(rsp));
   1ba02:	9807      	ldr	r0, [sp, #28]
   1ba04:	8a01      	ldrh	r1, [r0, #16]
   1ba06:	f7ee fe9d 	bl	a744 <os_mbuf_adj>
    nmgr_send_err_rsp(nt, rsp, &hdr, rc);
   1ba0a:	463b      	mov	r3, r7
   1ba0c:	aa01      	add	r2, sp, #4
   1ba0e:	9907      	ldr	r1, [sp, #28]
   1ba10:	4630      	mov	r0, r6
   1ba12:	f7ff ff99 	bl	1b948 <nmgr_send_err_rsp>
    os_mbuf_free_chain(req);
   1ba16:	4620      	mov	r0, r4
   1ba18:	f7ee fdf1 	bl	a5fe <os_mbuf_free_chain>
    return;
   1ba1c:	e7e3      	b.n	1b9e6 <nmgr_handle_req+0x32>
    memcpy(OS_MBUF_USRHDR(rsp), OS_MBUF_USRHDR(req), OS_MBUF_USRHDR_LEN(req));
   1ba1e:	7962      	ldrb	r2, [r4, #5]
   1ba20:	3a08      	subs	r2, #8
   1ba22:	f104 0118 	add.w	r1, r4, #24
   1ba26:	9807      	ldr	r0, [sp, #28]
   1ba28:	3018      	adds	r0, #24
   1ba2a:	f7f0 fb23 	bl	c074 <memcpy>
    rc = os_mbuf_copydata(req, 0, sizeof(hdr), &hdr);
   1ba2e:	ab01      	add	r3, sp, #4
   1ba30:	2208      	movs	r2, #8
   1ba32:	2100      	movs	r1, #0
   1ba34:	4620      	mov	r0, r4
   1ba36:	f7ee fe58 	bl	a6ea <os_mbuf_copydata>
    if (rc < 0) {
   1ba3a:	2800      	cmp	r0, #0
   1ba3c:	dbcd      	blt.n	1b9da <nmgr_handle_req+0x26>
    hdr.nh_len = ntohs(hdr.nh_len);
   1ba3e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1ba42:	0213      	lsls	r3, r2, #8
   1ba44:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1ba48:	f8ad 3006 	strh.w	r3, [sp, #6]
    handler = mgmt_find_handler(ntohs(hdr.nh_group), hdr.nh_id);
   1ba4c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1ba50:	0218      	lsls	r0, r3, #8
   1ba52:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   1ba56:	f89d 100b 	ldrb.w	r1, [sp, #11]
   1ba5a:	b280      	uxth	r0, r0
   1ba5c:	f7ff fef2 	bl	1b844 <mgmt_find_handler>
    if (!handler) {
   1ba60:	4680      	mov	r8, r0
   1ba62:	2800      	cmp	r0, #0
   1ba64:	d062      	beq.n	1bb2c <nmgr_handle_req+0x178>
    rsp_hdr = nmgr_init_rsp(rsp, &hdr);
   1ba66:	a901      	add	r1, sp, #4
   1ba68:	9807      	ldr	r0, [sp, #28]
   1ba6a:	f7ff ff21 	bl	1b8b0 <nmgr_init_rsp>
    if (!rsp_hdr) {
   1ba6e:	4681      	mov	r9, r0
   1ba70:	2800      	cmp	r0, #0
   1ba72:	d0b2      	beq.n	1b9da <nmgr_handle_req+0x26>
    cbor_mbuf_reader_init(&nmgr_task_cbuf.reader, req, sizeof(hdr));
   1ba74:	4f2f      	ldr	r7, [pc, #188]	; (1bb34 <nmgr_handle_req+0x180>)
   1ba76:	f107 0a38 	add.w	sl, r7, #56	; 0x38
   1ba7a:	2208      	movs	r2, #8
   1ba7c:	4621      	mov	r1, r4
   1ba7e:	4650      	mov	r0, sl
   1ba80:	f7f5 fde8 	bl	11654 <cbor_mbuf_reader_init>
    cbor_parser_init(&nmgr_task_cbuf.reader.r, 0,
   1ba84:	f107 031c 	add.w	r3, r7, #28
   1ba88:	463a      	mov	r2, r7
   1ba8a:	2100      	movs	r1, #0
   1ba8c:	4650      	mov	r0, sl
   1ba8e:	f7f6 fa18 	bl	11ec2 <cbor_parser_init>
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &payload_enc,
   1ba92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ba96:	a903      	add	r1, sp, #12
   1ba98:	f107 000c 	add.w	r0, r7, #12
   1ba9c:	f7f5 ff73 	bl	11986 <cbor_encoder_create_map>
    if (rc != 0) {
   1baa0:	2800      	cmp	r0, #0
   1baa2:	d145      	bne.n	1bb30 <nmgr_handle_req+0x17c>
    if (hdr.nh_op == NMGR_OP_READ) {
   1baa4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1baa8:	f013 0307 	ands.w	r3, r3, #7
   1baac:	d10e      	bne.n	1bacc <nmgr_handle_req+0x118>
        if (handler->mh_read) {
   1baae:	f8d8 3000 	ldr.w	r3, [r8]
   1bab2:	b1a3      	cbz	r3, 1bade <nmgr_handle_req+0x12a>
            rc = handler->mh_read(&nmgr_task_cbuf.n_b);
   1bab4:	4638      	mov	r0, r7
   1bab6:	4798      	blx	r3
   1bab8:	4607      	mov	r7, r0
    if (rc != 0) {
   1baba:	2f00      	cmp	r7, #0
   1babc:	d1a1      	bne.n	1ba02 <nmgr_handle_req+0x4e>
    rc = cbor_encoder_close_container(&nmgr_task_cbuf.n_b.encoder,
   1babe:	a903      	add	r1, sp, #12
   1bac0:	481d      	ldr	r0, [pc, #116]	; (1bb38 <nmgr_handle_req+0x184>)
   1bac2:	f7f5 ff6e 	bl	119a2 <cbor_encoder_close_container>
    if (rc != 0) {
   1bac6:	b180      	cbz	r0, 1baea <nmgr_handle_req+0x136>
        rc = MGMT_ERR_ENOMEM;
   1bac8:	2702      	movs	r7, #2
   1baca:	e79a      	b.n	1ba02 <nmgr_handle_req+0x4e>
    } else if (hdr.nh_op == NMGR_OP_WRITE) {
   1bacc:	2b02      	cmp	r3, #2
   1bace:	d108      	bne.n	1bae2 <nmgr_handle_req+0x12e>
        if (handler->mh_write) {
   1bad0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1bad4:	b13b      	cbz	r3, 1bae6 <nmgr_handle_req+0x132>
            rc = handler->mh_write(&nmgr_task_cbuf.n_b);
   1bad6:	4817      	ldr	r0, [pc, #92]	; (1bb34 <nmgr_handle_req+0x180>)
   1bad8:	4798      	blx	r3
   1bada:	4607      	mov	r7, r0
   1badc:	e7ed      	b.n	1baba <nmgr_handle_req+0x106>
            rc = MGMT_ERR_ENOENT;
   1bade:	2705      	movs	r7, #5
   1bae0:	e78f      	b.n	1ba02 <nmgr_handle_req+0x4e>
        rc = MGMT_ERR_EINVAL;
   1bae2:	2703      	movs	r7, #3
   1bae4:	e78d      	b.n	1ba02 <nmgr_handle_req+0x4e>
            rc = MGMT_ERR_ENOENT;
   1bae6:	2705      	movs	r7, #5
        goto err;
   1bae8:	e78b      	b.n	1ba02 <nmgr_handle_req+0x4e>
   1baea:	4b12      	ldr	r3, [pc, #72]	; (1bb34 <nmgr_handle_req+0x180>)
   1baec:	68db      	ldr	r3, [r3, #12]
   1baee:	685b      	ldr	r3, [r3, #4]
    rsp_hdr->nh_len += cbor_encode_bytes_written(&nmgr_task_cbuf.n_b.encoder);
   1baf0:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1baf4:	4413      	add	r3, r2
   1baf6:	b29b      	uxth	r3, r3
   1baf8:	f8a9 3002 	strh.w	r3, [r9, #2]
    rsp_hdr->nh_len = htons(rsp_hdr->nh_len);
   1bafc:	021a      	lsls	r2, r3, #8
   1bafe:	ea42 2313 	orr.w	r3, r2, r3, lsr #8
   1bb02:	f8a9 3002 	strh.w	r3, [r9, #2]
    rc = nmgr_rsp_tx(nt, &rsp, mtu);
   1bb06:	462a      	mov	r2, r5
   1bb08:	a907      	add	r1, sp, #28
   1bb0a:	4630      	mov	r0, r6
   1bb0c:	f7ff ff02 	bl	1b914 <nmgr_rsp_tx>
    if (rc) {
   1bb10:	4607      	mov	r7, r0
   1bb12:	b120      	cbz	r0, 1bb1e <nmgr_handle_req+0x16a>
        if (rsp == NULL) {
   1bb14:	9b07      	ldr	r3, [sp, #28]
   1bb16:	2b00      	cmp	r3, #0
   1bb18:	f47f af73 	bne.w	1ba02 <nmgr_handle_req+0x4e>
   1bb1c:	e75d      	b.n	1b9da <nmgr_handle_req+0x26>
    os_mbuf_free_chain(rsp);
   1bb1e:	9807      	ldr	r0, [sp, #28]
   1bb20:	f7ee fd6d 	bl	a5fe <os_mbuf_free_chain>
    os_mbuf_free_chain(req);
   1bb24:	4620      	mov	r0, r4
   1bb26:	f7ee fd6a 	bl	a5fe <os_mbuf_free_chain>
    return;
   1bb2a:	e75c      	b.n	1b9e6 <nmgr_handle_req+0x32>
        rc = MGMT_ERR_ENOENT;
   1bb2c:	2705      	movs	r7, #5
   1bb2e:	e768      	b.n	1ba02 <nmgr_handle_req+0x4e>
        rc = MGMT_ERR_ENOMEM;
   1bb30:	2702      	movs	r7, #2
   1bb32:	e766      	b.n	1ba02 <nmgr_handle_req+0x4e>
   1bb34:	20006804 	.word	0x20006804
   1bb38:	20006810 	.word	0x20006810

0001bb3c <nmgr_process>:


static void
nmgr_process(struct nmgr_transport *nt)
{
   1bb3c:	b510      	push	{r4, lr}
   1bb3e:	4604      	mov	r4, r0
   1bb40:	e002      	b.n	1bb48 <nmgr_process+0xc>
        m = os_mqueue_get(&nt->nt_imq);
        if (!m) {
            break;
        }

        nmgr_handle_req(nt, m);
   1bb42:	4620      	mov	r0, r4
   1bb44:	f7ff ff36 	bl	1b9b4 <nmgr_handle_req>
        m = os_mqueue_get(&nt->nt_imq);
   1bb48:	4620      	mov	r0, r4
   1bb4a:	f7ee fcee 	bl	a52a <os_mqueue_get>
        if (!m) {
   1bb4e:	4601      	mov	r1, r0
   1bb50:	2800      	cmp	r0, #0
   1bb52:	d1f6      	bne.n	1bb42 <nmgr_process+0x6>
    }
}
   1bb54:	bd10      	pop	{r4, pc}

0001bb56 <nmgr_event_data_in>:

static void
nmgr_event_data_in(struct os_event *ev)
{
   1bb56:	b508      	push	{r3, lr}
    nmgr_process(ev->ev_arg);
   1bb58:	6880      	ldr	r0, [r0, #8]
   1bb5a:	f7ff ffef 	bl	1bb3c <nmgr_process>
}
   1bb5e:	bd08      	pop	{r3, pc}

0001bb60 <nmgr_cbuf_init>:
{
   1bb60:	b508      	push	{r3, lr}
    memset(njb, 0, sizeof(*njb));
   1bb62:	2260      	movs	r2, #96	; 0x60
   1bb64:	2100      	movs	r1, #0
   1bb66:	f7f0 fa92 	bl	c08e <memset>
}
   1bb6a:	2000      	movs	r0, #0
   1bb6c:	bd08      	pop	{r3, pc}
	...

0001bb70 <mgmt_evq_get>:
}
   1bb70:	4b01      	ldr	r3, [pc, #4]	; (1bb78 <mgmt_evq_get+0x8>)
   1bb72:	6818      	ldr	r0, [r3, #0]
   1bb74:	4770      	bx	lr
   1bb76:	bf00      	nop
   1bb78:	20006800 	.word	0x20006800

0001bb7c <mgmt_evq_set>:
    nmgr_evq = evq;
   1bb7c:	4b01      	ldr	r3, [pc, #4]	; (1bb84 <mgmt_evq_set+0x8>)
   1bb7e:	6018      	str	r0, [r3, #0]
}
   1bb80:	4770      	bx	lr
   1bb82:	bf00      	nop
   1bb84:	20006800 	.word	0x20006800

0001bb88 <nmgr_transport_init>:

int
nmgr_transport_init(struct nmgr_transport *nt,
        nmgr_transport_out_func_t output_func,
        nmgr_transport_get_mtu_func_t get_mtu_func)
{
   1bb88:	b508      	push	{r3, lr}
    int rc;

    nt->nt_output = output_func;
   1bb8a:	6181      	str	r1, [r0, #24]
    nt->nt_get_mtu = get_mtu_func;
   1bb8c:	61c2      	str	r2, [r0, #28]

    rc = os_mqueue_init(&nt->nt_imq, nmgr_event_data_in, nt);
   1bb8e:	4602      	mov	r2, r0
   1bb90:	4901      	ldr	r1, [pc, #4]	; (1bb98 <nmgr_transport_init+0x10>)
   1bb92:	f7ee fcbf 	bl	a514 <os_mqueue_init>
    }

    return (0);
err:
    return (rc);
}
   1bb96:	bd08      	pop	{r3, pc}
   1bb98:	0001bb57 	.word	0x0001bb57

0001bb9c <nmgr_rx_req>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
nmgr_rx_req(struct nmgr_transport *nt, struct os_mbuf *req)
{
   1bb9c:	b538      	push	{r3, r4, r5, lr}
   1bb9e:	4605      	mov	r5, r0
   1bba0:	460c      	mov	r4, r1
    int rc;

    rc = os_mqueue_put(&nt->nt_imq, mgmt_evq_get(), req);
   1bba2:	f7ff ffe5 	bl	1bb70 <mgmt_evq_get>
   1bba6:	4601      	mov	r1, r0
   1bba8:	4622      	mov	r2, r4
   1bbaa:	4628      	mov	r0, r5
   1bbac:	f7ee fcce 	bl	a54c <os_mqueue_put>
    if (rc != 0) {
   1bbb0:	4605      	mov	r5, r0
   1bbb2:	b908      	cbnz	r0, 1bbb8 <nmgr_rx_req+0x1c>
        os_mbuf_free_chain(req);
    }

    return rc;
}
   1bbb4:	4628      	mov	r0, r5
   1bbb6:	bd38      	pop	{r3, r4, r5, pc}
        os_mbuf_free_chain(req);
   1bbb8:	4620      	mov	r0, r4
   1bbba:	f7ee fd20 	bl	a5fe <os_mbuf_free_chain>
    return rc;
   1bbbe:	e7f9      	b.n	1bbb4 <nmgr_rx_req+0x18>

0001bbc0 <nmgr_pkg_init>:

void
nmgr_pkg_init(void)
{
   1bbc0:	b510      	push	{r4, lr}
   1bbc2:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1bbc4:	4b0d      	ldr	r3, [pc, #52]	; (1bbfc <nmgr_pkg_init+0x3c>)
   1bbc6:	781b      	ldrb	r3, [r3, #0]
   1bbc8:	b19b      	cbz	r3, 1bbf2 <nmgr_pkg_init+0x32>

    rc = nmgr_os_groups_register();
   1bbca:	f000 fa79 	bl	1c0c0 <nmgr_os_groups_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1bbce:	b138      	cbz	r0, 1bbe0 <nmgr_pkg_init+0x20>
   1bbd0:	2000      	movs	r0, #0
   1bbd2:	9000      	str	r0, [sp, #0]
   1bbd4:	4b0a      	ldr	r3, [pc, #40]	; (1bc00 <nmgr_pkg_init+0x40>)
   1bbd6:	681c      	ldr	r4, [r3, #0]
   1bbd8:	4603      	mov	r3, r0
   1bbda:	4602      	mov	r2, r0
   1bbdc:	4601      	mov	r1, r0
   1bbde:	47a0      	blx	r4

    nmgr_cbuf_init(&nmgr_task_cbuf);
   1bbe0:	4808      	ldr	r0, [pc, #32]	; (1bc04 <nmgr_pkg_init+0x44>)
   1bbe2:	f7ff ffbd 	bl	1bb60 <nmgr_cbuf_init>

    mgmt_evq_set(os_eventq_dflt_get());
   1bbe6:	f7ed fd89 	bl	96fc <os_eventq_dflt_get>
   1bbea:	f7ff ffc7 	bl	1bb7c <mgmt_evq_set>
}
   1bbee:	b002      	add	sp, #8
   1bbf0:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1bbf2:	461a      	mov	r2, r3
   1bbf4:	4619      	mov	r1, r3
   1bbf6:	4618      	mov	r0, r3
   1bbf8:	f7ed f9ac 	bl	8f54 <__assert_func>
   1bbfc:	200065ac 	.word	0x200065ac
   1bc00:	200001ec 	.word	0x200001ec
   1bc04:	20006804 	.word	0x20006804

0001bc08 <nmgr_reset>:
    os_reboot(HAL_RESET_REQUESTED);
}

static int
nmgr_reset(struct mgmt_cbuf *cb)
{
   1bc08:	b570      	push	{r4, r5, r6, lr}
   1bc0a:	b084      	sub	sp, #16
   1bc0c:	4605      	mov	r5, r0
#if MYNEWT_VAL(LOG_SOFT_RESET)
    struct log_reboot_info info;
#endif
    int rc;

    os_callout_init(&nmgr_reset_callout, mgmt_evq_get(), nmgr_reset_tmo, NULL);
   1bc0e:	f7ff ffaf 	bl	1bb70 <mgmt_evq_get>
   1bc12:	4601      	mov	r1, r0
   1bc14:	4e0e      	ldr	r6, [pc, #56]	; (1bc50 <nmgr_reset+0x48>)
   1bc16:	2300      	movs	r3, #0
   1bc18:	4a0e      	ldr	r2, [pc, #56]	; (1bc54 <nmgr_reset+0x4c>)
   1bc1a:	4630      	mov	r0, r6
   1bc1c:	f7ed fb20 	bl	9260 <os_callout_init>

#if MYNEWT_VAL(LOG_SOFT_RESET)
    info = (struct log_reboot_info) {
   1bc20:	2306      	movs	r3, #6
   1bc22:	f88d 3000 	strb.w	r3, [sp]
   1bc26:	2400      	movs	r4, #0
   1bc28:	9401      	str	r4, [sp, #4]
   1bc2a:	9402      	str	r4, [sp, #8]
   1bc2c:	9403      	str	r4, [sp, #12]
        .reason = HAL_RESET_REQUESTED,
        .file = NULL,
        .line = 0,
        .pc = 0,
    };
    log_reboot(&info);
   1bc2e:	4668      	mov	r0, sp
   1bc30:	f002 f8d0 	bl	1ddd4 <log_reboot>
#endif
    os_callout_reset(&nmgr_reset_callout, OS_TICKS_PER_SEC / 4);
   1bc34:	2120      	movs	r1, #32
   1bc36:	4630      	mov	r0, r6
   1bc38:	f7ed fb3e 	bl	92b8 <os_callout_reset>

    rc = mgmt_cbuf_setoerr(cb, 0);
   1bc3c:	4621      	mov	r1, r4
   1bc3e:	4628      	mov	r0, r5
   1bc40:	f7ff fe10 	bl	1b864 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   1bc44:	b908      	cbnz	r0, 1bc4a <nmgr_reset+0x42>
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   1bc46:	b004      	add	sp, #16
   1bc48:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_EUNKNOWN;
   1bc4a:	2001      	movs	r0, #1
   1bc4c:	e7fb      	b.n	1bc46 <nmgr_reset+0x3e>
   1bc4e:	bf00      	nop
   1bc50:	20006864 	.word	0x20006864
   1bc54:	0001bc59 	.word	0x0001bc59

0001bc58 <nmgr_reset_tmo>:
{
   1bc58:	b508      	push	{r3, lr}
    os_reboot(HAL_RESET_REQUESTED);
   1bc5a:	2006      	movs	r0, #6
   1bc5c:	f7ed fadb 	bl	9216 <os_reboot>
}
   1bc60:	bd08      	pop	{r3, pc}
	...

0001bc64 <nmgr_datetime_set>:
{
   1bc64:	b510      	push	{r4, lr}
   1bc66:	b0a6      	sub	sp, #152	; 0x98
   1bc68:	4604      	mov	r4, r0
    const struct cbor_attr_t datetime_write_attr[] = {
   1bc6a:	2260      	movs	r2, #96	; 0x60
   1bc6c:	2100      	movs	r1, #0
   1bc6e:	4668      	mov	r0, sp
   1bc70:	f7f0 fa0d 	bl	c08e <memset>
   1bc74:	4b12      	ldr	r3, [pc, #72]	; (1bcc0 <nmgr_datetime_set+0x5c>)
   1bc76:	9300      	str	r3, [sp, #0]
   1bc78:	2304      	movs	r3, #4
   1bc7a:	f88d 3004 	strb.w	r3, [sp, #4]
   1bc7e:	ab18      	add	r3, sp, #96	; 0x60
   1bc80:	9302      	str	r3, [sp, #8]
   1bc82:	2321      	movs	r3, #33	; 0x21
   1bc84:	930a      	str	r3, [sp, #40]	; 0x28
    rc = cbor_read_object(&cb->it, datetime_write_attr);
   1bc86:	4669      	mov	r1, sp
   1bc88:	f104 001c 	add.w	r0, r4, #28
   1bc8c:	f7f5 fc88 	bl	115a0 <cbor_read_object>
    if (rc) {
   1bc90:	b978      	cbnz	r0, 1bcb2 <nmgr_datetime_set+0x4e>
    rc = datetime_parse(buf, &tv, &tz);
   1bc92:	aa21      	add	r2, sp, #132	; 0x84
   1bc94:	a922      	add	r1, sp, #136	; 0x88
   1bc96:	a818      	add	r0, sp, #96	; 0x60
   1bc98:	f7f4 fdec 	bl	10874 <datetime_parse>
    if (!rc) {
   1bc9c:	b960      	cbnz	r0, 1bcb8 <nmgr_datetime_set+0x54>
        rc = os_settimeofday(&tv, &tz);
   1bc9e:	a921      	add	r1, sp, #132	; 0x84
   1bca0:	a822      	add	r0, sp, #136	; 0x88
   1bca2:	f7ee fac3 	bl	a22c <os_settimeofday>
        if (rc) {
   1bca6:	b948      	cbnz	r0, 1bcbc <nmgr_datetime_set+0x58>
    rc = mgmt_cbuf_setoerr(cb, 0);
   1bca8:	2100      	movs	r1, #0
   1bcaa:	4620      	mov	r0, r4
   1bcac:	f7ff fdda 	bl	1b864 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   1bcb0:	e000      	b.n	1bcb4 <nmgr_datetime_set+0x50>
        return MGMT_ERR_EINVAL;
   1bcb2:	2003      	movs	r0, #3
}
   1bcb4:	b026      	add	sp, #152	; 0x98
   1bcb6:	bd10      	pop	{r4, pc}
        return MGMT_ERR_EINVAL;
   1bcb8:	2003      	movs	r0, #3
   1bcba:	e7fb      	b.n	1bcb4 <nmgr_datetime_set+0x50>
          return MGMT_ERR_EINVAL;
   1bcbc:	2003      	movs	r0, #3
   1bcbe:	e7f9      	b.n	1bcb4 <nmgr_datetime_set+0x50>
   1bcc0:	00023914 	.word	0x00023914

0001bcc4 <nmgr_def_console_echo>:
{
   1bcc4:	b510      	push	{r4, lr}
   1bcc6:	b09a      	sub	sp, #104	; 0x68
   1bcc8:	4604      	mov	r4, r0
    long long int echo_on = 1;
   1bcca:	2201      	movs	r2, #1
   1bccc:	2300      	movs	r3, #0
   1bcce:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    struct cbor_attr_t attrs[2] = {
   1bcd2:	2260      	movs	r2, #96	; 0x60
   1bcd4:	2100      	movs	r1, #0
   1bcd6:	4668      	mov	r0, sp
   1bcd8:	f7f0 f9d9 	bl	c08e <memset>
   1bcdc:	4b0f      	ldr	r3, [pc, #60]	; (1bd1c <nmgr_def_console_echo+0x58>)
   1bcde:	9300      	str	r3, [sp, #0]
   1bce0:	2301      	movs	r3, #1
   1bce2:	f88d 3004 	strb.w	r3, [sp, #4]
   1bce6:	aa18      	add	r2, sp, #96	; 0x60
   1bce8:	9202      	str	r2, [sp, #8]
   1bcea:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    rc = cbor_read_object(&cb->it, attrs);
   1bcee:	4669      	mov	r1, sp
   1bcf0:	f104 001c 	add.w	r0, r4, #28
   1bcf4:	f7f5 fc54 	bl	115a0 <cbor_read_object>
    if (rc) {
   1bcf8:	b970      	cbnz	r0, 1bd18 <nmgr_def_console_echo+0x54>
   1bcfa:	4604      	mov	r4, r0
    if (echo_on) {
   1bcfc:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1bcfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1bd00:	4313      	orrs	r3, r2
   1bd02:	d005      	beq.n	1bd10 <nmgr_def_console_echo+0x4c>
        console_echo(1);
   1bd04:	2001      	movs	r0, #1
   1bd06:	f7f1 fd37 	bl	d778 <console_echo>
}
   1bd0a:	4620      	mov	r0, r4
   1bd0c:	b01a      	add	sp, #104	; 0x68
   1bd0e:	bd10      	pop	{r4, pc}
        console_echo(0);
   1bd10:	2000      	movs	r0, #0
   1bd12:	f7f1 fd31 	bl	d778 <console_echo>
   1bd16:	e7f8      	b.n	1bd0a <nmgr_def_console_echo+0x46>
        return MGMT_ERR_EINVAL;
   1bd18:	2403      	movs	r4, #3
   1bd1a:	e7f6      	b.n	1bd0a <nmgr_def_console_echo+0x46>
   1bd1c:	00023920 	.word	0x00023920

0001bd20 <nmgr_def_echo>:
{
   1bd20:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bd22:	b0b9      	sub	sp, #228	; 0xe4
   1bd24:	4604      	mov	r4, r0
    char echo_buf[128] = {'\0'};
   1bd26:	2500      	movs	r5, #0
   1bd28:	9518      	str	r5, [sp, #96]	; 0x60
   1bd2a:	227c      	movs	r2, #124	; 0x7c
   1bd2c:	4629      	mov	r1, r5
   1bd2e:	a819      	add	r0, sp, #100	; 0x64
   1bd30:	f7f0 f9ad 	bl	c08e <memset>
    struct cbor_attr_t attrs[2] = {
   1bd34:	2260      	movs	r2, #96	; 0x60
   1bd36:	4629      	mov	r1, r5
   1bd38:	4668      	mov	r0, sp
   1bd3a:	f7f0 f9a8 	bl	c08e <memset>
   1bd3e:	4b14      	ldr	r3, [pc, #80]	; (1bd90 <nmgr_def_echo+0x70>)
   1bd40:	9300      	str	r3, [sp, #0]
   1bd42:	2304      	movs	r3, #4
   1bd44:	f88d 3004 	strb.w	r3, [sp, #4]
   1bd48:	ad18      	add	r5, sp, #96	; 0x60
   1bd4a:	9502      	str	r5, [sp, #8]
   1bd4c:	2380      	movs	r3, #128	; 0x80
   1bd4e:	930a      	str	r3, [sp, #40]	; 0x28
   1bd50:	2201      	movs	r2, #1
   1bd52:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    g_err |= cbor_encode_text_stringz(&cb->encoder, "r");
   1bd56:	f104 070c 	add.w	r7, r4, #12
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1bd5a:	490e      	ldr	r1, [pc, #56]	; (1bd94 <nmgr_def_echo+0x74>)
   1bd5c:	4638      	mov	r0, r7
   1bd5e:	f7f5 fe06 	bl	1196e <cbor_encode_text_string>
   1bd62:	4606      	mov	r6, r0
    g_err |= cbor_read_object(&cb->it, attrs);
   1bd64:	4669      	mov	r1, sp
   1bd66:	f104 001c 	add.w	r0, r4, #28
   1bd6a:	f7f5 fc19 	bl	115a0 <cbor_read_object>
   1bd6e:	4306      	orrs	r6, r0
    g_err |= cbor_encode_text_string(&cb->encoder, echo_buf, strlen(echo_buf));
   1bd70:	4628      	mov	r0, r5
   1bd72:	f7f0 f9c3 	bl	c0fc <strlen>
   1bd76:	4602      	mov	r2, r0
   1bd78:	4629      	mov	r1, r5
   1bd7a:	4638      	mov	r0, r7
   1bd7c:	f7f5 fdf7 	bl	1196e <cbor_encode_text_string>
    if (g_err) {
   1bd80:	ea56 0300 	orrs.w	r3, r6, r0
   1bd84:	d102      	bne.n	1bd8c <nmgr_def_echo+0x6c>
    return (0);
   1bd86:	2000      	movs	r0, #0
}
   1bd88:	b039      	add	sp, #228	; 0xe4
   1bd8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1bd8c:	2002      	movs	r0, #2
   1bd8e:	e7fb      	b.n	1bd88 <nmgr_def_echo+0x68>
   1bd90:	000218a0 	.word	0x000218a0
   1bd94:	000233fc 	.word	0x000233fc

0001bd98 <nmgr_datetime_get>:
{
   1bd98:	b570      	push	{r4, r5, r6, lr}
   1bd9a:	b08e      	sub	sp, #56	; 0x38
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1bd9c:	f100 040c 	add.w	r4, r0, #12
   1bda0:	2202      	movs	r2, #2
   1bda2:	491b      	ldr	r1, [pc, #108]	; (1be10 <nmgr_datetime_get+0x78>)
   1bda4:	4620      	mov	r0, r4
   1bda6:	f7f5 fde2 	bl	1196e <cbor_encode_text_string>
   1bdaa:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1bdac:	2200      	movs	r2, #0
   1bdae:	2300      	movs	r3, #0
   1bdb0:	4620      	mov	r0, r4
   1bdb2:	f7f5 fd61 	bl	11878 <cbor_encode_int>
   1bdb6:	4305      	orrs	r5, r0
    rc = os_gettimeofday(&tv, &tz);
   1bdb8:	a909      	add	r1, sp, #36	; 0x24
   1bdba:	a80a      	add	r0, sp, #40	; 0x28
   1bdbc:	f7ee f9ea 	bl	a194 <os_gettimeofday>
    assert(rc == 0);
   1bdc0:	b9d8      	cbnz	r0, 1bdfa <nmgr_datetime_get+0x62>
    rc = datetime_format(&tv, &tz, buf, DATETIME_BUFSIZE);
   1bdc2:	2321      	movs	r3, #33	; 0x21
   1bdc4:	466a      	mov	r2, sp
   1bdc6:	a909      	add	r1, sp, #36	; 0x24
   1bdc8:	a80a      	add	r0, sp, #40	; 0x28
   1bdca:	f7f4 fe53 	bl	10a74 <datetime_format>
    if (rc) {
   1bdce:	4606      	mov	r6, r0
   1bdd0:	b9c8      	cbnz	r0, 1be06 <nmgr_datetime_get+0x6e>
   1bdd2:	2208      	movs	r2, #8
   1bdd4:	490f      	ldr	r1, [pc, #60]	; (1be14 <nmgr_datetime_get+0x7c>)
   1bdd6:	4620      	mov	r0, r4
   1bdd8:	f7f5 fdc9 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "datetime");
   1bddc:	4305      	orrs	r5, r0
   1bdde:	4668      	mov	r0, sp
   1bde0:	f7f0 f98c 	bl	c0fc <strlen>
   1bde4:	4602      	mov	r2, r0
   1bde6:	4669      	mov	r1, sp
   1bde8:	4620      	mov	r0, r4
   1bdea:	f7f5 fdc0 	bl	1196e <cbor_encode_text_string>
    if (g_err) {
   1bdee:	ea55 0300 	orrs.w	r3, r5, r0
   1bdf2:	d10a      	bne.n	1be0a <nmgr_datetime_get+0x72>
}
   1bdf4:	4630      	mov	r0, r6
   1bdf6:	b00e      	add	sp, #56	; 0x38
   1bdf8:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == 0);
   1bdfa:	2300      	movs	r3, #0
   1bdfc:	461a      	mov	r2, r3
   1bdfe:	4619      	mov	r1, r3
   1be00:	4618      	mov	r0, r3
   1be02:	f7ed f8a7 	bl	8f54 <__assert_func>
    return (rc);
   1be06:	2603      	movs	r6, #3
   1be08:	e7f4      	b.n	1bdf4 <nmgr_datetime_get+0x5c>
        return MGMT_ERR_ENOMEM;
   1be0a:	2602      	movs	r6, #2
   1be0c:	e7f2      	b.n	1bdf4 <nmgr_datetime_get+0x5c>
   1be0e:	bf00      	nop
   1be10:	000222a4 	.word	0x000222a4
   1be14:	00023914 	.word	0x00023914

0001be18 <nmgr_def_mpstat_read>:
{
   1be18:	b570      	push	{r4, r5, r6, lr}
   1be1a:	b094      	sub	sp, #80	; 0x50
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1be1c:	f100 060c 	add.w	r6, r0, #12
   1be20:	2202      	movs	r2, #2
   1be22:	4939      	ldr	r1, [pc, #228]	; (1bf08 <nmgr_def_mpstat_read+0xf0>)
   1be24:	4630      	mov	r0, r6
   1be26:	f7f5 fda2 	bl	1196e <cbor_encode_text_string>
   1be2a:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1be2c:	2200      	movs	r2, #0
   1be2e:	2300      	movs	r3, #0
   1be30:	4630      	mov	r0, r6
   1be32:	f7f5 fd21 	bl	11878 <cbor_encode_int>
   1be36:	4304      	orrs	r4, r0
   1be38:	2206      	movs	r2, #6
   1be3a:	4934      	ldr	r1, [pc, #208]	; (1bf0c <nmgr_def_mpstat_read+0xf4>)
   1be3c:	4630      	mov	r0, r6
   1be3e:	f7f5 fd96 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "mpools");
   1be42:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &pools,
   1be44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1be48:	a904      	add	r1, sp, #16
   1be4a:	4630      	mov	r0, r6
   1be4c:	f7f5 fd9b 	bl	11986 <cbor_encoder_create_map>
   1be50:	4304      	orrs	r4, r0
    prev_mp = NULL;
   1be52:	2500      	movs	r5, #0
   1be54:	e044      	b.n	1bee0 <nmgr_def_mpstat_read+0xc8>
   1be56:	a80c      	add	r0, sp, #48	; 0x30
   1be58:	f7f0 f950 	bl	c0fc <strlen>
   1be5c:	4602      	mov	r2, r0
   1be5e:	a90c      	add	r1, sp, #48	; 0x30
   1be60:	a804      	add	r0, sp, #16
   1be62:	f7f5 fd84 	bl	1196e <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pools, omi.omi_name);
   1be66:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_create_map(&pools, &pool, CborIndefiniteLength);
   1be68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1be6c:	4669      	mov	r1, sp
   1be6e:	a804      	add	r0, sp, #16
   1be70:	f7f5 fd89 	bl	11986 <cbor_encoder_create_map>
   1be74:	4304      	orrs	r4, r0
   1be76:	2206      	movs	r2, #6
   1be78:	4925      	ldr	r1, [pc, #148]	; (1bf10 <nmgr_def_mpstat_read+0xf8>)
   1be7a:	4668      	mov	r0, sp
   1be7c:	f7f5 fd77 	bl	1196e <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "blksiz");
   1be80:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_block_size);
   1be82:	9a08      	ldr	r2, [sp, #32]
   1be84:	17d3      	asrs	r3, r2, #31
   1be86:	4668      	mov	r0, sp
   1be88:	f7f5 fcb6 	bl	117f8 <cbor_encode_uint>
   1be8c:	4304      	orrs	r4, r0
   1be8e:	2205      	movs	r2, #5
   1be90:	4920      	ldr	r1, [pc, #128]	; (1bf14 <nmgr_def_mpstat_read+0xfc>)
   1be92:	4668      	mov	r0, sp
   1be94:	f7f5 fd6b 	bl	1196e <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "nblks");
   1be98:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_num_blocks);
   1be9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1be9c:	17d3      	asrs	r3, r2, #31
   1be9e:	4668      	mov	r0, sp
   1bea0:	f7f5 fcaa 	bl	117f8 <cbor_encode_uint>
   1bea4:	4304      	orrs	r4, r0
   1bea6:	2205      	movs	r2, #5
   1bea8:	491b      	ldr	r1, [pc, #108]	; (1bf18 <nmgr_def_mpstat_read+0x100>)
   1beaa:	4668      	mov	r0, sp
   1beac:	f7f5 fd5f 	bl	1196e <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "nfree");
   1beb0:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_num_free);
   1beb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1beb4:	17d3      	asrs	r3, r2, #31
   1beb6:	4668      	mov	r0, sp
   1beb8:	f7f5 fc9e 	bl	117f8 <cbor_encode_uint>
   1bebc:	4304      	orrs	r4, r0
   1bebe:	2203      	movs	r2, #3
   1bec0:	4916      	ldr	r1, [pc, #88]	; (1bf1c <nmgr_def_mpstat_read+0x104>)
   1bec2:	4668      	mov	r0, sp
   1bec4:	f7f5 fd53 	bl	1196e <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "min");
   1bec8:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_min_free);
   1beca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1becc:	17d3      	asrs	r3, r2, #31
   1bece:	4668      	mov	r0, sp
   1bed0:	f7f5 fc92 	bl	117f8 <cbor_encode_uint>
   1bed4:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_close_container(&pools, &pool);
   1bed6:	4669      	mov	r1, sp
   1bed8:	a804      	add	r0, sp, #16
   1beda:	f7f5 fd62 	bl	119a2 <cbor_encoder_close_container>
   1bede:	4304      	orrs	r4, r0
        prev_mp = os_mempool_info_get_next(prev_mp, &omi);
   1bee0:	a908      	add	r1, sp, #32
   1bee2:	4628      	mov	r0, r5
   1bee4:	f7ed fc92 	bl	980c <os_mempool_info_get_next>
        if (prev_mp == NULL) {
   1bee8:	4605      	mov	r5, r0
   1beea:	2800      	cmp	r0, #0
   1beec:	d1b3      	bne.n	1be56 <nmgr_def_mpstat_read+0x3e>
    g_err |= cbor_encoder_close_container(&cb->encoder, &pools);
   1beee:	a904      	add	r1, sp, #16
   1bef0:	4630      	mov	r0, r6
   1bef2:	f7f5 fd56 	bl	119a2 <cbor_encoder_close_container>
    if (g_err) {
   1bef6:	ea54 0300 	orrs.w	r3, r4, r0
   1befa:	d102      	bne.n	1bf02 <nmgr_def_mpstat_read+0xea>
    return (0);
   1befc:	2000      	movs	r0, #0
}
   1befe:	b014      	add	sp, #80	; 0x50
   1bf00:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_ENOMEM;
   1bf02:	2002      	movs	r0, #2
   1bf04:	e7fb      	b.n	1befe <nmgr_def_mpstat_read+0xe6>
   1bf06:	bf00      	nop
   1bf08:	000222a4 	.word	0x000222a4
   1bf0c:	00023928 	.word	0x00023928
   1bf10:	00023930 	.word	0x00023930
   1bf14:	00023938 	.word	0x00023938
   1bf18:	00023940 	.word	0x00023940
   1bf1c:	00021f18 	.word	0x00021f18

0001bf20 <nmgr_def_taskstat_read>:
{
   1bf20:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf22:	b097      	sub	sp, #92	; 0x5c
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1bf24:	f100 060c 	add.w	r6, r0, #12
   1bf28:	2202      	movs	r2, #2
   1bf2a:	495a      	ldr	r1, [pc, #360]	; (1c094 <nmgr_def_taskstat_read+0x174>)
   1bf2c:	4630      	mov	r0, r6
   1bf2e:	f7f5 fd1e 	bl	1196e <cbor_encode_text_string>
   1bf32:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1bf34:	2200      	movs	r2, #0
   1bf36:	2300      	movs	r3, #0
   1bf38:	4630      	mov	r0, r6
   1bf3a:	f7f5 fc9d 	bl	11878 <cbor_encode_int>
   1bf3e:	4304      	orrs	r4, r0
   1bf40:	2205      	movs	r2, #5
   1bf42:	4955      	ldr	r1, [pc, #340]	; (1c098 <nmgr_def_taskstat_read+0x178>)
   1bf44:	4630      	mov	r0, r6
   1bf46:	f7f5 fd12 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "tasks");
   1bf4a:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &tasks,
   1bf4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bf50:	a904      	add	r1, sp, #16
   1bf52:	4630      	mov	r0, r6
   1bf54:	f7f5 fd17 	bl	11986 <cbor_encoder_create_map>
   1bf58:	4304      	orrs	r4, r0
    prev_task = NULL;
   1bf5a:	2500      	movs	r5, #0
   1bf5c:	e086      	b.n	1c06c <nmgr_def_taskstat_read+0x14c>
   1bf5e:	a80e      	add	r0, sp, #56	; 0x38
   1bf60:	f7f0 f8cc 	bl	c0fc <strlen>
   1bf64:	4602      	mov	r2, r0
   1bf66:	a90e      	add	r1, sp, #56	; 0x38
   1bf68:	a804      	add	r0, sp, #16
   1bf6a:	f7f5 fd00 	bl	1196e <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&tasks, oti.oti_name);
   1bf6e:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_create_map(&tasks, &task, CborIndefiniteLength);
   1bf70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bf74:	4669      	mov	r1, sp
   1bf76:	a804      	add	r0, sp, #16
   1bf78:	f7f5 fd05 	bl	11986 <cbor_encoder_create_map>
   1bf7c:	4304      	orrs	r4, r0
   1bf7e:	2204      	movs	r2, #4
   1bf80:	4946      	ldr	r1, [pc, #280]	; (1c09c <nmgr_def_taskstat_read+0x17c>)
   1bf82:	4668      	mov	r0, sp
   1bf84:	f7f5 fcf3 	bl	1196e <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "prio");
   1bf88:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_prio);
   1bf8a:	2700      	movs	r7, #0
   1bf8c:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1bf90:	463b      	mov	r3, r7
   1bf92:	4668      	mov	r0, sp
   1bf94:	f7f5 fc30 	bl	117f8 <cbor_encode_uint>
   1bf98:	4304      	orrs	r4, r0
   1bf9a:	2203      	movs	r2, #3
   1bf9c:	4940      	ldr	r1, [pc, #256]	; (1c0a0 <nmgr_def_taskstat_read+0x180>)
   1bf9e:	4668      	mov	r0, sp
   1bfa0:	f7f5 fce5 	bl	1196e <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "tid");
   1bfa4:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_taskid);
   1bfa6:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   1bfaa:	463b      	mov	r3, r7
   1bfac:	4668      	mov	r0, sp
   1bfae:	f7f5 fc23 	bl	117f8 <cbor_encode_uint>
   1bfb2:	4304      	orrs	r4, r0
   1bfb4:	2205      	movs	r2, #5
   1bfb6:	493b      	ldr	r1, [pc, #236]	; (1c0a4 <nmgr_def_taskstat_read+0x184>)
   1bfb8:	4668      	mov	r0, sp
   1bfba:	f7f5 fcd8 	bl	1196e <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "state");
   1bfbe:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_state);
   1bfc0:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1bfc4:	463b      	mov	r3, r7
   1bfc6:	4668      	mov	r0, sp
   1bfc8:	f7f5 fc16 	bl	117f8 <cbor_encode_uint>
   1bfcc:	4304      	orrs	r4, r0
   1bfce:	2206      	movs	r2, #6
   1bfd0:	4935      	ldr	r1, [pc, #212]	; (1c0a8 <nmgr_def_taskstat_read+0x188>)
   1bfd2:	4668      	mov	r0, sp
   1bfd4:	f7f5 fccb 	bl	1196e <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "stkuse");
   1bfd8:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_stkusage);
   1bfda:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1bfde:	463b      	mov	r3, r7
   1bfe0:	4668      	mov	r0, sp
   1bfe2:	f7f5 fc09 	bl	117f8 <cbor_encode_uint>
   1bfe6:	4304      	orrs	r4, r0
   1bfe8:	2206      	movs	r2, #6
   1bfea:	4930      	ldr	r1, [pc, #192]	; (1c0ac <nmgr_def_taskstat_read+0x18c>)
   1bfec:	4668      	mov	r0, sp
   1bfee:	f7f5 fcbe 	bl	1196e <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "stksiz");
   1bff2:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_stksize);
   1bff4:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   1bff8:	463b      	mov	r3, r7
   1bffa:	4668      	mov	r0, sp
   1bffc:	f7f5 fbfc 	bl	117f8 <cbor_encode_uint>
   1c000:	4304      	orrs	r4, r0
   1c002:	2206      	movs	r2, #6
   1c004:	492a      	ldr	r1, [pc, #168]	; (1c0b0 <nmgr_def_taskstat_read+0x190>)
   1c006:	4668      	mov	r0, sp
   1c008:	f7f5 fcb1 	bl	1196e <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "cswcnt");
   1c00c:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_cswcnt);
   1c00e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c010:	463b      	mov	r3, r7
   1c012:	4668      	mov	r0, sp
   1c014:	f7f5 fbf0 	bl	117f8 <cbor_encode_uint>
   1c018:	4304      	orrs	r4, r0
   1c01a:	2207      	movs	r2, #7
   1c01c:	4925      	ldr	r1, [pc, #148]	; (1c0b4 <nmgr_def_taskstat_read+0x194>)
   1c01e:	4668      	mov	r0, sp
   1c020:	f7f5 fca5 	bl	1196e <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "runtime");
   1c024:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_runtime);
   1c026:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c028:	463b      	mov	r3, r7
   1c02a:	4668      	mov	r0, sp
   1c02c:	f7f5 fbe4 	bl	117f8 <cbor_encode_uint>
   1c030:	4304      	orrs	r4, r0
   1c032:	220c      	movs	r2, #12
   1c034:	4920      	ldr	r1, [pc, #128]	; (1c0b8 <nmgr_def_taskstat_read+0x198>)
   1c036:	4668      	mov	r0, sp
   1c038:	f7f5 fc99 	bl	1196e <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "last_checkin");
   1c03c:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_last_checkin);
   1c03e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1c040:	463b      	mov	r3, r7
   1c042:	4668      	mov	r0, sp
   1c044:	f7f5 fbd8 	bl	117f8 <cbor_encode_uint>
   1c048:	4304      	orrs	r4, r0
   1c04a:	220c      	movs	r2, #12
   1c04c:	491b      	ldr	r1, [pc, #108]	; (1c0bc <nmgr_def_taskstat_read+0x19c>)
   1c04e:	4668      	mov	r0, sp
   1c050:	f7f5 fc8d 	bl	1196e <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "next_checkin");
   1c054:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_next_checkin);
   1c056:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1c058:	463b      	mov	r3, r7
   1c05a:	4668      	mov	r0, sp
   1c05c:	f7f5 fbcc 	bl	117f8 <cbor_encode_uint>
   1c060:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_close_container(&tasks, &task);
   1c062:	4669      	mov	r1, sp
   1c064:	a804      	add	r0, sp, #16
   1c066:	f7f5 fc9c 	bl	119a2 <cbor_encoder_close_container>
   1c06a:	4304      	orrs	r4, r0
        prev_task = os_task_info_get_next(prev_task, &oti);
   1c06c:	a908      	add	r1, sp, #32
   1c06e:	4628      	mov	r0, r5
   1c070:	f7ed ffac 	bl	9fcc <os_task_info_get_next>
        if (prev_task == NULL) {
   1c074:	4605      	mov	r5, r0
   1c076:	2800      	cmp	r0, #0
   1c078:	f47f af71 	bne.w	1bf5e <nmgr_def_taskstat_read+0x3e>
    g_err |= cbor_encoder_close_container(&cb->encoder, &tasks);
   1c07c:	a904      	add	r1, sp, #16
   1c07e:	4630      	mov	r0, r6
   1c080:	f7f5 fc8f 	bl	119a2 <cbor_encoder_close_container>
    if (g_err) {
   1c084:	ea54 0300 	orrs.w	r3, r4, r0
   1c088:	d102      	bne.n	1c090 <nmgr_def_taskstat_read+0x170>
    return (0);
   1c08a:	2000      	movs	r0, #0
}
   1c08c:	b017      	add	sp, #92	; 0x5c
   1c08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1c090:	2002      	movs	r0, #2
   1c092:	e7fb      	b.n	1c08c <nmgr_def_taskstat_read+0x16c>
   1c094:	000222a4 	.word	0x000222a4
   1c098:	000220c8 	.word	0x000220c8
   1c09c:	00023948 	.word	0x00023948
   1c0a0:	00022000 	.word	0x00022000
   1c0a4:	00023950 	.word	0x00023950
   1c0a8:	00021fe4 	.word	0x00021fe4
   1c0ac:	00023958 	.word	0x00023958
   1c0b0:	00023960 	.word	0x00023960
   1c0b4:	00021ff8 	.word	0x00021ff8
   1c0b8:	00023968 	.word	0x00023968
   1c0bc:	00023978 	.word	0x00023978

0001c0c0 <nmgr_os_groups_register>:

int
nmgr_os_groups_register(void)
{
   1c0c0:	b508      	push	{r3, lr}
    return mgmt_group_register(&nmgr_def_group);
   1c0c2:	4802      	ldr	r0, [pc, #8]	; (1c0cc <nmgr_os_groups_register+0xc>)
   1c0c4:	f7ff fbac 	bl	1b820 <mgmt_group_register>
}
   1c0c8:	bd08      	pop	{r3, pc}
   1c0ca:	bf00      	nop
   1c0cc:	20002b6c 	.word	0x20002b6c

0001c0d0 <nmgr_shell_get_mtu>:

static uint16_t
nmgr_shell_get_mtu(struct os_mbuf *m)
{
    return MGMT_MAX_MTU;
}
   1c0d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1c0d4:	4770      	bx	lr
	...

0001c0d8 <nmgr_shell_in>:
    return (rc);
}

static int
nmgr_shell_in(struct os_mbuf *m, void *arg)
{
   1c0d8:	b508      	push	{r3, lr}
   1c0da:	4601      	mov	r1, r0
    return nmgr_rx_req(&nmgr_shell_transport, m);
   1c0dc:	4801      	ldr	r0, [pc, #4]	; (1c0e4 <nmgr_shell_in+0xc>)
   1c0de:	f7ff fd5d 	bl	1bb9c <nmgr_rx_req>
}
   1c0e2:	bd08      	pop	{r3, pc}
   1c0e4:	20006884 	.word	0x20006884

0001c0e8 <nmgr_shell_out>:
{
   1c0e8:	b538      	push	{r3, r4, r5, lr}
   1c0ea:	460c      	mov	r4, r1
    rc = shell_nlip_output(m);
   1c0ec:	4608      	mov	r0, r1
   1c0ee:	f7f3 f8e9 	bl	f2c4 <shell_nlip_output>
    if (rc != 0) {
   1c0f2:	4605      	mov	r5, r0
   1c0f4:	b908      	cbnz	r0, 1c0fa <nmgr_shell_out+0x12>
}
   1c0f6:	4628      	mov	r0, r5
   1c0f8:	bd38      	pop	{r3, r4, r5, pc}
    os_mbuf_free_chain(m);
   1c0fa:	4620      	mov	r0, r4
   1c0fc:	f7ee fa7f 	bl	a5fe <os_mbuf_free_chain>
    return (rc);
   1c100:	e7f9      	b.n	1c0f6 <nmgr_shell_out+0xe>
	...

0001c104 <nmgr_shell_pkg_init>:

void
nmgr_shell_pkg_init(void)
{
   1c104:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1c106:	4b10      	ldr	r3, [pc, #64]	; (1c148 <nmgr_shell_pkg_init+0x44>)
   1c108:	781b      	ldrb	r3, [r3, #0]
   1c10a:	b15b      	cbz	r3, 1c124 <nmgr_shell_pkg_init+0x20>

    rc = nmgr_transport_init(&nmgr_shell_transport, nmgr_shell_out,
   1c10c:	4a0f      	ldr	r2, [pc, #60]	; (1c14c <nmgr_shell_pkg_init+0x48>)
   1c10e:	4910      	ldr	r1, [pc, #64]	; (1c150 <nmgr_shell_pkg_init+0x4c>)
   1c110:	4810      	ldr	r0, [pc, #64]	; (1c154 <nmgr_shell_pkg_init+0x50>)
   1c112:	f7ff fd39 	bl	1bb88 <nmgr_transport_init>
      nmgr_shell_get_mtu);
    assert(rc == 0);
   1c116:	b950      	cbnz	r0, 1c12e <nmgr_shell_pkg_init+0x2a>

    rc = shell_nlip_input_register(nmgr_shell_in, &nmgr_shell_transport);
   1c118:	490e      	ldr	r1, [pc, #56]	; (1c154 <nmgr_shell_pkg_init+0x50>)
   1c11a:	480f      	ldr	r0, [pc, #60]	; (1c158 <nmgr_shell_pkg_init+0x54>)
   1c11c:	f7f3 f8c8 	bl	f2b0 <shell_nlip_input_register>
    assert(rc == 0);
   1c120:	b958      	cbnz	r0, 1c13a <nmgr_shell_pkg_init+0x36>
}
   1c122:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1c124:	461a      	mov	r2, r3
   1c126:	4619      	mov	r1, r3
   1c128:	4618      	mov	r0, r3
   1c12a:	f7ec ff13 	bl	8f54 <__assert_func>
    assert(rc == 0);
   1c12e:	2300      	movs	r3, #0
   1c130:	461a      	mov	r2, r3
   1c132:	4619      	mov	r1, r3
   1c134:	4618      	mov	r0, r3
   1c136:	f7ec ff0d 	bl	8f54 <__assert_func>
    assert(rc == 0);
   1c13a:	2300      	movs	r3, #0
   1c13c:	461a      	mov	r2, r3
   1c13e:	4619      	mov	r1, r3
   1c140:	4618      	mov	r0, r3
   1c142:	f7ec ff07 	bl	8f54 <__assert_func>
   1c146:	bf00      	nop
   1c148:	200065ac 	.word	0x200065ac
   1c14c:	0001c0d1 	.word	0x0001c0d1
   1c150:	0001c0e9 	.word	0x0001c0e9
   1c154:	20006884 	.word	0x20006884
   1c158:	0001c0d9 	.word	0x0001c0d9

0001c15c <config_init_fcb>:
    .cf_fcb.f_sectors = conf_fcb_area,
};

static void
config_init_fcb(void)
{
   1c15c:	b510      	push	{r4, lr}
   1c15e:	b084      	sub	sp, #16
    int cnt;
    int rc;

    rc = flash_area_to_sectors(MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, NULL);
   1c160:	2200      	movs	r2, #0
   1c162:	a903      	add	r1, sp, #12
   1c164:	2011      	movs	r0, #17
   1c166:	f000 fa8f 	bl	1c688 <flash_area_to_sectors>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1c16a:	b138      	cbz	r0, 1c17c <config_init_fcb+0x20>
   1c16c:	2000      	movs	r0, #0
   1c16e:	9000      	str	r0, [sp, #0]
   1c170:	4b26      	ldr	r3, [pc, #152]	; (1c20c <config_init_fcb+0xb0>)
   1c172:	681c      	ldr	r4, [r3, #0]
   1c174:	4603      	mov	r3, r0
   1c176:	4602      	mov	r2, r0
   1c178:	4601      	mov	r1, r0
   1c17a:	47a0      	blx	r4
    SYSINIT_PANIC_ASSERT(
   1c17c:	9b03      	ldr	r3, [sp, #12]
   1c17e:	2b09      	cmp	r3, #9
   1c180:	d907      	bls.n	1c192 <config_init_fcb+0x36>
   1c182:	2000      	movs	r0, #0
   1c184:	9000      	str	r0, [sp, #0]
   1c186:	4b21      	ldr	r3, [pc, #132]	; (1c20c <config_init_fcb+0xb0>)
   1c188:	681c      	ldr	r4, [r3, #0]
   1c18a:	4603      	mov	r3, r0
   1c18c:	4602      	mov	r2, r0
   1c18e:	4601      	mov	r1, r0
   1c190:	47a0      	blx	r4
        cnt <= sizeof(conf_fcb_area) / sizeof(conf_fcb_area[0]));
    flash_area_to_sectors(
   1c192:	4a1f      	ldr	r2, [pc, #124]	; (1c210 <config_init_fcb+0xb4>)
   1c194:	a903      	add	r1, sp, #12
   1c196:	2011      	movs	r0, #17
   1c198:	f000 fa76 	bl	1c688 <flash_area_to_sectors>
        MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, conf_fcb_area);

    config_init_conf_fcb.cf_fcb.f_sector_cnt = cnt;
   1c19c:	481d      	ldr	r0, [pc, #116]	; (1c214 <config_init_fcb+0xb8>)
   1c19e:	9b03      	ldr	r3, [sp, #12]
   1c1a0:	7343      	strb	r3, [r0, #13]

    rc = conf_fcb_src(&config_init_conf_fcb);
   1c1a2:	f000 f933 	bl	1c40c <conf_fcb_src>
    if (rc) {
   1c1a6:	4603      	mov	r3, r0
   1c1a8:	b1c0      	cbz	r0, 1c1dc <config_init_fcb+0x80>
        for (cnt = 0;
   1c1aa:	2300      	movs	r3, #0
   1c1ac:	9303      	str	r3, [sp, #12]
   1c1ae:	e00c      	b.n	1c1ca <config_init_fcb+0x6e>
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
             cnt++) {

            flash_area_erase(&conf_fcb_area[cnt], 0,
   1c1b0:	4817      	ldr	r0, [pc, #92]	; (1c210 <config_init_fcb+0xb4>)
   1c1b2:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   1c1b6:	eb00 038c 	add.w	r3, r0, ip, lsl #2
   1c1ba:	689a      	ldr	r2, [r3, #8]
   1c1bc:	2100      	movs	r1, #0
   1c1be:	4618      	mov	r0, r3
   1c1c0:	f000 fac8 	bl	1c754 <flash_area_erase>
             cnt++) {
   1c1c4:	9b03      	ldr	r3, [sp, #12]
   1c1c6:	3301      	adds	r3, #1
   1c1c8:	9303      	str	r3, [sp, #12]
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
   1c1ca:	4b12      	ldr	r3, [pc, #72]	; (1c214 <config_init_fcb+0xb8>)
   1c1cc:	7b5a      	ldrb	r2, [r3, #13]
   1c1ce:	9b03      	ldr	r3, [sp, #12]
        for (cnt = 0;
   1c1d0:	429a      	cmp	r2, r3
   1c1d2:	dced      	bgt.n	1c1b0 <config_init_fcb+0x54>
                             conf_fcb_area[cnt].fa_size);
        }
        rc = conf_fcb_src(&config_init_conf_fcb);
   1c1d4:	480f      	ldr	r0, [pc, #60]	; (1c214 <config_init_fcb+0xb8>)
   1c1d6:	f000 f919 	bl	1c40c <conf_fcb_src>
   1c1da:	4603      	mov	r3, r0
    }
    SYSINIT_PANIC_ASSERT(rc == 0);
   1c1dc:	b13b      	cbz	r3, 1c1ee <config_init_fcb+0x92>
   1c1de:	2000      	movs	r0, #0
   1c1e0:	9000      	str	r0, [sp, #0]
   1c1e2:	4b0a      	ldr	r3, [pc, #40]	; (1c20c <config_init_fcb+0xb0>)
   1c1e4:	681c      	ldr	r4, [r3, #0]
   1c1e6:	4603      	mov	r3, r0
   1c1e8:	4602      	mov	r2, r0
   1c1ea:	4601      	mov	r1, r0
   1c1ec:	47a0      	blx	r4
    rc = conf_fcb_dst(&config_init_conf_fcb);
   1c1ee:	4809      	ldr	r0, [pc, #36]	; (1c214 <config_init_fcb+0xb8>)
   1c1f0:	f000 f938 	bl	1c464 <conf_fcb_dst>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1c1f4:	b138      	cbz	r0, 1c206 <config_init_fcb+0xaa>
   1c1f6:	2000      	movs	r0, #0
   1c1f8:	9000      	str	r0, [sp, #0]
   1c1fa:	4b04      	ldr	r3, [pc, #16]	; (1c20c <config_init_fcb+0xb0>)
   1c1fc:	681c      	ldr	r4, [r3, #0]
   1c1fe:	4603      	mov	r3, r0
   1c200:	4602      	mov	r2, r0
   1c202:	4601      	mov	r1, r0
   1c204:	47a0      	blx	r4
}
   1c206:	b004      	add	sp, #16
   1c208:	bd10      	pop	{r4, pc}
   1c20a:	bf00      	nop
   1c20c:	200001ec 	.word	0x200001ec
   1c210:	200068a4 	.word	0x200068a4
   1c214:	20002b78 	.word	0x20002b78

0001c218 <config_pkg_init>:
#endif
#endif

void
config_pkg_init(void)
{
   1c218:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1c21a:	4b06      	ldr	r3, [pc, #24]	; (1c234 <config_pkg_init+0x1c>)
   1c21c:	781b      	ldrb	r3, [r3, #0]
   1c21e:	b123      	cbz	r3, 1c22a <config_pkg_init+0x12>

    conf_init();
   1c220:	f7f0 feca 	bl	cfb8 <conf_init>

#if MYNEWT_VAL(CONFIG_AUTO_INIT)
#if MYNEWT_VAL(CONFIG_NFFS)
    config_init_fs();
#elif MYNEWT_VAL(CONFIG_FCB)
    config_init_fcb();
   1c224:	f7ff ff9a 	bl	1c15c <config_init_fcb>
#endif
#endif
}
   1c228:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1c22a:	461a      	mov	r2, r3
   1c22c:	4619      	mov	r1, r3
   1c22e:	4618      	mov	r0, r3
   1c230:	f7ec fe90 	bl	8f54 <__assert_func>
   1c234:	200065ac 	.word	0x200065ac

0001c238 <config_pkg_init_stage2>:
     */
#if MYNEWT_VAL(CONFIG_NFFS)
    fs_mkdir(MYNEWT_VAL(CONFIG_NFFS_DIR));
#endif
#endif
}
   1c238:	4770      	bx	lr
	...

0001c23c <conf_fcb_load>:
    return 0;
}

static int
conf_fcb_load(struct conf_store *cs, conf_store_load_cb cb, void *cb_arg)
{
   1c23c:	b500      	push	{lr}
   1c23e:	b083      	sub	sp, #12
    struct conf_fcb *cf = (struct conf_fcb *)cs;
    struct conf_fcb_load_cb_arg arg;
    int rc;

    arg.cb = cb;
   1c240:	9100      	str	r1, [sp, #0]
    arg.cb_arg = cb_arg;
   1c242:	9201      	str	r2, [sp, #4]
    rc = fcb_walk(&cf->cf_fcb, 0, conf_fcb_load_cb, &arg);
   1c244:	466b      	mov	r3, sp
   1c246:	4a05      	ldr	r2, [pc, #20]	; (1c25c <conf_fcb_load+0x20>)
   1c248:	2100      	movs	r1, #0
   1c24a:	3008      	adds	r0, #8
   1c24c:	f002 ff40 	bl	1f0d0 <fcb_walk>
    if (rc) {
   1c250:	b910      	cbnz	r0, 1c258 <conf_fcb_load+0x1c>
        return OS_EINVAL;
    }
    return OS_OK;
}
   1c252:	b003      	add	sp, #12
   1c254:	f85d fb04 	ldr.w	pc, [sp], #4
        return OS_EINVAL;
   1c258:	2002      	movs	r0, #2
   1c25a:	e7fa      	b.n	1c252 <conf_fcb_load+0x16>
   1c25c:	0001c261 	.word	0x0001c261

0001c260 <conf_fcb_load_cb>:
{
   1c260:	b530      	push	{r4, r5, lr}
   1c262:	b0db      	sub	sp, #364	; 0x16c
   1c264:	460d      	mov	r5, r1
    len = loc->fe_data_len;
   1c266:	8984      	ldrh	r4, [r0, #12]
    if (len >= sizeof(buf)) {
   1c268:	f5b4 7fb0 	cmp.w	r4, #352	; 0x160
   1c26c:	d301      	bcc.n	1c272 <conf_fcb_load_cb+0x12>
        len = sizeof(buf) - 1;
   1c26e:	f240 145f 	movw	r4, #351	; 0x15f
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, len);
   1c272:	4623      	mov	r3, r4
   1c274:	aa02      	add	r2, sp, #8
   1c276:	6881      	ldr	r1, [r0, #8]
   1c278:	6800      	ldr	r0, [r0, #0]
   1c27a:	f000 fa43 	bl	1c704 <flash_area_read>
    if (rc) {
   1c27e:	b110      	cbz	r0, 1c286 <conf_fcb_load_cb+0x26>
}
   1c280:	2000      	movs	r0, #0
   1c282:	b05b      	add	sp, #364	; 0x16c
   1c284:	bd30      	pop	{r4, r5, pc}
    buf[len] = '\0';
   1c286:	a802      	add	r0, sp, #8
   1c288:	2300      	movs	r3, #0
   1c28a:	5503      	strb	r3, [r0, r4]
    rc = conf_line_parse(buf, &name_str, &val_str);
   1c28c:	466a      	mov	r2, sp
   1c28e:	a901      	add	r1, sp, #4
   1c290:	f000 f910 	bl	1c4b4 <conf_line_parse>
    if (rc) {
   1c294:	2800      	cmp	r0, #0
   1c296:	d1f3      	bne.n	1c280 <conf_fcb_load_cb+0x20>
    argp->cb(name_str, val_str, argp->cb_arg);
   1c298:	682b      	ldr	r3, [r5, #0]
   1c29a:	686a      	ldr	r2, [r5, #4]
   1c29c:	9900      	ldr	r1, [sp, #0]
   1c29e:	9801      	ldr	r0, [sp, #4]
   1c2a0:	4798      	blx	r3
    return 0;
   1c2a2:	e7ed      	b.n	1c280 <conf_fcb_load_cb+0x20>

0001c2a4 <conf_fcb_var_read>:

static int
conf_fcb_var_read(struct fcb_entry *loc, char *buf, char **name, char **val)
{
   1c2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c2a6:	4604      	mov	r4, r0
   1c2a8:	460d      	mov	r5, r1
   1c2aa:	4617      	mov	r7, r2
   1c2ac:	461e      	mov	r6, r3
    int rc;

    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, loc->fe_data_len);
   1c2ae:	8983      	ldrh	r3, [r0, #12]
   1c2b0:	460a      	mov	r2, r1
   1c2b2:	6881      	ldr	r1, [r0, #8]
   1c2b4:	6800      	ldr	r0, [r0, #0]
   1c2b6:	f000 fa25 	bl	1c704 <flash_area_read>
    if (rc) {
   1c2ba:	b100      	cbz	r0, 1c2be <conf_fcb_var_read+0x1a>
        return rc;
    }
    buf[loc->fe_data_len] = '\0';
    rc = conf_line_parse(buf, name, val);
    return rc;
}
   1c2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    buf[loc->fe_data_len] = '\0';
   1c2be:	89a3      	ldrh	r3, [r4, #12]
   1c2c0:	2200      	movs	r2, #0
   1c2c2:	54ea      	strb	r2, [r5, r3]
    rc = conf_line_parse(buf, name, val);
   1c2c4:	4632      	mov	r2, r6
   1c2c6:	4639      	mov	r1, r7
   1c2c8:	4628      	mov	r0, r5
   1c2ca:	f000 f8f3 	bl	1c4b4 <conf_line_parse>
    return rc;
   1c2ce:	e7f5      	b.n	1c2bc <conf_fcb_var_read+0x18>

0001c2d0 <conf_fcb_compress_internal>:
static void
conf_fcb_compress_internal(struct fcb *fcb,
                           int (*copy_or_not)(const char *name, const char *val,
                                              void *cn_arg),
                           void *cn_arg)
{
   1c2d0:	b570      	push	{r4, r5, r6, lr}
   1c2d2:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
   1c2d6:	4604      	mov	r4, r0
   1c2d8:	460d      	mov	r5, r1
   1c2da:	4616      	mov	r6, r2
    struct fcb_entry loc2;
    char *name1, *val1;
    char *name2, *val2;
    int copy;

    rc = fcb_append_to_scratch(fcb);
   1c2dc:	f002 fceb 	bl	1ecb6 <fcb_append_to_scratch>
    if (rc) {
   1c2e0:	2800      	cmp	r0, #0
   1c2e2:	d15e      	bne.n	1c3a2 <conf_fcb_compress_internal+0xd2>
        return; /* XXX */
    }

    loc1.fe_area = NULL;
   1c2e4:	2300      	movs	r3, #0
   1c2e6:	9308      	str	r3, [sp, #32]
    loc1.fe_elem_off = 0;
   1c2e8:	9309      	str	r3, [sp, #36]	; 0x24
    while (fcb_getnext(fcb, &loc1) == 0) {
   1c2ea:	a908      	add	r1, sp, #32
   1c2ec:	4620      	mov	r0, r4
   1c2ee:	f002 fe99 	bl	1f024 <fcb_getnext>
   1c2f2:	2800      	cmp	r0, #0
   1c2f4:	d152      	bne.n	1c39c <conf_fcb_compress_internal+0xcc>
        if (loc1.fe_area != fcb->f_oldest) {
   1c2f6:	9a08      	ldr	r2, [sp, #32]
   1c2f8:	69a3      	ldr	r3, [r4, #24]
   1c2fa:	429a      	cmp	r2, r3
   1c2fc:	d14e      	bne.n	1c39c <conf_fcb_compress_internal+0xcc>
            break;
        }
        rc = conf_fcb_var_read(&loc1, buf1, &name1, &val1);
   1c2fe:	ab02      	add	r3, sp, #8
   1c300:	aa03      	add	r2, sp, #12
   1c302:	a964      	add	r1, sp, #400	; 0x190
   1c304:	a808      	add	r0, sp, #32
   1c306:	f7ff ffcd 	bl	1c2a4 <conf_fcb_var_read>
        if (rc) {
   1c30a:	2800      	cmp	r0, #0
   1c30c:	d1ed      	bne.n	1c2ea <conf_fcb_compress_internal+0x1a>
            continue;
        }
        if (!val1) {
   1c30e:	9b02      	ldr	r3, [sp, #8]
   1c310:	2b00      	cmp	r3, #0
   1c312:	d0ea      	beq.n	1c2ea <conf_fcb_compress_internal+0x1a>
            continue;
        }
        loc2 = loc1;
   1c314:	f10d 0c10 	add.w	ip, sp, #16
   1c318:	ab08      	add	r3, sp, #32
   1c31a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1c31c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        copy = 1;
        while (fcb_getnext(fcb, &loc2) == 0) {
   1c320:	a904      	add	r1, sp, #16
   1c322:	4620      	mov	r0, r4
   1c324:	f002 fe7e 	bl	1f024 <fcb_getnext>
   1c328:	b978      	cbnz	r0, 1c34a <conf_fcb_compress_internal+0x7a>
            rc = conf_fcb_var_read(&loc2, buf2, &name2, &val2);
   1c32a:	466b      	mov	r3, sp
   1c32c:	aa01      	add	r2, sp, #4
   1c32e:	a90c      	add	r1, sp, #48	; 0x30
   1c330:	a804      	add	r0, sp, #16
   1c332:	f7ff ffb7 	bl	1c2a4 <conf_fcb_var_read>
            if (rc) {
   1c336:	2800      	cmp	r0, #0
   1c338:	d1f2      	bne.n	1c320 <conf_fcb_compress_internal+0x50>
                continue;
            }
            if (!strcmp(name1, name2)) {
   1c33a:	9901      	ldr	r1, [sp, #4]
   1c33c:	9803      	ldr	r0, [sp, #12]
   1c33e:	f7ef fed1 	bl	c0e4 <strcmp>
   1c342:	4603      	mov	r3, r0
   1c344:	2800      	cmp	r0, #0
   1c346:	d1eb      	bne.n	1c320 <conf_fcb_compress_internal+0x50>
   1c348:	e000      	b.n	1c34c <conf_fcb_compress_internal+0x7c>
        copy = 1;
   1c34a:	2301      	movs	r3, #1
                copy = 0;
                break;
            }
        }
        if (!copy) {
   1c34c:	2b00      	cmp	r3, #0
   1c34e:	d0cc      	beq.n	1c2ea <conf_fcb_compress_internal+0x1a>
            continue;
        }

        if (copy_or_not) {
   1c350:	b12d      	cbz	r5, 1c35e <conf_fcb_compress_internal+0x8e>
            if (copy_or_not(name1, val1, cn_arg)) {
   1c352:	4632      	mov	r2, r6
   1c354:	9902      	ldr	r1, [sp, #8]
   1c356:	9803      	ldr	r0, [sp, #12]
   1c358:	47a8      	blx	r5
   1c35a:	2800      	cmp	r0, #0
   1c35c:	d1c5      	bne.n	1c2ea <conf_fcb_compress_internal+0x1a>
            }
        }
        /*
         * Can't find one. Must copy.
         */
        rc = flash_area_read(loc1.fe_area, loc1.fe_data_off, buf1,
   1c35e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1c362:	aa64      	add	r2, sp, #400	; 0x190
   1c364:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c366:	9808      	ldr	r0, [sp, #32]
   1c368:	f000 f9cc 	bl	1c704 <flash_area_read>
          loc1.fe_data_len);
        if (rc) {
   1c36c:	2800      	cmp	r0, #0
   1c36e:	d1bc      	bne.n	1c2ea <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = fcb_append(fcb, loc1.fe_data_len, &loc2);
   1c370:	aa04      	add	r2, sp, #16
   1c372:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   1c376:	4620      	mov	r0, r4
   1c378:	f002 fcb6 	bl	1ece8 <fcb_append>
        if (rc) {
   1c37c:	2800      	cmp	r0, #0
   1c37e:	d1b4      	bne.n	1c2ea <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = flash_area_write(loc2.fe_area, loc2.fe_data_off, buf1,
   1c380:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1c384:	aa64      	add	r2, sp, #400	; 0x190
   1c386:	9906      	ldr	r1, [sp, #24]
   1c388:	9804      	ldr	r0, [sp, #16]
   1c38a:	f000 f9cf 	bl	1c72c <flash_area_write>
          loc1.fe_data_len);
        if (rc) {
   1c38e:	2800      	cmp	r0, #0
   1c390:	d1ab      	bne.n	1c2ea <conf_fcb_compress_internal+0x1a>
            continue;
        }
        fcb_append_finish(fcb, &loc2);
   1c392:	a904      	add	r1, sp, #16
   1c394:	4620      	mov	r0, r4
   1c396:	f002 fd24 	bl	1ede2 <fcb_append_finish>
   1c39a:	e7a6      	b.n	1c2ea <conf_fcb_compress_internal+0x1a>
    }
    rc = fcb_rotate(fcb);
   1c39c:	4620      	mov	r0, r4
   1c39e:	f002 fe5b 	bl	1f058 <fcb_rotate>
    if (rc) {
        /* XXXX */
        ;
    }
}
   1c3a2:	f50d 7d3c 	add.w	sp, sp, #752	; 0x2f0
   1c3a6:	bd70      	pop	{r4, r5, r6, pc}

0001c3a8 <conf_fcb_append>:

static int
conf_fcb_append(struct fcb *fcb, char *buf, int len)
{
   1c3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c3ac:	b084      	sub	sp, #16
   1c3ae:	4606      	mov	r6, r0
   1c3b0:	4688      	mov	r8, r1
   1c3b2:	4617      	mov	r7, r2
    int rc;
    int i;
    struct fcb_entry loc;

    for (i = 0; i < 10; i++) {
   1c3b4:	2500      	movs	r5, #0
   1c3b6:	2d09      	cmp	r5, #9
   1c3b8:	dc11      	bgt.n	1c3de <conf_fcb_append+0x36>
        rc = fcb_append(fcb, len, &loc);
   1c3ba:	466a      	mov	r2, sp
   1c3bc:	b2b9      	uxth	r1, r7
   1c3be:	4630      	mov	r0, r6
   1c3c0:	f002 fc92 	bl	1ece8 <fcb_append>
   1c3c4:	4604      	mov	r4, r0
        if (rc != FCB_ERR_NOSPACE) {
   1c3c6:	f110 0f04 	cmn.w	r0, #4
   1c3ca:	d108      	bne.n	1c3de <conf_fcb_append+0x36>
            break;
        }
        if (fcb->f_scratch_cnt == 0) {
   1c3cc:	79b0      	ldrb	r0, [r6, #6]
   1c3ce:	b1b8      	cbz	r0, 1c400 <conf_fcb_append+0x58>
            return OS_ENOMEM;
        }
        conf_fcb_compress_internal(fcb, NULL, NULL);
   1c3d0:	2200      	movs	r2, #0
   1c3d2:	4611      	mov	r1, r2
   1c3d4:	4630      	mov	r0, r6
   1c3d6:	f7ff ff7b 	bl	1c2d0 <conf_fcb_compress_internal>
    for (i = 0; i < 10; i++) {
   1c3da:	3501      	adds	r5, #1
   1c3dc:	e7eb      	b.n	1c3b6 <conf_fcb_append+0xe>
    }
    if (rc) {
   1c3de:	b98c      	cbnz	r4, 1c404 <conf_fcb_append+0x5c>
        return OS_EINVAL;
    }
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, len);
   1c3e0:	463b      	mov	r3, r7
   1c3e2:	4642      	mov	r2, r8
   1c3e4:	9902      	ldr	r1, [sp, #8]
   1c3e6:	9800      	ldr	r0, [sp, #0]
   1c3e8:	f000 f9a0 	bl	1c72c <flash_area_write>
    if (rc) {
   1c3ec:	4604      	mov	r4, r0
   1c3ee:	b958      	cbnz	r0, 1c408 <conf_fcb_append+0x60>
        return OS_EINVAL;
    }
    fcb_append_finish(fcb, &loc);
   1c3f0:	4669      	mov	r1, sp
   1c3f2:	4630      	mov	r0, r6
   1c3f4:	f002 fcf5 	bl	1ede2 <fcb_append_finish>
    return OS_OK;
}
   1c3f8:	4620      	mov	r0, r4
   1c3fa:	b004      	add	sp, #16
   1c3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return OS_ENOMEM;
   1c400:	2401      	movs	r4, #1
   1c402:	e7f9      	b.n	1c3f8 <conf_fcb_append+0x50>
        return OS_EINVAL;
   1c404:	2402      	movs	r4, #2
   1c406:	e7f7      	b.n	1c3f8 <conf_fcb_append+0x50>
        return OS_EINVAL;
   1c408:	2402      	movs	r4, #2
   1c40a:	e7f5      	b.n	1c3f8 <conf_fcb_append+0x50>

0001c40c <conf_fcb_src>:
{
   1c40c:	b570      	push	{r4, r5, r6, lr}
   1c40e:	4604      	mov	r4, r0
    cf->cf_fcb.f_version = CONF_FCB_VERS;
   1c410:	2301      	movs	r3, #1
   1c412:	7303      	strb	r3, [r0, #12]
    if (cf->cf_fcb.f_sector_cnt > 1) {
   1c414:	7b43      	ldrb	r3, [r0, #13]
   1c416:	2b01      	cmp	r3, #1
   1c418:	d902      	bls.n	1c420 <conf_fcb_src+0x14>
        cf->cf_fcb.f_scratch_cnt = 1;
   1c41a:	2301      	movs	r3, #1
   1c41c:	7383      	strb	r3, [r0, #14]
   1c41e:	e007      	b.n	1c430 <conf_fcb_src+0x24>
        cf->cf_fcb.f_scratch_cnt = 0;
   1c420:	2300      	movs	r3, #0
   1c422:	7383      	strb	r3, [r0, #14]
   1c424:	e004      	b.n	1c430 <conf_fcb_src+0x24>
            flash_area_erase(cf->cf_fcb.f_active.fe_area, 0,
   1c426:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1c428:	6882      	ldr	r2, [r0, #8]
   1c42a:	2100      	movs	r1, #0
   1c42c:	f000 f992 	bl	1c754 <flash_area_erase>
        rc = fcb_init(&cf->cf_fcb);
   1c430:	f104 0508 	add.w	r5, r4, #8
   1c434:	4628      	mov	r0, r5
   1c436:	f002 fb94 	bl	1eb62 <fcb_init>
        if (rc) {
   1c43a:	4606      	mov	r6, r0
   1c43c:	b968      	cbnz	r0, 1c45a <conf_fcb_src+0x4e>
        if (cf->cf_fcb.f_scratch_cnt &&
   1c43e:	7ba3      	ldrb	r3, [r4, #14]
   1c440:	b123      	cbz	r3, 1c44c <conf_fcb_src+0x40>
            fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   1c442:	4628      	mov	r0, r5
   1c444:	f002 fb17 	bl	1ea76 <fcb_free_sector_cnt>
        if (cf->cf_fcb.f_scratch_cnt &&
   1c448:	2800      	cmp	r0, #0
   1c44a:	ddec      	ble.n	1c426 <conf_fcb_src+0x1a>
    cf->cf_store.cs_itf = &conf_fcb_itf;
   1c44c:	4b04      	ldr	r3, [pc, #16]	; (1c460 <conf_fcb_src+0x54>)
   1c44e:	6063      	str	r3, [r4, #4]
    conf_src_register(&cf->cf_store);
   1c450:	4620      	mov	r0, r4
   1c452:	f7f0 fcef 	bl	ce34 <conf_src_register>
}
   1c456:	4630      	mov	r0, r6
   1c458:	bd70      	pop	{r4, r5, r6, pc}
            return OS_INVALID_PARM;
   1c45a:	2603      	movs	r6, #3
   1c45c:	e7fb      	b.n	1c456 <conf_fcb_src+0x4a>
   1c45e:	bf00      	nop
   1c460:	20002bb0 	.word	0x20002bb0

0001c464 <conf_fcb_dst>:
{
   1c464:	b508      	push	{r3, lr}
    cf->cf_store.cs_itf = &conf_fcb_itf;
   1c466:	4b03      	ldr	r3, [pc, #12]	; (1c474 <conf_fcb_dst+0x10>)
   1c468:	6043      	str	r3, [r0, #4]
    conf_dst_register(&cf->cf_store);
   1c46a:	f7f0 fcf7 	bl	ce5c <conf_dst_register>
}
   1c46e:	2000      	movs	r0, #0
   1c470:	bd08      	pop	{r3, pc}
   1c472:	bf00      	nop
   1c474:	20002bb0 	.word	0x20002bb0

0001c478 <conf_fcb_kv_save>:
conf_fcb_kv_save(struct fcb *fcb, const char *name, const char *value)
{
    char buf[CONF_MAX_NAME_LEN + CONF_MAX_VAL_LEN + 32];
    int len;

    if (!name) {
   1c478:	b199      	cbz	r1, 1c4a2 <conf_fcb_kv_save+0x2a>
{
   1c47a:	b510      	push	{r4, lr}
   1c47c:	b0d8      	sub	sp, #352	; 0x160
   1c47e:	4604      	mov	r4, r0
   1c480:	4613      	mov	r3, r2
   1c482:	460a      	mov	r2, r1
        return OS_INVALID_PARM;
    }

    len = conf_line_make(buf, sizeof(buf), name, value);
   1c484:	f44f 71b0 	mov.w	r1, #352	; 0x160
   1c488:	4668      	mov	r0, sp
   1c48a:	f000 f875 	bl	1c578 <conf_line_make>
   1c48e:	4602      	mov	r2, r0
    if (len < 0 || len + 2 > sizeof(buf)) {
   1c490:	f5b0 7faf 	cmp.w	r0, #350	; 0x15e
   1c494:	d807      	bhi.n	1c4a6 <conf_fcb_kv_save+0x2e>
        return OS_INVALID_PARM;
    }
    return conf_fcb_append(fcb, buf, len);
   1c496:	4669      	mov	r1, sp
   1c498:	4620      	mov	r0, r4
   1c49a:	f7ff ff85 	bl	1c3a8 <conf_fcb_append>
}
   1c49e:	b058      	add	sp, #352	; 0x160
   1c4a0:	bd10      	pop	{r4, pc}
        return OS_INVALID_PARM;
   1c4a2:	2003      	movs	r0, #3
}
   1c4a4:	4770      	bx	lr
        return OS_INVALID_PARM;
   1c4a6:	2003      	movs	r0, #3
   1c4a8:	e7f9      	b.n	1c49e <conf_fcb_kv_save+0x26>

0001c4aa <conf_fcb_save>:
{
   1c4aa:	b508      	push	{r3, lr}
    return conf_fcb_kv_save(&cf->cf_fcb, name, value);
   1c4ac:	3008      	adds	r0, #8
   1c4ae:	f7ff ffe3 	bl	1c478 <conf_fcb_kv_save>
}
   1c4b2:	bd08      	pop	{r3, pc}

0001c4b4 <conf_line_parse>:
        FIND_NAME_END,
        FIND_VAL,
        FIND_VAL_END
    } state = FIND_NAME;

    *valp = NULL;
   1c4b4:	2300      	movs	r3, #0
   1c4b6:	6013      	str	r3, [r2, #0]
    } state = FIND_NAME;
   1c4b8:	469c      	mov	ip, r3
    for (cp = buf; *cp != '\0'; cp++) {
   1c4ba:	7803      	ldrb	r3, [r0, #0]
   1c4bc:	2b00      	cmp	r3, #0
   1c4be:	d04f      	beq.n	1c560 <conf_line_parse+0xac>
{
   1c4c0:	b500      	push	{lr}
   1c4c2:	e01a      	b.n	1c4fa <conf_line_parse+0x46>
   1c4c4:	2b20      	cmp	r3, #32
   1c4c6:	d015      	beq.n	1c4f4 <conf_line_parse+0x40>
   1c4c8:	2b0a      	cmp	r3, #10
   1c4ca:	d013      	beq.n	1c4f4 <conf_line_parse+0x40>
   1c4cc:	2b09      	cmp	r3, #9
   1c4ce:	d011      	beq.n	1c4f4 <conf_line_parse+0x40>
   1c4d0:	2b0d      	cmp	r3, #13
   1c4d2:	d00f      	beq.n	1c4f4 <conf_line_parse+0x40>
        switch (state) {
        case FIND_NAME:
            if (!isspace((unsigned char)*cp)) {
                *namep = cp;
   1c4d4:	6008      	str	r0, [r1, #0]
                state = FIND_NAME_END;
   1c4d6:	f04f 0c01 	mov.w	ip, #1
   1c4da:	e00b      	b.n	1c4f4 <conf_line_parse+0x40>
            }
            break;
        case FIND_NAME_END:
            if (*cp == '=') {
   1c4dc:	2b3d      	cmp	r3, #61	; 0x3d
   1c4de:	d01b      	beq.n	1c518 <conf_line_parse+0x64>
   1c4e0:	2b20      	cmp	r3, #32
   1c4e2:	d005      	beq.n	1c4f0 <conf_line_parse+0x3c>
   1c4e4:	2b0a      	cmp	r3, #10
   1c4e6:	d003      	beq.n	1c4f0 <conf_line_parse+0x3c>
   1c4e8:	2b09      	cmp	r3, #9
   1c4ea:	d001      	beq.n	1c4f0 <conf_line_parse+0x3c>
   1c4ec:	2b0d      	cmp	r3, #13
   1c4ee:	d101      	bne.n	1c4f4 <conf_line_parse+0x40>
                *cp = '\0';
                state = FIND_VAL;
            } else if (isspace((unsigned char)*cp)) {
                *cp = '\0';
   1c4f0:	2300      	movs	r3, #0
   1c4f2:	7003      	strb	r3, [r0, #0]
    for (cp = buf; *cp != '\0'; cp++) {
   1c4f4:	3001      	adds	r0, #1
   1c4f6:	7803      	ldrb	r3, [r0, #0]
   1c4f8:	b32b      	cbz	r3, 1c546 <conf_line_parse+0x92>
        switch (state) {
   1c4fa:	f1bc 0f03 	cmp.w	ip, #3
   1c4fe:	d8f9      	bhi.n	1c4f4 <conf_line_parse+0x40>
   1c500:	f20f 0e04 	addw	lr, pc, #4
   1c504:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
   1c508:	0001c4c5 	.word	0x0001c4c5
   1c50c:	0001c4dd 	.word	0x0001c4dd
   1c510:	0001c523 	.word	0x0001c523
   1c514:	0001c53b 	.word	0x0001c53b
                *cp = '\0';
   1c518:	2300      	movs	r3, #0
   1c51a:	7003      	strb	r3, [r0, #0]
                state = FIND_VAL;
   1c51c:	f04f 0c02 	mov.w	ip, #2
   1c520:	e7e8      	b.n	1c4f4 <conf_line_parse+0x40>
   1c522:	2b20      	cmp	r3, #32
   1c524:	d0e6      	beq.n	1c4f4 <conf_line_parse+0x40>
   1c526:	2b0a      	cmp	r3, #10
   1c528:	d0e4      	beq.n	1c4f4 <conf_line_parse+0x40>
   1c52a:	2b09      	cmp	r3, #9
   1c52c:	d0e2      	beq.n	1c4f4 <conf_line_parse+0x40>
   1c52e:	2b0d      	cmp	r3, #13
   1c530:	d0e0      	beq.n	1c4f4 <conf_line_parse+0x40>
            }
            break;
        case FIND_VAL:
            if (!isspace((unsigned char)*cp)) {
                *valp = cp;
   1c532:	6010      	str	r0, [r2, #0]
                state = FIND_VAL_END;
   1c534:	f04f 0c03 	mov.w	ip, #3
   1c538:	e7dc      	b.n	1c4f4 <conf_line_parse+0x40>
	return (__c >= 0x20 && __c <= 0x7e);
   1c53a:	3b20      	subs	r3, #32
            }
            break;
        case FIND_VAL_END:
            if (!isprint((unsigned char)*cp)) {
   1c53c:	2b5e      	cmp	r3, #94	; 0x5e
   1c53e:	d9d9      	bls.n	1c4f4 <conf_line_parse+0x40>
                *cp = '\0';
   1c540:	2300      	movs	r3, #0
   1c542:	7003      	strb	r3, [r0, #0]
   1c544:	e7d6      	b.n	1c4f4 <conf_line_parse+0x40>
            }
            break;
        }
    }
    if (state == FIND_VAL_END || state == FIND_VAL) {
   1c546:	f1ac 0c02 	sub.w	ip, ip, #2
   1c54a:	fa5f fc8c 	uxtb.w	ip, ip
   1c54e:	f1bc 0f01 	cmp.w	ip, #1
   1c552:	d802      	bhi.n	1c55a <conf_line_parse+0xa6>
        return 0;
   1c554:	2000      	movs	r0, #0
    } else {
        return -1;
    }
}
   1c556:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   1c55a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c55e:	e7fa      	b.n	1c556 <conf_line_parse+0xa2>
    if (state == FIND_VAL_END || state == FIND_VAL) {
   1c560:	f1ac 0c02 	sub.w	ip, ip, #2
   1c564:	fa5f fc8c 	uxtb.w	ip, ip
   1c568:	f1bc 0f01 	cmp.w	ip, #1
   1c56c:	d801      	bhi.n	1c572 <conf_line_parse+0xbe>
        return 0;
   1c56e:	2000      	movs	r0, #0
   1c570:	4770      	bx	lr
        return -1;
   1c572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c576:	4770      	bx	lr

0001c578 <conf_line_make>:

int
conf_line_make(char *dst, int dlen, const char *name, const char *value)
{
   1c578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c57c:	4606      	mov	r6, r0
   1c57e:	4689      	mov	r9, r1
   1c580:	4690      	mov	r8, r2
   1c582:	461f      	mov	r7, r3
    int nlen;
    int vlen;
    int off;

    nlen = strlen(name);
   1c584:	4610      	mov	r0, r2
   1c586:	f7ef fdb9 	bl	c0fc <strlen>
   1c58a:	4605      	mov	r5, r0
    if (value) {
   1c58c:	b1e7      	cbz	r7, 1c5c8 <conf_line_make+0x50>
        vlen = strlen(value);
   1c58e:	4638      	mov	r0, r7
   1c590:	f7ef fdb4 	bl	c0fc <strlen>
   1c594:	4604      	mov	r4, r0
    } else {
        vlen = 0;
    }
    if (nlen + vlen + 2 > dlen) {
   1c596:	1963      	adds	r3, r4, r5
   1c598:	3301      	adds	r3, #1
   1c59a:	454b      	cmp	r3, r9
   1c59c:	da16      	bge.n	1c5cc <conf_line_make+0x54>
        return -1;
    }
    memcpy(dst, name, nlen);
   1c59e:	462a      	mov	r2, r5
   1c5a0:	4641      	mov	r1, r8
   1c5a2:	4630      	mov	r0, r6
   1c5a4:	f7ef fd66 	bl	c074 <memcpy>
    off = nlen;
    dst[off++] = '=';
   1c5a8:	f105 0801 	add.w	r8, r5, #1
   1c5ac:	233d      	movs	r3, #61	; 0x3d
   1c5ae:	5573      	strb	r3, [r6, r5]

    memcpy(dst + off, value, vlen);
   1c5b0:	4622      	mov	r2, r4
   1c5b2:	4639      	mov	r1, r7
   1c5b4:	eb06 0008 	add.w	r0, r6, r8
   1c5b8:	f7ef fd5c 	bl	c074 <memcpy>
    off += vlen;
   1c5bc:	eb04 0008 	add.w	r0, r4, r8
    dst[off] = '\0';
   1c5c0:	2300      	movs	r3, #0
   1c5c2:	5433      	strb	r3, [r6, r0]

    return off;
}
   1c5c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        vlen = 0;
   1c5c8:	2400      	movs	r4, #0
   1c5ca:	e7e4      	b.n	1c596 <conf_line_make+0x1e>
        return -1;
   1c5cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c5d0:	e7f8      	b.n	1c5c4 <conf_line_make+0x4c>

0001c5d2 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1c5d2:	b570      	push	{r4, r5, r6, lr}
   1c5d4:	b086      	sub	sp, #24
   1c5d6:	4605      	mov	r5, r0
   1c5d8:	460e      	mov	r6, r1
   1c5da:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1c5dc:	2300      	movs	r3, #0
   1c5de:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1c5e0:	f001 fa9c 	bl	1db1c <mfg_init>

    mfg_open(&reader);
   1c5e4:	a801      	add	r0, sp, #4
   1c5e6:	f001 fabf 	bl	1db68 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1c5ea:	6823      	ldr	r3, [r4, #0]
   1c5ec:	42ab      	cmp	r3, r5
   1c5ee:	da22      	bge.n	1c636 <flash_map_read_mfg+0x64>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1c5f0:	2102      	movs	r1, #2
   1c5f2:	a801      	add	r0, sp, #4
   1c5f4:	f001 fa7a 	bl	1daec <mfg_seek_next_with_type>
        switch (rc) {
   1c5f8:	f110 0f0f 	cmn.w	r0, #15
   1c5fc:	d01e      	beq.n	1c63c <flash_map_read_mfg+0x6a>
   1c5fe:	b9f0      	cbnz	r0, 1c63e <flash_map_read_mfg+0x6c>
            return 0;
        default:
            return rc;
        }

        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1c600:	a903      	add	r1, sp, #12
   1c602:	a801      	add	r0, sp, #4
   1c604:	f001 fa7f 	bl	1db06 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1c608:	b9c8      	cbnz	r0, 1c63e <flash_map_read_mfg+0x6c>
            return rc;
        }

        fap = out_areas + *out_num_areas;
   1c60a:	6823      	ldr	r3, [r4, #0]
   1c60c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1c610:	eb06 0283 	add.w	r2, r6, r3, lsl #2
        fap->fa_id = meta_flash_area.area_id;
   1c614:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1c618:	f806 1023 	strb.w	r1, [r6, r3, lsl #2]
        fap->fa_device_id = meta_flash_area.device_id;
   1c61c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1c620:	7053      	strb	r3, [r2, #1]
        fap->fa_off = meta_flash_area.offset;
   1c622:	f8dd 300e 	ldr.w	r3, [sp, #14]
   1c626:	6053      	str	r3, [r2, #4]
        fap->fa_size = meta_flash_area.size;
   1c628:	f8dd 3012 	ldr.w	r3, [sp, #18]
   1c62c:	6093      	str	r3, [r2, #8]

        (*out_num_areas)++;
   1c62e:	6823      	ldr	r3, [r4, #0]
   1c630:	3301      	adds	r3, #1
   1c632:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1c634:	e7d9      	b.n	1c5ea <flash_map_read_mfg+0x18>
            return -1;
   1c636:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c63a:	e000      	b.n	1c63e <flash_map_read_mfg+0x6c>
        switch (rc) {
   1c63c:	2000      	movs	r0, #0
    }
}
   1c63e:	b006      	add	sp, #24
   1c640:	bd70      	pop	{r4, r5, r6, pc}
	...

0001c644 <flash_area_open>:
{
   1c644:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1c646:	4b0e      	ldr	r3, [pc, #56]	; (1c680 <flash_area_open+0x3c>)
   1c648:	681c      	ldr	r4, [r3, #0]
   1c64a:	b1ac      	cbz	r4, 1c678 <flash_area_open+0x34>
    for (i = 0; i < flash_map_entries; i++) {
   1c64c:	2300      	movs	r3, #0
   1c64e:	4a0d      	ldr	r2, [pc, #52]	; (1c684 <flash_area_open+0x40>)
   1c650:	6812      	ldr	r2, [r2, #0]
   1c652:	429a      	cmp	r2, r3
   1c654:	dd0c      	ble.n	1c670 <flash_area_open+0x2c>
        area = flash_map + i;
   1c656:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1c65a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
        if (area->fa_id == id) {
   1c65e:	f814 2022 	ldrb.w	r2, [r4, r2, lsl #2]
   1c662:	4282      	cmp	r2, r0
   1c664:	d001      	beq.n	1c66a <flash_area_open+0x26>
    for (i = 0; i < flash_map_entries; i++) {
   1c666:	3301      	adds	r3, #1
   1c668:	e7f1      	b.n	1c64e <flash_area_open+0xa>
            *fap = area;
   1c66a:	600d      	str	r5, [r1, #0]
            return 0;
   1c66c:	2000      	movs	r0, #0
   1c66e:	e001      	b.n	1c674 <flash_area_open+0x30>
    return SYS_ENOENT;
   1c670:	f06f 0003 	mvn.w	r0, #3
}
   1c674:	bc30      	pop	{r4, r5}
   1c676:	4770      	bx	lr
        return SYS_EACCES;
   1c678:	f06f 0006 	mvn.w	r0, #6
   1c67c:	e7fa      	b.n	1c674 <flash_area_open+0x30>
   1c67e:	bf00      	nop
   1c680:	20006910 	.word	0x20006910
   1c684:	20006914 	.word	0x20006914

0001c688 <flash_area_to_sectors>:
{
   1c688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c68c:	b084      	sub	sp, #16
   1c68e:	460f      	mov	r7, r1
   1c690:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
   1c692:	fa5f f880 	uxtb.w	r8, r0
   1c696:	a903      	add	r1, sp, #12
   1c698:	4640      	mov	r0, r8
   1c69a:	f7ff ffd3 	bl	1c644 <flash_area_open>
    if (rc != 0) {
   1c69e:	4681      	mov	r9, r0
   1c6a0:	b118      	cbz	r0, 1c6aa <flash_area_to_sectors+0x22>
}
   1c6a2:	4648      	mov	r0, r9
   1c6a4:	b004      	add	sp, #16
   1c6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
   1c6aa:	2300      	movs	r3, #0
   1c6ac:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
   1c6ae:	9b03      	ldr	r3, [sp, #12]
   1c6b0:	7858      	ldrb	r0, [r3, #1]
   1c6b2:	f7f5 fd47 	bl	12144 <hal_bsp_flash_dev>
   1c6b6:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   1c6b8:	464c      	mov	r4, r9
   1c6ba:	e003      	b.n	1c6c4 <flash_area_to_sectors+0x3c>
            (*cnt)++;
   1c6bc:	683b      	ldr	r3, [r7, #0]
   1c6be:	3301      	adds	r3, #1
   1c6c0:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   1c6c2:	3401      	adds	r4, #1
   1c6c4:	68eb      	ldr	r3, [r5, #12]
   1c6c6:	42a3      	cmp	r3, r4
   1c6c8:	ddeb      	ble.n	1c6a2 <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   1c6ca:	682b      	ldr	r3, [r5, #0]
   1c6cc:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   1c6d0:	ab01      	add	r3, sp, #4
   1c6d2:	aa02      	add	r2, sp, #8
   1c6d4:	4621      	mov	r1, r4
   1c6d6:	4628      	mov	r0, r5
   1c6d8:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
   1c6da:	9903      	ldr	r1, [sp, #12]
   1c6dc:	684b      	ldr	r3, [r1, #4]
   1c6de:	9a02      	ldr	r2, [sp, #8]
   1c6e0:	4293      	cmp	r3, r2
   1c6e2:	d8ee      	bhi.n	1c6c2 <flash_area_to_sectors+0x3a>
   1c6e4:	6889      	ldr	r1, [r1, #8]
   1c6e6:	440b      	add	r3, r1
   1c6e8:	429a      	cmp	r2, r3
   1c6ea:	d2ea      	bcs.n	1c6c2 <flash_area_to_sectors+0x3a>
            if (ret) {
   1c6ec:	2e00      	cmp	r6, #0
   1c6ee:	d0e5      	beq.n	1c6bc <flash_area_to_sectors+0x34>
                ret->fa_id = id;
   1c6f0:	f886 8000 	strb.w	r8, [r6]
                ret->fa_device_id = fa->fa_device_id;
   1c6f4:	9b03      	ldr	r3, [sp, #12]
   1c6f6:	785b      	ldrb	r3, [r3, #1]
   1c6f8:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
   1c6fa:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
   1c6fc:	9b01      	ldr	r3, [sp, #4]
   1c6fe:	60b3      	str	r3, [r6, #8]
                ret++;
   1c700:	360c      	adds	r6, #12
   1c702:	e7db      	b.n	1c6bc <flash_area_to_sectors+0x34>

0001c704 <flash_area_read>:
{
   1c704:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1c706:	6884      	ldr	r4, [r0, #8]
   1c708:	428c      	cmp	r4, r1
   1c70a:	d309      	bcc.n	1c720 <flash_area_read+0x1c>
   1c70c:	eb01 0c03 	add.w	ip, r1, r3
   1c710:	4564      	cmp	r4, ip
   1c712:	d308      	bcc.n	1c726 <flash_area_read+0x22>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1c714:	6844      	ldr	r4, [r0, #4]
   1c716:	4421      	add	r1, r4
   1c718:	7840      	ldrb	r0, [r0, #1]
   1c71a:	f002 fe16 	bl	1f34a <hal_flash_read>
}
   1c71e:	bd10      	pop	{r4, pc}
        return -1;
   1c720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c724:	e7fb      	b.n	1c71e <flash_area_read+0x1a>
   1c726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c72a:	e7f8      	b.n	1c71e <flash_area_read+0x1a>

0001c72c <flash_area_write>:
{
   1c72c:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1c72e:	6884      	ldr	r4, [r0, #8]
   1c730:	428c      	cmp	r4, r1
   1c732:	d309      	bcc.n	1c748 <flash_area_write+0x1c>
   1c734:	eb01 0c03 	add.w	ip, r1, r3
   1c738:	4564      	cmp	r4, ip
   1c73a:	d308      	bcc.n	1c74e <flash_area_write+0x22>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
   1c73c:	6844      	ldr	r4, [r0, #4]
   1c73e:	4421      	add	r1, r4
   1c740:	7840      	ldrb	r0, [r0, #1]
   1c742:	f002 fe2b 	bl	1f39c <hal_flash_write>
}
   1c746:	bd10      	pop	{r4, pc}
        return -1;
   1c748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c74c:	e7fb      	b.n	1c746 <flash_area_write+0x1a>
   1c74e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c752:	e7f8      	b.n	1c746 <flash_area_write+0x1a>

0001c754 <flash_area_erase>:
{
   1c754:	b508      	push	{r3, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1c756:	6883      	ldr	r3, [r0, #8]
   1c758:	428b      	cmp	r3, r1
   1c75a:	d309      	bcc.n	1c770 <flash_area_erase+0x1c>
   1c75c:	eb01 0c02 	add.w	ip, r1, r2
   1c760:	4563      	cmp	r3, ip
   1c762:	d308      	bcc.n	1c776 <flash_area_erase+0x22>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
   1c764:	6843      	ldr	r3, [r0, #4]
   1c766:	4419      	add	r1, r3
   1c768:	7840      	ldrb	r0, [r0, #1]
   1c76a:	f002 fe4f 	bl	1f40c <hal_flash_erase>
}
   1c76e:	bd08      	pop	{r3, pc}
        return -1;
   1c770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c774:	e7fb      	b.n	1c76e <flash_area_erase+0x1a>
   1c776:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c77a:	e7f8      	b.n	1c76e <flash_area_erase+0x1a>

0001c77c <flash_area_align>:
{
   1c77c:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
   1c77e:	7840      	ldrb	r0, [r0, #1]
   1c780:	f002 fdd3 	bl	1f32a <hal_flash_align>
}
   1c784:	bd08      	pop	{r3, pc}

0001c786 <flash_area_erased_val>:
{
   1c786:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
   1c788:	7840      	ldrb	r0, [r0, #1]
   1c78a:	f002 fdd6 	bl	1f33a <hal_flash_erased_val>
}
   1c78e:	bd08      	pop	{r3, pc}

0001c790 <flash_area_is_empty>:
{
   1c790:	b510      	push	{r4, lr}
   1c792:	460c      	mov	r4, r1
    *empty = false;
   1c794:	2300      	movs	r3, #0
   1c796:	700b      	strb	r3, [r1, #0]
    rc = hal_flash_isempty_no_buf(fa->fa_device_id, fa->fa_off, fa->fa_size);
   1c798:	6882      	ldr	r2, [r0, #8]
   1c79a:	6841      	ldr	r1, [r0, #4]
   1c79c:	7840      	ldrb	r0, [r0, #1]
   1c79e:	f002 fee5 	bl	1f56c <hal_flash_isempty_no_buf>
    if (rc < 0) {
   1c7a2:	2800      	cmp	r0, #0
   1c7a4:	db02      	blt.n	1c7ac <flash_area_is_empty+0x1c>
    } else if (rc == 1) {
   1c7a6:	2801      	cmp	r0, #1
   1c7a8:	d001      	beq.n	1c7ae <flash_area_is_empty+0x1e>
    return 0;
   1c7aa:	2000      	movs	r0, #0
}
   1c7ac:	bd10      	pop	{r4, pc}
        *empty = true;
   1c7ae:	2301      	movs	r3, #1
   1c7b0:	7023      	strb	r3, [r4, #0]
    return 0;
   1c7b2:	2000      	movs	r0, #0
   1c7b4:	e7fa      	b.n	1c7ac <flash_area_is_empty+0x1c>

0001c7b6 <flash_area_read_is_empty>:
{
   1c7b6:	b510      	push	{r4, lr}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
   1c7b8:	6844      	ldr	r4, [r0, #4]
   1c7ba:	4421      	add	r1, r4
   1c7bc:	7840      	ldrb	r0, [r0, #1]
   1c7be:	f002 fea4 	bl	1f50a <hal_flash_isempty>
}
   1c7c2:	bd10      	pop	{r4, pc}

0001c7c4 <flash_area_id_from_image_slot>:
    switch (slot) {
   1c7c4:	b150      	cbz	r0, 1c7dc <flash_area_id_from_image_slot+0x18>
{
   1c7c6:	b508      	push	{r3, lr}
    switch (slot) {
   1c7c8:	2801      	cmp	r0, #1
   1c7ca:	d101      	bne.n	1c7d0 <flash_area_id_from_image_slot+0xc>
        return FLASH_AREA_IMAGE_1;
   1c7cc:	2002      	movs	r0, #2
}
   1c7ce:	bd08      	pop	{r3, pc}
        assert(0);
   1c7d0:	2300      	movs	r3, #0
   1c7d2:	461a      	mov	r2, r3
   1c7d4:	4619      	mov	r1, r3
   1c7d6:	4618      	mov	r0, r3
   1c7d8:	f7ec fbbc 	bl	8f54 <__assert_func>
    switch (slot) {
   1c7dc:	2001      	movs	r0, #1
}
   1c7de:	4770      	bx	lr

0001c7e0 <flash_map_init>:

void
flash_map_init(void)
{
   1c7e0:	b510      	push	{r4, lr}
   1c7e2:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1c7e4:	4b14      	ldr	r3, [pc, #80]	; (1c838 <flash_map_init+0x58>)
   1c7e6:	781b      	ldrb	r3, [r3, #0]
   1c7e8:	b303      	cbz	r3, 1c82c <flash_map_init+0x4c>

    rc = hal_flash_init();
   1c7ea:	f002 fd8a 	bl	1f302 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1c7ee:	b138      	cbz	r0, 1c800 <flash_map_init+0x20>
   1c7f0:	2000      	movs	r0, #0
   1c7f2:	9000      	str	r0, [sp, #0]
   1c7f4:	4b11      	ldr	r3, [pc, #68]	; (1c83c <flash_map_init+0x5c>)
   1c7f6:	681c      	ldr	r4, [r3, #0]
   1c7f8:	4603      	mov	r3, r0
   1c7fa:	4602      	mov	r2, r0
   1c7fc:	4601      	mov	r1, r0
   1c7fe:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1c800:	4b0f      	ldr	r3, [pc, #60]	; (1c840 <flash_map_init+0x60>)
   1c802:	4a10      	ldr	r2, [pc, #64]	; (1c844 <flash_map_init+0x64>)
   1c804:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1c806:	4b10      	ldr	r3, [pc, #64]	; (1c848 <flash_map_init+0x68>)
   1c808:	2206      	movs	r2, #6
   1c80a:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1c80c:	aa03      	add	r2, sp, #12
   1c80e:	490f      	ldr	r1, [pc, #60]	; (1c84c <flash_map_init+0x6c>)
   1c810:	200a      	movs	r0, #10
   1c812:	f7ff fede 	bl	1c5d2 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1c816:	b938      	cbnz	r0, 1c828 <flash_map_init+0x48>
   1c818:	9b03      	ldr	r3, [sp, #12]
   1c81a:	2b00      	cmp	r3, #0
   1c81c:	dd04      	ble.n	1c828 <flash_map_init+0x48>
        flash_map = mfg_areas;
   1c81e:	4a08      	ldr	r2, [pc, #32]	; (1c840 <flash_map_init+0x60>)
   1c820:	490a      	ldr	r1, [pc, #40]	; (1c84c <flash_map_init+0x6c>)
   1c822:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1c824:	4a08      	ldr	r2, [pc, #32]	; (1c848 <flash_map_init+0x68>)
   1c826:	6013      	str	r3, [r2, #0]
    }
}
   1c828:	b004      	add	sp, #16
   1c82a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1c82c:	461a      	mov	r2, r3
   1c82e:	4619      	mov	r1, r3
   1c830:	4618      	mov	r0, r3
   1c832:	f7ec fb8f 	bl	8f54 <__assert_func>
   1c836:	bf00      	nop
   1c838:	200065ac 	.word	0x200065ac
   1c83c:	200001ec 	.word	0x200001ec
   1c840:	20006910 	.word	0x20006910
   1c844:	00023c24 	.word	0x00023c24
   1c848:	20006914 	.word	0x20006914
   1c84c:	20006918 	.word	0x20006918

0001c850 <log_registered>:
static int
log_registered(struct log *log)
{
    struct log *cur;

    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   1c850:	4b05      	ldr	r3, [pc, #20]	; (1c868 <log_registered+0x18>)
   1c852:	681b      	ldr	r3, [r3, #0]
   1c854:	e000      	b.n	1c858 <log_registered+0x8>
   1c856:	68db      	ldr	r3, [r3, #12]
   1c858:	b11b      	cbz	r3, 1c862 <log_registered+0x12>
        if (cur == log) {
   1c85a:	4283      	cmp	r3, r0
   1c85c:	d1fb      	bne.n	1c856 <log_registered+0x6>
            return 1;
   1c85e:	2001      	movs	r0, #1
        }
    }

    return 0;
}
   1c860:	4770      	bx	lr
    return 0;
   1c862:	2000      	movs	r0, #0
   1c864:	4770      	bx	lr
   1c866:	bf00      	nop
   1c868:	20002bc0 	.word	0x20002bc0

0001c86c <log_chk_type>:
            break;
    }
#endif

    return rc;
}
   1c86c:	2000      	movs	r0, #0
   1c86e:	4770      	bx	lr

0001c870 <log_chk_max_entry_len>:
log_chk_max_entry_len(struct log *log, uint16_t len)
{
    int rc;

    rc = OS_OK;
    if (log->l_max_entry_len != 0) {
   1c870:	8ac3      	ldrh	r3, [r0, #22]
   1c872:	b11b      	cbz	r3, 1c87c <log_chk_max_entry_len+0xc>
        if (len > log->l_max_entry_len) {
   1c874:	428b      	cmp	r3, r1
   1c876:	d303      	bcc.n	1c880 <log_chk_max_entry_len+0x10>
    rc = OS_OK;
   1c878:	2000      	movs	r0, #0
   1c87a:	4770      	bx	lr
   1c87c:	2000      	movs	r0, #0
   1c87e:	4770      	bx	lr
            LOG_STATS_INC(log, too_long);
            rc = OS_ENOMEM;
   1c880:	2001      	movs	r0, #1
        }
    }

    return rc;
}
   1c882:	4770      	bx	lr

0001c884 <log_call_append_cb>:
/**
 * Calls the given log's append callback, if it has one.
 */
static void
log_call_append_cb(struct log *log, uint32_t idx)
{
   1c884:	b500      	push	{lr}
   1c886:	b083      	sub	sp, #12
     * preventing a TOCTTOU race.
     * (This all assumes that function pointer reads and writes are atomic.)
     */
    log_append_cb * volatile cb;

    cb = log->l_append_cb;
   1c888:	6903      	ldr	r3, [r0, #16]
   1c88a:	9301      	str	r3, [sp, #4]
    if (cb != NULL) {
   1c88c:	9b01      	ldr	r3, [sp, #4]
   1c88e:	b10b      	cbz	r3, 1c894 <log_call_append_cb+0x10>
        cb(log, idx);
   1c890:	9b01      	ldr	r3, [sp, #4]
   1c892:	4798      	blx	r3
    }
}
   1c894:	b003      	add	sp, #12
   1c896:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001c89c <log_append_prepare>:
{
   1c89c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c8a0:	b085      	sub	sp, #20
   1c8a2:	4605      	mov	r5, r0
   1c8a4:	4688      	mov	r8, r1
   1c8a6:	4614      	mov	r4, r2
   1c8a8:	461f      	mov	r7, r3
   1c8aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    rc = log_chk_type(etype);
   1c8ac:	4618      	mov	r0, r3
   1c8ae:	f7ff ffdd 	bl	1c86c <log_chk_type>
    assert(rc == OS_OK);
   1c8b2:	2800      	cmp	r0, #0
   1c8b4:	d136      	bne.n	1c924 <log_append_prepare+0x88>
    if (log->l_name == NULL || log->l_log == NULL) {
   1c8b6:	682b      	ldr	r3, [r5, #0]
   1c8b8:	2b00      	cmp	r3, #0
   1c8ba:	d063      	beq.n	1c984 <log_append_prepare+0xe8>
   1c8bc:	686b      	ldr	r3, [r5, #4]
   1c8be:	2b00      	cmp	r3, #0
   1c8c0:	d063      	beq.n	1c98a <log_append_prepare+0xee>
    if (level > LOG_LEVEL_MAX) {
   1c8c2:	2c0f      	cmp	r4, #15
   1c8c4:	d900      	bls.n	1c8c8 <log_append_prepare+0x2c>
        level = LOG_LEVEL_MAX;
   1c8c6:	240f      	movs	r4, #15
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   1c8c8:	681b      	ldr	r3, [r3, #0]
   1c8ca:	2b02      	cmp	r3, #2
   1c8cc:	d030      	beq.n	1c930 <log_append_prepare+0x94>
    if (level < log->l_level) {
   1c8ce:	7d2b      	ldrb	r3, [r5, #20]
   1c8d0:	42a3      	cmp	r3, r4
   1c8d2:	d85d      	bhi.n	1c990 <log_append_prepare+0xf4>
    if (level < log_level_get(module)) {
   1c8d4:	4640      	mov	r0, r8
   1c8d6:	f000 fa79 	bl	1cdcc <log_level_get>
   1c8da:	42a0      	cmp	r0, r4
   1c8dc:	d85b      	bhi.n	1c996 <log_append_prepare+0xfa>
    OS_ENTER_CRITICAL(sr);
   1c8de:	f7ed fd43 	bl	a368 <os_arch_save_sr>
    idx = g_log_info.li_next_index++;
   1c8e2:	4b2e      	ldr	r3, [pc, #184]	; (1c99c <log_append_prepare+0x100>)
   1c8e4:	681d      	ldr	r5, [r3, #0]
   1c8e6:	1c6a      	adds	r2, r5, #1
   1c8e8:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1c8ea:	f7ed fd43 	bl	a374 <os_arch_restore_sr>
    rc = os_gettimeofday(&tv, NULL);
   1c8ee:	2100      	movs	r1, #0
   1c8f0:	4668      	mov	r0, sp
   1c8f2:	f7ed fc4f 	bl	a194 <os_gettimeofday>
    if (rc || tv.tv_sec < UTC01_01_2016) {
   1c8f6:	4681      	mov	r9, r0
   1c8f8:	b938      	cbnz	r0, 1c90a <log_append_prepare+0x6e>
   1c8fa:	9800      	ldr	r0, [sp, #0]
   1c8fc:	9901      	ldr	r1, [sp, #4]
   1c8fe:	4b28      	ldr	r3, [pc, #160]	; (1c9a0 <log_append_prepare+0x104>)
   1c900:	4283      	cmp	r3, r0
   1c902:	f04f 0300 	mov.w	r3, #0
   1c906:	418b      	sbcs	r3, r1
   1c908:	db16      	blt.n	1c938 <log_append_prepare+0x9c>
        ue->ue_ts = os_get_uptime_usec();
   1c90a:	f7ed fce7 	bl	a2dc <os_get_uptime_usec>
   1c90e:	6030      	str	r0, [r6, #0]
   1c910:	6071      	str	r1, [r6, #4]
    ue->ue_level = level;
   1c912:	7374      	strb	r4, [r6, #13]
    ue->ue_module = module;
   1c914:	f886 800c 	strb.w	r8, [r6, #12]
    ue->ue_index = idx;
   1c918:	60b5      	str	r5, [r6, #8]
    assert(etype == LOG_ETYPE_STRING);
   1c91a:	bb6f      	cbnz	r7, 1c978 <log_append_prepare+0xdc>
}
   1c91c:	4648      	mov	r0, r9
   1c91e:	b005      	add	sp, #20
   1c920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(rc == OS_OK);
   1c924:	2300      	movs	r3, #0
   1c926:	461a      	mov	r2, r3
   1c928:	4619      	mov	r1, r3
   1c92a:	4618      	mov	r0, r3
   1c92c:	f7ec fb12 	bl	8f54 <__assert_func>
        log_written = 1;
   1c930:	4b1c      	ldr	r3, [pc, #112]	; (1c9a4 <log_append_prepare+0x108>)
   1c932:	2201      	movs	r2, #1
   1c934:	701a      	strb	r2, [r3, #0]
   1c936:	e7ca      	b.n	1c8ce <log_append_prepare+0x32>
        ue->ue_ts = tv.tv_sec * 1000000 + tv.tv_usec;
   1c938:	014a      	lsls	r2, r1, #5
   1c93a:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   1c93e:	0143      	lsls	r3, r0, #5
   1c940:	1a1b      	subs	r3, r3, r0
   1c942:	eb62 0201 	sbc.w	r2, r2, r1
   1c946:	0252      	lsls	r2, r2, #9
   1c948:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
   1c94c:	025b      	lsls	r3, r3, #9
   1c94e:	181b      	adds	r3, r3, r0
   1c950:	eb41 0c02 	adc.w	ip, r1, r2
   1c954:	ea4f 1e8c 	mov.w	lr, ip, lsl #6
   1c958:	ea4e 6e93 	orr.w	lr, lr, r3, lsr #26
   1c95c:	019a      	lsls	r2, r3, #6
   1c95e:	1ad3      	subs	r3, r2, r3
   1c960:	eb6e 020c 	sbc.w	r2, lr, ip
   1c964:	181b      	adds	r3, r3, r0
   1c966:	eb41 0102 	adc.w	r1, r1, r2
   1c96a:	9a02      	ldr	r2, [sp, #8]
   1c96c:	189b      	adds	r3, r3, r2
   1c96e:	eb41 71e2 	adc.w	r1, r1, r2, asr #31
   1c972:	6033      	str	r3, [r6, #0]
   1c974:	6071      	str	r1, [r6, #4]
   1c976:	e7cc      	b.n	1c912 <log_append_prepare+0x76>
    assert(etype == LOG_ETYPE_STRING);
   1c978:	2300      	movs	r3, #0
   1c97a:	461a      	mov	r2, r3
   1c97c:	4619      	mov	r1, r3
   1c97e:	4618      	mov	r0, r3
   1c980:	f7ec fae8 	bl	8f54 <__assert_func>
        rc = -1;
   1c984:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1c988:	e7c8      	b.n	1c91c <log_append_prepare+0x80>
   1c98a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1c98e:	e7c5      	b.n	1c91c <log_append_prepare+0x80>
        rc = -1;
   1c990:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1c994:	e7c2      	b.n	1c91c <log_append_prepare+0x80>
        rc = -1;
   1c996:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    return (rc);
   1c99a:	e7bf      	b.n	1c91c <log_append_prepare+0x80>
   1c99c:	20006990 	.word	0x20006990
   1c9a0:	5685c17f 	.word	0x5685c17f
   1c9a4:	2000699c 	.word	0x2000699c

0001c9a8 <log_init>:
{
   1c9a8:	b510      	push	{r4, lr}
   1c9aa:	b082      	sub	sp, #8
    SYSINIT_ASSERT_ACTIVE();
   1c9ac:	4b11      	ldr	r3, [pc, #68]	; (1c9f4 <log_init+0x4c>)
   1c9ae:	781b      	ldrb	r3, [r3, #0]
   1c9b0:	b1d3      	cbz	r3, 1c9e8 <log_init+0x40>
    memset(g_log_module_list, 0, sizeof(g_log_module_list));
   1c9b2:	2300      	movs	r3, #0
   1c9b4:	4a10      	ldr	r2, [pc, #64]	; (1c9f8 <log_init+0x50>)
   1c9b6:	6013      	str	r3, [r2, #0]
    log_written = 0;
   1c9b8:	4a10      	ldr	r2, [pc, #64]	; (1c9fc <log_init+0x54>)
   1c9ba:	7013      	strb	r3, [r2, #0]
    STAILQ_INIT(&g_log_list);
   1c9bc:	4a10      	ldr	r2, [pc, #64]	; (1ca00 <log_init+0x58>)
   1c9be:	6013      	str	r3, [r2, #0]
   1c9c0:	6052      	str	r2, [r2, #4]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
   1c9c2:	4a10      	ldr	r2, [pc, #64]	; (1ca04 <log_init+0x5c>)
   1c9c4:	2102      	movs	r1, #2
   1c9c6:	7111      	strb	r1, [r2, #4]
    g_log_info.li_next_index = 0;
   1c9c8:	6013      	str	r3, [r2, #0]
    rc = log_nmgr_register_group();
   1c9ca:	f000 fe07 	bl	1d5dc <log_nmgr_register_group>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1c9ce:	b138      	cbz	r0, 1c9e0 <log_init+0x38>
   1c9d0:	2000      	movs	r0, #0
   1c9d2:	9000      	str	r0, [sp, #0]
   1c9d4:	4b0c      	ldr	r3, [pc, #48]	; (1ca08 <log_init+0x60>)
   1c9d6:	681c      	ldr	r4, [r3, #0]
   1c9d8:	4603      	mov	r3, r0
   1c9da:	4602      	mov	r2, r0
   1c9dc:	4601      	mov	r1, r0
   1c9de:	47a0      	blx	r4
    log_console_init();
   1c9e0:	f000 f9ce 	bl	1cd80 <log_console_init>
}
   1c9e4:	b002      	add	sp, #8
   1c9e6:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1c9e8:	461a      	mov	r2, r3
   1c9ea:	4619      	mov	r1, r3
   1c9ec:	4618      	mov	r0, r3
   1c9ee:	f7ec fab1 	bl	8f54 <__assert_func>
   1c9f2:	bf00      	nop
   1c9f4:	200065ac 	.word	0x200065ac
   1c9f8:	20006998 	.word	0x20006998
   1c9fc:	2000699c 	.word	0x2000699c
   1ca00:	20002bc0 	.word	0x20002bc0
   1ca04:	20006990 	.word	0x20006990
   1ca08:	200001ec 	.word	0x200001ec

0001ca0c <log_list_get_next>:
    if (log == NULL) {
   1ca0c:	b108      	cbz	r0, 1ca12 <log_list_get_next+0x6>
        next = STAILQ_NEXT(log, l_next);
   1ca0e:	68c0      	ldr	r0, [r0, #12]
}
   1ca10:	4770      	bx	lr
        next = STAILQ_FIRST(&g_log_list);
   1ca12:	4b01      	ldr	r3, [pc, #4]	; (1ca18 <log_list_get_next+0xc>)
   1ca14:	6818      	ldr	r0, [r3, #0]
   1ca16:	4770      	bx	lr
   1ca18:	20002bc0 	.word	0x20002bc0

0001ca1c <log_module_get_name>:
    if (module < LOG_MODULE_PERUSER) {
   1ca1c:	283f      	cmp	r0, #63	; 0x3f
   1ca1e:	d81a      	bhi.n	1ca56 <log_module_get_name+0x3a>
        switch (module) {
   1ca20:	2808      	cmp	r0, #8
   1ca22:	d806      	bhi.n	1ca32 <log_module_get_name+0x16>
   1ca24:	e8df f000 	tbb	[pc, r0]
   1ca28:	0b09071e 	.word	0x0b09071e
   1ca2c:	13110f0d 	.word	0x13110f0d
   1ca30:	15          	.byte	0x15
   1ca31:	00          	.byte	0x00
   1ca32:	2000      	movs	r0, #0
   1ca34:	4770      	bx	lr
            return "OS";
   1ca36:	480d      	ldr	r0, [pc, #52]	; (1ca6c <log_module_get_name+0x50>)
   1ca38:	4770      	bx	lr
            return "NEWTMGR";
   1ca3a:	480d      	ldr	r0, [pc, #52]	; (1ca70 <log_module_get_name+0x54>)
   1ca3c:	4770      	bx	lr
            return "NIMBLE_CTLR";
   1ca3e:	480d      	ldr	r0, [pc, #52]	; (1ca74 <log_module_get_name+0x58>)
   1ca40:	4770      	bx	lr
            return "NIMBLE_HOST";
   1ca42:	480d      	ldr	r0, [pc, #52]	; (1ca78 <log_module_get_name+0x5c>)
   1ca44:	4770      	bx	lr
            return "NFFS";
   1ca46:	480d      	ldr	r0, [pc, #52]	; (1ca7c <log_module_get_name+0x60>)
   1ca48:	4770      	bx	lr
            return "REBOOT";
   1ca4a:	480d      	ldr	r0, [pc, #52]	; (1ca80 <log_module_get_name+0x64>)
   1ca4c:	4770      	bx	lr
            return "IOTIVITY";
   1ca4e:	480d      	ldr	r0, [pc, #52]	; (1ca84 <log_module_get_name+0x68>)
   1ca50:	4770      	bx	lr
            return "TEST";
   1ca52:	480d      	ldr	r0, [pc, #52]	; (1ca88 <log_module_get_name+0x6c>)
   1ca54:	4770      	bx	lr
    } else if (module - LOG_MODULE_PERUSER < MYNEWT_VAL(LOG_MAX_USER_MODULES)) {
   1ca56:	2840      	cmp	r0, #64	; 0x40
   1ca58:	d806      	bhi.n	1ca68 <log_module_get_name+0x4c>
        return g_log_module_list[module - LOG_MODULE_PERUSER];
   1ca5a:	3840      	subs	r0, #64	; 0x40
   1ca5c:	4b0b      	ldr	r3, [pc, #44]	; (1ca8c <log_module_get_name+0x70>)
   1ca5e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1ca62:	4770      	bx	lr
            return "DEFAULT";
   1ca64:	480a      	ldr	r0, [pc, #40]	; (1ca90 <log_module_get_name+0x74>)
   1ca66:	4770      	bx	lr
    return NULL;
   1ca68:	2000      	movs	r0, #0
}
   1ca6a:	4770      	bx	lr
   1ca6c:	000239c0 	.word	0x000239c0
   1ca70:	000239c4 	.word	0x000239c4
   1ca74:	000239cc 	.word	0x000239cc
   1ca78:	000239d8 	.word	0x000239d8
   1ca7c:	000239e4 	.word	0x000239e4
   1ca80:	000239ec 	.word	0x000239ec
   1ca84:	000239f4 	.word	0x000239f4
   1ca88:	00023a00 	.word	0x00023a00
   1ca8c:	20006998 	.word	0x20006998
   1ca90:	000239b8 	.word	0x000239b8

0001ca94 <log_append_body>:
}

int
log_append_body(struct log *log, uint8_t module, uint8_t level, uint8_t etype,
                const void *body, uint16_t body_len)
{
   1ca94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ca98:	b087      	sub	sp, #28
   1ca9a:	4604      	mov	r4, r0
   1ca9c:	460d      	mov	r5, r1
   1ca9e:	4691      	mov	r9, r2
   1caa0:	461e      	mov	r6, r3
   1caa2:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
    struct log_entry_hdr hdr;
    int rc;

    LOG_STATS_INC(log, writes);

    rc = log_chk_max_entry_len(log, body_len);
   1caa6:	4641      	mov	r1, r8
   1caa8:	f7ff fee2 	bl	1c870 <log_chk_max_entry_len>
    if (rc != OS_OK) {
   1caac:	4607      	mov	r7, r0
   1caae:	b118      	cbz	r0, 1cab8 <log_append_body+0x24>
    }

    log_call_append_cb(log, hdr.ue_index);

    return 0;
}
   1cab0:	4638      	mov	r0, r7
   1cab2:	b007      	add	sp, #28
   1cab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = log_append_prepare(log, module, level, etype, &hdr);
   1cab8:	ab02      	add	r3, sp, #8
   1caba:	9300      	str	r3, [sp, #0]
   1cabc:	4633      	mov	r3, r6
   1cabe:	464a      	mov	r2, r9
   1cac0:	4629      	mov	r1, r5
   1cac2:	4620      	mov	r0, r4
   1cac4:	f7ff feea 	bl	1c89c <log_append_prepare>
    if (rc != 0) {
   1cac8:	4607      	mov	r7, r0
   1caca:	2800      	cmp	r0, #0
   1cacc:	d1f0      	bne.n	1cab0 <log_append_body+0x1c>
    rc = log->l_log->log_append_body(log, &hdr, body, body_len);
   1cace:	6863      	ldr	r3, [r4, #4]
   1cad0:	691d      	ldr	r5, [r3, #16]
   1cad2:	4643      	mov	r3, r8
   1cad4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1cad6:	a902      	add	r1, sp, #8
   1cad8:	4620      	mov	r0, r4
   1cada:	47a8      	blx	r5
    if (rc != 0) {
   1cadc:	4607      	mov	r7, r0
   1cade:	2800      	cmp	r0, #0
   1cae0:	d1e6      	bne.n	1cab0 <log_append_body+0x1c>
    log_call_append_cb(log, hdr.ue_index);
   1cae2:	9904      	ldr	r1, [sp, #16]
   1cae4:	4620      	mov	r0, r4
   1cae6:	f7ff fecd 	bl	1c884 <log_call_append_cb>
    return 0;
   1caea:	e7e1      	b.n	1cab0 <log_append_body+0x1c>

0001caec <log_printf>:
}

void
log_printf(struct log *log, uint8_t module, uint8_t level,
           const char *msg, ...)
{
   1caec:	b408      	push	{r3}
   1caee:	b570      	push	{r4, r5, r6, lr}
   1caf0:	b0a5      	sub	sp, #148	; 0x94
   1caf2:	4604      	mov	r4, r0
   1caf4:	460d      	mov	r5, r1
   1caf6:	4616      	mov	r6, r2
   1caf8:	ab29      	add	r3, sp, #164	; 0xa4
   1cafa:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[LOG_PRINTF_MAX_ENTRY_LEN];
    int len;

    va_start(args, msg);
   1cafe:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, LOG_PRINTF_MAX_ENTRY_LEN, msg, args);
   1cb00:	2180      	movs	r1, #128	; 0x80
   1cb02:	a803      	add	r0, sp, #12
   1cb04:	f7ef fee8 	bl	c8d8 <vsnprintf>
    va_end(args);
    if (len >= LOG_PRINTF_MAX_ENTRY_LEN) {
   1cb08:	287f      	cmp	r0, #127	; 0x7f
   1cb0a:	dd00      	ble.n	1cb0e <log_printf+0x22>
        len = LOG_PRINTF_MAX_ENTRY_LEN-1;
   1cb0c:	207f      	movs	r0, #127	; 0x7f
    }

    log_append_body(log, module, level, LOG_ETYPE_STRING, buf, len);
   1cb0e:	b280      	uxth	r0, r0
   1cb10:	9001      	str	r0, [sp, #4]
   1cb12:	ab03      	add	r3, sp, #12
   1cb14:	9300      	str	r3, [sp, #0]
   1cb16:	2300      	movs	r3, #0
   1cb18:	4632      	mov	r2, r6
   1cb1a:	4629      	mov	r1, r5
   1cb1c:	4620      	mov	r0, r4
   1cb1e:	f7ff ffb9 	bl	1ca94 <log_append_body>
}
   1cb22:	b025      	add	sp, #148	; 0x94
   1cb24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cb28:	b001      	add	sp, #4
   1cb2a:	4770      	bx	lr

0001cb2c <log_walk>:

int
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
   1cb2c:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
   1cb2e:	6843      	ldr	r3, [r0, #4]
   1cb30:	69db      	ldr	r3, [r3, #28]
   1cb32:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   1cb34:	bd08      	pop	{r3, pc}
	...

0001cb38 <log_read_last_hdr>:
{
   1cb38:	b500      	push	{lr}
   1cb3a:	b089      	sub	sp, #36	; 0x24
    arg.hdr = out_hdr;
   1cb3c:	9106      	str	r1, [sp, #24]
    arg.read_success = 0;
   1cb3e:	2300      	movs	r3, #0
   1cb40:	9307      	str	r3, [sp, #28]
    log_offset.lo_arg = &arg;
   1cb42:	aa06      	add	r2, sp, #24
   1cb44:	9204      	str	r2, [sp, #16]
    log_offset.lo_ts = -1;
   1cb46:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 1cb70 <log_read_last_hdr+0x38>
   1cb4a:	ed8d 7b00 	vstr	d7, [sp]
    log_offset.lo_index = 0;
   1cb4e:	9302      	str	r3, [sp, #8]
    log_offset.lo_data_len = 0;
   1cb50:	9303      	str	r3, [sp, #12]
    log_walk(log, log_read_hdr_walk, &log_offset);
   1cb52:	466a      	mov	r2, sp
   1cb54:	4908      	ldr	r1, [pc, #32]	; (1cb78 <log_read_last_hdr+0x40>)
   1cb56:	f7ff ffe9 	bl	1cb2c <log_walk>
    if (!arg.read_success) {
   1cb5a:	9b07      	ldr	r3, [sp, #28]
   1cb5c:	b11b      	cbz	r3, 1cb66 <log_read_last_hdr+0x2e>
    return 0;
   1cb5e:	2000      	movs	r0, #0
}
   1cb60:	b009      	add	sp, #36	; 0x24
   1cb62:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   1cb66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cb6a:	e7f9      	b.n	1cb60 <log_read_last_hdr+0x28>
   1cb6c:	f3af 8000 	nop.w
   1cb70:	ffffffff 	.word	0xffffffff
   1cb74:	ffffffff 	.word	0xffffffff
   1cb78:	0001cc49 	.word	0x0001cc49

0001cb7c <log_register>:
{
   1cb7c:	b530      	push	{r4, r5, lr}
   1cb7e:	b085      	sub	sp, #20
   1cb80:	460c      	mov	r4, r1
   1cb82:	f89d 1020 	ldrb.w	r1, [sp, #32]
    assert(!log_written);
   1cb86:	4d1f      	ldr	r5, [pc, #124]	; (1cc04 <log_register+0x88>)
   1cb88:	782d      	ldrb	r5, [r5, #0]
   1cb8a:	bb0d      	cbnz	r5, 1cbd0 <log_register+0x54>
    if (level > LOG_LEVEL_MAX) {
   1cb8c:	290f      	cmp	r1, #15
   1cb8e:	d900      	bls.n	1cb92 <log_register+0x16>
        level = LOG_LEVEL_MAX;
   1cb90:	210f      	movs	r1, #15
    log->l_name = name;
   1cb92:	6020      	str	r0, [r4, #0]
    log->l_log = lh;
   1cb94:	6062      	str	r2, [r4, #4]
    log->l_arg = arg;
   1cb96:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
   1cb98:	7521      	strb	r1, [r4, #20]
    log->l_append_cb = NULL;
   1cb9a:	2300      	movs	r3, #0
   1cb9c:	6123      	str	r3, [r4, #16]
    log->l_max_entry_len = 0;
   1cb9e:	82e3      	strh	r3, [r4, #22]
    if (!log_registered(log)) {
   1cba0:	4620      	mov	r0, r4
   1cba2:	f7ff fe55 	bl	1c850 <log_registered>
   1cba6:	b938      	cbnz	r0, 1cbb8 <log_register+0x3c>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
   1cba8:	2300      	movs	r3, #0
   1cbaa:	60e3      	str	r3, [r4, #12]
   1cbac:	4b16      	ldr	r3, [pc, #88]	; (1cc08 <log_register+0x8c>)
   1cbae:	685a      	ldr	r2, [r3, #4]
   1cbb0:	6014      	str	r4, [r2, #0]
   1cbb2:	f104 020c 	add.w	r2, r4, #12
   1cbb6:	605a      	str	r2, [r3, #4]
    if (log->l_log->log_registered) {
   1cbb8:	6863      	ldr	r3, [r4, #4]
   1cbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cbbc:	b10b      	cbz	r3, 1cbc2 <log_register+0x46>
        log->l_log->log_registered(log);
   1cbbe:	4620      	mov	r0, r4
   1cbc0:	4798      	blx	r3
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   1cbc2:	6863      	ldr	r3, [r4, #4]
   1cbc4:	681b      	ldr	r3, [r3, #0]
   1cbc6:	2b02      	cmp	r3, #2
   1cbc8:	d008      	beq.n	1cbdc <log_register+0x60>
}
   1cbca:	2000      	movs	r0, #0
   1cbcc:	b005      	add	sp, #20
   1cbce:	bd30      	pop	{r4, r5, pc}
    assert(!log_written);
   1cbd0:	2300      	movs	r3, #0
   1cbd2:	461a      	mov	r2, r3
   1cbd4:	4619      	mov	r1, r3
   1cbd6:	4618      	mov	r0, r3
   1cbd8:	f7ec f9bc 	bl	8f54 <__assert_func>
        rc = log_read_last_hdr(log, &hdr);
   1cbdc:	4669      	mov	r1, sp
   1cbde:	4620      	mov	r0, r4
   1cbe0:	f7ff ffaa 	bl	1cb38 <log_read_last_hdr>
        if (rc == 0) {
   1cbe4:	2800      	cmp	r0, #0
   1cbe6:	d1f0      	bne.n	1cbca <log_register+0x4e>
            OS_ENTER_CRITICAL(sr);
   1cbe8:	f7ed fbbe 	bl	a368 <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
   1cbec:	9b02      	ldr	r3, [sp, #8]
   1cbee:	4a07      	ldr	r2, [pc, #28]	; (1cc0c <log_register+0x90>)
   1cbf0:	6812      	ldr	r2, [r2, #0]
   1cbf2:	4293      	cmp	r3, r2
   1cbf4:	d302      	bcc.n	1cbfc <log_register+0x80>
                g_log_info.li_next_index = hdr.ue_index + 1;
   1cbf6:	3301      	adds	r3, #1
   1cbf8:	4a04      	ldr	r2, [pc, #16]	; (1cc0c <log_register+0x90>)
   1cbfa:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   1cbfc:	f7ed fbba 	bl	a374 <os_arch_restore_sr>
   1cc00:	e7e3      	b.n	1cbca <log_register+0x4e>
   1cc02:	bf00      	nop
   1cc04:	2000699c 	.word	0x2000699c
   1cc08:	20002bc0 	.word	0x20002bc0
   1cc0c:	20006990 	.word	0x20006990

0001cc10 <log_walk_body>:
}

int
log_walk_body(struct log *log, log_walk_body_func_t walk_body_func,
              struct log_offset *log_offset)
{
   1cc10:	b510      	push	{r4, lr}
   1cc12:	b082      	sub	sp, #8
   1cc14:	4614      	mov	r4, r2
    struct log_walk_body_arg lwba = {
   1cc16:	9100      	str	r1, [sp, #0]
        .fn = walk_body_func,
        .arg = log_offset->lo_arg,
   1cc18:	6913      	ldr	r3, [r2, #16]
    struct log_walk_body_arg lwba = {
   1cc1a:	9301      	str	r3, [sp, #4]
    };
    int rc;

    log_offset->lo_arg = &lwba;
   1cc1c:	f8c2 d010 	str.w	sp, [r2, #16]
    rc = log->l_log->log_walk(log, log_walk_body_fn, log_offset);
   1cc20:	6843      	ldr	r3, [r0, #4]
   1cc22:	69db      	ldr	r3, [r3, #28]
   1cc24:	4902      	ldr	r1, [pc, #8]	; (1cc30 <log_walk_body+0x20>)
   1cc26:	4798      	blx	r3
    log_offset->lo_arg = lwba.arg;
   1cc28:	9b01      	ldr	r3, [sp, #4]
   1cc2a:	6123      	str	r3, [r4, #16]

    return rc;
}
   1cc2c:	b002      	add	sp, #8
   1cc2e:	bd10      	pop	{r4, pc}
   1cc30:	0001cc8d 	.word	0x0001cc8d

0001cc34 <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
   1cc34:	b530      	push	{r4, r5, lr}
   1cc36:	b083      	sub	sp, #12
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
   1cc38:	6844      	ldr	r4, [r0, #4]
   1cc3a:	6864      	ldr	r4, [r4, #4]
   1cc3c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1cc40:	9500      	str	r5, [sp, #0]
   1cc42:	47a0      	blx	r4

    return (rc);
}
   1cc44:	b003      	add	sp, #12
   1cc46:	bd30      	pop	{r4, r5, pc}

0001cc48 <log_read_hdr_walk>:
{
   1cc48:	b510      	push	{r4, lr}
   1cc4a:	b082      	sub	sp, #8
   1cc4c:	460b      	mov	r3, r1
   1cc4e:	4611      	mov	r1, r2
    arg = log_offset->lo_arg;
   1cc50:	691c      	ldr	r4, [r3, #16]
    rc = log_read(log, dptr, arg->hdr, 0, sizeof *arg->hdr);
   1cc52:	6822      	ldr	r2, [r4, #0]
   1cc54:	230e      	movs	r3, #14
   1cc56:	9300      	str	r3, [sp, #0]
   1cc58:	2300      	movs	r3, #0
   1cc5a:	f7ff ffeb 	bl	1cc34 <log_read>
    if (rc >= sizeof *arg->hdr) {
   1cc5e:	280d      	cmp	r0, #13
   1cc60:	d901      	bls.n	1cc66 <log_read_hdr_walk+0x1e>
        arg->read_success = 1;
   1cc62:	2301      	movs	r3, #1
   1cc64:	6063      	str	r3, [r4, #4]
}
   1cc66:	2001      	movs	r0, #1
   1cc68:	b002      	add	sp, #8
   1cc6a:	bd10      	pop	{r4, pc}

0001cc6c <log_read_hdr>:

int
log_read_hdr(struct log *log, void *dptr, struct log_entry_hdr *hdr)
{
   1cc6c:	b500      	push	{lr}
   1cc6e:	b083      	sub	sp, #12
    int bytes_read;

    bytes_read = log_read(log, dptr, hdr, 0, LOG_ENTRY_HDR_SIZE);
   1cc70:	230e      	movs	r3, #14
   1cc72:	9300      	str	r3, [sp, #0]
   1cc74:	2300      	movs	r3, #0
   1cc76:	f7ff ffdd 	bl	1cc34 <log_read>
    if (bytes_read != LOG_ENTRY_HDR_SIZE) {
   1cc7a:	280e      	cmp	r0, #14
   1cc7c:	d103      	bne.n	1cc86 <log_read_hdr+0x1a>
        return SYS_EIO;
    }

    return 0;
   1cc7e:	2000      	movs	r0, #0
}
   1cc80:	b003      	add	sp, #12
   1cc82:	f85d fb04 	ldr.w	pc, [sp], #4
        return SYS_EIO;
   1cc86:	f06f 0004 	mvn.w	r0, #4
   1cc8a:	e7f9      	b.n	1cc80 <log_read_hdr+0x14>

0001cc8c <log_walk_body_fn>:
{
   1cc8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cc90:	b087      	sub	sp, #28
   1cc92:	4680      	mov	r8, r0
   1cc94:	460c      	mov	r4, r1
   1cc96:	4616      	mov	r6, r2
   1cc98:	4699      	mov	r9, r3
    lwba = log_offset->lo_arg;
   1cc9a:	690f      	ldr	r7, [r1, #16]
    rc = log_read_hdr(log, dptr, &ueh);
   1cc9c:	aa02      	add	r2, sp, #8
   1cc9e:	4631      	mov	r1, r6
   1cca0:	f7ff ffe4 	bl	1cc6c <log_read_hdr>
    if (rc != 0) {
   1cca4:	b988      	cbnz	r0, 1ccca <log_walk_body_fn+0x3e>
    if (log_offset->lo_index <= ueh.ue_index) {
   1cca6:	68a2      	ldr	r2, [r4, #8]
   1cca8:	9b04      	ldr	r3, [sp, #16]
   1ccaa:	429a      	cmp	r2, r3
   1ccac:	d80d      	bhi.n	1ccca <log_walk_body_fn+0x3e>
        len -= sizeof ueh;
   1ccae:	f1a9 050e 	sub.w	r5, r9, #14
   1ccb2:	b2ad      	uxth	r5, r5
        log_offset->lo_arg = lwba->arg;
   1ccb4:	687b      	ldr	r3, [r7, #4]
   1ccb6:	6123      	str	r3, [r4, #16]
        rc = lwba->fn(log, log_offset, &ueh, dptr, len);
   1ccb8:	f8d7 9000 	ldr.w	r9, [r7]
   1ccbc:	9500      	str	r5, [sp, #0]
   1ccbe:	4633      	mov	r3, r6
   1ccc0:	aa02      	add	r2, sp, #8
   1ccc2:	4621      	mov	r1, r4
   1ccc4:	4640      	mov	r0, r8
   1ccc6:	47c8      	blx	r9
        log_offset->lo_arg = lwba;
   1ccc8:	6127      	str	r7, [r4, #16]
}
   1ccca:	b007      	add	sp, #28
   1cccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001ccd0 <log_read_body>:

int
log_read_body(struct log *log, void *dptr, void *buf, uint16_t off,
              uint16_t len)
{
   1ccd0:	b510      	push	{r4, lr}
   1ccd2:	b082      	sub	sp, #8
    return log_read(log, dptr, buf, LOG_ENTRY_HDR_SIZE + off, len);
   1ccd4:	330e      	adds	r3, #14
   1ccd6:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   1ccda:	9400      	str	r4, [sp, #0]
   1ccdc:	b29b      	uxth	r3, r3
   1ccde:	f7ff ffa9 	bl	1cc34 <log_read>
}
   1cce2:	b002      	add	sp, #8
   1cce4:	bd10      	pop	{r4, pc}

0001cce6 <log_flush>:
    return log_read_mbuf(log, dptr, om, LOG_ENTRY_HDR_SIZE + off, len);
}

int
log_flush(struct log *log)
{
   1cce6:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_flush(log);
   1cce8:	6843      	ldr	r3, [r0, #4]
   1ccea:	6a1b      	ldr	r3, [r3, #32]
   1ccec:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   1ccee:	bd08      	pop	{r3, pc}

0001ccf0 <log_console_read>:
log_console_read(struct log *log, void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
   1ccf0:	2002      	movs	r0, #2
   1ccf2:	4770      	bx	lr

0001ccf4 <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
   1ccf4:	2002      	movs	r0, #2
   1ccf6:	4770      	bx	lr

0001ccf8 <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
   1ccf8:	2002      	movs	r0, #2
   1ccfa:	4770      	bx	lr

0001ccfc <log_console_print_hdr>:
{
   1ccfc:	b500      	push	{lr}
   1ccfe:	b083      	sub	sp, #12
                   hdr->ue_ts, hdr->ue_module, hdr->ue_level);
   1cd00:	7b03      	ldrb	r3, [r0, #12]
   1cd02:	7b42      	ldrb	r2, [r0, #13]
    console_printf("[ts=%lluus, mod=%u level=%u] ",
   1cd04:	9201      	str	r2, [sp, #4]
   1cd06:	9300      	str	r3, [sp, #0]
   1cd08:	6802      	ldr	r2, [r0, #0]
   1cd0a:	6843      	ldr	r3, [r0, #4]
   1cd0c:	4802      	ldr	r0, [pc, #8]	; (1cd18 <log_console_print_hdr+0x1c>)
   1cd0e:	f7f1 f963 	bl	dfd8 <console_printf>
}
   1cd12:	b003      	add	sp, #12
   1cd14:	f85d fb04 	ldr.w	pc, [sp], #4
   1cd18:	00023a08 	.word	0x00023a08

0001cd1c <log_console_append_body>:
{
   1cd1c:	b570      	push	{r4, r5, r6, lr}
   1cd1e:	460e      	mov	r6, r1
   1cd20:	4614      	mov	r4, r2
   1cd22:	461d      	mov	r5, r3
    if (!console_is_init()) {
   1cd24:	f7f1 f8ee 	bl	df04 <console_is_init>
   1cd28:	b130      	cbz	r0, 1cd38 <log_console_append_body+0x1c>
    if (!console_is_midline) {
   1cd2a:	4b06      	ldr	r3, [pc, #24]	; (1cd44 <log_console_append_body+0x28>)
   1cd2c:	681b      	ldr	r3, [r3, #0]
   1cd2e:	b12b      	cbz	r3, 1cd3c <log_console_append_body+0x20>
    console_write(body, body_len);
   1cd30:	4629      	mov	r1, r5
   1cd32:	4620      	mov	r0, r4
   1cd34:	f7f0 fe50 	bl	d9d8 <console_write>
}
   1cd38:	2000      	movs	r0, #0
   1cd3a:	bd70      	pop	{r4, r5, r6, pc}
        log_console_print_hdr(hdr);
   1cd3c:	4630      	mov	r0, r6
   1cd3e:	f7ff ffdd 	bl	1ccfc <log_console_print_hdr>
   1cd42:	e7f5      	b.n	1cd30 <log_console_append_body+0x14>
   1cd44:	20005d0c 	.word	0x20005d0c

0001cd48 <log_console_append>:
{
   1cd48:	b538      	push	{r3, r4, r5, lr}
   1cd4a:	460c      	mov	r4, r1
   1cd4c:	4615      	mov	r5, r2
    if (!console_is_init()) {
   1cd4e:	f7f1 f8d9 	bl	df04 <console_is_init>
   1cd52:	b140      	cbz	r0, 1cd66 <log_console_append+0x1e>
    if (!console_is_midline) {
   1cd54:	4b07      	ldr	r3, [pc, #28]	; (1cd74 <log_console_append+0x2c>)
   1cd56:	681b      	ldr	r3, [r3, #0]
   1cd58:	b13b      	cbz	r3, 1cd6a <log_console_append+0x22>
    console_write((char *) buf + LOG_ENTRY_HDR_SIZE, len - LOG_ENTRY_HDR_SIZE);
   1cd5a:	f1a5 010e 	sub.w	r1, r5, #14
   1cd5e:	f104 000e 	add.w	r0, r4, #14
   1cd62:	f7f0 fe39 	bl	d9d8 <console_write>
}
   1cd66:	2000      	movs	r0, #0
   1cd68:	bd38      	pop	{r3, r4, r5, pc}
        log_console_print_hdr(hdr);
   1cd6a:	4620      	mov	r0, r4
   1cd6c:	f7ff ffc6 	bl	1ccfc <log_console_print_hdr>
   1cd70:	e7f3      	b.n	1cd5a <log_console_append+0x12>
   1cd72:	bf00      	nop
   1cd74:	20005d0c 	.word	0x20005d0c

0001cd78 <log_console_get>:
}
   1cd78:	4800      	ldr	r0, [pc, #0]	; (1cd7c <log_console_get+0x4>)
   1cd7a:	4770      	bx	lr
   1cd7c:	200069a0 	.word	0x200069a0

0001cd80 <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
   1cd80:	b510      	push	{r4, lr}
   1cd82:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1cd84:	4b0c      	ldr	r3, [pc, #48]	; (1cdb8 <log_console_init+0x38>)
   1cd86:	781b      	ldrb	r3, [r3, #0]
   1cd88:	b18b      	cbz	r3, 1cdae <log_console_init+0x2e>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
   1cd8a:	2300      	movs	r3, #0
   1cd8c:	9300      	str	r3, [sp, #0]
   1cd8e:	4a0b      	ldr	r2, [pc, #44]	; (1cdbc <log_console_init+0x3c>)
   1cd90:	490b      	ldr	r1, [pc, #44]	; (1cdc0 <log_console_init+0x40>)
   1cd92:	480c      	ldr	r0, [pc, #48]	; (1cdc4 <log_console_init+0x44>)
   1cd94:	f7ff fef2 	bl	1cb7c <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cd98:	b138      	cbz	r0, 1cdaa <log_console_init+0x2a>
   1cd9a:	2000      	movs	r0, #0
   1cd9c:	9000      	str	r0, [sp, #0]
   1cd9e:	4b0a      	ldr	r3, [pc, #40]	; (1cdc8 <log_console_init+0x48>)
   1cda0:	681c      	ldr	r4, [r3, #0]
   1cda2:	4603      	mov	r3, r0
   1cda4:	4602      	mov	r2, r0
   1cda6:	4601      	mov	r1, r0
   1cda8:	47a0      	blx	r4
}
   1cdaa:	b002      	add	sp, #8
   1cdac:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1cdae:	461a      	mov	r2, r3
   1cdb0:	4619      	mov	r1, r3
   1cdb2:	4618      	mov	r0, r3
   1cdb4:	f7ec f8ce 	bl	8f54 <__assert_func>
   1cdb8:	200065ac 	.word	0x200065ac
   1cdbc:	00023a30 	.word	0x00023a30
   1cdc0:	200069a0 	.word	0x200069a0
   1cdc4:	00023a28 	.word	0x00023a28
   1cdc8:	200001ec 	.word	0x200001ec

0001cdcc <log_level_get>:
uint8_t
log_level_get(uint8_t module)
{
    uint8_t byte;

    byte = log_level_map[module / 2];
   1cdcc:	0843      	lsrs	r3, r0, #1
   1cdce:	4a05      	ldr	r2, [pc, #20]	; (1cde4 <log_level_get+0x18>)
   1cdd0:	5cd3      	ldrb	r3, [r2, r3]
    if (module % 2 == 0) {
   1cdd2:	f010 0f01 	tst.w	r0, #1
   1cdd6:	d102      	bne.n	1cdde <log_level_get+0x12>
        return byte & 0x0f;
   1cdd8:	f003 000f 	and.w	r0, r3, #15
   1cddc:	4770      	bx	lr
    } else {
        return byte >> 4;
   1cdde:	0918      	lsrs	r0, r3, #4
    }
}
   1cde0:	4770      	bx	lr
   1cde2:	bf00      	nop
   1cde4:	200069b8 	.word	0x200069b8

0001cde8 <log_level_set>:
int
log_level_set(uint8_t module, uint8_t level)
{
    uint8_t *byte;

    if (level > LOG_LEVEL_MAX) {
   1cde8:	290f      	cmp	r1, #15
   1cdea:	d900      	bls.n	1cdee <log_level_set+0x6>
        level = LOG_LEVEL_MAX;
   1cdec:	210f      	movs	r1, #15
    }

    byte = &log_level_map[module / 2];
   1cdee:	0843      	lsrs	r3, r0, #1
    if (module % 2 == 0) {
   1cdf0:	f010 0f01 	tst.w	r0, #1
   1cdf4:	d107      	bne.n	1ce06 <log_level_set+0x1e>
        *byte = (*byte & 0xf0) | level;
   1cdf6:	4808      	ldr	r0, [pc, #32]	; (1ce18 <log_level_set+0x30>)
   1cdf8:	56c2      	ldrsb	r2, [r0, r3]
   1cdfa:	f022 020f 	bic.w	r2, r2, #15
   1cdfe:	4311      	orrs	r1, r2
   1ce00:	54c1      	strb	r1, [r0, r3]
    } else {
        *byte = (*byte & 0x0f) | (level << 4);
    }

    return 0;
}
   1ce02:	2000      	movs	r0, #0
   1ce04:	4770      	bx	lr
        *byte = (*byte & 0x0f) | (level << 4);
   1ce06:	4804      	ldr	r0, [pc, #16]	; (1ce18 <log_level_set+0x30>)
   1ce08:	56c2      	ldrsb	r2, [r0, r3]
   1ce0a:	f002 020f 	and.w	r2, r2, #15
   1ce0e:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
   1ce12:	54c1      	strb	r1, [r0, r3]
   1ce14:	e7f5      	b.n	1ce02 <log_level_set+0x1a>
   1ce16:	bf00      	nop
   1ce18:	200069b8 	.word	0x200069b8

0001ce1c <cbor_cnt_writer>:
};

static inline int
cbor_cnt_writer(struct cbor_encoder_writer *arg, const char *data, int len) {
    struct CborCntWriter *cb = (struct CborCntWriter *) arg;
    cb->enc.bytes_written += len;
   1ce1c:	6843      	ldr	r3, [r0, #4]
   1ce1e:	4413      	add	r3, r2
   1ce20:	6043      	str	r3, [r0, #4]
    return CborNoError;
}
   1ce22:	2000      	movs	r0, #0
   1ce24:	4770      	bx	lr

0001ce26 <log_nmgr_clear>:
 * @param nmgr json buffer
 * @return 0 on success; non-zero on failure
 */
static int
log_nmgr_clear(struct mgmt_cbuf *cb)
{
   1ce26:	b538      	push	{r3, r4, r5, lr}
   1ce28:	4605      	mov	r5, r0
    struct log *log;
    int rc;

    log = NULL;
   1ce2a:	2400      	movs	r4, #0
    while (1) {
        log = log_list_get_next(log);
   1ce2c:	4620      	mov	r0, r4
   1ce2e:	f7ff fded 	bl	1ca0c <log_list_get_next>
        if (log == NULL) {
   1ce32:	4604      	mov	r4, r0
   1ce34:	b148      	cbz	r0, 1ce4a <log_nmgr_clear+0x24>
            break;
        }

        if (log->l_log->log_type == LOG_TYPE_STREAM) {
   1ce36:	6843      	ldr	r3, [r0, #4]
   1ce38:	681b      	ldr	r3, [r3, #0]
   1ce3a:	2b00      	cmp	r3, #0
   1ce3c:	d0f6      	beq.n	1ce2c <log_nmgr_clear+0x6>
            continue;
        }

        rc = log_flush(log);
   1ce3e:	f7ff ff52 	bl	1cce6 <log_flush>
        if (rc) {
   1ce42:	4603      	mov	r3, r0
   1ce44:	2800      	cmp	r0, #0
   1ce46:	d0f1      	beq.n	1ce2c <log_nmgr_clear+0x6>
   1ce48:	e004      	b.n	1ce54 <log_nmgr_clear+0x2e>
            return rc;
        }
    }

    rc = mgmt_cbuf_setoerr(cb, 0);
   1ce4a:	2100      	movs	r1, #0
   1ce4c:	4628      	mov	r0, r5
   1ce4e:	f7fe fd09 	bl	1b864 <mgmt_cbuf_setoerr>
   1ce52:	4603      	mov	r3, r0
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1ce54:	4618      	mov	r0, r3
   1ce56:	bd38      	pop	{r3, r4, r5, pc}

0001ce58 <log_nmgr_logs_list>:
{
   1ce58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ce5a:	b085      	sub	sp, #20
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1ce5c:	f100 070c 	add.w	r7, r0, #12
   1ce60:	2202      	movs	r2, #2
   1ce62:	491c      	ldr	r1, [pc, #112]	; (1ced4 <log_nmgr_logs_list+0x7c>)
   1ce64:	4638      	mov	r0, r7
   1ce66:	f7f4 fd82 	bl	1196e <cbor_encode_text_string>
   1ce6a:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1ce6c:	2200      	movs	r2, #0
   1ce6e:	2300      	movs	r3, #0
   1ce70:	4638      	mov	r0, r7
   1ce72:	f7f4 fd01 	bl	11878 <cbor_encode_int>
   1ce76:	4305      	orrs	r5, r0
   1ce78:	2208      	movs	r2, #8
   1ce7a:	4917      	ldr	r1, [pc, #92]	; (1ced8 <log_nmgr_logs_list+0x80>)
   1ce7c:	4638      	mov	r0, r7
   1ce7e:	f7f4 fd76 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "log_list");
   1ce82:	4305      	orrs	r5, r0
    g_err |= cbor_encoder_create_array(&cb->encoder, &log_list,
   1ce84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ce88:	4669      	mov	r1, sp
   1ce8a:	4638      	mov	r0, r7
   1ce8c:	f7f4 fd76 	bl	1197c <cbor_encoder_create_array>
   1ce90:	4305      	orrs	r5, r0
    log = NULL;
   1ce92:	2400      	movs	r4, #0
        log = log_list_get_next(log);
   1ce94:	4620      	mov	r0, r4
   1ce96:	f7ff fdb9 	bl	1ca0c <log_list_get_next>
        if (!log) {
   1ce9a:	4604      	mov	r4, r0
   1ce9c:	b170      	cbz	r0, 1cebc <log_nmgr_logs_list+0x64>
        if (log->l_log->log_type == LOG_TYPE_STREAM) {
   1ce9e:	6843      	ldr	r3, [r0, #4]
   1cea0:	681b      	ldr	r3, [r3, #0]
   1cea2:	2b00      	cmp	r3, #0
   1cea4:	d0f6      	beq.n	1ce94 <log_nmgr_logs_list+0x3c>
        g_err |= cbor_encode_text_stringz(&log_list, log->l_name);
   1cea6:	6806      	ldr	r6, [r0, #0]
   1cea8:	4630      	mov	r0, r6
   1ceaa:	f7ef f927 	bl	c0fc <strlen>
   1ceae:	4602      	mov	r2, r0
   1ceb0:	4631      	mov	r1, r6
   1ceb2:	4668      	mov	r0, sp
   1ceb4:	f7f4 fd5b 	bl	1196e <cbor_encode_text_string>
   1ceb8:	4305      	orrs	r5, r0
   1ceba:	e7eb      	b.n	1ce94 <log_nmgr_logs_list+0x3c>
    g_err |= cbor_encoder_close_container(&cb->encoder, &log_list);
   1cebc:	4669      	mov	r1, sp
   1cebe:	4638      	mov	r0, r7
   1cec0:	f7f4 fd6f 	bl	119a2 <cbor_encoder_close_container>
    if (g_err) {
   1cec4:	ea55 0300 	orrs.w	r3, r5, r0
   1cec8:	d102      	bne.n	1ced0 <log_nmgr_logs_list+0x78>
    return (0);
   1ceca:	2000      	movs	r0, #0
}
   1cecc:	b005      	add	sp, #20
   1cece:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1ced0:	2002      	movs	r0, #2
   1ced2:	e7fb      	b.n	1cecc <log_nmgr_logs_list+0x74>
   1ced4:	000222a4 	.word	0x000222a4
   1ced8:	00023a58 	.word	0x00023a58

0001cedc <log_nmgr_module_list>:
{
   1cedc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cede:	b085      	sub	sp, #20
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1cee0:	f100 060c 	add.w	r6, r0, #12
   1cee4:	2202      	movs	r2, #2
   1cee6:	491f      	ldr	r1, [pc, #124]	; (1cf64 <log_nmgr_module_list+0x88>)
   1cee8:	4630      	mov	r0, r6
   1ceea:	f7f4 fd40 	bl	1196e <cbor_encode_text_string>
   1ceee:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1cef0:	2200      	movs	r2, #0
   1cef2:	2300      	movs	r3, #0
   1cef4:	4630      	mov	r0, r6
   1cef6:	f7f4 fcbf 	bl	11878 <cbor_encode_int>
   1cefa:	4305      	orrs	r5, r0
   1cefc:	220a      	movs	r2, #10
   1cefe:	491a      	ldr	r1, [pc, #104]	; (1cf68 <log_nmgr_module_list+0x8c>)
   1cf00:	4630      	mov	r0, r6
   1cf02:	f7f4 fd34 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "module_map");
   1cf06:	4305      	orrs	r5, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &modules,
   1cf08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cf0c:	4669      	mov	r1, sp
   1cf0e:	4630      	mov	r0, r6
   1cf10:	f7f4 fd39 	bl	11986 <cbor_encoder_create_map>
   1cf14:	4305      	orrs	r5, r0
    module = LOG_MODULE_DEFAULT;
   1cf16:	2400      	movs	r4, #0
    while (module < LOG_MODULE_MAX) {
   1cf18:	e000      	b.n	1cf1c <log_nmgr_module_list+0x40>
            module++;
   1cf1a:	3401      	adds	r4, #1
    while (module < LOG_MODULE_MAX) {
   1cf1c:	2cfe      	cmp	r4, #254	; 0xfe
   1cf1e:	dc15      	bgt.n	1cf4c <log_nmgr_module_list+0x70>
        str = LOG_MODULE_STR(module);
   1cf20:	b2e0      	uxtb	r0, r4
   1cf22:	f7ff fd7b 	bl	1ca1c <log_module_get_name>
        if (!str) {
   1cf26:	4607      	mov	r7, r0
   1cf28:	2800      	cmp	r0, #0
   1cf2a:	d0f6      	beq.n	1cf1a <log_nmgr_module_list+0x3e>
   1cf2c:	f7ef f8e6 	bl	c0fc <strlen>
   1cf30:	4602      	mov	r2, r0
   1cf32:	4639      	mov	r1, r7
   1cf34:	4668      	mov	r0, sp
   1cf36:	f7f4 fd1a 	bl	1196e <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&modules, str);
   1cf3a:	4305      	orrs	r5, r0
        g_err |= cbor_encode_uint(&modules, module);
   1cf3c:	4622      	mov	r2, r4
   1cf3e:	17e3      	asrs	r3, r4, #31
   1cf40:	4668      	mov	r0, sp
   1cf42:	f7f4 fc59 	bl	117f8 <cbor_encode_uint>
   1cf46:	4305      	orrs	r5, r0
        module++;
   1cf48:	3401      	adds	r4, #1
   1cf4a:	e7e7      	b.n	1cf1c <log_nmgr_module_list+0x40>
    g_err |= cbor_encoder_close_container(&cb->encoder, &modules);
   1cf4c:	4669      	mov	r1, sp
   1cf4e:	4630      	mov	r0, r6
   1cf50:	f7f4 fd27 	bl	119a2 <cbor_encoder_close_container>
    if (g_err) {
   1cf54:	ea55 0300 	orrs.w	r3, r5, r0
   1cf58:	d102      	bne.n	1cf60 <log_nmgr_module_list+0x84>
    return (0);
   1cf5a:	2000      	movs	r0, #0
}
   1cf5c:	b005      	add	sp, #20
   1cf5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1cf60:	2002      	movs	r0, #2
   1cf62:	e7fb      	b.n	1cf5c <log_nmgr_module_list+0x80>
   1cf64:	000222a4 	.word	0x000222a4
   1cf68:	00023a64 	.word	0x00023a64

0001cf6c <log_nmgr_level_list>:
{
   1cf6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cf6e:	b085      	sub	sp, #20
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1cf70:	f100 070c 	add.w	r7, r0, #12
   1cf74:	2202      	movs	r2, #2
   1cf76:	492a      	ldr	r1, [pc, #168]	; (1d020 <log_nmgr_level_list+0xb4>)
   1cf78:	4638      	mov	r0, r7
   1cf7a:	f7f4 fcf8 	bl	1196e <cbor_encode_text_string>
   1cf7e:	4606      	mov	r6, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1cf80:	2200      	movs	r2, #0
   1cf82:	2300      	movs	r3, #0
   1cf84:	4638      	mov	r0, r7
   1cf86:	f7f4 fc77 	bl	11878 <cbor_encode_int>
   1cf8a:	4306      	orrs	r6, r0
   1cf8c:	2209      	movs	r2, #9
   1cf8e:	4925      	ldr	r1, [pc, #148]	; (1d024 <log_nmgr_level_list+0xb8>)
   1cf90:	4638      	mov	r0, r7
   1cf92:	f7f4 fcec 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "level_map");
   1cf96:	4306      	orrs	r6, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &level_map,
   1cf98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cf9c:	4669      	mov	r1, sp
   1cf9e:	4638      	mov	r0, r7
   1cfa0:	f7f4 fcf1 	bl	11986 <cbor_encoder_create_map>
   1cfa4:	4306      	orrs	r6, r0
    level = LOG_LEVEL_DEBUG;
   1cfa6:	2400      	movs	r4, #0
    while (level < LOG_LEVEL_MAX) {
   1cfa8:	e008      	b.n	1cfbc <log_nmgr_level_list+0x50>
        str = LOG_LEVEL_STR(level);
   1cfaa:	4d1f      	ldr	r5, [pc, #124]	; (1d028 <log_nmgr_level_list+0xbc>)
   1cfac:	e000      	b.n	1cfb0 <log_nmgr_level_list+0x44>
   1cfae:	4d1f      	ldr	r5, [pc, #124]	; (1d02c <log_nmgr_level_list+0xc0>)
        if (!strcmp(str, "UNKNOWN")) {
   1cfb0:	491f      	ldr	r1, [pc, #124]	; (1d030 <log_nmgr_level_list+0xc4>)
   1cfb2:	4628      	mov	r0, r5
   1cfb4:	f7ef f896 	bl	c0e4 <strcmp>
   1cfb8:	b9a0      	cbnz	r0, 1cfe4 <log_nmgr_level_list+0x78>
            level++;
   1cfba:	3401      	adds	r4, #1
    while (level < LOG_LEVEL_MAX) {
   1cfbc:	2c0e      	cmp	r4, #14
   1cfbe:	dc22      	bgt.n	1d006 <log_nmgr_level_list+0x9a>
        str = LOG_LEVEL_STR(level);
   1cfc0:	2c00      	cmp	r4, #0
   1cfc2:	d0f4      	beq.n	1cfae <log_nmgr_level_list+0x42>
   1cfc4:	2c01      	cmp	r4, #1
   1cfc6:	d007      	beq.n	1cfd8 <log_nmgr_level_list+0x6c>
   1cfc8:	2c02      	cmp	r4, #2
   1cfca:	d007      	beq.n	1cfdc <log_nmgr_level_list+0x70>
   1cfcc:	2c03      	cmp	r4, #3
   1cfce:	d007      	beq.n	1cfe0 <log_nmgr_level_list+0x74>
   1cfd0:	2c04      	cmp	r4, #4
   1cfd2:	d0ea      	beq.n	1cfaa <log_nmgr_level_list+0x3e>
   1cfd4:	4d16      	ldr	r5, [pc, #88]	; (1d030 <log_nmgr_level_list+0xc4>)
   1cfd6:	e7eb      	b.n	1cfb0 <log_nmgr_level_list+0x44>
   1cfd8:	4d16      	ldr	r5, [pc, #88]	; (1d034 <log_nmgr_level_list+0xc8>)
   1cfda:	e7e9      	b.n	1cfb0 <log_nmgr_level_list+0x44>
   1cfdc:	4d16      	ldr	r5, [pc, #88]	; (1d038 <log_nmgr_level_list+0xcc>)
   1cfde:	e7e7      	b.n	1cfb0 <log_nmgr_level_list+0x44>
   1cfe0:	4d16      	ldr	r5, [pc, #88]	; (1d03c <log_nmgr_level_list+0xd0>)
   1cfe2:	e7e5      	b.n	1cfb0 <log_nmgr_level_list+0x44>
   1cfe4:	4628      	mov	r0, r5
   1cfe6:	f7ef f889 	bl	c0fc <strlen>
   1cfea:	4602      	mov	r2, r0
   1cfec:	4629      	mov	r1, r5
   1cfee:	4668      	mov	r0, sp
   1cff0:	f7f4 fcbd 	bl	1196e <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&level_map, str);
   1cff4:	4306      	orrs	r6, r0
        g_err |= cbor_encode_uint(&level_map, level);
   1cff6:	4622      	mov	r2, r4
   1cff8:	17e3      	asrs	r3, r4, #31
   1cffa:	4668      	mov	r0, sp
   1cffc:	f7f4 fbfc 	bl	117f8 <cbor_encode_uint>
   1d000:	4306      	orrs	r6, r0
        level++;
   1d002:	3401      	adds	r4, #1
   1d004:	e7da      	b.n	1cfbc <log_nmgr_level_list+0x50>
    g_err |= cbor_encoder_close_container(&cb->encoder, &level_map);
   1d006:	4669      	mov	r1, sp
   1d008:	4638      	mov	r0, r7
   1d00a:	f7f4 fcca 	bl	119a2 <cbor_encoder_close_container>
    if (g_err) {
   1d00e:	ea56 0300 	orrs.w	r3, r6, r0
   1d012:	d102      	bne.n	1d01a <log_nmgr_level_list+0xae>
    return (0);
   1d014:	2000      	movs	r0, #0
}
   1d016:	b005      	add	sp, #20
   1d018:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1d01a:	2002      	movs	r0, #2
   1d01c:	e7fb      	b.n	1d016 <log_nmgr_level_list+0xaa>
   1d01e:	bf00      	nop
   1d020:	000222a4 	.word	0x000222a4
   1d024:	00023aa4 	.word	0x00023aa4
   1d028:	00023a98 	.word	0x00023a98
   1d02c:	00023a70 	.word	0x00023a70
   1d030:	00023a90 	.word	0x00023a90
   1d034:	00023a80 	.word	0x00023a80
   1d038:	00023a88 	.word	0x00023a88
   1d03c:	00023a78 	.word	0x00023a78

0001d040 <log_nmgr_modlevel_set>:
{
   1d040:	b570      	push	{r4, r5, r6, lr}
   1d042:	b0b4      	sub	sp, #208	; 0xd0
   1d044:	4604      	mov	r4, r0
    const struct cbor_attr_t attr[4] = {
   1d046:	22c0      	movs	r2, #192	; 0xc0
   1d048:	2100      	movs	r1, #0
   1d04a:	4668      	mov	r0, sp
   1d04c:	f7ef f81f 	bl	c08e <memset>
   1d050:	4b15      	ldr	r3, [pc, #84]	; (1d0a8 <log_nmgr_modlevel_set+0x68>)
   1d052:	9300      	str	r3, [sp, #0]
   1d054:	2302      	movs	r3, #2
   1d056:	f88d 3004 	strb.w	r3, [sp, #4]
   1d05a:	aa30      	add	r2, sp, #192	; 0xc0
   1d05c:	9202      	str	r2, [sp, #8]
   1d05e:	4a13      	ldr	r2, [pc, #76]	; (1d0ac <log_nmgr_modlevel_set+0x6c>)
   1d060:	920c      	str	r2, [sp, #48]	; 0x30
   1d062:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1d066:	ab32      	add	r3, sp, #200	; 0xc8
   1d068:	930e      	str	r3, [sp, #56]	; 0x38
    rc = cbor_read_object(&cb->it, attr);
   1d06a:	4669      	mov	r1, sp
   1d06c:	f104 001c 	add.w	r0, r4, #28
   1d070:	f7f4 fa96 	bl	115a0 <cbor_read_object>
    if (rc) {
   1d074:	4605      	mov	r5, r0
   1d076:	b110      	cbz	r0, 1d07e <log_nmgr_modlevel_set+0x3e>
}
   1d078:	4628      	mov	r0, r5
   1d07a:	b034      	add	sp, #208	; 0xd0
   1d07c:	bd70      	pop	{r4, r5, r6, pc}
    rc = log_level_set(module, level);
   1d07e:	f89d 10c8 	ldrb.w	r1, [sp, #200]	; 0xc8
   1d082:	f89d 00c0 	ldrb.w	r0, [sp, #192]	; 0xc0
   1d086:	f7ff feaf 	bl	1cde8 <log_level_set>
    if (rc) {
   1d08a:	4606      	mov	r6, r0
   1d08c:	b100      	cbz	r0, 1d090 <log_nmgr_modlevel_set+0x50>
        rc = MGMT_ERR_EINVAL;
   1d08e:	2603      	movs	r6, #3
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1d090:	340c      	adds	r4, #12
   1d092:	2202      	movs	r2, #2
   1d094:	4906      	ldr	r1, [pc, #24]	; (1d0b0 <log_nmgr_modlevel_set+0x70>)
   1d096:	4620      	mov	r0, r4
   1d098:	f7f4 fc69 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_int(&cb->encoder, rc);
   1d09c:	4632      	mov	r2, r6
   1d09e:	17f3      	asrs	r3, r6, #31
   1d0a0:	4620      	mov	r0, r4
   1d0a2:	f7f4 fbe9 	bl	11878 <cbor_encode_int>
    return (rc);
   1d0a6:	e7e7      	b.n	1d078 <log_nmgr_modlevel_set+0x38>
   1d0a8:	00023ab0 	.word	0x00023ab0
   1d0ac:	00023abc 	.word	0x00023abc
   1d0b0:	000222a4 	.word	0x000222a4

0001d0b4 <log_nmgr_modlevel_get>:
{
   1d0b4:	b570      	push	{r4, r5, r6, lr}
   1d0b6:	b0b2      	sub	sp, #200	; 0xc8
   1d0b8:	4604      	mov	r4, r0
    const struct cbor_attr_t attr[4] = {
   1d0ba:	22c0      	movs	r2, #192	; 0xc0
   1d0bc:	2100      	movs	r1, #0
   1d0be:	4668      	mov	r0, sp
   1d0c0:	f7ee ffe5 	bl	c08e <memset>
   1d0c4:	4b15      	ldr	r3, [pc, #84]	; (1d11c <log_nmgr_modlevel_get+0x68>)
   1d0c6:	9300      	str	r3, [sp, #0]
   1d0c8:	2302      	movs	r3, #2
   1d0ca:	f88d 3004 	strb.w	r3, [sp, #4]
   1d0ce:	ab30      	add	r3, sp, #192	; 0xc0
   1d0d0:	9302      	str	r3, [sp, #8]
    rc = cbor_read_object(&cb->it, attr);
   1d0d2:	4669      	mov	r1, sp
   1d0d4:	f104 001c 	add.w	r0, r4, #28
   1d0d8:	f7f4 fa62 	bl	115a0 <cbor_read_object>
    if (rc) {
   1d0dc:	4605      	mov	r5, r0
   1d0de:	b110      	cbz	r0, 1d0e6 <log_nmgr_modlevel_get+0x32>
}
   1d0e0:	4628      	mov	r0, r5
   1d0e2:	b032      	add	sp, #200	; 0xc8
   1d0e4:	bd70      	pop	{r4, r5, r6, pc}
    level = log_level_get(module);
   1d0e6:	f89d 00c0 	ldrb.w	r0, [sp, #192]	; 0xc0
   1d0ea:	f7ff fe6f 	bl	1cdcc <log_level_get>
   1d0ee:	4606      	mov	r6, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "level");
   1d0f0:	340c      	adds	r4, #12
   1d0f2:	2205      	movs	r2, #5
   1d0f4:	490a      	ldr	r1, [pc, #40]	; (1d120 <log_nmgr_modlevel_get+0x6c>)
   1d0f6:	4620      	mov	r0, r4
   1d0f8:	f7f4 fc39 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_uint(&cb->encoder, level);
   1d0fc:	4632      	mov	r2, r6
   1d0fe:	2300      	movs	r3, #0
   1d100:	4620      	mov	r0, r4
   1d102:	f7f4 fb79 	bl	117f8 <cbor_encode_uint>
   1d106:	2202      	movs	r2, #2
   1d108:	4906      	ldr	r1, [pc, #24]	; (1d124 <log_nmgr_modlevel_get+0x70>)
   1d10a:	4620      	mov	r0, r4
   1d10c:	f7f4 fc2f 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_int(&cb->encoder, rc);
   1d110:	462a      	mov	r2, r5
   1d112:	17eb      	asrs	r3, r5, #31
   1d114:	4620      	mov	r0, r4
   1d116:	f7f4 fbaf 	bl	11878 <cbor_encode_int>
    return (rc);
   1d11a:	e7e1      	b.n	1d0e0 <log_nmgr_modlevel_get+0x2c>
   1d11c:	00023ab0 	.word	0x00023ab0
   1d120:	00023abc 	.word	0x00023abc
   1d124:	000222a4 	.word	0x000222a4

0001d128 <log_encode_entries>:
{
   1d128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d12c:	b093      	sub	sp, #76	; 0x4c
   1d12e:	4606      	mov	r6, r0
   1d130:	460c      	mov	r4, r1
   1d132:	4690      	mov	r8, r2
   1d134:	461f      	mov	r7, r3
    memset(&log_offset, 0, sizeof(log_offset));
   1d136:	2200      	movs	r2, #0
   1d138:	920c      	str	r2, [sp, #48]	; 0x30
   1d13a:	920d      	str	r2, [sp, #52]	; 0x34
   1d13c:	920e      	str	r2, [sp, #56]	; 0x38
   1d13e:	920f      	str	r2, [sp, #60]	; 0x3c
   1d140:	9210      	str	r2, [sp, #64]	; 0x40
   1d142:	9211      	str	r2, [sp, #68]	; 0x44

static inline void
cbor_cnt_writer_init(struct CborCntWriter *cb) {
    cb->enc.bytes_written = 0;
   1d144:	9207      	str	r2, [sp, #28]
    cb->enc.write = &cbor_cnt_writer;
   1d146:	4b23      	ldr	r3, [pc, #140]	; (1d1d4 <log_encode_entries+0xac>)
   1d148:	9306      	str	r3, [sp, #24]
    cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   1d14a:	a906      	add	r1, sp, #24
   1d14c:	a802      	add	r0, sp, #8
   1d14e:	f7f4 fb4e 	bl	117ee <cbor_encoder_init>
   1d152:	2207      	movs	r2, #7
   1d154:	4920      	ldr	r1, [pc, #128]	; (1d1d8 <log_encode_entries+0xb0>)
   1d156:	a802      	add	r0, sp, #8
   1d158:	f7f4 fc09 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encoder_create_array(&cnt_encoder, &entries,
   1d15c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d160:	a908      	add	r1, sp, #32
   1d162:	a802      	add	r0, sp, #8
   1d164:	f7f4 fc0a 	bl	1197c <cbor_encoder_create_array>
    g_err |= cbor_encoder_close_container(&cnt_encoder, &entries);
   1d168:	a908      	add	r1, sp, #32
   1d16a:	a802      	add	r0, sp, #8
   1d16c:	f7f4 fc19 	bl	119a2 <cbor_encoder_close_container>
{   return encoder->writer->bytes_written; }
   1d170:	6823      	ldr	r3, [r4, #0]
   1d172:	685b      	ldr	r3, [r3, #4]
   1d174:	9a02      	ldr	r2, [sp, #8]
   1d176:	6855      	ldr	r5, [r2, #4]
    rsp_len = cbor_encode_bytes_written(cb) +
   1d178:	441d      	add	r5, r3
    if (rsp_len > MYNEWT_VAL(LOG_NMGR_MAX_RSP_LEN)) {
   1d17a:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
   1d17e:	dd04      	ble.n	1d18a <log_encode_entries+0x62>
        rc = OS_ENOMEM;
   1d180:	2501      	movs	r5, #1
}
   1d182:	4628      	mov	r0, r5
   1d184:	b013      	add	sp, #76	; 0x4c
   1d186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d18a:	2207      	movs	r2, #7
   1d18c:	4912      	ldr	r1, [pc, #72]	; (1d1d8 <log_encode_entries+0xb0>)
   1d18e:	4620      	mov	r0, r4
   1d190:	f7f4 fbed 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encoder_create_array(cb, &entries, CborIndefiniteLength);
   1d194:	f10d 0920 	add.w	r9, sp, #32
   1d198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d19c:	4649      	mov	r1, r9
   1d19e:	4620      	mov	r0, r4
   1d1a0:	f7f4 fbec 	bl	1197c <cbor_encoder_create_array>
    ed.counter = 0;
   1d1a4:	2300      	movs	r3, #0
   1d1a6:	9300      	str	r3, [sp, #0]
    ed.enc = &entries;
   1d1a8:	f8cd 9004 	str.w	r9, [sp, #4]
    log_offset.lo_arg       = &ed;
   1d1ac:	f8cd d040 	str.w	sp, [sp, #64]	; 0x40
    log_offset.lo_index     = index;
   1d1b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1d1b2:	930e      	str	r3, [sp, #56]	; 0x38
    log_offset.lo_ts        = ts;
   1d1b4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   1d1b8:	970d      	str	r7, [sp, #52]	; 0x34
    log_offset.lo_data_len  = rsp_len;
   1d1ba:	950f      	str	r5, [sp, #60]	; 0x3c
    rc = log_walk_body(log, log_nmgr_encode_entry, &log_offset);
   1d1bc:	aa0c      	add	r2, sp, #48	; 0x30
   1d1be:	4907      	ldr	r1, [pc, #28]	; (1d1dc <log_encode_entries+0xb4>)
   1d1c0:	4630      	mov	r0, r6
   1d1c2:	f7ff fd25 	bl	1cc10 <log_walk_body>
   1d1c6:	4605      	mov	r5, r0
    g_err |= cbor_encoder_close_container(cb, &entries);
   1d1c8:	4649      	mov	r1, r9
   1d1ca:	4620      	mov	r0, r4
   1d1cc:	f7f4 fbe9 	bl	119a2 <cbor_encoder_close_container>
   1d1d0:	e7d7      	b.n	1d182 <log_encode_entries+0x5a>
   1d1d2:	bf00      	nop
   1d1d4:	0001ce1d 	.word	0x0001ce1d
   1d1d8:	00023ac4 	.word	0x00023ac4
   1d1dc:	0001d3a5 	.word	0x0001d3a5

0001d1e0 <log_encode>:
{
   1d1e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d1e4:	b087      	sub	sp, #28
   1d1e6:	4605      	mov	r5, r0
   1d1e8:	460e      	mov	r6, r1
   1d1ea:	4690      	mov	r8, r2
   1d1ec:	461f      	mov	r7, r3
    g_err |= cbor_encoder_create_map(cb, &logs, CborIndefiniteLength);
   1d1ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d1f2:	a902      	add	r1, sp, #8
   1d1f4:	4630      	mov	r0, r6
   1d1f6:	f7f4 fbc6 	bl	11986 <cbor_encoder_create_map>
   1d1fa:	4604      	mov	r4, r0
   1d1fc:	2204      	movs	r2, #4
   1d1fe:	4919      	ldr	r1, [pc, #100]	; (1d264 <log_encode+0x84>)
   1d200:	a802      	add	r0, sp, #8
   1d202:	f7f4 fbb4 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&logs, "name");
   1d206:	4304      	orrs	r4, r0
    g_err |= cbor_encode_text_stringz(&logs, log->l_name);
   1d208:	f8d5 9000 	ldr.w	r9, [r5]
   1d20c:	4648      	mov	r0, r9
   1d20e:	f7ee ff75 	bl	c0fc <strlen>
   1d212:	4602      	mov	r2, r0
   1d214:	4649      	mov	r1, r9
   1d216:	a802      	add	r0, sp, #8
   1d218:	f7f4 fba9 	bl	1196e <cbor_encode_text_string>
   1d21c:	4304      	orrs	r4, r0
   1d21e:	2204      	movs	r2, #4
   1d220:	4911      	ldr	r1, [pc, #68]	; (1d268 <log_encode+0x88>)
   1d222:	a802      	add	r0, sp, #8
   1d224:	f7f4 fba3 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&logs, "type");
   1d228:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&logs, log->l_log->log_type);
   1d22a:	686b      	ldr	r3, [r5, #4]
   1d22c:	681a      	ldr	r2, [r3, #0]
   1d22e:	17d3      	asrs	r3, r2, #31
   1d230:	a802      	add	r0, sp, #8
   1d232:	f7f4 fae1 	bl	117f8 <cbor_encode_uint>
   1d236:	4304      	orrs	r4, r0
    rc = log_encode_entries(log, &logs, ts, index);
   1d238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d23a:	9300      	str	r3, [sp, #0]
   1d23c:	4642      	mov	r2, r8
   1d23e:	463b      	mov	r3, r7
   1d240:	a902      	add	r1, sp, #8
   1d242:	4628      	mov	r0, r5
   1d244:	f7ff ff70 	bl	1d128 <log_encode_entries>
   1d248:	4605      	mov	r5, r0
    g_err |= cbor_encoder_close_container(cb, &logs);
   1d24a:	a902      	add	r1, sp, #8
   1d24c:	4630      	mov	r0, r6
   1d24e:	f7f4 fba8 	bl	119a2 <cbor_encoder_close_container>
    if (g_err) {
   1d252:	ea54 0300 	orrs.w	r3, r4, r0
   1d256:	d103      	bne.n	1d260 <log_encode+0x80>
}
   1d258:	4628      	mov	r0, r5
   1d25a:	b007      	add	sp, #28
   1d25c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return MGMT_ERR_ENOMEM;
   1d260:	2502      	movs	r5, #2
   1d262:	e7f9      	b.n	1d258 <log_encode+0x78>
   1d264:	00023ad0 	.word	0x00023ad0
   1d268:	000235d0 	.word	0x000235d0

0001d26c <log_nmgr_read>:
{
   1d26c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d270:	b0cb      	sub	sp, #300	; 0x12c
   1d272:	4606      	mov	r6, r0
    char name[LOG_NAME_MAX_LEN] = {0};
   1d274:	2400      	movs	r4, #0
   1d276:	943a      	str	r4, [sp, #232]	; 0xe8
   1d278:	223c      	movs	r2, #60	; 0x3c
   1d27a:	4621      	mov	r1, r4
   1d27c:	a83b      	add	r0, sp, #236	; 0xec
   1d27e:	f7ee ff06 	bl	c08e <memset>
    const struct cbor_attr_t attr[4] = {
   1d282:	22c0      	movs	r2, #192	; 0xc0
   1d284:	4621      	mov	r1, r4
   1d286:	a802      	add	r0, sp, #8
   1d288:	f7ee ff01 	bl	c08e <memset>
   1d28c:	4b3e      	ldr	r3, [pc, #248]	; (1d388 <log_nmgr_read+0x11c>)
   1d28e:	9302      	str	r3, [sp, #8]
   1d290:	2304      	movs	r3, #4
   1d292:	f88d 300c 	strb.w	r3, [sp, #12]
   1d296:	ab3a      	add	r3, sp, #232	; 0xe8
   1d298:	9304      	str	r3, [sp, #16]
   1d29a:	2340      	movs	r3, #64	; 0x40
   1d29c:	930c      	str	r3, [sp, #48]	; 0x30
   1d29e:	4b3b      	ldr	r3, [pc, #236]	; (1d38c <log_nmgr_read+0x120>)
   1d2a0:	930e      	str	r3, [sp, #56]	; 0x38
   1d2a2:	2301      	movs	r3, #1
   1d2a4:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   1d2a8:	ab38      	add	r3, sp, #224	; 0xe0
   1d2aa:	9310      	str	r3, [sp, #64]	; 0x40
   1d2ac:	4b38      	ldr	r3, [pc, #224]	; (1d390 <log_nmgr_read+0x124>)
   1d2ae:	931a      	str	r3, [sp, #104]	; 0x68
   1d2b0:	2302      	movs	r3, #2
   1d2b2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   1d2b6:	ab36      	add	r3, sp, #216	; 0xd8
   1d2b8:	931c      	str	r3, [sp, #112]	; 0x70
    rc = cbor_read_object(&cb->it, attr);
   1d2ba:	a902      	add	r1, sp, #8
   1d2bc:	f106 001c 	add.w	r0, r6, #28
   1d2c0:	f7f4 f96e 	bl	115a0 <cbor_read_object>
    if (rc) {
   1d2c4:	4681      	mov	r9, r0
   1d2c6:	b118      	cbz	r0, 1d2d0 <log_nmgr_read+0x64>
}
   1d2c8:	4648      	mov	r0, r9
   1d2ca:	b04b      	add	sp, #300	; 0x12c
   1d2cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    g_err |= cbor_encode_text_stringz(&cb->encoder, "next_index");
   1d2d0:	360c      	adds	r6, #12
   1d2d2:	220a      	movs	r2, #10
   1d2d4:	492f      	ldr	r1, [pc, #188]	; (1d394 <log_nmgr_read+0x128>)
   1d2d6:	4630      	mov	r0, r6
   1d2d8:	f7f4 fb49 	bl	1196e <cbor_encode_text_string>
   1d2dc:	4607      	mov	r7, r0
    g_err |= cbor_encode_int(&cb->encoder, g_log_info.li_next_index);
   1d2de:	4b2e      	ldr	r3, [pc, #184]	; (1d398 <log_nmgr_read+0x12c>)
   1d2e0:	681a      	ldr	r2, [r3, #0]
   1d2e2:	4623      	mov	r3, r4
   1d2e4:	4630      	mov	r0, r6
   1d2e6:	f7f4 fac7 	bl	11878 <cbor_encode_int>
   1d2ea:	4307      	orrs	r7, r0
   1d2ec:	2204      	movs	r2, #4
   1d2ee:	492b      	ldr	r1, [pc, #172]	; (1d39c <log_nmgr_read+0x130>)
   1d2f0:	4630      	mov	r0, r6
   1d2f2:	f7f4 fb3c 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "logs");
   1d2f6:	4307      	orrs	r7, r0
    g_err |= cbor_encoder_create_array(&cb->encoder, &logs,
   1d2f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d2fc:	a932      	add	r1, sp, #200	; 0xc8
   1d2fe:	4630      	mov	r0, r6
   1d300:	f7f4 fb3c 	bl	1197c <cbor_encoder_create_array>
   1d304:	4307      	orrs	r7, r0
    name_len = strlen(name);
   1d306:	a83a      	add	r0, sp, #232	; 0xe8
   1d308:	f7ee fef8 	bl	c0fc <strlen>
   1d30c:	4605      	mov	r5, r0
    rc = cbor_read_object(&cb->it, attr);
   1d30e:	46c8      	mov	r8, r9
   1d310:	e00b      	b.n	1d32a <log_nmgr_read+0xbe>
        rc = log_encode(log, &logs, ts, index);
   1d312:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   1d314:	9300      	str	r3, [sp, #0]
   1d316:	e9dd 2338 	ldrd	r2, r3, [sp, #224]	; 0xe0
   1d31a:	a932      	add	r1, sp, #200	; 0xc8
   1d31c:	4620      	mov	r0, r4
   1d31e:	f7ff ff5f 	bl	1d1e0 <log_encode>
        if (rc) {
   1d322:	4680      	mov	r8, r0
   1d324:	b9a0      	cbnz	r0, 1d350 <log_nmgr_read+0xe4>
        if (name_len > 0) {
   1d326:	2d00      	cmp	r5, #0
   1d328:	dc11      	bgt.n	1d34e <log_nmgr_read+0xe2>
        log = log_list_get_next(log);
   1d32a:	4620      	mov	r0, r4
   1d32c:	f7ff fb6e 	bl	1ca0c <log_list_get_next>
        if (!log) {
   1d330:	4604      	mov	r4, r0
   1d332:	b160      	cbz	r0, 1d34e <log_nmgr_read+0xe2>
        if (log->l_log->log_type == LOG_TYPE_STREAM) {
   1d334:	6843      	ldr	r3, [r0, #4]
   1d336:	681b      	ldr	r3, [r3, #0]
   1d338:	2b00      	cmp	r3, #0
   1d33a:	d0f6      	beq.n	1d32a <log_nmgr_read+0xbe>
        if ((name_len > 0) && strcmp(name, log->l_name)) {
   1d33c:	2d00      	cmp	r5, #0
   1d33e:	dde8      	ble.n	1d312 <log_nmgr_read+0xa6>
   1d340:	6801      	ldr	r1, [r0, #0]
   1d342:	a83a      	add	r0, sp, #232	; 0xe8
   1d344:	f7ee fece 	bl	c0e4 <strcmp>
   1d348:	2800      	cmp	r0, #0
   1d34a:	d0e2      	beq.n	1d312 <log_nmgr_read+0xa6>
   1d34c:	e7ed      	b.n	1d32a <log_nmgr_read+0xbe>
    if (!log && name_len > 0) {
   1d34e:	b1b4      	cbz	r4, 1d37e <log_nmgr_read+0x112>
    g_err |= cbor_encoder_close_container(&cb->encoder, &logs);
   1d350:	a932      	add	r1, sp, #200	; 0xc8
   1d352:	4630      	mov	r0, r6
   1d354:	f7f4 fb25 	bl	119a2 <cbor_encoder_close_container>
   1d358:	4307      	orrs	r7, r0
   1d35a:	2202      	movs	r2, #2
   1d35c:	4910      	ldr	r1, [pc, #64]	; (1d3a0 <log_nmgr_read+0x134>)
   1d35e:	4630      	mov	r0, r6
   1d360:	f7f4 fb05 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1d364:	4307      	orrs	r7, r0
    g_err |= cbor_encode_int(&cb->encoder, rc);
   1d366:	4642      	mov	r2, r8
   1d368:	ea4f 73e8 	mov.w	r3, r8, asr #31
   1d36c:	4630      	mov	r0, r6
   1d36e:	f7f4 fa83 	bl	11878 <cbor_encode_int>
    if (g_err) {
   1d372:	ea57 0300 	orrs.w	r3, r7, r0
   1d376:	d0a7      	beq.n	1d2c8 <log_nmgr_read+0x5c>
        return MGMT_ERR_ENOMEM;
   1d378:	f04f 0902 	mov.w	r9, #2
   1d37c:	e7a4      	b.n	1d2c8 <log_nmgr_read+0x5c>
    if (!log && name_len > 0) {
   1d37e:	2d00      	cmp	r5, #0
   1d380:	dde6      	ble.n	1d350 <log_nmgr_read+0xe4>
        rc = OS_EINVAL;
   1d382:	f04f 0802 	mov.w	r8, #2
   1d386:	e7e3      	b.n	1d350 <log_nmgr_read+0xe4>
   1d388:	00023acc 	.word	0x00023acc
   1d38c:	000235dc 	.word	0x000235dc
   1d390:	00023ad8 	.word	0x00023ad8
   1d394:	00023ae0 	.word	0x00023ae0
   1d398:	20006990 	.word	0x20006990
   1d39c:	00023aec 	.word	0x00023aec
   1d3a0:	000222a4 	.word	0x000222a4

0001d3a4 <log_nmgr_encode_entry>:
{
   1d3a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d3a8:	b0ad      	sub	sp, #180	; 0xb4
   1d3aa:	460e      	mov	r6, r1
   1d3ac:	4615      	mov	r5, r2
   1d3ae:	4619      	mov	r1, r3
    struct log_encode_data *ed = log_offset->lo_arg;
   1d3b0:	6937      	ldr	r7, [r6, #16]
    if (log_offset->lo_ts == 0) {
   1d3b2:	6834      	ldr	r4, [r6, #0]
   1d3b4:	6872      	ldr	r2, [r6, #4]
   1d3b6:	ea54 0302 	orrs.w	r3, r4, r2
   1d3ba:	f040 80d7 	bne.w	1d56c <log_nmgr_encode_entry+0x1c8>
        if (log_offset->lo_index > ueh->ue_index) {
   1d3be:	68b2      	ldr	r2, [r6, #8]
   1d3c0:	68ab      	ldr	r3, [r5, #8]
   1d3c2:	429a      	cmp	r2, r3
   1d3c4:	f200 80ee 	bhi.w	1d5a4 <log_nmgr_encode_entry+0x200>
    rc = log_read_body(log, dptr, data, 0, min(len, 128));
   1d3c8:	f8bd 20d0 	ldrh.w	r2, [sp, #208]	; 0xd0
   1d3cc:	2a80      	cmp	r2, #128	; 0x80
   1d3ce:	bf28      	it	cs
   1d3d0:	2280      	movcs	r2, #128	; 0x80
   1d3d2:	9200      	str	r2, [sp, #0]
   1d3d4:	2300      	movs	r3, #0
   1d3d6:	aa0c      	add	r2, sp, #48	; 0x30
   1d3d8:	f7ff fc7a 	bl	1ccd0 <log_read_body>
    if (rc < 0) {
   1d3dc:	2800      	cmp	r0, #0
   1d3de:	f2c0 80e5 	blt.w	1d5ac <log_nmgr_encode_entry+0x208>
    data[rc] = 0;
   1d3e2:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
   1d3e6:	eb0d 0003 	add.w	r0, sp, r3
   1d3ea:	f04f 0900 	mov.w	r9, #0
   1d3ee:	f800 9c80 	strb.w	r9, [r0, #-128]
    cb->enc.bytes_written = 0;
   1d3f2:	f8cd 901c 	str.w	r9, [sp, #28]
    cb->enc.write = &cbor_cnt_writer;
   1d3f6:	4b72      	ldr	r3, [pc, #456]	; (1d5c0 <log_nmgr_encode_entry+0x21c>)
   1d3f8:	9306      	str	r3, [sp, #24]
    cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   1d3fa:	464a      	mov	r2, r9
   1d3fc:	a906      	add	r1, sp, #24
   1d3fe:	a802      	add	r0, sp, #8
   1d400:	f7f4 f9f5 	bl	117ee <cbor_encoder_init>
    rsp_len = log_offset->lo_data_len;
   1d404:	f8d6 800c 	ldr.w	r8, [r6, #12]
    g_err |= cbor_encoder_create_map(&cnt_encoder, &rsp, CborIndefiniteLength);
   1d408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d40c:	a908      	add	r1, sp, #32
   1d40e:	a802      	add	r0, sp, #8
   1d410:	f7f4 fab9 	bl	11986 <cbor_encoder_create_map>
   1d414:	4604      	mov	r4, r0
   1d416:	2203      	movs	r2, #3
   1d418:	496a      	ldr	r1, [pc, #424]	; (1d5c4 <log_nmgr_encode_entry+0x220>)
   1d41a:	a808      	add	r0, sp, #32
   1d41c:	f7f4 faa7 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "msg");
   1d420:	4304      	orrs	r4, r0
   1d422:	a80c      	add	r0, sp, #48	; 0x30
   1d424:	f7ee fe6a 	bl	c0fc <strlen>
   1d428:	4602      	mov	r2, r0
   1d42a:	a90c      	add	r1, sp, #48	; 0x30
   1d42c:	a808      	add	r0, sp, #32
   1d42e:	f7f4 fa9e 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, (char *)data);
   1d432:	4304      	orrs	r4, r0
   1d434:	2202      	movs	r2, #2
   1d436:	4964      	ldr	r1, [pc, #400]	; (1d5c8 <log_nmgr_encode_entry+0x224>)
   1d438:	a808      	add	r0, sp, #32
   1d43a:	f7f4 fa98 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "ts");
   1d43e:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&rsp, ueh->ue_ts);
   1d440:	682a      	ldr	r2, [r5, #0]
   1d442:	686b      	ldr	r3, [r5, #4]
   1d444:	a808      	add	r0, sp, #32
   1d446:	f7f4 fa17 	bl	11878 <cbor_encode_int>
   1d44a:	4304      	orrs	r4, r0
   1d44c:	2205      	movs	r2, #5
   1d44e:	495f      	ldr	r1, [pc, #380]	; (1d5cc <log_nmgr_encode_entry+0x228>)
   1d450:	a808      	add	r0, sp, #32
   1d452:	f7f4 fa8c 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "level");
   1d456:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp, ueh->ue_level);
   1d458:	7b6a      	ldrb	r2, [r5, #13]
   1d45a:	464b      	mov	r3, r9
   1d45c:	a808      	add	r0, sp, #32
   1d45e:	f7f4 f9cb 	bl	117f8 <cbor_encode_uint>
   1d462:	4304      	orrs	r4, r0
   1d464:	2205      	movs	r2, #5
   1d466:	495a      	ldr	r1, [pc, #360]	; (1d5d0 <log_nmgr_encode_entry+0x22c>)
   1d468:	a808      	add	r0, sp, #32
   1d46a:	f7f4 fa80 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "index");
   1d46e:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_index);
   1d470:	68aa      	ldr	r2, [r5, #8]
   1d472:	464b      	mov	r3, r9
   1d474:	a808      	add	r0, sp, #32
   1d476:	f7f4 f9bf 	bl	117f8 <cbor_encode_uint>
   1d47a:	4304      	orrs	r4, r0
   1d47c:	2206      	movs	r2, #6
   1d47e:	4955      	ldr	r1, [pc, #340]	; (1d5d4 <log_nmgr_encode_entry+0x230>)
   1d480:	a808      	add	r0, sp, #32
   1d482:	f7f4 fa74 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "module");
   1d486:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_module);
   1d488:	7b2a      	ldrb	r2, [r5, #12]
   1d48a:	464b      	mov	r3, r9
   1d48c:	a808      	add	r0, sp, #32
   1d48e:	f7f4 f9b3 	bl	117f8 <cbor_encode_uint>
   1d492:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_close_container(&cnt_encoder, &rsp);
   1d494:	a908      	add	r1, sp, #32
   1d496:	a802      	add	r0, sp, #8
   1d498:	f7f4 fa83 	bl	119a2 <cbor_encoder_close_container>
   1d49c:	4304      	orrs	r4, r0
{   return encoder->writer->bytes_written; }
   1d49e:	9b02      	ldr	r3, [sp, #8]
   1d4a0:	685b      	ldr	r3, [r3, #4]
    rsp_len += cbor_encode_bytes_written(&cnt_encoder);
   1d4a2:	4498      	add	r8, r3
    if (rsp_len > MYNEWT_VAL(LOG_NMGR_MAX_RSP_LEN)) {
   1d4a4:	f5b8 7fc8 	cmp.w	r8, #400	; 0x190
   1d4a8:	dd73      	ble.n	1d592 <log_nmgr_encode_entry+0x1ee>
        if (ed->counter == 0) {
   1d4aa:	683b      	ldr	r3, [r7, #0]
   1d4ac:	2b00      	cmp	r3, #0
   1d4ae:	f040 8081 	bne.w	1d5b4 <log_nmgr_encode_entry+0x210>
            too_long = true;
   1d4b2:	f04f 0901 	mov.w	r9, #1
    log_offset->lo_data_len = rsp_len;
   1d4b6:	f8c6 800c 	str.w	r8, [r6, #12]
    g_err |= cbor_encoder_create_map(ed->enc, &rsp, CborIndefiniteLength);
   1d4ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d4be:	a908      	add	r1, sp, #32
   1d4c0:	6878      	ldr	r0, [r7, #4]
   1d4c2:	f7f4 fa60 	bl	11986 <cbor_encoder_create_map>
   1d4c6:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d4c8:	2203      	movs	r2, #3
   1d4ca:	493e      	ldr	r1, [pc, #248]	; (1d5c4 <log_nmgr_encode_entry+0x220>)
   1d4cc:	a808      	add	r0, sp, #32
   1d4ce:	f7f4 fa4e 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "msg");
   1d4d2:	4304      	orrs	r4, r0
    if (too_long) {
   1d4d4:	f1b9 0f00 	cmp.w	r9, #0
   1d4d8:	d15e      	bne.n	1d598 <log_nmgr_encode_entry+0x1f4>
   1d4da:	a80c      	add	r0, sp, #48	; 0x30
   1d4dc:	f7ee fe0e 	bl	c0fc <strlen>
   1d4e0:	4602      	mov	r2, r0
   1d4e2:	a90c      	add	r1, sp, #48	; 0x30
   1d4e4:	a808      	add	r0, sp, #32
   1d4e6:	f7f4 fa42 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, (char *)data);
   1d4ea:	4304      	orrs	r4, r0
   1d4ec:	2202      	movs	r2, #2
   1d4ee:	4936      	ldr	r1, [pc, #216]	; (1d5c8 <log_nmgr_encode_entry+0x224>)
   1d4f0:	a808      	add	r0, sp, #32
   1d4f2:	f7f4 fa3c 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "ts");
   1d4f6:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&rsp, ueh->ue_ts);
   1d4f8:	682a      	ldr	r2, [r5, #0]
   1d4fa:	686b      	ldr	r3, [r5, #4]
   1d4fc:	a808      	add	r0, sp, #32
   1d4fe:	f7f4 f9bb 	bl	11878 <cbor_encode_int>
   1d502:	4304      	orrs	r4, r0
   1d504:	2205      	movs	r2, #5
   1d506:	4931      	ldr	r1, [pc, #196]	; (1d5cc <log_nmgr_encode_entry+0x228>)
   1d508:	a808      	add	r0, sp, #32
   1d50a:	f7f4 fa30 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "level");
   1d50e:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp, ueh->ue_level);
   1d510:	2600      	movs	r6, #0
   1d512:	7b6a      	ldrb	r2, [r5, #13]
   1d514:	4633      	mov	r3, r6
   1d516:	a808      	add	r0, sp, #32
   1d518:	f7f4 f96e 	bl	117f8 <cbor_encode_uint>
   1d51c:	4304      	orrs	r4, r0
   1d51e:	2205      	movs	r2, #5
   1d520:	492b      	ldr	r1, [pc, #172]	; (1d5d0 <log_nmgr_encode_entry+0x22c>)
   1d522:	a808      	add	r0, sp, #32
   1d524:	f7f4 fa23 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "index");
   1d528:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_index);
   1d52a:	68aa      	ldr	r2, [r5, #8]
   1d52c:	4633      	mov	r3, r6
   1d52e:	a808      	add	r0, sp, #32
   1d530:	f7f4 f962 	bl	117f8 <cbor_encode_uint>
   1d534:	4304      	orrs	r4, r0
   1d536:	2206      	movs	r2, #6
   1d538:	4926      	ldr	r1, [pc, #152]	; (1d5d4 <log_nmgr_encode_entry+0x230>)
   1d53a:	a808      	add	r0, sp, #32
   1d53c:	f7f4 fa17 	bl	1196e <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "module");
   1d540:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_module);
   1d542:	7b2a      	ldrb	r2, [r5, #12]
   1d544:	4633      	mov	r3, r6
   1d546:	a808      	add	r0, sp, #32
   1d548:	f7f4 f956 	bl	117f8 <cbor_encode_uint>
   1d54c:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_close_container(ed->enc, &rsp);
   1d54e:	a908      	add	r1, sp, #32
   1d550:	6878      	ldr	r0, [r7, #4]
   1d552:	f7f4 fa26 	bl	119a2 <cbor_encoder_close_container>
    ed->counter++;
   1d556:	683b      	ldr	r3, [r7, #0]
   1d558:	3301      	adds	r3, #1
   1d55a:	603b      	str	r3, [r7, #0]
    if (g_err) {
   1d55c:	ea54 0300 	orrs.w	r3, r4, r0
   1d560:	d12a      	bne.n	1d5b8 <log_nmgr_encode_entry+0x214>
    if (too_long) {
   1d562:	f1b9 0f00 	cmp.w	r9, #0
   1d566:	d029      	beq.n	1d5bc <log_nmgr_encode_entry+0x218>
        rc = OS_ENOMEM;
   1d568:	2001      	movs	r0, #1
   1d56a:	e020      	b.n	1d5ae <log_nmgr_encode_entry+0x20a>
    } else if (ueh->ue_ts < log_offset->lo_ts   ||
   1d56c:	f8d5 c000 	ldr.w	ip, [r5]
   1d570:	686b      	ldr	r3, [r5, #4]
   1d572:	45a4      	cmp	ip, r4
   1d574:	eb73 0e02 	sbcs.w	lr, r3, r2
   1d578:	db16      	blt.n	1d5a8 <log_nmgr_encode_entry+0x204>
   1d57a:	429a      	cmp	r2, r3
   1d57c:	bf08      	it	eq
   1d57e:	4564      	cmpeq	r4, ip
   1d580:	f47f af22 	bne.w	1d3c8 <log_nmgr_encode_entry+0x24>
                ueh->ue_index < log_offset->lo_index)) {
   1d584:	68aa      	ldr	r2, [r5, #8]
   1d586:	68b3      	ldr	r3, [r6, #8]
               (ueh->ue_ts == log_offset->lo_ts &&
   1d588:	429a      	cmp	r2, r3
   1d58a:	f4bf af1d 	bcs.w	1d3c8 <log_nmgr_encode_entry+0x24>
    rc = OS_OK;
   1d58e:	2000      	movs	r0, #0
   1d590:	e00d      	b.n	1d5ae <log_nmgr_encode_entry+0x20a>
    too_long = false;
   1d592:	f04f 0900 	mov.w	r9, #0
   1d596:	e78e      	b.n	1d4b6 <log_nmgr_encode_entry+0x112>
        sprintf((char *)data, "error: entry too large (%d bytes)", rsp_len);
   1d598:	4642      	mov	r2, r8
   1d59a:	490f      	ldr	r1, [pc, #60]	; (1d5d8 <log_nmgr_encode_entry+0x234>)
   1d59c:	a80c      	add	r0, sp, #48	; 0x30
   1d59e:	f7fd f9c7 	bl	1a930 <sprintf>
   1d5a2:	e79a      	b.n	1d4da <log_nmgr_encode_entry+0x136>
    rc = OS_OK;
   1d5a4:	2000      	movs	r0, #0
   1d5a6:	e002      	b.n	1d5ae <log_nmgr_encode_entry+0x20a>
   1d5a8:	2000      	movs	r0, #0
   1d5aa:	e000      	b.n	1d5ae <log_nmgr_encode_entry+0x20a>
        rc = OS_ENOENT;
   1d5ac:	200a      	movs	r0, #10
}
   1d5ae:	b02d      	add	sp, #180	; 0xb4
   1d5b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            rc = OS_ENOMEM;
   1d5b4:	2001      	movs	r0, #1
   1d5b6:	e7fa      	b.n	1d5ae <log_nmgr_encode_entry+0x20a>
        return MGMT_ERR_ENOMEM;
   1d5b8:	2002      	movs	r0, #2
   1d5ba:	e7f8      	b.n	1d5ae <log_nmgr_encode_entry+0x20a>
        rc = 0;
   1d5bc:	2000      	movs	r0, #0
   1d5be:	e7f6      	b.n	1d5ae <log_nmgr_encode_entry+0x20a>
   1d5c0:	0001ce1d 	.word	0x0001ce1d
   1d5c4:	00023af4 	.word	0x00023af4
   1d5c8:	000235dc 	.word	0x000235dc
   1d5cc:	00023abc 	.word	0x00023abc
   1d5d0:	00023ad8 	.word	0x00023ad8
   1d5d4:	00023ab4 	.word	0x00023ab4
   1d5d8:	00023af8 	.word	0x00023af8

0001d5dc <log_nmgr_register_group>:
 * Register nmgr group handlers.
 * @return 0 on success; non-zero on failure
 */
int
log_nmgr_register_group(void)
{
   1d5dc:	b508      	push	{r3, lr}
    int rc;

    MGMT_GROUP_SET_HANDLERS(&log_nmgr_group, log_nmgr_group_handlers);
   1d5de:	4805      	ldr	r0, [pc, #20]	; (1d5f4 <log_nmgr_register_group+0x18>)
   1d5e0:	4b05      	ldr	r3, [pc, #20]	; (1d5f8 <log_nmgr_register_group+0x1c>)
   1d5e2:	6003      	str	r3, [r0, #0]
   1d5e4:	2309      	movs	r3, #9
   1d5e6:	8083      	strh	r3, [r0, #4]
    log_nmgr_group.mg_group_id = MGMT_GROUP_ID_LOGS;
   1d5e8:	2304      	movs	r3, #4
   1d5ea:	80c3      	strh	r3, [r0, #6]

    rc = mgmt_group_register(&log_nmgr_group);
   1d5ec:	f7fe f918 	bl	1b820 <mgmt_group_register>
    }

    return (0);
err:
    return (rc);
}
   1d5f0:	bd08      	pop	{r3, pc}
   1d5f2:	bf00      	nop
   1d5f4:	20006a38 	.word	0x20006a38
   1d5f8:	20002bc8 	.word	0x20002bc8

0001d5fc <modlog_find_by_module>:
    return cur;
}

static struct modlog_mapping *
modlog_find_by_module(uint8_t module, struct modlog_mapping **out_prev)
{
   1d5fc:	b410      	push	{r4}
   1d5fe:	4602      	mov	r2, r0
    struct modlog_mapping *prev;
    struct modlog_mapping *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1d600:	4b08      	ldr	r3, [pc, #32]	; (1d624 <modlog_find_by_module+0x28>)
   1d602:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   1d604:	2400      	movs	r4, #0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1d606:	e001      	b.n	1d60c <modlog_find_by_module+0x10>
        if (cur->desc.module > module) {
            cur = NULL;
            break;
        }

        prev = cur;
   1d608:	4604      	mov	r4, r0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1d60a:	6800      	ldr	r0, [r0, #0]
   1d60c:	b120      	cbz	r0, 1d618 <modlog_find_by_module+0x1c>
        if (cur->desc.module == module) {
   1d60e:	7a43      	ldrb	r3, [r0, #9]
   1d610:	4293      	cmp	r3, r2
   1d612:	d001      	beq.n	1d618 <modlog_find_by_module+0x1c>
        if (cur->desc.module > module) {
   1d614:	d9f8      	bls.n	1d608 <modlog_find_by_module+0xc>
            cur = NULL;
   1d616:	2000      	movs	r0, #0
    }

    if (out_prev != NULL) {
   1d618:	b101      	cbz	r1, 1d61c <modlog_find_by_module+0x20>
        *out_prev = prev;
   1d61a:	600c      	str	r4, [r1, #0]
    }

    return cur;
}
   1d61c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d620:	4770      	bx	lr
   1d622:	bf00      	nop
   1d624:	20006b24 	.word	0x20006b24

0001d628 <modlog_insert>:

static void
modlog_insert(struct modlog_mapping *mm)
{
   1d628:	b510      	push	{r4, lr}
   1d62a:	b082      	sub	sp, #8
   1d62c:	4604      	mov	r4, r0
    struct modlog_mapping *prev;

    modlog_find_by_module(mm->desc.module, &prev);
   1d62e:	a901      	add	r1, sp, #4
   1d630:	7a40      	ldrb	r0, [r0, #9]
   1d632:	f7ff ffe3 	bl	1d5fc <modlog_find_by_module>
    if (prev == NULL) {
   1d636:	9b01      	ldr	r3, [sp, #4]
   1d638:	b143      	cbz	r3, 1d64c <modlog_insert+0x24>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
    } else {
        SLIST_INSERT_AFTER(prev, mm, next);
   1d63a:	681b      	ldr	r3, [r3, #0]
   1d63c:	6023      	str	r3, [r4, #0]
   1d63e:	9b01      	ldr	r3, [sp, #4]
   1d640:	601c      	str	r4, [r3, #0]
    }

    if (mm->desc.module == MODLOG_MODULE_DFLT) {
   1d642:	7a63      	ldrb	r3, [r4, #9]
   1d644:	2bff      	cmp	r3, #255	; 0xff
   1d646:	d006      	beq.n	1d656 <modlog_insert+0x2e>
        modlog_first_dflt = mm;
    }
}
   1d648:	b002      	add	sp, #8
   1d64a:	bd10      	pop	{r4, pc}
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
   1d64c:	4b03      	ldr	r3, [pc, #12]	; (1d65c <modlog_insert+0x34>)
   1d64e:	681a      	ldr	r2, [r3, #0]
   1d650:	6022      	str	r2, [r4, #0]
   1d652:	601c      	str	r4, [r3, #0]
   1d654:	e7f5      	b.n	1d642 <modlog_insert+0x1a>
        modlog_first_dflt = mm;
   1d656:	4b02      	ldr	r3, [pc, #8]	; (1d660 <modlog_insert+0x38>)
   1d658:	601c      	str	r4, [r3, #0]
}
   1d65a:	e7f5      	b.n	1d648 <modlog_insert+0x20>
   1d65c:	20006b24 	.word	0x20006b24
   1d660:	20006a44 	.word	0x20006a44

0001d664 <modlog_alloc>:
{
   1d664:	b508      	push	{r3, lr}
    mm = os_memblock_get(&modlog_mapping_pool);
   1d666:	4805      	ldr	r0, [pc, #20]	; (1d67c <modlog_alloc+0x18>)
   1d668:	f7ec f892 	bl	9790 <os_memblock_get>
    if (mm != NULL) {
   1d66c:	4603      	mov	r3, r0
   1d66e:	b118      	cbz	r0, 1d678 <modlog_alloc+0x14>
        *mm = (struct modlog_mapping) { 0 };
   1d670:	2200      	movs	r2, #0
   1d672:	6002      	str	r2, [r0, #0]
   1d674:	6042      	str	r2, [r0, #4]
   1d676:	6082      	str	r2, [r0, #8]
}
   1d678:	4618      	mov	r0, r3
   1d67a:	bd08      	pop	{r3, pc}
   1d67c:	20006b08 	.word	0x20006b08

0001d680 <modlog_infer_handle>:
{
   1d680:	b508      	push	{r3, lr}
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
   1d682:	4a0f      	ldr	r2, [pc, #60]	; (1d6c0 <modlog_infer_handle+0x40>)
   1d684:	1a82      	subs	r2, r0, r2
    idx = off / elem_sz;
   1d686:	480f      	ldr	r0, [pc, #60]	; (1d6c4 <modlog_infer_handle+0x44>)
   1d688:	fba0 3002 	umull	r3, r0, r0, r2
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   1d68c:	2abf      	cmp	r2, #191	; 0xbf
   1d68e:	d80b      	bhi.n	1d6a8 <modlog_infer_handle+0x28>
   1d690:	08c0      	lsrs	r0, r0, #3
    assert(off % elem_sz == 0);
   1d692:	4b0c      	ldr	r3, [pc, #48]	; (1d6c4 <modlog_infer_handle+0x44>)
   1d694:	fba3 1302 	umull	r1, r3, r3, r2
   1d698:	08db      	lsrs	r3, r3, #3
   1d69a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d69e:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   1d6a2:	d107      	bne.n	1d6b4 <modlog_infer_handle+0x34>
}
   1d6a4:	b2c0      	uxtb	r0, r0
   1d6a6:	bd08      	pop	{r3, pc}
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   1d6a8:	2300      	movs	r3, #0
   1d6aa:	461a      	mov	r2, r3
   1d6ac:	4619      	mov	r1, r3
   1d6ae:	4618      	mov	r0, r3
   1d6b0:	f7eb fc50 	bl	8f54 <__assert_func>
    assert(off % elem_sz == 0);
   1d6b4:	2300      	movs	r3, #0
   1d6b6:	461a      	mov	r2, r3
   1d6b8:	4619      	mov	r1, r3
   1d6ba:	4618      	mov	r0, r3
   1d6bc:	f7eb fc4a 	bl	8f54 <__assert_func>
   1d6c0:	20006a48 	.word	0x20006a48
   1d6c4:	aaaaaaab 	.word	0xaaaaaaab

0001d6c8 <modlog_register_no_lock>:
modlog_register_no_lock(uint8_t module, struct log *log, uint8_t min_level,
                        uint8_t *out_handle)
{
    struct modlog_mapping *mm;

    if (log == NULL) {
   1d6c8:	b1c9      	cbz	r1, 1d6fe <modlog_register_no_lock+0x36>
{
   1d6ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d6ce:	4607      	mov	r7, r0
   1d6d0:	4616      	mov	r6, r2
   1d6d2:	461d      	mov	r5, r3
   1d6d4:	4688      	mov	r8, r1
        return SYS_EINVAL;
    }

    mm = modlog_alloc();
   1d6d6:	f7ff ffc5 	bl	1d664 <modlog_alloc>
    if (mm == NULL) {
   1d6da:	4604      	mov	r4, r0
   1d6dc:	b190      	cbz	r0, 1d704 <modlog_register_no_lock+0x3c>
        return SYS_ENOMEM;
    }

    mm->desc = (struct modlog_desc) {
        .log = log,
        .handle = modlog_infer_handle(mm),
   1d6de:	f7ff ffcf 	bl	1d680 <modlog_infer_handle>
    mm->desc = (struct modlog_desc) {
   1d6e2:	f8c4 8004 	str.w	r8, [r4, #4]
   1d6e6:	7220      	strb	r0, [r4, #8]
   1d6e8:	7267      	strb	r7, [r4, #9]
   1d6ea:	72a6      	strb	r6, [r4, #10]
        .module = module,
        .min_level = min_level,
    };

    modlog_insert(mm);
   1d6ec:	4620      	mov	r0, r4
   1d6ee:	f7ff ff9b 	bl	1d628 <modlog_insert>

    if (out_handle != NULL) {
   1d6f2:	b155      	cbz	r5, 1d70a <modlog_register_no_lock+0x42>
        *out_handle = mm->desc.handle;
   1d6f4:	7a23      	ldrb	r3, [r4, #8]
   1d6f6:	702b      	strb	r3, [r5, #0]
    }

    return 0;
   1d6f8:	2000      	movs	r0, #0
}
   1d6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   1d6fe:	f06f 0001 	mvn.w	r0, #1
}
   1d702:	4770      	bx	lr
        return SYS_ENOMEM;
   1d704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d708:	e7f7      	b.n	1d6fa <modlog_register_no_lock+0x32>
    return 0;
   1d70a:	2000      	movs	r0, #0
   1d70c:	e7f5      	b.n	1d6fa <modlog_register_no_lock+0x32>

0001d70e <modlog_append_one>:
modlog_append_one(struct modlog_mapping *mm, uint8_t module, uint8_t level,
                  uint8_t etype, void *data, uint16_t len)
{
    int rc;

    if (level >= mm->desc.min_level) {
   1d70e:	f890 c00a 	ldrb.w	ip, [r0, #10]
   1d712:	4594      	cmp	ip, r2
   1d714:	d901      	bls.n	1d71a <modlog_append_one+0xc>
    } else {
        LOG_STATS_INC(mm->desc.log, writes);
        LOG_STATS_INC(mm->desc.log, drops);
    }

    return 0;
   1d716:	2000      	movs	r0, #0
}
   1d718:	4770      	bx	lr
{
   1d71a:	b510      	push	{r4, lr}
   1d71c:	b082      	sub	sp, #8
        rc = log_append_body(mm->desc.log, module, level, etype, data, len);
   1d71e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
   1d722:	9401      	str	r4, [sp, #4]
   1d724:	9c04      	ldr	r4, [sp, #16]
   1d726:	9400      	str	r4, [sp, #0]
   1d728:	6840      	ldr	r0, [r0, #4]
   1d72a:	f7ff f9b3 	bl	1ca94 <log_append_body>
        if (rc != 0) {
   1d72e:	b908      	cbnz	r0, 1d734 <modlog_append_one+0x26>
}
   1d730:	b002      	add	sp, #8
   1d732:	bd10      	pop	{r4, pc}
            return SYS_EIO;
   1d734:	f06f 0004 	mvn.w	r0, #4
   1d738:	e7fa      	b.n	1d730 <modlog_append_one+0x22>
	...

0001d73c <modlog_append_no_lock>:

static int
modlog_append_no_lock(uint8_t module, uint8_t level, uint8_t etype,
                      void *data, uint16_t len)
{
   1d73c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d740:	b083      	sub	sp, #12
   1d742:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    struct modlog_mapping *mm;
    int rc;

    if (module == MODLOG_MODULE_DFLT) {
   1d746:	28ff      	cmp	r0, #255	; 0xff
   1d748:	d031      	beq.n	1d7ae <modlog_append_no_lock+0x72>
   1d74a:	4605      	mov	r5, r0
   1d74c:	460e      	mov	r6, r1
   1d74e:	4617      	mov	r7, r2
   1d750:	4698      	mov	r8, r3
        return SYS_EINVAL;
    }

    mm = modlog_find_by_module(module, NULL);
   1d752:	2100      	movs	r1, #0
   1d754:	f7ff ff52 	bl	1d5fc <modlog_find_by_module>
    if (mm != NULL) {
   1d758:	4604      	mov	r4, r0
   1d75a:	b198      	cbz	r0, 1d784 <modlog_append_no_lock+0x48>
        while (mm != NULL && mm->desc.module == module) {
   1d75c:	b354      	cbz	r4, 1d7b4 <modlog_append_no_lock+0x78>
   1d75e:	7a60      	ldrb	r0, [r4, #9]
   1d760:	42a8      	cmp	r0, r5
   1d762:	d10d      	bne.n	1d780 <modlog_append_no_lock+0x44>
            rc = modlog_append_one(mm, module, level, etype, data, len);
   1d764:	f8cd 9004 	str.w	r9, [sp, #4]
   1d768:	f8cd 8000 	str.w	r8, [sp]
   1d76c:	463b      	mov	r3, r7
   1d76e:	4632      	mov	r2, r6
   1d770:	4629      	mov	r1, r5
   1d772:	4620      	mov	r0, r4
   1d774:	f7ff ffcb 	bl	1d70e <modlog_append_one>
            if (rc != 0) {
   1d778:	4603      	mov	r3, r0
   1d77a:	b9e0      	cbnz	r0, 1d7b6 <modlog_append_no_lock+0x7a>
                return rc;
            }

            mm = SLIST_NEXT(mm, next);
   1d77c:	6824      	ldr	r4, [r4, #0]
   1d77e:	e7ed      	b.n	1d75c <modlog_append_no_lock+0x20>
        }
        return 0;
   1d780:	2300      	movs	r3, #0
   1d782:	e018      	b.n	1d7b6 <modlog_append_no_lock+0x7a>
    }

    /* No mappings match the specified module; write to the default set. */
    for (mm = modlog_first_dflt;
   1d784:	4b0e      	ldr	r3, [pc, #56]	; (1d7c0 <modlog_append_no_lock+0x84>)
   1d786:	681c      	ldr	r4, [r3, #0]
   1d788:	e000      	b.n	1d78c <modlog_append_no_lock+0x50>
         mm != NULL;
         mm = SLIST_NEXT(mm, next)) {
   1d78a:	6824      	ldr	r4, [r4, #0]
    for (mm = modlog_first_dflt;
   1d78c:	b16c      	cbz	r4, 1d7aa <modlog_append_no_lock+0x6e>

        rc = modlog_append_one(mm, module, level, etype, data, len);
   1d78e:	f8cd 9004 	str.w	r9, [sp, #4]
   1d792:	f8cd 8000 	str.w	r8, [sp]
   1d796:	463b      	mov	r3, r7
   1d798:	4632      	mov	r2, r6
   1d79a:	4629      	mov	r1, r5
   1d79c:	4620      	mov	r0, r4
   1d79e:	f7ff ffb6 	bl	1d70e <modlog_append_one>
        if (rc != 0) {
   1d7a2:	4603      	mov	r3, r0
   1d7a4:	2800      	cmp	r0, #0
   1d7a6:	d0f0      	beq.n	1d78a <modlog_append_no_lock+0x4e>
   1d7a8:	e005      	b.n	1d7b6 <modlog_append_no_lock+0x7a>
            return rc;
        }
    }

    return 0;
   1d7aa:	2300      	movs	r3, #0
   1d7ac:	e003      	b.n	1d7b6 <modlog_append_no_lock+0x7a>
        return SYS_EINVAL;
   1d7ae:	f06f 0301 	mvn.w	r3, #1
   1d7b2:	e000      	b.n	1d7b6 <modlog_append_no_lock+0x7a>
        return 0;
   1d7b4:	2300      	movs	r3, #0
}
   1d7b6:	4618      	mov	r0, r3
   1d7b8:	b003      	add	sp, #12
   1d7ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d7be:	bf00      	nop
   1d7c0:	20006a44 	.word	0x20006a44

0001d7c4 <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
   1d7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d7c8:	4604      	mov	r4, r0
   1d7ca:	460d      	mov	r5, r1
   1d7cc:	4616      	mov	r6, r2
   1d7ce:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_write(&modlog_rwl);
   1d7d0:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1d7f4 <modlog_register+0x30>
   1d7d4:	4640      	mov	r0, r8
   1d7d6:	f000 fbbe 	bl	1df56 <rwlock_acquire_write>
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
   1d7da:	463b      	mov	r3, r7
   1d7dc:	4632      	mov	r2, r6
   1d7de:	4629      	mov	r1, r5
   1d7e0:	4620      	mov	r0, r4
   1d7e2:	f7ff ff71 	bl	1d6c8 <modlog_register_no_lock>
   1d7e6:	4604      	mov	r4, r0
    rwlock_release_write(&modlog_rwl);
   1d7e8:	4640      	mov	r0, r8
   1d7ea:	f000 fbde 	bl	1dfaa <rwlock_release_write>

    return rc;
}
   1d7ee:	4620      	mov	r0, r4
   1d7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d7f4:	20006b28 	.word	0x20006b28

0001d7f8 <modlog_append>:
}

int
modlog_append(uint8_t module, uint8_t level, uint8_t etype,
              void *data, uint16_t len)
{
   1d7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d7fc:	b082      	sub	sp, #8
   1d7fe:	4604      	mov	r4, r0
   1d800:	460d      	mov	r5, r1
   1d802:	4616      	mov	r6, r2
   1d804:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_read(&modlog_rwl);
   1d806:	f8df 802c 	ldr.w	r8, [pc, #44]	; 1d834 <modlog_append+0x3c>
   1d80a:	4640      	mov	r0, r8
   1d80c:	f000 fb63 	bl	1ded6 <rwlock_acquire_read>
    rc = modlog_append_no_lock(module, level, etype, data, len);
   1d810:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1d814:	9300      	str	r3, [sp, #0]
   1d816:	463b      	mov	r3, r7
   1d818:	4632      	mov	r2, r6
   1d81a:	4629      	mov	r1, r5
   1d81c:	4620      	mov	r0, r4
   1d81e:	f7ff ff8d 	bl	1d73c <modlog_append_no_lock>
   1d822:	4604      	mov	r4, r0
    rwlock_release_read(&modlog_rwl);
   1d824:	4640      	mov	r0, r8
   1d826:	f000 fb83 	bl	1df30 <rwlock_release_read>

    return rc;
}
   1d82a:	4620      	mov	r0, r4
   1d82c:	b002      	add	sp, #8
   1d82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d832:	bf00      	nop
   1d834:	20006b28 	.word	0x20006b28

0001d838 <modlog_printf>:
    return rc;
}

void
modlog_printf(uint8_t module, uint8_t level, const char *msg, ...)
{
   1d838:	b40c      	push	{r2, r3}
   1d83a:	b530      	push	{r4, r5, lr}
   1d83c:	b0a5      	sub	sp, #148	; 0x94
   1d83e:	4604      	mov	r4, r0
   1d840:	460d      	mov	r5, r1
   1d842:	ab28      	add	r3, sp, #160	; 0xa0
   1d844:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)];
    int len;

    va_start(args, msg);
   1d848:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN), msg, args);
   1d84a:	2180      	movs	r1, #128	; 0x80
   1d84c:	a803      	add	r0, sp, #12
   1d84e:	f7ef f843 	bl	c8d8 <vsnprintf>
    va_end(args);

    if (len >= MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)) {
   1d852:	287f      	cmp	r0, #127	; 0x7f
   1d854:	dd00      	ble.n	1d858 <modlog_printf+0x20>
        len = MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN) - 1;
   1d856:	207f      	movs	r0, #127	; 0x7f
    }

    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
   1d858:	b280      	uxth	r0, r0
   1d85a:	9000      	str	r0, [sp, #0]
   1d85c:	ab03      	add	r3, sp, #12
   1d85e:	2200      	movs	r2, #0
   1d860:	4629      	mov	r1, r5
   1d862:	4620      	mov	r0, r4
   1d864:	f7ff ffc8 	bl	1d7f8 <modlog_append>
}
   1d868:	b025      	add	sp, #148	; 0x94
   1d86a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1d86e:	b002      	add	sp, #8
   1d870:	4770      	bx	lr
	...

0001d874 <modlog_init>:

void
modlog_init(void)
{
   1d874:	b510      	push	{r4, lr}
   1d876:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   1d878:	4b1e      	ldr	r3, [pc, #120]	; (1d8f4 <modlog_init+0x80>)
   1d87a:	781b      	ldrb	r3, [r3, #0]
   1d87c:	2b00      	cmp	r3, #0
   1d87e:	d034      	beq.n	1d8ea <modlog_init+0x76>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
   1d880:	4b1d      	ldr	r3, [pc, #116]	; (1d8f8 <modlog_init+0x84>)
   1d882:	9300      	str	r3, [sp, #0]
   1d884:	4b1d      	ldr	r3, [pc, #116]	; (1d8fc <modlog_init+0x88>)
   1d886:	220c      	movs	r2, #12
   1d888:	2110      	movs	r1, #16
   1d88a:	481d      	ldr	r0, [pc, #116]	; (1d900 <modlog_init+0x8c>)
   1d88c:	f7eb ff76 	bl	977c <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   1d890:	b138      	cbz	r0, 1d8a2 <modlog_init+0x2e>
   1d892:	2000      	movs	r0, #0
   1d894:	9000      	str	r0, [sp, #0]
   1d896:	4b1b      	ldr	r3, [pc, #108]	; (1d904 <modlog_init+0x90>)
   1d898:	681c      	ldr	r4, [r3, #0]
   1d89a:	4603      	mov	r3, r0
   1d89c:	4602      	mov	r2, r0
   1d89e:	4601      	mov	r1, r0
   1d8a0:	47a0      	blx	r4

    SLIST_INIT(&modlog_mappings);
   1d8a2:	2300      	movs	r3, #0
   1d8a4:	4a18      	ldr	r2, [pc, #96]	; (1d908 <modlog_init+0x94>)
   1d8a6:	6013      	str	r3, [r2, #0]
    modlog_first_dflt = NULL;
   1d8a8:	4a18      	ldr	r2, [pc, #96]	; (1d90c <modlog_init+0x98>)
   1d8aa:	6013      	str	r3, [r2, #0]

    rc = rwlock_init(&modlog_rwl);
   1d8ac:	4818      	ldr	r0, [pc, #96]	; (1d910 <modlog_init+0x9c>)
   1d8ae:	f000 fb8b 	bl	1dfc8 <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1d8b2:	b138      	cbz	r0, 1d8c4 <modlog_init+0x50>
   1d8b4:	2000      	movs	r0, #0
   1d8b6:	9000      	str	r0, [sp, #0]
   1d8b8:	4b12      	ldr	r3, [pc, #72]	; (1d904 <modlog_init+0x90>)
   1d8ba:	681c      	ldr	r4, [r3, #0]
   1d8bc:	4603      	mov	r3, r0
   1d8be:	4602      	mov	r2, r0
   1d8c0:	4601      	mov	r1, r0
   1d8c2:	47a0      	blx	r4

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
   1d8c4:	f7ff fa58 	bl	1cd78 <log_console_get>
   1d8c8:	4601      	mov	r1, r0
   1d8ca:	2300      	movs	r3, #0
   1d8cc:	461a      	mov	r2, r3
   1d8ce:	20ff      	movs	r0, #255	; 0xff
   1d8d0:	f7ff ff78 	bl	1d7c4 <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1d8d4:	b138      	cbz	r0, 1d8e6 <modlog_init+0x72>
   1d8d6:	2000      	movs	r0, #0
   1d8d8:	9000      	str	r0, [sp, #0]
   1d8da:	4b0a      	ldr	r3, [pc, #40]	; (1d904 <modlog_init+0x90>)
   1d8dc:	681c      	ldr	r4, [r3, #0]
   1d8de:	4603      	mov	r3, r0
   1d8e0:	4602      	mov	r2, r0
   1d8e2:	4601      	mov	r1, r0
   1d8e4:	47a0      	blx	r4
#endif
}
   1d8e6:	b002      	add	sp, #8
   1d8e8:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1d8ea:	461a      	mov	r2, r3
   1d8ec:	4619      	mov	r1, r3
   1d8ee:	4618      	mov	r0, r3
   1d8f0:	f7eb fb30 	bl	8f54 <__assert_func>
   1d8f4:	200065ac 	.word	0x200065ac
   1d8f8:	00023b1c 	.word	0x00023b1c
   1d8fc:	20006a48 	.word	0x20006a48
   1d900:	20006b08 	.word	0x20006b08
   1d904:	200001ec 	.word	0x200001ec
   1d908:	20006b24 	.word	0x20006b24
   1d90c:	20006a44 	.word	0x20006a44
   1d910:	20006b28 	.word	0x20006b28

0001d914 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1d914:	b530      	push	{r4, r5, lr}
   1d916:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1d918:	7885      	ldrb	r5, [r0, #2]
   1d91a:	4b20      	ldr	r3, [pc, #128]	; (1d99c <mfg_seek_next_aux+0x88>)
   1d91c:	681b      	ldr	r3, [r3, #0]
   1d91e:	429d      	cmp	r5, r3
   1d920:	da33      	bge.n	1d98a <mfg_seek_next_aux+0x76>
   1d922:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1d924:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   1d928:	a901      	add	r1, sp, #4
   1d92a:	4a1d      	ldr	r2, [pc, #116]	; (1d9a0 <mfg_seek_next_aux+0x8c>)
   1d92c:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   1d930:	f7fe fe88 	bl	1c644 <flash_area_open>
    if (rc != 0) {
   1d934:	bb60      	cbnz	r0, 1d990 <mfg_seek_next_aux+0x7c>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1d936:	6862      	ldr	r2, [r4, #4]
   1d938:	b9c2      	cbnz	r2, 1d96c <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1d93a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1d93e:	4b18      	ldr	r3, [pc, #96]	; (1d9a0 <mfg_seek_next_aux+0x8c>)
   1d940:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1d944:	686b      	ldr	r3, [r5, #4]
   1d946:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1d948:	6861      	ldr	r1, [r4, #4]
   1d94a:	9801      	ldr	r0, [sp, #4]
   1d94c:	6883      	ldr	r3, [r0, #8]
   1d94e:	3b08      	subs	r3, #8
   1d950:	4299      	cmp	r1, r3
   1d952:	d313      	bcc.n	1d97c <mfg_seek_next_aux+0x68>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1d954:	78a3      	ldrb	r3, [r4, #2]
   1d956:	1c59      	adds	r1, r3, #1
   1d958:	4a10      	ldr	r2, [pc, #64]	; (1d99c <mfg_seek_next_aux+0x88>)
   1d95a:	6812      	ldr	r2, [r2, #0]
   1d95c:	4291      	cmp	r1, r2
   1d95e:	da0a      	bge.n	1d976 <mfg_seek_next_aux+0x62>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1d960:	2200      	movs	r2, #0
   1d962:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1d964:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1d966:	f06f 0005 	mvn.w	r0, #5
   1d96a:	e00c      	b.n	1d986 <mfg_seek_next_aux+0x72>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1d96c:	7863      	ldrb	r3, [r4, #1]
   1d96e:	4413      	add	r3, r2
   1d970:	3302      	adds	r3, #2
   1d972:	6063      	str	r3, [r4, #4]
   1d974:	e7e8      	b.n	1d948 <mfg_seek_next_aux+0x34>
            rc = SYS_EDONE;
   1d976:	f06f 000e 	mvn.w	r0, #14
        }
        goto done;
   1d97a:	e004      	b.n	1d986 <mfg_seek_next_aux+0x72>
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1d97c:	2302      	movs	r3, #2
   1d97e:	4622      	mov	r2, r4
   1d980:	f7fe fec0 	bl	1c704 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1d984:	b938      	cbnz	r0, 1d996 <mfg_seek_next_aux+0x82>
    }

done:
    flash_area_close(fap);
    return rc;
}
   1d986:	b003      	add	sp, #12
   1d988:	bd30      	pop	{r4, r5, pc}
        return SYS_EINVAL;
   1d98a:	f06f 0001 	mvn.w	r0, #1
   1d98e:	e7fa      	b.n	1d986 <mfg_seek_next_aux+0x72>
        return SYS_EIO;
   1d990:	f06f 0004 	mvn.w	r0, #4
   1d994:	e7f7      	b.n	1d986 <mfg_seek_next_aux+0x72>
        rc = SYS_EIO;
   1d996:	f06f 0004 	mvn.w	r0, #4
   1d99a:	e7f4      	b.n	1d986 <mfg_seek_next_aux+0x72>
   1d99c:	20006b68 	.word	0x20006b68
   1d9a0:	20006b50 	.word	0x20006b50

0001d9a4 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1d9a4:	b530      	push	{r4, r5, lr}
   1d9a6:	b085      	sub	sp, #20
   1d9a8:	4605      	mov	r5, r0
   1d9aa:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1d9ac:	a903      	add	r1, sp, #12
   1d9ae:	f7fe fe49 	bl	1c644 <flash_area_open>
    if (rc != 0) {
   1d9b2:	b9d8      	cbnz	r0, 1d9ec <mfg_read_mmr+0x48>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1d9b4:	9803      	ldr	r0, [sp, #12]
   1d9b6:	6881      	ldr	r1, [r0, #8]
   1d9b8:	2308      	movs	r3, #8
   1d9ba:	aa01      	add	r2, sp, #4
   1d9bc:	3908      	subs	r1, #8
   1d9be:	f7fe fea1 	bl	1c704 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1d9c2:	b9b0      	cbnz	r0, 1d9f2 <mfg_read_mmr+0x4e>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1d9c4:	9a02      	ldr	r2, [sp, #8]
   1d9c6:	4b11      	ldr	r3, [pc, #68]	; (1da0c <mfg_read_mmr+0x68>)
   1d9c8:	429a      	cmp	r2, r3
   1d9ca:	d115      	bne.n	1d9f8 <mfg_read_mmr+0x54>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1d9cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1d9d0:	2b02      	cmp	r3, #2
   1d9d2:	d114      	bne.n	1d9fe <mfg_read_mmr+0x5a>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1d9d4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1d9d8:	9b03      	ldr	r3, [sp, #12]
   1d9da:	689b      	ldr	r3, [r3, #8]
   1d9dc:	429a      	cmp	r2, r3
   1d9de:	d811      	bhi.n	1da04 <mfg_read_mmr+0x60>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1d9e0:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1d9e2:	7025      	strb	r5, [r4, #0]
   1d9e4:	6063      	str	r3, [r4, #4]
   1d9e6:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1d9e8:	b005      	add	sp, #20
   1d9ea:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1d9ec:	f06f 0004 	mvn.w	r0, #4
   1d9f0:	e7fa      	b.n	1d9e8 <mfg_read_mmr+0x44>
        return SYS_EIO;
   1d9f2:	f06f 0004 	mvn.w	r0, #4
   1d9f6:	e7f7      	b.n	1d9e8 <mfg_read_mmr+0x44>
        return SYS_ENODEV;
   1d9f8:	f06f 0008 	mvn.w	r0, #8
   1d9fc:	e7f4      	b.n	1d9e8 <mfg_read_mmr+0x44>
        return SYS_ENOTSUP;
   1d9fe:	f06f 000b 	mvn.w	r0, #11
   1da02:	e7f1      	b.n	1d9e8 <mfg_read_mmr+0x44>
        return SYS_ENODEV;
   1da04:	f06f 0008 	mvn.w	r0, #8
   1da08:	e7ee      	b.n	1d9e8 <mfg_read_mmr+0x44>
   1da0a:	bf00      	nop
   1da0c:	3bb2a269 	.word	0x3bb2a269

0001da10 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1da10:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1da12:	2300      	movs	r3, #0
   1da14:	e000      	b.n	1da18 <mfg_read_next_mmr+0x8>
   1da16:	3301      	adds	r3, #1
   1da18:	4a10      	ldr	r2, [pc, #64]	; (1da5c <mfg_read_next_mmr+0x4c>)
   1da1a:	6811      	ldr	r1, [r2, #0]
   1da1c:	4299      	cmp	r1, r3
   1da1e:	dd09      	ble.n	1da34 <mfg_read_next_mmr+0x24>
        if (mfg_mmrs[i].area_id == area_id) {
   1da20:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1da24:	490e      	ldr	r1, [pc, #56]	; (1da60 <mfg_read_next_mmr+0x50>)
   1da26:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
   1da2a:	4282      	cmp	r2, r0
   1da2c:	d1f3      	bne.n	1da16 <mfg_read_next_mmr+0x6>
            return SYS_EALREADY;
   1da2e:	f06f 000a 	mvn.w	r0, #10
        return rc;
    }

    mfg_num_mmrs++;
    return 0;
}
   1da32:	bd08      	pop	{r3, pc}
    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1da34:	2901      	cmp	r1, #1
   1da36:	dc0d      	bgt.n	1da54 <mfg_read_next_mmr+0x44>
    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1da38:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1da3c:	4b08      	ldr	r3, [pc, #32]	; (1da60 <mfg_read_next_mmr+0x50>)
   1da3e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1da42:	f7ff ffaf 	bl	1d9a4 <mfg_read_mmr>
    if (rc != 0) {
   1da46:	2800      	cmp	r0, #0
   1da48:	d1f3      	bne.n	1da32 <mfg_read_next_mmr+0x22>
    mfg_num_mmrs++;
   1da4a:	4a04      	ldr	r2, [pc, #16]	; (1da5c <mfg_read_next_mmr+0x4c>)
   1da4c:	6813      	ldr	r3, [r2, #0]
   1da4e:	3301      	adds	r3, #1
   1da50:	6013      	str	r3, [r2, #0]
    return 0;
   1da52:	e7ee      	b.n	1da32 <mfg_read_next_mmr+0x22>
        return SYS_ENOMEM;
   1da54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1da58:	e7eb      	b.n	1da32 <mfg_read_next_mmr+0x22>
   1da5a:	bf00      	nop
   1da5c:	20006b68 	.word	0x20006b68
   1da60:	20006b50 	.word	0x20006b50

0001da64 <mfg_open_flash_area>:
{
   1da64:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1da66:	7883      	ldrb	r3, [r0, #2]
   1da68:	4a0a      	ldr	r2, [pc, #40]	; (1da94 <mfg_open_flash_area+0x30>)
   1da6a:	6812      	ldr	r2, [r2, #0]
   1da6c:	4293      	cmp	r3, r2
   1da6e:	da08      	bge.n	1da82 <mfg_open_flash_area+0x1e>
    rc = flash_area_open(mmr->area_id, fap);
   1da70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1da74:	4a08      	ldr	r2, [pc, #32]	; (1da98 <mfg_open_flash_area+0x34>)
   1da76:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   1da7a:	f7fe fde3 	bl	1c644 <flash_area_open>
    if (rc != 0) {
   1da7e:	b930      	cbnz	r0, 1da8e <mfg_open_flash_area+0x2a>
}
   1da80:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1da82:	2300      	movs	r3, #0
   1da84:	461a      	mov	r2, r3
   1da86:	4619      	mov	r1, r3
   1da88:	4618      	mov	r0, r3
   1da8a:	f7eb fa63 	bl	8f54 <__assert_func>
        return SYS_EIO;
   1da8e:	f06f 0004 	mvn.w	r0, #4
   1da92:	e7f5      	b.n	1da80 <mfg_open_flash_area+0x1c>
   1da94:	20006b68 	.word	0x20006b68
   1da98:	20006b50 	.word	0x20006b50

0001da9c <mfg_read_tlv_body>:
{
   1da9c:	b570      	push	{r4, r5, r6, lr}
   1da9e:	b082      	sub	sp, #8
   1daa0:	4606      	mov	r6, r0
   1daa2:	460c      	mov	r4, r1
   1daa4:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1daa6:	a901      	add	r1, sp, #4
   1daa8:	f7ff ffdc 	bl	1da64 <mfg_open_flash_area>
    if (rc != 0) {
   1daac:	b108      	cbz	r0, 1dab2 <mfg_read_tlv_body+0x16>
}
   1daae:	b002      	add	sp, #8
   1dab0:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1dab2:	462a      	mov	r2, r5
   1dab4:	2100      	movs	r1, #0
   1dab6:	4620      	mov	r0, r4
   1dab8:	f7ee fae9 	bl	c08e <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1dabc:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1dabe:	6871      	ldr	r1, [r6, #4]
   1dac0:	42ab      	cmp	r3, r5
   1dac2:	bfa8      	it	ge
   1dac4:	462b      	movge	r3, r5
   1dac6:	4622      	mov	r2, r4
   1dac8:	3102      	adds	r1, #2
   1daca:	9801      	ldr	r0, [sp, #4]
   1dacc:	f7fe fe1a 	bl	1c704 <flash_area_read>
    if (rc != 0) {
   1dad0:	2800      	cmp	r0, #0
   1dad2:	d0ec      	beq.n	1daae <mfg_read_tlv_body+0x12>
        return SYS_EIO;
   1dad4:	f06f 0004 	mvn.w	r0, #4
   1dad8:	e7e9      	b.n	1daae <mfg_read_tlv_body+0x12>

0001dada <mfg_seek_next>:
{
   1dada:	b510      	push	{r4, lr}
   1dadc:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1dade:	4620      	mov	r0, r4
   1dae0:	f7ff ff18 	bl	1d914 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1dae4:	f110 0f06 	cmn.w	r0, #6
   1dae8:	d0f9      	beq.n	1dade <mfg_seek_next+0x4>
}
   1daea:	bd10      	pop	{r4, pc}

0001daec <mfg_seek_next_with_type>:
{
   1daec:	b538      	push	{r3, r4, r5, lr}
   1daee:	4604      	mov	r4, r0
   1daf0:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1daf2:	4620      	mov	r0, r4
   1daf4:	f7ff fff1 	bl	1dada <mfg_seek_next>
        if (rc != 0) {
   1daf8:	4602      	mov	r2, r0
   1dafa:	b910      	cbnz	r0, 1db02 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1dafc:	7823      	ldrb	r3, [r4, #0]
   1dafe:	42ab      	cmp	r3, r5
   1db00:	d1f7      	bne.n	1daf2 <mfg_seek_next_with_type+0x6>
}
   1db02:	4610      	mov	r0, r2
   1db04:	bd38      	pop	{r3, r4, r5, pc}

0001db06 <mfg_read_tlv_flash_area>:
{
   1db06:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1db08:	220a      	movs	r2, #10
   1db0a:	f7ff ffc7 	bl	1da9c <mfg_read_tlv_body>
}
   1db0e:	bd08      	pop	{r3, pc}

0001db10 <mfg_read_tlv_mmr_ref>:
{
   1db10:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1db12:	2201      	movs	r2, #1
   1db14:	f7ff ffc2 	bl	1da9c <mfg_read_tlv_body>
}
   1db18:	bd08      	pop	{r3, pc}
	...

0001db1c <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1db1c:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1db1e:	4b0f      	ldr	r3, [pc, #60]	; (1db5c <mfg_init+0x40>)
   1db20:	781b      	ldrb	r3, [r3, #0]
   1db22:	b97b      	cbnz	r3, 1db44 <mfg_init+0x28>
        return;
    }
    mfg_initialized = true;
   1db24:	4b0d      	ldr	r3, [pc, #52]	; (1db5c <mfg_init+0x40>)
   1db26:	2201      	movs	r2, #1
   1db28:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1db2a:	4b0d      	ldr	r3, [pc, #52]	; (1db60 <mfg_init+0x44>)
   1db2c:	781b      	ldrb	r3, [r3, #0]
   1db2e:	b153      	cbz	r3, 1db46 <mfg_init+0x2a>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1db30:	2000      	movs	r0, #0
   1db32:	f7ff ff6d 	bl	1da10 <mfg_read_next_mmr>
    if (rc != 0) {
   1db36:	4603      	mov	r3, r0
   1db38:	b150      	cbz	r0, 1db50 <mfg_init+0x34>
    }

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
   1db3a:	4a0a      	ldr	r2, [pc, #40]	; (1db64 <mfg_init+0x48>)
   1db3c:	2103      	movs	r1, #3
   1db3e:	2080      	movs	r0, #128	; 0x80
   1db40:	f7ff fe7a 	bl	1d838 <modlog_printf>
}
   1db44:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1db46:	461a      	mov	r2, r3
   1db48:	4619      	mov	r1, r3
   1db4a:	4618      	mov	r0, r3
   1db4c:	f7eb fa02 	bl	8f54 <__assert_func>
    rc = mfg_read_mmr_refs();
   1db50:	f000 f812 	bl	1db78 <mfg_read_mmr_refs>
    if (rc != 0) {
   1db54:	4603      	mov	r3, r0
   1db56:	2800      	cmp	r0, #0
   1db58:	d0f4      	beq.n	1db44 <mfg_init+0x28>
   1db5a:	e7ee      	b.n	1db3a <mfg_init+0x1e>
   1db5c:	20006b4c 	.word	0x20006b4c
   1db60:	200065ac 	.word	0x200065ac
   1db64:	00023b30 	.word	0x00023b30

0001db68 <mfg_open>:
{
   1db68:	b510      	push	{r4, lr}
   1db6a:	4604      	mov	r4, r0
    mfg_init();
   1db6c:	f7ff ffd6 	bl	1db1c <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1db70:	2300      	movs	r3, #0
   1db72:	6023      	str	r3, [r4, #0]
   1db74:	6063      	str	r3, [r4, #4]
}
   1db76:	bd10      	pop	{r4, pc}

0001db78 <mfg_read_mmr_refs>:
{
   1db78:	b500      	push	{lr}
   1db7a:	b085      	sub	sp, #20
    mfg_open(&reader);
   1db7c:	a801      	add	r0, sp, #4
   1db7e:	f7ff fff3 	bl	1db68 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1db82:	2104      	movs	r1, #4
   1db84:	eb0d 0001 	add.w	r0, sp, r1
   1db88:	f7ff ffb0 	bl	1daec <mfg_seek_next_with_type>
        switch (rc) {
   1db8c:	f110 0f0f 	cmn.w	r0, #15
   1db90:	d00f      	beq.n	1dbb2 <mfg_read_mmr_refs+0x3a>
   1db92:	b978      	cbnz	r0, 1dbb4 <mfg_read_mmr_refs+0x3c>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1db94:	a903      	add	r1, sp, #12
   1db96:	a801      	add	r0, sp, #4
   1db98:	f7ff ffba 	bl	1db10 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1db9c:	b950      	cbnz	r0, 1dbb4 <mfg_read_mmr_refs+0x3c>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1db9e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1dba2:	f7ff ff35 	bl	1da10 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1dba6:	2800      	cmp	r0, #0
   1dba8:	d0eb      	beq.n	1db82 <mfg_read_mmr_refs+0xa>
   1dbaa:	f110 0f0b 	cmn.w	r0, #11
   1dbae:	d0e8      	beq.n	1db82 <mfg_read_mmr_refs+0xa>
   1dbb0:	e000      	b.n	1dbb4 <mfg_read_mmr_refs+0x3c>
        switch (rc) {
   1dbb2:	2000      	movs	r0, #0
}
   1dbb4:	b005      	add	sp, #20
   1dbb6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001dbbc <reboot_conf_export>:

static int
reboot_conf_export(void (*func)(char *name, char *val),
                   enum conf_export_tgt tgt)
{
    if (tgt == CONF_EXPORT_SHOW) {
   1dbbc:	2901      	cmp	r1, #1
   1dbbe:	d001      	beq.n	1dbc4 <reboot_conf_export+0x8>
        func("reboot/reboot_cnt", reboot_cnt_str);
        func("reboot/written", log_reboot_written_str);
    }
    return 0;
}
   1dbc0:	2000      	movs	r0, #0
   1dbc2:	4770      	bx	lr
{
   1dbc4:	b510      	push	{r4, lr}
   1dbc6:	4604      	mov	r4, r0
        func("reboot/reboot_cnt", reboot_cnt_str);
   1dbc8:	4903      	ldr	r1, [pc, #12]	; (1dbd8 <reboot_conf_export+0x1c>)
   1dbca:	4804      	ldr	r0, [pc, #16]	; (1dbdc <reboot_conf_export+0x20>)
   1dbcc:	47a0      	blx	r4
        func("reboot/written", log_reboot_written_str);
   1dbce:	4904      	ldr	r1, [pc, #16]	; (1dbe0 <reboot_conf_export+0x24>)
   1dbd0:	4804      	ldr	r0, [pc, #16]	; (1dbe4 <reboot_conf_export+0x28>)
   1dbd2:	47a0      	blx	r4
}
   1dbd4:	2000      	movs	r0, #0
   1dbd6:	bd10      	pop	{r4, pc}
   1dbd8:	20006b80 	.word	0x20006b80
   1dbdc:	00023b4c 	.word	0x00023b4c
   1dbe0:	20006b70 	.word	0x20006b70
   1dbe4:	00023b60 	.word	0x00023b60

0001dbe8 <reboot_conf_set>:
    if (argc == 1) {
   1dbe8:	2801      	cmp	r0, #1
   1dbea:	d001      	beq.n	1dbf0 <reboot_conf_set+0x8>
    return OS_ENOENT;
   1dbec:	200a      	movs	r0, #10
}
   1dbee:	4770      	bx	lr
{
   1dbf0:	b538      	push	{r3, r4, r5, lr}
   1dbf2:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "reboot_cnt")) {
   1dbf4:	680d      	ldr	r5, [r1, #0]
   1dbf6:	490d      	ldr	r1, [pc, #52]	; (1dc2c <reboot_conf_set+0x44>)
   1dbf8:	4628      	mov	r0, r5
   1dbfa:	f7ee fa73 	bl	c0e4 <strcmp>
   1dbfe:	b130      	cbz	r0, 1dc0e <reboot_conf_set+0x26>
        } else if (!strcmp(argv[0], "written")) {
   1dc00:	490b      	ldr	r1, [pc, #44]	; (1dc30 <reboot_conf_set+0x48>)
   1dc02:	4628      	mov	r0, r5
   1dc04:	f7ee fa6e 	bl	c0e4 <strcmp>
   1dc08:	b140      	cbz	r0, 1dc1c <reboot_conf_set+0x34>
    return OS_ENOENT;
   1dc0a:	200a      	movs	r0, #10
}
   1dc0c:	bd38      	pop	{r3, r4, r5, pc}
            return CONF_VALUE_SET(val, CONF_INT16, reboot_cnt);
   1dc0e:	2302      	movs	r3, #2
   1dc10:	4a08      	ldr	r2, [pc, #32]	; (1dc34 <reboot_conf_set+0x4c>)
   1dc12:	2103      	movs	r1, #3
   1dc14:	4620      	mov	r0, r4
   1dc16:	f7ef fa56 	bl	d0c6 <conf_value_from_str>
   1dc1a:	e7f7      	b.n	1dc0c <reboot_conf_set+0x24>
            return CONF_VALUE_SET(val, CONF_INT16, log_reboot_written);
   1dc1c:	2301      	movs	r3, #1
   1dc1e:	4a06      	ldr	r2, [pc, #24]	; (1dc38 <reboot_conf_set+0x50>)
   1dc20:	2103      	movs	r1, #3
   1dc22:	4620      	mov	r0, r4
   1dc24:	f7ef fa4f 	bl	d0c6 <conf_value_from_str>
   1dc28:	e7f0      	b.n	1dc0c <reboot_conf_set+0x24>
   1dc2a:	bf00      	nop
   1dc2c:	00023b70 	.word	0x00023b70
   1dc30:	00023b7c 	.word	0x00023b7c
   1dc34:	20006b7c 	.word	0x20006b7c
   1dc38:	20006b6c 	.word	0x20006b6c

0001dc3c <reboot_conf_get>:
    if (argc == 1) {
   1dc3c:	2801      	cmp	r0, #1
   1dc3e:	d11b      	bne.n	1dc78 <reboot_conf_get+0x3c>
{
   1dc40:	b510      	push	{r4, lr}
        if (!strcmp(argv[0], "reboot_cnt")) {
   1dc42:	680c      	ldr	r4, [r1, #0]
   1dc44:	490d      	ldr	r1, [pc, #52]	; (1dc7c <reboot_conf_get+0x40>)
   1dc46:	4620      	mov	r0, r4
   1dc48:	f7ee fa4c 	bl	c0e4 <strcmp>
   1dc4c:	b130      	cbz	r0, 1dc5c <reboot_conf_get+0x20>
        } else if (!strcmp(argv[0], "written")) {
   1dc4e:	490c      	ldr	r1, [pc, #48]	; (1dc80 <reboot_conf_get+0x44>)
   1dc50:	4620      	mov	r0, r4
   1dc52:	f7ee fa47 	bl	c0e4 <strcmp>
   1dc56:	b140      	cbz	r0, 1dc6a <reboot_conf_get+0x2e>
    return NULL;
   1dc58:	2000      	movs	r0, #0
}
   1dc5a:	bd10      	pop	{r4, pc}
            return conf_str_from_value(CONF_INT16, &reboot_cnt,
   1dc5c:	230c      	movs	r3, #12
   1dc5e:	4a09      	ldr	r2, [pc, #36]	; (1dc84 <reboot_conf_get+0x48>)
   1dc60:	4909      	ldr	r1, [pc, #36]	; (1dc88 <reboot_conf_get+0x4c>)
   1dc62:	2003      	movs	r0, #3
   1dc64:	f7ef fa94 	bl	d190 <conf_str_from_value>
   1dc68:	e7f7      	b.n	1dc5a <reboot_conf_get+0x1e>
            return conf_str_from_value(CONF_BOOL, &log_reboot_written,
   1dc6a:	230c      	movs	r3, #12
   1dc6c:	4a07      	ldr	r2, [pc, #28]	; (1dc8c <reboot_conf_get+0x50>)
   1dc6e:	4908      	ldr	r1, [pc, #32]	; (1dc90 <reboot_conf_get+0x54>)
   1dc70:	200a      	movs	r0, #10
   1dc72:	f7ef fa8d 	bl	d190 <conf_str_from_value>
   1dc76:	e7f0      	b.n	1dc5a <reboot_conf_get+0x1e>
    return NULL;
   1dc78:	2000      	movs	r0, #0
}
   1dc7a:	4770      	bx	lr
   1dc7c:	00023b70 	.word	0x00023b70
   1dc80:	00023b7c 	.word	0x00023b7c
   1dc84:	20006b80 	.word	0x20006b80
   1dc88:	20006b7c 	.word	0x20006b7c
   1dc8c:	20006b70 	.word	0x20006b70
   1dc90:	20006b6c 	.word	0x20006b6c

0001dc94 <log_reboot_write>:
{
   1dc94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dc96:	b0d1      	sub	sp, #324	; 0x144
   1dc98:	4606      	mov	r6, r0
    rc = imgr_read_info(boot_current_slot, &ver, hash, NULL);
   1dc9a:	2300      	movs	r3, #0
   1dc9c:	aa46      	add	r2, sp, #280	; 0x118
   1dc9e:	a94e      	add	r1, sp, #312	; 0x138
   1dca0:	4839      	ldr	r0, [pc, #228]	; (1dd88 <log_reboot_write+0xf4>)
   1dca2:	6800      	ldr	r0, [r0, #0]
   1dca4:	f7fc ffbc 	bl	1ac20 <imgr_read_info>
    if (rc != 0) {
   1dca8:	4607      	mov	r7, r0
   1dcaa:	2800      	cmp	r0, #0
   1dcac:	d15f      	bne.n	1dd6e <log_reboot_write+0xda>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1dcae:	7833      	ldrb	r3, [r6, #0]
    off += snprintf(buf + off, sizeof buf - off,
   1dcb0:	2b01      	cmp	r3, #1
   1dcb2:	d00f      	beq.n	1dcd4 <log_reboot_write+0x40>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1dcb4:	2b02      	cmp	r3, #2
   1dcb6:	d025      	beq.n	1dd04 <log_reboot_write+0x70>
   1dcb8:	2b03      	cmp	r3, #3
   1dcba:	d025      	beq.n	1dd08 <log_reboot_write+0x74>
   1dcbc:	2b04      	cmp	r3, #4
   1dcbe:	d025      	beq.n	1dd0c <log_reboot_write+0x78>
   1dcc0:	2b05      	cmp	r3, #5
   1dcc2:	d025      	beq.n	1dd10 <log_reboot_write+0x7c>
   1dcc4:	2b06      	cmp	r3, #6
   1dcc6:	d025      	beq.n	1dd14 <log_reboot_write+0x80>
   1dcc8:	2b07      	cmp	r3, #7
   1dcca:	d001      	beq.n	1dcd0 <log_reboot_write+0x3c>
   1dccc:	4b2f      	ldr	r3, [pc, #188]	; (1dd8c <log_reboot_write+0xf8>)
   1dcce:	e002      	b.n	1dcd6 <log_reboot_write+0x42>
   1dcd0:	4b2f      	ldr	r3, [pc, #188]	; (1dd90 <log_reboot_write+0xfc>)
   1dcd2:	e000      	b.n	1dcd6 <log_reboot_write+0x42>
    off += snprintf(buf + off, sizeof buf - off,
   1dcd4:	4b2f      	ldr	r3, [pc, #188]	; (1dd94 <log_reboot_write+0x100>)
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1dcd6:	f89d 2138 	ldrb.w	r2, [sp, #312]	; 0x138
                    ver.iv_minor, ver.iv_revision,
   1dcda:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
   1dcde:	f8bd 013a 	ldrh.w	r0, [sp, #314]	; 0x13a
    off += snprintf(buf + off, sizeof buf - off,
   1dce2:	9c4f      	ldr	r4, [sp, #316]	; 0x13c
   1dce4:	9404      	str	r4, [sp, #16]
   1dce6:	9003      	str	r0, [sp, #12]
   1dce8:	9102      	str	r1, [sp, #8]
   1dcea:	9201      	str	r2, [sp, #4]
   1dcec:	4a2a      	ldr	r2, [pc, #168]	; (1dd98 <log_reboot_write+0x104>)
   1dcee:	8812      	ldrh	r2, [r2, #0]
   1dcf0:	9200      	str	r2, [sp, #0]
   1dcf2:	4a2a      	ldr	r2, [pc, #168]	; (1dd9c <log_reboot_write+0x108>)
   1dcf4:	f44f 7180 	mov.w	r1, #256	; 0x100
   1dcf8:	a806      	add	r0, sp, #24
   1dcfa:	f7ee fe0a 	bl	c912 <snprintf>
   1dcfe:	4604      	mov	r4, r0
    for (i = 0; i < sizeof hash; i++) {
   1dd00:	463d      	mov	r5, r7
   1dd02:	e017      	b.n	1dd34 <log_reboot_write+0xa0>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1dd04:	4b26      	ldr	r3, [pc, #152]	; (1dda0 <log_reboot_write+0x10c>)
   1dd06:	e7e6      	b.n	1dcd6 <log_reboot_write+0x42>
   1dd08:	4b26      	ldr	r3, [pc, #152]	; (1dda4 <log_reboot_write+0x110>)
   1dd0a:	e7e4      	b.n	1dcd6 <log_reboot_write+0x42>
   1dd0c:	4b26      	ldr	r3, [pc, #152]	; (1dda8 <log_reboot_write+0x114>)
   1dd0e:	e7e2      	b.n	1dcd6 <log_reboot_write+0x42>
   1dd10:	4b26      	ldr	r3, [pc, #152]	; (1ddac <log_reboot_write+0x118>)
   1dd12:	e7e0      	b.n	1dcd6 <log_reboot_write+0x42>
   1dd14:	4b26      	ldr	r3, [pc, #152]	; (1ddb0 <log_reboot_write+0x11c>)
   1dd16:	e7de      	b.n	1dcd6 <log_reboot_write+0x42>
                        (unsigned int)hash[i]);
   1dd18:	f505 73a0 	add.w	r3, r5, #320	; 0x140
   1dd1c:	446b      	add	r3, sp
        off += snprintf(buf + off, sizeof buf - off, "%02x",
   1dd1e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   1dd22:	4a24      	ldr	r2, [pc, #144]	; (1ddb4 <log_reboot_write+0x120>)
   1dd24:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1dd28:	a806      	add	r0, sp, #24
   1dd2a:	4420      	add	r0, r4
   1dd2c:	f7ee fdf1 	bl	c912 <snprintf>
   1dd30:	4404      	add	r4, r0
    for (i = 0; i < sizeof hash; i++) {
   1dd32:	3501      	adds	r5, #1
   1dd34:	2d1f      	cmp	r5, #31
   1dd36:	d9ef      	bls.n	1dd18 <log_reboot_write+0x84>
    if (info->file != NULL) {
   1dd38:	6873      	ldr	r3, [r6, #4]
   1dd3a:	b14b      	cbz	r3, 1dd50 <log_reboot_write+0xbc>
        off += snprintf(buf + off, sizeof buf - off, ", die:%s:%d",
   1dd3c:	68b2      	ldr	r2, [r6, #8]
   1dd3e:	9200      	str	r2, [sp, #0]
   1dd40:	4a1d      	ldr	r2, [pc, #116]	; (1ddb8 <log_reboot_write+0x124>)
   1dd42:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1dd46:	a806      	add	r0, sp, #24
   1dd48:	4420      	add	r0, r4
   1dd4a:	f7ee fde2 	bl	c912 <snprintf>
   1dd4e:	4404      	add	r4, r0
    if (info->pc != 0) {
   1dd50:	68f3      	ldr	r3, [r6, #12]
   1dd52:	b97b      	cbnz	r3, 1dd74 <log_reboot_write+0xe0>
    if (off > sizeof buf) {
   1dd54:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   1dd58:	d901      	bls.n	1dd5e <log_reboot_write+0xca>
        off = sizeof buf;
   1dd5a:	f44f 7480 	mov.w	r4, #256	; 0x100
    modlog_append(LOG_MODULE_REBOOT, LOG_LEVEL_CRITICAL, LOG_ETYPE_STRING,
   1dd5e:	b2a4      	uxth	r4, r4
   1dd60:	9400      	str	r4, [sp, #0]
   1dd62:	ab06      	add	r3, sp, #24
   1dd64:	2200      	movs	r2, #0
   1dd66:	2104      	movs	r1, #4
   1dd68:	2006      	movs	r0, #6
   1dd6a:	f7ff fd45 	bl	1d7f8 <modlog_append>
}
   1dd6e:	4638      	mov	r0, r7
   1dd70:	b051      	add	sp, #324	; 0x144
   1dd72:	bdf0      	pop	{r4, r5, r6, r7, pc}
        off += snprintf(buf + off, sizeof buf - off, ", pc:0x%lx",
   1dd74:	4a11      	ldr	r2, [pc, #68]	; (1ddbc <log_reboot_write+0x128>)
   1dd76:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1dd7a:	a806      	add	r0, sp, #24
   1dd7c:	4420      	add	r0, r4
   1dd7e:	f7ee fdc8 	bl	c912 <snprintf>
   1dd82:	4404      	add	r4, r0
   1dd84:	e7e6      	b.n	1dd54 <log_reboot_write+0xc0>
   1dd86:	bf00      	nop
   1dd88:	20006b8c 	.word	0x20006b8c
   1dd8c:	00023a90 	.word	0x00023a90
   1dd90:	00023bc0 	.word	0x00023bc0
   1dd94:	00023b84 	.word	0x00023b84
   1dd98:	20006b7c 	.word	0x20006b7c
   1dd9c:	00023bd0 	.word	0x00023bd0
   1dda0:	00023b98 	.word	0x00023b98
   1dda4:	00023ba4 	.word	0x00023ba4
   1dda8:	00023bac 	.word	0x00023bac
   1ddac:	00023bb4 	.word	0x00023bb4
   1ddb0:	00023b8c 	.word	0x00023b8c
   1ddb4:	00023bf8 	.word	0x00023bf8
   1ddb8:	00023c00 	.word	0x00023c00
   1ddbc:	00023c0c 	.word	0x00023c0c

0001ddc0 <log_reboot_init_console>:
{
   1ddc0:	b508      	push	{r3, lr}
    rc = modlog_register(LOG_MODULE_REBOOT, log_console_get(), LOG_SYSLEVEL,
   1ddc2:	f7fe ffd9 	bl	1cd78 <log_console_get>
   1ddc6:	4601      	mov	r1, r0
   1ddc8:	2300      	movs	r3, #0
   1ddca:	461a      	mov	r2, r3
   1ddcc:	2006      	movs	r0, #6
   1ddce:	f7ff fcf9 	bl	1d7c4 <modlog_register>
}
   1ddd2:	bd08      	pop	{r3, pc}

0001ddd4 <log_reboot>:
{
   1ddd4:	b510      	push	{r4, lr}
    if (log_reboot_written) {
   1ddd6:	4b0a      	ldr	r3, [pc, #40]	; (1de00 <log_reboot+0x2c>)
   1ddd8:	f993 3000 	ldrsb.w	r3, [r3]
   1dddc:	b113      	cbz	r3, 1dde4 <log_reboot+0x10>
        return 0;
   1ddde:	2400      	movs	r4, #0
}
   1dde0:	4620      	mov	r0, r4
   1dde2:	bd10      	pop	{r4, pc}
    rc = log_reboot_write(info);
   1dde4:	f7ff ff56 	bl	1dc94 <log_reboot_write>
    if (rc != 0) {
   1dde8:	4604      	mov	r4, r0
   1ddea:	2800      	cmp	r0, #0
   1ddec:	d1f8      	bne.n	1dde0 <log_reboot+0xc>
    log_reboot_written = 1;
   1ddee:	4b04      	ldr	r3, [pc, #16]	; (1de00 <log_reboot+0x2c>)
   1ddf0:	2201      	movs	r2, #1
   1ddf2:	701a      	strb	r2, [r3, #0]
    conf_save_one("reboot/written", "1");
   1ddf4:	4903      	ldr	r1, [pc, #12]	; (1de04 <log_reboot+0x30>)
   1ddf6:	4804      	ldr	r0, [pc, #16]	; (1de08 <log_reboot+0x34>)
   1ddf8:	f7ef f86c 	bl	ced4 <conf_save_one>
    return 0;
   1ddfc:	e7f0      	b.n	1dde0 <log_reboot+0xc>
   1ddfe:	bf00      	nop
   1de00:	20006b6c 	.word	0x20006b6c
   1de04:	00023c18 	.word	0x00023c18
   1de08:	00023b60 	.word	0x00023b60

0001de0c <log_reboot_pkg_init>:

void
log_reboot_pkg_init(void)
{
   1de0c:	b510      	push	{r4, lr}
   1de0e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1de10:	4b10      	ldr	r3, [pc, #64]	; (1de54 <log_reboot_pkg_init+0x48>)
   1de12:	781b      	ldrb	r3, [r3, #0]
   1de14:	b1c3      	cbz	r3, 1de48 <log_reboot_pkg_init+0x3c>

    rc = conf_register(&reboot_conf_handler);
   1de16:	4810      	ldr	r0, [pc, #64]	; (1de58 <log_reboot_pkg_init+0x4c>)
   1de18:	f7ef f910 	bl	d03c <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1de1c:	b138      	cbz	r0, 1de2e <log_reboot_pkg_init+0x22>
   1de1e:	2000      	movs	r0, #0
   1de20:	9000      	str	r0, [sp, #0]
   1de22:	4b0e      	ldr	r3, [pc, #56]	; (1de5c <log_reboot_pkg_init+0x50>)
   1de24:	681c      	ldr	r4, [r3, #0]
   1de26:	4603      	mov	r3, r0
   1de28:	4602      	mov	r2, r0
   1de2a:	4601      	mov	r1, r0
   1de2c:	47a0      	blx	r4
#if MYNEWT_VAL(REBOOT_LOG_FCB)
    rc = log_reboot_init_fcb();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
#if MYNEWT_VAL(REBOOT_LOG_CONSOLE)
    rc = log_reboot_init_console();
   1de2e:	f7ff ffc7 	bl	1ddc0 <log_reboot_init_console>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1de32:	b138      	cbz	r0, 1de44 <log_reboot_pkg_init+0x38>
   1de34:	2000      	movs	r0, #0
   1de36:	9000      	str	r0, [sp, #0]
   1de38:	4b08      	ldr	r3, [pc, #32]	; (1de5c <log_reboot_pkg_init+0x50>)
   1de3a:	681c      	ldr	r4, [r3, #0]
   1de3c:	4603      	mov	r3, r0
   1de3e:	4602      	mov	r2, r0
   1de40:	4601      	mov	r1, r0
   1de42:	47a0      	blx	r4
#endif
}
   1de44:	b002      	add	sp, #8
   1de46:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1de48:	461a      	mov	r2, r3
   1de4a:	4619      	mov	r1, r3
   1de4c:	4618      	mov	r0, r3
   1de4e:	f7eb f881 	bl	8f54 <__assert_func>
   1de52:	bf00      	nop
   1de54:	200065ac 	.word	0x200065ac
   1de58:	20002c10 	.word	0x20002c10
   1de5c:	200001ec 	.word	0x200001ec

0001de60 <rwlock_complete_handoff>:
static void
rwlock_complete_handoff(struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs > 0);
    lock->handoffs--;
   1de60:	f890 3020 	ldrb.w	r3, [r0, #32]
   1de64:	3b01      	subs	r3, #1
   1de66:	f880 3020 	strb.w	r3, [r0, #32]
}
   1de6a:	4770      	bx	lr

0001de6c <rwlock_read_must_block>:
static bool
rwlock_read_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   1de6c:	69c3      	ldr	r3, [r0, #28]
           lock->pending_writers > 0 ||
   1de6e:	f013 2fff 	tst.w	r3, #4278255360	; 0xff00ff00
   1de72:	d104      	bne.n	1de7e <rwlock_read_must_block+0x12>
           lock->handoffs > 0;
   1de74:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->pending_writers > 0 ||
   1de78:	b11b      	cbz	r3, 1de82 <rwlock_read_must_block+0x16>
   1de7a:	2001      	movs	r0, #1
   1de7c:	4770      	bx	lr
   1de7e:	2001      	movs	r0, #1
   1de80:	4770      	bx	lr
   1de82:	2000      	movs	r0, #0
}
   1de84:	4770      	bx	lr

0001de86 <rwlock_write_must_block>:
static bool
rwlock_write_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   1de86:	8b83      	ldrh	r3, [r0, #28]
           lock->num_readers > 0 ||
   1de88:	b923      	cbnz	r3, 1de94 <rwlock_write_must_block+0xe>
           lock->handoffs > 0;
   1de8a:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->num_readers > 0 ||
   1de8e:	b11b      	cbz	r3, 1de98 <rwlock_write_must_block+0x12>
   1de90:	2001      	movs	r0, #1
   1de92:	4770      	bx	lr
   1de94:	2001      	movs	r0, #1
   1de96:	4770      	bx	lr
   1de98:	2000      	movs	r0, #0
}
   1de9a:	4770      	bx	lr

0001de9c <rwlock_unblock>:
{
   1de9c:	b510      	push	{r4, lr}
   1de9e:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   1dea0:	7fc3      	ldrb	r3, [r0, #31]
   1dea2:	b91b      	cbnz	r3, 1deac <rwlock_unblock+0x10>
        lock->handoffs = lock->pending_readers;
   1dea4:	7f83      	ldrb	r3, [r0, #30]
   1dea6:	f880 3020 	strb.w	r3, [r0, #32]
        while (lock->pending_readers > 0) {
   1deaa:	e010      	b.n	1dece <rwlock_unblock+0x32>
        lock->handoffs = 1;
   1deac:	2301      	movs	r3, #1
   1deae:	f880 3020 	strb.w	r3, [r0, #32]
        os_sem_release(&lock->wsem);
   1deb2:	3014      	adds	r0, #20
   1deb4:	f7eb ff60 	bl	9d78 <os_sem_release>
        lock->pending_writers--;
   1deb8:	7fe3      	ldrb	r3, [r4, #31]
   1deba:	3b01      	subs	r3, #1
   1debc:	77e3      	strb	r3, [r4, #31]
   1debe:	e009      	b.n	1ded4 <rwlock_unblock+0x38>
            os_sem_release(&lock->rsem);
   1dec0:	f104 000c 	add.w	r0, r4, #12
   1dec4:	f7eb ff58 	bl	9d78 <os_sem_release>
            lock->pending_readers--;
   1dec8:	7fa3      	ldrb	r3, [r4, #30]
   1deca:	3b01      	subs	r3, #1
   1decc:	77a3      	strb	r3, [r4, #30]
        while (lock->pending_readers > 0) {
   1dece:	7fa3      	ldrb	r3, [r4, #30]
   1ded0:	2b00      	cmp	r3, #0
   1ded2:	d1f5      	bne.n	1dec0 <rwlock_unblock+0x24>
}
   1ded4:	bd10      	pop	{r4, pc}

0001ded6 <rwlock_acquire_read>:

void
rwlock_acquire_read(struct rwlock *lock)
{
   1ded6:	b538      	push	{r3, r4, r5, lr}
   1ded8:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1deda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dede:	f7ec fd9d 	bl	aa1c <os_mutex_pend>

    if (rwlock_read_must_block(lock)) {
   1dee2:	4620      	mov	r0, r4
   1dee4:	f7ff ffc2 	bl	1de6c <rwlock_read_must_block>
   1dee8:	b140      	cbz	r0, 1defc <rwlock_acquire_read+0x26>
        lock->pending_readers++;
   1deea:	7fa3      	ldrb	r3, [r4, #30]
   1deec:	3301      	adds	r3, #1
   1deee:	77a3      	strb	r3, [r4, #30]
        acquired = false;
   1def0:	2500      	movs	r5, #0
    } else {
        lock->num_readers++;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1def2:	4620      	mov	r0, r4
   1def4:	f7ec fd36 	bl	a964 <os_mutex_release>

    if (acquired) {
   1def8:	b12d      	cbz	r5, 1df06 <rwlock_acquire_read+0x30>
    /* Record reader ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->num_readers++;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   1defa:	bd38      	pop	{r3, r4, r5, pc}
        lock->num_readers++;
   1defc:	7f23      	ldrb	r3, [r4, #28]
   1defe:	3301      	adds	r3, #1
   1df00:	7723      	strb	r3, [r4, #28]
        acquired = true;
   1df02:	2501      	movs	r5, #1
   1df04:	e7f5      	b.n	1def2 <rwlock_acquire_read+0x1c>
    os_sem_pend(&lock->rsem, OS_TIMEOUT_NEVER);
   1df06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1df0a:	f104 000c 	add.w	r0, r4, #12
   1df0e:	f7eb ff65 	bl	9ddc <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1df12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1df16:	4620      	mov	r0, r4
   1df18:	f7ec fd80 	bl	aa1c <os_mutex_pend>
    lock->num_readers++;
   1df1c:	7f23      	ldrb	r3, [r4, #28]
   1df1e:	3301      	adds	r3, #1
   1df20:	7723      	strb	r3, [r4, #28]
    rwlock_complete_handoff(lock);
   1df22:	4620      	mov	r0, r4
   1df24:	f7ff ff9c 	bl	1de60 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   1df28:	4620      	mov	r0, r4
   1df2a:	f7ec fd1b 	bl	a964 <os_mutex_release>
   1df2e:	e7e4      	b.n	1defa <rwlock_acquire_read+0x24>

0001df30 <rwlock_release_read>:

void
rwlock_release_read(struct rwlock *lock)
{
   1df30:	b510      	push	{r4, lr}
   1df32:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1df34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1df38:	f7ec fd70 	bl	aa1c <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->num_readers > 0);
    lock->num_readers--;
   1df3c:	7f23      	ldrb	r3, [r4, #28]
   1df3e:	3b01      	subs	r3, #1
   1df40:	b2db      	uxtb	r3, r3
   1df42:	7723      	strb	r3, [r4, #28]

    /* If this is the last active reader, unblock a pending writer if there is
     * one.
     */
    if (lock->num_readers == 0) {
   1df44:	b11b      	cbz	r3, 1df4e <rwlock_release_read+0x1e>
        rwlock_unblock(lock);
    }

    os_mutex_release(&lock->mtx);
   1df46:	4620      	mov	r0, r4
   1df48:	f7ec fd0c 	bl	a964 <os_mutex_release>
}
   1df4c:	bd10      	pop	{r4, pc}
        rwlock_unblock(lock);
   1df4e:	4620      	mov	r0, r4
   1df50:	f7ff ffa4 	bl	1de9c <rwlock_unblock>
   1df54:	e7f7      	b.n	1df46 <rwlock_release_read+0x16>

0001df56 <rwlock_acquire_write>:

void
rwlock_acquire_write(struct rwlock *lock)
{
   1df56:	b538      	push	{r3, r4, r5, lr}
   1df58:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1df5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1df5e:	f7ec fd5d 	bl	aa1c <os_mutex_pend>

    if (rwlock_write_must_block(lock)) {
   1df62:	4620      	mov	r0, r4
   1df64:	f7ff ff8f 	bl	1de86 <rwlock_write_must_block>
   1df68:	b140      	cbz	r0, 1df7c <rwlock_acquire_write+0x26>
        lock->pending_writers++;
   1df6a:	7fe3      	ldrb	r3, [r4, #31]
   1df6c:	3301      	adds	r3, #1
   1df6e:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   1df70:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1df72:	4620      	mov	r0, r4
   1df74:	f7ec fcf6 	bl	a964 <os_mutex_release>

    if (acquired) {
   1df78:	b11d      	cbz	r5, 1df82 <rwlock_acquire_write+0x2c>
    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->active_writer = true;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   1df7a:	bd38      	pop	{r3, r4, r5, pc}
        lock->active_writer = true;
   1df7c:	2501      	movs	r5, #1
   1df7e:	7765      	strb	r5, [r4, #29]
        acquired = true;
   1df80:	e7f7      	b.n	1df72 <rwlock_acquire_write+0x1c>
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   1df82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1df86:	f104 0014 	add.w	r0, r4, #20
   1df8a:	f7eb ff27 	bl	9ddc <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1df8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1df92:	4620      	mov	r0, r4
   1df94:	f7ec fd42 	bl	aa1c <os_mutex_pend>
    lock->active_writer = true;
   1df98:	2301      	movs	r3, #1
   1df9a:	7763      	strb	r3, [r4, #29]
    rwlock_complete_handoff(lock);
   1df9c:	4620      	mov	r0, r4
   1df9e:	f7ff ff5f 	bl	1de60 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   1dfa2:	4620      	mov	r0, r4
   1dfa4:	f7ec fcde 	bl	a964 <os_mutex_release>
   1dfa8:	e7e7      	b.n	1df7a <rwlock_acquire_write+0x24>

0001dfaa <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   1dfaa:	b510      	push	{r4, lr}
   1dfac:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1dfae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dfb2:	f7ec fd33 	bl	aa1c <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   1dfb6:	2300      	movs	r3, #0
   1dfb8:	7763      	strb	r3, [r4, #29]

    rwlock_unblock(lock);
   1dfba:	4620      	mov	r0, r4
   1dfbc:	f7ff ff6e 	bl	1de9c <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   1dfc0:	4620      	mov	r0, r4
   1dfc2:	f7ec fccf 	bl	a964 <os_mutex_release>
}
   1dfc6:	bd10      	pop	{r4, pc}

0001dfc8 <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   1dfc8:	b510      	push	{r4, lr}
   1dfca:	4604      	mov	r4, r0
    int rc;

    *lock = (struct rwlock) { 0 };
   1dfcc:	2224      	movs	r2, #36	; 0x24
   1dfce:	2100      	movs	r1, #0
   1dfd0:	f7ee f85d 	bl	c08e <memset>

    rc = os_mutex_init(&lock->mtx);
   1dfd4:	4620      	mov	r0, r4
   1dfd6:	f7ec fcbb 	bl	a950 <os_mutex_init>
    if (rc != 0) {
   1dfda:	b100      	cbz	r0, 1dfde <rwlock_init+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1dfdc:	bd10      	pop	{r4, pc}
    rc = os_sem_init(&lock->rsem, 0);
   1dfde:	2100      	movs	r1, #0
   1dfe0:	f104 000c 	add.w	r0, r4, #12
   1dfe4:	f7eb fec0 	bl	9d68 <os_sem_init>
    if (rc != 0) {
   1dfe8:	2800      	cmp	r0, #0
   1dfea:	d1f7      	bne.n	1dfdc <rwlock_init+0x14>
    rc = os_sem_init(&lock->wsem, 0);
   1dfec:	2100      	movs	r1, #0
   1dfee:	f104 0014 	add.w	r0, r4, #20
   1dff2:	f7eb feb9 	bl	9d68 <os_sem_init>
    if (rc != 0) {
   1dff6:	e7f1      	b.n	1dfdc <rwlock_init+0x14>

0001dff8 <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
   1dff8:	2801      	cmp	r0, #1
   1dffa:	d100      	bne.n	1dffe <boot_flag_decode+0x6>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
}
   1dffc:	4770      	bx	lr
        return BOOT_FLAG_BAD;
   1dffe:	2002      	movs	r0, #2
   1e000:	e7fc      	b.n	1dffc <boot_flag_decode+0x4>

0001e002 <boot_magic_off>:
}

static uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
   1e002:	6880      	ldr	r0, [r0, #8]
}
   1e004:	3810      	subs	r0, #16
   1e006:	4770      	bx	lr

0001e008 <boot_copy_done_off>:
}

static uint32_t
boot_copy_done_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 2;
   1e008:	6880      	ldr	r0, [r0, #8]
}
   1e00a:	3820      	subs	r0, #32
   1e00c:	4770      	bx	lr

0001e00e <boot_image_ok_off>:

static uint32_t
boot_image_ok_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN;
   1e00e:	6880      	ldr	r0, [r0, #8]
}
   1e010:	3818      	subs	r0, #24
   1e012:	4770      	bx	lr

0001e014 <boot_magic_decode>:
{
   1e014:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   1e016:	2210      	movs	r2, #16
   1e018:	4903      	ldr	r1, [pc, #12]	; (1e028 <boot_magic_decode+0x14>)
   1e01a:	f7ee f807 	bl	c02c <memcmp>
   1e01e:	b108      	cbz	r0, 1e024 <boot_magic_decode+0x10>
    return BOOT_MAGIC_BAD;
   1e020:	2002      	movs	r0, #2
}
   1e022:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
   1e024:	2001      	movs	r0, #1
   1e026:	e7fc      	b.n	1e022 <boot_magic_decode+0xe>
   1e028:	00023c6c 	.word	0x00023c6c

0001e02c <boot_write_trailer_byte>:
}

static int
boot_write_trailer_byte(const struct flash_area *fap, uint32_t off,
                        uint8_t val)
{
   1e02c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e02e:	b083      	sub	sp, #12
   1e030:	4605      	mov	r5, r0
   1e032:	460e      	mov	r6, r1
   1e034:	4617      	mov	r7, r2
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
   1e036:	f7fe fba1 	bl	1c77c <flash_area_align>
    assert(align <= BOOT_MAX_ALIGN);
   1e03a:	2808      	cmp	r0, #8
   1e03c:	d813      	bhi.n	1e066 <boot_write_trailer_byte+0x3a>
   1e03e:	4604      	mov	r4, r0
    erased_val = flash_area_erased_val(fap);
   1e040:	4628      	mov	r0, r5
   1e042:	f7fe fba0 	bl	1c786 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
   1e046:	2208      	movs	r2, #8
   1e048:	b2c1      	uxtb	r1, r0
   1e04a:	4668      	mov	r0, sp
   1e04c:	f7ee f81f 	bl	c08e <memset>
    buf[0] = val;
   1e050:	f88d 7000 	strb.w	r7, [sp]

    rc = flash_area_write(fap, off, buf, align);
   1e054:	4623      	mov	r3, r4
   1e056:	466a      	mov	r2, sp
   1e058:	4631      	mov	r1, r6
   1e05a:	4628      	mov	r0, r5
   1e05c:	f7fe fb66 	bl	1c72c <flash_area_write>
    if (rc != 0) {
   1e060:	b938      	cbnz	r0, 1e072 <boot_write_trailer_byte+0x46>
        return BOOT_EFLASH;
    }

    return 0;
}
   1e062:	b003      	add	sp, #12
   1e064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(align <= BOOT_MAX_ALIGN);
   1e066:	2300      	movs	r3, #0
   1e068:	461a      	mov	r2, r3
   1e06a:	4619      	mov	r1, r3
   1e06c:	4618      	mov	r0, r3
   1e06e:	f7ea ff71 	bl	8f54 <__assert_func>
        return BOOT_EFLASH;
   1e072:	2001      	movs	r0, #1
   1e074:	e7f5      	b.n	1e062 <boot_write_trailer_byte+0x36>

0001e076 <boot_magic_compatible_check>:
    switch (tbl_val) {
   1e076:	2804      	cmp	r0, #4
   1e078:	d00a      	beq.n	1e090 <boot_magic_compatible_check+0x1a>
   1e07a:	2805      	cmp	r0, #5
   1e07c:	d103      	bne.n	1e086 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
   1e07e:	1e48      	subs	r0, r1, #1
   1e080:	bf18      	it	ne
   1e082:	2001      	movne	r0, #1
   1e084:	4770      	bx	lr
        return tbl_val == val;
   1e086:	4288      	cmp	r0, r1
   1e088:	bf14      	ite	ne
   1e08a:	2000      	movne	r0, #0
   1e08c:	2001      	moveq	r0, #1
   1e08e:	4770      	bx	lr
    switch (tbl_val) {
   1e090:	2001      	movs	r0, #1
}
   1e092:	4770      	bx	lr

0001e094 <boot_swap_type_off>:
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 3;
   1e094:	6880      	ldr	r0, [r0, #8]
}
   1e096:	3828      	subs	r0, #40	; 0x28
   1e098:	4770      	bx	lr

0001e09a <boot_read_swap_state>:
{
   1e09a:	b530      	push	{r4, r5, lr}
   1e09c:	b085      	sub	sp, #20
   1e09e:	4604      	mov	r4, r0
   1e0a0:	460d      	mov	r5, r1
    off = boot_magic_off(fap);
   1e0a2:	f7ff ffae 	bl	1e002 <boot_magic_off>
   1e0a6:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
   1e0a8:	2310      	movs	r3, #16
   1e0aa:	466a      	mov	r2, sp
   1e0ac:	4620      	mov	r0, r4
   1e0ae:	f7fe fb82 	bl	1c7b6 <flash_area_read_is_empty>
    if (rc < 0) {
   1e0b2:	2800      	cmp	r0, #0
   1e0b4:	db45      	blt.n	1e142 <boot_read_swap_state+0xa8>
    if (rc == 1) {
   1e0b6:	2801      	cmp	r0, #1
   1e0b8:	d039      	beq.n	1e12e <boot_read_swap_state+0x94>
        state->magic = boot_magic_decode(magic);
   1e0ba:	4668      	mov	r0, sp
   1e0bc:	f7ff ffaa 	bl	1e014 <boot_magic_decode>
   1e0c0:	7028      	strb	r0, [r5, #0]
    off = boot_swap_type_off(fap);
   1e0c2:	4620      	mov	r0, r4
   1e0c4:	f7ff ffe6 	bl	1e094 <boot_swap_type_off>
   1e0c8:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &state->swap_type,
   1e0ca:	2301      	movs	r3, #1
   1e0cc:	18ea      	adds	r2, r5, r3
   1e0ce:	4620      	mov	r0, r4
   1e0d0:	f7fe fb71 	bl	1c7b6 <flash_area_read_is_empty>
    if (rc < 0) {
   1e0d4:	2800      	cmp	r0, #0
   1e0d6:	db37      	blt.n	1e148 <boot_read_swap_state+0xae>
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
   1e0d8:	2801      	cmp	r0, #1
   1e0da:	d002      	beq.n	1e0e2 <boot_read_swap_state+0x48>
   1e0dc:	786b      	ldrb	r3, [r5, #1]
   1e0de:	2b04      	cmp	r3, #4
   1e0e0:	d901      	bls.n	1e0e6 <boot_read_swap_state+0x4c>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   1e0e2:	2301      	movs	r3, #1
   1e0e4:	706b      	strb	r3, [r5, #1]
    off = boot_copy_done_off(fap);
   1e0e6:	4620      	mov	r0, r4
   1e0e8:	f7ff ff8e 	bl	1e008 <boot_copy_done_off>
   1e0ec:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
   1e0ee:	2301      	movs	r3, #1
   1e0f0:	1caa      	adds	r2, r5, #2
   1e0f2:	4620      	mov	r0, r4
   1e0f4:	f7fe fb5f 	bl	1c7b6 <flash_area_read_is_empty>
    if (rc < 0) {
   1e0f8:	2800      	cmp	r0, #0
   1e0fa:	db27      	blt.n	1e14c <boot_read_swap_state+0xb2>
    if (rc == 1) {
   1e0fc:	2801      	cmp	r0, #1
   1e0fe:	d019      	beq.n	1e134 <boot_read_swap_state+0x9a>
        state->copy_done = boot_flag_decode(state->copy_done);
   1e100:	78a8      	ldrb	r0, [r5, #2]
   1e102:	f7ff ff79 	bl	1dff8 <boot_flag_decode>
   1e106:	70a8      	strb	r0, [r5, #2]
    off = boot_image_ok_off(fap);
   1e108:	4620      	mov	r0, r4
   1e10a:	f7ff ff80 	bl	1e00e <boot_image_ok_off>
   1e10e:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
   1e110:	2301      	movs	r3, #1
   1e112:	1cea      	adds	r2, r5, #3
   1e114:	4620      	mov	r0, r4
   1e116:	f7fe fb4e 	bl	1c7b6 <flash_area_read_is_empty>
    if (rc < 0) {
   1e11a:	2800      	cmp	r0, #0
   1e11c:	db18      	blt.n	1e150 <boot_read_swap_state+0xb6>
    if (rc == 1) {
   1e11e:	2801      	cmp	r0, #1
   1e120:	d00b      	beq.n	1e13a <boot_read_swap_state+0xa0>
        state->image_ok = boot_flag_decode(state->image_ok);
   1e122:	78e8      	ldrb	r0, [r5, #3]
   1e124:	f7ff ff68 	bl	1dff8 <boot_flag_decode>
   1e128:	70e8      	strb	r0, [r5, #3]
    return 0;
   1e12a:	2000      	movs	r0, #0
   1e12c:	e00a      	b.n	1e144 <boot_read_swap_state+0xaa>
        state->magic = BOOT_MAGIC_UNSET;
   1e12e:	2303      	movs	r3, #3
   1e130:	702b      	strb	r3, [r5, #0]
   1e132:	e7c6      	b.n	1e0c2 <boot_read_swap_state+0x28>
        state->copy_done = BOOT_FLAG_UNSET;
   1e134:	2303      	movs	r3, #3
   1e136:	70ab      	strb	r3, [r5, #2]
   1e138:	e7e6      	b.n	1e108 <boot_read_swap_state+0x6e>
        state->image_ok = BOOT_FLAG_UNSET;
   1e13a:	2303      	movs	r3, #3
   1e13c:	70eb      	strb	r3, [r5, #3]
    return 0;
   1e13e:	2000      	movs	r0, #0
   1e140:	e000      	b.n	1e144 <boot_read_swap_state+0xaa>
        return BOOT_EFLASH;
   1e142:	2001      	movs	r0, #1
}
   1e144:	b005      	add	sp, #20
   1e146:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
   1e148:	2001      	movs	r0, #1
   1e14a:	e7fb      	b.n	1e144 <boot_read_swap_state+0xaa>
        return BOOT_EFLASH;
   1e14c:	2001      	movs	r0, #1
   1e14e:	e7f9      	b.n	1e144 <boot_read_swap_state+0xaa>
        return BOOT_EFLASH;
   1e150:	2001      	movs	r0, #1
   1e152:	e7f7      	b.n	1e144 <boot_read_swap_state+0xaa>

0001e154 <boot_read_swap_state_by_id>:
    switch (flash_area_id) {
   1e154:	1e43      	subs	r3, r0, #1
   1e156:	2b02      	cmp	r3, #2
   1e158:	d901      	bls.n	1e15e <boot_read_swap_state_by_id+0xa>
        return BOOT_EBADARGS;
   1e15a:	2007      	movs	r0, #7
}
   1e15c:	4770      	bx	lr
{
   1e15e:	b510      	push	{r4, lr}
   1e160:	b082      	sub	sp, #8
   1e162:	460c      	mov	r4, r1
        rc = flash_area_open(flash_area_id, &fap);
   1e164:	a901      	add	r1, sp, #4
   1e166:	b2c0      	uxtb	r0, r0
   1e168:	f7fe fa6c 	bl	1c644 <flash_area_open>
        if (rc != 0) {
   1e16c:	b110      	cbz	r0, 1e174 <boot_read_swap_state_by_id+0x20>
            return BOOT_EFLASH;
   1e16e:	2001      	movs	r0, #1
}
   1e170:	b002      	add	sp, #8
   1e172:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
   1e174:	4621      	mov	r1, r4
   1e176:	9801      	ldr	r0, [sp, #4]
   1e178:	f7ff ff8f 	bl	1e09a <boot_read_swap_state>
    return rc;
   1e17c:	e7f8      	b.n	1e170 <boot_read_swap_state_by_id+0x1c>
	...

0001e180 <boot_write_magic>:
{
   1e180:	b510      	push	{r4, lr}
   1e182:	4604      	mov	r4, r0
    off = boot_magic_off(fap);
   1e184:	f7ff ff3d 	bl	1e002 <boot_magic_off>
   1e188:	4601      	mov	r1, r0
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   1e18a:	2310      	movs	r3, #16
   1e18c:	4a03      	ldr	r2, [pc, #12]	; (1e19c <boot_write_magic+0x1c>)
   1e18e:	4620      	mov	r0, r4
   1e190:	f7fe facc 	bl	1c72c <flash_area_write>
    if (rc != 0) {
   1e194:	b900      	cbnz	r0, 1e198 <boot_write_magic+0x18>
}
   1e196:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
   1e198:	2001      	movs	r0, #1
   1e19a:	e7fc      	b.n	1e196 <boot_write_magic+0x16>
   1e19c:	00023c6c 	.word	0x00023c6c

0001e1a0 <boot_write_image_ok>:
    return boot_write_trailer_byte(fap, off, BOOT_FLAG_SET);
}

int
boot_write_image_ok(const struct flash_area *fap)
{
   1e1a0:	b510      	push	{r4, lr}
   1e1a2:	4604      	mov	r4, r0
    uint32_t off;

    off = boot_image_ok_off(fap);
   1e1a4:	f7ff ff33 	bl	1e00e <boot_image_ok_off>
   1e1a8:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%x (0x%x)",
                 fap->fa_id, off, fap->fa_off + off);
    return boot_write_trailer_byte(fap, off, BOOT_FLAG_SET);
   1e1aa:	2201      	movs	r2, #1
   1e1ac:	4620      	mov	r0, r4
   1e1ae:	f7ff ff3d 	bl	1e02c <boot_write_trailer_byte>
}
   1e1b2:	bd10      	pop	{r4, pc}

0001e1b4 <boot_write_swap_type>:
 * This value is persisted so that the boot loader knows what swap operation to
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_type(const struct flash_area *fap, uint8_t swap_type)
{
   1e1b4:	b538      	push	{r3, r4, r5, lr}
   1e1b6:	4604      	mov	r4, r0
   1e1b8:	460d      	mov	r5, r1
    uint32_t off;

    off = boot_swap_type_off(fap);
   1e1ba:	f7ff ff6b 	bl	1e094 <boot_swap_type_off>
   1e1be:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing swap_type; fa_id=%d off=0x%x (0x%x), swap_type=0x%x",
                 fap->fa_id, off, fap->fa_off + off, swap_type);
    return boot_write_trailer_byte(fap, off, swap_type);
   1e1c0:	462a      	mov	r2, r5
   1e1c2:	4620      	mov	r0, r4
   1e1c4:	f7ff ff32 	bl	1e02c <boot_write_trailer_byte>
}
   1e1c8:	bd38      	pop	{r3, r4, r5, pc}
	...

0001e1cc <boot_swap_type>:
}
#endif

int
boot_swap_type(void)
{
   1e1cc:	b530      	push	{r4, r5, lr}
   1e1ce:	b083      	sub	sp, #12
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY, &primary_slot);
   1e1d0:	a901      	add	r1, sp, #4
   1e1d2:	2001      	movs	r0, #1
   1e1d4:	f7ff ffbe 	bl	1e154 <boot_read_swap_state_by_id>
    if (rc) {
   1e1d8:	2800      	cmp	r0, #0
   1e1da:	d142      	bne.n	1e262 <boot_swap_type+0x96>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY,
   1e1dc:	4669      	mov	r1, sp
   1e1de:	2002      	movs	r0, #2
   1e1e0:	f7ff ffb8 	bl	1e154 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
   1e1e4:	2800      	cmp	r0, #0
   1e1e6:	d13e      	bne.n	1e266 <boot_swap_type+0x9a>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   1e1e8:	2400      	movs	r4, #0
   1e1ea:	e007      	b.n	1e1fc <boot_swap_type+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   1e1ec:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   1e1ee:	2b04      	cmp	r3, #4
   1e1f0:	d029      	beq.n	1e246 <boot_swap_type+0x7a>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
   1e1f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   1e1f6:	4293      	cmp	r3, r2
   1e1f8:	d025      	beq.n	1e246 <boot_swap_type+0x7a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   1e1fa:	3401      	adds	r4, #1
   1e1fc:	2c02      	cmp	r4, #2
   1e1fe:	d82d      	bhi.n	1e25c <boot_swap_type+0x90>
        table = boot_swap_tables + i;
   1e200:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1e204:	4a19      	ldr	r2, [pc, #100]	; (1e26c <boot_swap_type+0xa0>)
   1e206:	eb02 0543 	add.w	r5, r2, r3, lsl #1
        if (boot_magic_compatible_check(table->magic_primary_slot,
   1e20a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1e20e:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
   1e212:	f7ff ff30 	bl	1e076 <boot_magic_compatible_check>
   1e216:	2800      	cmp	r0, #0
   1e218:	d0ef      	beq.n	1e1fa <boot_swap_type+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
   1e21a:	f89d 1000 	ldrb.w	r1, [sp]
   1e21e:	7868      	ldrb	r0, [r5, #1]
   1e220:	f7ff ff29 	bl	1e076 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
   1e224:	2800      	cmp	r0, #0
   1e226:	d0e8      	beq.n	1e1fa <boot_swap_type+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   1e228:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
   1e22a:	2b04      	cmp	r3, #4
   1e22c:	d003      	beq.n	1e236 <boot_swap_type+0x6a>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   1e22e:	f89d 2007 	ldrb.w	r2, [sp, #7]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   1e232:	4293      	cmp	r3, r2
   1e234:	d1e1      	bne.n	1e1fa <boot_swap_type+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   1e236:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   1e238:	2b04      	cmp	r3, #4
   1e23a:	d0d7      	beq.n	1e1ec <boot_swap_type+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   1e23c:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   1e240:	4293      	cmp	r3, r2
   1e242:	d1da      	bne.n	1e1fa <boot_swap_type+0x2e>
   1e244:	e7d2      	b.n	1e1ec <boot_swap_type+0x20>
            BOOT_LOG_INF("Swap type: %s",
   1e246:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            assert(table->swap_type == BOOT_SWAP_TYPE_TEST ||
   1e248:	1e83      	subs	r3, r0, #2
   1e24a:	b2db      	uxtb	r3, r3
   1e24c:	2b02      	cmp	r3, #2
   1e24e:	d906      	bls.n	1e25e <boot_swap_type+0x92>
   1e250:	2300      	movs	r3, #0
   1e252:	461a      	mov	r2, r3
   1e254:	4619      	mov	r1, r3
   1e256:	4618      	mov	r0, r3
   1e258:	f7ea fe7c 	bl	8f54 <__assert_func>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
   1e25c:	2001      	movs	r0, #1
}
   1e25e:	b003      	add	sp, #12
   1e260:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
   1e262:	20ff      	movs	r0, #255	; 0xff
   1e264:	e7fb      	b.n	1e25e <boot_swap_type+0x92>
        return BOOT_SWAP_TYPE_PANIC;
   1e266:	20ff      	movs	r0, #255	; 0xff
   1e268:	e7f9      	b.n	1e25e <boot_swap_type+0x92>
   1e26a:	bf00      	nop
   1e26c:	00023c7c 	.word	0x00023c7c

0001e270 <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   1e270:	b530      	push	{r4, r5, lr}
   1e272:	b083      	sub	sp, #12
   1e274:	4604      	mov	r4, r0
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY,
   1e276:	4669      	mov	r1, sp
   1e278:	2002      	movs	r0, #2
   1e27a:	f7ff ff6b 	bl	1e154 <boot_read_swap_state_by_id>
                                    &state_secondary_slot);
    if (rc != 0) {
   1e27e:	4603      	mov	r3, r0
   1e280:	bb78      	cbnz	r0, 1e2e2 <boot_set_pending+0x72>
        return rc;
    }

    switch (state_secondary_slot.magic) {
   1e282:	f89d 5000 	ldrb.w	r5, [sp]
   1e286:	2d02      	cmp	r5, #2
   1e288:	d025      	beq.n	1e2d6 <boot_set_pending+0x66>
   1e28a:	2d03      	cmp	r5, #3
   1e28c:	d007      	beq.n	1e29e <boot_set_pending+0x2e>
   1e28e:	2d01      	cmp	r5, #1
   1e290:	d027      	beq.n	1e2e2 <boot_set_pending+0x72>
        flash_area_erase(fap, 0, fap->fa_size);
        flash_area_close(fap);
        return BOOT_EBADIMAGE;

    default:
        assert(0);
   1e292:	2300      	movs	r3, #0
   1e294:	461a      	mov	r2, r3
   1e296:	4619      	mov	r1, r3
   1e298:	4618      	mov	r0, r3
   1e29a:	f7ea fe5b 	bl	8f54 <__assert_func>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY, &fap);
   1e29e:	a901      	add	r1, sp, #4
   1e2a0:	2002      	movs	r0, #2
   1e2a2:	f7fe f9cf 	bl	1c644 <flash_area_open>
        if (rc != 0) {
   1e2a6:	b148      	cbz	r0, 1e2bc <boot_set_pending+0x4c>
            rc = BOOT_EFLASH;
   1e2a8:	2301      	movs	r3, #1
        if (rc == 0) {
   1e2aa:	b9d3      	cbnz	r3, 1e2e2 <boot_set_pending+0x72>
            if (permanent) {
   1e2ac:	b904      	cbnz	r4, 1e2b0 <boot_set_pending+0x40>
                swap_type = BOOT_SWAP_TYPE_TEST;
   1e2ae:	2502      	movs	r5, #2
            rc = boot_write_swap_type(fap, swap_type);
   1e2b0:	4629      	mov	r1, r5
   1e2b2:	9801      	ldr	r0, [sp, #4]
   1e2b4:	f7ff ff7e 	bl	1e1b4 <boot_write_swap_type>
   1e2b8:	4603      	mov	r3, r0
   1e2ba:	e012      	b.n	1e2e2 <boot_set_pending+0x72>
            rc = boot_write_magic(fap);
   1e2bc:	9801      	ldr	r0, [sp, #4]
   1e2be:	f7ff ff5f 	bl	1e180 <boot_write_magic>
        if (rc == 0 && permanent) {
   1e2c2:	4603      	mov	r3, r0
   1e2c4:	2800      	cmp	r0, #0
   1e2c6:	d1f0      	bne.n	1e2aa <boot_set_pending+0x3a>
   1e2c8:	2c00      	cmp	r4, #0
   1e2ca:	d0ee      	beq.n	1e2aa <boot_set_pending+0x3a>
            rc = boot_write_image_ok(fap);
   1e2cc:	9801      	ldr	r0, [sp, #4]
   1e2ce:	f7ff ff67 	bl	1e1a0 <boot_write_image_ok>
   1e2d2:	4603      	mov	r3, r0
   1e2d4:	e7e9      	b.n	1e2aa <boot_set_pending+0x3a>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY, &fap);
   1e2d6:	a901      	add	r1, sp, #4
   1e2d8:	2002      	movs	r0, #2
   1e2da:	f7fe f9b3 	bl	1c644 <flash_area_open>
        if (rc != 0) {
   1e2de:	b118      	cbz	r0, 1e2e8 <boot_set_pending+0x78>
            return BOOT_EFLASH;
   1e2e0:	2301      	movs	r3, #1
        return BOOT_EBADIMAGE;
    }
}
   1e2e2:	4618      	mov	r0, r3
   1e2e4:	b003      	add	sp, #12
   1e2e6:	bd30      	pop	{r4, r5, pc}
        flash_area_erase(fap, 0, fap->fa_size);
   1e2e8:	9801      	ldr	r0, [sp, #4]
   1e2ea:	6882      	ldr	r2, [r0, #8]
   1e2ec:	2100      	movs	r1, #0
   1e2ee:	f7fe fa31 	bl	1c754 <flash_area_erase>
        return BOOT_EBADIMAGE;
   1e2f2:	2303      	movs	r3, #3
   1e2f4:	e7f5      	b.n	1e2e2 <boot_set_pending+0x72>

0001e2f6 <boot_set_confirmed>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
   1e2f6:	b500      	push	{lr}
   1e2f8:	b083      	sub	sp, #12
    const struct flash_area *fap;
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY,
   1e2fa:	4669      	mov	r1, sp
   1e2fc:	2001      	movs	r0, #1
   1e2fe:	f7ff ff29 	bl	1e154 <boot_read_swap_state_by_id>
                                    &state_primary_slot);
    if (rc != 0) {
   1e302:	b9b8      	cbnz	r0, 1e334 <boot_set_confirmed+0x3e>
        return rc;
    }

    switch (state_primary_slot.magic) {
   1e304:	f89d 3000 	ldrb.w	r3, [sp]
   1e308:	2b02      	cmp	r3, #2
   1e30a:	d012      	beq.n	1e332 <boot_set_confirmed+0x3c>
   1e30c:	2b03      	cmp	r3, #3
   1e30e:	d011      	beq.n	1e334 <boot_set_confirmed+0x3e>
    case BOOT_MAGIC_BAD:
        /* Unexpected state. */
        return BOOT_EBADVECT;
    }

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY, &fap);
   1e310:	a901      	add	r1, sp, #4
   1e312:	2001      	movs	r0, #1
   1e314:	f7fe f996 	bl	1c644 <flash_area_open>
    if (rc) {
   1e318:	b978      	cbnz	r0, 1e33a <boot_set_confirmed+0x44>
        rc = BOOT_EFLASH;
        goto done;
    }

    if (state_primary_slot.copy_done == BOOT_FLAG_UNSET) {
   1e31a:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1e31e:	2b03      	cmp	r3, #3
   1e320:	d00d      	beq.n	1e33e <boot_set_confirmed+0x48>
        /* Swap never completed.  This is unexpected. */
        rc = BOOT_EBADVECT;
        goto done;
    }

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   1e322:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1e326:	2b03      	cmp	r3, #3
   1e328:	d104      	bne.n	1e334 <boot_set_confirmed+0x3e>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   1e32a:	9801      	ldr	r0, [sp, #4]
   1e32c:	f7ff ff38 	bl	1e1a0 <boot_write_image_ok>
   1e330:	e000      	b.n	1e334 <boot_set_confirmed+0x3e>
        return BOOT_EBADVECT;
   1e332:	2004      	movs	r0, #4

done:
    flash_area_close(fap);
    return rc;
}
   1e334:	b003      	add	sp, #12
   1e336:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = BOOT_EFLASH;
   1e33a:	2001      	movs	r0, #1
   1e33c:	e7fa      	b.n	1e334 <boot_set_confirmed+0x3e>
        rc = BOOT_EBADVECT;
   1e33e:	2004      	movs	r0, #4
   1e340:	e7f8      	b.n	1e334 <boot_set_confirmed+0x3e>
	...

0001e344 <boot_write_sz>:
    return 0;
}

static uint8_t
boot_write_sz(void)
{
   1e344:	b538      	push	{r3, r4, r5, lr}

    /* Figure out what size to write update status update as.  The size depends
     * on what the minimum write size is for scratch area, active image slot.
     * We need to use the bigger of those 2 values.
     */
    elem_sz = flash_area_align(boot_data.imgs[BOOT_PRIMARY_SLOT].area);
   1e346:	4d06      	ldr	r5, [pc, #24]	; (1e360 <boot_write_sz+0x1c>)
   1e348:	6a28      	ldr	r0, [r5, #32]
   1e34a:	f7fe fa17 	bl	1c77c <flash_area_align>
   1e34e:	4604      	mov	r4, r0
    align = flash_area_align(boot_data.scratch.area);
   1e350:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1e352:	f7fe fa13 	bl	1c77c <flash_area_align>
    if (align > elem_sz) {
   1e356:	4284      	cmp	r4, r0
   1e358:	d300      	bcc.n	1e35c <boot_write_sz+0x18>
    elem_sz = flash_area_align(boot_data.imgs[BOOT_PRIMARY_SLOT].area);
   1e35a:	4620      	mov	r0, r4
        elem_sz = align;
    }

    return elem_sz;
}
   1e35c:	bd38      	pop	{r3, r4, r5, pc}
   1e35e:	bf00      	nop
   1e360:	20006b90 	.word	0x20006b90

0001e364 <boot_read_image_header>:
{
   1e364:	b510      	push	{r4, lr}
   1e366:	b082      	sub	sp, #8
   1e368:	460c      	mov	r4, r1
    area_id = flash_area_id_from_image_slot(slot);
   1e36a:	f7fe fa2b 	bl	1c7c4 <flash_area_id_from_image_slot>
    rc = flash_area_open(area_id, &fap);
   1e36e:	a901      	add	r1, sp, #4
   1e370:	b2c0      	uxtb	r0, r0
   1e372:	f7fe f967 	bl	1c644 <flash_area_open>
    if (rc != 0) {
   1e376:	b110      	cbz	r0, 1e37e <boot_read_image_header+0x1a>
        rc = BOOT_EFLASH;
   1e378:	2001      	movs	r0, #1
}
   1e37a:	b002      	add	sp, #8
   1e37c:	bd10      	pop	{r4, pc}
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
   1e37e:	2320      	movs	r3, #32
   1e380:	4622      	mov	r2, r4
   1e382:	2100      	movs	r1, #0
   1e384:	9801      	ldr	r0, [sp, #4]
   1e386:	f7fe f9bd 	bl	1c704 <flash_area_read>
    if (rc != 0) {
   1e38a:	2800      	cmp	r0, #0
   1e38c:	d0f5      	beq.n	1e37a <boot_read_image_header+0x16>
        rc = BOOT_EFLASH;
   1e38e:	2001      	movs	r0, #1
    return rc;
   1e390:	e7f3      	b.n	1e37a <boot_read_image_header+0x16>
	...

0001e394 <boot_read_image_headers>:
{
   1e394:	b538      	push	{r3, r4, r5, lr}
   1e396:	4605      	mov	r5, r0
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
   1e398:	2400      	movs	r4, #0
   1e39a:	2c01      	cmp	r4, #1
   1e39c:	dc0f      	bgt.n	1e3be <boot_read_image_headers+0x2a>
        rc = boot_read_image_header(i, boot_img_hdr(&boot_data, i));
   1e39e:	4b09      	ldr	r3, [pc, #36]	; (1e3c4 <boot_read_image_headers+0x30>)
   1e3a0:	212c      	movs	r1, #44	; 0x2c
   1e3a2:	fb01 3104 	mla	r1, r1, r4, r3
   1e3a6:	4620      	mov	r0, r4
   1e3a8:	f7ff ffdc 	bl	1e364 <boot_read_image_header>
        if (rc != 0) {
   1e3ac:	4603      	mov	r3, r0
   1e3ae:	b908      	cbnz	r0, 1e3b4 <boot_read_image_headers+0x20>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
   1e3b0:	3401      	adds	r4, #1
   1e3b2:	e7f2      	b.n	1e39a <boot_read_image_headers+0x6>
            if (i > 0 && !require_all) {
   1e3b4:	2c00      	cmp	r4, #0
   1e3b6:	dd03      	ble.n	1e3c0 <boot_read_image_headers+0x2c>
   1e3b8:	b915      	cbnz	r5, 1e3c0 <boot_read_image_headers+0x2c>
                return 0;
   1e3ba:	2300      	movs	r3, #0
   1e3bc:	e000      	b.n	1e3c0 <boot_read_image_headers+0x2c>
    return 0;
   1e3be:	2300      	movs	r3, #0
}
   1e3c0:	4618      	mov	r0, r3
   1e3c2:	bd38      	pop	{r3, r4, r5, pc}
   1e3c4:	20006b90 	.word	0x20006b90

0001e3c8 <split_image_check>:
static int
split_image_check(struct image_header *app_hdr,
                  const struct flash_area *app_fap,
                  struct image_header *loader_hdr,
                  const struct flash_area *loader_fap)
{
   1e3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e3cc:	b08c      	sub	sp, #48	; 0x30
   1e3ce:	4606      	mov	r6, r0
   1e3d0:	460f      	mov	r7, r1
   1e3d2:	4690      	mov	r8, r2
   1e3d4:	461d      	mov	r5, r3
    static void *tmpbuf;
    uint8_t loader_hash[32];

    if (!tmpbuf) {
   1e3d6:	4c18      	ldr	r4, [pc, #96]	; (1e438 <split_image_check+0x70>)
   1e3d8:	6824      	ldr	r4, [r4, #0]
   1e3da:	b1f4      	cbz	r4, 1e41a <split_image_check+0x52>
        if (!tmpbuf) {
            return BOOT_ENOMEM;
        }
    }

    if (bootutil_img_validate(loader_hdr, loader_fap, tmpbuf, BOOT_TMPBUF_SZ,
   1e3dc:	ab04      	add	r3, sp, #16
   1e3de:	9302      	str	r3, [sp, #8]
   1e3e0:	2400      	movs	r4, #0
   1e3e2:	9401      	str	r4, [sp, #4]
   1e3e4:	9400      	str	r4, [sp, #0]
   1e3e6:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e3ea:	4a13      	ldr	r2, [pc, #76]	; (1e438 <split_image_check+0x70>)
   1e3ec:	6812      	ldr	r2, [r2, #0]
   1e3ee:	4629      	mov	r1, r5
   1e3f0:	4640      	mov	r0, r8
   1e3f2:	f000 f8fd 	bl	1e5f0 <bootutil_img_validate>
   1e3f6:	b9d0      	cbnz	r0, 1e42e <split_image_check+0x66>
                              NULL, 0, loader_hash)) {
        return BOOT_EBADIMAGE;
    }

    if (bootutil_img_validate(app_hdr, app_fap, tmpbuf, BOOT_TMPBUF_SZ,
   1e3f8:	9402      	str	r4, [sp, #8]
   1e3fa:	2320      	movs	r3, #32
   1e3fc:	9301      	str	r3, [sp, #4]
   1e3fe:	ab04      	add	r3, sp, #16
   1e400:	9300      	str	r3, [sp, #0]
   1e402:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e406:	4a0c      	ldr	r2, [pc, #48]	; (1e438 <split_image_check+0x70>)
   1e408:	6812      	ldr	r2, [r2, #0]
   1e40a:	4639      	mov	r1, r7
   1e40c:	4630      	mov	r0, r6
   1e40e:	f000 f8ef 	bl	1e5f0 <bootutil_img_validate>
   1e412:	b970      	cbnz	r0, 1e432 <split_image_check+0x6a>
                              loader_hash, 32, NULL)) {
        return BOOT_EBADIMAGE;
    }

    return 0;
}
   1e414:	b00c      	add	sp, #48	; 0x30
   1e416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmpbuf = malloc(BOOT_TMPBUF_SZ);
   1e41a:	f44f 7080 	mov.w	r0, #256	; 0x100
   1e41e:	f001 fb05 	bl	1fa2c <os_malloc>
   1e422:	4b05      	ldr	r3, [pc, #20]	; (1e438 <split_image_check+0x70>)
   1e424:	6018      	str	r0, [r3, #0]
        if (!tmpbuf) {
   1e426:	2800      	cmp	r0, #0
   1e428:	d1d8      	bne.n	1e3dc <split_image_check+0x14>
            return BOOT_ENOMEM;
   1e42a:	2006      	movs	r0, #6
   1e42c:	e7f2      	b.n	1e414 <split_image_check+0x4c>
        return BOOT_EBADIMAGE;
   1e42e:	2003      	movs	r0, #3
   1e430:	e7f0      	b.n	1e414 <split_image_check+0x4c>
        return BOOT_EBADIMAGE;
   1e432:	2003      	movs	r0, #3
   1e434:	e7ee      	b.n	1e414 <split_image_check+0x4c>
   1e436:	bf00      	nop
   1e438:	20006bf8 	.word	0x20006bf8

0001e43c <boot_read_sectors>:
{
   1e43c:	b510      	push	{r4, lr}
   1e43e:	b082      	sub	sp, #8
}

static inline int
boot_initialize_area(struct boot_loader_state *state, int flash_area)
{
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   1e440:	2380      	movs	r3, #128	; 0x80
   1e442:	9301      	str	r3, [sp, #4]
    int rc;

    switch (flash_area) {
    case FLASH_AREA_IMAGE_PRIMARY:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
                                   state->imgs[BOOT_PRIMARY_SLOT].sectors);
   1e444:	4c15      	ldr	r4, [pc, #84]	; (1e49c <boot_read_sectors+0x60>)
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1e446:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1e448:	a901      	add	r1, sp, #4
   1e44a:	2001      	movs	r0, #1
   1e44c:	f7fe f91c 	bl	1c688 <flash_area_to_sectors>
        state->imgs[BOOT_PRIMARY_SLOT].num_sectors = (size_t)num_sectors;
   1e450:	9b01      	ldr	r3, [sp, #4]
   1e452:	62a3      	str	r3, [r4, #40]	; 0x28
    if (rc != 0) {
   1e454:	b118      	cbz	r0, 1e45e <boot_read_sectors+0x22>
        return BOOT_EFLASH;
   1e456:	2401      	movs	r4, #1
}
   1e458:	4620      	mov	r0, r4
   1e45a:	b002      	add	sp, #8
   1e45c:	bd10      	pop	{r4, pc}
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   1e45e:	2380      	movs	r3, #128	; 0x80
   1e460:	9301      	str	r3, [sp, #4]
        break;
    case FLASH_AREA_IMAGE_SECONDARY:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1e462:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1e464:	a901      	add	r1, sp, #4
   1e466:	2002      	movs	r0, #2
   1e468:	f7fe f90e 	bl	1c688 <flash_area_to_sectors>
                                   state->imgs[BOOT_SECONDARY_SLOT].sectors);
        state->imgs[BOOT_SECONDARY_SLOT].num_sectors = (size_t)num_sectors;
   1e46c:	9b01      	ldr	r3, [sp, #4]
   1e46e:	6563      	str	r3, [r4, #84]	; 0x54
    if (rc != 0) {
   1e470:	b108      	cbz	r0, 1e476 <boot_read_sectors+0x3a>
        return BOOT_EFLASH;
   1e472:	2401      	movs	r4, #1
   1e474:	e7f0      	b.n	1e458 <boot_read_sectors+0x1c>
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   1e476:	2380      	movs	r3, #128	; 0x80
   1e478:	9301      	str	r3, [sp, #4]
        break;
    case FLASH_AREA_IMAGE_SCRATCH:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1e47a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1e47c:	a901      	add	r1, sp, #4
   1e47e:	2003      	movs	r0, #3
   1e480:	f7fe f902 	bl	1c688 <flash_area_to_sectors>
                                   state->scratch.sectors);
        state->scratch.num_sectors = (size_t)num_sectors;
   1e484:	9b01      	ldr	r3, [sp, #4]
   1e486:	6623      	str	r3, [r4, #96]	; 0x60
    if (rc != 0) {
   1e488:	4604      	mov	r4, r0
   1e48a:	b108      	cbz	r0, 1e490 <boot_read_sectors+0x54>
        return BOOT_EFLASH;
   1e48c:	2401      	movs	r4, #1
   1e48e:	e7e3      	b.n	1e458 <boot_read_sectors+0x1c>
    BOOT_WRITE_SZ(&boot_data) = boot_write_sz();
   1e490:	f7ff ff58 	bl	1e344 <boot_write_sz>
   1e494:	4b01      	ldr	r3, [pc, #4]	; (1e49c <boot_read_sectors+0x60>)
   1e496:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
    return 0;
   1e49a:	e7dd      	b.n	1e458 <boot_read_sectors+0x1c>
   1e49c:	20006b90 	.word	0x20006b90

0001e4a0 <split_go>:
    return rc;
}

int
split_go(int loader_slot, int split_slot, void **entry)
{
   1e4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e4a4:	4605      	mov	r5, r0
   1e4a6:	460c      	mov	r4, r1
   1e4a8:	4690      	mov	r8, r2
    uintptr_t entry_val;
    int loader_flash_id;
    int split_flash_id;
    int rc;

    sectors = malloc(BOOT_MAX_IMG_SECTORS * 2 * sizeof *sectors);
   1e4aa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   1e4ae:	f001 fabd 	bl	1fa2c <os_malloc>
    if (sectors == NULL) {
   1e4b2:	2800      	cmp	r0, #0
   1e4b4:	d05b      	beq.n	1e56e <split_go+0xce>
   1e4b6:	4607      	mov	r7, r0
        return SPLIT_GO_ERR;
    }
    boot_data.imgs[loader_slot].sectors = sectors + 0;
   1e4b8:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 1e574 <split_go+0xd4>
   1e4bc:	232c      	movs	r3, #44	; 0x2c
   1e4be:	fb03 f605 	mul.w	r6, r3, r5
   1e4c2:	eb09 0206 	add.w	r2, r9, r6
   1e4c6:	6250      	str	r0, [r2, #36]	; 0x24
    boot_data.imgs[split_slot].sectors = sectors + BOOT_MAX_IMG_SECTORS;
   1e4c8:	f500 62c0 	add.w	r2, r0, #1536	; 0x600
   1e4cc:	fb03 9304 	mla	r3, r3, r4, r9
   1e4d0:	625a      	str	r2, [r3, #36]	; 0x24

    loader_flash_id = flash_area_id_from_image_slot(loader_slot);
   1e4d2:	4628      	mov	r0, r5
   1e4d4:	f7fe f976 	bl	1c7c4 <flash_area_id_from_image_slot>
    rc = flash_area_open(loader_flash_id,
   1e4d8:	f106 0120 	add.w	r1, r6, #32
   1e4dc:	4449      	add	r1, r9
   1e4de:	b2c0      	uxtb	r0, r0
   1e4e0:	f7fe f8b0 	bl	1c644 <flash_area_open>
                         &BOOT_IMG_AREA(&boot_data, loader_slot));
    assert(rc == 0);
   1e4e4:	b9b8      	cbnz	r0, 1e516 <split_go+0x76>
    split_flash_id = flash_area_id_from_image_slot(split_slot);
   1e4e6:	4620      	mov	r0, r4
   1e4e8:	f7fe f96c 	bl	1c7c4 <flash_area_id_from_image_slot>
    rc = flash_area_open(split_flash_id,
   1e4ec:	232c      	movs	r3, #44	; 0x2c
   1e4ee:	fb04 f303 	mul.w	r3, r4, r3
   1e4f2:	3320      	adds	r3, #32
   1e4f4:	491f      	ldr	r1, [pc, #124]	; (1e574 <split_go+0xd4>)
   1e4f6:	4419      	add	r1, r3
   1e4f8:	b2c0      	uxtb	r0, r0
   1e4fa:	f7fe f8a3 	bl	1c644 <flash_area_open>
                         &BOOT_IMG_AREA(&boot_data, split_slot));
    assert(rc == 0);
   1e4fe:	b980      	cbnz	r0, 1e522 <split_go+0x82>

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors();
   1e500:	f7ff ff9c 	bl	1e43c <boot_read_sectors>
    if (rc != 0) {
   1e504:	b198      	cbz	r0, 1e52e <split_go+0x8e>
        rc = SPLIT_GO_ERR;
   1e506:	f06f 0601 	mvn.w	r6, #1
    rc = SPLIT_GO_OK;

done:
    flash_area_close(BOOT_IMG_AREA(&boot_data, split_slot));
    flash_area_close(BOOT_IMG_AREA(&boot_data, loader_slot));
    free(sectors);
   1e50a:	4638      	mov	r0, r7
   1e50c:	f001 fa9a 	bl	1fa44 <os_free>
    return rc;
}
   1e510:	4630      	mov	r0, r6
   1e512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(rc == 0);
   1e516:	2300      	movs	r3, #0
   1e518:	461a      	mov	r2, r3
   1e51a:	4619      	mov	r1, r3
   1e51c:	4618      	mov	r0, r3
   1e51e:	f7ea fd19 	bl	8f54 <__assert_func>
    assert(rc == 0);
   1e522:	2300      	movs	r3, #0
   1e524:	461a      	mov	r2, r3
   1e526:	4619      	mov	r1, r3
   1e528:	4618      	mov	r0, r3
   1e52a:	f7ea fd13 	bl	8f54 <__assert_func>
    rc = boot_read_image_headers(true);
   1e52e:	2001      	movs	r0, #1
   1e530:	f7ff ff30 	bl	1e394 <boot_read_image_headers>
    if (rc != 0) {
   1e534:	4606      	mov	r6, r0
   1e536:	2800      	cmp	r0, #0
   1e538:	d1e7      	bne.n	1e50a <split_go+0x6a>
    return &state->imgs[slot].hdr;
   1e53a:	4a0e      	ldr	r2, [pc, #56]	; (1e574 <split_go+0xd4>)
   1e53c:	232c      	movs	r3, #44	; 0x2c
   1e53e:	fb03 2004 	mla	r0, r3, r4, r2
   1e542:	fb03 2205 	mla	r2, r3, r5, r2
    rc = split_image_check(boot_img_hdr(&boot_data, split_slot),
   1e546:	6a13      	ldr	r3, [r2, #32]
   1e548:	6a01      	ldr	r1, [r0, #32]
   1e54a:	f7ff ff3d 	bl	1e3c8 <split_image_check>
    if (rc != 0) {
   1e54e:	4606      	mov	r6, r0
   1e550:	b950      	cbnz	r0, 1e568 <split_go+0xc8>
    return state->imgs[slot].area->fa_off;
   1e552:	4908      	ldr	r1, [pc, #32]	; (1e574 <split_go+0xd4>)
   1e554:	232c      	movs	r3, #44	; 0x2c
   1e556:	fb03 1404 	mla	r4, r3, r4, r1
   1e55a:	6a23      	ldr	r3, [r4, #32]
   1e55c:	685a      	ldr	r2, [r3, #4]
                boot_img_hdr(&boot_data, split_slot)->ih_hdr_size;
   1e55e:	8923      	ldrh	r3, [r4, #8]
    entry_val = boot_img_slot_off(&boot_data, split_slot) +
   1e560:	4413      	add	r3, r2
    *entry = (void *) entry_val;
   1e562:	f8c8 3000 	str.w	r3, [r8]
    rc = SPLIT_GO_OK;
   1e566:	e7d0      	b.n	1e50a <split_go+0x6a>
        rc = SPLIT_GO_NON_MATCHING;
   1e568:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1e56c:	e7cd      	b.n	1e50a <split_go+0x6a>
        return SPLIT_GO_ERR;
   1e56e:	f06f 0601 	mvn.w	r6, #1
   1e572:	e7cd      	b.n	1e510 <split_go+0x70>
   1e574:	20006b90 	.word	0x20006b90

0001e578 <bootutil_img_hash>:
 */
static int
bootutil_img_hash(struct image_header *hdr, const struct flash_area *fap,
                  uint8_t *tmp_buf, uint32_t tmp_buf_sz,
                  uint8_t *hash_result, uint8_t *seed, int seed_len)
{
   1e578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e57c:	b09d      	sub	sp, #116	; 0x74
   1e57e:	4605      	mov	r5, r0
   1e580:	4689      	mov	r9, r1
   1e582:	4617      	mov	r7, r2
   1e584:	4698      	mov	r8, r3
   1e586:	9c25      	ldr	r4, [sp, #148]	; 0x94
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
   1e588:	a801      	add	r0, sp, #4
   1e58a:	f000 f8a1 	bl	1e6d0 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
   1e58e:	2100      	movs	r1, #0
   1e590:	a801      	add	r0, sp, #4
   1e592:	f000 f8a3 	bl	1e6dc <mbedtls_sha256_starts_ret>

    bootutil_sha256_init(&sha256_ctx);

    /* in some cases (split image) the hash is seeded with data from
     * the loader image */
    if (seed && (seed_len > 0)) {
   1e596:	b114      	cbz	r4, 1e59e <bootutil_img_hash+0x26>
   1e598:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1e59a:	2b00      	cmp	r3, #0
   1e59c:	dc04      	bgt.n	1e5a8 <bootutil_img_hash+0x30>

    /*
     * Hash is computed over image header and image itself. No TLV is
     * included ATM.
     */
    hdr_size = hdr->ih_hdr_size;
   1e59e:	892b      	ldrh	r3, [r5, #8]
    size = hdr->ih_img_size + hdr_size;
   1e5a0:	68ee      	ldr	r6, [r5, #12]
   1e5a2:	441e      	add	r6, r3
    for (off = 0; off < size; off += blk_sz) {
   1e5a4:	2500      	movs	r5, #0
   1e5a6:	e013      	b.n	1e5d0 <bootutil_img_hash+0x58>

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
   1e5a8:	461a      	mov	r2, r3
   1e5aa:	4621      	mov	r1, r4
   1e5ac:	a801      	add	r0, sp, #4
   1e5ae:	f000 f97f 	bl	1e8b0 <mbedtls_sha256_update_ret>
}
   1e5b2:	e7f4      	b.n	1e59e <bootutil_img_hash+0x26>
         */
        if ((off < hdr_size) && ((off + blk_sz) > hdr_size)) {
            blk_sz = hdr_size - off;
        }
#endif
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
   1e5b4:	4623      	mov	r3, r4
   1e5b6:	463a      	mov	r2, r7
   1e5b8:	4629      	mov	r1, r5
   1e5ba:	4648      	mov	r0, r9
   1e5bc:	f7fe f8a2 	bl	1c704 <flash_area_read>
        if (rc) {
   1e5c0:	4603      	mov	r3, r0
   1e5c2:	b988      	cbnz	r0, 1e5e8 <bootutil_img_hash+0x70>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
   1e5c4:	4622      	mov	r2, r4
   1e5c6:	4639      	mov	r1, r7
   1e5c8:	a801      	add	r0, sp, #4
   1e5ca:	f000 f971 	bl	1e8b0 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
   1e5ce:	4425      	add	r5, r4
   1e5d0:	42b5      	cmp	r5, r6
   1e5d2:	d204      	bcs.n	1e5de <bootutil_img_hash+0x66>
        blk_sz = size - off;
   1e5d4:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
   1e5d6:	4544      	cmp	r4, r8
   1e5d8:	d9ec      	bls.n	1e5b4 <bootutil_img_hash+0x3c>
            blk_sz = tmp_buf_sz;
   1e5da:	4644      	mov	r4, r8
   1e5dc:	e7ea      	b.n	1e5b4 <bootutil_img_hash+0x3c>

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
   1e5de:	9924      	ldr	r1, [sp, #144]	; 0x90
   1e5e0:	a801      	add	r0, sp, #4
   1e5e2:	f000 f9a8 	bl	1e936 <mbedtls_sha256_finish_ret>
#endif
        bootutil_sha256_update(&sha256_ctx, tmp_buf, blk_sz);
    }
    bootutil_sha256_finish(&sha256_ctx, hash_result);

    return 0;
   1e5e6:	2300      	movs	r3, #0
}
   1e5e8:	4618      	mov	r0, r3
   1e5ea:	b01d      	add	sp, #116	; 0x74
   1e5ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001e5f0 <bootutil_img_validate>:
 */
int
bootutil_img_validate(struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz,
                      uint8_t *seed, int seed_len, uint8_t *out_hash)
{
   1e5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e5f4:	b096      	sub	sp, #88	; 0x58
   1e5f6:	4680      	mov	r8, r0
   1e5f8:	460d      	mov	r5, r1
   1e5fa:	9e1e      	ldr	r6, [sp, #120]	; 0x78
    struct image_tlv tlv;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc;

    rc = bootutil_img_hash(hdr, fap, tmp_buf, tmp_buf_sz, hash, seed, seed_len);
   1e5fc:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   1e5fe:	9402      	str	r4, [sp, #8]
   1e600:	9c1c      	ldr	r4, [sp, #112]	; 0x70
   1e602:	9401      	str	r4, [sp, #4]
   1e604:	ac04      	add	r4, sp, #16
   1e606:	9400      	str	r4, [sp, #0]
   1e608:	f7ff ffb6 	bl	1e578 <bootutil_img_hash>
    if (rc) {
   1e60c:	4607      	mov	r7, r0
   1e60e:	2800      	cmp	r0, #0
   1e610:	d14a      	bne.n	1e6a8 <bootutil_img_validate+0xb8>
        return rc;
    }

    if (out_hash) {
   1e612:	b14e      	cbz	r6, 1e628 <bootutil_img_validate+0x38>
        memcpy(out_hash, hash, 32);
   1e614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1e616:	6030      	str	r0, [r6, #0]
   1e618:	6071      	str	r1, [r6, #4]
   1e61a:	60b2      	str	r2, [r6, #8]
   1e61c:	60f3      	str	r3, [r6, #12]
   1e61e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1e620:	6130      	str	r0, [r6, #16]
   1e622:	6171      	str	r1, [r6, #20]
   1e624:	61b2      	str	r2, [r6, #24]
   1e626:	61f3      	str	r3, [r6, #28]
    }

    /* The TLVs come after the image. */
    /* After image there are TLVs. */
    off = hdr->ih_img_size + hdr->ih_hdr_size;
   1e628:	f8d8 400c 	ldr.w	r4, [r8, #12]
   1e62c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1e630:	441c      	add	r4, r3

    rc = flash_area_read(fap, off, &info, sizeof(info));
   1e632:	2304      	movs	r3, #4
   1e634:	aa15      	add	r2, sp, #84	; 0x54
   1e636:	4621      	mov	r1, r4
   1e638:	4628      	mov	r0, r5
   1e63a:	f7fe f863 	bl	1c704 <flash_area_read>
    if (rc) {
   1e63e:	4607      	mov	r7, r0
   1e640:	bb90      	cbnz	r0, 1e6a8 <bootutil_img_validate+0xb8>
        return rc;
    }
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
   1e642:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
   1e646:	f646 1307 	movw	r3, #26887	; 0x6907
   1e64a:	429a      	cmp	r2, r3
   1e64c:	d130      	bne.n	1e6b0 <bootutil_img_validate+0xc0>
        return -1;
    }
    end = off + info.it_tlv_tot;
   1e64e:	f8bd 6056 	ldrh.w	r6, [sp, #86]	; 0x56
   1e652:	4426      	add	r6, r4
    off += sizeof(info);
   1e654:	3404      	adds	r4, #4
    int sha256_valid = 0;
   1e656:	4680      	mov	r8, r0

    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    for (; off < end; off += sizeof(tlv) + tlv.it_len) {
   1e658:	e003      	b.n	1e662 <bootutil_img_validate+0x72>
   1e65a:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
   1e65e:	441c      	add	r4, r3
   1e660:	3404      	adds	r4, #4
   1e662:	42b4      	cmp	r4, r6
   1e664:	d21d      	bcs.n	1e6a2 <bootutil_img_validate+0xb2>
        rc = flash_area_read(fap, off, &tlv, sizeof tlv);
   1e666:	2304      	movs	r3, #4
   1e668:	aa14      	add	r2, sp, #80	; 0x50
   1e66a:	4621      	mov	r1, r4
   1e66c:	4628      	mov	r0, r5
   1e66e:	f7fe f849 	bl	1c704 <flash_area_read>
        if (rc) {
   1e672:	bb00      	cbnz	r0, 1e6b6 <bootutil_img_validate+0xc6>
            return rc;
        }

        if (tlv.it_type == IMAGE_TLV_SHA256) {
   1e674:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   1e678:	2b10      	cmp	r3, #16
   1e67a:	d1ee      	bne.n	1e65a <bootutil_img_validate+0x6a>
            /*
             * Verify the SHA256 image hash.  This must always be
             * present.
             */
            if (tlv.it_len != sizeof(hash)) {
   1e67c:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
   1e680:	2b20      	cmp	r3, #32
   1e682:	d11a      	bne.n	1e6ba <bootutil_img_validate+0xca>
                return -1;
            }
            rc = flash_area_read(fap, off + sizeof(tlv), buf, sizeof hash);
   1e684:	aa0c      	add	r2, sp, #48	; 0x30
   1e686:	1d21      	adds	r1, r4, #4
   1e688:	4628      	mov	r0, r5
   1e68a:	f7fe f83b 	bl	1c704 <flash_area_read>
            if (rc) {
   1e68e:	b9b8      	cbnz	r0, 1e6c0 <bootutil_img_validate+0xd0>
                return rc;
            }
            if (memcmp(hash, buf, sizeof(hash))) {
   1e690:	2220      	movs	r2, #32
   1e692:	a90c      	add	r1, sp, #48	; 0x30
   1e694:	a804      	add	r0, sp, #16
   1e696:	f7ed fcc9 	bl	c02c <memcmp>
   1e69a:	b998      	cbnz	r0, 1e6c4 <bootutil_img_validate+0xd4>
                return -1;
            }

            sha256_valid = 1;
   1e69c:	f04f 0801 	mov.w	r8, #1
   1e6a0:	e7db      	b.n	1e65a <bootutil_img_validate+0x6a>
            key_id = -1;
#endif
        }
    }

    if (!sha256_valid) {
   1e6a2:	f1b8 0f00 	cmp.w	r8, #0
   1e6a6:	d010      	beq.n	1e6ca <bootutil_img_validate+0xda>
        return -1;
    }
#endif

    return 0;
}
   1e6a8:	4638      	mov	r0, r7
   1e6aa:	b016      	add	sp, #88	; 0x58
   1e6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
   1e6b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1e6b4:	e7f8      	b.n	1e6a8 <bootutil_img_validate+0xb8>
            return rc;
   1e6b6:	4607      	mov	r7, r0
   1e6b8:	e7f6      	b.n	1e6a8 <bootutil_img_validate+0xb8>
                return -1;
   1e6ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1e6be:	e7f3      	b.n	1e6a8 <bootutil_img_validate+0xb8>
                return rc;
   1e6c0:	4607      	mov	r7, r0
   1e6c2:	e7f1      	b.n	1e6a8 <bootutil_img_validate+0xb8>
                return -1;
   1e6c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1e6c8:	e7ee      	b.n	1e6a8 <bootutil_img_validate+0xb8>
        return -1;
   1e6ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1e6ce:	e7eb      	b.n	1e6a8 <bootutil_img_validate+0xb8>

0001e6d0 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
   1e6d0:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
   1e6d2:	226c      	movs	r2, #108	; 0x6c
   1e6d4:	2100      	movs	r1, #0
   1e6d6:	f7ed fcda 	bl	c08e <memset>
}
   1e6da:	bd08      	pop	{r3, pc}

0001e6dc <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
   1e6dc:	2300      	movs	r3, #0
   1e6de:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
   1e6e0:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
   1e6e2:	460b      	mov	r3, r1
   1e6e4:	b9b9      	cbnz	r1, 1e716 <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
   1e6e6:	4a19      	ldr	r2, [pc, #100]	; (1e74c <mbedtls_sha256_starts_ret+0x70>)
   1e6e8:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
   1e6ea:	4a19      	ldr	r2, [pc, #100]	; (1e750 <mbedtls_sha256_starts_ret+0x74>)
   1e6ec:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
   1e6ee:	4a19      	ldr	r2, [pc, #100]	; (1e754 <mbedtls_sha256_starts_ret+0x78>)
   1e6f0:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
   1e6f2:	4a19      	ldr	r2, [pc, #100]	; (1e758 <mbedtls_sha256_starts_ret+0x7c>)
   1e6f4:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
   1e6f6:	4a19      	ldr	r2, [pc, #100]	; (1e75c <mbedtls_sha256_starts_ret+0x80>)
   1e6f8:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
   1e6fa:	4a19      	ldr	r2, [pc, #100]	; (1e760 <mbedtls_sha256_starts_ret+0x84>)
   1e6fc:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
   1e6fe:	4a19      	ldr	r2, [pc, #100]	; (1e764 <mbedtls_sha256_starts_ret+0x88>)
   1e700:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
   1e702:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
   1e706:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
   1e70a:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
   1e70e:	6242      	str	r2, [r0, #36]	; 0x24
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
   1e710:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
   1e712:	2000      	movs	r0, #0
   1e714:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
   1e716:	4a14      	ldr	r2, [pc, #80]	; (1e768 <mbedtls_sha256_starts_ret+0x8c>)
   1e718:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
   1e71a:	4a14      	ldr	r2, [pc, #80]	; (1e76c <mbedtls_sha256_starts_ret+0x90>)
   1e71c:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
   1e71e:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
   1e722:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   1e726:	f502 6201 	add.w	r2, r2, #2064	; 0x810
   1e72a:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
   1e72c:	4a10      	ldr	r2, [pc, #64]	; (1e770 <mbedtls_sha256_starts_ret+0x94>)
   1e72e:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
   1e730:	4a10      	ldr	r2, [pc, #64]	; (1e774 <mbedtls_sha256_starts_ret+0x98>)
   1e732:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
   1e734:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
   1e738:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
   1e73c:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
   1e740:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
   1e742:	4a0d      	ldr	r2, [pc, #52]	; (1e778 <mbedtls_sha256_starts_ret+0x9c>)
   1e744:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
   1e746:	4a0d      	ldr	r2, [pc, #52]	; (1e77c <mbedtls_sha256_starts_ret+0xa0>)
   1e748:	6242      	str	r2, [r0, #36]	; 0x24
   1e74a:	e7e1      	b.n	1e710 <mbedtls_sha256_starts_ret+0x34>
   1e74c:	6a09e667 	.word	0x6a09e667
   1e750:	bb67ae85 	.word	0xbb67ae85
   1e754:	3c6ef372 	.word	0x3c6ef372
   1e758:	a54ff53a 	.word	0xa54ff53a
   1e75c:	510e527f 	.word	0x510e527f
   1e760:	9b05688c 	.word	0x9b05688c
   1e764:	1f83d9ab 	.word	0x1f83d9ab
   1e768:	c1059ed8 	.word	0xc1059ed8
   1e76c:	367cd507 	.word	0x367cd507
   1e770:	f70e5939 	.word	0xf70e5939
   1e774:	ffc00b31 	.word	0xffc00b31
   1e778:	64f98fa7 	.word	0x64f98fa7
   1e77c:	befa4fa4 	.word	0xbefa4fa4

0001e780 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
   1e780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e784:	b0c8      	sub	sp, #288	; 0x120
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
   1e786:	2300      	movs	r3, #0
   1e788:	e005      	b.n	1e796 <mbedtls_internal_sha256_process+0x16>
        A[i] = ctx->state[i];
   1e78a:	1c9a      	adds	r2, r3, #2
   1e78c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   1e790:	f84d 2023 	str.w	r2, [sp, r3, lsl #2]
    for( i = 0; i < 8; i++ )
   1e794:	3301      	adds	r3, #1
   1e796:	2b07      	cmp	r3, #7
   1e798:	d9f7      	bls.n	1e78a <mbedtls_internal_sha256_process+0xa>

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
   1e79a:	2200      	movs	r2, #0
   1e79c:	e04f      	b.n	1e83e <mbedtls_internal_sha256_process+0xbe>
    {
        if( i < 16 )
            GET_UINT32_BE( W[i], data, 4 * i );
   1e79e:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
   1e7a2:	eb01 0482 	add.w	r4, r1, r2, lsl #2
   1e7a6:	7863      	ldrb	r3, [r4, #1]
   1e7a8:	041b      	lsls	r3, r3, #16
   1e7aa:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   1e7ae:	78a5      	ldrb	r5, [r4, #2]
   1e7b0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1e7b4:	78e4      	ldrb	r4, [r4, #3]
   1e7b6:	4323      	orrs	r3, r4
   1e7b8:	ac08      	add	r4, sp, #32
   1e7ba:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        else
            R( i );

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
   1e7be:	9b07      	ldr	r3, [sp, #28]
   1e7c0:	9c04      	ldr	r4, [sp, #16]
   1e7c2:	ea4f 2cf4 	mov.w	ip, r4, ror #11
   1e7c6:	ea8c 1cb4 	eor.w	ip, ip, r4, ror #6
   1e7ca:	ea8c 6c74 	eor.w	ip, ip, r4, ror #25
   1e7ce:	4463      	add	r3, ip
   1e7d0:	9d06      	ldr	r5, [sp, #24]
   1e7d2:	9e05      	ldr	r6, [sp, #20]
   1e7d4:	ea85 0c06 	eor.w	ip, r5, r6
   1e7d8:	ea04 0c0c 	and.w	ip, r4, ip
   1e7dc:	ea85 0c0c 	eor.w	ip, r5, ip
   1e7e0:	4463      	add	r3, ip
   1e7e2:	4f32      	ldr	r7, [pc, #200]	; (1e8ac <mbedtls_internal_sha256_process+0x12c>)
   1e7e4:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   1e7e8:	443b      	add	r3, r7
   1e7ea:	af08      	add	r7, sp, #32
   1e7ec:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   1e7f0:	443b      	add	r3, r7
   1e7f2:	f8dd e000 	ldr.w	lr, [sp]
   1e7f6:	ea4f 3c7e 	mov.w	ip, lr, ror #13
   1e7fa:	ea8c 0cbe 	eor.w	ip, ip, lr, ror #2
   1e7fe:	ea8c 5cbe 	eor.w	ip, ip, lr, ror #22
   1e802:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1e806:	ea0e 0708 	and.w	r7, lr, r8
   1e80a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1e80e:	ea4e 0a08 	orr.w	sl, lr, r8
   1e812:	ea09 0a0a 	and.w	sl, r9, sl
   1e816:	ea47 070a 	orr.w	r7, r7, sl
   1e81a:	44bc      	add	ip, r7
   1e81c:	9f03      	ldr	r7, [sp, #12]
   1e81e:	441f      	add	r7, r3
   1e820:	9703      	str	r7, [sp, #12]
   1e822:	4463      	add	r3, ip
   1e824:	9307      	str	r3, [sp, #28]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
   1e826:	9507      	str	r5, [sp, #28]
   1e828:	9606      	str	r6, [sp, #24]
   1e82a:	9405      	str	r4, [sp, #20]
   1e82c:	9704      	str	r7, [sp, #16]
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
   1e82e:	f8cd 900c 	str.w	r9, [sp, #12]
   1e832:	f8cd 8008 	str.w	r8, [sp, #8]
   1e836:	f8cd e004 	str.w	lr, [sp, #4]
   1e83a:	9300      	str	r3, [sp, #0]
    for( i = 0; i < 64; i++ )
   1e83c:	3201      	adds	r2, #1
   1e83e:	2a3f      	cmp	r2, #63	; 0x3f
   1e840:	d822      	bhi.n	1e888 <mbedtls_internal_sha256_process+0x108>
        if( i < 16 )
   1e842:	2a0f      	cmp	r2, #15
   1e844:	d9ab      	bls.n	1e79e <mbedtls_internal_sha256_process+0x1e>
            R( i );
   1e846:	1e93      	subs	r3, r2, #2
   1e848:	ac08      	add	r4, sp, #32
   1e84a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   1e84e:	ea4f 43f5 	mov.w	r3, r5, ror #19
   1e852:	ea83 4375 	eor.w	r3, r3, r5, ror #17
   1e856:	ea83 2395 	eor.w	r3, r3, r5, lsr #10
   1e85a:	1fd5      	subs	r5, r2, #7
   1e85c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   1e860:	442b      	add	r3, r5
   1e862:	f1a2 050f 	sub.w	r5, r2, #15
   1e866:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
   1e86a:	ea4f 45b6 	mov.w	r5, r6, ror #18
   1e86e:	ea85 15f6 	eor.w	r5, r5, r6, ror #7
   1e872:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
   1e876:	442b      	add	r3, r5
   1e878:	f1a2 0510 	sub.w	r5, r2, #16
   1e87c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   1e880:	442b      	add	r3, r5
   1e882:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
   1e886:	e79a      	b.n	1e7be <mbedtls_internal_sha256_process+0x3e>
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
   1e888:	2300      	movs	r3, #0
   1e88a:	e008      	b.n	1e89e <mbedtls_internal_sha256_process+0x11e>
        ctx->state[i] += A[i];
   1e88c:	f85d 4023 	ldr.w	r4, [sp, r3, lsl #2]
   1e890:	1c99      	adds	r1, r3, #2
   1e892:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   1e896:	4422      	add	r2, r4
   1e898:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
   1e89c:	3301      	adds	r3, #1
   1e89e:	2b07      	cmp	r3, #7
   1e8a0:	d9f4      	bls.n	1e88c <mbedtls_internal_sha256_process+0x10c>

    return( 0 );
}
   1e8a2:	2000      	movs	r0, #0
   1e8a4:	b048      	add	sp, #288	; 0x120
   1e8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e8aa:	bf00      	nop
   1e8ac:	00023c90 	.word	0x00023c90

0001e8b0 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   1e8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
   1e8b4:	b3da      	cbz	r2, 1e92e <mbedtls_sha256_update_ret+0x7e>
   1e8b6:	4606      	mov	r6, r0
   1e8b8:	460d      	mov	r5, r1
   1e8ba:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
   1e8bc:	6803      	ldr	r3, [r0, #0]
   1e8be:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
   1e8c2:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
   1e8c6:	4413      	add	r3, r2
   1e8c8:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
   1e8ca:	4293      	cmp	r3, r2
   1e8cc:	d202      	bcs.n	1e8d4 <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
   1e8ce:	6843      	ldr	r3, [r0, #4]
   1e8d0:	3301      	adds	r3, #1
   1e8d2:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
   1e8d4:	b10f      	cbz	r7, 1e8da <mbedtls_sha256_update_ret+0x2a>
   1e8d6:	4544      	cmp	r4, r8
   1e8d8:	d20a      	bcs.n	1e8f0 <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
   1e8da:	2c3f      	cmp	r4, #63	; 0x3f
   1e8dc:	d91b      	bls.n	1e916 <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
   1e8de:	4629      	mov	r1, r5
   1e8e0:	4630      	mov	r0, r6
   1e8e2:	f7ff ff4d 	bl	1e780 <mbedtls_internal_sha256_process>
   1e8e6:	4603      	mov	r3, r0
   1e8e8:	bb10      	cbnz	r0, 1e930 <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
   1e8ea:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
   1e8ec:	3c40      	subs	r4, #64	; 0x40
   1e8ee:	e7f4      	b.n	1e8da <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
   1e8f0:	f106 0928 	add.w	r9, r6, #40	; 0x28
   1e8f4:	4642      	mov	r2, r8
   1e8f6:	4629      	mov	r1, r5
   1e8f8:	eb09 0007 	add.w	r0, r9, r7
   1e8fc:	f7ed fbba 	bl	c074 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   1e900:	4649      	mov	r1, r9
   1e902:	4630      	mov	r0, r6
   1e904:	f7ff ff3c 	bl	1e780 <mbedtls_internal_sha256_process>
   1e908:	4603      	mov	r3, r0
   1e90a:	b988      	cbnz	r0, 1e930 <mbedtls_sha256_update_ret+0x80>
        input += fill;
   1e90c:	4445      	add	r5, r8
        ilen  -= fill;
   1e90e:	3f40      	subs	r7, #64	; 0x40
   1e910:	443c      	add	r4, r7
        left = 0;
   1e912:	2700      	movs	r7, #0
   1e914:	e7e1      	b.n	1e8da <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
   1e916:	b90c      	cbnz	r4, 1e91c <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
   1e918:	2300      	movs	r3, #0
   1e91a:	e009      	b.n	1e930 <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   1e91c:	f106 0028 	add.w	r0, r6, #40	; 0x28
   1e920:	4622      	mov	r2, r4
   1e922:	4629      	mov	r1, r5
   1e924:	4438      	add	r0, r7
   1e926:	f7ed fba5 	bl	c074 <memcpy>
    return( 0 );
   1e92a:	2300      	movs	r3, #0
   1e92c:	e000      	b.n	1e930 <mbedtls_sha256_update_ret+0x80>
        return( 0 );
   1e92e:	2300      	movs	r3, #0
}
   1e930:	4618      	mov	r0, r3
   1e932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e936 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   1e936:	b570      	push	{r4, r5, r6, lr}
   1e938:	4604      	mov	r4, r0
   1e93a:	460d      	mov	r5, r1
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   1e93c:	6803      	ldr	r3, [r0, #0]
   1e93e:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   1e942:	1c58      	adds	r0, r3, #1
   1e944:	4423      	add	r3, r4
   1e946:	2280      	movs	r2, #128	; 0x80
   1e948:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
   1e94c:	2838      	cmp	r0, #56	; 0x38
   1e94e:	d87c      	bhi.n	1ea4a <mbedtls_sha256_finish_ret+0x114>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   1e950:	f104 0328 	add.w	r3, r4, #40	; 0x28
   1e954:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1e958:	2100      	movs	r1, #0
   1e95a:	4418      	add	r0, r3
   1e95c:	f7ed fb97 	bl	c08e <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
   1e960:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
   1e962:	6863      	ldr	r3, [r4, #4]
   1e964:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
   1e966:	ea43 7052 	orr.w	r0, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
   1e96a:	00d1      	lsls	r1, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   1e96c:	0e1e      	lsrs	r6, r3, #24
   1e96e:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
   1e972:	f3c3 4607 	ubfx	r6, r3, #16, #8
   1e976:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
   1e97a:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1e97e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
   1e982:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   1e986:	f3c2 5347 	ubfx	r3, r2, #21, #8
   1e98a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
   1e98e:	f3c2 3347 	ubfx	r3, r2, #13, #8
   1e992:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
   1e996:	f3c2 1247 	ubfx	r2, r2, #5, #8
   1e99a:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
   1e99e:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   1e9a2:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1e9a6:	4620      	mov	r0, r4
   1e9a8:	f7ff feea 	bl	1e780 <mbedtls_internal_sha256_process>
   1e9ac:	4603      	mov	r3, r0
   1e9ae:	2800      	cmp	r0, #0
   1e9b0:	d159      	bne.n	1ea66 <mbedtls_sha256_finish_ret+0x130>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   1e9b2:	7ae2      	ldrb	r2, [r4, #11]
   1e9b4:	702a      	strb	r2, [r5, #0]
   1e9b6:	7aa2      	ldrb	r2, [r4, #10]
   1e9b8:	706a      	strb	r2, [r5, #1]
   1e9ba:	7a62      	ldrb	r2, [r4, #9]
   1e9bc:	70aa      	strb	r2, [r5, #2]
   1e9be:	7a22      	ldrb	r2, [r4, #8]
   1e9c0:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   1e9c2:	7be2      	ldrb	r2, [r4, #15]
   1e9c4:	712a      	strb	r2, [r5, #4]
   1e9c6:	7ba2      	ldrb	r2, [r4, #14]
   1e9c8:	716a      	strb	r2, [r5, #5]
   1e9ca:	7b62      	ldrb	r2, [r4, #13]
   1e9cc:	71aa      	strb	r2, [r5, #6]
   1e9ce:	7b22      	ldrb	r2, [r4, #12]
   1e9d0:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   1e9d2:	7ce2      	ldrb	r2, [r4, #19]
   1e9d4:	722a      	strb	r2, [r5, #8]
   1e9d6:	7ca2      	ldrb	r2, [r4, #18]
   1e9d8:	726a      	strb	r2, [r5, #9]
   1e9da:	7c62      	ldrb	r2, [r4, #17]
   1e9dc:	72aa      	strb	r2, [r5, #10]
   1e9de:	7c22      	ldrb	r2, [r4, #16]
   1e9e0:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   1e9e2:	7de2      	ldrb	r2, [r4, #23]
   1e9e4:	732a      	strb	r2, [r5, #12]
   1e9e6:	7da2      	ldrb	r2, [r4, #22]
   1e9e8:	736a      	strb	r2, [r5, #13]
   1e9ea:	7d62      	ldrb	r2, [r4, #21]
   1e9ec:	73aa      	strb	r2, [r5, #14]
   1e9ee:	7d22      	ldrb	r2, [r4, #20]
   1e9f0:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   1e9f2:	7ee2      	ldrb	r2, [r4, #27]
   1e9f4:	742a      	strb	r2, [r5, #16]
   1e9f6:	7ea2      	ldrb	r2, [r4, #26]
   1e9f8:	746a      	strb	r2, [r5, #17]
   1e9fa:	7e62      	ldrb	r2, [r4, #25]
   1e9fc:	74aa      	strb	r2, [r5, #18]
   1e9fe:	7e22      	ldrb	r2, [r4, #24]
   1ea00:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
   1ea02:	7fe2      	ldrb	r2, [r4, #31]
   1ea04:	752a      	strb	r2, [r5, #20]
   1ea06:	7fa2      	ldrb	r2, [r4, #30]
   1ea08:	756a      	strb	r2, [r5, #21]
   1ea0a:	7f62      	ldrb	r2, [r4, #29]
   1ea0c:	75aa      	strb	r2, [r5, #22]
   1ea0e:	7f22      	ldrb	r2, [r4, #28]
   1ea10:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
   1ea12:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   1ea16:	762a      	strb	r2, [r5, #24]
   1ea18:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   1ea1c:	766a      	strb	r2, [r5, #25]
   1ea1e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   1ea22:	76aa      	strb	r2, [r5, #26]
   1ea24:	f894 2020 	ldrb.w	r2, [r4, #32]
   1ea28:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
   1ea2a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1ea2c:	b9da      	cbnz	r2, 1ea66 <mbedtls_sha256_finish_ret+0x130>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
   1ea2e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1ea32:	772b      	strb	r3, [r5, #28]
   1ea34:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   1ea38:	776b      	strb	r3, [r5, #29]
   1ea3a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   1ea3e:	77ab      	strb	r3, [r5, #30]
   1ea40:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1ea44:	77eb      	strb	r3, [r5, #31]

    return( 0 );
   1ea46:	4613      	mov	r3, r2
   1ea48:	e00d      	b.n	1ea66 <mbedtls_sha256_finish_ret+0x130>
        memset( ctx->buffer + used, 0, 64 - used );
   1ea4a:	f104 0628 	add.w	r6, r4, #40	; 0x28
   1ea4e:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1ea52:	2100      	movs	r1, #0
   1ea54:	4430      	add	r0, r6
   1ea56:	f7ed fb1a 	bl	c08e <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   1ea5a:	4631      	mov	r1, r6
   1ea5c:	4620      	mov	r0, r4
   1ea5e:	f7ff fe8f 	bl	1e780 <mbedtls_internal_sha256_process>
   1ea62:	4603      	mov	r3, r0
   1ea64:	b108      	cbz	r0, 1ea6a <mbedtls_sha256_finish_ret+0x134>
}
   1ea66:	4618      	mov	r0, r3
   1ea68:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
   1ea6a:	2238      	movs	r2, #56	; 0x38
   1ea6c:	2100      	movs	r1, #0
   1ea6e:	4630      	mov	r0, r6
   1ea70:	f7ed fb0d 	bl	c08e <memset>
   1ea74:	e774      	b.n	1e960 <mbedtls_sha256_finish_ret+0x2a>

0001ea76 <fcb_free_sector_cnt>:
    return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   1ea76:	b538      	push	{r3, r4, r5, lr}
   1ea78:	4604      	mov	r4, r0
    int i;
    struct flash_area *fa;

    fa = fcb->f_active.fe_area;
   1ea7a:	69c1      	ldr	r1, [r0, #28]
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   1ea7c:	2500      	movs	r5, #0
   1ea7e:	e000      	b.n	1ea82 <fcb_free_sector_cnt+0xc>
   1ea80:	3501      	adds	r5, #1
   1ea82:	7963      	ldrb	r3, [r4, #5]
   1ea84:	42ab      	cmp	r3, r5
   1ea86:	dd06      	ble.n	1ea96 <fcb_free_sector_cnt+0x20>
        fa = fcb_getnext_area(fcb, fa);
   1ea88:	4620      	mov	r0, r4
   1ea8a:	f000 fa7b 	bl	1ef84 <fcb_getnext_area>
   1ea8e:	4601      	mov	r1, r0
        if (fa == fcb->f_oldest) {
   1ea90:	69a3      	ldr	r3, [r4, #24]
   1ea92:	4283      	cmp	r3, r0
   1ea94:	d1f4      	bne.n	1ea80 <fcb_free_sector_cnt+0xa>
            break;
        }
    }
    return i;
}
   1ea96:	4628      	mov	r0, r5
   1ea98:	bd38      	pop	{r3, r4, r5, pc}

0001ea9a <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(uint8_t *buf, uint16_t len)
{
    if (len < 0x80) {
   1ea9a:	297f      	cmp	r1, #127	; 0x7f
   1ea9c:	d90a      	bls.n	1eab4 <fcb_put_len+0x1a>
        buf[0] = len;
        return 1;
    } else if (len < FCB_MAX_LEN) {
   1ea9e:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   1eaa2:	4299      	cmp	r1, r3
   1eaa4:	d809      	bhi.n	1eaba <fcb_put_len+0x20>
        buf[0] = (len & 0x7f) | 0x80;
   1eaa6:	f061 037f 	orn	r3, r1, #127	; 0x7f
   1eaaa:	7003      	strb	r3, [r0, #0]
        buf[1] = len >> 7;
   1eaac:	09c9      	lsrs	r1, r1, #7
   1eaae:	7041      	strb	r1, [r0, #1]
        return 2;
   1eab0:	2002      	movs	r0, #2
   1eab2:	4770      	bx	lr
        buf[0] = len;
   1eab4:	7001      	strb	r1, [r0, #0]
        return 1;
   1eab6:	2001      	movs	r0, #1
   1eab8:	4770      	bx	lr
    } else {
        return FCB_ERR_ARGS;
   1eaba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   1eabe:	4770      	bx	lr

0001eac0 <fcb_get_len>:
int
fcb_get_len(uint8_t *buf, uint16_t *len)
{
    int rc;

    if (buf[0] & 0x80) {
   1eac0:	7803      	ldrb	r3, [r0, #0]
   1eac2:	f990 2000 	ldrsb.w	r2, [r0]
   1eac6:	2a00      	cmp	r2, #0
   1eac8:	db02      	blt.n	1ead0 <fcb_get_len+0x10>
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
        rc = 2;
    } else {
        *len = buf[0];
   1eaca:	800b      	strh	r3, [r1, #0]
        rc = 1;
   1eacc:	2001      	movs	r0, #1
    }
    return rc;
}
   1eace:	4770      	bx	lr
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
   1ead0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ead4:	7842      	ldrb	r2, [r0, #1]
   1ead6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   1eada:	800b      	strh	r3, [r1, #0]
        rc = 2;
   1eadc:	2002      	movs	r0, #2
   1eade:	4770      	bx	lr

0001eae0 <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_area *fap, uint16_t id)
{
   1eae0:	b500      	push	{lr}
   1eae2:	b083      	sub	sp, #12
   1eae4:	4603      	mov	r3, r0
   1eae6:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    fda.fd_magic = fcb->f_magic;
   1eae8:	6819      	ldr	r1, [r3, #0]
   1eaea:	9100      	str	r1, [sp, #0]
    fda.fd_ver = fcb->f_version;
   1eaec:	791b      	ldrb	r3, [r3, #4]
   1eaee:	f88d 3004 	strb.w	r3, [sp, #4]
    fda._pad = 0xff;
   1eaf2:	23ff      	movs	r3, #255	; 0xff
   1eaf4:	f88d 3005 	strb.w	r3, [sp, #5]
    fda.fd_id = id;
   1eaf8:	f8ad 2006 	strh.w	r2, [sp, #6]

    rc = flash_area_write(fap, 0, &fda, sizeof(fda));
   1eafc:	2308      	movs	r3, #8
   1eafe:	466a      	mov	r2, sp
   1eb00:	2100      	movs	r1, #0
   1eb02:	f7fd fe13 	bl	1c72c <flash_area_write>
    if (rc) {
   1eb06:	b910      	cbnz	r0, 1eb0e <fcb_sector_hdr_init+0x2e>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   1eb08:	b003      	add	sp, #12
   1eb0a:	f85d fb04 	ldr.w	pc, [sp], #4
        return FCB_ERR_FLASH;
   1eb0e:	f06f 0001 	mvn.w	r0, #1
   1eb12:	e7f9      	b.n	1eb08 <fcb_sector_hdr_init+0x28>

0001eb14 <fcb_sector_hdr_read>:
 * Returns 1 if sector has data.
 */
int
fcb_sector_hdr_read(struct fcb *fcb, struct flash_area *fap,
  struct fcb_disk_area *fdap)
{
   1eb14:	b530      	push	{r4, r5, lr}
   1eb16:	b083      	sub	sp, #12
   1eb18:	4604      	mov	r4, r0
   1eb1a:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    if (!fdap) {
   1eb1c:	4615      	mov	r5, r2
   1eb1e:	b19a      	cbz	r2, 1eb48 <fcb_sector_hdr_read+0x34>
        fdap = &fda;
    }
    rc = flash_area_read_is_empty(fap, 0, fdap, sizeof(*fdap));
   1eb20:	2308      	movs	r3, #8
   1eb22:	462a      	mov	r2, r5
   1eb24:	2100      	movs	r1, #0
   1eb26:	f7fd fe46 	bl	1c7b6 <flash_area_read_is_empty>
    if (rc < 0) {
   1eb2a:	1e03      	subs	r3, r0, #0
   1eb2c:	db0e      	blt.n	1eb4c <fcb_sector_hdr_read+0x38>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   1eb2e:	2b01      	cmp	r3, #1
   1eb30:	d00f      	beq.n	1eb52 <fcb_sector_hdr_read+0x3e>
        return 0;
    }
    if (fdap->fd_magic != fcb->f_magic) {
   1eb32:	682a      	ldr	r2, [r5, #0]
   1eb34:	6823      	ldr	r3, [r4, #0]
   1eb36:	429a      	cmp	r2, r3
   1eb38:	d10d      	bne.n	1eb56 <fcb_sector_hdr_read+0x42>
        return FCB_ERR_MAGIC;
    }
    if (fdap->fd_ver != fcb->f_version) {
   1eb3a:	792a      	ldrb	r2, [r5, #4]
   1eb3c:	7923      	ldrb	r3, [r4, #4]
   1eb3e:	429a      	cmp	r2, r3
   1eb40:	d10c      	bne.n	1eb5c <fcb_sector_hdr_read+0x48>
        return FCB_ERR_VERSION;
    }
    return 1;
   1eb42:	2001      	movs	r0, #1
}
   1eb44:	b003      	add	sp, #12
   1eb46:	bd30      	pop	{r4, r5, pc}
        fdap = &fda;
   1eb48:	466d      	mov	r5, sp
   1eb4a:	e7e9      	b.n	1eb20 <fcb_sector_hdr_read+0xc>
        return FCB_ERR_FLASH;
   1eb4c:	f06f 0001 	mvn.w	r0, #1
   1eb50:	e7f8      	b.n	1eb44 <fcb_sector_hdr_read+0x30>
        return 0;
   1eb52:	2000      	movs	r0, #0
   1eb54:	e7f6      	b.n	1eb44 <fcb_sector_hdr_read+0x30>
        return FCB_ERR_MAGIC;
   1eb56:	f06f 0006 	mvn.w	r0, #6
   1eb5a:	e7f3      	b.n	1eb44 <fcb_sector_hdr_read+0x30>
        return FCB_ERR_VERSION;
   1eb5c:	f06f 0007 	mvn.w	r0, #7
   1eb60:	e7f0      	b.n	1eb44 <fcb_sector_hdr_read+0x30>

0001eb62 <fcb_init>:
{
   1eb62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb66:	b085      	sub	sp, #20
    if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   1eb68:	6883      	ldr	r3, [r0, #8]
   1eb6a:	2b00      	cmp	r3, #0
   1eb6c:	f000 8082 	beq.w	1ec74 <fcb_init+0x112>
   1eb70:	4606      	mov	r6, r0
   1eb72:	7943      	ldrb	r3, [r0, #5]
   1eb74:	7982      	ldrb	r2, [r0, #6]
   1eb76:	1a9b      	subs	r3, r3, r2
   1eb78:	2b00      	cmp	r3, #0
   1eb7a:	dd7e      	ble.n	1ec7a <fcb_init+0x118>
    struct flash_area *oldest_fap = NULL, *newest_fap = NULL;
   1eb7c:	f04f 0b00 	mov.w	fp, #0
   1eb80:	f8cd b004 	str.w	fp, [sp, #4]
    int oldest = -1, newest = -1;
   1eb84:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1eb88:	46d1      	mov	r9, sl
    int max_align = 1;
   1eb8a:	f04f 0801 	mov.w	r8, #1
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   1eb8e:	465f      	mov	r7, fp
   1eb90:	e00a      	b.n	1eba8 <fcb_init+0x46>
            max_align = flash_area_align(fap);
   1eb92:	4620      	mov	r0, r4
   1eb94:	f7fd fdf2 	bl	1c77c <flash_area_align>
   1eb98:	4680      	mov	r8, r0
   1eb9a:	e012      	b.n	1ebc2 <fcb_init+0x60>
            oldest = newest = fda.fd_id;
   1eb9c:	f8bd 900e 	ldrh.w	r9, [sp, #14]
            oldest_fap = newest_fap = fap;
   1eba0:	46a3      	mov	fp, r4
   1eba2:	9401      	str	r4, [sp, #4]
            oldest = newest = fda.fd_id;
   1eba4:	46ca      	mov	sl, r9
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   1eba6:	3701      	adds	r7, #1
   1eba8:	7973      	ldrb	r3, [r6, #5]
   1ebaa:	42bb      	cmp	r3, r7
   1ebac:	dd29      	ble.n	1ec02 <fcb_init+0xa0>
        fap = &fcb->f_sectors[i];
   1ebae:	68b4      	ldr	r4, [r6, #8]
   1ebb0:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   1ebb4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
        align = flash_area_align(fap);
   1ebb8:	4620      	mov	r0, r4
   1ebba:	f7fd fddf 	bl	1c77c <flash_area_align>
        if (align > max_align) {
   1ebbe:	4580      	cmp	r8, r0
   1ebc0:	dbe7      	blt.n	1eb92 <fcb_init+0x30>
        rc = fcb_sector_hdr_read(fcb, fap, &fda);
   1ebc2:	aa02      	add	r2, sp, #8
   1ebc4:	4621      	mov	r1, r4
   1ebc6:	4630      	mov	r0, r6
   1ebc8:	f7ff ffa4 	bl	1eb14 <fcb_sector_hdr_read>
        if (rc < 0) {
   1ebcc:	1e05      	subs	r5, r0, #0
   1ebce:	db3b      	blt.n	1ec48 <fcb_init+0xe6>
        if (rc == 0) {
   1ebd0:	2d00      	cmp	r5, #0
   1ebd2:	d0e8      	beq.n	1eba6 <fcb_init+0x44>
        if (oldest < 0) {
   1ebd4:	f1b9 0f00 	cmp.w	r9, #0
   1ebd8:	dbe0      	blt.n	1eb9c <fcb_init+0x3a>
        if (FCB_ID_GT(fda.fd_id, newest)) {
   1ebda:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ebde:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
   1ebe2:	fa0f f38a 	sxth.w	r3, sl
   1ebe6:	1ad3      	subs	r3, r2, r3
   1ebe8:	2b00      	cmp	r3, #0
   1ebea:	dd02      	ble.n	1ebf2 <fcb_init+0x90>
            newest = fda.fd_id;
   1ebec:	468a      	mov	sl, r1
            newest_fap = fap;
   1ebee:	46a3      	mov	fp, r4
   1ebf0:	e7d9      	b.n	1eba6 <fcb_init+0x44>
        } else if (FCB_ID_GT(oldest, fda.fd_id)) {
   1ebf2:	fa0f f389 	sxth.w	r3, r9
   1ebf6:	1a9a      	subs	r2, r3, r2
   1ebf8:	2a00      	cmp	r2, #0
   1ebfa:	ddd4      	ble.n	1eba6 <fcb_init+0x44>
            oldest = fda.fd_id;
   1ebfc:	4689      	mov	r9, r1
            oldest_fap = fap;
   1ebfe:	9401      	str	r4, [sp, #4]
   1ec00:	e7d1      	b.n	1eba6 <fcb_init+0x44>
    if (oldest < 0) {
   1ec02:	f1b9 0f00 	cmp.w	r9, #0
   1ec06:	db23      	blt.n	1ec50 <fcb_init+0xee>
    fcb->f_align = max_align;
   1ec08:	fa5f f888 	uxtb.w	r8, r8
   1ec0c:	f886 802e 	strb.w	r8, [r6, #46]	; 0x2e
    fcb->f_oldest = oldest_fap;
   1ec10:	9b01      	ldr	r3, [sp, #4]
   1ec12:	61b3      	str	r3, [r6, #24]
    fcb->f_active.fe_area = newest_fap;
   1ec14:	f8c6 b01c 	str.w	fp, [r6, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   1ec18:	2308      	movs	r3, #8
   1ec1a:	6233      	str	r3, [r6, #32]
    fcb->f_active_id = newest;
   1ec1c:	f8a6 a02c 	strh.w	sl, [r6, #44]	; 0x2c
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   1ec20:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
   1ec24:	ea18 0505 	ands.w	r5, r8, r5
   1ec28:	d11e      	bne.n	1ec68 <fcb_init+0x106>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   1ec2a:	f106 011c 	add.w	r1, r6, #28
   1ec2e:	4630      	mov	r0, r6
   1ec30:	f000 f984 	bl	1ef3c <fcb_getnext_in_area>
        if (rc == FCB_ERR_NOVAR) {
   1ec34:	f110 0f03 	cmn.w	r0, #3
   1ec38:	d002      	beq.n	1ec40 <fcb_init+0xde>
        if (rc != 0) {
   1ec3a:	2800      	cmp	r0, #0
   1ec3c:	d0f5      	beq.n	1ec2a <fcb_init+0xc8>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   1ec3e:	4605      	mov	r5, r0
    os_mutex_init(&fcb->f_mtx);
   1ec40:	f106 000c 	add.w	r0, r6, #12
   1ec44:	f7eb fe84 	bl	a950 <os_mutex_init>
}
   1ec48:	4628      	mov	r0, r5
   1ec4a:	b005      	add	sp, #20
   1ec4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   1ec50:	68b3      	ldr	r3, [r6, #8]
   1ec52:	461c      	mov	r4, r3
   1ec54:	9301      	str	r3, [sp, #4]
        rc = fcb_sector_hdr_init(fcb, oldest_fap, 0);
   1ec56:	2200      	movs	r2, #0
   1ec58:	4619      	mov	r1, r3
   1ec5a:	4630      	mov	r0, r6
   1ec5c:	f7ff ff40 	bl	1eae0 <fcb_sector_hdr_init>
        if (rc) {
   1ec60:	4682      	mov	sl, r0
   1ec62:	b968      	cbnz	r0, 1ec80 <fcb_init+0x11e>
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   1ec64:	46a3      	mov	fp, r4
   1ec66:	e7cf      	b.n	1ec08 <fcb_init+0xa6>
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   1ec68:	2300      	movs	r3, #0
   1ec6a:	461a      	mov	r2, r3
   1ec6c:	4619      	mov	r1, r3
   1ec6e:	4618      	mov	r0, r3
   1ec70:	f7ea f970 	bl	8f54 <__assert_func>
        return FCB_ERR_ARGS;
   1ec74:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ec78:	e7e6      	b.n	1ec48 <fcb_init+0xe6>
   1ec7a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ec7e:	e7e3      	b.n	1ec48 <fcb_init+0xe6>
            return rc;
   1ec80:	4605      	mov	r5, r0
   1ec82:	e7e1      	b.n	1ec48 <fcb_init+0xe6>

0001ec84 <fcb_new_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

static struct flash_area *
fcb_new_area(struct fcb *fcb, int cnt)
{
   1ec84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec86:	4605      	mov	r5, r0
   1ec88:	460f      	mov	r7, r1
    struct flash_area *rfa;
    int i;

    rfa = NULL;
    i = 0;
    fa = fcb->f_active.fe_area;
   1ec8a:	69c1      	ldr	r1, [r0, #28]
    i = 0;
   1ec8c:	2400      	movs	r4, #0
    rfa = NULL;
   1ec8e:	4626      	mov	r6, r4
   1ec90:	e006      	b.n	1eca0 <fcb_new_area+0x1c>
    do {
        fa = fcb_getnext_area(fcb, fa);
        if (!rfa) {
            rfa = fa;
        }
        if (fa == fcb->f_oldest) {
   1ec92:	69ab      	ldr	r3, [r5, #24]
   1ec94:	428b      	cmp	r3, r1
   1ec96:	d00b      	beq.n	1ecb0 <fcb_new_area+0x2c>
            return NULL;
        }
    } while (i++ < cnt);
   1ec98:	1c63      	adds	r3, r4, #1
   1ec9a:	42bc      	cmp	r4, r7
   1ec9c:	da09      	bge.n	1ecb2 <fcb_new_area+0x2e>
   1ec9e:	461c      	mov	r4, r3
        fa = fcb_getnext_area(fcb, fa);
   1eca0:	4628      	mov	r0, r5
   1eca2:	f000 f96f 	bl	1ef84 <fcb_getnext_area>
   1eca6:	4601      	mov	r1, r0
        if (!rfa) {
   1eca8:	2e00      	cmp	r6, #0
   1ecaa:	d1f2      	bne.n	1ec92 <fcb_new_area+0xe>
            rfa = fa;
   1ecac:	4606      	mov	r6, r0
   1ecae:	e7f0      	b.n	1ec92 <fcb_new_area+0xe>
            return NULL;
   1ecb0:	2600      	movs	r6, #0
    return rfa;
}
   1ecb2:	4630      	mov	r0, r6
   1ecb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ecb6 <fcb_append_to_scratch>:
/*
 * Take one of the scratch blocks into use, if at all possible.
 */
int
fcb_append_to_scratch(struct fcb *fcb)
{
   1ecb6:	b538      	push	{r3, r4, r5, lr}
   1ecb8:	4604      	mov	r4, r0
    struct flash_area *fa;
    int rc;

    fa = fcb_new_area(fcb, 0);
   1ecba:	2100      	movs	r1, #0
   1ecbc:	f7ff ffe2 	bl	1ec84 <fcb_new_area>
    if (!fa) {
   1ecc0:	b178      	cbz	r0, 1ece2 <fcb_append_to_scratch+0x2c>
   1ecc2:	4605      	mov	r5, r0
        return FCB_ERR_NOSPACE;
    }
    rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   1ecc4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   1ecc6:	3201      	adds	r2, #1
   1ecc8:	b292      	uxth	r2, r2
   1ecca:	4601      	mov	r1, r0
   1eccc:	4620      	mov	r0, r4
   1ecce:	f7ff ff07 	bl	1eae0 <fcb_sector_hdr_init>
    if (rc) {
   1ecd2:	b928      	cbnz	r0, 1ece0 <fcb_append_to_scratch+0x2a>
        return rc;
    }
    fcb->f_active.fe_area = fa;
   1ecd4:	61e5      	str	r5, [r4, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   1ecd6:	2308      	movs	r3, #8
   1ecd8:	6223      	str	r3, [r4, #32]
    fcb->f_active_id++;
   1ecda:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1ecdc:	3301      	adds	r3, #1
   1ecde:	85a3      	strh	r3, [r4, #44]	; 0x2c
    return FCB_OK;
}
   1ece0:	bd38      	pop	{r3, r4, r5, pc}
        return FCB_ERR_NOSPACE;
   1ece2:	f06f 0003 	mvn.w	r0, #3
   1ece6:	e7fb      	b.n	1ece0 <fcb_append_to_scratch+0x2a>

0001ece8 <fcb_append>:

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   1ece8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ecec:	b082      	sub	sp, #8
   1ecee:	4605      	mov	r5, r0
   1ecf0:	460c      	mov	r4, r1
   1ecf2:	4617      	mov	r7, r2
    struct flash_area *fa;
    uint8_t tmp_str[2];
    int cnt;
    int rc;

    cnt = fcb_put_len(tmp_str, len);
   1ecf4:	a801      	add	r0, sp, #4
   1ecf6:	f7ff fed0 	bl	1ea9a <fcb_put_len>
    if (cnt < 0) {
   1ecfa:	1e06      	subs	r6, r0, #0
   1ecfc:	db58      	blt.n	1edb0 <fcb_append+0xc8>
int fcb_get_len(uint8_t *buf, uint16_t *len);

static inline int
fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
    if (fcb->f_align <= 1) {
   1ecfe:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1ed02:	2b01      	cmp	r3, #1
   1ed04:	d933      	bls.n	1ed6e <fcb_append+0x86>
        return len;
    }
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1ed06:	1e58      	subs	r0, r3, #1
   1ed08:	fa10 f686 	uxtah	r6, r0, r6
   1ed0c:	4258      	negs	r0, r3
   1ed0e:	4006      	ands	r6, r0
    if (fcb->f_align <= 1) {
   1ed10:	2b01      	cmp	r3, #1
   1ed12:	d903      	bls.n	1ed1c <fcb_append+0x34>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1ed14:	1e59      	subs	r1, r3, #1
   1ed16:	440c      	add	r4, r1
   1ed18:	4259      	negs	r1, r3
   1ed1a:	400c      	ands	r4, r1
        return cnt;
    }
    cnt = fcb_len_in_flash(fcb, cnt);
    len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   1ed1c:	b2a1      	uxth	r1, r4
    if (fcb->f_align <= 1) {
   1ed1e:	2b01      	cmp	r3, #1
   1ed20:	d927      	bls.n	1ed72 <fcb_append+0x8a>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1ed22:	425c      	negs	r4, r3
   1ed24:	401c      	ands	r4, r3
   1ed26:	440c      	add	r4, r1
   1ed28:	b2a4      	uxth	r4, r4

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1ed2a:	f105 080c 	add.w	r8, r5, #12
   1ed2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ed32:	4640      	mov	r0, r8
   1ed34:	f7eb fe72 	bl	aa1c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   1ed38:	b108      	cbz	r0, 1ed3e <fcb_append+0x56>
   1ed3a:	2809      	cmp	r0, #9
   1ed3c:	d14e      	bne.n	1eddc <fcb_append+0xf4>
        return FCB_ERR_ARGS;
    }
    active = &fcb->f_active;
    if (active->fe_elem_off + len + cnt > active->fe_area->fa_size) {
   1ed3e:	6a2b      	ldr	r3, [r5, #32]
   1ed40:	4423      	add	r3, r4
   1ed42:	46b1      	mov	r9, r6
   1ed44:	441e      	add	r6, r3
   1ed46:	69eb      	ldr	r3, [r5, #28]
   1ed48:	689b      	ldr	r3, [r3, #8]
   1ed4a:	429e      	cmp	r6, r3
   1ed4c:	d923      	bls.n	1ed96 <fcb_append+0xae>
        fa = fcb_new_area(fcb, fcb->f_scratch_cnt);
   1ed4e:	79a9      	ldrb	r1, [r5, #6]
   1ed50:	4628      	mov	r0, r5
   1ed52:	f7ff ff97 	bl	1ec84 <fcb_new_area>
        if (!fa || (fa->fa_size <
   1ed56:	4682      	mov	sl, r0
   1ed58:	2800      	cmp	r0, #0
   1ed5a:	d03c      	beq.n	1edd6 <fcb_append+0xee>
   1ed5c:	6882      	ldr	r2, [r0, #8]
            sizeof(struct fcb_disk_area) + len + cnt)) {
   1ed5e:	eb04 0309 	add.w	r3, r4, r9
   1ed62:	3308      	adds	r3, #8
        if (!fa || (fa->fa_size <
   1ed64:	429a      	cmp	r2, r3
   1ed66:	d206      	bcs.n	1ed76 <fcb_append+0x8e>
            rc = FCB_ERR_NOSPACE;
   1ed68:	f06f 0603 	mvn.w	r6, #3
   1ed6c:	e01d      	b.n	1edaa <fcb_append+0xc2>
        return len;
   1ed6e:	b2b6      	uxth	r6, r6
   1ed70:	e7ce      	b.n	1ed10 <fcb_append+0x28>
   1ed72:	2401      	movs	r4, #1
   1ed74:	e7d7      	b.n	1ed26 <fcb_append+0x3e>
            goto err;
        }
        rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   1ed76:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
   1ed78:	3201      	adds	r2, #1
   1ed7a:	b292      	uxth	r2, r2
   1ed7c:	4601      	mov	r1, r0
   1ed7e:	4628      	mov	r0, r5
   1ed80:	f7ff feae 	bl	1eae0 <fcb_sector_hdr_init>
        if (rc) {
   1ed84:	4606      	mov	r6, r0
   1ed86:	b980      	cbnz	r0, 1edaa <fcb_append+0xc2>
            goto err;
        }
        fcb->f_active.fe_area = fa;
   1ed88:	f8c5 a01c 	str.w	sl, [r5, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   1ed8c:	2308      	movs	r3, #8
   1ed8e:	622b      	str	r3, [r5, #32]
        fcb->f_active_id++;
   1ed90:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   1ed92:	3301      	adds	r3, #1
   1ed94:	85ab      	strh	r3, [r5, #44]	; 0x2c
    }

    rc = flash_area_write(active->fe_area, active->fe_elem_off, tmp_str, cnt);
   1ed96:	464b      	mov	r3, r9
   1ed98:	aa01      	add	r2, sp, #4
   1ed9a:	6a29      	ldr	r1, [r5, #32]
   1ed9c:	69e8      	ldr	r0, [r5, #28]
   1ed9e:	f7fd fcc5 	bl	1c72c <flash_area_write>
    if (rc) {
   1eda2:	4606      	mov	r6, r0
   1eda4:	b140      	cbz	r0, 1edb8 <fcb_append+0xd0>
        rc = FCB_ERR_FLASH;
   1eda6:	f06f 0601 	mvn.w	r6, #1

    os_mutex_release(&fcb->f_mtx);

    return FCB_OK;
err:
    os_mutex_release(&fcb->f_mtx);
   1edaa:	4640      	mov	r0, r8
   1edac:	f7eb fdda 	bl	a964 <os_mutex_release>
    return rc;
}
   1edb0:	4630      	mov	r0, r6
   1edb2:	b002      	add	sp, #8
   1edb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    append_loc->fe_area = active->fe_area;
   1edb8:	69eb      	ldr	r3, [r5, #28]
   1edba:	603b      	str	r3, [r7, #0]
    append_loc->fe_elem_off = active->fe_elem_off;
   1edbc:	6a2b      	ldr	r3, [r5, #32]
   1edbe:	607b      	str	r3, [r7, #4]
    append_loc->fe_data_off = active->fe_elem_off + cnt;
   1edc0:	444b      	add	r3, r9
   1edc2:	60bb      	str	r3, [r7, #8]
    active->fe_elem_off = append_loc->fe_data_off + len;
   1edc4:	4423      	add	r3, r4
   1edc6:	622b      	str	r3, [r5, #32]
    active->fe_data_off = append_loc->fe_data_off;
   1edc8:	68bb      	ldr	r3, [r7, #8]
   1edca:	626b      	str	r3, [r5, #36]	; 0x24
    active->fe_data_len = len;
   1edcc:	852c      	strh	r4, [r5, #40]	; 0x28
    os_mutex_release(&fcb->f_mtx);
   1edce:	4640      	mov	r0, r8
   1edd0:	f7eb fdc8 	bl	a964 <os_mutex_release>
    return FCB_OK;
   1edd4:	e7ec      	b.n	1edb0 <fcb_append+0xc8>
            rc = FCB_ERR_NOSPACE;
   1edd6:	f06f 0603 	mvn.w	r6, #3
   1edda:	e7e6      	b.n	1edaa <fcb_append+0xc2>
        return FCB_ERR_ARGS;
   1eddc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1ede0:	e7e6      	b.n	1edb0 <fcb_append+0xc8>

0001ede2 <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   1ede2:	b530      	push	{r4, r5, lr}
   1ede4:	b083      	sub	sp, #12
   1ede6:	4605      	mov	r5, r0
   1ede8:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   1edea:	f10d 0207 	add.w	r2, sp, #7
   1edee:	f000 f818 	bl	1ee22 <fcb_elem_crc8>
    if (rc) {
   1edf2:	b988      	cbnz	r0, 1ee18 <fcb_append_finish+0x36>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   1edf4:	68a0      	ldr	r0, [r4, #8]
   1edf6:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   1edf8:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1edfc:	2b01      	cmp	r3, #1
   1edfe:	d903      	bls.n	1ee08 <fcb_append_finish+0x26>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1ee00:	1e5a      	subs	r2, r3, #1
   1ee02:	4411      	add	r1, r2
   1ee04:	425b      	negs	r3, r3
   1ee06:	4019      	ands	r1, r3

    rc = flash_area_write(loc->fe_area, off, &crc8, sizeof(crc8));
   1ee08:	2301      	movs	r3, #1
   1ee0a:	f10d 0207 	add.w	r2, sp, #7
   1ee0e:	4401      	add	r1, r0
   1ee10:	6820      	ldr	r0, [r4, #0]
   1ee12:	f7fd fc8b 	bl	1c72c <flash_area_write>
    if (rc) {
   1ee16:	b908      	cbnz	r0, 1ee1c <fcb_append_finish+0x3a>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   1ee18:	b003      	add	sp, #12
   1ee1a:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   1ee1c:	f06f 0001 	mvn.w	r0, #1
   1ee20:	e7fa      	b.n	1ee18 <fcb_append_finish+0x36>

0001ee22 <fcb_elem_crc8>:
 * Given offset in flash area, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   1ee22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ee26:	b08b      	sub	sp, #44	; 0x2c
   1ee28:	4605      	mov	r5, r0
   1ee2a:	4688      	mov	r8, r1
   1ee2c:	4691      	mov	r9, r2
    uint16_t len;
    uint32_t off;
    uint32_t end;
    int rc;

    if (loc->fe_elem_off + 2 > loc->fe_area->fa_size) {
   1ee2e:	6849      	ldr	r1, [r1, #4]
   1ee30:	1c8a      	adds	r2, r1, #2
   1ee32:	f8d8 0000 	ldr.w	r0, [r8]
   1ee36:	6883      	ldr	r3, [r0, #8]
   1ee38:	429a      	cmp	r2, r3
   1ee3a:	d84a      	bhi.n	1eed2 <fcb_elem_crc8+0xb0>
        return FCB_ERR_NOVAR;
    }
    rc = flash_area_read_is_empty(loc->fe_area, loc->fe_elem_off, tmp_str, 2);
   1ee3c:	2302      	movs	r3, #2
   1ee3e:	aa02      	add	r2, sp, #8
   1ee40:	f7fd fcb9 	bl	1c7b6 <flash_area_read_is_empty>
    if (rc < 0) {
   1ee44:	1e03      	subs	r3, r0, #0
   1ee46:	db47      	blt.n	1eed8 <fcb_elem_crc8+0xb6>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   1ee48:	2b01      	cmp	r3, #1
   1ee4a:	d048      	beq.n	1eede <fcb_elem_crc8+0xbc>
        return FCB_ERR_NOVAR;
    }

    cnt = fcb_get_len(tmp_str, &len);
   1ee4c:	f10d 0106 	add.w	r1, sp, #6
   1ee50:	a802      	add	r0, sp, #8
   1ee52:	f7ff fe35 	bl	1eac0 <fcb_get_len>
   1ee56:	4604      	mov	r4, r0
    loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   1ee58:	f8d8 1004 	ldr.w	r1, [r8, #4]
    if (fcb->f_align <= 1) {
   1ee5c:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1ee60:	2b01      	cmp	r3, #1
   1ee62:	d918      	bls.n	1ee96 <fcb_elem_crc8+0x74>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1ee64:	1e5a      	subs	r2, r3, #1
   1ee66:	fa12 f280 	uxtah	r2, r2, r0
   1ee6a:	425b      	negs	r3, r3
   1ee6c:	4013      	ands	r3, r2
   1ee6e:	440b      	add	r3, r1
   1ee70:	f8c8 3008 	str.w	r3, [r8, #8]
    loc->fe_data_len = len;
   1ee74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ee78:	f8a8 300c 	strh.w	r3, [r8, #12]

    crc8 = crc8_init();
   1ee7c:	f000 fdec 	bl	1fa58 <crc8_init>
    crc8 = crc8_calc(crc8, tmp_str, cnt);
   1ee80:	4622      	mov	r2, r4
   1ee82:	a902      	add	r1, sp, #8
   1ee84:	f000 fdea 	bl	1fa5c <crc8_calc>
   1ee88:	4606      	mov	r6, r0

    off = loc->fe_data_off;
   1ee8a:	f8d8 5008 	ldr.w	r5, [r8, #8]
    end = loc->fe_data_off + len;
   1ee8e:	f8bd 7006 	ldrh.w	r7, [sp, #6]
   1ee92:	442f      	add	r7, r5
    for (; off < end; off += blk_sz) {
   1ee94:	e010      	b.n	1eeb8 <fcb_elem_crc8+0x96>
        return len;
   1ee96:	b283      	uxth	r3, r0
   1ee98:	e7e9      	b.n	1ee6e <fcb_elem_crc8+0x4c>
        blk_sz = end - off;
        if (blk_sz > sizeof(tmp_str)) {
            blk_sz = sizeof(tmp_str);
        }

        rc = flash_area_read(loc->fe_area, off, tmp_str, blk_sz);
   1ee9a:	4623      	mov	r3, r4
   1ee9c:	aa02      	add	r2, sp, #8
   1ee9e:	4629      	mov	r1, r5
   1eea0:	f8d8 0000 	ldr.w	r0, [r8]
   1eea4:	f7fd fc2e 	bl	1c704 <flash_area_read>
        if (rc) {
   1eea8:	b9e0      	cbnz	r0, 1eee4 <fcb_elem_crc8+0xc2>
            return FCB_ERR_FLASH;
        }
        crc8 = crc8_calc(crc8, tmp_str, blk_sz);
   1eeaa:	4622      	mov	r2, r4
   1eeac:	a902      	add	r1, sp, #8
   1eeae:	4630      	mov	r0, r6
   1eeb0:	f000 fdd4 	bl	1fa5c <crc8_calc>
   1eeb4:	4606      	mov	r6, r0
    for (; off < end; off += blk_sz) {
   1eeb6:	4425      	add	r5, r4
   1eeb8:	42bd      	cmp	r5, r7
   1eeba:	d204      	bcs.n	1eec6 <fcb_elem_crc8+0xa4>
        blk_sz = end - off;
   1eebc:	1b7c      	subs	r4, r7, r5
        if (blk_sz > sizeof(tmp_str)) {
   1eebe:	2c20      	cmp	r4, #32
   1eec0:	d9eb      	bls.n	1ee9a <fcb_elem_crc8+0x78>
            blk_sz = sizeof(tmp_str);
   1eec2:	2420      	movs	r4, #32
   1eec4:	e7e9      	b.n	1ee9a <fcb_elem_crc8+0x78>
    }
    *c8p = crc8;
   1eec6:	f889 6000 	strb.w	r6, [r9]

    return 0;
   1eeca:	2000      	movs	r0, #0
}
   1eecc:	b00b      	add	sp, #44	; 0x2c
   1eece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return FCB_ERR_NOVAR;
   1eed2:	f06f 0002 	mvn.w	r0, #2
   1eed6:	e7f9      	b.n	1eecc <fcb_elem_crc8+0xaa>
        return FCB_ERR_FLASH;
   1eed8:	f06f 0001 	mvn.w	r0, #1
   1eedc:	e7f6      	b.n	1eecc <fcb_elem_crc8+0xaa>
        return FCB_ERR_NOVAR;
   1eede:	f06f 0002 	mvn.w	r0, #2
   1eee2:	e7f3      	b.n	1eecc <fcb_elem_crc8+0xaa>
            return FCB_ERR_FLASH;
   1eee4:	f06f 0001 	mvn.w	r0, #1
   1eee8:	e7f0      	b.n	1eecc <fcb_elem_crc8+0xaa>

0001eeea <fcb_elem_info>:

int
fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   1eeea:	b530      	push	{r4, r5, lr}
   1eeec:	b083      	sub	sp, #12
   1eeee:	4605      	mov	r5, r0
   1eef0:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint8_t fl_crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   1eef2:	f10d 0207 	add.w	r2, sp, #7
   1eef6:	f7ff ff94 	bl	1ee22 <fcb_elem_crc8>
    if (rc) {
   1eefa:	b9b8      	cbnz	r0, 1ef2c <fcb_elem_info+0x42>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   1eefc:	68a0      	ldr	r0, [r4, #8]
   1eefe:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   1ef00:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1ef04:	2b01      	cmp	r3, #1
   1ef06:	d903      	bls.n	1ef10 <fcb_elem_info+0x26>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1ef08:	1e5a      	subs	r2, r3, #1
   1ef0a:	4411      	add	r1, r2
   1ef0c:	425b      	negs	r3, r3
   1ef0e:	4019      	ands	r1, r3

    rc = flash_area_read(loc->fe_area, off, &fl_crc8, sizeof(fl_crc8));
   1ef10:	2301      	movs	r3, #1
   1ef12:	f10d 0206 	add.w	r2, sp, #6
   1ef16:	4401      	add	r1, r0
   1ef18:	6820      	ldr	r0, [r4, #0]
   1ef1a:	f7fd fbf3 	bl	1c704 <flash_area_read>
    if (rc) {
   1ef1e:	b938      	cbnz	r0, 1ef30 <fcb_elem_info+0x46>
        return FCB_ERR_FLASH;
    }

    if (fl_crc8 != crc8) {
   1ef20:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1ef24:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ef28:	429a      	cmp	r2, r3
   1ef2a:	d104      	bne.n	1ef36 <fcb_elem_info+0x4c>
        return FCB_ERR_CRC;
    }
    return 0;
}
   1ef2c:	b003      	add	sp, #12
   1ef2e:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   1ef30:	f06f 0001 	mvn.w	r0, #1
   1ef34:	e7fa      	b.n	1ef2c <fcb_elem_info+0x42>
        return FCB_ERR_CRC;
   1ef36:	f06f 0005 	mvn.w	r0, #5
   1ef3a:	e7f7      	b.n	1ef2c <fcb_elem_info+0x42>

0001ef3c <fcb_getnext_in_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_getnext_in_area(struct fcb *fcb, struct fcb_entry *loc)
{
   1ef3c:	b570      	push	{r4, r5, r6, lr}
   1ef3e:	4606      	mov	r6, r0
   1ef40:	460d      	mov	r5, r1
    int rc;

    rc = fcb_elem_info(fcb, loc);
   1ef42:	f7ff ffd2 	bl	1eeea <fcb_elem_info>
    if (rc == 0 || rc == FCB_ERR_CRC) {
   1ef46:	b170      	cbz	r0, 1ef66 <fcb_getnext_in_area+0x2a>
   1ef48:	f110 0f06 	cmn.w	r0, #6
   1ef4c:	d00b      	beq.n	1ef66 <fcb_getnext_in_area+0x2a>
                break;
            }
        } while (rc == FCB_ERR_CRC);
    }
    return rc;
}
   1ef4e:	bd70      	pop	{r4, r5, r6, pc}
   1ef50:	4259      	negs	r1, r3
   1ef52:	400b      	ands	r3, r1
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   1ef54:	4413      	add	r3, r2
            loc->fe_elem_off = loc->fe_data_off +
   1ef56:	606b      	str	r3, [r5, #4]
            rc = fcb_elem_info(fcb, loc);
   1ef58:	4629      	mov	r1, r5
   1ef5a:	4630      	mov	r0, r6
   1ef5c:	f7ff ffc5 	bl	1eeea <fcb_elem_info>
            if (rc != FCB_ERR_CRC) {
   1ef60:	f110 0f06 	cmn.w	r0, #6
   1ef64:	d1f3      	bne.n	1ef4e <fcb_getnext_in_area+0x12>
            loc->fe_elem_off = loc->fe_data_off +
   1ef66:	68ac      	ldr	r4, [r5, #8]
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   1ef68:	89aa      	ldrh	r2, [r5, #12]
    if (fcb->f_align <= 1) {
   1ef6a:	f896 302e 	ldrb.w	r3, [r6, #46]	; 0x2e
   1ef6e:	2b01      	cmp	r3, #1
   1ef70:	d903      	bls.n	1ef7a <fcb_getnext_in_area+0x3e>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1ef72:	1e59      	subs	r1, r3, #1
   1ef74:	440a      	add	r2, r1
   1ef76:	4259      	negs	r1, r3
   1ef78:	400a      	ands	r2, r1
            loc->fe_elem_off = loc->fe_data_off +
   1ef7a:	4422      	add	r2, r4
    if (fcb->f_align <= 1) {
   1ef7c:	2b01      	cmp	r3, #1
   1ef7e:	d8e7      	bhi.n	1ef50 <fcb_getnext_in_area+0x14>
        return len;
   1ef80:	2301      	movs	r3, #1
   1ef82:	e7e7      	b.n	1ef54 <fcb_getnext_in_area+0x18>

0001ef84 <fcb_getnext_area>:

struct flash_area *
fcb_getnext_area(struct fcb *fcb, struct flash_area *fap)
{
   1ef84:	4603      	mov	r3, r0
    fap++;
   1ef86:	310c      	adds	r1, #12
    if (fap >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   1ef88:	6880      	ldr	r0, [r0, #8]
   1ef8a:	795b      	ldrb	r3, [r3, #5]
   1ef8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1ef90:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1ef94:	428b      	cmp	r3, r1
   1ef96:	d900      	bls.n	1ef9a <fcb_getnext_area+0x16>
    fap++;
   1ef98:	4608      	mov	r0, r1
        fap = &fcb->f_sectors[0];
    }
    return fap;
}
   1ef9a:	4770      	bx	lr

0001ef9c <fcb_getnext_nolock>:

int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
   1ef9c:	b538      	push	{r3, r4, r5, lr}
   1ef9e:	4605      	mov	r5, r0
   1efa0:	460c      	mov	r4, r1
    int rc;

    if (loc->fe_area == NULL) {
   1efa2:	680b      	ldr	r3, [r1, #0]
   1efa4:	b313      	cbz	r3, 1efec <fcb_getnext_nolock+0x50>
        /*
         * Find the first one we have in flash.
         */
        loc->fe_area = fcb->f_oldest;
    }
    if (loc->fe_elem_off == 0) {
   1efa6:	6863      	ldr	r3, [r4, #4]
   1efa8:	bb1b      	cbnz	r3, 1eff2 <fcb_getnext_nolock+0x56>
        /*
         * If offset is zero, we serve the first entry from the area.
         */
        loc->fe_elem_off = sizeof(struct fcb_disk_area);
   1efaa:	2308      	movs	r3, #8
   1efac:	6063      	str	r3, [r4, #4]
        rc = fcb_elem_info(fcb, loc);
   1efae:	4621      	mov	r1, r4
   1efb0:	4628      	mov	r0, r5
   1efb2:	f7ff ff9a 	bl	1eeea <fcb_elem_info>
   1efb6:	4603      	mov	r3, r0
    } else {
        rc = fcb_getnext_in_area(fcb, loc);
    }
    switch (rc) {
   1efb8:	f113 0f06 	cmn.w	r3, #6
   1efbc:	d01f      	beq.n	1effe <fcb_getnext_nolock+0x62>
   1efbe:	b19b      	cbz	r3, 1efe8 <fcb_getnext_nolock+0x4c>
        if (rc != FCB_ERR_CRC) {
            /*
             * Moving to next sector.
             */
next_sector:
            if (loc->fe_area == fcb->f_active.fe_area) {
   1efc0:	6821      	ldr	r1, [r4, #0]
   1efc2:	69eb      	ldr	r3, [r5, #28]
   1efc4:	4299      	cmp	r1, r3
   1efc6:	d02a      	beq.n	1f01e <fcb_getnext_nolock+0x82>
                return FCB_ERR_NOVAR;
            }
            loc->fe_area = fcb_getnext_area(fcb, loc->fe_area);
   1efc8:	4628      	mov	r0, r5
   1efca:	f7ff ffdb 	bl	1ef84 <fcb_getnext_area>
   1efce:	6020      	str	r0, [r4, #0]
            loc->fe_elem_off = sizeof(struct fcb_disk_area);
   1efd0:	2308      	movs	r3, #8
   1efd2:	6063      	str	r3, [r4, #4]
            rc = fcb_elem_info(fcb, loc);
   1efd4:	4621      	mov	r1, r4
   1efd6:	4628      	mov	r0, r5
   1efd8:	f7ff ff87 	bl	1eeea <fcb_elem_info>
   1efdc:	4603      	mov	r3, r0
            switch (rc) {
   1efde:	f110 0f06 	cmn.w	r0, #6
   1efe2:	d00c      	beq.n	1effe <fcb_getnext_nolock+0x62>
   1efe4:	2800      	cmp	r0, #0
   1efe6:	d1eb      	bne.n	1efc0 <fcb_getnext_nolock+0x24>
            }
        }
    }

    return 0;
}
   1efe8:	4618      	mov	r0, r3
   1efea:	bd38      	pop	{r3, r4, r5, pc}
        loc->fe_area = fcb->f_oldest;
   1efec:	6983      	ldr	r3, [r0, #24]
   1efee:	600b      	str	r3, [r1, #0]
   1eff0:	e7d9      	b.n	1efa6 <fcb_getnext_nolock+0xa>
        rc = fcb_getnext_in_area(fcb, loc);
   1eff2:	4621      	mov	r1, r4
   1eff4:	4628      	mov	r0, r5
   1eff6:	f7ff ffa1 	bl	1ef3c <fcb_getnext_in_area>
   1effa:	4603      	mov	r3, r0
   1effc:	e7dc      	b.n	1efb8 <fcb_getnext_nolock+0x1c>
    while (rc == FCB_ERR_CRC) {
   1effe:	f113 0f06 	cmn.w	r3, #6
   1f002:	d10a      	bne.n	1f01a <fcb_getnext_nolock+0x7e>
        rc = fcb_getnext_in_area(fcb, loc);
   1f004:	4621      	mov	r1, r4
   1f006:	4628      	mov	r0, r5
   1f008:	f7ff ff98 	bl	1ef3c <fcb_getnext_in_area>
        if (rc == 0) {
   1f00c:	4603      	mov	r3, r0
   1f00e:	2800      	cmp	r0, #0
   1f010:	d0ea      	beq.n	1efe8 <fcb_getnext_nolock+0x4c>
        if (rc != FCB_ERR_CRC) {
   1f012:	f110 0f06 	cmn.w	r0, #6
   1f016:	d0f2      	beq.n	1effe <fcb_getnext_nolock+0x62>
next_sector:
   1f018:	e7d2      	b.n	1efc0 <fcb_getnext_nolock+0x24>
    return 0;
   1f01a:	2300      	movs	r3, #0
   1f01c:	e7e4      	b.n	1efe8 <fcb_getnext_nolock+0x4c>
                return FCB_ERR_NOVAR;
   1f01e:	f06f 0302 	mvn.w	r3, #2
   1f022:	e7e1      	b.n	1efe8 <fcb_getnext_nolock+0x4c>

0001f024 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   1f024:	b570      	push	{r4, r5, r6, lr}
   1f026:	4604      	mov	r4, r0
   1f028:	460d      	mov	r5, r1
    int rc;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1f02a:	f100 060c 	add.w	r6, r0, #12
   1f02e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f032:	4630      	mov	r0, r6
   1f034:	f7eb fcf2 	bl	aa1c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   1f038:	b108      	cbz	r0, 1f03e <fcb_getnext+0x1a>
   1f03a:	2809      	cmp	r0, #9
   1f03c:	d109      	bne.n	1f052 <fcb_getnext+0x2e>
        return FCB_ERR_ARGS;
    }
    rc = fcb_getnext_nolock(fcb, loc);
   1f03e:	4629      	mov	r1, r5
   1f040:	4620      	mov	r0, r4
   1f042:	f7ff ffab 	bl	1ef9c <fcb_getnext_nolock>
   1f046:	4604      	mov	r4, r0
    os_mutex_release(&fcb->f_mtx);
   1f048:	4630      	mov	r0, r6
   1f04a:	f7eb fc8b 	bl	a964 <os_mutex_release>

    return rc;
}
   1f04e:	4620      	mov	r0, r4
   1f050:	bd70      	pop	{r4, r5, r6, pc}
        return FCB_ERR_ARGS;
   1f052:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1f056:	e7fa      	b.n	1f04e <fcb_getnext+0x2a>

0001f058 <fcb_rotate>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   1f058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f05a:	4604      	mov	r4, r0
    struct flash_area *fap;
    int rc = 0;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1f05c:	f100 050c 	add.w	r5, r0, #12
   1f060:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f064:	4628      	mov	r0, r5
   1f066:	f7eb fcd9 	bl	aa1c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   1f06a:	b108      	cbz	r0, 1f070 <fcb_rotate+0x18>
   1f06c:	2809      	cmp	r0, #9
   1f06e:	d12c      	bne.n	1f0ca <fcb_rotate+0x72>
        return FCB_ERR_ARGS;
    }

    rc = flash_area_erase(fcb->f_oldest, 0, fcb->f_oldest->fa_size);
   1f070:	69a0      	ldr	r0, [r4, #24]
   1f072:	6882      	ldr	r2, [r0, #8]
   1f074:	2100      	movs	r1, #0
   1f076:	f7fd fb6d 	bl	1c754 <flash_area_erase>
    if (rc) {
   1f07a:	4606      	mov	r6, r0
   1f07c:	bb10      	cbnz	r0, 1f0c4 <fcb_rotate+0x6c>
        rc = FCB_ERR_FLASH;
        goto out;
    }
    if (fcb->f_oldest == fcb->f_active.fe_area) {
   1f07e:	69a1      	ldr	r1, [r4, #24]
   1f080:	69e3      	ldr	r3, [r4, #28]
   1f082:	4299      	cmp	r1, r3
   1f084:	d009      	beq.n	1f09a <fcb_rotate+0x42>
        }
        fcb->f_active.fe_area = fap;
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
        fcb->f_active_id++;
    }
    fcb->f_oldest = fcb_getnext_area(fcb, fcb->f_oldest);
   1f086:	69a1      	ldr	r1, [r4, #24]
   1f088:	4620      	mov	r0, r4
   1f08a:	f7ff ff7b 	bl	1ef84 <fcb_getnext_area>
   1f08e:	61a0      	str	r0, [r4, #24]
out:
    os_mutex_release(&fcb->f_mtx);
   1f090:	4628      	mov	r0, r5
   1f092:	f7eb fc67 	bl	a964 <os_mutex_release>
    return rc;
}
   1f096:	4630      	mov	r0, r6
   1f098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        fap = fcb_getnext_area(fcb, fcb->f_oldest);
   1f09a:	4620      	mov	r0, r4
   1f09c:	f7ff ff72 	bl	1ef84 <fcb_getnext_area>
   1f0a0:	4607      	mov	r7, r0
        rc = fcb_sector_hdr_init(fcb, fap, fcb->f_active_id + 1);
   1f0a2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   1f0a4:	3201      	adds	r2, #1
   1f0a6:	b292      	uxth	r2, r2
   1f0a8:	4601      	mov	r1, r0
   1f0aa:	4620      	mov	r0, r4
   1f0ac:	f7ff fd18 	bl	1eae0 <fcb_sector_hdr_init>
        if (rc) {
   1f0b0:	4606      	mov	r6, r0
   1f0b2:	2800      	cmp	r0, #0
   1f0b4:	d1ec      	bne.n	1f090 <fcb_rotate+0x38>
        fcb->f_active.fe_area = fap;
   1f0b6:	61e7      	str	r7, [r4, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   1f0b8:	2308      	movs	r3, #8
   1f0ba:	6223      	str	r3, [r4, #32]
        fcb->f_active_id++;
   1f0bc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1f0be:	3301      	adds	r3, #1
   1f0c0:	85a3      	strh	r3, [r4, #44]	; 0x2c
   1f0c2:	e7e0      	b.n	1f086 <fcb_rotate+0x2e>
        rc = FCB_ERR_FLASH;
   1f0c4:	f06f 0601 	mvn.w	r6, #1
   1f0c8:	e7e2      	b.n	1f090 <fcb_rotate+0x38>
        return FCB_ERR_ARGS;
   1f0ca:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1f0ce:	e7e2      	b.n	1f096 <fcb_rotate+0x3e>

0001f0d0 <fcb_walk>:
 * Call 'cb' for every element in flash circular buffer. If fap is specified,
 * only elements with that flash_area are reported.
 */
int
fcb_walk(struct fcb *fcb, struct flash_area *fap, fcb_walk_cb cb, void *cb_arg)
{
   1f0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f0d4:	b084      	sub	sp, #16
   1f0d6:	4606      	mov	r6, r0
   1f0d8:	460d      	mov	r5, r1
   1f0da:	4617      	mov	r7, r2
   1f0dc:	4698      	mov	r8, r3
    struct fcb_entry loc;
    int rc;

    loc.fe_area = fap;
   1f0de:	9100      	str	r1, [sp, #0]
    loc.fe_elem_off = 0;
   1f0e0:	2300      	movs	r3, #0
   1f0e2:	9301      	str	r3, [sp, #4]

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1f0e4:	f100 040c 	add.w	r4, r0, #12
   1f0e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f0ec:	4620      	mov	r0, r4
   1f0ee:	f7eb fc95 	bl	aa1c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   1f0f2:	b170      	cbz	r0, 1f112 <fcb_walk+0x42>
   1f0f4:	2809      	cmp	r0, #9
   1f0f6:	d00c      	beq.n	1f112 <fcb_walk+0x42>
        return FCB_ERR_ARGS;
   1f0f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f0fc:	e01e      	b.n	1f13c <fcb_walk+0x6c>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
        os_mutex_release(&fcb->f_mtx);
        if (fap && loc.fe_area != fap) {
            return 0;
        }
        rc = cb(&loc, cb_arg);
   1f0fe:	4641      	mov	r1, r8
   1f100:	4668      	mov	r0, sp
   1f102:	47b8      	blx	r7
        if (rc) {
   1f104:	4603      	mov	r3, r0
   1f106:	b9c8      	cbnz	r0, 1f13c <fcb_walk+0x6c>
            return rc;
        }
        os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1f108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f10c:	4620      	mov	r0, r4
   1f10e:	f7eb fc85 	bl	aa1c <os_mutex_pend>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
   1f112:	4669      	mov	r1, sp
   1f114:	4630      	mov	r0, r6
   1f116:	f7ff ff41 	bl	1ef9c <fcb_getnext_nolock>
   1f11a:	f110 0f03 	cmn.w	r0, #3
   1f11e:	d009      	beq.n	1f134 <fcb_walk+0x64>
        os_mutex_release(&fcb->f_mtx);
   1f120:	4620      	mov	r0, r4
   1f122:	f7eb fc1f 	bl	a964 <os_mutex_release>
        if (fap && loc.fe_area != fap) {
   1f126:	2d00      	cmp	r5, #0
   1f128:	d0e9      	beq.n	1f0fe <fcb_walk+0x2e>
   1f12a:	9800      	ldr	r0, [sp, #0]
   1f12c:	42a8      	cmp	r0, r5
   1f12e:	d0e6      	beq.n	1f0fe <fcb_walk+0x2e>
            return 0;
   1f130:	2300      	movs	r3, #0
   1f132:	e003      	b.n	1f13c <fcb_walk+0x6c>
    }
    os_mutex_release(&fcb->f_mtx);
   1f134:	4620      	mov	r0, r4
   1f136:	f7eb fc15 	bl	a964 <os_mutex_release>
    return 0;
   1f13a:	2300      	movs	r3, #0
}
   1f13c:	4618      	mov	r0, r3
   1f13e:	b004      	add	sp, #16
   1f140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f144 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   1f144:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   1f146:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1f148:	b118      	cbz	r0, 1f152 <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
   1f14a:	3801      	subs	r0, #1
   1f14c:	f000 fb60 	bl	1f810 <hal_uart_blocking_tx>
}
   1f150:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   1f152:	2300      	movs	r3, #0
   1f154:	461a      	mov	r2, r3
   1f156:	4619      	mov	r1, r3
   1f158:	4618      	mov	r0, r3
   1f15a:	f7e9 fefb 	bl	8f54 <__assert_func>

0001f15e <uart_hal_start_rx>:
{
   1f15e:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   1f160:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1f162:	b118      	cbz	r0, 1f16c <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
   1f164:	3801      	subs	r0, #1
   1f166:	f000 fb33 	bl	1f7d0 <hal_uart_start_rx>
}
   1f16a:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   1f16c:	2300      	movs	r3, #0
   1f16e:	461a      	mov	r2, r3
   1f170:	4619      	mov	r1, r3
   1f172:	4618      	mov	r0, r3
   1f174:	f7e9 feee 	bl	8f54 <__assert_func>

0001f178 <uart_hal_start_tx>:
{
   1f178:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   1f17a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1f17c:	b118      	cbz	r0, 1f186 <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
   1f17e:	3801      	subs	r0, #1
   1f180:	f000 fafc 	bl	1f77c <hal_uart_start_tx>
}
   1f184:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   1f186:	2300      	movs	r3, #0
   1f188:	461a      	mov	r2, r3
   1f18a:	4619      	mov	r1, r3
   1f18c:	4618      	mov	r0, r3
   1f18e:	f7e9 fee1 	bl	8f54 <__assert_func>

0001f192 <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
   1f192:	b510      	push	{r4, lr}
   1f194:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
   1f196:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
   1f198:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
   1f19c:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
   1f1a0:	9201      	str	r2, [sp, #4]
   1f1a2:	9300      	str	r3, [sp, #0]
   1f1a4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   1f1a8:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
   1f1ac:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1f1ae:	1e60      	subs	r0, r4, #1
   1f1b0:	f000 fb7c 	bl	1f8ac <hal_uart_config>
    if (rc) {
   1f1b4:	b908      	cbnz	r0, 1f1ba <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
   1f1b6:	b002      	add	sp, #8
   1f1b8:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
   1f1ba:	2002      	movs	r0, #2
   1f1bc:	e7fb      	b.n	1f1b6 <uart_hal_resume+0x24>

0001f1be <uart_hal_suspend>:
{
   1f1be:	b570      	push	{r4, r5, r6, lr}
   1f1c0:	4606      	mov	r6, r0
   1f1c2:	460c      	mov	r4, r1
   1f1c4:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
   1f1c6:	f7ea ffa9 	bl	a11c <os_time_get>
   1f1ca:	1a24      	subs	r4, r4, r0
   1f1cc:	2c00      	cmp	r4, #0
   1f1ce:	dc06      	bgt.n	1f1de <uart_hal_suspend+0x20>
   1f1d0:	b13d      	cbz	r5, 1f1e2 <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
   1f1d2:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   1f1d4:	3801      	subs	r0, #1
   1f1d6:	f000 fbe1 	bl	1f99c <hal_uart_close>
    if (rc) {
   1f1da:	b920      	cbnz	r0, 1f1e6 <uart_hal_suspend+0x28>
}
   1f1dc:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   1f1de:	2002      	movs	r0, #2
   1f1e0:	e7fc      	b.n	1f1dc <uart_hal_suspend+0x1e>
   1f1e2:	2002      	movs	r0, #2
   1f1e4:	e7fa      	b.n	1f1dc <uart_hal_suspend+0x1e>
        return OS_EINVAL;
   1f1e6:	2002      	movs	r0, #2
   1f1e8:	e7f8      	b.n	1f1dc <uart_hal_suspend+0x1e>

0001f1ea <uart_hal_close>:
{
   1f1ea:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
   1f1ec:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   1f1ee:	3801      	subs	r0, #1
   1f1f0:	f000 fbd4 	bl	1f99c <hal_uart_close>
    if (rc) {
   1f1f4:	b900      	cbnz	r0, 1f1f8 <uart_hal_close+0xe>
}
   1f1f6:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
   1f1f8:	2002      	movs	r0, #2
   1f1fa:	e7fc      	b.n	1f1f6 <uart_hal_close+0xc>

0001f1fc <uart_hal_open>:
{
   1f1fc:	b550      	push	{r4, r6, lr}
   1f1fe:	b083      	sub	sp, #12
   1f200:	4606      	mov	r6, r0
    assert(dev->ud_priv);
   1f202:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1f204:	2800      	cmp	r0, #0
   1f206:	d02b      	beq.n	1f260 <uart_hal_open+0x64>
   1f208:	4614      	mov	r4, r2
    if (!uc) {
   1f20a:	2a00      	cmp	r2, #0
   1f20c:	d02e      	beq.n	1f26c <uart_hal_open+0x70>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
   1f20e:	7ef3      	ldrb	r3, [r6, #27]
   1f210:	f013 0f02 	tst.w	r3, #2
   1f214:	d12c      	bne.n	1f270 <uart_hal_open+0x74>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
   1f216:	7913      	ldrb	r3, [r2, #4]
   1f218:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
   1f21c:	79d3      	ldrb	r3, [r2, #7]
   1f21e:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
   1f222:	7993      	ldrb	r3, [r2, #6]
   1f224:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
   1f228:	6813      	ldr	r3, [r2, #0]
   1f22a:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
   1f22c:	7953      	ldrb	r3, [r2, #5]
   1f22e:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
   1f232:	6953      	ldr	r3, [r2, #20]
   1f234:	9300      	str	r3, [sp, #0]
   1f236:	68d3      	ldr	r3, [r2, #12]
   1f238:	6912      	ldr	r2, [r2, #16]
   1f23a:	68a1      	ldr	r1, [r4, #8]
   1f23c:	3801      	subs	r0, #1
   1f23e:	f000 fa83 	bl	1f748 <hal_uart_init_cbs>
    if (rc) {
   1f242:	b9c0      	cbnz	r0, 1f276 <uart_hal_open+0x7a>
    return (intptr_t)(dev->ud_priv) - 1;
   1f244:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
   1f246:	79a3      	ldrb	r3, [r4, #6]
   1f248:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
   1f24a:	9201      	str	r2, [sp, #4]
   1f24c:	9300      	str	r3, [sp, #0]
   1f24e:	7963      	ldrb	r3, [r4, #5]
   1f250:	7922      	ldrb	r2, [r4, #4]
   1f252:	6821      	ldr	r1, [r4, #0]
   1f254:	3801      	subs	r0, #1
   1f256:	f000 fb29 	bl	1f8ac <hal_uart_config>
    if (rc) {
   1f25a:	b150      	cbz	r0, 1f272 <uart_hal_open+0x76>
        return OS_EINVAL;
   1f25c:	2002      	movs	r0, #2
   1f25e:	e008      	b.n	1f272 <uart_hal_open+0x76>
    assert(dev->ud_priv);
   1f260:	2300      	movs	r3, #0
   1f262:	461a      	mov	r2, r3
   1f264:	4619      	mov	r1, r3
   1f266:	4618      	mov	r0, r3
   1f268:	f7e9 fe74 	bl	8f54 <__assert_func>
        return OS_EINVAL;
   1f26c:	2002      	movs	r0, #2
   1f26e:	e000      	b.n	1f272 <uart_hal_open+0x76>
        return OS_EBUSY;
   1f270:	200b      	movs	r0, #11
}
   1f272:	b003      	add	sp, #12
   1f274:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
   1f276:	2002      	movs	r0, #2
   1f278:	e7fb      	b.n	1f272 <uart_hal_open+0x76>
	...

0001f27c <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
   1f27c:	b570      	push	{r4, r5, r6, lr}
   1f27e:	4604      	mov	r4, r0
   1f280:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
   1f282:	69c5      	ldr	r5, [r0, #28]
   1f284:	4628      	mov	r0, r5
   1f286:	f7ec ff39 	bl	c0fc <strlen>
   1f28a:	3801      	subs	r0, #1
   1f28c:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((int) ch)) {
   1f28e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1f292:	2b09      	cmp	r3, #9
   1f294:	d816      	bhi.n	1f2c4 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
   1f296:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
   1f29a:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
   1f29c:	4b0a      	ldr	r3, [pc, #40]	; (1f2c8 <uart_hal_init+0x4c>)
   1f29e:	6023      	str	r3, [r4, #0]
   1f2a0:	4b0a      	ldr	r3, [pc, #40]	; (1f2cc <uart_hal_init+0x50>)
   1f2a2:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
   1f2a4:	4b0a      	ldr	r3, [pc, #40]	; (1f2d0 <uart_hal_init+0x54>)
   1f2a6:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
   1f2a8:	4b0a      	ldr	r3, [pc, #40]	; (1f2d4 <uart_hal_init+0x58>)
   1f2aa:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
   1f2ac:	4b0a      	ldr	r3, [pc, #40]	; (1f2d8 <uart_hal_init+0x5c>)
   1f2ae:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
   1f2b0:	4b0a      	ldr	r3, [pc, #40]	; (1f2dc <uart_hal_init+0x60>)
   1f2b2:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
   1f2b4:	4b0a      	ldr	r3, [pc, #40]	; (1f2e0 <uart_hal_init+0x64>)
   1f2b6:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
   1f2b8:	4631      	mov	r1, r6
   1f2ba:	3830      	subs	r0, #48	; 0x30
   1f2bc:	f000 fad4 	bl	1f868 <hal_uart_init>

    return OS_OK;
   1f2c0:	2000      	movs	r0, #0
}
   1f2c2:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   1f2c4:	2002      	movs	r0, #2
   1f2c6:	e7fc      	b.n	1f2c2 <uart_hal_init+0x46>
   1f2c8:	0001f1fd 	.word	0x0001f1fd
   1f2cc:	0001f1eb 	.word	0x0001f1eb
   1f2d0:	0001f1bf 	.word	0x0001f1bf
   1f2d4:	0001f193 	.word	0x0001f193
   1f2d8:	0001f179 	.word	0x0001f179
   1f2dc:	0001f15f 	.word	0x0001f15f
   1f2e0:	0001f145 	.word	0x0001f145

0001f2e4 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1f2e4:	6843      	ldr	r3, [r0, #4]
   1f2e6:	428b      	cmp	r3, r1
   1f2e8:	d805      	bhi.n	1f2f6 <hal_flash_check_addr+0x12>
   1f2ea:	6882      	ldr	r2, [r0, #8]
   1f2ec:	4413      	add	r3, r2
   1f2ee:	428b      	cmp	r3, r1
   1f2f0:	d304      	bcc.n	1f2fc <hal_flash_check_addr+0x18>
        return SYS_EINVAL;
    }
    return 0;
   1f2f2:	2000      	movs	r0, #0
   1f2f4:	4770      	bx	lr
        return SYS_EINVAL;
   1f2f6:	f06f 0001 	mvn.w	r0, #1
   1f2fa:	4770      	bx	lr
   1f2fc:	f06f 0001 	mvn.w	r0, #1
}
   1f300:	4770      	bx	lr

0001f302 <hal_flash_init>:
{
   1f302:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1f304:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1f306:	462c      	mov	r4, r5
   1f308:	e001      	b.n	1f30e <hal_flash_init+0xc>
   1f30a:	3401      	adds	r4, #1
   1f30c:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1f30e:	4620      	mov	r0, r4
   1f310:	f7f2 ff18 	bl	12144 <hal_bsp_flash_dev>
        if (!hf) {
   1f314:	b138      	cbz	r0, 1f326 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1f316:	6802      	ldr	r2, [r0, #0]
   1f318:	6952      	ldr	r2, [r2, #20]
   1f31a:	4790      	blx	r2
   1f31c:	2800      	cmp	r0, #0
   1f31e:	d0f4      	beq.n	1f30a <hal_flash_init+0x8>
            rc = SYS_EIO;
   1f320:	f06f 0504 	mvn.w	r5, #4
   1f324:	e7f1      	b.n	1f30a <hal_flash_init+0x8>
}
   1f326:	4628      	mov	r0, r5
   1f328:	bd38      	pop	{r3, r4, r5, pc}

0001f32a <hal_flash_align>:
{
   1f32a:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   1f32c:	f7f2 ff0a 	bl	12144 <hal_bsp_flash_dev>
    if (!hf) {
   1f330:	b108      	cbz	r0, 1f336 <hal_flash_align+0xc>
    return hf->hf_align;
   1f332:	7c00      	ldrb	r0, [r0, #16]
}
   1f334:	bd08      	pop	{r3, pc}
        return 1;
   1f336:	2001      	movs	r0, #1
   1f338:	e7fc      	b.n	1f334 <hal_flash_align+0xa>

0001f33a <hal_flash_erased_val>:
{
   1f33a:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   1f33c:	f7f2 ff02 	bl	12144 <hal_bsp_flash_dev>
    if (!hf) {
   1f340:	b108      	cbz	r0, 1f346 <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
   1f342:	7d00      	ldrb	r0, [r0, #20]
}
   1f344:	bd08      	pop	{r3, pc}
        return 1;
   1f346:	2001      	movs	r0, #1
   1f348:	e7fc      	b.n	1f344 <hal_flash_erased_val+0xa>

0001f34a <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1f34a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f34e:	460c      	mov	r4, r1
   1f350:	4617      	mov	r7, r2
   1f352:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1f354:	f7f2 fef6 	bl	12144 <hal_bsp_flash_dev>
    if (!hf) {
   1f358:	b1a0      	cbz	r0, 1f384 <hal_flash_read+0x3a>
   1f35a:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1f35c:	4621      	mov	r1, r4
   1f35e:	f7ff ffc1 	bl	1f2e4 <hal_flash_check_addr>
   1f362:	b990      	cbnz	r0, 1f38a <hal_flash_read+0x40>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1f364:	1961      	adds	r1, r4, r5
   1f366:	4630      	mov	r0, r6
   1f368:	f7ff ffbc 	bl	1f2e4 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1f36c:	b980      	cbnz	r0, 1f390 <hal_flash_read+0x46>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1f36e:	6833      	ldr	r3, [r6, #0]
   1f370:	f8d3 8000 	ldr.w	r8, [r3]
   1f374:	462b      	mov	r3, r5
   1f376:	463a      	mov	r2, r7
   1f378:	4621      	mov	r1, r4
   1f37a:	4630      	mov	r0, r6
   1f37c:	47c0      	blx	r8
    if (rc != 0) {
   1f37e:	b950      	cbnz	r0, 1f396 <hal_flash_read+0x4c>
        return SYS_EIO;
    }

    return 0;
}
   1f380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   1f384:	f06f 0001 	mvn.w	r0, #1
   1f388:	e7fa      	b.n	1f380 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1f38a:	f06f 0001 	mvn.w	r0, #1
   1f38e:	e7f7      	b.n	1f380 <hal_flash_read+0x36>
   1f390:	f06f 0001 	mvn.w	r0, #1
   1f394:	e7f4      	b.n	1f380 <hal_flash_read+0x36>
        return SYS_EIO;
   1f396:	f06f 0004 	mvn.w	r0, #4
   1f39a:	e7f1      	b.n	1f380 <hal_flash_read+0x36>

0001f39c <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
   1f39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f3a0:	4604      	mov	r4, r0
   1f3a2:	460d      	mov	r5, r1
   1f3a4:	4690      	mov	r8, r2
   1f3a6:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1f3a8:	f7f2 fecc 	bl	12144 <hal_bsp_flash_dev>
    if (!hf) {
   1f3ac:	b1e8      	cbz	r0, 1f3ea <hal_flash_write+0x4e>
   1f3ae:	4607      	mov	r7, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1f3b0:	4629      	mov	r1, r5
   1f3b2:	f7ff ff97 	bl	1f2e4 <hal_flash_check_addr>
   1f3b6:	b9d8      	cbnz	r0, 1f3f0 <hal_flash_write+0x54>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1f3b8:	19a9      	adds	r1, r5, r6
   1f3ba:	4638      	mov	r0, r7
   1f3bc:	f7ff ff92 	bl	1f2e4 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1f3c0:	b9c8      	cbnz	r0, 1f3f6 <hal_flash_write+0x5a>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   1f3c2:	08e3      	lsrs	r3, r4, #3
   1f3c4:	4a10      	ldr	r2, [pc, #64]	; (1f408 <hal_flash_write+0x6c>)
   1f3c6:	5cd0      	ldrb	r0, [r2, r3]
   1f3c8:	f004 0407 	and.w	r4, r4, #7
   1f3cc:	fa40 f404 	asr.w	r4, r0, r4
   1f3d0:	f014 0f01 	tst.w	r4, #1
   1f3d4:	d112      	bne.n	1f3fc <hal_flash_write+0x60>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
   1f3d6:	683b      	ldr	r3, [r7, #0]
   1f3d8:	685c      	ldr	r4, [r3, #4]
   1f3da:	4633      	mov	r3, r6
   1f3dc:	4642      	mov	r2, r8
   1f3de:	4629      	mov	r1, r5
   1f3e0:	4638      	mov	r0, r7
   1f3e2:	47a0      	blx	r4
    if (rc != 0) {
   1f3e4:	b968      	cbnz	r0, 1f402 <hal_flash_write+0x66>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
   1f3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   1f3ea:	f06f 0001 	mvn.w	r0, #1
   1f3ee:	e7fa      	b.n	1f3e6 <hal_flash_write+0x4a>
        return SYS_EINVAL;
   1f3f0:	f06f 0001 	mvn.w	r0, #1
   1f3f4:	e7f7      	b.n	1f3e6 <hal_flash_write+0x4a>
   1f3f6:	f06f 0001 	mvn.w	r0, #1
   1f3fa:	e7f4      	b.n	1f3e6 <hal_flash_write+0x4a>
        return SYS_EACCES;
   1f3fc:	f06f 0006 	mvn.w	r0, #6
   1f400:	e7f1      	b.n	1f3e6 <hal_flash_write+0x4a>
        return SYS_EIO;
   1f402:	f06f 0004 	mvn.w	r0, #4
   1f406:	e7ee      	b.n	1f3e6 <hal_flash_write+0x4a>
   1f408:	20006bfc 	.word	0x20006bfc

0001f40c <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   1f40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f410:	b082      	sub	sp, #8
   1f412:	4605      	mov	r5, r0
   1f414:	460e      	mov	r6, r1
   1f416:	4691      	mov	r9, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1f418:	f7f2 fe94 	bl	12144 <hal_bsp_flash_dev>
    if (!hf) {
   1f41c:	2800      	cmp	r0, #0
   1f41e:	d049      	beq.n	1f4b4 <hal_flash_erase+0xa8>
   1f420:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1f422:	4631      	mov	r1, r6
   1f424:	f7ff ff5e 	bl	1f2e4 <hal_flash_check_addr>
   1f428:	2800      	cmp	r0, #0
   1f42a:	d146      	bne.n	1f4ba <hal_flash_erase+0xae>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1f42c:	eb06 0809 	add.w	r8, r6, r9
   1f430:	4641      	mov	r1, r8
   1f432:	4620      	mov	r0, r4
   1f434:	f7ff ff56 	bl	1f2e4 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1f438:	2800      	cmp	r0, #0
   1f43a:	d141      	bne.n	1f4c0 <hal_flash_erase+0xb4>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   1f43c:	08eb      	lsrs	r3, r5, #3
   1f43e:	4a25      	ldr	r2, [pc, #148]	; (1f4d4 <hal_flash_erase+0xc8>)
   1f440:	5cd7      	ldrb	r7, [r2, r3]
   1f442:	f005 0507 	and.w	r5, r5, #7
   1f446:	fa47 f505 	asr.w	r5, r7, r5
   1f44a:	f015 0a01 	ands.w	sl, r5, #1
   1f44e:	d13a      	bne.n	1f4c6 <hal_flash_erase+0xba>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
   1f450:	45b0      	cmp	r8, r6
   1f452:	d93b      	bls.n	1f4cc <hal_flash_erase+0xc0>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
   1f454:	6823      	ldr	r3, [r4, #0]
   1f456:	699b      	ldr	r3, [r3, #24]
   1f458:	b353      	cbz	r3, 1f4b0 <hal_flash_erase+0xa4>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
   1f45a:	464a      	mov	r2, r9
   1f45c:	4631      	mov	r1, r6
   1f45e:	4620      	mov	r0, r4
   1f460:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
   1f462:	4650      	mov	r0, sl
   1f464:	b002      	add	sp, #8
   1f466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            assert(rc == 0);
   1f46a:	2300      	movs	r3, #0
   1f46c:	461a      	mov	r2, r3
   1f46e:	4619      	mov	r1, r3
   1f470:	4618      	mov	r0, r3
   1f472:	f7e9 fd6f 	bl	8f54 <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   1f476:	3501      	adds	r5, #1
   1f478:	68e3      	ldr	r3, [r4, #12]
   1f47a:	42ab      	cmp	r3, r5
   1f47c:	ddf1      	ble.n	1f462 <hal_flash_erase+0x56>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   1f47e:	6823      	ldr	r3, [r4, #0]
   1f480:	68df      	ldr	r7, [r3, #12]
   1f482:	466b      	mov	r3, sp
   1f484:	aa01      	add	r2, sp, #4
   1f486:	4629      	mov	r1, r5
   1f488:	4620      	mov	r0, r4
   1f48a:	47b8      	blx	r7
            assert(rc == 0);
   1f48c:	2800      	cmp	r0, #0
   1f48e:	d1ec      	bne.n	1f46a <hal_flash_erase+0x5e>
            end_area = start + size;
   1f490:	9901      	ldr	r1, [sp, #4]
   1f492:	9b00      	ldr	r3, [sp, #0]
   1f494:	440b      	add	r3, r1
            if (address < end_area && end > start) {
   1f496:	429e      	cmp	r6, r3
   1f498:	d2ed      	bcs.n	1f476 <hal_flash_erase+0x6a>
   1f49a:	4588      	cmp	r8, r1
   1f49c:	d9eb      	bls.n	1f476 <hal_flash_erase+0x6a>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
   1f49e:	6823      	ldr	r3, [r4, #0]
   1f4a0:	689b      	ldr	r3, [r3, #8]
   1f4a2:	4620      	mov	r0, r4
   1f4a4:	4798      	blx	r3
   1f4a6:	2800      	cmp	r0, #0
   1f4a8:	d0e5      	beq.n	1f476 <hal_flash_erase+0x6a>
                    return SYS_EIO;
   1f4aa:	f06f 0a04 	mvn.w	sl, #4
   1f4ae:	e7d8      	b.n	1f462 <hal_flash_erase+0x56>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   1f4b0:	4655      	mov	r5, sl
   1f4b2:	e7e1      	b.n	1f478 <hal_flash_erase+0x6c>
        return SYS_EINVAL;
   1f4b4:	f06f 0a01 	mvn.w	sl, #1
   1f4b8:	e7d3      	b.n	1f462 <hal_flash_erase+0x56>
        return SYS_EINVAL;
   1f4ba:	f06f 0a01 	mvn.w	sl, #1
   1f4be:	e7d0      	b.n	1f462 <hal_flash_erase+0x56>
   1f4c0:	f06f 0a01 	mvn.w	sl, #1
   1f4c4:	e7cd      	b.n	1f462 <hal_flash_erase+0x56>
        return SYS_EACCES;
   1f4c6:	f06f 0a06 	mvn.w	sl, #6
   1f4ca:	e7ca      	b.n	1f462 <hal_flash_erase+0x56>
        return SYS_EINVAL;
   1f4cc:	f06f 0a01 	mvn.w	sl, #1
   1f4d0:	e7c7      	b.n	1f462 <hal_flash_erase+0x56>
   1f4d2:	bf00      	nop
   1f4d4:	20006bfc 	.word	0x20006bfc

0001f4d8 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
   1f4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f4da:	4604      	mov	r4, r0
   1f4dc:	4616      	mov	r6, r2
   1f4de:	461d      	mov	r5, r3
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1f4e0:	6807      	ldr	r7, [r0, #0]
   1f4e2:	683f      	ldr	r7, [r7, #0]
   1f4e4:	47b8      	blx	r7
    if (rc != 0) {
   1f4e6:	b968      	cbnz	r0, 1f504 <hal_flash_is_erased+0x2c>
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
   1f4e8:	2100      	movs	r1, #0
   1f4ea:	e000      	b.n	1f4ee <hal_flash_is_erased+0x16>
   1f4ec:	3101      	adds	r1, #1
   1f4ee:	42a9      	cmp	r1, r5
   1f4f0:	d206      	bcs.n	1f500 <hal_flash_is_erased+0x28>
        if (buf[i] != hf->hf_erased_val) {
   1f4f2:	f816 e001 	ldrb.w	lr, [r6, r1]
   1f4f6:	f894 c014 	ldrb.w	ip, [r4, #20]
   1f4fa:	45e6      	cmp	lr, ip
   1f4fc:	d0f6      	beq.n	1f4ec <hal_flash_is_erased+0x14>
   1f4fe:	e000      	b.n	1f502 <hal_flash_is_erased+0x2a>
            return 0;
        }
    }
    return 1;
   1f500:	2001      	movs	r0, #1
}
   1f502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
   1f504:	f06f 0004 	mvn.w	r0, #4
   1f508:	e7fb      	b.n	1f502 <hal_flash_is_erased+0x2a>

0001f50a <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1f50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f50e:	460c      	mov	r4, r1
   1f510:	4690      	mov	r8, r2
   1f512:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1f514:	f7f2 fe16 	bl	12144 <hal_bsp_flash_dev>
    if (!hf) {
   1f518:	b1f8      	cbz	r0, 1f55a <hal_flash_isempty+0x50>
   1f51a:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1f51c:	4621      	mov	r1, r4
   1f51e:	f7ff fee1 	bl	1f2e4 <hal_flash_check_addr>
   1f522:	b9e8      	cbnz	r0, 1f560 <hal_flash_isempty+0x56>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1f524:	1961      	adds	r1, r4, r5
   1f526:	4630      	mov	r0, r6
   1f528:	f7ff fedc 	bl	1f2e4 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1f52c:	b9d8      	cbnz	r0, 1f566 <hal_flash_isempty+0x5c>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
   1f52e:	6833      	ldr	r3, [r6, #0]
   1f530:	691f      	ldr	r7, [r3, #16]
   1f532:	b15f      	cbz	r7, 1f54c <hal_flash_isempty+0x42>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
   1f534:	462b      	mov	r3, r5
   1f536:	4642      	mov	r2, r8
   1f538:	4621      	mov	r1, r4
   1f53a:	4630      	mov	r0, r6
   1f53c:	47b8      	blx	r7
        if (rc < 0) {
   1f53e:	2800      	cmp	r0, #0
   1f540:	db01      	blt.n	1f546 <hal_flash_isempty+0x3c>
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
   1f542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return SYS_EIO;
   1f546:	f06f 0004 	mvn.w	r0, #4
   1f54a:	e7fa      	b.n	1f542 <hal_flash_isempty+0x38>
        return hal_flash_is_erased(hf, address, dst, num_bytes);
   1f54c:	462b      	mov	r3, r5
   1f54e:	4642      	mov	r2, r8
   1f550:	4621      	mov	r1, r4
   1f552:	4630      	mov	r0, r6
   1f554:	f7ff ffc0 	bl	1f4d8 <hal_flash_is_erased>
   1f558:	e7f3      	b.n	1f542 <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   1f55a:	f06f 0001 	mvn.w	r0, #1
   1f55e:	e7f0      	b.n	1f542 <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   1f560:	f06f 0001 	mvn.w	r0, #1
   1f564:	e7ed      	b.n	1f542 <hal_flash_isempty+0x38>
   1f566:	f06f 0001 	mvn.w	r0, #1
   1f56a:	e7ea      	b.n	1f542 <hal_flash_isempty+0x38>

0001f56c <hal_flash_isempty_no_buf>:

int
hal_flash_isempty_no_buf(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   1f56c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f56e:	b085      	sub	sp, #20
   1f570:	4607      	mov	r7, r0
   1f572:	460e      	mov	r6, r1
   1f574:	4615      	mov	r5, r2
    uint32_t blksz;
    uint32_t rem;
    uint32_t off;
    int empty;

    for (off = 0; off < num_bytes; off += sizeof buf) {
   1f576:	2400      	movs	r4, #0
   1f578:	e007      	b.n	1f58a <hal_flash_isempty_no_buf+0x1e>
        blksz = sizeof buf;
        if (blksz > rem) {
            blksz = rem;
        }

        empty = hal_flash_isempty(id, address + off, buf, blksz);
   1f57a:	466a      	mov	r2, sp
   1f57c:	19a1      	adds	r1, r4, r6
   1f57e:	4638      	mov	r0, r7
   1f580:	f7ff ffc3 	bl	1f50a <hal_flash_isempty>
        if (empty != 1) {
   1f584:	2801      	cmp	r0, #1
   1f586:	d108      	bne.n	1f59a <hal_flash_isempty_no_buf+0x2e>
    for (off = 0; off < num_bytes; off += sizeof buf) {
   1f588:	3410      	adds	r4, #16
   1f58a:	42ac      	cmp	r4, r5
   1f58c:	d204      	bcs.n	1f598 <hal_flash_isempty_no_buf+0x2c>
        rem = num_bytes - off;
   1f58e:	1b2b      	subs	r3, r5, r4
        if (blksz > rem) {
   1f590:	2b0f      	cmp	r3, #15
   1f592:	d9f2      	bls.n	1f57a <hal_flash_isempty_no_buf+0xe>
        blksz = sizeof buf;
   1f594:	2310      	movs	r3, #16
   1f596:	e7f0      	b.n	1f57a <hal_flash_isempty_no_buf+0xe>
            return empty;
        }
    }

    return 1;
   1f598:	2001      	movs	r0, #1
}
   1f59a:	b005      	add	sp, #20
   1f59c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f59e <hal_uart_tx_fill_buf>:
    return 0;
}

static int
hal_uart_tx_fill_buf(struct hal_uart *u)
{
   1f59e:	b538      	push	{r3, r4, r5, lr}
   1f5a0:	4605      	mov	r5, r0
    int data;
    int i;

    for (i = 0; i < sizeof(u->u_tx_buf); i++) {
   1f5a2:	2400      	movs	r4, #0
   1f5a4:	2c07      	cmp	r4, #7
   1f5a6:	d808      	bhi.n	1f5ba <hal_uart_tx_fill_buf+0x1c>
        data = u->u_tx_func(u->u_func_arg);
   1f5a8:	692b      	ldr	r3, [r5, #16]
   1f5aa:	69a8      	ldr	r0, [r5, #24]
   1f5ac:	4798      	blx	r3
        if (data < 0) {
   1f5ae:	2800      	cmp	r0, #0
   1f5b0:	db03      	blt.n	1f5ba <hal_uart_tx_fill_buf+0x1c>
            break;
        }
        u->u_tx_buf[i] = data;
   1f5b2:	192b      	adds	r3, r5, r4
   1f5b4:	7098      	strb	r0, [r3, #2]
    for (i = 0; i < sizeof(u->u_tx_buf); i++) {
   1f5b6:	3401      	adds	r4, #1
   1f5b8:	e7f4      	b.n	1f5a4 <hal_uart_tx_fill_buf+0x6>
    }
    return i;
}
   1f5ba:	4620      	mov	r0, r4
   1f5bc:	bd38      	pop	{r3, r4, r5, pc}

0001f5be <uart_irq_handler>:
    nrf_uart->TASKS_STOPTX = 1;
}

static void
uart_irq_handler(NRF_UARTE_Type *nrf_uart, struct hal_uart *u)
{
   1f5be:	b538      	push	{r3, r4, r5, lr}
   1f5c0:	4604      	mov	r4, r0
   1f5c2:	460d      	mov	r5, r1
    int rc;

    os_trace_isr_enter();

    if (nrf_uart->EVENTS_ENDTX) {
   1f5c4:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   1f5c8:	b973      	cbnz	r3, 1f5e8 <uart_irq_handler+0x2a>
            nrf_uart->INTENCLR = UARTE_INT_ENDTX;
            nrf_uart->TASKS_STOPTX = 1;
            u->u_tx_started = 0;
        }
    }
    if (nrf_uart->EVENTS_ENDRX) {
   1f5ca:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1f5ce:	b153      	cbz	r3, 1f5e6 <uart_irq_handler+0x28>
        nrf_uart->EVENTS_ENDRX = 0;
   1f5d0:	2300      	movs	r3, #0
   1f5d2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   1f5d6:	68eb      	ldr	r3, [r5, #12]
   1f5d8:	7869      	ldrb	r1, [r5, #1]
   1f5da:	69a8      	ldr	r0, [r5, #24]
   1f5dc:	4798      	blx	r3
        if (rc < 0) {
   1f5de:	2800      	cmp	r0, #0
   1f5e0:	db21      	blt.n	1f626 <uart_irq_handler+0x68>
            u->u_rx_stall = 1;
        } else {
            nrf_uart->TASKS_STARTRX = 1;
   1f5e2:	2301      	movs	r3, #1
   1f5e4:	6023      	str	r3, [r4, #0]
        }
    }
    os_trace_isr_exit();
}
   1f5e6:	bd38      	pop	{r3, r4, r5, pc}
        nrf_uart->EVENTS_ENDTX = 0;
   1f5e8:	2300      	movs	r3, #0
   1f5ea:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        rc = hal_uart_tx_fill_buf(u);
   1f5ee:	4608      	mov	r0, r1
   1f5f0:	f7ff ffd5 	bl	1f59e <hal_uart_tx_fill_buf>
        if (rc > 0) {
   1f5f4:	2800      	cmp	r0, #0
   1f5f6:	dd07      	ble.n	1f608 <uart_irq_handler+0x4a>
            nrf_uart->TXD.PTR = (uint32_t)&u->u_tx_buf;
   1f5f8:	1cab      	adds	r3, r5, #2
   1f5fa:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
            nrf_uart->TXD.MAXCNT = rc;
   1f5fe:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
            nrf_uart->TASKS_STARTTX = 1;
   1f602:	2301      	movs	r3, #1
   1f604:	60a3      	str	r3, [r4, #8]
   1f606:	e7e0      	b.n	1f5ca <uart_irq_handler+0xc>
            if (u->u_tx_done) {
   1f608:	696b      	ldr	r3, [r5, #20]
   1f60a:	b10b      	cbz	r3, 1f610 <uart_irq_handler+0x52>
                u->u_tx_done(u->u_func_arg);
   1f60c:	69a8      	ldr	r0, [r5, #24]
   1f60e:	4798      	blx	r3
            nrf_uart->INTENCLR = UARTE_INT_ENDTX;
   1f610:	f44f 7380 	mov.w	r3, #256	; 0x100
   1f614:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_uart->TASKS_STOPTX = 1;
   1f618:	2301      	movs	r3, #1
   1f61a:	60e3      	str	r3, [r4, #12]
            u->u_tx_started = 0;
   1f61c:	782b      	ldrb	r3, [r5, #0]
   1f61e:	f36f 0382 	bfc	r3, #2, #1
   1f622:	702b      	strb	r3, [r5, #0]
   1f624:	e7d1      	b.n	1f5ca <uart_irq_handler+0xc>
            u->u_rx_stall = 1;
   1f626:	782b      	ldrb	r3, [r5, #0]
   1f628:	f043 0302 	orr.w	r3, r3, #2
   1f62c:	702b      	strb	r3, [r5, #0]
   1f62e:	e7da      	b.n	1f5e6 <uart_irq_handler+0x28>

0001f630 <uart0_irq_handler>:

static void
uart0_irq_handler(void)
{
   1f630:	b508      	push	{r3, lr}
    uart_irq_handler(NRF_UARTE0, &uart0);
   1f632:	4902      	ldr	r1, [pc, #8]	; (1f63c <uart0_irq_handler+0xc>)
   1f634:	4802      	ldr	r0, [pc, #8]	; (1f640 <uart0_irq_handler+0x10>)
   1f636:	f7ff ffc2 	bl	1f5be <uart_irq_handler>
}
   1f63a:	bd08      	pop	{r3, pc}
   1f63c:	20006c00 	.word	0x20006c00
   1f640:	40002000 	.word	0x40002000

0001f644 <hal_uart_baudrate>:
#endif

static uint32_t
hal_uart_baudrate(int baudrate)
{
    switch (baudrate) {
   1f644:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   1f648:	4298      	cmp	r0, r3
   1f64a:	d049      	beq.n	1f6e0 <hal_uart_baudrate+0x9c>
   1f64c:	dc23      	bgt.n	1f696 <hal_uart_baudrate+0x52>
   1f64e:	f5b0 5f61 	cmp.w	r0, #14400	; 0x3840
   1f652:	d048      	beq.n	1f6e6 <hal_uart_baudrate+0xa2>
   1f654:	dd08      	ble.n	1f668 <hal_uart_baudrate+0x24>
   1f656:	f5b0 4fe1 	cmp.w	r0, #28800	; 0x7080
   1f65a:	d04f      	beq.n	1f6fc <hal_uart_baudrate+0xb8>
   1f65c:	f5b0 4f16 	cmp.w	r0, #38400	; 0x9600
   1f660:	d114      	bne.n	1f68c <hal_uart_baudrate+0x48>
    case 19200:
        return UARTE_BAUDRATE_BAUDRATE_Baud19200;
    case 28800:
        return UARTE_BAUDRATE_BAUDRATE_Baud28800;
    case 38400:
        return UARTE_BAUDRATE_BAUDRATE_Baud38400;
   1f662:	f44f 001d 	mov.w	r0, #10289152	; 0x9d0000
   1f666:	4770      	bx	lr
    switch (baudrate) {
   1f668:	f5b0 5f96 	cmp.w	r0, #4800	; 0x12c0
   1f66c:	d03d      	beq.n	1f6ea <hal_uart_baudrate+0xa6>
   1f66e:	dd04      	ble.n	1f67a <hal_uart_baudrate+0x36>
   1f670:	f5b0 5f16 	cmp.w	r0, #9600	; 0x2580
   1f674:	d140      	bne.n	1f6f8 <hal_uart_baudrate+0xb4>
        return UARTE_BAUDRATE_BAUDRATE_Baud9600;
   1f676:	482c      	ldr	r0, [pc, #176]	; (1f728 <hal_uart_baudrate+0xe4>)
   1f678:	4770      	bx	lr
    switch (baudrate) {
   1f67a:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   1f67e:	d036      	beq.n	1f6ee <hal_uart_baudrate+0xaa>
   1f680:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
   1f684:	d136      	bne.n	1f6f4 <hal_uart_baudrate+0xb0>
        return UARTE_BAUDRATE_BAUDRATE_Baud2400;
   1f686:	f44f 201d 	mov.w	r0, #643072	; 0x9d000
   1f68a:	4770      	bx	lr
    switch (baudrate) {
   1f68c:	f5b0 4f96 	cmp.w	r0, #19200	; 0x4b00
   1f690:	d136      	bne.n	1f700 <hal_uart_baudrate+0xbc>
        return UARTE_BAUDRATE_BAUDRATE_Baud19200;
   1f692:	4826      	ldr	r0, [pc, #152]	; (1f72c <hal_uart_baudrate+0xe8>)
   1f694:	4770      	bx	lr
    switch (baudrate) {
   1f696:	4b26      	ldr	r3, [pc, #152]	; (1f730 <hal_uart_baudrate+0xec>)
   1f698:	4298      	cmp	r0, r3
   1f69a:	d033      	beq.n	1f704 <hal_uart_baudrate+0xc0>
   1f69c:	dd08      	ble.n	1f6b0 <hal_uart_baudrate+0x6c>
   1f69e:	f5b0 2f61 	cmp.w	r0, #921600	; 0xe1000
   1f6a2:	d03c      	beq.n	1f71e <hal_uart_baudrate+0xda>
   1f6a4:	4b23      	ldr	r3, [pc, #140]	; (1f734 <hal_uart_baudrate+0xf0>)
   1f6a6:	4298      	cmp	r0, r3
   1f6a8:	d114      	bne.n	1f6d4 <hal_uart_baudrate+0x90>
    case 460800:
        return UARTE_BAUDRATE_BAUDRATE_Baud460800;
    case 921600:
        return UARTE_BAUDRATE_BAUDRATE_Baud921600;
    case 1000000:
        return UARTE_BAUDRATE_BAUDRATE_Baud1M;
   1f6aa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1f6ae:	4770      	bx	lr
    switch (baudrate) {
   1f6b0:	f5b0 3fe1 	cmp.w	r0, #115200	; 0x1c200
   1f6b4:	d029      	beq.n	1f70a <hal_uart_baudrate+0xc6>
   1f6b6:	dd05      	ble.n	1f6c4 <hal_uart_baudrate+0x80>
   1f6b8:	f5b0 3f61 	cmp.w	r0, #230400	; 0x38400
   1f6bc:	d12d      	bne.n	1f71a <hal_uart_baudrate+0xd6>
        return UARTE_BAUDRATE_BAUDRATE_Baud230400;
   1f6be:	f04f 706c 	mov.w	r0, #61865984	; 0x3b00000
   1f6c2:	4770      	bx	lr
    switch (baudrate) {
   1f6c4:	f5b0 4f61 	cmp.w	r0, #57600	; 0xe100
   1f6c8:	d022      	beq.n	1f710 <hal_uart_baudrate+0xcc>
   1f6ca:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   1f6ce:	d122      	bne.n	1f716 <hal_uart_baudrate+0xd2>
        return UARTE_BAUDRATE_BAUDRATE_Baud76800;
   1f6d0:	4819      	ldr	r0, [pc, #100]	; (1f738 <hal_uart_baudrate+0xf4>)
   1f6d2:	4770      	bx	lr
    switch (baudrate) {
   1f6d4:	f5b0 2fe1 	cmp.w	r0, #460800	; 0x70800
   1f6d8:	d124      	bne.n	1f724 <hal_uart_baudrate+0xe0>
        return UARTE_BAUDRATE_BAUDRATE_Baud460800;
   1f6da:	f04f 60e8 	mov.w	r0, #121634816	; 0x7400000
   1f6de:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud56000;
   1f6e0:	f44f 0065 	mov.w	r0, #15007744	; 0xe50000
   1f6e4:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud14400;
   1f6e6:	4815      	ldr	r0, [pc, #84]	; (1f73c <hal_uart_baudrate+0xf8>)
   1f6e8:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud4800;
   1f6ea:	4815      	ldr	r0, [pc, #84]	; (1f740 <hal_uart_baudrate+0xfc>)
   1f6ec:	4770      	bx	lr
    switch (baudrate) {
   1f6ee:	f44f 209e 	mov.w	r0, #323584	; 0x4f000
   1f6f2:	4770      	bx	lr
    default:
        return 0;
   1f6f4:	2000      	movs	r0, #0
   1f6f6:	4770      	bx	lr
   1f6f8:	2000      	movs	r0, #0
   1f6fa:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud28800;
   1f6fc:	4811      	ldr	r0, [pc, #68]	; (1f744 <hal_uart_baudrate+0x100>)
   1f6fe:	4770      	bx	lr
        return 0;
   1f700:	2000      	movs	r0, #0
   1f702:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud250000;
   1f704:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   1f708:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud115200;
   1f70a:	f04f 70eb 	mov.w	r0, #30801920	; 0x1d60000
   1f70e:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud57600;
   1f710:	f44f 006b 	mov.w	r0, #15400960	; 0xeb0000
   1f714:	4770      	bx	lr
        return 0;
   1f716:	2000      	movs	r0, #0
   1f718:	4770      	bx	lr
   1f71a:	2000      	movs	r0, #0
   1f71c:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud921600;
   1f71e:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
   1f722:	4770      	bx	lr
        return 0;
   1f724:	2000      	movs	r0, #0
    }
}
   1f726:	4770      	bx	lr
   1f728:	00275000 	.word	0x00275000
   1f72c:	004ea000 	.word	0x004ea000
   1f730:	0003d090 	.word	0x0003d090
   1f734:	000f4240 	.word	0x000f4240
   1f738:	013a9000 	.word	0x013a9000
   1f73c:	003af000 	.word	0x003af000
   1f740:	0013b000 	.word	0x0013b000
   1f744:	0075c000 	.word	0x0075c000

0001f748 <hal_uart_init_cbs>:
    if (port != 0) {
   1f748:	b980      	cbnz	r0, 1f76c <hal_uart_init_cbs+0x24>
   1f74a:	4684      	mov	ip, r0
    if (u->u_open) {
   1f74c:	480a      	ldr	r0, [pc, #40]	; (1f778 <hal_uart_init_cbs+0x30>)
   1f74e:	7800      	ldrb	r0, [r0, #0]
   1f750:	f010 0f01 	tst.w	r0, #1
   1f754:	d10d      	bne.n	1f772 <hal_uart_init_cbs+0x2a>
{
   1f756:	b410      	push	{r4}
    u->u_rx_func = rx_func;
   1f758:	4c07      	ldr	r4, [pc, #28]	; (1f778 <hal_uart_init_cbs+0x30>)
   1f75a:	60e3      	str	r3, [r4, #12]
    u->u_tx_func = tx_func;
   1f75c:	6121      	str	r1, [r4, #16]
    u->u_tx_done = tx_done;
   1f75e:	6162      	str	r2, [r4, #20]
    u->u_func_arg = arg;
   1f760:	9b01      	ldr	r3, [sp, #4]
   1f762:	61a3      	str	r3, [r4, #24]
    return 0;
   1f764:	4660      	mov	r0, ip
}
   1f766:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f76a:	4770      	bx	lr
        return -1;
   1f76c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f770:	4770      	bx	lr
        return -1;
   1f772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1f776:	4770      	bx	lr
   1f778:	20006c00 	.word	0x20006c00

0001f77c <hal_uart_start_tx>:
    if (port != 0) {
   1f77c:	bb10      	cbnz	r0, 1f7c4 <hal_uart_start_tx+0x48>
{
   1f77e:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1f780:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1f784:	b672      	cpsid	i
    if (u->u_tx_started == 0) {
   1f786:	4b10      	ldr	r3, [pc, #64]	; (1f7c8 <hal_uart_start_tx+0x4c>)
   1f788:	781b      	ldrb	r3, [r3, #0]
   1f78a:	f013 0f04 	tst.w	r3, #4
   1f78e:	d002      	beq.n	1f796 <hal_uart_start_tx+0x1a>
    __HAL_ENABLE_INTERRUPTS(sr);
   1f790:	b904      	cbnz	r4, 1f794 <hal_uart_start_tx+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
   1f792:	b662      	cpsie	i
}
   1f794:	bd10      	pop	{r4, pc}
        rc = hal_uart_tx_fill_buf(u);
   1f796:	480c      	ldr	r0, [pc, #48]	; (1f7c8 <hal_uart_start_tx+0x4c>)
   1f798:	f7ff ff01 	bl	1f59e <hal_uart_tx_fill_buf>
        if (rc > 0) {
   1f79c:	2800      	cmp	r0, #0
   1f79e:	ddf7      	ble.n	1f790 <hal_uart_start_tx+0x14>
            nrf_uart->INTENSET = UARTE_INT_ENDTX;
   1f7a0:	4b0a      	ldr	r3, [pc, #40]	; (1f7cc <hal_uart_start_tx+0x50>)
   1f7a2:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f7a6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            nrf_uart->TXD.PTR = (uint32_t)&u->u_tx_buf;
   1f7aa:	4a07      	ldr	r2, [pc, #28]	; (1f7c8 <hal_uart_start_tx+0x4c>)
   1f7ac:	1c91      	adds	r1, r2, #2
   1f7ae:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            nrf_uart->TXD.MAXCNT = rc;
   1f7b2:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
            nrf_uart->TASKS_STARTTX = 1;
   1f7b6:	2101      	movs	r1, #1
   1f7b8:	6099      	str	r1, [r3, #8]
            u->u_tx_started = 1;
   1f7ba:	7813      	ldrb	r3, [r2, #0]
   1f7bc:	f043 0304 	orr.w	r3, r3, #4
   1f7c0:	7013      	strb	r3, [r2, #0]
   1f7c2:	e7e5      	b.n	1f790 <hal_uart_start_tx+0x14>
   1f7c4:	4770      	bx	lr
   1f7c6:	bf00      	nop
   1f7c8:	20006c00 	.word	0x20006c00
   1f7cc:	40002000 	.word	0x40002000

0001f7d0 <hal_uart_start_rx>:
    if (port != 0) {
   1f7d0:	b9c8      	cbnz	r0, 1f806 <hal_uart_start_rx+0x36>
    if (u->u_rx_stall) {
   1f7d2:	4b0d      	ldr	r3, [pc, #52]	; (1f808 <hal_uart_start_rx+0x38>)
   1f7d4:	781b      	ldrb	r3, [r3, #0]
   1f7d6:	f013 0f02 	tst.w	r3, #2
   1f7da:	d014      	beq.n	1f806 <hal_uart_start_rx+0x36>
{
   1f7dc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1f7de:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1f7e2:	b672      	cpsid	i
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   1f7e4:	4b08      	ldr	r3, [pc, #32]	; (1f808 <hal_uart_start_rx+0x38>)
   1f7e6:	68da      	ldr	r2, [r3, #12]
   1f7e8:	7859      	ldrb	r1, [r3, #1]
   1f7ea:	6998      	ldr	r0, [r3, #24]
   1f7ec:	4790      	blx	r2
        if (rc == 0) {
   1f7ee:	b938      	cbnz	r0, 1f800 <hal_uart_start_rx+0x30>
            u->u_rx_stall = 0;
   1f7f0:	4b05      	ldr	r3, [pc, #20]	; (1f808 <hal_uart_start_rx+0x38>)
   1f7f2:	781a      	ldrb	r2, [r3, #0]
   1f7f4:	f36f 0241 	bfc	r2, #1, #1
   1f7f8:	701a      	strb	r2, [r3, #0]
            nrf_uart->TASKS_STARTRX = 1;
   1f7fa:	4b04      	ldr	r3, [pc, #16]	; (1f80c <hal_uart_start_rx+0x3c>)
   1f7fc:	2201      	movs	r2, #1
   1f7fe:	601a      	str	r2, [r3, #0]
        __HAL_ENABLE_INTERRUPTS(sr);
   1f800:	b904      	cbnz	r4, 1f804 <hal_uart_start_rx+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
   1f802:	b662      	cpsie	i
}
   1f804:	bd10      	pop	{r4, pc}
   1f806:	4770      	bx	lr
   1f808:	20006c00 	.word	0x20006c00
   1f80c:	40002000 	.word	0x40002000

0001f810 <hal_uart_blocking_tx>:
{
   1f810:	b082      	sub	sp, #8
   1f812:	f88d 1007 	strb.w	r1, [sp, #7]
    if (port != 0) {
   1f816:	bb00      	cbnz	r0, 1f85a <hal_uart_blocking_tx+0x4a>
    if (!u->u_open) {
   1f818:	4b11      	ldr	r3, [pc, #68]	; (1f860 <hal_uart_blocking_tx+0x50>)
   1f81a:	781b      	ldrb	r3, [r3, #0]
   1f81c:	f013 0f01 	tst.w	r3, #1
   1f820:	d01b      	beq.n	1f85a <hal_uart_blocking_tx+0x4a>
    if (u->u_tx_started) {
   1f822:	f013 0f04 	tst.w	r3, #4
   1f826:	d004      	beq.n	1f832 <hal_uart_blocking_tx+0x22>
        while (nrf_uart->EVENTS_ENDTX == 0) {
   1f828:	4b0e      	ldr	r3, [pc, #56]	; (1f864 <hal_uart_blocking_tx+0x54>)
   1f82a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
   1f82e:	2b00      	cmp	r3, #0
   1f830:	d0fa      	beq.n	1f828 <hal_uart_blocking_tx+0x18>
    nrf_uart->EVENTS_ENDTX = 0;
   1f832:	4b0c      	ldr	r3, [pc, #48]	; (1f864 <hal_uart_blocking_tx+0x54>)
   1f834:	2200      	movs	r2, #0
   1f836:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    nrf_uart->TXD.PTR = (uint32_t)&data;
   1f83a:	f10d 0207 	add.w	r2, sp, #7
   1f83e:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    nrf_uart->TXD.MAXCNT = 1;
   1f842:	2201      	movs	r2, #1
   1f844:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    nrf_uart->TASKS_STARTTX = 1;
   1f848:	609a      	str	r2, [r3, #8]
    while (nrf_uart->EVENTS_ENDTX == 0) {
   1f84a:	4b06      	ldr	r3, [pc, #24]	; (1f864 <hal_uart_blocking_tx+0x54>)
   1f84c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
   1f850:	2b00      	cmp	r3, #0
   1f852:	d0fa      	beq.n	1f84a <hal_uart_blocking_tx+0x3a>
    nrf_uart->TASKS_STOPTX = 1;
   1f854:	4b03      	ldr	r3, [pc, #12]	; (1f864 <hal_uart_blocking_tx+0x54>)
   1f856:	2201      	movs	r2, #1
   1f858:	60da      	str	r2, [r3, #12]
}
   1f85a:	b002      	add	sp, #8
   1f85c:	4770      	bx	lr
   1f85e:	bf00      	nop
   1f860:	20006c00 	.word	0x20006c00
   1f864:	40002000 	.word	0x40002000

0001f868 <hal_uart_init>:
        NVIC_SetVector(UARTE1_IRQn, (uint32_t)uart1_irq_handler);
    } else {
        return -1;
    }
#else
    if (port != 0) {
   1f868:	4602      	mov	r2, r0
   1f86a:	b9b0      	cbnz	r0, 1f89a <hal_uart_init+0x32>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1f86c:	4b0c      	ldr	r3, [pc, #48]	; (1f8a0 <hal_uart_init+0x38>)
   1f86e:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1f870:	480c      	ldr	r0, [pc, #48]	; (1f8a4 <hal_uart_init+0x3c>)
   1f872:	6498      	str	r0, [r3, #72]	; 0x48
    NVIC_SetVector(UARTE0_UART0_IRQn, (uint32_t)uart0_irq_handler);
#endif

    cfg = (struct nrf52_uart_cfg *)arg;

    nrf_uart->PSEL.TXD = cfg->suc_pin_tx;
   1f874:	f991 0000 	ldrsb.w	r0, [r1]
   1f878:	4b0b      	ldr	r3, [pc, #44]	; (1f8a8 <hal_uart_init+0x40>)
   1f87a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    nrf_uart->PSEL.RXD = cfg->suc_pin_rx;
   1f87e:	f991 0001 	ldrsb.w	r0, [r1, #1]
   1f882:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    nrf_uart->PSEL.RTS = cfg->suc_pin_rts;
   1f886:	f991 0002 	ldrsb.w	r0, [r1, #2]
   1f88a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    nrf_uart->PSEL.CTS = cfg->suc_pin_cts;
   1f88e:	f991 1003 	ldrsb.w	r1, [r1, #3]
   1f892:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    return 0;
   1f896:	4610      	mov	r0, r2
   1f898:	4770      	bx	lr
        return -1;
   1f89a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1f89e:	4770      	bx	lr
   1f8a0:	e000ed00 	.word	0xe000ed00
   1f8a4:	0001f631 	.word	0x0001f631
   1f8a8:	40002000 	.word	0x40002000

0001f8ac <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
   1f8ac:	b538      	push	{r3, r4, r5, lr}
   1f8ae:	f89d c010 	ldrb.w	ip, [sp, #16]
        u = &uart1;
    } else {
        return -1;
    }
#else
    if (port != 0) {
   1f8b2:	2800      	cmp	r0, #0
   1f8b4:	d15a      	bne.n	1f96c <hal_uart_config+0xc0>
   1f8b6:	4604      	mov	r4, r0
    nrf_uart = NRF_UARTE0;
    irqnum = UARTE0_UART0_IRQn;
    u = &uart0;
#endif

    if (u->u_open) {
   1f8b8:	4835      	ldr	r0, [pc, #212]	; (1f990 <hal_uart_config+0xe4>)
   1f8ba:	7800      	ldrb	r0, [r0, #0]
   1f8bc:	f010 0f01 	tst.w	r0, #1
   1f8c0:	d157      	bne.n	1f972 <hal_uart_config+0xc6>
     * pin config
     * UART config
     * nvic config
     * enable uart
     */
    if (databits != 8) {
   1f8c2:	2a08      	cmp	r2, #8
   1f8c4:	d158      	bne.n	1f978 <hal_uart_config+0xcc>
        return -1;
    }
    if (stopbits != 1) {
   1f8c6:	2b01      	cmp	r3, #1
   1f8c8:	d159      	bne.n	1f97e <hal_uart_config+0xd2>
        return -1;
    }

    switch (parity) {
   1f8ca:	f1bc 0f01 	cmp.w	ip, #1
   1f8ce:	d059      	beq.n	1f984 <hal_uart_config+0xd8>
   1f8d0:	f1bc 0f02 	cmp.w	ip, #2
   1f8d4:	d134      	bne.n	1f940 <hal_uart_config+0x94>
    case HAL_UART_PARITY_NONE:
        break;
    case HAL_UART_PARITY_ODD:
        return -1;
    case HAL_UART_PARITY_EVEN:
        cfg_reg |= UARTE_CONFIG_PARITY;
   1f8d6:	250e      	movs	r5, #14
        break;
    }

    switch (flow_ctl) {
   1f8d8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1f8dc:	2b01      	cmp	r3, #1
   1f8de:	d031      	beq.n	1f944 <hal_uart_config+0x98>
            assert(0);
            return -1;
        }
        break;
    }
    baud_reg = hal_uart_baudrate(baudrate);
   1f8e0:	4608      	mov	r0, r1
   1f8e2:	f7ff feaf 	bl	1f644 <hal_uart_baudrate>
    if (baud_reg == 0) {
   1f8e6:	4602      	mov	r2, r0
   1f8e8:	2800      	cmp	r0, #0
   1f8ea:	d04e      	beq.n	1f98a <hal_uart_config+0xde>
        return -1;
    }
    nrf_uart->ENABLE = 0;
   1f8ec:	4b29      	ldr	r3, [pc, #164]	; (1f994 <hal_uart_config+0xe8>)
   1f8ee:	2100      	movs	r1, #0
   1f8f0:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    nrf_uart->INTENCLR = 0xffffffff;
   1f8f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f8f8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    nrf_uart->BAUDRATE = baud_reg;
   1f8fc:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    nrf_uart->CONFIG = cfg_reg;
   1f900:	f8c3 556c 	str.w	r5, [r3, #1388]	; 0x56c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f904:	4a24      	ldr	r2, [pc, #144]	; (1f998 <hal_uart_config+0xec>)
   1f906:	2004      	movs	r0, #4
   1f908:	6010      	str	r0, [r2, #0]

    NVIC_EnableIRQ(irqnum);

    nrf_uart->ENABLE = UARTE_ENABLE;
   1f90a:	2208      	movs	r2, #8
   1f90c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    nrf_uart->INTENSET = UARTE_INT_ENDRX;
   1f910:	2210      	movs	r2, #16
   1f912:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    nrf_uart->RXD.PTR = (uint32_t)&u->u_rx_buf;
   1f916:	4a1e      	ldr	r2, [pc, #120]	; (1f990 <hal_uart_config+0xe4>)
   1f918:	1c50      	adds	r0, r2, #1
   1f91a:	f8c3 0534 	str.w	r0, [r3, #1332]	; 0x534
    nrf_uart->RXD.MAXCNT = sizeof(u->u_rx_buf);
   1f91e:	2001      	movs	r0, #1
   1f920:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
    nrf_uart->TASKS_STARTRX = 1;
   1f924:	6018      	str	r0, [r3, #0]

    u->u_rx_stall = 0;
   1f926:	7813      	ldrb	r3, [r2, #0]
   1f928:	f361 0341 	bfi	r3, r1, #1, #1
   1f92c:	7013      	strb	r3, [r2, #0]
    u->u_tx_started = 0;
   1f92e:	b2db      	uxtb	r3, r3
   1f930:	f361 0382 	bfi	r3, r1, #2, #1
   1f934:	7013      	strb	r3, [r2, #0]
    u->u_open = 1;
   1f936:	b2db      	uxtb	r3, r3
   1f938:	4303      	orrs	r3, r0
   1f93a:	7013      	strb	r3, [r2, #0]

    return 0;
   1f93c:	4620      	mov	r0, r4
}
   1f93e:	bd38      	pop	{r3, r4, r5, pc}
    switch (parity) {
   1f940:	2500      	movs	r5, #0
   1f942:	e7c9      	b.n	1f8d8 <hal_uart_config+0x2c>
        cfg_reg |= UARTE_CONFIG_HWFC;
   1f944:	f045 0501 	orr.w	r5, r5, #1
        if (nrf_uart->PSEL.RTS == 0xffffffff ||
   1f948:	4b12      	ldr	r3, [pc, #72]	; (1f994 <hal_uart_config+0xe8>)
   1f94a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
   1f94e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1f952:	d005      	beq.n	1f960 <hal_uart_config+0xb4>
          nrf_uart->PSEL.CTS == 0xffffffff) {
   1f954:	4b0f      	ldr	r3, [pc, #60]	; (1f994 <hal_uart_config+0xe8>)
   1f956:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
        if (nrf_uart->PSEL.RTS == 0xffffffff ||
   1f95a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1f95e:	d1bf      	bne.n	1f8e0 <hal_uart_config+0x34>
            assert(0);
   1f960:	2300      	movs	r3, #0
   1f962:	461a      	mov	r2, r3
   1f964:	4619      	mov	r1, r3
   1f966:	4618      	mov	r0, r3
   1f968:	f7e9 faf4 	bl	8f54 <__assert_func>
        return -1;
   1f96c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f970:	e7e5      	b.n	1f93e <hal_uart_config+0x92>
        return -1;
   1f972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f976:	e7e2      	b.n	1f93e <hal_uart_config+0x92>
        return -1;
   1f978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f97c:	e7df      	b.n	1f93e <hal_uart_config+0x92>
        return -1;
   1f97e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f982:	e7dc      	b.n	1f93e <hal_uart_config+0x92>
    switch (parity) {
   1f984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f988:	e7d9      	b.n	1f93e <hal_uart_config+0x92>
        return -1;
   1f98a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f98e:	e7d6      	b.n	1f93e <hal_uart_config+0x92>
   1f990:	20006c00 	.word	0x20006c00
   1f994:	40002000 	.word	0x40002000
   1f998:	e000e100 	.word	0xe000e100

0001f99c <hal_uart_close>:
        u = &uart1;
    } else {
        return -1;
    }
#else
    if (port != 0) {
   1f99c:	4602      	mov	r2, r0
   1f99e:	b998      	cbnz	r0, 1f9c8 <hal_uart_close+0x2c>
    }
    nrf_uart = NRF_UARTE0;
    u = &uart0;
#endif

    u->u_open = 0;
   1f9a0:	490b      	ldr	r1, [pc, #44]	; (1f9d0 <hal_uart_close+0x34>)
   1f9a2:	780b      	ldrb	r3, [r1, #0]
   1f9a4:	f36f 0300 	bfc	r3, #0, #1
   1f9a8:	700b      	strb	r3, [r1, #0]
    while (u->u_tx_started) {
   1f9aa:	4b09      	ldr	r3, [pc, #36]	; (1f9d0 <hal_uart_close+0x34>)
   1f9ac:	781b      	ldrb	r3, [r3, #0]
   1f9ae:	f013 0f04 	tst.w	r3, #4
   1f9b2:	d1fa      	bne.n	1f9aa <hal_uart_close+0xe>
        /* Wait here until the dma is finished */
    }
    nrf_uart->ENABLE = 0;
   1f9b4:	4b07      	ldr	r3, [pc, #28]	; (1f9d4 <hal_uart_close+0x38>)
   1f9b6:	2100      	movs	r1, #0
   1f9b8:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    nrf_uart->INTENCLR = 0xffffffff;
   1f9bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f9c0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    return 0;
   1f9c4:	4610      	mov	r0, r2
   1f9c6:	4770      	bx	lr
        return -1;
   1f9c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1f9cc:	4770      	bx	lr
   1f9ce:	bf00      	nop
   1f9d0:	20006c00 	.word	0x20006c00
   1f9d4:	40002000 	.word	0x40002000

0001f9d8 <os_malloc_lock>:
static struct os_mutex os_malloc_mutex;
#endif

static void
os_malloc_lock(void)
{
   1f9d8:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    if (g_os_started) {
   1f9da:	4b08      	ldr	r3, [pc, #32]	; (1f9fc <os_malloc_lock+0x24>)
   1f9dc:	681b      	ldr	r3, [r3, #0]
   1f9de:	b903      	cbnz	r3, 1f9e2 <os_malloc_lock+0xa>
        rc = os_mutex_pend(&os_malloc_mutex, 0xffffffff);
        assert(rc == 0);
    }
#endif
}
   1f9e0:	bd08      	pop	{r3, pc}
        rc = os_mutex_pend(&os_malloc_mutex, 0xffffffff);
   1f9e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f9e6:	4806      	ldr	r0, [pc, #24]	; (1fa00 <os_malloc_lock+0x28>)
   1f9e8:	f7eb f818 	bl	aa1c <os_mutex_pend>
        assert(rc == 0);
   1f9ec:	2800      	cmp	r0, #0
   1f9ee:	d0f7      	beq.n	1f9e0 <os_malloc_lock+0x8>
   1f9f0:	2300      	movs	r3, #0
   1f9f2:	461a      	mov	r2, r3
   1f9f4:	4619      	mov	r1, r3
   1f9f6:	4618      	mov	r0, r3
   1f9f8:	f7e9 faac 	bl	8f54 <__assert_func>
   1f9fc:	20004288 	.word	0x20004288
   1fa00:	20006c1c 	.word	0x20006c1c

0001fa04 <os_malloc_unlock>:

static void
os_malloc_unlock(void)
{
   1fa04:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    if (g_os_started) {
   1fa06:	4b07      	ldr	r3, [pc, #28]	; (1fa24 <os_malloc_unlock+0x20>)
   1fa08:	681b      	ldr	r3, [r3, #0]
   1fa0a:	b903      	cbnz	r3, 1fa0e <os_malloc_unlock+0xa>
        rc = os_mutex_release(&os_malloc_mutex);
        assert(rc == 0);
    }
#endif
}
   1fa0c:	bd08      	pop	{r3, pc}
        rc = os_mutex_release(&os_malloc_mutex);
   1fa0e:	4806      	ldr	r0, [pc, #24]	; (1fa28 <os_malloc_unlock+0x24>)
   1fa10:	f7ea ffa8 	bl	a964 <os_mutex_release>
        assert(rc == 0);
   1fa14:	2800      	cmp	r0, #0
   1fa16:	d0f9      	beq.n	1fa0c <os_malloc_unlock+0x8>
   1fa18:	2300      	movs	r3, #0
   1fa1a:	461a      	mov	r2, r3
   1fa1c:	4619      	mov	r1, r3
   1fa1e:	4618      	mov	r0, r3
   1fa20:	f7e9 fa98 	bl	8f54 <__assert_func>
   1fa24:	20004288 	.word	0x20004288
   1fa28:	20006c1c 	.word	0x20006c1c

0001fa2c <os_malloc>:

void *
os_malloc(size_t size)
{
   1fa2c:	b510      	push	{r4, lr}
   1fa2e:	4604      	mov	r4, r0
    void *ptr;

    os_malloc_lock();
   1fa30:	f7ff ffd2 	bl	1f9d8 <os_malloc_lock>
    ptr = malloc(size);
   1fa34:	4620      	mov	r0, r4
   1fa36:	f7ec faad 	bl	bf94 <malloc>
   1fa3a:	4604      	mov	r4, r0
    os_malloc_unlock();
   1fa3c:	f7ff ffe2 	bl	1fa04 <os_malloc_unlock>

    return ptr;
}
   1fa40:	4620      	mov	r0, r4
   1fa42:	bd10      	pop	{r4, pc}

0001fa44 <os_free>:

void
os_free(void *mem)
{
   1fa44:	b510      	push	{r4, lr}
   1fa46:	4604      	mov	r4, r0
    os_malloc_lock();
   1fa48:	f7ff ffc6 	bl	1f9d8 <os_malloc_lock>
    free(mem);
   1fa4c:	4620      	mov	r0, r4
   1fa4e:	f7ec fad7 	bl	c000 <free>
    os_malloc_unlock();
   1fa52:	f7ff ffd7 	bl	1fa04 <os_malloc_unlock>
}
   1fa56:	bd10      	pop	{r4, pc}

0001fa58 <crc8_init>:

uint8_t
crc8_init(void)
{
    return 0xff;
}
   1fa58:	20ff      	movs	r0, #255	; 0xff
   1fa5a:	4770      	bx	lr

0001fa5c <crc8_calc>:
crc8_calc(uint8_t val, void *buf, int cnt)
{
	int i;
	uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
   1fa5c:	f04f 0c00 	mov.w	ip, #0
   1fa60:	4594      	cmp	ip, r2
   1fa62:	da16      	bge.n	1fa92 <crc8_calc+0x36>
{
   1fa64:	b410      	push	{r4}
		val ^= p[i];
   1fa66:	f811 300c 	ldrb.w	r3, [r1, ip]
   1fa6a:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   1fa6c:	0918      	lsrs	r0, r3, #4
   1fa6e:	4c09      	ldr	r4, [pc, #36]	; (1fa94 <crc8_calc+0x38>)
   1fa70:	5620      	ldrsb	r0, [r4, r0]
   1fa72:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   1fa76:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   1fa78:	f3c0 1003 	ubfx	r0, r0, #4, #4
   1fa7c:	5620      	ldrsb	r0, [r4, r0]
   1fa7e:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   1fa82:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   1fa84:	f10c 0c01 	add.w	ip, ip, #1
   1fa88:	4594      	cmp	ip, r2
   1fa8a:	dbec      	blt.n	1fa66 <crc8_calc+0xa>
	}
	return val;
}
   1fa8c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1fa90:	4770      	bx	lr
   1fa92:	4770      	bx	lr
   1fa94:	00023d90 	.word	0x00023d90

0001fa98 <__aeabi_drsub>:
   1fa98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1fa9c:	e002      	b.n	1faa4 <__adddf3>
   1fa9e:	bf00      	nop

0001faa0 <__aeabi_dsub>:
   1faa0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001faa4 <__adddf3>:
   1faa4:	b530      	push	{r4, r5, lr}
   1faa6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1faaa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1faae:	ea94 0f05 	teq	r4, r5
   1fab2:	bf08      	it	eq
   1fab4:	ea90 0f02 	teqeq	r0, r2
   1fab8:	bf1f      	itttt	ne
   1faba:	ea54 0c00 	orrsne.w	ip, r4, r0
   1fabe:	ea55 0c02 	orrsne.w	ip, r5, r2
   1fac2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1fac6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1faca:	f000 80e2 	beq.w	1fc92 <__adddf3+0x1ee>
   1face:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1fad2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1fad6:	bfb8      	it	lt
   1fad8:	426d      	neglt	r5, r5
   1fada:	dd0c      	ble.n	1faf6 <__adddf3+0x52>
   1fadc:	442c      	add	r4, r5
   1fade:	ea80 0202 	eor.w	r2, r0, r2
   1fae2:	ea81 0303 	eor.w	r3, r1, r3
   1fae6:	ea82 0000 	eor.w	r0, r2, r0
   1faea:	ea83 0101 	eor.w	r1, r3, r1
   1faee:	ea80 0202 	eor.w	r2, r0, r2
   1faf2:	ea81 0303 	eor.w	r3, r1, r3
   1faf6:	2d36      	cmp	r5, #54	; 0x36
   1faf8:	bf88      	it	hi
   1fafa:	bd30      	pophi	{r4, r5, pc}
   1fafc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1fb00:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1fb04:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1fb08:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1fb0c:	d002      	beq.n	1fb14 <__adddf3+0x70>
   1fb0e:	4240      	negs	r0, r0
   1fb10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1fb14:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1fb18:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1fb1c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1fb20:	d002      	beq.n	1fb28 <__adddf3+0x84>
   1fb22:	4252      	negs	r2, r2
   1fb24:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1fb28:	ea94 0f05 	teq	r4, r5
   1fb2c:	f000 80a7 	beq.w	1fc7e <__adddf3+0x1da>
   1fb30:	f1a4 0401 	sub.w	r4, r4, #1
   1fb34:	f1d5 0e20 	rsbs	lr, r5, #32
   1fb38:	db0d      	blt.n	1fb56 <__adddf3+0xb2>
   1fb3a:	fa02 fc0e 	lsl.w	ip, r2, lr
   1fb3e:	fa22 f205 	lsr.w	r2, r2, r5
   1fb42:	1880      	adds	r0, r0, r2
   1fb44:	f141 0100 	adc.w	r1, r1, #0
   1fb48:	fa03 f20e 	lsl.w	r2, r3, lr
   1fb4c:	1880      	adds	r0, r0, r2
   1fb4e:	fa43 f305 	asr.w	r3, r3, r5
   1fb52:	4159      	adcs	r1, r3
   1fb54:	e00e      	b.n	1fb74 <__adddf3+0xd0>
   1fb56:	f1a5 0520 	sub.w	r5, r5, #32
   1fb5a:	f10e 0e20 	add.w	lr, lr, #32
   1fb5e:	2a01      	cmp	r2, #1
   1fb60:	fa03 fc0e 	lsl.w	ip, r3, lr
   1fb64:	bf28      	it	cs
   1fb66:	f04c 0c02 	orrcs.w	ip, ip, #2
   1fb6a:	fa43 f305 	asr.w	r3, r3, r5
   1fb6e:	18c0      	adds	r0, r0, r3
   1fb70:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1fb74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1fb78:	d507      	bpl.n	1fb8a <__adddf3+0xe6>
   1fb7a:	f04f 0e00 	mov.w	lr, #0
   1fb7e:	f1dc 0c00 	rsbs	ip, ip, #0
   1fb82:	eb7e 0000 	sbcs.w	r0, lr, r0
   1fb86:	eb6e 0101 	sbc.w	r1, lr, r1
   1fb8a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1fb8e:	d31b      	bcc.n	1fbc8 <__adddf3+0x124>
   1fb90:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1fb94:	d30c      	bcc.n	1fbb0 <__adddf3+0x10c>
   1fb96:	0849      	lsrs	r1, r1, #1
   1fb98:	ea5f 0030 	movs.w	r0, r0, rrx
   1fb9c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1fba0:	f104 0401 	add.w	r4, r4, #1
   1fba4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1fba8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1fbac:	f080 809a 	bcs.w	1fce4 <__adddf3+0x240>
   1fbb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1fbb4:	bf08      	it	eq
   1fbb6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1fbba:	f150 0000 	adcs.w	r0, r0, #0
   1fbbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1fbc2:	ea41 0105 	orr.w	r1, r1, r5
   1fbc6:	bd30      	pop	{r4, r5, pc}
   1fbc8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1fbcc:	4140      	adcs	r0, r0
   1fbce:	eb41 0101 	adc.w	r1, r1, r1
   1fbd2:	3c01      	subs	r4, #1
   1fbd4:	bf28      	it	cs
   1fbd6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1fbda:	d2e9      	bcs.n	1fbb0 <__adddf3+0x10c>
   1fbdc:	f091 0f00 	teq	r1, #0
   1fbe0:	bf04      	itt	eq
   1fbe2:	4601      	moveq	r1, r0
   1fbe4:	2000      	moveq	r0, #0
   1fbe6:	fab1 f381 	clz	r3, r1
   1fbea:	bf08      	it	eq
   1fbec:	3320      	addeq	r3, #32
   1fbee:	f1a3 030b 	sub.w	r3, r3, #11
   1fbf2:	f1b3 0220 	subs.w	r2, r3, #32
   1fbf6:	da0c      	bge.n	1fc12 <__adddf3+0x16e>
   1fbf8:	320c      	adds	r2, #12
   1fbfa:	dd08      	ble.n	1fc0e <__adddf3+0x16a>
   1fbfc:	f102 0c14 	add.w	ip, r2, #20
   1fc00:	f1c2 020c 	rsb	r2, r2, #12
   1fc04:	fa01 f00c 	lsl.w	r0, r1, ip
   1fc08:	fa21 f102 	lsr.w	r1, r1, r2
   1fc0c:	e00c      	b.n	1fc28 <__adddf3+0x184>
   1fc0e:	f102 0214 	add.w	r2, r2, #20
   1fc12:	bfd8      	it	le
   1fc14:	f1c2 0c20 	rsble	ip, r2, #32
   1fc18:	fa01 f102 	lsl.w	r1, r1, r2
   1fc1c:	fa20 fc0c 	lsr.w	ip, r0, ip
   1fc20:	bfdc      	itt	le
   1fc22:	ea41 010c 	orrle.w	r1, r1, ip
   1fc26:	4090      	lslle	r0, r2
   1fc28:	1ae4      	subs	r4, r4, r3
   1fc2a:	bfa2      	ittt	ge
   1fc2c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1fc30:	4329      	orrge	r1, r5
   1fc32:	bd30      	popge	{r4, r5, pc}
   1fc34:	ea6f 0404 	mvn.w	r4, r4
   1fc38:	3c1f      	subs	r4, #31
   1fc3a:	da1c      	bge.n	1fc76 <__adddf3+0x1d2>
   1fc3c:	340c      	adds	r4, #12
   1fc3e:	dc0e      	bgt.n	1fc5e <__adddf3+0x1ba>
   1fc40:	f104 0414 	add.w	r4, r4, #20
   1fc44:	f1c4 0220 	rsb	r2, r4, #32
   1fc48:	fa20 f004 	lsr.w	r0, r0, r4
   1fc4c:	fa01 f302 	lsl.w	r3, r1, r2
   1fc50:	ea40 0003 	orr.w	r0, r0, r3
   1fc54:	fa21 f304 	lsr.w	r3, r1, r4
   1fc58:	ea45 0103 	orr.w	r1, r5, r3
   1fc5c:	bd30      	pop	{r4, r5, pc}
   1fc5e:	f1c4 040c 	rsb	r4, r4, #12
   1fc62:	f1c4 0220 	rsb	r2, r4, #32
   1fc66:	fa20 f002 	lsr.w	r0, r0, r2
   1fc6a:	fa01 f304 	lsl.w	r3, r1, r4
   1fc6e:	ea40 0003 	orr.w	r0, r0, r3
   1fc72:	4629      	mov	r1, r5
   1fc74:	bd30      	pop	{r4, r5, pc}
   1fc76:	fa21 f004 	lsr.w	r0, r1, r4
   1fc7a:	4629      	mov	r1, r5
   1fc7c:	bd30      	pop	{r4, r5, pc}
   1fc7e:	f094 0f00 	teq	r4, #0
   1fc82:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1fc86:	bf06      	itte	eq
   1fc88:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1fc8c:	3401      	addeq	r4, #1
   1fc8e:	3d01      	subne	r5, #1
   1fc90:	e74e      	b.n	1fb30 <__adddf3+0x8c>
   1fc92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1fc96:	bf18      	it	ne
   1fc98:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1fc9c:	d029      	beq.n	1fcf2 <__adddf3+0x24e>
   1fc9e:	ea94 0f05 	teq	r4, r5
   1fca2:	bf08      	it	eq
   1fca4:	ea90 0f02 	teqeq	r0, r2
   1fca8:	d005      	beq.n	1fcb6 <__adddf3+0x212>
   1fcaa:	ea54 0c00 	orrs.w	ip, r4, r0
   1fcae:	bf04      	itt	eq
   1fcb0:	4619      	moveq	r1, r3
   1fcb2:	4610      	moveq	r0, r2
   1fcb4:	bd30      	pop	{r4, r5, pc}
   1fcb6:	ea91 0f03 	teq	r1, r3
   1fcba:	bf1e      	ittt	ne
   1fcbc:	2100      	movne	r1, #0
   1fcbe:	2000      	movne	r0, #0
   1fcc0:	bd30      	popne	{r4, r5, pc}
   1fcc2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1fcc6:	d105      	bne.n	1fcd4 <__adddf3+0x230>
   1fcc8:	0040      	lsls	r0, r0, #1
   1fcca:	4149      	adcs	r1, r1
   1fccc:	bf28      	it	cs
   1fcce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1fcd2:	bd30      	pop	{r4, r5, pc}
   1fcd4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1fcd8:	bf3c      	itt	cc
   1fcda:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1fcde:	bd30      	popcc	{r4, r5, pc}
   1fce0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1fce4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1fce8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1fcec:	f04f 0000 	mov.w	r0, #0
   1fcf0:	bd30      	pop	{r4, r5, pc}
   1fcf2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1fcf6:	bf1a      	itte	ne
   1fcf8:	4619      	movne	r1, r3
   1fcfa:	4610      	movne	r0, r2
   1fcfc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1fd00:	bf1c      	itt	ne
   1fd02:	460b      	movne	r3, r1
   1fd04:	4602      	movne	r2, r0
   1fd06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1fd0a:	bf06      	itte	eq
   1fd0c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1fd10:	ea91 0f03 	teqeq	r1, r3
   1fd14:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1fd18:	bd30      	pop	{r4, r5, pc}
   1fd1a:	bf00      	nop

0001fd1c <__aeabi_ui2d>:
   1fd1c:	f090 0f00 	teq	r0, #0
   1fd20:	bf04      	itt	eq
   1fd22:	2100      	moveq	r1, #0
   1fd24:	4770      	bxeq	lr
   1fd26:	b530      	push	{r4, r5, lr}
   1fd28:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1fd2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1fd30:	f04f 0500 	mov.w	r5, #0
   1fd34:	f04f 0100 	mov.w	r1, #0
   1fd38:	e750      	b.n	1fbdc <__adddf3+0x138>
   1fd3a:	bf00      	nop

0001fd3c <__aeabi_i2d>:
   1fd3c:	f090 0f00 	teq	r0, #0
   1fd40:	bf04      	itt	eq
   1fd42:	2100      	moveq	r1, #0
   1fd44:	4770      	bxeq	lr
   1fd46:	b530      	push	{r4, r5, lr}
   1fd48:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1fd4c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1fd50:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1fd54:	bf48      	it	mi
   1fd56:	4240      	negmi	r0, r0
   1fd58:	f04f 0100 	mov.w	r1, #0
   1fd5c:	e73e      	b.n	1fbdc <__adddf3+0x138>
   1fd5e:	bf00      	nop

0001fd60 <__aeabi_f2d>:
   1fd60:	0042      	lsls	r2, r0, #1
   1fd62:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1fd66:	ea4f 0131 	mov.w	r1, r1, rrx
   1fd6a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1fd6e:	bf1f      	itttt	ne
   1fd70:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1fd74:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1fd78:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1fd7c:	4770      	bxne	lr
   1fd7e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1fd82:	bf08      	it	eq
   1fd84:	4770      	bxeq	lr
   1fd86:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1fd8a:	bf04      	itt	eq
   1fd8c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1fd90:	4770      	bxeq	lr
   1fd92:	b530      	push	{r4, r5, lr}
   1fd94:	f44f 7460 	mov.w	r4, #896	; 0x380
   1fd98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1fd9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1fda0:	e71c      	b.n	1fbdc <__adddf3+0x138>
   1fda2:	bf00      	nop

0001fda4 <__aeabi_ul2d>:
   1fda4:	ea50 0201 	orrs.w	r2, r0, r1
   1fda8:	bf08      	it	eq
   1fdaa:	4770      	bxeq	lr
   1fdac:	b530      	push	{r4, r5, lr}
   1fdae:	f04f 0500 	mov.w	r5, #0
   1fdb2:	e00a      	b.n	1fdca <__aeabi_l2d+0x16>

0001fdb4 <__aeabi_l2d>:
   1fdb4:	ea50 0201 	orrs.w	r2, r0, r1
   1fdb8:	bf08      	it	eq
   1fdba:	4770      	bxeq	lr
   1fdbc:	b530      	push	{r4, r5, lr}
   1fdbe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1fdc2:	d502      	bpl.n	1fdca <__aeabi_l2d+0x16>
   1fdc4:	4240      	negs	r0, r0
   1fdc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1fdca:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1fdce:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1fdd2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1fdd6:	f43f aed8 	beq.w	1fb8a <__adddf3+0xe6>
   1fdda:	f04f 0203 	mov.w	r2, #3
   1fdde:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1fde2:	bf18      	it	ne
   1fde4:	3203      	addne	r2, #3
   1fde6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1fdea:	bf18      	it	ne
   1fdec:	3203      	addne	r2, #3
   1fdee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1fdf2:	f1c2 0320 	rsb	r3, r2, #32
   1fdf6:	fa00 fc03 	lsl.w	ip, r0, r3
   1fdfa:	fa20 f002 	lsr.w	r0, r0, r2
   1fdfe:	fa01 fe03 	lsl.w	lr, r1, r3
   1fe02:	ea40 000e 	orr.w	r0, r0, lr
   1fe06:	fa21 f102 	lsr.w	r1, r1, r2
   1fe0a:	4414      	add	r4, r2
   1fe0c:	e6bd      	b.n	1fb8a <__adddf3+0xe6>
   1fe0e:	bf00      	nop

0001fe10 <__aeabi_dmul>:
   1fe10:	b570      	push	{r4, r5, r6, lr}
   1fe12:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1fe16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1fe1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1fe1e:	bf1d      	ittte	ne
   1fe20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1fe24:	ea94 0f0c 	teqne	r4, ip
   1fe28:	ea95 0f0c 	teqne	r5, ip
   1fe2c:	f000 f8de 	bleq	1ffec <__aeabi_dmul+0x1dc>
   1fe30:	442c      	add	r4, r5
   1fe32:	ea81 0603 	eor.w	r6, r1, r3
   1fe36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1fe3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1fe3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1fe42:	bf18      	it	ne
   1fe44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1fe48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1fe4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1fe50:	d038      	beq.n	1fec4 <__aeabi_dmul+0xb4>
   1fe52:	fba0 ce02 	umull	ip, lr, r0, r2
   1fe56:	f04f 0500 	mov.w	r5, #0
   1fe5a:	fbe1 e502 	umlal	lr, r5, r1, r2
   1fe5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1fe62:	fbe0 e503 	umlal	lr, r5, r0, r3
   1fe66:	f04f 0600 	mov.w	r6, #0
   1fe6a:	fbe1 5603 	umlal	r5, r6, r1, r3
   1fe6e:	f09c 0f00 	teq	ip, #0
   1fe72:	bf18      	it	ne
   1fe74:	f04e 0e01 	orrne.w	lr, lr, #1
   1fe78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1fe7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1fe80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1fe84:	d204      	bcs.n	1fe90 <__aeabi_dmul+0x80>
   1fe86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1fe8a:	416d      	adcs	r5, r5
   1fe8c:	eb46 0606 	adc.w	r6, r6, r6
   1fe90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1fe94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1fe98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1fe9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1fea0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1fea4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1fea8:	bf88      	it	hi
   1feaa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1feae:	d81e      	bhi.n	1feee <__aeabi_dmul+0xde>
   1feb0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1feb4:	bf08      	it	eq
   1feb6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1feba:	f150 0000 	adcs.w	r0, r0, #0
   1febe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1fec2:	bd70      	pop	{r4, r5, r6, pc}
   1fec4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1fec8:	ea46 0101 	orr.w	r1, r6, r1
   1fecc:	ea40 0002 	orr.w	r0, r0, r2
   1fed0:	ea81 0103 	eor.w	r1, r1, r3
   1fed4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1fed8:	bfc2      	ittt	gt
   1feda:	ebd4 050c 	rsbsgt	r5, r4, ip
   1fede:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1fee2:	bd70      	popgt	{r4, r5, r6, pc}
   1fee4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1fee8:	f04f 0e00 	mov.w	lr, #0
   1feec:	3c01      	subs	r4, #1
   1feee:	f300 80ab 	bgt.w	20048 <__aeabi_dmul+0x238>
   1fef2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1fef6:	bfde      	ittt	le
   1fef8:	2000      	movle	r0, #0
   1fefa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1fefe:	bd70      	pople	{r4, r5, r6, pc}
   1ff00:	f1c4 0400 	rsb	r4, r4, #0
   1ff04:	3c20      	subs	r4, #32
   1ff06:	da35      	bge.n	1ff74 <__aeabi_dmul+0x164>
   1ff08:	340c      	adds	r4, #12
   1ff0a:	dc1b      	bgt.n	1ff44 <__aeabi_dmul+0x134>
   1ff0c:	f104 0414 	add.w	r4, r4, #20
   1ff10:	f1c4 0520 	rsb	r5, r4, #32
   1ff14:	fa00 f305 	lsl.w	r3, r0, r5
   1ff18:	fa20 f004 	lsr.w	r0, r0, r4
   1ff1c:	fa01 f205 	lsl.w	r2, r1, r5
   1ff20:	ea40 0002 	orr.w	r0, r0, r2
   1ff24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1ff28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1ff2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1ff30:	fa21 f604 	lsr.w	r6, r1, r4
   1ff34:	eb42 0106 	adc.w	r1, r2, r6
   1ff38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1ff3c:	bf08      	it	eq
   1ff3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1ff42:	bd70      	pop	{r4, r5, r6, pc}
   1ff44:	f1c4 040c 	rsb	r4, r4, #12
   1ff48:	f1c4 0520 	rsb	r5, r4, #32
   1ff4c:	fa00 f304 	lsl.w	r3, r0, r4
   1ff50:	fa20 f005 	lsr.w	r0, r0, r5
   1ff54:	fa01 f204 	lsl.w	r2, r1, r4
   1ff58:	ea40 0002 	orr.w	r0, r0, r2
   1ff5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1ff60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1ff64:	f141 0100 	adc.w	r1, r1, #0
   1ff68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1ff6c:	bf08      	it	eq
   1ff6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1ff72:	bd70      	pop	{r4, r5, r6, pc}
   1ff74:	f1c4 0520 	rsb	r5, r4, #32
   1ff78:	fa00 f205 	lsl.w	r2, r0, r5
   1ff7c:	ea4e 0e02 	orr.w	lr, lr, r2
   1ff80:	fa20 f304 	lsr.w	r3, r0, r4
   1ff84:	fa01 f205 	lsl.w	r2, r1, r5
   1ff88:	ea43 0302 	orr.w	r3, r3, r2
   1ff8c:	fa21 f004 	lsr.w	r0, r1, r4
   1ff90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1ff94:	fa21 f204 	lsr.w	r2, r1, r4
   1ff98:	ea20 0002 	bic.w	r0, r0, r2
   1ff9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1ffa0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1ffa4:	bf08      	it	eq
   1ffa6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1ffaa:	bd70      	pop	{r4, r5, r6, pc}
   1ffac:	f094 0f00 	teq	r4, #0
   1ffb0:	d10f      	bne.n	1ffd2 <__aeabi_dmul+0x1c2>
   1ffb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1ffb6:	0040      	lsls	r0, r0, #1
   1ffb8:	eb41 0101 	adc.w	r1, r1, r1
   1ffbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1ffc0:	bf08      	it	eq
   1ffc2:	3c01      	subeq	r4, #1
   1ffc4:	d0f7      	beq.n	1ffb6 <__aeabi_dmul+0x1a6>
   1ffc6:	ea41 0106 	orr.w	r1, r1, r6
   1ffca:	f095 0f00 	teq	r5, #0
   1ffce:	bf18      	it	ne
   1ffd0:	4770      	bxne	lr
   1ffd2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1ffd6:	0052      	lsls	r2, r2, #1
   1ffd8:	eb43 0303 	adc.w	r3, r3, r3
   1ffdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1ffe0:	bf08      	it	eq
   1ffe2:	3d01      	subeq	r5, #1
   1ffe4:	d0f7      	beq.n	1ffd6 <__aeabi_dmul+0x1c6>
   1ffe6:	ea43 0306 	orr.w	r3, r3, r6
   1ffea:	4770      	bx	lr
   1ffec:	ea94 0f0c 	teq	r4, ip
   1fff0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1fff4:	bf18      	it	ne
   1fff6:	ea95 0f0c 	teqne	r5, ip
   1fffa:	d00c      	beq.n	20016 <__aeabi_dmul+0x206>
   1fffc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   20000:	bf18      	it	ne
   20002:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   20006:	d1d1      	bne.n	1ffac <__aeabi_dmul+0x19c>
   20008:	ea81 0103 	eor.w	r1, r1, r3
   2000c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   20010:	f04f 0000 	mov.w	r0, #0
   20014:	bd70      	pop	{r4, r5, r6, pc}
   20016:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   2001a:	bf06      	itte	eq
   2001c:	4610      	moveq	r0, r2
   2001e:	4619      	moveq	r1, r3
   20020:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   20024:	d019      	beq.n	2005a <__aeabi_dmul+0x24a>
   20026:	ea94 0f0c 	teq	r4, ip
   2002a:	d102      	bne.n	20032 <__aeabi_dmul+0x222>
   2002c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   20030:	d113      	bne.n	2005a <__aeabi_dmul+0x24a>
   20032:	ea95 0f0c 	teq	r5, ip
   20036:	d105      	bne.n	20044 <__aeabi_dmul+0x234>
   20038:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   2003c:	bf1c      	itt	ne
   2003e:	4610      	movne	r0, r2
   20040:	4619      	movne	r1, r3
   20042:	d10a      	bne.n	2005a <__aeabi_dmul+0x24a>
   20044:	ea81 0103 	eor.w	r1, r1, r3
   20048:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   2004c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   20050:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   20054:	f04f 0000 	mov.w	r0, #0
   20058:	bd70      	pop	{r4, r5, r6, pc}
   2005a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   2005e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   20062:	bd70      	pop	{r4, r5, r6, pc}

00020064 <__aeabi_ddiv>:
   20064:	b570      	push	{r4, r5, r6, lr}
   20066:	f04f 0cff 	mov.w	ip, #255	; 0xff
   2006a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   2006e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   20072:	bf1d      	ittte	ne
   20074:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   20078:	ea94 0f0c 	teqne	r4, ip
   2007c:	ea95 0f0c 	teqne	r5, ip
   20080:	f000 f8a7 	bleq	201d2 <__aeabi_ddiv+0x16e>
   20084:	eba4 0405 	sub.w	r4, r4, r5
   20088:	ea81 0e03 	eor.w	lr, r1, r3
   2008c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   20090:	ea4f 3101 	mov.w	r1, r1, lsl #12
   20094:	f000 8088 	beq.w	201a8 <__aeabi_ddiv+0x144>
   20098:	ea4f 3303 	mov.w	r3, r3, lsl #12
   2009c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   200a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   200a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   200a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   200ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   200b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   200b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   200b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   200bc:	429d      	cmp	r5, r3
   200be:	bf08      	it	eq
   200c0:	4296      	cmpeq	r6, r2
   200c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   200c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   200ca:	d202      	bcs.n	200d2 <__aeabi_ddiv+0x6e>
   200cc:	085b      	lsrs	r3, r3, #1
   200ce:	ea4f 0232 	mov.w	r2, r2, rrx
   200d2:	1ab6      	subs	r6, r6, r2
   200d4:	eb65 0503 	sbc.w	r5, r5, r3
   200d8:	085b      	lsrs	r3, r3, #1
   200da:	ea4f 0232 	mov.w	r2, r2, rrx
   200de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   200e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   200e6:	ebb6 0e02 	subs.w	lr, r6, r2
   200ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   200ee:	bf22      	ittt	cs
   200f0:	1ab6      	subcs	r6, r6, r2
   200f2:	4675      	movcs	r5, lr
   200f4:	ea40 000c 	orrcs.w	r0, r0, ip
   200f8:	085b      	lsrs	r3, r3, #1
   200fa:	ea4f 0232 	mov.w	r2, r2, rrx
   200fe:	ebb6 0e02 	subs.w	lr, r6, r2
   20102:	eb75 0e03 	sbcs.w	lr, r5, r3
   20106:	bf22      	ittt	cs
   20108:	1ab6      	subcs	r6, r6, r2
   2010a:	4675      	movcs	r5, lr
   2010c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   20110:	085b      	lsrs	r3, r3, #1
   20112:	ea4f 0232 	mov.w	r2, r2, rrx
   20116:	ebb6 0e02 	subs.w	lr, r6, r2
   2011a:	eb75 0e03 	sbcs.w	lr, r5, r3
   2011e:	bf22      	ittt	cs
   20120:	1ab6      	subcs	r6, r6, r2
   20122:	4675      	movcs	r5, lr
   20124:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   20128:	085b      	lsrs	r3, r3, #1
   2012a:	ea4f 0232 	mov.w	r2, r2, rrx
   2012e:	ebb6 0e02 	subs.w	lr, r6, r2
   20132:	eb75 0e03 	sbcs.w	lr, r5, r3
   20136:	bf22      	ittt	cs
   20138:	1ab6      	subcs	r6, r6, r2
   2013a:	4675      	movcs	r5, lr
   2013c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   20140:	ea55 0e06 	orrs.w	lr, r5, r6
   20144:	d018      	beq.n	20178 <__aeabi_ddiv+0x114>
   20146:	ea4f 1505 	mov.w	r5, r5, lsl #4
   2014a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   2014e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   20152:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   20156:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   2015a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   2015e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   20162:	d1c0      	bne.n	200e6 <__aeabi_ddiv+0x82>
   20164:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   20168:	d10b      	bne.n	20182 <__aeabi_ddiv+0x11e>
   2016a:	ea41 0100 	orr.w	r1, r1, r0
   2016e:	f04f 0000 	mov.w	r0, #0
   20172:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   20176:	e7b6      	b.n	200e6 <__aeabi_ddiv+0x82>
   20178:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   2017c:	bf04      	itt	eq
   2017e:	4301      	orreq	r1, r0
   20180:	2000      	moveq	r0, #0
   20182:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   20186:	bf88      	it	hi
   20188:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   2018c:	f63f aeaf 	bhi.w	1feee <__aeabi_dmul+0xde>
   20190:	ebb5 0c03 	subs.w	ip, r5, r3
   20194:	bf04      	itt	eq
   20196:	ebb6 0c02 	subseq.w	ip, r6, r2
   2019a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   2019e:	f150 0000 	adcs.w	r0, r0, #0
   201a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   201a6:	bd70      	pop	{r4, r5, r6, pc}
   201a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   201ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   201b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   201b4:	bfc2      	ittt	gt
   201b6:	ebd4 050c 	rsbsgt	r5, r4, ip
   201ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   201be:	bd70      	popgt	{r4, r5, r6, pc}
   201c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   201c4:	f04f 0e00 	mov.w	lr, #0
   201c8:	3c01      	subs	r4, #1
   201ca:	e690      	b.n	1feee <__aeabi_dmul+0xde>
   201cc:	ea45 0e06 	orr.w	lr, r5, r6
   201d0:	e68d      	b.n	1feee <__aeabi_dmul+0xde>
   201d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   201d6:	ea94 0f0c 	teq	r4, ip
   201da:	bf08      	it	eq
   201dc:	ea95 0f0c 	teqeq	r5, ip
   201e0:	f43f af3b 	beq.w	2005a <__aeabi_dmul+0x24a>
   201e4:	ea94 0f0c 	teq	r4, ip
   201e8:	d10a      	bne.n	20200 <__aeabi_ddiv+0x19c>
   201ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   201ee:	f47f af34 	bne.w	2005a <__aeabi_dmul+0x24a>
   201f2:	ea95 0f0c 	teq	r5, ip
   201f6:	f47f af25 	bne.w	20044 <__aeabi_dmul+0x234>
   201fa:	4610      	mov	r0, r2
   201fc:	4619      	mov	r1, r3
   201fe:	e72c      	b.n	2005a <__aeabi_dmul+0x24a>
   20200:	ea95 0f0c 	teq	r5, ip
   20204:	d106      	bne.n	20214 <__aeabi_ddiv+0x1b0>
   20206:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   2020a:	f43f aefd 	beq.w	20008 <__aeabi_dmul+0x1f8>
   2020e:	4610      	mov	r0, r2
   20210:	4619      	mov	r1, r3
   20212:	e722      	b.n	2005a <__aeabi_dmul+0x24a>
   20214:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   20218:	bf18      	it	ne
   2021a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   2021e:	f47f aec5 	bne.w	1ffac <__aeabi_dmul+0x19c>
   20222:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   20226:	f47f af0d 	bne.w	20044 <__aeabi_dmul+0x234>
   2022a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   2022e:	f47f aeeb 	bne.w	20008 <__aeabi_dmul+0x1f8>
   20232:	e712      	b.n	2005a <__aeabi_dmul+0x24a>

00020234 <__gedf2>:
   20234:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   20238:	e006      	b.n	20248 <__cmpdf2+0x4>
   2023a:	bf00      	nop

0002023c <__ledf2>:
   2023c:	f04f 0c01 	mov.w	ip, #1
   20240:	e002      	b.n	20248 <__cmpdf2+0x4>
   20242:	bf00      	nop

00020244 <__cmpdf2>:
   20244:	f04f 0c01 	mov.w	ip, #1
   20248:	f84d cd04 	str.w	ip, [sp, #-4]!
   2024c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   20250:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   20254:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   20258:	bf18      	it	ne
   2025a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   2025e:	d01b      	beq.n	20298 <__cmpdf2+0x54>
   20260:	b001      	add	sp, #4
   20262:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   20266:	bf0c      	ite	eq
   20268:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   2026c:	ea91 0f03 	teqne	r1, r3
   20270:	bf02      	ittt	eq
   20272:	ea90 0f02 	teqeq	r0, r2
   20276:	2000      	moveq	r0, #0
   20278:	4770      	bxeq	lr
   2027a:	f110 0f00 	cmn.w	r0, #0
   2027e:	ea91 0f03 	teq	r1, r3
   20282:	bf58      	it	pl
   20284:	4299      	cmppl	r1, r3
   20286:	bf08      	it	eq
   20288:	4290      	cmpeq	r0, r2
   2028a:	bf2c      	ite	cs
   2028c:	17d8      	asrcs	r0, r3, #31
   2028e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   20292:	f040 0001 	orr.w	r0, r0, #1
   20296:	4770      	bx	lr
   20298:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   2029c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   202a0:	d102      	bne.n	202a8 <__cmpdf2+0x64>
   202a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   202a6:	d107      	bne.n	202b8 <__cmpdf2+0x74>
   202a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   202ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   202b0:	d1d6      	bne.n	20260 <__cmpdf2+0x1c>
   202b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   202b6:	d0d3      	beq.n	20260 <__cmpdf2+0x1c>
   202b8:	f85d 0b04 	ldr.w	r0, [sp], #4
   202bc:	4770      	bx	lr
   202be:	bf00      	nop

000202c0 <__aeabi_cdrcmple>:
   202c0:	4684      	mov	ip, r0
   202c2:	4610      	mov	r0, r2
   202c4:	4662      	mov	r2, ip
   202c6:	468c      	mov	ip, r1
   202c8:	4619      	mov	r1, r3
   202ca:	4663      	mov	r3, ip
   202cc:	e000      	b.n	202d0 <__aeabi_cdcmpeq>
   202ce:	bf00      	nop

000202d0 <__aeabi_cdcmpeq>:
   202d0:	b501      	push	{r0, lr}
   202d2:	f7ff ffb7 	bl	20244 <__cmpdf2>
   202d6:	2800      	cmp	r0, #0
   202d8:	bf48      	it	mi
   202da:	f110 0f00 	cmnmi.w	r0, #0
   202de:	bd01      	pop	{r0, pc}

000202e0 <__aeabi_dcmpeq>:
   202e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   202e4:	f7ff fff4 	bl	202d0 <__aeabi_cdcmpeq>
   202e8:	bf0c      	ite	eq
   202ea:	2001      	moveq	r0, #1
   202ec:	2000      	movne	r0, #0
   202ee:	f85d fb08 	ldr.w	pc, [sp], #8
   202f2:	bf00      	nop

000202f4 <__aeabi_dcmplt>:
   202f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   202f8:	f7ff ffea 	bl	202d0 <__aeabi_cdcmpeq>
   202fc:	bf34      	ite	cc
   202fe:	2001      	movcc	r0, #1
   20300:	2000      	movcs	r0, #0
   20302:	f85d fb08 	ldr.w	pc, [sp], #8
   20306:	bf00      	nop

00020308 <__aeabi_dcmple>:
   20308:	f84d ed08 	str.w	lr, [sp, #-8]!
   2030c:	f7ff ffe0 	bl	202d0 <__aeabi_cdcmpeq>
   20310:	bf94      	ite	ls
   20312:	2001      	movls	r0, #1
   20314:	2000      	movhi	r0, #0
   20316:	f85d fb08 	ldr.w	pc, [sp], #8
   2031a:	bf00      	nop

0002031c <__aeabi_dcmpge>:
   2031c:	f84d ed08 	str.w	lr, [sp, #-8]!
   20320:	f7ff ffce 	bl	202c0 <__aeabi_cdrcmple>
   20324:	bf94      	ite	ls
   20326:	2001      	movls	r0, #1
   20328:	2000      	movhi	r0, #0
   2032a:	f85d fb08 	ldr.w	pc, [sp], #8
   2032e:	bf00      	nop

00020330 <__aeabi_dcmpgt>:
   20330:	f84d ed08 	str.w	lr, [sp, #-8]!
   20334:	f7ff ffc4 	bl	202c0 <__aeabi_cdrcmple>
   20338:	bf34      	ite	cc
   2033a:	2001      	movcc	r0, #1
   2033c:	2000      	movcs	r0, #0
   2033e:	f85d fb08 	ldr.w	pc, [sp], #8
   20342:	bf00      	nop

00020344 <__aeabi_dcmpun>:
   20344:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   20348:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   2034c:	d102      	bne.n	20354 <__aeabi_dcmpun+0x10>
   2034e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   20352:	d10a      	bne.n	2036a <__aeabi_dcmpun+0x26>
   20354:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   20358:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   2035c:	d102      	bne.n	20364 <__aeabi_dcmpun+0x20>
   2035e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   20362:	d102      	bne.n	2036a <__aeabi_dcmpun+0x26>
   20364:	f04f 0000 	mov.w	r0, #0
   20368:	4770      	bx	lr
   2036a:	f04f 0001 	mov.w	r0, #1
   2036e:	4770      	bx	lr

00020370 <__aeabi_d2iz>:
   20370:	ea4f 0241 	mov.w	r2, r1, lsl #1
   20374:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   20378:	d215      	bcs.n	203a6 <__aeabi_d2iz+0x36>
   2037a:	d511      	bpl.n	203a0 <__aeabi_d2iz+0x30>
   2037c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   20380:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   20384:	d912      	bls.n	203ac <__aeabi_d2iz+0x3c>
   20386:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   2038a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2038e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   20392:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   20396:	fa23 f002 	lsr.w	r0, r3, r2
   2039a:	bf18      	it	ne
   2039c:	4240      	negne	r0, r0
   2039e:	4770      	bx	lr
   203a0:	f04f 0000 	mov.w	r0, #0
   203a4:	4770      	bx	lr
   203a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   203aa:	d105      	bne.n	203b8 <__aeabi_d2iz+0x48>
   203ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   203b0:	bf08      	it	eq
   203b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   203b6:	4770      	bx	lr
   203b8:	f04f 0000 	mov.w	r0, #0
   203bc:	4770      	bx	lr
   203be:	bf00      	nop

000203c0 <__aeabi_d2uiz>:
   203c0:	004a      	lsls	r2, r1, #1
   203c2:	d211      	bcs.n	203e8 <__aeabi_d2uiz+0x28>
   203c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   203c8:	d211      	bcs.n	203ee <__aeabi_d2uiz+0x2e>
   203ca:	d50d      	bpl.n	203e8 <__aeabi_d2uiz+0x28>
   203cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   203d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   203d4:	d40e      	bmi.n	203f4 <__aeabi_d2uiz+0x34>
   203d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   203da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   203de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   203e2:	fa23 f002 	lsr.w	r0, r3, r2
   203e6:	4770      	bx	lr
   203e8:	f04f 0000 	mov.w	r0, #0
   203ec:	4770      	bx	lr
   203ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   203f2:	d102      	bne.n	203fa <__aeabi_d2uiz+0x3a>
   203f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   203f8:	4770      	bx	lr
   203fa:	f04f 0000 	mov.w	r0, #0
   203fe:	4770      	bx	lr

00020400 <__aeabi_d2f>:
   20400:	ea4f 0241 	mov.w	r2, r1, lsl #1
   20404:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   20408:	bf24      	itt	cs
   2040a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   2040e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   20412:	d90d      	bls.n	20430 <__aeabi_d2f+0x30>
   20414:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   20418:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   2041c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   20420:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   20424:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   20428:	bf08      	it	eq
   2042a:	f020 0001 	biceq.w	r0, r0, #1
   2042e:	4770      	bx	lr
   20430:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   20434:	d121      	bne.n	2047a <__aeabi_d2f+0x7a>
   20436:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   2043a:	bfbc      	itt	lt
   2043c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   20440:	4770      	bxlt	lr
   20442:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   20446:	ea4f 5252 	mov.w	r2, r2, lsr #21
   2044a:	f1c2 0218 	rsb	r2, r2, #24
   2044e:	f1c2 0c20 	rsb	ip, r2, #32
   20452:	fa10 f30c 	lsls.w	r3, r0, ip
   20456:	fa20 f002 	lsr.w	r0, r0, r2
   2045a:	bf18      	it	ne
   2045c:	f040 0001 	orrne.w	r0, r0, #1
   20460:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   20464:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   20468:	fa03 fc0c 	lsl.w	ip, r3, ip
   2046c:	ea40 000c 	orr.w	r0, r0, ip
   20470:	fa23 f302 	lsr.w	r3, r3, r2
   20474:	ea4f 0343 	mov.w	r3, r3, lsl #1
   20478:	e7cc      	b.n	20414 <__aeabi_d2f+0x14>
   2047a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   2047e:	d107      	bne.n	20490 <__aeabi_d2f+0x90>
   20480:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   20484:	bf1e      	ittt	ne
   20486:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   2048a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   2048e:	4770      	bxne	lr
   20490:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   20494:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   20498:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   2049c:	4770      	bx	lr
   2049e:	bf00      	nop

000204a0 <__aeabi_ldivmod>:
   204a0:	b97b      	cbnz	r3, 204c2 <__aeabi_ldivmod+0x22>
   204a2:	b972      	cbnz	r2, 204c2 <__aeabi_ldivmod+0x22>
   204a4:	2900      	cmp	r1, #0
   204a6:	bfbe      	ittt	lt
   204a8:	2000      	movlt	r0, #0
   204aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   204ae:	e006      	blt.n	204be <__aeabi_ldivmod+0x1e>
   204b0:	bf08      	it	eq
   204b2:	2800      	cmpeq	r0, #0
   204b4:	bf1c      	itt	ne
   204b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   204ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   204be:	f000 b9bf 	b.w	20840 <__aeabi_idiv0>
   204c2:	f1ad 0c08 	sub.w	ip, sp, #8
   204c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   204ca:	2900      	cmp	r1, #0
   204cc:	db09      	blt.n	204e2 <__aeabi_ldivmod+0x42>
   204ce:	2b00      	cmp	r3, #0
   204d0:	db1a      	blt.n	20508 <__aeabi_ldivmod+0x68>
   204d2:	f000 f84d 	bl	20570 <__udivmoddi4>
   204d6:	f8dd e004 	ldr.w	lr, [sp, #4]
   204da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   204de:	b004      	add	sp, #16
   204e0:	4770      	bx	lr
   204e2:	4240      	negs	r0, r0
   204e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   204e8:	2b00      	cmp	r3, #0
   204ea:	db1b      	blt.n	20524 <__aeabi_ldivmod+0x84>
   204ec:	f000 f840 	bl	20570 <__udivmoddi4>
   204f0:	f8dd e004 	ldr.w	lr, [sp, #4]
   204f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   204f8:	b004      	add	sp, #16
   204fa:	4240      	negs	r0, r0
   204fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   20500:	4252      	negs	r2, r2
   20502:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   20506:	4770      	bx	lr
   20508:	4252      	negs	r2, r2
   2050a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   2050e:	f000 f82f 	bl	20570 <__udivmoddi4>
   20512:	f8dd e004 	ldr.w	lr, [sp, #4]
   20516:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2051a:	b004      	add	sp, #16
   2051c:	4240      	negs	r0, r0
   2051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   20522:	4770      	bx	lr
   20524:	4252      	negs	r2, r2
   20526:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   2052a:	f000 f821 	bl	20570 <__udivmoddi4>
   2052e:	f8dd e004 	ldr.w	lr, [sp, #4]
   20532:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20536:	b004      	add	sp, #16
   20538:	4252      	negs	r2, r2
   2053a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   2053e:	4770      	bx	lr

00020540 <__aeabi_uldivmod>:
   20540:	b953      	cbnz	r3, 20558 <__aeabi_uldivmod+0x18>
   20542:	b94a      	cbnz	r2, 20558 <__aeabi_uldivmod+0x18>
   20544:	2900      	cmp	r1, #0
   20546:	bf08      	it	eq
   20548:	2800      	cmpeq	r0, #0
   2054a:	bf1c      	itt	ne
   2054c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   20550:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   20554:	f000 b974 	b.w	20840 <__aeabi_idiv0>
   20558:	f1ad 0c08 	sub.w	ip, sp, #8
   2055c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   20560:	f000 f806 	bl	20570 <__udivmoddi4>
   20564:	f8dd e004 	ldr.w	lr, [sp, #4]
   20568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2056c:	b004      	add	sp, #16
   2056e:	4770      	bx	lr

00020570 <__udivmoddi4>:
   20570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20574:	9d08      	ldr	r5, [sp, #32]
   20576:	4604      	mov	r4, r0
   20578:	468e      	mov	lr, r1
   2057a:	2b00      	cmp	r3, #0
   2057c:	d14d      	bne.n	2061a <__udivmoddi4+0xaa>
   2057e:	428a      	cmp	r2, r1
   20580:	4694      	mov	ip, r2
   20582:	d969      	bls.n	20658 <__udivmoddi4+0xe8>
   20584:	fab2 f282 	clz	r2, r2
   20588:	b152      	cbz	r2, 205a0 <__udivmoddi4+0x30>
   2058a:	fa01 f302 	lsl.w	r3, r1, r2
   2058e:	f1c2 0120 	rsb	r1, r2, #32
   20592:	fa20 f101 	lsr.w	r1, r0, r1
   20596:	fa0c fc02 	lsl.w	ip, ip, r2
   2059a:	ea41 0e03 	orr.w	lr, r1, r3
   2059e:	4094      	lsls	r4, r2
   205a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
   205a4:	0c21      	lsrs	r1, r4, #16
   205a6:	fbbe f6f8 	udiv	r6, lr, r8
   205aa:	fa1f f78c 	uxth.w	r7, ip
   205ae:	fb08 e316 	mls	r3, r8, r6, lr
   205b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   205b6:	fb06 f107 	mul.w	r1, r6, r7
   205ba:	4299      	cmp	r1, r3
   205bc:	d90a      	bls.n	205d4 <__udivmoddi4+0x64>
   205be:	eb1c 0303 	adds.w	r3, ip, r3
   205c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   205c6:	f080 811f 	bcs.w	20808 <__udivmoddi4+0x298>
   205ca:	4299      	cmp	r1, r3
   205cc:	f240 811c 	bls.w	20808 <__udivmoddi4+0x298>
   205d0:	3e02      	subs	r6, #2
   205d2:	4463      	add	r3, ip
   205d4:	1a5b      	subs	r3, r3, r1
   205d6:	b2a4      	uxth	r4, r4
   205d8:	fbb3 f0f8 	udiv	r0, r3, r8
   205dc:	fb08 3310 	mls	r3, r8, r0, r3
   205e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   205e4:	fb00 f707 	mul.w	r7, r0, r7
   205e8:	42a7      	cmp	r7, r4
   205ea:	d90a      	bls.n	20602 <__udivmoddi4+0x92>
   205ec:	eb1c 0404 	adds.w	r4, ip, r4
   205f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   205f4:	f080 810a 	bcs.w	2080c <__udivmoddi4+0x29c>
   205f8:	42a7      	cmp	r7, r4
   205fa:	f240 8107 	bls.w	2080c <__udivmoddi4+0x29c>
   205fe:	4464      	add	r4, ip
   20600:	3802      	subs	r0, #2
   20602:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   20606:	1be4      	subs	r4, r4, r7
   20608:	2600      	movs	r6, #0
   2060a:	b11d      	cbz	r5, 20614 <__udivmoddi4+0xa4>
   2060c:	40d4      	lsrs	r4, r2
   2060e:	2300      	movs	r3, #0
   20610:	e9c5 4300 	strd	r4, r3, [r5]
   20614:	4631      	mov	r1, r6
   20616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2061a:	428b      	cmp	r3, r1
   2061c:	d909      	bls.n	20632 <__udivmoddi4+0xc2>
   2061e:	2d00      	cmp	r5, #0
   20620:	f000 80ef 	beq.w	20802 <__udivmoddi4+0x292>
   20624:	2600      	movs	r6, #0
   20626:	e9c5 0100 	strd	r0, r1, [r5]
   2062a:	4630      	mov	r0, r6
   2062c:	4631      	mov	r1, r6
   2062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20632:	fab3 f683 	clz	r6, r3
   20636:	2e00      	cmp	r6, #0
   20638:	d14a      	bne.n	206d0 <__udivmoddi4+0x160>
   2063a:	428b      	cmp	r3, r1
   2063c:	d302      	bcc.n	20644 <__udivmoddi4+0xd4>
   2063e:	4282      	cmp	r2, r0
   20640:	f200 80f9 	bhi.w	20836 <__udivmoddi4+0x2c6>
   20644:	1a84      	subs	r4, r0, r2
   20646:	eb61 0303 	sbc.w	r3, r1, r3
   2064a:	2001      	movs	r0, #1
   2064c:	469e      	mov	lr, r3
   2064e:	2d00      	cmp	r5, #0
   20650:	d0e0      	beq.n	20614 <__udivmoddi4+0xa4>
   20652:	e9c5 4e00 	strd	r4, lr, [r5]
   20656:	e7dd      	b.n	20614 <__udivmoddi4+0xa4>
   20658:	b902      	cbnz	r2, 2065c <__udivmoddi4+0xec>
   2065a:	deff      	udf	#255	; 0xff
   2065c:	fab2 f282 	clz	r2, r2
   20660:	2a00      	cmp	r2, #0
   20662:	f040 8092 	bne.w	2078a <__udivmoddi4+0x21a>
   20666:	eba1 010c 	sub.w	r1, r1, ip
   2066a:	ea4f 471c 	mov.w	r7, ip, lsr #16
   2066e:	fa1f fe8c 	uxth.w	lr, ip
   20672:	2601      	movs	r6, #1
   20674:	0c20      	lsrs	r0, r4, #16
   20676:	fbb1 f3f7 	udiv	r3, r1, r7
   2067a:	fb07 1113 	mls	r1, r7, r3, r1
   2067e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   20682:	fb0e f003 	mul.w	r0, lr, r3
   20686:	4288      	cmp	r0, r1
   20688:	d908      	bls.n	2069c <__udivmoddi4+0x12c>
   2068a:	eb1c 0101 	adds.w	r1, ip, r1
   2068e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   20692:	d202      	bcs.n	2069a <__udivmoddi4+0x12a>
   20694:	4288      	cmp	r0, r1
   20696:	f200 80cb 	bhi.w	20830 <__udivmoddi4+0x2c0>
   2069a:	4643      	mov	r3, r8
   2069c:	1a09      	subs	r1, r1, r0
   2069e:	b2a4      	uxth	r4, r4
   206a0:	fbb1 f0f7 	udiv	r0, r1, r7
   206a4:	fb07 1110 	mls	r1, r7, r0, r1
   206a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   206ac:	fb0e fe00 	mul.w	lr, lr, r0
   206b0:	45a6      	cmp	lr, r4
   206b2:	d908      	bls.n	206c6 <__udivmoddi4+0x156>
   206b4:	eb1c 0404 	adds.w	r4, ip, r4
   206b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   206bc:	d202      	bcs.n	206c4 <__udivmoddi4+0x154>
   206be:	45a6      	cmp	lr, r4
   206c0:	f200 80bb 	bhi.w	2083a <__udivmoddi4+0x2ca>
   206c4:	4608      	mov	r0, r1
   206c6:	eba4 040e 	sub.w	r4, r4, lr
   206ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   206ce:	e79c      	b.n	2060a <__udivmoddi4+0x9a>
   206d0:	f1c6 0720 	rsb	r7, r6, #32
   206d4:	40b3      	lsls	r3, r6
   206d6:	fa22 fc07 	lsr.w	ip, r2, r7
   206da:	ea4c 0c03 	orr.w	ip, ip, r3
   206de:	fa20 f407 	lsr.w	r4, r0, r7
   206e2:	fa01 f306 	lsl.w	r3, r1, r6
   206e6:	431c      	orrs	r4, r3
   206e8:	40f9      	lsrs	r1, r7
   206ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
   206ee:	fa00 f306 	lsl.w	r3, r0, r6
   206f2:	fbb1 f8f9 	udiv	r8, r1, r9
   206f6:	0c20      	lsrs	r0, r4, #16
   206f8:	fa1f fe8c 	uxth.w	lr, ip
   206fc:	fb09 1118 	mls	r1, r9, r8, r1
   20700:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   20704:	fb08 f00e 	mul.w	r0, r8, lr
   20708:	4288      	cmp	r0, r1
   2070a:	fa02 f206 	lsl.w	r2, r2, r6
   2070e:	d90b      	bls.n	20728 <__udivmoddi4+0x1b8>
   20710:	eb1c 0101 	adds.w	r1, ip, r1
   20714:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   20718:	f080 8088 	bcs.w	2082c <__udivmoddi4+0x2bc>
   2071c:	4288      	cmp	r0, r1
   2071e:	f240 8085 	bls.w	2082c <__udivmoddi4+0x2bc>
   20722:	f1a8 0802 	sub.w	r8, r8, #2
   20726:	4461      	add	r1, ip
   20728:	1a09      	subs	r1, r1, r0
   2072a:	b2a4      	uxth	r4, r4
   2072c:	fbb1 f0f9 	udiv	r0, r1, r9
   20730:	fb09 1110 	mls	r1, r9, r0, r1
   20734:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   20738:	fb00 fe0e 	mul.w	lr, r0, lr
   2073c:	458e      	cmp	lr, r1
   2073e:	d908      	bls.n	20752 <__udivmoddi4+0x1e2>
   20740:	eb1c 0101 	adds.w	r1, ip, r1
   20744:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   20748:	d26c      	bcs.n	20824 <__udivmoddi4+0x2b4>
   2074a:	458e      	cmp	lr, r1
   2074c:	d96a      	bls.n	20824 <__udivmoddi4+0x2b4>
   2074e:	3802      	subs	r0, #2
   20750:	4461      	add	r1, ip
   20752:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   20756:	fba0 9402 	umull	r9, r4, r0, r2
   2075a:	eba1 010e 	sub.w	r1, r1, lr
   2075e:	42a1      	cmp	r1, r4
   20760:	46c8      	mov	r8, r9
   20762:	46a6      	mov	lr, r4
   20764:	d356      	bcc.n	20814 <__udivmoddi4+0x2a4>
   20766:	d053      	beq.n	20810 <__udivmoddi4+0x2a0>
   20768:	b15d      	cbz	r5, 20782 <__udivmoddi4+0x212>
   2076a:	ebb3 0208 	subs.w	r2, r3, r8
   2076e:	eb61 010e 	sbc.w	r1, r1, lr
   20772:	fa01 f707 	lsl.w	r7, r1, r7
   20776:	fa22 f306 	lsr.w	r3, r2, r6
   2077a:	40f1      	lsrs	r1, r6
   2077c:	431f      	orrs	r7, r3
   2077e:	e9c5 7100 	strd	r7, r1, [r5]
   20782:	2600      	movs	r6, #0
   20784:	4631      	mov	r1, r6
   20786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2078a:	f1c2 0320 	rsb	r3, r2, #32
   2078e:	40d8      	lsrs	r0, r3
   20790:	fa0c fc02 	lsl.w	ip, ip, r2
   20794:	fa21 f303 	lsr.w	r3, r1, r3
   20798:	4091      	lsls	r1, r2
   2079a:	4301      	orrs	r1, r0
   2079c:	ea4f 471c 	mov.w	r7, ip, lsr #16
   207a0:	fa1f fe8c 	uxth.w	lr, ip
   207a4:	fbb3 f0f7 	udiv	r0, r3, r7
   207a8:	fb07 3610 	mls	r6, r7, r0, r3
   207ac:	0c0b      	lsrs	r3, r1, #16
   207ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   207b2:	fb00 f60e 	mul.w	r6, r0, lr
   207b6:	429e      	cmp	r6, r3
   207b8:	fa04 f402 	lsl.w	r4, r4, r2
   207bc:	d908      	bls.n	207d0 <__udivmoddi4+0x260>
   207be:	eb1c 0303 	adds.w	r3, ip, r3
   207c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   207c6:	d22f      	bcs.n	20828 <__udivmoddi4+0x2b8>
   207c8:	429e      	cmp	r6, r3
   207ca:	d92d      	bls.n	20828 <__udivmoddi4+0x2b8>
   207cc:	3802      	subs	r0, #2
   207ce:	4463      	add	r3, ip
   207d0:	1b9b      	subs	r3, r3, r6
   207d2:	b289      	uxth	r1, r1
   207d4:	fbb3 f6f7 	udiv	r6, r3, r7
   207d8:	fb07 3316 	mls	r3, r7, r6, r3
   207dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   207e0:	fb06 f30e 	mul.w	r3, r6, lr
   207e4:	428b      	cmp	r3, r1
   207e6:	d908      	bls.n	207fa <__udivmoddi4+0x28a>
   207e8:	eb1c 0101 	adds.w	r1, ip, r1
   207ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   207f0:	d216      	bcs.n	20820 <__udivmoddi4+0x2b0>
   207f2:	428b      	cmp	r3, r1
   207f4:	d914      	bls.n	20820 <__udivmoddi4+0x2b0>
   207f6:	3e02      	subs	r6, #2
   207f8:	4461      	add	r1, ip
   207fa:	1ac9      	subs	r1, r1, r3
   207fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   20800:	e738      	b.n	20674 <__udivmoddi4+0x104>
   20802:	462e      	mov	r6, r5
   20804:	4628      	mov	r0, r5
   20806:	e705      	b.n	20614 <__udivmoddi4+0xa4>
   20808:	4606      	mov	r6, r0
   2080a:	e6e3      	b.n	205d4 <__udivmoddi4+0x64>
   2080c:	4618      	mov	r0, r3
   2080e:	e6f8      	b.n	20602 <__udivmoddi4+0x92>
   20810:	454b      	cmp	r3, r9
   20812:	d2a9      	bcs.n	20768 <__udivmoddi4+0x1f8>
   20814:	ebb9 0802 	subs.w	r8, r9, r2
   20818:	eb64 0e0c 	sbc.w	lr, r4, ip
   2081c:	3801      	subs	r0, #1
   2081e:	e7a3      	b.n	20768 <__udivmoddi4+0x1f8>
   20820:	4646      	mov	r6, r8
   20822:	e7ea      	b.n	207fa <__udivmoddi4+0x28a>
   20824:	4620      	mov	r0, r4
   20826:	e794      	b.n	20752 <__udivmoddi4+0x1e2>
   20828:	4640      	mov	r0, r8
   2082a:	e7d1      	b.n	207d0 <__udivmoddi4+0x260>
   2082c:	46d0      	mov	r8, sl
   2082e:	e77b      	b.n	20728 <__udivmoddi4+0x1b8>
   20830:	3b02      	subs	r3, #2
   20832:	4461      	add	r1, ip
   20834:	e732      	b.n	2069c <__udivmoddi4+0x12c>
   20836:	4630      	mov	r0, r6
   20838:	e709      	b.n	2064e <__udivmoddi4+0xde>
   2083a:	4464      	add	r4, ip
   2083c:	3802      	subs	r0, #2
   2083e:	e742      	b.n	206c6 <__udivmoddi4+0x156>

00020840 <__aeabi_idiv0>:
   20840:	4770      	bx	lr
   20842:	bf00      	nop

00020844 <ceilf>:
   20844:	ee10 2a10 	vmov	r2, s0
   20848:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   2084c:	3b7f      	subs	r3, #127	; 0x7f
   2084e:	2b16      	cmp	r3, #22
   20850:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   20854:	dc2f      	bgt.n	208b6 <ceilf+0x72>
   20856:	2b00      	cmp	r3, #0
   20858:	db18      	blt.n	2088c <ceilf+0x48>
   2085a:	491a      	ldr	r1, [pc, #104]	; (208c4 <ceilf+0x80>)
   2085c:	4119      	asrs	r1, r3
   2085e:	420a      	tst	r2, r1
   20860:	d028      	beq.n	208b4 <ceilf+0x70>
   20862:	eddf 7a19 	vldr	s15, [pc, #100]	; 208c8 <ceilf+0x84>
   20866:	ee70 7a27 	vadd.f32	s15, s0, s15
   2086a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2086e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20872:	dd1f      	ble.n	208b4 <ceilf+0x70>
   20874:	2a00      	cmp	r2, #0
   20876:	dd04      	ble.n	20882 <ceilf+0x3e>
   20878:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   2087c:	fa40 f303 	asr.w	r3, r0, r3
   20880:	441a      	add	r2, r3
   20882:	ea22 0301 	bic.w	r3, r2, r1
   20886:	ee00 3a10 	vmov	s0, r3
   2088a:	4770      	bx	lr
   2088c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 208c8 <ceilf+0x84>
   20890:	ee70 7a27 	vadd.f32	s15, s0, s15
   20894:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   20898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2089c:	dd0a      	ble.n	208b4 <ceilf+0x70>
   2089e:	2a00      	cmp	r2, #0
   208a0:	db06      	blt.n	208b0 <ceilf+0x6c>
   208a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   208a6:	2900      	cmp	r1, #0
   208a8:	bf18      	it	ne
   208aa:	eeb0 0a67 	vmovne.f32	s0, s15
   208ae:	4770      	bx	lr
   208b0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 208cc <ceilf+0x88>
   208b4:	4770      	bx	lr
   208b6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   208ba:	d3fb      	bcc.n	208b4 <ceilf+0x70>
   208bc:	ee30 0a00 	vadd.f32	s0, s0, s0
   208c0:	4770      	bx	lr
   208c2:	bf00      	nop
   208c4:	007fffff 	.word	0x007fffff
   208c8:	7149f2ca 	.word	0x7149f2ca
   208cc:	80000000 	.word	0x80000000

000208d0 <asin>:
   208d0:	b538      	push	{r3, r4, r5, lr}
   208d2:	ed2d 8b02 	vpush	{d8}
   208d6:	ec55 4b10 	vmov	r4, r5, d0
   208da:	f000 f899 	bl	20a10 <__ieee754_asin>
   208de:	4b17      	ldr	r3, [pc, #92]	; (2093c <asin+0x6c>)
   208e0:	eeb0 8a40 	vmov.f32	s16, s0
   208e4:	eef0 8a60 	vmov.f32	s17, s1
   208e8:	f993 3000 	ldrsb.w	r3, [r3]
   208ec:	3301      	adds	r3, #1
   208ee:	d011      	beq.n	20914 <asin+0x44>
   208f0:	4622      	mov	r2, r4
   208f2:	462b      	mov	r3, r5
   208f4:	4620      	mov	r0, r4
   208f6:	4629      	mov	r1, r5
   208f8:	f7ff fd24 	bl	20344 <__aeabi_dcmpun>
   208fc:	b950      	cbnz	r0, 20914 <asin+0x44>
   208fe:	ec45 4b10 	vmov	d0, r4, r5
   20902:	f000 fd39 	bl	21378 <fabs>
   20906:	4b0e      	ldr	r3, [pc, #56]	; (20940 <asin+0x70>)
   20908:	ec51 0b10 	vmov	r0, r1, d0
   2090c:	2200      	movs	r2, #0
   2090e:	f7ff fd0f 	bl	20330 <__aeabi_dcmpgt>
   20912:	b930      	cbnz	r0, 20922 <asin+0x52>
   20914:	eeb0 0a48 	vmov.f32	s0, s16
   20918:	eef0 0a68 	vmov.f32	s1, s17
   2091c:	ecbd 8b02 	vpop	{d8}
   20920:	bd38      	pop	{r3, r4, r5, pc}
   20922:	f000 ff1f 	bl	21764 <__errno>
   20926:	ecbd 8b02 	vpop	{d8}
   2092a:	4603      	mov	r3, r0
   2092c:	2221      	movs	r2, #33	; 0x21
   2092e:	601a      	str	r2, [r3, #0]
   20930:	4804      	ldr	r0, [pc, #16]	; (20944 <asin+0x74>)
   20932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20936:	f000 bd2b 	b.w	21390 <nan>
   2093a:	bf00      	nop
   2093c:	20002c28 	.word	0x20002c28
   20940:	3ff00000 	.word	0x3ff00000
   20944:	000232e8 	.word	0x000232e8

00020948 <atan2f>:
   20948:	f000 bb80 	b.w	2104c <__ieee754_atan2f>

0002094c <fmodf>:
   2094c:	b508      	push	{r3, lr}
   2094e:	ed2d 8b02 	vpush	{d8}
   20952:	eef0 8a40 	vmov.f32	s17, s0
   20956:	eeb0 8a60 	vmov.f32	s16, s1
   2095a:	f000 fc1d 	bl	21198 <__ieee754_fmodf>
   2095e:	4b0e      	ldr	r3, [pc, #56]	; (20998 <fmodf+0x4c>)
   20960:	f993 3000 	ldrsb.w	r3, [r3]
   20964:	3301      	adds	r3, #1
   20966:	d00b      	beq.n	20980 <fmodf+0x34>
   20968:	eef4 8a48 	vcmp.f32	s17, s16
   2096c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20970:	d606      	bvs.n	20980 <fmodf+0x34>
   20972:	eddf 8a0a 	vldr	s17, [pc, #40]	; 2099c <fmodf+0x50>
   20976:	eeb4 8a68 	vcmp.f32	s16, s17
   2097a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2097e:	d002      	beq.n	20986 <fmodf+0x3a>
   20980:	ecbd 8b02 	vpop	{d8}
   20984:	bd08      	pop	{r3, pc}
   20986:	f000 feed 	bl	21764 <__errno>
   2098a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   2098e:	ecbd 8b02 	vpop	{d8}
   20992:	2321      	movs	r3, #33	; 0x21
   20994:	6003      	str	r3, [r0, #0]
   20996:	bd08      	pop	{r3, pc}
   20998:	20002c28 	.word	0x20002c28
   2099c:	00000000 	.word	0x00000000

000209a0 <log10f>:
   209a0:	b508      	push	{r3, lr}
   209a2:	ed2d 8b02 	vpush	{d8}
   209a6:	eeb0 8a40 	vmov.f32	s16, s0
   209aa:	f000 fc85 	bl	212b8 <__ieee754_log10f>
   209ae:	4b14      	ldr	r3, [pc, #80]	; (20a00 <log10f+0x60>)
   209b0:	f993 3000 	ldrsb.w	r3, [r3]
   209b4:	3301      	adds	r3, #1
   209b6:	d014      	beq.n	209e2 <log10f+0x42>
   209b8:	eeb4 8a48 	vcmp.f32	s16, s16
   209bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   209c0:	d60f      	bvs.n	209e2 <log10f+0x42>
   209c2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   209c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   209ca:	d80a      	bhi.n	209e2 <log10f+0x42>
   209cc:	eeb5 8a40 	vcmp.f32	s16, #0.0
   209d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   209d4:	d108      	bne.n	209e8 <log10f+0x48>
   209d6:	f000 fec5 	bl	21764 <__errno>
   209da:	2322      	movs	r3, #34	; 0x22
   209dc:	ed9f 0a09 	vldr	s0, [pc, #36]	; 20a04 <log10f+0x64>
   209e0:	6003      	str	r3, [r0, #0]
   209e2:	ecbd 8b02 	vpop	{d8}
   209e6:	bd08      	pop	{r3, pc}
   209e8:	f000 febc 	bl	21764 <__errno>
   209ec:	ecbd 8b02 	vpop	{d8}
   209f0:	4603      	mov	r3, r0
   209f2:	2221      	movs	r2, #33	; 0x21
   209f4:	601a      	str	r2, [r3, #0]
   209f6:	4804      	ldr	r0, [pc, #16]	; (20a08 <log10f+0x68>)
   209f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   209fc:	f000 bdac 	b.w	21558 <nanf>
   20a00:	20002c28 	.word	0x20002c28
   20a04:	ff800000 	.word	0xff800000
   20a08:	000232e8 	.word	0x000232e8
   20a0c:	00000000 	.word	0x00000000

00020a10 <__ieee754_asin>:
   20a10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a14:	ec55 4b10 	vmov	r4, r5, d0
   20a18:	4bcf      	ldr	r3, [pc, #828]	; (20d58 <__ieee754_asin+0x348>)
   20a1a:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   20a1e:	429f      	cmp	r7, r3
   20a20:	ed2d 8b04 	vpush	{d8-d9}
   20a24:	dd37      	ble.n	20a96 <__ieee754_asin+0x86>
   20a26:	ee10 3a10 	vmov	r3, s0
   20a2a:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
   20a2e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
   20a32:	433b      	orrs	r3, r7
   20a34:	d010      	beq.n	20a58 <__ieee754_asin+0x48>
   20a36:	ee10 2a10 	vmov	r2, s0
   20a3a:	462b      	mov	r3, r5
   20a3c:	4620      	mov	r0, r4
   20a3e:	4629      	mov	r1, r5
   20a40:	f7ff f82e 	bl	1faa0 <__aeabi_dsub>
   20a44:	4602      	mov	r2, r0
   20a46:	460b      	mov	r3, r1
   20a48:	f7ff fb0c 	bl	20064 <__aeabi_ddiv>
   20a4c:	ec41 0b10 	vmov	d0, r0, r1
   20a50:	ecbd 8b04 	vpop	{d8-d9}
   20a54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a58:	ee10 0a10 	vmov	r0, s0
   20a5c:	a3a2      	add	r3, pc, #648	; (adr r3, 20ce8 <__ieee754_asin+0x2d8>)
   20a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   20a62:	4629      	mov	r1, r5
   20a64:	f7ff f9d4 	bl	1fe10 <__aeabi_dmul>
   20a68:	4602      	mov	r2, r0
   20a6a:	460b      	mov	r3, r1
   20a6c:	4620      	mov	r0, r4
   20a6e:	4629      	mov	r1, r5
   20a70:	4614      	mov	r4, r2
   20a72:	461d      	mov	r5, r3
   20a74:	a39e      	add	r3, pc, #632	; (adr r3, 20cf0 <__ieee754_asin+0x2e0>)
   20a76:	e9d3 2300 	ldrd	r2, r3, [r3]
   20a7a:	f7ff f9c9 	bl	1fe10 <__aeabi_dmul>
   20a7e:	4602      	mov	r2, r0
   20a80:	460b      	mov	r3, r1
   20a82:	4620      	mov	r0, r4
   20a84:	4629      	mov	r1, r5
   20a86:	f7ff f80d 	bl	1faa4 <__adddf3>
   20a8a:	ecbd 8b04 	vpop	{d8-d9}
   20a8e:	ec41 0b10 	vmov	d0, r0, r1
   20a92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a96:	4bb1      	ldr	r3, [pc, #708]	; (20d5c <__ieee754_asin+0x34c>)
   20a98:	429f      	cmp	r7, r3
   20a9a:	462e      	mov	r6, r5
   20a9c:	dc12      	bgt.n	20ac4 <__ieee754_asin+0xb4>
   20a9e:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
   20aa2:	f280 8163 	bge.w	20d6c <__ieee754_asin+0x35c>
   20aa6:	a394      	add	r3, pc, #592	; (adr r3, 20cf8 <__ieee754_asin+0x2e8>)
   20aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
   20aac:	ee10 0a10 	vmov	r0, s0
   20ab0:	4629      	mov	r1, r5
   20ab2:	f7fe fff7 	bl	1faa4 <__adddf3>
   20ab6:	4baa      	ldr	r3, [pc, #680]	; (20d60 <__ieee754_asin+0x350>)
   20ab8:	2200      	movs	r2, #0
   20aba:	f7ff fc39 	bl	20330 <__aeabi_dcmpgt>
   20abe:	2800      	cmp	r0, #0
   20ac0:	f040 810c 	bne.w	20cdc <__ieee754_asin+0x2cc>
   20ac4:	ec45 4b10 	vmov	d0, r4, r5
   20ac8:	f000 fc56 	bl	21378 <fabs>
   20acc:	49a4      	ldr	r1, [pc, #656]	; (20d60 <__ieee754_asin+0x350>)
   20ace:	ec53 2b10 	vmov	r2, r3, d0
   20ad2:	2000      	movs	r0, #0
   20ad4:	f7fe ffe4 	bl	1faa0 <__aeabi_dsub>
   20ad8:	4ba2      	ldr	r3, [pc, #648]	; (20d64 <__ieee754_asin+0x354>)
   20ada:	2200      	movs	r2, #0
   20adc:	f7ff f998 	bl	1fe10 <__aeabi_dmul>
   20ae0:	a387      	add	r3, pc, #540	; (adr r3, 20d00 <__ieee754_asin+0x2f0>)
   20ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
   20ae6:	4604      	mov	r4, r0
   20ae8:	460d      	mov	r5, r1
   20aea:	f7ff f991 	bl	1fe10 <__aeabi_dmul>
   20aee:	a386      	add	r3, pc, #536	; (adr r3, 20d08 <__ieee754_asin+0x2f8>)
   20af0:	e9d3 2300 	ldrd	r2, r3, [r3]
   20af4:	f7fe ffd6 	bl	1faa4 <__adddf3>
   20af8:	4622      	mov	r2, r4
   20afa:	462b      	mov	r3, r5
   20afc:	f7ff f988 	bl	1fe10 <__aeabi_dmul>
   20b00:	a383      	add	r3, pc, #524	; (adr r3, 20d10 <__ieee754_asin+0x300>)
   20b02:	e9d3 2300 	ldrd	r2, r3, [r3]
   20b06:	f7fe ffcb 	bl	1faa0 <__aeabi_dsub>
   20b0a:	4622      	mov	r2, r4
   20b0c:	462b      	mov	r3, r5
   20b0e:	f7ff f97f 	bl	1fe10 <__aeabi_dmul>
   20b12:	a381      	add	r3, pc, #516	; (adr r3, 20d18 <__ieee754_asin+0x308>)
   20b14:	e9d3 2300 	ldrd	r2, r3, [r3]
   20b18:	f7fe ffc4 	bl	1faa4 <__adddf3>
   20b1c:	4622      	mov	r2, r4
   20b1e:	462b      	mov	r3, r5
   20b20:	f7ff f976 	bl	1fe10 <__aeabi_dmul>
   20b24:	a37e      	add	r3, pc, #504	; (adr r3, 20d20 <__ieee754_asin+0x310>)
   20b26:	e9d3 2300 	ldrd	r2, r3, [r3]
   20b2a:	f7fe ffb9 	bl	1faa0 <__aeabi_dsub>
   20b2e:	4622      	mov	r2, r4
   20b30:	462b      	mov	r3, r5
   20b32:	f7ff f96d 	bl	1fe10 <__aeabi_dmul>
   20b36:	a37c      	add	r3, pc, #496	; (adr r3, 20d28 <__ieee754_asin+0x318>)
   20b38:	e9d3 2300 	ldrd	r2, r3, [r3]
   20b3c:	f7fe ffb2 	bl	1faa4 <__adddf3>
   20b40:	4622      	mov	r2, r4
   20b42:	462b      	mov	r3, r5
   20b44:	f7ff f964 	bl	1fe10 <__aeabi_dmul>
   20b48:	a379      	add	r3, pc, #484	; (adr r3, 20d30 <__ieee754_asin+0x320>)
   20b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   20b4e:	ec41 0b18 	vmov	d8, r0, r1
   20b52:	ec41 0b19 	vmov	d9, r0, r1
   20b56:	4620      	mov	r0, r4
   20b58:	4629      	mov	r1, r5
   20b5a:	f7ff f959 	bl	1fe10 <__aeabi_dmul>
   20b5e:	a376      	add	r3, pc, #472	; (adr r3, 20d38 <__ieee754_asin+0x328>)
   20b60:	e9d3 2300 	ldrd	r2, r3, [r3]
   20b64:	f7fe ff9c 	bl	1faa0 <__aeabi_dsub>
   20b68:	4622      	mov	r2, r4
   20b6a:	462b      	mov	r3, r5
   20b6c:	f7ff f950 	bl	1fe10 <__aeabi_dmul>
   20b70:	a373      	add	r3, pc, #460	; (adr r3, 20d40 <__ieee754_asin+0x330>)
   20b72:	e9d3 2300 	ldrd	r2, r3, [r3]
   20b76:	f7fe ff95 	bl	1faa4 <__adddf3>
   20b7a:	4622      	mov	r2, r4
   20b7c:	462b      	mov	r3, r5
   20b7e:	f7ff f947 	bl	1fe10 <__aeabi_dmul>
   20b82:	a371      	add	r3, pc, #452	; (adr r3, 20d48 <__ieee754_asin+0x338>)
   20b84:	e9d3 2300 	ldrd	r2, r3, [r3]
   20b88:	f7fe ff8a 	bl	1faa0 <__aeabi_dsub>
   20b8c:	4622      	mov	r2, r4
   20b8e:	462b      	mov	r3, r5
   20b90:	f7ff f93e 	bl	1fe10 <__aeabi_dmul>
   20b94:	4b72      	ldr	r3, [pc, #456]	; (20d60 <__ieee754_asin+0x350>)
   20b96:	2200      	movs	r2, #0
   20b98:	f7fe ff84 	bl	1faa4 <__adddf3>
   20b9c:	ec45 4b10 	vmov	d0, r4, r5
   20ba0:	4680      	mov	r8, r0
   20ba2:	4689      	mov	r9, r1
   20ba4:	f000 f986 	bl	20eb4 <__ieee754_sqrt>
   20ba8:	4b6f      	ldr	r3, [pc, #444]	; (20d68 <__ieee754_asin+0x358>)
   20baa:	429f      	cmp	r7, r3
   20bac:	ec5b ab10 	vmov	sl, fp, d0
   20bb0:	dc73      	bgt.n	20c9a <__ieee754_asin+0x28a>
   20bb2:	465b      	mov	r3, fp
   20bb4:	2200      	movs	r2, #0
   20bb6:	ee10 0a10 	vmov	r0, s0
   20bba:	ec43 2b18 	vmov	d8, r2, r3
   20bbe:	4659      	mov	r1, fp
   20bc0:	ee10 2a10 	vmov	r2, s0
   20bc4:	f7fe ff6e 	bl	1faa4 <__adddf3>
   20bc8:	4642      	mov	r2, r8
   20bca:	464b      	mov	r3, r9
   20bcc:	4680      	mov	r8, r0
   20bce:	4689      	mov	r9, r1
   20bd0:	ec51 0b19 	vmov	r0, r1, d9
   20bd4:	f7ff fa46 	bl	20064 <__aeabi_ddiv>
   20bd8:	4602      	mov	r2, r0
   20bda:	460b      	mov	r3, r1
   20bdc:	4640      	mov	r0, r8
   20bde:	4649      	mov	r1, r9
   20be0:	f7ff f916 	bl	1fe10 <__aeabi_dmul>
   20be4:	ec53 2b18 	vmov	r2, r3, d8
   20be8:	4680      	mov	r8, r0
   20bea:	4689      	mov	r9, r1
   20bec:	ec51 0b18 	vmov	r0, r1, d8
   20bf0:	f7ff f90e 	bl	1fe10 <__aeabi_dmul>
   20bf4:	4602      	mov	r2, r0
   20bf6:	460b      	mov	r3, r1
   20bf8:	4620      	mov	r0, r4
   20bfa:	4629      	mov	r1, r5
   20bfc:	f7fe ff50 	bl	1faa0 <__aeabi_dsub>
   20c00:	ec53 2b18 	vmov	r2, r3, d8
   20c04:	4604      	mov	r4, r0
   20c06:	460d      	mov	r5, r1
   20c08:	4650      	mov	r0, sl
   20c0a:	4659      	mov	r1, fp
   20c0c:	f7fe ff4a 	bl	1faa4 <__adddf3>
   20c10:	4602      	mov	r2, r0
   20c12:	460b      	mov	r3, r1
   20c14:	4620      	mov	r0, r4
   20c16:	4629      	mov	r1, r5
   20c18:	f7ff fa24 	bl	20064 <__aeabi_ddiv>
   20c1c:	4602      	mov	r2, r0
   20c1e:	460b      	mov	r3, r1
   20c20:	f7fe ff40 	bl	1faa4 <__adddf3>
   20c24:	4602      	mov	r2, r0
   20c26:	460b      	mov	r3, r1
   20c28:	a131      	add	r1, pc, #196	; (adr r1, 20cf0 <__ieee754_asin+0x2e0>)
   20c2a:	e9d1 0100 	ldrd	r0, r1, [r1]
   20c2e:	f7fe ff37 	bl	1faa0 <__aeabi_dsub>
   20c32:	4602      	mov	r2, r0
   20c34:	460b      	mov	r3, r1
   20c36:	4640      	mov	r0, r8
   20c38:	4649      	mov	r1, r9
   20c3a:	f7fe ff31 	bl	1faa0 <__aeabi_dsub>
   20c3e:	ec53 2b18 	vmov	r2, r3, d8
   20c42:	4604      	mov	r4, r0
   20c44:	460d      	mov	r5, r1
   20c46:	ee18 0a10 	vmov	r0, s16
   20c4a:	4619      	mov	r1, r3
   20c4c:	f7fe ff2a 	bl	1faa4 <__adddf3>
   20c50:	4602      	mov	r2, r0
   20c52:	460b      	mov	r3, r1
   20c54:	a13e      	add	r1, pc, #248	; (adr r1, 20d50 <__ieee754_asin+0x340>)
   20c56:	e9d1 0100 	ldrd	r0, r1, [r1]
   20c5a:	f7fe ff21 	bl	1faa0 <__aeabi_dsub>
   20c5e:	4602      	mov	r2, r0
   20c60:	460b      	mov	r3, r1
   20c62:	4620      	mov	r0, r4
   20c64:	4629      	mov	r1, r5
   20c66:	f7fe ff1b 	bl	1faa0 <__aeabi_dsub>
   20c6a:	4602      	mov	r2, r0
   20c6c:	460b      	mov	r3, r1
   20c6e:	a138      	add	r1, pc, #224	; (adr r1, 20d50 <__ieee754_asin+0x340>)
   20c70:	e9d1 0100 	ldrd	r0, r1, [r1]
   20c74:	f7fe ff14 	bl	1faa0 <__aeabi_dsub>
   20c78:	ec41 0b10 	vmov	d0, r0, r1
   20c7c:	2e00      	cmp	r6, #0
   20c7e:	f73f aee7 	bgt.w	20a50 <__ieee754_asin+0x40>
   20c82:	ecbd 8b04 	vpop	{d8-d9}
   20c86:	ee10 1a90 	vmov	r1, s1
   20c8a:	ee10 2a10 	vmov	r2, s0
   20c8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   20c92:	ec43 2b10 	vmov	d0, r2, r3
   20c96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c9a:	4642      	mov	r2, r8
   20c9c:	464b      	mov	r3, r9
   20c9e:	ec51 0b18 	vmov	r0, r1, d8
   20ca2:	f7ff f9df 	bl	20064 <__aeabi_ddiv>
   20ca6:	4652      	mov	r2, sl
   20ca8:	465b      	mov	r3, fp
   20caa:	f7ff f8b1 	bl	1fe10 <__aeabi_dmul>
   20cae:	4652      	mov	r2, sl
   20cb0:	465b      	mov	r3, fp
   20cb2:	f7fe fef7 	bl	1faa4 <__adddf3>
   20cb6:	4602      	mov	r2, r0
   20cb8:	460b      	mov	r3, r1
   20cba:	f7fe fef3 	bl	1faa4 <__adddf3>
   20cbe:	a30c      	add	r3, pc, #48	; (adr r3, 20cf0 <__ieee754_asin+0x2e0>)
   20cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   20cc4:	f7fe feec 	bl	1faa0 <__aeabi_dsub>
   20cc8:	4602      	mov	r2, r0
   20cca:	460b      	mov	r3, r1
   20ccc:	a106      	add	r1, pc, #24	; (adr r1, 20ce8 <__ieee754_asin+0x2d8>)
   20cce:	e9d1 0100 	ldrd	r0, r1, [r1]
   20cd2:	f7fe fee5 	bl	1faa0 <__aeabi_dsub>
   20cd6:	ec41 0b10 	vmov	d0, r0, r1
   20cda:	e7cf      	b.n	20c7c <__ieee754_asin+0x26c>
   20cdc:	ec45 4b10 	vmov	d0, r4, r5
   20ce0:	e6b6      	b.n	20a50 <__ieee754_asin+0x40>
   20ce2:	bf00      	nop
   20ce4:	f3af 8000 	nop.w
   20ce8:	54442d18 	.word	0x54442d18
   20cec:	3ff921fb 	.word	0x3ff921fb
   20cf0:	33145c07 	.word	0x33145c07
   20cf4:	3c91a626 	.word	0x3c91a626
   20cf8:	8800759c 	.word	0x8800759c
   20cfc:	7e37e43c 	.word	0x7e37e43c
   20d00:	0dfdf709 	.word	0x0dfdf709
   20d04:	3f023de1 	.word	0x3f023de1
   20d08:	7501b288 	.word	0x7501b288
   20d0c:	3f49efe0 	.word	0x3f49efe0
   20d10:	b5688f3b 	.word	0xb5688f3b
   20d14:	3fa48228 	.word	0x3fa48228
   20d18:	0e884455 	.word	0x0e884455
   20d1c:	3fc9c155 	.word	0x3fc9c155
   20d20:	03eb6f7d 	.word	0x03eb6f7d
   20d24:	3fd4d612 	.word	0x3fd4d612
   20d28:	55555555 	.word	0x55555555
   20d2c:	3fc55555 	.word	0x3fc55555
   20d30:	b12e9282 	.word	0xb12e9282
   20d34:	3fb3b8c5 	.word	0x3fb3b8c5
   20d38:	1b8d0159 	.word	0x1b8d0159
   20d3c:	3fe6066c 	.word	0x3fe6066c
   20d40:	9c598ac8 	.word	0x9c598ac8
   20d44:	40002ae5 	.word	0x40002ae5
   20d48:	1c8a2d4b 	.word	0x1c8a2d4b
   20d4c:	40033a27 	.word	0x40033a27
   20d50:	54442d18 	.word	0x54442d18
   20d54:	3fe921fb 	.word	0x3fe921fb
   20d58:	3fefffff 	.word	0x3fefffff
   20d5c:	3fdfffff 	.word	0x3fdfffff
   20d60:	3ff00000 	.word	0x3ff00000
   20d64:	3fe00000 	.word	0x3fe00000
   20d68:	3fef3332 	.word	0x3fef3332
   20d6c:	ee10 2a10 	vmov	r2, s0
   20d70:	ee10 0a10 	vmov	r0, s0
   20d74:	462b      	mov	r3, r5
   20d76:	4629      	mov	r1, r5
   20d78:	f7ff f84a 	bl	1fe10 <__aeabi_dmul>
   20d7c:	a339      	add	r3, pc, #228	; (adr r3, 20e64 <__ieee754_asin+0x454>)
   20d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   20d82:	4606      	mov	r6, r0
   20d84:	460f      	mov	r7, r1
   20d86:	f7ff f843 	bl	1fe10 <__aeabi_dmul>
   20d8a:	a338      	add	r3, pc, #224	; (adr r3, 20e6c <__ieee754_asin+0x45c>)
   20d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   20d90:	f7fe fe88 	bl	1faa4 <__adddf3>
   20d94:	4632      	mov	r2, r6
   20d96:	463b      	mov	r3, r7
   20d98:	f7ff f83a 	bl	1fe10 <__aeabi_dmul>
   20d9c:	a335      	add	r3, pc, #212	; (adr r3, 20e74 <__ieee754_asin+0x464>)
   20d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   20da2:	f7fe fe7d 	bl	1faa0 <__aeabi_dsub>
   20da6:	4632      	mov	r2, r6
   20da8:	463b      	mov	r3, r7
   20daa:	f7ff f831 	bl	1fe10 <__aeabi_dmul>
   20dae:	a333      	add	r3, pc, #204	; (adr r3, 20e7c <__ieee754_asin+0x46c>)
   20db0:	e9d3 2300 	ldrd	r2, r3, [r3]
   20db4:	f7fe fe76 	bl	1faa4 <__adddf3>
   20db8:	4632      	mov	r2, r6
   20dba:	463b      	mov	r3, r7
   20dbc:	f7ff f828 	bl	1fe10 <__aeabi_dmul>
   20dc0:	a330      	add	r3, pc, #192	; (adr r3, 20e84 <__ieee754_asin+0x474>)
   20dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   20dc6:	f7fe fe6b 	bl	1faa0 <__aeabi_dsub>
   20dca:	4632      	mov	r2, r6
   20dcc:	463b      	mov	r3, r7
   20dce:	f7ff f81f 	bl	1fe10 <__aeabi_dmul>
   20dd2:	a32e      	add	r3, pc, #184	; (adr r3, 20e8c <__ieee754_asin+0x47c>)
   20dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   20dd8:	f7fe fe64 	bl	1faa4 <__adddf3>
   20ddc:	4632      	mov	r2, r6
   20dde:	463b      	mov	r3, r7
   20de0:	f7ff f816 	bl	1fe10 <__aeabi_dmul>
   20de4:	a32b      	add	r3, pc, #172	; (adr r3, 20e94 <__ieee754_asin+0x484>)
   20de6:	e9d3 2300 	ldrd	r2, r3, [r3]
   20dea:	4680      	mov	r8, r0
   20dec:	4689      	mov	r9, r1
   20dee:	4630      	mov	r0, r6
   20df0:	4639      	mov	r1, r7
   20df2:	f7ff f80d 	bl	1fe10 <__aeabi_dmul>
   20df6:	a329      	add	r3, pc, #164	; (adr r3, 20e9c <__ieee754_asin+0x48c>)
   20df8:	e9d3 2300 	ldrd	r2, r3, [r3]
   20dfc:	f7fe fe50 	bl	1faa0 <__aeabi_dsub>
   20e00:	4632      	mov	r2, r6
   20e02:	463b      	mov	r3, r7
   20e04:	f7ff f804 	bl	1fe10 <__aeabi_dmul>
   20e08:	a326      	add	r3, pc, #152	; (adr r3, 20ea4 <__ieee754_asin+0x494>)
   20e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   20e0e:	f7fe fe49 	bl	1faa4 <__adddf3>
   20e12:	4632      	mov	r2, r6
   20e14:	463b      	mov	r3, r7
   20e16:	f7fe fffb 	bl	1fe10 <__aeabi_dmul>
   20e1a:	a324      	add	r3, pc, #144	; (adr r3, 20eac <__ieee754_asin+0x49c>)
   20e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   20e20:	f7fe fe3e 	bl	1faa0 <__aeabi_dsub>
   20e24:	4632      	mov	r2, r6
   20e26:	463b      	mov	r3, r7
   20e28:	f7fe fff2 	bl	1fe10 <__aeabi_dmul>
   20e2c:	4b0c      	ldr	r3, [pc, #48]	; (20e60 <__ieee754_asin+0x450>)
   20e2e:	2200      	movs	r2, #0
   20e30:	f7fe fe38 	bl	1faa4 <__adddf3>
   20e34:	4602      	mov	r2, r0
   20e36:	460b      	mov	r3, r1
   20e38:	4640      	mov	r0, r8
   20e3a:	4649      	mov	r1, r9
   20e3c:	f7ff f912 	bl	20064 <__aeabi_ddiv>
   20e40:	4622      	mov	r2, r4
   20e42:	462b      	mov	r3, r5
   20e44:	f7fe ffe4 	bl	1fe10 <__aeabi_dmul>
   20e48:	4622      	mov	r2, r4
   20e4a:	462b      	mov	r3, r5
   20e4c:	f7fe fe2a 	bl	1faa4 <__adddf3>
   20e50:	ecbd 8b04 	vpop	{d8-d9}
   20e54:	ec41 0b10 	vmov	d0, r0, r1
   20e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e5c:	f3af 8000 	nop.w
   20e60:	3ff00000 	.word	0x3ff00000
   20e64:	0dfdf709 	.word	0x0dfdf709
   20e68:	3f023de1 	.word	0x3f023de1
   20e6c:	7501b288 	.word	0x7501b288
   20e70:	3f49efe0 	.word	0x3f49efe0
   20e74:	b5688f3b 	.word	0xb5688f3b
   20e78:	3fa48228 	.word	0x3fa48228
   20e7c:	0e884455 	.word	0x0e884455
   20e80:	3fc9c155 	.word	0x3fc9c155
   20e84:	03eb6f7d 	.word	0x03eb6f7d
   20e88:	3fd4d612 	.word	0x3fd4d612
   20e8c:	55555555 	.word	0x55555555
   20e90:	3fc55555 	.word	0x3fc55555
   20e94:	b12e9282 	.word	0xb12e9282
   20e98:	3fb3b8c5 	.word	0x3fb3b8c5
   20e9c:	1b8d0159 	.word	0x1b8d0159
   20ea0:	3fe6066c 	.word	0x3fe6066c
   20ea4:	9c598ac8 	.word	0x9c598ac8
   20ea8:	40002ae5 	.word	0x40002ae5
   20eac:	1c8a2d4b 	.word	0x1c8a2d4b
   20eb0:	40033a27 	.word	0x40033a27

00020eb4 <__ieee754_sqrt>:
   20eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20eb8:	4a63      	ldr	r2, [pc, #396]	; (21048 <__ieee754_sqrt+0x194>)
   20eba:	ec55 4b10 	vmov	r4, r5, d0
   20ebe:	43aa      	bics	r2, r5
   20ec0:	f000 809f 	beq.w	21002 <__ieee754_sqrt+0x14e>
   20ec4:	2d00      	cmp	r5, #0
   20ec6:	ee10 ca10 	vmov	ip, s0
   20eca:	462b      	mov	r3, r5
   20ecc:	dd54      	ble.n	20f78 <__ieee754_sqrt+0xc4>
   20ece:	1529      	asrs	r1, r5, #20
   20ed0:	d063      	beq.n	20f9a <__ieee754_sqrt+0xe6>
   20ed2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   20ed6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   20eda:	07c9      	lsls	r1, r1, #31
   20edc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   20ee0:	d404      	bmi.n	20eec <__ieee754_sqrt+0x38>
   20ee2:	005b      	lsls	r3, r3, #1
   20ee4:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   20ee8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   20eec:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   20ef0:	2600      	movs	r6, #0
   20ef2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   20ef6:	107f      	asrs	r7, r7, #1
   20ef8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   20efc:	f04f 0e16 	mov.w	lr, #22
   20f00:	4634      	mov	r4, r6
   20f02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   20f06:	18a1      	adds	r1, r4, r2
   20f08:	4299      	cmp	r1, r3
   20f0a:	dc02      	bgt.n	20f12 <__ieee754_sqrt+0x5e>
   20f0c:	1a5b      	subs	r3, r3, r1
   20f0e:	188c      	adds	r4, r1, r2
   20f10:	4416      	add	r6, r2
   20f12:	005b      	lsls	r3, r3, #1
   20f14:	f1be 0e01 	subs.w	lr, lr, #1
   20f18:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   20f1c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   20f20:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   20f24:	d1ef      	bne.n	20f06 <__ieee754_sqrt+0x52>
   20f26:	4675      	mov	r5, lr
   20f28:	2020      	movs	r0, #32
   20f2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   20f2e:	e00a      	b.n	20f46 <__ieee754_sqrt+0x92>
   20f30:	d044      	beq.n	20fbc <__ieee754_sqrt+0x108>
   20f32:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   20f36:	3801      	subs	r0, #1
   20f38:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   20f3c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   20f40:	ea4f 0252 	mov.w	r2, r2, lsr #1
   20f44:	d043      	beq.n	20fce <__ieee754_sqrt+0x11a>
   20f46:	42a3      	cmp	r3, r4
   20f48:	eb02 010e 	add.w	r1, r2, lr
   20f4c:	ddf0      	ble.n	20f30 <__ieee754_sqrt+0x7c>
   20f4e:	2900      	cmp	r1, #0
   20f50:	eb01 0e02 	add.w	lr, r1, r2
   20f54:	db0a      	blt.n	20f6c <__ieee754_sqrt+0xb8>
   20f56:	46a0      	mov	r8, r4
   20f58:	1b1b      	subs	r3, r3, r4
   20f5a:	4561      	cmp	r1, ip
   20f5c:	bf88      	it	hi
   20f5e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   20f62:	ebac 0c01 	sub.w	ip, ip, r1
   20f66:	4415      	add	r5, r2
   20f68:	4644      	mov	r4, r8
   20f6a:	e7e2      	b.n	20f32 <__ieee754_sqrt+0x7e>
   20f6c:	f1be 0f00 	cmp.w	lr, #0
   20f70:	dbf1      	blt.n	20f56 <__ieee754_sqrt+0xa2>
   20f72:	f104 0801 	add.w	r8, r4, #1
   20f76:	e7ef      	b.n	20f58 <__ieee754_sqrt+0xa4>
   20f78:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   20f7c:	4322      	orrs	r2, r4
   20f7e:	d038      	beq.n	20ff2 <__ieee754_sqrt+0x13e>
   20f80:	2d00      	cmp	r5, #0
   20f82:	d14e      	bne.n	21022 <__ieee754_sqrt+0x16e>
   20f84:	4629      	mov	r1, r5
   20f86:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   20f8a:	3915      	subs	r1, #21
   20f8c:	4613      	mov	r3, r2
   20f8e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   20f92:	2a00      	cmp	r2, #0
   20f94:	d0f7      	beq.n	20f86 <__ieee754_sqrt+0xd2>
   20f96:	02d6      	lsls	r6, r2, #11
   20f98:	d450      	bmi.n	2103c <__ieee754_sqrt+0x188>
   20f9a:	2000      	movs	r0, #0
   20f9c:	005b      	lsls	r3, r3, #1
   20f9e:	02dd      	lsls	r5, r3, #11
   20fa0:	4604      	mov	r4, r0
   20fa2:	f100 0001 	add.w	r0, r0, #1
   20fa6:	d5f9      	bpl.n	20f9c <__ieee754_sqrt+0xe8>
   20fa8:	461a      	mov	r2, r3
   20faa:	4663      	mov	r3, ip
   20fac:	fa0c fc00 	lsl.w	ip, ip, r0
   20fb0:	f1c0 0020 	rsb	r0, r0, #32
   20fb4:	40c3      	lsrs	r3, r0
   20fb6:	1b09      	subs	r1, r1, r4
   20fb8:	4313      	orrs	r3, r2
   20fba:	e78a      	b.n	20ed2 <__ieee754_sqrt+0x1e>
   20fbc:	4561      	cmp	r1, ip
   20fbe:	d8b8      	bhi.n	20f32 <__ieee754_sqrt+0x7e>
   20fc0:	2900      	cmp	r1, #0
   20fc2:	eb01 0e02 	add.w	lr, r1, r2
   20fc6:	dbd1      	blt.n	20f6c <__ieee754_sqrt+0xb8>
   20fc8:	4698      	mov	r8, r3
   20fca:	2300      	movs	r3, #0
   20fcc:	e7c9      	b.n	20f62 <__ieee754_sqrt+0xae>
   20fce:	ea53 030c 	orrs.w	r3, r3, ip
   20fd2:	d110      	bne.n	20ff6 <__ieee754_sqrt+0x142>
   20fd4:	0868      	lsrs	r0, r5, #1
   20fd6:	1071      	asrs	r1, r6, #1
   20fd8:	07f3      	lsls	r3, r6, #31
   20fda:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   20fde:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   20fe2:	bf48      	it	mi
   20fe4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   20fe8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   20fec:	4602      	mov	r2, r0
   20fee:	ec43 2b10 	vmov	d0, r2, r3
   20ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20ff6:	1c6a      	adds	r2, r5, #1
   20ff8:	bf16      	itet	ne
   20ffa:	1c68      	addne	r0, r5, #1
   20ffc:	3601      	addeq	r6, #1
   20ffe:	0840      	lsrne	r0, r0, #1
   21000:	e7e9      	b.n	20fd6 <__ieee754_sqrt+0x122>
   21002:	ee10 2a10 	vmov	r2, s0
   21006:	ee10 0a10 	vmov	r0, s0
   2100a:	462b      	mov	r3, r5
   2100c:	4629      	mov	r1, r5
   2100e:	f7fe feff 	bl	1fe10 <__aeabi_dmul>
   21012:	4622      	mov	r2, r4
   21014:	462b      	mov	r3, r5
   21016:	f7fe fd45 	bl	1faa4 <__adddf3>
   2101a:	ec41 0b10 	vmov	d0, r0, r1
   2101e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21022:	ee10 2a10 	vmov	r2, s0
   21026:	4620      	mov	r0, r4
   21028:	4629      	mov	r1, r5
   2102a:	f7fe fd39 	bl	1faa0 <__aeabi_dsub>
   2102e:	4602      	mov	r2, r0
   21030:	460b      	mov	r3, r1
   21032:	f7ff f817 	bl	20064 <__aeabi_ddiv>
   21036:	ec41 0b10 	vmov	d0, r0, r1
   2103a:	e7da      	b.n	20ff2 <__ieee754_sqrt+0x13e>
   2103c:	4663      	mov	r3, ip
   2103e:	2020      	movs	r0, #32
   21040:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   21044:	e7b6      	b.n	20fb4 <__ieee754_sqrt+0x100>
   21046:	bf00      	nop
   21048:	7ff00000 	.word	0x7ff00000

0002104c <__ieee754_atan2f>:
   2104c:	b510      	push	{r4, lr}
   2104e:	b082      	sub	sp, #8
   21050:	edcd 0a01 	vstr	s1, [sp, #4]
   21054:	9b01      	ldr	r3, [sp, #4]
   21056:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   2105a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   2105e:	eef0 7a40 	vmov.f32	s15, s0
   21062:	dc30      	bgt.n	210c6 <__ieee754_atan2f+0x7a>
   21064:	ee10 0a10 	vmov	r0, s0
   21068:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   2106c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   21070:	dc29      	bgt.n	210c6 <__ieee754_atan2f+0x7a>
   21072:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   21076:	d042      	beq.n	210fe <__ieee754_atan2f+0xb2>
   21078:	179c      	asrs	r4, r3, #30
   2107a:	f004 0402 	and.w	r4, r4, #2
   2107e:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   21082:	b331      	cbz	r1, 210d2 <__ieee754_atan2f+0x86>
   21084:	b37a      	cbz	r2, 210e6 <__ieee754_atan2f+0x9a>
   21086:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   2108a:	d040      	beq.n	2110e <__ieee754_atan2f+0xc2>
   2108c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   21090:	d029      	beq.n	210e6 <__ieee754_atan2f+0x9a>
   21092:	1a8a      	subs	r2, r1, r2
   21094:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   21098:	ea4f 51e2 	mov.w	r1, r2, asr #23
   2109c:	da34      	bge.n	21108 <__ieee754_atan2f+0xbc>
   2109e:	2b00      	cmp	r3, #0
   210a0:	da42      	bge.n	21128 <__ieee754_atan2f+0xdc>
   210a2:	313c      	adds	r1, #60	; 0x3c
   210a4:	da40      	bge.n	21128 <__ieee754_atan2f+0xdc>
   210a6:	ed9f 0a34 	vldr	s0, [pc, #208]	; 21178 <__ieee754_atan2f+0x12c>
   210aa:	2c01      	cmp	r4, #1
   210ac:	d04e      	beq.n	2114c <__ieee754_atan2f+0x100>
   210ae:	2c02      	cmp	r4, #2
   210b0:	d043      	beq.n	2113a <__ieee754_atan2f+0xee>
   210b2:	b164      	cbz	r4, 210ce <__ieee754_atan2f+0x82>
   210b4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 2117c <__ieee754_atan2f+0x130>
   210b8:	eddf 7a31 	vldr	s15, [pc, #196]	; 21180 <__ieee754_atan2f+0x134>
   210bc:	ee30 0a07 	vadd.f32	s0, s0, s14
   210c0:	ee30 0a67 	vsub.f32	s0, s0, s15
   210c4:	e003      	b.n	210ce <__ieee754_atan2f+0x82>
   210c6:	ed9d 7a01 	vldr	s14, [sp, #4]
   210ca:	ee37 0a27 	vadd.f32	s0, s14, s15
   210ce:	b002      	add	sp, #8
   210d0:	bd10      	pop	{r4, pc}
   210d2:	2c02      	cmp	r4, #2
   210d4:	d010      	beq.n	210f8 <__ieee754_atan2f+0xac>
   210d6:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 21184 <__ieee754_atan2f+0x138>
   210da:	2c03      	cmp	r4, #3
   210dc:	bf18      	it	ne
   210de:	eeb0 0a67 	vmovne.f32	s0, s15
   210e2:	b002      	add	sp, #8
   210e4:	bd10      	pop	{r4, pc}
   210e6:	ed9f 0a28 	vldr	s0, [pc, #160]	; 21188 <__ieee754_atan2f+0x13c>
   210ea:	eddf 7a28 	vldr	s15, [pc, #160]	; 2118c <__ieee754_atan2f+0x140>
   210ee:	2800      	cmp	r0, #0
   210f0:	bfb8      	it	lt
   210f2:	eeb0 0a67 	vmovlt.f32	s0, s15
   210f6:	e7ea      	b.n	210ce <__ieee754_atan2f+0x82>
   210f8:	ed9f 0a21 	vldr	s0, [pc, #132]	; 21180 <__ieee754_atan2f+0x134>
   210fc:	e7e7      	b.n	210ce <__ieee754_atan2f+0x82>
   210fe:	b002      	add	sp, #8
   21100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21104:	f000 b94c 	b.w	213a0 <atanf>
   21108:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 21188 <__ieee754_atan2f+0x13c>
   2110c:	e7cd      	b.n	210aa <__ieee754_atan2f+0x5e>
   2110e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   21112:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   21116:	d020      	beq.n	2115a <__ieee754_atan2f+0x10e>
   21118:	2c02      	cmp	r4, #2
   2111a:	d826      	bhi.n	2116a <__ieee754_atan2f+0x11e>
   2111c:	4b1c      	ldr	r3, [pc, #112]	; (21190 <__ieee754_atan2f+0x144>)
   2111e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   21122:	ed94 0a03 	vldr	s0, [r4, #12]
   21126:	e7d2      	b.n	210ce <__ieee754_atan2f+0x82>
   21128:	ed9d 7a01 	vldr	s14, [sp, #4]
   2112c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   21130:	f000 fa0a 	bl	21548 <fabsf>
   21134:	f000 f934 	bl	213a0 <atanf>
   21138:	e7b7      	b.n	210aa <__ieee754_atan2f+0x5e>
   2113a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 2117c <__ieee754_atan2f+0x130>
   2113e:	eddf 7a10 	vldr	s15, [pc, #64]	; 21180 <__ieee754_atan2f+0x134>
   21142:	ee30 0a07 	vadd.f32	s0, s0, s14
   21146:	ee37 0ac0 	vsub.f32	s0, s15, s0
   2114a:	e7c0      	b.n	210ce <__ieee754_atan2f+0x82>
   2114c:	ee10 3a10 	vmov	r3, s0
   21150:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   21154:	ee00 3a10 	vmov	s0, r3
   21158:	e7b9      	b.n	210ce <__ieee754_atan2f+0x82>
   2115a:	2c02      	cmp	r4, #2
   2115c:	d808      	bhi.n	21170 <__ieee754_atan2f+0x124>
   2115e:	4b0c      	ldr	r3, [pc, #48]	; (21190 <__ieee754_atan2f+0x144>)
   21160:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   21164:	ed94 0a00 	vldr	s0, [r4]
   21168:	e7b1      	b.n	210ce <__ieee754_atan2f+0x82>
   2116a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 21178 <__ieee754_atan2f+0x12c>
   2116e:	e7ae      	b.n	210ce <__ieee754_atan2f+0x82>
   21170:	ed9f 0a08 	vldr	s0, [pc, #32]	; 21194 <__ieee754_atan2f+0x148>
   21174:	e7ab      	b.n	210ce <__ieee754_atan2f+0x82>
   21176:	bf00      	nop
   21178:	00000000 	.word	0x00000000
   2117c:	33bbbd2e 	.word	0x33bbbd2e
   21180:	40490fdb 	.word	0x40490fdb
   21184:	c0490fdb 	.word	0xc0490fdb
   21188:	3fc90fdb 	.word	0x3fc90fdb
   2118c:	bfc90fdb 	.word	0xbfc90fdb
   21190:	00023da0 	.word	0x00023da0
   21194:	3f490fdb 	.word	0x3f490fdb

00021198 <__ieee754_fmodf>:
   21198:	b530      	push	{r4, r5, lr}
   2119a:	b083      	sub	sp, #12
   2119c:	edcd 0a01 	vstr	s1, [sp, #4]
   211a0:	9d01      	ldr	r5, [sp, #4]
   211a2:	f035 4000 	bics.w	r0, r5, #2147483648	; 0x80000000
   211a6:	d041      	beq.n	2122c <__ieee754_fmodf+0x94>
   211a8:	ee10 ea10 	vmov	lr, s0
   211ac:	f02e 4300 	bic.w	r3, lr, #2147483648	; 0x80000000
   211b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   211b4:	da3a      	bge.n	2122c <__ieee754_fmodf+0x94>
   211b6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   211ba:	dc37      	bgt.n	2122c <__ieee754_fmodf+0x94>
   211bc:	4283      	cmp	r3, r0
   211be:	db3b      	blt.n	21238 <__ieee754_fmodf+0xa0>
   211c0:	f00e 4400 	and.w	r4, lr, #2147483648	; 0x80000000
   211c4:	d03a      	beq.n	2123c <__ieee754_fmodf+0xa4>
   211c6:	f01e 4fff 	tst.w	lr, #2139095040	; 0x7f800000
   211ca:	d156      	bne.n	2127a <__ieee754_fmodf+0xe2>
   211cc:	0219      	lsls	r1, r3, #8
   211ce:	2900      	cmp	r1, #0
   211d0:	f06f 027d 	mvn.w	r2, #125	; 0x7d
   211d4:	dd04      	ble.n	211e0 <__ieee754_fmodf+0x48>
   211d6:	0049      	lsls	r1, r1, #1
   211d8:	2900      	cmp	r1, #0
   211da:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   211de:	dcfa      	bgt.n	211d6 <__ieee754_fmodf+0x3e>
   211e0:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
   211e4:	d157      	bne.n	21296 <__ieee754_fmodf+0xfe>
   211e6:	0201      	lsls	r1, r0, #8
   211e8:	f06f 0c7d 	mvn.w	ip, #125	; 0x7d
   211ec:	d403      	bmi.n	211f6 <__ieee754_fmodf+0x5e>
   211ee:	0049      	lsls	r1, r1, #1
   211f0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   211f4:	d5fb      	bpl.n	211ee <__ieee754_fmodf+0x56>
   211f6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
   211fa:	db47      	blt.n	2128c <__ieee754_fmodf+0xf4>
   211fc:	f3ce 0316 	ubfx	r3, lr, #0, #23
   21200:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   21204:	f11c 0f7e 	cmn.w	ip, #126	; 0x7e
   21208:	db3a      	blt.n	21280 <__ieee754_fmodf+0xe8>
   2120a:	f3c5 0016 	ubfx	r0, r5, #0, #23
   2120e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   21212:	ebb2 020c 	subs.w	r2, r2, ip
   21216:	d104      	bne.n	21222 <__ieee754_fmodf+0x8a>
   21218:	e017      	b.n	2124a <__ieee754_fmodf+0xb2>
   2121a:	d00f      	beq.n	2123c <__ieee754_fmodf+0xa4>
   2121c:	004b      	lsls	r3, r1, #1
   2121e:	3a01      	subs	r2, #1
   21220:	d013      	beq.n	2124a <__ieee754_fmodf+0xb2>
   21222:	1a19      	subs	r1, r3, r0
   21224:	2900      	cmp	r1, #0
   21226:	daf8      	bge.n	2121a <__ieee754_fmodf+0x82>
   21228:	005b      	lsls	r3, r3, #1
   2122a:	e7f8      	b.n	2121e <__ieee754_fmodf+0x86>
   2122c:	eddd 7a01 	vldr	s15, [sp, #4]
   21230:	ee60 7a27 	vmul.f32	s15, s0, s15
   21234:	ee87 0aa7 	vdiv.f32	s0, s15, s15
   21238:	b003      	add	sp, #12
   2123a:	bd30      	pop	{r4, r5, pc}
   2123c:	4b1d      	ldr	r3, [pc, #116]	; (212b4 <__ieee754_fmodf+0x11c>)
   2123e:	eb03 7354 	add.w	r3, r3, r4, lsr #29
   21242:	ed93 0a00 	vldr	s0, [r3]
   21246:	b003      	add	sp, #12
   21248:	bd30      	pop	{r4, r5, pc}
   2124a:	1a18      	subs	r0, r3, r0
   2124c:	bf58      	it	pl
   2124e:	4603      	movpl	r3, r0
   21250:	b91b      	cbnz	r3, 2125a <__ieee754_fmodf+0xc2>
   21252:	e7f3      	b.n	2123c <__ieee754_fmodf+0xa4>
   21254:	005b      	lsls	r3, r3, #1
   21256:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   2125a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   2125e:	dbf9      	blt.n	21254 <__ieee754_fmodf+0xbc>
   21260:	f11c 0f7e 	cmn.w	ip, #126	; 0x7e
   21264:	db1c      	blt.n	212a0 <__ieee754_fmodf+0x108>
   21266:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   2126a:	f10c 0c7f 	add.w	ip, ip, #127	; 0x7f
   2126e:	4323      	orrs	r3, r4
   21270:	ea43 53cc 	orr.w	r3, r3, ip, lsl #23
   21274:	ee00 3a10 	vmov	s0, r3
   21278:	e7de      	b.n	21238 <__ieee754_fmodf+0xa0>
   2127a:	15da      	asrs	r2, r3, #23
   2127c:	3a7f      	subs	r2, #127	; 0x7f
   2127e:	e7af      	b.n	211e0 <__ieee754_fmodf+0x48>
   21280:	f06f 017d 	mvn.w	r1, #125	; 0x7d
   21284:	eba1 010c 	sub.w	r1, r1, ip
   21288:	4088      	lsls	r0, r1
   2128a:	e7c2      	b.n	21212 <__ieee754_fmodf+0x7a>
   2128c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
   21290:	1a89      	subs	r1, r1, r2
   21292:	408b      	lsls	r3, r1
   21294:	e7b6      	b.n	21204 <__ieee754_fmodf+0x6c>
   21296:	ea4f 5ce0 	mov.w	ip, r0, asr #23
   2129a:	f1ac 0c7f 	sub.w	ip, ip, #127	; 0x7f
   2129e:	e7aa      	b.n	211f6 <__ieee754_fmodf+0x5e>
   212a0:	f06f 027d 	mvn.w	r2, #125	; 0x7d
   212a4:	eba2 0c0c 	sub.w	ip, r2, ip
   212a8:	fa43 f30c 	asr.w	r3, r3, ip
   212ac:	4323      	orrs	r3, r4
   212ae:	ee00 3a10 	vmov	s0, r3
   212b2:	e7c1      	b.n	21238 <__ieee754_fmodf+0xa0>
   212b4:	00023db8 	.word	0x00023db8

000212b8 <__ieee754_log10f>:
   212b8:	b508      	push	{r3, lr}
   212ba:	ee10 3a10 	vmov	r3, s0
   212be:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   212c2:	ed2d 8b02 	vpush	{d8}
   212c6:	d02b      	beq.n	21320 <__ieee754_log10f+0x68>
   212c8:	2b00      	cmp	r3, #0
   212ca:	db32      	blt.n	21332 <__ieee754_log10f+0x7a>
   212cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   212d0:	da41      	bge.n	21356 <__ieee754_log10f+0x9e>
   212d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   212d6:	db35      	blt.n	21344 <__ieee754_log10f+0x8c>
   212d8:	2100      	movs	r1, #0
   212da:	15da      	asrs	r2, r3, #23
   212dc:	3a7f      	subs	r2, #127	; 0x7f
   212de:	440a      	add	r2, r1
   212e0:	0fd1      	lsrs	r1, r2, #31
   212e2:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
   212e6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   212ea:	f3c3 0316 	ubfx	r3, r3, #0, #23
   212ee:	ee07 2a90 	vmov	s15, r2
   212f2:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
   212f6:	ee00 3a10 	vmov	s0, r3
   212fa:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   212fe:	f000 f931 	bl	21564 <__ieee754_logf>
   21302:	eddf 7a17 	vldr	s15, [pc, #92]	; 21360 <__ieee754_log10f+0xa8>
   21306:	ed9f 7a17 	vldr	s14, [pc, #92]	; 21364 <__ieee754_log10f+0xac>
   2130a:	ee20 0a27 	vmul.f32	s0, s0, s15
   2130e:	eddf 7a16 	vldr	s15, [pc, #88]	; 21368 <__ieee754_log10f+0xb0>
   21312:	eea8 0a07 	vfma.f32	s0, s16, s14
   21316:	eea8 0a27 	vfma.f32	s0, s16, s15
   2131a:	ecbd 8b02 	vpop	{d8}
   2131e:	bd08      	pop	{r3, pc}
   21320:	ecbd 8b02 	vpop	{d8}
   21324:	ed9f 7a11 	vldr	s14, [pc, #68]	; 2136c <__ieee754_log10f+0xb4>
   21328:	eddf 7a11 	vldr	s15, [pc, #68]	; 21370 <__ieee754_log10f+0xb8>
   2132c:	ee87 0a27 	vdiv.f32	s0, s14, s15
   21330:	bd08      	pop	{r3, pc}
   21332:	ecbd 8b02 	vpop	{d8}
   21336:	ee70 7a40 	vsub.f32	s15, s0, s0
   2133a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 21370 <__ieee754_log10f+0xb8>
   2133e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   21342:	bd08      	pop	{r3, pc}
   21344:	eddf 7a0b 	vldr	s15, [pc, #44]	; 21374 <__ieee754_log10f+0xbc>
   21348:	ee60 7a27 	vmul.f32	s15, s0, s15
   2134c:	f06f 0118 	mvn.w	r1, #24
   21350:	ee17 3a90 	vmov	r3, s15
   21354:	e7c1      	b.n	212da <__ieee754_log10f+0x22>
   21356:	ecbd 8b02 	vpop	{d8}
   2135a:	ee30 0a00 	vadd.f32	s0, s0, s0
   2135e:	bd08      	pop	{r3, pc}
   21360:	3ede5bd9 	.word	0x3ede5bd9
   21364:	355427db 	.word	0x355427db
   21368:	3e9a2080 	.word	0x3e9a2080
   2136c:	cc000000 	.word	0xcc000000
   21370:	00000000 	.word	0x00000000
   21374:	4c000000 	.word	0x4c000000

00021378 <fabs>:
   21378:	ec51 0b10 	vmov	r0, r1, d0
   2137c:	ee10 2a10 	vmov	r2, s0
   21380:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   21384:	ec43 2b10 	vmov	d0, r2, r3
   21388:	4770      	bx	lr
   2138a:	bf00      	nop
   2138c:	0000      	movs	r0, r0
	...

00021390 <nan>:
   21390:	ed9f 0b01 	vldr	d0, [pc, #4]	; 21398 <nan+0x8>
   21394:	4770      	bx	lr
   21396:	bf00      	nop
   21398:	00000000 	.word	0x00000000
   2139c:	7ff80000 	.word	0x7ff80000

000213a0 <atanf>:
   213a0:	b538      	push	{r3, r4, r5, lr}
   213a2:	ee10 5a10 	vmov	r5, s0
   213a6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   213aa:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   213ae:	eef0 7a40 	vmov.f32	s15, s0
   213b2:	db0b      	blt.n	213cc <atanf+0x2c>
   213b4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   213b8:	dc58      	bgt.n	2146c <atanf+0xcc>
   213ba:	eddf 7a51 	vldr	s15, [pc, #324]	; 21500 <atanf+0x160>
   213be:	ed9f 0a51 	vldr	s0, [pc, #324]	; 21504 <atanf+0x164>
   213c2:	2d00      	cmp	r5, #0
   213c4:	bfc8      	it	gt
   213c6:	eeb0 0a67 	vmovgt.f32	s0, s15
   213ca:	bd38      	pop	{r3, r4, r5, pc}
   213cc:	4b4e      	ldr	r3, [pc, #312]	; (21508 <atanf+0x168>)
   213ce:	429c      	cmp	r4, r3
   213d0:	dc5b      	bgt.n	2148a <atanf+0xea>
   213d2:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   213d6:	db4c      	blt.n	21472 <atanf+0xd2>
   213d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   213dc:	ee67 6aa7 	vmul.f32	s13, s15, s15
   213e0:	eddf 4a4a 	vldr	s9, [pc, #296]	; 2150c <atanf+0x16c>
   213e4:	eddf 5a4a 	vldr	s11, [pc, #296]	; 21510 <atanf+0x170>
   213e8:	ed9f 5a4a 	vldr	s10, [pc, #296]	; 21514 <atanf+0x174>
   213ec:	ed9f 4a4a 	vldr	s8, [pc, #296]	; 21518 <atanf+0x178>
   213f0:	ee26 7aa6 	vmul.f32	s14, s13, s13
   213f4:	eeb0 6a66 	vmov.f32	s12, s13
   213f8:	eee7 5a24 	vfma.f32	s11, s14, s9
   213fc:	1c53      	adds	r3, r2, #1
   213fe:	eddf 4a47 	vldr	s9, [pc, #284]	; 2151c <atanf+0x17c>
   21402:	eddf 6a47 	vldr	s13, [pc, #284]	; 21520 <atanf+0x180>
   21406:	eea5 5a87 	vfma.f32	s10, s11, s14
   2140a:	eee7 6a24 	vfma.f32	s13, s14, s9
   2140e:	eddf 5a45 	vldr	s11, [pc, #276]	; 21524 <atanf+0x184>
   21412:	eddf 4a45 	vldr	s9, [pc, #276]	; 21528 <atanf+0x188>
   21416:	eee6 5a87 	vfma.f32	s11, s13, s14
   2141a:	eea5 4a07 	vfma.f32	s8, s10, s14
   2141e:	ed9f 5a43 	vldr	s10, [pc, #268]	; 2152c <atanf+0x18c>
   21422:	eddf 6a43 	vldr	s13, [pc, #268]	; 21530 <atanf+0x190>
   21426:	eea5 5a87 	vfma.f32	s10, s11, s14
   2142a:	eee4 4a07 	vfma.f32	s9, s8, s14
   2142e:	eddf 5a41 	vldr	s11, [pc, #260]	; 21534 <atanf+0x194>
   21432:	eee4 6a87 	vfma.f32	s13, s9, s14
   21436:	eee5 5a07 	vfma.f32	s11, s10, s14
   2143a:	ee66 6a86 	vmul.f32	s13, s13, s12
   2143e:	ee25 7a87 	vmul.f32	s14, s11, s14
   21442:	d037      	beq.n	214b4 <atanf+0x114>
   21444:	4b3c      	ldr	r3, [pc, #240]	; (21538 <atanf+0x198>)
   21446:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   2144a:	ee76 6a87 	vadd.f32	s13, s13, s14
   2144e:	ed93 0a00 	vldr	s0, [r3]
   21452:	ed93 7a04 	vldr	s14, [r3, #16]
   21456:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   2145a:	2d00      	cmp	r5, #0
   2145c:	ee70 7a67 	vsub.f32	s15, s0, s15
   21460:	ee37 0a67 	vsub.f32	s0, s14, s15
   21464:	dab1      	bge.n	213ca <atanf+0x2a>
   21466:	eeb1 0a40 	vneg.f32	s0, s0
   2146a:	bd38      	pop	{r3, r4, r5, pc}
   2146c:	ee30 0a00 	vadd.f32	s0, s0, s0
   21470:	bd38      	pop	{r3, r4, r5, pc}
   21472:	ed9f 7a32 	vldr	s14, [pc, #200]	; 2153c <atanf+0x19c>
   21476:	ee30 7a07 	vadd.f32	s14, s0, s14
   2147a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   2147e:	eeb4 7ae6 	vcmpe.f32	s14, s13
   21482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21486:	dda7      	ble.n	213d8 <atanf+0x38>
   21488:	bd38      	pop	{r3, r4, r5, pc}
   2148a:	f000 f85d 	bl	21548 <fabsf>
   2148e:	4b2c      	ldr	r3, [pc, #176]	; (21540 <atanf+0x1a0>)
   21490:	429c      	cmp	r4, r3
   21492:	dc16      	bgt.n	214c2 <atanf+0x122>
   21494:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   21498:	429c      	cmp	r4, r3
   2149a:	dc27      	bgt.n	214ec <atanf+0x14c>
   2149c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   214a0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   214a4:	eea0 7a27 	vfma.f32	s14, s0, s15
   214a8:	2200      	movs	r2, #0
   214aa:	ee30 0a27 	vadd.f32	s0, s0, s15
   214ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
   214b2:	e793      	b.n	213dc <atanf+0x3c>
   214b4:	ee76 6a87 	vadd.f32	s13, s13, s14
   214b8:	eee6 7ae7 	vfms.f32	s15, s13, s15
   214bc:	eeb0 0a67 	vmov.f32	s0, s15
   214c0:	bd38      	pop	{r3, r4, r5, pc}
   214c2:	4b20      	ldr	r3, [pc, #128]	; (21544 <atanf+0x1a4>)
   214c4:	429c      	cmp	r4, r3
   214c6:	dc0b      	bgt.n	214e0 <atanf+0x140>
   214c8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   214cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   214d0:	eea0 7a27 	vfma.f32	s14, s0, s15
   214d4:	2202      	movs	r2, #2
   214d6:	ee30 0a67 	vsub.f32	s0, s0, s15
   214da:	eec0 7a07 	vdiv.f32	s15, s0, s14
   214de:	e77d      	b.n	213dc <atanf+0x3c>
   214e0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   214e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
   214e8:	2203      	movs	r2, #3
   214ea:	e777      	b.n	213dc <atanf+0x3c>
   214ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   214f0:	ee30 7a67 	vsub.f32	s14, s0, s15
   214f4:	ee30 0a27 	vadd.f32	s0, s0, s15
   214f8:	2201      	movs	r2, #1
   214fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
   214fe:	e76d      	b.n	213dc <atanf+0x3c>
   21500:	3fc90fdb 	.word	0x3fc90fdb
   21504:	bfc90fdb 	.word	0xbfc90fdb
   21508:	3edfffff 	.word	0x3edfffff
   2150c:	3c8569d7 	.word	0x3c8569d7
   21510:	3d4bda59 	.word	0x3d4bda59
   21514:	3d886b35 	.word	0x3d886b35
   21518:	3dba2e6e 	.word	0x3dba2e6e
   2151c:	bd15a221 	.word	0xbd15a221
   21520:	bd6ef16b 	.word	0xbd6ef16b
   21524:	bd9d8795 	.word	0xbd9d8795
   21528:	3e124925 	.word	0x3e124925
   2152c:	bde38e38 	.word	0xbde38e38
   21530:	3eaaaaab 	.word	0x3eaaaaab
   21534:	be4ccccd 	.word	0xbe4ccccd
   21538:	00023dc0 	.word	0x00023dc0
   2153c:	7149f2ca 	.word	0x7149f2ca
   21540:	3f97ffff 	.word	0x3f97ffff
   21544:	401bffff 	.word	0x401bffff

00021548 <fabsf>:
   21548:	ee10 3a10 	vmov	r3, s0
   2154c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   21550:	ee00 3a10 	vmov	s0, r3
   21554:	4770      	bx	lr
   21556:	bf00      	nop

00021558 <nanf>:
   21558:	ed9f 0a01 	vldr	s0, [pc, #4]	; 21560 <nanf+0x8>
   2155c:	4770      	bx	lr
   2155e:	bf00      	nop
   21560:	7fc00000 	.word	0x7fc00000

00021564 <__ieee754_logf>:
   21564:	ee10 3a10 	vmov	r3, s0
   21568:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   2156c:	d02e      	beq.n	215cc <__ieee754_logf+0x68>
   2156e:	2b00      	cmp	r3, #0
   21570:	db33      	blt.n	215da <__ieee754_logf+0x76>
   21572:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   21576:	da40      	bge.n	215fa <__ieee754_logf+0x96>
   21578:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   2157c:	db34      	blt.n	215e8 <__ieee754_logf+0x84>
   2157e:	f04f 0c00 	mov.w	ip, #0
   21582:	4868      	ldr	r0, [pc, #416]	; (21724 <__ieee754_logf+0x1c0>)
   21584:	f3c3 0116 	ubfx	r1, r3, #0, #23
   21588:	4408      	add	r0, r1
   2158a:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   2158e:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   21592:	430a      	orrs	r2, r1
   21594:	15db      	asrs	r3, r3, #23
   21596:	ee00 2a10 	vmov	s0, r2
   2159a:	3b7f      	subs	r3, #127	; 0x7f
   2159c:	4a62      	ldr	r2, [pc, #392]	; (21728 <__ieee754_logf+0x1c4>)
   2159e:	4463      	add	r3, ip
   215a0:	f101 0c0f 	add.w	ip, r1, #15
   215a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   215a8:	ea0c 0202 	and.w	r2, ip, r2
   215ac:	ee30 0a67 	vsub.f32	s0, s0, s15
   215b0:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   215b4:	bb22      	cbnz	r2, 21600 <__ieee754_logf+0x9c>
   215b6:	eeb5 0a40 	vcmp.f32	s0, #0.0
   215ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   215be:	d160      	bne.n	21682 <__ieee754_logf+0x11e>
   215c0:	2b00      	cmp	r3, #0
   215c2:	f040 8092 	bne.w	216ea <__ieee754_logf+0x186>
   215c6:	ed9f 0a59 	vldr	s0, [pc, #356]	; 2172c <__ieee754_logf+0x1c8>
   215ca:	4770      	bx	lr
   215cc:	ed9f 7a58 	vldr	s14, [pc, #352]	; 21730 <__ieee754_logf+0x1cc>
   215d0:	eddf 7a56 	vldr	s15, [pc, #344]	; 2172c <__ieee754_logf+0x1c8>
   215d4:	ee87 0a27 	vdiv.f32	s0, s14, s15
   215d8:	4770      	bx	lr
   215da:	ee70 7a40 	vsub.f32	s15, s0, s0
   215de:	ed9f 7a53 	vldr	s14, [pc, #332]	; 2172c <__ieee754_logf+0x1c8>
   215e2:	ee87 0a87 	vdiv.f32	s0, s15, s14
   215e6:	4770      	bx	lr
   215e8:	eddf 7a52 	vldr	s15, [pc, #328]	; 21734 <__ieee754_logf+0x1d0>
   215ec:	ee60 7a27 	vmul.f32	s15, s0, s15
   215f0:	f06f 0c18 	mvn.w	ip, #24
   215f4:	ee17 3a90 	vmov	r3, s15
   215f8:	e7c3      	b.n	21582 <__ieee754_logf+0x1e>
   215fa:	ee30 0a00 	vadd.f32	s0, s0, s0
   215fe:	4770      	bx	lr
   21600:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   21604:	ee70 7a27 	vadd.f32	s15, s0, s15
   21608:	ee07 3a10 	vmov	s14, r3
   2160c:	ee80 4a27 	vdiv.f32	s8, s0, s15
   21610:	4849      	ldr	r0, [pc, #292]	; (21738 <__ieee754_logf+0x1d4>)
   21612:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   21616:	4408      	add	r0, r1
   21618:	f502 7222 	add.w	r2, r2, #648	; 0x288
   2161c:	4302      	orrs	r2, r0
   2161e:	2a00      	cmp	r2, #0
   21620:	ed9f 3a46 	vldr	s6, [pc, #280]	; 2173c <__ieee754_logf+0x1d8>
   21624:	eddf 4a46 	vldr	s9, [pc, #280]	; 21740 <__ieee754_logf+0x1dc>
   21628:	eddf 5a46 	vldr	s11, [pc, #280]	; 21744 <__ieee754_logf+0x1e0>
   2162c:	eddf 3a46 	vldr	s7, [pc, #280]	; 21748 <__ieee754_logf+0x1e4>
   21630:	ed9f 5a46 	vldr	s10, [pc, #280]	; 2174c <__ieee754_logf+0x1e8>
   21634:	eddf 7a46 	vldr	s15, [pc, #280]	; 21750 <__ieee754_logf+0x1ec>
   21638:	eddf 6a46 	vldr	s13, [pc, #280]	; 21754 <__ieee754_logf+0x1f0>
   2163c:	ee24 6a04 	vmul.f32	s12, s8, s8
   21640:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   21644:	ee26 7a06 	vmul.f32	s14, s12, s12
   21648:	eee7 4a03 	vfma.f32	s9, s14, s6
   2164c:	eea7 5a23 	vfma.f32	s10, s14, s7
   21650:	eee4 5a87 	vfma.f32	s11, s9, s14
   21654:	eee5 6a07 	vfma.f32	s13, s10, s14
   21658:	eee5 7a87 	vfma.f32	s15, s11, s14
   2165c:	ee67 7a86 	vmul.f32	s15, s15, s12
   21660:	eee6 7a87 	vfma.f32	s15, s13, s14
   21664:	dd2a      	ble.n	216bc <__ieee754_logf+0x158>
   21666:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   2166a:	ee20 7a07 	vmul.f32	s14, s0, s14
   2166e:	ee27 7a00 	vmul.f32	s14, s14, s0
   21672:	bb4b      	cbnz	r3, 216c8 <__ieee754_logf+0x164>
   21674:	ee77 7a87 	vadd.f32	s15, s15, s14
   21678:	eea7 7ac4 	vfms.f32	s14, s15, s8
   2167c:	ee30 0a47 	vsub.f32	s0, s0, s14
   21680:	4770      	bx	lr
   21682:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   21686:	eddf 6a34 	vldr	s13, [pc, #208]	; 21758 <__ieee754_logf+0x1f4>
   2168a:	eef0 7a47 	vmov.f32	s15, s14
   2168e:	eee0 7a66 	vfms.f32	s15, s0, s13
   21692:	ee20 7a00 	vmul.f32	s14, s0, s0
   21696:	ee27 7a27 	vmul.f32	s14, s14, s15
   2169a:	2b00      	cmp	r3, #0
   2169c:	d0ee      	beq.n	2167c <__ieee754_logf+0x118>
   2169e:	ee07 3a90 	vmov	s15, r3
   216a2:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 2175c <__ieee754_logf+0x1f8>
   216a6:	eddf 6a2e 	vldr	s13, [pc, #184]	; 21760 <__ieee754_logf+0x1fc>
   216aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   216ae:	eea7 7ac6 	vfms.f32	s14, s15, s12
   216b2:	ee37 0a40 	vsub.f32	s0, s14, s0
   216b6:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   216ba:	4770      	bx	lr
   216bc:	bb13      	cbnz	r3, 21704 <__ieee754_logf+0x1a0>
   216be:	ee70 7a67 	vsub.f32	s15, s0, s15
   216c2:	eea7 0ac4 	vfms.f32	s0, s15, s8
   216c6:	4770      	bx	lr
   216c8:	eddf 6a24 	vldr	s13, [pc, #144]	; 2175c <__ieee754_logf+0x1f8>
   216cc:	ed9f 6a24 	vldr	s12, [pc, #144]	; 21760 <__ieee754_logf+0x1fc>
   216d0:	ee77 7a87 	vadd.f32	s15, s15, s14
   216d4:	ee62 6aa6 	vmul.f32	s13, s5, s13
   216d8:	eee7 6a84 	vfma.f32	s13, s15, s8
   216dc:	ee37 7a66 	vsub.f32	s14, s14, s13
   216e0:	ee37 0a40 	vsub.f32	s0, s14, s0
   216e4:	ee92 0a86 	vfnms.f32	s0, s5, s12
   216e8:	4770      	bx	lr
   216ea:	ee07 3a90 	vmov	s15, r3
   216ee:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 2175c <__ieee754_logf+0x1f8>
   216f2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 21760 <__ieee754_logf+0x1fc>
   216f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   216fa:	ee27 0a80 	vmul.f32	s0, s15, s0
   216fe:	eea7 0a87 	vfma.f32	s0, s15, s14
   21702:	4770      	bx	lr
   21704:	ed9f 7a15 	vldr	s14, [pc, #84]	; 2175c <__ieee754_logf+0x1f8>
   21708:	eddf 6a15 	vldr	s13, [pc, #84]	; 21760 <__ieee754_logf+0x1fc>
   2170c:	ee70 7a67 	vsub.f32	s15, s0, s15
   21710:	ee27 7a62 	vnmul.f32	s14, s14, s5
   21714:	eea7 7a84 	vfma.f32	s14, s15, s8
   21718:	ee37 0a40 	vsub.f32	s0, s14, s0
   2171c:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   21720:	4770      	bx	lr
   21722:	bf00      	nop
   21724:	004afb20 	.word	0x004afb20
   21728:	007ffff0 	.word	0x007ffff0
   2172c:	00000000 	.word	0x00000000
   21730:	cc000000 	.word	0xcc000000
   21734:	4c000000 	.word	0x4c000000
   21738:	ffcf5c30 	.word	0xffcf5c30
   2173c:	3e178897 	.word	0x3e178897
   21740:	3e3a3325 	.word	0x3e3a3325
   21744:	3e924925 	.word	0x3e924925
   21748:	3e1cd04f 	.word	0x3e1cd04f
   2174c:	3e638e29 	.word	0x3e638e29
   21750:	3f2aaaab 	.word	0x3f2aaaab
   21754:	3ecccccd 	.word	0x3ecccccd
   21758:	3eaaaaab 	.word	0x3eaaaaab
   2175c:	3717f7d1 	.word	0x3717f7d1
   21760:	3f317180 	.word	0x3f317180

00021764 <__errno>:
   21764:	4b01      	ldr	r3, [pc, #4]	; (2176c <__errno+0x8>)
   21766:	6818      	ldr	r0, [r3, #0]
   21768:	4770      	bx	lr
   2176a:	bf00      	nop
   2176c:	20002c30 	.word	0x20002c30
   21770:	73707061 	.word	0x73707061
   21774:	7277742f 	.word	0x7277742f
   21778:	6f6c615f 	.word	0x6f6c615f
   2177c:	732f6168 	.word	0x732f6168
   21780:	6d2f6372 	.word	0x6d2f6372
   21784:	2e6e6961 	.word	0x2e6e6961
   21788:	00000063 	.word	0x00000063
   2178c:	7475227b 	.word	0x7475227b
   21790:	22656d69 	.word	0x22656d69
   21794:	6c25203a 	.word	0x6c25203a
   21798:	65222c75 	.word	0x65222c75
   2179c:	22636578 	.word	0x22636578
   217a0:	2522203a 	.word	0x2522203a
   217a4:	0a7d2273 	.word	0x0a7d2273
   217a8:	00000000 	.word	0x00000000
   217ac:	6564227b 	.word	0x6564227b
   217b0:	65636976 	.word	0x65636976
   217b4:	2264695f 	.word	0x2264695f
   217b8:	6c25223d 	.word	0x6c25223d
   217bc:	00002258 	.word	0x00002258
   217c0:	6170222c 	.word	0x6170222c
   217c4:	3d64696e 	.word	0x3d64696e
   217c8:	22582522 	.word	0x22582522
   217cc:	00000000 	.word	0x00000000
   217d0:	6461222c 	.word	0x6461222c
   217d4:	3d227264 	.word	0x3d227264
   217d8:	22582522 	.word	0x22582522
   217dc:	00000000 	.word	0x00000000
   217e0:	6170222c 	.word	0x6170222c
   217e4:	695f7472 	.word	0x695f7472
   217e8:	223d2264 	.word	0x223d2264
   217ec:	22586c25 	.word	0x22586c25
   217f0:	00000000 	.word	0x00000000
   217f4:	6f6c222c 	.word	0x6f6c222c
   217f8:	64695f74 	.word	0x64695f74
   217fc:	25223d22 	.word	0x25223d22
   21800:	7d22586c 	.word	0x7d22586c
   21804:	0000000a 	.word	0x0000000a
   21808:	7475227b 	.word	0x7475227b
   2180c:	22656d69 	.word	0x22656d69
   21810:	6c25203a 	.word	0x6c25203a
   21814:	6d222c75 	.word	0x6d222c75
   21818:	3a226773 	.word	0x3a226773
   2181c:	72662220 	.word	0x72662220
   21820:	5f656d61 	.word	0x5f656d61
   21824:	61727564 	.word	0x61727564
   21828:	6e6f6974 	.word	0x6e6f6974
   2182c:	25203d20 	.word	0x25203d20
   21830:	73752064 	.word	0x73752064
   21834:	7d226365 	.word	0x7d226365
   21838:	0000000a 	.word	0x0000000a
   2183c:	7475227b 	.word	0x7475227b
   21840:	22656d69 	.word	0x22656d69
   21844:	6c25203a 	.word	0x6c25203a
   21848:	6d222c75 	.word	0x6d222c75
   2184c:	3a226773 	.word	0x3a226773
   21850:	48532220 	.word	0x48532220
   21854:	75645f52 	.word	0x75645f52
   21858:	69746172 	.word	0x69746172
   2185c:	3d206e6f 	.word	0x3d206e6f
   21860:	20642520 	.word	0x20642520
   21864:	63657375 	.word	0x63657375
   21868:	000a7d22 	.word	0x000a7d22
   2186c:	7475227b 	.word	0x7475227b
   21870:	22656d69 	.word	0x22656d69
   21874:	6c25203a 	.word	0x6c25203a
   21878:	6d222c75 	.word	0x6d222c75
   2187c:	3a226773 	.word	0x3a226773
   21880:	6f682220 	.word	0x6f682220
   21884:	666f646c 	.word	0x666f646c
   21888:	203d2066 	.word	0x203d2066
   2188c:	75206425 	.word	0x75206425
   21890:	22636573 	.word	0x22636573
   21894:	00000a7d 	.word	0x00000a7d
   21898:	30317764 	.word	0x30317764
   2189c:	255f3030 	.word	0x255f3030
   218a0:	00000064 	.word	0x00000064
   218a4:	30337764 	.word	0x30337764
   218a8:	255f3030 	.word	0x255f3030
   218ac:	00000064 	.word	0x00000064
   218b0:	5f627775 	.word	0x5f627775
   218b4:	00717269 	.word	0x00717269
   218b8:	65737341 	.word	0x65737341
   218bc:	40207472 	.word	0x40207472
   218c0:	25783020 	.word	0x25783020
   218c4:	00000a78 	.word	0x00000a78
   218c8:	65737341 	.word	0x65737341
   218cc:	40207472 	.word	0x40207472
   218d0:	25783020 	.word	0x25783020
   218d4:	202d2078 	.word	0x202d2078
   218d8:	253a7325 	.word	0x253a7325
   218dc:	00000a64 	.word	0x00000a64
   218e0:	61686e55 	.word	0x61686e55
   218e4:	656c646e 	.word	0x656c646e
   218e8:	6e692064 	.word	0x6e692064
   218ec:	72726574 	.word	0x72726574
   218f0:	20747075 	.word	0x20747075
   218f4:	646c2528 	.word	0x646c2528
   218f8:	65202c29 	.word	0x65202c29
   218fc:	70656378 	.word	0x70656378
   21900:	6e6f6974 	.word	0x6e6f6974
   21904:	20707320 	.word	0x20707320
   21908:	30257830 	.word	0x30257830
   2190c:	0a786c38 	.word	0x0a786c38
   21910:	00000000 	.word	0x00000000
   21914:	3a307220 	.word	0x3a307220
   21918:	30257830 	.word	0x30257830
   2191c:	20786c38 	.word	0x20786c38
   21920:	3a317220 	.word	0x3a317220
   21924:	30257830 	.word	0x30257830
   21928:	20786c38 	.word	0x20786c38
   2192c:	3a327220 	.word	0x3a327220
   21930:	30257830 	.word	0x30257830
   21934:	20786c38 	.word	0x20786c38
   21938:	3a337220 	.word	0x3a337220
   2193c:	30257830 	.word	0x30257830
   21940:	0a786c38 	.word	0x0a786c38
   21944:	00000000 	.word	0x00000000
   21948:	3a347220 	.word	0x3a347220
   2194c:	30257830 	.word	0x30257830
   21950:	20786c38 	.word	0x20786c38
   21954:	3a357220 	.word	0x3a357220
   21958:	30257830 	.word	0x30257830
   2195c:	20786c38 	.word	0x20786c38
   21960:	3a367220 	.word	0x3a367220
   21964:	30257830 	.word	0x30257830
   21968:	20786c38 	.word	0x20786c38
   2196c:	3a377220 	.word	0x3a377220
   21970:	30257830 	.word	0x30257830
   21974:	0a786c38 	.word	0x0a786c38
   21978:	00000000 	.word	0x00000000
   2197c:	3a387220 	.word	0x3a387220
   21980:	30257830 	.word	0x30257830
   21984:	20786c38 	.word	0x20786c38
   21988:	3a397220 	.word	0x3a397220
   2198c:	30257830 	.word	0x30257830
   21990:	20786c38 	.word	0x20786c38
   21994:	3a303172 	.word	0x3a303172
   21998:	30257830 	.word	0x30257830
   2199c:	20786c38 	.word	0x20786c38
   219a0:	3a313172 	.word	0x3a313172
   219a4:	30257830 	.word	0x30257830
   219a8:	0a786c38 	.word	0x0a786c38
   219ac:	00000000 	.word	0x00000000
   219b0:	3a323172 	.word	0x3a323172
   219b4:	30257830 	.word	0x30257830
   219b8:	20786c38 	.word	0x20786c38
   219bc:	3a726c20 	.word	0x3a726c20
   219c0:	30257830 	.word	0x30257830
   219c4:	20786c38 	.word	0x20786c38
   219c8:	3a637020 	.word	0x3a637020
   219cc:	30257830 	.word	0x30257830
   219d0:	20786c38 	.word	0x20786c38
   219d4:	3a727370 	.word	0x3a727370
   219d8:	30257830 	.word	0x30257830
   219dc:	0a786c38 	.word	0x0a786c38
   219e0:	00000000 	.word	0x00000000
   219e4:	52534349 	.word	0x52534349
   219e8:	2578303a 	.word	0x2578303a
   219ec:	786c3830 	.word	0x786c3830
   219f0:	53464820 	.word	0x53464820
   219f4:	78303a52 	.word	0x78303a52
   219f8:	6c383025 	.word	0x6c383025
   219fc:	46432078 	.word	0x46432078
   21a00:	303a5253 	.word	0x303a5253
   21a04:	38302578 	.word	0x38302578
   21a08:	000a786c 	.word	0x000a786c
   21a0c:	52414642 	.word	0x52414642
   21a10:	2578303a 	.word	0x2578303a
   21a14:	786c3830 	.word	0x786c3830
   21a18:	464d4d20 	.word	0x464d4d20
   21a1c:	303a5241 	.word	0x303a5241
   21a20:	38302578 	.word	0x38302578
   21a24:	000a786c 	.word	0x000a786c
   21a28:	656c6469 	.word	0x656c6469
   21a2c:	00000000 	.word	0x00000000
   21a30:	6e69616d 	.word	0x6e69616d
   21a34:	00000000 	.word	0x00000000
   21a38:	7379736d 	.word	0x7379736d
   21a3c:	0000315f 	.word	0x0000315f
   21a40:	7475227b 	.word	0x7475227b
   21a44:	22656d69 	.word	0x22656d69
   21a48:	6c25203a 	.word	0x6c25203a
   21a4c:	6d222c75 	.word	0x6d222c75
   21a50:	3a226773 	.word	0x3a226773
   21a54:	75732220 	.word	0x75732220
   21a58:	66726570 	.word	0x66726570
   21a5c:	656d6172 	.word	0x656d6172
   21a60:	7365725f 	.word	0x7365725f
   21a64:	7d227465 	.word	0x7d227465
   21a68:	0000000a 	.word	0x0000000a
   21a6c:	00676e72 	.word	0x00676e72
   21a70:	7475227b 	.word	0x7475227b
   21a74:	22656d69 	.word	0x22656d69
   21a78:	6c25203a 	.word	0x6c25203a
   21a7c:	6d222c75 	.word	0x6d222c75
   21a80:	3a226773 	.word	0x3a226773
   21a84:	6e722220 	.word	0x6e722220
   21a88:	6b705f67 	.word	0x6b705f67
   21a8c:	6e695f67 	.word	0x6e695f67
   21a90:	7d227469 	.word	0x7d227469
   21a94:	0000000a 	.word	0x0000000a
   21a98:	5f676e72 	.word	0x5f676e72
   21a9c:	75716572 	.word	0x75716572
   21aa0:	00747365 	.word	0x00747365
   21aa4:	5f676e72 	.word	0x5f676e72
   21aa8:	7473696c 	.word	0x7473696c
   21aac:	00006e65 	.word	0x00006e65
   21ab0:	635f7874 	.word	0x635f7874
   21ab4:	6c706d6f 	.word	0x6c706d6f
   21ab8:	00657465 	.word	0x00657465
   21abc:	635f7872 	.word	0x635f7872
   21ac0:	6c706d6f 	.word	0x6c706d6f
   21ac4:	00657465 	.word	0x00657465
   21ac8:	755f7872 	.word	0x755f7872
   21acc:	6c6f736e 	.word	0x6c6f736e
   21ad0:	74696369 	.word	0x74696369
   21ad4:	00006465 	.word	0x00006465
   21ad8:	6f5f7872 	.word	0x6f5f7872
   21adc:	72656874 	.word	0x72656874
   21ae0:	6172665f 	.word	0x6172665f
   21ae4:	0000656d 	.word	0x0000656d
   21ae8:	655f7872 	.word	0x655f7872
   21aec:	726f7272 	.word	0x726f7272
   21af0:	00000000 	.word	0x00000000
   21af4:	655f7874 	.word	0x655f7874
   21af8:	726f7272 	.word	0x726f7272
   21afc:	00000000 	.word	0x00000000
   21b00:	745f7872 	.word	0x745f7872
   21b04:	6f656d69 	.word	0x6f656d69
   21b08:	00007475 	.word	0x00007475
   21b0c:	706d6f63 	.word	0x706d6f63
   21b10:	6574656c 	.word	0x6574656c
   21b14:	0062635f 	.word	0x0062635f
   21b18:	65736572 	.word	0x65736572
   21b1c:	00000074 	.word	0x00000074
   21b20:	65707573 	.word	0x65707573
   21b24:	61726672 	.word	0x61726672
   21b28:	725f656d 	.word	0x725f656d
   21b2c:	74657365 	.word	0x74657365
   21b30:	00000000 	.word	0x00000000

00021b34 <g_stats_map_rng_stat_section>:
   21b34:	1a980014 00180002 00021aa4 1ab0001c     ................
   21b44:	00200002 00021abc 1ac80024 00280002     .. .....$.....(.
   21b54:	00021ad8 1ae8002c 00300002 00021af4     ....,.....0.....
   21b64:	1b000034 00380002 00021b0c 1b18003c     4.....8.....<...
   21b74:	00400002 00021b20 7272652c 203a726f     ..@. ...,error: 
   21b84:	6b6e5522 6e776f6e 61724620 4320656d     "Unknown Frame C
   21b94:	2265646f 7825202c 0000000a 6d697475     ode", %x....utim
   21ba4:	00000065 00716573 00646975 6469756f     e...seq.uid.ouid
   21bb4:	00000000 007a6172 7a617262 00000000     ....raz.braz....
   21bc4:	69737372 00000000 00736f6c 006d7070     rssi....los.ppm.
   21bd4:	00737473 00000000                       sts.....

00021bdc <stdout>:
   21bdc:	20000174                                t.. 

00021be0 <MemFile_methods>:
   21be0:	0000c92f 00000000 0000002f 00646c25     /......./...%ld.
   21bf0:	646c6c25 00000000 6c65643c 0000003e     %lld....<del>...
   21c00:	3d207325 0a732520 00000000 656e6f44     %s = %s.....Done
   21c10:	0000000a 6c696146 74206465 6f63206f     ....Failed to co
   21c20:	74696d6d 0000000a 6d6d6f63 00007469     mmit....commit..
   21c30:	00007325 706d7564 00000000 6e6e7572     %s..dump....runn
   21c40:	00676e69 65766173 00000000 6e6e6143     ing.save....Cann
   21c50:	6420746f 6c707369 76207961 65756c61     ot display value
   21c60:	0000000a 6c696146 74206465 6573206f     ....Failed to se
   21c70:	65202c74 203a7272 000a6425 61766e49     t, err: %d..Inva
   21c80:	2064696c 73677261 0000000a 666e6f63     lid args....conf
   21c90:	00006769 006c6176                       ig..val.

00021c98 <conf_nmgr_handlers>:
   21c98:	0000d4b1 0000d3f9 75255b1b 00000044     .........[%uD...
   21ca8:	75255b1b 00000043 6c363025 00002075     .[%uC...%06lu ..
   21cb8:	74726175 00000030 706c6568 0000000a     uart0...help....
   21cc8:	30332d25 00000073 30332d25 0a732573     %-30s...%-30s%s.
   21cd8:	00000000 65726e55 6e676f63 64657a69     ....Unrecognized
   21ce8:	6d6f6320 646e616d 0000000a 65726e55      command....Unre
   21cf8:	6e676f63 64657a69 6d6f6320 646e616d     cognized command
   21d08:	7325203a 0000000a 656c6c49 206c6167     : %s....Illegal 
   21d18:	75646f6d 2520656c 00000a73 656c6c49     module %s...Ille
   21d28:	206c6167 61726170 6574656d 00000a72     gal parameter...
   21d38:	706c6568 00000000 656c6573 00007463     help....select..
   21d48:	7373694d 20676e69 61726170 6574656d     Missing paramete
   21d58:	00000a72 206f6e28 706c6568 61766120     r...(no help ava
   21d68:	62616c69 0a29656c 00000000 6d6d7553     ilable).....Summ
   21d78:	3a797261 0000000a 67617355 000a3a65     ary:....Usage:..
   21d88:	61726150 6574656d 0a3a7372 00000000     Parameters:.....
   21d98:	69617641 6c62616c 6f6d2065 656c7564     Available module
   21da8:	000a3a73 73206f54 63656c65 20612074     s:..To select a 
   21db8:	75646f6d 202c656c 65746e65 73272072     module, enter 's
   21dc8:	63656c65 6d3c2074 6c75646f 616e2065     elect <module na
   21dd8:	273e656d 00000a2e 0000203e 73257325     me>'....> ..%s%s
   21de8:	00000000 206f6f54 796e616d 72617020     ....Too many par
   21df8:	74656d61 20737265 78616d28 757a2520     ameters (max %zu
   21e08:	00000a29 65707954 65682720 2027706c     )...Type 'help' 
   21e18:	20726f66 7473696c 20666f20 69617661     for list of avai
   21e28:	6c62616c 6f632065 6e616d6d 000a7364     lable commands..
   21e38:	2078614d 626d756e 6f207265 6f6d2066     Max number of mo
   21e48:	656c7564 65722073 65686361 00000a64     dules reached...
   21e58:	2078614d 626d756e 6f207265 6f632066     Max number of co
   21e68:	7461706d 6d6f6320 646e616d 65722073     mpat commands re
   21e78:	65686361 00000a64 706d6f63 00007461     ached...compat..
   21e88:	656c6c49 206c6167 75646f6d 2520656c     Illegal module %
   21e98:	64202c73 75616665 6920746c 6f6e2073     s, default is no
   21ea8:	68632074 65676e61 00000a64 6c656873     t changed...shel
   21eb8:	0000006c                                l...

00021ebc <shell_cmd_help>:
   21ebc:	00000001 0000e6f1 00021d38 00000000     ........8.......

00021ecc <shell_cmd_select_module>:
   21ecc:	00000001 0000e4b5 00021d40 00000000     ........@.......
   21edc:	0009060a 20643425 20783325 000a7325     ....%4d %3x %s..
   21eec:	706d654d 736c6f6f 000a203a 736b6c62     Mempools: ..blks
   21efc:	0000007a 73323325 73352520 73342520     z...%32s %5s %4s
   21f0c:	73342520 73342520 0000000a 006e696d      %4s %4s....min.
   21f1c:	65657266 00000000 73323325 64352520     free....%32s %5d
   21f2c:	64342520 64342520 64342520 0000000a      %4d %4d %4d....
   21f3c:	6c756f43 74276e64 6e696620 20612064     Couldn't find a 
   21f4c:	6f6d656d 70207972 206c6f6f 68746977     memory pool with
   21f5c:	6d616e20 73252065 0000000a 61766e49      name %s....Inva
   21f6c:	2064696c 65746164 656d6974 0000000a     lid datetime....
   21f7c:	00676c66 00666572 20733425 20733325     flg.ref.%4s %3s 
   21f8c:	000a7325 6b736154 0a203a73 00000000     %s..Tasks: .....
   21f9c:	00697270 6b736174 00000000 20733825     pri.task....%8s 
   21fac:	20733325 20733325 20733825 20733825     %3s %3s %8s %8s 
   21fbc:	20733825 20733825 20733825 20733825     %8s %8s %8s %8s 
   21fcc:	0a733325 00000000 6568636e 00006b63     %3s.....ncheck..
   21fdc:	6568636c 00006b63 756b7473 00006573     lcheck..stkuse..
   21fec:	736b7473 0000007a 00777363 746e7572     stksz...csw.runt
   21ffc:	00656d69 00646974 20733825 20753325     ime.tid.%8s %3u 
   2200c:	20753325 756c3825 6c382520 38252075     %3u %8lu %8lu %8
   2201c:	38252075 38252075 2520756c 0a756c38     u %8u %8lu %8lu.
   2202c:	00000000 6c756f43 74276e64 6e696620     ....Couldn't fin
   2203c:	61742064 77206b73 20687469 656d616e     d task with name
   2204c:	0a732520 00000000 6564736c 00000076      %s.....lsdev...
   2205c:	7473696c 20534f20 69766564 00736563     list OS devices.
   2206c:	65736572 79732074 6d657473 00000000     reset system....
   2207c:	776f6873 73797320 206d6574 65746164     show system date
   2208c:	00000000 65746164 656d6974 206f7420     ....datetime to 
   2209c:	00746573 776f6873 73797320 206d6574     set.show system 
   220ac:	6f6f706d 0000006c 6f6f706d 616e206c     mpool...mpool na
   220bc:	0000656d 776f6873 20736f20 6b736174     me..show os task
   220cc:	00000073 6b736174 6d616e20 00000065     s...task name...

000220dc <date_help>:
   220dc:	0002207c 00000000 000220e8              | ....... ..

000220e8 <date_params>:
   220e8:	000232e8 00022090 00000000 00000000     .2... ..........

000220f8 <ls_dev_help>:
   220f8:	0002205c 00000000 00000000              \ ..........

00022104 <mpool_help>:
   22104:	000220a0 00000000 00022110              . .......!..

00022110 <mpool_params>:
   22110:	000232e8 000220b4 00000000 00000000     .2... ..........

00022120 <os_commands>:
   22120:	00000001 0000f499 000220c8 00022194     ......... ...!..
   22130:	00000001 0000f319 000220ac 00022104     ......... ...!..
   22140:	00000001 0000f3c9 00022088 000220dc     ......... ... ..
   22150:	00000001 0000f44d 00021b18 00022180     ....M........!..
   22160:	00000001 0000f461 00022054 000220f8     ....a...T ... ..
	...

00022180 <reset_help>:
   22180:	0002206c 00000000 0002218c              l .......!..

0002218c <reset_params>:
	...

00022194 <tasks_help>:
   22194:	000220c0 00000000 000221a0              . .......!..

000221a0 <tasks_params>:
   221a0:	000232e8 000220d0 00000000 00000000     .2... ..........
   221b0:	00006e6f 6e6f4320 656c6f73 63695420     on.. Console Tic
   221c0:	6f20736b 00000a6e 0066666f 6e6f4320     ks on...off. Con
   221d0:	656c6f73 63695420 6f20736b 000a6666     sole Ticks off..
   221e0:	61735520 203a6567 6b636974 6f5b2073      Usage: ticks [o
   221f0:	666f7c6e 000a5d66 6d6f7270 00007470     n|off]..prompt..
   22200:	6b636974 00000073 6c656873 6974206c     ticks...shell ti
   22210:	20736b63 6d6d6f63 00646e61 67617375     cks command.usag
   22220:	74203a65 736b6369 6e6f5b20 66666f7c     e: ticks [on|off
   22230:	0000005d 6e727574 006e6f20              ]...turn on.

0002223c <prompt_commands>:
   2223c:	00000000 0000f5c1 00022200 0002225c     ........."..\"..
	...

0002225c <ticks_help>:
   2225c:	00022208 0002221c 00022268              ."..."..h"..

00022268 <ticks_params>:
   22268:	000221b0 00022234 000221c8 00022234     .!..4"...!..4"..
	...
   22280:	00642573 74617473 00000000 5f6d756e     s%d.stat....num_
   22290:	69676572 72657473 00006465              registered..

0002229c <g_stats_map_stats>:
   2229c:	228c0014 00000002 00006372 74617473     ..."....rc..stat
   222ac:	73696c5f 00000074 756f7267 00000070     _list...group...
   222bc:	00737973 6c656966 00007364 203a7325     sys.fields..%s: 
   222cc:	000a7525 203a7325 0a756c25 00000000     %u..%s: %lu.....
   222dc:	203a7325 756c6c25 0000000a 6e6b6e55     %s: %llu....Unkn
   222ec:	206e776f 74617473 7a697320 6f662065     own stat size fo
   222fc:	73252072 0a752520 00000000 0a732509     r %s %u......%s.
   2230c:	00000000 7473754d 65707320 79666963     ....Must specify
   2231c:	73206120 69746174 63697473 6d616e20      a statistic nam
   2232c:	6f742065 6d756420 70202c70 6973736f     e to dump, possi
   2233c:	20656c62 656d616e 72612073 000a3a65     ble names are:..
   2234c:	6c756f43 6f6e2064 69662074 7320646e     Could not find s
   2235c:	69746174 63697473 6f726720 25207075     tatistic group %
   2236c:	00000a73 252f7325 00000073 00386d36     s...%s/%s...6m8.
   2237c:	6b303538 00000000 6b303131 00000000     850k....110k....
   2238c:	20766e69 5f726963 657a6973 0000000a     inv cir_size....
   2239c:	20766e69 61657270 6c5f626d 000a6e65     inv preamb_len..
   223ac:	63627775 00006766 00627775 00667270     uwbcfg..uwb.prf.
   223bc:	61746164 65746172 00000000 705f7872     datarate....rx_p
   223cc:	656c6361 0000006e 705f7872 6d616572     aclen...rx_pream
   223dc:	6469635f 00000078 735f7872 79746466     _cidx...rx_sfdty
   223ec:	00006570 735f7872 745f6466 0000006f     pe..rx_sfd_to...
   223fc:	705f7872 6f6d7268 00006564 645f7872     rx_phrmode..rx_d
   2240c:	5f676169 00006e65 705f7874 6d616572     iag_en..tx_pream
   2241c:	6469635f 00000078 705f7874 6d616572     _cidx...tx_pream
   2242c:	6e656c5f 00000000 66727874 776f705f     _len....txrf_pow
   2243c:	635f7265 7372616f 00000065 66727874     er_coarse...txrf
   2244c:	776f705f 665f7265 00656e69 615f7872     _power_fine.rx_a
   2245c:	6c64746e 00000079 615f7874 6c64746e     ntdly...tx_antdl
   2246c:	00000079 615f7872 735f746e 72617065     y...rx_ant_separ
   2247c:	6f697461 0000006e 5f747865 646b6c63     ation...ext_clkd
   2248c:	0000796c 656c6f72 00000000 6d617266     ly..role....fram
   2249c:	69665f65 7265746c 00000000 6c617478     e_filter....xtal
   224ac:	6972745f 0000006d 5f726963 657a6973     _trim...cir_size
   224bc:	00000000 5f726963 7366666f 00000000     ....cir_offs....
   224cc:	20766e69 61657270 6f63206d 28206564     inv pream code (
   224dc:	6e697375 64252067 00000a29 20766e69     using %d)...inv 
   224ec:	20667270 000a6425 20766e69 000a6863     prf %d..inv ch..
   224fc:	20766e69 61746164 65746172 0000000a     inv datarate....
   2250c:	20766e69 6c636170 000a6e65 20766e69     inv paclen..inv 
   2251c:	54646673 0a657079 00000000 20766e69     sfdType.....inv 
   2252c:	72616f63 74206573 72777078 0000000a     coarse txpwr....
   2253c:	64343025 3230252d 30252d64 25546432     %04d-%02d-%02dT%
   2254c:	3a643230 64323025 3230253a 30252e64     02d:%02d:%02d.%0
   2255c:	00006436 30256325 253a6432 00643230     6d..%c%02d:%02d.

0002256c <month_days>:
   2256c:	0000001f 0000001c 0000001f 0000001e     ................
   2257c:	0000001f 0000001e 0000001f 0000001f     ................
   2258c:	0000001e 0000001f 0000001e 0000001f     ................

0002259c <crc16tab>:
   2259c:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   225ac:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   225bc:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   225cc:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   225dc:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   225ec:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   225fc:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   2260c:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   2261c:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   2262c:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   2263c:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   2264c:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   2265c:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   2266c:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   2267c:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   2268c:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   2269c:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   226ac:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   226bc:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   226cc:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   226dc:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   226ec:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   226fc:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   2270c:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   2271c:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   2272c:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   2273c:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   2274c:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   2275c:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   2276c:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   2277c:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   2278c:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

0002279c <streamer_cfg_console>:
   2279c:	00010bab 00010b9f                       ........

000227a4 <sysdown_cbs>:
   227a4:	000160b1 00018afb 0000b7c9 00018aa5     .`..............
   227b4:	0001a5d1 0001a8f9 0001a125 00019869     ........%...i...
   227c4:	00019db5 00010025 00000000 696c7073     ....%.......spli
   227d4:	74732f74 73757461 00000000 74617473     t/status....stat
   227e4:	00007375 696c7073 00000074              us..split...

000227f0 <base64_chars>:
   227f0:	44434241 48474645 4c4b4a49 504f4e4d     ABCDEFGHIJKLMNOP
   22800:	54535251 58575655 62615a59 66656463     QRSTUVWXYZabcdef
   22810:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   22820:	7a797877 33323130 37363534 2f2b3938     wxyz0123456789+/
   22830:	00000000 30317764 305f3030 00000000     ....dw1000_0....

00022840 <dw1000_0_cfg>:
   22840:	200065d4 00001f40 000007d0 11131800     .e. @...........
   22850:	40424042 00000000 6e207325 6920746f     B@B@....%s not i
   22860:	656c706d 746e656d 000a6465 7475227b     mplemented..{"ut
   22870:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   22880:	77642220 30303031 7665645f 696e695f      "dw1000_dev_ini
   22890:	0a7d2274 00000000                       t"}.....

00022898 <__func__.0>:
   22898:	5f627775 30317764 635f3030 5f636c61     uwb_dw1000_calc_
   228a8:	616f6470 00000000                       pdoa....

000228b0 <dw1000_uwb_funcs>:
   228b0:	000123bf 000123b7 000123af 000128cb     .#...#...#...(..
   228c0:	00012949 00012c49 00012c9b 00012bf9     I)..I,...,...+..
   228d0:	000123a7 0001239d 00012393 0001237d     .#...#...#..}#..
   228e0:	00012375 0001236d 00012365 0001235d     u#..m#..e#..]#..
   228f0:	00012355 0001234d 00012345 000121c7     U#..M#..E#...!..
   22900:	0001233d 00012335 0001232d 00012325     =#..5#..-#..%#..
   22910:	0001231d 00012315 0001230d 00012305     .#...#...#...#..
   22920:	000121bd 000122fd 000122f5 000122e9     .!..."..."..."..
   22930:	000122dd 000122d1 000122c9 000122c1     ."..."..."..."..
   22940:	000122b9 000122b1 00012761 00012747     ."..."..a'..G'..
   22950:	0001272d 00012289 0001227d 00012275     -'..."..}"..u"..
   22960:	0001226d 00012265 0001225d 00012255     m"..e"..]"..U"..
   22970:	00012235 00000000 000121cf 00012213     5".......!..."..
   22980:	0001221b 00012223 0001222b 0063616d     ."..#"..+"..mac.
   22990:	625f7874 73657479 00000000 625f7872     tx_bytes....rx_b
   229a0:	73657479 00000000 5f524644 00746e63     ytes....DFR_cnt.
   229b0:	5f4f5452 00746e63 5f564f52 00727265     RTO_cnt.ROV_err.
   229c0:	5f474654 00746e63 5f45444c 00727265     TFG_cnt.LDE_err.
   229d0:	655f5852 00007272 55425854 72655f46     RX_err..TXBUF_er
   229e0:	00000072 5f4c4c50 655f4c4c 00007272     r...PLL_LL_err..

000229f0 <agc_config>:
   229f0:	2502a907 889b8870                       ...%p...

000229f8 <chan_idx>:
   229f8:	02010000 05000403                       ........

00022a00 <digital_bb_config>:
   22a00:	311a002d 331a0052 351a009a 371a011d     -..1R..3...5...7
   22a10:	313b006b 333b00be 353b015e 373b0296     k.;1..;3^.;5..;7

00022a20 <dtune1>:
   22a20:	008d0087                                ....

00022a24 <dwnsSFDlen>:
   22a24:	00081040                                @...

00022a28 <fs_pll_cfg>:
   22a28:	09000407 08400508 08401009 08400508     ......@...@...@.
   22a38:	0800041d 0800041d                       ........

00022a40 <fs_pll_tune>:
   22a40:	2656261e 0000bebe                       .&V&....

00022a48 <g_stats_map_mac_stat_section>:
   22a48:	29900014 00180002 0002299c 29a8001c     ...).....).....)
   22a58:	00200002 000229b0 29b80024 00280002     .. ..)..$..)..(.
   22a68:	000229c0 29c8002c 00300002 000229d0     .)..,..)..0..)..
   22a78:	29d80034 00380002 000229e4              4..)..8..)..

00022a84 <lde_replicaCoeff>:
   22a84:	59980000 51ea5998 451e428e 80002e14     ...Y.Y.Q.B.E....
   22a94:	28f451ea 3ae03332 3ae03d70 2b8435c2     .Q.(23.:p=.:.5.+
   22aa4:	333235c2 35c235c2 3ae047ae 30a23850     .523.5.5.G.:P8.0
   22ab4:	00003850                                P8..

00022ab8 <rx_config>:
   22ab8:	0000bcd8                                ....

00022abc <sftsh>:
   22abc:	0016000a 00060001 00020001              ............

00022ac8 <tx_config>:
   22ac8:	00005c40 00045ca0 00086cc0 00045c80     @\...\...l...\..
   22ad8:	001e3fe0 001e7de0 43534d50 5b44495f     .?...}..PMSC_ID[
   22ae8:	203a5d30 0a786c25 00000000 43534d50     0]: %lx.....PMSC
   22af8:	5b44495f 203a5d31 0a786c25 00000000     _ID[1]: %lx.....
   22b08:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   22b18:	3a226773 77642220 30303031 676b705f     sg": "dw1000_pkg
   22b28:	696e695f 0a7d2274 00000000 7475227b     _init"}.....{"ut
   22b38:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   22b48:	77642220 30303031 676b705f 776f645f      "dw1000_pkg_dow
   22b58:	0a7d226e 00000000 30317764 315f3030     n"}.....dw1000_1
   22b68:	00000000 30317764 325f3030 00000000     ....dw1000_2....
   22b78:	44202020 7461443d 41202c61 6b63413d        D=Data, A=Ack
   22b88:	3d4d202c 0a63614d 00000000 53202020     , M=Mac.....   S
   22b98:	3a726365 63655320 74697275 6e652079     ecr: Security en
   22ba8:	656c6261 66202c64 3a646e50 61724620     abled, fPnd: Fra
   22bb8:	7020656d 69646e65 202c676e 724b4341     me pending, ACKr
   22bc8:	6341203a 6572206b 73657571 2c646574     : Ack requested,
   22bd8:	4e415020 50203a63 44494e41 6d6f4320      PANc: PANID Com
   22be8:	73657270 00000a73 44202020 203a7473     press...   Dst: 
   22bf8:	6e3d6f4e 6564206f 61207473 65726464     No=no dest addre
   22c08:	52202c73 65523d73 76726573 202c6465     s, Rs=Reserved, 
   22c18:	622d3631 61207469 65726464 202c7373     16-bit address, 
   22c28:	622d3436 61207469 65726464 000a7373     64-bit address..
   22c38:	46202020 656d6172 72657620 6e6f6973        Frame version
   22c48:	2d49203a 45454549 32303820 2e35312e     : I-IEEE 802.15.
   22c58:	49202c34 33303032 4545492d 30382045     4, I2003-IEEE 80
   22c68:	35312e32 322d342e 2c333030 76466920     2.15.4-2003, iFv
   22c78:	766e492d 64696c61 61724620 5620656d     -Invalid Frame V
   22c88:	69737265 000a6e6f 53202020 203a6372     ersion..   Src: 
   22c98:	6e3d6f4e 7273206f 64612063 73657264     No=no src addres
   22ca8:	7352202c 7365523d 65767265 31202c64     , Rs=Reserved, 1
   22cb8:	69622d36 64612074 73657264 36202c73     6-bit address, 6
   22cc8:	69622d34 64612074 73657264 00000a73     4-bit address...
   22cd8:	206f6f54 20776566 73677261 0000000a     Too few args....
   22ce8:	00007c44 00007c41 00007c4d 00007c52     D|..A|..M|..R|..
   22cf8:	72636553 0000007c 646e5066 0000007c     Secr|...fPnd|...
   22d08:	724b4341 0000007c 634e4150 0000007c     ACKr|...PANc|...
   22d18:	4e747344 00007c6f 52747344 00007c73     DstNo|..DstRs|..
   22d28:	31747344 00007c36 36747344 00007c34     Dst16|..Dst64|..
   22d38:	30303249 00007c33 00007c49 7c764669     I2003|..I|..iFv|
   22d48:	00000000 4e637253 0000006f 52637253     ....SrcNo...SrcR
   22d58:	00000073 31637253 00000036 36637253     s...Src16...Src6
   22d68:	00000034 77507854 54705572 7272456d     4...TxPwrUpTmErr
   22d78:	0000007c 72507852 626d6165 7c6a6552     |...RxPreambRej|
   22d88:	00000000 65527852 6f536465 726f436c     ....RxReedSolCor
   22d98:	00007c72 78524349 50667542 313d7274     r|..ICRxBufPtr=1
   22da8:	0000007c 74736f48 75427852 72745066     |...HostRxBufPtr
   22db8:	007c313d 46747541 656d6172 746c6946     =1|.AutFrameFilt
   22dc8:	7c6a6552 00000000 6e617254 74696d73     Rej|....Transmit
   22dd8:	66667542 72457265 7c726f72 00000000     BufferError|....
   22de8:	666c6148 69726550 6544646f 5779616c     HalfPeriodDelayW
   22df8:	7c6e7261 00000000 46535852 6d695444     arn|....RXSFDTim
   22e08:	74756f65 0000007c 636f6c43 4c4c506b     eout|...ClockPLL
   22e18:	69736f4c 6f4c676e 007c6b63 4c504652     LosingLock|.RFPL
   22e28:	736f4c4c 4c676e69 7c6b636f 00000000     LLosingLock|....
   22e38:	45454c53 4e493250 007c5449 6f697047     SLEEP2INIT|.Gpio
   22e48:	7c746e49 00000000 72507852 446d6165     Int|....RxPreamD
   22e58:	69547465 756f656d 00007c74 764f7852     etTimeout|..RxOv
   22e68:	7c727245 00000000 74696228 72203931     Err|....(bit19 r
   22e78:	72657365 29646576 0000007c 444c7852     eserved)|...RxLD
   22e88:	72726545 0000007c 69547852 756f656d     Eerr|...RxTimeou
   22e98:	00007c74 65527852 6f536465 6f6d6f6c     t|..RxReedSolomo
   22ea8:	6172466e 7953656d 6f4c636e 007c7373     nFrameSyncLoss|.
   22eb8:	43467852 72724553 0000007c 43467852     RxFCSErr|...RxFC
   22ec8:	6f6f4753 00007c64 61447852 72466174     SGood|..RxDataFr
   22ed8:	7964526d 0000007c 48507852 72724559     mRdy|...RxPHYErr
   22ee8:	0000007c 48507852 74654459 0000007c     |...RxPHYDet|...
   22ef8:	444c7852 6e6f6445 00007c65 46537852     RxLDEdone|..RxSF
   22f08:	7c746544 00000000 72507852 446d6165     Det|....RxPreamD
   22f18:	007c7465 72467854 53656d61 7c746e65     et|.TxFrameSent|
   22f28:	00000000 48507854 6e6f4459 00007c65     ....TxPHYDone|..
   22f38:	72507854 446d6165 7c656e6f 00000000     TxPreamDone|....
   22f48:	74537854 7c747261 00000000 6f747541     TxStart|....Auto
   22f58:	7c6b6341 00000000 43747845 6b636f6c     Ack|....ExtClock
   22f68:	73655220 007c7465 636f6c43 4c50206b      Reset|.Clock PL
   22f78:	6f4c204c 007c6b63 00535249 30312520     L Lock|.IRS. %10
   22f88:	0020756c 6c382520 00002075 6c362520     lu . %8lu .. %6l
   22f98:	00002075 73322520 00000020 32302520     u .. %2s ... %02
   22fa8:	30252058 28205832 25297325 0000732a     X %02X (%s)%*s..
   22fb8:	32302520 30252058 00205832 20202020      %02X %02X .    
   22fc8:	00202020 32332520 00002073 2a302520        . %32s .. %0*
   22fd8:	20586c6c 00000000 00732520 32302540     llX .... %s.@%02
   22fe8:	00000058 0078253a 002d424e 00000057     X...:%x.NB-.W...
   22ff8:	73332520 20207325 00000000 58323025      %3s%s  ....%02X
   23008:	00000000 00002020 73252820 732a2529     ....  .. (%s)%*s
   23018:	00000000 64342520 00000020 6572227b     .... %4d ...{"re
   23028:	30255b67 225d5832 7830223d 6c383025     g[%02X]"="0x%08l
   23038:	7d22586c 0000000a 6572227b 30255b67     lX"}....{"reg[%0
   23048:	225d5832 7830223d 30313025 22586c6c     2X]"="0x%010llX"
   23058:	00000a7d 6572227b 30255b67 225d5832     }...{"reg[%02X]"
   23068:	7830223d 36313025 22586c6c 00000a7d     ="0x%016llX"}...
   23078:	6e69227b 3e2d7473 5f717269 226d6573     {"inst->irq_sem"
   23088:	7d64253d 0000000a 6e69227b 3e2d7473     =%d}....{"inst->
   23098:	735f7874 3d226d65 0a7d6425 00000000     tx_sem"=%d}.....
   230a8:	6e72227b 733e2d67 3d226d65 0a7d6425     {"rng->sem"=%d}.
   230b8:	00000000 706d7544 61747320 6e697472     ....Dump startin
   230c8:	74612067 36302520 0a3a586c 00000000     g at %06lX:.....
   230d8:	58343025 3025203a 25205832 20583230     %04X: %02X %02X 
   230e8:	58323025 32302520 30252058 25205832     %02X %02X %02X %
   230f8:	20583230 58323025 32302520 30252058     02X %02X %02X %0
   23108:	25205832 20583230 58323025 32302520     2X %02X %02X %02
   23118:	30252058 25205832 20583230 58323025     X %02X %02X %02X
   23128:	32302520 00000a58 00736261 30312520      %02X...abs. %10
   23138:	00002073 63657375 00000000 66666964     s ..usec....diff
   23148:	00000000 73382520 00000020 00727564     .... %8s ...dur.
   23158:	73362520 00000020 00007269 73322520      %6s ...ir.. %2s
   23168:	00000000 72746366 0000006c 73352520     ....fctrl... %5s
   23178:	00000000 74636628 74326c72 25297478     ....(fctrl2txt)%
   23188:	20733132 00000000 732a2520 00000020     21s .... %*s ...
   23198:	73202020 75746174 78743273 00000a74        status2txt...
   231a8:	0000002d 2d2d2d2d 6366200a 326c7274     -...----. fctrl2
   231b8:	3a747874 00000a20 67616c66 00000073     txt: ...flags...
   231c8:	00646d63 20732520 20202020 00000020     cmd. %s      ...
   231d8:	646d6328 74787432 31322529 00002073     (cmd2txt)%21s ..
   231e8:	6e656c64 00000000 73342520 00000020     dlen.... %4s ...
   231f8:	61746164 00000000 646d6320 6174732f     data.... cmd/sta
   23208:	20737574 61746164 0000000a 33395b1b     tus data.....[93
   23218:	0000006d 39335b1b 00000a6d 39335b1b     m....[39m....[39
   23228:	0000006d 00006164 00007763 69766544     m...da..cw..Devi
   23238:	255b6563 6e205d64 6920776f 5743206e     ce[%d] now in CW
   23248:	646f6d20 6e6f2065 20686320 202e6425      mode on ch %d. 
   23258:	65736552 6f742074 6e6f6320 756e6974     Reset to continu
   23268:	00000a65 00007277 00006472 30257830     e...wr..rd..0x%0
   23278:	2c586c36 30257830 203a5834 6c257830     6lX,0x%04X: 0x%l
   23288:	000a586c 00746269 74617473 74327375     lX..ibt.status2t
   23298:	00007478 30313025 3a586c6c 0a732520     xt..%010llX: %s.
   232a8:	00000000 72746366 7874326c 00000074     ....fctrl2txt...
   232b8:	79622032 20736574 6465656e 000a6465     2 bytes needed..
   232c8:	58323025 32302520 25203a58 00000a73     %02X %02X: %s...
   232d8:	2d2d2d2d 656c200a 6e656764 0a203a64     ----. ledgend: .
   232e8:	00000000 62697073 00000074 00007462     ....spibt...bt..
   232f8:	6e6b6e55 206e776f 0a646d63 00000000     Unknown cmd.....
   23308:	30317764 00003030 30317764 64203030     dw1000..dw1000 d
   23318:	00006762 30317764 64203030 67756265     bg..dw1000 debug
   23328:	00000000 736e695b 64205d74 20706d75     ....[inst] dump 
   23338:	206c6c61 69676572 72657473 00000073     all registers...
   23348:	736e693c 74203e74 57432078 206e6f20     <inst> tx CW on 
   23358:	72727563 20746e65 6e616863 006c656e     current channel.
   23368:	736e693c 3c203e74 72646461 6c5b203e     <inst> <addr> [l
   23378:	74676e65 202c5d68 706d7564 65726120     ength], dump are
   23388:	00000061 736e693c 3c203e74 72646461     a...<inst> <addr
   23398:	733c203e 64616275 203e7264 6e656c3c     > <subaddr> <len
   233a8:	3e687467 6572202c 72206461 73696765     gth>, read regis
   233b8:	00726574 736e693c 3c203e74 72646461     ter.<inst> <addr
   233c8:	733c203e 64616275 203e7264 6c61763c     > <subaddr> <val
   233d8:	203e6575 6e656c3c 3e687467 7277202c     ue> <length>, wr
   233e8:	20657469 756c6176 6f742065 67657220     ite value to reg
   233f8:	65747369 00000072 736e695b 636e6174     ister...[instanc
   23408:	765b2065 6f627265 6e2d6573 5d5d6d75     e [verbose-num]]
   23418:	746e6920 75727265 62207470 746b6361      interrupt backt
   23428:	65636172 00000000 7379733c 6174735f     race....<sys_sta
   23438:	3e737574 206f7420 74786574 00000000     tus> to text....
   23448:	7463663c 203e6c72 74206f74 00747865     <fctrl> to text.
   23458:	736e695b 636e6174 765b2065 6f627265     [instance [verbo
   23468:	6e2d6573 5d5d6d75 69707320 63616220     se-num]] spi bac
   23478:	6172746b 00006563 736e695b 636e6174     ktrace..[instanc
   23488:	765b2065 6f627265 6e2d6573 5d5d6d75     e [verbose-num]]
   23498:	69707320 7172692b 63616220 6172746b      spi+irq backtra
   234a8:	00006563                                ce..

000234ac <cmd_dw1000_help>:
   234ac:	00023310 0002331c 000234b8              .3...3...4..

000234b8 <cmd_dw1000_param>:
   234b8:	00021c34 0002332c 00023230 00023348     4...,3..02..H3..
   234c8:	0002322c 00023368 00023270 0002338c     ,2..h3..p2...3..
   234d8:	0002326c 000233bc 0002328c 00023400     l2...3...2...4..
   234e8:	00023290 00023430 000232ac 00023448     .2..04...2..H4..
   234f8:	000232ec 00023458 000232f4 00023480     .2..X4...2...4..
	...

00023510 <nrf52k_flash_dev>:
   23510:	00023528 00000000 00080000 00000080     (5..............
   23520:	00000001 000000ff                       ........

00023528 <nrf52k_flash_funcs>:
   23528:	0001789d 000177d5 00017761 000177b5     .x...w..aw...w..
   23538:	00000000 000177b1 00000000              .....w......

00023544 <nrf52_hal_spis>:
   23544:	200066a0 00000000 00000000 00000000     .f. ............

00023554 <nrf52_hal_timers>:
   23554:	200066c8 00000000 00000000 00000000     .f. ............
	...

0002356c <os_bsp_spi0m_cfg>:
   2356c:	00121410                                ....

00023570 <os_bsp_uart0_cfg>:
   23570:	07ff0b05 74617069 0000766f 00726963     ....ipatov..cir.
   23580:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   23590:	3a226773 69632220 77645f72 30303031     sg": "cir_dw1000
   235a0:	676b705f 696e695f 0a7d2274 00000000     _pkg_init"}.....
   235b0:	706d6f63 6574656c 00000000              complete....

000235bc <cir_dw1000_funcs>:
   235bc:	0001898d 0001890d                       ........

000235c4 <g_stats_map_cir_dw1000_stat_section>:
   235c4:	35b00014 00000002 5f726963 65707974     ...5....cir_type
   235d4:	00000000 5f776172 00007374 61736572     ....raw_ts..resa
   235e4:	6c645f6d 00000079 695f7066 00007864     m_dly...fp_idx..
   235f4:	705f7066 7265776f 00000000 6c676e61     fp_power....angl
   23604:	00000065 5f636361 00746e63 7366666f     e...acc_cnt.offs
   23614:	00007465 6c616572 00000000 67616d69     et..real....imag
	...
   2362c:	0000002c 0000007b 00000022 00203a22     ,...{..."...": .
   2363c:	736c6166 00000065 65757274 00000000     false...true....
   2364c:	756c6c25 00000000 696c6c25 00000000     %llu....%lli....
   2365c:	6c6c756e 00000000 00006625 0000005c     null....%f..\...
   2366c:	0000745c 0000725c 00006e5c 0000665c     \t..\r..\n..\f..
   2367c:	0000625c 0000005b 0000007d 7475227b     \b..[...}...{"ut
   2368c:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   2369c:	77742220 73645f72 676b705f 696e695f      "twr_ds_pkg_ini
   236ac:	0a7d2274 00000000 5f727774 00007364     t"}.....twr_ds..
   236bc:	72617473 78745f74 7272655f 0000726f     start_tx_error..

000236cc <g_stats_map_twr_ds_stat_section>:
   236cc:	35b00014 00180002 000236bc 7475227b     ...5.....6..{"ut
   236dc:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   236ec:	77742220 73645f72 7478655f 676b705f      "twr_ds_ext_pkg
   236fc:	696e695f 0a7d2274 00000000 5f727774     _init"}.....twr_
   2370c:	655f7364 00007478                       ds_ext..

00023714 <g_stats_map_twr_ds_ext_stat_section>:
   23714:	35b00014 00180002 00021af4 7475227b     ...5........{"ut
   23724:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   23734:	77742220 73735f72 676b705f 696e695f      "twr_ss_pkg_ini
   23744:	0a7d2274 00000000 5f727774 00007373     t"}.....twr_ss..

00023754 <g_stats_map_twr_ss_stat_section>:
   23754:	35b00014 00180002 00021af4 7475227b     ...5........{"ut
   23764:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   23774:	77742220 73735f72 6b63615f 676b705f      "twr_ss_ack_pkg
   23784:	696e695f 0a7d2274 00000000 5f727774     _init"}.....twr_
   23794:	615f7373 00006b63 5f6b6361 655f7874     ss_ack..ack_tx_e
   237a4:	00007272 5f6b6361 655f7872 00007272     rr..ack_rx_err..
   237b4:	5f6b6361 5f716573 00727265              ack_seq_err.

000237c0 <g_stats_map_twr_ss_ack_stat_section>:
   237c0:	35b00014 00180002 00021af4 379c001c     ...5...........7
   237d0:	00200002 000237a8 37b40024 00000002     .. ..7..$..7....
   237e0:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   237f0:	3a226773 77742220 73735f72 7478655f     sg": "twr_ss_ext
   23800:	676b705f 696e695f 0a7d2274 00000000     _pkg_init"}.....
   23810:	5f727774 655f7373 00007478              twr_ss_ext..

0002381c <g_stats_map_twr_ss_ext_stat_section>:
   2381c:	35b00014 00180002 00021af4 006e656c     ...5........len.
   2382c:	00616873 72677075 00656461              sha.upgrade.

00023838 <imgr_nmgr_handlers>:
   23838:	0001b529 0001b6e5 00000000 0001b095     )...............
	...
   23864:	0001ae5d 00000000 0001adf1 74737075     ]...........upst
   23874:	00747261 6f647075 0000656e 646e6570     art.updone..pend
   23884:	00000000 666e6f63 00000000 67616d69     ....conf....imag
   23894:	00007365 746f6c73 00000000 73726576     es..slot....vers
   238a4:	006e6f69 68736168 00000000 746f6f62     ion.hash....boot
   238b4:	656c6261 00000000 646e6570 00676e69     able....pending.
   238c4:	666e6f63 656d7269 00000064 69746361     confirmed...acti
   238d4:	00006576 6d726570 6e656e61 00000074     ve..permanent...
   238e4:	696c7073 61745374 00737574 666e6f63     splitStatus.conf
   238f4:	006d7269 252e7525 75252e75 756c252e     irm.%u.%u.%u.%lu
   23904:	00000000 252e7525 75252e75 00000000     ....%u.%u.%u....
   23914:	65746164 656d6974 00000000 6f686365     datetime....echo
   23924:	00000000 6f6f706d 0000736c 736b6c62     ....mpools..blks
   23934:	00007a69 6b6c626e 00000073 6572666e     iz..nblks...nfre
   23944:	00000065 6f697270 00000000 74617473     e...prio....stat
   23954:	00000065 736b7473 00007a69 63777363     e...stksiz..cswc
   23964:	0000746e 7473616c 6568635f 6e696b63     nt..last_checkin
   23974:	00000000 7478656e 6568635f 6e696b63     ....next_checkin
   23984:	00000000                                ....

00023988 <nmgr_def_group_handlers>:
   23988:	0001bd21 0001bd21 0001bcc5 0001bcc5     !...!...........
   23998:	0001bf21 00000000 0001be19 00000000     !...............
   239a8:	0001bd99 0001bc65 00000000 0001bc09     ....e...........
   239b8:	41464544 00544c55 0000534f 5457454e     DEFAULT.OS..NEWT
   239c8:	0052474d 424d494e 435f454c 00524c54     MGR.NIMBLE_CTLR.
   239d8:	424d494e 485f454c 0054534f 5346464e     NIMBLE_HOST.NFFS
   239e8:	00000000 4f424552 0000544f 49544f49     ....REBOOT..IOTI
   239f8:	59544956 00000000 54534554 00000000     VITY....TEST....
   23a08:	3d73745b 756c6c25 202c7375 3d646f6d     [ts=%lluus, mod=
   23a18:	6c207525 6c657665 5d75253d 00000020     %u level=%u] ...
   23a28:	736e6f63 00656c6f                       console.

00023a30 <log_console_handler>:
   23a30:	00000000 0001ccf1 00000000 0001cd49     ............I...
   23a40:	0001cd1d 00000000 00000000 0001ccf5     ................
   23a50:	0001ccf9 00000000 5f676f6c 7473696c     ........log_list
   23a60:	00000000 75646f6d 6d5f656c 00007061     ....module_map..
   23a70:	55424544 00000047 4f525245 00000052     DEBUG...ERROR...
   23a80:	4f464e49 00000000 4e524157 00000000     INFO....WARN....
   23a90:	4e4b4e55 004e574f 54495243 4c414349     UNKNOWN.CRITICAL
   23aa0:	00000000 6576656c 616d5f6c 00000070     ....level_map...
   23ab0:	5f676f6c 75646f6d 0000656c 6576656c     log_module..leve
   23ac0:	0000006c 72746e65 00736569 5f676f6c     l...entries.log_
   23ad0:	656d616e 00000000 65646e69 00000078     name....index...
   23ae0:	7478656e 646e695f 00007865 73676f6c     next_index..logs
   23af0:	00000000 0067736d 6f727265 65203a72     ....msg.error: e
   23b00:	7972746e 6f6f7420 72616c20 28206567     ntry too large (
   23b10:	62206425 73657479 00000029 6c646f6d     %d bytes)...modl
   23b20:	6d5f676f 69707061 705f676e 006c6f6f     og_mapping_pool.
   23b30:	6c696166 74206465 6572206f 4d206461     failed to read M
   23b40:	3a73524d 3d637220 00006425 6f626572     MRs: rc=%d..rebo
   23b50:	722f746f 6f6f6265 6e635f74 00000074     ot/reboot_cnt...
   23b60:	6f626572 772f746f 74746972 00006e65     reboot/written..
   23b70:	6f626572 635f746f 0000746e 74697277     reboot_cnt..writ
   23b80:	006e6574 44524148 00000000 55514552     ten.HARD....REQU
   23b90:	45545345 00000044 45534552 49505f54     ESTED...RESET_PI
   23ba0:	0000004e 474f4457 00000000 54464f53     N...WDOG....SOFT
   23bb0:	00000000 574f5242 54554f4e 00000000     ....BROWNOUT....
   23bc0:	54535953 4f5f4d45 495f4646 0000544e     SYSTEM_OFF_INT..
   23bd0:	3a6e7372 202c7325 3a746e63 202c7525     rsn:%s, cnt:%u, 
   23be0:	3a676d69 252e7525 75252e75 2c75252e     img:%u.%u.%u.%u,
   23bf0:	73616820 00003a68 78323025 00000000      hash:..%02x....
   23c00:	6964202c 73253a65 0064253a 6370202c     , die:%s:%d., pc
   23c10:	2578303a 0000786c 00000031 6f626572     :0x%lx..1...rebo
   23c20:	0000746f                                ot..

00023c24 <sysflash_map_dflt>:
	...
   23c2c:	00004000 00000001 00008000 0003a000     .@..............
   23c3c:	00000002 00042000 0003a000 00000003     ..... ..........
   23c4c:	0007c000 00001000 00000010 00004000     .............@..
   23c5c:	00004000 00000011 0007d000 00003000     .@...........0..

00023c6c <boot_img_magic>:
   23c6c:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

00023c7c <boot_swap_tables>:
   23c7c:	03040104 01040204 03040104 04030301     ................
   23c8c:	00000401                                ....

00023c90 <K>:
   23c90:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   23ca0:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   23cb0:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   23cc0:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   23cd0:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   23ce0:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   23cf0:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   23d00:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   23d10:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   23d20:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   23d30:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   23d40:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   23d50:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   23d60:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   23d70:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   23d80:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

00023d90 <crc8_small_table>:
   23d90:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-

00023da0 <CSWTCH.8>:
   23da0:	bf490fdb 4016cbe4 c016cbe4              ..I....@....

00023dac <CSWTCH.9>:
   23dac:	80000000 40490fdb c0490fdb              ......I@..I.

00023db8 <Zero>:
   23db8:	00000000 80000000                       ........

00023dc0 <atanlo>:
   23dc0:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

00023dd0 <atanhi>:
   23dd0:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?

/home/joel/Capstone/uwb-apps/bin/targets/twr_tag/app/apps/twr_aloha/twr_aloha.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 114136	  12168	  15552	 141856	  22a20	/home/joel/Capstone/uwb-apps/bin/targets/twr_tag/app/apps/twr_aloha/twr_aloha.elf
