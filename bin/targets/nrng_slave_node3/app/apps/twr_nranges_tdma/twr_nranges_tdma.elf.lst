
/home/joel/Capstone/uwb-apps/bin/targets/nrng_slave_node3/app/apps/twr_nranges_tdma/twr_nranges_tdma.elf:     file format elf32-littlearm
/home/joel/Capstone/uwb-apps/bin/targets/nrng_slave_node3/app/apps/twr_nranges_tdma/twr_nranges_tdma.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x000241b8 vaddr 0x000241b8 paddr 0x000241b8 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000241d0 memsz 0x000241d0 flags rwx
    LOAD off    0x00030530 vaddr 0x20000530 paddr 0x000241d0 align 2**16
         filesz 0x00000ea0 memsz 0x00004d74 flags rw-
    LOAD off    0x00000000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x00000530 flags rw-
private flags = 0x5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              0001c198  00008020  00008020  00008020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  000241b8  000241b8  000313d0  2**0  CONTENTS
  3 .ARM.exidx         00000018  000241b8  000241b8  000241b8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000458  200000d8  200000d8  00040000  2**2  ALLOC
  6 .data              00000ea0  20000530  000241d0  00030530  2**3  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  200013d0  200013d0  000313d0  2**0  CONTENTS
  8 .bss               00003ed4  200013d0  00025070  000313d0  2**3  ALLOC
  9 .stack_dummy       000001b0  200052a8  200052a8  000313d0  2**3  CONTENTS, READONLY
 10 .ARM.attributes    00000030  00000000  00000000  00031580  2**0  CONTENTS, READONLY
 11 .comment           000000b2  00000000  00000000  000315b0  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  00031662  2**0  CONTENTS, READONLY
 13 .debug_line        0004253a  00000000  00000000  00031666  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info        000c2472  00000000  00000000  00073ba0  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev      0001effa  00000000  00000000  00136012  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges     00003d48  00000000  00000000  00155010  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str         0001af17  00000000  00000000  00158d58  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc         00049c63  00000000  00000000  00173c6f  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges      000072f8  00000000  00000000  001bd8d2  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame       0000a6fc  00000000  00000000  001c4bcc  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro       0000279b  00000000  00000000  001cf2c8  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
000241b8 l    d  .ARM.extab	00000000 .ARM.extab
000241b8 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
20000530 l    d  .data	00000000 .data
200013d0 l    d  .bssnz	00000000 .bssnz
200013d0 l    d  .bss	00000000 .bss
200052a8 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
20000530 l     O .data	00000004 sbrkBase
20000534 l     O .data	00000004 sbrkLimit
20000538 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
00008228 l     F .text	0000002a errata_16
00008228 l     F .text	0000002a errata_57
00008228 l     F .text	0000002a errata_37
00008228 l     F .text	0000002a errata_32
00008252 l     F .text	00000036 errata_31
00008252 l     F .text	00000036 errata_108
00008252 l     F .text	00000036 errata_36
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00008494 l     F .text	00000058 pan_complete_cb
000084f0 l     F .text	00000030 tof_comp_cb
00008520 l     F .text	00000054 nrng_complete_cb
00008574 l     F .text	00000024 complete_cb
000085e8 l     F .text	00000158 slot_cb
200013d0 l     O .bss	00000010 nrng_complete_event
200013e0 l     O .bss	00000001 uwb_config_updated
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 uwb.c
00008a38 l     F .text	0000000e uwb_interrupt_task
00000000 l    df *ABS*	00000000 hal_gpio.c
00008cc8 l     F .text	0000004c hal_gpio_irq_handler
00008d14 l     F .text	00000034 hal_gpio_find_pin
200013e4 l     O .bss	00000040 hal_gpio_irqs
20001424 l     O .bss	00000001 irq_setup.0
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00009054 l     F .text	00000016 os_main
20001580 l     O .bss	00001000 g_os_main_stack
20001478 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
0000938e l     F .text	00000020 os_dev_initialize
200025dc l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
200025e4 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
00009624 l     F .text	00000068 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00009764 l     F .text	00000024 os_msys_find_pool
200025fc l     O .bss	00000db0 os_msys_1_data
200033ac l     O .bss	0000000c os_msys_1_mbuf_pool
200033b8 l     O .bss	0000001c os_msys_1_mempool
20000548 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_sanity.c
00009898 l     F .text	0000001c os_sanity_check_list_lock
000098b4 l     F .text	00000018 os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00009ed4 l     F .text	00000044 os_deltatime
200033f8 l     O .bss	00000030 basetod
20000560 l     O .data	00000008 os_time_change_listeners
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_mbuf.c
0000a2dc l     F .text	00000016 _os_mbuf_trailingspace
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0000a884 l       .text	00000000 SVC_User
0000a8a2 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 nmgr_uwb.c
0000a92c l     F .text	0000000e uwb_write_tx.isra.0
0000a93a l     F .text	00000016 tx_complete_cb
0000a950 l     F .text	00000004 rx_timeout_cb
0000a954 l     F .text	0000014c rx_complete_cb
0000aab8 l     F .text	00000006 nmgr_uwb_mtu_0
0000ad34 l     F .text	00000062 nmgr_resp_cb
20003430 l     O .bss	00000001 last_rpt_seq_num.0
20003432 l     O .bss	00000002 last_rpt_src.1
20003434 l     O .bss	00000020 uwb_transport_0
20000568 l     O .data	0000003c g_cbs
00000000 l    df *ABS*	00000000 nrng.c
0000ad96 l     F .text	0000000e complete_ev_cb.part.0
0000ad96 l     F .text	0000000e nrng_config.part.0
0000ad96 l     F .text	0000000e nrng_set_frames.part.0
0000ada4 l     F .text	0000002c complete_ev_cb
0000add0 l     F .text	0000003c complete_cb
200005a4 l     O .data	00000010 g_config
00000000 l    df *ABS*	00000000 nrng_encode.c
00000000 l    df *ABS*	00000000 nrng_json.c
0000b62e l     F .text	00000048 nrng_write_line
00000000 l    df *ABS*	00000000 pan_utils.c
00000000 l    df *ABS*	00000000 panmaster.c
0000b8a4 l     F .text	00000018 pm_conf_export
0000b8bc l     F .text	00000078 first_free_slot_id
0000b934 l     F .text	0000001c pm_conf_commit
0000b950 l     F .text	00000030 pm_conf_set
0000b980 l     F .text	00000028 pm_conf_get
20003464 l     O .bss	00000018 _log
20003480 l     O .bss	00000600 node_idx
20003a80 l     O .bss	000000f8 nodes_to_save
20003b78 l     O .bss	00000002 pan_id
20003b7c l     O .bss	000000cc pm_fcb_area
20003c48 l     O .bss	0000000c save_mutex
200005b4 l     O .data	00000018 pm_conf_cbs
200005cc l     O .data	00000008 pm_config
200005d4 l     O .data	00000030 pm_init_conf_fcb
00000000 l    df *ABS*	00000000 panmaster_cli.c
0000c148 l     F .text	00000070 dump_cb
0000c1b8 l     F .text	00000490 panmaster_cli_cmd
0000c648 l     F .text	00000032 list_nodes_load_cb
20000604 l     O .data	00000010 shell_panmaster_cmd
00000000 l    df *ABS*	00000000 panmaster_fcb.c
0000c688 l     F .text	00000050 node_idx_load_cb
0000c6d8 l     F .text	00000040 fcb_load_cb
0000c718 l     F .text	00000052 find_node_load_cb
0000c76a l     F .text	00000026 sort_nodes_load_cb
00000000 l    df *ABS*	00000000 rng_math.c
00000000 l    df *ABS*	00000000 survey.c
0000caa8 l     F .text	000000e8 rx_complete_cb
0000cb90 l     F .text	0000000e survey_complete_cb.part.0
0000cb90 l     F .text	0000000e tx_complete_cb.part.0
0000cb90 l     F .text	0000000e rx_timeout_cb.part.0
0000cb90 l     F .text	0000000e reset_cb.part.0
0000cb9e l     F .text	00000026 survey_complete_cb
0000cbc4 l     F .text	00000028 reset_cb
0000cbec l     F .text	00000028 rx_timeout_cb
0000cc14 l     F .text	0000001c tx_complete_cb
20003c54 l     O .bss	00000010 survey_complete_event
00000000 l    df *ABS*	00000000 survey_encode.c
00000000 l    df *ABS*	00000000 tdma.c
0000d2d0 l     F .text	000000c8 tdma_superframe_slot_cb
0000d398 l     F .text	00000022 superframe_cb
0000d3ba l     F .text	0000000e slot_timer_cb.part.0
0000d3ba l     F .text	0000000e tdma_free.part.0
0000d3ba l     F .text	0000000e tdma_release_slot.part.0
0000d3ba l     F .text	0000000e sanity_feeding_cb.part.0
0000d3c8 l     F .text	00000030 slot_timer_cb
0000d3f8 l     F .text	00000048 tdma_task
0000d440 l     F .text	0000002a sanity_feeding_cb
00000000 l    df *ABS*	00000000 uwb_ccp.c
0000d7f8 l     F .text	00000006 uwb_read_systime_lo32
0000d7fe l     F .text	00000008 uwb_phy_SHR_duration
0000d806 l     F .text	00000008 uwb_phy_forcetrxoff
0000d80e l     F .text	00000052 error_cb
0000d860 l     F .text	000001d4 tx_complete_cb
0000da34 l     F .text	0000000e ccp_task
0000da42 l     F .text	0000000e reset_cb.part.0
0000da42 l     F .text	0000000e ccp_timer_irq.part.0
0000da42 l     F .text	0000000e rx_timeout_cb.part.0
0000da50 l     F .text	00000026 reset_cb
0000da76 l     F .text	00000040 rx_timeout_cb
0000dab6 l     F .text	00000018 ccp_timer_irq
0000dace l     F .text	00000006 uwb_set_delay_start.isra.0
0000dad8 l     F .text	000000f8 ccp_listen.constprop.0.isra.0
0000dbd0 l     F .text	00000006 uwb_set_rx_timeout.isra.0
0000dbd8 l     F .text	00000170 ccp_slave_timer_ev_cb
0000dd48 l     F .text	00000288 ccp_master_timer_ev_cb
0000e388 l     F .text	00000448 rx_complete_cb
00000000 l    df *ABS*	00000000 uwb_pan.c
0000e82e l     F .text	00000006 uwb_start_tx
0000e834 l     F .text	00000028 tx_complete_cb
0000e85c l     F .text	00000054 lease_expiry_cb
0000e8b0 l     F .text	00000018 pan_postprocess
0000e8c8 l     F .text	0000000e reset_cb.part.0
0000e8c8 l     F .text	0000000e uwb_pan_set_frames.part.0
0000e8c8 l     F .text	0000000e rx_timeout_cb.part.0
0000e8d8 l     F .text	0000002c reset_cb
0000e904 l     F .text	0000002c rx_timeout_cb
0000e930 l     F .text	00000012 uwb_write_tx_fctrl.constprop.0
0000e942 l     F .text	00000012 uwb_write_tx.constprop.0.isra.0
0000e954 l     F .text	00000006 uwb_set_wait4resp.isra.0
0000e95a l     F .text	00000006 uwb_set_delay_start.isra.0
0000e960 l     F .text	00000006 uwb_set_rx_timeout.isra.0
0000e968 l     F .text	00000294 rx_complete_cb
20003c64 l     O .bss	00000001 _pan_cycles.0
20000614 l     O .data	0000003c g_cbs
20000650 l     O .data	00000010 g_config
20000660 l     O .data	00000032 g_pan_0
00000000 l    df *ABS*	00000000 slots.c
00000000 l    df *ABS*	00000000 uwb_wcs.c
0000f188 l     F .text	0000000e uwb_wcs_init.part.0
0000f188 l     F .text	0000000e uwb_wcs_free.part.0
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 malloc.c
0000f420 l     F .text	00000004 malloc_lock_nop
0000f424 l     F .text	00000002 malloc_unlock_nop
0000f428 l     F .text	00000060 __free_block.isra.0
20000694 l     O .data	00000018 __malloc_head
200006ac l     O .data	00000004 malloc_lock
200006b0 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 memcmp.c
0000f5b4 l       .text	00000000 test1
0000f5a8 l       .text	00000000 loop1
0000f5ba l       .text	00000000 res1
0000f5d6 l       .text	00000000 test2
0000f5de l       .text	00000000 done
0000f5ca l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0000f5ea l       .text	00000000 test1
0000f5e6 l       .text	00000000 loop1
0000f5f8 l       .text	00000000 test2
0000f5f4 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mynewt.c
0000f634 l     F .text	00000004 stdin_read
0000f638 l     F .text	00000010 stdout_write
200006b4 l     O .data	00000004 _stdin
200006b8 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtoll.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0000f694 l     F .text	000000b4 ui2a
0000f748 l     F .text	00000016 i2a
0000f75e l     F .text	00000022 putf
0000f780 l     F .text	0000011c putchw
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 imgmgr.c
0000fdc4 l     F .text	0000001c cbor_encode_text_stringz
0000fde0 l     F .text	0000004c imgr_upload_good_rsp
0000fe2c l     F .text	00000034 imgr_erase_state.part.0
0000fe2c l     F .text	00000034 imgr_erase.part.0
0000ffd4 l     F .text	00000036 imgr_erase_state
0001000a l     F .text	00000036 imgr_erase
0001007c l     F .text	00000340 imgr_upload
20003cb4 l     O .bss	00000030 imgr_state
20003ce4 l     O .bss	00000004 imgr_upload_arg
20003ce8 l     O .bss	00000004 imgr_upload_cb
200006c0 l     O .data	0000000c imgr_nmgr_group
000224a8 l     O .text	00000038 imgr_nmgr_handlers
00000000 l    df *ABS*	00000000 imgmgr_cli.c
00010420 l     F .text	0000009c imgr_cli_set_pending
000104bc l     F .text	00000148 imgr_cli_cmd
20003cec l     O .bss	00000008 buf.0
200006cc l     O .data	00000010 shell_imgr_cmd
00022644 l     O .text	0000000c imgr_cli_help
00000000 l    df *ABS*	00000000 imgmgr_log.c
00000000 l    df *ABS*	00000000 imgmgr_state.c
00010620 l     F .text	0000001c cbor_encode_text_stringz
00000000 l    df *ABS*	00000000 imgmgr_util.c
00000000 l    df *ABS*	00000000 mgmt.c
000109f0 l     F .text	00000018 mgmt_group_list_lock
20003cf4 l     O .bss	0000000c mgmt_group_lock
200006dc l     O .data	00000008 mgmt_group_list
00000000 l    df *ABS*	00000000 newtmgr.c
00010aa8 l     F .text	00000024 nmgr_rsp_frag_alloc
00010acc l     F .text	00000064 nmgr_init_rsp
00010b30 l     F .text	000001bc nmgr_event_data_in
20003d04 l     O .bss	00000060 nmgr_task_cbuf
00000000 l    df *ABS*	00000000 newtmgr_os.c
00010d78 l     F .text	0000004c nmgr_reset
00010dc4 l     F .text	00000006 nmgr_reset_tmo
00010dcc l     F .text	0000005c nmgr_datetime_set
00010e28 l     F .text	0000001c cbor_encode_text_stringz
00010e44 l     F .text	00000078 nmgr_datetime_get
00010ebc l     F .text	00000078 nmgr_def_echo
00010f34 l     F .text	0000010c nmgr_def_mpstat_read
00011040 l     F .text	000001a4 nmgr_def_taskstat_read
000111e4 l     F .text	00000054 nmgr_def_console_echo
20003d64 l     O .bss	00000020 nmgr_reset_callout
200006e4 l     O .data	0000000c nmgr_def_group
00022724 l     O .text	00000030 nmgr_def_group_handlers
00000000 l    df *ABS*	00000000 dpl_cputime.c
00000000 l    df *ABS*	00000000 dpl_mem.c
00000000 l    df *ABS*	00000000 dpl_mempool.c
00000000 l    df *ABS*	00000000 streamer.c
00000000 l    df *ABS*	00000000 dpl_mbuf.c
00011480 l     F .text	00000016 _dpl_mbuf_trailingspace
00000000 l    df *ABS*	00000000 config.c
000116e6 l     F .text	00000004 conf_ev_fn_load
20003d88 l     O .bss	0000000c conf_mtx
200006f8 l     O .data	00000010 conf_ev_load
00000000 l    df *ABS*	00000000 config_cli.c
000119ac l     F .text	00000018 conf_running_one
000119c4 l     F .text	000000f4 shell_conf_command
20000708 l     O .data	00000010 shell_conf_cmd
00000000 l    df *ABS*	00000000 config_store.c
00011ac4 l     F .text	00000020 conf_load_cb
00011ae4 l     F .text	0000002e conf_dup_check_cb
00011c14 l     F .text	00000004 conf_store_one
20003d98 l     O .bss	00000001 conf_loaded
20003d99 l     O .bss	00000001 conf_loading
00000000 l    df *ABS*	00000000 console.c
00011d10 l     F .text	0000003c console_append_char
00011d4c l     F .text	00000018 cursor_save
00011d64 l     F .text	00000018 cursor_restore
00011d7c l     F .text	00000042 del_char
00011dc0 l     F .text	0000005c insert_char
00011e1c l     F .text	000001d8 handle_ansi
20003da0 l     O .bss	00000004 ansi_val
20003da4 l     O .bss	00000004 ansi_val_2
20003da8 l     O .bss	00000010 avail_queue
20003db8 l     O .bss	00000004 completion
20003dbc l     O .bss	00000004 console_compat_rx_cb
20003dc0 l     O .bss	00000028 console_hist
20003de8 l     O .bss	00000800 console_hist_lines
200045ec l     O .bss	0000000c console_write_lock
200045f8 l     O .bss	00000002 cur
200045fa l     O .bss	00000002 end
200045fc l     O .bss	00000004 esc_state
20004600 l     O .bss	00000004 ev.2
20004608 l     O .bss	00000004 input.1
2000460c l     O .bss	00000004 lines_queue
20004610 l     O .bss	00000004 nlip_state
20004614 l     O .bss	00000001 prev_endl.0
20004615 l     O .bss	00000001 rx_stalled
20000718 l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 rtt_console.c
000125f0 l     F .text	00000054 rtt_console_write_ch
00012644 l     F .text	00000064 rtt_console_poll_func
20004618 l     O .bss	00000018 rtt_timer
2000071c l     O .data	00000004 itvl_ms.0
20000720 l     O .data	00000004 key.1
20000724 l     O .data	00000004 rtt_console_retries_left.2
00000000 l    df *ABS*	00000000 ticks.c
20000728 l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 flash_map.c
20004638 l     O .bss	00000078 mfg_areas.0
00000000 l    df *ABS*	00000000 log.c
00012964 l     F .text	00000014 log_call_append_cb
00012978 l     F .text	000000c0 log_append_prepare
00012bce l     F .text	00000026 log_read_hdr_walk
200046b8 l     O .bss	00000004 g_log_module_list
200046bc l     O .bss	00000001 log_written
2000072c l     O .data	00000008 g_log_list
00000000 l    df *ABS*	00000000 log_console.c
00012bf4 l     F .text	00000004 log_console_read
00012bf8 l     F .text	00000004 log_console_walk
00012bfc l     F .text	00000004 log_console_flush
00012c00 l     F .text	0000003c log_console_append_body
00012c3c l     F .text	00000040 log_console_append
200046c0 l     O .bss	00000018 log_console
00000000 l    df *ABS*	00000000 log_level.c
200046d8 l     O .bss	00000080 log_level_map
00000000 l    df *ABS*	00000000 mfg.c
00012ce8 l     F .text	000000a4 mfg_read_next_mmr
00012d8c l     F .text	00000060 mfg_read_tlv_body
20004758 l     O .bss	00000001 mfg_initialized
2000475c l     O .bss	00000018 mfg_mmrs
20004774 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 log_reboot.c
00012f0c l     F .text	00000130 log_reboot_write
0001303c l     F .text	00000028 reboot_conf_export
00013064 l     F .text	00000054 reboot_conf_get
000130b8 l     F .text	0000004c reboot_conf_set
20004778 l     O .bss	00000001 log_reboot_written
20004779 l     O .bss	0000000c log_reboot_written_str
20004788 l     O .bss	0000000c reboot_cnt_str
00000000 l    df *ABS*	00000000 shell.c
00013194 l     F .text	00000060 print_module_commands
000131f4 l     F .text	00000038 print_modules
0001322c l     F .text	00000040 print_command_params
0001326c l     F .text	00000048 get_destination_module
000132b4 l     F .text	0000001c set_default_module
000132d0 l     F .text	00000020 select_module
000132f0 l     F .text	0000004c print_prompt
0001333c l     F .text	00000016 print_prompt_if_console
00013354 l     F .text	0000010c complete_command
00013460 l     F .text	0000003c get_token
0001349c l     F .text	00000140 complete_module
000135dc l     F .text	00000254 completion
00013830 l     F .text	00000064 get_command_and_module.constprop.0
00013894 l     F .text	000000e0 show_cmd_help
00013974 l     F .text	0000007c show_help
00013b24 l     F .text	00000078 shell_process_command
00013b9c l     F .text	00000060 shell
20004794 l     O .bss	00000010 app_cmd
200047a4 l     O .bss	00000004 app_prompt_handler
200047a8 l     O .bss	00000200 buf
200049a8 l     O .bss	00000150 compat_commands
20004af8 l     O .bss	00000004 module_registered
20004afc l     O .bss	00000004 num_compat_commands
20004b00 l     O .bss	00000004 num_of_shell_entities
20004b04 l     O .bss	00000004 prompt
20004b08 l     O .bss	00000020 shell_console_ev
20004b28 l     O .bss	00000018 shell_modules
2000074c l     O .data	00000004 default_module
00022adc l     O .text	00000010 shell_cmd_help
00022aec l     O .text	00000010 shell_cmd_select_module
00000000 l    df *ABS*	00000000 shell_nlip.c
00013d28 l     F .text	0000012c shell_event_data_in
20004b40 l     O .bss	00000002 g_nlip_expected_len
20004b44 l     O .bss	00000004 g_nlip_mbuf
20004b48 l     O .bss	00000004 g_shell_nlip_in_arg
20004b4c l     O .bss	00000004 g_shell_nlip_in_func
20004b50 l     O .bss	00000018 g_shell_nlip_mq
00000000 l    df *ABS*	00000000 shell_os.c
00013f48 l     F .text	00000020 shell_os_ls_dev
00014068 l     F .text	000000f4 shell_os_tasks_display_cmd
00022cb0 l     O .text	0000000c date_help
00022cbc l     O .text	00000010 date_params
00022ccc l     O .text	0000000c ls_dev_help
00022cd8 l     O .text	0000000c mpool_help
00022ce4 l     O .text	00000010 mpool_params
00022cf4 l     O .text	00000060 os_commands
00022d68 l     O .text	0000000c tasks_help
00022d54 l     O .text	0000000c reset_help
00022d60 l     O .text	00000008 reset_params
00022d74 l     O .text	00000010 tasks_params
00000000 l    df *ABS*	00000000 shell_prompt.c
00022e04 l     O .text	00000020 prompt_commands
00022e24 l     O .text	0000000c ticks_help
00022e30 l     O .text	00000018 ticks_params
00000000 l    df *ABS*	00000000 stats.c
0001426c l     F .text	00000044 stats_register_internal
00014378 l     F .text	00000044 stats_module_init_internal
00000000 l    df *ABS*	00000000 stats_shell.c
00014474 l     F .text	00000054 stats_shell_display_entry
000144c8 l     F .text	00000018 stats_shell_display_group
000144e0 l     F .text	00000050 shell_stats_display
20000758 l     O .data	00000010 shell_stats_cmd
00000000 l    df *ABS*	00000000 sysdown.c
00014550 l     F .text	0000000e sysdown_timer_exp
20004b84 l     O .bss	00000004 sysdown_num_in_progress
20004b88 l     O .bss	00000020 sysdown_timer
00000000 l    df *ABS*	00000000 sysinit.c
000145f4 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 uwbcfg.c
00014614 l     F .text	00000054 uwbcfg_export
00014668 l     F .text	00000044 uwbcfg_set
000146ac l     F .text	00000034 uwbcfg_get
20004bc4 l     O .bss	00000004 uwbcfg_callbacks
2000085c l     O .data	00000018 uwbcfg_handler
00000000 l    df *ABS*	00000000 uwbcfg_dw1000.c
000149a4 l     F .text	00000094 check_preamble_code.isra.0
00000000 l    df *ABS*	00000000 uwbcfg_strtod.c
00000000 l    df *ABS*	00000000 datetime.c
00014dd4 l     F .text	00000032 parse_number
00014e06 l     F .text	0000002c leapyear
000230a0 l     O .text	00000030 month_days
00000000 l    df *ABS*	00000000 crc16.c
000230d0 l     O .text	00000200 crc16tab
00000000 l    df *ABS*	00000000 parse.c
00015298 l     F .text	00000022 parse_num_base
00000000 l    df *ABS*	00000000 streamer_console.c
0001530e l     F .text	00000008 streamer_console_vprintf
00015316 l     F .text	0000000e streamer_console_write
20000874 l     O .data	00000004 streamer_console
000232d0 l     O .text	00000008 streamer_cfg_console
00000000 l    df *ABS*	00000000 nrng_slave_node3-sysinit-app.c
00000000 l    df *ABS*	00000000 bootutil_misc.c
000153a6 l     F .text	00000048 boot_write_trailer_byte
000154bc l     F .text	0000001e boot_read_swap_state_by_id.part.0
00023350 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 split.c
20004bcc l     O .bss	00000001 split_app_active
20004bcd l     O .bss	00000001 split_mode_cur
00000000 l    df *ABS*	00000000 split_config.c
000156e0 l     F .text	00000004 split_conf_commit
000156e4 l     F .text	0000002c split_conf_export
00015710 l     F .text	0000003c split_conf_set
0001574c l     F .text	00000038 split_conf_get
20000878 l     O .data	00000018 split_conf_handler
00000000 l    df *ABS*	00000000 base64.c
00023375 l     O .text	00000041 base64_chars
00000000 l    df *ABS*	00000000 hex.c
000233b6 l     O .text	00000011 hex_bytes
00000000 l    df *ABS*	00000000 cborattr.c
000159da l     F .text	00000046 cbor_target_address
00015a20 l     F .text	0000000e cbor_value_get_boolean.part.0
00015a20 l     F .text	0000000e cbor_value_copy_text_string.part.0
00015a20 l     F .text	0000000e cbor_value_get_double.part.0
00015a20 l     F .text	0000000e cbor_value_get_uint64.part.0
00015a20 l     F .text	0000000e cbor_value_get_int64.part.0
00015a2e l     F .text	00000036 cbor_value_get_int64
00015a64 l     F .text	00000036 cbor_value_get_double
00015a9a l     F .text	0000002a cbor_value_get_uint64
00015bc8 l     F .text	00000266 cbor_internal_read_object
00000000 l    df *ABS*	00000000 cbor_mbuf_reader.c
00015e36 l     F .text	0000001a cbor_mbuf_reader_cpy
00015e50 l     F .text	0000001a cbor_mbuf_reader_get8
00015e6a l     F .text	00000018 cbor_mbuf_reader_cmp
00015e82 l     F .text	0000001c cbor_mbuf_reader_get64
00015e9e l     F .text	00000018 cbor_mbuf_reader_get32
00015eb6 l     F .text	0000001e cbor_mbuf_reader_get16
00000000 l    df *ABS*	00000000 cbor_mbuf_writer.c
00000000 l    df *ABS*	00000000 cborencoder.c
00015f54 l     F .text	00000004 append_to_buffer.isra.0
00015f58 l     F .text	0000005e encode_number_no_update
00015fb6 l     F .text	00000014 encode_number
00015fca l     F .text	00000044 create_container
00000000 l    df *ABS*	00000000 cborparser.c
000160fe l     F .text	00000014 is_fixed_type
00016112 l     F .text	00000004 iterate_noop
00016116 l     F .text	000000fa preparse_value
00016210 l     F .text	0000004a preparse_next_value
0001625a l     F .text	00000088 extract_number
000162e2 l     F .text	00000044 advance_internal
00016326 l     F .text	0000000e cbor_value_advance_fixed.part.0
00016326 l     F .text	0000000e cbor_value_advance.part.0
00016326 l     F .text	0000000e cbor_value_leave_container.part.0
00016334 l     F .text	00000156 iterate_string_chunks
000165f8 l     F .text	00000072 advance_recursive
00000000 l    df *ABS*	00000000 fcb.c
00000000 l    df *ABS*	00000000 fcb_append.c
000168b6 l     F .text	00000012 fcb_len_in_flash.isra.0
00000000 l    df *ABS*	00000000 fcb_elem_info.c
00000000 l    df *ABS*	00000000 fcb_getnext.c
00000000 l    df *ABS*	00000000 fcb_rotate.c
00000000 l    df *ABS*	00000000 fcb_walk.c
00000000 l    df *ABS*	00000000 hal_bsp.c
000233d0 l     O .text	00000018 dw1000_0_cfg
00000000 l    df *ABS*	00000000 SEGGER_RTT.c
20000120 l     O .rtt	00000400 _acUpBuffer
20000520 l     O .rtt	00000010 _acDownBuffer
00000000 l    df *ABS*	00000000 dw1000_dev.c
00017094 l     F .text	0000000a uwb_dw1000_read_sts_rxtime
0001709e l     F .text	00000004 uwb_dw1000_hal_noblock_wait
000170f0 l     F .text	00000020 uwb_dw1000_calc_pdoa
00017110 l     F .text	00000004 uwb_dw1000_estimate_los
00017114 l     F .text	00000004 uwb_dw1000_calc_fppl
00017118 l     F .text	00000004 uwb_dw1000_calc_seq_rssi
0001711c l     F .text	00000004 uwb_dw1000_calc_rssi
00017120 l     F .text	00000004 uwb_dw1000_get_fppl
00017124 l     F .text	00000004 uwb_dw1000_get_rssi
00017128 l     F .text	00000004 uwb_dw1000_set_on_error_continue
0001712c l     F .text	00000004 uwb_dw1000_phy_repeated_frames
00017130 l     F .text	00000004 uwb_dw1000_phy_rx_reset
00017134 l     F .text	00000004 uwb_dw1000_phy_forcetrxoff
00017138 l     F .text	00000008 uwb_dw1000_phy_data_duration
00017140 l     F .text	00000008 uwb_dw1000_phy_SHR_duration
00017148 l     F .text	00000008 uwb_dw1000_phy_frame_duration
00017150 l     F .text	00000004 uwb_dw1000_read_txtime_lo32
00017154 l     F .text	00000004 uwb_dw1000_read_txtime
00017158 l     F .text	00000004 uwb_dw1000_read_rxtime_lo32
0001715c l     F .text	00000004 uwb_dw1000_read_rxtime
00017160 l     F .text	00000004 uwb_dw1000_read_systime_lo32
00017164 l     F .text	00000004 uwb_dw1000_read_systime
00017168 l     F .text	00000004 uwb_dw1000_set_rxauto_disable
0001716c l     F .text	00000004 uwb_dw1000_set_wait4resp_delay
00017170 l     F .text	00000004 uwb_dw1000_set_wait4resp
00017174 l     F .text	00000004 uwb_dw1000_tx_wait
00017178 l     F .text	00000004 uwb_dw1000_write_tx_fctrl
0001717c l     F .text	00000004 uwb_dw1000_write_tx
00017180 l     F .text	00000004 uwb_dw1000_stop_rx
00017184 l     F .text	00000004 uwb_dw1000_start_rx
00017188 l     F .text	00000004 uwb_dw1000_start_tx
0001718c l     F .text	00000004 uwb_dw1000_set_delay_start
00017190 l     F .text	00000004 uwb_dw1000_set_abs_timeout
00017194 l     F .text	00000004 uwb_dw1000_set_rx_window
00017198 l     F .text	00000006 uwb_dw1000_adj_rx_timeout
0001719e l     F .text	00000006 uwb_dw1000_set_rx_timeout
000171a4 l     F .text	00000004 uwb_dw1000_set_dblrxbuf
000171a8 l     F .text	00000004 uwb_dw1000_txrf_power_value
000171ac l     F .text	00000004 uwb_dw1000_txrf_config
000171b0 l     F .text	00000004 uwb_dw1000_mac_config
000171b8 l     F .text	00000020 uwb_dw1000_calc_clock_offset_ratio
0001746e l     F .text	00000018 uwb_dw1000_set_euid
00017486 l     F .text	00000018 uwb_dw1000_set_uid
0001749e l     F .text	00000018 uwb_dw1000_set_panid
000175f8 l     F .text	00000004 uwb_dw1000_sleep_config
00017674 l     F .text	00000004 uwb_dw1000_enter_sleep
000178e0 l     F .text	00000004 uwb_dw1000_wakeup
00017928 l     F .text	00000004 uwb_dw1000_enter_sleep_after_tx
00017970 l     F .text	00000004 uwb_dw1000_enter_sleep_after_rx
0002343c l     O .text	00000015 __func__.0
00023454 l     O .text	000000dc dw1000_uwb_funcs
00000000 l    df *ABS*	00000000 dw1000_hal.c
20000890 l     O .data	000005f0 hal_dw1000_instances
00000000 l    df *ABS*	00000000 dw1000_mac.c
0001807e l     F .text	00000024 dw1000_irq
000184ae l     F .text	00000034 update_rx_window_timeout.isra.0
00019130 l     F .text	00000800 dw1000_interrupt_ev_cb
0002358c l     O .text	00000008 agc_config
00023594 l     O .text	00000008 chan_idx
0002359c l     O .text	00000020 digital_bb_config
000235bc l     O .text	00000004 dtune1
000235c0 l     O .text	00000003 dwnsSFDlen
000235c4 l     O .text	00000018 fs_pll_cfg
000235dc l     O .text	00000006 fs_pll_tune
0002361e l     O .text	00000032 lde_replicaCoeff
00023650 l     O .text	00000002 rx_config
00023652 l     O .text	0000000c sftsh
00023660 l     O .text	00000018 tx_config
00000000 l    df *ABS*	00000000 dw1000_phy.c
00000000 l    df *ABS*	00000000 dw1000_pkg.c
00000000 l    df *ABS*	00000000 dw1000_cli.c
0001a4a4 l     F .text	00000208 dw1000_cli_cmd
20000e80 l     O .data	00000010 shell_dw1000_cmd
00000000 l    df *ABS*	00000000 dw1000_gpio.c
00000000 l    df *ABS*	00000000 dw1000_otp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001a7de l     F .text	0000001c hal_flash_check_addr
20004bd8 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 hal_flash.c
0001aa50 l     F .text	00000024 nrf52k_flash_wait_ready
0001aa74 l     F .text	0000004c nrf52k_flash_erase_sector
0001aac0 l     F .text	00000004 nrf52k_flash_init
0001aac4 l     F .text	000000c0 nrf52k_flash_write
0001ab84 l     F .text	0000000e nrf52k_flash_read
0001ab92 l     F .text	00000020 nrf52k_flash_sector_info
000239a8 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001abb2 l     F .text	0000002e sub24
0001abe0 l     F .text	00000040 nrf52_os_tick_set_ocmp
0001ac20 l     F .text	00000050 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_spi.c
000239c4 l     O .text	00000010 nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_timer.c
0001b1ec l     F .text	00000020 __NVIC_SetPendingIRQ
0001b20c l     F .text	00000038 hal_timer_read_bsptimer
0001b244 l     F .text	0000007e nrf_timer_set_ocmp
000239d4 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 hal_watchdog.c
0001b5c8 l     F .text	00000024 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
000239ec l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 json_encode.c
0001b7ac l     F .text	000001ec json_encode_value
00000000 l    df *ABS*	00000000 json_util.c
00000000 l    df *ABS*	00000000 timescale.c
0001ba84 l     F .text	00000174 timescale_QUpdate
0001bbf8 l     F .text	00000084 timescale_JofAx
0001bc7c l     F .text	00000074 timescale_Aofx
0001bcf0 l     F .text	000000f8 timescale_innovation
0001bde8 l     F .text	00000044 timescale_constraints
0001be30 l     F .text	0000006c timescale_Hofx
00023a2a l     O .text	0000000f __func__.7324
00023a39 l     O .text	0000000f __func__.7336
00000000 l    df *ABS*	00000000 srkf_dbl.c
0001c090 l     F .text	00000080 Hofx
0001c110 l     F .text	000000a0 Aofx
00023a87 l     O .text	0000000e __func__.7283
00023a95 l     O .text	0000000e __func__.7299
00023aa3 l     O .text	0000000e __func__.7311
00000000 l    df *ABS*	00000000 trisolve_dbl.c
00000000 l    df *ABS*	00000000 ud_dbl.c
00000000 l    df *ABS*	00000000 thornton_dbl.c
00000000 l    df *ABS*	00000000 bierman_dbl.c
00000000 l    df *ABS*	00000000 twr_ss_nrng.c
0001d2e4 l     F .text	00000050 rx_timeout_cb
0001d334 l     F .text	0000000e reset_cb.part.0
0001d334 l     F .text	0000000e rx_error_cb.part.0
0001d344 l     F .text	0000002c reset_cb
0001d370 l     F .text	00000038 rx_error_cb
0001d3a8 l     F .text	0000033c rx_complete_cb
20000e90 l     O .data	0000003c g_cbs
20000ecc l     O .data	00000010 g_config
20000edc l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 uwb_rng.c
0001d758 l     F .text	0000000e reset_cb.part.0
0001d758 l     F .text	0000000e uwb_rng_config.part.0
0001d758 l     F .text	0000000e uwb_rng_set_frames.part.0
0001d758 l     F .text	0000000e uwb_rng_free.part.0
0001d758 l     F .text	0000000e superframe_reset_cb.part.0
0001d758 l     F .text	0000000e rx_timeout_cb.part.0
0001d766 l     F .text	00000032 reset_cb
0001d798 l     F .text	00000036 rx_timeout_cb
0001d7d0 l     F .text	00000040 superframe_reset_cb
0001d95c l     F .text	000000d0 rx_complete_cb
0001dae0 l     F .text	00000138 tx_final_cb
0001dc32 l     F .text	00000056 tx_complete_cb
20004c58 l     O .bss	000003c0 g_twr_frames
20000eec l     O .data	0000003c g_cbs
20000f28 l     O .data	00000010 g_config
00000000 l    df *ABS*	00000000 wcs_timescale.c
0001dcfc l     F .text	0000008c wcs_timescale_cb
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strrchr.c
00000000 l    df *ABS*	00000000 strsep.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 strpbrk.c
00000000 l    df *ABS*	00000000 bcast_ota.c
0001e180 l     F .text	0000001c cbor_encode_text_stringz.isra.0
20005030 l     O .bss	00000004 g_mbuf_pool
20005034 l     O .bss	00000004 off.0
00000000 l    df *ABS*	00000000 bcast_ota_cli.c
0001e4b4 l     F .text	00000004 nmgr_mstr_get_mtu
0001e4b8 l     F .text	000000ec txim_ev_cb
0001e5a4 l     F .text	00000078 nmgr_mstr_out
0001e694 l     F .text	00000130 bota_cli_cmd
20005038 l     O .bss	00000020 nmgr_mstr_transport
20005058 l     O .bss	00000040 tx_im_inst
20000f38 l     O .data	00000010 shell_bota_cmd
00000000 l    df *ABS*	00000000 bcast_ota_nmgr.c
0001e814 l     F .text	0000001c cbor_encode_text_stringz
0001e830 l     F .text	000003d0 bota_upload
0001ec00 l     F .text	00000054 bota_confirm
20005098 l     O .bss	00000004 _new_image_cb
20000f48 l     O .data	0000000c bota_nmgr_group
00024070 l     O .text	00000010 bota_nmgr_handlers
00000000 l    df *ABS*	00000000 config_init.c
200050b8 l     O .bss	0000006c conf_fcb_area
20000f54 l     O .data	00000038 config_init_conf_fcb
00000000 l    df *ABS*	00000000 config_fcb.c
0001ed68 l     F .text	00000024 conf_fcb_load
0001ed8c l     F .text	00000040 conf_fcb_load_cb
0001edcc l     F .text	000000f2 conf_fcb_compress_internal.part.0
0001efa2 l     F .text	00000006 conf_fcb_save
20000f8c l     O .data	00000010 conf_fcb_itf
00000000 l    df *ABS*	00000000 config_line.c
00000000 l    df *ABS*	00000000 modlog.c
20005124 l     O .bss	00000004 modlog_first_dflt
20005128 l     O .bss	000000c0 modlog_mapping_buf
20005204 l     O .bss	00000004 modlog_mappings
20005208 l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 crc8.c
00024094 l     O .text	00000010 crc8_small_table
00000000 l    df *ABS*	00000000 rwlock.c
0001f2fc l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 image_validate.c
00000000 l    df *ABS*	00000000 loader.c
0001f588 l     F .text	0000004c boot_read_image_headers
0001f5d4 l     F .text	00000068 boot_read_sectors
2000522c l     O .bss	00000068 boot_data
20005294 l     O .bss	00000004 tmpbuf.0
00000000 l    df *ABS*	00000000 sha256.c
000240a4 l     O .text	00000100 K
00000000 l    df *ABS*	00000000 os_heap.c
0001fac0 l     F .text	0000000e os_malloc_lock.part.0
0001fac0 l     F .text	0000000e os_malloc_unlock.part.0
0001fad0 l     F .text	00000024 os_malloc_lock
0001faf4 l     F .text	00000020 os_malloc_unlock
20005298 l     O .bss	0000000c os_malloc_mutex
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 sf_ceil.c
00000000 l    df *ABS*	00000000 w_asin.c
00000000 l    df *ABS*	00000000 w_fmod.c
00000000 l    df *ABS*	00000000 wf_log10.c
00000000 l    df *ABS*	00000000 e_asin.c
00000000 l    df *ABS*	00000000 e_fmod.c
000241a8 l     O .text	00000010 Zero
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 ef_log10.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 ef_log.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 nrng_slave_node3-sysdown-app.c
00000000 l    df *ABS*	00000000 nrng_slave_node3-sysflash.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 impure.c
20000fa8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
0001648a g     F .text	00000060 _cbor_value_decode_int64_internal
00016d74 g     F .text	000001ac SEGGER_RTT_WriteNoLock
0000bfdc g     F .text	0000016c panmaster_pkg_init
00015f44 g     F .text	00000010 cbor_mbuf_writer_init
000203f4 g     F .text	0000002c .hidden __aeabi_dcmpun
0000931c g     F .text	0000001a os_callout_remaining_ticks
0000a258 g     F .text	00000030 os_arch_start
00012898 g     F .text	0000001c flash_area_id_from_image_slot
0001128c g     F .text	00000004 dpl_cputime_delay_usecs
0001ef14 g     F .text	00000014 conf_fcb_dst
200052a8 g       .bss	00000000 __HeapBase
200033ec g     O .bss	00000008 g_os_task_list
00008fd8 g     F .text	0000007c os_idle_task
000203b8 g     F .text	00000012 .hidden __aeabi_dcmple
000183a0 g     F .text	000000b0 dw1000_stop_rx
0001e0ac g     F .text	00000010 strcpy
00019b5a g     F .text	00000044 dw1000_phy_config_lde
0001a1da g     F .text	00000038 dw1000_phy_event_cnt_ctrl
0001dfa8 g     F .text	0000001c wcs_timescale_free
00019a86 g     F .text	0000002c dw1000_phy_sysclk_PLL
00000000 g       .svc_table	00000000 SVC_Count
00018492 g     F .text	0000001c dw1000_adj_rx_timeout
00008164  w    F .text	00000002 TIMER2_IRQHandler
0000fc80 g     F .text	00000014 fmemopen_w
0000b86c g     F .text	00000038 uwb_pan_set_postprocess
000202f4 g     F .text	0000007a .hidden __cmpdf2
0001dff4 g     F .text	00000022 wcs_timescale_pkg_down
000112e8 g     F .text	00000048 mem_split_frag
00020bbc g     F .text	00000012 fabs
0000a4aa g     F .text	0000004c os_mbuf_copydata
200025f4 g     O .bss	00000008 g_os_mempool_list
000091cc g     F .text	0000001a os_callout_init
000091e8 g     F .text	0000003c os_callout_stop
00008164  w    F .text	00000002 RTC0_IRQHandler
000170e0 g     F .text	00000004 uwb_dw1000_set_autoack
0001540c g     F .text	000000b0 boot_read_swap_state
0001cc98 g     F .text	00000446 thornton_dbl
0000f488 g     F .text	00000050 add_malloc_block
000202f4 g     F .text	0000007a .hidden __eqdf2
0001858c g     F .text	00000058 dw1000_set_rx_window
000094ce g     F .text	00000066 os_eventq_put
000139f0 g     F .text	00000004 shell_evq_set
0000c67c g     F .text	0000000c panmaster_cli_register
00017ae4 g     F .text	00000054 hal_dw1000_reset
0001ca24 g     F .text	000000cc trisolve_dbl
20000530 g       .data	00000000 __data_start__
0000a668 g     F .text	0000004c os_mbuf_extend
0000e1f4 g     F .text	00000110 uwb_ccp_start
0001e112 g     F .text	0000001c strtok_r
00023990 g     O .text	00000018 nrf52k_flash_dev
0001fe64 g     F .text	0000005a .hidden __floatdidf
0000efa4 g     F .text	0000016c uwb_pan_slot_timer_cb
00016a04 g     F .text	00000036 fcb_append_finish
0000fbdc g     F .text	00000024 printf
0001074a g     F .text	00000046 imgmgr_state_confirm
00017e50 g     F .text	0000017c hal_dw1000_write_noblock
00022484 g     O .text	00000004 stdout
0001420c g     F .text	00000050 shell_ticks_cmd
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00008d98 g     F .text	00000018 hal_gpio_write
0001f804 g     F .text	0000013c mbedtls_internal_sha256_process
00016698 g     F .text	00000024 fcb_free_sector_cnt
0000a1d8 g     F .text	0000007c os_arch_os_init
00013104 g     F .text	00000034 log_reboot
00008156  w    F .text	00000002 HardFault_Handler
000151d0 g     F .text	000000a0 datetime_format
0000b4e6 g     F .text	00000148 nrng_encode
0001b36c g     F .text	00000058 hal_timer_init
00012e60 g     F .text	00000016 mfg_seek_next_with_type
00016028 g     F .text	0000001c cbor_encode_int
0000a288 g     F .text	00000050 os_arch_os_start
20004604 g     O .bss	00000001 g_console_ignore_non_nlip
20004606 g     O .bss	00000001 g_console_silence_non_nlip
0001a81e g     F .text	00000010 hal_flash_align
00012bbc g     F .text	00000012 log_read
000143fc g     F .text	00000024 stats_group_walk
0001dc88 g     F .text	0000004c uwb_rng_pkg_init
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
000153ee g     F .text	0000001c boot_magic_compatible_check
00012714 g     F .text	0000000c console_no_ticks
00008c10 g     F .text	000000b8 uwb_calc_aoa
0000d740 g     F .text	00000058 tdma_tx_slot_start
0000a8ee g     F .text	0000000c SysTick_Handler
0000f120 g     F .text	00000022 BitPosition
00008164  w    F .text	00000002 GPIOTE_IRQHandler
00009e28 g     F .text	00000044 os_task_remove
0001b2c4 g     F .text	000000a8 nrf52_timer0_irq_handler
00015e2e g     F .text	00000008 cbor_read_object
0001a6ac g     F .text	0000000c dw1000_cli_register
00015f24 g     F .text	0000001e cbor_mbuf_writer
000096ec g     F .text	00000032 os_memblock_put
0001caf0 g     F .text	000001a4 ud_dbl
00008164  w    F .text	00000002 PWM1_IRQHandler
00011b3c g     F .text	0000000c conf_dst_register
000097d8 g     F .text	00000030 os_msys_get_pkthdr
20004630 g     O .bss	00000004 flash_map
0000bc40 g     F .text	00000010 panmaster_load
00014a74 g     F .text	00000218 uwbcfg_commit_to_inst_dw1000
0001a9a0 g     F .text	0000002e hal_flash_is_erased
0000a8a8 g     F .text	00000046 PendSV_Handler
0000fc3c g     F .text	0000001a snprintf
00008154  w    F .text	00000002 NMI_Handler
000241d0 g       .ARM.exidx	00000000 __exidx_end
0001f758 g     F .text	00000008 mbedtls_sha256_init
00008020 g       .text	00000000 __isr_vector_start
00018890 g     F .text	00000028 dw1000_set_autoack_delay
00012a38 g     F .text	00000048 log_init
0000fc56 g     F .text	00000028 memfile_write
0000a154 g     F .text	00000014 os_arch_ctx_sw
000126ec g     F .text	00000004 rtt_console_is_init
00016044 g     F .text	00000022 cbor_encode_simple_value
00009192 g     F .text	0000000a os_system_reset
00017ad4 g     F .text	00000010 hal_dw1000_inst
000081b0 g     F .text	0000002c hal_system_reset
000175fc g     F .text	00000078 dw1000_dev_enter_sleep
00009078 g     F .text	00000058 os_init_idle_task
20000568 g       .data	00000000 __aeabi_unwind_cpp_pr0
000202e4 g     F .text	0000008a .hidden __gtdf2
00009a0c g     F .text	0000000c os_sched_set_current_task
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0002194c g     F .text	0000000c __errno
000241d0 g       .ARM.exidx	00000000 __etext
0000a10c g     F .text	00000028 os_get_uptime_usec
0000f240 g     F .text	00000078 uwb_wcs_prediction
00012598 g     F .text	0000003c console_vprintf
0000c904 g     F .text	00000004 panm_fcb_clear
00008164  w    F .text	00000002 RADIO_IRQHandler
0001280c g     F .text	00000024 flash_area_write
0000b010 g     F .text	00000028 usecs_to_response
0000ac70 g     F .text	00000070 uwb_nmgr_process_tx_queue
0002083c g     F .text	0000002e .hidden __aeabi_d2lz
0000a6c8 g     F .text	000000a4 os_mutex_release
00014444 g     F .text	00000030 stats_register
0002125c g     F .text	0000027c __ieee754_fmod
20003d00 g     O .bss	00000004 nmgr_evq
000098dc g     F .text	00000020 os_sanity_check_register
200013d0 g       .bssnz	00000000 __bssnz_start__
20003d94 g     O .bss	00000004 conf_load_srcs
00019bd0 g     F .text	000001be dw1000_phy_init
000166fa g     F .text	00000020 fcb_get_len
00009fa0 g     F .text	00000028 os_time_delay
0001550c g     F .text	00000094 boot_swap_type
2000076c g     O .data	000000a0 g_uwb_config
0000a5ec g     F .text	0000007c os_mbuf_copyinto
00008164  w    F .text	00000002 PDM_IRQHandler
00020380 g     F .text	00000010 .hidden __aeabi_cdcmple
00019d8e g     F .text	00000068 dw1000_phy_rx_reset
00012e76 g     F .text	00000006 mfg_read_tlv_flash_area
0001272c g     F .text	0000000c console_get_ticks
00018480 g     F .text	00000012 dw1000_set_rxauto_disable
000106c2 g     F .text	00000014 imgmgr_state_slot_in_use
0002055c g     F .text	00000160 .hidden __aeabi_fadd
00015270 g     F .text	00000028 crc16_ccitt
0001dd88 g     F .text	00000198 wcs_timescale_ev
000164ea g     F .text	00000022 cbor_parser_init
00020558 g     F .text	00000164 .hidden __subsf3
00019024 g     F .text	0000005c dw1000_calc_rssi
0000c7e4 g     F .text	0000000c panm_fcb_load_idx
000126e0 g     F .text	0000000c console_rx_restart
00009754 g     F .text	00000010 os_mempool_module_init
00008164  w    F .text	00000002 TEMP_IRQHandler
0000a17a g     F .text	0000000a os_arch_in_critical
000235e2 g     O .text	0000003c g_stats_map_mac_stat_section
00008164  w    F .text	00000002 QDEC_IRQHandler
0001a0cc g     F .text	00000048 dw1000_phy_data_duration
2000080c g     O .data	00000050 g_uwbcfg_str
00016f20 g     F .text	00000110 SEGGER_RTT_GetKey
0000edac g     F .text	00000120 uwb_pan_blink
00008164  w    F .text	00000002 TIMER3_IRQHandler
0001d934 g     F .text	00000028 uwb_rng_clear_twr_data
0000b410 g     F .text	000000d6 nrng_get_uids
0000a14e g     F .text	00000006 timer_handler
0000b038 g     F .text	000001a8 nrng_request
0000945c g     F .text	00000024 os_dev_lookup
00009a3c g     F .text	00000074 os_sched_sleep
00017314 g     F .text	000000a4 dw1000_read_reg
000171d8 g     F .text	00000098 dw1000_read
0001250c g     F .text	0000000c console_set_completion_cb
0000f5e4 g     F .text	0000001a memcpy
00020370 g     F .text	00000020 .hidden __aeabi_cdrcmple
00023bf9 g     O .text	0000001e g_stats_map_twr_ss_nrng_stat_section
00013e74 g     F .text	000000c0 shell_nlip_process
00015784 g     F .text	0000000c split_conf_init
00011790 g     F .text	00000030 conf_parse_name
00008b3c g     F .text	00000078 uwb_task_init
0000c7f0 g     F .text	00000010 panm_fcb_find_node
0001b5ec g     F .text	00000070 hal_watchdog_init
0001fdec g     F .text	00000022 .hidden __floatsidf
0000c800 g     F .text	000000b6 panm_fcb_compress
00011b48 g     F .text	00000054 conf_load
0001b9dc g     F .text	00000038 json_encode_array_value
0000f2b8 g     F .text	00000068 uwb_wcs_local_to_master64
000202ec g     F .text	00000082 .hidden __ltdf2
0001ba5c g     F .text	00000028 json_readn
00009336 g     F .text	00000008 os_cputime_init
20003d84 g     O .bss	00000004 conf_handlers
0001ba14 g     F .text	0000001c json_encode_array_finish
0001b4d4 g     F .text	00000024 hal_timer_set_cb
0000b9c4 g     F .text	0000002c panmaster_clear_list
0002080c g     F .text	00000000 .hidden __aeabi_uldivmod
00015668 g     F .text	00000024 split_app_init
0001a9ce g     F .text	00000050 hal_flash_isempty
0001dc18 g     F .text	0000001a rng_issue_complete
0000f3ec g     F .text	00000034 puts
00000020 g       *ABS*	00000000 _imghdr_size
000099d4 g     F .text	0000002c os_sched_ctx_sw_hook
0002174c g     F .text	00000200 __ieee754_logf
00016aec g     F .text	00000050 fcb_elem_info
200045e8 g     O .bss	00000004 console_is_midline
000139f4 g     F .text	00000130 shell_exec
0000a3c6 g     F .text	00000014 os_mbuf_free
2000053c g     O .data	00000004 SystemCoreClock
00011290 g     F .text	00000026 dpl_cputime_timer_relative
00018450 g     F .text	0000001e dw1000_set_wait4resp
000081a4 g     F .text	0000000c hal_system_init
00016066 g     F .text	00000024 cbor_encode_byte_string
00019df8 g     F .text	000000f8 dw1000_phy_forcetrxoff
0000cc30 g     F .text	00000160 survey_init
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0000a184 g     F .text	00000040 os_arch_task_stack_init
00018e2e g     F .text	00000034 dw1000_calc_clock_offset_ratio_ttco
000173b8 g     F .text	000000b6 dw1000_write_reg
0000f4d8 g     F .text	00000098 malloc
000127e8 g     F .text	00000024 flash_area_read
000206c4 g     F .text	0000001c .hidden __aeabi_i2f
00019b38 g     F .text	00000022 dw1000_phy_disable_sequencing
00008ef4 g     F .text	0000004c __assert_func
0001ad48 g     F .text	00000074 nrf52_spi0_irq_handler
0000ff48 g     F .text	00000014 imgr_my_version
0000ec84 g     F .text	00000028 uwb_pan_set_frames
0001063c g     F .text	00000086 imgmgr_state_flags
00009bc0 g     F .text	00000034 os_sched_wakeup_ticks
00014530 g     F .text	00000020 stats_shell_register
00012518 g     F .text	00000080 console_pkg_init
000103d0 g     F .text	00000050 imgmgr_module_init
0000815c  w    F .text	00000002 UsageFault_Handler
00018332 g     F .text	0000006e dw1000_set_delay_start
0000fc00 g     F .text	0000003c vsnprintf
0000f68c g     F .text	00000008 strtoll
20004bac g     O .bss	00000018 _uwbcfg_log
00020470 g     F .text	00000040 .hidden __fixunsdfsi
200025d4 g     O .bss	00000008 g_callout_list
0001fb14 g     F .text	0000001c os_malloc
0000e184 g     F .text	0000006e uwb_ccp_free
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
0000f89c g     F .text	0000033c tfp_format
2000fe50 g       *ABS*	00000000 __HeapLimit
200013d0 g       .bss	00000000 __bss_start__
0000d648 g     F .text	0000002e tdma_release_slot
000081dc g     F .text	00000010 hal_debugger_connected
0001fdcc g     F .text	0000001e .hidden __aeabi_ui2d
0001a884 g     F .text	00000064 hal_flash_write
000115ae g     F .text	0000004e dpl_mbuf_appendfrom
00010604 g     F .text	0000000c imgr_cli_register
00010610 g     F .text	00000004 imgmgr_log_upload_start
00008164  w    F .text	00000002 TIMER4_IRQHandler
00017a9c g     F .text	00000036 hal_dw1000_spi_txrx_cb
000208e8 g     F .text	000002d0 .hidden __udivmoddi4
00009916 g     F .text	00000012 os_sanity_task_checkin
0001fb48 g     F .text	00000000 .hidden __aeabi_drsub
0001126c g     F .text	00000004 dpl_cputime_timer_stop
0000d6a6 g     F .text	00000034 tdma_free
00010d28 g     F .text	00000050 nmgr_pkg_init
0000c8b6 g     F .text	0000004e panm_fcb_save
000165c8 g     F .text	00000030 _cbor_value_copy_string
0001a6bc g     F .text	000000ca dw1000_gpio_config_leds
0000ebfc g     F .text	00000088 uwb_pan_init
00008bb4 g     F .text	0000001a uwb_task_deinit
200033e4 g     O .bss	00000004 g_current_task
00009928 g     F .text	00000050 os_sanity_run
000152ba g     F .text	00000054 parse_ll_bounds
000160d6 g     F .text	00000028 cbor_encoder_close_container
0000a168 g     F .text	0000000c os_arch_save_sr
20004b81 g     O .bss	00000001 sysdown_active
000203a4 g     F .text	00000012 .hidden __aeabi_dcmplt
000154dc g     F .text	0000001c boot_write_magic
0000968c g     F .text	00000012 os_mempool_init
0001ec9c g     F .text	000000c8 config_pkg_init
00009fc8 g     F .text	0000003c os_gettimeofday
200033f4 g     O .bss	00000001 g_task_id
20005018 g     O .bss	00000018 g_bcast_ota_log
000117c0 g     F .text	00000018 conf_parse_and_lookup
00014f64 g     F .text	00000108 timeval_to_clocktime
00014940 g     F .text	00000010 uwbcfg_register
20000750 g     O .data	00000008 g_stats_registry
0001fe10 g     F .text	00000042 .hidden __extendsfdf2
0001176c g     F .text	00000024 conf_handler_lookup
00019080 g     F .text	0000001c dw1000_get_rssi
00020114 g     F .text	000001d0 .hidden __aeabi_ddiv
0001fb54 g     F .text	00000276 .hidden __adddf3
00008a48 g     F .text	00000054 uwb_dev_idx_lookup
0000bc50 g     F .text	00000030 panmaster_save_node
000241b8 g       .text	00000000 __exidx_start
0000fc94 g     F .text	00000130 strntoumax
0001fec0 g     F .text	00000254 .hidden __aeabi_dmul
00022330 g     O .text	00000078 g_stats_map_uwb_ccp_stat_section
00009978 g     F .text	00000010 os_sanity_init
20000f9c g     O .data	00000001 __fdlib_version
20003cb0 g     O .bss	00000004 imgmgr_dfu_callbacks_fn
0000c990 g     F .text	00000048 uwb_rng_tof_to_meters
00010790 g     F .text	000001a4 imgmgr_state_read
0000a3ee g     F .text	000000a0 os_mbuf_append
00012e7c g     F .text	00000006 mfg_read_tlv_mmr_ref
000126f0 g     F .text	00000024 rtt_console_init
0000a848 g     F .text	00000014 os_set_env
000113f8 g     F .text	00000036 dpl_memblock_put_from_cb
000178e4 g     F .text	00000044 dw1000_dev_enter_sleep_after_tx
000190f4 g     F .text	0000000e dw1000_read_systime_lo
0001909c g     F .text	00000048 dw1000_estimate_los
00016d14 g     F .text	00000010 hal_bsp_flash_dev
0001893c g     F .text	0000008a dw1000_set_dblrxbuff
0001d6e4 g     F .text	00000074 twr_ss_nrng_pkg_init
0000ecac g     F .text	00000094 uwb_pan_pkg_init
0001b680 g     F .text	00000038 nrf52_periph_create
0001be9c g     F .text	000000f4 timescale_init
00019ab2 g     F .text	0000002c dw1000_phy_txclk_PLL
00018f60 g     F .text	0000001c dw1000_ic_and_host_ptrs_equal
00022488 g     O .text	00000008 MemFile_methods
00019ef0 g     F .text	0000006a dw1000_phy_interrupt_mask
200033d8 g     O .bss	0000000c g_os_sanity_check_mu
00012858 g     F .text	00000006 flash_area_align
0000bda0 g     F .text	0000002e postprocess_cb
0001fdcc g     F .text	0000001e .hidden __floatunsidf
0001061c g     F .text	00000004 imgmgr_log_confirm
000124d8 g     F .text	0000000c console_line_queue_set
0001fb30 g     F .text	00000018 os_free
00008178 g     F .text	0000002c _sbrk
0001585c g     F .text	00000022 base64_pad
0000ef54 g     F .text	0000002c uwb_pan_start
0000b220 g     F .text	00000066 nrng_listen
00016688 g     F .text	00000010 cbor_value_calculate_string_length
00018d24 g     F .text	00000020 dw1000_read_carrier_integrator
0001ac70 g     F .text	00000044 os_tick_idle
000125d4 g     F .text	0000001a console_printf
00010cf8 g     F .text	00000010 nmgr_transport_init
000103bc g     F .text	00000014 imgmgr_dfu_confirmed
0001401c g     F .text	00000012 shell_os_reset_cmd
00017270 g     F .text	000000a4 dw1000_write
00018f7c g     F .text	0000008c dw1000_calc_fppl
0000d1ac g     F .text	00000122 survey_encode
0000aaa0 g     F .text	00000018 nmgr_uwb_mtu
00012070 g     F .text	00000002 console_blocking_mode
00011b9c g     F .text	00000014 conf_ensure_loaded
000188b8 g     F .text	00000084 dw1000_set_wait4resp_delay
0001650c g     F .text	0000008c cbor_value_enter_container
00008164  w    F .text	00000002 I2S_IRQHandler
0000c908 g     F .text	00000088 panm_fcb_sort
00008490 g     F .text	00000002 _init
0001a8e8 g     F .text	000000b8 hal_flash_erase
000156b4 g     F .text	0000000c split_mode_get
0001e12e g     F .text	0000000c strtol
0001415c g     F .text	0000007c shell_os_date_cmd
0000d798 g     F .text	0000002c tdma_pkg_init
0000b678 g     F .text	00000190 nrng_json_write
00021670 g     F .text	000000c0 __ieee754_log10f
00016b3c g     F .text	00000042 fcb_getnext_in_area
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
000204b0 g     F .text	0000009e .hidden __aeabi_d2f
000220d8 g     O .text	00000050 cmd_pm_param
0001acb4 g     F .text	00000094 os_tick_init
000208ac g     F .text	0000003c .hidden __aeabi_d2ulz
00019f5c g     F .text	00000148 dw1000_phy_repeated_frames
00020558 g     F .text	00000164 .hidden __aeabi_fsub
0001689a g     F .text	0000001c fcb_clear
000185e4 g     F .text	00000020 dw1000_set_abs_timeout
200006f0 g     O .data	00000008 g_dpl_mempool_list
00016a3a g     F .text	000000b2 fcb_elem_crc8
00012c7c g     F .text	00000008 log_console_get
00008164  w    F .text	00000002 TIMER0_IRQHandler
0001e3e4 g     F .text	0000007c bcast_ota_get_reset_mbuf
000090d0 g     F .text	000000a4 os_init
00010614 g     F .text	00000004 imgmgr_log_upload_done
000080f8 g     F .text	0000005c Reset_Handler
0001c984 g     F .text	000000a0 srkf_dbl_free
0001e0dc g     F .text	0000001a strrchr
000166d4 g     F .text	00000026 fcb_put_len
0001568c g     F .text	00000026 split_check_status
0001a2d8 g     F .text	00000110 dw1000_cli_dump_registers
0001f14c g     F .text	000000a4 modlog_append
00011c84 g     F .text	0000000c console_echo
00020420 g     F .text	0000004e .hidden __fixdfsi
0000f39c g     F .text	00000030 calloc
0001e61c g     F .text	00000078 check_image_fid
00009720 g     F .text	00000034 os_mempool_info_get_next
20004ba8 g     O .bss	00000001 sysinit_active
00017030 g     F .text	00000064 SEGGER_RTT_Init
20004605 g     O .bss	00000001 g_console_silence
000156c0 g     F .text	0000000c split_app_active_get
000206f0 g     F .text	0000007c .hidden __floatdisf
000160ae g     F .text	00000006 cbor_encoder_create_array
00008dd2 g     F .text	00000018 hal_gpio_toggle
0000a8fa g     F .text	0000001e os_default_irq_asm
200050a0 g     O .bss	00000018 bota_state
20004c2c g     O .bss	00000028 g_twr_ss_nrng_stat
00023954 g     O .text	0000000c cmd_dw1000_help
00009bf4 g     F .text	0000000c os_sched_next_task
00009988 g     F .text	0000004c os_sched_insert
00009224 g     F .text	00000074 os_callout_reset
00012e84 g     F .text	00000078 mfg_init
0000bf24 g     F .text	00000090 panmaster_delete_node
00009480 g     F .text	00000010 os_dev_reset
00013cb4 g     F .text	00000074 shell_init
0001fb54 g     F .text	00000276 .hidden __aeabi_dadd
000202ec g     F .text	00000082 .hidden __ledf2
00010a08 g     F .text	00000014 mgmt_group_list_unlock
00015934 g     F .text	00000048 hex_format
0000a6b4 g     F .text	00000014 os_mutex_init
00008168 g     F .text	00000010 _sbrkInit
0002086c g     F .text	00000040 .hidden __aeabi_f2ulz
00009534 g     F .text	00000018 os_eventq_get_no_wait
0001fe54 g     F .text	0000006a .hidden __aeabi_ul2d
0000f370 g     F .text	0000002c uwb_wcs_pkg_down
200013d0 g       .bssnz	00000000 __bssnz_end__
000128b4 g     F .text	000000b0 flash_map_init
00023edc g     O .text	00000020 cmd_bota_param
0001e13c g     F .text	00000010 vprintf
000220cc g     O .text	0000000c cmd_pm_help
0000906c g     F .text	0000000c os_started
00008164  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
20000734 g     O .data	00000018 reboot_conf_handler
00011744 g     F .text	0000000c conf_unlock
00009b84 g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0000cf36 g     F .text	00000118 survey_broadcaster
0001a114 g     F .text	0000001c dw1000_phy_frame_duration
00014420 g     F .text	00000024 stats_group_find
00022818 g     O .text	00000028 log_console_handler
0001f41e g     F .text	00000020 rwlock_release_write
00010d08 g     F .text	00000020 nmgr_rx_req
20003454 g     O .bss	00000010 nrng_event
00008d48 g     F .text	0000002a hal_gpio_init_in
0000f218 g     F .text	00000026 uwb_wcs_dtu_time_adjust
0001a6b8 g     F .text	00000004 dw1000_cli_down
00013f34 g     F .text	00000014 shell_nlip_init
0001666a g     F .text	0000001e cbor_value_advance
00022232 g     O .text	00000018 g_stats_map_tdma_stat_section
00008164  w    F .text	00000002 PWM2_IRQHandler
0001ba30 g     F .text	0000001a json_read_next
00020d4c g     F .text	0000006c log10f
000109c0 g     F .text	00000030 imgr_ver_str
200013d0 g       .data	00000000 __data_end__
00012b0c g     F .text	000000b0 log_register
0001f9ba g     F .text	00000106 mbedtls_sha256_finish_ret
00008b30 g     F .text	0000000c uwb_mac_find_cb_inst_ptr
000149a0 g     F .text	00000004 uwbcfg_pkg_down
00016b7e g     F .text	00000018 fcb_getnext_area
00010618 g     F .text	00000004 imgmgr_log_pending
0001f39c g     F .text	00000026 rwlock_release_read
00019008 g     F .text	0000001c dw1000_get_fppl
00008164  w    F .text	00000002 ECB_IRQHandler
0001425c g     F .text	00000010 shell_prompt_register
0000ed40 g     F .text	0000006c uwb_pan_listen
00020db8 g     F .text	000004a4 __ieee754_asin
000114ca g     F .text	00000014 dpl_mbuf_free
00012720 g     F .text	0000000c console_yes_ticks
000203e0 g     F .text	00000012 .hidden __aeabi_dcmpgt
00020cd4 g     F .text	00000078 fmod
00011694 g     F .text	00000052 dpl_mbuf_trim_front
20003428 g     O .bss	00000004 g_os_time
0001af74 g     F .text	000000e0 hal_spi_init
00010cec g     F .text	0000000c mgmt_evq_get
0001b66c g     F .text	00000014 hal_watchdog_tickle
200052a4 g       .bss	00000000 __bss_end__
00009490 g     F .text	00000020 os_dev_walk
0001792c g     F .text	00000044 dw1000_dev_enter_sleep_after_rx
0000a370 g     F .text	0000002a os_mbuf_get
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00023ed0 g     O .text	0000000c cmd_bota_help
0000aef4 g     F .text	000000e0 nrng_init
000203cc g     F .text	00000012 .hidden __aeabi_dcmpge
0001d880 g     F .text	000000b4 uwb_rng_init
0001a264 g     F .text	00000024 dw1000_pkg_init
0001671a g     F .text	00000032 fcb_sector_hdr_init
0000fe60 g     F .text	000000e8 imgr_read_info
00014a38 g     F .text	0000003c remap_framefilter
0000dfd8 g     F .text	000001ac uwb_ccp_init
000166bc g     F .text	00000018 fcb_is_empty
0000afd4 g     F .text	00000038 nrng_pkg_init
0001fb50 g     F .text	0000027a .hidden __aeabi_dsub
000097c8 g     F .text	00000010 os_msys_reset
00008164 g     F .text	00000002 Default_Handler
0000847c g     F .text	00000014 _start
00017fcc g     F .text	00000032 hal_dw1000_rw_noblock_wait
0000c9d8 g     F .text	00000060 calc_tof_ss
00014030 g     F .text	00000038 shell_os_ls_dev_cmd
0001fe54 g     F .text	0000006a .hidden __floatundidf
00008bce g     F .text	0000003c uwb_dev_init
0000f1f8 g     F .text	00000020 uwb_wcs_set_postprocess
20004b80 g     O .bss	00000001 stats_shell_registered
20004b68 g     O .bss	00000018 g_stats_stats
000157c4 g     F .text	00000098 base64_encode
0000a004 g     F .text	00000018 os_time_is_set
0000a85c g     F .text	00000006 os_arch_init_task_stack
000095c2 g     F .text	0000001a os_eventq_run
000206c4 g     F .text	0000001c .hidden __floatsisf
00011734 g     F .text	00000010 conf_lock
00009e6c g     F .text	00000068 os_task_info_get_next
0000eecc g     F .text	00000088 uwb_pan_reset
00023340 g     O .text	00000010 boot_img_magic
000098fc g     F .text	0000001a os_sanity_check_reset
00015790 g     F .text	00000034 split_write_split
00011c90 g     F .text	00000030 console_lock
0001e0bc g     F .text	00000020 strncmp
000142b0 g     F .text	00000094 stats_walk
20003d9c g     O .bss	00000004 conf_save_dst
0001a0a4 g     F .text	00000028 dw1000_phy_SHR_duration
00008ebc g     F .text	00000038 hal_gpio_irq_release
20001428 g     O .bss	00000050 g_idle_task
00008d72 g     F .text	00000026 hal_gpio_init_out
0000b33c g     F .text	000000d4 nrng_get_ranges
00008db0 g     F .text	00000022 hal_gpio_read
20000768 g     O .data	00000004 sysinit_panic_cb
0001b4f8 g     F .text	00000072 hal_timer_start_at
0001777c g     F .text	00000164 dw1000_dev_config
00010040 g     F .text	00000014 imgmgr_dfu_stopped
0000ca38 g     F .text	00000070 calc_tof_ds
200033d4 g     O .bss	00000004 g_os_sanity_check_list
000187fc g     F .text	00000094 dw1000_set_autoack
0000ce72 g     F .text	0000004e survey_listen
0001ba4a g     F .text	00000012 json_read_prev
0000f66e g     F .text	0000001e strncpy
00018e62 g     F .text	0000003a dw1000_read_rxdiag
00019112 g     F .text	0000000e dw1000_read_rxtime_lo
0000bfc0 g     F .text	0000001c panmaster_sort
0000969e g     F .text	00000030 os_memblock_get
00009b1c g     F .text	00000068 os_sched_wakeup
0000a312 g     F .text	00000020 os_mqueue_get
00009c24 g     F .text	00000010 os_sem_init
00013f68 g     F .text	000000b4 shell_os_mpool_display_cmd
0001a130 g     F .text	000000aa dw1000_phy_txrf_power_value
00017ffe g     F .text	00000080 hal_dw1000_wakeup
0001e016 g     F .text	0000005e realloc
000141d8 g     F .text	00000034 shell_os_register
000112b6 g     F .text	00000032 mem_init_mbuf_pool
0001bf90 g     F .text	00000038 timescale_free
00008f40 g     F .text	00000098 os_default_irq
00017678 g     F .text	00000104 dw1000_dev_wakeup
0001285e g     F .text	0000000a flash_area_erased_val
0001fdec g     F .text	00000022 .hidden __aeabi_i2d
000114de g     F .text	00000014 dpl_mbuf_free_chain
200033e8 g     O .bss	00000004 g_os_last_ctx_sw_time
00009c34 g     F .text	00000064 os_sem_release
20003c68 g     O .bss	00000048 g_stat
0000f59c g     F .text	00000048 memcmp
0000a1c4 g     F .text	00000014 os_arch_init
0000ab08 g     F .text	0000005c nmgr_uwb_pkg_init
00017974 g     F .text	000000dc dw1000_dev_init
000206e0 g     F .text	0000008c .hidden __floatundisf
0000ef80 g     F .text	00000022 uwb_pan_lease_remaining
0001674c g     F .text	00000048 fcb_sector_hdr_read
0001efa8 g     F .text	00000090 conf_line_parse
00020bb8  w    F .text	00000002 .hidden __aeabi_ldiv0
00011496 g     F .text	0000000a dpl_mbuf_pool_init
0001dcd8 g     F .text	00000024 uwb_rng_pkg_down
0001f2cc g     F .text	00000030 crc8_calc
00011960 g     F .text	0000004c conf_commit
0000e304 g     F .text	00000044 uwb_ccp_stop
000145fc g     F .text	0000000c sysinit_start
00020114 g     F .text	000001d0 .hidden __divdf3
0001b3c4 g     F .text	000000d8 hal_timer_config
0001831c g     F .text	00000016 dw1000_tx_wait
0000f198 g     F .text	00000034 uwb_wcs_init
0000d0d8 g     F .text	000000b0 survey_slot_broadcast_cb
0000d7c4 g     F .text	00000034 tdma_pkg_down
000156cc g     F .text	00000014 split_mode_set
00016794 g     F .text	00000106 fcb_init
000206bc g     F .text	00000024 .hidden __aeabi_ui2f
0000d5c4 g     F .text	00000084 tdma_assign_slot
0001fec0 g     F .text	00000254 .hidden __muldf3
000124d4 g     F .text	00000004 console_is_init
00011c18 g     F .text	00000058 conf_save
0001da30 g     F .text	000000b0 uwb_rng_twr_to_tof
0000d46c g     F .text	00000158 tdma_init
00009c98 g     F .text	000000ac os_sem_pend
00011238 g     F .text	0000000c nmgr_os_groups_register
0001b65c g     F .text	00000010 hal_watchdog_enable
0000bbb8 g     F .text	00000088 panrequest_cb
0001f43e g     F .text	0000002c rwlock_init
00021d93 g     O .text	00000042 g_stats_map_nrng_stat_section
0000f338 g     F .text	00000038 uwb_wcs_pkg_init
0001f336 g     F .text	00000066 rwlock_acquire_read
00009368 g     F .text	00000026 os_cputime_timer_relative
00018190 g     F .text	0000008c dw1000_write_tx_fctrl
0000bc80 g     F .text	00000082 panmaster_update_node
0000a332 g     F .text	0000003e os_mqueue_put
00009788 g     F .text	00000040 os_msys_register
20001578 g     O .bss	00000004 g_os_idle_ctr
000184e2 g     F .text	000000aa dw1000_set_rx_timeout
00012738 g     F .text	0000003c flash_area_open
0000a58e g     F .text	0000005e os_mbuf_cmpf
20000540 g     O .data	00000008 uwb_cb
00008164  w    F .text	00000002 SAADC_IRQHandler
0000f110 g     F .text	00000010 NumberOfBits
0001597c g     F .text	0000005e hex_parse
0001c484 g     F .text	00000500 srkf_dbl_init
00008b10 g     F .text	00000020 uwb_mac_get_interface
0000f5fe g     F .text	00000036 memset
0000cd90 g     F .text	000000e2 survey_request
00008020 g       .text	000000d8 __isr_vector
00008740 g     F .text	000002d0 main
0001b054 g     F .text	00000028 hal_spi_set_txrx_cb
00016c04 g     F .text	00000034 fcb_getnext
20004bd0 g     O .bss	00000008 g_spi0_sem
000126a8 g     F .text	00000038 console_out_nolock
00016018 g     F .text	00000010 cbor_encode_uint
000206f0 g     F .text	0000007c .hidden __aeabi_l2f
00008598 g     F .text	00000050 uwb_config_updated_cb
000113b0 g     F .text	00000048 dpl_memblock_get
0001b9bc g     F .text	00000020 json_encode_array_start
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 WDT_IRQHandler
0001f094 g     F .text	000000b8 modlog_register
0000ae0c g     F .text	0000007a nrng_set_frames
00016c38 g     F .text	00000074 fcb_rotate
00014608 g     F .text	0000000c sysinit_end
0001f22c g     F .text	0000009c modlog_init
0000a862 g     F .text	00000046 SVC_Handler
0000aabe g     F .text	00000048 nmgr_uwb_init
000094c4 g     F .text	0000000a os_eventq_inited
000204b0 g     F .text	0000009e .hidden __truncdfsf2
000232d8 g     O .text	00000020 sysdown_cbs
00014e34 g     F .text	00000130 clocktime_to_timeval
00010a1c g     F .text	00000024 mgmt_group_register
00011466 g     F .text	0000001a streamer_printf
00011330 g     F .text	00000080 dpl_mempool_init
0001fe64 g     F .text	0000005a .hidden __aeabi_l2d
0001a83e g     F .text	00000046 hal_flash_read
00011cc0 g     F .text	00000034 console_unlock
0000961c g     F .text	00000008 os_eventq_dflt_get
0001b49c g     F .text	00000038 hal_timer_read
0000ace0 g     F .text	00000054 uwb_nmgr_queue_tx
0001d85c g     F .text	00000024 uwb_rng_config
0000954c g     F .text	00000076 os_eventq_get
00012830 g     F .text	00000028 flash_area_erase
20004be8 g     O .bss	00000028 nrf52_hal_spi0
0000b808 g     F .text	00000054 lease_expiry_cb
00019940 g     F .text	0000011c dw1000_configcwmode
000170e8 g     F .text	00000004 uwb_dw1000_event_cnt_ctrl
0000a134 g     F .text	0000001a os_time_ms_to_ticks
00012b06 g     F .text	00000006 log_walk
000092ec g     F .text	00000030 os_callout_wakeup_ticks
000206e0 g     F .text	0000008c .hidden __aeabi_ul2f
0002086c g     F .text	00000040 .hidden __fixunssfdi
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
00018e10 g     F .text	0000001e dw1000_read_time_tracking_offset
0001821c g     F .text	00000100 dw1000_start_tx
00011460 g     F .text	00000006 streamer_vprintf
20004634 g     O .bss	00000004 flash_map_entries
0000a4f6 g     F .text	00000098 os_mbuf_adj
20004786 g     O .bss	00000002 reboot_cnt
00011750 g     F .text	0000001c conf_register
0000918e g     F .text	00000004 os_reboot
00008020 g       .imghdr	00000000 __text
0001f2c8 g     F .text	00000004 crc8_init
0001ef28 g     F .text	0000007a conf_fcb_kv_save
0000e7d0 g     F .text	0000002c uwb_ccp_pkg_init
00012dec g     F .text	00000074 mfg_seek_next
0000aece g     F .text	00000024 nrng_config
0000f648 g     F .text	00000016 strcmp
00012888 g     F .text	00000010 flash_area_read_is_empty
00009a00 g     F .text	0000000c os_sched_get_current_task
000160b4 g     F .text	00000022 cbor_encoder_create_map
00011ff4 g     F .text	0000007c console_write
0000d6da g     F .text	00000064 tdma_rx_slot_start
00008288 g     F .text	000001f4 SystemInit
00009362 g     F .text	00000006 os_cputime_get32
0001eec0 g     F .text	00000054 conf_fcb_src
00008164  w    F .text	00000002 RNG_IRQHandler
0001877c g     F .text	00000080 dw1000_mac_framefilter
000208ac g     F .text	0000003c .hidden __fixunsdfdi
000202f4 g     F .text	0000007a .hidden __nedf2
0001b9b8 g     F .text	00000004 json_encode_array_name
000095dc g     F .text	00000040 os_eventq_remove
00017dc4 g     F .text	0000008a hal_dw1000_write
00018104 g     F .text	0000008c dw1000_write_tx
00011bb0 g     F .text	00000064 conf_save_one
00009820 g     F .text	00000018 os_msys_num_free
000117d8 g     F .text	000000b8 conf_value_from_str
000170e4 g     F .text	00000004 uwb_dw1000_set_autoack_delay
0000bd04 g     F .text	0000009c panmaster_postprocess
0001e074 g     F .text	0000001e sprintf
0002083c g     F .text	0000002e .hidden __fixdfdi
00009a18 g     F .text	00000024 os_sched
0001a82e g     F .text	00000010 hal_flash_erased_val
0000b85c g     F .text	00000010 uwb_pan_set_request_cb
0001f46a g     F .text	0000011c bootutil_img_validate
0001a786 g     F .text	00000058 _dw1000_otp_read
0000a76c g     F .text	000000dc os_mutex_pend
000170a2 g     F .text	0000003e uwb_dw1000_mac_framefilter
00000000 g       .svc_table	00000000 SVC_Table
00020c5c g     F .text	00000078 asin
000106d6 g     F .text	00000074 imgmgr_state_set_pending
00008164  w    F .text	00000002 RTC2_IRQHandler
00023c84 g     O .text	00000048 g_stats_map_rng_stat_section
00020550 g     F .text	0000016c .hidden __aeabi_frsub
00019120 g     F .text	00000010 dw1000_read_txtime
0002216d g     O .text	00000036 g_stats_map_survey_stat_section
0001b6b8 g     F .text	0000003c json_encode_object_start
20010000 g       .bss	00000000 __StackTop
0001608a g     F .text	00000024 cbor_encode_text_string
00021740 g     F .text	0000000c nanf
00015ac4 g     F .text	00000104 cbor_read_array
20000fa0 g     O .data	00000004 _impure_ptr
0001ed64 g     F .text	00000002 config_pkg_init_stage2
0000a2f2 g     F .text	00000020 os_mqueue_init
0000a01c g     F .text	000000b0 os_settimeofday
0001a3e8 g     F .text	000000bc dw1000_cli_dump_address
00008164  w    F .text	00000002 PWM0_IRQHandler
0000b288 g     F .text	000000b4 nrng_twr_to_tof_frames
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
0001adbc g     F .text	0000011c hal_spi_config
0001e0f6 g     F .text	0000001c strsep
0001f038 g     F .text	0000005a conf_line_make
00012774 g     F .text	00000074 flash_area_to_sectors
00015880 g     F .text	000000b4 base64_decode
00019930 g     F .text	0000000e dw1000_read_txtime_lo
0001d0e0 g     F .text	00000204 bierman_dbl
00008ad6 g     F .text	0000003a uwb_mac_remove_interface
0001c1b0 g     F .text	000002d4 srkf_dbl_main
00009298 g     F .text	00000054 os_callout_tick
000232f8 g     O .text	00000048 sysflash_map_dflt
20004c10 g     O .bss	0000001c nrf52_hal_timer0
0000f142 g     F .text	00000046 BitIndex
000080f8 g       .text	00000000 __isr_vector_end
0001b10c g     F .text	000000e0 hal_spi_txrx_noblock
00009174 g     F .text	0000001a os_start
00019b9e g     F .text	00000032 dw1000_phy_config_txrf
00008164  w    F .text	00000002 RTC1_IRQHandler
000155a0 g     F .text	00000082 boot_set_pending
00017a50 g     F .text	0000004c dw1000_dev_deinit
0001aed8 g     F .text	00000040 hal_spi_enable
00010934 g     F .text	0000008c imgmgr_state_write
00020470 g     F .text	00000040 .hidden __aeabi_d2uiz
00011244 g     F .text	00000024 dpl_cputime_timer_init
00021730 g     F .text	00000010 nan
0000933e g     F .text	00000024 os_cputime_timer_init
00008a9c g     F .text	0000003a uwb_mac_append_interface
0000bdd0 g     F .text	00000154 panmaster_add_node
000214d8 g     F .text	00000198 __ieee754_sqrt
00011c70 g     F .text	00000014 conf_store_init
0000b9f0 g     F .text	000001c8 panmaster_idx_find_node
0001a212 g     F .text	00000050 dw1000_phy_event_cnt_read
00011268 g     F .text	00000004 dpl_cputime_timer_start
0000dfd0 g     F .text	00000006 uwb_ccp_set_tof_comp_cb
0000ae88 g     F .text	0000001c nrng_get_config
00020bd0 g     F .text	0000008c ceilf
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
00012074 g     F .text	00000460 console_handle_char
00022409 g     O .text	0000004e g_stats_map_pan_stat_section
00019ade g     F .text	00000032 dw1000_phy_sysclk_LDE
00020390 g     F .text	00000012 .hidden __aeabi_dcmpeq
00013bfc g     F .text	00000040 shell_register
0000f3cc g     F .text	0000001e fwrite
00012efc g     F .text	00000010 mfg_open
20000550 g     O .data	00000008 g_os_run_list
00018f14 g     F .text	0000004c dw1000_mac_init
00019102 g     F .text	00000010 dw1000_read_rxtime
0001dcd4 g     F .text	00000002 uwb_rng_pkg_init2
000189c8 g     F .text	0000035c dw1000_mac_config
00008a10 g     F .text	00000028 NVIC_Relocate
00011b14 g     F .text	00000028 conf_src_register
0001600e g     F .text	0000000a cbor_encoder_init
0001532c g     F .text	0000007a sysinit_app
2000342c g     O .bss	00000004 os_flags
0001b6f4 g     F .text	00000054 json_encode_object_key
0000d676 g     F .text	00000030 tdma_stop
00015502 g     F .text	0000000a boot_write_swap_type
0000a174 g     F .text	00000006 os_arch_restore_sr
20004bdc g     O .bss	0000000c g_hal_os_tick
000114a0 g     F .text	0000002a dpl_mbuf_get
00018644 g     F .text	00000136 dw1000_start_rx
0000e348 g     F .text	00000040 uwb_ccp_skew_compensation_ui64
0001b748 g     F .text	00000064 json_encode_object_entry
00013138 g     F .text	0000005c log_reboot_pkg_init
2000fe50 g       *ABS*	000001b0 __StackLimit
00012868 g     F .text	00000020 flash_area_is_empty
00010054 g     F .text	00000014 imgmgr_dfu_started
200025d0 g     O .bss	00000004 g_os_started
0001f940 g     F .text	0000007a mbedtls_sha256_update_ret
0001dfc4 g     F .text	00000030 wcs_timescale_pkg_init
0001f63c g     F .text	0000011c split_go
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00008164  w    F .text	00000002 NFCT_IRQHandler
000146e0 g     F .text	0000023c uwbcfg_commit_to_inst
0000ff5c g     F .text	00000036 imgr_find_by_hash
00011276 g     F .text	00000016 dpl_cputime_delay_ticks
00016598 g     F .text	0000002e cbor_value_leave_container
000168c8 g     F .text	00000038 fcb_append_to_scratch
00010a80 g     F .text	00000028 mgmt_cbuf_setoerr
0001b998 g     F .text	00000020 json_encode_object_finish
000206bc g     F .text	00000024 .hidden __floatunsisf
0000a3da g     F .text	00000014 os_mbuf_free_chain
00020420 g     F .text	0000004e .hidden __aeabi_d2iz
0000a0cc g     F .text	00000040 os_get_uptime
0000aea4 g     F .text	0000002a nrng_append_config
00009838 g     F .text	00000060 os_msys_init
0000bfb4 g     F .text	0000000c panmaster_compress
00016b96 g     F .text	0000006e fcb_getnext_nolock
0000b9a8 g     F .text	00000010 panmaster_node_idx
0000a48e g     F .text	0000001c os_mbuf_off
20004607 g     O .bss	00000001 g_is_output_nlip
00013c3c g     F .text	00000078 shell_cmd_register
00008e78 g     F .text	00000028 hal_gpio_irq_enable
00009f18 g     F .text	0000000c os_time_get
200051e8 g     O .bss	0000001c modlog_mapping_pool
0001ec54 g     F .text	00000048 bcast_ota_nmgr_module_init
0000b9b8 g     F .text	0000000c panmaster_find_node_general
0001b07c g     F .text	00000090 hal_spi_txrx
0001bfc8 g     F .text	000000c8 timescale_main
0001b56a g     F .text	0000005e hal_timer_stop
000180a2 g     F .text	00000062 dw1000_read_rx
00018604 g     F .text	00000040 dw1000_sync_rxbufptrs
00011928 g     F .text	00000038 conf_get_value
00012a80 g     F .text	00000044 log_append_body
0001d810 g     F .text	00000024 uwb_rng_free
0000a39a g     F .text	0000002c os_mbuf_get_pkthdr
200046b0 g     O .bss	00000008 g_log_info
00011890 g     F .text	00000064 conf_str_from_value
00020bb8  w    F .text	00000002 .hidden __aeabi_idiv0
00015ed4 g     F .text	00000050 cbor_mbuf_reader_init
000203f4 g     F .text	0000002c .hidden __unorddf2
0001506c g     F .text	00000162 datetime_parse
0000ab64 g     F .text	0000010c nmgr_uwb_tx
00016900 g     F .text	00000104 fcb_append
200000d8 g     O .rtt	00000048 _SEGGER_RTT
000118f4 g     F .text	00000034 conf_set_value
0000d04e g     F .text	00000088 survey_receiver
00023960 g     O .text	00000030 cmd_dw1000_param
00011270 g     F .text	00000006 dpl_cputime_get32
00012ac4 g     F .text	00000042 log_printf
00022e60 g     O .text	00000006 g_stats_map_stats
00009d44 g     F .text	000000e4 os_task_init
000115fc g     F .text	00000098 dpl_mbuf_adj
000081ec g     F .text	0000003c hal_system_clock_start
0000815a  w    F .text	00000002 BusFault_Handler
00012c84 g     F .text	0000004c log_console_init
00014560 g     F .text	00000094 sysdown
000170ec g     F .text	00000004 uwb_dw1000_event_cnt_read
0000f320 g     F .text	00000016 uwb_wcs_local_to_master
000124e4 g     F .text	00000028 console_line_event_put
0000f65e g     F .text	00000010 strlen
000093b0 g     F .text	00000084 os_dev_create
00009808 g     F .text	00000018 os_msys_count
000096ce g     F .text	0000001e os_memblock_put_from_cb
0001f3c2 g     F .text	0000005c rwlock_acquire_write
00017552 g     F .text	000000a6 dw1000_dev_configure_sleep
000094b0 g     F .text	00000014 os_eventq_init
0000c7c4 g     F .text	00000020 panm_fcb_load
00009f24 g     F .text	0000007c os_time_advance
0000b1e0 g     F .text	00000040 nrng_request_delay_start
00017be4 g     F .text	000001e0 hal_dw1000_read_noblock
00020380 g     F .text	00000010 .hidden __aeabi_cdcmpeq
00011ab8 g     F .text	0000000c conf_cli_register
000202e4 g     F .text	0000008a .hidden __gedf2
0001e19c g     F .text	00000248 bcast_ota_get_packet
00009c00 g     F .text	00000024 os_sched_resort
20004bc8 g     O .bss	00000004 boot_current_slot
0001df20 g     F .text	00000088 wcs_timescale_init
0001a288 g     F .text	00000050 dw1000_pkg_down
0001142e g     F .text	00000032 dpl_memblock_put
0001a7fa g     F .text	00000024 hal_flash_init
0000f1cc g     F .text	0000002c uwb_wcs_free
0001e092 g     F .text	0000001a strchr
00008164  w    F .text	00000002 MWU_IRQHandler
000143bc g     F .text	00000040 stats_module_init
00010a40 g     F .text	00000040 mgmt_find_handler
0001fe10 g     F .text	00000042 .hidden __aeabi_f2d
00008158  w    F .text	00000002 MemoryManagement_Handler
000174b6 g     F .text	0000009c dw1000_softreset
00017b38 g     F .text	000000aa hal_dw1000_read
00010068 g     F .text	00000014 imgmgr_dfu_pending
000114f2 g     F .text	000000a0 dpl_mbuf_append
00012cd0 g     F .text	00000018 log_level_get
00015622 g     F .text	00000046 boot_set_confirmed
0000cec0 g     F .text	00000076 survey_slot_range_cb
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
0001aa1e g     F .text	00000030 hal_flash_isempty_no_buf
0001491c g     F .text	00000024 uwbcfg_commit
00009434 g     F .text	00000028 os_dev_initialize_all
0001fb50 g     F .text	0000027a .hidden __subdf3
00013e54 g     F .text	00000020 shell_nlip_clear_pkt
0001f1f0 g     F .text	0000003c modlog_printf
0001846e g     F .text	00000012 dw1000_set_on_error_continue
00009ab0 g     F .text	0000006c os_sched_remove
0000ff92 g     F .text	00000042 imgmgr_find_best_area_id
20000558 g     O .data	00000008 g_os_sleep_list
0002076c g     F .text	00000000 .hidden __aeabi_ldivmod
00015324 g     F .text	00000008 streamer_console_get
00016d24 g     F .text	00000050 hal_bsp_init
0000919c g     F .text	00000030 os_pkg_init
00018ea0 g     F .text	00000074 dw1000_tasks_init
0001af18 g     F .text	0000005c hal_spi_disable
00014c8c g     F .text	00000148 strtod_soft
0002055c g     F .text	00000160 .hidden __addsf3
000116ec g     F .text	00000048 conf_init
000098cc g     F .text	0000000e os_sanity_check_init
00016cac g     F .text	00000066 fcb_walk
0001e460 g     F .text	00000054 bcast_ota_pkg_init
0001d834 g     F .text	00000028 uwb_rng_set_frames
00011592 g     F .text	0000001c dpl_mbuf_off
000190e4 g     F .text	00000010 dw1000_read_systime
00014344 g     F .text	00000032 stats_init
0000d188 g     F .text	00000024 survey_pkg_init
0001e7c4 g     F .text	00000050 bota_cli_register
0000fbd8 g     F .text	00000004 vfprintf
0001e14c g     F .text	00000034 strpbrk
00018d48 g     F .text	000000c8 dw1000_calc_clock_offset_ratio
00008dec g     F .text	0000008c hal_gpio_irq_init
00019a5c g     F .text	0000002a dw1000_phy_sysclk_XTAL
20002580 g     O .bss	00000050 g_os_main_task
00008ea0 g     F .text	0000001c hal_gpio_irq_disable
0000f570 g     F .text	0000002c free
0000c790 g     F .text	00000032 panm_fcb_src
0000e7fc g     F .text	00000032 uwb_ccp_pkg_down
000154f8 g     F .text	0000000a boot_write_image_ok
0001f760 g     F .text	000000a4 mbedtls_sha256_starts_ret
00014950 g     F .text	00000050 uwbcfg_pkg_init
00019b10 g     F .text	00000028 dw1000_phy_sysclk_SEQ
00011cf4 g     F .text	0000001c console_out



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0000a863 	.word	0x0000a863
	...
    8058:	0000a8a9 	.word	0x0000a8a9
    805c:	0000a8ef 	.word	0x0000a8ef
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f83c 	bl	81a4 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	200013d0 	.word	0x200013d0
    ldr     r3, =__bss_end__
    8134:	200052a4 	.word	0x200052a4
    ldr    r1, =__etext
    8138:	000241d0 	.word	0x000241d0
    ldr    r2, =__data_start__
    813c:	20000530 	.word	0x20000530
    ldr    r3, =__data_end__
    8140:	200013d0 	.word	0x200013d0
    LDR     R0, =__HeapBase
    8144:	200052a8 	.word	0x200052a8
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	00008289 	.word	0x00008289
    LDR     R0, =_start
    8150:	0000847d 	.word	0x0000847d

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    sbrkLimit = limit;
    816a:	e9c3 0100 	strd	r0, r1, [r3]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	20000530 	.word	0x20000530

00008178 <_sbrk>:
    void *prev_brk;

    if (incr < 0) {
        /* Returning memory to the heap. */
        incr = -incr;
        if (brk - incr < sbrkBase) {
    8178:	4909      	ldr	r1, [pc, #36]	; (81a0 <_sbrk+0x28>)
    if (incr < 0) {
    817a:	1e03      	subs	r3, r0, #0
        if (brk - incr < sbrkBase) {
    817c:	688a      	ldr	r2, [r1, #8]
    if (incr < 0) {
    817e:	da06      	bge.n	818e <_sbrk+0x16>
        if (brk - incr < sbrkBase) {
    8180:	6808      	ldr	r0, [r1, #0]
    8182:	4413      	add	r3, r2
    8184:	4283      	cmp	r3, r0
    8186:	d308      	bcc.n	819a <_sbrk+0x22>
        }
    } else {
        /* Allocating memory from the heap. */
        if (sbrkLimit - brk >= incr) {
            prev_brk = brk;
            brk += incr;
    8188:	608b      	str	r3, [r1, #8]
            prev_brk = (void *)-1;
        }
    }

    return prev_brk;
}
    818a:	4610      	mov	r0, r2
    818c:	4770      	bx	lr
        if (sbrkLimit - brk >= incr) {
    818e:	6848      	ldr	r0, [r1, #4]
    8190:	1a80      	subs	r0, r0, r2
    8192:	4298      	cmp	r0, r3
    8194:	db01      	blt.n	819a <_sbrk+0x22>
            brk += incr;
    8196:	4413      	add	r3, r2
    8198:	e7f6      	b.n	8188 <_sbrk+0x10>
            prev_brk = (void *)-1;
    819a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    return prev_brk;
    819e:	e7f4      	b.n	818a <_sbrk+0x12>
    81a0:	20000530 	.word	0x20000530

000081a4 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    81a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81a8:	2201      	movs	r2, #1
    81aa:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    81ae:	4770      	bx	lr

000081b0 <hal_system_reset>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    81b0:	4b08      	ldr	r3, [pc, #32]	; (81d4 <hal_system_reset+0x24>)
    81b2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        if (hal_debugger_connected()) {
    81b6:	07d2      	lsls	r2, r2, #31
    81b8:	d500      	bpl.n	81bc <hal_system_reset+0xc>
            asm("bkpt");
    81ba:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    81bc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81c0:	68d9      	ldr	r1, [r3, #12]
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81c2:	4a05      	ldr	r2, [pc, #20]	; (81d8 <hal_system_reset+0x28>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81c4:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81c8:	430a      	orrs	r2, r1
    81ca:	60da      	str	r2, [r3, #12]
    81cc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81d0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    81d2:	e7fd      	b.n	81d0 <hal_system_reset+0x20>
    81d4:	e000ed00 	.word	0xe000ed00
    81d8:	05fa0004 	.word	0x05fa0004

000081dc <hal_debugger_connected>:
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    81dc:	4b02      	ldr	r3, [pc, #8]	; (81e8 <hal_debugger_connected+0xc>)
    81de:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
}
    81e2:	f000 0001 	and.w	r0, r0, #1
    81e6:	4770      	bx	lr
    81e8:	e000ed00 	.word	0xe000ed00

000081ec <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f0:	490c      	ldr	r1, [pc, #48]	; (8224 <hal_system_clock_start+0x38>)
    81f2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81f6:	400a      	ands	r2, r1
    81f8:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
    81fc:	d011      	beq.n	8222 <hal_system_clock_start+0x36>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81fe:	2201      	movs	r2, #1
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    8200:	2000      	movs	r0, #0
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    8202:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    8204:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    8208:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    820c:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    820e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    8212:	2a00      	cmp	r2, #0
    8214:	d0fb      	beq.n	820e <hal_system_clock_start+0x22>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    8216:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    821a:	400a      	ands	r2, r1
    821c:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
    8220:	d1f5      	bne.n	820e <hal_system_clock_start+0x22>
                }
            }
        }
    }
#endif
}
    8222:	4770      	bx	lr
    8224:	00010003 	.word	0x00010003

00008228 <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8228:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    822c:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
    8230:	2a06      	cmp	r2, #6
    8232:	d10c      	bne.n	824e <errata_16+0x26>
    8234:	f8d3 2fe4 	ldr.w	r2, [r3, #4068]	; 0xfe4
    8238:	0712      	lsls	r2, r2, #28
    823a:	d108      	bne.n	824e <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    823c:	f8d3 0fe8 	ldr.w	r0, [r3, #4072]	; 0xfe8
    8240:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    8244:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    8248:	4258      	negs	r0, r3
    824a:	4158      	adcs	r0, r3
    824c:	4770      	bx	lr
            return true;
        }
    }

    return false;
    824e:	2000      	movs	r0, #0
}
    8250:	4770      	bx	lr

00008252 <errata_108>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8252:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8256:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
    825a:	2a06      	cmp	r2, #6
    825c:	d110      	bne.n	8280 <errata_108+0x2e>
    825e:	f8d3 2fe4 	ldr.w	r2, [r3, #4068]	; 0xfe4
    8262:	0712      	lsls	r2, r2, #28
    8264:	d10c      	bne.n	8280 <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8266:	f8d3 0fe8 	ldr.w	r0, [r3, #4072]	; 0xfe8
    826a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    826e:	2b30      	cmp	r3, #48	; 0x30
    8270:	d008      	beq.n	8284 <errata_108+0x32>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    8272:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    8276:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
    827a:	4258      	negs	r0, r3
    827c:	4158      	adcs	r0, r3
    827e:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8280:	2000      	movs	r0, #0
    8282:	4770      	bx	lr
            return true;
    8284:	2001      	movs	r0, #1
}
    8286:	4770      	bx	lr

00008288 <SystemInit>:
{
    8288:	b508      	push	{r3, lr}
    if (errata_16()){
    828a:	f7ff ffcd 	bl	8228 <errata_16>
    828e:	b110      	cbz	r0, 8296 <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8290:	4b71      	ldr	r3, [pc, #452]	; (8458 <SystemInit+0x1d0>)
    8292:	4a72      	ldr	r2, [pc, #456]	; (845c <SystemInit+0x1d4>)
    8294:	675a      	str	r2, [r3, #116]	; 0x74
    if (errata_31()){
    8296:	f7ff ffdc 	bl	8252 <errata_108>
    829a:	b148      	cbz	r0, 82b0 <SystemInit+0x28>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    829c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    82a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    82a4:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    82a8:	f3c3 3342 	ubfx	r3, r3, #13, #3
    82ac:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    if (errata_32()){
    82b0:	f7ff ffba 	bl	8228 <errata_16>
    82b4:	b130      	cbz	r0, 82c4 <SystemInit+0x3c>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    82b6:	4a6a      	ldr	r2, [pc, #424]	; (8460 <SystemInit+0x1d8>)
    82b8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    82bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    82c0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    if (errata_36()){
    82c4:	f7ff ffc5 	bl	8252 <errata_108>
    82c8:	b140      	cbz	r0, 82dc <SystemInit+0x54>
        NRF_CLOCK->EVENTS_DONE = 0;
    82ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    82ce:	2200      	movs	r2, #0
    82d0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    82d4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    82d8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    82dc:	f7ff ffa4 	bl	8228 <errata_16>
    82e0:	b120      	cbz	r0, 82ec <SystemInit+0x64>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    82e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    82e6:	2203      	movs	r2, #3
    82e8:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    if (errata_57()){
    82ec:	f7ff ff9c 	bl	8228 <errata_16>
    82f0:	b160      	cbz	r0, 830c <SystemInit+0x84>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    82f2:	4b5c      	ldr	r3, [pc, #368]	; (8464 <SystemInit+0x1dc>)
    82f4:	2205      	movs	r2, #5
    82f6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    82fa:	2201      	movs	r2, #1
    82fc:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8300:	2200      	movs	r2, #0
    8302:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8306:	223f      	movs	r2, #63	; 0x3f
    8308:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    830c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8310:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
    8314:	2a06      	cmp	r2, #6
    8316:	d150      	bne.n	83ba <SystemInit+0x132>
    8318:	f8d3 2fe4 	ldr.w	r2, [r3, #4068]	; 0xfe4
    831c:	0712      	lsls	r2, r2, #28
    831e:	d14c      	bne.n	83ba <SystemInit+0x132>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8320:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    8324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8328:	2b50      	cmp	r3, #80	; 0x50
    832a:	d146      	bne.n	83ba <SystemInit+0x132>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    832c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8330:	4b4d      	ldr	r3, [pc, #308]	; (8468 <SystemInit+0x1e0>)
    8332:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    8336:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    833a:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    833e:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    8342:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    8346:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    834a:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    834e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    8352:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    8356:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    835a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    835e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    8362:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    8366:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    836a:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    836e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    8372:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    8376:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    837a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    837e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    8382:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8386:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    838a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    838e:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    8392:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8396:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    839a:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    839e:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    83a2:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    83a6:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    83aa:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    83ae:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    83b2:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    83b6:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    83ba:	f7ff ff4a 	bl	8252 <errata_108>
    83be:	b148      	cbz	r0, 83d4 <SystemInit+0x14c>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    83c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    83c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    83c8:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    83cc:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    83d0:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    83d4:	4a22      	ldr	r2, [pc, #136]	; (8460 <SystemInit+0x1d8>)
    83d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    83da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    83de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    83e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    83e6:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    83ea:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    83ee:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    83f2:	07db      	lsls	r3, r3, #31
    83f4:	d528      	bpl.n	8448 <SystemInit+0x1c0>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    83f6:	4b1d      	ldr	r3, [pc, #116]	; (846c <SystemInit+0x1e4>)
    83f8:	2201      	movs	r2, #1
    83fa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    83fe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    8402:	2a00      	cmp	r2, #0
    8404:	d0fb      	beq.n	83fe <SystemInit+0x176>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8406:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    840a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    840e:	f023 0301 	bic.w	r3, r3, #1
    8412:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8416:	4b15      	ldr	r3, [pc, #84]	; (846c <SystemInit+0x1e4>)
    8418:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    841c:	2a00      	cmp	r2, #0
    841e:	d0fb      	beq.n	8418 <SystemInit+0x190>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    8420:	2200      	movs	r2, #0
    8422:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8426:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    842a:	2a00      	cmp	r2, #0
    842c:	d0fb      	beq.n	8426 <SystemInit+0x19e>
  __ASM volatile ("dsb 0xF":::"memory");
    842e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    8432:	490b      	ldr	r1, [pc, #44]	; (8460 <SystemInit+0x1d8>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8434:	4b0e      	ldr	r3, [pc, #56]	; (8470 <SystemInit+0x1e8>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    8436:	68ca      	ldr	r2, [r1, #12]
    8438:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    843c:	4313      	orrs	r3, r2
    843e:	60cb      	str	r3, [r1, #12]
    8440:	f3bf 8f4f 	dsb	sy
    __NOP();
    8444:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8446:	e7fd      	b.n	8444 <SystemInit+0x1bc>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    8448:	4b0a      	ldr	r3, [pc, #40]	; (8474 <SystemInit+0x1ec>)
    844a:	4a0b      	ldr	r2, [pc, #44]	; (8478 <SystemInit+0x1f0>)
    844c:	601a      	str	r2, [r3, #0]
}
    844e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    NVIC_Relocate();
    8452:	f000 badd 	b.w	8a10 <NVIC_Relocate>
    8456:	bf00      	nop
    8458:	4007c000 	.word	0x4007c000
    845c:	baadf00d 	.word	0xbaadf00d
    8460:	e000ed00 	.word	0xe000ed00
    8464:	40005000 	.word	0x40005000
    8468:	4000c000 	.word	0x4000c000
    846c:	4001e000 	.word	0x4001e000
    8470:	05fa0004 	.word	0x05fa0004
    8474:	2000053c 	.word	0x2000053c
    8478:	03d09000 	.word	0x03d09000

0000847c <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    847c:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    847e:	4803      	ldr	r0, [pc, #12]	; (848c <_start+0x10>)
    8480:	f000 fe26 	bl	90d0 <os_init>
    os_start();
#endif
}
    8484:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_start();
    8488:	f000 be74 	b.w	9174 <os_start>
    848c:	00008741 	.word	0x00008741

00008490 <_init>:

void
_init(void)
{
}
    8490:	4770      	bx	lr
	...

00008494 <pan_complete_cb>:
    }
}

static void
pan_complete_cb(struct dpl_event * ev)
{
    8494:	b513      	push	{r0, r1, r4, lr}
    assert(ev != NULL);
    8496:	b928      	cbnz	r0, 84a4 <pan_complete_cb+0x10>
    8498:	2300      	movs	r3, #0
    849a:	461a      	mov	r2, r3
    849c:	4619      	mov	r1, r3
    849e:	4618      	mov	r0, r3
    84a0:	f000 fd28 	bl	8ef4 <__assert_func>
}

static inline void *
dpl_event_get_arg(struct dpl_event *ev)
{
    return ev->ev.ev_arg;
    84a4:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
    84a6:	2c00      	cmp	r4, #0
    84a8:	d0f6      	beq.n	8498 <pan_complete_cb+0x4>
    struct uwb_pan_instance *pan = (struct uwb_pan_instance*) dpl_event_get_arg(ev);

    if (pan->dev_inst->slot_id != 0xffff) {
    84aa:	6823      	ldr	r3, [r4, #0]
    84ac:	f8b3 24c2 	ldrh.w	r2, [r3, #1218]	; 0x4c2
    84b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    84b4:	429a      	cmp	r2, r3
    84b6:	d013      	beq.n	84e0 <pan_complete_cb+0x4c>
        uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    84b8:	f000 ff53 	bl	9362 <os_cputime_get32>
        printf("{\"utime\": %lu,\"msg\": \"slot_id = %d\"}\n", utime, pan->dev_inst->slot_id);
    84bc:	6823      	ldr	r3, [r4, #0]
    84be:	9001      	str	r0, [sp, #4]
    84c0:	f8b3 24c2 	ldrh.w	r2, [r3, #1218]	; 0x4c2
        uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    84c4:	4601      	mov	r1, r0
        printf("{\"utime\": %lu,\"msg\": \"slot_id = %d\"}\n", utime, pan->dev_inst->slot_id);
    84c6:	4807      	ldr	r0, [pc, #28]	; (84e4 <pan_complete_cb+0x50>)
    84c8:	f007 fb88 	bl	fbdc <printf>
        printf("{\"utime\": %lu,\"msg\": \"euid16 = 0x%X\"}\n", utime, pan->dev_inst->my_short_address);
    84cc:	6823      	ldr	r3, [r4, #0]
    84ce:	9901      	ldr	r1, [sp, #4]
    84d0:	f8b3 24b6 	ldrh.w	r2, [r3, #1206]	; 0x4b6
    84d4:	4804      	ldr	r0, [pc, #16]	; (84e8 <pan_complete_cb+0x54>)
    }
}
    84d6:	b002      	add	sp, #8
    84d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        printf("{\"utime\": %lu,\"msg\": \"euid16 = 0x%X\"}\n", utime, pan->dev_inst->my_short_address);
    84dc:	f007 bb7e 	b.w	fbdc <printf>
}
    84e0:	b002      	add	sp, #8
    84e2:	bd10      	pop	{r4, pc}
    84e4:	00021958 	.word	0x00021958
    84e8:	0002197e 	.word	0x0002197e
    84ec:	00000000 	.word	0x00000000

000084f0 <tof_comp_cb>:
 * Ideally this should use a map generated and make use of the euid in case
 * the ccp packet is relayed through another node.
 */
static uint32_t
tof_comp_cb(uint16_t short_addr)
{
    84f0:	b508      	push	{r3, lr}
    float dist_in_meters = sqrtf(x*x+y*y+z*z);
#ifdef VERBOSE
    printf("d=%dm, %ld dwunits\n", (int)dist_in_meters,
           (uint32_t)(dist_in_meters/uwb_rng_tof_to_meters(1.0)));
#endif
    return dist_in_meters/uwb_rng_tof_to_meters(1.0);
    84f2:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8510 <tof_comp_cb+0x20>
    84f6:	f004 fa4b 	bl	c990 <uwb_rng_tof_to_meters>
    84fa:	a107      	add	r1, pc, #28	; (adr r1, 8518 <tof_comp_cb+0x28>)
    84fc:	e9d1 0100 	ldrd	r0, r1, [r1]
    8500:	ec53 2b10 	vmov	r2, r3, d0
    8504:	f017 fe06 	bl	20114 <__aeabi_ddiv>
    8508:	f017 ffb2 	bl	20470 <__aeabi_d2uiz>
}
    850c:	bd08      	pop	{r3, pc}
    850e:	bf00      	nop
    8510:	00000000 	.word	0x00000000
    8514:	3ff00000 	.word	0x3ff00000
    8518:	60000000 	.word	0x60000000
    851c:	3ff6a09e 	.word	0x3ff6a09e

00008520 <nrng_complete_cb>:
static void nrng_complete_cb(struct dpl_event *ev) {
    8520:	b510      	push	{r4, lr}
    assert(ev != NULL);
    8522:	4604      	mov	r4, r0
    8524:	b928      	cbnz	r0, 8532 <nrng_complete_cb+0x12>
    8526:	2300      	movs	r3, #0
    8528:	461a      	mov	r2, r3
    852a:	4619      	mov	r1, r3
    852c:	4618      	mov	r0, r3
    852e:	f000 fce1 	bl	8ef4 <__assert_func>
    assert(dpl_event_get_arg(ev) != NULL);
    8532:	6883      	ldr	r3, [r0, #8]
    8534:	2b00      	cmp	r3, #0
    8536:	d0f6      	beq.n	8526 <nrng_complete_cb+0x6>
    hal_gpio_toggle(LED_BLINK_PIN);
    8538:	201f      	movs	r0, #31
    853a:	f000 fc4a 	bl	8dd2 <hal_gpio_toggle>
    853e:	68a2      	ldr	r2, [r4, #8]
    nrng_frame_t * frame = nrng->frames[(nrng->idx)%nrng->nframes];
    8540:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
    8544:	f8b2 30c0 	ldrh.w	r3, [r2, #192]	; 0xc0
    8548:	fbb3 f0f1 	udiv	r0, r3, r1
    854c:	fb01 3310 	mls	r3, r1, r0, r3
    8550:	b29b      	uxth	r3, r3
    8552:	3332      	adds	r3, #50	; 0x32
    if (frame->code == UWB_DATA_CODE_DS_TWR_NRNG_FINAL || frame->code == UWB_DATA_CODE_DS_TWR_NRNG_EXT_FINAL){
    8554:	f240 1143 	movw	r1, #323	; 0x143
    nrng_frame_t * frame = nrng->frames[(nrng->idx)%nrng->nframes];
    8558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (frame->code == UWB_DATA_CODE_DS_TWR_NRNG_FINAL || frame->code == UWB_DATA_CODE_DS_TWR_NRNG_EXT_FINAL){
    855c:	f8b3 2009 	ldrh.w	r2, [r3, #9]
    8560:	428a      	cmp	r2, r1
    8562:	d002      	beq.n	856a <nrng_complete_cb+0x4a>
    8564:	f5b2 7fa4 	cmp.w	r2, #328	; 0x148
    8568:	d103      	bne.n	8572 <nrng_complete_cb+0x52>
        frame->code = UWB_DATA_CODE_DS_TWR_NRNG_END;
    856a:	2244      	movs	r2, #68	; 0x44
    856c:	725a      	strb	r2, [r3, #9]
    856e:	2201      	movs	r2, #1
    8570:	729a      	strb	r2, [r3, #10]
}
    8572:	bd10      	pop	{r4, pc}

00008574 <complete_cb>:
    if(inst->fctrl != FCNTL_IEEE_RANGE_16){
    8574:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
{
    8578:	b508      	push	{r3, lr}
    if(inst->fctrl != FCNTL_IEEE_RANGE_16){
    857a:	f648 0341 	movw	r3, #34881	; 0x8841
    857e:	429a      	cmp	r2, r3
    8580:	d106      	bne.n	8590 <complete_cb+0x1c>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    8582:	f001 f84b 	bl	961c <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    8586:	4903      	ldr	r1, [pc, #12]	; (8594 <complete_cb+0x20>)
    8588:	f000 ffa1 	bl	94ce <os_eventq_put>
    858c:	2001      	movs	r0, #1
}
    858e:	bd08      	pop	{r3, pc}
        return false;
    8590:	2000      	movs	r0, #0
    8592:	e7fc      	b.n	858e <complete_cb+0x1a>
    8594:	200013d0 	.word	0x200013d0

00008598 <uwb_config_updated_cb>:
{
    8598:	b538      	push	{r3, r4, r5, lr}
    struct uwb_dev * udev = uwb_dev_idx_lookup(0);
    859a:	2000      	movs	r0, #0
    859c:	f000 fa54 	bl	8a48 <uwb_dev_idx_lookup>
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    85a0:	2101      	movs	r1, #1
    struct uwb_dev * udev = uwb_dev_idx_lookup(0);
    85a2:	4604      	mov	r4, r0
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    85a4:	f000 fac4 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    if (dpl_sem_get_count(&ccp->sem) == 0) {
    85a8:	f8b0 50b6 	ldrh.w	r5, [r0, #182]	; 0xb6
    85ac:	b9ad      	cbnz	r5, 85da <uwb_config_updated_cb+0x42>
 * @return void
 */
UWB_API_IMPL_PREFIX void
uwb_phy_forcetrxoff(struct uwb_dev* dev)
{
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    85ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    85b0:	4620      	mov	r0, r4
    85b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    85b6:	4798      	blx	r3
    return (dev->uw_funcs->uf_mac_config(dev, config));
    85b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    85ba:	4629      	mov	r1, r5
    85bc:	681b      	ldr	r3, [r3, #0]
    85be:	4620      	mov	r0, r4
    85c0:	4798      	blx	r3
    return (dev->uw_funcs->uf_txrf_config(dev, config));
    85c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    85c4:	4620      	mov	r0, r4
    85c6:	685b      	ldr	r3, [r3, #4]
    85c8:	f204 5124 	addw	r1, r4, #1316	; 0x524
    85cc:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_rx(dev));
    85ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    85d0:	4620      	mov	r0, r4
    85d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    85d4:	4798      	blx	r3
}
    85d6:	2000      	movs	r0, #0
    85d8:	bd38      	pop	{r3, r4, r5, pc}
    uwb_config_updated = true;
    85da:	4b02      	ldr	r3, [pc, #8]	; (85e4 <uwb_config_updated_cb+0x4c>)
    85dc:	2201      	movs	r2, #1
    85de:	701a      	strb	r2, [r3, #0]
    return 0;
    85e0:	e7f9      	b.n	85d6 <uwb_config_updated_cb+0x3e>
    85e2:	bf00      	nop
    85e4:	200013e0 	.word	0x200013e0

000085e8 <slot_cb>:
slot_cb(struct dpl_event * ev){
    85e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    assert(ev);
    85ec:	b928      	cbnz	r0, 85fa <slot_cb+0x12>
    85ee:	2300      	movs	r3, #0
    85f0:	461a      	mov	r2, r3
    85f2:	4619      	mov	r1, r3
    85f4:	4618      	mov	r0, r3
    85f6:	f000 fc7d 	bl	8ef4 <__assert_func>
    return ev->ev.ev_arg;
    85fa:	6883      	ldr	r3, [r0, #8]
    tdma_instance_t * tdma = slot->parent;
    85fc:	689e      	ldr	r6, [r3, #8]
    struct uwb_ccp_instance *ccp = tdma->ccp;
    85fe:	6872      	ldr	r2, [r6, #4]
    if (dpl_sem_get_count(&ccp->sem) == 0) {
    8600:	f8b2 10b6 	ldrh.w	r1, [r2, #182]	; 0xb6
    8604:	2900      	cmp	r1, #0
    8606:	d06a      	beq.n	86de <slot_cb+0xf6>
    if (uwb_config_updated) {
    8608:	494b      	ldr	r1, [pc, #300]	; (8738 <slot_cb+0x150>)
    struct uwb_dev * udev = tdma->dev_inst;
    860a:	6834      	ldr	r4, [r6, #0]
    if (uwb_config_updated) {
    860c:	7808      	ldrb	r0, [r1, #0]
    860e:	b1a0      	cbz	r0, 863a <slot_cb+0x52>
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    8610:	6a63      	ldr	r3, [r4, #36]	; 0x24
        uwb_config_updated = false;
    8612:	2500      	movs	r5, #0
    8614:	4620      	mov	r0, r4
    8616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    861a:	700d      	strb	r5, [r1, #0]
    861c:	4798      	blx	r3
    return (dev->uw_funcs->uf_mac_config(dev, config));
    861e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8620:	4629      	mov	r1, r5
    8622:	681b      	ldr	r3, [r3, #0]
    8624:	4620      	mov	r0, r4
    8626:	4798      	blx	r3
    return (dev->uw_funcs->uf_txrf_config(dev, config));
    8628:	6a63      	ldr	r3, [r4, #36]	; 0x24
    862a:	685b      	ldr	r3, [r3, #4]
    862c:	f204 5124 	addw	r1, r4, #1316	; 0x524
    8630:	4620      	mov	r0, r4
}
    8632:	b004      	add	sp, #16
    8634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8638:	4718      	bx	r3
    if (ccp->local_epoch==0 || udev->slot_id == 0xffff) return;
    863a:	e9d2 1236 	ldrd	r1, r2, [r2, #216]	; 0xd8
    863e:	430a      	orrs	r2, r1
    8640:	d04d      	beq.n	86de <slot_cb+0xf6>
    8642:	f8b4 14c2 	ldrh.w	r1, [r4, #1218]	; 0x4c2
    8646:	f64f 72ff 	movw	r2, #65535	; 0xffff
    864a:	4291      	cmp	r1, r2
    864c:	d047      	beq.n	86de <slot_cb+0xf6>
    uint16_t idx = slot->idx;
    864e:	881d      	ldrh	r5, [r3, #0]
    struct nrng_instance *nrng = (struct nrng_instance *)slot->arg;
    8650:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    if (idx > 6 && idx < (tdma->nslots-6) && (idx%4)==0) {
    8652:	2d06      	cmp	r5, #6
    8654:	d827      	bhi.n	86a6 <slot_cb+0xbe>
    if (udev->role&UWB_ROLE_ANCHOR) {
    8656:	f8b4 34b4 	ldrh.w	r3, [r4, #1204]	; 0x4b4
    865a:	f013 0804 	ands.w	r8, r3, #4
    865e:	d041      	beq.n	86e4 <slot_cb+0xfc>
        uwb_set_delay_start(udev, tdma_rx_slot_start(tdma, idx));
    8660:	ee07 5a90 	vmov	s15, r5
    8664:	4630      	mov	r0, r6
    8666:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    866a:	f005 f836 	bl	d6da <tdma_rx_slot_start>
    866e:	460b      	mov	r3, r1
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    8670:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8672:	4602      	mov	r2, r0
    8674:	6b49      	ldr	r1, [r1, #52]	; 0x34
    8676:	4620      	mov	r0, r4
    8678:	4788      	blx	r1
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    867a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    867c:	2113      	movs	r1, #19
    867e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    8680:	4620      	mov	r0, r4
    8682:	4798      	blx	r3
        uint16_t timeout = uwb_phy_frame_duration(udev, sizeof(nrng_request_frame_t))
    8684:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    8688:	6a63      	ldr	r3, [r4, #36]	; 0x24
    868a:	4408      	add	r0, r1
        uwb_set_rx_timeout(udev, timeout + 0x1000);
    868c:	b281      	uxth	r1, r0
    868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8690:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    8694:	4620      	mov	r0, r4
    8696:	4798      	blx	r3
        nrng_listen(nrng, UWB_BLOCKING);
    8698:	2100      	movs	r1, #0
    869a:	4638      	mov	r0, r7
}
    869c:	b004      	add	sp, #16
    869e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        nrng_listen(nrng, UWB_BLOCKING);
    86a2:	f002 bdbd 	b.w	b220 <nrng_listen>
    if (idx > 6 && idx < (tdma->nslots-6) && (idx%4)==0) {
    86a6:	f8b6 307a 	ldrh.w	r3, [r6, #122]	; 0x7a
    86aa:	3b06      	subs	r3, #6
    86ac:	429d      	cmp	r5, r3
    86ae:	dad2      	bge.n	8656 <slot_cb+0x6e>
    86b0:	07a8      	lsls	r0, r5, #30
    86b2:	d1d0      	bne.n	8656 <slot_cb+0x6e>
        nmgr_uwb_instance_t *nmgruwb = (nmgr_uwb_instance_t *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_NMGR_UWB);
    86b4:	2113      	movs	r1, #19
    86b6:	4620      	mov	r0, r4
    86b8:	f000 fa3a 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
        assert(nmgruwb);
    86bc:	4680      	mov	r8, r0
    86be:	2800      	cmp	r0, #0
    86c0:	d095      	beq.n	85ee <slot_cb+0x6>
        if (uwb_nmgr_process_tx_queue(nmgruwb, tdma_tx_slot_start(tdma, idx))) {
    86c2:	ee07 5a90 	vmov	s15, r5
    86c6:	4630      	mov	r0, r6
    86c8:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    86cc:	f005 f838 	bl	d740 <tdma_tx_slot_start>
    86d0:	4602      	mov	r2, r0
    86d2:	460b      	mov	r3, r1
    86d4:	4640      	mov	r0, r8
    86d6:	f002 facb 	bl	ac70 <uwb_nmgr_process_tx_queue>
    86da:	2800      	cmp	r0, #0
    86dc:	d0bb      	beq.n	8656 <slot_cb+0x6e>
}
    86de:	b004      	add	sp, #16
    86e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (idx%MYNEWT_VAL(NRNG_NTAGS) != udev->slot_id) {      // NRNG_NTAGS   = Max number of tags to allow in slots
    86e4:	f8b4 24c2 	ldrh.w	r2, [r4, #1218]	; 0x4c2
    86e8:	f005 0303 	and.w	r3, r5, #3
    86ec:	429a      	cmp	r2, r3
    86ee:	d1f6      	bne.n	86de <slot_cb+0xf6>
        uint64_t dx_time = tdma_tx_slot_start(tdma, idx) & 0xFFFFFFFFFE00UL;
    86f0:	ee07 5a90 	vmov	s15, r5
    86f4:	4630      	mov	r0, r6
    86f6:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    86fa:	f005 f821 	bl	d740 <tdma_tx_slot_start>
        if(nrng_request_delay_start(
    86fe:	f44f 7398 	mov.w	r3, #304	; 0x130
    8702:	22ff      	movs	r2, #255	; 0xff
    8704:	e9cd 3200 	strd	r3, r2, [sp]
    8708:	f420 72ff 	bic.w	r2, r0, #510	; 0x1fe
    870c:	b28b      	uxth	r3, r1
    870e:	f8cd 8008 	str.w	r8, [sp, #8]
    8712:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8716:	f022 0201 	bic.w	r2, r2, #1
    871a:	4638      	mov	r0, r7
    871c:	f002 fd60 	bl	b1e0 <nrng_request_delay_start>
    8720:	0741      	lsls	r1, r0, #29
    8722:	d5dc      	bpl.n	86de <slot_cb+0xf6>
            uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    8724:	f000 fe1d 	bl	9362 <os_cputime_get32>
    8728:	4601      	mov	r1, r0
            printf("{\"utime\": %lu,\"msg\": \"slot_timer_cb_%d:start_tx_error\"}\n",
    872a:	4804      	ldr	r0, [pc, #16]	; (873c <slot_cb+0x154>)
    872c:	462a      	mov	r2, r5
}
    872e:	b004      	add	sp, #16
    8730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            printf("{\"utime\": %lu,\"msg\": \"slot_timer_cb_%d:start_tx_error\"}\n",
    8734:	f007 ba52 	b.w	fbdc <printf>
    8738:	200013e0 	.word	0x200013e0
    873c:	000219a5 	.word	0x000219a5

00008740 <main>:


int main(int argc, char **argv){
    8740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8744:	b095      	sub	sp, #84	; 0x54
    int rc;

    sysinit();
    8746:	f00b ff59 	bl	145fc <sysinit_start>
    874a:	f00c fdef 	bl	1532c <sysinit_app>
    874e:	f00b ff5b 	bl	14608 <sysinit_end>
    uwbcfg_register(&uwb_cb);
    8752:	489b      	ldr	r0, [pc, #620]	; (89c0 <main+0x280>)
    8754:	f00c f8f4 	bl	14940 <uwbcfg_register>
    conf_load();
    8758:	f009 f9f6 	bl	11b48 <conf_load>

    hal_gpio_init_out(LED_BLINK_PIN, 1);
    875c:	2101      	movs	r1, #1
    875e:	201f      	movs	r0, #31
    8760:	f000 fb07 	bl	8d72 <hal_gpio_init_out>
    hal_gpio_init_out(LED_1, 1);
    8764:	2101      	movs	r1, #1
    8766:	201e      	movs	r0, #30
    8768:	f000 fb03 	bl	8d72 <hal_gpio_init_out>
    hal_gpio_init_out(LED_3, 1);
    876c:	2101      	movs	r1, #1
    876e:	2016      	movs	r0, #22
    8770:	f000 faff 	bl	8d72 <hal_gpio_init_out>

    struct uwb_dev * udev = uwb_dev_idx_lookup(0);
    8774:	2000      	movs	r0, #0
    8776:	f000 f967 	bl	8a48 <uwb_dev_idx_lookup>
    udev->config.rxauto_enable = false;
    udev->config.dblbuffon_enabled = false;
    877a:	f8b0 352c 	ldrh.w	r3, [r0, #1324]	; 0x52c
    877e:	f423 7388 	bic.w	r3, r3, #272	; 0x110
    8782:	f8a0 352c 	strh.w	r3, [r0, #1324]	; 0x52c
    return (dev->uw_funcs->uf_set_dblrxbuf(dev, enable));
    8786:	6a43      	ldr	r3, [r0, #36]	; 0x24
    struct uwb_dev * udev = uwb_dev_idx_lookup(0);
    8788:	4604      	mov	r4, r0
    878a:	6a1b      	ldr	r3, [r3, #32]
    878c:	2100      	movs	r1, #0
    878e:	4798      	blx	r3
    uwb_set_dblrxbuff(udev, udev->config.dblbuffon_enabled);

    struct nrng_instance* nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_NRNG);
    8790:	210b      	movs	r1, #11
    8792:	4620      	mov	r0, r4
    8794:	f000 f9cc 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    assert(nrng);
    8798:	4607      	mov	r7, r0
    879a:	b928      	cbnz	r0, 87a8 <main+0x68>
    879c:	2300      	movs	r3, #0
    879e:	461a      	mov	r2, r3
    87a0:	4619      	mov	r1, r3
    87a2:	4618      	mov	r0, r3
    87a4:	f000 fba6 	bl	8ef4 <__assert_func>
    memset(ev, 0, sizeof(*ev));
    87a8:	4b86      	ldr	r3, [pc, #536]	; (89c4 <main+0x284>)
    87aa:	2210      	movs	r2, #16
    87ac:	4618      	mov	r0, r3
    87ae:	2100      	movs	r1, #0
    87b0:	f006 ff25 	bl	f5fe <memset>
    ev->ev.ev_cb = (os_event_fn *)fn;
    87b4:	4a84      	ldr	r2, [pc, #528]	; (89c8 <main+0x288>)

    dpl_event_init(&nrng_complete_event, nrng_complete_cb, nrng);

    struct uwb_mac_interface cbs = (struct uwb_mac_interface){
    87b6:	2100      	movs	r1, #0
    ev->ev.ev_arg = arg;
    87b8:	e9c0 2701 	strd	r2, r7, [r0, #4]
    87bc:	223c      	movs	r2, #60	; 0x3c
    87be:	a805      	add	r0, sp, #20
    87c0:	f006 ff1d 	bl	f5fe <memset>
    87c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    87c8:	f8ad 3016 	strh.w	r3, [sp, #22]
        .id = UWBEXT_APP0,
        .inst_ptr = nrng,
        .complete_cb = complete_cb
    };

    uwb_mac_append_interface(udev, &cbs);
    87cc:	a905      	add	r1, sp, #20
    struct uwb_mac_interface cbs = (struct uwb_mac_interface){
    87ce:	4b7f      	ldr	r3, [pc, #508]	; (89cc <main+0x28c>)
    87d0:	9310      	str	r3, [sp, #64]	; 0x40
    uwb_mac_append_interface(udev, &cbs);
    87d2:	4620      	mov	r0, r4
    struct uwb_mac_interface cbs = (struct uwb_mac_interface){
    87d4:	9706      	str	r7, [sp, #24]
    uwb_mac_append_interface(udev, &cbs);
    87d6:	f000 f961 	bl	8a9c <uwb_mac_append_interface>
    udev->slot_id = 0xffff;
    87da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    87de:	f8a4 34c2 	strh.w	r3, [r4, #1218]	; 0x4c2
#if MYNEWT_VAL(BLEPRPH_ENABLED)
    ble_init(udev->euid);
#endif
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    87e2:	2101      	movs	r1, #1
    87e4:	4620      	mov	r0, r4
    87e6:	f000 f9a3 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    assert(ccp);
    87ea:	4606      	mov	r6, r0
    87ec:	2800      	cmp	r0, #0
    87ee:	d0d5      	beq.n	879c <main+0x5c>
    struct uwb_pan_instance *pan = (struct uwb_pan_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_PAN);
    87f0:	2111      	movs	r1, #17
    87f2:	4620      	mov	r0, r4
    87f4:	f000 f99c 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    assert(pan);
    87f8:	4605      	mov	r5, r0
    87fa:	2800      	cmp	r0, #0
    87fc:	d0ce      	beq.n	879c <main+0x5c>
    struct uwb_rng_instance* rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
    87fe:	2104      	movs	r1, #4
    8800:	4620      	mov	r0, r4
    8802:	f000 f995 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    assert(rng);
    8806:	4680      	mov	r8, r0
    8808:	2800      	cmp	r0, #0
    880a:	d0c7      	beq.n	879c <main+0x5c>

    if (udev->role&UWB_ROLE_CCP_MASTER) {
    880c:	f8b4 34b4 	ldrh.w	r3, [r4, #1204]	; 0x4b4
    8810:	07db      	lsls	r3, r3, #31
    8812:	f140 80bb 	bpl.w	898c <main+0x24c>
        /* Start as clock-master */
        uwb_ccp_start(ccp, CCP_ROLE_MASTER);
    8816:	2100      	movs	r1, #0
    8818:	4630      	mov	r0, r6
    881a:	f005 fceb 	bl	e1f4 <uwb_ccp_start>
    } else {
        uwb_ccp_start(ccp, CCP_ROLE_SLAVE);
        uwb_ccp_set_tof_comp_cb(ccp, tof_comp_cb);
    }

    if (udev->role&UWB_ROLE_PAN_MASTER) {
    881e:	f8b4 34b4 	ldrh.w	r3, [r4, #1204]	; 0x4b4
    8822:	f013 0f02 	tst.w	r3, #2
    8826:	f504 6998 	add.w	r9, r4, #1216	; 0x4c0
    882a:	f000 80b8 	beq.w	899e <main+0x25e>
        /* As pan-master, first lookup our address and slot_id */
        struct image_version fw_ver;
        struct panmaster_node *node;
        panmaster_idx_find_node(udev->euid, NETWORK_ROLE_ANCHOR, &node);
    882e:	ab02      	add	r3, sp, #8
    8830:	e959 0102 	ldrd	r0, r1, [r9, #-8]
    8834:	2201      	movs	r2, #1
    8836:	f003 f8db 	bl	b9f0 <panmaster_idx_find_node>
        assert(node);
    883a:	9b02      	ldr	r3, [sp, #8]
    883c:	2b00      	cmp	r3, #0
    883e:	d0ad      	beq.n	879c <main+0x5c>
        imgr_my_version(&fw_ver);
    8840:	a803      	add	r0, sp, #12
    8842:	f007 fb81 	bl	ff48 <imgr_my_version>
        node->fw_ver.iv_major = fw_ver.iv_major;
    8846:	9a02      	ldr	r2, [sp, #8]
    8848:	f89d 300c 	ldrb.w	r3, [sp, #12]
    884c:	75d3      	strb	r3, [r2, #23]
        node->fw_ver.iv_minor = fw_ver.iv_minor;
    884e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8852:	7613      	strb	r3, [r2, #24]
        node->fw_ver.iv_revision = fw_ver.iv_revision;
    8854:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8858:	f8a2 3019 	strh.w	r3, [r2, #25]
        node->fw_ver.iv_build_num = fw_ver.iv_build_num;
    885c:	9b04      	ldr	r3, [sp, #16]
        udev->my_short_address = node->addr;
    885e:	7c51      	ldrb	r1, [r2, #17]
        node->fw_ver.iv_build_num = fw_ver.iv_build_num;
    8860:	f8c2 301b 	str.w	r3, [r2, #27]
        udev->my_short_address = node->addr;
    8864:	7c13      	ldrb	r3, [r2, #16]
    8866:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    886a:	f8a4 34b6 	strh.w	r3, [r4, #1206]	; 0x4b6
        udev->slot_id = node->slot_id;
    886e:	7d53      	ldrb	r3, [r2, #21]
    8870:	7d92      	ldrb	r2, [r2, #22]
    8872:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8876:	f8a4 34c2 	strh.w	r3, [r4, #1218]	; 0x4c2
        panmaster_postprocess();
    887a:	f003 fa43 	bl	bd04 <panmaster_postprocess>
        uwb_pan_start(pan, UWB_PAN_ROLE_MASTER, NETWORK_ROLE_ANCHOR);
    887e:	2201      	movs	r2, #1
    8880:	4611      	mov	r1, r2
    } else {
        uwb_pan_set_postprocess(pan, pan_complete_cb);
        network_role_t role = (udev->role&UWB_ROLE_ANCHOR)?
            NETWORK_ROLE_ANCHOR : NETWORK_ROLE_TAG;
        uwb_pan_start(pan, UWB_PAN_ROLE_RELAY, role);
    8882:	4628      	mov	r0, r5
    8884:	f006 fb66 	bl	ef54 <uwb_pan_start>
    }

    uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    8888:	f000 fd6b 	bl	9362 <os_cputime_get32>
    printf("{\"utime\": %lu,\"exec\": \"%s\"}\n",utime,__FILE__);
    888c:	4a50      	ldr	r2, [pc, #320]	; (89d0 <main+0x290>)
    uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    888e:	4606      	mov	r6, r0
    printf("{\"utime\": %lu,\"exec\": \"%s\"}\n",utime,__FILE__);
    8890:	4601      	mov	r1, r0
    8892:	4850      	ldr	r0, [pc, #320]	; (89d4 <main+0x294>)
    8894:	f007 f9a2 	bl	fbdc <printf>
    printf("{\"device_id\":\"%lX\"",udev->device_id);
    8898:	f8d4 14c8 	ldr.w	r1, [r4, #1224]	; 0x4c8
    889c:	484e      	ldr	r0, [pc, #312]	; (89d8 <main+0x298>)
    889e:	f007 f99d 	bl	fbdc <printf>
    printf(",\"panid\":\"%X\"",udev->pan_id);
    88a2:	f8b4 14c0 	ldrh.w	r1, [r4, #1216]	; 0x4c0
    88a6:	484d      	ldr	r0, [pc, #308]	; (89dc <main+0x29c>)
    88a8:	f007 f998 	bl	fbdc <printf>
    printf(",\"addr\":\"%X\"",udev->uid);
    88ac:	f8b4 14b6 	ldrh.w	r1, [r4, #1206]	; 0x4b6
    88b0:	484b      	ldr	r0, [pc, #300]	; (89e0 <main+0x2a0>)
    88b2:	f007 f993 	bl	fbdc <printf>
    printf(",\"part_id\":\"%lX\"",(uint32_t)(udev->euid&0xffffffff));
    88b6:	f859 1c08 	ldr.w	r1, [r9, #-8]
    88ba:	484a      	ldr	r0, [pc, #296]	; (89e4 <main+0x2a4>)
    88bc:	f007 f98e 	bl	fbdc <printf>
    printf(",\"lot_id\":\"%lX\"}\n",(uint32_t)(udev->euid>>32));
    88c0:	f859 1c04 	ldr.w	r1, [r9, #-4]
    88c4:	4848      	ldr	r0, [pc, #288]	; (89e8 <main+0x2a8>)
    88c6:	f007 f989 	bl	fbdc <printf>
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    88ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    88cc:	211f      	movs	r1, #31
    88ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    88d0:	4620      	mov	r0, r4
    88d2:	4798      	blx	r3
    printf("{\"utime\": %lu,\"msg\": \"frame_duration = %d usec\"}\n",utime, uwb_phy_frame_duration(udev, sizeof(twr_frame_final_t)));
    88d4:	4631      	mov	r1, r6
    88d6:	4602      	mov	r2, r0
    88d8:	4844      	ldr	r0, [pc, #272]	; (89ec <main+0x2ac>)
    88da:	f007 f97f 	bl	fbdc <printf>
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    88de:	6a63      	ldr	r3, [r4, #36]	; 0x24
    88e0:	4620      	mov	r0, r4
    88e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    88e6:	4798      	blx	r3
    printf("{\"utime\": %lu,\"msg\": \"SHR_duration = %d usec\"}\n",utime, uwb_phy_SHR_duration(udev));
    88e8:	4631      	mov	r1, r6
    88ea:	4602      	mov	r2, r0
    88ec:	4840      	ldr	r0, [pc, #256]	; (89f0 <main+0x2b0>)
    88ee:	f007 f975 	bl	fbdc <printf>
    printf("{\"utime\": %lu,\"msg\": \"holdoff = %d usec\"}\n",utime,(uint16_t)ceilf(uwb_dwt_usecs_to_usecs(rng->config.tx_holdoff_delay)));
    88f2:	f8d8 0064 	ldr.w	r0, [r8, #100]	; 0x64
    88f6:	f017 fa69 	bl	1fdcc <__aeabi_ui2d>
    88fa:	a32f      	add	r3, pc, #188	; (adr r3, 89b8 <main+0x278>)
    88fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    8900:	f017 fade 	bl	1fec0 <__aeabi_dmul>
    8904:	f017 fdd4 	bl	204b0 <__aeabi_d2f>
    8908:	ee00 0a10 	vmov	s0, r0
    890c:	f018 f960 	bl	20bd0 <ceilf>
    8910:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    8914:	4631      	mov	r1, r6
    8916:	ee10 3a10 	vmov	r3, s0
    891a:	4836      	ldr	r0, [pc, #216]	; (89f4 <main+0x2b4>)
    891c:	b29a      	uxth	r2, r3
    891e:	f007 f95d 	bl	fbdc <printf>

    /* Pan is slots 1&2 */
    tdma_instance_t * tdma = (tdma_instance_t*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_TDMA);
    8922:	2103      	movs	r1, #3
    8924:	4620      	mov	r0, r4
    8926:	f000 f903 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    assert(tdma);
    892a:	4606      	mov	r6, r0
    892c:	2800      	cmp	r0, #0
    892e:	f43f af35 	beq.w	879c <main+0x5c>
    tdma_assign_slot(tdma, uwb_pan_slot_timer_cb, 1, (void*)pan);
    8932:	462b      	mov	r3, r5
    8934:	4930      	ldr	r1, [pc, #192]	; (89f8 <main+0x2b8>)
    8936:	2201      	movs	r2, #1
    8938:	f004 fe44 	bl	d5c4 <tdma_assign_slot>
    tdma_assign_slot(tdma, uwb_pan_slot_timer_cb, 2, (void*)pan);
    893c:	462b      	mov	r3, r5
    893e:	2202      	movs	r2, #2
    8940:	492d      	ldr	r1, [pc, #180]	; (89f8 <main+0x2b8>)
    tdma_assign_slot(tdma, survey_slot_broadcast_cb, MYNEWT_VAL(SURVEY_BROADCAST_SLOT), (void*)survey);
    for (uint16_t i = 6; i < MYNEWT_VAL(TDMA_NSLOTS); i++)
#else
    for (uint16_t i = 3; i < MYNEWT_VAL(TDMA_NSLOTS); i++)
#endif
        tdma_assign_slot(tdma, slot_cb, i, (void*)nrng);
    8942:	4d2e      	ldr	r5, [pc, #184]	; (89fc <main+0x2bc>)
    tdma_assign_slot(tdma, uwb_pan_slot_timer_cb, 2, (void*)pan);
    8944:	4630      	mov	r0, r6
    8946:	f004 fe3d 	bl	d5c4 <tdma_assign_slot>
    survey_instance_t *survey = (survey_instance_t*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_SURVEY);
    894a:	2150      	movs	r1, #80	; 0x50
    894c:	4620      	mov	r0, r4
    894e:	f000 f8ef 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    tdma_assign_slot(tdma, survey_slot_range_cb, MYNEWT_VAL(SURVEY_RANGE_SLOT), (void*)survey);
    8952:	492b      	ldr	r1, [pc, #172]	; (8a00 <main+0x2c0>)
    8954:	9001      	str	r0, [sp, #4]
    survey_instance_t *survey = (survey_instance_t*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_SURVEY);
    8956:	4603      	mov	r3, r0
    tdma_assign_slot(tdma, survey_slot_range_cb, MYNEWT_VAL(SURVEY_RANGE_SLOT), (void*)survey);
    8958:	2203      	movs	r2, #3
    895a:	4630      	mov	r0, r6
    895c:	f004 fe32 	bl	d5c4 <tdma_assign_slot>
    tdma_assign_slot(tdma, survey_slot_broadcast_cb, MYNEWT_VAL(SURVEY_BROADCAST_SLOT), (void*)survey);
    8960:	9b01      	ldr	r3, [sp, #4]
    8962:	4928      	ldr	r1, [pc, #160]	; (8a04 <main+0x2c4>)
    8964:	2204      	movs	r2, #4
    8966:	4630      	mov	r0, r6
    8968:	f004 fe2c 	bl	d5c4 <tdma_assign_slot>
    for (uint16_t i = 6; i < MYNEWT_VAL(TDMA_NSLOTS); i++)
    896c:	2406      	movs	r4, #6
        tdma_assign_slot(tdma, slot_cb, i, (void*)nrng);
    896e:	4622      	mov	r2, r4
    for (uint16_t i = 6; i < MYNEWT_VAL(TDMA_NSLOTS); i++)
    8970:	3401      	adds	r4, #1
        tdma_assign_slot(tdma, slot_cb, i, (void*)nrng);
    8972:	463b      	mov	r3, r7
    8974:	4629      	mov	r1, r5
    8976:	4630      	mov	r0, r6
    for (uint16_t i = 6; i < MYNEWT_VAL(TDMA_NSLOTS); i++)
    8978:	b2a4      	uxth	r4, r4
        tdma_assign_slot(tdma, slot_cb, i, (void*)nrng);
    897a:	f004 fe23 	bl	d5c4 <tdma_assign_slot>
    for (uint16_t i = 6; i < MYNEWT_VAL(TDMA_NSLOTS); i++)
    897e:	2ca0      	cmp	r4, #160	; 0xa0
    8980:	d1f5      	bne.n	896e <main+0x22e>

    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    8982:	f000 fe4b 	bl	961c <os_eventq_dflt_get>
    8986:	f000 fe1c 	bl	95c2 <os_eventq_run>
    while (1) {
    898a:	e7fa      	b.n	8982 <main+0x242>
        uwb_ccp_start(ccp, CCP_ROLE_SLAVE);
    898c:	4630      	mov	r0, r6
    898e:	2101      	movs	r1, #1
    8990:	f005 fc30 	bl	e1f4 <uwb_ccp_start>
        uwb_ccp_set_tof_comp_cb(ccp, tof_comp_cb);
    8994:	491c      	ldr	r1, [pc, #112]	; (8a08 <main+0x2c8>)
    8996:	4630      	mov	r0, r6
    8998:	f005 fb1a 	bl	dfd0 <uwb_ccp_set_tof_comp_cb>
    899c:	e73f      	b.n	881e <main+0xde>
        uwb_pan_set_postprocess(pan, pan_complete_cb);
    899e:	491b      	ldr	r1, [pc, #108]	; (8a0c <main+0x2cc>)
    89a0:	4628      	mov	r0, r5
    89a2:	f002 ff63 	bl	b86c <uwb_pan_set_postprocess>
            NETWORK_ROLE_ANCHOR : NETWORK_ROLE_TAG;
    89a6:	f8b4 34b4 	ldrh.w	r3, [r4, #1204]	; 0x4b4
    89aa:	f013 0f04 	tst.w	r3, #4
        uwb_pan_start(pan, UWB_PAN_ROLE_RELAY, role);
    89ae:	bf14      	ite	ne
    89b0:	2201      	movne	r2, #1
    89b2:	2202      	moveq	r2, #2
    89b4:	2103      	movs	r1, #3
    89b6:	e764      	b.n	8882 <main+0x142>
    89b8:	90690691 	.word	0x90690691
    89bc:	3ff06906 	.word	0x3ff06906
    89c0:	20000540 	.word	0x20000540
    89c4:	200013d0 	.word	0x200013d0
    89c8:	00008521 	.word	0x00008521
    89cc:	00008575 	.word	0x00008575
    89d0:	000219de 	.word	0x000219de
    89d4:	000219ff 	.word	0x000219ff
    89d8:	00021a1c 	.word	0x00021a1c
    89dc:	00021a2f 	.word	0x00021a2f
    89e0:	00021a3d 	.word	0x00021a3d
    89e4:	00021a4a 	.word	0x00021a4a
    89e8:	00021a5b 	.word	0x00021a5b
    89ec:	00021a6d 	.word	0x00021a6d
    89f0:	00021a9f 	.word	0x00021a9f
    89f4:	00021acf 	.word	0x00021acf
    89f8:	0000efa5 	.word	0x0000efa5
    89fc:	000085e9 	.word	0x000085e9
    8a00:	0000cec1 	.word	0x0000cec1
    8a04:	0000d0d9 	.word	0x0000d0d9
    8a08:	000084f1 	.word	0x000084f1
    8a0c:	00008495 	.word	0x00008495

00008a10 <NVIC_Relocate>:
extern char __isr_vector[];
extern char __vector_tbl_reloc__[];

void
NVIC_Relocate(void)
{
    8a10:	b508      	push	{r3, lr}
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    8a12:	4906      	ldr	r1, [pc, #24]	; (8a2c <NVIC_Relocate+0x1c>)
    8a14:	4b06      	ldr	r3, [pc, #24]	; (8a30 <NVIC_Relocate+0x20>)
    8a16:	428b      	cmp	r3, r1
    8a18:	d004      	beq.n	8a24 <NVIC_Relocate+0x14>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
            new_location[i] = current_location[i];
    8a1a:	4618      	mov	r0, r3
    8a1c:	22d8      	movs	r2, #216	; 0xd8
    8a1e:	f006 fde1 	bl	f5e4 <memcpy>
    8a22:	4603      	mov	r3, r0
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    8a24:	4a03      	ldr	r2, [pc, #12]	; (8a34 <NVIC_Relocate+0x24>)
    8a26:	6093      	str	r3, [r2, #8]
#endif
}
    8a28:	bd08      	pop	{r3, pc}
    8a2a:	bf00      	nop
    8a2c:	00008020 	.word	0x00008020
    8a30:	20000000 	.word	0x20000000
    8a34:	e000ed00 	.word	0xe000ed00

00008a38 <uwb_interrupt_task>:
 * @param arg  Pointer to the queue of interrupts.
 * @return void
 */
static void *
uwb_interrupt_task(void *arg)
{
    8a38:	b510      	push	{r4, lr}
    struct uwb_dev * inst = (struct uwb_dev *)arg;
    while (1) {
        dpl_eventq_run(&inst->eventq);
    8a3a:	f100 043c 	add.w	r4, r0, #60	; 0x3c
    os_eventq_run((struct os_eventq * )evq);
    8a3e:	4620      	mov	r0, r4
    8a40:	f000 fdbf 	bl	95c2 <os_eventq_run>
    8a44:	e7fb      	b.n	8a3e <uwb_interrupt_task+0x6>
	...

00008a48 <uwb_dev_idx_lookup>:
{
    8a48:	b510      	push	{r4, lr}
    const char base1k[] = "dw1000_%d";
    8a4a:	4c12      	ldr	r4, [pc, #72]	; (8a94 <uwb_dev_idx_lookup+0x4c>)
{
    8a4c:	b08c      	sub	sp, #48	; 0x30
    8a4e:	4603      	mov	r3, r0
    const char base1k[] = "dw1000_%d";
    8a50:	6861      	ldr	r1, [r4, #4]
    8a52:	6820      	ldr	r0, [r4, #0]
    snprintf(buf, sizeof buf, base1k, idx);
    8a54:	9301      	str	r3, [sp, #4]
    const char base1k[] = "dw1000_%d";
    8a56:	aa03      	add	r2, sp, #12
    8a58:	c203      	stmia	r2!, {r0, r1}
    8a5a:	8921      	ldrh	r1, [r4, #8]
    const char base3k[] = "dw3000_%d";
    8a5c:	4c0e      	ldr	r4, [pc, #56]	; (8a98 <uwb_dev_idx_lookup+0x50>)
    const char base1k[] = "dw1000_%d";
    8a5e:	8011      	strh	r1, [r2, #0]
    const char base3k[] = "dw3000_%d";
    8a60:	6820      	ldr	r0, [r4, #0]
    8a62:	6861      	ldr	r1, [r4, #4]
    8a64:	aa06      	add	r2, sp, #24
    8a66:	c203      	stmia	r2!, {r0, r1}
    8a68:	8921      	ldrh	r1, [r4, #8]
    8a6a:	8011      	strh	r1, [r2, #0]
    snprintf(buf, sizeof buf, base1k, idx);
    8a6c:	a809      	add	r0, sp, #36	; 0x24
    8a6e:	aa03      	add	r2, sp, #12
    8a70:	210c      	movs	r1, #12
    8a72:	f007 f8e3 	bl	fc3c <snprintf>
    odev = os_dev_lookup(buf);
    8a76:	a809      	add	r0, sp, #36	; 0x24
    8a78:	f000 fcf0 	bl	945c <os_dev_lookup>
    if (!odev) {
    8a7c:	9b01      	ldr	r3, [sp, #4]
    8a7e:	b938      	cbnz	r0, 8a90 <uwb_dev_idx_lookup+0x48>
        snprintf(buf, sizeof buf, base3k, idx);
    8a80:	aa06      	add	r2, sp, #24
    8a82:	210c      	movs	r1, #12
    8a84:	a809      	add	r0, sp, #36	; 0x24
    8a86:	f007 f8d9 	bl	fc3c <snprintf>
        odev = os_dev_lookup(buf);
    8a8a:	a809      	add	r0, sp, #36	; 0x24
    8a8c:	f000 fce6 	bl	945c <os_dev_lookup>
}
    8a90:	b00c      	add	sp, #48	; 0x30
    8a92:	bd10      	pop	{r4, pc}
    8a94:	00021afa 	.word	0x00021afa
    8a98:	00021b04 	.word	0x00021b04

00008a9c <uwb_mac_append_interface>:
{
    8a9c:	b508      	push	{r3, lr}
    assert(dev);
    8a9e:	b928      	cbnz	r0, 8aac <uwb_mac_append_interface+0x10>
    8aa0:	2300      	movs	r3, #0
    8aa2:	461a      	mov	r2, r3
    8aa4:	4619      	mov	r1, r3
    8aa6:	4618      	mov	r0, r3
    8aa8:	f000 fa24 	bl	8ef4 <__assert_func>
    assert(cbs);
    8aac:	2900      	cmp	r1, #0
    8aae:	d0f7      	beq.n	8aa0 <uwb_mac_append_interface+0x4>
    cbs->status.initialized = true;
    8ab0:	780b      	ldrb	r3, [r1, #0]
    8ab2:	f043 0301 	orr.w	r3, r3, #1
    8ab6:	700b      	strb	r3, [r1, #0]
    if(!(SLIST_EMPTY(&dev->interface_cbs))) {
    8ab8:	f8d0 3530 	ldr.w	r3, [r0, #1328]	; 0x530
    8abc:	b13b      	cbz	r3, 8ace <uwb_mac_append_interface+0x32>
        SLIST_FOREACH(cur_cbs, &dev->interface_cbs, next){
    8abe:	461a      	mov	r2, r3
    8ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8ac2:	2b00      	cmp	r3, #0
    8ac4:	d1fb      	bne.n	8abe <uwb_mac_append_interface+0x22>
        SLIST_INSERT_AFTER(prev_cbs, cbs, next);
    8ac6:	638b      	str	r3, [r1, #56]	; 0x38
    8ac8:	6391      	str	r1, [r2, #56]	; 0x38
}
    8aca:	4608      	mov	r0, r1
    8acc:	bd08      	pop	{r3, pc}
        SLIST_INSERT_HEAD(&dev->interface_cbs, cbs, next);
    8ace:	638b      	str	r3, [r1, #56]	; 0x38
    8ad0:	f8c0 1530 	str.w	r1, [r0, #1328]	; 0x530
    8ad4:	e7f9      	b.n	8aca <uwb_mac_append_interface+0x2e>

00008ad6 <uwb_mac_remove_interface>:
{
    8ad6:	b510      	push	{r4, lr}
    assert(dev);
    8ad8:	4603      	mov	r3, r0
    8ada:	b918      	cbnz	r0, 8ae4 <uwb_mac_remove_interface+0xe>
    8adc:	4602      	mov	r2, r0
    8ade:	4601      	mov	r1, r0
    8ae0:	f000 fa08 	bl	8ef4 <__assert_func>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8ae4:	f8d0 4530 	ldr.w	r4, [r0, #1328]	; 0x530
    8ae8:	4622      	mov	r2, r4
    8aea:	b13a      	cbz	r2, 8afc <uwb_mac_remove_interface+0x26>
        if(cbs->id == id){
    8aec:	8850      	ldrh	r0, [r2, #2]
    8aee:	4288      	cmp	r0, r1
    8af0:	d10c      	bne.n	8b0c <uwb_mac_remove_interface+0x36>
            SLIST_REMOVE(&dev->interface_cbs, cbs, uwb_mac_interface, next);
    8af2:	42a2      	cmp	r2, r4
    8af4:	d103      	bne.n	8afe <uwb_mac_remove_interface+0x28>
    8af6:	6b92      	ldr	r2, [r2, #56]	; 0x38
    8af8:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
}
    8afc:	bd10      	pop	{r4, pc}
            SLIST_REMOVE(&dev->interface_cbs, cbs, uwb_mac_interface, next);
    8afe:	4623      	mov	r3, r4
    8b00:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    8b02:	4294      	cmp	r4, r2
    8b04:	d1fb      	bne.n	8afe <uwb_mac_remove_interface+0x28>
    8b06:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    8b08:	639a      	str	r2, [r3, #56]	; 0x38
    8b0a:	e7f7      	b.n	8afc <uwb_mac_remove_interface+0x26>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8b0c:	6b92      	ldr	r2, [r2, #56]	; 0x38
    8b0e:	e7ec      	b.n	8aea <uwb_mac_remove_interface+0x14>

00008b10 <uwb_mac_get_interface>:
{
    8b10:	b508      	push	{r3, lr}
    assert(dev);
    8b12:	4603      	mov	r3, r0
    8b14:	b918      	cbnz	r0, 8b1e <uwb_mac_get_interface+0xe>
    8b16:	4602      	mov	r2, r0
    8b18:	4601      	mov	r1, r0
    8b1a:	f000 f9eb 	bl	8ef4 <__assert_func>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8b1e:	f8d0 0530 	ldr.w	r0, [r0, #1328]	; 0x530
    8b22:	b900      	cbnz	r0, 8b26 <uwb_mac_get_interface+0x16>
}
    8b24:	bd08      	pop	{r3, pc}
        if(cbs->id == id){
    8b26:	8843      	ldrh	r3, [r0, #2]
    8b28:	428b      	cmp	r3, r1
    8b2a:	d0fb      	beq.n	8b24 <uwb_mac_get_interface+0x14>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8b2c:	6b80      	ldr	r0, [r0, #56]	; 0x38
    8b2e:	e7f8      	b.n	8b22 <uwb_mac_get_interface+0x12>

00008b30 <uwb_mac_find_cb_inst_ptr>:
{
    8b30:	b508      	push	{r3, lr}
    struct uwb_mac_interface * cbs = uwb_mac_get_interface(dev, id);
    8b32:	f7ff ffed 	bl	8b10 <uwb_mac_get_interface>
    if (cbs) {
    8b36:	b100      	cbz	r0, 8b3a <uwb_mac_find_cb_inst_ptr+0xa>
        return cbs->inst_ptr;
    8b38:	6840      	ldr	r0, [r0, #4]
}
    8b3a:	bd08      	pop	{r3, pc}

00008b3c <uwb_task_init>:
 *
 * @return void
 */
void
uwb_task_init(struct uwb_dev * inst, void (*irq_ev_cb)(struct dpl_event*))
{
    8b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rc;
    /* Check if the task is already initiated */
    if (!dpl_eventq_inited(&inst->eventq))
    8b3e:	f100 073c 	add.w	r7, r0, #60	; 0x3c
{
    8b42:	b085      	sub	sp, #20
    8b44:	4604      	mov	r4, r0
    return os_eventq_inited((struct os_eventq *) evq);
    8b46:	4638      	mov	r0, r7
    8b48:	460e      	mov	r6, r1
    8b4a:	f000 fcbb 	bl	94c4 <os_eventq_inited>
    if (!dpl_eventq_inited(&inst->eventq))
    8b4e:	4605      	mov	r5, r0
    8b50:	bb48      	cbnz	r0, 8ba6 <uwb_task_init+0x6a>
    os_eventq_init((struct os_eventq *) evq);
    8b52:	4638      	mov	r0, r7
    8b54:	f000 fcac 	bl	94b0 <os_eventq_init>
    memset(ev, 0, sizeof(*ev));
    8b58:	4629      	mov	r1, r5
    8b5a:	2210      	movs	r2, #16
    8b5c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    8b60:	f006 fd4d 	bl	f5fe <memset>
    ev->ev.ev_arg = arg;
    8b64:	e9c4 6414 	strd	r6, r4, [r4, #80]	; 0x50
}

static inline dpl_error_t
dpl_sem_init(struct dpl_sem *sem, uint16_t tokens)
{
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    8b68:	2101      	movs	r1, #1
    8b6a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    8b6e:	f001 f859 	bl	9c24 <os_sem_init>
         */
        dpl_event_init(&inst->interrupt_ev, irq_ev_cb, (void *)inst);

        /* IRQ / ISR Semaphore init */
        rc = dpl_sem_init(&inst->irq_sem, 0x1);
        assert(rc == DPL_OK);
    8b72:	b128      	cbz	r0, 8b80 <uwb_task_init+0x44>
    8b74:	462b      	mov	r3, r5
    8b76:	462a      	mov	r2, r5
    8b78:	4629      	mov	r1, r5
    8b7a:	4628      	mov	r0, r5
    8b7c:	f000 f9ba 	bl	8ef4 <__assert_func>
static inline int dpl_task_init(struct dpl_task *t, const char *name, dpl_task_func_t func,
		 void *arg, uint8_t prio, dpl_time_t sanity_itvl,
		 os_stack_t * stack_bottom, uint16_t stack_size)
{

    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    8b80:	f44f 7380 	mov.w	r3, #256	; 0x100
    8b84:	9303      	str	r3, [sp, #12]
#ifndef __KERNEL__
        dpl_task_init(&inst->task_str, "uwb_irq",
                      uwb_interrupt_task,
                      (void *) inst,
                      inst->task_prio, DPL_WAIT_FOREVER,
                      inst->task_stack,
    8b86:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
    8b8a:	9302      	str	r3, [sp, #8]
    8b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8b90:	9301      	str	r3, [sp, #4]
    8b92:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    8b96:	9300      	str	r3, [sp, #0]
    8b98:	4a04      	ldr	r2, [pc, #16]	; (8bac <uwb_task_init+0x70>)
    8b9a:	4905      	ldr	r1, [pc, #20]	; (8bb0 <uwb_task_init+0x74>)
    8b9c:	4623      	mov	r3, r4
    8b9e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8ba2:	f001 f8cf 	bl	9d44 <os_task_init>
                      MYNEWT_VAL(UWB_DEV_TASK_STACK_SZ));
#endif
    }
}
    8ba6:	b005      	add	sp, #20
    8ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8baa:	bf00      	nop
    8bac:	00008a39 	.word	0x00008a39
    8bb0:	00021b0e 	.word	0x00021b0e

00008bb4 <uwb_task_deinit>:

void
uwb_task_deinit(struct uwb_dev * inst)
{
    8bb4:	b510      	push	{r4, lr}
    8bb6:	4604      	mov	r4, r0
    return os_eventq_inited((struct os_eventq *) evq);
    8bb8:	303c      	adds	r0, #60	; 0x3c
    8bba:	f000 fc83 	bl	94c4 <os_eventq_inited>
    if (dpl_eventq_inited(&inst->eventq))
    8bbe:	b128      	cbz	r0, 8bcc <uwb_task_deinit+0x18>
        (os_stack_t *) stack_bottom, stack_size) ;
}

static inline int dpl_task_remove(struct dpl_task * t)
{
    return os_task_remove((struct os_task * ) t);
    8bc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    {
        dpl_task_remove(&inst->task_str);
        dpl_eventq_deinit(&inst->eventq);
    }
}
    8bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8bc8:	f001 b92e 	b.w	9e28 <os_task_remove>
    8bcc:	bd10      	pop	{r4, pc}

00008bce <uwb_dev_init>:

void
uwb_dev_init(struct uwb_dev * inst)
{
    if (!inst->txbuf) {
    8bce:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
{
    8bd2:	b510      	push	{r4, lr}
    8bd4:	4604      	mov	r4, r0
    if (!inst->txbuf) {
    8bd6:	b963      	cbnz	r3, 8bf2 <uwb_dev_init+0x24>
        if (!inst->txbuf) {
            printk("ERROR, can't allocate txbuf\n");
            assert(inst->txbuf);
        }
#else
        inst->txbuf = malloc(inst->txbuf_size);
    8bd8:	f8b0 0506 	ldrh.w	r0, [r0, #1286]	; 0x506
    8bdc:	f006 fc7c 	bl	f4d8 <malloc>
    8be0:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
        assert(inst->txbuf);
    8be4:	b928      	cbnz	r0, 8bf2 <uwb_dev_init+0x24>
    8be6:	2300      	movs	r3, #0
    8be8:	461a      	mov	r2, r3
    8bea:	4619      	mov	r1, r3
    8bec:	4618      	mov	r0, r3
    8bee:	f000 f981 	bl	8ef4 <__assert_func>
#endif
    }
    if (!inst->rxbuf) {
    8bf2:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
    8bf6:	b93b      	cbnz	r3, 8c08 <uwb_dev_init+0x3a>
        if (!inst->rxbuf) {
            printk("ERROR, can't allocate rxbuf\n");
            assert(inst->rxbuf);
        }
#else
        inst->rxbuf = malloc(inst->rxbuf_size);
    8bf8:	f8b4 0504 	ldrh.w	r0, [r4, #1284]	; 0x504
    8bfc:	f006 fc6c 	bl	f4d8 <malloc>
    8c00:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
        assert(inst->rxbuf);
    8c04:	2800      	cmp	r0, #0
    8c06:	d0ee      	beq.n	8be6 <uwb_dev_init+0x18>
#endif
    }
}
    8c08:	bd10      	pop	{r4, pc}
    8c0a:	0000      	movs	r0, r0
    8c0c:	0000      	movs	r0, r0
	...

00008c10 <uwb_calc_aoa>:
 *
 * returns angle of arrival - float, in radians
 */
dpl_float32_t
uwb_calc_aoa(dpl_float32_t pdoa, int channel, dpl_float32_t antenna_separation)
{
    8c10:	b508      	push	{r3, lr}
    dpl_float32_t pd_dist, wavelength;
    dpl_float32_t frequency = DPL_FLOAT32_INIT(0);
    switch(channel) {
    8c12:	3801      	subs	r0, #1
{
    8c14:	ed2d 8b02 	vpush	{d8}
    8c18:	ee10 3a10 	vmov	r3, s0
    8c1c:	eef0 8a60 	vmov.f32	s17, s1
    switch(channel) {
    8c20:	2808      	cmp	r0, #8
    8c22:	d833      	bhi.n	8c8c <uwb_calc_aoa+0x7c>
    8c24:	e8df f000 	tbb	[pc, r0]
    8c28:	3b3b0538 	.word	0x3b3b0538
    8c2c:	322c322c 	.word	0x322c322c
    8c30:	2f          	.byte	0x2f
    8c31:	00          	.byte	0x00
    8c32:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8cb0 <uwb_calc_aoa+0xa0>
    case (7): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_7);break;
    case (9): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_9);break;
    default: assert(0); break;
    }
    wavelength = DPL_FLOAT32_DIV(DPL_FLOAT32_INIT(SPEED_OF_LIGHT), frequency);
    pd_dist = DPL_FLOAT32_DIV(pdoa, DPL_FLOAT32_INIT(2.0f*M_PI));
    8c36:	4618      	mov	r0, r3
    8c38:	f017 f8ea 	bl	1fe10 <__aeabi_f2d>
    8c3c:	a31a      	add	r3, pc, #104	; (adr r3, 8ca8 <uwb_calc_aoa+0x98>)
    8c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c42:	f017 fa67 	bl	20114 <__aeabi_ddiv>
    8c46:	f017 fc33 	bl	204b0 <__aeabi_d2f>
    wavelength = DPL_FLOAT32_DIV(DPL_FLOAT32_INIT(SPEED_OF_LIGHT), frequency);
    8c4a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8cb4 <uwb_calc_aoa+0xa4>
    8c4e:	eec7 7a08 	vdiv.f32	s15, s14, s16
    pd_dist = DPL_FLOAT32_MUL(pd_dist, wavelength);
    8c52:	ee07 0a10 	vmov	s14, r0
    8c56:	ee67 7a87 	vmul.f32	s15, s15, s14
    return DPL_FLOAT32_FROM_F64(
    8c5a:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    8c5e:	ee17 0a90 	vmov	r0, s15
    8c62:	f017 f8d5 	bl	1fe10 <__aeabi_f2d>
    8c66:	ec41 0b10 	vmov	d0, r0, r1
    8c6a:	f017 fff7 	bl	20c5c <asin>
    8c6e:	ec51 0b10 	vmov	r0, r1, d0
    8c72:	f017 fc1d 	bl	204b0 <__aeabi_d2f>
        DPL_FLOAT64_ASIN(DPL_FLOAT64_FROM_F32(
                         DPL_FLOAT32_DIV(pd_dist, antenna_separation)
                         )
            )
        );
}
    8c76:	ecbd 8b02 	vpop	{d8}
    8c7a:	ee00 0a10 	vmov	s0, r0
    8c7e:	bd08      	pop	{r3, pc}
    case (5): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_5);break;
    8c80:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8cb8 <uwb_calc_aoa+0xa8>
    8c84:	e7d7      	b.n	8c36 <uwb_calc_aoa+0x26>
    case (9): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_9);break;
    8c86:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8cbc <uwb_calc_aoa+0xac>
    8c8a:	e7d4      	b.n	8c36 <uwb_calc_aoa+0x26>
    default: assert(0); break;
    8c8c:	2300      	movs	r3, #0
    8c8e:	461a      	mov	r2, r3
    8c90:	4619      	mov	r1, r3
    8c92:	4618      	mov	r0, r3
    8c94:	f000 f92e 	bl	8ef4 <__assert_func>
    case (1): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_1);break;
    8c98:	ed9f 8a09 	vldr	s16, [pc, #36]	; 8cc0 <uwb_calc_aoa+0xb0>
    8c9c:	e7cb      	b.n	8c36 <uwb_calc_aoa+0x26>
    case (3): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_3);break;
    8c9e:	ed9f 8a09 	vldr	s16, [pc, #36]	; 8cc4 <uwb_calc_aoa+0xb4>
    8ca2:	e7c8      	b.n	8c36 <uwb_calc_aoa+0x26>
    8ca4:	f3af 8000 	nop.w
    8ca8:	54442d18 	.word	0x54442d18
    8cac:	401921fb 	.word	0x401921fb
    8cb0:	4f6e0980 	.word	0x4f6e0980
    8cb4:	4d8ef3c2 	.word	0x4d8ef3c2
    8cb8:	4fc167b8 	.word	0x4fc167b8
    8cbc:	4fee0980 	.word	0x4fee0980
    8cc0:	4f504850 	.word	0x4f504850
    8cc4:	4f85e558 	.word	0x4f85e558

00008cc8 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
    8cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8ccc:	2400      	movs	r4, #0
    8cce:	4d0f      	ldr	r5, [pc, #60]	; (8d0c <hal_gpio_irq_handler+0x44>)
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
    8cd0:	4e0f      	ldr	r6, [pc, #60]	; (8d10 <hal_gpio_irq_handler+0x48>)
    8cd2:	2701      	movs	r7, #1
            NRF_GPIOTE->EVENTS_IN[i] = 0;
    8cd4:	46a0      	mov	r8, r4
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
    8cd6:	00a3      	lsls	r3, r4, #2
    8cd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8cdc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    8ce0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    8ce4:	b15a      	cbz	r2, 8cfe <hal_gpio_irq_handler+0x36>
    8ce6:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
    8cea:	fa07 f104 	lsl.w	r1, r7, r4
    8cee:	4211      	tst	r1, r2
    8cf0:	d005      	beq.n	8cfe <hal_gpio_irq_handler+0x36>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
    8cf2:	f8c3 8100 	str.w	r8, [r3, #256]	; 0x100
            if (hal_gpio_irqs[i].func) {
    8cf6:	682b      	ldr	r3, [r5, #0]
    8cf8:	b10b      	cbz	r3, 8cfe <hal_gpio_irq_handler+0x36>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
    8cfa:	6868      	ldr	r0, [r5, #4]
    8cfc:	4798      	blx	r3
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8cfe:	3401      	adds	r4, #1
    8d00:	2c08      	cmp	r4, #8
    8d02:	f105 0508 	add.w	r5, r5, #8
    8d06:	d1e6      	bne.n	8cd6 <hal_gpio_irq_handler+0xe>
        }
#endif
    }

    os_trace_isr_exit();
}
    8d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d0c:	200013e4 	.word	0x200013e4
    8d10:	40006000 	.word	0x40006000

00008d14 <hal_gpio_find_pin>:
/*
 * Find the GPIOTE event which handles this pin.
 */
static int
hal_gpio_find_pin(int pin)
{
    8d14:	b510      	push	{r4, lr}
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
        if (hal_gpio_irqs[i].func &&
    8d16:	490a      	ldr	r1, [pc, #40]	; (8d40 <hal_gpio_find_pin+0x2c>)
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
    8d18:	4c0a      	ldr	r4, [pc, #40]	; (8d44 <hal_gpio_find_pin+0x30>)
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
    8d1a:	0203      	lsls	r3, r0, #8
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8d1c:	2000      	movs	r0, #0
        if (hal_gpio_irqs[i].func &&
    8d1e:	f851 2030 	ldr.w	r2, [r1, r0, lsl #3]
    8d22:	b13a      	cbz	r2, 8d34 <hal_gpio_find_pin+0x20>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
    8d24:	f500 72a2 	add.w	r2, r0, #324	; 0x144
    8d28:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    8d2c:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
    8d30:	429a      	cmp	r2, r3
    8d32:	d004      	beq.n	8d3e <hal_gpio_find_pin+0x2a>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8d34:	3001      	adds	r0, #1
    8d36:	2808      	cmp	r0, #8
    8d38:	d1f1      	bne.n	8d1e <hal_gpio_find_pin+0xa>
            return i;
        }
    }
#endif

    return -1;
    8d3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    8d3e:	bd10      	pop	{r4, pc}
    8d40:	200013e4 	.word	0x200013e4
    8d44:	40006000 	.word	0x40006000

00008d48 <hal_gpio_init_in>:
    switch (pull) {
    8d48:	2901      	cmp	r1, #1
    8d4a:	d010      	beq.n	8d6e <hal_gpio_init_in+0x26>
    8d4c:	2902      	cmp	r1, #2
    8d4e:	bf14      	ite	ne
    8d50:	2300      	movne	r3, #0
    8d52:	2304      	moveq	r3, #4
    port->PIN_CNF[pin_index] = conf;
    8d54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8d58:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
    8d5c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
    8d60:	2301      	movs	r3, #1
    8d62:	fa03 f000 	lsl.w	r0, r3, r0
    8d66:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
    8d6a:	2000      	movs	r0, #0
    8d6c:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
    8d6e:	230c      	movs	r3, #12
    8d70:	e7f0      	b.n	8d54 <hal_gpio_init_in+0xc>

00008d72 <hal_gpio_init_out>:
        port->OUTSET = HAL_GPIO_MASK(pin);
    8d72:	2301      	movs	r3, #1
    8d74:	4083      	lsls	r3, r0
    8d76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    if (val) {
    8d7a:	b151      	cbz	r1, 8d92 <hal_gpio_init_out+0x20>
        port->OUTSET = HAL_GPIO_MASK(pin);
    8d7c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
    8d80:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    8d84:	2103      	movs	r1, #3
    8d86:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
    8d8a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
}
    8d8e:	2000      	movs	r0, #0
    8d90:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
    8d92:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    8d96:	e7f3      	b.n	8d80 <hal_gpio_init_out+0xe>

00008d98 <hal_gpio_write>:
        port->OUTSET = HAL_GPIO_MASK(pin);
    8d98:	2301      	movs	r3, #1
    8d9a:	fa03 f000 	lsl.w	r0, r3, r0
    8d9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    if (val) {
    8da2:	b111      	cbz	r1, 8daa <hal_gpio_write+0x12>
        port->OUTSET = HAL_GPIO_MASK(pin);
    8da4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    8da8:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
    8daa:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    8dae:	4770      	bx	lr

00008db0 <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
    8db0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8db4:	2201      	movs	r2, #1
    8db6:	f8d3 1514 	ldr.w	r1, [r3, #1300]	; 0x514
    8dba:	4082      	lsls	r2, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    8dbc:	420a      	tst	r2, r1
    8dbe:	bf14      	ite	ne
    8dc0:	f8d3 3504 	ldrne.w	r3, [r3, #1284]	; 0x504
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
    8dc4:	f8d3 3510 	ldreq.w	r3, [r3, #1296]	; 0x510
    8dc8:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    8dcc:	f000 0001 	and.w	r0, r0, #1
}
    8dd0:	4770      	bx	lr

00008dd2 <hal_gpio_toggle>:
{
    8dd2:	b510      	push	{r4, lr}
    8dd4:	4604      	mov	r4, r0
    int pin_state = (hal_gpio_read(pin) == 0);
    8dd6:	f7ff ffeb 	bl	8db0 <hal_gpio_read>
    8dda:	fab0 f180 	clz	r1, r0
    8dde:	0949      	lsrs	r1, r1, #5
    hal_gpio_write(pin, pin_state);
    8de0:	4620      	mov	r0, r4
    8de2:	f7ff ffd9 	bl	8d98 <hal_gpio_write>
}
    8de6:	4608      	mov	r0, r1
    8de8:	bd10      	pop	{r4, pc}
	...

00008dec <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
    8dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8df0:	461c      	mov	r4, r3
    if (!irq_setup) {
    8df2:	4b1b      	ldr	r3, [pc, #108]	; (8e60 <hal_gpio_irq_init+0x74>)
{
    8df4:	4691      	mov	r9, r2
    if (!irq_setup) {
    8df6:	781a      	ldrb	r2, [r3, #0]
{
    8df8:	4607      	mov	r7, r0
    8dfa:	4688      	mov	r8, r1
    if (!irq_setup) {
    8dfc:	b942      	cbnz	r2, 8e10 <hal_gpio_irq_init+0x24>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    8dfe:	4a19      	ldr	r2, [pc, #100]	; (8e64 <hal_gpio_irq_init+0x78>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    8e00:	4919      	ldr	r1, [pc, #100]	; (8e68 <hal_gpio_irq_init+0x7c>)
  uint32_t vectors = (uint32_t )SCB->VTOR;
    8e02:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    8e04:	6591      	str	r1, [r2, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8e06:	4a19      	ldr	r2, [pc, #100]	; (8e6c <hal_gpio_irq_init+0x80>)
    8e08:	2140      	movs	r1, #64	; 0x40
    8e0a:	6011      	str	r1, [r2, #0]
        irq_setup = 1;
    8e0c:	2201      	movs	r2, #1
    8e0e:	701a      	strb	r2, [r3, #0]
        if (hal_gpio_irqs[i].func == NULL) {
    8e10:	f8df a060 	ldr.w	sl, [pc, #96]	; 8e74 <hal_gpio_irq_init+0x88>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8e14:	2500      	movs	r5, #0
        if (hal_gpio_irqs[i].func == NULL) {
    8e16:	f85a 6035 	ldr.w	r6, [sl, r5, lsl #3]
    8e1a:	b136      	cbz	r6, 8e2a <hal_gpio_irq_init+0x3e>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8e1c:	3501      	adds	r5, #1
    8e1e:	2d08      	cmp	r5, #8
    8e20:	d1f9      	bne.n	8e16 <hal_gpio_irq_init+0x2a>
    int i;

    hal_gpio_irq_setup();
    i = hal_gpio_find_empty_slot();
    if (i < 0) {
        return -1;
    8e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    hal_gpio_irqs[i].func = handler;
    hal_gpio_irqs[i].arg = arg;

    return 0;
}
    8e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hal_gpio_init_in(pin, pull);
    8e2a:	f89d 1020 	ldrb.w	r1, [sp, #32]
    8e2e:	4638      	mov	r0, r7
    8e30:	f7ff ff8a 	bl	8d48 <hal_gpio_init_in>
    switch (trig) {
    8e34:	1e63      	subs	r3, r4, #1
    8e36:	2b02      	cmp	r3, #2
    8e38:	d8f3      	bhi.n	8e22 <hal_gpio_irq_init+0x36>
    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
    8e3a:	0423      	lsls	r3, r4, #16
    8e3c:	ea43 2007 	orr.w	r0, r3, r7, lsl #8
    NRF_GPIOTE->CONFIG[i] = conf;
    8e40:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    8e44:	4b0a      	ldr	r3, [pc, #40]	; (8e70 <hal_gpio_irq_init+0x84>)
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
    8e46:	f040 0001 	orr.w	r0, r0, #1
    NRF_GPIOTE->CONFIG[i] = conf;
    8e4a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    hal_gpio_irqs[i].func = handler;
    8e4e:	f84a 8035 	str.w	r8, [sl, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
    8e52:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
    return 0;
    8e56:	4630      	mov	r0, r6
    hal_gpio_irqs[i].arg = arg;
    8e58:	f8c5 9004 	str.w	r9, [r5, #4]
    return 0;
    8e5c:	e7e3      	b.n	8e26 <hal_gpio_irq_init+0x3a>
    8e5e:	bf00      	nop
    8e60:	20001424 	.word	0x20001424
    8e64:	e000ed00 	.word	0xe000ed00
    8e68:	00008cc9 	.word	0x00008cc9
    8e6c:	e000e100 	.word	0xe000e100
    8e70:	40006000 	.word	0x40006000
    8e74:	200013e4 	.word	0x200013e4

00008e78 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
    8e78:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
    8e7a:	f7ff ff4b 	bl	8d14 <hal_gpio_find_pin>
    if (i < 0) {
    8e7e:	2800      	cmp	r0, #0
    8e80:	db0a      	blt.n	8e98 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
    8e82:	f100 0340 	add.w	r3, r0, #64	; 0x40
    8e86:	4a05      	ldr	r2, [pc, #20]	; (8e9c <hal_gpio_irq_enable+0x24>)
    8e88:	2100      	movs	r1, #0
    8e8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
    8e8e:	2301      	movs	r3, #1
    8e90:	fa03 f000 	lsl.w	r0, r3, r0
    8e94:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
    8e98:	bd08      	pop	{r3, pc}
    8e9a:	bf00      	nop
    8e9c:	40006000 	.word	0x40006000

00008ea0 <hal_gpio_irq_disable>:
 *
 * @param pin
 */
void
hal_gpio_irq_disable(int pin)
{
    8ea0:	b508      	push	{r3, lr}
    int pin_index;
    bool sense_enabled = false;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
    8ea2:	f7ff ff37 	bl	8d14 <hal_gpio_find_pin>
    if (i < 0) {
    8ea6:	2800      	cmp	r0, #0

    if (!sense_enabled) {
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
    }
#else
    NRF_GPIOTE->INTENCLR = 1 << i;
    8ea8:	bfa1      	itttt	ge
    8eaa:	2301      	movge	r3, #1
    8eac:	fa03 f000 	lslge.w	r0, r3, r0
    8eb0:	4b01      	ldrge	r3, [pc, #4]	; (8eb8 <hal_gpio_irq_disable+0x18>)
    8eb2:	f8c3 0308 	strge.w	r0, [r3, #776]	; 0x308
#endif
}
    8eb6:	bd08      	pop	{r3, pc}
    8eb8:	40006000 	.word	0x40006000

00008ebc <hal_gpio_irq_release>:
{
    8ebc:	b538      	push	{r3, r4, r5, lr}
    8ebe:	4605      	mov	r5, r0
    i = hal_gpio_find_pin(pin);
    8ec0:	f7ff ff28 	bl	8d14 <hal_gpio_find_pin>
    if (i < 0) {
    8ec4:	1e04      	subs	r4, r0, #0
    8ec6:	db12      	blt.n	8eee <hal_gpio_irq_release+0x32>
    hal_gpio_irq_disable(pin);
    8ec8:	4628      	mov	r0, r5
    8eca:	f7ff ffe9 	bl	8ea0 <hal_gpio_irq_disable>
    NRF_GPIOTE->CONFIG[i] = 0;
    8ece:	00a3      	lsls	r3, r4, #2
    8ed0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8ed4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    8ed8:	2200      	movs	r2, #0
    8eda:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    NRF_GPIOTE->EVENTS_IN[i] = 0;
    8ede:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    hal_gpio_irqs[i].arg = NULL;
    8ee2:	4b03      	ldr	r3, [pc, #12]	; (8ef0 <hal_gpio_irq_release+0x34>)
    8ee4:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
    hal_gpio_irqs[i].func = NULL;
    8ee8:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
    hal_gpio_irqs[i].arg = NULL;
    8eec:	604a      	str	r2, [r1, #4]
}
    8eee:	bd38      	pop	{r3, r4, r5, pc}
    8ef0:	200013e4 	.word	0x200013e4

00008ef4 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    8ef4:	b507      	push	{r0, r1, r2, lr}
    8ef6:	4605      	mov	r5, r0
    8ef8:	4674      	mov	r4, lr
    8efa:	9101      	str	r1, [sp, #4]
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    8efc:	f001 f934 	bl	a168 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    8f00:	f009 f8b6 	bl	12070 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    8f04:	9b01      	ldr	r3, [sp, #4]
    8f06:	b97d      	cbnz	r5, 8f28 <__assert_func+0x34>
    8f08:	480a      	ldr	r0, [pc, #40]	; (8f34 <__assert_func+0x40>)
    8f0a:	4621      	mov	r1, r4
    8f0c:	f009 fb62 	bl	125d4 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
    8f10:	f7ff f964 	bl	81dc <hal_debugger_connected>
    8f14:	b100      	cbz	r0, 8f18 <__assert_func+0x24>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
    8f16:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    8f18:	4b07      	ldr	r3, [pc, #28]	; (8f38 <__assert_func+0x44>)
    8f1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8f1e:	605a      	str	r2, [r3, #4]
    asm("isb");
    8f20:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    8f24:	f7ff f944 	bl	81b0 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    8f28:	462a      	mov	r2, r5
    8f2a:	4621      	mov	r1, r4
    8f2c:	4803      	ldr	r0, [pc, #12]	; (8f3c <__assert_func+0x48>)
    8f2e:	f009 fb51 	bl	125d4 <console_printf>
    8f32:	e7ed      	b.n	8f10 <__assert_func+0x1c>
    8f34:	00021b16 	.word	0x00021b16
    8f38:	e000ed00 	.word	0xe000ed00
    8f3c:	00021b25 	.word	0x00021b25

00008f40 <os_default_irq>:
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    8f40:	4d1d      	ldr	r5, [pc, #116]	; (8fb8 <os_default_irq+0x78>)
{
    8f42:	b507      	push	{r0, r1, r2, lr}
    8f44:	4604      	mov	r4, r0
    console_blocking_mode();
    8f46:	f009 f893 	bl	12070 <console_blocking_mode>
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    8f4a:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    8f4c:	6822      	ldr	r2, [r4, #0]
    8f4e:	481b      	ldr	r0, [pc, #108]	; (8fbc <os_default_irq+0x7c>)
    8f50:	f3c1 0108 	ubfx	r1, r1, #0, #9
    8f54:	f009 fb3e 	bl	125d4 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    8f58:	6821      	ldr	r1, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    8f5a:	4819      	ldr	r0, [pc, #100]	; (8fc0 <os_default_irq+0x80>)
    8f5c:	68cb      	ldr	r3, [r1, #12]
    8f5e:	9300      	str	r3, [sp, #0]
    8f60:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    8f64:	6809      	ldr	r1, [r1, #0]
    8f66:	f009 fb35 	bl	125d4 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    8f6a:	6923      	ldr	r3, [r4, #16]
    8f6c:	6861      	ldr	r1, [r4, #4]
    8f6e:	9300      	str	r3, [sp, #0]
    8f70:	4814      	ldr	r0, [pc, #80]	; (8fc4 <os_default_irq+0x84>)
    8f72:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    8f76:	f009 fb2d 	bl	125d4 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    8f7a:	6a23      	ldr	r3, [r4, #32]
    8f7c:	6961      	ldr	r1, [r4, #20]
    8f7e:	9300      	str	r3, [sp, #0]
    8f80:	4811      	ldr	r0, [pc, #68]	; (8fc8 <os_default_irq+0x88>)
    8f82:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
    8f86:	f009 fb25 	bl	125d4 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    8f8a:	6821      	ldr	r1, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    8f8c:	480f      	ldr	r0, [pc, #60]	; (8fcc <os_default_irq+0x8c>)
    8f8e:	69cb      	ldr	r3, [r1, #28]
    8f90:	9300      	str	r3, [sp, #0]
    8f92:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
    8f96:	6909      	ldr	r1, [r1, #16]
    8f98:	f009 fb1c 	bl	125d4 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    8f9c:	6869      	ldr	r1, [r5, #4]
    8f9e:	480c      	ldr	r0, [pc, #48]	; (8fd0 <os_default_irq+0x90>)
    8fa0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    8fa2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    8fa4:	f009 fb16 	bl	125d4 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    8fa8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    8faa:	480a      	ldr	r0, [pc, #40]	; (8fd4 <os_default_irq+0x94>)
    8fac:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    8fae:	f009 fb11 	bl	125d4 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    8fb2:	f7ff f8fd 	bl	81b0 <hal_system_reset>
    8fb6:	bf00      	nop
    8fb8:	e000ed00 	.word	0xe000ed00
    8fbc:	00021b3c 	.word	0x00021b3c
    8fc0:	00021b6d 	.word	0x00021b6d
    8fc4:	00021b9e 	.word	0x00021b9e
    8fc8:	00021bcf 	.word	0x00021bcf
    8fcc:	00021c00 	.word	0x00021c00
    8fd0:	00021c31 	.word	0x00021c31
    8fd4:	00021c59 	.word	0x00021c59

00008fd8 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
    8fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
    8fdc:	f012 fb46 	bl	1b66c <hal_watchdog_tickle>
    os_cputime_timer_stop(&os_wdog_monitor);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif

    while (1) {
        ++g_os_idle_ctr;
    8fe0:	4f1b      	ldr	r7, [pc, #108]	; (9050 <os_idle_task+0x78>)
    sanity_last = 0;
    8fe2:	2600      	movs	r6, #0
        ++g_os_idle_ctr;
    8fe4:	683b      	ldr	r3, [r7, #0]
    8fe6:	3301      	adds	r3, #1
    8fe8:	603b      	str	r3, [r7, #0]

        now = os_time_get();
    8fea:	f000 ff95 	bl	9f18 <os_time_get>
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
    8fee:	f5a0 63f0 	sub.w	r3, r0, #1920	; 0x780
    8ff2:	1b9b      	subs	r3, r3, r6
    8ff4:	2b00      	cmp	r3, #0
        now = os_time_get();
    8ff6:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
    8ff8:	dd04      	ble.n	9004 <os_idle_task+0x2c>
            os_sanity_run();
    8ffa:	f000 fc95 	bl	9928 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
    8ffe:	f012 fb35 	bl	1b66c <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
    9002:	4626      	mov	r6, r4
        }

        OS_ENTER_CRITICAL(sr);
    9004:	f001 f8b0 	bl	a168 <os_arch_save_sr>
    9008:	4605      	mov	r5, r0
        now = os_time_get();
    900a:	f000 ff85 	bl	9f18 <os_time_get>
    900e:	4680      	mov	r8, r0
        sticks = os_sched_wakeup_ticks(now);
    9010:	f000 fdd6 	bl	9bc0 <os_sched_wakeup_ticks>
    9014:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
    9016:	4640      	mov	r0, r8
    9018:	f000 f968 	bl	92ec <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
        /* Wakeup in time to run sanity as well from the idle context,
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
    901c:	f506 62f0 	add.w	r2, r6, #1920	; 0x780
        iticks = min(sticks, cticks);
    9020:	42a0      	cmp	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
    9022:	eba2 0308 	sub.w	r3, r2, r8
        iticks = min(sticks, cticks);
    9026:	bf28      	it	cs
    9028:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
    902a:	4283      	cmp	r3, r0
    902c:	bf28      	it	cs
    902e:	4603      	movcs	r3, r0

        if (iticks < MIN_IDLE_TICKS) {
    9030:	2b0b      	cmp	r3, #11
    9032:	d90b      	bls.n	904c <os_idle_task+0x74>
            iticks = 0;
        } else if (iticks > MAX_IDLE_TICKS) {
    9034:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    9038:	bf28      	it	cs
    903a:	f44f 3396 	movcs.w	r3, #76800	; 0x12c00
    903e:	4618      	mov	r0, r3
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
    9040:	f011 fe16 	bl	1ac70 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
    9044:	4628      	mov	r0, r5
    9046:	f001 f895 	bl	a174 <os_arch_restore_sr>
        ++g_os_idle_ctr;
    904a:	e7cb      	b.n	8fe4 <os_idle_task+0xc>
            iticks = 0;
    904c:	2000      	movs	r0, #0
    904e:	e7f7      	b.n	9040 <os_idle_task+0x68>
    9050:	20001578 	.word	0x20001578

00009054 <os_main>:
os_main(void *arg)
{
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
    9054:	2100      	movs	r1, #0
{
    9056:	b508      	push	{r3, lr}
    9058:	4603      	mov	r3, r0
    fn(0, NULL);
    905a:	4608      	mov	r0, r1
    905c:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
    905e:	2300      	movs	r3, #0
    9060:	461a      	mov	r2, r3
    9062:	4619      	mov	r1, r3
    9064:	4618      	mov	r0, r3
    9066:	f7ff ff45 	bl	8ef4 <__assert_func>
	...

0000906c <os_started>:
}
    906c:	4b01      	ldr	r3, [pc, #4]	; (9074 <os_started+0x8>)
    906e:	6818      	ldr	r0, [r3, #0]
    9070:	4770      	bx	lr
    9072:	bf00      	nop
    9074:	200025d0 	.word	0x200025d0

00009078 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
    9078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
    907a:	2340      	movs	r3, #64	; 0x40
    907c:	9303      	str	r3, [sp, #12]
    907e:	4b10      	ldr	r3, [pc, #64]	; (90c0 <os_init_idle_task+0x48>)
    9080:	9302      	str	r3, [sp, #8]
    9082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9086:	23ff      	movs	r3, #255	; 0xff
    9088:	e9cd 3200 	strd	r3, r2, [sp]
    908c:	490d      	ldr	r1, [pc, #52]	; (90c4 <os_init_idle_task+0x4c>)
    908e:	4a0e      	ldr	r2, [pc, #56]	; (90c8 <os_init_idle_task+0x50>)
    9090:	480e      	ldr	r0, [pc, #56]	; (90cc <os_init_idle_task+0x54>)
    9092:	2300      	movs	r3, #0
    9094:	f000 fe56 	bl	9d44 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
    9098:	b128      	cbz	r0, 90a6 <os_init_idle_task+0x2e>
    909a:	2300      	movs	r3, #0
    909c:	461a      	mov	r2, r3
    909e:	4619      	mov	r1, r3
    90a0:	4618      	mov	r0, r3
    90a2:	f7ff ff27 	bl	8ef4 <__assert_func>

    /* Initialize sanity */
    rc = os_sanity_init();
    90a6:	f000 fc67 	bl	9978 <os_sanity_init>
    assert(rc == 0);
    90aa:	2800      	cmp	r0, #0
    90ac:	d1f5      	bne.n	909a <os_init_idle_task+0x22>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
    90ae:	f247 5030 	movw	r0, #30000	; 0x7530
    90b2:	f012 fa9b 	bl	1b5ec <hal_watchdog_init>
    assert(rc == 0);
    90b6:	2800      	cmp	r0, #0
    90b8:	d1ef      	bne.n	909a <os_init_idle_task+0x22>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
    90ba:	b005      	add	sp, #20
    90bc:	f85d fb04 	ldr.w	pc, [sp], #4
    90c0:	20001478 	.word	0x20001478
    90c4:	00021c75 	.word	0x00021c75
    90c8:	00008fd9 	.word	0x00008fd9
    90cc:	20001428 	.word	0x20001428

000090d0 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
    90d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    os_error_t err;

#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    90d2:	2100      	movs	r1, #0
    90d4:	2248      	movs	r2, #72	; 0x48
{
    90d6:	4604      	mov	r4, r0
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    90d8:	481f      	ldr	r0, [pc, #124]	; (9158 <os_init+0x88>)
    90da:	f006 fa90 	bl	f5fe <memset>
    SEGGER_RTT_Init();
    90de:	f00d ffa7 	bl	17030 <SEGGER_RTT_Init>
#endif

    TAILQ_INIT(&g_callout_list);
    90e2:	4b1e      	ldr	r3, [pc, #120]	; (915c <os_init+0x8c>)
    90e4:	2200      	movs	r2, #0
    90e6:	e9c3 2300 	strd	r2, r3, [r3]
    STAILQ_INIT(&g_os_task_list);
    90ea:	4b1d      	ldr	r3, [pc, #116]	; (9160 <os_init+0x90>)
    90ec:	e9c3 2300 	strd	r2, r3, [r3]
    os_eventq_init(os_eventq_dflt_get());
    90f0:	f000 fa94 	bl	961c <os_eventq_dflt_get>
    90f4:	f000 f9dc 	bl	94b0 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
    90f8:	f000 f9c2 	bl	9480 <os_dev_reset>

    err = os_arch_os_init();
    90fc:	f001 f86c 	bl	a1d8 <os_arch_os_init>
    assert(err == OS_OK);
    9100:	b128      	cbz	r0, 910e <os_init+0x3e>
    9102:	2300      	movs	r3, #0
    9104:	461a      	mov	r2, r3
    9106:	4619      	mov	r1, r3
    9108:	4618      	mov	r0, r3
    910a:	f7ff fef3 	bl	8ef4 <__assert_func>

    if (main_fn) {
    910e:	b194      	cbz	r4, 9136 <os_init+0x66>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
    9110:	f44f 6380 	mov.w	r3, #1024	; 0x400
    9114:	9303      	str	r3, [sp, #12]
    9116:	4b13      	ldr	r3, [pc, #76]	; (9164 <os_init+0x94>)
    9118:	9302      	str	r3, [sp, #8]
    911a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    911e:	237f      	movs	r3, #127	; 0x7f
    9120:	e9cd 3200 	strd	r3, r2, [sp]
    9124:	4910      	ldr	r1, [pc, #64]	; (9168 <os_init+0x98>)
    9126:	4a11      	ldr	r2, [pc, #68]	; (916c <os_init+0x9c>)
    9128:	4811      	ldr	r0, [pc, #68]	; (9170 <os_init+0xa0>)
    912a:	4623      	mov	r3, r4
    912c:	f000 fe0a 	bl	9d44 <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
    9130:	b2c0      	uxtb	r0, r0
    9132:	2800      	cmp	r0, #0
    9134:	d1e5      	bne.n	9102 <os_init+0x32>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
    9136:	f00d fdf5 	bl	16d24 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
    913a:	2001      	movs	r0, #1
    913c:	f000 f97a 	bl	9434 <os_dev_initialize_all>
    assert(err == OS_OK);
    9140:	b2c0      	uxtb	r0, r0
    9142:	2800      	cmp	r0, #0
    9144:	d1dd      	bne.n	9102 <os_init+0x32>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
    9146:	2002      	movs	r0, #2
    9148:	f000 f974 	bl	9434 <os_dev_initialize_all>
    assert(err == OS_OK);
    914c:	b2c0      	uxtb	r0, r0
    914e:	2800      	cmp	r0, #0
    9150:	d1d7      	bne.n	9102 <os_init+0x32>
}
    9152:	b004      	add	sp, #16
    9154:	bd10      	pop	{r4, pc}
    9156:	bf00      	nop
    9158:	200000d8 	.word	0x200000d8
    915c:	200025d4 	.word	0x200025d4
    9160:	200033ec 	.word	0x200033ec
    9164:	20001580 	.word	0x20001580
    9168:	00021c7a 	.word	0x00021c7a
    916c:	00009055 	.word	0x00009055
    9170:	20002580 	.word	0x20002580

00009174 <os_start>:

void
os_start(void)
{
    9174:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
    9176:	f012 fa71 	bl	1b65c <hal_watchdog_enable>

    err = os_arch_os_start();
    917a:	f001 f885 	bl	a288 <os_arch_os_start>
    assert(err == OS_OK);
    917e:	b128      	cbz	r0, 918c <os_start+0x18>
    9180:	2300      	movs	r3, #0
    9182:	461a      	mov	r2, r3
    9184:	4619      	mov	r1, r3
    9186:	4618      	mov	r0, r3
    9188:	f7ff feb4 	bl	8ef4 <__assert_func>
#else
    assert(0);
#endif
}
    918c:	bd08      	pop	{r3, pc}

0000918e <os_reboot>:

void
os_reboot(int reason)
{
    sysdown(reason);
    918e:	f00b b9e7 	b.w	14560 <sysdown>

00009192 <os_system_reset>:
}

void
os_system_reset(void)
{
    9192:	b508      	push	{r3, lr}
    /* Tickle watchdog just before re-entering bootloader.  Depending on what
     * the system has been doing lately, the watchdog timer might be close to
     * firing.
     */
    hal_watchdog_tickle();
    9194:	f012 fa6a 	bl	1b66c <hal_watchdog_tickle>
    hal_system_reset();
    9198:	f7ff f80a 	bl	81b0 <hal_system_reset>

0000919c <os_pkg_init>:
}

void
os_pkg_init(void)
{
    919c:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    919e:	4b0a      	ldr	r3, [pc, #40]	; (91c8 <os_pkg_init+0x2c>)
    91a0:	781b      	ldrb	r3, [r3, #0]
    91a2:	b92b      	cbnz	r3, 91b0 <os_pkg_init+0x14>
    91a4:	2300      	movs	r3, #0
    91a6:	461a      	mov	r2, r3
    91a8:	4619      	mov	r1, r3
    91aa:	4618      	mov	r0, r3
    91ac:	f7ff fea2 	bl	8ef4 <__assert_func>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    91b0:	2003      	movs	r0, #3
    91b2:	f000 f93f 	bl	9434 <os_dev_initialize_all>
    assert(err == OS_OK);
    91b6:	b2c0      	uxtb	r0, r0
    91b8:	2800      	cmp	r0, #0
    91ba:	d1f3      	bne.n	91a4 <os_pkg_init+0x8>

    os_mempool_module_init();
    91bc:	f000 faca 	bl	9754 <os_mempool_module_init>
    os_msys_init();
}
    91c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_msys_init();
    91c4:	f000 bb38 	b.w	9838 <os_msys_init>
    91c8:	20004ba8 	.word	0x20004ba8

000091cc <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
    91cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    91ce:	4604      	mov	r4, r0
    91d0:	460d      	mov	r5, r1
    91d2:	4617      	mov	r7, r2
    91d4:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
    91d6:	2220      	movs	r2, #32
    91d8:	2100      	movs	r1, #0
    91da:	f006 fa10 	bl	f5fe <memset>
    c->c_ev.ev_cb = ev_cb;
    c->c_ev.ev_arg = ev_arg;
    91de:	e9c4 7601 	strd	r7, r6, [r4, #4]
    c->c_evq = evq;
    91e2:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
    91e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000091e8 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
    91e8:	b538      	push	{r3, r4, r5, lr}
    91ea:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
    91ec:	f000 ffbc 	bl	a168 <os_arch_save_sr>
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
    91f0:	69e2      	ldr	r2, [r4, #28]
    91f2:	4605      	mov	r5, r0

    if (os_callout_queued(c)) {
    91f4:	b132      	cbz	r2, 9204 <os_callout_stop+0x1c>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    91f6:	69a3      	ldr	r3, [r4, #24]
    91f8:	b173      	cbz	r3, 9218 <os_callout_stop+0x30>
    91fa:	61da      	str	r2, [r3, #28]
    91fc:	69e2      	ldr	r2, [r4, #28]
    91fe:	6013      	str	r3, [r2, #0]
        c->c_next.tqe_prev = NULL;
    9200:	2300      	movs	r3, #0
    9202:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
    9204:	6920      	ldr	r0, [r4, #16]
    9206:	b110      	cbz	r0, 920e <os_callout_stop+0x26>
        os_eventq_remove(c->c_evq, &c->c_ev);
    9208:	4621      	mov	r1, r4
    920a:	f000 f9e7 	bl	95dc <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
    920e:	4628      	mov	r0, r5

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
    9210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OS_EXIT_CRITICAL(sr);
    9214:	f000 bfae 	b.w	a174 <os_arch_restore_sr>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    9218:	4901      	ldr	r1, [pc, #4]	; (9220 <os_callout_stop+0x38>)
    921a:	604a      	str	r2, [r1, #4]
    921c:	e7ee      	b.n	91fc <os_callout_stop+0x14>
    921e:	bf00      	nop
    9220:	200025d4 	.word	0x200025d4

00009224 <os_callout_reset>:
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
    9224:	6903      	ldr	r3, [r0, #16]
{
    9226:	b570      	push	{r4, r5, r6, lr}
    9228:	4604      	mov	r4, r0
    922a:	460d      	mov	r5, r1
    assert(c->c_evq != NULL);
    922c:	b923      	cbnz	r3, 9238 <os_callout_reset+0x14>
    922e:	461a      	mov	r2, r3
    9230:	4619      	mov	r1, r3
    9232:	4618      	mov	r0, r3
    9234:	f7ff fe5e 	bl	8ef4 <__assert_func>

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
    9238:	2900      	cmp	r1, #0
    923a:	db1c      	blt.n	9276 <os_callout_reset+0x52>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
    923c:	f000 ff94 	bl	a168 <os_arch_save_sr>
    9240:	4606      	mov	r6, r0

    os_callout_stop(c);
    9242:	4620      	mov	r0, r4
    9244:	f7ff ffd0 	bl	91e8 <os_callout_stop>

    if (ticks == 0) {
        ticks = 1;
    }

    c->c_ticks = os_time_get() + ticks;
    9248:	f000 fe66 	bl	9f18 <os_time_get>

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    924c:	4911      	ldr	r1, [pc, #68]	; (9294 <os_callout_reset+0x70>)
    c->c_ticks = os_time_get() + ticks;
    924e:	2d01      	cmp	r5, #1
    9250:	bf2c      	ite	cs
    9252:	1942      	addcs	r2, r0, r5
    9254:	1c42      	addcc	r2, r0, #1
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    9256:	680b      	ldr	r3, [r1, #0]
    c->c_ticks = os_time_get() + ticks;
    9258:	6162      	str	r2, [r4, #20]
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    925a:	b933      	cbnz	r3, 926a <os_callout_reset+0x46>
    }

    if (entry) {
        TAILQ_INSERT_BEFORE(entry, c, c_next);
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    925c:	61a3      	str	r3, [r4, #24]
    925e:	684b      	ldr	r3, [r1, #4]
    9260:	61e3      	str	r3, [r4, #28]
    9262:	601c      	str	r4, [r3, #0]
    9264:	3418      	adds	r4, #24
    9266:	604c      	str	r4, [r1, #4]
    9268:	e00e      	b.n	9288 <os_callout_reset+0x64>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
    926a:	6958      	ldr	r0, [r3, #20]
    926c:	1a10      	subs	r0, r2, r0
    926e:	2800      	cmp	r0, #0
    9270:	db03      	blt.n	927a <os_callout_reset+0x56>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    9272:	699b      	ldr	r3, [r3, #24]
    9274:	e7f1      	b.n	925a <os_callout_reset+0x36>
        ret = OS_EINVAL;
    9276:	2002      	movs	r0, #2

    ret = OS_OK;

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
    9278:	e00a      	b.n	9290 <os_callout_reset+0x6c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
    927a:	69da      	ldr	r2, [r3, #28]
    927c:	e9c4 3206 	strd	r3, r2, [r4, #24]
    9280:	69da      	ldr	r2, [r3, #28]
    9282:	6014      	str	r4, [r2, #0]
    9284:	3418      	adds	r4, #24
    9286:	61dc      	str	r4, [r3, #28]
    OS_EXIT_CRITICAL(sr);
    9288:	4630      	mov	r0, r6
    928a:	f000 ff73 	bl	a174 <os_arch_restore_sr>
    ret = OS_OK;
    928e:	2000      	movs	r0, #0
}
    9290:	bd70      	pop	{r4, r5, r6, pc}
    9292:	bf00      	nop
    9294:	200025d4 	.word	0x200025d4

00009298 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
    9298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
    929a:	f000 fe3d 	bl	9f18 <os_time_get>

    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
    929e:	4e12      	ldr	r6, [pc, #72]	; (92e8 <os_callout_tick+0x50>)
    now = os_time_get();
    92a0:	4605      	mov	r5, r0
    92a2:	2700      	movs	r7, #0
        OS_ENTER_CRITICAL(sr);
    92a4:	f000 ff60 	bl	a168 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
    92a8:	6834      	ldr	r4, [r6, #0]
        if (c) {
    92aa:	b154      	cbz	r4, 92c2 <os_callout_tick+0x2a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
    92ac:	6963      	ldr	r3, [r4, #20]
    92ae:	1aeb      	subs	r3, r5, r3
    92b0:	2b00      	cmp	r3, #0
    92b2:	db11      	blt.n	92d8 <os_callout_tick+0x40>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    92b4:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
    92b8:	b163      	cbz	r3, 92d4 <os_callout_tick+0x3c>
    92ba:	61da      	str	r2, [r3, #28]
    92bc:	69e2      	ldr	r2, [r4, #28]
    92be:	6013      	str	r3, [r2, #0]
                c->c_next.tqe_prev = NULL;
    92c0:	61e7      	str	r7, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
    92c2:	f000 ff57 	bl	a174 <os_arch_restore_sr>

        if (c) {
    92c6:	b16c      	cbz	r4, 92e4 <os_callout_tick+0x4c>
            if (c->c_evq) {
    92c8:	6920      	ldr	r0, [r4, #16]
    92ca:	b138      	cbz	r0, 92dc <os_callout_tick+0x44>
                os_eventq_put(c->c_evq, &c->c_ev);
    92cc:	4621      	mov	r1, r4
    92ce:	f000 f8fe 	bl	94ce <os_eventq_put>
    92d2:	e7e7      	b.n	92a4 <os_callout_tick+0xc>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    92d4:	6072      	str	r2, [r6, #4]
    92d6:	e7f1      	b.n	92bc <os_callout_tick+0x24>
    92d8:	2400      	movs	r4, #0
    92da:	e7f2      	b.n	92c2 <os_callout_tick+0x2a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
    92dc:	6863      	ldr	r3, [r4, #4]
    92de:	4620      	mov	r0, r4
    92e0:	4798      	blx	r3
    92e2:	e7df      	b.n	92a4 <os_callout_tick+0xc>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
    92e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    92e6:	bf00      	nop
    92e8:	200025d4 	.word	0x200025d4

000092ec <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
    92ec:	b510      	push	{r4, lr}
    92ee:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
    92f0:	f000 ff43 	bl	a17a <os_arch_in_critical>
    92f4:	4603      	mov	r3, r0
    92f6:	b918      	cbnz	r0, 9300 <os_callout_wakeup_ticks+0x14>
    92f8:	4602      	mov	r2, r0
    92fa:	4601      	mov	r1, r0
    92fc:	f7ff fdfa 	bl	8ef4 <__assert_func>

    c = TAILQ_FIRST(&g_callout_list);
    9300:	4b05      	ldr	r3, [pc, #20]	; (9318 <os_callout_wakeup_ticks+0x2c>)
    9302:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
    9304:	b123      	cbz	r3, 9310 <os_callout_wakeup_ticks+0x24>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    9306:	6958      	ldr	r0, [r3, #20]
    9308:	1b00      	subs	r0, r0, r4
            rt = c->c_ticks - now;
        } else {
            rt = 0;     /* callout time is in the past */
    930a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
    930e:	bd10      	pop	{r4, pc}
        rt = OS_TIMEOUT_NEVER;
    9310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9314:	e7fb      	b.n	930e <os_callout_wakeup_ticks+0x22>
    9316:	bf00      	nop
    9318:	200025d4 	.word	0x200025d4

0000931c <os_callout_remaining_ticks>:


os_time_t
os_callout_remaining_ticks(struct os_callout *c, os_time_t now)
{
    931c:	b538      	push	{r3, r4, r5, lr}
    931e:	4605      	mov	r5, r0
    9320:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t rt;

    OS_ENTER_CRITICAL(sr);
    9322:	f000 ff21 	bl	a168 <os_arch_save_sr>

    if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    9326:	696b      	ldr	r3, [r5, #20]
    9328:	1b1c      	subs	r4, r3, r4
        rt = c->c_ticks - now;
    } else {
        rt = 0;     /* callout time is in the past */
    932a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    }

    OS_EXIT_CRITICAL(sr);
    932e:	f000 ff21 	bl	a174 <os_arch_restore_sr>

    return rt;
}
    9332:	4620      	mov	r0, r4
    9334:	bd38      	pop	{r3, r4, r5, pc}

00009336 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
    9336:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    9338:	2000      	movs	r0, #0
    933a:	f012 b843 	b.w	1b3c4 <hal_timer_config>

0000933e <os_cputime_timer_init>:
    os_cputime_delay_ticks(ticks);
}

void
os_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
    933e:	b510      	push	{r4, lr}
    9340:	4613      	mov	r3, r2
    assert(timer != NULL);
    9342:	b928      	cbnz	r0, 9350 <os_cputime_timer_init+0x12>
    9344:	2300      	movs	r3, #0
    9346:	461a      	mov	r2, r3
    9348:	4619      	mov	r1, r3
    934a:	4618      	mov	r0, r3
    934c:	f7ff fdd2 	bl	8ef4 <__assert_func>
    assert(fp != NULL);
    9350:	2900      	cmp	r1, #0
    9352:	d0f7      	beq.n	9344 <os_cputime_timer_init+0x6>

    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
    9354:	460a      	mov	r2, r1
}
    9356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
    935a:	4601      	mov	r1, r0
    935c:	2000      	movs	r0, #0
    935e:	f012 b8b9 	b.w	1b4d4 <hal_timer_set_cb>

00009362 <os_cputime_get32>:
uint32_t
os_cputime_get32(void)
{
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    9362:	2000      	movs	r0, #0
    9364:	f012 b89a 	b.w	1b49c <hal_timer_read>

00009368 <os_cputime_timer_relative>:
{
    9368:	b513      	push	{r0, r1, r4, lr}
    assert(timer != NULL);
    936a:	4603      	mov	r3, r0
{
    936c:	460c      	mov	r4, r1
    assert(timer != NULL);
    936e:	b918      	cbnz	r0, 9378 <os_cputime_timer_relative+0x10>
    9370:	4602      	mov	r2, r0
    9372:	4601      	mov	r1, r0
    9374:	f7ff fdbe 	bl	8ef4 <__assert_func>
    9378:	9001      	str	r0, [sp, #4]
    cputime = os_cputime_get32() + os_cputime_usecs_to_ticks(usecs);
    937a:	f7ff fff2 	bl	9362 <os_cputime_get32>
    rc = hal_timer_start_at(timer, cputime);
    937e:	9b01      	ldr	r3, [sp, #4]
    9380:	1901      	adds	r1, r0, r4
    9382:	4618      	mov	r0, r3
}
    9384:	b002      	add	sp, #8
    9386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rc = hal_timer_start_at(timer, cputime);
    938a:	f012 b8b5 	b.w	1b4f8 <hal_timer_start_at>

0000938e <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    938e:	b510      	push	{r4, lr}
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    9390:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
{
    9394:	4604      	mov	r4, r0
    rc = dev->od_init(dev, dev->od_init_arg);
    9396:	4798      	blx	r3
    if (rc != 0) {
    9398:	7ee3      	ldrb	r3, [r4, #27]
    939a:	b120      	cbz	r0, 93a6 <os_dev_initialize+0x18>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    939c:	f013 0f08 	tst.w	r3, #8
    93a0:	bf08      	it	eq
    93a2:	2000      	moveq	r0, #0
err:
    return rc;
}
    93a4:	bd10      	pop	{r4, pc}
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    93a6:	f043 0301 	orr.w	r3, r3, #1
    93aa:	76e3      	strb	r3, [r4, #27]
    93ac:	e7fa      	b.n	93a4 <os_dev_initialize+0x16>
	...

000093b0 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    93b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dev->od_priority = priority;
    93b4:	7643      	strb	r3, [r0, #25]
{
    93b6:	4699      	mov	r9, r3
    dev->od_init = od_init;
    93b8:	9b08      	ldr	r3, [sp, #32]
    93ba:	6103      	str	r3, [r0, #16]
    dev->od_open_ref = 0;
    93bc:	2500      	movs	r5, #0
    dev->od_init_arg = arg;
    93be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dev->od_name = name;
    93c0:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    93c2:	7602      	strb	r2, [r0, #24]
{
    93c4:	4690      	mov	r8, r2
    dev->od_open_ref = 0;
    93c6:	8345      	strh	r5, [r0, #26]
    dev->od_init_arg = arg;
    93c8:	6143      	str	r3, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    93ca:	2210      	movs	r2, #16
    93cc:	4629      	mov	r1, r5
{
    93ce:	4604      	mov	r4, r0
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    93d0:	f006 f915 	bl	f5fe <memset>
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    93d4:	4815      	ldr	r0, [pc, #84]	; (942c <os_dev_create+0x7c>)
    93d6:	6807      	ldr	r7, [r0, #0]
    93d8:	b92f      	cbnz	r7, 93e6 <os_dev_create+0x36>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    93da:	4623      	mov	r3, r4
    93dc:	f843 7f20 	str.w	r7, [r3, #32]!
    93e0:	6043      	str	r3, [r0, #4]
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    93e2:	6004      	str	r4, [r0, #0]
    93e4:	e011      	b.n	940a <os_dev_create+0x5a>
    93e6:	463e      	mov	r6, r7
        if (dev->od_stage < cur_dev->od_stage ||
    93e8:	7e33      	ldrb	r3, [r6, #24]
    93ea:	4598      	cmp	r8, r3
    93ec:	d317      	bcc.n	941e <os_dev_create+0x6e>
    93ee:	d102      	bne.n	93f6 <os_dev_create+0x46>
            ((dev->od_stage == cur_dev->od_stage) &&
    93f0:	7e73      	ldrb	r3, [r6, #25]
    93f2:	454b      	cmp	r3, r9
    93f4:	d813      	bhi.n	941e <os_dev_create+0x6e>
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    93f6:	6a33      	ldr	r3, [r6, #32]
    93f8:	4635      	mov	r5, r6
    93fa:	b973      	cbnz	r3, 941a <os_dev_create+0x6a>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    93fc:	6a2b      	ldr	r3, [r5, #32]
    93fe:	6223      	str	r3, [r4, #32]
    9400:	b913      	cbnz	r3, 9408 <os_dev_create+0x58>
    9402:	f104 0320 	add.w	r3, r4, #32
    9406:	6043      	str	r3, [r0, #4]
    9408:	622c      	str	r4, [r5, #32]
    rc = os_dev_add(dev);
    if (rc != 0) {
        goto err;
    }

    if (g_os_started) {
    940a:	4b09      	ldr	r3, [pc, #36]	; (9430 <os_dev_create+0x80>)
    940c:	6818      	ldr	r0, [r3, #0]
    940e:	b150      	cbz	r0, 9426 <os_dev_create+0x76>
        rc = os_dev_initialize(dev);
    9410:	4620      	mov	r0, r4
    }
err:
    return (rc);
}
    9412:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        rc = os_dev_initialize(dev);
    9416:	f7ff bfba 	b.w	938e <os_dev_initialize>
    941a:	461e      	mov	r6, r3
    941c:	e7e4      	b.n	93e8 <os_dev_create+0x38>
    if (prev_dev) {
    941e:	2d00      	cmp	r5, #0
    9420:	d1ec      	bne.n	93fc <os_dev_create+0x4c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    9422:	6227      	str	r7, [r4, #32]
    9424:	e7dd      	b.n	93e2 <os_dev_create+0x32>
}
    9426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    942a:	bf00      	nop
    942c:	200025dc 	.word	0x200025dc
    9430:	200025d0 	.word	0x200025d0

00009434 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
    9434:	b538      	push	{r3, r4, r5, lr}
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9436:	4b08      	ldr	r3, [pc, #32]	; (9458 <os_dev_initialize_all+0x24>)
    9438:	681c      	ldr	r4, [r3, #0]
{
    943a:	4605      	mov	r5, r0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    943c:	b90c      	cbnz	r4, 9442 <os_dev_initialize_all+0xe>
    943e:	4620      	mov	r0, r4
                break;
            }
        }
    }

    return (rc);
    9440:	e009      	b.n	9456 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    9442:	7e23      	ldrb	r3, [r4, #24]
    9444:	42ab      	cmp	r3, r5
    9446:	d001      	beq.n	944c <os_dev_initialize_all+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9448:	6a24      	ldr	r4, [r4, #32]
    944a:	e7f7      	b.n	943c <os_dev_initialize_all+0x8>
            rc = os_dev_initialize(dev);
    944c:	4620      	mov	r0, r4
    944e:	f7ff ff9e 	bl	938e <os_dev_initialize>
            if (rc) {
    9452:	2800      	cmp	r0, #0
    9454:	d0f8      	beq.n	9448 <os_dev_initialize_all+0x14>
}
    9456:	bd38      	pop	{r3, r4, r5, pc}
    9458:	200025dc 	.word	0x200025dc

0000945c <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
    945c:	b538      	push	{r3, r4, r5, lr}
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    945e:	4b07      	ldr	r3, [pc, #28]	; (947c <os_dev_lookup+0x20>)
    9460:	681c      	ldr	r4, [r3, #0]
{
    9462:	4605      	mov	r5, r0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9464:	b90c      	cbnz	r4, 946a <os_dev_lookup+0xe>
        if (!strcmp(dev->od_name, name)) {
            break;
        }
    }
    return (dev);
}
    9466:	4620      	mov	r0, r4
    9468:	bd38      	pop	{r3, r4, r5, pc}
        if (!strcmp(dev->od_name, name)) {
    946a:	69e0      	ldr	r0, [r4, #28]
    946c:	4629      	mov	r1, r5
    946e:	f006 f8eb 	bl	f648 <strcmp>
    9472:	2800      	cmp	r0, #0
    9474:	d0f7      	beq.n	9466 <os_dev_lookup+0xa>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9476:	6a24      	ldr	r4, [r4, #32]
    9478:	e7f4      	b.n	9464 <os_dev_lookup+0x8>
    947a:	bf00      	nop
    947c:	200025dc 	.word	0x200025dc

00009480 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
    9480:	4b02      	ldr	r3, [pc, #8]	; (948c <os_dev_reset+0xc>)
    9482:	2200      	movs	r2, #0
    9484:	e9c3 2300 	strd	r2, r3, [r3]
}
    9488:	4770      	bx	lr
    948a:	bf00      	nop
    948c:	200025dc 	.word	0x200025dc

00009490 <os_dev_walk>:
void
os_dev_walk(int (*walk_func)(struct os_dev *, void *), void *arg)
{
    struct os_dev *dev;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9490:	4b06      	ldr	r3, [pc, #24]	; (94ac <os_dev_walk+0x1c>)
{
    9492:	b570      	push	{r4, r5, r6, lr}
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9494:	681c      	ldr	r4, [r3, #0]
{
    9496:	4605      	mov	r5, r0
    9498:	460e      	mov	r6, r1
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    949a:	b904      	cbnz	r4, 949e <os_dev_walk+0xe>
        if (walk_func(dev, arg)) {
            break;
        }
    }
}
    949c:	bd70      	pop	{r4, r5, r6, pc}
        if (walk_func(dev, arg)) {
    949e:	4631      	mov	r1, r6
    94a0:	4620      	mov	r0, r4
    94a2:	47a8      	blx	r5
    94a4:	2800      	cmp	r0, #0
    94a6:	d1f9      	bne.n	949c <os_dev_walk+0xc>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    94a8:	6a24      	ldr	r4, [r4, #32]
    94aa:	e7f6      	b.n	949a <os_dev_walk+0xa>
    94ac:	200025dc 	.word	0x200025dc

000094b0 <os_eventq_init>:

static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    94b0:	b510      	push	{r4, lr}
    memset(evq, 0, sizeof(*evq));
    94b2:	2210      	movs	r2, #16
{
    94b4:	4604      	mov	r4, r0
    memset(evq, 0, sizeof(*evq));
    94b6:	2100      	movs	r1, #0
    94b8:	f006 f8a1 	bl	f5fe <memset>
    STAILQ_INIT(&evq->evq_list);
    94bc:	f104 0308 	add.w	r3, r4, #8
    94c0:	60e3      	str	r3, [r4, #12]
}
    94c2:	bd10      	pop	{r4, pc}

000094c4 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
    94c4:	68c0      	ldr	r0, [r0, #12]
}
    94c6:	3800      	subs	r0, #0
    94c8:	bf18      	it	ne
    94ca:	2001      	movne	r0, #1
    94cc:	4770      	bx	lr

000094ce <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
    94ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94d0:	460c      	mov	r4, r1
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
    94d2:	4605      	mov	r5, r0
    94d4:	b108      	cbz	r0, 94da <os_eventq_put+0xc>
    94d6:	68c3      	ldr	r3, [r0, #12]
    94d8:	b92b      	cbnz	r3, 94e6 <os_eventq_put+0x18>
    94da:	2300      	movs	r3, #0
    94dc:	461a      	mov	r2, r3
    94de:	4619      	mov	r1, r3
    94e0:	4618      	mov	r0, r3
    94e2:	f7ff fd07 	bl	8ef4 <__assert_func>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    94e6:	f000 fe3f 	bl	a168 <os_arch_save_sr>

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
    94ea:	7822      	ldrb	r2, [r4, #0]
    OS_ENTER_CRITICAL(sr);
    94ec:	4606      	mov	r6, r0
    if (OS_EVENT_QUEUED(ev)) {
    94ee:	b11a      	cbz	r2, 94f8 <os_eventq_put+0x2a>
    if (resched) {
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
    94f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        OS_EXIT_CRITICAL(sr);
    94f4:	f000 be3e 	b.w	a174 <os_arch_restore_sr>
    ev->ev_queued = 1;
    94f8:	2701      	movs	r7, #1
    94fa:	7027      	strb	r7, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
    94fc:	68eb      	ldr	r3, [r5, #12]
    if (evq->evq_task) {
    94fe:	6868      	ldr	r0, [r5, #4]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
    9500:	60e2      	str	r2, [r4, #12]
    9502:	601c      	str	r4, [r3, #0]
    9504:	340c      	adds	r4, #12
    9506:	60ec      	str	r4, [r5, #12]
    if (evq->evq_task) {
    9508:	b188      	cbz	r0, 952e <os_eventq_put+0x60>
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
    950a:	7b01      	ldrb	r1, [r0, #12]
    950c:	2902      	cmp	r1, #2
    950e:	d10c      	bne.n	952a <os_eventq_put+0x5c>
            os_sched_wakeup(evq->evq_task);
    9510:	f000 fb04 	bl	9b1c <os_sched_wakeup>
        evq->evq_task = NULL;
    9514:	2300      	movs	r3, #0
    9516:	606b      	str	r3, [r5, #4]
    OS_EXIT_CRITICAL(sr);
    9518:	4630      	mov	r0, r6
    951a:	f000 fe2b 	bl	a174 <os_arch_restore_sr>
    if (resched) {
    951e:	b147      	cbz	r7, 9532 <os_eventq_put+0x64>
}
    9520:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        os_sched(NULL);
    9524:	2000      	movs	r0, #0
    9526:	f000 ba77 	b.w	9a18 <os_sched>
    resched = 0;
    952a:	4617      	mov	r7, r2
    952c:	e7f2      	b.n	9514 <os_eventq_put+0x46>
    952e:	4607      	mov	r7, r0
    9530:	e7f2      	b.n	9518 <os_eventq_put+0x4a>
}
    9532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009534 <os_eventq_get_no_wait>:
{
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
    9534:	6883      	ldr	r3, [r0, #8]
    if (ev) {
    9536:	b13b      	cbz	r3, 9548 <os_eventq_get_no_wait+0x14>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    9538:	68da      	ldr	r2, [r3, #12]
    953a:	6082      	str	r2, [r0, #8]
    953c:	b912      	cbnz	r2, 9544 <os_eventq_get_no_wait+0x10>
    953e:	f100 0208 	add.w	r2, r0, #8
    9542:	60c2      	str	r2, [r0, #12]
        ev->ev_queued = 0;
    9544:	2200      	movs	r2, #0
    9546:	701a      	strb	r2, [r3, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
    9548:	4618      	mov	r0, r3
    954a:	4770      	bx	lr

0000954c <os_eventq_get>:

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
    954c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    954e:	4604      	mov	r4, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
    9550:	f000 fa56 	bl	9a00 <os_sched_get_current_task>
    if (evq->evq_owner != t) {
    9554:	6823      	ldr	r3, [r4, #0]
    9556:	4283      	cmp	r3, r0
    t = os_sched_get_current_task();
    9558:	4605      	mov	r5, r0
    if (evq->evq_owner != t) {
    955a:	d001      	beq.n	9560 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
    955c:	b9b3      	cbnz	r3, 958c <os_eventq_get+0x40>
            evq->evq_owner = t;
    955e:	6020      	str	r0, [r4, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
    9560:	f000 fe02 	bl	a168 <os_arch_save_sr>
    9564:	4606      	mov	r6, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
    9566:	68a7      	ldr	r7, [r4, #8]
    if (ev) {
    9568:	b1b7      	cbz	r7, 9598 <os_eventq_get+0x4c>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    956a:	68fb      	ldr	r3, [r7, #12]
    956c:	60a3      	str	r3, [r4, #8]
    956e:	b913      	cbnz	r3, 9576 <os_eventq_get+0x2a>
    9570:	f104 0308 	add.w	r3, r4, #8
    9574:	60e3      	str	r3, [r4, #12]
        ev->ev_queued = 0;
    9576:	2300      	movs	r3, #0
    9578:	703b      	strb	r3, [r7, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    957a:	7b6b      	ldrb	r3, [r5, #13]
    957c:	f023 0308 	bic.w	r3, r3, #8

        OS_ENTER_CRITICAL(sr);
        evq->evq_task = NULL;
        goto pull_one;
    }
    OS_EXIT_CRITICAL(sr);
    9580:	4630      	mov	r0, r6
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    9582:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
    9584:	f000 fdf6 	bl	a174 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
    9588:	4638      	mov	r0, r7
    958a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            assert(0);
    958c:	2300      	movs	r3, #0
    958e:	461a      	mov	r2, r3
    9590:	4619      	mov	r1, r3
    9592:	4618      	mov	r0, r3
    9594:	f7ff fcae 	bl	8ef4 <__assert_func>
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
    9598:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        evq->evq_task = t;
    959c:	6065      	str	r5, [r4, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
    959e:	4628      	mov	r0, r5
    95a0:	f000 fa4c 	bl	9a3c <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
    95a4:	7b6b      	ldrb	r3, [r5, #13]
    95a6:	f043 0308 	orr.w	r3, r3, #8
    95aa:	736b      	strb	r3, [r5, #13]
        OS_EXIT_CRITICAL(sr);
    95ac:	4630      	mov	r0, r6
    95ae:	f000 fde1 	bl	a174 <os_arch_restore_sr>
        os_sched(NULL);
    95b2:	4638      	mov	r0, r7
    95b4:	f000 fa30 	bl	9a18 <os_sched>
        OS_ENTER_CRITICAL(sr);
    95b8:	f000 fdd6 	bl	a168 <os_arch_save_sr>
        evq->evq_task = NULL;
    95bc:	6067      	str	r7, [r4, #4]
        OS_ENTER_CRITICAL(sr);
    95be:	4606      	mov	r6, r0
        goto pull_one;
    95c0:	e7d1      	b.n	9566 <os_eventq_get+0x1a>

000095c2 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
    95c2:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
    95c4:	f7ff ffc2 	bl	954c <os_eventq_get>
    assert(ev->ev_cb != NULL);
    95c8:	6843      	ldr	r3, [r0, #4]
    95ca:	b923      	cbnz	r3, 95d6 <os_eventq_run+0x14>
    95cc:	461a      	mov	r2, r3
    95ce:	4619      	mov	r1, r3
    95d0:	4618      	mov	r0, r3
    95d2:	f7ff fc8f 	bl	8ef4 <__assert_func>
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
    95d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ev->ev_cb(ev);
    95da:	4718      	bx	r3

000095dc <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
    95dc:	b538      	push	{r3, r4, r5, lr}
    95de:	460c      	mov	r4, r1
    95e0:	4605      	mov	r5, r0
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    95e2:	f000 fdc1 	bl	a168 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
    95e6:	7823      	ldrb	r3, [r4, #0]
    95e8:	b143      	cbz	r3, 95fc <os_eventq_remove+0x20>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    95ea:	68ab      	ldr	r3, [r5, #8]
    95ec:	68e1      	ldr	r1, [r4, #12]
    95ee:	42a3      	cmp	r3, r4
    95f0:	d10a      	bne.n	9608 <os_eventq_remove+0x2c>
    95f2:	60a9      	str	r1, [r5, #8]
    95f4:	b911      	cbnz	r1, 95fc <os_eventq_remove+0x20>
    95f6:	f105 0308 	add.w	r3, r5, #8
    95fa:	60eb      	str	r3, [r5, #12]
    }
    ev->ev_queued = 0;
    95fc:	2300      	movs	r3, #0
    95fe:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
    9600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OS_EXIT_CRITICAL(sr);
    9604:	f000 bdb6 	b.w	a174 <os_arch_restore_sr>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    9608:	461a      	mov	r2, r3
    960a:	68db      	ldr	r3, [r3, #12]
    960c:	42a3      	cmp	r3, r4
    960e:	d1fb      	bne.n	9608 <os_eventq_remove+0x2c>
    9610:	60d1      	str	r1, [r2, #12]
    9612:	2900      	cmp	r1, #0
    9614:	d1f2      	bne.n	95fc <os_eventq_remove+0x20>
    9616:	320c      	adds	r2, #12
    9618:	60ea      	str	r2, [r5, #12]
    961a:	e7ef      	b.n	95fc <os_eventq_remove+0x20>

0000961c <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
    961c:	4800      	ldr	r0, [pc, #0]	; (9620 <os_eventq_dflt_get+0x4>)
    961e:	4770      	bx	lr
    9620:	200025e4 	.word	0x200025e4

00009624 <os_mempool_init_internal>:

static os_error_t
os_mempool_init_internal(struct os_mempool *mp, uint16_t blocks,
                         uint32_t block_size, void *membuf, char *name,
                         uint8_t flags)
{
    9624:	b570      	push	{r4, r5, r6, lr}
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    9626:	b110      	cbz	r0, 962e <os_mempool_init_internal+0xa>
    9628:	b10a      	cbz	r2, 962e <os_mempool_init_internal+0xa>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    962a:	b913      	cbnz	r3, 9632 <os_mempool_init_internal+0xe>
    962c:	b119      	cbz	r1, 9636 <os_mempool_init_internal+0x12>
        return OS_INVALID_PARM;
    962e:	2003      	movs	r0, #3
    9630:	e022      	b.n	9678 <os_mempool_init_internal+0x54>

    if (membuf != NULL) {
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    9632:	079d      	lsls	r5, r3, #30
    9634:	d126      	bne.n	9684 <os_mempool_init_internal+0x60>

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    mp->mp_num_free = blocks;
    mp->mp_min_free = blocks;
    mp->mp_flags = flags;
    9636:	f89d 4014 	ldrb.w	r4, [sp, #20]
    963a:	7284      	strb	r4, [r0, #10]
    mp->mp_num_blocks = blocks;
    mp->mp_membuf_addr = (uint32_t)membuf;
    mp->name = name;
    963c:	9c04      	ldr	r4, [sp, #16]
    mp->mp_block_size = block_size;
    963e:	6002      	str	r2, [r0, #0]
    SLIST_FIRST(mp) = membuf;
    9640:	e9c0 3405 	strd	r3, r4, [r0, #20]
    mp->mp_num_free = blocks;
    9644:	80c1      	strh	r1, [r0, #6]
    mp->mp_min_free = blocks;
    9646:	8101      	strh	r1, [r0, #8]
    mp->mp_num_blocks = blocks;
    9648:	8081      	strh	r1, [r0, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    964a:	60c3      	str	r3, [r0, #12]

    if (blocks > 0) {
    964c:	b161      	cbz	r1, 9668 <os_mempool_init_internal+0x44>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    964e:	0794      	lsls	r4, r2, #30
    9650:	bf1c      	itt	ne
    9652:	f022 0203 	bicne.w	r2, r2, #3
    9656:	3204      	addne	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    9658:	461d      	mov	r5, r3
    965a:	2401      	movs	r4, #1
    965c:	428c      	cmp	r4, r1
    965e:	db0c      	blt.n	967a <os_mempool_init_internal+0x56>
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    9660:	3901      	subs	r1, #1
    9662:	434a      	muls	r2, r1
    9664:	2100      	movs	r1, #0
    9666:	5099      	str	r1, [r3, r2]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    9668:	4a07      	ldr	r2, [pc, #28]	; (9688 <os_mempool_init_internal+0x64>)
    966a:	6851      	ldr	r1, [r2, #4]
    966c:	2300      	movs	r3, #0
    966e:	6103      	str	r3, [r0, #16]
    9670:	6008      	str	r0, [r1, #0]
    9672:	3010      	adds	r0, #16
    9674:	6050      	str	r0, [r2, #4]
    9676:	4618      	mov	r0, r3

    return OS_OK;
}
    9678:	bd70      	pop	{r4, r5, r6, pc}
            block_addr += true_block_size;
    967a:	18ae      	adds	r6, r5, r2
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    967c:	602e      	str	r6, [r5, #0]
        for (i = 1; i < blocks; i++) {
    967e:	3401      	adds	r4, #1
            block_addr += true_block_size;
    9680:	4635      	mov	r5, r6
    9682:	e7eb      	b.n	965c <os_mempool_init_internal+0x38>
            return OS_MEM_NOT_ALIGNED;
    9684:	2004      	movs	r0, #4
    9686:	e7f7      	b.n	9678 <os_mempool_init_internal+0x54>
    9688:	200025f4 	.word	0x200025f4

0000968c <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    968c:	b513      	push	{r0, r1, r4, lr}
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    968e:	2400      	movs	r4, #0
    9690:	9401      	str	r4, [sp, #4]
    9692:	9c04      	ldr	r4, [sp, #16]
    9694:	9400      	str	r4, [sp, #0]
    9696:	f7ff ffc5 	bl	9624 <os_mempool_init_internal>
}
    969a:	b002      	add	sp, #8
    969c:	bd10      	pop	{r4, pc}

0000969e <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
    969e:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    96a0:	4604      	mov	r4, r0
    96a2:	b180      	cbz	r0, 96c6 <os_memblock_get+0x28>
        OS_ENTER_CRITICAL(sr);
    96a4:	f000 fd60 	bl	a168 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
    96a8:	88e3      	ldrh	r3, [r4, #6]
    96aa:	b173      	cbz	r3, 96ca <os_memblock_get+0x2c>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    96ac:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    96ae:	682a      	ldr	r2, [r5, #0]
    96b0:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    96b2:	3b01      	subs	r3, #1
            if (mp->mp_min_free > mp->mp_num_free) {
    96b4:	8922      	ldrh	r2, [r4, #8]
            mp->mp_num_free--;
    96b6:	b29b      	uxth	r3, r3
            if (mp->mp_min_free > mp->mp_num_free) {
    96b8:	429a      	cmp	r2, r3
            mp->mp_num_free--;
    96ba:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    96bc:	d900      	bls.n	96c0 <os_memblock_get+0x22>
                mp->mp_min_free = mp->mp_num_free;
    96be:	8123      	strh	r3, [r4, #8]
            }
        }
        OS_EXIT_CRITICAL(sr);
    96c0:	f000 fd58 	bl	a174 <os_arch_restore_sr>

        if (block) {
    96c4:	462c      	mov	r4, r5
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
    96c6:	4620      	mov	r0, r4
    96c8:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
    96ca:	461d      	mov	r5, r3
    96cc:	e7f8      	b.n	96c0 <os_memblock_get+0x22>

000096ce <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    96ce:	b538      	push	{r3, r4, r5, lr}
    96d0:	4604      	mov	r4, r0
    96d2:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    96d4:	f000 fd48 	bl	a168 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    96d8:	6963      	ldr	r3, [r4, #20]
    96da:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    96dc:	88e3      	ldrh	r3, [r4, #6]
    SLIST_FIRST(mp) = block;
    96de:	6165      	str	r5, [r4, #20]
    mp->mp_num_free++;
    96e0:	3301      	adds	r3, #1
    96e2:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    96e4:	f000 fd46 	bl	a174 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    96e8:	2000      	movs	r0, #0
    96ea:	bd38      	pop	{r3, r4, r5, pc}

000096ec <os_memblock_put>:

os_error_t
os_memblock_put(struct os_mempool *mp, void *block_addr)
{
    96ec:	b410      	push	{r4}
    96ee:	460a      	mov	r2, r1

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    96f0:	4603      	mov	r3, r0
    96f2:	b180      	cbz	r0, 9716 <os_memblock_put+0x2a>
    96f4:	b179      	cbz	r1, 9716 <os_memblock_put+0x2a>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    96f6:	7a84      	ldrb	r4, [r0, #10]
    96f8:	07e4      	lsls	r4, r4, #31
    96fa:	d506      	bpl.n	970a <os_memblock_put+0x1e>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    96fc:	69c4      	ldr	r4, [r0, #28]
    96fe:	b124      	cbz	r4, 970a <os_memblock_put+0x1e>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    9700:	4623      	mov	r3, r4
    9702:	6a02      	ldr	r2, [r0, #32]
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    9704:	f85d 4b04 	ldr.w	r4, [sp], #4
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    9708:	4718      	bx	r3
}
    970a:	f85d 4b04 	ldr.w	r4, [sp], #4
    ret = os_memblock_put_from_cb(mp, block_addr);
    970e:	4611      	mov	r1, r2
    9710:	4618      	mov	r0, r3
    9712:	f7ff bfdc 	b.w	96ce <os_memblock_put_from_cb>
}
    9716:	2003      	movs	r0, #3
    9718:	f85d 4b04 	ldr.w	r4, [sp], #4
    971c:	4770      	bx	lr
	...

00009720 <os_mempool_info_get_next>:

struct os_mempool *
os_mempool_info_get_next(struct os_mempool *mp, struct os_mempool_info *omi)
{
    9720:	b510      	push	{r4, lr}
    9722:	460b      	mov	r3, r1
    struct os_mempool *cur;

    if (mp == NULL) {
    9724:	b990      	cbnz	r0, 974c <os_mempool_info_get_next+0x2c>
        cur = STAILQ_FIRST(&g_os_mempool_list);
    9726:	4a0a      	ldr	r2, [pc, #40]	; (9750 <os_mempool_info_get_next+0x30>)
    9728:	6814      	ldr	r4, [r2, #0]
    } else {
        cur = STAILQ_NEXT(mp, mp_list);
    }

    if (cur == NULL) {
    972a:	b16c      	cbz	r4, 9748 <os_mempool_info_get_next+0x28>
        return (NULL);
    }

    omi->omi_block_size = cur->mp_block_size;
    972c:	6822      	ldr	r2, [r4, #0]
    972e:	601a      	str	r2, [r3, #0]
    omi->omi_num_blocks = cur->mp_num_blocks;
    9730:	88a2      	ldrh	r2, [r4, #4]
    9732:	605a      	str	r2, [r3, #4]
    omi->omi_num_free = cur->mp_num_free;
    9734:	88e2      	ldrh	r2, [r4, #6]
    9736:	609a      	str	r2, [r3, #8]
    omi->omi_min_free = cur->mp_min_free;
    9738:	8922      	ldrh	r2, [r4, #8]
    973a:	60da      	str	r2, [r3, #12]
    strncpy(omi->omi_name, cur->name, sizeof(omi->omi_name));
    973c:	69a1      	ldr	r1, [r4, #24]
    973e:	2220      	movs	r2, #32
    9740:	f103 0010 	add.w	r0, r3, #16
    9744:	f005 ff93 	bl	f66e <strncpy>

    return (cur);
}
    9748:	4620      	mov	r0, r4
    974a:	bd10      	pop	{r4, pc}
        cur = STAILQ_NEXT(mp, mp_list);
    974c:	6904      	ldr	r4, [r0, #16]
    974e:	e7ec      	b.n	972a <os_mempool_info_get_next+0xa>
    9750:	200025f4 	.word	0x200025f4

00009754 <os_mempool_module_init>:

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    9754:	4b02      	ldr	r3, [pc, #8]	; (9760 <os_mempool_module_init+0xc>)
    9756:	2200      	movs	r2, #0
    9758:	e9c3 2300 	strd	r2, r3, [r3]
}
    975c:	4770      	bx	lr
    975e:	bf00      	nop
    9760:	200025f4 	.word	0x200025f4

00009764 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    9764:	4907      	ldr	r1, [pc, #28]	; (9784 <os_msys_find_pool+0x20>)
{
    9766:	b510      	push	{r4, lr}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    9768:	680a      	ldr	r2, [r1, #0]
{
    976a:	4603      	mov	r3, r0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    976c:	4610      	mov	r0, r2
    976e:	b918      	cbnz	r0, 9778 <os_msys_find_pool+0x14>
            break;
        }
    }

    if (!pool) {
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    9770:	b10a      	cbz	r2, 9776 <os_msys_find_pool+0x12>
    9772:	6848      	ldr	r0, [r1, #4]
    9774:	3808      	subs	r0, #8
    }

    return (pool);
}
    9776:	bd10      	pop	{r4, pc}
        if (dsize <= pool->omp_databuf_len) {
    9778:	8804      	ldrh	r4, [r0, #0]
    977a:	429c      	cmp	r4, r3
    977c:	d2fb      	bcs.n	9776 <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    977e:	6880      	ldr	r0, [r0, #8]
    9780:	e7f5      	b.n	976e <os_msys_find_pool+0xa>
    9782:	bf00      	nop
    9784:	20000548 	.word	0x20000548

00009788 <os_msys_register>:
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    9788:	4a0e      	ldr	r2, [pc, #56]	; (97c4 <os_msys_register+0x3c>)
{
    978a:	b570      	push	{r4, r5, r6, lr}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    978c:	6814      	ldr	r4, [r2, #0]
    prev = NULL;
    978e:	2100      	movs	r1, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    9790:	4623      	mov	r3, r4
    9792:	b11b      	cbz	r3, 979c <os_msys_register+0x14>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    9794:	8806      	ldrh	r6, [r0, #0]
    9796:	881d      	ldrh	r5, [r3, #0]
    9798:	42ae      	cmp	r6, r5
    979a:	d207      	bcs.n	97ac <os_msys_register+0x24>
    if (prev) {
    979c:	b949      	cbnz	r1, 97b2 <os_msys_register+0x2a>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    979e:	6084      	str	r4, [r0, #8]
    97a0:	b914      	cbnz	r4, 97a8 <os_msys_register+0x20>
    97a2:	f100 0308 	add.w	r3, r0, #8
    97a6:	6053      	str	r3, [r2, #4]
    97a8:	6010      	str	r0, [r2, #0]
    97aa:	e009      	b.n	97c0 <os_msys_register+0x38>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    97ac:	4619      	mov	r1, r3
    97ae:	689b      	ldr	r3, [r3, #8]
    97b0:	e7ef      	b.n	9792 <os_msys_register+0xa>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    97b2:	688b      	ldr	r3, [r1, #8]
    97b4:	6083      	str	r3, [r0, #8]
    97b6:	b913      	cbnz	r3, 97be <os_msys_register+0x36>
    97b8:	f100 0308 	add.w	r3, r0, #8
    97bc:	6053      	str	r3, [r2, #4]
    97be:	6088      	str	r0, [r1, #8]
}
    97c0:	2000      	movs	r0, #0
    97c2:	bd70      	pop	{r4, r5, r6, pc}
    97c4:	20000548 	.word	0x20000548

000097c8 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    97c8:	4b02      	ldr	r3, [pc, #8]	; (97d4 <os_msys_reset+0xc>)
    97ca:	2200      	movs	r2, #0
    97cc:	e9c3 2300 	strd	r2, r3, [r3]
}
    97d0:	4770      	bx	lr
    97d2:	bf00      	nop
    97d4:	20000548 	.word	0x20000548

000097d8 <os_msys_get_pkthdr>:
    return (NULL);
}

struct os_mbuf *
os_msys_get_pkthdr(uint16_t dsize, uint16_t user_hdr_len)
{
    97d8:	b510      	push	{r4, lr}
    97da:	460c      	mov	r4, r1
    total_pkthdr_len =  user_hdr_len + sizeof(struct os_mbuf_pkthdr);

    /* If dsize = 0 that means user has no idea how big block size is needed,
     * therefore lets find for him the biggest one
     */
    if (dsize == 0) {
    97dc:	b948      	cbnz	r0, 97f2 <os_msys_get_pkthdr+0x1a>
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    97de:	4b09      	ldr	r3, [pc, #36]	; (9804 <os_msys_get_pkthdr+0x2c>)
    97e0:	6818      	ldr	r0, [r3, #0]
    97e2:	b168      	cbz	r0, 9800 <os_msys_get_pkthdr+0x28>
    97e4:	6858      	ldr	r0, [r3, #4]
    97e6:	3808      	subs	r0, #8

    if (!pool) {
        goto err;
    }

    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    97e8:	b2e1      	uxtb	r1, r4
    return (m);
err:
    return (NULL);
}
    97ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    97ee:	f000 bdd4 	b.w	a39a <os_mbuf_get_pkthdr>
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    97f2:	3008      	adds	r0, #8
    97f4:	4408      	add	r0, r1
    97f6:	b280      	uxth	r0, r0
    97f8:	f7ff ffb4 	bl	9764 <os_msys_find_pool>
    if (!pool) {
    97fc:	2800      	cmp	r0, #0
    97fe:	d1f3      	bne.n	97e8 <os_msys_get_pkthdr+0x10>
}
    9800:	2000      	movs	r0, #0
    9802:	bd10      	pop	{r4, pc}
    9804:	20000548 	.word	0x20000548

00009808 <os_msys_count>:
{
    struct os_mbuf_pool *omp;
    int total;

    total = 0;
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    9808:	4b04      	ldr	r3, [pc, #16]	; (981c <os_msys_count+0x14>)
    980a:	681b      	ldr	r3, [r3, #0]
    total = 0;
    980c:	2000      	movs	r0, #0
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    980e:	b903      	cbnz	r3, 9812 <os_msys_count+0xa>
        total += omp->omp_pool->mp_num_blocks;
    }

    return total;
}
    9810:	4770      	bx	lr
        total += omp->omp_pool->mp_num_blocks;
    9812:	685a      	ldr	r2, [r3, #4]
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    9814:	689b      	ldr	r3, [r3, #8]
        total += omp->omp_pool->mp_num_blocks;
    9816:	8892      	ldrh	r2, [r2, #4]
    9818:	4410      	add	r0, r2
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    981a:	e7f8      	b.n	980e <os_msys_count+0x6>
    981c:	20000548 	.word	0x20000548

00009820 <os_msys_num_free>:
{
    struct os_mbuf_pool *omp;
    int total;

    total = 0;
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    9820:	4b04      	ldr	r3, [pc, #16]	; (9834 <os_msys_num_free+0x14>)
    9822:	681b      	ldr	r3, [r3, #0]
    total = 0;
    9824:	2000      	movs	r0, #0
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    9826:	b903      	cbnz	r3, 982a <os_msys_num_free+0xa>
        total += omp->omp_pool->mp_num_free;
    }

    return total;
}
    9828:	4770      	bx	lr
        total += omp->omp_pool->mp_num_free;
    982a:	685a      	ldr	r2, [r3, #4]
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    982c:	689b      	ldr	r3, [r3, #8]
        total += omp->omp_pool->mp_num_free;
    982e:	88d2      	ldrh	r2, [r2, #6]
    9830:	4410      	add	r0, r2
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    9832:	e7f8      	b.n	9826 <os_msys_num_free+0x6>
    9834:	20000548 	.word	0x20000548

00009838 <os_msys_init>:
    SYSINIT_PANIC_ASSERT(rc == 0);
}

void
os_msys_init(void)
{
    9838:	b513      	push	{r0, r1, r4, lr}
    int rc;

    os_msys_reset();
    983a:	f7ff ffc5 	bl	97c8 <os_msys_reset>
    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    983e:	4b11      	ldr	r3, [pc, #68]	; (9884 <os_msys_init+0x4c>)
    9840:	9301      	str	r3, [sp, #4]
    9842:	f44f 7392 	mov.w	r3, #292	; 0x124
    9846:	9300      	str	r3, [sp, #0]
    9848:	4a0f      	ldr	r2, [pc, #60]	; (9888 <os_msys_init+0x50>)
    984a:	4910      	ldr	r1, [pc, #64]	; (988c <os_msys_init+0x54>)
    984c:	4810      	ldr	r0, [pc, #64]	; (9890 <os_msys_init+0x58>)
    984e:	230c      	movs	r3, #12
    9850:	f007 fd31 	bl	112b6 <mem_init_mbuf_pool>
    SYSINIT_PANIC_ASSERT(rc == 0);
    9854:	b138      	cbz	r0, 9866 <os_msys_init+0x2e>
    9856:	2300      	movs	r3, #0
    9858:	4a0e      	ldr	r2, [pc, #56]	; (9894 <os_msys_init+0x5c>)
    985a:	9300      	str	r3, [sp, #0]
    985c:	6814      	ldr	r4, [r2, #0]
    985e:	4619      	mov	r1, r3
    9860:	461a      	mov	r2, r3
    9862:	4618      	mov	r0, r3
    9864:	47a0      	blx	r4
    rc = os_msys_register(mbuf_pool);
    9866:	4808      	ldr	r0, [pc, #32]	; (9888 <os_msys_init+0x50>)
    9868:	f7ff ff8e 	bl	9788 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    986c:	b138      	cbz	r0, 987e <os_msys_init+0x46>
    986e:	2300      	movs	r3, #0
    9870:	4a08      	ldr	r2, [pc, #32]	; (9894 <os_msys_init+0x5c>)
    9872:	9300      	str	r3, [sp, #0]
    9874:	6814      	ldr	r4, [r2, #0]
    9876:	4619      	mov	r1, r3
    9878:	461a      	mov	r2, r3
    987a:	4618      	mov	r0, r3
    987c:	47a0      	blx	r4
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    987e:	b002      	add	sp, #8
    9880:	bd10      	pop	{r4, pc}
    9882:	bf00      	nop
    9884:	00021c7f 	.word	0x00021c7f
    9888:	200033ac 	.word	0x200033ac
    988c:	200033b8 	.word	0x200033b8
    9890:	200025fc 	.word	0x200025fc
    9894:	20000768 	.word	0x20000768

00009898 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
    9898:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    989a:	4b04      	ldr	r3, [pc, #16]	; (98ac <os_sanity_check_list_lock+0x14>)
    989c:	6818      	ldr	r0, [r3, #0]
    989e:	b120      	cbz	r0, 98aa <os_sanity_check_list_lock+0x12>
        return (0);
    }

    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
    98a0:	4803      	ldr	r0, [pc, #12]	; (98b0 <os_sanity_check_list_lock+0x18>)
    98a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    98a6:	f000 ff61 	bl	a76c <os_mutex_pend>
    }

    return (0);
err:
    return (rc);
}
    98aa:	bd08      	pop	{r3, pc}
    98ac:	200025d0 	.word	0x200025d0
    98b0:	200033d8 	.word	0x200033d8

000098b4 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
    98b4:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    98b6:	4b03      	ldr	r3, [pc, #12]	; (98c4 <os_sanity_check_list_unlock+0x10>)
    98b8:	6818      	ldr	r0, [r3, #0]
    98ba:	b110      	cbz	r0, 98c2 <os_sanity_check_list_unlock+0xe>
        return (0);
    }

    rc = os_mutex_release(&g_os_sanity_check_mu);
    98bc:	4802      	ldr	r0, [pc, #8]	; (98c8 <os_sanity_check_list_unlock+0x14>)
    98be:	f000 ff03 	bl	a6c8 <os_mutex_release>
    }

    return (0);
err:
    return (rc);
}
    98c2:	bd08      	pop	{r3, pc}
    98c4:	200025d0 	.word	0x200025d0
    98c8:	200033d8 	.word	0x200033d8

000098cc <os_sanity_check_init>:
{
    98cc:	b508      	push	{r3, lr}
    memset(sc, 0, sizeof(*sc));
    98ce:	2214      	movs	r2, #20
    98d0:	2100      	movs	r1, #0
    98d2:	f005 fe94 	bl	f5fe <memset>
}
    98d6:	2000      	movs	r0, #0
    98d8:	bd08      	pop	{r3, pc}
	...

000098dc <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
    98dc:	b510      	push	{r4, lr}
    98de:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    98e0:	f7ff ffda 	bl	9898 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    98e4:	b938      	cbnz	r0, 98f6 <os_sanity_check_register+0x1a>
        goto err;
    }

    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
    98e6:	4b04      	ldr	r3, [pc, #16]	; (98f8 <os_sanity_check_register+0x1c>)
    98e8:	681a      	ldr	r2, [r3, #0]
    98ea:	6122      	str	r2, [r4, #16]
    98ec:	601c      	str	r4, [r3, #0]
    }

    return (0);
err:
    return (rc);
}
    98ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rc = os_sanity_check_list_unlock();
    98f2:	f7ff bfdf 	b.w	98b4 <os_sanity_check_list_unlock>
}
    98f6:	bd10      	pop	{r4, pc}
    98f8:	200033d4 	.word	0x200033d4

000098fc <os_sanity_check_reset>:


int
os_sanity_check_reset(struct os_sanity_check *sc)
{
    98fc:	b510      	push	{r4, lr}
    98fe:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    9900:	f7ff ffca 	bl	9898 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    9904:	b930      	cbnz	r0, 9914 <os_sanity_check_reset+0x18>
        goto err;
    }

    sc->sc_checkin_last = os_time_get();
    9906:	f000 fb07 	bl	9f18 <os_time_get>
    990a:	6020      	str	r0, [r4, #0]
    }

    return (0);
err:
    return (rc);
}
    990c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rc = os_sanity_check_list_unlock();
    9910:	f7ff bfd0 	b.w	98b4 <os_sanity_check_list_unlock>
}
    9914:	bd10      	pop	{r4, pc}

00009916 <os_sanity_task_checkin>:
{
    9916:	b508      	push	{r3, lr}
    if (t == NULL) {
    9918:	b908      	cbnz	r0, 991e <os_sanity_task_checkin+0x8>
        t = os_sched_get_current_task();
    991a:	f000 f871 	bl	9a00 <os_sched_get_current_task>
}
    991e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    rc = os_sanity_check_reset(&t->t_sanity_check);
    9922:	3020      	adds	r0, #32
    9924:	f7ff bfea 	b.w	98fc <os_sanity_check_reset>

00009928 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
    9928:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
    992a:	f7ff ffb5 	bl	9898 <os_sanity_check_list_lock>
    if (rc != 0) {
    992e:	b128      	cbz	r0, 993c <os_sanity_run+0x14>
        assert(0);
    9930:	2300      	movs	r3, #0
    9932:	461a      	mov	r2, r3
    9934:	4619      	mov	r1, r3
    9936:	4618      	mov	r0, r3
    9938:	f7ff fadc 	bl	8ef4 <__assert_func>
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    993c:	4b0d      	ldr	r3, [pc, #52]	; (9974 <os_sanity_run+0x4c>)
    993e:	681c      	ldr	r4, [r3, #0]
    9940:	b924      	cbnz	r4, 994c <os_sanity_run+0x24>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
        }
    }

    rc = os_sanity_check_list_unlock();
    9942:	f7ff ffb7 	bl	98b4 <os_sanity_check_list_unlock>
    if (rc != 0) {
    9946:	2800      	cmp	r0, #0
    9948:	d1f2      	bne.n	9930 <os_sanity_run+0x8>
        assert(0);
    }
}
    994a:	bd10      	pop	{r4, pc}
        if (sc->sc_func) {
    994c:	68a3      	ldr	r3, [r4, #8]
    994e:	b143      	cbz	r3, 9962 <os_sanity_run+0x3a>
            rc = sc->sc_func(sc, sc->sc_arg);
    9950:	68e1      	ldr	r1, [r4, #12]
    9952:	4620      	mov	r0, r4
    9954:	4798      	blx	r3
            if (rc == OS_OK) {
    9956:	b920      	cbnz	r0, 9962 <os_sanity_run+0x3a>
                sc->sc_checkin_last = os_time_get();
    9958:	f000 fade 	bl	9f18 <os_time_get>
    995c:	6020      	str	r0, [r4, #0]
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    995e:	6924      	ldr	r4, [r4, #16]
    9960:	e7ee      	b.n	9940 <os_sanity_run+0x18>
        if (OS_TIME_TICK_GT(os_time_get(),
    9962:	f000 fad9 	bl	9f18 <os_time_get>
    9966:	e9d4 3200 	ldrd	r3, r2, [r4]
    996a:	4413      	add	r3, r2
    996c:	1ac0      	subs	r0, r0, r3
    996e:	2800      	cmp	r0, #0
    9970:	ddf5      	ble.n	995e <os_sanity_run+0x36>
    9972:	e7dd      	b.n	9930 <os_sanity_run+0x8>
    9974:	200033d4 	.word	0x200033d4

00009978 <os_sanity_init>:

int
os_sanity_init(void)
{
    9978:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
    997a:	4802      	ldr	r0, [pc, #8]	; (9984 <os_sanity_init+0xc>)
    997c:	f000 fe9a 	bl	a6b4 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
    9980:	bd08      	pop	{r3, pc}
    9982:	bf00      	nop
    9984:	200033d8 	.word	0x200033d8

00009988 <os_sched_insert>:
 * @return int  OS_OK: task was inserted into run list
 *              OS_EINVAL: Task was not in ready state.
 */
os_error_t
os_sched_insert(struct os_task *t)
{
    9988:	b538      	push	{r3, r4, r5, lr}
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
    998a:	7b03      	ldrb	r3, [r0, #12]
    998c:	2b01      	cmp	r3, #1
{
    998e:	4604      	mov	r4, r0
    if (t->t_state != OS_TASK_READY) {
    9990:	d111      	bne.n	99b6 <os_sched_insert+0x2e>
        rc = OS_EINVAL;
        goto err;
    }

    entry = NULL;
    OS_ENTER_CRITICAL(sr);
    9992:	f000 fbe9 	bl	a168 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    9996:	4a0e      	ldr	r2, [pc, #56]	; (99d0 <os_sched_insert+0x48>)
    9998:	6813      	ldr	r3, [r2, #0]
    999a:	b933      	cbnz	r3, 99aa <os_sched_insert+0x22>
        }
    }
    if (entry) {
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    } else {
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
    999c:	6463      	str	r3, [r4, #68]	; 0x44
    999e:	6853      	ldr	r3, [r2, #4]
    99a0:	64a3      	str	r3, [r4, #72]	; 0x48
    99a2:	601c      	str	r4, [r3, #0]
    99a4:	3444      	adds	r4, #68	; 0x44
    99a6:	6054      	str	r4, [r2, #4]
    99a8:	e00d      	b.n	99c6 <os_sched_insert+0x3e>
        if (t->t_prio < entry->t_prio) {
    99aa:	7ae5      	ldrb	r5, [r4, #11]
    99ac:	7ad9      	ldrb	r1, [r3, #11]
    99ae:	428d      	cmp	r5, r1
    99b0:	d303      	bcc.n	99ba <os_sched_insert+0x32>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    99b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    99b4:	e7f1      	b.n	999a <os_sched_insert+0x12>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
    99b6:	2002      	movs	r0, #2
    99b8:	e008      	b.n	99cc <os_sched_insert+0x44>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    99ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    99bc:	e9c4 3211 	strd	r3, r2, [r4, #68]	; 0x44
    99c0:	6014      	str	r4, [r2, #0]
    99c2:	3444      	adds	r4, #68	; 0x44
    99c4:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
    99c6:	f000 fbd5 	bl	a174 <os_arch_restore_sr>
    99ca:	2000      	movs	r0, #0
}
    99cc:	bd38      	pop	{r3, r4, r5, pc}
    99ce:	bf00      	nop
    99d0:	20000550 	.word	0x20000550

000099d4 <os_sched_ctx_sw_hook>:
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
    99d4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
    99d6:	4a07      	ldr	r2, [pc, #28]	; (99f4 <os_sched_ctx_sw_hook+0x20>)
    next_t->t_ctx_sw_cnt++;
    99d8:	3301      	adds	r3, #1
{
    99da:	b510      	push	{r4, lr}
    next_t->t_ctx_sw_cnt++;
    99dc:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
    99de:	4b06      	ldr	r3, [pc, #24]	; (99f8 <os_sched_ctx_sw_hook+0x24>)
    99e0:	6814      	ldr	r4, [r2, #0]
    99e2:	6818      	ldr	r0, [r3, #0]
    99e4:	4b05      	ldr	r3, [pc, #20]	; (99fc <os_sched_ctx_sw_hook+0x28>)
    99e6:	6819      	ldr	r1, [r3, #0]
    99e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
    99ea:	6011      	str	r1, [r2, #0]
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
    99ec:	1b1b      	subs	r3, r3, r4
    99ee:	440b      	add	r3, r1
    99f0:	6383      	str	r3, [r0, #56]	; 0x38
}
    99f2:	bd10      	pop	{r4, pc}
    99f4:	200033e8 	.word	0x200033e8
    99f8:	200033e4 	.word	0x200033e4
    99fc:	20003428 	.word	0x20003428

00009a00 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
    9a00:	4b01      	ldr	r3, [pc, #4]	; (9a08 <os_sched_get_current_task+0x8>)
    9a02:	6818      	ldr	r0, [r3, #0]
    9a04:	4770      	bx	lr
    9a06:	bf00      	nop
    9a08:	200033e4 	.word	0x200033e4

00009a0c <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
    9a0c:	4b01      	ldr	r3, [pc, #4]	; (9a14 <os_sched_set_current_task+0x8>)
    9a0e:	6018      	str	r0, [r3, #0]
}
    9a10:	4770      	bx	lr
    9a12:	bf00      	nop
    9a14:	200033e4 	.word	0x200033e4

00009a18 <os_sched>:

void
os_sched(struct os_task *next_t)
{
    9a18:	b538      	push	{r3, r4, r5, lr}
    9a1a:	4604      	mov	r4, r0
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    9a1c:	f000 fba4 	bl	a168 <os_arch_save_sr>
    9a20:	4605      	mov	r5, r0

    if (!next_t) {
    9a22:	b90c      	cbnz	r4, 9a28 <os_sched+0x10>
 * @return struct os_task*
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
    9a24:	4b04      	ldr	r3, [pc, #16]	; (9a38 <os_sched+0x20>)
    9a26:	681c      	ldr	r4, [r3, #0]
    os_arch_ctx_sw(next_t);
    9a28:	4620      	mov	r0, r4
    9a2a:	f000 fb93 	bl	a154 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
    9a2e:	4628      	mov	r0, r5
}
    9a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OS_EXIT_CRITICAL(sr);
    9a34:	f000 bb9e 	b.w	a174 <os_arch_restore_sr>
    9a38:	20000550 	.word	0x20000550

00009a3c <os_sched_sleep>:
{
    9a3c:	b538      	push	{r3, r4, r5, lr}
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9a3e:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
{
    9a42:	4604      	mov	r4, r0
    9a44:	460d      	mov	r5, r1
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9a46:	b1cb      	cbz	r3, 9a7c <os_sched_sleep+0x40>
    9a48:	649a      	str	r2, [r3, #72]	; 0x48
    9a4a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    9a4c:	6013      	str	r3, [r2, #0]
    t->t_state = OS_TASK_SLEEP;
    9a4e:	2302      	movs	r3, #2
    9a50:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
    9a52:	f000 fa61 	bl	9f18 <os_time_get>
    9a56:	4428      	add	r0, r5
    if (nticks == OS_TIMEOUT_NEVER) {
    9a58:	3501      	adds	r5, #1
    9a5a:	4a13      	ldr	r2, [pc, #76]	; (9aa8 <os_sched_sleep+0x6c>)
    t->t_next_wakeup = os_time_get() + nticks;
    9a5c:	6360      	str	r0, [r4, #52]	; 0x34
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    9a5e:	f104 0144 	add.w	r1, r4, #68	; 0x44
    if (nticks == OS_TIMEOUT_NEVER) {
    9a62:	d10e      	bne.n	9a82 <os_sched_sleep+0x46>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    9a64:	7b63      	ldrb	r3, [r4, #13]
    9a66:	f043 0301 	orr.w	r3, r3, #1
    9a6a:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    9a6c:	2300      	movs	r3, #0
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    9a6e:	6463      	str	r3, [r4, #68]	; 0x44
    9a70:	6853      	ldr	r3, [r2, #4]
    9a72:	64a3      	str	r3, [r4, #72]	; 0x48
    9a74:	601c      	str	r4, [r3, #0]
    9a76:	6051      	str	r1, [r2, #4]
}
    9a78:	2000      	movs	r0, #0
    9a7a:	bd38      	pop	{r3, r4, r5, pc}
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9a7c:	490b      	ldr	r1, [pc, #44]	; (9aac <os_sched_sleep+0x70>)
    9a7e:	604a      	str	r2, [r1, #4]
    9a80:	e7e3      	b.n	9a4a <os_sched_sleep+0xe>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    9a82:	6813      	ldr	r3, [r2, #0]
    9a84:	2b00      	cmp	r3, #0
    9a86:	d0f2      	beq.n	9a6e <os_sched_sleep+0x32>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    9a88:	7b5d      	ldrb	r5, [r3, #13]
    9a8a:	07ed      	lsls	r5, r5, #31
    9a8c:	d405      	bmi.n	9a9a <os_sched_sleep+0x5e>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
    9a8e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    9a90:	1a2d      	subs	r5, r5, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    9a92:	2d00      	cmp	r5, #0
    9a94:	dc01      	bgt.n	9a9a <os_sched_sleep+0x5e>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    9a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9a98:	e7f4      	b.n	9a84 <os_sched_sleep+0x48>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
    9a9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9a9c:	e9c4 3211 	strd	r3, r2, [r4, #68]	; 0x44
    9aa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9aa2:	6014      	str	r4, [r2, #0]
    9aa4:	6499      	str	r1, [r3, #72]	; 0x48
    return (0);
    9aa6:	e7e7      	b.n	9a78 <os_sched_sleep+0x3c>
    9aa8:	20000558 	.word	0x20000558
    9aac:	20000550 	.word	0x20000550

00009ab0 <os_sched_remove>:
{
    9ab0:	b510      	push	{r4, lr}
    if (t->t_state == OS_TASK_SLEEP) {
    9ab2:	7b03      	ldrb	r3, [r0, #12]
    9ab4:	2b02      	cmp	r3, #2
    9ab6:	d118      	bne.n	9aea <os_sched_remove+0x3a>
        TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9ab8:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
    9abc:	b193      	cbz	r3, 9ae4 <os_sched_remove+0x34>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9abe:	649a      	str	r2, [r3, #72]	; 0x48
    9ac0:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9ac2:	6013      	str	r3, [r2, #0]
    t->t_next_wakeup = 0;
    9ac4:	2300      	movs	r3, #0
    9ac6:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    9ac8:	7b43      	ldrb	r3, [r0, #13]
    STAILQ_REMOVE(&g_os_task_list, t, os_task, t_os_task_list);
    9aca:	6c04      	ldr	r4, [r0, #64]	; 0x40
    t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    9acc:	f043 0301 	orr.w	r3, r3, #1
    9ad0:	7343      	strb	r3, [r0, #13]
    STAILQ_REMOVE(&g_os_task_list, t, os_task, t_os_task_list);
    9ad2:	4b0f      	ldr	r3, [pc, #60]	; (9b10 <os_sched_remove+0x60>)
    9ad4:	681a      	ldr	r2, [r3, #0]
    9ad6:	4282      	cmp	r2, r0
    9ad8:	d10f      	bne.n	9afa <os_sched_remove+0x4a>
    9ada:	601c      	str	r4, [r3, #0]
    9adc:	b904      	cbnz	r4, 9ae0 <os_sched_remove+0x30>
    9ade:	605b      	str	r3, [r3, #4]
}
    9ae0:	2000      	movs	r0, #0
    9ae2:	bd10      	pop	{r4, pc}
        TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9ae4:	490b      	ldr	r1, [pc, #44]	; (9b14 <os_sched_remove+0x64>)
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9ae6:	604a      	str	r2, [r1, #4]
    9ae8:	e7ea      	b.n	9ac0 <os_sched_remove+0x10>
    } else if (t->t_state == OS_TASK_READY) {
    9aea:	2b01      	cmp	r3, #1
    9aec:	d1ea      	bne.n	9ac4 <os_sched_remove+0x14>
        TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9aee:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9af2:	2b00      	cmp	r3, #0
    9af4:	d1e3      	bne.n	9abe <os_sched_remove+0xe>
    9af6:	4908      	ldr	r1, [pc, #32]	; (9b18 <os_sched_remove+0x68>)
    9af8:	e7f5      	b.n	9ae6 <os_sched_remove+0x36>
    STAILQ_REMOVE(&g_os_task_list, t, os_task, t_os_task_list);
    9afa:	4611      	mov	r1, r2
    9afc:	6c12      	ldr	r2, [r2, #64]	; 0x40
    9afe:	4282      	cmp	r2, r0
    9b00:	d1fb      	bne.n	9afa <os_sched_remove+0x4a>
    9b02:	640c      	str	r4, [r1, #64]	; 0x40
    9b04:	2c00      	cmp	r4, #0
    9b06:	d1eb      	bne.n	9ae0 <os_sched_remove+0x30>
    9b08:	3140      	adds	r1, #64	; 0x40
    9b0a:	6059      	str	r1, [r3, #4]
    9b0c:	e7e8      	b.n	9ae0 <os_sched_remove+0x30>
    9b0e:	bf00      	nop
    9b10:	200033ec 	.word	0x200033ec
    9b14:	20000558 	.word	0x20000558
    9b18:	20000550 	.word	0x20000550

00009b1c <os_sched_wakeup>:
{
    9b1c:	b508      	push	{r3, lr}
    assert(t->t_state == OS_TASK_SLEEP);
    9b1e:	7b03      	ldrb	r3, [r0, #12]
    9b20:	2b02      	cmp	r3, #2
    9b22:	d005      	beq.n	9b30 <os_sched_wakeup+0x14>
    9b24:	2300      	movs	r3, #0
    9b26:	461a      	mov	r2, r3
    9b28:	4619      	mov	r1, r3
    9b2a:	4618      	mov	r0, r3
    9b2c:	f7ff f9e2 	bl	8ef4 <__assert_func>
    if (t->t_obj) {
    9b30:	69c2      	ldr	r2, [r0, #28]
    9b32:	b14a      	cbz	r2, 9b48 <os_sched_wakeup+0x2c>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    9b34:	6813      	ldr	r3, [r2, #0]
    9b36:	2b00      	cmp	r3, #0
    9b38:	d0f4      	beq.n	9b24 <os_sched_wakeup+0x8>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    9b3a:	4283      	cmp	r3, r0
    9b3c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    9b3e:	d115      	bne.n	9b6c <os_sched_wakeup+0x50>
    9b40:	6011      	str	r1, [r2, #0]
        SLIST_NEXT(t, t_obj_list) = NULL;
    9b42:	2300      	movs	r3, #0
    9b44:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
    9b46:	61c3      	str	r3, [r0, #28]
    t->t_state = OS_TASK_READY;
    9b48:	2301      	movs	r3, #1
    9b4a:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
    9b4c:	2300      	movs	r3, #0
    9b4e:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
    9b50:	7b43      	ldrb	r3, [r0, #13]
    9b52:	f023 0301 	bic.w	r3, r3, #1
    9b56:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9b58:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
    9b5c:	b163      	cbz	r3, 9b78 <os_sched_wakeup+0x5c>
    9b5e:	649a      	str	r2, [r3, #72]	; 0x48
    9b60:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9b62:	6013      	str	r3, [r2, #0]
    os_sched_insert(t);
    9b64:	f7ff ff10 	bl	9988 <os_sched_insert>
}
    9b68:	2000      	movs	r0, #0
    9b6a:	bd08      	pop	{r3, pc}
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    9b6c:	461a      	mov	r2, r3
    9b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9b70:	4283      	cmp	r3, r0
    9b72:	d1fb      	bne.n	9b6c <os_sched_wakeup+0x50>
    9b74:	64d1      	str	r1, [r2, #76]	; 0x4c
    9b76:	e7e4      	b.n	9b42 <os_sched_wakeup+0x26>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9b78:	4901      	ldr	r1, [pc, #4]	; (9b80 <os_sched_wakeup+0x64>)
    9b7a:	604a      	str	r2, [r1, #4]
    9b7c:	e7f0      	b.n	9b60 <os_sched_wakeup+0x44>
    9b7e:	bf00      	nop
    9b80:	20000558 	.word	0x20000558

00009b84 <os_sched_os_timer_exp>:
{
    9b84:	b570      	push	{r4, r5, r6, lr}
    now = os_time_get();
    9b86:	f000 f9c7 	bl	9f18 <os_time_get>
    9b8a:	4605      	mov	r5, r0
    OS_ENTER_CRITICAL(sr);
    9b8c:	f000 faec 	bl	a168 <os_arch_save_sr>
    t = TAILQ_FIRST(&g_os_sleep_list);
    9b90:	4b0a      	ldr	r3, [pc, #40]	; (9bbc <os_sched_os_timer_exp+0x38>)
    OS_ENTER_CRITICAL(sr);
    9b92:	4604      	mov	r4, r0
    t = TAILQ_FIRST(&g_os_sleep_list);
    9b94:	6818      	ldr	r0, [r3, #0]
    while (t) {
    9b96:	b920      	cbnz	r0, 9ba2 <os_sched_os_timer_exp+0x1e>
    OS_EXIT_CRITICAL(sr);
    9b98:	4620      	mov	r0, r4
}
    9b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    OS_EXIT_CRITICAL(sr);
    9b9e:	f000 bae9 	b.w	a174 <os_arch_restore_sr>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
    9ba2:	7b42      	ldrb	r2, [r0, #13]
    9ba4:	07d3      	lsls	r3, r2, #31
    9ba6:	d4f7      	bmi.n	9b98 <os_sched_os_timer_exp+0x14>
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
    9ba8:	6b42      	ldr	r2, [r0, #52]	; 0x34
        next = TAILQ_NEXT(t, t_os_list);
    9baa:	6c46      	ldr	r6, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
    9bac:	1aaa      	subs	r2, r5, r2
    9bae:	2a00      	cmp	r2, #0
    9bb0:	dbf2      	blt.n	9b98 <os_sched_os_timer_exp+0x14>
            os_sched_wakeup(t);
    9bb2:	f7ff ffb3 	bl	9b1c <os_sched_wakeup>
        t = next;
    9bb6:	4630      	mov	r0, r6
    9bb8:	e7ed      	b.n	9b96 <os_sched_os_timer_exp+0x12>
    9bba:	bf00      	nop
    9bbc:	20000558 	.word	0x20000558

00009bc0 <os_sched_wakeup_ticks>:
{
    9bc0:	b510      	push	{r4, lr}
    9bc2:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
    9bc4:	f000 fad9 	bl	a17a <os_arch_in_critical>
    9bc8:	4603      	mov	r3, r0
    9bca:	b918      	cbnz	r0, 9bd4 <os_sched_wakeup_ticks+0x14>
    9bcc:	4602      	mov	r2, r0
    9bce:	4601      	mov	r1, r0
    9bd0:	f7ff f990 	bl	8ef4 <__assert_func>
    t = TAILQ_FIRST(&g_os_sleep_list);
    9bd4:	4b06      	ldr	r3, [pc, #24]	; (9bf0 <os_sched_wakeup_ticks+0x30>)
    9bd6:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
    9bd8:	b13b      	cbz	r3, 9bea <os_sched_wakeup_ticks+0x2a>
    9bda:	7b5a      	ldrb	r2, [r3, #13]
    9bdc:	07d2      	lsls	r2, r2, #31
    9bde:	d404      	bmi.n	9bea <os_sched_wakeup_ticks+0x2a>
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
    9be0:	6b58      	ldr	r0, [r3, #52]	; 0x34
    9be2:	1b00      	subs	r0, r0, r4
        rt = 0;     /* wakeup time was in the past */
    9be4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
    9be8:	bd10      	pop	{r4, pc}
        rt = OS_TIMEOUT_NEVER;
    9bea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9bee:	e7fb      	b.n	9be8 <os_sched_wakeup_ticks+0x28>
    9bf0:	20000558 	.word	0x20000558

00009bf4 <os_sched_next_task>:
}
    9bf4:	4b01      	ldr	r3, [pc, #4]	; (9bfc <os_sched_next_task+0x8>)
    9bf6:	6818      	ldr	r0, [r3, #0]
    9bf8:	4770      	bx	lr
    9bfa:	bf00      	nop
    9bfc:	20000550 	.word	0x20000550

00009c00 <os_sched_resort>:
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    if (t->t_state == OS_TASK_READY) {
    9c00:	7b03      	ldrb	r3, [r0, #12]
    9c02:	2b01      	cmp	r3, #1
    9c04:	d10a      	bne.n	9c1c <os_sched_resort+0x1c>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9c06:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
    9c0a:	b123      	cbz	r3, 9c16 <os_sched_resort+0x16>
    9c0c:	649a      	str	r2, [r3, #72]	; 0x48
    9c0e:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9c10:	6013      	str	r3, [r2, #0]
        os_sched_insert(t);
    9c12:	f7ff beb9 	b.w	9988 <os_sched_insert>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9c16:	4902      	ldr	r1, [pc, #8]	; (9c20 <os_sched_resort+0x20>)
    9c18:	604a      	str	r2, [r1, #4]
    9c1a:	e7f8      	b.n	9c0e <os_sched_resort+0xe>
    }
}
    9c1c:	4770      	bx	lr
    9c1e:	bf00      	nop
    9c20:	20000550 	.word	0x20000550

00009c24 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
    9c24:	b120      	cbz	r0, 9c30 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
    SLIST_FIRST(&sem->sem_head) = NULL;
    9c26:	2300      	movs	r3, #0
    sem->sem_tokens = tokens;
    9c28:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
    9c2a:	6003      	str	r3, [r0, #0]

    ret = OS_OK;
    9c2c:	4618      	mov	r0, r3
    9c2e:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    9c30:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
    9c32:	4770      	bx	lr

00009c34 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
    9c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
    9c36:	4b17      	ldr	r3, [pc, #92]	; (9c94 <os_sem_release+0x60>)
    9c38:	681b      	ldr	r3, [r3, #0]
{
    9c3a:	4604      	mov	r4, r0
    if (!g_os_started) {
    9c3c:	b31b      	cbz	r3, 9c86 <os_sem_release+0x52>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
    9c3e:	b320      	cbz	r0, 9c8a <os_sem_release+0x56>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
    9c40:	f7ff fede 	bl	9a00 <os_sched_get_current_task>
    9c44:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
    9c46:	f000 fa8f 	bl	a168 <os_arch_save_sr>

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
    9c4a:	6825      	ldr	r5, [r4, #0]
    OS_ENTER_CRITICAL(sr);
    9c4c:	4606      	mov	r6, r0
    if (rdy) {
    9c4e:	b1ad      	cbz	r5, 9c7c <os_sem_release+0x48>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
    9c50:	7b6b      	ldrb	r3, [r5, #13]
    9c52:	f023 0302 	bic.w	r3, r3, #2
    9c56:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
    9c58:	4628      	mov	r0, r5
    9c5a:	f7ff ff5f 	bl	9b1c <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
    9c5e:	7afc      	ldrb	r4, [r7, #11]
    9c60:	7ae8      	ldrb	r0, [r5, #11]
    9c62:	4284      	cmp	r4, r0
    9c64:	bf94      	ite	ls
    9c66:	2400      	movls	r4, #0
    9c68:	2401      	movhi	r4, #1
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
    }

    OS_EXIT_CRITICAL(sr);
    9c6a:	4630      	mov	r0, r6
    9c6c:	f000 fa82 	bl	a174 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    9c70:	b16c      	cbz	r4, 9c8e <os_sem_release+0x5a>
        os_sched(rdy);
    9c72:	4628      	mov	r0, r5
    9c74:	f7ff fed0 	bl	9a18 <os_sched>
    }

    ret = OS_OK;
    9c78:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
    9c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sem->sem_tokens++;
    9c7c:	88e3      	ldrh	r3, [r4, #6]
    9c7e:	3301      	adds	r3, #1
    9c80:	80e3      	strh	r3, [r4, #6]
    resched = 0;
    9c82:	462c      	mov	r4, r5
    9c84:	e7f1      	b.n	9c6a <os_sem_release+0x36>
        ret = OS_NOT_STARTED;
    9c86:	2009      	movs	r0, #9
    9c88:	e7f7      	b.n	9c7a <os_sem_release+0x46>
        ret = OS_INVALID_PARM;
    9c8a:	2003      	movs	r0, #3
    9c8c:	e7f5      	b.n	9c7a <os_sem_release+0x46>
    ret = OS_OK;
    9c8e:	4620      	mov	r0, r4
    9c90:	e7f3      	b.n	9c7a <os_sem_release+0x46>
    9c92:	bf00      	nop
    9c94:	200025d0 	.word	0x200025d0

00009c98 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
    9c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
    9c9a:	4b29      	ldr	r3, [pc, #164]	; (9d40 <os_sem_pend+0xa8>)
    9c9c:	681b      	ldr	r3, [r3, #0]
{
    9c9e:	4605      	mov	r5, r0
    9ca0:	460e      	mov	r6, r1
    if (!g_os_started) {
    9ca2:	2b00      	cmp	r3, #0
    9ca4:	d047      	beq.n	9d36 <os_sem_pend+0x9e>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
    9ca6:	2800      	cmp	r0, #0
    9ca8:	d047      	beq.n	9d3a <os_sem_pend+0xa2>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
    9caa:	f7ff fea9 	bl	9a00 <os_sched_get_current_task>
    9cae:	4604      	mov	r4, r0

    OS_ENTER_CRITICAL(sr);
    9cb0:	f000 fa5a 	bl	a168 <os_arch_save_sr>

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
    9cb4:	88eb      	ldrh	r3, [r5, #6]
    OS_ENTER_CRITICAL(sr);
    9cb6:	4607      	mov	r7, r0
    if (sem->sem_tokens != 0) {
    9cb8:	b1cb      	cbz	r3, 9cee <os_sem_pend+0x56>
        sem->sem_tokens--;
    9cba:	3b01      	subs	r3, #1
    9cbc:	80eb      	strh	r3, [r5, #6]
        ret = OS_OK;
    9cbe:	2500      	movs	r5, #0
    sched = 0;
    9cc0:	462e      	mov	r6, r5
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
    9cc2:	4638      	mov	r0, r7
    9cc4:	f000 fa56 	bl	a174 <os_arch_restore_sr>

    if (sched) {
    9cc8:	b17e      	cbz	r6, 9cea <os_sem_pend+0x52>
        os_sched(NULL);
    9cca:	2000      	movs	r0, #0
    9ccc:	f7ff fea4 	bl	9a18 <os_sched>
        /* Check if we timed out or got the semaphore */
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
    9cd0:	7b65      	ldrb	r5, [r4, #13]
    9cd2:	f015 0502 	ands.w	r5, r5, #2
    9cd6:	d008      	beq.n	9cea <os_sem_pend+0x52>
            OS_ENTER_CRITICAL(sr);
    9cd8:	f000 fa46 	bl	a168 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
    9cdc:	7b63      	ldrb	r3, [r4, #13]
    9cde:	f023 0302 	bic.w	r3, r3, #2
    9ce2:	7363      	strb	r3, [r4, #13]
            OS_EXIT_CRITICAL(sr);
    9ce4:	f000 fa46 	bl	a174 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
    9ce8:	2506      	movs	r5, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
    9cea:	4628      	mov	r0, r5
    9cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
    9cee:	b306      	cbz	r6, 9d32 <os_sem_pend+0x9a>
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
    9cf0:	7b62      	ldrb	r2, [r4, #13]
        current->t_obj = sem;
    9cf2:	61e5      	str	r5, [r4, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
    9cf4:	f042 0202 	orr.w	r2, r2, #2
    9cf8:	7362      	strb	r2, [r4, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
    9cfa:	6829      	ldr	r1, [r5, #0]
    9cfc:	b1b1      	cbz	r1, 9d2c <os_sem_pend+0x94>
                if (current->t_prio < entry->t_prio) {
    9cfe:	f894 c00b 	ldrb.w	ip, [r4, #11]
    9d02:	460a      	mov	r2, r1
    9d04:	7ad0      	ldrb	r0, [r2, #11]
    9d06:	4560      	cmp	r0, ip
    9d08:	d80e      	bhi.n	9d28 <os_sem_pend+0x90>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
    9d0a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    9d0c:	4613      	mov	r3, r2
    9d0e:	b948      	cbnz	r0, 9d24 <os_sem_pend+0x8c>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
    9d10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    9d12:	64e2      	str	r2, [r4, #76]	; 0x4c
    9d14:	64dc      	str	r4, [r3, #76]	; 0x4c
        os_sched_sleep(current, timeout);
    9d16:	4631      	mov	r1, r6
    9d18:	4620      	mov	r0, r4
    9d1a:	f7ff fe8f 	bl	9a3c <os_sched_sleep>
        ret = OS_OK;
    9d1e:	2500      	movs	r5, #0
        sched = 1;
    9d20:	2601      	movs	r6, #1
    9d22:	e7ce      	b.n	9cc2 <os_sem_pend+0x2a>
    9d24:	4602      	mov	r2, r0
    9d26:	e7ed      	b.n	9d04 <os_sem_pend+0x6c>
        if (last) {
    9d28:	2b00      	cmp	r3, #0
    9d2a:	d1f1      	bne.n	9d10 <os_sem_pend+0x78>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
    9d2c:	64e1      	str	r1, [r4, #76]	; 0x4c
    9d2e:	602c      	str	r4, [r5, #0]
    9d30:	e7f1      	b.n	9d16 <os_sem_pend+0x7e>
        ret = OS_TIMEOUT;
    9d32:	2506      	movs	r5, #6
    9d34:	e7c5      	b.n	9cc2 <os_sem_pend+0x2a>
        ret = OS_NOT_STARTED;
    9d36:	2509      	movs	r5, #9
    9d38:	e7d7      	b.n	9cea <os_sem_pend+0x52>
        ret = OS_INVALID_PARM;
    9d3a:	2503      	movs	r5, #3
    9d3c:	e7d5      	b.n	9cea <os_sem_pend+0x52>
    9d3e:	bf00      	nop
    9d40:	200025d0 	.word	0x200025d0

00009d44 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
    9d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9d48:	4604      	mov	r4, r0
    9d4a:	461e      	mov	r6, r3
    9d4c:	460d      	mov	r5, r1
    9d4e:	4692      	mov	sl, r2
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
    9d50:	2100      	movs	r1, #0
    9d52:	2250      	movs	r2, #80	; 0x50
{
    9d54:	e9dd 9709 	ldrd	r9, r7, [sp, #36]	; 0x24
    9d58:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    memset(t, 0, sizeof(*t));
    9d5c:	f005 fc4f 	bl	f5fe <memset>

    t->t_func = func;
    t->t_arg = arg;
    9d60:	e9c4 a605 	strd	sl, r6, [r4, #20]
    OS_ENTER_CRITICAL(sr);
    9d64:	f000 fa00 	bl	a168 <os_arch_save_sr>
    rc = g_task_id;
    9d68:	4b2c      	ldr	r3, [pc, #176]	; (9e1c <os_task_init+0xd8>)
    9d6a:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
    9d6c:	1c72      	adds	r2, r6, #1
    9d6e:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
    9d70:	f000 fa00 	bl	a174 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
    t->t_prio = prio;
    9d74:	f89d 3020 	ldrb.w	r3, [sp, #32]
    9d78:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
    9d7a:	2301      	movs	r3, #1
    9d7c:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
    9d7e:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
    9d80:	2300      	movs	r3, #0

    rc = os_sanity_check_init(&t->t_sanity_check);
    9d82:	f104 0520 	add.w	r5, r4, #32
    t->t_taskid = os_task_next_id();
    9d86:	72a6      	strb	r6, [r4, #10]
    t->t_next_wakeup = 0;
    9d88:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
    9d8a:	4628      	mov	r0, r5
    9d8c:	f7ff fd9e 	bl	98cc <os_sanity_check_init>
    if (rc != OS_OK) {
    9d90:	4606      	mov	r6, r0
    9d92:	2800      	cmp	r0, #0
    9d94:	d13f      	bne.n	9e16 <os_task_init+0xd2>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
    9d96:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    9d9a:	d121      	bne.n	9de0 <os_task_init+0x9c>
        stack_bottom[i] = OS_STACK_PATTERN;
    9d9c:	4b20      	ldr	r3, [pc, #128]	; (9e20 <os_task_init+0xdc>)
    for (i = 0; i < size; i++) {
    9d9e:	45b0      	cmp	r8, r6
    9da0:	dc29      	bgt.n	9df6 <os_task_init+0xb2>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
    t->t_stacktop = &stack_bottom[stack_size];
    9da2:	eb07 0188 	add.w	r1, r7, r8, lsl #2
    9da6:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
    9da8:	f8a4 8008 	strh.w	r8, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
    9dac:	4642      	mov	r2, r8
    9dae:	4620      	mov	r0, r4
    9db0:	f000 f9e8 	bl	a184 <os_arch_task_stack_init>
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    9db4:	4b1b      	ldr	r3, [pc, #108]	; (9e24 <os_task_init+0xe0>)
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
    9db6:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    9db8:	681e      	ldr	r6, [r3, #0]
    9dba:	bb06      	cbnz	r6, 9dfe <os_task_init+0xba>
        assert(t->t_prio != task->t_prio);
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
    9dbc:	685a      	ldr	r2, [r3, #4]
    9dbe:	6426      	str	r6, [r4, #64]	; 0x40

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
    9dc0:	4620      	mov	r0, r4
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
    9dc2:	6014      	str	r4, [r2, #0]
    9dc4:	f104 0240 	add.w	r2, r4, #64	; 0x40
    9dc8:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
    9dca:	f7ff fddd 	bl	9988 <os_sched_insert>
    if (rc != OS_OK) {
    9dce:	4605      	mov	r5, r0
    9dd0:	b970      	cbnz	r0, 9df0 <os_task_init+0xac>
    os_trace_task_info(t);

    /* Allow a preemption in case the new task has a higher priority than the
     * current one.
     */
    if (os_started()) {
    9dd2:	f7ff f94b 	bl	906c <os_started>
    9dd6:	b158      	cbz	r0, 9df0 <os_task_init+0xac>
        os_sched(NULL);
    9dd8:	4630      	mov	r0, r6
    9dda:	f7ff fe1d 	bl	9a18 <os_sched>
    9dde:	e007      	b.n	9df0 <os_task_init+0xac>
        rc = os_sanity_check_register(sc);
    9de0:	4628      	mov	r0, r5
        sc->sc_checkin_itvl = sanity_itvl;
    9de2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
    9de6:	f7ff fd79 	bl	98dc <os_sanity_check_register>
        if (rc != OS_OK) {
    9dea:	4605      	mov	r5, r0
    9dec:	2800      	cmp	r0, #0
    9dee:	d0d5      	beq.n	9d9c <os_task_init+0x58>
    }

    return (0);
err:
    return (rc);
}
    9df0:	4628      	mov	r0, r5
    9df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        stack_bottom[i] = OS_STACK_PATTERN;
    9df6:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    for (i = 0; i < size; i++) {
    9dfa:	3601      	adds	r6, #1
    9dfc:	e7cf      	b.n	9d9e <os_task_init+0x5a>
        assert(t->t_prio != task->t_prio);
    9dfe:	7ae1      	ldrb	r1, [r4, #11]
    9e00:	7af2      	ldrb	r2, [r6, #11]
    9e02:	4291      	cmp	r1, r2
    9e04:	d105      	bne.n	9e12 <os_task_init+0xce>
    9e06:	2300      	movs	r3, #0
    9e08:	461a      	mov	r2, r3
    9e0a:	4619      	mov	r1, r3
    9e0c:	4618      	mov	r0, r3
    9e0e:	f7ff f871 	bl	8ef4 <__assert_func>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    9e12:	6c36      	ldr	r6, [r6, #64]	; 0x40
    9e14:	e7d1      	b.n	9dba <os_task_init+0x76>
    9e16:	4605      	mov	r5, r0
    9e18:	e7ea      	b.n	9df0 <os_task_init+0xac>
    9e1a:	bf00      	nop
    9e1c:	200033f4 	.word	0x200033f4
    9e20:	deadbeef 	.word	0xdeadbeef
    9e24:	200033ec 	.word	0x200033ec

00009e28 <os_task_remove>:

int
os_task_remove(struct os_task *t)
{
    9e28:	b538      	push	{r3, r4, r5, lr}
    9e2a:	4604      	mov	r4, r0
    os_sr_t sr;

    /*
     * Can't suspend yourself
     */
    if (t == os_sched_get_current_task()) {
    9e2c:	f7ff fde8 	bl	9a00 <os_sched_get_current_task>
    9e30:	4284      	cmp	r4, r0
    9e32:	d015      	beq.n	9e60 <os_task_remove+0x38>
    }

    /*
     * If state is not READY or SLEEP, assume task has not been initialized
     */
    if (t->t_state != OS_TASK_READY && t->t_state != OS_TASK_SLEEP)
    9e34:	7b23      	ldrb	r3, [r4, #12]
    9e36:	3b01      	subs	r3, #1
    9e38:	2b01      	cmp	r3, #1
    9e3a:	d813      	bhi.n	9e64 <os_task_remove+0x3c>
    }

    /*
     * Disallow suspending tasks which are waiting on a lock
     */
    if (t->t_flags & (OS_TASK_FLAG_SEM_WAIT | OS_TASK_FLAG_MUTEX_WAIT |
    9e3c:	7b63      	ldrb	r3, [r4, #13]
    9e3e:	f013 0f0e 	tst.w	r3, #14
    9e42:	d111      	bne.n	9e68 <os_task_remove+0x40>
    }

    /*
     * Disallowing suspending tasks which are holding a mutex
     */
    if (t->t_lockcnt) {
    9e44:	7ba3      	ldrb	r3, [r4, #14]
    9e46:	b97b      	cbnz	r3, 9e68 <os_task_remove+0x40>
        return OS_EBUSY;
    }

    OS_ENTER_CRITICAL(sr);
    9e48:	f000 f98e 	bl	a168 <os_arch_save_sr>
    9e4c:	4605      	mov	r5, r0
    rc = os_sched_remove(t);
    9e4e:	4620      	mov	r0, r4
    9e50:	f7ff fe2e 	bl	9ab0 <os_sched_remove>
    9e54:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
    9e56:	4628      	mov	r0, r5
    9e58:	f000 f98c 	bl	a174 <os_arch_restore_sr>
    return rc;
}
    9e5c:	4620      	mov	r0, r4
    9e5e:	bd38      	pop	{r3, r4, r5, pc}
        return OS_INVALID_PARM;
    9e60:	2403      	movs	r4, #3
    9e62:	e7fb      	b.n	9e5c <os_task_remove+0x34>
        return OS_NOT_STARTED;
    9e64:	2409      	movs	r4, #9
    9e66:	e7f9      	b.n	9e5c <os_task_remove+0x34>
        return OS_EBUSY;
    9e68:	240b      	movs	r4, #11
    9e6a:	e7f7      	b.n	9e5c <os_task_remove+0x34>

00009e6c <os_task_info_get_next>:


struct os_task *
os_task_info_get_next(const struct os_task *prev, struct os_task_info *oti)
{
    9e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e6e:	460b      	mov	r3, r1
    struct os_task *next;
    os_stack_t *top;
    os_stack_t *bottom;

    if (prev != NULL) {
    9e70:	b348      	cbz	r0, 9ec6 <os_task_info_get_next+0x5a>
        next = STAILQ_NEXT(prev, t_os_task_list);
    9e72:	6c04      	ldr	r4, [r0, #64]	; 0x40
    } else {
        next = STAILQ_FIRST(&g_os_task_list);
    }

    if (next == NULL) {
    9e74:	b32c      	cbz	r4, 9ec2 <os_task_info_get_next+0x56>
    }

    /* Otherwise, copy OS task information into the OTI structure, and
     * return 1, which means continue
     */
    oti->oti_prio = next->t_prio;
    9e76:	7ae2      	ldrb	r2, [r4, #11]
    9e78:	701a      	strb	r2, [r3, #0]
    oti->oti_taskid = next->t_taskid;
    9e7a:	7aa2      	ldrb	r2, [r4, #10]
    9e7c:	705a      	strb	r2, [r3, #1]
    oti->oti_state = next->t_state;
    9e7e:	7b22      	ldrb	r2, [r4, #12]
    9e80:	709a      	strb	r2, [r3, #2]

    top = next->t_stacktop;
    9e82:	6862      	ldr	r2, [r4, #4]
    bottom = next->t_stacktop - next->t_stacksize;
    9e84:	8920      	ldrh	r0, [r4, #8]
    while (bottom < top) {
        if (*bottom != OS_STACK_PATTERN) {
    9e86:	4e11      	ldr	r6, [pc, #68]	; (9ecc <os_task_info_get_next+0x60>)
    bottom = next->t_stacktop - next->t_stacksize;
    9e88:	eba2 0180 	sub.w	r1, r2, r0, lsl #2
    while (bottom < top) {
    9e8c:	4291      	cmp	r1, r2
    9e8e:	460d      	mov	r5, r1
    9e90:	d204      	bcs.n	9e9c <os_task_info_get_next+0x30>
        if (*bottom != OS_STACK_PATTERN) {
    9e92:	682f      	ldr	r7, [r5, #0]
    9e94:	42b7      	cmp	r7, r6
    9e96:	f101 0104 	add.w	r1, r1, #4
    9e9a:	d0f7      	beq.n	9e8c <os_task_info_get_next+0x20>
            break;
        }
        ++bottom;
    }

    oti->oti_stkusage = (uint16_t) (next->t_stacktop - bottom);
    9e9c:	1b52      	subs	r2, r2, r5
    9e9e:	1092      	asrs	r2, r2, #2
    9ea0:	809a      	strh	r2, [r3, #4]
    oti->oti_stksize = next->t_stacksize;
    oti->oti_cswcnt = next->t_ctx_sw_cnt;
    9ea2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    9ea4:	609a      	str	r2, [r3, #8]
    oti->oti_runtime = next->t_run_time;
    9ea6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    oti->oti_last_checkin = next->t_sanity_check.sc_checkin_last;
    9ea8:	6a21      	ldr	r1, [r4, #32]
    oti->oti_runtime = next->t_run_time;
    9eaa:	60da      	str	r2, [r3, #12]
    oti->oti_next_checkin = next->t_sanity_check.sc_checkin_last +
    9eac:	6a62      	ldr	r2, [r4, #36]	; 0x24
    oti->oti_stksize = next->t_stacksize;
    9eae:	80d8      	strh	r0, [r3, #6]
    oti->oti_next_checkin = next->t_sanity_check.sc_checkin_last +
    9eb0:	440a      	add	r2, r1
    oti->oti_last_checkin = next->t_sanity_check.sc_checkin_last;
    9eb2:	6119      	str	r1, [r3, #16]
    oti->oti_next_checkin = next->t_sanity_check.sc_checkin_last +
    9eb4:	615a      	str	r2, [r3, #20]
        next->t_sanity_check.sc_checkin_itvl;
    strncpy(oti->oti_name, next->t_name, sizeof(oti->oti_name));
    9eb6:	6921      	ldr	r1, [r4, #16]
    9eb8:	2220      	movs	r2, #32
    9eba:	f103 0018 	add.w	r0, r3, #24
    9ebe:	f005 fbd6 	bl	f66e <strncpy>

    return (next);
}
    9ec2:	4620      	mov	r0, r4
    9ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        next = STAILQ_FIRST(&g_os_task_list);
    9ec6:	4a02      	ldr	r2, [pc, #8]	; (9ed0 <os_task_info_get_next+0x64>)
    9ec8:	6814      	ldr	r4, [r2, #0]
    9eca:	e7d3      	b.n	9e74 <os_task_info_get_next+0x8>
    9ecc:	deadbeef 	.word	0xdeadbeef
    9ed0:	200033ec 	.word	0x200033ec

00009ed4 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
    9ed4:	b530      	push	{r4, r5, lr}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    os_timeradd(base, &tvdelta, result);
    9ed6:	e9d1 5400 	ldrd	r5, r4, [r1]
    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    9eda:	09c3      	lsrs	r3, r0, #7
    os_timeradd(base, &tvdelta, result);
    9edc:	195b      	adds	r3, r3, r5
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    9ede:	f000 057f 	and.w	r5, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
    9ee2:	6888      	ldr	r0, [r1, #8]
    9ee4:	f641 6184 	movw	r1, #7812	; 0x1e84
    9ee8:	fb01 0005 	mla	r0, r1, r5, r0
    9eec:	4909      	ldr	r1, [pc, #36]	; (9f14 <os_deltatime+0x40>)
    9eee:	6090      	str	r0, [r2, #8]
    9ef0:	f144 0400 	adc.w	r4, r4, #0
    9ef4:	4288      	cmp	r0, r1
    9ef6:	e9c2 3400 	strd	r3, r4, [r2]
    9efa:	dd09      	ble.n	9f10 <os_deltatime+0x3c>
    9efc:	3301      	adds	r3, #1
    9efe:	f144 0400 	adc.w	r4, r4, #0
    9f02:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
    9f06:	e9c2 3400 	strd	r3, r4, [r2]
    9f0a:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
    9f0e:	6090      	str	r0, [r2, #8]
}
    9f10:	bd30      	pop	{r4, r5, pc}
    9f12:	bf00      	nop
    9f14:	000f423f 	.word	0x000f423f

00009f18 <os_time_get>:

os_time_t
os_time_get(void)
{
    return (g_os_time);
}
    9f18:	4b01      	ldr	r3, [pc, #4]	; (9f20 <os_time_get+0x8>)
    9f1a:	6818      	ldr	r0, [r3, #0]
    9f1c:	4770      	bx	lr
    9f1e:	bf00      	nop
    9f20:	20003428 	.word	0x20003428

00009f24 <os_time_advance>:
    OS_EXIT_CRITICAL(sr);
}

void
os_time_advance(int ticks)
{
    9f24:	b573      	push	{r0, r1, r4, r5, r6, lr}
    assert(ticks >= 0);
    9f26:	1e04      	subs	r4, r0, #0
    9f28:	da05      	bge.n	9f36 <os_time_advance+0x12>
    9f2a:	2300      	movs	r3, #0
    9f2c:	461a      	mov	r2, r3
    9f2e:	4619      	mov	r1, r3
    9f30:	4618      	mov	r0, r3
    9f32:	f7fe ffdf 	bl	8ef4 <__assert_func>

    if (ticks > 0) {
    9f36:	d006      	beq.n	9f46 <os_time_advance+0x22>
        if (!os_started()) {
    9f38:	f7ff f898 	bl	906c <os_started>
    9f3c:	4d16      	ldr	r5, [pc, #88]	; (9f98 <os_time_advance+0x74>)
    9f3e:	b920      	cbnz	r0, 9f4a <os_time_advance+0x26>
            g_os_time += ticks;
    9f40:	682b      	ldr	r3, [r5, #0]
    9f42:	4423      	add	r3, r4
    9f44:	602b      	str	r3, [r5, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
    9f46:	b002      	add	sp, #8
    9f48:	bd70      	pop	{r4, r5, r6, pc}
    OS_ENTER_CRITICAL(sr);
    9f4a:	f000 f90d 	bl	a168 <os_arch_save_sr>
    prev_os_time = g_os_time;
    9f4e:	682a      	ldr	r2, [r5, #0]
    g_os_time += ticks;
    9f50:	18a3      	adds	r3, r4, r2
    if ((prev_os_time ^ g_os_time) >> 31) {
    9f52:	ea92 0f03 	teq	r2, r3
    OS_ENTER_CRITICAL(sr);
    9f56:	4606      	mov	r6, r0
    g_os_time += ticks;
    9f58:	602b      	str	r3, [r5, #0]
    if ((prev_os_time ^ g_os_time) >> 31) {
    9f5a:	d510      	bpl.n	9f7e <os_time_advance+0x5a>
        delta = g_os_time - basetod.ostime;
    9f5c:	4c0f      	ldr	r4, [pc, #60]	; (9f9c <os_time_advance+0x78>)
    9f5e:	4622      	mov	r2, r4
    9f60:	f852 0b08 	ldr.w	r0, [r2], #8
    9f64:	1a18      	subs	r0, r3, r0
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    9f66:	4611      	mov	r1, r2
    9f68:	9001      	str	r0, [sp, #4]
    9f6a:	f7ff ffb3 	bl	9ed4 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
    9f6e:	f104 0218 	add.w	r2, r4, #24
    9f72:	9801      	ldr	r0, [sp, #4]
    9f74:	4611      	mov	r1, r2
    9f76:	f7ff ffad 	bl	9ed4 <os_deltatime>
        basetod.ostime = g_os_time;
    9f7a:	682b      	ldr	r3, [r5, #0]
    9f7c:	6023      	str	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
    9f7e:	4630      	mov	r0, r6
    9f80:	f000 f8f8 	bl	a174 <os_arch_restore_sr>
            os_callout_tick();
    9f84:	f7ff f988 	bl	9298 <os_callout_tick>
            os_sched_os_timer_exp();
    9f88:	f7ff fdfc 	bl	9b84 <os_sched_os_timer_exp>
            os_sched(NULL);
    9f8c:	2000      	movs	r0, #0
}
    9f8e:	b002      	add	sp, #8
    9f90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_sched(NULL);
    9f94:	f7ff bd40 	b.w	9a18 <os_sched>
    9f98:	20003428 	.word	0x20003428
    9f9c:	200033f8 	.word	0x200033f8

00009fa0 <os_time_delay>:

void
os_time_delay(os_time_t osticks)
{
    9fa0:	b538      	push	{r3, r4, r5, lr}
    os_sr_t sr;

    if (osticks > 0) {
    9fa2:	4604      	mov	r4, r0
    9fa4:	b178      	cbz	r0, 9fc6 <os_time_delay+0x26>
        OS_ENTER_CRITICAL(sr);
    9fa6:	f000 f8df 	bl	a168 <os_arch_save_sr>
    9faa:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
    9fac:	f7ff fd28 	bl	9a00 <os_sched_get_current_task>
    9fb0:	4621      	mov	r1, r4
    9fb2:	f7ff fd43 	bl	9a3c <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
    9fb6:	4628      	mov	r0, r5
    9fb8:	f000 f8dc 	bl	a174 <os_arch_restore_sr>
        os_sched(NULL);
    }
}
    9fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        os_sched(NULL);
    9fc0:	2000      	movs	r0, #0
    9fc2:	f7ff bd29 	b.w	9a18 <os_sched>
}
    9fc6:	bd38      	pop	{r3, r4, r5, pc}

00009fc8 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
    9fc8:	b570      	push	{r4, r5, r6, lr}
    9fca:	4605      	mov	r5, r0
    9fcc:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
    9fce:	f000 f8cb 	bl	a168 <os_arch_save_sr>
    9fd2:	4606      	mov	r6, r0
    if (tv != NULL) {
    9fd4:	b145      	cbz	r5, 9fe8 <os_gettimeofday+0x20>
    return (g_os_time);
    9fd6:	4b09      	ldr	r3, [pc, #36]	; (9ffc <os_gettimeofday+0x34>)
        delta = os_time_get() - basetod.ostime;
    9fd8:	4909      	ldr	r1, [pc, #36]	; (a000 <os_gettimeofday+0x38>)
    9fda:	6818      	ldr	r0, [r3, #0]
    9fdc:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
    9fe0:	462a      	mov	r2, r5
    9fe2:	1ac0      	subs	r0, r0, r3
    9fe4:	f7ff ff76 	bl	9ed4 <os_deltatime>
    }

    if (tz != NULL) {
    9fe8:	b114      	cbz	r4, 9ff0 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
    9fea:	4b05      	ldr	r3, [pc, #20]	; (a000 <os_gettimeofday+0x38>)
    9fec:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9fee:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
    9ff0:	4630      	mov	r0, r6
    9ff2:	f000 f8bf 	bl	a174 <os_arch_restore_sr>

    return (0);
}
    9ff6:	2000      	movs	r0, #0
    9ff8:	bd70      	pop	{r4, r5, r6, pc}
    9ffa:	bf00      	nop
    9ffc:	20003428 	.word	0x20003428
    a000:	200033f8 	.word	0x200033f8

0000a004 <os_time_is_set>:

bool
os_time_is_set(void)
{
    return basetod.utctime.tv_sec > 0;
    a004:	4b04      	ldr	r3, [pc, #16]	; (a018 <os_time_is_set+0x14>)
    a006:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
    a00a:	2a01      	cmp	r2, #1
    a00c:	f173 0300 	sbcs.w	r3, r3, #0
}
    a010:	bfac      	ite	ge
    a012:	2001      	movge	r0, #1
    a014:	2000      	movlt	r0, #0
    a016:	4770      	bx	lr
    a018:	200033f8 	.word	0x200033f8

0000a01c <os_settimeofday>:
{
    a01c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a020:	b087      	sub	sp, #28
    a022:	4605      	mov	r5, r0
    a024:	460c      	mov	r4, r1
    OS_ENTER_CRITICAL(sr);
    a026:	f000 f89f 	bl	a168 <os_arch_save_sr>
    a02a:	4681      	mov	r9, r0
    if (new_tv == NULL && new_tz == NULL) {
    a02c:	2d00      	cmp	r5, #0
    a02e:	d134      	bne.n	a09a <os_settimeofday+0x7e>
    a030:	2c00      	cmp	r4, #0
    a032:	d038      	beq.n	a0a6 <os_settimeofday+0x8a>
        new_tv = &basetod.utctime;
    a034:	4a20      	ldr	r2, [pc, #128]	; (a0b8 <os_settimeofday+0x9c>)
    a036:	4623      	mov	r3, r4
    info->tci_prev_tv = &basetod.utctime;
    a038:	4e20      	ldr	r6, [pc, #128]	; (a0bc <os_settimeofday+0xa0>)
    info->tci_cur_tv = new_tv;
    a03a:	9203      	str	r2, [sp, #12]
    info->tci_prev_tv = &basetod.utctime;
    a03c:	f106 0718 	add.w	r7, r6, #24
    info->tci_prev_tz = &basetod.timezone;
    a040:	f106 0228 	add.w	r2, r6, #40	; 0x28
    info->tci_prev_tv = &basetod.utctime;
    a044:	9701      	str	r7, [sp, #4]
    info->tci_prev_tz = &basetod.timezone;
    a046:	9202      	str	r2, [sp, #8]
    info->tci_cur_tz = new_tz;
    a048:	9304      	str	r3, [sp, #16]
    info->tci_newly_synced = !os_time_is_set();
    a04a:	f7ff ffdb 	bl	a004 <os_time_is_set>
    a04e:	f080 0001 	eor.w	r0, r0, #1
    a052:	f88d 0014 	strb.w	r0, [sp, #20]
    if (utctime != NULL) {
    a056:	b18d      	cbz	r5, a07c <os_settimeofday+0x60>
        delta = os_time_get() - basetod.ostime;
    a058:	4632      	mov	r2, r6
    return (g_os_time);
    a05a:	4b19      	ldr	r3, [pc, #100]	; (a0c0 <os_settimeofday+0xa4>)
        delta = os_time_get() - basetod.ostime;
    a05c:	f852 1b08 	ldr.w	r1, [r2], #8
    a060:	681b      	ldr	r3, [r3, #0]
    a062:	eba3 0801 	sub.w	r8, r3, r1
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    a066:	4640      	mov	r0, r8
    a068:	4611      	mov	r1, r2
    a06a:	f7ff ff33 	bl	9ed4 <os_deltatime>
        basetod.utctime = *utctime;
    a06e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a072:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
        basetod.ostime += delta;
    a076:	6833      	ldr	r3, [r6, #0]
    a078:	4443      	add	r3, r8
    a07a:	6033      	str	r3, [r6, #0]
    if (tz != NULL) {
    a07c:	b114      	cbz	r4, a084 <os_settimeofday+0x68>
        basetod.timezone = *tz;
    a07e:	6820      	ldr	r0, [r4, #0]
    a080:	62b0      	str	r0, [r6, #40]	; 0x28
    a082:	2400      	movs	r4, #0
    OS_EXIT_CRITICAL(sr);
    a084:	4648      	mov	r0, r9
    a086:	f000 f875 	bl	a174 <os_arch_restore_sr>
    if (notify) {
    a08a:	b914      	cbnz	r4, a092 <os_settimeofday+0x76>
    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
    a08c:	4b0d      	ldr	r3, [pc, #52]	; (a0c4 <os_settimeofday+0xa8>)
    a08e:	681c      	ldr	r4, [r3, #0]
    a090:	b964      	cbnz	r4, a0ac <os_settimeofday+0x90>
}
    a092:	2000      	movs	r0, #0
    a094:	b007      	add	sp, #28
    a096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (new_tz == NULL) {
    a09a:	4b0b      	ldr	r3, [pc, #44]	; (a0c8 <os_settimeofday+0xac>)
    a09c:	462a      	mov	r2, r5
    a09e:	2c00      	cmp	r4, #0
    a0a0:	bf18      	it	ne
    a0a2:	4623      	movne	r3, r4
    a0a4:	e7c8      	b.n	a038 <os_settimeofday+0x1c>
        return SYS_EINVAL;
    a0a6:	f06f 0401 	mvn.w	r4, #1
    a0aa:	e7eb      	b.n	a084 <os_settimeofday+0x68>
        listener->tcl_fn(info, listener->tcl_arg);
    a0ac:	e9d4 3100 	ldrd	r3, r1, [r4]
    a0b0:	a801      	add	r0, sp, #4
    a0b2:	4798      	blx	r3
    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
    a0b4:	68a4      	ldr	r4, [r4, #8]
    a0b6:	e7eb      	b.n	a090 <os_settimeofday+0x74>
    a0b8:	20003410 	.word	0x20003410
    a0bc:	200033f8 	.word	0x200033f8
    a0c0:	20003428 	.word	0x20003428
    a0c4:	20000560 	.word	0x20000560
    a0c8:	20003420 	.word	0x20003420

0000a0cc <os_get_uptime>:

void
os_get_uptime(struct os_timeval *tvp)
{
    a0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a0ce:	b085      	sub	sp, #20
  os_time_t delta;
  os_sr_t sr;
  os_time_t ostime;

  OS_ENTER_CRITICAL(sr);
  tv = basetod.uptime;
    a0d0:	4f0c      	ldr	r7, [pc, #48]	; (a104 <os_get_uptime+0x38>)
{
    a0d2:	4606      	mov	r6, r0
  OS_ENTER_CRITICAL(sr);
    a0d4:	f000 f848 	bl	a168 <os_arch_save_sr>
  tv = basetod.uptime;
    a0d8:	f107 0308 	add.w	r3, r7, #8
  OS_ENTER_CRITICAL(sr);
    a0dc:	4684      	mov	ip, r0
  tv = basetod.uptime;
    a0de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a0e0:	466c      	mov	r4, sp
    a0e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return (g_os_time);
    a0e6:	4b08      	ldr	r3, [pc, #32]	; (a108 <os_get_uptime+0x3c>)
  ostime = basetod.ostime;
  delta = os_time_get() - ostime;
    a0e8:	681d      	ldr	r5, [r3, #0]
    a0ea:	683b      	ldr	r3, [r7, #0]
  OS_EXIT_CRITICAL(sr);
    a0ec:	4660      	mov	r0, ip
  delta = os_time_get() - ostime;
    a0ee:	1aed      	subs	r5, r5, r3
  OS_EXIT_CRITICAL(sr);
    a0f0:	f000 f840 	bl	a174 <os_arch_restore_sr>

  os_deltatime(delta, &tv, tvp);
    a0f4:	4632      	mov	r2, r6
    a0f6:	4621      	mov	r1, r4
    a0f8:	4628      	mov	r0, r5
    a0fa:	f7ff feeb 	bl	9ed4 <os_deltatime>
}
    a0fe:	b005      	add	sp, #20
    a100:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a102:	bf00      	nop
    a104:	200033f8 	.word	0x200033f8
    a108:	20003428 	.word	0x20003428

0000a10c <os_get_uptime_usec>:

int64_t
os_get_uptime_usec(void)
{
    a10c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  struct os_timeval tv;

  os_get_uptime(&tv);
    a10e:	4668      	mov	r0, sp
    a110:	f7ff ffdc 	bl	a0cc <os_get_uptime>

  return (tv.tv_sec * 1000000 + tv.tv_usec);
    a114:	4906      	ldr	r1, [pc, #24]	; (a130 <os_get_uptime_usec+0x24>)
    a116:	9800      	ldr	r0, [sp, #0]
    a118:	9a01      	ldr	r2, [sp, #4]
    a11a:	fba0 0301 	umull	r0, r3, r0, r1
    a11e:	fb01 3302 	mla	r3, r1, r2, r3
    a122:	9902      	ldr	r1, [sp, #8]
    a124:	1840      	adds	r0, r0, r1
}
    a126:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
    a12a:	b005      	add	sp, #20
    a12c:	f85d fb04 	ldr.w	pc, [sp], #4
    a130:	000f4240 	.word	0x000f4240

0000a134 <os_time_ms_to_ticks>:

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    a134:	b538      	push	{r3, r4, r5, lr}
    a136:	4604      	mov	r4, r0
    a138:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
    a13a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a13e:	2300      	movs	r3, #0
    a140:	0e61      	lsrs	r1, r4, #25
    a142:	01c0      	lsls	r0, r0, #7
    a144:	f016 fb62 	bl	2080c <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    a148:	6028      	str	r0, [r5, #0]
    return 0;
}
    a14a:	2000      	movs	r0, #0
    a14c:	bd38      	pop	{r3, r4, r5, pc}

0000a14e <timer_handler>:
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    os_time_advance(1);
    a14e:	2001      	movs	r0, #1
    a150:	f7ff bee8 	b.w	9f24 <os_time_advance>

0000a154 <os_arch_ctx_sw>:
}

void
os_arch_ctx_sw(struct os_task *t)
{
    a154:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
    a156:	f7ff fc3d 	bl	99d4 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
    a15a:	4b02      	ldr	r3, [pc, #8]	; (a164 <os_arch_ctx_sw+0x10>)
    a15c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a160:	605a      	str	r2, [r3, #4]
}
    a162:	bd08      	pop	{r3, pc}
    a164:	e000ed00 	.word	0xe000ed00

0000a168 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a168:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    a16c:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
    a16e:	f000 0001 	and.w	r0, r0, #1
    a172:	4770      	bx	lr

0000a174 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
    a174:	b900      	cbnz	r0, a178 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    a176:	b662      	cpsie	i
        __enable_irq();
    }
}
    a178:	4770      	bx	lr

0000a17a <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a17a:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
    a17e:	f000 0001 	and.w	r0, r0, #1
    a182:	4770      	bx	lr

0000a184 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
    a184:	b537      	push	{r0, r1, r2, r4, r5, lr}
    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
        s[i] = 0;
    a186:	2300      	movs	r3, #0
{
    a188:	460c      	mov	r4, r1
    a18a:	4605      	mov	r5, r0
        s[i] = 0;
    a18c:	e941 3308 	strd	r3, r3, [r1, #-32]
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
    a190:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
        s[i] = 0;
    a194:	e941 3306 	strd	r3, r3, [r1, #-24]
    a198:	f841 3c10 	str.w	r3, [r1, #-16]
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
    a19c:	9001      	str	r0, [sp, #4]
    a19e:	f000 fb5d 	bl	a85c <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
    a1a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    a1a6:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
    a1aa:	696b      	ldr	r3, [r5, #20]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
    a1ac:	9801      	ldr	r0, [sp, #4]
    sf->pc = (uint32_t)t->t_func;
    a1ae:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
    a1b2:	69ab      	ldr	r3, [r5, #24]
    a1b4:	f844 3c20 	str.w	r3, [r4, #-32]
    sf->exc_lr = INITIAL_LR;
    a1b8:	f06f 0302 	mvn.w	r3, #2
    a1bc:	f844 3c24 	str.w	r3, [r4, #-36]
}
    a1c0:	b003      	add	sp, #12
    a1c2:	bd30      	pop	{r4, r5, pc}

0000a1c4 <os_arch_init>:
os_arch_init(void)
{
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    a1c4:	4a03      	ldr	r2, [pc, #12]	; (a1d4 <os_arch_init+0x10>)
    a1c6:	6953      	ldr	r3, [r2, #20]
    a1c8:	f043 0310 	orr.w	r3, r3, #16
    a1cc:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
    a1ce:	f7fe bf53 	b.w	9078 <os_init_idle_task>
    a1d2:	bf00      	nop
    a1d4:	e000ed00 	.word	0xe000ed00

0000a1d8 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
    a1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a1da:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    a1de:	bb54      	cbnz	r4, a236 <os_arch_os_init+0x5e>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
            NVIC->IP[i] = -1;
    a1e0:	4f16      	ldr	r7, [pc, #88]	; (a23c <os_arch_os_init+0x64>)
    a1e2:	26ff      	movs	r6, #255	; 0xff
    a1e4:	193d      	adds	r5, r7, r4
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    a1e6:	3401      	adds	r4, #1
    a1e8:	2cf0      	cmp	r4, #240	; 0xf0
            NVIC->IP[i] = -1;
    a1ea:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    a1ee:	d1f9      	bne.n	a1e4 <os_arch_os_init+0xc>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a1f0:	4c13      	ldr	r4, [pc, #76]	; (a240 <os_arch_os_init+0x68>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a1f2:	4f14      	ldr	r7, [pc, #80]	; (a244 <os_arch_os_init+0x6c>)
    a1f4:	2508      	movs	r5, #8
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a1f6:	68a6      	ldr	r6, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a1f8:	51af      	str	r7, [r5, r6]
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    a1fa:	3504      	adds	r5, #4
    a1fc:	2dd8      	cmp	r5, #216	; 0xd8
    a1fe:	d1fa      	bne.n	a1f6 <os_arch_os_init+0x1e>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a200:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a202:	4e11      	ldr	r6, [pc, #68]	; (a248 <os_arch_os_init+0x70>)
    a204:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a206:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a208:	4e10      	ldr	r6, [pc, #64]	; (a24c <os_arch_os_init+0x74>)
    a20a:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a20c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a20e:	4e10      	ldr	r6, [pc, #64]	; (a250 <os_arch_os_init+0x78>)
    a210:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a212:	25e0      	movs	r5, #224	; 0xe0
    a214:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    a218:	2520      	movs	r5, #32
    a21a:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    a21c:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
    a220:	f014 0401 	ands.w	r4, r4, #1
    a224:	d103      	bne.n	a22e <os_arch_os_init+0x56>
            os_arch_init();
    a226:	f7ff ffcd 	bl	a1c4 <os_arch_init>
        err = OS_OK;
    a22a:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
    a22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SVC_Call(os_arch_init);
    a22e:	f8df c024 	ldr.w	ip, [pc, #36]	; a254 <os_arch_os_init+0x7c>
    a232:	df00      	svc	0
    a234:	e7f9      	b.n	a22a <os_arch_os_init+0x52>
    err = OS_ERR_IN_ISR;
    a236:	2007      	movs	r0, #7
    a238:	e7f8      	b.n	a22c <os_arch_os_init+0x54>
    a23a:	bf00      	nop
    a23c:	e000e100 	.word	0xe000e100
    a240:	e000ed00 	.word	0xe000ed00
    a244:	0000a8fb 	.word	0x0000a8fb
    a248:	0000a863 	.word	0x0000a863
    a24c:	0000a8a9 	.word	0x0000a8a9
    a250:	0000a8ef 	.word	0x0000a8ef
    a254:	0000a1c5 	.word	0x0000a1c5

0000a258 <os_arch_start>:

uint32_t
os_arch_start(void)
{
    a258:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
    a25a:	f7ff fccb 	bl	9bf4 <os_sched_next_task>
    a25e:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
    a260:	f7ff fbd4 	bl	9a0c <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
    a264:	6823      	ldr	r3, [r4, #0]
    a266:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    a268:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
    a26c:	2106      	movs	r1, #6
    a26e:	2080      	movs	r0, #128	; 0x80
    a270:	f010 fd20 	bl	1acb4 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
    a274:	4b03      	ldr	r3, [pc, #12]	; (a284 <os_arch_start+0x2c>)
    a276:	2201      	movs	r2, #1

    /* Perform context switch */
    os_arch_ctx_sw(t);
    a278:	4620      	mov	r0, r4
    g_os_started = 1;
    a27a:	601a      	str	r2, [r3, #0]
    os_arch_ctx_sw(t);
    a27c:	f7ff ff6a 	bl	a154 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
    a280:	69a0      	ldr	r0, [r4, #24]
    a282:	bd10      	pop	{r4, pc}
    a284:	200025d0 	.word	0x200025d0

0000a288 <os_arch_os_start>:
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
    a288:	4811      	ldr	r0, [pc, #68]	; (a2d0 <os_arch_os_start+0x48>)
    a28a:	6800      	ldr	r0, [r0, #0]
{
    a28c:	b510      	push	{r4, lr}
    os_set_env(g_idle_task.t_stackptr - 1);
    a28e:	3804      	subs	r0, #4
    a290:	f000 fada 	bl	a848 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a294:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    a298:	b9bc      	cbnz	r4, a2ca <os_arch_os_start+0x42>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    a29a:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
    a29e:	f004 0403 	and.w	r4, r4, #3
    a2a2:	2c02      	cmp	r4, #2
    a2a4:	d003      	beq.n	a2ae <os_arch_os_start+0x26>
    a2a6:	2c03      	cmp	r4, #3
    a2a8:	d00a      	beq.n	a2c0 <os_arch_os_start+0x38>
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
                err = OS_ERR_PRIV;
    a2aa:	2008      	movs	r0, #8
    a2ac:	e007      	b.n	a2be <os_arch_os_start+0x36>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
    a2ae:	4c09      	ldr	r4, [pc, #36]	; (a2d4 <os_arch_os_start+0x4c>)
    a2b0:	6824      	ldr	r4, [r4, #0]
    a2b2:	07e4      	lsls	r4, r4, #31
    a2b4:	d4f9      	bmi.n	a2aa <os_arch_os_start+0x22>
    SVC_Call(os_arch_start);
    a2b6:	f8df c020 	ldr.w	ip, [pc, #32]	; a2d8 <os_arch_os_start+0x50>
    a2ba:	df00      	svc	0
}
    a2bc:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
    a2be:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
    a2c0:	4c04      	ldr	r4, [pc, #16]	; (a2d4 <os_arch_os_start+0x4c>)
    a2c2:	6824      	ldr	r4, [r4, #0]
    a2c4:	07e4      	lsls	r4, r4, #31
    a2c6:	d5f0      	bpl.n	a2aa <os_arch_os_start+0x22>
    a2c8:	e7f5      	b.n	a2b6 <os_arch_os_start+0x2e>
    err = OS_ERR_IN_ISR;
    a2ca:	2007      	movs	r0, #7
    a2cc:	e7f7      	b.n	a2be <os_arch_os_start+0x36>
    a2ce:	bf00      	nop
    a2d0:	20001428 	.word	0x20001428
    a2d4:	2000342c 	.word	0x2000342c
    a2d8:	0000a259 	.word	0x0000a259

0000a2dc <_os_mbuf_trailingspace>:
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a2dc:	6882      	ldr	r2, [r0, #8]
    a2de:	8812      	ldrh	r2, [r2, #0]
    a2e0:	f100 0310 	add.w	r3, r0, #16
    a2e4:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    a2e6:	88c2      	ldrh	r2, [r0, #6]
    a2e8:	6800      	ldr	r0, [r0, #0]
    a2ea:	4410      	add	r0, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a2ec:	1a18      	subs	r0, r3, r0
}
    a2ee:	b280      	uxth	r0, r0
    a2f0:	4770      	bx	lr

0000a2f2 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
    a2f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
    a2f4:	2500      	movs	r5, #0
    a2f6:	e9c0 5000 	strd	r5, r0, [r0]
{
    a2fa:	4604      	mov	r4, r0
    a2fc:	460f      	mov	r7, r1
    a2fe:	4616      	mov	r6, r2

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
    a300:	4629      	mov	r1, r5
    a302:	2210      	movs	r2, #16
    a304:	3008      	adds	r0, #8
    a306:	f005 f97a 	bl	f5fe <memset>
    ev->ev_cb = ev_cb;
    ev->ev_arg = arg;
    a30a:	e9c4 7603 	strd	r7, r6, [r4, #12]

    return (0);
}
    a30e:	4628      	mov	r0, r5
    a310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a312 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
    a312:	b538      	push	{r3, r4, r5, lr}
    a314:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    a316:	f7ff ff27 	bl	a168 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
    a31a:	682c      	ldr	r4, [r5, #0]
    if (mp) {
    a31c:	b11c      	cbz	r4, a326 <os_mqueue_get+0x14>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    a31e:	6863      	ldr	r3, [r4, #4]
    a320:	602b      	str	r3, [r5, #0]
    a322:	b903      	cbnz	r3, a326 <os_mqueue_get+0x14>
    a324:	606d      	str	r5, [r5, #4]
    }
    OS_EXIT_CRITICAL(sr);
    a326:	f7ff ff25 	bl	a174 <os_arch_restore_sr>

    if (mp) {
    a32a:	b104      	cbz	r4, a32e <os_mqueue_get+0x1c>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
    a32c:	3c10      	subs	r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
    a32e:	4620      	mov	r0, r4
    a330:	bd38      	pop	{r3, r4, r5, pc}

0000a332 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
    a332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
    a334:	7953      	ldrb	r3, [r2, #5]
    a336:	2b07      	cmp	r3, #7
{
    a338:	4606      	mov	r6, r0
    a33a:	460c      	mov	r4, r1
    a33c:	4615      	mov	r5, r2
    if (!OS_MBUF_IS_PKTHDR(m)) {
    a33e:	d913      	bls.n	a368 <os_mqueue_put+0x36>
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);

    OS_ENTER_CRITICAL(sr);
    a340:	f7ff ff12 	bl	a168 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
    a344:	2700      	movs	r7, #0
    a346:	6873      	ldr	r3, [r6, #4]
    a348:	616f      	str	r7, [r5, #20]
    mp = OS_MBUF_PKTHDR(m);
    a34a:	f105 0210 	add.w	r2, r5, #16
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
    a34e:	3514      	adds	r5, #20
    a350:	601a      	str	r2, [r3, #0]
    a352:	6075      	str	r5, [r6, #4]
    OS_EXIT_CRITICAL(sr);
    a354:	f7ff ff0e 	bl	a174 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
    a358:	b144      	cbz	r4, a36c <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
    a35a:	4620      	mov	r0, r4
    a35c:	f106 0108 	add.w	r1, r6, #8
    a360:	f7ff f8b5 	bl	94ce <os_eventq_put>
    }

    return (0);
    a364:	4638      	mov	r0, r7
err:
    return (rc);
}
    a366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (rc);
    a368:	2002      	movs	r0, #2
    a36a:	e7fc      	b.n	a366 <os_mqueue_put+0x34>
    return (0);
    a36c:	4620      	mov	r0, r4
    a36e:	e7fa      	b.n	a366 <os_mqueue_put+0x34>

0000a370 <os_mbuf_get>:
    return (0);
}

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
    a370:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
    a372:	8803      	ldrh	r3, [r0, #0]
    a374:	428b      	cmp	r3, r1
{
    a376:	4604      	mov	r4, r0
    a378:	460d      	mov	r5, r1
    if (leadingspace > omp->omp_databuf_len) {
    a37a:	d30c      	bcc.n	a396 <os_mbuf_get+0x26>
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
    a37c:	6840      	ldr	r0, [r0, #4]
    a37e:	f7ff f98e 	bl	969e <os_memblock_get>
    if (!om) {
    a382:	b138      	cbz	r0, a394 <os_mbuf_get+0x24>

    SLIST_NEXT(om, om_next) = NULL;
    om->om_flags = 0;
    om->om_pkthdr_len = 0;
    om->om_len = 0;
    om->om_data = (&om->om_databuf[0] + leadingspace);
    a384:	f100 0110 	add.w	r1, r0, #16
    SLIST_NEXT(om, om_next) = NULL;
    a388:	2300      	movs	r3, #0
    om->om_data = (&om->om_databuf[0] + leadingspace);
    a38a:	440d      	add	r5, r1
    SLIST_NEXT(om, om_next) = NULL;
    a38c:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
    a38e:	6043      	str	r3, [r0, #4]
    om->om_data = (&om->om_databuf[0] + leadingspace);
    a390:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
    a392:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
    a394:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    a396:	2000      	movs	r0, #0
    return om;
    a398:	e7fc      	b.n	a394 <os_mbuf_get+0x24>

0000a39a <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
    a39a:	b538      	push	{r3, r4, r5, lr}
    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    a39c:	8803      	ldrh	r3, [r0, #0]
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    a39e:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    a3a2:	42ab      	cmp	r3, r5
    a3a4:	d30d      	bcc.n	a3c2 <os_mbuf_get_pkthdr+0x28>
    a3a6:	2dff      	cmp	r5, #255	; 0xff
    a3a8:	d80b      	bhi.n	a3c2 <os_mbuf_get_pkthdr+0x28>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
    a3aa:	2100      	movs	r1, #0
    a3ac:	f7ff ffe0 	bl	a370 <os_mbuf_get>
    if (om) {
    a3b0:	b130      	cbz	r0, a3c0 <os_mbuf_get_pkthdr+0x26>
        om->om_pkthdr_len = pkthdr_len;
        om->om_data += pkthdr_len;
    a3b2:	6801      	ldr	r1, [r0, #0]
        om->om_pkthdr_len = pkthdr_len;
    a3b4:	7145      	strb	r5, [r0, #5]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
    a3b6:	2300      	movs	r3, #0
        pkthdr->omp_flags = 0;
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
    a3b8:	e9c0 3304 	strd	r3, r3, [r0, #16]
        om->om_data += pkthdr_len;
    a3bc:	4429      	add	r1, r5
    a3be:	6001      	str	r1, [r0, #0]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
    a3c0:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    a3c2:	2000      	movs	r0, #0
    return om;
    a3c4:	e7fc      	b.n	a3c0 <os_mbuf_get_pkthdr+0x26>

0000a3c6 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
    a3c6:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    a3c8:	6883      	ldr	r3, [r0, #8]
{
    a3ca:	4601      	mov	r1, r0
    if (om->om_omp != NULL) {
    a3cc:	b11b      	cbz	r3, a3d6 <os_mbuf_free+0x10>
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    a3ce:	6858      	ldr	r0, [r3, #4]
    a3d0:	f7ff f98c 	bl	96ec <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    a3d4:	bd08      	pop	{r3, pc}
    rc = 0;
    a3d6:	4618      	mov	r0, r3
    return (rc);
    a3d8:	e7fc      	b.n	a3d4 <os_mbuf_free+0xe>

0000a3da <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
    a3da:	b510      	push	{r4, lr}
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    a3dc:	b900      	cbnz	r0, a3e0 <os_mbuf_free_chain+0x6>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
    a3de:	bd10      	pop	{r4, pc}
        next = SLIST_NEXT(om, om_next);
    a3e0:	68c4      	ldr	r4, [r0, #12]
        rc = os_mbuf_free(om);
    a3e2:	f7ff fff0 	bl	a3c6 <os_mbuf_free>
        if (rc != 0) {
    a3e6:	2800      	cmp	r0, #0
    a3e8:	d1f9      	bne.n	a3de <os_mbuf_free_chain+0x4>
        om = next;
    a3ea:	4620      	mov	r0, r4
    a3ec:	e7f6      	b.n	a3dc <os_mbuf_free_chain+0x2>

0000a3ee <os_mbuf_append>:
    return len;
}

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
    a3ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a3f2:	460f      	mov	r7, r1
    a3f4:	4615      	mov	r5, r2
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    a3f6:	4606      	mov	r6, r0
    a3f8:	2800      	cmp	r0, #0
    a3fa:	d046      	beq.n	a48a <os_mbuf_append+0x9c>
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    a3fc:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    while (SLIST_NEXT(last, om_next) != NULL) {
    a400:	4603      	mov	r3, r0
    a402:	4699      	mov	r9, r3
    a404:	68db      	ldr	r3, [r3, #12]
    a406:	2b00      	cmp	r3, #0
    a408:	d1fb      	bne.n	a402 <os_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    space = OS_MBUF_TRAILINGSPACE(last);
    a40a:	4648      	mov	r0, r9
    remainder = len;
    a40c:	462c      	mov	r4, r5
    space = OS_MBUF_TRAILINGSPACE(last);
    a40e:	f7ff ff65 	bl	a2dc <_os_mbuf_trailingspace>

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    a412:	b198      	cbz	r0, a43c <os_mbuf_append+0x4e>
        if (space > remainder) {
    a414:	42a8      	cmp	r0, r5
    a416:	bfa8      	it	ge
    a418:	4628      	movge	r0, r5
    a41a:	4604      	mov	r4, r0
            space = remainder;
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    a41c:	f8d9 3000 	ldr.w	r3, [r9]
    a420:	f8b9 0006 	ldrh.w	r0, [r9, #6]
    a424:	4622      	mov	r2, r4
    a426:	4639      	mov	r1, r7
    a428:	4418      	add	r0, r3
    a42a:	f005 f8db 	bl	f5e4 <memcpy>

        last->om_len += space;
    a42e:	f8b9 3006 	ldrh.w	r3, [r9, #6]
    a432:	4423      	add	r3, r4
        data += space;
    a434:	4427      	add	r7, r4
        last->om_len += space;
    a436:	f8a9 3006 	strh.w	r3, [r9, #6]
        remainder -= space;
    a43a:	1b2c      	subs	r4, r5, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    a43c:	2c00      	cmp	r4, #0
    a43e:	dd05      	ble.n	a44c <os_mbuf_append+0x5e>
        new = os_mbuf_get(omp, 0);
    a440:	2100      	movs	r1, #0
    a442:	4640      	mov	r0, r8
    a444:	f7ff ff94 	bl	a370 <os_mbuf_get>
        if (!new) {
    a448:	4682      	mov	sl, r0
    a44a:	b938      	cbnz	r0, a45c <os_mbuf_append+0x6e>
        SLIST_NEXT(last, om_next) = new;
        last = new;
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
    a44c:	7973      	ldrb	r3, [r6, #5]
    a44e:	2b07      	cmp	r3, #7
    a450:	d816      	bhi.n	a480 <os_mbuf_append+0x92>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    }

    if (remainder != 0) {
    a452:	1e20      	subs	r0, r4, #0
    a454:	bf18      	it	ne
    a456:	2001      	movne	r0, #1


    return (0);
err:
    return (rc);
}
    a458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        new->om_len = min(omp->omp_databuf_len, remainder);
    a45c:	f8b8 2000 	ldrh.w	r2, [r8]
    a460:	42a2      	cmp	r2, r4
    a462:	bfa8      	it	ge
    a464:	4622      	movge	r2, r4
    a466:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
    a468:	4639      	mov	r1, r7
    a46a:	6800      	ldr	r0, [r0, #0]
    a46c:	f005 f8ba 	bl	f5e4 <memcpy>
        data += new->om_len;
    a470:	f8ba 3006 	ldrh.w	r3, [sl, #6]
        SLIST_NEXT(last, om_next) = new;
    a474:	f8c9 a00c 	str.w	sl, [r9, #12]
        data += new->om_len;
    a478:	441f      	add	r7, r3
        remainder -= new->om_len;
    a47a:	1ae4      	subs	r4, r4, r3
        SLIST_NEXT(last, om_next) = new;
    a47c:	46d1      	mov	r9, sl
    a47e:	e7dd      	b.n	a43c <os_mbuf_append+0x4e>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    a480:	8a32      	ldrh	r2, [r6, #16]
    a482:	4415      	add	r5, r2
    a484:	1b2d      	subs	r5, r5, r4
    a486:	8235      	strh	r5, [r6, #16]
    a488:	e7e3      	b.n	a452 <os_mbuf_append+0x64>
        rc = OS_EINVAL;
    a48a:	2002      	movs	r0, #2
    a48c:	e7e4      	b.n	a458 <os_mbuf_append+0x6a>

0000a48e <os_mbuf_off>:
    return (NULL);
}

struct os_mbuf *
os_mbuf_off(const struct os_mbuf *om, int off, uint16_t *out_off)
{
    a48e:	b510      	push	{r4, lr}

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
    a490:	b120      	cbz	r0, a49c <os_mbuf_off+0xe>
            return NULL;
        }

        next = SLIST_NEXT(cur, om_next);

        if (cur->om_len > off ||
    a492:	88c4      	ldrh	r4, [r0, #6]
        next = SLIST_NEXT(cur, om_next);
    a494:	68c3      	ldr	r3, [r0, #12]
        if (cur->om_len > off ||
    a496:	428c      	cmp	r4, r1
    a498:	dd01      	ble.n	a49e <os_mbuf_off+0x10>
            (cur->om_len == off && next == NULL)) {

            *out_off = off;
    a49a:	8011      	strh	r1, [r2, #0]
        }

        off -= cur->om_len;
        cur = next;
    }
}
    a49c:	bd10      	pop	{r4, pc}
        if (cur->om_len > off ||
    a49e:	d101      	bne.n	a4a4 <os_mbuf_off+0x16>
            (cur->om_len == off && next == NULL)) {
    a4a0:	2b00      	cmp	r3, #0
    a4a2:	d0fa      	beq.n	a49a <os_mbuf_off+0xc>
        off -= cur->om_len;
    a4a4:	1b09      	subs	r1, r1, r4
        next = SLIST_NEXT(cur, om_next);
    a4a6:	4618      	mov	r0, r3
        if (cur == NULL) {
    a4a8:	e7f2      	b.n	a490 <os_mbuf_off+0x2>

0000a4aa <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
    a4aa:	b570      	push	{r4, r5, r6, lr}
    a4ac:	4604      	mov	r4, r0
    unsigned int count;
    uint8_t *udst;

    if (!len) {
    a4ae:	4615      	mov	r5, r2
    a4b0:	b952      	cbnz	r2, a4c8 <os_mbuf_copydata+0x1e>
        return 0;
    a4b2:	2000      	movs	r0, #0
        off = 0;
        m = SLIST_NEXT(m, om_next);
    }

    return (len > 0 ? -1 : 0);
}
    a4b4:	bd70      	pop	{r4, r5, r6, pc}
        if (!m) {
    a4b6:	b914      	cbnz	r4, a4be <os_mbuf_copydata+0x14>
            return (-1);
    a4b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a4bc:	e7fa      	b.n	a4b4 <os_mbuf_copydata+0xa>
        if (off < m->om_len)
    a4be:	88e2      	ldrh	r2, [r4, #6]
    a4c0:	428a      	cmp	r2, r1
    a4c2:	dc03      	bgt.n	a4cc <os_mbuf_copydata+0x22>
        m = SLIST_NEXT(m, om_next);
    a4c4:	68e4      	ldr	r4, [r4, #12]
        off -= m->om_len;
    a4c6:	1a89      	subs	r1, r1, r2
    while (off > 0) {
    a4c8:	2900      	cmp	r1, #0
    a4ca:	dcf4      	bgt.n	a4b6 <os_mbuf_copydata+0xc>
    while (len > 0 && m != NULL) {
    a4cc:	2d00      	cmp	r5, #0
    a4ce:	ddf0      	ble.n	a4b2 <os_mbuf_copydata+0x8>
    a4d0:	2c00      	cmp	r4, #0
    a4d2:	d0f1      	beq.n	a4b8 <os_mbuf_copydata+0xe>
        count = min(m->om_len - off, len);
    a4d4:	88e6      	ldrh	r6, [r4, #6]
        memcpy(udst, m->om_data + off, count);
    a4d6:	6820      	ldr	r0, [r4, #0]
        count = min(m->om_len - off, len);
    a4d8:	1a76      	subs	r6, r6, r1
    a4da:	42ae      	cmp	r6, r5
    a4dc:	bfa8      	it	ge
    a4de:	462e      	movge	r6, r5
        memcpy(udst, m->om_data + off, count);
    a4e0:	4401      	add	r1, r0
    a4e2:	4632      	mov	r2, r6
    a4e4:	4618      	mov	r0, r3
    a4e6:	f005 f87d 	bl	f5e4 <memcpy>
    a4ea:	4603      	mov	r3, r0
        m = SLIST_NEXT(m, om_next);
    a4ec:	68e4      	ldr	r4, [r4, #12]
        len -= count;
    a4ee:	1bad      	subs	r5, r5, r6
        udst += count;
    a4f0:	4433      	add	r3, r6
        off = 0;
    a4f2:	2100      	movs	r1, #0
    a4f4:	e7ea      	b.n	a4cc <os_mbuf_copydata+0x22>

0000a4f6 <os_mbuf_adj>:

void
os_mbuf_adj(struct os_mbuf *mp, int req_len)
{
    a4f6:	b570      	push	{r4, r5, r6, lr}
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
    a4f8:	2800      	cmp	r0, #0
    a4fa:	d030      	beq.n	a55e <os_mbuf_adj+0x68>
        return;
    if (len >= 0) {
    a4fc:	2900      	cmp	r1, #0
    a4fe:	da1a      	bge.n	a536 <os_mbuf_adj+0x40>
         * calculating its length and finding the last mbuf.
         * If the adjustment only affects this mbuf, then just
         * adjust and return.  Otherwise, rescan and truncate
         * after the remaining size.
         */
        len = -len;
    a500:	424b      	negs	r3, r1
    a502:	4604      	mov	r4, r0
        count = 0;
    a504:	2500      	movs	r5, #0
        for (;;) {
            count += m->om_len;
    a506:	88e2      	ldrh	r2, [r4, #6]
    a508:	4626      	mov	r6, r4
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
    a50a:	68e4      	ldr	r4, [r4, #12]
            count += m->om_len;
    a50c:	4415      	add	r5, r2
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
    a50e:	2c00      	cmp	r4, #0
    a510:	d1f9      	bne.n	a506 <os_mbuf_adj+0x10>
                break;
            m = SLIST_NEXT(m, om_next);
        }
        if (m->om_len >= len) {
    a512:	429a      	cmp	r2, r3
            m->om_len -= len;
            if (OS_MBUF_IS_PKTHDR(mp))
    a514:	7944      	ldrb	r4, [r0, #5]
        if (m->om_len >= len) {
    a516:	db23      	blt.n	a560 <os_mbuf_adj+0x6a>
            m->om_len -= len;
    a518:	b29b      	uxth	r3, r3
    a51a:	1ad2      	subs	r2, r2, r3
            if (OS_MBUF_IS_PKTHDR(mp))
    a51c:	2c07      	cmp	r4, #7
            m->om_len -= len;
    a51e:	80f2      	strh	r2, [r6, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
    a520:	d91d      	bls.n	a55e <os_mbuf_adj+0x68>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
    a522:	8a02      	ldrh	r2, [r0, #16]
    a524:	1ad3      	subs	r3, r2, r3
    a526:	e019      	b.n	a55c <os_mbuf_adj+0x66>
                m->om_len -= len;
    a528:	1ae4      	subs	r4, r4, r3
    a52a:	80d4      	strh	r4, [r2, #6]
                m->om_data += len;
    a52c:	6814      	ldr	r4, [r2, #0]
    a52e:	4423      	add	r3, r4
    a530:	6013      	str	r3, [r2, #0]
                len = 0;
    a532:	2300      	movs	r3, #0
    a534:	e00c      	b.n	a550 <os_mbuf_adj+0x5a>
    a536:	4602      	mov	r2, r0
    a538:	460b      	mov	r3, r1
                m->om_len = 0;
    a53a:	2500      	movs	r5, #0
        while (m != NULL && len > 0) {
    a53c:	2b00      	cmp	r3, #0
    a53e:	dd07      	ble.n	a550 <os_mbuf_adj+0x5a>
            if (m->om_len <= len) {
    a540:	88d4      	ldrh	r4, [r2, #6]
    a542:	429c      	cmp	r4, r3
    a544:	dcf0      	bgt.n	a528 <os_mbuf_adj+0x32>
                m->om_len = 0;
    a546:	80d5      	strh	r5, [r2, #6]
                m = SLIST_NEXT(m, om_next);
    a548:	68d2      	ldr	r2, [r2, #12]
                len -= m->om_len;
    a54a:	1b1b      	subs	r3, r3, r4
        while (m != NULL && len > 0) {
    a54c:	2a00      	cmp	r2, #0
    a54e:	d1f5      	bne.n	a53c <os_mbuf_adj+0x46>
        if (OS_MBUF_IS_PKTHDR(mp))
    a550:	7942      	ldrb	r2, [r0, #5]
    a552:	2a07      	cmp	r2, #7
    a554:	d903      	bls.n	a55e <os_mbuf_adj+0x68>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
    a556:	8a02      	ldrh	r2, [r0, #16]
    a558:	1a51      	subs	r1, r2, r1
    a55a:	440b      	add	r3, r1
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
    a55c:	8203      	strh	r3, [r0, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
    a55e:	bd70      	pop	{r4, r5, r6, pc}
        count -= len;
    a560:	4429      	add	r1, r5
        if (count < 0)
    a562:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
        if (OS_MBUF_IS_PKTHDR(m))
    a566:	2c07      	cmp	r4, #7
            OS_MBUF_PKTHDR(m)->omp_len = count;
    a568:	bf88      	it	hi
    a56a:	8201      	strhhi	r1, [r0, #16]
            if (m->om_len >= count) {
    a56c:	88c3      	ldrh	r3, [r0, #6]
    a56e:	428b      	cmp	r3, r1
    a570:	4604      	mov	r4, r0
                if (SLIST_NEXT(m, om_next) != NULL) {
    a572:	68c0      	ldr	r0, [r0, #12]
            if (m->om_len >= count) {
    a574:	db07      	blt.n	a586 <os_mbuf_adj+0x90>
                m->om_len = count;
    a576:	80e1      	strh	r1, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
    a578:	2800      	cmp	r0, #0
    a57a:	d0f0      	beq.n	a55e <os_mbuf_adj+0x68>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
    a57c:	f7ff ff2d 	bl	a3da <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
    a580:	2300      	movs	r3, #0
    a582:	60e3      	str	r3, [r4, #12]
    a584:	e7eb      	b.n	a55e <os_mbuf_adj+0x68>
            count -= m->om_len;
    a586:	1ac9      	subs	r1, r1, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
    a588:	2800      	cmp	r0, #0
    a58a:	d1ef      	bne.n	a56c <os_mbuf_adj+0x76>
    a58c:	e7e7      	b.n	a55e <os_mbuf_adj+0x68>

0000a58e <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
    a58e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
    a592:	1e1e      	subs	r6, r3, #0
{
    a594:	4690      	mov	r8, r2
    if (len <= 0) {
    a596:	dd27      	ble.n	a5e8 <os_mbuf_cmpf+0x5a>
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
    a598:	f10d 0206 	add.w	r2, sp, #6
    a59c:	f7ff ff77 	bl	a48e <os_mbuf_off>
    data_off = 0;
    a5a0:	2500      	movs	r5, #0
    om = os_mbuf_off(om, off, &om_off);
    a5a2:	4604      	mov	r4, r0
        if (data_off == len) {
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
        om_off = 0;
    a5a4:	46a9      	mov	r9, r5
        if (om == NULL) {
    a5a6:	b924      	cbnz	r4, a5b2 <os_mbuf_cmpf+0x24>
            return INT_MAX;
    a5a8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

        if (om == NULL) {
            return INT_MAX;
        }
    }
}
    a5ac:	b003      	add	sp, #12
    a5ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        chunk_sz = min(om->om_len - om_off, len - data_off);
    a5b2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a5b6:	88e2      	ldrh	r2, [r4, #6]
    a5b8:	1b73      	subs	r3, r6, r5
    a5ba:	1a12      	subs	r2, r2, r0
    a5bc:	429a      	cmp	r2, r3
    a5be:	bfa8      	it	ge
    a5c0:	461a      	movge	r2, r3
    a5c2:	b297      	uxth	r7, r2
        if (chunk_sz > 0) {
    a5c4:	b147      	cbz	r7, a5d8 <os_mbuf_cmpf+0x4a>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
    a5c6:	6823      	ldr	r3, [r4, #0]
    a5c8:	463a      	mov	r2, r7
    a5ca:	eb08 0105 	add.w	r1, r8, r5
    a5ce:	4418      	add	r0, r3
    a5d0:	f004 ffe4 	bl	f59c <memcmp>
            if (rc != 0) {
    a5d4:	2800      	cmp	r0, #0
    a5d6:	d1e9      	bne.n	a5ac <os_mbuf_cmpf+0x1e>
        data_off += chunk_sz;
    a5d8:	443d      	add	r5, r7
    a5da:	b2ad      	uxth	r5, r5
        if (data_off == len) {
    a5dc:	42b5      	cmp	r5, r6
    a5de:	d003      	beq.n	a5e8 <os_mbuf_cmpf+0x5a>
        om = SLIST_NEXT(om, om_next);
    a5e0:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
    a5e2:	f8ad 9006 	strh.w	r9, [sp, #6]
        if (om == NULL) {
    a5e6:	e7de      	b.n	a5a6 <os_mbuf_cmpf+0x18>
        return 0;
    a5e8:	2000      	movs	r0, #0
    a5ea:	e7df      	b.n	a5ac <os_mbuf_cmpf+0x1e>

0000a5ec <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
    a5ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    a5f0:	4691      	mov	r9, r2
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
    a5f2:	f10d 0206 	add.w	r2, sp, #6
{
    a5f6:	4607      	mov	r7, r0
    a5f8:	4688      	mov	r8, r1
    a5fa:	461c      	mov	r4, r3
    cur = os_mbuf_off(om, off, &cur_off);
    a5fc:	f7ff ff47 	bl	a48e <os_mbuf_off>
    if (cur == NULL) {
    a600:	4605      	mov	r5, r0
    a602:	b370      	cbz	r0, a662 <os_mbuf_copyinto+0x76>
        if (next == NULL) {
            break;
        }

        cur = next;
        cur_off = 0;
    a604:	f04f 0a00 	mov.w	sl, #0
        copylen = min(cur->om_len - cur_off, len);
    a608:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a60c:	88ee      	ldrh	r6, [r5, #6]
    a60e:	1a36      	subs	r6, r6, r0
    a610:	42a6      	cmp	r6, r4
    a612:	bfa8      	it	ge
    a614:	4626      	movge	r6, r4
        if (copylen > 0) {
    a616:	2e00      	cmp	r6, #0
    a618:	dd07      	ble.n	a62a <os_mbuf_copyinto+0x3e>
            memcpy(cur->om_data + cur_off, sptr, copylen);
    a61a:	682b      	ldr	r3, [r5, #0]
    a61c:	4649      	mov	r1, r9
    a61e:	4632      	mov	r2, r6
    a620:	4418      	add	r0, r3
    a622:	f004 ffdf 	bl	f5e4 <memcpy>
            sptr += copylen;
    a626:	44b1      	add	r9, r6
            len -= copylen;
    a628:	1ba4      	subs	r4, r4, r6
        if (len == 0) {
    a62a:	b91c      	cbnz	r4, a634 <os_mbuf_copyinto+0x48>
            return 0;
    a62c:	2000      	movs	r0, #0
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
    }

    return 0;
}
    a62e:	b002      	add	sp, #8
    a630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        next = SLIST_NEXT(cur, om_next);
    a634:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
    a636:	b11b      	cbz	r3, a640 <os_mbuf_copyinto+0x54>
        cur_off = 0;
    a638:	f8ad a006 	strh.w	sl, [sp, #6]
        copylen = min(cur->om_len - cur_off, len);
    a63c:	461d      	mov	r5, r3
    a63e:	e7e3      	b.n	a608 <os_mbuf_copyinto+0x1c>
    rc = os_mbuf_append(cur, sptr, len);
    a640:	b2a2      	uxth	r2, r4
    a642:	4649      	mov	r1, r9
    a644:	4628      	mov	r0, r5
    a646:	f7ff fed2 	bl	a3ee <os_mbuf_append>
    if (rc != 0) {
    a64a:	2800      	cmp	r0, #0
    a64c:	d1ef      	bne.n	a62e <os_mbuf_copyinto+0x42>
    if (OS_MBUF_IS_PKTHDR(om)) {
    a64e:	797b      	ldrb	r3, [r7, #5]
    a650:	2b07      	cmp	r3, #7
    a652:	d9eb      	bls.n	a62c <os_mbuf_copyinto+0x40>
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
    a654:	8a39      	ldrh	r1, [r7, #16]
    a656:	4444      	add	r4, r8
    a658:	428c      	cmp	r4, r1
    a65a:	bfb8      	it	lt
    a65c:	460c      	movlt	r4, r1
        OS_MBUF_PKTHDR(om)->omp_len =
    a65e:	823c      	strh	r4, [r7, #16]
    a660:	e7e5      	b.n	a62e <os_mbuf_copyinto+0x42>
        return -1;
    a662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a666:	e7e2      	b.n	a62e <os_mbuf_copyinto+0x42>

0000a668 <os_mbuf_extend>:
    second->om_pkthdr_len = 0;
}

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
    a668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
    a66a:	6887      	ldr	r7, [r0, #8]
    a66c:	883b      	ldrh	r3, [r7, #0]
    a66e:	428b      	cmp	r3, r1
{
    a670:	4605      	mov	r5, r0
    a672:	460c      	mov	r4, r1
    if (len > om->om_omp->omp_databuf_len) {
    a674:	d201      	bcs.n	a67a <os_mbuf_extend+0x12>
        return NULL;
    a676:	2000      	movs	r0, #0
    if (OS_MBUF_IS_PKTHDR(om)) {
        OS_MBUF_PKTHDR(om)->omp_len += len;
    }

    return data;
}
    a678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a67a:	4601      	mov	r1, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
    a67c:	460e      	mov	r6, r1
    a67e:	68c9      	ldr	r1, [r1, #12]
    a680:	2900      	cmp	r1, #0
    a682:	d1fb      	bne.n	a67c <os_mbuf_extend+0x14>
    if (OS_MBUF_TRAILINGSPACE(last) < len) {
    a684:	4630      	mov	r0, r6
    a686:	f7ff fe29 	bl	a2dc <_os_mbuf_trailingspace>
    a68a:	42a0      	cmp	r0, r4
    a68c:	d206      	bcs.n	a69c <os_mbuf_extend+0x34>
        newm = os_mbuf_get(om->om_omp, 0);
    a68e:	4638      	mov	r0, r7
    a690:	f7ff fe6e 	bl	a370 <os_mbuf_get>
        if (newm == NULL) {
    a694:	2800      	cmp	r0, #0
    a696:	d0ee      	beq.n	a676 <os_mbuf_extend+0xe>
        SLIST_NEXT(last, om_next) = newm;
    a698:	60f0      	str	r0, [r6, #12]
    a69a:	4606      	mov	r6, r0
    data = last->om_data + last->om_len;
    a69c:	88f3      	ldrh	r3, [r6, #6]
    a69e:	6830      	ldr	r0, [r6, #0]
    a6a0:	4418      	add	r0, r3
    last->om_len += len;
    a6a2:	4423      	add	r3, r4
    a6a4:	80f3      	strh	r3, [r6, #6]
    if (OS_MBUF_IS_PKTHDR(om)) {
    a6a6:	796b      	ldrb	r3, [r5, #5]
    a6a8:	2b07      	cmp	r3, #7
        OS_MBUF_PKTHDR(om)->omp_len += len;
    a6aa:	bf82      	ittt	hi
    a6ac:	8a29      	ldrhhi	r1, [r5, #16]
    a6ae:	1864      	addhi	r4, r4, r1
    a6b0:	822c      	strhhi	r4, [r5, #16]
    a6b2:	e7e1      	b.n	a678 <os_mbuf_extend+0x10>

0000a6b4 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    a6b4:	b130      	cbz	r0, a6c4 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    a6b6:	2300      	movs	r3, #0
    a6b8:	7143      	strb	r3, [r0, #5]
    mu->mu_level = 0;
    a6ba:	80c3      	strh	r3, [r0, #6]
    mu->mu_owner = NULL;
    a6bc:	6083      	str	r3, [r0, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    a6be:	6003      	str	r3, [r0, #0]

    ret = OS_OK;
    a6c0:	4618      	mov	r0, r3
    a6c2:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    a6c4:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    a6c6:	4770      	bx	lr

0000a6c8 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
    a6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
    a6ca:	4b27      	ldr	r3, [pc, #156]	; (a768 <os_mutex_release+0xa0>)
    a6cc:	681b      	ldr	r3, [r3, #0]
{
    a6ce:	4604      	mov	r4, r0
    if (!g_os_started) {
    a6d0:	2b00      	cmp	r3, #0
    a6d2:	d042      	beq.n	a75a <os_mutex_release+0x92>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    a6d4:	2800      	cmp	r0, #0
    a6d6:	d042      	beq.n	a75e <os_mutex_release+0x96>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
    a6d8:	f7ff f992 	bl	9a00 <os_sched_get_current_task>
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
    a6dc:	88e3      	ldrh	r3, [r4, #6]
    current = os_sched_get_current_task();
    a6de:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
    a6e0:	2b00      	cmp	r3, #0
    a6e2:	d03e      	beq.n	a762 <os_mutex_release+0x9a>
    a6e4:	68a2      	ldr	r2, [r4, #8]
    a6e6:	4282      	cmp	r2, r0
    a6e8:	d13b      	bne.n	a762 <os_mutex_release+0x9a>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
    a6ea:	2b01      	cmp	r3, #1
    a6ec:	d003      	beq.n	a6f6 <os_mutex_release+0x2e>
        --mu->mu_level;
    a6ee:	3b01      	subs	r3, #1
    a6f0:	80e3      	strh	r3, [r4, #6]
    /* Re-schedule if needed */
    if (resched) {
        os_sched(rdy);
    }

    ret = OS_OK;
    a6f2:	2000      	movs	r0, #0
    a6f4:	e032      	b.n	a75c <os_mutex_release+0x94>
    OS_ENTER_CRITICAL(sr);
    a6f6:	f7ff fd37 	bl	a168 <os_arch_save_sr>
    --mu->mu_level;
    a6fa:	88e3      	ldrh	r3, [r4, #6]
    a6fc:	3b01      	subs	r3, #1
    a6fe:	80e3      	strh	r3, [r4, #6]
    if (current->t_prio != mu->mu_prio) {
    a700:	7aea      	ldrb	r2, [r5, #11]
    a702:	7963      	ldrb	r3, [r4, #5]
    a704:	429a      	cmp	r2, r3
    OS_ENTER_CRITICAL(sr);
    a706:	4607      	mov	r7, r0
    if (current->t_prio != mu->mu_prio) {
    a708:	d003      	beq.n	a712 <os_mutex_release+0x4a>
        current->t_prio = mu->mu_prio;
    a70a:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
    a70c:	4628      	mov	r0, r5
    a70e:	f7ff fa77 	bl	9c00 <os_sched_resort>
    rdy = SLIST_FIRST(&mu->mu_head);
    a712:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
    a714:	b16e      	cbz	r6, a732 <os_mutex_release+0x6a>
        assert(rdy->t_obj);
    a716:	69f3      	ldr	r3, [r6, #28]
    a718:	b923      	cbnz	r3, a724 <os_mutex_release+0x5c>
    a71a:	461a      	mov	r2, r3
    a71c:	4619      	mov	r1, r3
    a71e:	4618      	mov	r0, r3
    a720:	f7fe fbe8 	bl	8ef4 <__assert_func>
        os_sched_wakeup(rdy);
    a724:	4630      	mov	r0, r6
    a726:	f7ff f9f9 	bl	9b1c <os_sched_wakeup>
        mu->mu_level = 1;
    a72a:	2301      	movs	r3, #1
    a72c:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
    a72e:	7af3      	ldrb	r3, [r6, #11]
    a730:	7163      	strb	r3, [r4, #5]
    mu->mu_owner = rdy;
    a732:	60a6      	str	r6, [r4, #8]
    if (rdy) {
    a734:	b116      	cbz	r6, a73c <os_mutex_release+0x74>
        rdy->t_lockcnt++;
    a736:	7bb3      	ldrb	r3, [r6, #14]
    a738:	3301      	adds	r3, #1
    a73a:	73b3      	strb	r3, [r6, #14]
    --current->t_lockcnt;
    a73c:	7bab      	ldrb	r3, [r5, #14]
    a73e:	3b01      	subs	r3, #1
    a740:	73ab      	strb	r3, [r5, #14]
    rdy = os_sched_next_task();
    a742:	f7ff fa57 	bl	9bf4 <os_sched_next_task>
    a746:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
    a748:	4638      	mov	r0, r7
    a74a:	f7ff fd13 	bl	a174 <os_arch_restore_sr>
    if (resched) {
    a74e:	42a5      	cmp	r5, r4
    a750:	d0cf      	beq.n	a6f2 <os_mutex_release+0x2a>
        os_sched(rdy);
    a752:	4620      	mov	r0, r4
    a754:	f7ff f960 	bl	9a18 <os_sched>
    a758:	e7cb      	b.n	a6f2 <os_mutex_release+0x2a>
        ret = OS_NOT_STARTED;
    a75a:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
    a75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
    a75e:	2003      	movs	r0, #3
    a760:	e7fc      	b.n	a75c <os_mutex_release+0x94>
        ret = OS_BAD_MUTEX;
    a762:	2005      	movs	r0, #5
    a764:	e7fa      	b.n	a75c <os_mutex_release+0x94>
    a766:	bf00      	nop
    a768:	200025d0 	.word	0x200025d0

0000a76c <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
    a76c:	4b35      	ldr	r3, [pc, #212]	; (a844 <os_mutex_pend+0xd8>)
    a76e:	681b      	ldr	r3, [r3, #0]
{
    a770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a774:	4606      	mov	r6, r0
    a776:	4688      	mov	r8, r1
    if (!g_os_started) {
    a778:	2b00      	cmp	r3, #0
    a77a:	d05e      	beq.n	a83a <os_mutex_pend+0xce>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    a77c:	2800      	cmp	r0, #0
    a77e:	d05e      	beq.n	a83e <os_mutex_pend+0xd2>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
    a780:	f7ff fcf2 	bl	a168 <os_arch_save_sr>
    a784:	4607      	mov	r7, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
    a786:	f7ff f93b 	bl	9a00 <os_sched_get_current_task>
    if (mu->mu_level == 0) {
    a78a:	88f5      	ldrh	r5, [r6, #6]
    current = os_sched_get_current_task();
    a78c:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
    a78e:	b96d      	cbnz	r5, a7ac <os_mutex_pend+0x40>
        mu->mu_owner = current;
    a790:	60b0      	str	r0, [r6, #8]
        mu->mu_prio  = current->t_prio;
    a792:	7ac3      	ldrb	r3, [r0, #11]
    a794:	7173      	strb	r3, [r6, #5]
        current->t_lockcnt++;
    a796:	7b83      	ldrb	r3, [r0, #14]
    a798:	3301      	adds	r3, #1
    a79a:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
    a79c:	2301      	movs	r3, #1
    a79e:	80f3      	strh	r3, [r6, #6]
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
        ++mu->mu_level;
        OS_EXIT_CRITICAL(sr);
    a7a0:	4638      	mov	r0, r7
    a7a2:	f7ff fce7 	bl	a174 <os_arch_restore_sr>
        ret = OS_OK;
    a7a6:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
    a7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (mu->mu_owner == current) {
    a7ac:	68b0      	ldr	r0, [r6, #8]
    a7ae:	42a0      	cmp	r0, r4
    a7b0:	d102      	bne.n	a7b8 <os_mutex_pend+0x4c>
        ++mu->mu_level;
    a7b2:	3501      	adds	r5, #1
    a7b4:	80f5      	strh	r5, [r6, #6]
    a7b6:	e7f3      	b.n	a7a0 <os_mutex_pend+0x34>
    if (timeout == 0) {
    a7b8:	f1b8 0f00 	cmp.w	r8, #0
    a7bc:	d104      	bne.n	a7c8 <os_mutex_pend+0x5c>
        OS_EXIT_CRITICAL(sr);
    a7be:	4638      	mov	r0, r7
    a7c0:	f7ff fcd8 	bl	a174 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
    a7c4:	2006      	movs	r0, #6
        goto done;
    a7c6:	e7ef      	b.n	a7a8 <os_mutex_pend+0x3c>
    if (mu->mu_owner->t_prio > current->t_prio) {
    a7c8:	7ae3      	ldrb	r3, [r4, #11]
    a7ca:	7ac2      	ldrb	r2, [r0, #11]
    a7cc:	429a      	cmp	r2, r3
    a7ce:	d902      	bls.n	a7d6 <os_mutex_pend+0x6a>
        mu->mu_owner->t_prio = current->t_prio;
    a7d0:	72c3      	strb	r3, [r0, #11]
        os_sched_resort(mu->mu_owner);
    a7d2:	f7ff fa15 	bl	9c00 <os_sched_resort>
    if (!SLIST_EMPTY(&mu->mu_head)) {
    a7d6:	6831      	ldr	r1, [r6, #0]
    a7d8:	b361      	cbz	r1, a834 <os_mutex_pend+0xc8>
            if (current->t_prio < entry->t_prio) {
    a7da:	7ae5      	ldrb	r5, [r4, #11]
    a7dc:	460a      	mov	r2, r1
    last = NULL;
    a7de:	2300      	movs	r3, #0
            if (current->t_prio < entry->t_prio) {
    a7e0:	7ad0      	ldrb	r0, [r2, #11]
    a7e2:	42a8      	cmp	r0, r5
    a7e4:	d824      	bhi.n	a830 <os_mutex_pend+0xc4>
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    a7e6:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    a7e8:	4613      	mov	r3, r2
    a7ea:	b9f8      	cbnz	r0, a82c <os_mutex_pend+0xc0>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
    a7ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    a7ee:	64e2      	str	r2, [r4, #76]	; 0x4c
    a7f0:	64dc      	str	r4, [r3, #76]	; 0x4c
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
    a7f2:	7b63      	ldrb	r3, [r4, #13]
    current->t_obj = mu;
    a7f4:	61e6      	str	r6, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
    a7f6:	f043 0304 	orr.w	r3, r3, #4
    a7fa:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
    a7fc:	4641      	mov	r1, r8
    a7fe:	4620      	mov	r0, r4
    a800:	f7ff f91c 	bl	9a3c <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
    a804:	4638      	mov	r0, r7
    a806:	f7ff fcb5 	bl	a174 <os_arch_restore_sr>
    os_sched(NULL);
    a80a:	2000      	movs	r0, #0
    a80c:	f7ff f904 	bl	9a18 <os_sched>
    OS_ENTER_CRITICAL(sr);
    a810:	f7ff fcaa 	bl	a168 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
    a814:	7b63      	ldrb	r3, [r4, #13]
    a816:	f023 0304 	bic.w	r3, r3, #4
    a81a:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
    a81c:	f7ff fcaa 	bl	a174 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
    a820:	68b0      	ldr	r0, [r6, #8]
        ret = OS_TIMEOUT;
    a822:	42a0      	cmp	r0, r4
    a824:	bf14      	ite	ne
    a826:	2006      	movne	r0, #6
    a828:	2000      	moveq	r0, #0
    a82a:	e7bd      	b.n	a7a8 <os_mutex_pend+0x3c>
    a82c:	4602      	mov	r2, r0
    a82e:	e7d7      	b.n	a7e0 <os_mutex_pend+0x74>
    if (last) {
    a830:	2b00      	cmp	r3, #0
    a832:	d1db      	bne.n	a7ec <os_mutex_pend+0x80>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
    a834:	64e1      	str	r1, [r4, #76]	; 0x4c
    a836:	6034      	str	r4, [r6, #0]
    a838:	e7db      	b.n	a7f2 <os_mutex_pend+0x86>
        ret = OS_NOT_STARTED;
    a83a:	2009      	movs	r0, #9
    a83c:	e7b4      	b.n	a7a8 <os_mutex_pend+0x3c>
        ret = OS_INVALID_PARM;
    a83e:	2003      	movs	r0, #3
    a840:	e7b2      	b.n	a7a8 <os_mutex_pend+0x3c>
    a842:	bf00      	nop
    a844:	200025d0 	.word	0x200025d0

0000a848 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    a848:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    a84c:	4832      	ldr	r0, [pc, #200]	; (a918 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    a84e:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    a850:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    a852:	f380 8814 	msr	CONTROL, r0
        ISB
    a856:	f3bf 8f6f 	isb	sy
        BX      LR
    a85a:	4770      	bx	lr

0000a85c <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    a85c:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    a860:	4770      	bx	lr

0000a862 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    a862:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    a866:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    a868:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    a86c:	b951      	cbnz	r1, a884 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    a86e:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    a872:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    a874:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    a876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    a87a:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    a87e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    a882:	4770      	bx	lr

0000a884 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    a884:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    a886:	4a25      	ldr	r2, [pc, #148]	; (a91c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    a888:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    a88a:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    a88c:	d809      	bhi.n	a8a2 <SVC_Done>

        LDR     R4,=SVC_Table-4
    a88e:	4c24      	ldr	r4, [pc, #144]	; (a920 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    a890:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    a894:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    a898:	47a0      	blx	r4

        MRS     R12,PSP
    a89a:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    a89e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000a8a2 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    a8a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    a8a6:	4770      	bx	lr

0000a8a8 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    a8a8:	4b1e      	ldr	r3, [pc, #120]	; (a924 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    a8aa:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    a8ac:	4b1e      	ldr	r3, [pc, #120]	; (a928 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    a8ae:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    a8b0:	4291      	cmp	r1, r2
        IT      EQ
    a8b2:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    a8b4:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    a8b6:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
    a8ba:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
    a8be:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
    a8c0:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
    a8c4:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    a8c8:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    a8cc:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    a8ce:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
    a8d2:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
    a8d6:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
    a8da:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
    a8dc:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
    a8e0:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
    a8e4:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
    a8e8:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    a8ec:	4770      	bx	lr

0000a8ee <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    a8ee:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    a8f0:	f7ff fc2d 	bl	a14e <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    a8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    a8f8:	4770      	bx	lr

0000a8fa <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    a8fa:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    a8fe:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    a900:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    a904:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    a908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    a90c:	4668      	mov	r0, sp
        BL      os_default_irq
    a90e:	f7fe fb17 	bl	8f40 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    a912:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    a916:	4770      	bx	lr
        LDR     R0,=os_flags
    a918:	2000342c 	.word	0x2000342c
        LDR     R2,=SVC_Count
    a91c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    a920:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    a924:	20000550 	.word	0x20000550
        LDR     R3,=g_current_task      /* Get current task */
    a928:	200033e4 	.word	0x200033e4

0000a92c <uwb_write_tx.isra.0>:
uwb_write_tx(struct uwb_dev* dev, uint8_t *tx_frame_bytes,
    a92c:	b410      	push	{r4}
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    a92e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    a930:	6c64      	ldr	r4, [r4, #68]	; 0x44
    a932:	46a4      	mov	ip, r4
}
    a934:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    a938:	4760      	bx	ip

0000a93a <tx_complete_cb>:
 * @return true on sucess
 */
static bool
tx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    nmgr_uwb_instance_t * nmgruwb = (nmgr_uwb_instance_t *)cbs->inst_ptr;
    a93a:	6848      	ldr	r0, [r1, #4]
{
    a93c:	b508      	push	{r3, lr}
    if(dpl_sem_get_count(&nmgruwb->sem) == 0) {
    a93e:	89c3      	ldrh	r3, [r0, #14]
    a940:	b923      	cbnz	r3, a94c <tx_complete_cb+0x12>
    return (dpl_error_t)os_sem_release(&sem->sem);
    a942:	3008      	adds	r0, #8
    a944:	f7ff f976 	bl	9c34 <os_sem_release>
        dpl_sem_release(&nmgruwb->sem);
        return true;
    a948:	2001      	movs	r0, #1
    }
    return false;
}
    a94a:	bd08      	pop	{r3, pc}
    return false;
    a94c:	2000      	movs	r0, #0
    a94e:	e7fc      	b.n	a94a <tx_complete_cb+0x10>

0000a950 <rx_timeout_cb>:
    a950:	f7ff bff3 	b.w	a93a <tx_complete_cb>

0000a954 <rx_complete_cb>:
    if(inst->fctrl != NMGR_UWB_FCTRL) {
    a954:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
    a958:	f648 0341 	movw	r3, #34881	; 0x8841
    a95c:	429a      	cmp	r2, r3
{
    a95e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nmgr_uwb_instance_t * nmgruwb = (nmgr_uwb_instance_t *)cbs->inst_ptr;
    a962:	684e      	ldr	r6, [r1, #4]
{
    a964:	4604      	mov	r4, r0
    if(inst->fctrl != NMGR_UWB_FCTRL) {
    a966:	d009      	beq.n	a97c <rx_complete_cb+0x28>
    bool ret = false;
    a968:	2400      	movs	r4, #0
    if(dpl_sem_get_count(&nmgruwb->sem) == 0) {
    a96a:	89f3      	ldrh	r3, [r6, #14]
    a96c:	b91b      	cbnz	r3, a976 <rx_complete_cb+0x22>
    a96e:	f106 0008 	add.w	r0, r6, #8
    a972:	f7ff f95f 	bl	9c34 <os_sem_release>
}
    a976:	4620      	mov	r0, r4
    a978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    nmgr_uwb_frame_header_t *frame = (nmgr_uwb_frame_header_t*)inst->rxbuf;
    a97c:	f8d0 54fc 	ldr.w	r5, [r0, #1276]	; 0x4fc
    if(frame->code < UWB_DATA_CODE_NMGR_INVALID ||
    a980:	f8b5 3009 	ldrh.w	r3, [r5, #9]
    a984:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
    a988:	2b0f      	cmp	r3, #15
    a98a:	d8ed      	bhi.n	a968 <rx_complete_cb+0x14>
    if (frame->rpt_count < frame->rpt_max &&
    a98c:	7aeb      	ldrb	r3, [r5, #11]
    a98e:	7b2a      	ldrb	r2, [r5, #12]
    a990:	429a      	cmp	r2, r3
    a992:	d915      	bls.n	a9c0 <rx_complete_cb+0x6c>
        frame->dst_address != inst->my_short_address &&
    a994:	f8b0 24b6 	ldrh.w	r2, [r0, #1206]	; 0x4b6
    if (frame->rpt_count < frame->rpt_max &&
    a998:	f8b5 1005 	ldrh.w	r1, [r5, #5]
    a99c:	4291      	cmp	r1, r2
    a99e:	d00f      	beq.n	a9c0 <rx_complete_cb+0x6c>
        frame->dst_address != inst->my_short_address &&
    a9a0:	f8b5 1007 	ldrh.w	r1, [r5, #7]
    a9a4:	4291      	cmp	r1, r2
    a9a6:	d00b      	beq.n	a9c0 <rx_complete_cb+0x6c>
        !(frame->src_address = last_rpt_src && frame->seq_num != last_rpt_seq_num)
    a9a8:	4839      	ldr	r0, [pc, #228]	; (aa90 <rx_complete_cb+0x13c>)
    a9aa:	78a9      	ldrb	r1, [r5, #2]
    a9ac:	8807      	ldrh	r7, [r0, #0]
    a9ae:	4a39      	ldr	r2, [pc, #228]	; (aa94 <rx_complete_cb+0x140>)
    a9b0:	b33f      	cbz	r7, aa02 <rx_complete_cb+0xae>
    a9b2:	7817      	ldrb	r7, [r2, #0]
    a9b4:	428f      	cmp	r7, r1
    a9b6:	d024      	beq.n	aa02 <rx_complete_cb+0xae>
    a9b8:	2301      	movs	r3, #1
    a9ba:	71eb      	strb	r3, [r5, #7]
    a9bc:	2300      	movs	r3, #0
    a9be:	722b      	strb	r3, [r5, #8]
    if(frame->dst_address != inst->my_short_address && frame->dst_address != 0xffff) {
    a9c0:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    a9c4:	f8b4 24b6 	ldrh.w	r2, [r4, #1206]	; 0x4b6
    a9c8:	429a      	cmp	r2, r3
    a9ca:	d003      	beq.n	a9d4 <rx_complete_cb+0x80>
    a9cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    a9d0:	4293      	cmp	r3, r2
    a9d2:	d1c9      	bne.n	a968 <rx_complete_cb+0x14>
    switch(frame->code) {
    a9d4:	f8b5 2009 	ldrh.w	r2, [r5, #9]
    a9d8:	f240 4321 	movw	r3, #1057	; 0x421
    a9dc:	429a      	cmp	r2, r3
    a9de:	d1c3      	bne.n	a968 <rx_complete_cb+0x14>
            mbuf = os_msys_get_pkthdr(inst->frame_len - sizeof(nmgr_uwb_frame_header_t),
    a9e0:	f8b4 04e2 	ldrh.w	r0, [r4, #1250]	; 0x4e2
    a9e4:	380d      	subs	r0, #13
    a9e6:	2111      	movs	r1, #17
    a9e8:	b280      	uxth	r0, r0
    a9ea:	f7fe fef5 	bl	97d8 <os_msys_get_pkthdr>
            if (!mbuf) {
    a9ee:	4605      	mov	r5, r0
    a9f0:	bb58      	cbnz	r0, aa4a <rx_complete_cb+0xf6>
                printf("ERRMEM %d\n", inst->frame_len - sizeof(nmgr_uwb_frame_header_t) +
    a9f2:	f8b4 14e2 	ldrh.w	r1, [r4, #1250]	; 0x4e2
    a9f6:	4828      	ldr	r0, [pc, #160]	; (aa98 <rx_complete_cb+0x144>)
    a9f8:	3104      	adds	r1, #4
    a9fa:	f005 f8ef 	bl	fbdc <printf>
            ret = true;
    a9fe:	2401      	movs	r4, #1
    aa00:	e7b3      	b.n	a96a <rx_complete_cb+0x16>
        frame->rpt_count++;
    aa02:	3301      	adds	r3, #1
    aa04:	72eb      	strb	r3, [r5, #11]
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    aa06:	6a63      	ldr	r3, [r4, #36]	; 0x24
        last_rpt_seq_num = frame->seq_num;
    aa08:	7011      	strb	r1, [r2, #0]
        !(frame->src_address = last_rpt_src && frame->seq_num != last_rpt_seq_num)
    aa0a:	2700      	movs	r7, #0
    aa0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        last_rpt_src = frame->src_address;
    aa0e:	8007      	strh	r7, [r0, #0]
    aa10:	2101      	movs	r1, #1
        !(frame->src_address = last_rpt_src && frame->seq_num != last_rpt_seq_num)
    aa12:	71ef      	strb	r7, [r5, #7]
    aa14:	722f      	strb	r7, [r5, #8]
    aa16:	4620      	mov	r0, r4
    aa18:	4798      	blx	r3
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    aa1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    aa1c:	f8b4 14e2 	ldrh.w	r1, [r4, #1250]	; 0x4e2
    aa20:	f8d3 8048 	ldr.w	r8, [r3, #72]	; 0x48
    aa24:	463a      	mov	r2, r7
    aa26:	463b      	mov	r3, r7
    aa28:	4620      	mov	r0, r4
    aa2a:	47c0      	blx	r8
    return (dev->uw_funcs->uf_start_tx(dev));
    aa2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    aa2e:	4620      	mov	r0, r4
    aa30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    aa32:	4798      	blx	r3
        if (uwb_start_tx(inst).start_tx_error) {
    aa34:	f010 0204 	ands.w	r2, r0, #4
    aa38:	d1c2      	bne.n	a9c0 <rx_complete_cb+0x6c>
            uwb_write_tx(inst, inst->rxbuf, 0, inst->frame_len);
    aa3a:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
    aa3e:	f8d4 14fc 	ldr.w	r1, [r4, #1276]	; 0x4fc
    aa42:	4620      	mov	r0, r4
    aa44:	f7ff ff72 	bl	a92c <uwb_write_tx.isra.0>
    aa48:	e7ba      	b.n	a9c0 <rx_complete_cb+0x6c>
            memcpy(&hdr->uwb_hdr, inst->rxbuf, sizeof(nmgr_uwb_frame_header_t));
    aa4a:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
            hdr->nmgruwb_inst = nmgruwb;
    aa4e:	6186      	str	r6, [r0, #24]
            memcpy(&hdr->uwb_hdr, inst->rxbuf, sizeof(nmgr_uwb_frame_header_t));
    aa50:	f100 021c 	add.w	r2, r0, #28
    aa54:	f103 010c 	add.w	r1, r3, #12
    aa58:	f853 0b04 	ldr.w	r0, [r3], #4
    aa5c:	f842 0b04 	str.w	r0, [r2], #4
    aa60:	428b      	cmp	r3, r1
    aa62:	d1f9      	bne.n	aa58 <rx_complete_cb+0x104>
    aa64:	781b      	ldrb	r3, [r3, #0]
    aa66:	7013      	strb	r3, [r2, #0]
                                      (inst->frame_len - sizeof(nmgr_uwb_frame_header_t)));
    aa68:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
            int rc = os_mbuf_copyinto(mbuf, 0, inst->rxbuf + sizeof(nmgr_uwb_frame_header_t),
    aa6c:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
    aa70:	3b0d      	subs	r3, #13
    aa72:	320d      	adds	r2, #13
    aa74:	2100      	movs	r1, #0
    aa76:	4628      	mov	r0, r5
    aa78:	f7ff fdb8 	bl	a5ec <os_mbuf_copyinto>
            if (rc == 0) {
    aa7c:	b920      	cbnz	r0, aa88 <rx_complete_cb+0x134>
                nmgr_rx_req(&uwb_transport_0, mbuf);
    aa7e:	4629      	mov	r1, r5
    aa80:	4806      	ldr	r0, [pc, #24]	; (aa9c <rx_complete_cb+0x148>)
    aa82:	f006 f941 	bl	10d08 <nmgr_rx_req>
    aa86:	e7ba      	b.n	a9fe <rx_complete_cb+0xaa>
                os_mbuf_free_chain(mbuf);
    aa88:	4628      	mov	r0, r5
    aa8a:	f7ff fca6 	bl	a3da <os_mbuf_free_chain>
    aa8e:	e7b6      	b.n	a9fe <rx_complete_cb+0xaa>
    aa90:	20003432 	.word	0x20003432
    aa94:	20003430 	.word	0x20003430
    aa98:	00021c86 	.word	0x00021c86
    aa9c:	20003434 	.word	0x20003434

0000aaa0 <nmgr_uwb_mtu>:
{
    aaa0:	b508      	push	{r3, lr}
    struct uwb_dev* inst = uwb_dev_idx_lookup(idx);
    aaa2:	4608      	mov	r0, r1
    aaa4:	f7fd ffd0 	bl	8a48 <uwb_dev_idx_lookup>
    return (inst->config.rx.phrMode==DWT_PHRMODE_STD) ? NMGR_UWB_MTU_STD : NMGR_UWB_MTU_EXT;
    aaa8:	f890 3513 	ldrb.w	r3, [r0, #1299]	; 0x513
    aaac:	2b00      	cmp	r3, #0
}
    aaae:	bf0c      	ite	eq
    aab0:	2071      	moveq	r0, #113	; 0x71
    aab2:	f44f 707c 	movne.w	r0, #1008	; 0x3f0
    aab6:	bd08      	pop	{r3, pc}

0000aab8 <nmgr_uwb_mtu_0>:
    return nmgr_uwb_mtu(m, 0);
    aab8:	2100      	movs	r1, #0
    aaba:	f7ff bff1 	b.w	aaa0 <nmgr_uwb_mtu>

0000aabe <nmgr_uwb_init>:
{
    aabe:	b538      	push	{r3, r4, r5, lr}
    assert(dev != NULL);
    aac0:	4605      	mov	r5, r0
    aac2:	b920      	cbnz	r0, aace <nmgr_uwb_init+0x10>
    aac4:	4603      	mov	r3, r0
    aac6:	4602      	mov	r2, r0
    aac8:	4601      	mov	r1, r0
    aaca:	f7fe fa13 	bl	8ef4 <__assert_func>
    nmgr_uwb_instance_t *nmgruwb = (nmgr_uwb_instance_t*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_NMGR_UWB);
    aace:	2113      	movs	r1, #19
    aad0:	f7fe f82e 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    if(nmgruwb == NULL){
    aad4:	4604      	mov	r4, r0
    aad6:	b948      	cbnz	r0, aaec <nmgr_uwb_init+0x2e>
        nmgruwb = (nmgr_uwb_instance_t*)malloc(sizeof(nmgr_uwb_instance_t));
    aad8:	2028      	movs	r0, #40	; 0x28
    aada:	f004 fcfd 	bl	f4d8 <malloc>
    aade:	4604      	mov	r4, r0
        memset(nmgruwb,0,sizeof(nmgr_uwb_instance_t));
    aae0:	2224      	movs	r2, #36	; 0x24
    aae2:	2100      	movs	r1, #0
    aae4:	3004      	adds	r0, #4
    aae6:	f004 fd8a 	bl	f5fe <memset>
        nmgruwb->dev_inst = dev;
    aaea:	6025      	str	r5, [r4, #0]
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    aaec:	2101      	movs	r1, #1
    aaee:	f104 0008 	add.w	r0, r4, #8
    aaf2:	f7ff f897 	bl	9c24 <os_sem_init>
    os_mqueue_init(&nmgruwb->tx_q, NULL, NULL);
    aaf6:	2200      	movs	r2, #0
    aaf8:	4611      	mov	r1, r2
    aafa:	f104 0010 	add.w	r0, r4, #16
    aafe:	f7ff fbf8 	bl	a2f2 <os_mqueue_init>
}
    ab02:	4620      	mov	r0, r4
    ab04:	bd38      	pop	{r3, r4, r5, pc}
	...

0000ab08 <nmgr_uwb_pkg_init>:
{
    ab08:	b510      	push	{r4, lr}
    SYSINIT_ASSERT_ACTIVE();
    ab0a:	4b10      	ldr	r3, [pc, #64]	; (ab4c <nmgr_uwb_pkg_init+0x44>)
    ab0c:	781b      	ldrb	r3, [r3, #0]
    ab0e:	b923      	cbnz	r3, ab1a <nmgr_uwb_pkg_init+0x12>
    ab10:	461a      	mov	r2, r3
    ab12:	4619      	mov	r1, r3
    ab14:	4618      	mov	r0, r3
    ab16:	f7fe f9ed 	bl	8ef4 <__assert_func>
    printf("{\"utime\": %lu,\"msg\": \"nmgr_uwb_init\"}\n", os_cputime_ticks_to_usecs(os_cputime_get32()));
    ab1a:	f7fe fc22 	bl	9362 <os_cputime_get32>
    ab1e:	4601      	mov	r1, r0
    ab20:	480b      	ldr	r0, [pc, #44]	; (ab50 <nmgr_uwb_pkg_init+0x48>)
    ab22:	f005 f85b 	bl	fbdc <printf>
    udev = uwb_dev_idx_lookup(0);
    ab26:	2000      	movs	r0, #0
    ab28:	f7fd ff8e 	bl	8a48 <uwb_dev_idx_lookup>
    nmgr_transport_init(uwb_transport(0), nmgr_resp_cb, nmgr_uwb_mtu_0);
    ab2c:	4909      	ldr	r1, [pc, #36]	; (ab54 <nmgr_uwb_pkg_init+0x4c>)
    ab2e:	4a0a      	ldr	r2, [pc, #40]	; (ab58 <nmgr_uwb_pkg_init+0x50>)
    udev = uwb_dev_idx_lookup(0);
    ab30:	4604      	mov	r4, r0
    nmgr_transport_init(uwb_transport(0), nmgr_resp_cb, nmgr_uwb_mtu_0);
    ab32:	480a      	ldr	r0, [pc, #40]	; (ab5c <nmgr_uwb_pkg_init+0x54>)
    ab34:	f006 f8e0 	bl	10cf8 <nmgr_transport_init>
    g_cbs[0].inst_ptr = nmgr_uwb_init(udev);
    ab38:	4620      	mov	r0, r4
    ab3a:	f7ff ffc0 	bl	aabe <nmgr_uwb_init>
    ab3e:	4908      	ldr	r1, [pc, #32]	; (ab60 <nmgr_uwb_pkg_init+0x58>)
    ab40:	6048      	str	r0, [r1, #4]
    uwb_mac_append_interface(udev, &g_cbs[0]);
    ab42:	4620      	mov	r0, r4
}
    ab44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    uwb_mac_append_interface(udev, &g_cbs[0]);
    ab48:	f7fd bfa8 	b.w	8a9c <uwb_mac_append_interface>
    ab4c:	20004ba8 	.word	0x20004ba8
    ab50:	00021c91 	.word	0x00021c91
    ab54:	0000ad35 	.word	0x0000ad35
    ab58:	0000aab9 	.word	0x0000aab9
    ab5c:	20003434 	.word	0x20003434
    ab60:	20000568 	.word	0x20000568

0000ab64 <nmgr_uwb_tx>:


int
nmgr_uwb_tx(struct _nmgr_uwb_instance_t *nmgruwb, uint16_t dst_addr, uint16_t code,
            struct os_mbuf *m, uint64_t dx_time)
{
    ab64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct uwb_dev* inst = nmgruwb->dev_inst;
    ab68:	4606      	mov	r6, r0
{
    ab6a:	b08d      	sub	sp, #52	; 0x34
    struct uwb_dev* inst = nmgruwb->dev_inst;
    ab6c:	f856 5b08 	ldr.w	r5, [r6], #8
{
    ab70:	4607      	mov	r7, r0
    ab72:	460c      	mov	r4, r1
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    ab74:	4630      	mov	r0, r6
    ab76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ab7a:	4691      	mov	r9, r2
    ab7c:	e9dd ba16 	ldrd	fp, sl, [sp, #88]	; 0x58
    ab80:	4698      	mov	r8, r3
    ab82:	f7ff f889 	bl	9c98 <os_sem_pend>
    int mbuf_offset = 0;
    int device_offset;
    dpl_sem_pend(&nmgruwb->sem, DPL_TIMEOUT_NEVER);

    /* Prepare header and write to device */
    uwb_hdr.fctrl = NMGR_UWB_FCTRL;
    ab86:	f648 0341 	movw	r3, #34881	; 0x8841
    ab8a:	f8ad 3000 	strh.w	r3, [sp]
    uwb_hdr.src_address = inst->uid;
    ab8e:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
    ab92:	f8ad 3007 	strh.w	r3, [sp, #7]
    uwb_hdr.code = code;
    uwb_hdr.dst_address = dst_addr;
    uwb_hdr.seq_num = nmgruwb->frame_seq_num++;
    ab96:	793b      	ldrb	r3, [r7, #4]
    ab98:	f88d 3002 	strb.w	r3, [sp, #2]
    ab9c:	1c5a      	adds	r2, r3, #1
    ab9e:	713a      	strb	r2, [r7, #4]
    uwb_hdr.PANID = inst->pan_id;
    aba0:	f8b5 34c0 	ldrh.w	r3, [r5, #1216]	; 0x4c0
    aba4:	f8ad 3003 	strh.w	r3, [sp, #3]
    uwb_hdr.rpt_count = 0;
    aba8:	2300      	movs	r3, #0
    abaa:	f88d 300b 	strb.w	r3, [sp, #11]
#if MYNEWT_VAL(UWB_CCP_ENABLED)
    uwb_hdr.rpt_max = MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    abae:	2304      	movs	r3, #4
    abb0:	f88d 300c 	strb.w	r3, [sp, #12]
#else
    uwb_hdr.rpt_max = 0;
#endif

    /* If fx_time provided, delay until then with tx */
    if (dx_time) {
    abb4:	ea5b 030a 	orrs.w	r3, fp, sl
    uwb_hdr.code = code;
    abb8:	f8ad 9009 	strh.w	r9, [sp, #9]
    uwb_hdr.dst_address = dst_addr;
    abbc:	f8ad 4005 	strh.w	r4, [sp, #5]
    if (dx_time) {
    abc0:	d005      	beq.n	abce <nmgr_uwb_tx+0x6a>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    abc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    abc4:	465a      	mov	r2, fp
    abc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    abc8:	4628      	mov	r0, r5
    abca:	4653      	mov	r3, sl
    abcc:	4788      	blx	r1
        uwb_set_delay_start(inst, dx_time);
    }

    uwb_write_tx(inst, (uint8_t*)&uwb_hdr, 0, sizeof(nmgr_uwb_frame_header_t));
    abce:	230d      	movs	r3, #13
    abd0:	2200      	movs	r2, #0
    abd2:	4669      	mov	r1, sp
    abd4:	4628      	mov	r0, r5
    abd6:	f7ff fea9 	bl	a92c <uwb_write_tx.isra.0>
    device_offset = sizeof(nmgr_uwb_frame_header_t);
    abda:	f04f 0a0d 	mov.w	sl, #13
    int mbuf_offset = 0;
    abde:	f04f 0900 	mov.w	r9, #0

    /* Copy the mbuf payload data to the device to be sent */
    while (mbuf_offset < OS_MBUF_PKTLEN(m)) {
    abe2:	f8b8 4010 	ldrh.w	r4, [r8, #16]
    return (dev->uw_funcs->uf_hal_noblock_wait(dev, timeout));
    abe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    abe8:	454c      	cmp	r4, r9
    abea:	dc24      	bgt.n	ac36 <nmgr_uwb_tx+0xd2>
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    abec:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
        uwb_write_tx(inst, buf, device_offset, cpy_len);
        mbuf_offset += cpy_len;
        device_offset += cpy_len;
    }

    uwb_write_tx_fctrl(inst, sizeof(nmgr_uwb_frame_header_t) + OS_MBUF_PKTLEN(m), 0);
    abf0:	340d      	adds	r4, #13
    abf2:	2300      	movs	r3, #0
    abf4:	461a      	mov	r2, r3
    abf6:	b2a1      	uxth	r1, r4
    abf8:	4628      	mov	r0, r5
    abfa:	47c8      	blx	r9
    return (dev->uw_funcs->uf_start_tx(dev));
    abfc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    abfe:	4628      	mov	r0, r5
    ac00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ac02:	4798      	blx	r3

    if(uwb_start_tx(inst).start_tx_error){
    ac04:	0743      	lsls	r3, r0, #29
    ac06:	d505      	bpl.n	ac14 <nmgr_uwb_tx+0xb0>
    return (dpl_error_t)os_sem_release(&sem->sem);
    ac08:	4630      	mov	r0, r6
    ac0a:	f7ff f813 	bl	9c34 <os_sem_release>
        dpl_sem_release(&nmgruwb->sem);
        printf("UWB NMGR_tx: Tx Error \n");
    ac0e:	4817      	ldr	r0, [pc, #92]	; (ac6c <nmgr_uwb_tx+0x108>)
    ac10:	f004 fbec 	bl	f3ec <puts>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    ac14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ac18:	4630      	mov	r0, r6
    ac1a:	f7ff f83d 	bl	9c98 <os_sem_pend>
    }

    dpl_sem_pend(&nmgruwb->sem, DPL_TIMEOUT_NEVER);
    if(dpl_sem_get_count(&nmgruwb->sem) == 0) {
    ac1e:	89fb      	ldrh	r3, [r7, #14]
    ac20:	b913      	cbnz	r3, ac28 <nmgr_uwb_tx+0xc4>
    return (dpl_error_t)os_sem_release(&sem->sem);
    ac22:	4630      	mov	r0, r6
    ac24:	f7ff f806 	bl	9c34 <os_sem_release>
        dpl_sem_release(&nmgruwb->sem);
    }

    os_mbuf_free_chain(m);
    ac28:	4640      	mov	r0, r8
    ac2a:	f7ff fbd6 	bl	a3da <os_mbuf_free_chain>
    return 0;
}
    ac2e:	2000      	movs	r0, #0
    ac30:	b00d      	add	sp, #52	; 0x34
    ac32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int cpy_len = OS_MBUF_PKTLEN(m) - mbuf_offset;
    ac36:	eba4 0409 	sub.w	r4, r4, r9
        cpy_len = (cpy_len > sizeof(buf)) ? sizeof(buf) : cpy_len;
    ac3a:	2c20      	cmp	r4, #32
    ac3c:	bf28      	it	cs
    ac3e:	2420      	movcs	r4, #32
    return (dev->uw_funcs->uf_hal_noblock_wait(dev, timeout));
    ac40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ac42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ac46:	4628      	mov	r0, r5
    ac48:	4798      	blx	r3
        os_mbuf_copydata(m, mbuf_offset, cpy_len, buf);
    ac4a:	4649      	mov	r1, r9
    ac4c:	ab04      	add	r3, sp, #16
    ac4e:	4622      	mov	r2, r4
    ac50:	4640      	mov	r0, r8
    ac52:	f7ff fc2a 	bl	a4aa <os_mbuf_copydata>
        uwb_write_tx(inst, buf, device_offset, cpy_len);
    ac56:	fa1f f28a 	uxth.w	r2, sl
    ac5a:	b2a3      	uxth	r3, r4
    ac5c:	a904      	add	r1, sp, #16
    ac5e:	4628      	mov	r0, r5
    ac60:	f7ff fe64 	bl	a92c <uwb_write_tx.isra.0>
        mbuf_offset += cpy_len;
    ac64:	44a1      	add	r9, r4
        device_offset += cpy_len;
    ac66:	44a2      	add	sl, r4
    ac68:	e7bb      	b.n	abe2 <nmgr_uwb_tx+0x7e>
    ac6a:	bf00      	nop
    ac6c:	00021cb8 	.word	0x00021cb8

0000ac70 <uwb_nmgr_process_tx_queue>:

int
uwb_nmgr_process_tx_queue(struct _nmgr_uwb_instance_t *nmgruwb, uint64_t dx_time)
{
    ac70:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac72:	b085      	sub	sp, #20
    ac74:	4605      	mov	r5, r0
    ac76:	461e      	mov	r6, r3
    int rc;
    uint16_t dst_addr = 0;
    uint16_t code = 0;
    struct os_mbuf *om;

    if ((om = os_mqueue_get(&nmgruwb->tx_q)) != NULL) {
    ac78:	3010      	adds	r0, #16
    uint16_t dst_addr = 0;
    ac7a:	2300      	movs	r3, #0
{
    ac7c:	4617      	mov	r7, r2
    uint16_t dst_addr = 0;
    ac7e:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t code = 0;
    ac82:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((om = os_mqueue_get(&nmgruwb->tx_q)) != NULL) {
    ac86:	f7ff fb44 	bl	a312 <os_mqueue_get>
    ac8a:	4604      	mov	r4, r0
    ac8c:	b330      	cbz	r0, acdc <uwb_nmgr_process_tx_queue+0x6c>
        /* Extract dest address and code */
        rc = os_mbuf_copydata(om, OS_MBUF_PKTLEN(om)-4, sizeof(dst_addr), &dst_addr);
    ac8e:	8a01      	ldrh	r1, [r0, #16]
    ac90:	ab03      	add	r3, sp, #12
    ac92:	2202      	movs	r2, #2
    ac94:	3904      	subs	r1, #4
    ac96:	f7ff fc08 	bl	a4aa <os_mbuf_copydata>
        assert(rc==0);
    ac9a:	b128      	cbz	r0, aca8 <uwb_nmgr_process_tx_queue+0x38>
    ac9c:	2300      	movs	r3, #0
    ac9e:	461a      	mov	r2, r3
    aca0:	4619      	mov	r1, r3
    aca2:	4618      	mov	r0, r3
    aca4:	f7fe f926 	bl	8ef4 <__assert_func>
        rc = os_mbuf_copydata(om, OS_MBUF_PKTLEN(om)-2, sizeof(code), &code);
    aca8:	8a21      	ldrh	r1, [r4, #16]
    acaa:	f10d 030e 	add.w	r3, sp, #14
    acae:	2202      	movs	r2, #2
    acb0:	3902      	subs	r1, #2
    acb2:	4620      	mov	r0, r4
    acb4:	f7ff fbf9 	bl	a4aa <os_mbuf_copydata>
        assert(rc==0);
    acb8:	2800      	cmp	r0, #0
    acba:	d1ef      	bne.n	ac9c <uwb_nmgr_process_tx_queue+0x2c>
        os_mbuf_adj(om, -4);
    acbc:	f06f 0103 	mvn.w	r1, #3
    acc0:	4620      	mov	r0, r4
    acc2:	f7ff fc18 	bl	a4f6 <os_mbuf_adj>
        /* nmgr_uwb_tx consumes the mbuf */
        nmgr_uwb_tx(nmgruwb, dst_addr, code, om, dx_time);
    acc6:	e9cd 7600 	strd	r7, r6, [sp]
    acca:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    acce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    acd2:	4623      	mov	r3, r4
    acd4:	4628      	mov	r0, r5
    acd6:	f7ff ff45 	bl	ab64 <nmgr_uwb_tx>
        return true;
    acda:	2001      	movs	r0, #1
    }
    return false;
}
    acdc:	b005      	add	sp, #20
    acde:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ace0 <uwb_nmgr_queue_tx>:

int
uwb_nmgr_queue_tx(struct _nmgr_uwb_instance_t *nmgruwb, uint16_t dst_addr, uint16_t code, struct os_mbuf *om)
{
    ace0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ace2:	4605      	mov	r5, r0
    ace4:	460f      	mov	r7, r1
#if MYNEWT_VAL(NMGR_UWB_LOOPBACK)
    nmgr_rx_req(&uwb_transport_0, om);
#else
    int rc;
    if (code==0) {
         code = UWB_DATA_CODE_NMGR_REQUEST;
    ace6:	f240 4621 	movw	r6, #1057	; 0x421
    }

    /* Append the code and address to the end of the mbuf */
    uint16_t *p = os_mbuf_extend(om, sizeof(uint16_t)*2);
    acea:	2104      	movs	r1, #4
    acec:	4618      	mov	r0, r3
{
    acee:	461c      	mov	r4, r3
         code = UWB_DATA_CODE_NMGR_REQUEST;
    acf0:	2a00      	cmp	r2, #0
    acf2:	bf18      	it	ne
    acf4:	4616      	movne	r6, r2
    uint16_t *p = os_mbuf_extend(om, sizeof(uint16_t)*2);
    acf6:	f7ff fcb7 	bl	a668 <os_mbuf_extend>
    if (!p) {
    acfa:	b938      	cbnz	r0, ad0c <uwb_nmgr_queue_tx+0x2c>
        printf("##### ERROR uwb_nmgr_q ext_failed\n");
    acfc:	480b      	ldr	r0, [pc, #44]	; (ad2c <uwb_nmgr_queue_tx+0x4c>)
    acfe:	f004 fb75 	bl	f3ec <puts>

    /* Enqueue the packet for sending at the next slot */
    rc = os_mqueue_put(&nmgruwb->tx_q, NULL, om);
    if (rc != 0) {
        printf("##### ERROR uwb_nmgr_q rc:%d\n", rc);
        rc = os_mbuf_free_chain(om);
    ad02:	4620      	mov	r0, r4
    ad04:	f7ff fb69 	bl	a3da <os_mbuf_free_chain>
        return OS_EINVAL;
    ad08:	2002      	movs	r0, #2
    }
#endif
    return 0;
}
    ad0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p[0] = dst_addr;
    ad0c:	8007      	strh	r7, [r0, #0]
    p[1] = code;
    ad0e:	8046      	strh	r6, [r0, #2]
    rc = os_mqueue_put(&nmgruwb->tx_q, NULL, om);
    ad10:	4622      	mov	r2, r4
    ad12:	2100      	movs	r1, #0
    ad14:	f105 0010 	add.w	r0, r5, #16
    ad18:	f7ff fb0b 	bl	a332 <os_mqueue_put>
    if (rc != 0) {
    ad1c:	2800      	cmp	r0, #0
    ad1e:	d0f4      	beq.n	ad0a <uwb_nmgr_queue_tx+0x2a>
        printf("##### ERROR uwb_nmgr_q rc:%d\n", rc);
    ad20:	4601      	mov	r1, r0
    ad22:	4803      	ldr	r0, [pc, #12]	; (ad30 <uwb_nmgr_queue_tx+0x50>)
    ad24:	f004 ff5a 	bl	fbdc <printf>
    ad28:	e7eb      	b.n	ad02 <uwb_nmgr_queue_tx+0x22>
    ad2a:	bf00      	nop
    ad2c:	00021ccf 	.word	0x00021ccf
    ad30:	00021cf1 	.word	0x00021cf1

0000ad34 <nmgr_resp_cb>:
{
    ad34:	b538      	push	{r3, r4, r5, lr}
    if (OS_MBUF_USRHDR_LEN(m) != sizeof(struct nmgr_uwb_usr_hdr)) {
    ad36:	794b      	ldrb	r3, [r1, #5]
    ad38:	2b19      	cmp	r3, #25
{
    ad3a:	460c      	mov	r4, r1
    if (OS_MBUF_USRHDR_LEN(m) != sizeof(struct nmgr_uwb_usr_hdr)) {
    ad3c:	d004      	beq.n	ad48 <nmgr_resp_cb+0x14>
}
    ad3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        rc = os_mbuf_free_chain(m);
    ad42:	4608      	mov	r0, r1
    ad44:	f7ff bb49 	b.w	a3da <os_mbuf_free_chain>
    struct _nmgr_uwb_instance_t *nmgruwb = hdr->nmgruwb_inst;
    ad48:	698d      	ldr	r5, [r1, #24]
    assert(nmgruwb);
    ad4a:	b92d      	cbnz	r5, ad58 <nmgr_resp_cb+0x24>
    ad4c:	2300      	movs	r3, #0
    ad4e:	461a      	mov	r2, r3
    ad50:	4619      	mov	r1, r3
    ad52:	4618      	mov	r0, r3
    ad54:	f7fe f8ce 	bl	8ef4 <__assert_func>
    if (hdr->uwb_hdr.dst_address == UWB_BROADCAST_ADDRESS) {
    ad58:	f8b1 2021 	ldrh.w	r2, [r1, #33]	; 0x21
    ad5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ad60:	429a      	cmp	r2, r3
    ad62:	d104      	bne.n	ad6e <nmgr_resp_cb+0x3a>
        rc = os_mbuf_free_chain(m);
    ad64:	4620      	mov	r0, r4
    ad66:	f7ff fb38 	bl	a3da <os_mbuf_free_chain>
        assert(rc==0);
    ad6a:	b150      	cbz	r0, ad82 <nmgr_resp_cb+0x4e>
    ad6c:	e7ee      	b.n	ad4c <nmgr_resp_cb+0x18>
    if (uwb_nmgr_queue_tx(nmgruwb, frame->src_address,
    ad6e:	460b      	mov	r3, r1
    ad70:	f240 4222 	movw	r2, #1058	; 0x422
    ad74:	f8b1 1023 	ldrh.w	r1, [r1, #35]	; 0x23
    ad78:	4628      	mov	r0, r5
    ad7a:	f7ff ffb1 	bl	ace0 <uwb_nmgr_queue_tx>
    ad7e:	2800      	cmp	r0, #0
    ad80:	d1f0      	bne.n	ad64 <nmgr_resp_cb+0x30>
    if(dpl_sem_get_count(&nmgruwb->sem) == 0){
    ad82:	89eb      	ldrh	r3, [r5, #14]
    ad84:	b92b      	cbnz	r3, ad92 <nmgr_resp_cb+0x5e>
    ad86:	f105 0008 	add.w	r0, r5, #8
    ad8a:	f7fe ff53 	bl	9c34 <os_sem_release>
        assert(rc==0);
    ad8e:	2800      	cmp	r0, #0
    ad90:	d1dc      	bne.n	ad4c <nmgr_resp_cb+0x18>
}
    ad92:	2000      	movs	r0, #0
    ad94:	bd38      	pop	{r3, r4, r5, pc}

0000ad96 <complete_ev_cb.part.0>:
 * @param ev    Pointer to os_event.
 *
 * @return true on sucess
 */
static void
complete_ev_cb(struct dpl_event *ev) {
    ad96:	b508      	push	{r3, lr}
    assert(ev != NULL);
    assert(dpl_event_get_arg(ev));
    ad98:	2300      	movs	r3, #0
    ad9a:	461a      	mov	r2, r3
    ad9c:	4619      	mov	r1, r3
    ad9e:	4618      	mov	r0, r3
    ada0:	f7fe f8a8 	bl	8ef4 <__assert_func>

0000ada4 <complete_ev_cb>:
complete_ev_cb(struct dpl_event *ev) {
    ada4:	b510      	push	{r4, lr}
    assert(ev != NULL);
    ada6:	4603      	mov	r3, r0
    ada8:	b918      	cbnz	r0, adb2 <complete_ev_cb+0xe>
    adaa:	4602      	mov	r2, r0
    adac:	4601      	mov	r1, r0
    adae:	f7fe f8a1 	bl	8ef4 <__assert_func>
    return ev->ev.ev_arg;
    adb2:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev));
    adb4:	b90c      	cbnz	r4, adba <complete_ev_cb+0x16>
    adb6:	f7ff ffee 	bl	ad96 <complete_ev_cb.part.0>

    struct nrng_instance * nrng = (struct nrng_instance *) dpl_event_get_arg(ev);
    nrng_encode(nrng, nrng->seq_num, nrng->idx);
    adba:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
    adbe:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    adc2:	4620      	mov	r0, r4
    adc4:	f000 fb8f 	bl	b4e6 <nrng_encode>
    nrng->slot_mask = 0;
    adc8:	2300      	movs	r3, #0
    adca:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
}
    adce:	bd10      	pop	{r4, pc}

0000add0 <complete_cb>:
 * @return true on sucess
 */
static bool
complete_cb(struct uwb_dev * udev, struct uwb_mac_interface * cbs)
{
    if (udev->fctrl != FCNTL_IEEE_RANGE_16)
    add0:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
{
    add4:	b538      	push	{r3, r4, r5, lr}
    if (udev->fctrl != FCNTL_IEEE_RANGE_16)
    add6:	f648 0341 	movw	r3, #34881	; 0x8841
    adda:	429a      	cmp	r2, r3
    addc:	d110      	bne.n	ae00 <complete_cb+0x30>
    adde:	684d      	ldr	r5, [r1, #4]
        return false;
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
    if(dpl_sem_get_count(&nrng->sem) == 0){
    ade0:	f8b5 106a 	ldrh.w	r1, [r5, #106]	; 0x6a
    ade4:	b961      	cbnz	r1, ae00 <complete_cb+0x30>
    memset(ev, 0, sizeof(*ev));
    ade6:	4c07      	ldr	r4, [pc, #28]	; (ae04 <complete_cb+0x34>)
    ade8:	2210      	movs	r2, #16
    adea:	4620      	mov	r0, r4
    adec:	f004 fc07 	bl	f5fe <memset>
    ev->ev.ev_cb = (os_event_fn *)fn;
    adf0:	4b05      	ldr	r3, [pc, #20]	; (ae08 <complete_cb+0x38>)
    ev->ev.ev_arg = arg;
    adf2:	e9c4 3501 	strd	r3, r5, [r4, #4]
    return (struct dpl_eventq *) os_eventq_dflt_get();
    adf6:	f7fe fc11 	bl	961c <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    adfa:	4621      	mov	r1, r4
    adfc:	f7fe fb67 	bl	94ce <os_eventq_put>
        dpl_event_init(&nrng_event, complete_ev_cb, (void*) nrng);
        dpl_eventq_put(dpl_eventq_dflt_get(), &nrng_event);
    }
    return false;
}
    ae00:	2000      	movs	r0, #0
    ae02:	bd38      	pop	{r3, r4, r5, pc}
    ae04:	20003454 	.word	0x20003454
    ae08:	0000ada5 	.word	0x0000ada5

0000ae0c <nrng_set_frames>:
{
    ae0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    assert(nframes <= nrng->nframes);
    ae10:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    ae14:	428b      	cmp	r3, r1
{
    ae16:	b08f      	sub	sp, #60	; 0x3c
    ae18:	4604      	mov	r4, r0
    ae1a:	460e      	mov	r6, r1
    assert(nframes <= nrng->nframes);
    ae1c:	d201      	bcs.n	ae22 <nrng_set_frames+0x16>
    ae1e:	f7ff ffba 	bl	ad96 <complete_ev_cb.part.0>
    nrng_frame_t default_frame = {
    ae22:	2234      	movs	r2, #52	; 0x34
    ae24:	2100      	movs	r1, #0
    ae26:	a801      	add	r0, sp, #4
    ae28:	f004 fbe9 	bl	f5fe <memset>
    for (uint16_t i = 0; i < nframes; i++){
    ae2c:	f104 07c8 	add.w	r7, r4, #200	; 0xc8
    ae30:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    ae34:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
        memcpy(nrng->frames[i], &default_frame, sizeof(nrng_frame_t));
    ae38:	f648 0841 	movw	r8, #34881	; 0x8841
    ae3c:	f64d 69ca 	movw	r9, #57034	; 0xdeca
    for (uint16_t i = 0; i < nframes; i++){
    ae40:	42b7      	cmp	r7, r6
    ae42:	d102      	bne.n	ae4a <nrng_set_frames+0x3e>
}
    ae44:	b00f      	add	sp, #60	; 0x3c
    ae46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrng->frames[i] = (nrng_frame_t * ) malloc(sizeof(nrng_frame_t));
    ae4a:	2034      	movs	r0, #52	; 0x34
    ae4c:	f004 fb44 	bl	f4d8 <malloc>
    ae50:	f847 0b04 	str.w	r0, [r7], #4
    ae54:	4603      	mov	r3, r0
        assert(nrng->frames[i]);
    ae56:	b918      	cbnz	r0, ae60 <nrng_set_frames+0x54>
    ae58:	4602      	mov	r2, r0
    ae5a:	4601      	mov	r1, r0
    ae5c:	f7fe f84a 	bl	8ef4 <__assert_func>
        memcpy(nrng->frames[i], &default_frame, sizeof(nrng_frame_t));
    ae60:	f44f 72a5 	mov.w	r2, #330	; 0x14a
    ae64:	f8ad 8004 	strh.w	r8, [sp, #4]
    ae68:	f8ad 9007 	strh.w	r9, [sp, #7]
    ae6c:	f8ad 200d 	strh.w	r2, [sp, #13]
    ae70:	ad01      	add	r5, sp, #4
    ae72:	4604      	mov	r4, r0
    ae74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ae76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ae78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ae7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ae7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ae7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ae80:	682b      	ldr	r3, [r5, #0]
    ae82:	6023      	str	r3, [r4, #0]
    for (uint16_t i = 0; i < nframes; i++){
    ae84:	e7dc      	b.n	ae40 <nrng_set_frames+0x34>
	...

0000ae88 <nrng_get_config>:
    if(!(SLIST_EMPTY(&nrng->rng_configs))){
    ae88:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    ae8c:	b133      	cbz	r3, ae9c <nrng_get_config+0x14>
            if (cfgs != NULL && cfgs->rng_code == code) {
    ae8e:	881a      	ldrh	r2, [r3, #0]
    ae90:	428a      	cmp	r2, r1
    ae92:	d101      	bne.n	ae98 <nrng_get_config+0x10>
                return cfgs->config;
    ae94:	6898      	ldr	r0, [r3, #8]
    ae96:	4770      	bx	lr
        SLIST_FOREACH(cfgs, &nrng->rng_configs, next){
    ae98:	68db      	ldr	r3, [r3, #12]
    ae9a:	e7f7      	b.n	ae8c <nrng_get_config+0x4>
    return &g_config;
    ae9c:	4800      	ldr	r0, [pc, #0]	; (aea0 <nrng_get_config+0x18>)
}
    ae9e:	4770      	bx	lr
    aea0:	200005a4 	.word	0x200005a4

0000aea4 <nrng_append_config>:
{
    aea4:	b508      	push	{r3, lr}
    assert(nrng);
    aea6:	4603      	mov	r3, r0
    aea8:	b918      	cbnz	r0, aeb2 <nrng_append_config+0xe>
    aeaa:	4602      	mov	r2, r0
    aeac:	4601      	mov	r1, r0
    aeae:	f7fe f821 	bl	8ef4 <__assert_func>
    if(!(SLIST_EMPTY(&nrng->rng_configs))) {
    aeb2:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    aeb6:	b132      	cbz	r2, aec6 <nrng_append_config+0x22>
        SLIST_FOREACH(cur_cfgs, &nrng->rng_configs, next){
    aeb8:	4613      	mov	r3, r2
    aeba:	68d2      	ldr	r2, [r2, #12]
    aebc:	2a00      	cmp	r2, #0
    aebe:	d1fb      	bne.n	aeb8 <nrng_append_config+0x14>
        SLIST_INSERT_AFTER(prev_cfgs, cfgs, next);
    aec0:	60ca      	str	r2, [r1, #12]
    aec2:	60d9      	str	r1, [r3, #12]
}
    aec4:	bd08      	pop	{r3, pc}
        SLIST_INSERT_HEAD(&nrng->rng_configs, cfgs, next);
    aec6:	60ca      	str	r2, [r1, #12]
    aec8:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
}
    aecc:	e7fa      	b.n	aec4 <nrng_append_config+0x20>

0000aece <nrng_config>:
{
    aece:	b510      	push	{r4, lr}
    assert(config);
    aed0:	b909      	cbnz	r1, aed6 <nrng_config+0x8>
    aed2:	f7ff ff60 	bl	ad96 <complete_ev_cb.part.0>
    memcpy(&nrng->config, config, sizeof(struct uwb_rng_config));
    aed6:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
    aeda:	f101 0210 	add.w	r2, r1, #16
    aede:	f851 4b04 	ldr.w	r4, [r1], #4
    aee2:	f843 4b04 	str.w	r4, [r3], #4
    aee6:	4291      	cmp	r1, r2
    aee8:	d1f9      	bne.n	aede <nrng_config+0x10>
    return nrng->dev_inst->status;
    aeea:	6803      	ldr	r3, [r0, #0]
}
    aeec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    aef0:	bd10      	pop	{r4, pc}
	...

0000aef4 <nrng_init>:
{
    aef4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    aef8:	460e      	mov	r6, r1
    aefa:	4690      	mov	r8, r2
    aefc:	461f      	mov	r7, r3
    assert(inst);
    aefe:	4605      	mov	r5, r0
    af00:	b928      	cbnz	r0, af0e <nrng_init+0x1a>
    af02:	2300      	movs	r3, #0
    af04:	461a      	mov	r2, r3
    af06:	4619      	mov	r1, r3
    af08:	4618      	mov	r0, r3
    af0a:	f7fd fff3 	bl	8ef4 <__assert_func>
    struct nrng_instance *nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_NRNG);
    af0e:	210b      	movs	r1, #11
    af10:	f7fd fe0e 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    if (nrng == NULL) {
    af14:	4604      	mov	r4, r0
    af16:	b988      	cbnz	r0, af3c <nrng_init+0x48>
        nrng = (struct nrng_instance*) malloc(sizeof(struct nrng_instance) + nframes * sizeof(nrng_frame_t * ));
    af18:	f107 0032 	add.w	r0, r7, #50	; 0x32
    af1c:	0080      	lsls	r0, r0, #2
    af1e:	f004 fadb 	bl	f4d8 <malloc>
        assert(nrng);
    af22:	4604      	mov	r4, r0
    af24:	2800      	cmp	r0, #0
    af26:	d0ec      	beq.n	af02 <nrng_init+0xe>
        memset(nrng, 0, sizeof(struct nrng_instance));
    af28:	22c8      	movs	r2, #200	; 0xc8
    af2a:	2100      	movs	r1, #0
    af2c:	f004 fb67 	bl	f5fe <memset>
        nrng->status.selfmalloc = 1;
    af30:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
    af34:	f043 0301 	orr.w	r3, r3, #1
    af38:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    af3c:	2101      	movs	r1, #1
    af3e:	f104 0064 	add.w	r0, r4, #100	; 0x64
    af42:	f7fe fe6f 	bl	9c24 <os_sem_init>
    assert(err == DPL_OK);
    af46:	2800      	cmp	r0, #0
    af48:	d1db      	bne.n	af02 <nrng_init+0xe>
    nrng->nnodes = nnodes;
    af4a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    af4e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    nrng->idx = 0xFFFF;
    af52:	f64f 73ff 	movw	r3, #65535	; 0xffff
    nrng->dev_inst = inst;
    af56:	6025      	str	r5, [r4, #0]
    nrng->nframes = nframes;
    af58:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    nrng->device_type = type;
    af5c:	f884 80a8 	strb.w	r8, [r4, #168]	; 0xa8
    nrng->idx = 0xFFFF;
    af60:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
    nrng->resp_count = nrng->t1_final_flag = 0;
    af64:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
    af68:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
    nrng->seq_num = 0;
    af6c:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
    if (config != NULL ){
    af70:	b11e      	cbz	r6, af7a <nrng_init+0x86>
        nrng_config(nrng, config);
    af72:	4631      	mov	r1, r6
    af74:	4620      	mov	r0, r4
    af76:	f7ff ffaa 	bl	aece <nrng_config>
    nrng->cbs = (struct uwb_mac_interface){
    af7a:	f104 036c 	add.w	r3, r4, #108	; 0x6c
    af7e:	4618      	mov	r0, r3
    af80:	223c      	movs	r2, #60	; 0x3c
    af82:	2100      	movs	r1, #0
    af84:	f004 fb3b 	bl	f5fe <memset>
    af88:	260b      	movs	r6, #11
    af8a:	4a0f      	ldr	r2, [pc, #60]	; (afc8 <nrng_init+0xd4>)
    af8c:	f8a4 606e 	strh.w	r6, [r4, #110]	; 0x6e
    uwb_mac_append_interface(inst, &nrng->cbs);
    af90:	4601      	mov	r1, r0
    nrng->cbs = (struct uwb_mac_interface){
    af92:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
    uwb_mac_append_interface(inst, &nrng->cbs);
    af96:	4628      	mov	r0, r5
    nrng->cbs = (struct uwb_mac_interface){
    af98:	6724      	str	r4, [r4, #112]	; 0x70
    int rc = stats_init(
    af9a:	1d25      	adds	r5, r4, #4
    uwb_mac_append_interface(inst, &nrng->cbs);
    af9c:	f7fd fd7e 	bl	8a9c <uwb_mac_append_interface>
    int rc = stats_init(
    afa0:	4b0a      	ldr	r3, [pc, #40]	; (afcc <nrng_init+0xd8>)
    afa2:	9600      	str	r6, [sp, #0]
    afa4:	4632      	mov	r2, r6
    afa6:	2104      	movs	r1, #4
    afa8:	4628      	mov	r0, r5
    afaa:	f009 f9cb 	bl	14344 <stats_init>
        rc |= stats_register("nrng", STATS_HDR(nrng->stat));
    afae:	4629      	mov	r1, r5
    int rc = stats_init(
    afb0:	4606      	mov	r6, r0
        rc |= stats_register("nrng", STATS_HDR(nrng->stat));
    afb2:	4807      	ldr	r0, [pc, #28]	; (afd0 <nrng_init+0xdc>)
    afb4:	f009 fa46 	bl	14444 <stats_register>
    assert(rc == 0);
    afb8:	ea56 0300 	orrs.w	r3, r6, r0
    afbc:	d1a1      	bne.n	af02 <nrng_init+0xe>
}
    afbe:	4620      	mov	r0, r4
    afc0:	b002      	add	sp, #8
    afc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    afc6:	bf00      	nop
    afc8:	0000add1 	.word	0x0000add1
    afcc:	00021d93 	.word	0x00021d93
    afd0:	00023bf4 	.word	0x00023bf4

0000afd4 <nrng_pkg_init>:
{
    afd4:	b507      	push	{r0, r1, r2, lr}
    printf("{\"utime\": %lu,\"msg\": \"nrng_pkg_init\"}\n",os_cputime_ticks_to_usecs(os_cputime_get32()));
    afd6:	f7fe f9c4 	bl	9362 <os_cputime_get32>
    afda:	4601      	mov	r1, r0
    afdc:	4809      	ldr	r0, [pc, #36]	; (b004 <nrng_pkg_init+0x30>)
    afde:	f004 fdfd 	bl	fbdc <printf>
    udev = uwb_dev_idx_lookup(0);
    afe2:	2000      	movs	r0, #0
    afe4:	f7fd fd30 	bl	8a48 <uwb_dev_idx_lookup>
    nrng = nrng_init(udev, &g_config, (nrng_device_type_t) MYNEWT_VAL(NRNG_DEVICE_TYPE), MYNEWT_VAL(NRNG_NFRAMES), MYNEWT_VAL(NRNG_NNODES));
    afe8:	2310      	movs	r3, #16
    afea:	9300      	str	r3, [sp, #0]
    afec:	4906      	ldr	r1, [pc, #24]	; (b008 <nrng_pkg_init+0x34>)
    afee:	2320      	movs	r3, #32
    aff0:	2201      	movs	r2, #1
    aff2:	f7ff ff7f 	bl	aef4 <nrng_init>
    nrng_set_frames(nrng, MYNEWT_VAL(NRNG_NFRAMES));
    aff6:	2120      	movs	r1, #32
}
    aff8:	b003      	add	sp, #12
    affa:	f85d eb04 	ldr.w	lr, [sp], #4
    nrng_set_frames(nrng, MYNEWT_VAL(NRNG_NFRAMES));
    affe:	f7ff bf05 	b.w	ae0c <nrng_set_frames>
    b002:	bf00      	nop
    b004:	00021d0f 	.word	0x00021d0f
    b008:	200005a4 	.word	0x200005a4
    b00c:	00000000 	.word	0x00000000

0000b010 <usecs_to_response>:
usecs_to_response(struct uwb_dev * inst, uint16_t nslots, struct uwb_rng_config * config, uint32_t duration){
    b010:	b538      	push	{r3, r4, r5, lr}
    uint32_t ret = nslots * ( duration + (uint32_t) uwb_dwt_usecs_to_usecs(config->tx_guard_delay));
    b012:	6890      	ldr	r0, [r2, #8]
usecs_to_response(struct uwb_dev * inst, uint16_t nslots, struct uwb_rng_config * config, uint32_t duration){
    b014:	461d      	mov	r5, r3
    b016:	460c      	mov	r4, r1
    uint32_t ret = nslots * ( duration + (uint32_t) uwb_dwt_usecs_to_usecs(config->tx_guard_delay));
    b018:	f014 fed8 	bl	1fdcc <__aeabi_ui2d>
    b01c:	a304      	add	r3, pc, #16	; (adr r3, b030 <usecs_to_response+0x20>)
    b01e:	e9d3 2300 	ldrd	r2, r3, [r3]
    b022:	f014 ff4d 	bl	1fec0 <__aeabi_dmul>
    b026:	f015 fa23 	bl	20470 <__aeabi_d2uiz>
    b02a:	4428      	add	r0, r5
}
    b02c:	4360      	muls	r0, r4
    b02e:	bd38      	pop	{r3, r4, r5, pc}
    b030:	90690691 	.word	0x90690691
    b034:	3ff06906 	.word	0x3ff06906

0000b038 <nrng_request>:
{
    b038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct uwb_dev * inst = nrng->dev_inst;
    b03c:	6805      	ldr	r5, [r0, #0]
{
    b03e:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
    b042:	e9cd 2100 	strd	r2, r1, [sp]
    b046:	4604      	mov	r4, r0
    b048:	461f      	mov	r7, r3
    assert(inst);
    b04a:	b92d      	cbnz	r5, b058 <nrng_request+0x20>
    b04c:	2300      	movs	r3, #0
    b04e:	461a      	mov	r2, r3
    b050:	4619      	mov	r1, r3
    b052:	4618      	mov	r0, r3
    b054:	f7fd ff4e 	bl	8ef4 <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b058:	f100 0964 	add.w	r9, r0, #100	; 0x64
    b05c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b060:	4648      	mov	r0, r9
    b062:	f7fe fe19 	bl	9c98 <os_sem_pend>
    assert(err == DPL_OK);
    b066:	4683      	mov	fp, r0
    b068:	2800      	cmp	r0, #0
    b06a:	d1ef      	bne.n	b04c <nrng_request+0x14>
    NRNG_STATS_INC(nrng_request);
    b06c:	69a1      	ldr	r1, [r4, #24]
    b06e:	3101      	adds	r1, #1
    b070:	61a1      	str	r1, [r4, #24]
    struct uwb_rng_config * config = nrng_get_config(nrng, code);
    b072:	4620      	mov	r0, r4
    b074:	9900      	ldr	r1, [sp, #0]
    b076:	f7ff ff07 	bl	ae88 <nrng_get_config>
    b07a:	4680      	mov	r8, r0
    nrng->nnodes = NumberOfBits(slot_mask); // Number of nodes involved in request
    b07c:	4638      	mov	r0, r7
    b07e:	f004 f847 	bl	f110 <NumberOfBits>
    nrng->idx += nrng->nnodes;
    b082:	f8b4 60c0 	ldrh.w	r6, [r4, #192]	; 0xc0
    nrng_request_frame_t * frame = (nrng_request_frame_t *) nrng->frames[nrng->idx%nrng->nframes];
    b086:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
    frame->code = code;
    b08a:	9b00      	ldr	r3, [sp, #0]
    nrng->nnodes = NumberOfBits(slot_mask); // Number of nodes involved in request
    b08c:	b280      	uxth	r0, r0
    b08e:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
    nrng->idx += nrng->nnodes;
    b092:	4430      	add	r0, r6
    b094:	b286      	uxth	r6, r0
    b096:	f8a4 60c0 	strh.w	r6, [r4, #192]	; 0xc0
    nrng_request_frame_t * frame = (nrng_request_frame_t *) nrng->frames[nrng->idx%nrng->nframes];
    b09a:	fbb6 f0f1 	udiv	r0, r6, r1
    b09e:	fb01 6610 	mls	r6, r1, r0, r6
    b0a2:	b2b6      	uxth	r6, r6
    frame->seq_num = ++nrng->seq_num;
    b0a4:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    nrng_request_frame_t * frame = (nrng_request_frame_t *) nrng->frames[nrng->idx%nrng->nframes];
    b0a8:	3632      	adds	r6, #50	; 0x32
    frame->seq_num = ++nrng->seq_num;
    b0aa:	3001      	adds	r0, #1
    nrng_request_frame_t * frame = (nrng_request_frame_t *) nrng->frames[nrng->idx%nrng->nframes];
    b0ac:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
    frame->seq_num = ++nrng->seq_num;
    b0b0:	b2c0      	uxtb	r0, r0
    b0b2:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
    b0b6:	7088      	strb	r0, [r1, #2]
    frame->src_address = inst->uid;
    b0b8:	f8b5 04b6 	ldrh.w	r0, [r5, #1206]	; 0x4b6
    b0bc:	f8a1 0007 	strh.w	r0, [r1, #7]
    frame->ptype = PTYPE_CELL;
    b0c0:	7ac8      	ldrb	r0, [r1, #11]
    frame->code = code;
    b0c2:	f8a1 3009 	strh.w	r3, [r1, #9]
    frame->ptype = PTYPE_CELL;
    b0c6:	f36b 0001 	bfi	r0, fp, #0, #2
    frame->dst_address = dst_address;
    b0ca:	9b01      	ldr	r3, [sp, #4]
    b0cc:	f8a1 3005 	strh.w	r3, [r1, #5]
    frame->ptype = PTYPE_CELL;
    b0d0:	72c8      	strb	r0, [r1, #11]
    frame->cell_id = nrng->cell_id = cell_id;
    b0d2:	f8a4 a04c 	strh.w	sl, [r4, #76]	; 0x4c
    b0d6:	7c0b      	ldrb	r3, [r1, #16]
    b0d8:	f881 a00f 	strb.w	sl, [r1, #15]
    b0dc:	f3ca 2005 	ubfx	r0, sl, #8, #6
    b0e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    b0e4:	4303      	orrs	r3, r0
    b0e6:	740b      	strb	r3, [r1, #16]
    frame->slot_mask = nrng->slot_mask = slot_mask;
    b0e8:	f8a4 7048 	strh.w	r7, [r4, #72]	; 0x48
    b0ec:	7c0b      	ldrb	r3, [r1, #16]
    b0ee:	f007 0003 	and.w	r0, r7, #3
    b0f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b0f6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
    b0fa:	740b      	strb	r3, [r1, #16]
    b0fc:	f3c7 0387 	ubfx	r3, r7, #2, #8
    b100:	744b      	strb	r3, [r1, #17]
    b102:	7c8b      	ldrb	r3, [r1, #18]
    b104:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    b108:	ea43 2797 	orr.w	r7, r3, r7, lsr #10
    b10c:	748f      	strb	r7, [r1, #18]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    b10e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b110:	465a      	mov	r2, fp
    b112:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    b114:	4628      	mov	r0, r5
    b116:	2313      	movs	r3, #19
    b118:	47b0      	blx	r6
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    b11a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b11c:	465a      	mov	r2, fp
    b11e:	6c9e      	ldr	r6, [r3, #72]	; 0x48
    b120:	2113      	movs	r1, #19
    b122:	465b      	mov	r3, fp
    b124:	4628      	mov	r0, r5
    b126:	47b0      	blx	r6
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    b128:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b12a:	2101      	movs	r1, #1
    b12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    b12e:	4628      	mov	r0, r5
    b130:	4798      	blx	r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    b132:	6a6b      	ldr	r3, [r5, #36]	; 0x24
                        + usecs_to_response(inst,       // Remaining timeout
    b134:	f8b8 6004 	ldrh.w	r6, [r8, #4]
    b138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    b13a:	f8b4 7046 	ldrh.w	r7, [r4, #70]	; 0x46
    b13e:	2114      	movs	r1, #20
    b140:	4628      	mov	r0, r5
    b142:	4798      	blx	r3
    b144:	4682      	mov	sl, r0
    uint32_t ret = nslots * ( duration + (uint32_t) uwb_dwt_usecs_to_usecs(config->tx_guard_delay));
    b146:	f8d8 0008 	ldr.w	r0, [r8, #8]
    b14a:	f014 fe3f 	bl	1fdcc <__aeabi_ui2d>
    b14e:	a322      	add	r3, pc, #136	; (adr r3, b1d8 <nrng_request+0x1a0>)
    b150:	e9d3 2300 	ldrd	r2, r3, [r3]
    b154:	f014 feb4 	bl	1fec0 <__aeabi_dmul>
    b158:	f015 f98a 	bl	20470 <__aeabi_d2uiz>
    uint16_t timeout = config->tx_holdoff_delay         // Remote side turn arround time.
    b15c:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    b160:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    uint32_t ret = nslots * ( duration + (uint32_t) uwb_dwt_usecs_to_usecs(config->tx_guard_delay));
    b162:	4450      	add	r0, sl
    uint16_t timeout = config->tx_holdoff_delay         // Remote side turn arround time.
    b164:	440e      	add	r6, r1
    b166:	fb07 6100 	mla	r1, r7, r0, r6
    b16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b16c:	b289      	uxth	r1, r1
    b16e:	4628      	mov	r0, r5
    b170:	4798      	blx	r3
    if (nrng->control.delay_start_enabled)
    b172:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    b176:	07d8      	lsls	r0, r3, #31
    b178:	d505      	bpl.n	b186 <nrng_request+0x14e>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    b17a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b17c:	4628      	mov	r0, r5
    b17e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    b180:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    b184:	4788      	blx	r1
    if(inst->config.dblbuffon_enabled)
    b186:	f895 352c 	ldrb.w	r3, [r5, #1324]	; 0x52c
    b18a:	06d9      	lsls	r1, r3, #27
    b18c:	d504      	bpl.n	b198 <nrng_request+0x160>
        assert(inst->config.rxauto_enable == 0);
    b18e:	f895 352d 	ldrb.w	r3, [r5, #1325]	; 0x52d
    b192:	07da      	lsls	r2, r3, #31
    b194:	f53f af5a 	bmi.w	b04c <nrng_request+0x14>
    return (dev->uw_funcs->uf_start_tx(dev));
    b198:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b19a:	4628      	mov	r0, r5
    b19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b19e:	4798      	blx	r3
    if (uwb_start_tx(inst).start_tx_error){
    b1a0:	0743      	lsls	r3, r0, #29
    b1a2:	d510      	bpl.n	b1c6 <nrng_request+0x18e>
        NRNG_STATS_INC(start_tx_error);
    b1a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b1a6:	3301      	adds	r3, #1
    b1a8:	63e3      	str	r3, [r4, #60]	; 0x3c
        if (dpl_sem_get_count(&nrng->sem) == 0) {
    b1aa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
    b1ae:	b92b      	cbnz	r3, b1bc <nrng_request+0x184>
    return (dpl_error_t)os_sem_release(&sem->sem);
    b1b0:	4648      	mov	r0, r9
    b1b2:	f7fe fd3f 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
    b1b6:	2800      	cmp	r0, #0
    b1b8:	f47f af48 	bne.w	b04c <nrng_request+0x14>
}
    b1bc:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    b1c0:	b003      	add	sp, #12
    b1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b1c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b1ca:	4648      	mov	r0, r9
    b1cc:	f7fe fd64 	bl	9c98 <os_sem_pend>
        assert(err == DPL_OK);
    b1d0:	2800      	cmp	r0, #0
    b1d2:	d0ed      	beq.n	b1b0 <nrng_request+0x178>
    b1d4:	e73a      	b.n	b04c <nrng_request+0x14>
    b1d6:	bf00      	nop
    b1d8:	90690691 	.word	0x90690691
    b1dc:	3ff06906 	.word	0x3ff06906

0000b1e0 <nrng_request_delay_start>:
{
    b1e0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    b1e2:	461f      	mov	r7, r3
    nrng->control.delay_start_enabled = 1;
    b1e4:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
    b1e8:	f043 0301 	orr.w	r3, r3, #1
{
    b1ec:	4604      	mov	r4, r0
    b1ee:	4616      	mov	r6, r2
    nrng->control.delay_start_enabled = 1;
    b1f0:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
    nrng_request(nrng, dst_address, code, slot_mask, cell_id);
    b1f4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    b1f8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    nrng->delay = delay;
    b1fc:	e9c0 6716 	strd	r6, r7, [r0, #88]	; 0x58
    nrng_request(nrng, dst_address, code, slot_mask, cell_id);
    b200:	9300      	str	r3, [sp, #0]
    b202:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    b206:	f7ff ff17 	bl	b038 <nrng_request>
    nrng->control.delay_start_enabled = 0;
    b20a:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    b20e:	f36f 0300 	bfc	r3, #0, #1
    b212:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
    return nrng->dev_inst->status;
    b216:	6823      	ldr	r3, [r4, #0]
}
    b218:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    b21c:	b002      	add	sp, #8
    b21e:	bdd0      	pop	{r4, r6, r7, pc}

0000b220 <nrng_listen>:
{
    b220:	b570      	push	{r4, r5, r6, lr}
    b222:	f100 0564 	add.w	r5, r0, #100	; 0x64
    b226:	4604      	mov	r4, r0
    b228:	460e      	mov	r6, r1
    b22a:	4628      	mov	r0, r5
    b22c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b230:	f7fe fd32 	bl	9c98 <os_sem_pend>
    assert(err == DPL_OK);
    b234:	b128      	cbz	r0, b242 <nrng_listen+0x22>
    b236:	2300      	movs	r3, #0
    b238:	461a      	mov	r2, r3
    b23a:	4619      	mov	r1, r3
    b23c:	4618      	mov	r0, r3
    b23e:	f7fd fe59 	bl	8ef4 <__assert_func>
    NRNG_STATS_INC(nrng_listen);
    b242:	69e3      	ldr	r3, [r4, #28]
    if(uwb_start_rx(nrng->dev_inst).start_rx_error){
    b244:	6820      	ldr	r0, [r4, #0]
    NRNG_STATS_INC(nrng_listen);
    b246:	3301      	adds	r3, #1
    b248:	61e3      	str	r3, [r4, #28]
    return (dev->uw_funcs->uf_start_rx(dev));
    b24a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b24c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b24e:	4798      	blx	r3
    if(uwb_start_rx(nrng->dev_inst).start_rx_error){
    b250:	0703      	lsls	r3, r0, #28
    b252:	d507      	bpl.n	b264 <nrng_listen+0x44>
    return (dpl_error_t)os_sem_release(&sem->sem);
    b254:	4628      	mov	r0, r5
    b256:	f7fe fced 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
    b25a:	2800      	cmp	r0, #0
    b25c:	d1eb      	bne.n	b236 <nrng_listen+0x16>
        NRNG_STATS_INC(start_rx_error);
    b25e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b260:	3301      	adds	r3, #1
    b262:	6323      	str	r3, [r4, #48]	; 0x30
    if (mode == UWB_BLOCKING){
    b264:	b95e      	cbnz	r6, b27e <nrng_listen+0x5e>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b266:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b26a:	4628      	mov	r0, r5
    b26c:	f7fe fd14 	bl	9c98 <os_sem_pend>
        assert(err == DPL_OK);
    b270:	2800      	cmp	r0, #0
    b272:	d1e0      	bne.n	b236 <nrng_listen+0x16>
    return (dpl_error_t)os_sem_release(&sem->sem);
    b274:	4628      	mov	r0, r5
    b276:	f7fe fcdd 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
    b27a:	2800      	cmp	r0, #0
    b27c:	d1db      	bne.n	b236 <nrng_listen+0x16>
   return nrng->dev_inst->status;
    b27e:	6823      	ldr	r3, [r4, #0]
}
    b280:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    b284:	bd70      	pop	{r4, r5, r6, pc}
	...

0000b288 <nrng_twr_to_tof_frames>:
{
    b288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b28a:	ed2d 8b02 	vpush	{d8}
    switch(final_frame->code){
    b28e:	f8b2 3009 	ldrh.w	r3, [r2, #9]
    b292:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
    b296:	d805      	bhi.n	b2a4 <nrng_twr_to_tof_frames+0x1c>
    b298:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
    b29c:	d23b      	bcs.n	b316 <nrng_twr_to_tof_frames+0x8e>
    b29e:	ed9f 0a26 	vldr	s0, [pc, #152]	; b338 <nrng_twr_to_tof_frames+0xb0>
    return ToF;
    b2a2:	e035      	b.n	b310 <nrng_twr_to_tof_frames+0x88>
    switch(final_frame->code){
    b2a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
    b2a8:	2b09      	cmp	r3, #9
    b2aa:	d8f8      	bhi.n	b29e <nrng_twr_to_tof_frames+0x16>
            assert(first_frame != NULL);
    b2ac:	b929      	cbnz	r1, b2ba <nrng_twr_to_tof_frames+0x32>
    b2ae:	2300      	movs	r3, #0
    b2b0:	461a      	mov	r2, r3
    b2b2:	4619      	mov	r1, r3
    b2b4:	4618      	mov	r0, r3
    b2b6:	f7fd fe1d 	bl	8ef4 <__assert_func>
            T1R = (first_frame->response_timestamp - first_frame->request_timestamp);
    b2ba:	694b      	ldr	r3, [r1, #20]
            T2R = (final_frame->response_timestamp - final_frame->request_timestamp);
    b2bc:	6950      	ldr	r0, [r2, #20]
            T1R = (first_frame->response_timestamp - first_frame->request_timestamp);
    b2be:	698c      	ldr	r4, [r1, #24]
            T2R = (final_frame->response_timestamp - final_frame->request_timestamp);
    b2c0:	6996      	ldr	r6, [r2, #24]
            T1r = (first_frame->transmission_timestamp  - first_frame->reception_timestamp);
    b2c2:	f8d1 700f 	ldr.w	r7, [r1, #15]
            T2r = (final_frame->transmission_timestamp - final_frame->reception_timestamp);
    b2c6:	f8d2 500f 	ldr.w	r5, [r2, #15]
            T1R = (first_frame->response_timestamp - first_frame->request_timestamp);
    b2ca:	1ae4      	subs	r4, r4, r3
            T2R = (final_frame->response_timestamp - final_frame->request_timestamp);
    b2cc:	1a36      	subs	r6, r6, r0
            T1r = (first_frame->transmission_timestamp  - first_frame->reception_timestamp);
    b2ce:	f8d1 300b 	ldr.w	r3, [r1, #11]
            T2r = (final_frame->transmission_timestamp - final_frame->reception_timestamp);
    b2d2:	f8d2 000b 	ldr.w	r0, [r2, #11]
            T1r = (first_frame->transmission_timestamp  - first_frame->reception_timestamp);
    b2d6:	1aff      	subs	r7, r7, r3
            T2r = (final_frame->transmission_timestamp - final_frame->reception_timestamp);
    b2d8:	1a2d      	subs	r5, r5, r0
            nom = T1R * T2R  - T1r * T2r;
    b2da:	fba7 3205 	umull	r3, r2, r7, r5
    b2de:	fba4 0106 	umull	r0, r1, r4, r6
    b2e2:	1ac0      	subs	r0, r0, r3
    b2e4:	eb61 0102 	sbc.w	r1, r1, r2
            ToF = (float) (nom) / denom;
    b2e8:	f015 fa02 	bl	206f0 <__aeabi_l2f>
            denom = T1R + T2R  + T1r + T2r;
    b2ec:	19e4      	adds	r4, r4, r7
            T1R = (first_frame->response_timestamp - first_frame->request_timestamp);
    b2ee:	f04f 0100 	mov.w	r1, #0
            denom = T1R + T2R  + T1r + T2r;
    b2f2:	4149      	adcs	r1, r1
    b2f4:	19a4      	adds	r4, r4, r6
            ToF = (float) (nom) / denom;
    b2f6:	ee08 0a10 	vmov	s16, r0
            denom = T1R + T2R  + T1r + T2r;
    b2fa:	f141 0100 	adc.w	r1, r1, #0
    b2fe:	1960      	adds	r0, r4, r5
            ToF = (float) (nom) / denom;
    b300:	f141 0100 	adc.w	r1, r1, #0
    b304:	f015 f9f4 	bl	206f0 <__aeabi_l2f>
    b308:	ee07 0a90 	vmov	s15, r0
    b30c:	ee88 0a27 	vdiv.f32	s0, s16, s15
}
    b310:	ecbd 8b02 	vpop	{d8}
    b314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            assert(first_frame != NULL);
    b316:	2900      	cmp	r1, #0
    b318:	d0c9      	beq.n	b2ae <nrng_twr_to_tof_frames+0x26>
                    -  (first_frame->transmission_timestamp - first_frame->reception_timestamp))/2.0f;
    b31a:	f8d1 200b 	ldr.w	r2, [r1, #11]
            ToF = ((first_frame->response_timestamp - first_frame->request_timestamp)
    b31e:	698b      	ldr	r3, [r1, #24]
                    -  (first_frame->transmission_timestamp - first_frame->reception_timestamp))/2.0f;
    b320:	4413      	add	r3, r2
            ToF = ((first_frame->response_timestamp - first_frame->request_timestamp)
    b322:	694a      	ldr	r2, [r1, #20]
                    -  (first_frame->transmission_timestamp - first_frame->reception_timestamp))/2.0f;
    b324:	1a9b      	subs	r3, r3, r2
    b326:	f8d1 200f 	ldr.w	r2, [r1, #15]
    b32a:	1a9b      	subs	r3, r3, r2
    b32c:	ee00 3a10 	vmov	s0, r3
            ToF = ((first_frame->response_timestamp - first_frame->request_timestamp)
    b330:	eebb 0aef 	vcvt.f32.u32	s0, s0, #1
            break;
    b334:	e7ec      	b.n	b310 <nrng_twr_to_tof_frames+0x88>
    b336:	bf00      	nop
    b338:	00000000 	.word	0x00000000

0000b33c <nrng_get_ranges>:
{
    b33c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (uint16_t i=0; i < nranges; i++){
    b340:	2500      	movs	r5, #0
{
    b342:	4604      	mov	r4, r0
    b344:	468a      	mov	sl, r1
    b346:	4690      	mov	r8, r2
    b348:	4699      	mov	r9, r3
    uint32_t mask = 0;
    b34a:	462f      	mov	r7, r5
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    b34c:	2601      	movs	r6, #1
    for (uint16_t i=0; i < nranges; i++){
    b34e:	45a8      	cmp	r8, r5
    b350:	d109      	bne.n	b366 <nrng_get_ranges+0x2a>
    b352:	2500      	movs	r5, #0
    uint16_t j = 0;
    b354:	462e      	mov	r6, r5
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    b356:	f04f 0b01 	mov.w	fp, #1
    for (uint16_t i=0; i < nranges; i++){
    b35a:	45a8      	cmp	r8, r5
    b35c:	d128      	bne.n	b3b0 <nrng_get_ranges+0x74>
}
    b35e:	4638      	mov	r0, r7
    b360:	b003      	add	sp, #12
    b362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (nrng->slot_mask & 1UL << i){
    b366:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
    b36a:	fa20 f305 	lsr.w	r3, r0, r5
    b36e:	07da      	lsls	r2, r3, #31
    b370:	d51c      	bpl.n	b3ac <nrng_get_ranges+0x70>
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    b372:	fa06 fb05 	lsl.w	fp, r6, r5
    b376:	2201      	movs	r2, #1
    b378:	4659      	mov	r1, fp
    b37a:	f003 fee2 	bl	f142 <BitIndex>
            nrng_frame_t * frame = nrng->frames[(base + idx)%nrng->nframes];
    b37e:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    b382:	fa19 f080 	uxtah	r0, r9, r0
    b386:	fbb0 f2f3 	udiv	r2, r0, r3
    b38a:	fb03 0012 	mls	r0, r3, r2, r0
    b38e:	3032      	adds	r0, #50	; 0x32
    b390:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
            if (frame->code == UWB_DATA_CODE_SS_TWR_NRNG_FINAL && frame->seq_num == nrng->seq_num){
    b394:	f8b3 2009 	ldrh.w	r2, [r3, #9]
    b398:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
    b39c:	d106      	bne.n	b3ac <nrng_get_ranges+0x70>
    b39e:	789a      	ldrb	r2, [r3, #2]
    b3a0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    b3a4:	429a      	cmp	r2, r3
                mask |= 1UL << i;
    b3a6:	bf08      	it	eq
    b3a8:	ea47 070b 	orreq.w	r7, r7, fp
    for (uint16_t i=0; i < nranges; i++){
    b3ac:	3501      	adds	r5, #1
    b3ae:	e7ce      	b.n	b34e <nrng_get_ranges+0x12>
        if (mask & 1UL << i){
    b3b0:	fa27 f305 	lsr.w	r3, r7, r5
    b3b4:	07db      	lsls	r3, r3, #31
    b3b6:	d529      	bpl.n	b40c <nrng_get_ranges+0xd0>
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    b3b8:	2201      	movs	r2, #1
    b3ba:	fa0b f105 	lsl.w	r1, fp, r5
    b3be:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
    b3c2:	f003 febe 	bl	f142 <BitIndex>
            nrng_frame_t * frame = nrng->frames[(base + idx)%nrng->nframes];
    b3c6:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    b3ca:	fa19 f080 	uxtah	r0, r9, r0
    b3ce:	fbb0 f2f3 	udiv	r2, r0, r3
    b3d2:	fb03 0012 	mls	r0, r3, r2, r0
    b3d6:	3032      	adds	r0, #50	; 0x32
    b3d8:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
            ranges[j++] = uwb_rng_tof_to_meters(nrng_twr_to_tof_frames(nrng->dev_inst, frame, frame));
    b3dc:	6820      	ldr	r0, [r4, #0]
    b3de:	4611      	mov	r1, r2
    b3e0:	f7ff ff52 	bl	b288 <nrng_twr_to_tof_frames>
    b3e4:	ee10 0a10 	vmov	r0, s0
    b3e8:	f014 fd12 	bl	1fe10 <__aeabi_f2d>
    b3ec:	ec41 0b10 	vmov	d0, r0, r1
    b3f0:	f001 face 	bl	c990 <uwb_rng_tof_to_meters>
    b3f4:	1c73      	adds	r3, r6, #1
    b3f6:	b29b      	uxth	r3, r3
    b3f8:	ec51 0b10 	vmov	r0, r1, d0
    b3fc:	9301      	str	r3, [sp, #4]
    b3fe:	f015 f857 	bl	204b0 <__aeabi_d2f>
    b402:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
    b406:	9b01      	ldr	r3, [sp, #4]
    b408:	6030      	str	r0, [r6, #0]
    b40a:	461e      	mov	r6, r3
    for (uint16_t i=0; i < nranges; i++){
    b40c:	3501      	adds	r5, #1
    b40e:	e7a4      	b.n	b35a <nrng_get_ranges+0x1e>

0000b410 <nrng_get_uids>:
{
    b410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (uint16_t i=0; i < nranges; i++){
    b414:	2500      	movs	r5, #0
{
    b416:	4604      	mov	r4, r0
    b418:	468a      	mov	sl, r1
    b41a:	4617      	mov	r7, r2
    b41c:	4698      	mov	r8, r3
    uint32_t mask = 0;
    b41e:	462e      	mov	r6, r5
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    b420:	f04f 0901 	mov.w	r9, #1
    for (uint16_t i=0; i < nranges; i++){
    b424:	42af      	cmp	r7, r5
    b426:	d109      	bne.n	b43c <nrng_get_uids+0x2c>
    b428:	2500      	movs	r5, #0
    uint16_t j = 0;
    b42a:	46a9      	mov	r9, r5
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    b42c:	f04f 0b01 	mov.w	fp, #1
    for (uint16_t i=0; i < nranges; i++){
    b430:	42af      	cmp	r7, r5
    b432:	d128      	bne.n	b486 <nrng_get_uids+0x76>
}
    b434:	4630      	mov	r0, r6
    b436:	b003      	add	sp, #12
    b438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (nrng->slot_mask & 1UL << i){
    b43c:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
    b440:	fa20 f305 	lsr.w	r3, r0, r5
    b444:	07da      	lsls	r2, r3, #31
    b446:	d51c      	bpl.n	b482 <nrng_get_uids+0x72>
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    b448:	fa09 fb05 	lsl.w	fp, r9, r5
    b44c:	2201      	movs	r2, #1
    b44e:	4659      	mov	r1, fp
    b450:	f003 fe77 	bl	f142 <BitIndex>
            nrng_frame_t * frame = nrng->frames[(base + idx)%nrng->nframes];
    b454:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    b458:	fa18 f080 	uxtah	r0, r8, r0
    b45c:	fbb0 f2f3 	udiv	r2, r0, r3
    b460:	fb03 0012 	mls	r0, r3, r2, r0
    b464:	3032      	adds	r0, #50	; 0x32
    b466:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
            if (frame->code == UWB_DATA_CODE_SS_TWR_NRNG_FINAL && frame->seq_num == nrng->seq_num){
    b46a:	f8b3 2009 	ldrh.w	r2, [r3, #9]
    b46e:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
    b472:	d106      	bne.n	b482 <nrng_get_uids+0x72>
    b474:	789a      	ldrb	r2, [r3, #2]
    b476:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    b47a:	429a      	cmp	r2, r3
                mask |= 1UL << i;
    b47c:	bf08      	it	eq
    b47e:	ea46 060b 	orreq.w	r6, r6, fp
    for (uint16_t i=0; i < nranges; i++){
    b482:	3501      	adds	r5, #1
    b484:	e7ce      	b.n	b424 <nrng_get_uids+0x14>
        if (mask & 1UL << i){
    b486:	fa26 f305 	lsr.w	r3, r6, r5
    b48a:	07db      	lsls	r3, r3, #31
    b48c:	d529      	bpl.n	b4e2 <nrng_get_uids+0xd2>
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    b48e:	2201      	movs	r2, #1
    b490:	fa0b f105 	lsl.w	r1, fp, r5
    b494:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
    b498:	f003 fe53 	bl	f142 <BitIndex>
            nrng_frame_t * frame = nrng->frames[(base + idx)%nrng->nframes];
    b49c:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    b4a0:	fa18 f080 	uxtah	r0, r8, r0
    b4a4:	fbb0 f2f3 	udiv	r2, r0, r3
    b4a8:	fb03 0012 	mls	r0, r3, r2, r0
    b4ac:	3032      	adds	r0, #50	; 0x32
    b4ae:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
            uids[j++] = uwb_rng_tof_to_meters(nrng_twr_to_tof_frames(nrng->dev_inst, frame, frame));
    b4b2:	6820      	ldr	r0, [r4, #0]
    b4b4:	4611      	mov	r1, r2
    b4b6:	f7ff fee7 	bl	b288 <nrng_twr_to_tof_frames>
    b4ba:	ee10 0a10 	vmov	r0, s0
    b4be:	f014 fca7 	bl	1fe10 <__aeabi_f2d>
    b4c2:	ec41 0b10 	vmov	d0, r0, r1
    b4c6:	f001 fa63 	bl	c990 <uwb_rng_tof_to_meters>
    b4ca:	f109 0301 	add.w	r3, r9, #1
    b4ce:	b29b      	uxth	r3, r3
    b4d0:	ec51 0b10 	vmov	r0, r1, d0
    b4d4:	9301      	str	r3, [sp, #4]
    b4d6:	f014 ffcb 	bl	20470 <__aeabi_d2uiz>
    b4da:	9b01      	ldr	r3, [sp, #4]
    b4dc:	f82a 0019 	strh.w	r0, [sl, r9, lsl #1]
    b4e0:	4699      	mov	r9, r3
    for (uint16_t i=0; i < nranges; i++){
    b4e2:	3501      	adds	r5, #1
    b4e4:	e7a4      	b.n	b430 <nrng_get_uids+0x20>

0000b4e6 <nrng_encode>:
#include <nrng/nrng_json.h>

#if MYNEWT_VAL(NRNG_VERBOSE)

void
nrng_encode(struct nrng_instance * nrng, uint8_t seq_num, uint16_t base){
    b4e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4ea:	4616      	mov	r6, r2

    uint32_t valid_mask = 0;
    nrng_frame_t * frame = nrng->frames[(base)%nrng->nframes];
    b4ec:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    b4f0:	fbb6 f3f2 	udiv	r3, r6, r2
    b4f4:	fb02 6313 	mls	r3, r2, r3, r6
    b4f8:	b29b      	uxth	r3, r3
    b4fa:	3332      	adds	r3, #50	; 0x32
nrng_encode(struct nrng_instance * nrng, uint8_t seq_num, uint16_t base){
    b4fc:	f5ad 7d67 	sub.w	sp, sp, #924	; 0x39c
    nrng_frame_t * frame = nrng->frames[(base)%nrng->nframes];
    b500:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
nrng_encode(struct nrng_instance * nrng, uint8_t seq_num, uint16_t base){
    b504:	4688      	mov	r8, r1

    nrng_json_t json = {
    b506:	f44f 7264 	mov.w	r2, #912	; 0x390
    b50a:	2100      	movs	r1, #0
nrng_encode(struct nrng_instance * nrng, uint8_t seq_num, uint16_t base){
    b50c:	4604      	mov	r4, r0
    nrng_json_t json = {
    b50e:	a802      	add	r0, sp, #8
    b510:	f004 f875 	bl	f5fe <memset>
        .utime =  os_cputime_ticks_to_usecs(os_cputime_get32()),
    b514:	f7fd ff25 	bl	9362 <os_cputime_get32>
    b518:	2500      	movs	r5, #0
    b51a:	e9cd 051c 	strd	r0, r5, [sp, #112]	; 0x70
    nrng_json_t json = {
    b51e:	e9cd 851e 	strd	r8, r5, [sp, #120]	; 0x78
        .seq = seq_num,
        .uid = frame->src_address
    b522:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    b526:	e9cd 3520 	strd	r3, r5, [sp, #128]	; 0x80
    uint32_t valid_mask = 0;
    b52a:	462f      	mov	r7, r5
    };
    // Workout which slots responded with a valid frames
    for (uint16_t i=0; i < 16; i++){
        if (nrng->slot_mask & 1UL << i){
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    b52c:	f04f 0901 	mov.w	r9, #1
        if (nrng->slot_mask & 1UL << i){
    b530:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
    b534:	fa20 f305 	lsr.w	r3, r0, r5
    b538:	07d9      	lsls	r1, r3, #31
    b53a:	d51a      	bpl.n	b572 <nrng_encode+0x8c>
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    b53c:	fa09 fa05 	lsl.w	sl, r9, r5
    b540:	2201      	movs	r2, #1
    b542:	4651      	mov	r1, sl
    b544:	f003 fdfd 	bl	f142 <BitIndex>
            nrng_frame_t * frame = nrng->frames[(base + idx)%nrng->nframes];
    b548:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    b54c:	fa16 f080 	uxtah	r0, r6, r0
    b550:	fbb0 f2f3 	udiv	r2, r0, r3
    b554:	fb03 0012 	mls	r0, r3, r2, r0
    b558:	3032      	adds	r0, #50	; 0x32
    b55a:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
            if (frame->code == UWB_DATA_CODE_SS_TWR_NRNG_FINAL && frame->seq_num == seq_num){
    b55e:	f8b3 2009 	ldrh.w	r2, [r3, #9]
    b562:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
    b566:	d104      	bne.n	b572 <nrng_encode+0x8c>
    b568:	789b      	ldrb	r3, [r3, #2]
    b56a:	4543      	cmp	r3, r8
                valid_mask |= 1UL << i;
    b56c:	bf08      	it	eq
    b56e:	ea47 070a 	orreq.w	r7, r7, sl
    for (uint16_t i=0; i < 16; i++){
    b572:	3501      	adds	r5, #1
    b574:	2d10      	cmp	r5, #16
    b576:	d1db      	bne.n	b530 <nrng_encode+0x4a>
            }
        }
    }
    // tdoa results are reference to slot 0, so reject it slot 0 did not respond. An alternative approach is needed @Niklas
    if (valid_mask == 0 || (valid_mask & 1) == 0)
    b578:	2f00      	cmp	r7, #0
    b57a:	d054      	beq.n	b626 <nrng_encode+0x140>
    b57c:	07fa      	lsls	r2, r7, #31
    b57e:	d552      	bpl.n	b626 <nrng_encode+0x140>
    b580:	2500      	movs	r5, #0
       return;

    uint16_t j=0;
    b582:	46ab      	mov	fp, r5
    for (uint16_t i=0; i < 16; i++){
        if (valid_mask & 1UL << i){
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    b584:	f04f 0901 	mov.w	r9, #1
        if (valid_mask & 1UL << i){
    b588:	fa27 f305 	lsr.w	r3, r7, r5
    b58c:	07db      	lsls	r3, r3, #31
    b58e:	d53d      	bpl.n	b60c <nrng_encode+0x126>
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    b590:	2201      	movs	r2, #1
    b592:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
    b596:	fa09 f105 	lsl.w	r1, r9, r5
    b59a:	f003 fdd2 	bl	f142 <BitIndex>
            nrng_frame_t * frame = nrng->frames[(base + idx)%nrng->nframes];
    b59e:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    b5a2:	fa16 f080 	uxtah	r0, r6, r0
    b5a6:	fbb0 f2f3 	udiv	r2, r0, r3
    b5aa:	fb03 0012 	mls	r0, r3, r2, r0
    b5ae:	3032      	adds	r0, #50	; 0x32
    b5b0:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
            if (frame->code == UWB_DATA_CODE_SS_TWR_NRNG_FINAL && frame->seq_num == seq_num){
    b5b4:	f8b2 3009 	ldrh.w	r3, [r2, #9]
    b5b8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
    b5bc:	d126      	bne.n	b60c <nrng_encode+0x126>
    b5be:	7893      	ldrb	r3, [r2, #2]
    b5c0:	4543      	cmp	r3, r8
    b5c2:	d123      	bne.n	b60c <nrng_encode+0x126>
                json.rng[j] = (dpl_float64_t) uwb_rng_tof_to_meters(nrng_twr_to_tof_frames(nrng->dev_inst, frame, frame));
    b5c4:	4611      	mov	r1, r2
    b5c6:	6820      	ldr	r0, [r4, #0]
    b5c8:	9201      	str	r2, [sp, #4]
    b5ca:	f7ff fe5d 	bl	b288 <nrng_twr_to_tof_frames>
    b5ce:	ee10 0a10 	vmov	r0, s0
    b5d2:	f014 fc1d 	bl	1fe10 <__aeabi_f2d>
    b5d6:	ec41 0b10 	vmov	d0, r0, r1
    b5da:	f001 f9d9 	bl	c990 <uwb_rng_tof_to_meters>
    b5de:	ab02      	add	r3, sp, #8
    b5e0:	eb03 01cb 	add.w	r1, r3, fp, lsl #3
    b5e4:	46da      	mov	sl, fp
                json.ouid[j++] = frame->dst_address;
    b5e6:	f10a 0310 	add.w	r3, sl, #16
                json.rng[j] = (dpl_float64_t) uwb_rng_tof_to_meters(nrng_twr_to_tof_frames(nrng->dev_inst, frame, frame));
    b5ea:	ed81 0b40 	vstr	d0, [r1, #256]	; 0x100
                json.ouid[j++] = frame->dst_address;
    b5ee:	aa02      	add	r2, sp, #8
    b5f0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    b5f4:	9a01      	ldr	r2, [sp, #4]
    b5f6:	a802      	add	r0, sp, #8
    b5f8:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    b5fc:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    b600:	f10b 0b01 	add.w	fp, fp, #1
    b604:	2300      	movs	r3, #0
    b606:	fa1f fb8b 	uxth.w	fp, fp
    b60a:	604b      	str	r3, [r1, #4]
    for (uint16_t i=0; i < 16; i++){
    b60c:	3501      	adds	r5, #1
    b60e:	2d10      	cmp	r5, #16
    b610:	d1ba      	bne.n	b588 <nrng_encode+0xa2>
            }
        }
    }
    json.nsize = j;
    b612:	2300      	movs	r3, #0

    nrng_json_write(&json);
    b614:	a802      	add	r0, sp, #8
    json.nsize = j;
    b616:	f8cd b188 	str.w	fp, [sp, #392]	; 0x188
    b61a:	9363      	str	r3, [sp, #396]	; 0x18c
    nrng_json_write(&json);
    b61c:	f000 f82c 	bl	b678 <nrng_json_write>
    printf("%s\n",json.iobuf);
    b620:	a864      	add	r0, sp, #400	; 0x190
    b622:	f003 fee3 	bl	f3ec <puts>
}
    b626:	f50d 7d67 	add.w	sp, sp, #924	; 0x39c
    b62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000b62e <nrng_write_line>:

static int nrng_write_line(void *buf, char* data, int len);

static int
nrng_write_line(void *buf, char* data, int len)
{
    b62e:	4603      	mov	r3, r0
    nrng_json_t * json = buf;
    // Fix for serial output ovrflowing and printing dogshit nonsense
    len =   min(len, sizeof(json->iobuf) - json->idx);
    b630:	f8b0 0388 	ldrh.w	r0, [r0, #904]	; 0x388
    b634:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
    b638:	4282      	cmp	r2, r0
{
    b63a:	b570      	push	{r4, r5, r6, lr}
    len =   min(len, sizeof(json->iobuf) - json->idx);
    b63c:	bf28      	it	cs
    b63e:	4602      	movcs	r2, r0

    for (uint16_t i=0; i < len; i++){
    b640:	2400      	movs	r4, #0
    b642:	b2a5      	uxth	r5, r4
    b644:	4295      	cmp	r5, r2
        json->iobuf[json->idx++] = data[i];
    b646:	f8b3 0388 	ldrh.w	r0, [r3, #904]	; 0x388
    for (uint16_t i=0; i < len; i++){
    b64a:	da09      	bge.n	b660 <nrng_write_line+0x32>
        json->iobuf[json->idx++] = data[i];
    b64c:	1c46      	adds	r6, r0, #1
    b64e:	f8a3 6388 	strh.w	r6, [r3, #904]	; 0x388
    b652:	5d4d      	ldrb	r5, [r1, r5]
    b654:	4418      	add	r0, r3
        if (data[i]=='\0'){
    b656:	3401      	adds	r4, #1
        json->iobuf[json->idx++] = data[i];
    b658:	f880 5188 	strb.w	r5, [r0, #392]	; 0x188
        if (data[i]=='\0'){
    b65c:	2d00      	cmp	r5, #0
    b65e:	d1f0      	bne.n	b642 <nrng_write_line+0x14>
            break;
        }
    }
    if (json->iobuf[json->idx-1]=='\0')
    b660:	f8b3 1388 	ldrh.w	r1, [r3, #904]	; 0x388
    b664:	4419      	add	r1, r3
    b666:	f891 1187 	ldrb.w	r1, [r1, #391]	; 0x187
    b66a:	b109      	cbz	r1, b670 <nrng_write_line+0x42>
        json->idx = 0;
    return len;
}
    b66c:	4610      	mov	r0, r2
    b66e:	bd70      	pop	{r4, r5, r6, pc}
        json->idx = 0;
    b670:	f8a3 1388 	strh.w	r1, [r3, #904]	; 0x388
    return len;
    b674:	e7fa      	b.n	b66c <nrng_write_line+0x3e>
	...

0000b678 <nrng_json_write>:
nrng_json_write(nrng_json_t * json){

    struct json_value value;
    int rc;

    json->encoder.je_write = nrng_write_line;
    b678:	4b59      	ldr	r3, [pc, #356]	; (b7e0 <nrng_json_write+0x168>)
nrng_json_write(nrng_json_t * json){
    b67a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    json->encoder.je_arg = (void *)json;
    b67e:	e9c0 3006 	strd	r3, r0, [r0, #24]
    json->decoder.json_buf.jb_read_next = json_read_next;
    b682:	4b58      	ldr	r3, [pc, #352]	; (b7e4 <nrng_json_write+0x16c>)
    b684:	6043      	str	r3, [r0, #4]
    json->decoder.json_buf.jb_read_prev = json_read_prev;
    b686:	4b58      	ldr	r3, [pc, #352]	; (b7e8 <nrng_json_write+0x170>)
    b688:	6083      	str	r3, [r0, #8]
    json->decoder.json_buf.jb_readn = json_readn;
    b68a:	4b58      	ldr	r3, [pc, #352]	; (b7ec <nrng_json_write+0x174>)
    b68c:	6003      	str	r3, [r0, #0]
    json->encoder.je_wr_commas = 0;
    b68e:	f890 3020 	ldrb.w	r3, [r0, #32]

    rc = json_encode_object_start(&json->encoder);
    b692:	f100 0718 	add.w	r7, r0, #24
    json->encoder.je_wr_commas = 0;
    b696:	f36f 0300 	bfc	r3, #0, #1
nrng_json_write(nrng_json_t * json){
    b69a:	b085      	sub	sp, #20
    b69c:	4604      	mov	r4, r0
    json->encoder.je_wr_commas = 0;
    b69e:	f880 3020 	strb.w	r3, [r0, #32]
    rc = json_encode_object_start(&json->encoder);
    b6a2:	4638      	mov	r0, r7
    b6a4:	f010 f808 	bl	1b6b8 <json_encode_object_start>
    JSON_VALUE_UINT(&value, json->utime);
    b6a8:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
    rc |= json_encode_object_entry(&json->encoder, "utime", &value);
    b6ac:	4950      	ldr	r1, [pc, #320]	; (b7f0 <nrng_json_write+0x178>)
    JSON_VALUE_UINT(&value, json->utime);
    b6ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rc = json_encode_object_start(&json->encoder);
    b6b2:	4605      	mov	r5, r0
    JSON_VALUE_UINT(&value, json->utime);
    b6b4:	f04f 0801 	mov.w	r8, #1
    rc |= json_encode_object_entry(&json->encoder, "utime", &value);
    b6b8:	466a      	mov	r2, sp
    b6ba:	4638      	mov	r0, r7
    JSON_VALUE_UINT(&value, json->utime);
    b6bc:	f88d 8001 	strb.w	r8, [sp, #1]
    rc |= json_encode_object_entry(&json->encoder, "utime", &value);
    b6c0:	f010 f842 	bl	1b748 <json_encode_object_entry>
    JSON_VALUE_UINT(&value, json->seq);
    b6c4:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    rc |= json_encode_object_entry(&json->encoder, "seq", &value);
    b6c8:	494a      	ldr	r1, [pc, #296]	; (b7f4 <nrng_json_write+0x17c>)
    JSON_VALUE_UINT(&value, json->seq);
    b6ca:	f88d 8001 	strb.w	r8, [sp, #1]
    b6ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rc |= json_encode_object_entry(&json->encoder, "utime", &value);
    b6d2:	4305      	orrs	r5, r0
    rc |= json_encode_object_entry(&json->encoder, "seq", &value);
    b6d4:	466a      	mov	r2, sp
    b6d6:	4638      	mov	r0, r7
    b6d8:	f010 f836 	bl	1b748 <json_encode_object_entry>
    if (json->uid){
    b6dc:	e9d4 231e 	ldrd	r2, r3, [r4, #120]	; 0x78
    b6e0:	ea52 0103 	orrs.w	r1, r2, r3
    rc |= json_encode_object_entry(&json->encoder, "seq", &value);
    b6e4:	ea45 0500 	orr.w	r5, r5, r0
    if (json->uid){
    b6e8:	d009      	beq.n	b6fe <nrng_json_write+0x86>
        JSON_VALUE_UINT(&value, json->uid);
    b6ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
        rc |= json_encode_object_entry(&json->encoder, "uid", &value);
    b6ee:	4942      	ldr	r1, [pc, #264]	; (b7f8 <nrng_json_write+0x180>)
        JSON_VALUE_UINT(&value, json->uid);
    b6f0:	f88d 8001 	strb.w	r8, [sp, #1]
        rc |= json_encode_object_entry(&json->encoder, "uid", &value);
    b6f4:	466a      	mov	r2, sp
    b6f6:	4638      	mov	r0, r7
    b6f8:	f010 f826 	bl	1b748 <json_encode_object_entry>
    b6fc:	4305      	orrs	r5, r0
    }
    rc |= json_encode_array_name(&json->encoder, "ouid");
    b6fe:	493f      	ldr	r1, [pc, #252]	; (b7fc <nrng_json_write+0x184>)
    b700:	4638      	mov	r0, r7
    b702:	f010 f959 	bl	1b9b8 <json_encode_array_name>
    b706:	4305      	orrs	r5, r0
    rc |= json_encode_array_start(&json->encoder);
    b708:	4638      	mov	r0, r7
    b70a:	f010 f957 	bl	1b9bc <json_encode_array_start>
    for (uint8_t i = 0; i< json->nsize; i++){
    b70e:	2300      	movs	r3, #0
    rc |= json_encode_array_start(&json->encoder);
    b710:	ea45 0600 	orr.w	r6, r5, r0
        JSON_VALUE_UINT(&value, json->ouid[i]);
    b714:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i = 0; i< json->nsize; i++){
    b718:	461d      	mov	r5, r3
    b71a:	e9d4 1260 	ldrd	r1, r2, [r4, #384]	; 0x180
    b71e:	f103 0801 	add.w	r8, r3, #1
    b722:	b2db      	uxtb	r3, r3
    b724:	428b      	cmp	r3, r1
    b726:	eb75 0202 	sbcs.w	r2, r5, r2
    b72a:	d332      	bcc.n	b792 <nrng_json_write+0x11a>
        rc |= json_encode_array_value(&json->encoder, &value);
    }
    rc |= json_encode_array_finish(&json->encoder);
    b72c:	4638      	mov	r0, r7
    b72e:	f010 f971 	bl	1ba14 <json_encode_array_finish>

    rc |= json_encode_array_name(&json->encoder, "rng");
    b732:	4933      	ldr	r1, [pc, #204]	; (b800 <nrng_json_write+0x188>)
    rc |= json_encode_array_finish(&json->encoder);
    b734:	4605      	mov	r5, r0
    rc |= json_encode_array_name(&json->encoder, "rng");
    b736:	4638      	mov	r0, r7
    b738:	f010 f93e 	bl	1b9b8 <json_encode_array_name>
    b73c:	4335      	orrs	r5, r6
    b73e:	4305      	orrs	r5, r0
    rc |= json_encode_array_start(&json->encoder);
    b740:	4638      	mov	r0, r7
    b742:	f010 f93b 	bl	1b9bc <json_encode_array_start>
    for (uint8_t i = 0; i< json->nsize; i++){
    b746:	2300      	movs	r3, #0
    rc |= json_encode_array_start(&json->encoder);
    b748:	ea45 0600 	orr.w	r6, r5, r0
        JSON_VALUE_FLOAT64(&value, json->rng[i]);
    b74c:	f04f 0906 	mov.w	r9, #6
    for (uint8_t i = 0; i< json->nsize; i++){
    b750:	461d      	mov	r5, r3
    b752:	e9d4 1260 	ldrd	r1, r2, [r4, #384]	; 0x180
    b756:	f103 0801 	add.w	r8, r3, #1
    b75a:	b2db      	uxtb	r3, r3
    b75c:	428b      	cmp	r3, r1
    b75e:	eb75 0202 	sbcs.w	r2, r5, r2
    b762:	d325      	bcc.n	b7b0 <nrng_json_write+0x138>
        rc |= json_encode_array_value(&json->encoder, &value);
    }
    rc |= json_encode_array_finish(&json->encoder);
    b764:	4638      	mov	r0, r7
    b766:	f010 f955 	bl	1ba14 <json_encode_array_finish>
    b76a:	4680      	mov	r8, r0
    rc |= json_encode_object_finish(&json->encoder);
    b76c:	4638      	mov	r0, r7
    b76e:	f010 f913 	bl	1b998 <json_encode_object_finish>
    json->encoder.je_wr_commas = 0;
    b772:	f894 3020 	ldrb.w	r3, [r4, #32]
    b776:	ea46 0608 	orr.w	r6, r6, r8
    b77a:	f365 0300 	bfi	r3, r5, #0, #1
    assert(rc == 0);
    b77e:	4306      	orrs	r6, r0
    json->encoder.je_wr_commas = 0;
    b780:	f884 3020 	strb.w	r3, [r4, #32]
    assert(rc == 0);
    b784:	d023      	beq.n	b7ce <nrng_json_write+0x156>
    b786:	2300      	movs	r3, #0
    b788:	461a      	mov	r2, r3
    b78a:	4619      	mov	r1, r3
    b78c:	4618      	mov	r0, r3
    b78e:	f7fd fbb1 	bl	8ef4 <__assert_func>
        JSON_VALUE_UINT(&value, json->ouid[i]);
    b792:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    b796:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
        rc |= json_encode_array_value(&json->encoder, &value);
    b79a:	4669      	mov	r1, sp
    b79c:	4638      	mov	r0, r7
        JSON_VALUE_UINT(&value, json->ouid[i]);
    b79e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    b7a2:	f88d 9001 	strb.w	r9, [sp, #1]
        rc |= json_encode_array_value(&json->encoder, &value);
    b7a6:	f010 f919 	bl	1b9dc <json_encode_array_value>
    b7aa:	4643      	mov	r3, r8
    b7ac:	4306      	orrs	r6, r0
    for (uint8_t i = 0; i< json->nsize; i++){
    b7ae:	e7b4      	b.n	b71a <nrng_json_write+0xa2>
        JSON_VALUE_FLOAT64(&value, json->rng[i]);
    b7b0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    b7b4:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
        rc |= json_encode_array_value(&json->encoder, &value);
    b7b8:	4669      	mov	r1, sp
    b7ba:	4638      	mov	r0, r7
        JSON_VALUE_FLOAT64(&value, json->rng[i]);
    b7bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    b7c0:	f88d 9001 	strb.w	r9, [sp, #1]
        rc |= json_encode_array_value(&json->encoder, &value);
    b7c4:	f010 f90a 	bl	1b9dc <json_encode_array_value>
    b7c8:	4643      	mov	r3, r8
    b7ca:	4306      	orrs	r6, r0
    for (uint8_t i = 0; i< json->nsize; i++){
    b7cc:	e7c1      	b.n	b752 <nrng_json_write+0xda>

    nrng_write_line(json->encoder.je_arg, "\0", 1);
    b7ce:	490d      	ldr	r1, [pc, #52]	; (b804 <nrng_json_write+0x18c>)
    b7d0:	69e0      	ldr	r0, [r4, #28]
    b7d2:	2201      	movs	r2, #1
    b7d4:	f7ff ff2b 	bl	b62e <nrng_write_line>

    return rc;
}
    b7d8:	4630      	mov	r0, r6
    b7da:	b005      	add	sp, #20
    b7dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b7e0:	0000b62f 	.word	0x0000b62f
    b7e4:	0001ba31 	.word	0x0001ba31
    b7e8:	0001ba4b 	.word	0x0001ba4b
    b7ec:	0001ba5d 	.word	0x0001ba5d
    b7f0:	00021dd5 	.word	0x00021dd5
    b7f4:	00021ddb 	.word	0x00021ddb
    b7f8:	00021de0 	.word	0x00021de0
    b7fc:	00021ddf 	.word	0x00021ddf
    b800:	00023bf5 	.word	0x00023bf5
    b804:	00021de4 	.word	0x00021de4

0000b808 <lease_expiry_cb>:

#include "pan_utils/pan_utils.h"

void
lease_expiry_cb(struct dpl_event * ev)
{
    b808:	b508      	push	{r3, lr}
    assert(ev != NULL);
    b80a:	b928      	cbnz	r0, b818 <lease_expiry_cb+0x10>
    b80c:	2300      	movs	r3, #0
    b80e:	461a      	mov	r2, r3
    b810:	4619      	mov	r1, r3
    b812:	4618      	mov	r0, r3
    b814:	f7fd fb6e 	bl	8ef4 <__assert_func>
    return ev->ev.ev_arg;
    b818:	6881      	ldr	r1, [r0, #8]
    assert(dpl_event_get_arg(ev));
    b81a:	2900      	cmp	r1, #0
    b81c:	d0f6      	beq.n	b80c <lease_expiry_cb+0x4>

    struct uwb_pan_instance * pan = (struct uwb_pan_instance *) dpl_event_get_arg(ev);
#if !MYNEWT_VAL(SELFTEST)
    STATS_INC(g_stat, lease_expiry);
    b81e:	4a0e      	ldr	r2, [pc, #56]	; (b858 <lease_expiry_cb+0x50>)
#endif
    pan->status.valid = false;
    pan->status.lease_expired = true;
    pan->dev_inst->slot_id = 0xffff;
    b820:	6808      	ldr	r0, [r1, #0]
    STATS_INC(g_stat, lease_expiry);
    b822:	6a53      	ldr	r3, [r2, #36]	; 0x24
    b824:	3301      	adds	r3, #1
    b826:	6253      	str	r3, [r2, #36]	; 0x24
    pan->status.valid = false;
    b828:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    b82c:	f023 0314 	bic.w	r3, r3, #20
    b830:	f043 0310 	orr.w	r3, r3, #16
    b834:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    pan->dev_inst->slot_id = 0xffff;
    b838:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b83c:	f8a0 34c2 	strh.w	r3, [r0, #1218]	; 0x4c2

    /*DIAGMSG("{\"utime\": %lu,\"msg\": \"pan_lease_expired\"}\n",dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));*/
    if (pan->control.postprocess) {
    b840:	f891 304a 	ldrb.w	r3, [r1, #74]	; 0x4a
    b844:	07db      	lsls	r3, r3, #31
    b846:	d505      	bpl.n	b854 <lease_expiry_cb+0x4c>
        dpl_eventq_put(&pan->dev_inst->eventq, &pan->postprocess_event);
    }
}
    b848:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    b84c:	3150      	adds	r1, #80	; 0x50
    b84e:	303c      	adds	r0, #60	; 0x3c
    b850:	f7fd be3d 	b.w	94ce <os_eventq_put>
    b854:	bd08      	pop	{r3, pc}
    b856:	bf00      	nop
    b858:	20003c68 	.word	0x20003c68

0000b85c <uwb_pan_set_request_cb>:
 */
void
uwb_pan_set_request_cb(struct uwb_pan_instance *pan, uwb_pan_request_cb_func_t callback)
{
    pan->request_cb = callback;
    pan->control.request_cb = true;
    b85c:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
    pan->request_cb = callback;
    b860:	64c1      	str	r1, [r0, #76]	; 0x4c
    pan->control.request_cb = true;
    b862:	f043 0302 	orr.w	r3, r3, #2
    b866:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
}
    b86a:	4770      	bx	lr

0000b86c <uwb_pan_set_postprocess>:
 *
 * @return void
 */
void
uwb_pan_set_postprocess(struct uwb_pan_instance *pan, dpl_event_fn * cb)
{
    b86c:	b538      	push	{r3, r4, r5, lr}
    memset(ev, 0, sizeof(*ev));
    b86e:	2210      	movs	r2, #16
    b870:	4604      	mov	r4, r0
    b872:	460d      	mov	r5, r1
    b874:	3050      	adds	r0, #80	; 0x50
    b876:	2100      	movs	r1, #0
    b878:	f003 fec1 	bl	f5fe <memset>
    ev->ev.ev_arg = arg;
    b87c:	e9c4 5415 	strd	r5, r4, [r4, #84]	; 0x54
    return (struct dpl_eventq *) os_eventq_dflt_get();
    b880:	f7fd fecc 	bl	961c <os_eventq_dflt_get>
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
    b884:	4623      	mov	r3, r4
    return (struct dpl_eventq *) os_eventq_dflt_get();
    b886:	4601      	mov	r1, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
    b888:	4a05      	ldr	r2, [pc, #20]	; (b8a0 <uwb_pan_set_postprocess+0x34>)
    b88a:	f104 0060 	add.w	r0, r4, #96	; 0x60
    b88e:	f7fd fc9d 	bl	91cc <os_callout_init>
    dpl_event_init(&pan->postprocess_event, cb, (void *) pan);
    dpl_callout_init(&pan->pan_lease_callout_expiry, dpl_eventq_dflt_get(),
                    lease_expiry_cb, (void *) pan);

    pan->control.postprocess = true;
    b892:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
    b896:	f043 0301 	orr.w	r3, r3, #1
    b89a:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
    b89e:	bd38      	pop	{r3, r4, r5, pc}
    b8a0:	0000b809 	.word	0x0000b809

0000b8a4 <pm_conf_export>:
}

static int
pm_conf_export(void (*export_func)(char *name, char *val),
  enum conf_export_tgt tgt)
{
    b8a4:	b508      	push	{r3, lr}
    export_func("panmstr/pan_id", pm_config.pan_id);
    b8a6:	4903      	ldr	r1, [pc, #12]	; (b8b4 <pm_conf_export+0x10>)
{
    b8a8:	4603      	mov	r3, r0
    export_func("panmstr/pan_id", pm_config.pan_id);
    b8aa:	4803      	ldr	r0, [pc, #12]	; (b8b8 <pm_conf_export+0x14>)
    b8ac:	4798      	blx	r3
    return 0;
}
    b8ae:	2000      	movs	r0, #0
    b8b0:	bd08      	pop	{r3, pc}
    b8b2:	bf00      	nop
    b8b4:	200005cc 	.word	0x200005cc
    b8b8:	00021de6 	.word	0x00021de6

0000b8bc <first_free_slot_id>:
    return now_ms > le_ms;
}

static uint16_t
first_free_slot_id(uint16_t node_addr, uint16_t role)
{
    b8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b8c0:	4607      	mov	r7, r0
    b8c2:	b085      	sub	sp, #20
    b8c4:	4688      	mov	r8, r1
    int j;
    uint16_t slot_id=0;
    b8c6:	2400      	movs	r4, #0
    while (slot_id < 0xffff)
    {
        for (j=0;j<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);j++)
        {
            if (node_idx[j].addr == 0xffff || role != node_idx[j].role) {
    b8c8:	f64f 7aff 	movw	sl, #65535	; 0xffff
        for (j=0;j<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);j++)
    b8cc:	4d18      	ldr	r5, [pc, #96]	; (b930 <first_free_slot_id+0x74>)
    b8ce:	2600      	movs	r6, #0
    b8d0:	46ab      	mov	fp, r5
    int32_t now_ms = tv.tv_sec*1000 + tv.tv_usec/1000;
    b8d2:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
    b8d6:	e004      	b.n	b8e2 <first_free_slot_id+0x26>
        for (j=0;j<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);j++)
    b8d8:	3601      	adds	r6, #1
    b8da:	2e40      	cmp	r6, #64	; 0x40
    b8dc:	f105 0518 	add.w	r5, r5, #24
    b8e0:	d021      	beq.n	b926 <first_free_slot_id+0x6a>
            if (node_idx[j].addr == 0xffff || role != node_idx[j].role) {
    b8e2:	882b      	ldrh	r3, [r5, #0]
    b8e4:	4553      	cmp	r3, sl
    b8e6:	d0f7      	beq.n	b8d8 <first_free_slot_id+0x1c>
    b8e8:	7c2a      	ldrb	r2, [r5, #16]
    b8ea:	4542      	cmp	r2, r8
    b8ec:	d1f4      	bne.n	b8d8 <first_free_slot_id+0x1c>
                continue;
            }

            if (slot_id == node_idx[j].slot_id &&
    b8ee:	886a      	ldrh	r2, [r5, #2]
    b8f0:	42a2      	cmp	r2, r4
    b8f2:	d1f1      	bne.n	b8d8 <first_free_slot_id+0x1c>
    b8f4:	42bb      	cmp	r3, r7
    b8f6:	d0ef      	beq.n	b8d8 <first_free_slot_id+0x1c>
    os_get_uptime((struct os_timeval*)tvp);
    b8f8:	4668      	mov	r0, sp
    b8fa:	f7fe fbe7 	bl	a0cc <os_get_uptime>
    int32_t le_ms = node_idx[idx].lease_ends;
    b8fe:	6969      	ldr	r1, [r5, #20]
    if (le_ms==0) return false;
    b900:	b169      	cbz	r1, b91e <first_free_slot_id+0x62>
    int32_t now_ms = tv.tv_sec*1000 + tv.tv_usec/1000;
    b902:	9a00      	ldr	r2, [sp, #0]
    b904:	9b02      	ldr	r3, [sp, #8]
    b906:	fb93 f3f9 	sdiv	r3, r3, r9
    b90a:	fb09 3302 	mla	r3, r9, r2, r3
                node_addr != node_idx[j].addr &&
    b90e:	4299      	cmp	r1, r3
    b910:	da05      	bge.n	b91e <first_free_slot_id+0x62>
                (slot_lease_expired(j) == false || node_idx[j].has_perm_slot)
    b912:	2318      	movs	r3, #24
    b914:	fb03 b306 	mla	r3, r3, r6, fp
    b918:	7c5b      	ldrb	r3, [r3, #17]
    b91a:	07db      	lsls	r3, r3, #31
    b91c:	d5dc      	bpl.n	b8d8 <first_free_slot_id+0x1c>
            }
        }

        return slot_id;
    next_slot:
        slot_id++;
    b91e:	3401      	adds	r4, #1
    b920:	b2a4      	uxth	r4, r4
    while (slot_id < 0xffff)
    b922:	4554      	cmp	r4, sl
    b924:	d1d2      	bne.n	b8cc <first_free_slot_id+0x10>
    }

    return 0xffff;
}
    b926:	4620      	mov	r0, r4
    b928:	b005      	add	sp, #20
    b92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b92e:	bf00      	nop
    b930:	20003480 	.word	0x20003480

0000b934 <pm_conf_commit>:
{
    b934:	b508      	push	{r3, lr}
    conf_value_from_str(pm_config.pan_id, CONF_INT16,
    b936:	4a04      	ldr	r2, [pc, #16]	; (b948 <pm_conf_commit+0x14>)
    b938:	4804      	ldr	r0, [pc, #16]	; (b94c <pm_conf_commit+0x18>)
    b93a:	2300      	movs	r3, #0
    b93c:	2103      	movs	r1, #3
    b93e:	f005 ff4b 	bl	117d8 <conf_value_from_str>
}
    b942:	2000      	movs	r0, #0
    b944:	bd08      	pop	{r3, pc}
    b946:	bf00      	nop
    b948:	20003b78 	.word	0x20003b78
    b94c:	200005cc 	.word	0x200005cc

0000b950 <pm_conf_set>:
    if (argc == 1) {
    b950:	2801      	cmp	r0, #1
{
    b952:	b510      	push	{r4, lr}
    b954:	460b      	mov	r3, r1
    b956:	4614      	mov	r4, r2
    if (argc == 1) {
    b958:	d10c      	bne.n	b974 <pm_conf_set+0x24>
        if (!strcmp(argv[0], "pan_id")) {
    b95a:	4907      	ldr	r1, [pc, #28]	; (b978 <pm_conf_set+0x28>)
    b95c:	6818      	ldr	r0, [r3, #0]
    b95e:	f003 fe73 	bl	f648 <strcmp>
    b962:	b938      	cbnz	r0, b974 <pm_conf_set+0x24>
            return CONF_VALUE_SET(val, CONF_STRING, pm_config.pan_id);
    b964:	4620      	mov	r0, r4
    b966:	4a05      	ldr	r2, [pc, #20]	; (b97c <pm_conf_set+0x2c>)
}
    b968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            return CONF_VALUE_SET(val, CONF_STRING, pm_config.pan_id);
    b96c:	2308      	movs	r3, #8
    b96e:	2106      	movs	r1, #6
    b970:	f005 bf32 	b.w	117d8 <conf_value_from_str>
}
    b974:	200a      	movs	r0, #10
    b976:	bd10      	pop	{r4, pc}
    b978:	00021dee 	.word	0x00021dee
    b97c:	200005cc 	.word	0x200005cc

0000b980 <pm_conf_get>:
    if (argc == 1) {
    b980:	2801      	cmp	r0, #1
{
    b982:	b508      	push	{r3, lr}
    b984:	460b      	mov	r3, r1
    if (argc == 1) {
    b986:	d108      	bne.n	b99a <pm_conf_get+0x1a>
        if (!strcmp(argv[0], "pan_id")) {
    b988:	4905      	ldr	r1, [pc, #20]	; (b9a0 <pm_conf_get+0x20>)
    b98a:	6818      	ldr	r0, [r3, #0]
    b98c:	f003 fe5c 	bl	f648 <strcmp>
            return pm_config.pan_id;
    b990:	2800      	cmp	r0, #0
    b992:	4804      	ldr	r0, [pc, #16]	; (b9a4 <pm_conf_get+0x24>)
    b994:	bf18      	it	ne
    b996:	2000      	movne	r0, #0
}
    b998:	bd08      	pop	{r3, pc}
    return NULL;
    b99a:	2000      	movs	r0, #0
    b99c:	e7fc      	b.n	b998 <pm_conf_get+0x18>
    b99e:	bf00      	nop
    b9a0:	00021dee 	.word	0x00021dee
    b9a4:	200005cc 	.word	0x200005cc

0000b9a8 <panmaster_node_idx>:
    *node_idx_arg = node_idx;
    b9a8:	4b02      	ldr	r3, [pc, #8]	; (b9b4 <panmaster_node_idx+0xc>)
    b9aa:	6003      	str	r3, [r0, #0]
    *num_nodes = MYNEWT_VAL(PANMASTER_MAXNUM_NODES);
    b9ac:	2340      	movs	r3, #64	; 0x40
    b9ae:	600b      	str	r3, [r1, #0]
}
    b9b0:	4770      	bx	lr
    b9b2:	bf00      	nop
    b9b4:	20003480 	.word	0x20003480

0000b9b8 <panmaster_find_node_general>:
{
    b9b8:	4601      	mov	r1, r0
    return panm_fcb_find_node(&pm_init_conf_fcb, fns);
    b9ba:	4801      	ldr	r0, [pc, #4]	; (b9c0 <panmaster_find_node_general+0x8>)
    b9bc:	f000 bf18 	b.w	c7f0 <panm_fcb_find_node>
    b9c0:	200005d4 	.word	0x200005d4

0000b9c4 <panmaster_clear_list>:
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    b9c4:	4b08      	ldr	r3, [pc, #32]	; (b9e8 <panmaster_clear_list+0x24>)
{
    b9c6:	b510      	push	{r4, lr}
        PANMASTER_NODE_IDX_DEFAULT(node_idx[i]);
    b9c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
    b9cc:	2440      	movs	r4, #64	; 0x40
        PANMASTER_NODE_IDX_DEFAULT(node_idx[i]);
    b9ce:	2100      	movs	r1, #0
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    b9d0:	3c01      	subs	r4, #1
        PANMASTER_NODE_IDX_DEFAULT(node_idx[i]);
    b9d2:	801a      	strh	r2, [r3, #0]
    b9d4:	805a      	strh	r2, [r3, #2]
    b9d6:	7419      	strb	r1, [r3, #16]
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    b9d8:	f103 0318 	add.w	r3, r3, #24
    b9dc:	d1f8      	bne.n	b9d0 <panmaster_clear_list+0xc>
    panm_fcb_clear(&pm_init_conf_fcb);
    b9de:	4803      	ldr	r0, [pc, #12]	; (b9ec <panmaster_clear_list+0x28>)
    b9e0:	f000 ff90 	bl	c904 <panm_fcb_clear>
}
    b9e4:	4620      	mov	r0, r4
    b9e6:	bd10      	pop	{r4, pc}
    b9e8:	20003480 	.word	0x20003480
    b9ec:	200005d4 	.word	0x200005d4

0000b9f0 <panmaster_idx_find_node>:
    return (i!=slots) ? true : false;
}

int
panmaster_idx_find_node(uint64_t euid, uint16_t role, struct panmaster_node **results)
{
    b9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b9f4:	4607      	mov	r7, r0
    b9f6:	b085      	sub	sp, #20
    b9f8:	4688      	mov	r8, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    b9fa:	486c      	ldr	r0, [pc, #432]	; (bbac <panmaster_idx_find_node+0x1bc>)
    b9fc:	2100      	movs	r1, #0
    b9fe:	4616      	mov	r6, r2
    ba00:	4699      	mov	r9, r3
    ba02:	f7fe feb3 	bl	a76c <os_mutex_pend>
    if (dpl_mutex_pend(&save_mutex, 0) != DPL_OK) {
    ba06:	b118      	cbz	r0, ba10 <panmaster_idx_find_node+0x20>
    struct dpl_timeval utctime;
    struct panmaster_node *node;
    bool node_is_found = false;

    if (!find_first_empty_nodes_to_save(euid, &node)) {
        return 1;
    ba08:	2001      	movs	r0, #1
        node_idx[i].save_needed = 1;
        break;
    }

    return 0;
}
    ba0a:	b005      	add	sp, #20
    ba0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!nodes_to_save[i].euid) {
    ba10:	4967      	ldr	r1, [pc, #412]	; (bbb0 <panmaster_idx_find_node+0x1c0>)
    for (i=0;i < slots;i++) {
    ba12:	4605      	mov	r5, r0
        if (!nodes_to_save[i].euid) {
    ba14:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
    ba18:	440b      	add	r3, r1
    ba1a:	f8d3 c008 	ldr.w	ip, [r3, #8]
    ba1e:	68d8      	ldr	r0, [r3, #12]
    ba20:	ea5c 0000 	orrs.w	r0, ip, r0
    ba24:	d13f      	bne.n	baa6 <panmaster_idx_find_node+0xb6>
            nodes_to_save[i].euid = euid;
    ba26:	609f      	str	r7, [r3, #8]
    ba28:	f8c3 800c 	str.w	r8, [r3, #12]
            *results = &nodes_to_save[i];
    ba2c:	461c      	mov	r4, r3
    return (dpl_error_t)os_mutex_release(&mu->mu);
    ba2e:	485f      	ldr	r0, [pc, #380]	; (bbac <panmaster_idx_find_node+0x1bc>)
    ba30:	f7fe fe4a 	bl	a6c8 <os_mutex_release>
    if (!find_first_empty_nodes_to_save(euid, &node)) {
    ba34:	2d08      	cmp	r5, #8
    ba36:	d0e7      	beq.n	ba08 <panmaster_idx_find_node+0x18>
    ba38:	4b5e      	ldr	r3, [pc, #376]	; (bbb4 <panmaster_idx_find_node+0x1c4>)
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
    ba3a:	2500      	movs	r5, #0
    ba3c:	469a      	mov	sl, r3
        if (node_idx[i].addr == 0xffff) {
    ba3e:	f64f 7cff 	movw	ip, #65535	; 0xffff
    ba42:	8818      	ldrh	r0, [r3, #0]
    ba44:	4560      	cmp	r0, ip
    ba46:	d032      	beq.n	baae <panmaster_idx_find_node+0xbe>
        if (euid == node_idx[i].euid) {
    ba48:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
    ba4c:	4542      	cmp	r2, r8
    ba4e:	bf08      	it	eq
    ba50:	42b9      	cmpeq	r1, r7
    ba52:	d12c      	bne.n	baae <panmaster_idx_find_node+0xbe>
        node->role = node_idx[i].role;
    ba54:	2718      	movs	r7, #24
            node->index = i;
    ba56:	7525      	strb	r5, [r4, #20]
        *results = node;
    ba58:	f8c9 4000 	str.w	r4, [r9]
        node->euid = node_idx[i].euid;
    ba5c:	60e2      	str	r2, [r4, #12]
        node->role = node_idx[i].role;
    ba5e:	fb07 a205 	mla	r2, r7, r5, sl
        node->euid = node_idx[i].euid;
    ba62:	60a1      	str	r1, [r4, #8]
        node->addr = node_idx[i].addr;
    ba64:	8220      	strh	r0, [r4, #16]
        node->has_perm_slot = node_idx[i].has_perm_slot;
    ba66:	7c53      	ldrb	r3, [r2, #17]
    ba68:	7c11      	ldrb	r1, [r2, #16]
        node->slot_id = node_idx[node->index].slot_id;
    ba6a:	8852      	ldrh	r2, [r2, #2]
    ba6c:	f8a4 2015 	strh.w	r2, [r4, #21]
        node->has_perm_slot = node_idx[i].has_perm_slot;
    ba70:	f3c3 0300 	ubfx	r3, r3, #0, #1
    ba74:	00db      	lsls	r3, r3, #3
    ba76:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    ba7a:	7ce1      	ldrb	r1, [r4, #19]
    ba7c:	f001 0107 	and.w	r1, r1, #7
    ba80:	430b      	orrs	r3, r1
    ba82:	74e3      	strb	r3, [r4, #19]
        if (!node->has_perm_slot) {
    ba84:	071b      	lsls	r3, r3, #28
    ba86:	d408      	bmi.n	ba9a <panmaster_idx_find_node+0xaa>
            node->slot_id = first_free_slot_id(node->addr, role);
    ba88:	4631      	mov	r1, r6
    ba8a:	f7ff ff17 	bl	b8bc <first_free_slot_id>
            node_idx[node->index].slot_id = node->slot_id;
    ba8e:	7d23      	ldrb	r3, [r4, #20]
            node->slot_id = first_free_slot_id(node->addr, role);
    ba90:	f8a4 0015 	strh.w	r0, [r4, #21]
            node_idx[node->index].slot_id = node->slot_id;
    ba94:	fb07 a703 	mla	r7, r7, r3, sl
    ba98:	8078      	strh	r0, [r7, #2]
        if (node->role != role && role > 0) {
    ba9a:	7ce3      	ldrb	r3, [r4, #19]
    ba9c:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
    baa0:	d11b      	bne.n	bada <panmaster_idx_find_node+0xea>
    return 0;
    baa2:	2000      	movs	r0, #0
        break;
    baa4:	e7b1      	b.n	ba0a <panmaster_idx_find_node+0x1a>
    for (i=0;i < slots;i++) {
    baa6:	3501      	adds	r5, #1
    baa8:	2d08      	cmp	r5, #8
    baaa:	d1b3      	bne.n	ba14 <panmaster_idx_find_node+0x24>
    baac:	e7bf      	b.n	ba2e <panmaster_idx_find_node+0x3e>
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
    baae:	3501      	adds	r5, #1
    bab0:	2d40      	cmp	r5, #64	; 0x40
    bab2:	f103 0318 	add.w	r3, r3, #24
    bab6:	d1c4      	bne.n	ba42 <panmaster_idx_find_node+0x52>
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    bab8:	f04f 0b00 	mov.w	fp, #0
        if (node_idx[i].addr != 0xffff) {
    babc:	2318      	movs	r3, #24
    babe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    bac2:	fb03 f10b 	mul.w	r1, r3, fp
    bac6:	f83a 1001 	ldrh.w	r1, [sl, r1]
    baca:	4291      	cmp	r1, r2
    bacc:	d012      	beq.n	baf4 <panmaster_idx_find_node+0x104>
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    bace:	f10b 0b01 	add.w	fp, fp, #1
    bad2:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
    bad6:	d1f4      	bne.n	bac2 <panmaster_idx_find_node+0xd2>
    bad8:	e7e3      	b.n	baa2 <panmaster_idx_find_node+0xb2>
        if (node->role != role && role > 0) {
    bada:	2e00      	cmp	r6, #0
    badc:	d0e1      	beq.n	baa2 <panmaster_idx_find_node+0xb2>
            node->role = role;
    bade:	f366 1307 	bfi	r3, r6, #4, #4
    bae2:	74e3      	strb	r3, [r4, #19]
            node_idx[i].save_needed = 1;
    bae4:	2318      	movs	r3, #24
    bae6:	fb03 a505 	mla	r5, r3, r5, sl
        node_idx[i].save_needed = 1;
    baea:	7c6b      	ldrb	r3, [r5, #17]
    baec:	f043 0302 	orr.w	r3, r3, #2
    baf0:	746b      	strb	r3, [r5, #17]
    baf2:	e7d6      	b.n	baa2 <panmaster_idx_find_node+0xb2>
        PANMASTER_NODE_DEFAULT(*node);
    baf4:	2500      	movs	r5, #0
    baf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bafa:	7025      	strb	r5, [r4, #0]
    bafc:	7065      	strb	r5, [r4, #1]
    bafe:	70a5      	strb	r5, [r4, #2]
    bb00:	70e5      	strb	r5, [r4, #3]
    bb02:	7125      	strb	r5, [r4, #4]
    bb04:	7165      	strb	r5, [r4, #5]
    bb06:	71a5      	strb	r5, [r4, #6]
    bb08:	71e5      	strb	r5, [r4, #7]
    bb0a:	7225      	strb	r5, [r4, #8]
    bb0c:	7265      	strb	r5, [r4, #9]
    bb0e:	72a5      	strb	r5, [r4, #10]
    bb10:	72e5      	strb	r5, [r4, #11]
    bb12:	7325      	strb	r5, [r4, #12]
    bb14:	7365      	strb	r5, [r4, #13]
    bb16:	73a5      	strb	r5, [r4, #14]
    bb18:	73e5      	strb	r5, [r4, #15]
    bb1a:	7423      	strb	r3, [r4, #16]
    bb1c:	7463      	strb	r3, [r4, #17]
    bb1e:	74a5      	strb	r5, [r4, #18]
    bb20:	74e5      	strb	r5, [r4, #19]
    bb22:	7525      	strb	r5, [r4, #20]
    bb24:	7563      	strb	r3, [r4, #21]
    bb26:	75a3      	strb	r3, [r4, #22]
    bb28:	75e5      	strb	r5, [r4, #23]
    bb2a:	7625      	strb	r5, [r4, #24]
    bb2c:	7665      	strb	r5, [r4, #25]
    bb2e:	76a5      	strb	r5, [r4, #26]
    bb30:	76e5      	strb	r5, [r4, #27]
    bb32:	7725      	strb	r5, [r4, #28]
    bb34:	7765      	strb	r5, [r4, #29]
    bb36:	77a5      	strb	r5, [r4, #30]
    return os_gettimeofday((struct os_timeval*)tv, (struct os_timezone*)tz);
    bb38:	4629      	mov	r1, r5
    bb3a:	4668      	mov	r0, sp
    bb3c:	f7fe fa44 	bl	9fc8 <os_gettimeofday>
        node->euid = euid;
    bb40:	60a7      	str	r7, [r4, #8]
    bb42:	f8c4 800c 	str.w	r8, [r4, #12]
    uint16_t addr = euid&0xffff;
    bb46:	b2b8      	uxth	r0, r7
            addr = (i<<12) | (euid&0x0fff);
    bb48:	f3c7 020b 	ubfx	r2, r7, #0, #12
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    bb4c:	2300      	movs	r3, #0
            if (addr == node_idx[j].addr)
    bb4e:	f83a 1013 	ldrh.w	r1, [sl, r3, lsl #1]
    bb52:	4281      	cmp	r1, r0
    bb54:	d004      	beq.n	bb60 <panmaster_idx_find_node+0x170>
        for (j=0;j<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);j++)
    bb56:	330c      	adds	r3, #12
    bb58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    bb5c:	d1f7      	bne.n	bb4e <panmaster_idx_find_node+0x15e>
        if (addr) {
    bb5e:	b918      	cbnz	r0, bb68 <panmaster_idx_find_node+0x178>
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    bb60:	3501      	adds	r5, #1
    bb62:	2d40      	cmp	r5, #64	; 0x40
    bb64:	d11e      	bne.n	bba4 <panmaster_idx_find_node+0x1b4>
    bb66:	2000      	movs	r0, #0
        node_idx[i].addr = node->addr;
    bb68:	2318      	movs	r3, #24
    bb6a:	fb03 f30b 	mul.w	r3, r3, fp
    bb6e:	eb0a 0503 	add.w	r5, sl, r3
        node_idx[i].euid = node->euid;
    bb72:	e9c5 7802 	strd	r7, r8, [r5, #8]
        node_idx[i].addr = node->addr;
    bb76:	f82a 0003 	strh.w	r0, [sl, r3]
        node_idx[i].role = role;
    bb7a:	742e      	strb	r6, [r5, #16]
        node->role = role;
    bb7c:	7ce3      	ldrb	r3, [r4, #19]
        node->addr = first_free_short_addr(euid);
    bb7e:	8220      	strh	r0, [r4, #16]
        node->role = role;
    bb80:	f366 1307 	bfi	r3, r6, #4, #4
    bb84:	74e3      	strb	r3, [r4, #19]
        node->slot_id = first_free_slot_id(node->addr, role);
    bb86:	4631      	mov	r1, r6
    bb88:	f7ff fe98 	bl	b8bc <first_free_slot_id>
        node->first_seen_utc = utctime.tv_sec;
    bb8c:	9b00      	ldr	r3, [sp, #0]
    bb8e:	6023      	str	r3, [r4, #0]
    bb90:	9b01      	ldr	r3, [sp, #4]
        node->slot_id = first_free_slot_id(node->addr, role);
    bb92:	f8a4 0015 	strh.w	r0, [r4, #21]
        node_idx[i].slot_id = node->slot_id;
    bb96:	8068      	strh	r0, [r5, #2]
        node->first_seen_utc = utctime.tv_sec;
    bb98:	6063      	str	r3, [r4, #4]
        node->index = i;
    bb9a:	f884 b014 	strb.w	fp, [r4, #20]
        *results = node;
    bb9e:	f8c9 4000 	str.w	r4, [r9]
    bba2:	e7a2      	b.n	baea <panmaster_idx_find_node+0xfa>
            addr = (i<<12) | (euid&0x0fff);
    bba4:	ea42 3005 	orr.w	r0, r2, r5, lsl #12
    bba8:	b280      	uxth	r0, r0
    bbaa:	e7cf      	b.n	bb4c <panmaster_idx_find_node+0x15c>
    bbac:	20003c48 	.word	0x20003c48
    bbb0:	20003a80 	.word	0x20003a80
    bbb4:	20003480 	.word	0x20003480

0000bbb8 <panrequest_cb>:
{
    bbb8:	b570      	push	{r4, r5, r6, lr}
    bbba:	b086      	sub	sp, #24
    bbbc:	461c      	mov	r4, r3
    struct panmaster_node *node = 0;
    bbbe:	2300      	movs	r3, #0
    bbc0:	9301      	str	r3, [sp, #4]
{
    bbc2:	4615      	mov	r5, r2
    panmaster_idx_find_node(euid, request->role, &node);
    bbc4:	ab01      	add	r3, sp, #4
    bbc6:	8812      	ldrh	r2, [r2, #0]
    bbc8:	f7ff ff12 	bl	b9f0 <panmaster_idx_find_node>
    if (!node) {
    bbcc:	9801      	ldr	r0, [sp, #4]
    bbce:	2800      	cmp	r0, #0
    bbd0:	d02f      	beq.n	bc32 <panrequest_cb+0x7a>
    memcpy(&node->fw_ver, &request->fw_ver, sizeof(struct pan_image_version));
    bbd2:	686b      	ldr	r3, [r5, #4]
    bbd4:	f8c0 3017 	str.w	r3, [r0, #23]
    bbd8:	68ab      	ldr	r3, [r5, #8]
    response->short_address = node->addr;
    bbda:	7c42      	ldrb	r2, [r0, #17]
    memcpy(&node->fw_ver, &request->fw_ver, sizeof(struct pan_image_version));
    bbdc:	f8c0 301b 	str.w	r3, [r0, #27]
    response->short_address = node->addr;
    bbe0:	7c03      	ldrb	r3, [r0, #16]
    response->slot_id = node_idx[node->index].slot_id;
    bbe2:	4e15      	ldr	r6, [pc, #84]	; (bc38 <panrequest_cb+0x80>)
    response->short_address = node->addr;
    bbe4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    bbe8:	80e3      	strh	r3, [r4, #6]
    response->slot_id = node_idx[node->index].slot_id;
    bbea:	7d03      	ldrb	r3, [r0, #20]
    bbec:	2218      	movs	r2, #24
    bbee:	fb02 6303 	mla	r3, r2, r3, r6
    os_get_uptime((struct os_timeval*)tvp);
    bbf2:	a802      	add	r0, sp, #8
    bbf4:	885b      	ldrh	r3, [r3, #2]
    bbf6:	8123      	strh	r3, [r4, #8]
    bbf8:	f7fe fa68 	bl	a0cc <os_get_uptime>
    if (response->lease_time == 0) {
    bbfc:	8863      	ldrh	r3, [r4, #2]
    bbfe:	b90b      	cbnz	r3, bc04 <panrequest_cb+0x4c>
        response->lease_time = MYNEWT_VAL(PANMASTER_DEFAULT_LEASE_TIME);
    bc00:	231e      	movs	r3, #30
    bc02:	8063      	strh	r3, [r4, #2]
    node_idx[node->index].lease_ends = tv.tv_sec*1000 + tv.tv_usec/1000 + (uint32_t)request->lease_time*1000;
    bc04:	9901      	ldr	r1, [sp, #4]
    bc06:	7d0b      	ldrb	r3, [r1, #20]
    bc08:	2218      	movs	r2, #24
    bc0a:	fb02 6603 	mla	r6, r2, r3, r6
    bc0e:	886b      	ldrh	r3, [r5, #2]
    bc10:	9a02      	ldr	r2, [sp, #8]
    bc12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    bc16:	441a      	add	r2, r3
    bc18:	9b04      	ldr	r3, [sp, #16]
    bc1a:	fb93 f3f0 	sdiv	r3, r3, r0
    bc1e:	fb00 3302 	mla	r3, r0, r2, r3
    bc22:	6173      	str	r3, [r6, #20]
    response->pan_id = pan_id;
    bc24:	4b05      	ldr	r3, [pc, #20]	; (bc3c <panrequest_cb+0x84>)
    bc26:	881b      	ldrh	r3, [r3, #0]
    bc28:	80a3      	strh	r3, [r4, #4]
    response->role = node->role;
    bc2a:	7ccb      	ldrb	r3, [r1, #19]
    bc2c:	091b      	lsrs	r3, r3, #4
    bc2e:	8023      	strh	r3, [r4, #0]
    return true;
    bc30:	2001      	movs	r0, #1
}
    bc32:	b006      	add	sp, #24
    bc34:	bd70      	pop	{r4, r5, r6, pc}
    bc36:	bf00      	nop
    bc38:	20003480 	.word	0x20003480
    bc3c:	20003b78 	.word	0x20003b78

0000bc40 <panmaster_load>:

int
panmaster_load(panm_load_cb cb, void *cb_arg)
{
    bc40:	460a      	mov	r2, r1
#if MYNEWT_VAL(PANMASTER_NFFS)
    return panm_file_load(&panmaster_storage_file, cb, cb_arg);
#elif MYNEWT_VAL(PANMASTER_FCB)
    return panm_fcb_load(&pm_init_conf_fcb, cb, cb_arg);
    bc42:	4601      	mov	r1, r0
    bc44:	4801      	ldr	r0, [pc, #4]	; (bc4c <panmaster_load+0xc>)
    bc46:	f000 bdbd 	b.w	c7c4 <panm_fcb_load>
    bc4a:	bf00      	nop
    bc4c:	200005d4 	.word	0x200005d4

0000bc50 <panmaster_save_node>:

int
panmaster_save_node(struct panmaster_node *node)
{
    /* Make sure index is up to date */
    node_idx[node->index].role = node->role;
    bc50:	7d02      	ldrb	r2, [r0, #20]
    bc52:	4b09      	ldr	r3, [pc, #36]	; (bc78 <panmaster_save_node+0x28>)
    bc54:	2118      	movs	r1, #24
    bc56:	fb01 3302 	mla	r3, r1, r2, r3
    bc5a:	7cc2      	ldrb	r2, [r0, #19]
    node_idx[node->index].has_perm_slot = node->has_perm_slot;
    bc5c:	7c59      	ldrb	r1, [r3, #17]
    node_idx[node->index].role = node->role;
    bc5e:	f3c2 1203 	ubfx	r2, r2, #4, #4
    bc62:	741a      	strb	r2, [r3, #16]
    node_idx[node->index].has_perm_slot = node->has_perm_slot;
    bc64:	7cc2      	ldrb	r2, [r0, #19]
    bc66:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    bc6a:	f362 0100 	bfi	r1, r2, #0, #1
    bc6e:	7459      	strb	r1, [r3, #17]

#if MYNEWT_VAL(PANMASTER_NFFS)
    return panm_file_save(&panmaster_storage_file, node);
#elif MYNEWT_VAL(PANMASTER_FCB)
    return panm_fcb_save(&pm_init_conf_fcb, node);
    bc70:	4601      	mov	r1, r0
    bc72:	4802      	ldr	r0, [pc, #8]	; (bc7c <panmaster_save_node+0x2c>)
    bc74:	f000 be1f 	b.w	c8b6 <panm_fcb_save>
    bc78:	20003480 	.word	0x20003480
    bc7c:	200005d4 	.word	0x200005d4

0000bc80 <panmaster_update_node>:
{
    bc80:	b570      	push	{r4, r5, r6, lr}
    bc82:	b092      	sub	sp, #72	; 0x48
    bc84:	4606      	mov	r6, r0
    bc86:	460d      	mov	r5, r1
    bc88:	4614      	mov	r4, r2
    struct find_node_s fns = { .results = &stored_node };
    bc8a:	2100      	movs	r1, #0
    bc8c:	2228      	movs	r2, #40	; 0x28
    bc8e:	a808      	add	r0, sp, #32
    bc90:	f003 fcb5 	bl	f5fe <memset>
    PANMASTER_NODE_DEFAULT(fns.find);
    bc94:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bc98:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    bc9c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    panmaster_find_node_general(&fns);
    bca0:	a808      	add	r0, sp, #32
    PANMASTER_NODE_DEFAULT(fns.find);
    bca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bca6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    fns.find.euid = euid;
    bcaa:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    struct find_node_s fns = { .results = &stored_node };
    bcae:	f8cd d040 	str.w	sp, [sp, #64]	; 0x40
    panmaster_find_node_general(&fns);
    bcb2:	f7ff fe81 	bl	b9b8 <panmaster_find_node_general>
    if (fns.is_found) {
    bcb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bcb8:	b1f3      	cbz	r3, bcf8 <panmaster_update_node+0x78>
        if (memcmp(&upd_node->fw_ver, &stored_node.fw_ver, sizeof(upd_node->fw_ver)) != 0 ||
    bcba:	2208      	movs	r2, #8
    bcbc:	f10d 0117 	add.w	r1, sp, #23
    bcc0:	f104 0017 	add.w	r0, r4, #23
    bcc4:	f003 fc6a 	bl	f59c <memcmp>
    bcc8:	b9b0      	cbnz	r0, bcf8 <panmaster_update_node+0x78>
    bcca:	e9dd 1300 	ldrd	r1, r3, [sp]
            upd_node->first_seen_utc != stored_node.first_seen_utc ||
    bcce:	6820      	ldr	r0, [r4, #0]
    bcd0:	6862      	ldr	r2, [r4, #4]
        if (memcmp(&upd_node->fw_ver, &stored_node.fw_ver, sizeof(upd_node->fw_ver)) != 0 ||
    bcd2:	429a      	cmp	r2, r3
    bcd4:	bf08      	it	eq
    bcd6:	4288      	cmpeq	r0, r1
    bcd8:	d10e      	bne.n	bcf8 <panmaster_update_node+0x78>
            upd_node->first_seen_utc != stored_node.first_seen_utc ||
    bcda:	8a22      	ldrh	r2, [r4, #16]
    bcdc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    bce0:	429a      	cmp	r2, r3
    bce2:	d109      	bne.n	bcf8 <panmaster_update_node+0x78>
            upd_node->addr != stored_node.addr ||
    bce4:	8a62      	ldrh	r2, [r4, #18]
    bce6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    bcea:	429a      	cmp	r2, r3
    bcec:	d104      	bne.n	bcf8 <panmaster_update_node+0x78>
            upd_node->flags != stored_node.flags ||
    bcee:	7d22      	ldrb	r2, [r4, #20]
    bcf0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    bcf4:	429a      	cmp	r2, r3
    bcf6:	d002      	beq.n	bcfe <panmaster_update_node+0x7e>
        panmaster_save_node(upd_node);
    bcf8:	4620      	mov	r0, r4
    bcfa:	f7ff ffa9 	bl	bc50 <panmaster_save_node>
}
    bcfe:	b012      	add	sp, #72	; 0x48
    bd00:	bd70      	pop	{r4, r5, r6, pc}
	...

0000bd04 <panmaster_postprocess>:
{
    bd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    bd08:	4823      	ldr	r0, [pc, #140]	; (bd98 <panmaster_postprocess+0x94>)
    bd0a:	b088      	sub	sp, #32
    bd0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    bd10:	f7fe fd2c 	bl	a76c <os_mutex_pend>
    if (dpl_mutex_pend(&save_mutex, DPL_WAIT_FOREVER) != DPL_OK) {
    bd14:	2800      	cmp	r0, #0
    bd16:	d13b      	bne.n	bd90 <panmaster_postprocess+0x8c>
    bd18:	4e20      	ldr	r6, [pc, #128]	; (bd9c <panmaster_postprocess+0x98>)
    return (dpl_error_t)os_mutex_release(&mu->mu);
    bd1a:	4f1f      	ldr	r7, [pc, #124]	; (bd98 <panmaster_postprocess+0x94>)
    for (i=0;i < slots;i++) {
    bd1c:	4604      	mov	r4, r0
    bd1e:	46b0      	mov	r8, r6
        if (nodes_to_save[i].euid) {
    bd20:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
    bd24:	4443      	add	r3, r8
    bd26:	689a      	ldr	r2, [r3, #8]
    bd28:	68db      	ldr	r3, [r3, #12]
    bd2a:	4313      	orrs	r3, r2
    bd2c:	d028      	beq.n	bd80 <panmaster_postprocess+0x7c>
            memcpy(&node, &nodes_to_save[i], sizeof(node));
    bd2e:	4633      	mov	r3, r6
    bd30:	466d      	mov	r5, sp
    bd32:	f106 0e18 	add.w	lr, r6, #24
    bd36:	6818      	ldr	r0, [r3, #0]
    bd38:	6859      	ldr	r1, [r3, #4]
    bd3a:	46ac      	mov	ip, r5
    bd3c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    bd40:	3308      	adds	r3, #8
    bd42:	4573      	cmp	r3, lr
    bd44:	4665      	mov	r5, ip
    bd46:	d1f6      	bne.n	bd36 <panmaster_postprocess+0x32>
    bd48:	6818      	ldr	r0, [r3, #0]
    bd4a:	f8cc 0000 	str.w	r0, [ip]
    bd4e:	8899      	ldrh	r1, [r3, #4]
    bd50:	799b      	ldrb	r3, [r3, #6]
    bd52:	f88c 3006 	strb.w	r3, [ip, #6]
    bd56:	f8ac 1004 	strh.w	r1, [ip, #4]
    bd5a:	4638      	mov	r0, r7
    bd5c:	f7fe fcb4 	bl	a6c8 <os_mutex_release>
            panmaster_update_node(node.euid, &node);
    bd60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    bd64:	466a      	mov	r2, sp
    bd66:	f7ff ff8b 	bl	bc80 <panmaster_update_node>
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    bd6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    bd6e:	4638      	mov	r0, r7
    bd70:	f7fe fcfc 	bl	a76c <os_mutex_pend>
            if (dpl_mutex_pend(&save_mutex, DPL_WAIT_FOREVER) != DPL_OK) {
    bd74:	4601      	mov	r1, r0
    bd76:	b958      	cbnz	r0, bd90 <panmaster_postprocess+0x8c>
            memset(&nodes_to_save[i], 0, sizeof(node));
    bd78:	221f      	movs	r2, #31
    bd7a:	4630      	mov	r0, r6
    bd7c:	f003 fc3f 	bl	f5fe <memset>
    for (i=0;i < slots;i++) {
    bd80:	3401      	adds	r4, #1
    bd82:	2c08      	cmp	r4, #8
    bd84:	f106 061f 	add.w	r6, r6, #31
    bd88:	d1ca      	bne.n	bd20 <panmaster_postprocess+0x1c>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    bd8a:	4803      	ldr	r0, [pc, #12]	; (bd98 <panmaster_postprocess+0x94>)
    bd8c:	f7fe fc9c 	bl	a6c8 <os_mutex_release>
}
    bd90:	b008      	add	sp, #32
    bd92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd96:	bf00      	nop
    bd98:	20003c48 	.word	0x20003c48
    bd9c:	20003a80 	.word	0x20003a80

0000bda0 <postprocess_cb>:
{
    bda0:	b508      	push	{r3, lr}
    assert(ev != NULL);
    bda2:	b928      	cbnz	r0, bdb0 <postprocess_cb+0x10>
    bda4:	2300      	movs	r3, #0
    bda6:	461a      	mov	r2, r3
    bda8:	4619      	mov	r1, r3
    bdaa:	4618      	mov	r0, r3
    bdac:	f7fd f8a2 	bl	8ef4 <__assert_func>
    return ev->ev.ev_arg;
    bdb0:	6883      	ldr	r3, [r0, #8]
    assert(dpl_event_get_arg(ev));
    bdb2:	2b00      	cmp	r3, #0
    bdb4:	d0f6      	beq.n	bda4 <postprocess_cb+0x4>
    if (pan->config->role != UWB_PAN_ROLE_MASTER) {
    bdb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    bdba:	7adb      	ldrb	r3, [r3, #11]
    bdbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    bdc0:	2b10      	cmp	r3, #16
    bdc2:	d103      	bne.n	bdcc <postprocess_cb+0x2c>
}
    bdc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    panmaster_postprocess();
    bdc8:	f7ff bf9c 	b.w	bd04 <panmaster_postprocess>
}
    bdcc:	bd08      	pop	{r3, pc}
	...

0000bdd0 <panmaster_add_node>:
{
    bdd0:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
    bdd4:	b09a      	sub	sp, #104	; 0x68
    bdd6:	4605      	mov	r5, r0
    bdd8:	4614      	mov	r4, r2
    struct find_node_s fns = { .results = &node };
    bdda:	2100      	movs	r1, #0
    bddc:	2228      	movs	r2, #40	; 0x28
    bdde:	a810      	add	r0, sp, #64	; 0x40
    bde0:	af08      	add	r7, sp, #32
    bde2:	f003 fc0c 	bl	f5fe <memset>
    bde6:	9718      	str	r7, [sp, #96]	; 0x60
    if (short_addr==0) {
    bde8:	2d00      	cmp	r5, #0
    bdea:	d036      	beq.n	be5a <panmaster_add_node+0x8a>
    bdec:	1e62      	subs	r2, r4, #1
    bdee:	1de1      	adds	r1, r4, #7
    rc = 1;
    bdf0:	2301      	movs	r3, #1
    for (i=0;i<sizeof(uint64_t)&&rc;i++) {
    bdf2:	428a      	cmp	r2, r1
    bdf4:	d02f      	beq.n	be56 <panmaster_add_node+0x86>
    bdf6:	bb3b      	cbnz	r3, be48 <panmaster_add_node+0x78>
    memcpy(&euid, euid_u8, sizeof(uint64_t));
    bdf8:	6820      	ldr	r0, [r4, #0]
    bdfa:	6861      	ldr	r1, [r4, #4]
    bdfc:	ab02      	add	r3, sp, #8
    bdfe:	c303      	stmia	r3!, {r0, r1}
    fns.find.euid = euid;
    be00:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    PANMASTER_NODE_DEFAULT(fns.find);
    be04:	f64f 76ff 	movw	r6, #65535	; 0xffff
    be08:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    panmaster_find_node_general(&fns);
    be0c:	a810      	add	r0, sp, #64	; 0x40
    fns.find.euid = euid;
    be0e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
    PANMASTER_NODE_DEFAULT(fns.find);
    be12:	f8ad 6050 	strh.w	r6, [sp, #80]	; 0x50
    be16:	f88d 6055 	strb.w	r6, [sp, #85]	; 0x55
    be1a:	f88d 8056 	strb.w	r8, [sp, #86]	; 0x56
    panmaster_find_node_general(&fns);
    be1e:	f7ff fdcb 	bl	b9b8 <panmaster_find_node_general>
    if (fns.is_found)
    be22:	9c19      	ldr	r4, [sp, #100]	; 0x64
    be24:	b1e4      	cbz	r4, be60 <panmaster_add_node+0x90>
        if (node.addr == short_addr) {
    be26:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    be2a:	42ab      	cmp	r3, r5
    be2c:	d015      	beq.n	be5a <panmaster_add_node+0x8a>
        panm_fcb_save(&pm_init_conf_fcb, &node);
    be2e:	4837      	ldr	r0, [pc, #220]	; (bf0c <panmaster_add_node+0x13c>)
        node.addr = short_addr;
    be30:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
        panm_fcb_save(&pm_init_conf_fcb, &node);
    be34:	4639      	mov	r1, r7
    be36:	f000 fd3e 	bl	c8b6 <panm_fcb_save>
        PM_DEBUG("panm: node upd\n");
    be3a:	4b35      	ldr	r3, [pc, #212]	; (bf10 <panmaster_add_node+0x140>)
        PM_DEBUG("panm: node added\n");
    be3c:	4835      	ldr	r0, [pc, #212]	; (bf14 <panmaster_add_node+0x144>)
    be3e:	2200      	movs	r2, #0
    be40:	215b      	movs	r1, #91	; 0x5b
    be42:	f006 fe3f 	bl	12ac4 <log_printf>
        return;
    be46:	e008      	b.n	be5a <panmaster_add_node+0x8a>
        if (euid_u8[i]!=0xff) {
    be48:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    be4c:	f1a3 00ff 	sub.w	r0, r3, #255	; 0xff
    be50:	4243      	negs	r3, r0
    be52:	4143      	adcs	r3, r0
    for (i=0;i<sizeof(uint64_t)&&rc;i++) {
    be54:	e7cd      	b.n	bdf2 <panmaster_add_node+0x22>
    if (rc==1) {
    be56:	2b00      	cmp	r3, #0
    be58:	d0ce      	beq.n	bdf8 <panmaster_add_node+0x28>
}
    be5a:	b01a      	add	sp, #104	; 0x68
    be5c:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
    PANMASTER_NODE_DEFAULT(node);
    be60:	2300      	movs	r3, #0
    be62:	2200      	movs	r2, #0
    be64:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
        if (node_idx[i].addr != 0xffff) {
    be68:	f8df 80b4 	ldr.w	r8, [pc, #180]	; bf20 <panmaster_add_node+0x150>
    PANMASTER_NODE_DEFAULT(node);
    be6c:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
    be70:	e9cd 2308 	strd	r2, r3, [sp, #32]
    be74:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    be78:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
    be7c:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
    be80:	f88d 6036 	strb.w	r6, [sp, #54]	; 0x36
    be84:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
    be88:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    be8c:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
    be90:	f88d 403a 	strb.w	r4, [sp, #58]	; 0x3a
    be94:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
    be98:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    be9c:	f88d 403d 	strb.w	r4, [sp, #61]	; 0x3d
    bea0:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
        if (node_idx[i].addr != 0xffff) {
    bea4:	2318      	movs	r3, #24
    bea6:	fb03 f204 	mul.w	r2, r3, r4
    beaa:	f832 2008 	ldrh.w	r2, [r2, r8]
    beae:	42b2      	cmp	r2, r6
    beb0:	d003      	beq.n	beba <panmaster_add_node+0xea>
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    beb2:	3401      	adds	r4, #1
    beb4:	2c40      	cmp	r4, #64	; 0x40
    beb6:	d1f6      	bne.n	bea6 <panmaster_add_node+0xd6>
    beb8:	e7cf      	b.n	be5a <panmaster_add_node+0x8a>
    return os_gettimeofday((struct os_timeval*)tv, (struct os_timezone*)tz);
    beba:	2100      	movs	r1, #0
    bebc:	a804      	add	r0, sp, #16
    bebe:	f7fe f883 	bl	9fc8 <os_gettimeofday>
        node.euid = euid;
    bec2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
    bec6:	2300      	movs	r3, #0
        if (addr == node_idx[j].addr)
    bec8:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
    becc:	42aa      	cmp	r2, r5
    bece:	d014      	beq.n	befa <panmaster_add_node+0x12a>
    for (j=0;j<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);j++)
    bed0:	330c      	adds	r3, #12
    bed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    bed6:	d1f7      	bne.n	bec8 <panmaster_add_node+0xf8>
        node_idx[i].addr = node.addr;
    bed8:	2318      	movs	r3, #24
    beda:	4363      	muls	r3, r4
        panmaster_save_node(&node);
    bedc:	4638      	mov	r0, r7
        node_idx[i].addr = node.addr;
    bede:	f828 5003 	strh.w	r5, [r8, r3]
        node.first_seen_utc = utctime.tv_sec;
    bee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
        node.addr = short_addr;
    bee6:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
        node.first_seen_utc = utctime.tv_sec;
    beea:	e9cd 2308 	strd	r2, r3, [sp, #32]
        node.index = i;
    beee:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
        panmaster_save_node(&node);
    bef2:	f7ff fead 	bl	bc50 <panmaster_save_node>
        PM_DEBUG("panm: node added\n");
    bef6:	4b08      	ldr	r3, [pc, #32]	; (bf18 <panmaster_add_node+0x148>)
    bef8:	e7a0      	b.n	be3c <panmaster_add_node+0x6c>
            PM_ERR("Dupl short addr %x\n", short_addr);
    befa:	4b08      	ldr	r3, [pc, #32]	; (bf1c <panmaster_add_node+0x14c>)
    befc:	4805      	ldr	r0, [pc, #20]	; (bf14 <panmaster_add_node+0x144>)
    befe:	9500      	str	r5, [sp, #0]
    bf00:	2203      	movs	r2, #3
    bf02:	215b      	movs	r1, #91	; 0x5b
    bf04:	f006 fdde 	bl	12ac4 <log_printf>
    bf08:	e7e6      	b.n	bed8 <panmaster_add_node+0x108>
    bf0a:	bf00      	nop
    bf0c:	200005d4 	.word	0x200005d4
    bf10:	00021df5 	.word	0x00021df5
    bf14:	20003464 	.word	0x20003464
    bf18:	00021e05 	.word	0x00021e05
    bf1c:	00021e17 	.word	0x00021e17
    bf20:	20003480 	.word	0x20003480

0000bf24 <panmaster_delete_node>:
{
    bf24:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf26:	b093      	sub	sp, #76	; 0x4c
    bf28:	4606      	mov	r6, r0
    bf2a:	460d      	mov	r5, r1
    struct find_node_s fns = { .results = &node };
    bf2c:	2228      	movs	r2, #40	; 0x28
    bf2e:	2100      	movs	r1, #0
    bf30:	a808      	add	r0, sp, #32
    bf32:	f003 fb64 	bl	f5fe <memset>
    PANMASTER_NODE_DEFAULT(fns.find);
    bf36:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    bf3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    panmaster_find_node_general(&fns);
    bf3e:	a808      	add	r0, sp, #32
    PANMASTER_NODE_DEFAULT(fns.find);
    bf40:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    bf44:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    fns.find.euid = euid;
    bf48:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    struct find_node_s fns = { .results = &node };
    bf4c:	f8cd d040 	str.w	sp, [sp, #64]	; 0x40
    PANMASTER_NODE_DEFAULT(fns.find);
    bf50:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
    panmaster_find_node_general(&fns);
    bf54:	f7ff fd30 	bl	b9b8 <panmaster_find_node_general>
    if (!fns.is_found) {
    bf58:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bf5a:	b313      	cbz	r3, bfa2 <panmaster_delete_node+0x7e>
    if (node.index >= MYNEWT_VAL(PANMASTER_MAXNUM_NODES)) {
    bf5c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    bf60:	2b3f      	cmp	r3, #63	; 0x3f
    bf62:	d81e      	bhi.n	bfa2 <panmaster_delete_node+0x7e>
    if (node_idx[node.index].addr != node.addr)
    bf64:	2218      	movs	r2, #24
    bf66:	4910      	ldr	r1, [pc, #64]	; (bfa8 <panmaster_delete_node+0x84>)
    bf68:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    bf6c:	4353      	muls	r3, r2
    bf6e:	18ca      	adds	r2, r1, r3
    bf70:	5acd      	ldrh	r5, [r1, r3]
    bf72:	4285      	cmp	r5, r0
    bf74:	d115      	bne.n	bfa2 <panmaster_delete_node+0x7e>
    node_idx[node.index].euid = 0xFFFFFFFFFFFFFFFFULL;
    bf76:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    bf7a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    bf7e:	e9c2 6702 	strd	r6, r7, [r2, #8]
    node.addr = 0xFFFF;
    bf82:	f8ad 4010 	strh.w	r4, [sp, #16]
    node_idx[node.index].addr = 0xFFFF;
    bf86:	50cc      	str	r4, [r1, r3]
    node_idx[node.index].has_perm_slot = 0;
    bf88:	7c53      	ldrb	r3, [r2, #17]
    bf8a:	f36f 0300 	bfc	r3, #0, #1
    bf8e:	7453      	strb	r3, [r2, #17]
    panmaster_save_node(&node);
    bf90:	4668      	mov	r0, sp
    bf92:	f7ff fe5d 	bl	bc50 <panmaster_save_node>
    PM_DEBUG("panmaster_delete_node: node deleted\n");
    bf96:	4b05      	ldr	r3, [pc, #20]	; (bfac <panmaster_delete_node+0x88>)
    bf98:	4805      	ldr	r0, [pc, #20]	; (bfb0 <panmaster_delete_node+0x8c>)
    bf9a:	2200      	movs	r2, #0
    bf9c:	215b      	movs	r1, #91	; 0x5b
    bf9e:	f006 fd91 	bl	12ac4 <log_printf>
}
    bfa2:	b013      	add	sp, #76	; 0x4c
    bfa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bfa6:	bf00      	nop
    bfa8:	20003480 	.word	0x20003480
    bfac:	00021e2b 	.word	0x00021e2b
    bfb0:	20003464 	.word	0x20003464

0000bfb4 <panmaster_compress>:
panmaster_compress()
{
#if MYNEWT_VAL(PANMASTER_NFFS)
    panm_file_compress(&panmaster_storage_file, node_idx);
#elif MYNEWT_VAL(PANMASTER_FCB)
    panm_fcb_compress(&pm_init_conf_fcb);
    bfb4:	4801      	ldr	r0, [pc, #4]	; (bfbc <panmaster_compress+0x8>)
    bfb6:	f000 bc23 	b.w	c800 <panm_fcb_compress>
    bfba:	bf00      	nop
    bfbc:	200005d4 	.word	0x200005d4

0000bfc0 <panmaster_sort>:
#endif
}

void
panmaster_sort()
{
    bfc0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(PANMASTER_NFFS)
    // Do nothing
#elif MYNEWT_VAL(PANMASTER_FCB)
    panm_fcb_sort(&pm_init_conf_fcb);
    bfc2:	4804      	ldr	r0, [pc, #16]	; (bfd4 <panmaster_sort+0x14>)
    bfc4:	f000 fca0 	bl	c908 <panm_fcb_sort>
    panm_fcb_load_idx(&pm_init_conf_fcb, node_idx);
#endif
}
    bfc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    panm_fcb_load_idx(&pm_init_conf_fcb, node_idx);
    bfcc:	4902      	ldr	r1, [pc, #8]	; (bfd8 <panmaster_sort+0x18>)
    bfce:	4801      	ldr	r0, [pc, #4]	; (bfd4 <panmaster_sort+0x14>)
    bfd0:	f000 bc08 	b.w	c7e4 <panm_fcb_load_idx>
    bfd4:	200005d4 	.word	0x200005d4
    bfd8:	20003480 	.word	0x20003480

0000bfdc <panmaster_pkg_init>:

void
panmaster_pkg_init(void)
{
    bfdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int i;
    int rc;

    /* Init log and Config */
    log_register("panmstr", &_log, &log_console_handler,
    bfde:	2400      	movs	r4, #0
    bfe0:	4a4c      	ldr	r2, [pc, #304]	; (c114 <panmaster_pkg_init+0x138>)
    bfe2:	494d      	ldr	r1, [pc, #308]	; (c118 <panmaster_pkg_init+0x13c>)
    bfe4:	484d      	ldr	r0, [pc, #308]	; (c11c <panmaster_pkg_init+0x140>)
    bfe6:	9400      	str	r4, [sp, #0]
    bfe8:	4623      	mov	r3, r4
    bfea:	f006 fd8f 	bl	12b0c <log_register>
                 NULL, LOG_SYSLEVEL);

    rc = conf_register(&pm_conf_cbs);
    bfee:	484c      	ldr	r0, [pc, #304]	; (c120 <panmaster_pkg_init+0x144>)
    bff0:	f005 fbae 	bl	11750 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    bff4:	b138      	cbz	r0, c006 <panmaster_pkg_init+0x2a>
    bff6:	4b4b      	ldr	r3, [pc, #300]	; (c124 <panmaster_pkg_init+0x148>)
    bff8:	9400      	str	r4, [sp, #0]
    bffa:	681d      	ldr	r5, [r3, #0]
    bffc:	4622      	mov	r2, r4
    bffe:	4623      	mov	r3, r4
    c000:	4621      	mov	r1, r4
    c002:	4620      	mov	r0, r4
    c004:	47a8      	blx	r5

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    c006:	4b48      	ldr	r3, [pc, #288]	; (c128 <panmaster_pkg_init+0x14c>)
    c008:	781b      	ldrb	r3, [r3, #0]
    c00a:	b92b      	cbnz	r3, c018 <panmaster_pkg_init+0x3c>
    c00c:	2300      	movs	r3, #0
    c00e:	461a      	mov	r2, r3
    c010:	4619      	mov	r1, r3
    c012:	4618      	mov	r0, r3
    c014:	f7fc ff6e 	bl	8ef4 <__assert_func>
    c018:	4b44      	ldr	r3, [pc, #272]	; (c12c <panmaster_pkg_init+0x150>)
    c01a:	2440      	movs	r4, #64	; 0x40

    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
        PANMASTER_NODE_IDX_DEFAULT(node_idx[i]);
    c01c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c020:	2100      	movs	r1, #0
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
    c022:	3c01      	subs	r4, #1
        PANMASTER_NODE_IDX_DEFAULT(node_idx[i]);
    c024:	801a      	strh	r2, [r3, #0]
    c026:	805a      	strh	r2, [r3, #2]
    c028:	7419      	strb	r1, [r3, #16]
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
    c02a:	f103 0318 	add.w	r3, r3, #24
    c02e:	d1f8      	bne.n	c022 <panmaster_pkg_init+0x46>
    return (dpl_error_t)os_mutex_init(&mu->mu);
    c030:	483f      	ldr	r0, [pc, #252]	; (c130 <panmaster_pkg_init+0x154>)
    c032:	f7fe fb3f 	bl	a6b4 <os_mutex_init>
    }
    rc = dpl_mutex_init(&save_mutex);
    assert(rc == DPL_OK);
    c036:	2800      	cmp	r0, #0
    c038:	d1e8      	bne.n	c00c <panmaster_pkg_init+0x30>
    memset(&nodes_to_save, 0, sizeof(nodes_to_save));
    c03a:	22f8      	movs	r2, #248	; 0xf8
    c03c:	4621      	mov	r1, r4
    c03e:	483d      	ldr	r0, [pc, #244]	; (c134 <panmaster_pkg_init+0x158>)
    c040:	f003 fadd 	bl	f5fe <memset>

#if MYNEWT_VAL(UWB_PAN_ENABLED)

#if MYNEWT_VAL(UWB_DEVICE_0)
    struct uwb_pan_instance * pan = (struct uwb_pan_instance*)uwb_mac_find_cb_inst_ptr(uwb_dev_idx_lookup(0), UWBEXT_PAN);
    c044:	4620      	mov	r0, r4
    c046:	f7fc fcff 	bl	8a48 <uwb_dev_idx_lookup>
    c04a:	2111      	movs	r1, #17
    c04c:	f7fc fd70 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    assert(pan);
    c050:	4605      	mov	r5, r0
    c052:	2800      	cmp	r0, #0
    c054:	d0da      	beq.n	c00c <panmaster_pkg_init+0x30>
    uwb_pan_set_postprocess(pan, postprocess_cb);
    c056:	4938      	ldr	r1, [pc, #224]	; (c138 <panmaster_pkg_init+0x15c>)
    c058:	f7ff fc08 	bl	b86c <uwb_pan_set_postprocess>
    uwb_pan_set_request_cb(pan, panrequest_cb);
    c05c:	4937      	ldr	r1, [pc, #220]	; (c13c <panmaster_pkg_init+0x160>)
    c05e:	4628      	mov	r0, r5
    c060:	f7ff fbfc 	bl	b85c <uwb_pan_set_request_cb>
#endif

#endif

#if MYNEWT_VAL(PANMASTER_CLI)
    rc = panmaster_cli_register();
    c064:	f000 fb0a 	bl	c67c <panmaster_cli_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    c068:	b138      	cbz	r0, c07a <panmaster_pkg_init+0x9e>
    c06a:	4b2e      	ldr	r3, [pc, #184]	; (c124 <panmaster_pkg_init+0x148>)
    c06c:	9400      	str	r4, [sp, #0]
    c06e:	681d      	ldr	r5, [r3, #0]
    c070:	4622      	mov	r2, r4
    c072:	4623      	mov	r3, r4
    c074:	4621      	mov	r1, r4
    c076:	4620      	mov	r0, r4
    c078:	47a8      	blx	r5
    rc = flash_area_to_sectors(MYNEWT_VAL(PANMASTER_FCB_FLASH_AREA), &cnt, NULL);
    c07a:	2200      	movs	r2, #0
    c07c:	a903      	add	r1, sp, #12
    c07e:	2010      	movs	r0, #16
    c080:	f006 fb78 	bl	12774 <flash_area_to_sectors>
    SYSINIT_PANIC_ASSERT(rc == 0);
    c084:	b138      	cbz	r0, c096 <panmaster_pkg_init+0xba>
    c086:	2300      	movs	r3, #0
    c088:	4a26      	ldr	r2, [pc, #152]	; (c124 <panmaster_pkg_init+0x148>)
    c08a:	9300      	str	r3, [sp, #0]
    c08c:	6814      	ldr	r4, [r2, #0]
    c08e:	4619      	mov	r1, r3
    c090:	461a      	mov	r2, r3
    c092:	4618      	mov	r0, r3
    c094:	47a0      	blx	r4
    SYSINIT_PANIC_ASSERT(
    c096:	9b03      	ldr	r3, [sp, #12]
    c098:	2b11      	cmp	r3, #17
    c09a:	d907      	bls.n	c0ac <panmaster_pkg_init+0xd0>
    c09c:	2300      	movs	r3, #0
    c09e:	4a21      	ldr	r2, [pc, #132]	; (c124 <panmaster_pkg_init+0x148>)
    c0a0:	9300      	str	r3, [sp, #0]
    c0a2:	6814      	ldr	r4, [r2, #0]
    c0a4:	4619      	mov	r1, r3
    c0a6:	461a      	mov	r2, r3
    c0a8:	4618      	mov	r0, r3
    c0aa:	47a0      	blx	r4
    pm_init_conf_fcb.pm_fcb.f_sector_cnt = cnt;
    c0ac:	4c24      	ldr	r4, [pc, #144]	; (c140 <panmaster_pkg_init+0x164>)
    flash_area_to_sectors(
    c0ae:	4a25      	ldr	r2, [pc, #148]	; (c144 <panmaster_pkg_init+0x168>)
    c0b0:	a903      	add	r1, sp, #12
    c0b2:	2010      	movs	r0, #16
    c0b4:	f006 fb5e 	bl	12774 <flash_area_to_sectors>
    pm_init_conf_fcb.pm_fcb.f_sector_cnt = cnt;
    c0b8:	9b03      	ldr	r3, [sp, #12]
    c0ba:	7163      	strb	r3, [r4, #5]
    rc = panm_fcb_src(&pm_init_conf_fcb);
    c0bc:	4620      	mov	r0, r4
    c0be:	f000 fb67 	bl	c790 <panm_fcb_src>
    if (rc) {
    c0c2:	b198      	cbz	r0, c0ec <panmaster_pkg_init+0x110>
        for (cnt = 0;
    c0c4:	2300      	movs	r3, #0
            flash_area_erase(&pm_fcb_area[cnt], 0,
    c0c6:	4d1f      	ldr	r5, [pc, #124]	; (c144 <panmaster_pkg_init+0x168>)
        for (cnt = 0;
    c0c8:	9303      	str	r3, [sp, #12]
            flash_area_erase(&pm_fcb_area[cnt], 0,
    c0ca:	260c      	movs	r6, #12
             cnt < pm_init_conf_fcb.pm_fcb.f_sector_cnt;
    c0cc:	9803      	ldr	r0, [sp, #12]
    c0ce:	7963      	ldrb	r3, [r4, #5]
        for (cnt = 0;
    c0d0:	4298      	cmp	r0, r3
    c0d2:	db14      	blt.n	c0fe <panmaster_pkg_init+0x122>
        rc = panm_fcb_src(&pm_init_conf_fcb);
    c0d4:	481a      	ldr	r0, [pc, #104]	; (c140 <panmaster_pkg_init+0x164>)
    c0d6:	f000 fb5b 	bl	c790 <panm_fcb_src>
    SYSINIT_PANIC_ASSERT(rc == 0);
    c0da:	b138      	cbz	r0, c0ec <panmaster_pkg_init+0x110>
    c0dc:	2300      	movs	r3, #0
    c0de:	4a11      	ldr	r2, [pc, #68]	; (c124 <panmaster_pkg_init+0x148>)
    c0e0:	9300      	str	r3, [sp, #0]
    c0e2:	6814      	ldr	r4, [r2, #0]
    c0e4:	4619      	mov	r1, r3
    c0e6:	461a      	mov	r2, r3
    c0e8:	4618      	mov	r0, r3
    c0ea:	47a0      	blx	r4

#elif MYNEWT_VAL(PANMASTER_FCB)
    panm_init_fcb();

#if MYNEWT_VAL(PANMASTER_SORT_AT_INIT)
    panmaster_sort();
    c0ec:	f7ff ff68 	bl	bfc0 <panmaster_sort>
#endif
    panm_fcb_load_idx(&pm_init_conf_fcb, node_idx);
    c0f0:	490e      	ldr	r1, [pc, #56]	; (c12c <panmaster_pkg_init+0x150>)
    c0f2:	4813      	ldr	r0, [pc, #76]	; (c140 <panmaster_pkg_init+0x164>)
#endif
}
    c0f4:	b004      	add	sp, #16
    c0f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    panm_fcb_load_idx(&pm_init_conf_fcb, node_idx);
    c0fa:	f000 bb73 	b.w	c7e4 <panm_fcb_load_idx>
            flash_area_erase(&pm_fcb_area[cnt], 0,
    c0fe:	fb06 5000 	mla	r0, r6, r0, r5
    c102:	2100      	movs	r1, #0
    c104:	6882      	ldr	r2, [r0, #8]
    c106:	f006 fb93 	bl	12830 <flash_area_erase>
             cnt++) {
    c10a:	9b03      	ldr	r3, [sp, #12]
    c10c:	3301      	adds	r3, #1
    c10e:	9303      	str	r3, [sp, #12]
    c110:	e7dc      	b.n	c0cc <panmaster_pkg_init+0xf0>
    c112:	bf00      	nop
    c114:	00022818 	.word	0x00022818
    c118:	20003464 	.word	0x20003464
    c11c:	00021e50 	.word	0x00021e50
    c120:	200005b4 	.word	0x200005b4
    c124:	20000768 	.word	0x20000768
    c128:	20004ba8 	.word	0x20004ba8
    c12c:	20003480 	.word	0x20003480
    c130:	20003c48 	.word	0x20003c48
    c134:	20003a80 	.word	0x20003a80
    c138:	0000bda1 	.word	0x0000bda1
    c13c:	0000bbb9 	.word	0x0000bbb9
    c140:	200005d4 	.word	0x200005d4
    c144:	20003b7c 	.word	0x20003b7c

0000c148 <dump_cb>:
    free(lne.nodes);
}

static void
dump_cb(struct panmaster_node *n, void *cb_arg)
{
    c148:	b530      	push	{r4, r5, lr}
    c14a:	b091      	sub	sp, #68	; 0x44
    char ver_str[32];
    struct streamer *streamer = (struct streamer *)cb_arg;
    streamer_printf(streamer, "%3d %04x %016llx %x %x %d %d ", n->index, n->addr, n->euid,
    c14c:	f8b0 3015 	ldrh.w	r3, [r0, #21]
    c150:	9305      	str	r3, [sp, #20]
                   n->flags, n->role, n->has_perm_slot, n->slot_id);
    c152:	7cc3      	ldrb	r3, [r0, #19]
    streamer_printf(streamer, "%3d %04x %016llx %x %x %d %d ", n->index, n->addr, n->euid,
    c154:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    c158:	091b      	lsrs	r3, r3, #4
    c15a:	9204      	str	r2, [sp, #16]
    c15c:	9303      	str	r3, [sp, #12]
    c15e:	8a43      	ldrh	r3, [r0, #18]
    c160:	9302      	str	r3, [sp, #8]
    c162:	6882      	ldr	r2, [r0, #8]
    c164:	68c3      	ldr	r3, [r0, #12]
    c166:	e9cd 2300 	strd	r2, r3, [sp]
{
    c16a:	4604      	mov	r4, r0
    c16c:	460d      	mov	r5, r1
    streamer_printf(streamer, "%3d %04x %016llx %x %x %d %d ", n->index, n->addr, n->euid,
    c16e:	8a03      	ldrh	r3, [r0, #16]
    c170:	7d02      	ldrb	r2, [r0, #20]
    c172:	490f      	ldr	r1, [pc, #60]	; (c1b0 <dump_cb+0x68>)
    c174:	4628      	mov	r0, r5
    c176:	f005 f976 	bl	11466 <streamer_printf>

    struct image_version fw_ver = {
    c17a:	7de3      	ldrb	r3, [r4, #23]
    c17c:	f88d 3018 	strb.w	r3, [sp, #24]
    c180:	7e23      	ldrb	r3, [r4, #24]
        .iv_major = n->fw_ver.iv_major,
        .iv_minor = n->fw_ver.iv_minor,
        .iv_revision = n->fw_ver.iv_revision,
    c182:	7ea2      	ldrb	r2, [r4, #26]
    struct image_version fw_ver = {
    c184:	f88d 3019 	strb.w	r3, [sp, #25]
        .iv_revision = n->fw_ver.iv_revision,
    c188:	7e63      	ldrb	r3, [r4, #25]
    c18a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    struct image_version fw_ver = {
    c18e:	f8ad 301a 	strh.w	r3, [sp, #26]
        .iv_build_num = n->fw_ver.iv_build_num,
    };
    imgr_ver_str(&fw_ver, ver_str);
    c192:	a908      	add	r1, sp, #32
        .iv_build_num = n->fw_ver.iv_build_num,
    c194:	f8d4 301b 	ldr.w	r3, [r4, #27]
    struct image_version fw_ver = {
    c198:	9307      	str	r3, [sp, #28]
    imgr_ver_str(&fw_ver, ver_str);
    c19a:	a806      	add	r0, sp, #24
    c19c:	f004 fc10 	bl	109c0 <imgr_ver_str>
    streamer_printf(streamer, "%s\n", ver_str);
    c1a0:	4904      	ldr	r1, [pc, #16]	; (c1b4 <dump_cb+0x6c>)
    c1a2:	aa08      	add	r2, sp, #32
    c1a4:	4628      	mov	r0, r5
    c1a6:	f005 f95e 	bl	11466 <streamer_printf>

}
    c1aa:	b011      	add	sp, #68	; 0x44
    c1ac:	bd30      	pop	{r4, r5, pc}
    c1ae:	bf00      	nop
    c1b0:	00021e58 	.word	0x00021e58
    c1b4:	00022e9f 	.word	0x00022e9f

0000c1b8 <panmaster_cli_cmd>:
    panmaster_load(dump_cb, streamer);
}

static int
panmaster_cli_cmd(const struct shell_cmd *cmd, int argc, char **argv, struct streamer *streamer)
{
    c1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int slot_id, role;
    uint16_t addr;
    uint64_t euid;
    struct panmaster_node *node;

    if (argc < 2) {
    c1bc:	2901      	cmp	r1, #1
{
    c1be:	b0a3      	sub	sp, #140	; 0x8c
    c1c0:	4688      	mov	r8, r1
    c1c2:	4615      	mov	r5, r2
    c1c4:	461c      	mov	r4, r3
    if (argc < 2) {
    c1c6:	dc04      	bgt.n	c1d2 <panmaster_cli_cmd+0x1a>
        streamer_printf(streamer, "Too few args\n");
    c1c8:	49ac      	ldr	r1, [pc, #688]	; (c47c <panmaster_cli_cmd+0x2c4>)
    } else if (!strcmp(argv[1], "sort")) {
        panmaster_sort();
    } else if (!strcmp(argv[1], "dump")) {
        dump(streamer);
    } else {
        streamer_printf(streamer, "Unknown cmd\n");
    c1ca:	4620      	mov	r0, r4
    c1cc:	f005 f94b 	bl	11466 <streamer_printf>
    c1d0:	e024      	b.n	c21c <panmaster_cli_cmd+0x64>
    if (!strcmp(argv[1], "list")) {
    c1d2:	6857      	ldr	r7, [r2, #4]
    c1d4:	49aa      	ldr	r1, [pc, #680]	; (c480 <panmaster_cli_cmd+0x2c8>)
    c1d6:	4638      	mov	r0, r7
    c1d8:	f003 fa36 	bl	f648 <strcmp>
    c1dc:	4606      	mov	r6, r0
    c1de:	2800      	cmp	r0, #0
    c1e0:	f040 80f4 	bne.w	c3cc <panmaster_cli_cmd+0x214>
    lne.nodes = (struct panmaster_node*)malloc(lne_nodes_sz);
    c1e4:	f44f 7078 	mov.w	r0, #992	; 0x3e0
    c1e8:	f003 f976 	bl	f4d8 <malloc>
    c1ec:	9007      	str	r0, [sp, #28]
    if (!lne.nodes) {
    c1ee:	b908      	cbnz	r0, c1f4 <panmaster_cli_cmd+0x3c>
        streamer_printf(streamer, "err:mem\n");
    c1f0:	49a4      	ldr	r1, [pc, #656]	; (c484 <panmaster_cli_cmd+0x2cc>)
    c1f2:	e7ea      	b.n	c1ca <panmaster_cli_cmd+0x12>
    panmaster_node_idx(&node_idx, &num_nodes);
    c1f4:	a904      	add	r1, sp, #16
    c1f6:	a802      	add	r0, sp, #8
    c1f8:	f7ff fbd6 	bl	b9a8 <panmaster_node_idx>
    os_gettimeofday(&utctime, &timezone);
    c1fc:	a903      	add	r1, sp, #12
    c1fe:	a80e      	add	r0, sp, #56	; 0x38
    c200:	f7fd fee2 	bl	9fc8 <os_gettimeofday>
    streamer_printf(streamer, "#idx, addr, role, slot, p,  lease, euid,             flags,          date-added, fw-ver\n");
    c204:	49a0      	ldr	r1, [pc, #640]	; (c488 <panmaster_cli_cmd+0x2d0>)
            streamer_printf(streamer, "%4d, ", i+j);
    c206:	f8df 82d0 	ldr.w	r8, [pc, #720]	; c4d8 <panmaster_cli_cmd+0x320>
    streamer_printf(streamer, "#idx, addr, role, slot, p,  lease, euid,             flags,          date-added, fw-ver\n");
    c20a:	4620      	mov	r0, r4
    c20c:	f005 f92b 	bl	11466 <streamer_printf>
    for (i=0;i<num_nodes;i+=LIST_NODES_BLK_NNODES) {
    c210:	9b04      	ldr	r3, [sp, #16]
        memset(lne.nodes, 0xffff, lne_nodes_sz);
    c212:	9807      	ldr	r0, [sp, #28]
    for (i=0;i<num_nodes;i+=LIST_NODES_BLK_NNODES) {
    c214:	429e      	cmp	r6, r3
    c216:	db05      	blt.n	c224 <panmaster_cli_cmd+0x6c>
    free(lne.nodes);
    c218:	f003 f9aa 	bl	f570 <free>
    }
    return 0;
}
    c21c:	2000      	movs	r0, #0
    c21e:	b023      	add	sp, #140	; 0x8c
    c220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset(lne.nodes, 0xffff, lne_nodes_sz);
    c224:	f44f 7278 	mov.w	r2, #992	; 0x3e0
    c228:	f64f 71ff 	movw	r1, #65535	; 0xffff
        lne.index_max = i+LIST_NODES_BLK_NNODES;
    c22c:	f106 0920 	add.w	r9, r6, #32
        lne.index_off = i;
    c230:	9608      	str	r6, [sp, #32]
        lne.index_max = i+LIST_NODES_BLK_NNODES;
    c232:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
        memset(lne.nodes, 0xffff, lne_nodes_sz);
    c236:	f003 f9e2 	bl	f5fe <memset>
        panmaster_load(list_nodes_load_cb, &lne);
    c23a:	4894      	ldr	r0, [pc, #592]	; (c48c <panmaster_cli_cmd+0x2d4>)
            streamer_printf(streamer, "%4X, ", lne.nodes[j].role);
    c23c:	f8df b29c 	ldr.w	fp, [pc, #668]	; c4dc <panmaster_cli_cmd+0x324>
        panmaster_load(list_nodes_load_cb, &lne);
    c240:	a907      	add	r1, sp, #28
    c242:	f7ff fcfd 	bl	bc40 <panmaster_load>
        for (j=0;j<LIST_NODES_BLK_NNODES;j++) {
    c246:	2700      	movs	r7, #0
            if (lne.nodes[j].addr == 0xffff) {
    c248:	9b07      	ldr	r3, [sp, #28]
    c24a:	ebc7 1547 	rsb	r5, r7, r7, lsl #5
    c24e:	442b      	add	r3, r5
    c250:	8a1a      	ldrh	r2, [r3, #16]
    c252:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c256:	429a      	cmp	r2, r3
    c258:	f000 80a8 	beq.w	c3ac <panmaster_cli_cmd+0x1f4>
            streamer_printf(streamer, "%4d, ", i+j);
    c25c:	19f2      	adds	r2, r6, r7
    c25e:	4641      	mov	r1, r8
    c260:	4620      	mov	r0, r4
    c262:	f005 f900 	bl	11466 <streamer_printf>
            streamer_printf(streamer, "%4x, ", lne.nodes[j].addr);
    c266:	9b07      	ldr	r3, [sp, #28]
    c268:	4989      	ldr	r1, [pc, #548]	; (c490 <panmaster_cli_cmd+0x2d8>)
    c26a:	442b      	add	r3, r5
    c26c:	4620      	mov	r0, r4
    c26e:	8a1a      	ldrh	r2, [r3, #16]
    c270:	f005 f8f9 	bl	11466 <streamer_printf>
            int slot_id = node_idx[lne.nodes[j].index].slot_id;
    c274:	9b07      	ldr	r3, [sp, #28]
    c276:	9902      	ldr	r1, [sp, #8]
    c278:	442b      	add	r3, r5
            streamer_printf(streamer, "%4X, ", lne.nodes[j].role);
    c27a:	4620      	mov	r0, r4
            int slot_id = node_idx[lne.nodes[j].index].slot_id;
    c27c:	7d1a      	ldrb	r2, [r3, #20]
    c27e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c282:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    c286:	f8b2 a002 	ldrh.w	sl, [r2, #2]
            if (lne.nodes[j].has_perm_slot) {
    c28a:	7cda      	ldrb	r2, [r3, #19]
    c28c:	0711      	lsls	r1, r2, #28
                slot_id = lne.nodes[j].slot_id;
    c28e:	bf48      	it	mi
    c290:	f8b3 a015 	ldrhmi.w	sl, [r3, #21]
            streamer_printf(streamer, "%4X, ", lne.nodes[j].role);
    c294:	0912      	lsrs	r2, r2, #4
    c296:	4659      	mov	r1, fp
    c298:	f005 f8e5 	bl	11466 <streamer_printf>
            if (slot_id != 0xffff) {
    c29c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c2a0:	459a      	cmp	sl, r3
    c2a2:	f000 8089 	beq.w	c3b8 <panmaster_cli_cmd+0x200>
                streamer_printf(streamer, "%4d, ", slot_id);
    c2a6:	4652      	mov	r2, sl
    c2a8:	4641      	mov	r1, r8
    c2aa:	4620      	mov	r0, r4
    c2ac:	f005 f8db 	bl	11466 <streamer_printf>
            streamer_printf(streamer, "%s, ", (lne.nodes[j].has_perm_slot)?"p":" ");
    c2b0:	9b07      	ldr	r3, [sp, #28]
    c2b2:	4a78      	ldr	r2, [pc, #480]	; (c494 <panmaster_cli_cmd+0x2dc>)
    c2b4:	4978      	ldr	r1, [pc, #480]	; (c498 <panmaster_cli_cmd+0x2e0>)
    c2b6:	442b      	add	r3, r5
    c2b8:	4620      	mov	r0, r4
    c2ba:	7cdb      	ldrb	r3, [r3, #19]
    c2bc:	f013 0f08 	tst.w	r3, #8
    c2c0:	4b76      	ldr	r3, [pc, #472]	; (c49c <panmaster_cli_cmd+0x2e4>)
    c2c2:	bf08      	it	eq
    c2c4:	461a      	moveq	r2, r3
    c2c6:	f005 f8ce 	bl	11466 <streamer_printf>
            if (node_idx[lne.nodes[j].index].lease_ends) {
    c2ca:	9b07      	ldr	r3, [sp, #28]
    c2cc:	9a02      	ldr	r2, [sp, #8]
    c2ce:	442b      	add	r3, r5
    c2d0:	7d1b      	ldrb	r3, [r3, #20]
    c2d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c2d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c2da:	695b      	ldr	r3, [r3, #20]
    c2dc:	2b00      	cmp	r3, #0
    c2de:	d070      	beq.n	c3c2 <panmaster_cli_cmd+0x20a>
                os_get_uptime(&tv);
    c2e0:	a80a      	add	r0, sp, #40	; 0x28
    c2e2:	f7fd fef3 	bl	a0cc <os_get_uptime>
                int32_t le_ms = node_idx[lne.nodes[j].index].lease_ends;
    c2e6:	9b07      	ldr	r3, [sp, #28]
    c2e8:	9a02      	ldr	r2, [sp, #8]
                int32_t now_ms = tv.tv_sec*1000 + tv.tv_usec/1000;
    c2ea:	980a      	ldr	r0, [sp, #40]	; 0x28
                int32_t le_ms = node_idx[lne.nodes[j].index].lease_ends;
    c2ec:	442b      	add	r3, r5
                int32_t now_ms = tv.tv_sec*1000 + tv.tv_usec/1000;
    c2ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
                int32_t le_ms = node_idx[lne.nodes[j].index].lease_ends;
    c2f2:	7d1b      	ldrb	r3, [r3, #20]
    c2f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c2f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
                int32_t now_ms = tv.tv_sec*1000 + tv.tv_usec/1000;
    c2fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                int32_t le_ms = node_idx[lne.nodes[j].index].lease_ends;
    c2fe:	695b      	ldr	r3, [r3, #20]
                int32_t now_ms = tv.tv_sec*1000 + tv.tv_usec/1000;
    c300:	fb92 f2f1 	sdiv	r2, r2, r1
    c304:	fb01 2200 	mla	r2, r1, r0, r2
                le_ms = le_ms - now_ms;
    c308:	1a9b      	subs	r3, r3, r2
                if (le_ms < 0) le_ms = 0;
    c30a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
                streamer_printf(streamer, "%4ld.%ld, ", le_ms/1000, (le_ms-1000*(le_ms/1000))/100);
    c30e:	4620      	mov	r0, r4
    c310:	fbb3 f2f1 	udiv	r2, r3, r1
    c314:	fb01 3312 	mls	r3, r1, r2, r3
    c318:	2164      	movs	r1, #100	; 0x64
    c31a:	fbb3 f3f1 	udiv	r3, r3, r1
    c31e:	4960      	ldr	r1, [pc, #384]	; (c4a0 <panmaster_cli_cmd+0x2e8>)
    c320:	f005 f8a1 	bl	11466 <streamer_printf>
            streamer_printf(streamer, "%016llX, ", lne.nodes[j].euid);
    c324:	9b07      	ldr	r3, [sp, #28]
    c326:	495f      	ldr	r1, [pc, #380]	; (c4a4 <panmaster_cli_cmd+0x2ec>)
    c328:	442b      	add	r3, r5
    c32a:	4620      	mov	r0, r4
    c32c:	689a      	ldr	r2, [r3, #8]
    c32e:	68db      	ldr	r3, [r3, #12]
    c330:	f005 f899 	bl	11466 <streamer_printf>
            streamer_printf(streamer, "%5X, ", lne.nodes[j].flags);
    c334:	9b07      	ldr	r3, [sp, #28]
    c336:	495c      	ldr	r1, [pc, #368]	; (c4a8 <panmaster_cli_cmd+0x2f0>)
    c338:	442b      	add	r3, r5
    c33a:	4620      	mov	r0, r4
    c33c:	8a5a      	ldrh	r2, [r3, #18]
    c33e:	f005 f892 	bl	11466 <streamer_printf>
            utctime.tv_sec = lne.nodes[j].first_seen_utc;
    c342:	9b07      	ldr	r3, [sp, #28]
    c344:	1959      	adds	r1, r3, r5
    c346:	595a      	ldr	r2, [r3, r5]
    c348:	684b      	ldr	r3, [r1, #4]
            utctime.tv_usec = 0;
    c34a:	f04f 0a00 	mov.w	sl, #0
            utctime.tv_sec = lne.nodes[j].first_seen_utc;
    c34e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
            datetime_format(&utctime, &timezone, buf, sizeof(buf));
    c352:	a903      	add	r1, sp, #12
    c354:	2320      	movs	r3, #32
    c356:	aa1a      	add	r2, sp, #104	; 0x68
    c358:	a80e      	add	r0, sp, #56	; 0x38
            utctime.tv_usec = 0;
    c35a:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
            datetime_format(&utctime, &timezone, buf, sizeof(buf));
    c35e:	f008 ff37 	bl	151d0 <datetime_format>
            streamer_printf(streamer, "%s, ", buf);
    c362:	494d      	ldr	r1, [pc, #308]	; (c498 <panmaster_cli_cmd+0x2e0>)
            buf[19]='\0';
    c364:	f88d a07b 	strb.w	sl, [sp, #123]	; 0x7b
            streamer_printf(streamer, "%s, ", buf);
    c368:	aa1a      	add	r2, sp, #104	; 0x68
    c36a:	4620      	mov	r0, r4
    c36c:	f005 f87b 	bl	11466 <streamer_printf>
                .iv_major = lne.nodes[j].fw_ver.iv_major,
    c370:	9b07      	ldr	r3, [sp, #28]
    c372:	441d      	add	r5, r3
            imgr_ver_str(&fw_ver, ver_str);
    c374:	a912      	add	r1, sp, #72	; 0x48
            struct image_version fw_ver = {
    c376:	7deb      	ldrb	r3, [r5, #23]
    c378:	f88d 3014 	strb.w	r3, [sp, #20]
    c37c:	7e2b      	ldrb	r3, [r5, #24]
    c37e:	f88d 3015 	strb.w	r3, [sp, #21]
                .iv_revision = lne.nodes[j].fw_ver.iv_revision,
    c382:	7eaa      	ldrb	r2, [r5, #26]
    c384:	7e6b      	ldrb	r3, [r5, #25]
    c386:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            struct image_version fw_ver = {
    c38a:	f8ad 3016 	strh.w	r3, [sp, #22]
                .iv_build_num = lne.nodes[j].fw_ver.iv_build_num,
    c38e:	f8d5 301b 	ldr.w	r3, [r5, #27]
            struct image_version fw_ver = {
    c392:	9306      	str	r3, [sp, #24]
            imgr_ver_str(&fw_ver, ver_str);
    c394:	a805      	add	r0, sp, #20
    c396:	f004 fb13 	bl	109c0 <imgr_ver_str>
            streamer_printf(streamer, "%s", ver_str);
    c39a:	4944      	ldr	r1, [pc, #272]	; (c4ac <panmaster_cli_cmd+0x2f4>)
    c39c:	aa12      	add	r2, sp, #72	; 0x48
    c39e:	4620      	mov	r0, r4
    c3a0:	f005 f861 	bl	11466 <streamer_printf>
            streamer_printf(streamer, "\n");
    c3a4:	4942      	ldr	r1, [pc, #264]	; (c4b0 <panmaster_cli_cmd+0x2f8>)
    c3a6:	4620      	mov	r0, r4
    c3a8:	f005 f85d 	bl	11466 <streamer_printf>
        for (j=0;j<LIST_NODES_BLK_NNODES;j++) {
    c3ac:	3701      	adds	r7, #1
    c3ae:	2f20      	cmp	r7, #32
    c3b0:	f47f af4a 	bne.w	c248 <panmaster_cli_cmd+0x90>
    for (i=0;i<num_nodes;i+=LIST_NODES_BLK_NNODES) {
    c3b4:	464e      	mov	r6, r9
    c3b6:	e72b      	b.n	c210 <panmaster_cli_cmd+0x58>
                streamer_printf(streamer, "    , ");
    c3b8:	493e      	ldr	r1, [pc, #248]	; (c4b4 <panmaster_cli_cmd+0x2fc>)
    c3ba:	4620      	mov	r0, r4
    c3bc:	f005 f853 	bl	11466 <streamer_printf>
    c3c0:	e776      	b.n	c2b0 <panmaster_cli_cmd+0xf8>
                streamer_printf(streamer, "      , ");
    c3c2:	493d      	ldr	r1, [pc, #244]	; (c4b8 <panmaster_cli_cmd+0x300>)
    c3c4:	4620      	mov	r0, r4
    c3c6:	f005 f84e 	bl	11466 <streamer_printf>
    c3ca:	e7ab      	b.n	c324 <panmaster_cli_cmd+0x16c>
    } else if (!strcmp(argv[1], "add")) {
    c3cc:	493b      	ldr	r1, [pc, #236]	; (c4bc <panmaster_cli_cmd+0x304>)
    c3ce:	4638      	mov	r0, r7
    c3d0:	f003 f93a 	bl	f648 <strcmp>
    c3d4:	4606      	mov	r6, r0
    c3d6:	bb88      	cbnz	r0, c43c <panmaster_cli_cmd+0x284>
        if (argc < 3) {
    c3d8:	f1b8 0f02 	cmp.w	r8, #2
    c3dc:	d101      	bne.n	c3e2 <panmaster_cli_cmd+0x22a>
            streamer_printf(streamer, "euid needed\n");
    c3de:	4938      	ldr	r1, [pc, #224]	; (c4c0 <panmaster_cli_cmd+0x308>)
    c3e0:	e6f3      	b.n	c1ca <panmaster_cli_cmd+0x12>
        euid = strtoll(argv[2], NULL, 16);
    c3e2:	4601      	mov	r1, r0
    c3e4:	2210      	movs	r2, #16
    c3e6:	68a8      	ldr	r0, [r5, #8]
    c3e8:	f003 f950 	bl	f68c <strtoll>
        if (!euid) {
    c3ec:	ea51 0300 	orrs.w	r3, r1, r0
        euid = strtoll(argv[2], NULL, 16);
    c3f0:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
        if (!euid) {
    c3f4:	f43f af12 	beq.w	c21c <panmaster_cli_cmd+0x64>
        if (argc > 3) {
    c3f8:	f1b8 0f03 	cmp.w	r8, #3
    c3fc:	d00a      	beq.n	c414 <panmaster_cli_cmd+0x25c>
            addr = strtoll(argv[3], NULL, 16);
    c3fe:	68e8      	ldr	r0, [r5, #12]
    c400:	2210      	movs	r2, #16
    c402:	4631      	mov	r1, r6
    c404:	f003 f942 	bl	f68c <strtoll>
            panmaster_add_node(addr, 0, (uint8_t*)&euid);
    c408:	aa1a      	add	r2, sp, #104	; 0x68
    c40a:	4631      	mov	r1, r6
    c40c:	b280      	uxth	r0, r0
    c40e:	f7ff fcdf 	bl	bdd0 <panmaster_add_node>
            return 0;
    c412:	e703      	b.n	c21c <panmaster_cli_cmd+0x64>
        rc = panmaster_idx_find_node(euid, 0, &node);
    c414:	ab12      	add	r3, sp, #72	; 0x48
    c416:	4632      	mov	r2, r6
    c418:	f7ff faea 	bl	b9f0 <panmaster_idx_find_node>
    c41c:	4605      	mov	r5, r0
        panmaster_postprocess();
    c41e:	f7ff fc71 	bl	bd04 <panmaster_postprocess>
        if (!rc) {
    c422:	b94d      	cbnz	r5, c438 <panmaster_cli_cmd+0x280>
            streamer_printf(streamer, "Added node euid: 0x%llX, addr 0x%X\n",
    c424:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c426:	4927      	ldr	r1, [pc, #156]	; (c4c4 <panmaster_cli_cmd+0x30c>)
    c428:	8a1b      	ldrh	r3, [r3, #16]
    c42a:	9300      	str	r3, [sp, #0]
    c42c:	4620      	mov	r0, r4
    c42e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    c432:	f005 f818 	bl	11466 <streamer_printf>
    c436:	e6f1      	b.n	c21c <panmaster_cli_cmd+0x64>
            streamer_printf(streamer, "Add node err\n");
    c438:	4923      	ldr	r1, [pc, #140]	; (c4c8 <panmaster_cli_cmd+0x310>)
    c43a:	e6c6      	b.n	c1ca <panmaster_cli_cmd+0x12>
    } else if (!strcmp(argv[1], "del")) {
    c43c:	4923      	ldr	r1, [pc, #140]	; (c4cc <panmaster_cli_cmd+0x314>)
    c43e:	4638      	mov	r0, r7
    c440:	f003 f902 	bl	f648 <strcmp>
    c444:	4601      	mov	r1, r0
    c446:	b968      	cbnz	r0, c464 <panmaster_cli_cmd+0x2ac>
        if (argc < 3) {
    c448:	f1b8 0f02 	cmp.w	r8, #2
    c44c:	d0c7      	beq.n	c3de <panmaster_cli_cmd+0x226>
        euid = strtoll(argv[2], NULL, 16);
    c44e:	68a8      	ldr	r0, [r5, #8]
    c450:	2210      	movs	r2, #16
    c452:	f003 f91b 	bl	f68c <strtoll>
    c456:	4602      	mov	r2, r0
    c458:	460b      	mov	r3, r1
    c45a:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
        panmaster_delete_node(euid);
    c45e:	f7ff fd61 	bl	bf24 <panmaster_delete_node>
    c462:	e6db      	b.n	c21c <panmaster_cli_cmd+0x64>
    } else if (!strcmp(argv[1], "pslot")) {
    c464:	491a      	ldr	r1, [pc, #104]	; (c4d0 <panmaster_cli_cmd+0x318>)
    c466:	4638      	mov	r0, r7
    c468:	f003 f8ee 	bl	f648 <strcmp>
    c46c:	4606      	mov	r6, r0
    c46e:	2800      	cmp	r0, #0
    c470:	d174      	bne.n	c55c <panmaster_cli_cmd+0x3a4>
        if (argc < 4) {
    c472:	f1b8 0f03 	cmp.w	r8, #3
    c476:	dc33      	bgt.n	c4e0 <panmaster_cli_cmd+0x328>
            streamer_printf(streamer, "euid+slot_id needed\n");
    c478:	4916      	ldr	r1, [pc, #88]	; (c4d4 <panmaster_cli_cmd+0x31c>)
    c47a:	e6a6      	b.n	c1ca <panmaster_cli_cmd+0x12>
    c47c:	00021e76 	.word	0x00021e76
    c480:	000220c7 	.word	0x000220c7
    c484:	00021e84 	.word	0x00021e84
    c488:	00021e8d 	.word	0x00021e8d
    c48c:	0000c649 	.word	0x0000c649
    c490:	00021eec 	.word	0x00021eec
    c494:	0002224c 	.word	0x0002224c
    c498:	00021ef8 	.word	0x00021ef8
    c49c:	00021fca 	.word	0x00021fca
    c4a0:	00021efd 	.word	0x00021efd
    c4a4:	00021f11 	.word	0x00021f11
    c4a8:	00021f1b 	.word	0x00021f1b
    c4ac:	00022f05 	.word	0x00022f05
    c4b0:	00022b8f 	.word	0x00022b8f
    c4b4:	00021f0a 	.word	0x00021f0a
    c4b8:	00021f08 	.word	0x00021f08
    c4bc:	00021f21 	.word	0x00021f21
    c4c0:	00021f25 	.word	0x00021f25
    c4c4:	00021f32 	.word	0x00021f32
    c4c8:	00021f56 	.word	0x00021f56
    c4cc:	00021f64 	.word	0x00021f64
    c4d0:	00021f68 	.word	0x00021f68
    c4d4:	00021f6e 	.word	0x00021f6e
    c4d8:	00021ee6 	.word	0x00021ee6
    c4dc:	00021ef2 	.word	0x00021ef2
        euid = strtoll(argv[2], NULL, 16);
    c4e0:	4601      	mov	r1, r0
    c4e2:	2210      	movs	r2, #16
    c4e4:	68a8      	ldr	r0, [r5, #8]
    c4e6:	f003 f8d1 	bl	f68c <strtoll>
        if (!euid) {
    c4ea:	ea51 0300 	orrs.w	r3, r1, r0
        euid = strtoll(argv[2], NULL, 16);
    c4ee:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
        if (!euid) {
    c4f2:	f43f ae93 	beq.w	c21c <panmaster_cli_cmd+0x64>
        slot_id = strtoll(argv[3], NULL, 0);
    c4f6:	68e8      	ldr	r0, [r5, #12]
    c4f8:	4632      	mov	r2, r6
    c4fa:	4631      	mov	r1, r6
    c4fc:	f003 f8c6 	bl	f68c <strtoll>
        rc = panmaster_idx_find_node(euid, 0, &node);
    c500:	ab12      	add	r3, sp, #72	; 0x48
        slot_id = strtoll(argv[3], NULL, 0);
    c502:	4607      	mov	r7, r0
        rc = panmaster_idx_find_node(euid, 0, &node);
    c504:	4632      	mov	r2, r6
    c506:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    c50a:	f7ff fa71 	bl	b9f0 <panmaster_idx_find_node>
        if (!rc) {
    c50e:	4605      	mov	r5, r0
    c510:	bb10      	cbnz	r0, c558 <panmaster_cli_cmd+0x3a0>
            streamer_printf(streamer, "0x%llX: pslot -> ", euid);
    c512:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    c516:	493e      	ldr	r1, [pc, #248]	; (c610 <panmaster_cli_cmd+0x458>)
    c518:	4620      	mov	r0, r4
    c51a:	f004 ffa4 	bl	11466 <streamer_printf>
            if (slot_id > -1) {
    c51e:	2f00      	cmp	r7, #0
    c520:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c522:	db0e      	blt.n	c542 <panmaster_cli_cmd+0x38a>
                node->has_perm_slot = 1;
    c524:	7cda      	ldrb	r2, [r3, #19]
                streamer_printf(streamer, "%d\n ", slot_id);
    c526:	493b      	ldr	r1, [pc, #236]	; (c614 <panmaster_cli_cmd+0x45c>)
                node->slot_id = slot_id;
    c528:	f8a3 7015 	strh.w	r7, [r3, #21]
                node->has_perm_slot = 1;
    c52c:	f042 0208 	orr.w	r2, r2, #8
    c530:	74da      	strb	r2, [r3, #19]
                streamer_printf(streamer, "%d\n ", slot_id);
    c532:	4620      	mov	r0, r4
    c534:	463a      	mov	r2, r7
    c536:	f004 ff96 	bl	11466 <streamer_printf>
            panmaster_save_node(node);
    c53a:	9812      	ldr	r0, [sp, #72]	; 0x48
            panmaster_save_node(node);
    c53c:	f7ff fb88 	bl	bc50 <panmaster_save_node>
    c540:	e66c      	b.n	c21c <panmaster_cli_cmd+0x64>
                node->has_perm_slot = 0;
    c542:	7cda      	ldrb	r2, [r3, #19]
                streamer_printf(streamer, "<removed>\n");
    c544:	4934      	ldr	r1, [pc, #208]	; (c618 <panmaster_cli_cmd+0x460>)
                node->slot_id = 0;
    c546:	755d      	strb	r5, [r3, #21]
                node->has_perm_slot = 0;
    c548:	f365 02c3 	bfi	r2, r5, #3, #1
                node->slot_id = 0;
    c54c:	759d      	strb	r5, [r3, #22]
                node->has_perm_slot = 0;
    c54e:	74da      	strb	r2, [r3, #19]
                streamer_printf(streamer, "<removed>\n");
    c550:	4620      	mov	r0, r4
    c552:	f004 ff88 	bl	11466 <streamer_printf>
    c556:	e7f0      	b.n	c53a <panmaster_cli_cmd+0x382>
            streamer_printf(streamer, "err\n");
    c558:	4930      	ldr	r1, [pc, #192]	; (c61c <panmaster_cli_cmd+0x464>)
    c55a:	e636      	b.n	c1ca <panmaster_cli_cmd+0x12>
    } else if (!strcmp(argv[1], "role")) {
    c55c:	4930      	ldr	r1, [pc, #192]	; (c620 <panmaster_cli_cmd+0x468>)
    c55e:	4638      	mov	r0, r7
    c560:	f003 f872 	bl	f648 <strcmp>
    c564:	4606      	mov	r6, r0
    c566:	bb50      	cbnz	r0, c5be <panmaster_cli_cmd+0x406>
        if (argc < 4) {
    c568:	f1b8 0f03 	cmp.w	r8, #3
    c56c:	dc01      	bgt.n	c572 <panmaster_cli_cmd+0x3ba>
            streamer_printf(streamer, "euid+role needed\n");
    c56e:	492d      	ldr	r1, [pc, #180]	; (c624 <panmaster_cli_cmd+0x46c>)
    c570:	e62b      	b.n	c1ca <panmaster_cli_cmd+0x12>
        euid = strtoll(argv[2], NULL, 16);
    c572:	4601      	mov	r1, r0
    c574:	2210      	movs	r2, #16
    c576:	68a8      	ldr	r0, [r5, #8]
    c578:	f003 f888 	bl	f68c <strtoll>
        if (!euid) {
    c57c:	ea51 0300 	orrs.w	r3, r1, r0
        euid = strtoll(argv[2], NULL, 16);
    c580:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
        if (!euid) {
    c584:	f43f ae4a 	beq.w	c21c <panmaster_cli_cmd+0x64>
        role = strtoll(argv[3], NULL, 0);
    c588:	68e8      	ldr	r0, [r5, #12]
    c58a:	4632      	mov	r2, r6
    c58c:	4631      	mov	r1, r6
    c58e:	f003 f87d 	bl	f68c <strtoll>
        rc = panmaster_idx_find_node(euid, 0, &node);
    c592:	ab12      	add	r3, sp, #72	; 0x48
        role = strtoll(argv[3], NULL, 0);
    c594:	4605      	mov	r5, r0
        rc = panmaster_idx_find_node(euid, 0, &node);
    c596:	4632      	mov	r2, r6
    c598:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    c59c:	f7ff fa28 	bl	b9f0 <panmaster_idx_find_node>
        if (!rc) {
    c5a0:	2800      	cmp	r0, #0
    c5a2:	d1d9      	bne.n	c558 <panmaster_cli_cmd+0x3a0>
            streamer_printf(streamer, "0x%llX: role -> %d\n ", euid, role);
    c5a4:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    c5a8:	491f      	ldr	r1, [pc, #124]	; (c628 <panmaster_cli_cmd+0x470>)
        role = strtoll(argv[3], NULL, 0);
    c5aa:	9500      	str	r5, [sp, #0]
            streamer_printf(streamer, "0x%llX: role -> %d\n ", euid, role);
    c5ac:	4620      	mov	r0, r4
    c5ae:	f004 ff5a 	bl	11466 <streamer_printf>
            node->role = role;
    c5b2:	9812      	ldr	r0, [sp, #72]	; 0x48
    c5b4:	7cc3      	ldrb	r3, [r0, #19]
    c5b6:	f365 1307 	bfi	r3, r5, #4, #4
    c5ba:	74c3      	strb	r3, [r0, #19]
    c5bc:	e7be      	b.n	c53c <panmaster_cli_cmd+0x384>
    } else if (!strcmp(argv[1], "clear")) {
    c5be:	491b      	ldr	r1, [pc, #108]	; (c62c <panmaster_cli_cmd+0x474>)
    c5c0:	4638      	mov	r0, r7
    c5c2:	f003 f841 	bl	f648 <strcmp>
    c5c6:	b910      	cbnz	r0, c5ce <panmaster_cli_cmd+0x416>
        panmaster_clear_list();
    c5c8:	f7ff f9fc 	bl	b9c4 <panmaster_clear_list>
    c5cc:	e626      	b.n	c21c <panmaster_cli_cmd+0x64>
    } else if (!strcmp(argv[1], "compr")) {
    c5ce:	4918      	ldr	r1, [pc, #96]	; (c630 <panmaster_cli_cmd+0x478>)
    c5d0:	4638      	mov	r0, r7
    c5d2:	f003 f839 	bl	f648 <strcmp>
    c5d6:	b910      	cbnz	r0, c5de <panmaster_cli_cmd+0x426>
        panmaster_compress();
    c5d8:	f7ff fcec 	bl	bfb4 <panmaster_compress>
    c5dc:	e61e      	b.n	c21c <panmaster_cli_cmd+0x64>
    } else if (!strcmp(argv[1], "sort")) {
    c5de:	4915      	ldr	r1, [pc, #84]	; (c634 <panmaster_cli_cmd+0x47c>)
    c5e0:	4638      	mov	r0, r7
    c5e2:	f003 f831 	bl	f648 <strcmp>
    c5e6:	b910      	cbnz	r0, c5ee <panmaster_cli_cmd+0x436>
        panmaster_sort();
    c5e8:	f7ff fcea 	bl	bfc0 <panmaster_sort>
    c5ec:	e616      	b.n	c21c <panmaster_cli_cmd+0x64>
    } else if (!strcmp(argv[1], "dump")) {
    c5ee:	4912      	ldr	r1, [pc, #72]	; (c638 <panmaster_cli_cmd+0x480>)
    c5f0:	4638      	mov	r0, r7
    c5f2:	f003 f829 	bl	f648 <strcmp>
    c5f6:	b940      	cbnz	r0, c60a <panmaster_cli_cmd+0x452>
    streamer_printf(streamer, "# index addr euid flags role pslot slot_id fw-ver\n");
    c5f8:	4910      	ldr	r1, [pc, #64]	; (c63c <panmaster_cli_cmd+0x484>)
    c5fa:	4620      	mov	r0, r4
    c5fc:	f004 ff33 	bl	11466 <streamer_printf>
    panmaster_load(dump_cb, streamer);
    c600:	4621      	mov	r1, r4
    c602:	480f      	ldr	r0, [pc, #60]	; (c640 <panmaster_cli_cmd+0x488>)
    c604:	f7ff fb1c 	bl	bc40 <panmaster_load>
}
    c608:	e608      	b.n	c21c <panmaster_cli_cmd+0x64>
        streamer_printf(streamer, "Unknown cmd\n");
    c60a:	490e      	ldr	r1, [pc, #56]	; (c644 <panmaster_cli_cmd+0x48c>)
    c60c:	e5dd      	b.n	c1ca <panmaster_cli_cmd+0x12>
    c60e:	bf00      	nop
    c610:	00021f83 	.word	0x00021f83
    c614:	00021fc7 	.word	0x00021fc7
    c618:	00021f95 	.word	0x00021f95
    c61c:	00021f5f 	.word	0x00021f5f
    c620:	00021fa0 	.word	0x00021fa0
    c624:	00021fa5 	.word	0x00021fa5
    c628:	00021fb7 	.word	0x00021fb7
    c62c:	00021fcc 	.word	0x00021fcc
    c630:	00021fd2 	.word	0x00021fd2
    c634:	00021fd8 	.word	0x00021fd8
    c638:	00021fdd 	.word	0x00021fdd
    c63c:	00021fe2 	.word	0x00021fe2
    c640:	0000c149 	.word	0x0000c149
    c644:	00022015 	.word	0x00022015

0000c648 <list_nodes_load_cb>:
    if (node->index < lne->index_max  &&
    c648:	7d03      	ldrb	r3, [r0, #20]
    c64a:	688a      	ldr	r2, [r1, #8]
    c64c:	4293      	cmp	r3, r2
    c64e:	da13      	bge.n	c678 <list_nodes_load_cb+0x30>
        node->index >= lne->index_off) {
    c650:	684a      	ldr	r2, [r1, #4]
    if (node->index < lne->index_max  &&
    c652:	4293      	cmp	r3, r2
    c654:	db10      	blt.n	c678 <list_nodes_load_cb+0x30>
        memcpy(&lne->nodes[node->index - lne->index_off], node,
    c656:	1a9b      	subs	r3, r3, r2
    c658:	680a      	ldr	r2, [r1, #0]
    c65a:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
    c65e:	4413      	add	r3, r2
    c660:	f100 021c 	add.w	r2, r0, #28
    c664:	f850 1b04 	ldr.w	r1, [r0], #4
    c668:	f843 1b04 	str.w	r1, [r3], #4
    c66c:	4290      	cmp	r0, r2
    c66e:	d1f9      	bne.n	c664 <list_nodes_load_cb+0x1c>
    c670:	8802      	ldrh	r2, [r0, #0]
    c672:	801a      	strh	r2, [r3, #0]
    c674:	7882      	ldrb	r2, [r0, #2]
    c676:	709a      	strb	r2, [r3, #2]
}
    c678:	4770      	bx	lr
	...

0000c67c <panmaster_cli_register>:

int
panmaster_cli_register(void)
{
    return shell_cmd_register(&shell_panmaster_cmd);
    c67c:	4801      	ldr	r0, [pc, #4]	; (c684 <panmaster_cli_register+0x8>)
    c67e:	f007 badd 	b.w	13c3c <shell_cmd_register>
    c682:	bf00      	nop
    c684:	20000604 	.word	0x20000604

0000c688 <node_idx_load_cb>:
static void
node_idx_load_cb(struct panmaster_node *node, void *cb_arg)
{
    struct panmaster_node_idx *nodes = (struct panmaster_node_idx*)cb_arg;

    if (node->index <= MYNEWT_VAL(PANMASTER_MAXNUM_NODES)) {
    c688:	7d03      	ldrb	r3, [r0, #20]
    c68a:	2b40      	cmp	r3, #64	; 0x40
{
    c68c:	b530      	push	{r4, r5, lr}
    if (node->index <= MYNEWT_VAL(PANMASTER_MAXNUM_NODES)) {
    c68e:	d822      	bhi.n	c6d6 <node_idx_load_cb+0x4e>
        nodes[node->index].addr = node->addr;
    c690:	7c04      	ldrb	r4, [r0, #16]
    c692:	7c45      	ldrb	r5, [r0, #17]
    c694:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    c698:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    c69c:	f821 4032 	strh.w	r4, [r1, r2, lsl #3]
    c6a0:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
        nodes[node->index].euid = node->euid;
    c6a4:	6881      	ldr	r1, [r0, #8]
    c6a6:	68c2      	ldr	r2, [r0, #12]
    c6a8:	e9c3 1202 	strd	r1, r2, [r3, #8]
        nodes[node->index].role = node->role;
    c6ac:	7cc2      	ldrb	r2, [r0, #19]
        nodes[node->index].has_perm_slot = node->has_perm_slot;
    c6ae:	7c59      	ldrb	r1, [r3, #17]
        nodes[node->index].role = node->role;
    c6b0:	f3c2 1203 	ubfx	r2, r2, #4, #4
    c6b4:	741a      	strb	r2, [r3, #16]
        nodes[node->index].has_perm_slot = node->has_perm_slot;
    c6b6:	7cc2      	ldrb	r2, [r0, #19]
    c6b8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    c6bc:	f362 0100 	bfi	r1, r2, #0, #1
        if (node->has_perm_slot) {
    c6c0:	7cc2      	ldrb	r2, [r0, #19]
        nodes[node->index].has_perm_slot = node->has_perm_slot;
    c6c2:	7459      	strb	r1, [r3, #17]
        if (node->has_perm_slot) {
    c6c4:	0712      	lsls	r2, r2, #28
    c6c6:	d506      	bpl.n	c6d6 <node_idx_load_cb+0x4e>
            nodes[node->index].slot_id = node->slot_id;
    c6c8:	7d42      	ldrb	r2, [r0, #21]
    c6ca:	7d81      	ldrb	r1, [r0, #22]
    c6cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c6d0:	805a      	strh	r2, [r3, #2]
            nodes[node->index].lease_ends = 0;
    c6d2:	2200      	movs	r2, #0
    c6d4:	615a      	str	r2, [r3, #20]
        }
    }
}
    c6d6:	bd30      	pop	{r4, r5, pc}

0000c6d8 <fcb_load_cb>:
{
    c6d8:	b530      	push	{r4, r5, lr}
    c6da:	4604      	mov	r4, r0
    c6dc:	b089      	sub	sp, #36	; 0x24
    memset(&tmpnode,0,sizeof(struct panmaster_node));
    c6de:	221f      	movs	r2, #31
{
    c6e0:	460d      	mov	r5, r1
    memset(&tmpnode,0,sizeof(struct panmaster_node));
    c6e2:	4668      	mov	r0, sp
    c6e4:	2100      	movs	r1, #0
    c6e6:	f002 ff8a 	bl	f5fe <memset>
    if (loc->fe_data_len != sizeof(struct panmaster_node) &&
    c6ea:	89a3      	ldrh	r3, [r4, #12]
    c6ec:	f023 0208 	bic.w	r2, r3, #8
    c6f0:	2a17      	cmp	r2, #23
    c6f2:	d10d      	bne.n	c710 <fcb_load_cb+0x38>
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, &tmpnode, loc->fe_data_len);
    c6f4:	68a1      	ldr	r1, [r4, #8]
    c6f6:	6820      	ldr	r0, [r4, #0]
    c6f8:	466a      	mov	r2, sp
    c6fa:	f006 f875 	bl	127e8 <flash_area_read>
    if (rc) {
    c6fe:	4604      	mov	r4, r0
    c700:	b940      	cbnz	r0, c714 <fcb_load_cb+0x3c>
    argp->cb(&tmpnode, argp->cb_arg);
    c702:	e9d5 3100 	ldrd	r3, r1, [r5]
    c706:	4668      	mov	r0, sp
    c708:	4798      	blx	r3
}
    c70a:	4620      	mov	r0, r4
    c70c:	b009      	add	sp, #36	; 0x24
    c70e:	bd30      	pop	{r4, r5, pc}
        return 1;
    c710:	2401      	movs	r4, #1
    c712:	e7fa      	b.n	c70a <fcb_load_cb+0x32>
        return 0;
    c714:	2400      	movs	r4, #0
    c716:	e7f8      	b.n	c70a <fcb_load_cb+0x32>

0000c718 <find_node_load_cb>:
static void
find_node_load_cb(struct panmaster_node *node, void *cb_arg)
{
    struct find_node_s *fn = (struct find_node_s*)cb_arg;

    if ((fn->find.index != 0     && fn->find.index == node->index) ||
    c718:	7d0b      	ldrb	r3, [r1, #20]
{
    c71a:	b530      	push	{r4, r5, lr}
    if ((fn->find.index != 0     && fn->find.index == node->index) ||
    c71c:	b113      	cbz	r3, c724 <find_node_load_cb+0xc>
    c71e:	7d02      	ldrb	r2, [r0, #20]
    c720:	429a      	cmp	r2, r3
    c722:	d012      	beq.n	c74a <find_node_load_cb+0x32>
        (fn->find.addr != 0xffff && fn->find.addr == node->addr) ||
    c724:	8a0b      	ldrh	r3, [r1, #16]
    if ((fn->find.index != 0     && fn->find.index == node->index) ||
    c726:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c72a:	4293      	cmp	r3, r2
    c72c:	d002      	beq.n	c734 <find_node_load_cb+0x1c>
        (fn->find.addr != 0xffff && fn->find.addr == node->addr) ||
    c72e:	8a02      	ldrh	r2, [r0, #16]
    c730:	429a      	cmp	r2, r3
    c732:	d00a      	beq.n	c74a <find_node_load_cb+0x32>
        (fn->find.euid != 0 && fn->find.euid == node->euid)) {
    c734:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
        (fn->find.addr != 0xffff && fn->find.addr == node->addr) ||
    c738:	ea52 0403 	orrs.w	r4, r2, r3
    c73c:	d014      	beq.n	c768 <find_node_load_cb+0x50>
        (fn->find.euid != 0 && fn->find.euid == node->euid)) {
    c73e:	6885      	ldr	r5, [r0, #8]
    c740:	68c4      	ldr	r4, [r0, #12]
    c742:	42a3      	cmp	r3, r4
    c744:	bf08      	it	eq
    c746:	42aa      	cmpeq	r2, r5
    c748:	d10e      	bne.n	c768 <find_node_load_cb+0x50>
        memcpy(fn->results, node, sizeof(struct panmaster_node));
    c74a:	6a0b      	ldr	r3, [r1, #32]
    c74c:	f100 021c 	add.w	r2, r0, #28
    c750:	f850 4b04 	ldr.w	r4, [r0], #4
    c754:	f843 4b04 	str.w	r4, [r3], #4
    c758:	4290      	cmp	r0, r2
    c75a:	d1f9      	bne.n	c750 <find_node_load_cb+0x38>
    c75c:	8802      	ldrh	r2, [r0, #0]
    c75e:	801a      	strh	r2, [r3, #0]
    c760:	7882      	ldrb	r2, [r0, #2]
    c762:	709a      	strb	r2, [r3, #2]
        fn->is_found = 1;
    c764:	2301      	movs	r3, #1
    c766:	624b      	str	r3, [r1, #36]	; 0x24
    }
}
    c768:	bd30      	pop	{r4, r5, pc}

0000c76a <sort_nodes_load_cb>:
static void
sort_nodes_load_cb(struct panmaster_node *node, void *cb_arg)
{
    struct panmaster_node *nodes = (struct panmaster_node*)cb_arg;

    if (node->index < MYNEWT_VAL(PANMASTER_MAXNUM_NODES)) {
    c76a:	7d03      	ldrb	r3, [r0, #20]
    c76c:	2b3f      	cmp	r3, #63	; 0x3f
    c76e:	d80e      	bhi.n	c78e <sort_nodes_load_cb+0x24>
        memcpy(&nodes[node->index], node, sizeof(struct panmaster_node));
    c770:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
    c774:	4419      	add	r1, r3
    c776:	f100 031c 	add.w	r3, r0, #28
    c77a:	f850 2b04 	ldr.w	r2, [r0], #4
    c77e:	f841 2b04 	str.w	r2, [r1], #4
    c782:	4298      	cmp	r0, r3
    c784:	d1f9      	bne.n	c77a <sort_nodes_load_cb+0x10>
    c786:	8803      	ldrh	r3, [r0, #0]
    c788:	800b      	strh	r3, [r1, #0]
    c78a:	7883      	ldrb	r3, [r0, #2]
    c78c:	708b      	strb	r3, [r1, #2]
    }
}
    c78e:	4770      	bx	lr

0000c790 <panm_fcb_src>:
{
    c790:	b538      	push	{r3, r4, r5, lr}
    pm->pm_fcb.f_version = PANM_FCB_VERS;
    c792:	2302      	movs	r3, #2
    c794:	7103      	strb	r3, [r0, #4]
    pm->pm_fcb.f_scratch_cnt = 1;
    c796:	2301      	movs	r3, #1
{
    c798:	4604      	mov	r4, r0
    pm->pm_fcb.f_scratch_cnt = 1;
    c79a:	7183      	strb	r3, [r0, #6]
        rc = fcb_init(&pm->pm_fcb);
    c79c:	4620      	mov	r0, r4
    c79e:	f009 fff9 	bl	16794 <fcb_init>
        if (rc) {
    c7a2:	4605      	mov	r5, r0
    c7a4:	b950      	cbnz	r0, c7bc <panm_fcb_src+0x2c>
        if (fcb_free_sector_cnt(&pm->pm_fcb) < 1) {
    c7a6:	4620      	mov	r0, r4
    c7a8:	f009 ff76 	bl	16698 <fcb_free_sector_cnt>
    c7ac:	2800      	cmp	r0, #0
    c7ae:	dc06      	bgt.n	c7be <panm_fcb_src+0x2e>
            flash_area_erase(pm->pm_fcb.f_active.fe_area, 0,
    c7b0:	69e0      	ldr	r0, [r4, #28]
    c7b2:	4629      	mov	r1, r5
    c7b4:	6882      	ldr	r2, [r0, #8]
    c7b6:	f006 f83b 	bl	12830 <flash_area_erase>
        rc = fcb_init(&pm->pm_fcb);
    c7ba:	e7ef      	b.n	c79c <panm_fcb_src+0xc>
            return OS_INVALID_PARM;
    c7bc:	2503      	movs	r5, #3
}
    c7be:	4628      	mov	r0, r5
    c7c0:	bd38      	pop	{r3, r4, r5, pc}
	...

0000c7c4 <panm_fcb_load>:
{
    c7c4:	b507      	push	{r0, r1, r2, lr}
    arg.cb_arg = cb_arg;
    c7c6:	e9cd 1200 	strd	r1, r2, [sp]
    rc = fcb_walk(&pm->pm_fcb, 0, fcb_load_cb, &arg);
    c7ca:	466b      	mov	r3, sp
    c7cc:	4a04      	ldr	r2, [pc, #16]	; (c7e0 <panm_fcb_load+0x1c>)
    c7ce:	2100      	movs	r1, #0
    c7d0:	f00a fa6c 	bl	16cac <fcb_walk>
        return OS_EINVAL;
    c7d4:	2800      	cmp	r0, #0
}
    c7d6:	bf18      	it	ne
    c7d8:	2002      	movne	r0, #2
    c7da:	b003      	add	sp, #12
    c7dc:	f85d fb04 	ldr.w	pc, [sp], #4
    c7e0:	0000c6d9 	.word	0x0000c6d9

0000c7e4 <panm_fcb_load_idx>:
{
    c7e4:	460a      	mov	r2, r1
    return panm_fcb_load(pm, node_idx_load_cb, (void*)nodes);
    c7e6:	4901      	ldr	r1, [pc, #4]	; (c7ec <panm_fcb_load_idx+0x8>)
    c7e8:	f7ff bfec 	b.w	c7c4 <panm_fcb_load>
    c7ec:	0000c689 	.word	0x0000c689

0000c7f0 <panm_fcb_find_node>:
    fns->is_found = 0;
    c7f0:	2300      	movs	r3, #0
{
    c7f2:	460a      	mov	r2, r1
    fns->is_found = 0;
    c7f4:	624b      	str	r3, [r1, #36]	; 0x24
    return panm_fcb_load(pf, find_node_load_cb, (void*)fns);
    c7f6:	4901      	ldr	r1, [pc, #4]	; (c7fc <panm_fcb_find_node+0xc>)
    c7f8:	f7ff bfe4 	b.w	c7c4 <panm_fcb_load>
    c7fc:	0000c719 	.word	0x0000c719

0000c800 <panm_fcb_compress>:
{
    c800:	b570      	push	{r4, r5, r6, lr}
    c802:	b098      	sub	sp, #96	; 0x60
    c804:	4604      	mov	r4, r0
    rc = fcb_append_to_scratch(&pm->pm_fcb);
    c806:	f00a f85f 	bl	168c8 <fcb_append_to_scratch>
    if (rc) {
    c80a:	b950      	cbnz	r0, c822 <panm_fcb_compress+0x22>
    loc1.fe_elem_off = 0;
    c80c:	e9cd 0000 	strd	r0, r0, [sp]
    while (fcb_getnext(&pm->pm_fcb, &loc1) == 0) {
    c810:	466e      	mov	r6, sp
    c812:	4631      	mov	r1, r6
    c814:	4620      	mov	r0, r4
    c816:	f00a f9f5 	bl	16c04 <fcb_getnext>
    c81a:	b120      	cbz	r0, c826 <panm_fcb_compress+0x26>
    rc = fcb_rotate(&pm->pm_fcb);
    c81c:	4620      	mov	r0, r4
    c81e:	f00a fa0b 	bl	16c38 <fcb_rotate>
}
    c822:	b018      	add	sp, #96	; 0x60
    c824:	bd70      	pop	{r4, r5, r6, pc}
        if (loc1.fe_area != pm->pm_fcb.f_oldest) {
    c826:	9800      	ldr	r0, [sp, #0]
    c828:	69a3      	ldr	r3, [r4, #24]
    c82a:	4298      	cmp	r0, r3
    c82c:	d1f6      	bne.n	c81c <panm_fcb_compress+0x1c>
        rc = flash_area_read(loc1.fe_area, loc1.fe_data_off, &buf1,
    c82e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    c832:	9902      	ldr	r1, [sp, #8]
    c834:	aa08      	add	r2, sp, #32
    c836:	f005 ffd7 	bl	127e8 <flash_area_read>
        if (rc) {
    c83a:	2800      	cmp	r0, #0
    c83c:	d1e9      	bne.n	c812 <panm_fcb_compress+0x12>
        loc2 = loc1;
    c83e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    c842:	ad04      	add	r5, sp, #16
    c844:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        while (fcb_getnext(&pm->pm_fcb, &loc2) == 0) {
    c848:	4629      	mov	r1, r5
    c84a:	4620      	mov	r0, r4
    c84c:	f00a f9da 	bl	16c04 <fcb_getnext>
    c850:	b1e0      	cbz	r0, c88c <panm_fcb_compress+0x8c>
        rc = flash_area_read(loc1.fe_area, loc1.fe_data_off, &buf1,
    c852:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    c856:	9902      	ldr	r1, [sp, #8]
    c858:	9800      	ldr	r0, [sp, #0]
    c85a:	aa08      	add	r2, sp, #32
    c85c:	f005 ffc4 	bl	127e8 <flash_area_read>
        if (rc) {
    c860:	2800      	cmp	r0, #0
    c862:	d1d6      	bne.n	c812 <panm_fcb_compress+0x12>
        rc = fcb_append(&pm->pm_fcb, sizeof(struct panmaster_node), &loc2);
    c864:	462a      	mov	r2, r5
    c866:	211f      	movs	r1, #31
    c868:	4620      	mov	r0, r4
    c86a:	f00a f849 	bl	16900 <fcb_append>
        if (rc) {
    c86e:	2800      	cmp	r0, #0
    c870:	d1cf      	bne.n	c812 <panm_fcb_compress+0x12>
        rc = flash_area_write(loc2.fe_area, loc2.fe_data_off, &buf1,
    c872:	9906      	ldr	r1, [sp, #24]
    c874:	9804      	ldr	r0, [sp, #16]
    c876:	231f      	movs	r3, #31
    c878:	aa08      	add	r2, sp, #32
    c87a:	f005 ffc7 	bl	1280c <flash_area_write>
        if (rc) {
    c87e:	2800      	cmp	r0, #0
    c880:	d1c7      	bne.n	c812 <panm_fcb_compress+0x12>
        fcb_append_finish(&pm->pm_fcb, &loc2);
    c882:	4629      	mov	r1, r5
    c884:	4620      	mov	r0, r4
    c886:	f00a f8bd 	bl	16a04 <fcb_append_finish>
    c88a:	e7c2      	b.n	c812 <panm_fcb_compress+0x12>
            if (loc2.fe_area == pm->pm_fcb.f_oldest) {
    c88c:	9804      	ldr	r0, [sp, #16]
    c88e:	69a3      	ldr	r3, [r4, #24]
    c890:	4298      	cmp	r0, r3
    c892:	d0d9      	beq.n	c848 <panm_fcb_compress+0x48>
            rc = flash_area_read(loc2.fe_area, loc2.fe_data_off, &buf2,
    c894:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    c898:	9906      	ldr	r1, [sp, #24]
    c89a:	aa10      	add	r2, sp, #64	; 0x40
    c89c:	f005 ffa4 	bl	127e8 <flash_area_read>
            if (rc) {
    c8a0:	2800      	cmp	r0, #0
    c8a2:	d1d1      	bne.n	c848 <panm_fcb_compress+0x48>
            if (buf1.euid == buf2.euid) {
    c8a4:	e9dd 020a 	ldrd	r0, r2, [sp, #40]	; 0x28
    c8a8:	e9dd 1312 	ldrd	r1, r3, [sp, #72]	; 0x48
    c8ac:	429a      	cmp	r2, r3
    c8ae:	bf08      	it	eq
    c8b0:	4288      	cmpeq	r0, r1
    c8b2:	d1c9      	bne.n	c848 <panm_fcb_compress+0x48>
    c8b4:	e7ad      	b.n	c812 <panm_fcb_compress+0x12>

0000c8b6 <panm_fcb_save>:
{
    c8b6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    c8b8:	4605      	mov	r5, r0
    if (!node) {
    c8ba:	460c      	mov	r4, r1
    c8bc:	b301      	cbz	r1, c900 <panm_fcb_save+0x4a>
    c8be:	260a      	movs	r6, #10
        rc = fcb_append(&pm->pm_fcb, len, &loc);
    c8c0:	466a      	mov	r2, sp
    c8c2:	211f      	movs	r1, #31
    c8c4:	4628      	mov	r0, r5
    c8c6:	f00a f81b 	bl	16900 <fcb_append>
        if (rc != FCB_ERR_NOSPACE) {
    c8ca:	1d03      	adds	r3, r0, #4
    c8cc:	d108      	bne.n	c8e0 <panm_fcb_save+0x2a>
        panm_fcb_compress(pm);
    c8ce:	4628      	mov	r0, r5
    c8d0:	f7ff ff96 	bl	c800 <panm_fcb_compress>
    for (i = 0; i < 10; i++) {
    c8d4:	3e01      	subs	r6, #1
    c8d6:	d1f3      	bne.n	c8c0 <panm_fcb_save+0xa>
        return OS_EINVAL;
    c8d8:	2402      	movs	r4, #2
}
    c8da:	4620      	mov	r0, r4
    c8dc:	b004      	add	sp, #16
    c8de:	bd70      	pop	{r4, r5, r6, pc}
    if (rc) {
    c8e0:	2800      	cmp	r0, #0
    c8e2:	d1f9      	bne.n	c8d8 <panm_fcb_save+0x22>
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, len);
    c8e4:	4622      	mov	r2, r4
    c8e6:	9902      	ldr	r1, [sp, #8]
    c8e8:	9800      	ldr	r0, [sp, #0]
    c8ea:	231f      	movs	r3, #31
    c8ec:	f005 ff8e 	bl	1280c <flash_area_write>
    if (rc) {
    c8f0:	4604      	mov	r4, r0
    c8f2:	2800      	cmp	r0, #0
    c8f4:	d1f0      	bne.n	c8d8 <panm_fcb_save+0x22>
    fcb_append_finish(&pm->pm_fcb, &loc);
    c8f6:	4669      	mov	r1, sp
    c8f8:	4628      	mov	r0, r5
    c8fa:	f00a f883 	bl	16a04 <fcb_append_finish>
    return panm_fcb_append(pm, (uint8_t*)node, sizeof(struct panmaster_node));
    c8fe:	e7ec      	b.n	c8da <panm_fcb_save+0x24>
        return OS_INVALID_PARM;
    c900:	2403      	movs	r4, #3
    c902:	e7ea      	b.n	c8da <panm_fcb_save+0x24>

0000c904 <panm_fcb_clear>:
    return fcb_clear(&pm->pm_fcb);
    c904:	f009 bfc9 	b.w	1689a <fcb_clear>

0000c908 <panm_fcb_sort>:

void
panm_fcb_sort(struct panm_fcb *pm)
{
    c908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c90c:	4607      	mov	r7, r0
    int laddr_i;
    struct panmaster_node *nodes;
    int lne_nodes_sz = sizeof(struct panmaster_node)*
        MYNEWT_VAL(PANMASTER_MAXNUM_NODES);

    nodes = (struct panmaster_node*)malloc(lne_nodes_sz);
    c90e:	f44f 60f8 	mov.w	r0, #1984	; 0x7c0
    c912:	f002 fde1 	bl	f4d8 <malloc>
    if (!nodes) {
    c916:	4604      	mov	r4, r0
    c918:	b3b0      	cbz	r0, c988 <panm_fcb_sort+0x80>
        return;
    }

    memset(nodes, 0xff, lne_nodes_sz);
    c91a:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
    c91e:	21ff      	movs	r1, #255	; 0xff
    c920:	f002 fe6d 	bl	f5fe <memset>
    panmaster_load(sort_nodes_load_cb, nodes);
    c924:	4621      	mov	r1, r4
    c926:	4819      	ldr	r0, [pc, #100]	; (c98c <panm_fcb_sort+0x84>)
    c928:	f7ff f98a 	bl	bc40 <panmaster_load>

    /* Clear nodes storage area */
    panm_fcb_clear(pm);
    c92c:	4638      	mov	r0, r7
    c92e:	f7ff ffe9 	bl	c904 <panm_fcb_clear>

    /* Save nodes from memory in sorted order */
    for(index=0;index<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);index++) {
    c932:	2600      	movs	r6, #0
        laddr = 0xffff;
    c934:	f64f 79ff 	movw	r9, #65535	; 0xffff
            break;
        }

        nodes[laddr_i].index = index;
        panm_fcb_save(pm, &nodes[laddr_i]);
        nodes[laddr_i].addr = 0xffff;
    c938:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
        laddr = 0xffff;
    c93c:	f64f 72ff 	movw	r2, #65535	; 0xffff
        for(i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
    c940:	2300      	movs	r3, #0
            if (nodes[i].addr == 0xffff) {
    c942:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
    c946:	4421      	add	r1, r4
    c948:	8a09      	ldrh	r1, [r1, #16]
    c94a:	4549      	cmp	r1, r9
    c94c:	d003      	beq.n	c956 <panm_fcb_sort+0x4e>
            if (nodes[i].addr < laddr) {
    c94e:	4291      	cmp	r1, r2
    c950:	bfbc      	itt	lt
    c952:	4698      	movlt	r8, r3
    c954:	460a      	movlt	r2, r1
        for(i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
    c956:	3301      	adds	r3, #1
    c958:	2b40      	cmp	r3, #64	; 0x40
    c95a:	d1f2      	bne.n	c942 <panm_fcb_sort+0x3a>
        if (laddr == 0xffff) {
    c95c:	454a      	cmp	r2, r9
    c95e:	d00e      	beq.n	c97e <panm_fcb_sort+0x76>
        nodes[laddr_i].index = index;
    c960:	ebc8 1548 	rsb	r5, r8, r8, lsl #5
    c964:	4425      	add	r5, r4
        panm_fcb_save(pm, &nodes[laddr_i]);
    c966:	4629      	mov	r1, r5
        nodes[laddr_i].index = index;
    c968:	752e      	strb	r6, [r5, #20]
        panm_fcb_save(pm, &nodes[laddr_i]);
    c96a:	4638      	mov	r0, r7
    for(index=0;index<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);index++) {
    c96c:	3601      	adds	r6, #1
        panm_fcb_save(pm, &nodes[laddr_i]);
    c96e:	f7ff ffa2 	bl	c8b6 <panm_fcb_save>
    for(index=0;index<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);index++) {
    c972:	2e40      	cmp	r6, #64	; 0x40
        nodes[laddr_i].addr = 0xffff;
    c974:	f885 a010 	strb.w	sl, [r5, #16]
    c978:	f885 a011 	strb.w	sl, [r5, #17]
    for(index=0;index<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);index++) {
    c97c:	d1de      	bne.n	c93c <panm_fcb_sort+0x34>
    }

    free(nodes);
    c97e:	4620      	mov	r0, r4
}
    c980:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    free(nodes);
    c984:	f002 bdf4 	b.w	f570 <free>
}
    c988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c98c:	0000c76b 	.word	0x0000c76b

0000c990 <uwb_rng_tof_to_meters>:
 *
 * @return range in meters
 */
dpl_float64_t
uwb_rng_tof_to_meters(dpl_float64_t ToF)
{
    c990:	b538      	push	{r3, r4, r5, lr}
    c992:	ec55 4b10 	vmov	r4, r5, d0
    if (DPL_FLOAT64_ISNAN(ToF)) {
    c996:	ee10 2a10 	vmov	r2, s0
    c99a:	ee10 0a10 	vmov	r0, s0
    c99e:	462b      	mov	r3, r5
    c9a0:	4629      	mov	r1, r5
    c9a2:	f013 fd27 	bl	203f4 <__aeabi_dcmpun>
    c9a6:	b948      	cbnz	r0, c9bc <uwb_rng_tof_to_meters+0x2c>
        return DPL_FLOAT64_NAN();
    }
    /* ToF * (299792458.0l/1.000293l) * (1.0/499.2e6/128.0) */
    dpl_float64_t tmp = DPL_FLOAT64_INIT((299792458.0l/1.000293l) * (1.0/499.2e6/128.0));
    return DPL_FLOAT64_MUL(ToF, tmp);
    c9a8:	a309      	add	r3, pc, #36	; (adr r3, c9d0 <uwb_rng_tof_to_meters+0x40>)
    c9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    c9ae:	4620      	mov	r0, r4
    c9b0:	4629      	mov	r1, r5
    c9b2:	f013 fa85 	bl	1fec0 <__aeabi_dmul>
    c9b6:	ec41 0b10 	vmov	d0, r0, r1
}
    c9ba:	bd38      	pop	{r3, r4, r5, pc}
        return DPL_FLOAT64_NAN();
    c9bc:	ed9f 0b02 	vldr	d0, [pc, #8]	; c9c8 <uwb_rng_tof_to_meters+0x38>
    c9c0:	e7fb      	b.n	c9ba <uwb_rng_tof_to_meters+0x2a>
    c9c2:	bf00      	nop
    c9c4:	f3af 8000 	nop.w
    c9c8:	00000000 	.word	0x00000000
    c9cc:	7ff80000 	.word	0x7ff80000
    c9d0:	e57d514d 	.word	0xe57d514d
    c9d4:	3f73363a 	.word	0x3f73363a

0000c9d8 <calc_tof_ss>:

dpl_float64_t
calc_tof_ss(uint32_t response_timestamp, uint32_t request_timestamp,
            uint64_t transmission_timestamp,
            uint64_t reception_timestamp,  dpl_float64_t skew)
{
    c9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    T1R = (response_timestamp - request_timestamp);
    T1r = (transmission_timestamp - reception_timestamp) & MASK32;
    tmpf = DPL_FLOAT64_MUL(DPL_FLOAT64_U64_TO_F64(T1r),
                                DPL_FLOAT64_SUB(DPL_FLOAT64_INIT(1.0), skew));
    ToF = DPL_FLOAT64_SUB(DPL_FLOAT64_U64_TO_F64(T1R), tmpf);
    c9dc:	1a40      	subs	r0, r0, r1
{
    c9de:	ec59 8b10 	vmov	r8, r9, d0
    c9e2:	4614      	mov	r4, r2
    ToF = DPL_FLOAT64_SUB(DPL_FLOAT64_U64_TO_F64(T1R), tmpf);
    c9e4:	f013 f9f2 	bl	1fdcc <__aeabi_ui2d>
{
    c9e8:	9d08      	ldr	r5, [sp, #32]
    ToF = DPL_FLOAT64_SUB(DPL_FLOAT64_U64_TO_F64(T1R), tmpf);
    c9ea:	4606      	mov	r6, r0
    c9ec:	460f      	mov	r7, r1
    T1r = (transmission_timestamp - reception_timestamp) & MASK32;
    c9ee:	1b60      	subs	r0, r4, r5
    tmpf = DPL_FLOAT64_MUL(DPL_FLOAT64_U64_TO_F64(T1r),
    c9f0:	2100      	movs	r1, #0
    c9f2:	f013 fa2f 	bl	1fe54 <__aeabi_ul2d>
    c9f6:	4642      	mov	r2, r8
    c9f8:	4604      	mov	r4, r0
    c9fa:	460d      	mov	r5, r1
    c9fc:	464b      	mov	r3, r9
    c9fe:	490c      	ldr	r1, [pc, #48]	; (ca30 <calc_tof_ss+0x58>)
    ca00:	2000      	movs	r0, #0
    ca02:	f013 f8a5 	bl	1fb50 <__aeabi_dsub>
    ca06:	4602      	mov	r2, r0
    ca08:	460b      	mov	r3, r1
    ca0a:	4620      	mov	r0, r4
    ca0c:	4629      	mov	r1, r5
    ca0e:	f013 fa57 	bl	1fec0 <__aeabi_dmul>
    ca12:	4602      	mov	r2, r0
    ca14:	460b      	mov	r3, r1
    ToF = DPL_FLOAT64_SUB(DPL_FLOAT64_U64_TO_F64(T1R), tmpf);
    ca16:	4630      	mov	r0, r6
    ca18:	4639      	mov	r1, r7
    ca1a:	f013 f899 	bl	1fb50 <__aeabi_dsub>
    ToF = DPL_FLOAT64_DIV(ToF, DPL_FLOAT64_INIT(2.0));
    ca1e:	4b05      	ldr	r3, [pc, #20]	; (ca34 <calc_tof_ss+0x5c>)
    ca20:	2200      	movs	r2, #0
    ca22:	f013 fa4d 	bl	1fec0 <__aeabi_dmul>

    return ToF;
}
    ca26:	ec41 0b10 	vmov	d0, r0, r1
    ca2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ca2e:	bf00      	nop
    ca30:	3ff00000 	.word	0x3ff00000
    ca34:	3fe00000 	.word	0x3fe00000

0000ca38 <calc_tof_ds>:
dpl_float64_t
calc_tof_ds(uint32_t first_response_timestamp, uint32_t first_request_timestamp,
            uint64_t first_transmission_timestamp, uint64_t first_reception_timestamp,
            uint32_t response_timestamp, uint32_t request_timestamp,
            uint64_t transmission_timestamp, uint64_t reception_timestamp)
{
    ca38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dpl_float64_t ToF = DPL_FLOAT64_I32_TO_F64(0);
    uint64_t T1R, T1r, T2R, T2r;
    int64_t nom, denom;

    T1R = (first_response_timestamp - first_request_timestamp);
    ca3a:	1a41      	subs	r1, r0, r1
    T1r = (first_transmission_timestamp  - first_reception_timestamp) & MASK32;
    T2R = (response_timestamp - request_timestamp);
    ca3c:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
{
    ca40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ca42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    T1r = (first_transmission_timestamp  - first_reception_timestamp) & MASK32;
    ca44:	9d06      	ldr	r5, [sp, #24]
    T2R = (response_timestamp - request_timestamp);
    ca46:	1a1b      	subs	r3, r3, r0
    T2r = (transmission_timestamp - reception_timestamp) & MASK32;
    ca48:	1ba0      	subs	r0, r4, r6
    T1r = (first_transmission_timestamp  - first_reception_timestamp) & MASK32;
    ca4a:	1b52      	subs	r2, r2, r5
    nom = T1R * T2R  - T1r * T2r;
    denom = T1R + T2R  + T1r + T2r;
    ca4c:	181c      	adds	r4, r3, r0
    T1r = (first_transmission_timestamp  - first_reception_timestamp) & MASK32;
    ca4e:	f04f 0500 	mov.w	r5, #0
    denom = T1R + T2R  + T1r + T2r;
    ca52:	416d      	adcs	r5, r5
    ca54:	18a4      	adds	r4, r4, r2
    ca56:	f145 0500 	adc.w	r5, r5, #0
    ca5a:	1864      	adds	r4, r4, r1
    ca5c:	f145 0500 	adc.w	r5, r5, #0

    if (denom == 0) {
    ca60:	ea54 0605 	orrs.w	r6, r4, r5
    ca64:	d017      	beq.n	ca96 <calc_tof_ds+0x5e>
    nom = T1R * T2R  - T1r * T2r;
    ca66:	fba1 3103 	umull	r3, r1, r1, r3
    ca6a:	fba2 0200 	umull	r0, r2, r2, r0
    ca6e:	1a18      	subs	r0, r3, r0
    ca70:	eb61 0102 	sbc.w	r1, r1, r2
        return DPL_FLOAT64_NAN();
    }

    ToF = DPL_FLOAT64_DIV(DPL_FLOAT64_I64_TO_F64(nom),
    ca74:	f013 f9f6 	bl	1fe64 <__aeabi_l2d>
    ca78:	4606      	mov	r6, r0
    ca7a:	460f      	mov	r7, r1
    ca7c:	4620      	mov	r0, r4
    ca7e:	4629      	mov	r1, r5
    ca80:	f013 f9f0 	bl	1fe64 <__aeabi_l2d>
    ca84:	4602      	mov	r2, r0
    ca86:	460b      	mov	r3, r1
    ca88:	4630      	mov	r0, r6
    ca8a:	4639      	mov	r1, r7
    ca8c:	f013 fb42 	bl	20114 <__aeabi_ddiv>
    ca90:	ec41 0b10 	vmov	d0, r0, r1
                                                DPL_FLOAT64_I64_TO_F64(denom));
    return ToF;
}
    ca94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DPL_FLOAT64_NAN();
    ca96:	ed9f 0b02 	vldr	d0, [pc, #8]	; caa0 <calc_tof_ds+0x68>
    ca9a:	e7fb      	b.n	ca94 <calc_tof_ds+0x5c>
    ca9c:	f3af 8000 	nop.w
    caa0:	00000000 	.word	0x00000000
    caa4:	7ff80000 	.word	0x7ff80000

0000caa8 <rx_complete_cb>:
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    survey_instance_t * survey = (survey_instance_t *)cbs->inst_ptr;

    if(inst->fctrl != FCNTL_IEEE_RANGE_16)
    caa8:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
    caac:	f648 0341 	movw	r3, #34881	; 0x8841
    cab0:	429a      	cmp	r2, r3
{
    cab2:	b570      	push	{r4, r5, r6, lr}
    if(inst->fctrl != FCNTL_IEEE_RANGE_16)
    cab4:	d107      	bne.n	cac6 <rx_complete_cb+0x1e>
    survey_instance_t * survey = (survey_instance_t *)cbs->inst_ptr;
    cab6:	684c      	ldr	r4, [r1, #4]
        return false;

    if(dpl_sem_get_count(&survey->sem) == 1){ // unsolicited inbound
    cab8:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
    cabc:	2b01      	cmp	r3, #1
    cabe:	d104      	bne.n	caca <rx_complete_cb+0x22>
        STATS_INC(survey->stat, rx_unsolicited);
    cac0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cac2:	3301      	adds	r3, #1
    cac4:	62a3      	str	r3, [r4, #40]	; 0x28
        return false;
    cac6:	2000      	movs	r0, #0
            return false;
    }
    dpl_error_t err = dpl_sem_release(&survey->sem);
    assert(err == DPL_OK);
    return true;
}
    cac8:	bd70      	pop	{r4, r5, r6, pc}
    if(inst->frame_len < sizeof(survey_broadcast_frame_t))
    caca:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
    cace:	2b42      	cmp	r3, #66	; 0x42
    cad0:	d9f9      	bls.n	cac6 <rx_complete_cb+0x1e>
    survey_broadcast_frame_t * frame = ((survey_broadcast_frame_t * ) inst->rxbuf);
    cad2:	f8d0 54fc 	ldr.w	r5, [r0, #1276]	; 0x4fc
    if(frame->dst_address != 0xffff)
    cad6:	f8b5 2005 	ldrh.w	r2, [r5, #5]
    cada:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cade:	429a      	cmp	r2, r3
    cae0:	d1f1      	bne.n	cac6 <rx_complete_cb+0x1e>
    if(survey->ccp->seq_num % survey->nnodes == 0)
    cae2:	6863      	ldr	r3, [r4, #4]
    cae4:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    cae8:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
    caec:	fbb3 f1f2 	udiv	r1, r3, r2
    caf0:	fb02 3311 	mls	r3, r2, r1, r3
    caf4:	b923      	cbnz	r3, cb00 <rx_complete_cb+0x58>
        survey->idx++;  // advance the nrngs idx at begining of sequence.
    caf6:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
    cafa:	3301      	adds	r3, #1
    cafc:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
    switch(frame->code) {
    cb00:	f8b5 2009 	ldrh.w	r2, [r5, #9]
    cb04:	f240 4331 	movw	r3, #1073	; 0x431
    cb08:	429a      	cmp	r2, r3
    cb0a:	d1dc      	bne.n	cac6 <rx_complete_cb+0x1e>
                if (frame->cell_id != inst->cell_id)
    cb0c:	f8b5 200d 	ldrh.w	r2, [r5, #13]
    cb10:	f8b0 34c4 	ldrh.w	r3, [r0, #1220]	; 0x4c4
    cb14:	429a      	cmp	r2, r3
    cb16:	d1d6      	bne.n	cac6 <rx_complete_cb+0x1e>
                if (frame->seq_num != survey->seq_num)
    cb18:	78aa      	ldrb	r2, [r5, #2]
    cb1a:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
    cb1e:	429a      	cmp	r2, r3
    cb20:	d123      	bne.n	cb6a <rx_complete_cb+0xc2>
                survey_nrngs_t * nrngs = survey->nrngs[survey->idx%survey->nframes];
    cb22:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    cb26:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
    cb2a:	fbb3 f1f2 	udiv	r1, r3, r2
    cb2e:	fb02 3311 	mls	r3, r2, r1, r3
    cb32:	b29b      	uxth	r3, r3
    cb34:	3328      	adds	r3, #40	; 0x28
                uint16_t nnodes = NumberOfBits(frame->mask);
    cb36:	f8b5 000f 	ldrh.w	r0, [r5, #15]
                survey_nrngs_t * nrngs = survey->nrngs[survey->idx%survey->nframes];
    cb3a:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
                uint16_t nnodes = NumberOfBits(frame->mask);
    cb3e:	f002 fae7 	bl	f110 <NumberOfBits>
                survey->status.empty = nnodes == 0;
    cb42:	b280      	uxth	r0, r0
    cb44:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    cb48:	fab0 f080 	clz	r0, r0
    cb4c:	0940      	lsrs	r0, r0, #5
    cb4e:	f360 1345 	bfi	r3, r0, #5, #1
    cb52:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
                if(survey->status.empty == 0){
    cb56:	f013 0f20 	tst.w	r3, #32
    cb5a:	f8b5 200b 	ldrh.w	r2, [r5, #11]
    cb5e:	d10f      	bne.n	cb80 <rx_complete_cb+0xd8>
                    nrngs->mask |= 1U << frame->slot_id;
    cb60:	2301      	movs	r3, #1
    cb62:	4093      	lsls	r3, r2
    cb64:	8832      	ldrh	r2, [r6, #0]
    cb66:	4313      	orrs	r3, r2
    cb68:	8033      	strh	r3, [r6, #0]
    return (dpl_error_t)os_sem_release(&sem->sem);
    cb6a:	f104 0084 	add.w	r0, r4, #132	; 0x84
    cb6e:	f7fd f861 	bl	9c34 <os_sem_release>
    assert(err == DPL_OK);
    cb72:	b158      	cbz	r0, cb8c <rx_complete_cb+0xe4>
    cb74:	2300      	movs	r3, #0
    cb76:	461a      	mov	r2, r3
    cb78:	4619      	mov	r1, r3
    cb7a:	4618      	mov	r0, r3
    cb7c:	f7fc f9ba 	bl	8ef4 <__assert_func>
                    nrngs->nrng[frame->slot_id].mask = 0;
    cb80:	2334      	movs	r3, #52	; 0x34
    cb82:	fb03 6602 	mla	r6, r3, r2, r6
    cb86:	2300      	movs	r3, #0
    cb88:	80b3      	strh	r3, [r6, #4]
                    break;
    cb8a:	e7ee      	b.n	cb6a <rx_complete_cb+0xc2>
    return true;
    cb8c:	2001      	movs	r0, #1
    cb8e:	e79b      	b.n	cac8 <rx_complete_cb+0x20>

0000cb90 <reset_cb.part.0>:
static void survey_complete_cb(struct dpl_event *ev) {
    cb90:	b508      	push	{r3, lr}
    assert(dpl_event_get_arg(ev) != NULL);
    cb92:	2300      	movs	r3, #0
    cb94:	461a      	mov	r2, r3
    cb96:	4619      	mov	r1, r3
    cb98:	4618      	mov	r0, r3
    cb9a:	f7fc f9ab 	bl	8ef4 <__assert_func>

0000cb9e <survey_complete_cb>:
static void survey_complete_cb(struct dpl_event *ev) {
    cb9e:	b508      	push	{r3, lr}
    assert(ev != NULL);
    cba0:	4603      	mov	r3, r0
    cba2:	b918      	cbnz	r0, cbac <survey_complete_cb+0xe>
    cba4:	4602      	mov	r2, r0
    cba6:	4601      	mov	r1, r0
    cba8:	f7fc f9a4 	bl	8ef4 <__assert_func>
    return ev->ev.ev_arg;
    cbac:	6880      	ldr	r0, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
    cbae:	b908      	cbnz	r0, cbb4 <survey_complete_cb+0x16>
    cbb0:	f7ff ffee 	bl	cb90 <reset_cb.part.0>
}
    cbb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    survey_encode(survey, survey->seq_num, survey->idx);
    cbb8:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    cbbc:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    cbc0:	f000 baf4 	b.w	d1ac <survey_encode>

0000cbc4 <reset_cb>:
 * @param inst   Pointer to struct uwb_dev.
 * @return true on sucess
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    cbc4:	b510      	push	{r4, lr}
    survey_instance_t * survey = (survey_instance_t *)cbs->inst_ptr;
    cbc6:	684c      	ldr	r4, [r1, #4]

    if(dpl_sem_get_count(&survey->sem) == 1)
    cbc8:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
    cbcc:	2b01      	cmp	r3, #1
    cbce:	d00b      	beq.n	cbe8 <reset_cb+0x24>
    return (dpl_error_t)os_sem_release(&sem->sem);
    cbd0:	f104 0084 	add.w	r0, r4, #132	; 0x84
    cbd4:	f7fd f82e 	bl	9c34 <os_sem_release>
        return false;

    dpl_error_t err = dpl_sem_release(&survey->sem);
    assert(err == DPL_OK);
    cbd8:	b108      	cbz	r0, cbde <reset_cb+0x1a>
    cbda:	f7ff ffd9 	bl	cb90 <reset_cb.part.0>
    STATS_INC(survey->stat, reset);
    cbde:	6c23      	ldr	r3, [r4, #64]	; 0x40
    cbe0:	3301      	adds	r3, #1
    cbe2:	6423      	str	r3, [r4, #64]	; 0x40

    return true;
    cbe4:	2001      	movs	r0, #1
}
    cbe6:	bd10      	pop	{r4, pc}
        return false;
    cbe8:	2000      	movs	r0, #0
    cbea:	e7fc      	b.n	cbe6 <reset_cb+0x22>

0000cbec <rx_timeout_cb>:
{
    cbec:	b510      	push	{r4, lr}
    survey_instance_t * survey = (survey_instance_t *)cbs->inst_ptr;
    cbee:	684c      	ldr	r4, [r1, #4]
    if(dpl_sem_get_count(&survey->sem) == 1)
    cbf0:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
    cbf4:	2b01      	cmp	r3, #1
    cbf6:	d00b      	beq.n	cc10 <rx_timeout_cb+0x24>
    cbf8:	f104 0084 	add.w	r0, r4, #132	; 0x84
    cbfc:	f7fd f81a 	bl	9c34 <os_sem_release>
    assert(err == DPL_OK);
    cc00:	b108      	cbz	r0, cc06 <rx_timeout_cb+0x1a>
    cc02:	f7ff ffc5 	bl	cb90 <reset_cb.part.0>
    STATS_INC(survey->stat, rx_timeout);
    cc06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    cc08:	3301      	adds	r3, #1
    cc0a:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    cc0c:	2001      	movs	r0, #1
}
    cc0e:	bd10      	pop	{r4, pc}
        return false;
    cc10:	2000      	movs	r0, #0
    cc12:	e7fc      	b.n	cc0e <rx_timeout_cb+0x22>

0000cc14 <tx_complete_cb>:
    survey_instance_t * survey = (survey_instance_t *)cbs->inst_ptr;
    cc14:	6848      	ldr	r0, [r1, #4]
{
    cc16:	b508      	push	{r3, lr}
    if(dpl_sem_get_count(&survey->sem) == 1)
    cc18:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
    cc1c:	2b01      	cmp	r3, #1
    cc1e:	d005      	beq.n	cc2c <tx_complete_cb+0x18>
    cc20:	3084      	adds	r0, #132	; 0x84
    cc22:	f7fd f807 	bl	9c34 <os_sem_release>
    assert(err == DPL_OK);
    cc26:	b108      	cbz	r0, cc2c <tx_complete_cb+0x18>
    cc28:	f7ff ffb2 	bl	cb90 <reset_cb.part.0>
}
    cc2c:	2000      	movs	r0, #0
    cc2e:	bd08      	pop	{r3, pc}

0000cc30 <survey_init>:
survey_init(struct uwb_dev * inst, uint16_t nnodes, uint16_t nframes){
    cc30:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc32:	460e      	mov	r6, r1
    cc34:	b097      	sub	sp, #92	; 0x5c
    cc36:	4617      	mov	r7, r2
    assert(inst);
    cc38:	4605      	mov	r5, r0
    cc3a:	b928      	cbnz	r0, cc48 <survey_init+0x18>
    cc3c:	2300      	movs	r3, #0
    cc3e:	461a      	mov	r2, r3
    cc40:	4619      	mov	r1, r3
    cc42:	4618      	mov	r0, r3
    cc44:	f7fc f956 	bl	8ef4 <__assert_func>
    survey_instance_t * survey = (survey_instance_t*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_SURVEY);
    cc48:	2150      	movs	r1, #80	; 0x50
    cc4a:	f7fb ff71 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    if (survey == NULL) {
    cc4e:	4604      	mov	r4, r0
    cc50:	2800      	cmp	r0, #0
    cc52:	f040 8089 	bne.w	cd68 <survey_init+0x138>
        survey = (survey_instance_t *) malloc(sizeof(survey_instance_t) + nframes * sizeof(survey_nrngs_t * ));
    cc56:	f107 0228 	add.w	r2, r7, #40	; 0x28
    cc5a:	0092      	lsls	r2, r2, #2
    cc5c:	4610      	mov	r0, r2
    cc5e:	9203      	str	r2, [sp, #12]
    cc60:	f002 fc3a 	bl	f4d8 <malloc>
        assert(survey);
    cc64:	4604      	mov	r4, r0
    cc66:	2800      	cmp	r0, #0
    cc68:	d0e8      	beq.n	cc3c <survey_init+0xc>
        memset(survey, 0, sizeof(survey_instance_t) + nframes * sizeof(survey_nrngs_t * ));
    cc6a:	9a03      	ldr	r2, [sp, #12]
    cc6c:	2100      	movs	r1, #0
    cc6e:	f002 fcc6 	bl	f5fe <memset>
        memset(survey->frame, 0, sizeof(survey_broadcast_frame_t));
    cc72:	2243      	movs	r2, #67	; 0x43
    cc74:	2100      	movs	r1, #0
    cc76:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    cc7a:	f002 fcc0 	bl	f5fe <memset>
        survey_broadcast_frame_t frame = {
    cc7e:	2243      	movs	r2, #67	; 0x43
    cc80:	2100      	movs	r1, #0
    cc82:	a805      	add	r0, sp, #20
    cc84:	f002 fcbb 	bl	f5fe <memset>
        memcpy(survey->frame, &frame, sizeof(survey_broadcast_frame_t));
    cc88:	f648 0241 	movw	r2, #34881	; 0x8841
    cc8c:	f8ad 2014 	strh.w	r2, [sp, #20]
    cc90:	f64d 62ca 	movw	r2, #57034	; 0xdeca
            .src_address = inst->my_short_address,
    cc94:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
        memcpy(survey->frame, &frame, sizeof(survey_broadcast_frame_t));
    cc98:	f8ad 2017 	strh.w	r2, [sp, #23]
    cc9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cca0:	f8ad 2019 	strh.w	r2, [sp, #25]
    cca4:	f8ad 301b 	strh.w	r3, [sp, #27]
    cca8:	2243      	movs	r2, #67	; 0x43
    ccaa:	f240 4331 	movw	r3, #1073	; 0x431
    ccae:	a905      	add	r1, sp, #20
    ccb0:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    ccb4:	f8ad 301d 	strh.w	r3, [sp, #29]
    ccb8:	f002 fc94 	bl	f5e4 <memcpy>
        survey->status.selfmalloc = 1;
    ccbc:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
        survey->nnodes = nnodes;
    ccc0:	f8a4 6096 	strh.w	r6, [r4, #150]	; 0x96
        survey->status.selfmalloc = 1;
    ccc4:	f043 0301 	orr.w	r3, r3, #1
    ccc8:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
        survey->ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
    cccc:	2101      	movs	r1, #1
        survey->nframes = nframes;
    ccce:	f8a4 709c 	strh.w	r7, [r4, #156]	; 0x9c
        survey->dev_inst = inst;
    ccd2:	6025      	str	r5, [r4, #0]
        survey->ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
    ccd4:	4628      	mov	r0, r5
    ccd6:	f7fb ff2b 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
        survey->nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_NRNG);
    ccda:	210b      	movs	r1, #11
        survey->ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
    ccdc:	6060      	str	r0, [r4, #4]
        survey->nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_NRNG);
    ccde:	4628      	mov	r0, r5
    cce0:	f7fb ff26 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    cce4:	2101      	movs	r1, #1
    cce6:	60a0      	str	r0, [r4, #8]
    cce8:	f104 0084 	add.w	r0, r4, #132	; 0x84
    ccec:	f7fc ff9a 	bl	9c24 <os_sem_init>
        assert(err == DPL_OK);
    ccf0:	2800      	cmp	r0, #0
    ccf2:	d1a3      	bne.n	cc3c <survey_init+0xc>
    survey->status.initialized = 1;
    ccf4:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    ccf8:	f043 0302 	orr.w	r3, r3, #2
    ccfc:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
    survey->config = (survey_config_t){
    cd00:	f44f 7340 	mov.w	r3, #768	; 0x300
    cd04:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    survey->cbs = (struct uwb_mac_interface){
    cd08:	f104 0344 	add.w	r3, r4, #68	; 0x44
    cd0c:	4618      	mov	r0, r3
    cd0e:	223c      	movs	r2, #60	; 0x3c
    cd10:	2100      	movs	r1, #0
    cd12:	f002 fc74 	bl	f5fe <memset>
    cd16:	2250      	movs	r2, #80	; 0x50
    cd18:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
    cd1c:	4a15      	ldr	r2, [pc, #84]	; (cd74 <survey_init+0x144>)
    cd1e:	6522      	str	r2, [r4, #80]	; 0x50
    cd20:	4a15      	ldr	r2, [pc, #84]	; (cd78 <survey_init+0x148>)
    cd22:	6562      	str	r2, [r4, #84]	; 0x54
    cd24:	4a15      	ldr	r2, [pc, #84]	; (cd7c <survey_init+0x14c>)
    cd26:	65e2      	str	r2, [r4, #92]	; 0x5c
    cd28:	4a15      	ldr	r2, [pc, #84]	; (cd80 <survey_init+0x150>)
    cd2a:	66a2      	str	r2, [r4, #104]	; 0x68
    survey->survey_complete_cb = survey_complete_cb;
    cd2c:	4a15      	ldr	r2, [pc, #84]	; (cd84 <survey_init+0x154>)
    cd2e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    uwb_mac_append_interface(inst, &survey->cbs);
    cd32:	4601      	mov	r1, r0
    survey->cbs = (struct uwb_mac_interface){
    cd34:	64a4      	str	r4, [r4, #72]	; 0x48
    uwb_mac_append_interface(inst, &survey->cbs);
    cd36:	4628      	mov	r0, r5
    cd38:	f7fb feb0 	bl	8a9c <uwb_mac_append_interface>
    int rc = stats_init(
    cd3c:	f104 050c 	add.w	r5, r4, #12
    cd40:	2209      	movs	r2, #9
    cd42:	4b11      	ldr	r3, [pc, #68]	; (cd88 <survey_init+0x158>)
    cd44:	9200      	str	r2, [sp, #0]
    cd46:	2104      	movs	r1, #4
    cd48:	4628      	mov	r0, r5
    cd4a:	f007 fafb 	bl	14344 <stats_init>
    assert(rc == 0);
    cd4e:	2800      	cmp	r0, #0
    cd50:	f47f af74 	bne.w	cc3c <survey_init+0xc>
    rc = stats_register("survey", STATS_HDR(survey->stat));
    cd54:	480d      	ldr	r0, [pc, #52]	; (cd8c <survey_init+0x15c>)
    cd56:	4629      	mov	r1, r5
    cd58:	f007 fb74 	bl	14444 <stats_register>
    assert(rc == 0);
    cd5c:	2800      	cmp	r0, #0
    cd5e:	f47f af6d 	bne.w	cc3c <survey_init+0xc>
}
    cd62:	4620      	mov	r0, r4
    cd64:	b017      	add	sp, #92	; 0x5c
    cd66:	bdf0      	pop	{r4, r5, r6, r7, pc}
        assert(survey->nnodes == nnodes);
    cd68:	f8b0 3096 	ldrh.w	r3, [r0, #150]	; 0x96
    cd6c:	42b3      	cmp	r3, r6
    cd6e:	d0c1      	beq.n	ccf4 <survey_init+0xc4>
    cd70:	e764      	b.n	cc3c <survey_init+0xc>
    cd72:	bf00      	nop
    cd74:	0000cc15 	.word	0x0000cc15
    cd78:	0000caa9 	.word	0x0000caa9
    cd7c:	0000cbed 	.word	0x0000cbed
    cd80:	0000cbc5 	.word	0x0000cbc5
    cd84:	0000cb9f 	.word	0x0000cb9f
    cd88:	0002216d 	.word	0x0002216d
    cd8c:	00022128 	.word	0x00022128

0000cd90 <survey_request>:
{
    cd90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cd94:	b085      	sub	sp, #20
    assert(survey);
    cd96:	4604      	mov	r4, r0
{
    cd98:	af04      	add	r7, sp, #16
    assert(survey);
    cd9a:	b920      	cbnz	r0, cda6 <survey_request+0x16>
    cd9c:	4603      	mov	r3, r0
    cd9e:	4602      	mov	r2, r0
    cda0:	4601      	mov	r1, r0
    cda2:	f7fc f8a7 	bl	8ef4 <__assert_func>
    uint16_t slot_id = survey->dev_inst->slot_id;
    cda6:	6801      	ldr	r1, [r0, #0]
    cda8:	f8b1 64c2 	ldrh.w	r6, [r1, #1218]	; 0x4c2
    STATS_INC(survey->stat, request);
    cdac:	6a01      	ldr	r1, [r0, #32]
    cdae:	3101      	adds	r1, #1
    cdb0:	6201      	str	r1, [r0, #32]
    nrng_request_delay_start(survey->nrng, 0xffff, dx_time, UWB_DATA_CODE_SS_TWR_NRNG, slot_mask, 0);
    cdb2:	2100      	movs	r1, #0
    cdb4:	9102      	str	r1, [sp, #8]
    uint32_t slot_mask = ~(~0UL << (survey->nnodes));
    cdb6:	f8b0 0096 	ldrh.w	r0, [r0, #150]	; 0x96
    cdba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    cdbe:	4081      	lsls	r1, r0
    cdc0:	43c9      	mvns	r1, r1
    nrng_request_delay_start(survey->nrng, 0xffff, dx_time, UWB_DATA_CODE_SS_TWR_NRNG, slot_mask, 0);
    cdc2:	b289      	uxth	r1, r1
    cdc4:	9101      	str	r1, [sp, #4]
    cdc6:	f44f 7198 	mov.w	r1, #304	; 0x130
    cdca:	9100      	str	r1, [sp, #0]
    cdcc:	68a0      	ldr	r0, [r4, #8]
    cdce:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cdd2:	f7fe fa05 	bl	b1e0 <nrng_request_delay_start>
    survey_nrngs_t * nrngs = survey->nrngs[(survey->idx)%survey->nframes];
    cdd6:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    cdda:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
    cdde:	fbb3 f1f2 	udiv	r1, r3, r2
    cde2:	fb02 3311 	mls	r3, r2, r1, r3
    cde6:	b29b      	uxth	r3, r3
    dpl_float32_t range[survey->nnodes];
    cde8:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    nrngs->nrng[slot_id].mask = nrng_get_ranges(survey->nrng,
    cdec:	68a0      	ldr	r0, [r4, #8]
    survey_nrngs_t * nrngs = survey->nrngs[(survey->idx)%survey->nframes];
    cdee:	3328      	adds	r3, #40	; 0x28
    dpl_float32_t range[survey->nnodes];
    cdf0:	4669      	mov	r1, sp
    survey_nrngs_t * nrngs = survey->nrngs[(survey->idx)%survey->nframes];
    cdf2:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
    dpl_float32_t range[survey->nnodes];
    cdf6:	0093      	lsls	r3, r2, #2
    cdf8:	3307      	adds	r3, #7
    cdfa:	08db      	lsrs	r3, r3, #3
    cdfc:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
    ce00:	469d      	mov	sp, r3
    uint16_t uid[survey->nnodes];
    ce02:	0053      	lsls	r3, r2, #1
    ce04:	3307      	adds	r3, #7
    ce06:	4669      	mov	r1, sp
    ce08:	08db      	lsrs	r3, r3, #3
    dpl_float32_t range[survey->nnodes];
    ce0a:	ad04      	add	r5, sp, #16
    uint16_t uid[survey->nnodes];
    ce0c:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
    ce10:	469d      	mov	sp, r3
    nrngs->nrng[slot_id].mask = nrng_get_ranges(survey->nrng,
    ce12:	4629      	mov	r1, r5
    ce14:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
    ce18:	f7fe fa90 	bl	b33c <nrng_get_ranges>
    ce1c:	2334      	movs	r3, #52	; 0x34
    ce1e:	435e      	muls	r6, r3
    ce20:	eb08 0306 	add.w	r3, r8, r6
    uint16_t uid[survey->nnodes];
    ce24:	f10d 0910 	add.w	r9, sp, #16
    nrngs->nrng[slot_id].mask = nrng_get_ranges(survey->nrng,
    ce28:	8098      	strh	r0, [r3, #4]
    nrng_get_uids(survey->nrng,
    ce2a:	68a0      	ldr	r0, [r4, #8]
    ce2c:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    ce30:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
    ce34:	4649      	mov	r1, r9
    ce36:	f7fe faeb 	bl	b410 <nrng_get_uids>
    for (uint16_t i = 0;i < survey->nnodes; i++){
    ce3a:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    ce3e:	f106 0308 	add.w	r3, r6, #8
    ce42:	3628      	adds	r6, #40	; 0x28
    ce44:	4443      	add	r3, r8
    ce46:	f10d 010e 	add.w	r1, sp, #14
    ce4a:	4446      	add	r6, r8
    ce4c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    ce50:	4295      	cmp	r5, r2
    ce52:	d105      	bne.n	ce60 <survey_request+0xd0>
}
    ce54:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    ce58:	3704      	adds	r7, #4
    ce5a:	46bd      	mov	sp, r7
    ce5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrngs->nrng[slot_id].rng[i] = range[i];
    ce60:	f855 0b04 	ldr.w	r0, [r5], #4
    ce64:	f843 0b04 	str.w	r0, [r3], #4
        nrngs->nrng[slot_id].uid[i] = uid[i];
    ce68:	f831 0f02 	ldrh.w	r0, [r1, #2]!
    ce6c:	f826 0b02 	strh.w	r0, [r6], #2
    for (uint16_t i = 0;i < survey->nnodes; i++){
    ce70:	e7ee      	b.n	ce50 <survey_request+0xc0>

0000ce72 <survey_listen>:
survey_listen(survey_instance_t * survey, uint64_t dx_time){
    ce72:	b510      	push	{r4, lr}
    assert(survey);
    ce74:	4604      	mov	r4, r0
    ce76:	b920      	cbnz	r0, ce82 <survey_listen+0x10>
    ce78:	4603      	mov	r3, r0
    ce7a:	4602      	mov	r2, r0
    ce7c:	4601      	mov	r1, r0
    ce7e:	f7fc f839 	bl	8ef4 <__assert_func>
    STATS_INC(survey->stat, listen);
    ce82:	6a41      	ldr	r1, [r0, #36]	; 0x24
    ce84:	3101      	adds	r1, #1
    ce86:	6241      	str	r1, [r0, #36]	; 0x24
    uwb_set_delay_start(survey->dev_inst, dx_time);
    ce88:	6800      	ldr	r0, [r0, #0]
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    ce8a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    ce8c:	6b49      	ldr	r1, [r1, #52]	; 0x34
    ce8e:	4788      	blx	r1
    uint16_t timeout = uwb_phy_frame_duration(survey->dev_inst, sizeof(nrng_request_frame_t))
    ce90:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    ce92:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ce94:	2113      	movs	r1, #19
    ce96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    ce98:	4798      	blx	r3
                        + survey->nrng->config.rx_timeout_delay;
    ce9a:	68a2      	ldr	r2, [r4, #8]
    uwb_set_rx_timeout(survey->dev_inst, timeout + 0x1000);
    ce9c:	6823      	ldr	r3, [r4, #0]
    uint16_t timeout = uwb_phy_frame_duration(survey->dev_inst, sizeof(nrng_request_frame_t))
    ce9e:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	; 0xbc
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    cea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    cea4:	4401      	add	r1, r0
    uwb_set_rx_timeout(survey->dev_inst, timeout + 0x1000);
    cea6:	b289      	uxth	r1, r1
    cea8:	6a52      	ldr	r2, [r2, #36]	; 0x24
    ceaa:	4618      	mov	r0, r3
    ceac:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    ceb0:	4790      	blx	r2
    nrng_listen(survey->nrng, UWB_BLOCKING);
    ceb2:	68a0      	ldr	r0, [r4, #8]
    ceb4:	2100      	movs	r1, #0
    ceb6:	f7fe f9b3 	bl	b220 <nrng_listen>
}
    ceba:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    cebe:	bd10      	pop	{r4, pc}

0000cec0 <survey_slot_range_cb>:
{
    cec0:	b510      	push	{r4, lr}
    assert(ev);
    cec2:	b928      	cbnz	r0, ced0 <survey_slot_range_cb+0x10>
    cec4:	2300      	movs	r3, #0
    cec6:	461a      	mov	r2, r3
    cec8:	4619      	mov	r1, r3
    ceca:	4618      	mov	r0, r3
    cecc:	f7fc f812 	bl	8ef4 <__assert_func>
    return ev->ev.ev_arg;
    ced0:	6882      	ldr	r2, [r0, #8]
    assert(dpl_event_get_arg(ev));
    ced2:	2a00      	cmp	r2, #0
    ced4:	d0f6      	beq.n	cec4 <survey_slot_range_cb+0x4>
    tdma_instance_t * tdma = slot->parent;
    ced6:	6890      	ldr	r0, [r2, #8]
    survey_instance_t * survey = (survey_instance_t *)slot->arg;
    ced8:	6b54      	ldr	r4, [r2, #52]	; 0x34
    survey->seq_num = (ccp->seq_num & ((uint32_t)~0UL << MYNEWT_VAL(SURVEY_MASK))) >> MYNEWT_VAL(SURVEY_MASK);
    ceda:	6843      	ldr	r3, [r0, #4]
    cedc:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
    cee0:	08d9      	lsrs	r1, r3, #3
    cee2:	f884 1094 	strb.w	r1, [r4, #148]	; 0x94
        uint64_t dx_time = tdma_tx_slot_start(tdma, slot->idx) & 0xFFFFFFFE00UL;
    cee6:	8812      	ldrh	r2, [r2, #0]
    cee8:	ee00 2a10 	vmov	s0, r2
    if(ccp->seq_num % survey->nnodes == tdma->dev_inst->slot_id){
    ceec:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    cef0:	fbb3 f1f2 	udiv	r1, r3, r2
    cef4:	fb02 3311 	mls	r3, r2, r1, r3
    cef8:	6802      	ldr	r2, [r0, #0]
    cefa:	f8b2 24c2 	ldrh.w	r2, [r2, #1218]	; 0x4c2
    cefe:	4293      	cmp	r3, r2
        uint64_t dx_time = tdma_tx_slot_start(tdma, slot->idx) & 0xFFFFFFFE00UL;
    cf00:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    if(ccp->seq_num % survey->nnodes == tdma->dev_inst->slot_id){
    cf04:	d10b      	bne.n	cf1e <survey_slot_range_cb+0x5e>
        uint64_t dx_time = tdma_tx_slot_start(tdma, slot->idx) & 0xFFFFFFFE00UL;
    cf06:	f000 fc1b 	bl	d740 <tdma_tx_slot_start>
        survey_request(survey, dx_time);
    cf0a:	f420 72ff 	bic.w	r2, r0, #510	; 0x1fe
    cf0e:	f022 0201 	bic.w	r2, r2, #1
    cf12:	4620      	mov	r0, r4
    cf14:	b2cb      	uxtb	r3, r1
}
    cf16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        survey_request(survey, dx_time);
    cf1a:	f7ff bf39 	b.w	cd90 <survey_request>
        uint64_t dx_time = tdma_rx_slot_start(tdma, slot->idx) & 0xFFFFFFFE00UL;
    cf1e:	f000 fbdc 	bl	d6da <tdma_rx_slot_start>
        survey_listen(survey, dx_time);
    cf22:	f420 72ff 	bic.w	r2, r0, #510	; 0x1fe
    cf26:	f022 0201 	bic.w	r2, r2, #1
    cf2a:	4620      	mov	r0, r4
    cf2c:	b2cb      	uxtb	r3, r1
}
    cf2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        survey_listen(survey, dx_time);
    cf32:	f7ff bf9e 	b.w	ce72 <survey_listen>

0000cf36 <survey_broadcaster>:
survey_broadcaster(survey_instance_t * survey, uint64_t dx_time){
    cf36:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf3a:	4691      	mov	r9, r2
    cf3c:	4698      	mov	r8, r3
    assert(survey);
    cf3e:	4604      	mov	r4, r0
    cf40:	b928      	cbnz	r0, cf4e <survey_broadcaster+0x18>
    cf42:	2300      	movs	r3, #0
    cf44:	461a      	mov	r2, r3
    cf46:	4619      	mov	r1, r3
    cf48:	4618      	mov	r0, r3
    cf4a:	f7fb ffd3 	bl	8ef4 <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    cf4e:	f100 0784 	add.w	r7, r0, #132	; 0x84
    cf52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    cf56:	4638      	mov	r0, r7
    cf58:	f7fc fe9e 	bl	9c98 <os_sem_pend>
    assert(err == DPL_OK);
    cf5c:	2800      	cmp	r0, #0
    cf5e:	d1f0      	bne.n	cf42 <survey_broadcaster+0xc>
    STATS_INC(survey->stat, broadcaster);
    cf60:	6b63      	ldr	r3, [r4, #52]	; 0x34
    survey_nrngs_t * nrngs = survey->nrngs[survey->idx%survey->nframes];
    cf62:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    struct uwb_dev * inst = survey->dev_inst;
    cf66:	6826      	ldr	r6, [r4, #0]
    survey->frame->mask = nrngs->nrng[inst->slot_id].mask;
    cf68:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    cf6c:	f8b6 14c2 	ldrh.w	r1, [r6, #1218]	; 0x4c2
    STATS_INC(survey->stat, broadcaster);
    cf70:	3301      	adds	r3, #1
    cf72:	6363      	str	r3, [r4, #52]	; 0x34
    survey_nrngs_t * nrngs = survey->nrngs[survey->idx%survey->nframes];
    cf74:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
    cf78:	fbb3 f5f0 	udiv	r5, r3, r0
    cf7c:	fb00 3315 	mls	r3, r0, r5, r3
    cf80:	b29b      	uxth	r3, r3
    cf82:	3328      	adds	r3, #40	; 0x28
    survey->frame->mask = nrngs->nrng[inst->slot_id].mask;
    cf84:	2034      	movs	r0, #52	; 0x34
    cf86:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    cf8a:	fb00 3301 	mla	r3, r0, r1, r3
    cf8e:	8898      	ldrh	r0, [r3, #4]
    cf90:	f8a2 000f 	strh.w	r0, [r2, #15]
    survey->frame->seq_num = survey->seq_num;
    cf94:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
    cf98:	7093      	strb	r3, [r2, #2]
    survey->frame->slot_id = inst->slot_id;
    cf9a:	f8a2 100b 	strh.w	r1, [r2, #11]
    uint16_t nnodes = NumberOfBits(survey->frame->mask);
    cf9e:	f002 f8b7 	bl	f110 <NumberOfBits>
    cfa2:	b280      	uxth	r0, r0
    survey->status.empty = nnodes == 0;
    cfa4:	f894 a08c 	ldrb.w	sl, [r4, #140]	; 0x8c
    cfa8:	fab0 f380 	clz	r3, r0
    cfac:	095b      	lsrs	r3, r3, #5
    cfae:	f363 1a45 	bfi	sl, r3, #5, #1
    cfb2:	f884 a08c 	strb.w	sl, [r4, #140]	; 0x8c
    if (survey->status.empty){
    cfb6:	f01a 0a20 	ands.w	sl, sl, #32
    cfba:	d005      	beq.n	cfc8 <survey_broadcaster+0x92>
    return (dpl_error_t)os_sem_release(&sem->sem);
    cfbc:	4638      	mov	r0, r7
    cfbe:	f7fc fe39 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
    cfc2:	2800      	cmp	r0, #0
    cfc4:	d037      	beq.n	d036 <survey_broadcaster+0x100>
    cfc6:	e7bc      	b.n	cf42 <survey_broadcaster+0xc>
    assert(nnodes < survey->nnodes);
    cfc8:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
    cfcc:	4283      	cmp	r3, r0
    cfce:	d9b8      	bls.n	cf42 <survey_broadcaster+0xc>
        + nnodes * sizeof(uint16_t);
    cfd0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    cfd4:	0045      	lsls	r5, r0, #1
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    cfd6:	6a73      	ldr	r3, [r6, #36]	; 0x24
    cfd8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
    cfdc:	f8d3 b044 	ldr.w	fp, [r3, #68]	; 0x44
    uint16_t n = sizeof(struct _survey_broadcast_frame_t)
    cfe0:	3545      	adds	r5, #69	; 0x45
    cfe2:	b2ad      	uxth	r5, r5
    cfe4:	462b      	mov	r3, r5
    cfe6:	4652      	mov	r2, sl
    cfe8:	4630      	mov	r0, r6
    cfea:	47d8      	blx	fp
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    cfec:	6a73      	ldr	r3, [r6, #36]	; 0x24
    cfee:	4652      	mov	r2, sl
    cff0:	f8d3 b048 	ldr.w	fp, [r3, #72]	; 0x48
    cff4:	4629      	mov	r1, r5
    cff6:	4653      	mov	r3, sl
    cff8:	4630      	mov	r0, r6
    cffa:	47d8      	blx	fp
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    cffc:	6a73      	ldr	r3, [r6, #36]	; 0x24
    cffe:	464a      	mov	r2, r9
    d000:	6b59      	ldr	r1, [r3, #52]	; 0x34
    d002:	4630      	mov	r0, r6
    d004:	4643      	mov	r3, r8
    d006:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
    d008:	6a73      	ldr	r3, [r6, #36]	; 0x24
    d00a:	4630      	mov	r0, r6
    d00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    d00e:	4798      	blx	r3
    survey->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    d010:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    d014:	f3c0 0080 	ubfx	r0, r0, #2, #1
    d018:	f360 1304 	bfi	r3, r0, #4, #1
    d01c:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
    if (survey->status.start_tx_error){
    d020:	06db      	lsls	r3, r3, #27
    d022:	d50c      	bpl.n	d03e <survey_broadcaster+0x108>
        STATS_INC(survey->stat, start_tx_error);
    d024:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d026:	3301      	adds	r3, #1
    d028:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (dpl_sem_get_count(&survey->sem) == 0)
    d02a:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
    d02e:	b913      	cbnz	r3, d036 <survey_broadcaster+0x100>
    d030:	4638      	mov	r0, r7
    d032:	f7fc fdff 	bl	9c34 <os_sem_release>
        return survey->status;
    d036:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
}
    d03a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    d03e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d042:	4638      	mov	r0, r7
    d044:	f7fc fe28 	bl	9c98 <os_sem_pend>
        assert(err == DPL_OK);
    d048:	2800      	cmp	r0, #0
    d04a:	d0b7      	beq.n	cfbc <survey_broadcaster+0x86>
    d04c:	e779      	b.n	cf42 <survey_broadcaster+0xc>

0000d04e <survey_receiver>:
survey_receiver(survey_instance_t * survey, uint64_t dx_time){
    d04e:	b570      	push	{r4, r5, r6, lr}
    assert(survey);
    d050:	4604      	mov	r4, r0
    d052:	b928      	cbnz	r0, d060 <survey_receiver+0x12>
    d054:	2300      	movs	r3, #0
    d056:	461a      	mov	r2, r3
    d058:	4619      	mov	r1, r3
    d05a:	4618      	mov	r0, r3
    d05c:	f7fb ff4a 	bl	8ef4 <__assert_func>
    struct uwb_dev * inst = survey->dev_inst;
    d060:	4605      	mov	r5, r0
    d062:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d066:	f855 6b84 	ldr.w	r6, [r5], #132
    d06a:	4628      	mov	r0, r5
    d06c:	f7fc fe14 	bl	9c98 <os_sem_pend>
    assert(err == DPL_OK);
    d070:	2800      	cmp	r0, #0
    d072:	d1ef      	bne.n	d054 <survey_receiver+0x6>
    STATS_INC(survey->stat, receiver);
    d074:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d076:	3301      	adds	r3, #1
    d078:	63a3      	str	r3, [r4, #56]	; 0x38
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    d07a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    d07c:	2177      	movs	r1, #119	; 0x77
    d07e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    d080:	4630      	mov	r0, r6
    d082:	4798      	blx	r3
                        + survey->config.rx_timeout_delay;
    d084:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    d088:	6a73      	ldr	r3, [r6, #36]	; 0x24
    uint16_t timeout = uwb_phy_frame_duration(inst, n)
    d08a:	4401      	add	r1, r0
    d08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d08e:	b289      	uxth	r1, r1
    d090:	4630      	mov	r0, r6
    d092:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_rx(dev));
    d094:	6a73      	ldr	r3, [r6, #36]	; 0x24
    d096:	4630      	mov	r0, r6
    d098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d09a:	4798      	blx	r3
    survey->status.start_rx_error = uwb_start_rx(inst).start_rx_error;
    d09c:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    d0a0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    d0a4:	f360 03c3 	bfi	r3, r0, #3, #1
    d0a8:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
    if(survey->status.start_rx_error){
    d0ac:	071b      	lsls	r3, r3, #28
    d0ae:	d50a      	bpl.n	d0c6 <survey_receiver+0x78>
        STATS_INC(survey->stat, start_rx_error);
    d0b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d0b2:	3301      	adds	r3, #1
    d0b4:	6323      	str	r3, [r4, #48]	; 0x30
    return (dpl_error_t)os_sem_release(&sem->sem);
    d0b6:	4628      	mov	r0, r5
    d0b8:	f7fc fdbc 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
    d0bc:	2800      	cmp	r0, #0
    d0be:	d1c9      	bne.n	d054 <survey_receiver+0x6>
}
    d0c0:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    d0c4:	bd70      	pop	{r4, r5, r6, pc}
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    d0c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d0ca:	4628      	mov	r0, r5
    d0cc:	f7fc fde4 	bl	9c98 <os_sem_pend>
        assert(err == DPL_OK);
    d0d0:	2800      	cmp	r0, #0
    d0d2:	d0f0      	beq.n	d0b6 <survey_receiver+0x68>
    d0d4:	e7be      	b.n	d054 <survey_receiver+0x6>
	...

0000d0d8 <survey_slot_broadcast_cb>:
{
    d0d8:	b570      	push	{r4, r5, r6, lr}
    assert(ev);
    d0da:	b928      	cbnz	r0, d0e8 <survey_slot_broadcast_cb+0x10>
    d0dc:	2300      	movs	r3, #0
    d0de:	461a      	mov	r2, r3
    d0e0:	4619      	mov	r1, r3
    d0e2:	4618      	mov	r0, r3
    d0e4:	f7fb ff06 	bl	8ef4 <__assert_func>
    return ev->ev.ev_arg;
    d0e8:	6882      	ldr	r2, [r0, #8]
    assert(dpl_event_get_arg(ev));
    d0ea:	2a00      	cmp	r2, #0
    d0ec:	d0f6      	beq.n	d0dc <survey_slot_broadcast_cb+0x4>
    tdma_instance_t * tdma = slot->parent;
    d0ee:	6890      	ldr	r0, [r2, #8]
    survey_instance_t * survey = (survey_instance_t *)slot->arg;
    d0f0:	6b54      	ldr	r4, [r2, #52]	; 0x34
    struct uwb_ccp_instance * ccp = tdma->ccp;
    d0f2:	6845      	ldr	r5, [r0, #4]
    survey->seq_num = (ccp->seq_num & ((uint32_t)~0UL << MYNEWT_VAL(SURVEY_MASK))) >> MYNEWT_VAL(SURVEY_MASK);
    d0f4:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
    d0f8:	08d9      	lsrs	r1, r3, #3
    d0fa:	f884 1094 	strb.w	r1, [r4, #148]	; 0x94
        uint64_t dx_time = tdma_tx_slot_start(tdma, slot->idx) & 0xFFFFFFFE00UL;
    d0fe:	8812      	ldrh	r2, [r2, #0]
    d100:	ee00 2a10 	vmov	s0, r2
    if(ccp->seq_num % survey->nnodes == tdma->dev_inst->slot_id){
    d104:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    d108:	fbb3 f1f2 	udiv	r1, r3, r2
    d10c:	fb02 3311 	mls	r3, r2, r1, r3
    d110:	6802      	ldr	r2, [r0, #0]
    d112:	f8b2 24c2 	ldrh.w	r2, [r2, #1218]	; 0x4c2
    d116:	4293      	cmp	r3, r2
        uint64_t dx_time = tdma_tx_slot_start(tdma, slot->idx) & 0xFFFFFFFE00UL;
    d118:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    if(ccp->seq_num % survey->nnodes == tdma->dev_inst->slot_id){
    d11c:	d126      	bne.n	d16c <survey_slot_broadcast_cb+0x94>
        uint64_t dx_time = tdma_tx_slot_start(tdma, slot->idx) & 0xFFFFFFFE00UL;
    d11e:	f000 fb0f 	bl	d740 <tdma_tx_slot_start>
        survey_broadcaster(survey, dx_time);
    d122:	f420 72ff 	bic.w	r2, r0, #510	; 0x1fe
    d126:	f022 0201 	bic.w	r2, r2, #1
    d12a:	b2cb      	uxtb	r3, r1
    d12c:	4620      	mov	r0, r4
    d12e:	f7ff ff02 	bl	cf36 <survey_broadcaster>
    if((ccp->seq_num % survey->nnodes == survey->nnodes - 1) && survey->survey_complete_cb){
    d132:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
    d136:	f895 20f0 	ldrb.w	r2, [r5, #240]	; 0xf0
    d13a:	fbb2 f1f3 	udiv	r1, r2, r3
    d13e:	fb03 2211 	mls	r2, r3, r1, r2
    d142:	3b01      	subs	r3, #1
    d144:	429a      	cmp	r2, r3
    d146:	d11c      	bne.n	d182 <survey_slot_broadcast_cb+0xaa>
    d148:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    d14c:	b1ce      	cbz	r6, d182 <survey_slot_broadcast_cb+0xaa>
    memset(ev, 0, sizeof(*ev));
    d14e:	4d0d      	ldr	r5, [pc, #52]	; (d184 <survey_slot_broadcast_cb+0xac>)
    d150:	2100      	movs	r1, #0
    d152:	2210      	movs	r2, #16
    d154:	4628      	mov	r0, r5
    d156:	f002 fa52 	bl	f5fe <memset>
    ev->ev.ev_arg = arg;
    d15a:	e9c5 6401 	strd	r6, r4, [r5, #4]
    return (struct dpl_eventq *) os_eventq_dflt_get();
    d15e:	f7fc fa5d 	bl	961c <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    d162:	4629      	mov	r1, r5
}
    d164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d168:	f7fc b9b1 	b.w	94ce <os_eventq_put>
        uint64_t dx_time = tdma_rx_slot_start(tdma, slot->idx) & 0xFFFFFFFE00UL;
    d16c:	f000 fab5 	bl	d6da <tdma_rx_slot_start>
        survey_receiver(survey, dx_time);
    d170:	f420 72ff 	bic.w	r2, r0, #510	; 0x1fe
    d174:	f022 0201 	bic.w	r2, r2, #1
    d178:	b2cb      	uxtb	r3, r1
    d17a:	4620      	mov	r0, r4
    d17c:	f7ff ff67 	bl	d04e <survey_receiver>
    d180:	e7d7      	b.n	d132 <survey_slot_broadcast_cb+0x5a>
}
    d182:	bd70      	pop	{r4, r5, r6, pc}
    d184:	20003c54 	.word	0x20003c54

0000d188 <survey_pkg_init>:
 *
 * @return void
 */
void
survey_pkg_init(void)
{
    d188:	b508      	push	{r3, lr}
#if MYNEWT_VAL(SURVEY_ENABLED)
    printf("{\"utime\": %lu,\"msg\": \"survey_pkg_init\"}\n",os_cputime_ticks_to_usecs(os_cputime_get32()));
    d18a:	f7fc f8ea 	bl	9362 <os_cputime_get32>
    d18e:	4601      	mov	r1, r0
    d190:	4805      	ldr	r0, [pc, #20]	; (d1a8 <survey_pkg_init+0x20>)
    d192:	f002 fd23 	bl	fbdc <printf>

#if MYNEWT_VAL(UWB_DEVICE_0)
    survey_init(uwb_dev_idx_lookup(0), MYNEWT_VAL(SURVEY_NNODES), MYNEWT_VAL(SURVEY_NFRAMES));
    d196:	2000      	movs	r0, #0
    d198:	f7fb fc56 	bl	8a48 <uwb_dev_idx_lookup>
#endif
#endif // MYNEWT_VAL(SURVEY_ENABLED)
}
    d19c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    survey_init(uwb_dev_idx_lookup(0), MYNEWT_VAL(SURVEY_NNODES), MYNEWT_VAL(SURVEY_NFRAMES));
    d1a0:	2202      	movs	r2, #2
    d1a2:	2108      	movs	r1, #8
    d1a4:	f7ff bd44 	b.w	cc30 <survey_init>
    d1a8:	0002212f 	.word	0x0002212f

0000d1ac <survey_encode>:
 * @param survey survey_instance_t point
 * @param seq_num survey
 * @return none.
 */
void
survey_encode(survey_instance_t * survey, uint16_t seq, uint16_t idx){
    d1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1b0:	4607      	mov	r7, r0
    d1b2:	f5ad 7d6b 	sub.w	sp, sp, #940	; 0x3ac
    d1b6:	4614      	mov	r4, r2
    d1b8:	9103      	str	r1, [sp, #12]

    uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    d1ba:	f7fc f8d2 	bl	9362 <os_cputime_get32>
    survey_nrngs_t * nrngs = survey->nrngs[idx%survey->nframes];
    d1be:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
    d1c2:	fbb4 f3f2 	udiv	r3, r4, r2
    d1c6:	fb02 4413 	mls	r4, r2, r3, r4
    d1ca:	b2a4      	uxth	r4, r4
    d1cc:	3428      	adds	r4, #40	; 0x28

    uint16_t mask = 0;
    // Workout which node responded to the request
    for (uint16_t i=0; i < survey->nnodes; i++){
    d1ce:	2300      	movs	r3, #0
    survey_nrngs_t * nrngs = survey->nrngs[idx%survey->nframes];
    d1d0:	f857 a024 	ldr.w	sl, [r7, r4, lsl #2]
    for (uint16_t i=0; i < survey->nnodes; i++){
    d1d4:	f8b7 1096 	ldrh.w	r1, [r7, #150]	; 0x96
    uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    d1d8:	9001      	str	r0, [sp, #4]
        if (nrngs->nrng[i].mask){
    d1da:	f10a 0404 	add.w	r4, sl, #4
    uint16_t mask = 0;
    d1de:	4618      	mov	r0, r3
        if (nrngs->nrng[i].mask){
    d1e0:	2534      	movs	r5, #52	; 0x34
                mask |= 1UL << i;
    d1e2:	2601      	movs	r6, #1
    for (uint16_t i=0; i < survey->nnodes; i++){
    d1e4:	b29a      	uxth	r2, r3
    d1e6:	4291      	cmp	r1, r2
    d1e8:	d811      	bhi.n	d20e <survey_encode+0x62>
        }
    }

    survey->status.empty = NumberOfBits(mask) == 0;
    d1ea:	f001 ff91 	bl	f110 <NumberOfBits>
    d1ee:	f897 608c 	ldrb.w	r6, [r7, #140]	; 0x8c
    d1f2:	fab0 f080 	clz	r0, r0
    d1f6:	0940      	lsrs	r0, r0, #5
    d1f8:	f360 1645 	bfi	r6, r0, #5, #1
    d1fc:	f887 608c 	strb.w	r6, [r7, #140]	; 0x8c
    if (survey->status.empty)
    d200:	f016 0620 	ands.w	r6, r6, #32
    d204:	d061      	beq.n	d2ca <survey_encode+0x11e>
            }
            nrng_json_write(&json);
            printf("%s\n", json.iobuf);
        }
    }
}
    d206:	f50d 7d6b 	add.w	sp, sp, #940	; 0x3ac
    d20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (nrngs->nrng[i].mask){
    d20e:	fb05 f203 	mul.w	r2, r5, r3
    d212:	5aa2      	ldrh	r2, [r4, r2]
    d214:	b11a      	cbz	r2, d21e <survey_encode+0x72>
                mask |= 1UL << i;
    d216:	fa06 f203 	lsl.w	r2, r6, r3
    d21a:	4310      	orrs	r0, r2
    d21c:	b280      	uxth	r0, r0
    for (uint16_t i=0; i < survey->nnodes; i++){
    d21e:	3301      	adds	r3, #1
    d220:	e7e0      	b.n	d1e4 <survey_encode+0x38>
        if (nrngs->nrng[i].mask){
    d222:	fa1f f986 	uxth.w	r9, r6
    d226:	2334      	movs	r3, #52	; 0x34
    d228:	fb03 a309 	mla	r3, r3, r9, sl
    d22c:	889d      	ldrh	r5, [r3, #4]
    d22e:	b335      	cbz	r5, d27e <survey_encode+0xd2>
            nrng_json_t json={
    d230:	ac06      	add	r4, sp, #24
    d232:	f44f 7264 	mov.w	r2, #912	; 0x390
    d236:	2100      	movs	r1, #0
    d238:	4620      	mov	r0, r4
    d23a:	f002 f9e0 	bl	f5fe <memset>
    d23e:	9b01      	ldr	r3, [sp, #4]
    d240:	e9c4 381a 	strd	r3, r8, [r4, #104]	; 0x68
    d244:	9b03      	ldr	r3, [sp, #12]
                .nsize = NumberOfBits(nrngs->nrng[i].mask)
    d246:	4628      	mov	r0, r5
            nrng_json_t json={
    d248:	e9c4 381c 	strd	r3, r8, [r4, #112]	; 0x70
                .nsize = NumberOfBits(nrngs->nrng[i].mask)
    d24c:	f001 ff60 	bl	f110 <NumberOfBits>
            nrng_json_t json={
    d250:	e9c4 0860 	strd	r0, r8, [r4, #384]	; 0x180
                json.rng[j] = nrngs->nrng[i].rng[j];
    d254:	230d      	movs	r3, #13
                json.ouid[j] = nrngs->nrng[i].uid[j];
    d256:	221a      	movs	r2, #26
                json.rng[j] = nrngs->nrng[i].rng[j];
    d258:	fb03 f309 	mul.w	r3, r3, r9
                .nsize = NumberOfBits(nrngs->nrng[i].mask)
    d25c:	4683      	mov	fp, r0
            for (uint16_t j=0; j < json.nsize; j++){
    d25e:	2500      	movs	r5, #0
                json.ouid[j] = nrngs->nrng[i].uid[j];
    d260:	fb02 f909 	mul.w	r9, r2, r9
            for (uint16_t j=0; j < json.nsize; j++){
    d264:	1c6a      	adds	r2, r5, #1
    d266:	9202      	str	r2, [sp, #8]
    d268:	b2aa      	uxth	r2, r5
    d26a:	455a      	cmp	r2, fp
    d26c:	f178 0200 	sbcs.w	r2, r8, #0
    d270:	d30c      	bcc.n	d28c <survey_encode+0xe0>
            nrng_json_write(&json);
    d272:	4620      	mov	r0, r4
    d274:	f7fe fa00 	bl	b678 <nrng_json_write>
            printf("%s\n", json.iobuf);
    d278:	a868      	add	r0, sp, #416	; 0x1a0
    d27a:	f002 f8b7 	bl	f3ec <puts>
    for (uint16_t i=0; i < survey->nnodes; i++){
    d27e:	3601      	adds	r6, #1
    d280:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
    d284:	b2b3      	uxth	r3, r6
    d286:	429a      	cmp	r2, r3
    d288:	d8cb      	bhi.n	d222 <survey_encode+0x76>
    d28a:	e7bc      	b.n	d206 <survey_encode+0x5a>
                json.rng[j] = nrngs->nrng[i].rng[j];
    d28c:	b2ad      	uxth	r5, r5
    d28e:	1959      	adds	r1, r3, r5
    d290:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
    d294:	f105 0220 	add.w	r2, r5, #32
    d298:	6888      	ldr	r0, [r1, #8]
    d29a:	9304      	str	r3, [sp, #16]
    d29c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    d2a0:	9205      	str	r2, [sp, #20]
    d2a2:	f012 fdb5 	bl	1fe10 <__aeabi_f2d>
    d2a6:	9a05      	ldr	r2, [sp, #20]
                json.ouid[j] = nrngs->nrng[i].uid[j];
    d2a8:	9b04      	ldr	r3, [sp, #16]
                json.rng[j] = nrngs->nrng[i].rng[j];
    d2aa:	e9c2 0100 	strd	r0, r1, [r2]
                json.ouid[j] = nrngs->nrng[i].uid[j];
    d2ae:	f105 0210 	add.w	r2, r5, #16
    d2b2:	444d      	add	r5, r9
    d2b4:	eb0a 0545 	add.w	r5, sl, r5, lsl #1
    d2b8:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
    d2bc:	8d28      	ldrh	r0, [r5, #40]	; 0x28
    d2be:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
    d2c2:	9d02      	ldr	r5, [sp, #8]
    d2c4:	f8c1 8004 	str.w	r8, [r1, #4]
            for (uint16_t j=0; j < json.nsize; j++){
    d2c8:	e7cc      	b.n	d264 <survey_encode+0xb8>
            nrng_json_t json={
    d2ca:	46b0      	mov	r8, r6
    d2cc:	e7d8      	b.n	d280 <survey_encode+0xd4>
	...

0000d2d0 <tdma_superframe_slot_cb>:
 *
 * @return void
 */
static void
tdma_superframe_slot_cb(struct dpl_event * ev)
{
    d2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t i;
    uint32_t slot_period_us;
    struct _tdma_slot_t *slot;
    tdma_instance_t * tdma;
    struct uwb_ccp_instance * ccp;
    assert(ev != NULL);
    d2d4:	b928      	cbnz	r0, d2e2 <tdma_superframe_slot_cb+0x12>
    d2d6:	2300      	movs	r3, #0
    d2d8:	461a      	mov	r2, r3
    d2da:	4619      	mov	r1, r3
    d2dc:	4618      	mov	r0, r3
    d2de:	f7fb fe09 	bl	8ef4 <__assert_func>
    return ev->ev.ev_arg;
    d2e2:	6886      	ldr	r6, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
    d2e4:	2e00      	cmp	r6, #0
    d2e6:	d0f6      	beq.n	d2d6 <tdma_superframe_slot_cb+0x6>

    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"tdma_superframe_slot_cb\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    slot = (struct _tdma_slot_t *) dpl_event_get_arg(ev);
    tdma = slot->parent;
    d2e8:	68b4      	ldr	r4, [r6, #8]
    ccp = tdma->ccp;

    TDMA_STATS_INC(superframe_cnt);
    d2ea:	6a23      	ldr	r3, [r4, #32]
    ccp = tdma->ccp;
    d2ec:	f8d4 a004 	ldr.w	sl, [r4, #4]
    TDMA_STATS_INC(superframe_cnt);
    d2f0:	3301      	adds	r3, #1

    /* Make sure all timers are stopped */
    dpl_cputime_timer_stop(&slot->timer);
    d2f2:	f106 080c 	add.w	r8, r6, #12
    TDMA_STATS_INC(superframe_cnt);
    d2f6:	6223      	str	r3, [r4, #32]
    dpl_cputime_timer_stop(&slot->timer);
    d2f8:	4640      	mov	r0, r8
    d2fa:	f003 ffb7 	bl	1126c <dpl_cputime_timer_stop>
    for (i = 0; i < tdma->nslots; i++) {
    d2fe:	2500      	movs	r5, #0
    d300:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    d304:	b2aa      	uxth	r2, r5
    d306:	4293      	cmp	r3, r2
    d308:	d827      	bhi.n	d35a <tdma_superframe_slot_cb+0x8a>
        }
    }
#if __KERNEL__
    slot_period_us = uwb_dwt_usecs_to_usecs(div64_s64(ccp->period, tdma->nslots));
#else
    slot_period_us = uwb_dwt_usecs_to_usecs(ccp->period / tdma->nslots);
    d30a:	f8da 00e8 	ldr.w	r0, [sl, #232]	; 0xe8
    d30e:	fbb0 f0f3 	udiv	r0, r0, r3
    d312:	f012 fd5b 	bl	1fdcc <__aeabi_ui2d>
    d316:	a31e      	add	r3, pc, #120	; (adr r3, d390 <tdma_superframe_slot_cb+0xc0>)
    d318:	e9d3 2300 	ldrd	r2, r3, [r3]
    d31c:	f012 fdd0 	bl	1fec0 <__aeabi_dmul>
    d320:	f013 f8a6 	bl	20470 <__aeabi_d2uiz>
#endif
    for (i = 0; i < tdma->nslots; i++) {
    d324:	2700      	movs	r7, #0
    slot_period_us = uwb_dwt_usecs_to_usecs(ccp->period / tdma->nslots);
    d326:	4681      	mov	r9, r0
    for (i = 0; i < tdma->nslots; i++) {
    d328:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
        if (tdma->slot[i]){
            tdma->slot[i]->cputime_slot_start = tdma->os_epoch
    d32c:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
    for (i = 0; i < tdma->nslots; i++) {
    d32e:	b2bb      	uxth	r3, r7
    d330:	429a      	cmp	r2, r3
    d332:	d81d      	bhi.n	d370 <tdma_superframe_slot_cb+0xa0>
        }
    }

    /* Next superframe slot estimate */
    slot->cputime_slot_start = tdma->os_epoch
        + dpl_cputime_usecs_to_ticks(
    d334:	f8da 00e8 	ldr.w	r0, [sl, #232]	; 0xe8
    d338:	f012 fd48 	bl	1fdcc <__aeabi_ui2d>
    d33c:	a314      	add	r3, pc, #80	; (adr r3, d390 <tdma_superframe_slot_cb+0xc0>)
    d33e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d342:	f012 fdbd 	bl	1fec0 <__aeabi_dmul>
    d346:	f013 f893 	bl	20470 <__aeabi_d2uiz>
    d34a:	4448      	add	r0, r9
    d34c:	1941      	adds	r1, r0, r5
    slot->cputime_slot_start = tdma->os_epoch
    d34e:	6071      	str	r1, [r6, #4]
            (uint32_t)uwb_dwt_usecs_to_usecs(ccp->period) + slot_period_us);
    hal_timer_start_at(&slot->timer, slot->cputime_slot_start);
    d350:	4640      	mov	r0, r8
}
    d352:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    hal_timer_start_at(&slot->timer, slot->cputime_slot_start);
    d356:	f00e b8cf 	b.w	1b4f8 <hal_timer_start_at>
        if (tdma->slot[i]){
    d35a:	b2ab      	uxth	r3, r5
    d35c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    d360:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    d364:	b110      	cbz	r0, d36c <tdma_superframe_slot_cb+0x9c>
            dpl_cputime_timer_stop(&tdma->slot[i]->timer);
    d366:	300c      	adds	r0, #12
    d368:	f003 ff80 	bl	1126c <dpl_cputime_timer_stop>
    for (i = 0; i < tdma->nslots; i++) {
    d36c:	3501      	adds	r5, #1
    d36e:	e7c7      	b.n	d300 <tdma_superframe_slot_cb+0x30>
        if (tdma->slot[i]){
    d370:	b2bb      	uxth	r3, r7
    d372:	f503 72a8 	add.w	r2, r3, #336	; 0x150
    d376:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    d37a:	b138      	cbz	r0, d38c <tdma_superframe_slot_cb+0xbc>
                + dpl_cputime_usecs_to_ticks((uint32_t) (i * slot_period_us) - MYNEWT_VAL(OS_LATENCY));
    d37c:	f5a5 717a 	sub.w	r1, r5, #1000	; 0x3e8
    d380:	fb09 1103 	mla	r1, r9, r3, r1
            tdma->slot[i]->cputime_slot_start = tdma->os_epoch
    d384:	6041      	str	r1, [r0, #4]
            hal_timer_start_at(&tdma->slot[i]->timer, tdma->slot[i]->cputime_slot_start);
    d386:	300c      	adds	r0, #12
    d388:	f00e f8b6 	bl	1b4f8 <hal_timer_start_at>
    for (i = 0; i < tdma->nslots; i++) {
    d38c:	3701      	adds	r7, #1
    d38e:	e7cb      	b.n	d328 <tdma_superframe_slot_cb+0x58>
    d390:	90690691 	.word	0x90690691
    d394:	3ff06906 	.word	0x3ff06906

0000d398 <superframe_cb>:
    tdma_instance_t * tdma = (tdma_instance_t*)cbs->inst_ptr;
    d398:	6848      	ldr	r0, [r1, #4]
{
    d39a:	b508      	push	{r3, lr}
    if (tdma->status.initialized) {
    d39c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    d3a0:	079b      	lsls	r3, r3, #30
    d3a2:	d508      	bpl.n	d3b6 <superframe_cb+0x1e>
        tdma->os_epoch = ccp->os_epoch;
    d3a4:	6843      	ldr	r3, [r0, #4]
    d3a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    d3aa:	67c3      	str	r3, [r0, #124]	; 0x7c
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    d3ac:	f100 01a4 	add.w	r1, r0, #164	; 0xa4
    d3b0:	30b8      	adds	r0, #184	; 0xb8
    d3b2:	f7fc f88c 	bl	94ce <os_eventq_put>
}
    d3b6:	2000      	movs	r0, #0
    d3b8:	bd08      	pop	{r3, pc}

0000d3ba <sanity_feeding_cb.part.0>:
 * @param arg    A void type argument.
 *
 * @return void
 */
static void
slot_timer_cb(void * arg)
    d3ba:	b508      	push	{r3, lr}
{
    assert(arg);
    d3bc:	2300      	movs	r3, #0
    d3be:	461a      	mov	r2, r3
    d3c0:	4619      	mov	r1, r3
    d3c2:	4618      	mov	r0, r3
    d3c4:	f7fb fd96 	bl	8ef4 <__assert_func>

0000d3c8 <slot_timer_cb>:
{
    d3c8:	b508      	push	{r3, lr}
    assert(arg);
    d3ca:	b908      	cbnz	r0, d3d0 <slot_timer_cb+0x8>
    d3cc:	f7ff fff5 	bl	d3ba <sanity_feeding_cb.part.0>
    tdma_slot_t * slot = (tdma_slot_t *) arg;
    /* No point in continuing if this slot is NULL */
    if (slot == NULL) {
        return;
    }
    tdma_instance_t * tdma = slot->parent;
    d3d0:	6883      	ldr	r3, [r0, #8]

    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"slot_timer_cb\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));

    TDMA_STATS_INC(slot_timer_cnt);
    d3d2:	69da      	ldr	r2, [r3, #28]
    d3d4:	3201      	adds	r2, #1
    d3d6:	61da      	str	r2, [r3, #28]

    if (slot == &tdma->superframe_slot) {
    d3d8:	f103 0280 	add.w	r2, r3, #128	; 0x80
    d3dc:	4290      	cmp	r0, r2
    d3de:	d103      	bne.n	d3e8 <slot_timer_cb+0x20>
        /* Superframe must have been missed by ccp */
        TDMA_STATS_INC(superframe_miss);
    d3e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    d3e2:	3201      	adds	r2, #1
    d3e4:	625a      	str	r2, [r3, #36]	; 0x24
#ifdef TDMA_TASKS_ENABLE
    dpl_eventq_put(&tdma->eventq, &slot->event);
#else
    dpl_eventq_put(&tdma->dev_inst->eventq, &slot->event);
#endif
}
    d3e6:	bd08      	pop	{r3, pc}
    d3e8:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d3ec:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
    d3f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d3f4:	f7fc b86b 	b.w	94ce <os_eventq_put>

0000d3f8 <tdma_task>:
{
    d3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3fc:	4605      	mov	r5, r0
        ev = dpl_eventq_get(&tdma->eventq);
    d3fe:	f100 07b8 	add.w	r7, r0, #184	; 0xb8
    return (struct dpl_event*)&co->co.c_ev;
    d402:	f500 66a4 	add.w	r6, r0, #1312	; 0x520
    return (struct dpl_event *) os_eventq_get((struct os_eventq *) evq);
    d406:	4638      	mov	r0, r7
    d408:	f7fc f8a0 	bl	954c <os_eventq_get>
        if (ev == dpl_callout_get_event(&tdma->sanity_cb)) {
    d40c:	42b0      	cmp	r0, r6
    d40e:	4604      	mov	r4, r0
    d410:	d102      	bne.n	d418 <tdma_task+0x20>
    return ((struct os_event*)ev)->ev_cb((struct os_event*)ev);
    d412:	6873      	ldr	r3, [r6, #4]
    d414:	4798      	blx	r3
    d416:	e7f6      	b.n	d406 <tdma_task+0xe>
    return ev->ev.ev_arg;
    d418:	f8d0 8008 	ldr.w	r8, [r0, #8]
        ticks = dpl_cputime_get32();
    d41c:	f003 ff28 	bl	11270 <dpl_cputime_get32>
        if (slot->idx!=0 && delay > MYNEWT_VAL(TDMA_MAX_SLOT_DELAY_US)) {
    d420:	f8b8 3000 	ldrh.w	r3, [r8]
    d424:	b14b      	cbz	r3, d43a <tdma_task+0x42>
        delay = dpl_cputime_ticks_to_usecs(ticks - slot->cputime_slot_start);
    d426:	f8d8 3004 	ldr.w	r3, [r8, #4]
    d42a:	1ac0      	subs	r0, r0, r3
        if (slot->idx!=0 && delay > MYNEWT_VAL(TDMA_MAX_SLOT_DELAY_US)) {
    d42c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    d430:	d903      	bls.n	d43a <tdma_task+0x42>
            TDMA_STATS_INC(dropped_slots);
    d432:	6aab      	ldr	r3, [r5, #40]	; 0x28
    d434:	3301      	adds	r3, #1
    d436:	62ab      	str	r3, [r5, #40]	; 0x28
    d438:	e7e5      	b.n	d406 <tdma_task+0xe>
    return ((struct os_event*)ev)->ev_cb((struct os_event*)ev);
    d43a:	6863      	ldr	r3, [r4, #4]
    d43c:	4620      	mov	r0, r4
    d43e:	e7e9      	b.n	d414 <tdma_task+0x1c>

0000d440 <sanity_feeding_cb>:
{
    d440:	b510      	push	{r4, lr}
    assert(ev != NULL);
    d442:	4603      	mov	r3, r0
    d444:	b918      	cbnz	r0, d44e <sanity_feeding_cb+0xe>
    d446:	4602      	mov	r2, r0
    d448:	4601      	mov	r1, r0
    d44a:	f7fb fd53 	bl	8ef4 <__assert_func>
    return ev->ev.ev_arg;
    d44e:	6884      	ldr	r4, [r0, #8]
    assert(tdma);
    d450:	b90c      	cbnz	r4, d456 <sanity_feeding_cb+0x16>
    d452:	f7ff ffb2 	bl	d3ba <sanity_feeding_cb.part.0>
    os_sanity_task_checkin(0);
    d456:	2000      	movs	r0, #0
    d458:	f7fc fa5d 	bl	9916 <os_sanity_task_checkin>
    return (dpl_error_t)os_callout_reset(&co->co, ticks);
    d45c:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
    d460:	2180      	movs	r1, #128	; 0x80
}
    d462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d466:	f7fb bedd 	b.w	9224 <os_callout_reset>
	...

0000d46c <tdma_init>:
{
    d46c:	b570      	push	{r4, r5, r6, lr}
    d46e:	460e      	mov	r6, r1
    d470:	b086      	sub	sp, #24
    assert(dev);
    d472:	4605      	mov	r5, r0
    d474:	b928      	cbnz	r0, d482 <tdma_init+0x16>
    d476:	2300      	movs	r3, #0
    d478:	461a      	mov	r2, r3
    d47a:	4619      	mov	r1, r3
    d47c:	4618      	mov	r0, r3
    d47e:	f7fb fd39 	bl	8ef4 <__assert_func>
    tdma_instance_t * tdma = (tdma_instance_t*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_TDMA);
    d482:	2103      	movs	r1, #3
    d484:	f7fb fb54 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    if (tdma == NULL) {
    d488:	4604      	mov	r4, r0
    d48a:	b9d8      	cbnz	r0, d4c4 <tdma_init+0x58>
        tdma = (tdma_instance_t *) calloc(1, sizeof(struct _tdma_instance_t) + nslots * sizeof(struct _tdma_slot_t *));
    d48c:	f506 71a8 	add.w	r1, r6, #336	; 0x150
    d490:	0089      	lsls	r1, r1, #2
    d492:	2001      	movs	r0, #1
    d494:	f001 ff82 	bl	f39c <calloc>
        assert(tdma);
    d498:	4604      	mov	r4, r0
    d49a:	2800      	cmp	r0, #0
    d49c:	d0eb      	beq.n	d476 <tdma_init+0xa>
        tdma->status.selfmalloc = 1;
    d49e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    d4a2:	f043 0301 	orr.w	r3, r3, #1
    d4a6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    return (dpl_error_t)os_mutex_init(&mu->mu);
    d4aa:	306c      	adds	r0, #108	; 0x6c
    d4ac:	f7fd f902 	bl	a6b4 <os_mutex_init>
        assert(err == DPL_OK);
    d4b0:	2800      	cmp	r0, #0
    d4b2:	d1e0      	bne.n	d476 <tdma_init+0xa>
        tdma->task_prio = dev->task_prio + 0x6;
    d4b4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
        tdma->nslots = nslots;
    d4b8:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
        tdma->task_prio = dev->task_prio + 0x6;
    d4bc:	3306      	adds	r3, #6
        tdma->dev_inst = dev;
    d4be:	6025      	str	r5, [r4, #0]
        tdma->task_prio = dev->task_prio + 0x6;
    d4c0:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
    tdma->cbs = (struct uwb_mac_interface){
    d4c4:	f104 0330 	add.w	r3, r4, #48	; 0x30
    d4c8:	4618      	mov	r0, r3
    d4ca:	223c      	movs	r2, #60	; 0x3c
    d4cc:	2100      	movs	r1, #0
    d4ce:	f002 f896 	bl	f5fe <memset>
    d4d2:	2203      	movs	r2, #3
    d4d4:	8662      	strh	r2, [r4, #50]	; 0x32
    d4d6:	4a34      	ldr	r2, [pc, #208]	; (d5a8 <tdma_init+0x13c>)
    d4d8:	6662      	str	r2, [r4, #100]	; 0x64
    uwb_mac_append_interface(dev, &tdma->cbs);
    d4da:	4601      	mov	r1, r0
    tdma->cbs = (struct uwb_mac_interface){
    d4dc:	6364      	str	r4, [r4, #52]	; 0x34
    uwb_mac_append_interface(dev, &tdma->cbs);
    d4de:	4628      	mov	r0, r5
    d4e0:	f7fb fadc 	bl	8a9c <uwb_mac_append_interface>
    tdma->ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
    d4e4:	2101      	movs	r1, #1
    d4e6:	4628      	mov	r0, r5
    d4e8:	f7fb fb22 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    d4ec:	6060      	str	r0, [r4, #4]
    assert(tdma->ccp);
    d4ee:	2800      	cmp	r0, #0
    d4f0:	d0c1      	beq.n	d476 <tdma_init+0xa>
    int rc = stats_init(
    d4f2:	2204      	movs	r2, #4
    d4f4:	f104 0508 	add.w	r5, r4, #8
    d4f8:	4b2c      	ldr	r3, [pc, #176]	; (d5ac <tdma_init+0x140>)
    d4fa:	9200      	str	r2, [sp, #0]
    d4fc:	4611      	mov	r1, r2
    d4fe:	4628      	mov	r0, r5
    d500:	f006 ff20 	bl	14344 <stats_init>
    assert(rc == 0);
    d504:	2800      	cmp	r0, #0
    d506:	d1b6      	bne.n	d476 <tdma_init+0xa>
    rc = stats_register("tdma", STATS_HDR(tdma->stat));
    d508:	4629      	mov	r1, r5
    d50a:	4829      	ldr	r0, [pc, #164]	; (d5b0 <tdma_init+0x144>)
    d50c:	f006 ff9a 	bl	14444 <stats_register>
    assert(rc == 0);
    d510:	4605      	mov	r5, r0
    d512:	2800      	cmp	r0, #0
    d514:	d1af      	bne.n	d476 <tdma_init+0xa>
    tdma->superframe_slot.idx = 0;
    d516:	4626      	mov	r6, r4
    tdma->superframe_slot.parent = tdma;
    d518:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
    tdma->superframe_slot.idx = 0;
    d51c:	f826 0f80 	strh.w	r0, [r6, #128]!
    dpl_cputime_timer_init(&tdma->superframe_slot.timer, slot_timer_cb, (void *) &tdma->superframe_slot);
    d520:	4924      	ldr	r1, [pc, #144]	; (d5b4 <tdma_init+0x148>)
    d522:	4632      	mov	r2, r6
    d524:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    d528:	f003 fe8c 	bl	11244 <dpl_cputime_timer_init>
    memset(ev, 0, sizeof(*ev));
    d52c:	4629      	mov	r1, r5
    d52e:	2210      	movs	r2, #16
    d530:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
    d534:	f002 f863 	bl	f5fe <memset>
    ev->ev.ev_cb = (os_event_fn *)fn;
    d538:	4b1f      	ldr	r3, [pc, #124]	; (d5b8 <tdma_init+0x14c>)
    ev->ev.ev_arg = arg;
    d53a:	e9c4 362a 	strd	r3, r6, [r4, #168]	; 0xa8
    tdma->status.initialized = true;
    d53e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    d542:	f043 0302 	orr.w	r3, r3, #2
    d546:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    tdma->os_epoch = dpl_cputime_get32();
    d54a:	f003 fe91 	bl	11270 <dpl_cputime_get32>
    if (!dpl_eventq_inited(&inst->eventq))
    d54e:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
    tdma->os_epoch = dpl_cputime_get32();
    d552:	67e0      	str	r0, [r4, #124]	; 0x7c
    return os_eventq_inited((struct os_eventq *) evq);
    d554:	4628      	mov	r0, r5
    d556:	f7fb ffb5 	bl	94c4 <os_eventq_inited>
    if (!dpl_eventq_inited(&inst->eventq))
    d55a:	b9a8      	cbnz	r0, d588 <tdma_init+0x11c>
    os_eventq_init((struct os_eventq *) evq);
    d55c:	4628      	mov	r0, r5
    d55e:	f7fb ffa7 	bl	94b0 <os_eventq_init>
    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    d562:	f44f 7380 	mov.w	r3, #256	; 0x100
    d566:	9303      	str	r3, [sp, #12]
                      inst->task_stack,
    d568:	f504 7390 	add.w	r3, r4, #288	; 0x120
    d56c:	9302      	str	r3, [sp, #8]
    d56e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    d572:	9301      	str	r3, [sp, #4]
    d574:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    d578:	9300      	str	r3, [sp, #0]
    d57a:	4a10      	ldr	r2, [pc, #64]	; (d5bc <tdma_init+0x150>)
    d57c:	490c      	ldr	r1, [pc, #48]	; (d5b0 <tdma_init+0x144>)
    d57e:	4623      	mov	r3, r4
    d580:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    d584:	f7fc fbde 	bl	9d44 <os_task_init>
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
    d588:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
    d58c:	4a0c      	ldr	r2, [pc, #48]	; (d5c0 <tdma_init+0x154>)
    d58e:	9005      	str	r0, [sp, #20]
    d590:	4623      	mov	r3, r4
    d592:	4629      	mov	r1, r5
    d594:	f7fb fe1a 	bl	91cc <os_callout_init>
    return (dpl_error_t)os_callout_reset(&co->co, ticks);
    d598:	9805      	ldr	r0, [sp, #20]
    d59a:	2180      	movs	r1, #128	; 0x80
    d59c:	f7fb fe42 	bl	9224 <os_callout_reset>
}
    d5a0:	4620      	mov	r0, r4
    d5a2:	b006      	add	sp, #24
    d5a4:	bd70      	pop	{r4, r5, r6, pc}
    d5a6:	bf00      	nop
    d5a8:	0000d399 	.word	0x0000d399
    d5ac:	00022232 	.word	0x00022232
    d5b0:	000221a3 	.word	0x000221a3
    d5b4:	0000d3c9 	.word	0x0000d3c9
    d5b8:	0000d2d1 	.word	0x0000d2d1
    d5bc:	0000d3f9 	.word	0x0000d3f9
    d5c0:	0000d441 	.word	0x0000d441

0000d5c4 <tdma_assign_slot>:
{
    d5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d5c8:	4699      	mov	r9, r3
    assert(idx < inst->nslots);
    d5ca:	f8b0 307a 	ldrh.w	r3, [r0, #122]	; 0x7a
    d5ce:	4293      	cmp	r3, r2
{
    d5d0:	4605      	mov	r5, r0
    d5d2:	4688      	mov	r8, r1
    d5d4:	4616      	mov	r6, r2
    assert(idx < inst->nslots);
    d5d6:	d805      	bhi.n	d5e4 <tdma_assign_slot+0x20>
    d5d8:	2300      	movs	r3, #0
    d5da:	461a      	mov	r2, r3
    d5dc:	4619      	mov	r1, r3
    d5de:	4618      	mov	r0, r3
    d5e0:	f7fb fc88 	bl	8ef4 <__assert_func>
    if (inst->status.initialized == false)
    d5e4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    d5e8:	079b      	lsls	r3, r3, #30
    d5ea:	d528      	bpl.n	d63e <tdma_assign_slot+0x7a>
    if (inst->slot[idx] == NULL){
    d5ec:	eb00 0782 	add.w	r7, r0, r2, lsl #2
    d5f0:	f8d7 0540 	ldr.w	r0, [r7, #1344]	; 0x540
    d5f4:	b9f0      	cbnz	r0, d634 <tdma_assign_slot+0x70>
        inst->slot[idx] = (tdma_slot_t  *) calloc(1, sizeof(struct _tdma_slot_t));
    d5f6:	2138      	movs	r1, #56	; 0x38
    d5f8:	2001      	movs	r0, #1
    d5fa:	f001 fecf 	bl	f39c <calloc>
    d5fe:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
        assert(inst->slot[idx]);
    d602:	2800      	cmp	r0, #0
    d604:	d0e8      	beq.n	d5d8 <tdma_assign_slot+0x14>
    inst->slot[idx]->idx = idx;
    d606:	f8d7 4540 	ldr.w	r4, [r7, #1344]	; 0x540
    memset(ev, 0, sizeof(*ev));
    d60a:	2210      	movs	r2, #16
    d60c:	8026      	strh	r6, [r4, #0]
    inst->slot[idx]->parent = inst;
    d60e:	60a5      	str	r5, [r4, #8]
    inst->slot[idx]->arg = arg;
    d610:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    d614:	2100      	movs	r1, #0
    d616:	f104 0024 	add.w	r0, r4, #36	; 0x24
    d61a:	f001 fff0 	bl	f5fe <memset>
    ev->ev.ev_arg = arg;
    d61e:	e9c4 840a 	strd	r8, r4, [r4, #40]	; 0x28
    dpl_cputime_timer_init(&inst->slot[idx]->timer, slot_timer_cb, (void *) inst->slot[idx]);
    d622:	f8d7 2540 	ldr.w	r2, [r7, #1344]	; 0x540
    d626:	4907      	ldr	r1, [pc, #28]	; (d644 <tdma_assign_slot+0x80>)
}
    d628:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dpl_cputime_timer_init(&inst->slot[idx]->timer, slot_timer_cb, (void *) inst->slot[idx]);
    d62c:	f102 000c 	add.w	r0, r2, #12
    d630:	f003 be08 	b.w	11244 <dpl_cputime_timer_init>
        memset(inst->slot[idx], 0, sizeof(struct _tdma_slot_t));
    d634:	2238      	movs	r2, #56	; 0x38
    d636:	2100      	movs	r1, #0
    d638:	f001 ffe1 	bl	f5fe <memset>
    d63c:	e7e3      	b.n	d606 <tdma_assign_slot+0x42>
}
    d63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d642:	bf00      	nop
    d644:	0000d3c9 	.word	0x0000d3c9

0000d648 <tdma_release_slot>:
    assert(idx < inst->nslots);
    d648:	f8b0 307a 	ldrh.w	r3, [r0, #122]	; 0x7a
    d64c:	428b      	cmp	r3, r1
{
    d64e:	b510      	push	{r4, lr}
    assert(idx < inst->nslots);
    d650:	d801      	bhi.n	d656 <tdma_release_slot+0xe>
    d652:	f7ff feb2 	bl	d3ba <sanity_feeding_cb.part.0>
    if (inst->slot[idx]) {
    d656:	eb00 0481 	add.w	r4, r0, r1, lsl #2
    d65a:	f8d4 0540 	ldr.w	r0, [r4, #1344]	; 0x540
    d65e:	b148      	cbz	r0, d674 <tdma_release_slot+0x2c>
        dpl_cputime_timer_stop(&inst->slot[idx]->timer);
    d660:	300c      	adds	r0, #12
    d662:	f003 fe03 	bl	1126c <dpl_cputime_timer_stop>
        free(inst->slot[idx]);
    d666:	f8d4 0540 	ldr.w	r0, [r4, #1344]	; 0x540
    d66a:	f001 ff81 	bl	f570 <free>
        inst->slot[idx] =  NULL;
    d66e:	2300      	movs	r3, #0
    d670:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
}
    d674:	bd10      	pop	{r4, pc}

0000d676 <tdma_stop>:
 *
 * @return void
 */
void
tdma_stop(struct _tdma_instance_t * tdma)
{
    d676:	b570      	push	{r4, r5, r6, lr}
    d678:	4604      	mov	r4, r0
    uint16_t i;
    for (i = 0; i < tdma->nslots; i++) {
    d67a:	2500      	movs	r5, #0
    d67c:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    d680:	b2ae      	uxth	r6, r5
    d682:	42b3      	cmp	r3, r6
    d684:	d800      	bhi.n	d688 <tdma_stop+0x12>
        if (tdma->slot[i]){
            dpl_cputime_timer_stop(&tdma->slot[i]->timer);
            tdma_release_slot(tdma, i);
        }
    }
}
    d686:	bd70      	pop	{r4, r5, r6, pc}
        if (tdma->slot[i]){
    d688:	b2ab      	uxth	r3, r5
    d68a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    d68e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    d692:	b130      	cbz	r0, d6a2 <tdma_stop+0x2c>
            dpl_cputime_timer_stop(&tdma->slot[i]->timer);
    d694:	300c      	adds	r0, #12
    d696:	f003 fde9 	bl	1126c <dpl_cputime_timer_stop>
            tdma_release_slot(tdma, i);
    d69a:	4631      	mov	r1, r6
    d69c:	4620      	mov	r0, r4
    d69e:	f7ff ffd3 	bl	d648 <tdma_release_slot>
    for (i = 0; i < tdma->nslots; i++) {
    d6a2:	3501      	adds	r5, #1
    d6a4:	e7ea      	b.n	d67c <tdma_stop+0x6>

0000d6a6 <tdma_free>:
{
    d6a6:	b510      	push	{r4, lr}
    assert(inst);
    d6a8:	4604      	mov	r4, r0
    d6aa:	b908      	cbnz	r0, d6b0 <tdma_free+0xa>
    d6ac:	f7ff fe85 	bl	d3ba <sanity_feeding_cb.part.0>
    tdma_stop(inst);
    d6b0:	f7ff ffe1 	bl	d676 <tdma_stop>
    uwb_mac_remove_interface(inst->dev_inst, inst->cbs.id);
    d6b4:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    d6b6:	6820      	ldr	r0, [r4, #0]
    d6b8:	f7fb fa0d 	bl	8ad6 <uwb_mac_remove_interface>
    if (inst->status.selfmalloc)
    d6bc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    d6c0:	f013 0201 	ands.w	r2, r3, #1
    d6c4:	d004      	beq.n	d6d0 <tdma_free+0x2a>
        free(inst);
    d6c6:	4620      	mov	r0, r4
}
    d6c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        free(inst);
    d6cc:	f001 bf50 	b.w	f570 <free>
        inst->status.initialized = 0;
    d6d0:	f362 0341 	bfi	r3, r2, #1, #1
    d6d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
    d6d8:	bd10      	pop	{r4, pc}

0000d6da <tdma_rx_slot_start>:
 *
 * @return dx_time   The time for a rx operation to start
 */
uint64_t
tdma_rx_slot_start(struct _tdma_instance_t * tdma, dpl_float32_t idx)
{
    d6da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint64_t dx_time, slot_offset;
    dpl_float64_t slot_period;
    struct uwb_ccp_instance * ccp = tdma->ccp;
    d6de:	6846      	ldr	r6, [r0, #4]
    uint64_t rx_stable = tdma->dev_inst->config.rx.timeToRxStable;
#if __KERNEL__
    slot_period = DPL_FLOAT64_U64_TO_F64(div64_s64(((uint64_t)ccp->period << 16), tdma->nslots));
#else
    slot_period = DPL_FLOAT64_U64_TO_F64((((uint64_t)ccp->period << 16) / tdma->nslots));
    d6e0:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    d6e4:	f8d6 10e8 	ldr.w	r1, [r6, #232]	; 0xe8
    d6e8:	2300      	movs	r3, #0
{
    d6ea:	4605      	mov	r5, r0
    slot_period = DPL_FLOAT64_U64_TO_F64((((uint64_t)ccp->period << 16) / tdma->nslots));
    d6ec:	0408      	lsls	r0, r1, #16
    d6ee:	0c09      	lsrs	r1, r1, #16
{
    d6f0:	ee10 4a10 	vmov	r4, s0
    slot_period = DPL_FLOAT64_U64_TO_F64((((uint64_t)ccp->period << 16) / tdma->nslots));
    d6f4:	f013 f88a 	bl	2080c <__aeabi_uldivmod>
    d6f8:	f012 fbac 	bl	1fe54 <__aeabi_ul2d>
    d6fc:	4680      	mov	r8, r0
#endif
    slot_offset = DPL_FLOAT64_INT(DPL_FLOAT64_MUL(DPL_FLOAT64_FROM_F32(idx), slot_period));
    d6fe:	4620      	mov	r0, r4
    slot_period = DPL_FLOAT64_U64_TO_F64((((uint64_t)ccp->period << 16) / tdma->nslots));
    d700:	4689      	mov	r9, r1
    slot_offset = DPL_FLOAT64_INT(DPL_FLOAT64_MUL(DPL_FLOAT64_FROM_F32(idx), slot_period));
    d702:	f012 fb85 	bl	1fe10 <__aeabi_f2d>
    d706:	4602      	mov	r2, r0
    d708:	460b      	mov	r3, r1
    d70a:	4640      	mov	r0, r8
    d70c:	4649      	mov	r1, r9
    d70e:	f012 fbd7 	bl	1fec0 <__aeabi_dmul>
    d712:	f013 f893 	bl	2083c <__aeabi_d2lz>
    uint64_t rx_stable = tdma->dev_inst->config.rx.timeToRxStable;
    d716:	682b      	ldr	r3, [r5, #0]
    d718:	f893 251b 	ldrb.w	r2, [r3, #1307]	; 0x51b
    /* Compensate for the time it takes to turn on the receiver */
    slot_offset -= (rx_stable << 16);
    d71c:	0413      	lsls	r3, r2, #16

#if MYNEWT_VAL(UWB_WCS_ENABLED)
    {
        struct uwb_wcs_instance * wcs = ccp->wcs;
        dx_time = ccp->local_epoch + (uint64_t) uwb_wcs_dtu_time_adjust(wcs, slot_offset);
    d71e:	4283      	cmp	r3, r0
    d720:	bf94      	ite	ls
    d722:	460b      	movls	r3, r1
    d724:	1e4b      	subhi	r3, r1, #1
    d726:	eba0 4202 	sub.w	r2, r0, r2, lsl #16
    d72a:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    d72c:	e9d6 4736 	ldrd	r4, r7, [r6, #216]	; 0xd8
    d730:	f001 fd72 	bl	f218 <uwb_wcs_dtu_time_adjust>
    d734:	1820      	adds	r0, r4, r0
    }
#else
    dx_time = ccp->local_epoch + slot_offset;
#endif
    return dx_time;
}
    d736:	eb47 0101 	adc.w	r1, r7, r1
    d73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000d740 <tdma_tx_slot_start>:
 *
 * @return dx_time   The time for a rx operation to start (dtu)
 */
uint64_t
tdma_tx_slot_start(struct _tdma_instance_t * tdma, dpl_float32_t idx)
{
    d740:	b570      	push	{r4, r5, r6, lr}
    d742:	4606      	mov	r6, r0
    uint64_t dx_time = tdma_rx_slot_start(tdma, idx);
    d744:	f7ff ffc9 	bl	d6da <tdma_rx_slot_start>
    d748:	4604      	mov	r4, r0
#ifndef __KERNEL__
    dx_time = (dx_time + ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst))) << 16));
    d74a:	6830      	ldr	r0, [r6, #0]
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    d74c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    d74e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    uint64_t dx_time = tdma_rx_slot_start(tdma, idx);
    d752:	460d      	mov	r5, r1
    d754:	4798      	blx	r3
    dx_time = (dx_time + ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst))) << 16));
    d756:	f012 fb49 	bl	1fdec <__aeabi_i2d>
    d75a:	a30d      	add	r3, pc, #52	; (adr r3, d790 <tdma_tx_slot_start+0x50>)
    d75c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d760:	f012 fcd8 	bl	20114 <__aeabi_ddiv>
    d764:	f012 fea4 	bl	204b0 <__aeabi_d2f>
    d768:	ee00 0a10 	vmov	s0, r0
    d76c:	f013 fa30 	bl	20bd0 <ceilf>
    d770:	ee10 0a10 	vmov	r0, s0
    d774:	f013 f87a 	bl	2086c <__aeabi_f2ulz>
    d778:	4603      	mov	r3, r0
    d77a:	0409      	lsls	r1, r1, #16
    d77c:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
    d780:	041b      	lsls	r3, r3, #16
    d782:	1918      	adds	r0, r3, r4
#else
    dx_time = (dx_time + ((uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst))) << 16));
#endif
    return dx_time;
}
    d784:	eb45 0101 	adc.w	r1, r5, r1
    d788:	bd70      	pop	{r4, r5, r6, pc}
    d78a:	bf00      	nop
    d78c:	f3af 8000 	nop.w
    d790:	90690691 	.word	0x90690691
    d794:	3ff06906 	.word	0x3ff06906

0000d798 <tdma_pkg_init>:
 *
 * @return void
 */
void
tdma_pkg_init(void)
{
    d798:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"tdma_pkg_init\"}\n",
    d79a:	f003 fd69 	bl	11270 <dpl_cputime_get32>
    d79e:	4601      	mov	r1, r0
    d7a0:	4807      	ldr	r0, [pc, #28]	; (d7c0 <tdma_pkg_init+0x28>)
    d7a2:	f002 fa1b 	bl	fbdc <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    d7a6:	2400      	movs	r4, #0
        udev = uwb_dev_idx_lookup(i);
    d7a8:	4620      	mov	r0, r4
    d7aa:	f7fb f94d 	bl	8a48 <uwb_dev_idx_lookup>
        if (!udev) {
    d7ae:	b110      	cbz	r0, d7b6 <tdma_pkg_init+0x1e>
            continue;
        }
        tdma_init(udev, MYNEWT_VAL(TDMA_NSLOTS));
    d7b0:	21a0      	movs	r1, #160	; 0xa0
    d7b2:	f7ff fe5b 	bl	d46c <tdma_init>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    d7b6:	3401      	adds	r4, #1
    d7b8:	2c03      	cmp	r4, #3
    d7ba:	d1f5      	bne.n	d7a8 <tdma_pkg_init+0x10>
    }
}
    d7bc:	bd10      	pop	{r4, pc}
    d7be:	bf00      	nop
    d7c0:	000221a8 	.word	0x000221a8

0000d7c4 <tdma_pkg_down>:
 *
 * @return void
 */
int
tdma_pkg_down(int reason)
{
    d7c4:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct _tdma_instance_t * tdma;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"tdma_pkg_down\"}\n",
    d7c6:	f003 fd53 	bl	11270 <dpl_cputime_get32>
    d7ca:	4601      	mov	r1, r0
    d7cc:	4809      	ldr	r0, [pc, #36]	; (d7f4 <tdma_pkg_down+0x30>)
    d7ce:	f002 fa05 	bl	fbdc <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    d7d2:	2400      	movs	r4, #0
        udev = uwb_dev_idx_lookup(i);
    d7d4:	4620      	mov	r0, r4
    d7d6:	f7fb f937 	bl	8a48 <uwb_dev_idx_lookup>
        if (!udev) {
    d7da:	b128      	cbz	r0, d7e8 <tdma_pkg_down+0x24>
            continue;
        }
        tdma = (struct _tdma_instance_t*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_TDMA);
    d7dc:	2103      	movs	r1, #3
    d7de:	f7fb f9a7 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
        if (!tdma) {
    d7e2:	b108      	cbz	r0, d7e8 <tdma_pkg_down+0x24>
            continue;
        }
        tdma_free(tdma);
    d7e4:	f7ff ff5f 	bl	d6a6 <tdma_free>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    d7e8:	3401      	adds	r4, #1
    d7ea:	2c03      	cmp	r4, #3
    d7ec:	d1f2      	bne.n	d7d4 <tdma_pkg_down+0x10>
    }
    return 0;
}
    d7ee:	2000      	movs	r0, #0
    d7f0:	bd10      	pop	{r4, pc}
    d7f2:	bf00      	nop
    d7f4:	000221cf 	.word	0x000221cf

0000d7f8 <uwb_read_systime_lo32>:
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    d7f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    d7fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    d7fc:	4718      	bx	r3

0000d7fe <uwb_phy_SHR_duration>:
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    d7fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
    d800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    d804:	4718      	bx	r3

0000d806 <uwb_phy_forcetrxoff>:
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    d806:	6a43      	ldr	r3, [r0, #36]	; 0x24
    d808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    d80c:	4718      	bx	r3

0000d80e <error_cb>:
 * @return void
 */
static bool
error_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    d80e:	6848      	ldr	r0, [r1, #4]
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
    d810:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    d814:	2a01      	cmp	r2, #1
{
    d816:	b508      	push	{r3, lr}
    if(dpl_sem_get_count(&ccp->sem) == 1)
    d818:	d020      	beq.n	d85c <error_cb+0x4e>
        return false;

    CCP_STATS_INC(txrx_error);
    d81a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    d81c:	3301      	adds	r3, #1
    d81e:	6403      	str	r3, [r0, #64]	; 0x40
    if(dpl_sem_get_count(&ccp->sem) == 0) {
    d820:	b10a      	cbz	r2, d826 <error_cb+0x18>
#endif
        }
        dpl_error_t err = dpl_sem_release(&ccp->sem);
        assert(err == DPL_OK);
    }
    return true;
    d822:	2001      	movs	r0, #1
}
    d824:	bd08      	pop	{r3, pc}
        if (ccp->config.role != CCP_ROLE_MASTER) {
    d826:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
    d82a:	f013 0f1e 	tst.w	r3, #30
    d82e:	d00a      	beq.n	d846 <error_cb+0x38>
            ccp->status.rx_error = 1;
    d830:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    d834:	f043 0301 	orr.w	r3, r3, #1
    d838:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
            ccp->missed_frames++;
    d83c:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    d840:	3301      	adds	r3, #1
    d842:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
    return (dpl_error_t)os_sem_release(&sem->sem);
    d846:	30b0      	adds	r0, #176	; 0xb0
    d848:	f7fc f9f4 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
    d84c:	2800      	cmp	r0, #0
    d84e:	d0e8      	beq.n	d822 <error_cb+0x14>
    d850:	2300      	movs	r3, #0
    d852:	461a      	mov	r2, r3
    d854:	4619      	mov	r1, r3
    d856:	4618      	mov	r0, r3
    d858:	f7fb fb4c 	bl	8ef4 <__assert_func>
        return false;
    d85c:	2000      	movs	r0, #0
    d85e:	e7e1      	b.n	d824 <error_cb+0x16>

0000d860 <tx_complete_cb>:
{
    d860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    d864:	684c      	ldr	r4, [r1, #4]
    if(dpl_sem_get_count(&ccp->sem) == 1)
    d866:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    d86a:	2b01      	cmp	r3, #1
{
    d86c:	4605      	mov	r5, r0
    if(dpl_sem_get_count(&ccp->sem) == 1)
    d86e:	f000 80d7 	beq.w	da20 <tx_complete_cb+0x1c0>
    CCP_STATS_INC(tx_complete);
    d872:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d874:	3301      	adds	r3, #1
    d876:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ccp->config.role != CCP_ROLE_MASTER)
    d878:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    d87c:	f013 0f1e 	tst.w	r3, #30
    d880:	f040 80ce 	bne.w	da20 <tx_complete_cb+0x1c0>
    uwb_ccp_frame_t * frame = ccp->frames[(++ccp->idx)%ccp->nframes];
    d884:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    d888:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
    d88c:	3301      	adds	r3, #1
    d88e:	b29b      	uxth	r3, r3
    d890:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    d894:	fbb3 f1f2 	udiv	r1, r3, r2
    d898:	fb02 3311 	mls	r3, r2, r1, r3
    d89c:	b29b      	uxth	r3, r3
    d89e:	33e0      	adds	r3, #224	; 0xe0
    d8a0:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
    uint32_t delta_0 = 0xffffffffU&(uwb_read_systime_lo32(inst) - frame->transmission_timestamp.lo);
    d8a4:	f7ff ffa8 	bl	d7f8 <uwb_read_systime_lo32>
    d8a8:	6977      	ldr	r7, [r6, #20]
    d8aa:	1bc7      	subs	r7, r0, r7
    ccp->os_epoch = dpl_cputime_get32();
    d8ac:	f003 fce0 	bl	11270 <dpl_cputime_get32>
    d8b0:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    uint32_t delta_1 = 0xffffffffU&(uwb_read_systime_lo32(inst) - frame->transmission_timestamp.lo);
    d8b4:	4628      	mov	r0, r5
    d8b6:	f7ff ff9f 	bl	d7f8 <uwb_read_systime_lo32>
    d8ba:	f8d6 a014 	ldr.w	sl, [r6, #20]
    d8be:	f896 b018 	ldrb.w	fp, [r6, #24]
    uint32_t delta = (delta_0>>1) + (delta_1>>1);
    d8c2:	087f      	lsrs	r7, r7, #1
    uint32_t delta_1 = 0xffffffffU&(uwb_read_systime_lo32(inst) - frame->transmission_timestamp.lo);
    d8c4:	eba0 000a 	sub.w	r0, r0, sl
    uint32_t delta = (delta_0>>1) + (delta_1>>1);
    d8c8:	eb07 0050 	add.w	r0, r7, r0, lsr #1
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    d8cc:	0c00      	lsrs	r0, r0, #16
    d8ce:	f012 fa7d 	bl	1fdcc <__aeabi_ui2d>
    d8d2:	a356      	add	r3, pc, #344	; (adr r3, da2c <tx_complete_cb+0x1cc>)
    d8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    d8d8:	f012 faf2 	bl	1fec0 <__aeabi_dmul>
    d8dc:	4680      	mov	r8, r0
    d8de:	4689      	mov	r9, r1
    d8e0:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    d8e4:	f012 fa72 	bl	1fdcc <__aeabi_ui2d>
    d8e8:	4642      	mov	r2, r8
    d8ea:	464b      	mov	r3, r9
    d8ec:	f012 f930 	bl	1fb50 <__aeabi_dsub>
    d8f0:	f012 fdbe 	bl	20470 <__aeabi_d2uiz>
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    d8f4:	2200      	movs	r2, #0
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    d8f6:	4607      	mov	r7, r0
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    d8f8:	2300      	movs	r3, #0
    d8fa:	4640      	mov	r0, r8
    d8fc:	4649      	mov	r1, r9
    d8fe:	f012 f929 	bl	1fb54 <__adddf3>
    d902:	f012 fdb5 	bl	20470 <__aeabi_d2uiz>
    d906:	6520      	str	r0, [r4, #80]	; 0x50
    ccp->master_epoch = frame->transmission_timestamp;
    d908:	6972      	ldr	r2, [r6, #20]
    d90a:	69b1      	ldr	r1, [r6, #24]
    ccp->period = (frame->transmission_interval >> 16);
    d90c:	f8d6 800c 	ldr.w	r8, [r6, #12]
    d910:	7c33      	ldrb	r3, [r6, #16]
    ccp->master_epoch = frame->transmission_timestamp;
    d912:	e9c4 2134 	strd	r2, r1, [r4, #208]	; 0xd0
    ccp->period = (frame->transmission_interval >> 16);
    d916:	ea4f 4818 	mov.w	r8, r8, lsr #16
    d91a:	ea48 4803 	orr.w	r8, r8, r3, lsl #16
    d91e:	f8c4 80e8 	str.w	r8, [r4, #232]	; 0xe8
    adjust_for_epoch_to_rm(ccp, frame->epoch_to_rm_us);
    d922:	f8b6 901e 	ldrh.w	r9, [r6, #30]
    ccp->master_epoch.timestamp -= ((uint64_t)epoch_to_rm_us << 16);
    d926:	ea4f 4309 	mov.w	r3, r9, lsl #16
    d92a:	1ad2      	subs	r2, r2, r3
    d92c:	f04f 0000 	mov.w	r0, #0
    d930:	eb61 0100 	sbc.w	r1, r1, r0
    ccp->local_epoch -= ((uint64_t)epoch_to_rm_us << 16);
    d934:	ebba 0303 	subs.w	r3, sl, r3
    d938:	eb6b 0000 	sbc.w	r0, fp, r0
    d93c:	e9c4 3036 	strd	r3, r0, [r4, #216]	; 0xd8
    ccp->master_epoch.timestamp -= ((uint64_t)epoch_to_rm_us << 16);
    d940:	e9c4 2134 	strd	r2, r1, [r4, #208]	; 0xd0
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(epoch_to_rm_us));
    d944:	4638      	mov	r0, r7
    d946:	f012 fa41 	bl	1fdcc <__aeabi_ui2d>
    d94a:	4606      	mov	r6, r0
    d94c:	4648      	mov	r0, r9
    d94e:	460f      	mov	r7, r1
    d950:	f012 fa4c 	bl	1fdec <__aeabi_i2d>
    d954:	a335      	add	r3, pc, #212	; (adr r3, da2c <tx_complete_cb+0x1cc>)
    d956:	e9d3 2300 	ldrd	r2, r3, [r3]
    d95a:	f012 fab1 	bl	1fec0 <__aeabi_dmul>
    d95e:	460b      	mov	r3, r1
    d960:	4602      	mov	r2, r0
    d962:	4639      	mov	r1, r7
    d964:	4630      	mov	r0, r6
    d966:	f012 f8f3 	bl	1fb50 <__aeabi_dsub>
    d96a:	f012 fd81 	bl	20470 <__aeabi_d2uiz>
    if (ccp->status.timer_enabled){
    d96e:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(epoch_to_rm_us));
    d972:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    if (ccp->status.timer_enabled){
    d976:	075b      	lsls	r3, r3, #29
    d978:	d521      	bpl.n	d9be <tx_complete_cb+0x15e>
            + dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period))
    d97a:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
    d97e:	f012 fa25 	bl	1fdcc <__aeabi_ui2d>
    d982:	4606      	mov	r6, r0
    d984:	4640      	mov	r0, r8
    d986:	460f      	mov	r7, r1
    d988:	f012 fa20 	bl	1fdcc <__aeabi_ui2d>
    d98c:	a327      	add	r3, pc, #156	; (adr r3, da2c <tx_complete_cb+0x1cc>)
    d98e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d992:	f012 fa95 	bl	1fec0 <__aeabi_dmul>
    d996:	4602      	mov	r2, r0
    d998:	460b      	mov	r3, r1
    d99a:	4630      	mov	r0, r6
    d99c:	4639      	mov	r1, r7
    d99e:	f012 f8d9 	bl	1fb54 <__adddf3>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    d9a2:	f012 fd65 	bl	20470 <__aeabi_d2uiz>
    d9a6:	4601      	mov	r1, r0
    d9a8:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    d9ac:	f003 fc5c 	bl	11268 <dpl_cputime_timer_start>
        if (rc == 0) ccp->status.timer_restarted = 1;
    d9b0:	b928      	cbnz	r0, d9be <tx_complete_cb+0x15e>
    d9b2:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    d9b6:	f043 0308 	orr.w	r3, r3, #8
    d9ba:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    ccp->status.valid |= ccp->idx > 1;
    d9be:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    d9c2:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
    d9c6:	f8d5 6530 	ldr.w	r6, [r5, #1328]	; 0x530
    ccp->status.valid |= ccp->idx > 1;
    d9ca:	f3c3 0280 	ubfx	r2, r3, #2, #1
    d9ce:	2901      	cmp	r1, #1
    d9d0:	bf88      	it	hi
    d9d2:	f042 0201 	orrhi.w	r2, r2, #1
    d9d6:	f362 0382 	bfi	r3, r2, #2, #1
    d9da:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
    d9de:	b136      	cbz	r6, d9ee <tx_complete_cb+0x18e>
            if (lcbs != NULL && lcbs->superframe_cb) {
    d9e0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    d9e2:	b113      	cbz	r3, d9ea <tx_complete_cb+0x18a>
                if(lcbs->superframe_cb((struct uwb_dev*)inst, lcbs)) continue;
    d9e4:	4631      	mov	r1, r6
    d9e6:	4628      	mov	r0, r5
    d9e8:	4798      	blx	r3
        SLIST_FOREACH(lcbs, &inst->interface_cbs, next) {
    d9ea:	6bb6      	ldr	r6, [r6, #56]	; 0x38
    d9ec:	e7f7      	b.n	d9de <tx_complete_cb+0x17e>
    if (ccp->config.postprocess && ccp->status.valid)
    d9ee:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    d9f2:	4b0d      	ldr	r3, [pc, #52]	; (da28 <tx_complete_cb+0x1c8>)
    d9f4:	4393      	bics	r3, r2
    d9f6:	d105      	bne.n	da04 <tx_complete_cb+0x1a4>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    d9f8:	f7fb fe10 	bl	961c <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    d9fc:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    da00:	f7fb fd65 	bl	94ce <os_eventq_put>
    if(dpl_sem_get_count(&ccp->sem) == 0){
    da04:	f8b4 50b6 	ldrh.w	r5, [r4, #182]	; 0xb6
    da08:	b955      	cbnz	r5, da20 <tx_complete_cb+0x1c0>
    return (dpl_error_t)os_sem_release(&sem->sem);
    da0a:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    da0e:	f7fc f911 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
    da12:	b128      	cbz	r0, da20 <tx_complete_cb+0x1c0>
    da14:	462b      	mov	r3, r5
    da16:	462a      	mov	r2, r5
    da18:	4629      	mov	r1, r5
    da1a:	4628      	mov	r0, r5
    da1c:	f7fb fa6a 	bl	8ef4 <__assert_func>
}
    da20:	2000      	movs	r0, #0
    da22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da26:	bf00      	nop
    da28:	00010004 	.word	0x00010004
    da2c:	90690691 	.word	0x90690691
    da30:	3ff06906 	.word	0x3ff06906

0000da34 <ccp_task>:
{
    da34:	b510      	push	{r4, lr}
        dpl_eventq_run(&inst->eventq);
    da36:	f500 7486 	add.w	r4, r0, #268	; 0x10c
    os_eventq_run((struct os_eventq * )evq);
    da3a:	4620      	mov	r0, r4
    da3c:	f7fb fdc1 	bl	95c2 <os_eventq_run>
    da40:	e7fb      	b.n	da3a <ccp_task+0x6>

0000da42 <ccp_timer_irq.part.0>:
 * @param cbs    Pointer to struct uwb_mac_interface.
 *
 * @return void
 */
static bool
reset_cb(struct uwb_dev *inst, struct uwb_mac_interface * cbs)
    da42:	b508      	push	{r3, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    if(dpl_sem_get_count(&ccp->sem) == 0){
        DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_reset_cb\"}\n",
                dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
        dpl_error_t err = dpl_sem_release(&ccp->sem);
        assert(err == DPL_OK);
    da44:	2300      	movs	r3, #0
    da46:	461a      	mov	r2, r3
    da48:	4619      	mov	r1, r3
    da4a:	4618      	mov	r0, r3
    da4c:	f7fb fa52 	bl	8ef4 <__assert_func>

0000da50 <reset_cb>:
{
    da50:	b510      	push	{r4, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    da52:	684c      	ldr	r4, [r1, #4]
    if(dpl_sem_get_count(&ccp->sem) == 0){
    da54:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    da58:	b95b      	cbnz	r3, da72 <reset_cb+0x22>
    return (dpl_error_t)os_sem_release(&sem->sem);
    da5a:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    da5e:	f7fc f8e9 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
    da62:	b108      	cbz	r0, da68 <reset_cb+0x18>
    da64:	f7ff ffed 	bl	da42 <ccp_timer_irq.part.0>
        CCP_STATS_INC(reset);
    da68:	6e63      	ldr	r3, [r4, #100]	; 0x64
    da6a:	3301      	adds	r3, #1
    da6c:	6663      	str	r3, [r4, #100]	; 0x64
        return true;
    da6e:	2001      	movs	r0, #1
    }
    return false;   // CCP is an observer and should not return true
}
    da70:	bd10      	pop	{r4, pc}
    return false;   // CCP is an observer and should not return true
    da72:	2000      	movs	r0, #0
    da74:	e7fc      	b.n	da70 <reset_cb+0x20>

0000da76 <rx_timeout_cb>:
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    da76:	6848      	ldr	r0, [r1, #4]
{
    da78:	b508      	push	{r3, lr}
    da7a:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    da7e:	2b01      	cmp	r3, #1
    da80:	d017      	beq.n	dab2 <rx_timeout_cb+0x3c>
    if (dpl_sem_get_count(&ccp->sem) == 0){
    da82:	b10b      	cbz	r3, da88 <rx_timeout_cb+0x12>
    return true;
    da84:	2001      	movs	r0, #1
}
    da86:	bd08      	pop	{r3, pc}
        ccp->status.rx_timeout_error = 1;
    da88:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    da8c:	f043 0302 	orr.w	r3, r3, #2
    da90:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
        ccp->missed_frames++;
    da94:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    da98:	3301      	adds	r3, #1
    da9a:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
        CCP_STATS_INC(rx_timeout);
    da9e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    daa0:	3301      	adds	r3, #1
    daa2:	65c3      	str	r3, [r0, #92]	; 0x5c
    daa4:	30b0      	adds	r0, #176	; 0xb0
    daa6:	f7fc f8c5 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
    daaa:	2800      	cmp	r0, #0
    daac:	d0ea      	beq.n	da84 <rx_timeout_cb+0xe>
    daae:	f7ff ffc8 	bl	da42 <ccp_timer_irq.part.0>
        return false;
    dab2:	2000      	movs	r0, #0
    dab4:	e7e7      	b.n	da86 <rx_timeout_cb+0x10>

0000dab6 <ccp_timer_irq>:
ccp_timer_irq(void * arg){
    dab6:	b508      	push	{r3, lr}
    assert(arg);
    dab8:	b908      	cbnz	r0, dabe <ccp_timer_irq+0x8>
    daba:	f7ff ffc2 	bl	da42 <ccp_timer_irq.part.0>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    dabe:	f500 718e 	add.w	r1, r0, #284	; 0x11c
}
    dac2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dac6:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    daca:	f7fb bd00 	b.w	94ce <os_eventq_put>

0000dace <uwb_set_delay_start.isra.0>:
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    dace:	6a41      	ldr	r1, [r0, #36]	; 0x24
    dad0:	6b49      	ldr	r1, [r1, #52]	; 0x34
    dad2:	4708      	bx	r1
    dad4:	0000      	movs	r0, r0
	...

0000dad8 <ccp_listen.constprop.0.isra.0>:
 * output parameters
 *
 * returns struct uwb_ccp_status_t
 */
static struct uwb_ccp_status
ccp_listen(struct uwb_ccp_instance *ccp, uint64_t dx_time, uwb_dev_modes_t mode)
    dad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
    struct uwb_dev * inst = ccp->dev_inst;
    dadc:	4606      	mov	r6, r0
ccp_listen(struct uwb_ccp_instance *ccp, uint64_t dx_time, uwb_dev_modes_t mode)
    dade:	4604      	mov	r4, r0
    struct uwb_dev * inst = ccp->dev_inst;
    dae0:	f856 7bb0 	ldr.w	r7, [r6], #176
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_listen\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    uwb_phy_forcetrxoff(inst);
    dae4:	4638      	mov	r0, r7
ccp_listen(struct uwb_ccp_instance *ccp, uint64_t dx_time, uwb_dev_modes_t mode)
    dae6:	4615      	mov	r5, r2
    dae8:	4698      	mov	r8, r3
    uwb_phy_forcetrxoff(inst);
    daea:	f7ff fe8c 	bl	d806 <uwb_phy_forcetrxoff>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    daee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    daf2:	4630      	mov	r0, r6
    daf4:	f7fc f8d0 	bl	9c98 <os_sem_pend>
    dpl_error_t err = dpl_sem_pend(&ccp->sem,  DPL_TIMEOUT_NEVER);
    assert(err == DPL_OK);
    daf8:	b128      	cbz	r0, db06 <ccp_listen.constprop.0.isra.0+0x2e>
    dafa:	2300      	movs	r3, #0
    dafc:	461a      	mov	r2, r3
    dafe:	4619      	mov	r1, r3
    db00:	4618      	mov	r0, r3
    db02:	f7fb f9f7 	bl	8ef4 <__assert_func>

    CCP_STATS_INC(listen);
    db06:	6a63      	ldr	r3, [r4, #36]	; 0x24
    db08:	3301      	adds	r3, #1
    db0a:	6263      	str	r3, [r4, #36]	; 0x24

    if (dx_time) {
    db0c:	ea55 0308 	orrs.w	r3, r5, r8
    db10:	d004      	beq.n	db1c <ccp_listen.constprop.0.isra.0+0x44>
        uwb_set_delay_start(inst, dx_time);
    db12:	462a      	mov	r2, r5
    db14:	4643      	mov	r3, r8
    db16:	4638      	mov	r0, r7
    db18:	f7ff ffd9 	bl	dace <uwb_set_delay_start.isra.0>
    }

    ccp->status.rx_timeout_error = 0;
    db1c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    db20:	f36f 0341 	bfc	r3, #1, #1
    db24:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    return (dev->uw_funcs->uf_start_rx(dev));
    db28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    db2a:	4638      	mov	r0, r7
    db2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    db2e:	4798      	blx	r3
    ccp->status.start_rx_error = uwb_start_rx(inst).start_rx_error;
    db30:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    db34:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    db38:	f360 13c7 	bfi	r3, r0, #7, #1
    db3c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if (ccp->status.start_rx_error) {
    db40:	061b      	lsls	r3, r3, #24
    db42:	d51a      	bpl.n	db7a <ccp_listen.constprop.0.isra.0+0xa2>
#if MYNEWT_VAL(UWB_CCP_STATS)
        uint32_t behind = 0xffffffffU&(uwb_read_systime_lo32(inst) - dx_time);
    db44:	4638      	mov	r0, r7
    db46:	f7ff fe57 	bl	d7f8 <uwb_read_systime_lo32>
    db4a:	1b40      	subs	r0, r0, r5
        CCP_STATS_SET(os_lat_behind, uwb_dwt_usecs_to_usecs(behind>>16));
    db4c:	0c00      	lsrs	r0, r0, #16
    db4e:	f012 f93d 	bl	1fdcc <__aeabi_ui2d>
    db52:	a31d      	add	r3, pc, #116	; (adr r3, dbc8 <ccp_listen.constprop.0.isra.0+0xf0>)
    db54:	e9d3 2300 	ldrd	r2, r3, [r3]
    db58:	f012 f9b2 	bl	1fec0 <__aeabi_dmul>
    db5c:	2300      	movs	r3, #0
    db5e:	2200      	movs	r2, #0
    db60:	f011 fff8 	bl	1fb54 <__adddf3>
    db64:	f012 fc84 	bl	20470 <__aeabi_d2uiz>
#endif
        /*  */
        CCP_STATS_INC(rx_start_error);
    db68:	6b63      	ldr	r3, [r4, #52]	; 0x34
        CCP_STATS_SET(os_lat_behind, uwb_dwt_usecs_to_usecs(behind>>16));
    db6a:	6560      	str	r0, [r4, #84]	; 0x54
        CCP_STATS_INC(rx_start_error);
    db6c:	3301      	adds	r3, #1
    db6e:	6363      	str	r3, [r4, #52]	; 0x34
    return (dpl_error_t)os_sem_release(&sem->sem);
    db70:	4630      	mov	r0, r6
    db72:	f7fc f85f 	bl	9c34 <os_sem_release>
        if (err==DPL_TIMEOUT) {
            CCP_STATS_INC(sem_timeout);
        }
        if(dpl_sem_get_count(&ccp->sem) == 0){
            err = dpl_sem_release(&ccp->sem);
            assert(err == DPL_OK);
    db76:	b318      	cbz	r0, dbc0 <ccp_listen.constprop.0.isra.0+0xe8>
    db78:	e7bf      	b.n	dafa <ccp_listen.constprop.0.isra.0+0x22>
        if (dx_time) {
    db7a:	ea55 0308 	orrs.w	r3, r5, r8
    db7e:	d012      	beq.n	dba6 <ccp_listen.constprop.0.isra.0+0xce>
            uint32_t margin = 0xffffffffU&(dx_time - uwb_read_systime_lo32(inst));
    db80:	4638      	mov	r0, r7
    db82:	f7ff fe39 	bl	d7f8 <uwb_read_systime_lo32>
    db86:	1a28      	subs	r0, r5, r0
            CCP_STATS_SET(os_lat_margin, uwb_dwt_usecs_to_usecs(margin>>16));
    db88:	0c00      	lsrs	r0, r0, #16
    db8a:	f012 f91f 	bl	1fdcc <__aeabi_ui2d>
    db8e:	a30e      	add	r3, pc, #56	; (adr r3, dbc8 <ccp_listen.constprop.0.isra.0+0xf0>)
    db90:	e9d3 2300 	ldrd	r2, r3, [r3]
    db94:	f012 f994 	bl	1fec0 <__aeabi_dmul>
    db98:	2200      	movs	r2, #0
    db9a:	2300      	movs	r3, #0
    db9c:	f011 ffda 	bl	1fb54 <__adddf3>
    dba0:	f012 fc66 	bl	20470 <__aeabi_d2uiz>
    dba4:	65a0      	str	r0, [r4, #88]	; 0x58
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    dba6:	2121      	movs	r1, #33	; 0x21
    dba8:	4630      	mov	r0, r6
    dbaa:	f7fc f875 	bl	9c98 <os_sem_pend>
        if (err==DPL_TIMEOUT) {
    dbae:	2806      	cmp	r0, #6
            CCP_STATS_INC(sem_timeout);
    dbb0:	bf02      	ittt	eq
    dbb2:	6e23      	ldreq	r3, [r4, #96]	; 0x60
    dbb4:	3301      	addeq	r3, #1
    dbb6:	6623      	streq	r3, [r4, #96]	; 0x60
        if(dpl_sem_get_count(&ccp->sem) == 0){
    dbb8:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    dbbc:	2b00      	cmp	r3, #0
    dbbe:	d0d7      	beq.n	db70 <ccp_listen.constprop.0.isra.0+0x98>
        }
    }
    return ccp->status;
}
    dbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dbc4:	f3af 8000 	nop.w
    dbc8:	90690691 	.word	0x90690691
    dbcc:	3ff06906 	.word	0x3ff06906

0000dbd0 <uwb_set_rx_timeout.isra.0>:
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    dbd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    dbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    dbd4:	4718      	bx	r3
	...

0000dbd8 <ccp_slave_timer_ev_cb>:
{
    dbd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    assert(ev != NULL);
    dbdc:	b928      	cbnz	r0, dbea <ccp_slave_timer_ev_cb+0x12>
    dbde:	2300      	movs	r3, #0
    dbe0:	461a      	mov	r2, r3
    dbe2:	4619      	mov	r1, r3
    dbe4:	4618      	mov	r0, r3
    dbe6:	f7fb f985 	bl	8ef4 <__assert_func>
    return ev->ev.ev_arg;
    dbea:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev));
    dbec:	2c00      	cmp	r4, #0
    dbee:	d0f6      	beq.n	dbde <ccp_slave_timer_ev_cb+0x6>
    struct uwb_dev * inst = ccp->dev_inst;
    dbf0:	6825      	ldr	r5, [r4, #0]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    dbf2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    dbf4:	2120      	movs	r1, #32
    dbf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    dbf8:	4628      	mov	r0, r5
    dbfa:	4798      	blx	r3
    if (!ccp->status.enabled) {
    dbfc:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    ccp->blink_frame_duration = uwb_phy_frame_duration(inst, sizeof(uwb_ccp_blink_frame_t));
    dc00:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
    if (!ccp->status.enabled) {
    dc04:	06d8      	lsls	r0, r3, #27
    dc06:	d577      	bpl.n	dcf8 <ccp_slave_timer_ev_cb+0x120>
    if (ccp->status.rx_timeout_error) {
    dc08:	0799      	lsls	r1, r3, #30
    dc0a:	d50a      	bpl.n	dc22 <ccp_slave_timer_ev_cb+0x4a>
        uwb_set_rx_timeout(inst, MYNEWT_VAL(UWB_CCP_LONG_RX_TO));
    dc0c:	4628      	mov	r0, r5
    dc0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dc12:	f7ff ffdd 	bl	dbd0 <uwb_set_rx_timeout.isra.0>
        ccp_listen(ccp, 0, UWB_BLOCKING);
    dc16:	2200      	movs	r2, #0
    dc18:	2300      	movs	r3, #0
    dc1a:	4620      	mov	r0, r4
    dc1c:	f7ff ff5c 	bl	dad8 <ccp_listen.constprop.0.isra.0>
    dc20:	e04f      	b.n	dcc2 <ccp_slave_timer_ev_cb+0xea>
    CCP_STATS_INC(slave_cnt);
    dc22:	69e3      	ldr	r3, [r4, #28]
    if (ccp->wcs) {
    dc24:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
    CCP_STATS_INC(slave_cnt);
    dc28:	3301      	adds	r3, #1
    dx_time = ccp->local_epoch;
    dc2a:	e9d4 7636 	ldrd	r7, r6, [r4, #216]	; 0xd8
    CCP_STATS_INC(slave_cnt);
    dc2e:	61e3      	str	r3, [r4, #28]
    if (ccp->wcs) {
    dc30:	f1b8 0f00 	cmp.w	r8, #0
    dc34:	d00f      	beq.n	dc56 <ccp_slave_timer_ev_cb+0x7e>
        dx_time += DPL_FLOAT64_F64_TO_U64(DPL_FLOAT64_MUL(DPL_FLOAT64_U64_TO_F64((uint64_t)ccp->period << 16),
    dc36:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    dc3a:	0408      	lsls	r0, r1, #16
    dc3c:	0c09      	lsrs	r1, r1, #16
    dc3e:	f012 f909 	bl	1fe54 <__aeabi_ul2d>
    dc42:	e9d8 2310 	ldrd	r2, r3, [r8, #64]	; 0x40
    dc46:	f012 f93b 	bl	1fec0 <__aeabi_dmul>
    dc4a:	f012 fe2f 	bl	208ac <__aeabi_d2ulz>
    dc4e:	19c2      	adds	r2, r0, r7
    dc50:	4617      	mov	r7, r2
    dc52:	eb46 0601 	adc.w	r6, r6, r1
    dx_time -= ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(inst) +
    dc56:	4628      	mov	r0, r5
    dc58:	f7ff fdd1 	bl	d7fe <uwb_phy_SHR_duration>
    dc5c:	f895 351b 	ldrb.w	r3, [r5, #1307]	; 0x51b
    dc60:	4418      	add	r0, r3
    dc62:	f012 f8c3 	bl	1fdec <__aeabi_i2d>
    dc66:	a336      	add	r3, pc, #216	; (adr r3, dd40 <ccp_slave_timer_ev_cb+0x168>)
    dc68:	e9d3 2300 	ldrd	r2, r3, [r3]
    dc6c:	f012 fa52 	bl	20114 <__aeabi_ddiv>
    dc70:	f012 fc1e 	bl	204b0 <__aeabi_d2f>
    dc74:	ee00 0a10 	vmov	s0, r0
    dc78:	f012 ffaa 	bl	20bd0 <ceilf>
    dc7c:	ee10 0a10 	vmov	r0, s0
    dc80:	f012 fdf4 	bl	2086c <__aeabi_f2ulz>
                                                       inst->config.rx.timeToRxStable)) << 16);
    dc84:	0409      	lsls	r1, r1, #16
    dc86:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
    dc8a:	0400      	lsls	r0, r0, #16
    dx_time -= ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(inst) +
    dc8c:	1a3a      	subs	r2, r7, r0
    dc8e:	eb66 0301 	sbc.w	r3, r6, r1
    timeout = ccp->blink_frame_duration + MYNEWT_VAL(XTALT_GUARD);
    dc92:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    timeout += (ccp->config.tx_holdoff_dly + ccp->blink_frame_duration) * MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    dc96:	f8b4 60cc 	ldrh.w	r6, [r4, #204]	; 0xcc
    dx_time -= ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(inst) +
    dc9a:	9201      	str	r2, [sp, #4]
    timeout = ccp->blink_frame_duration + MYNEWT_VAL(XTALT_GUARD);
    dc9c:	f501 7080 	add.w	r0, r1, #256	; 0x100
    timeout += (ccp->config.tx_holdoff_dly + ccp->blink_frame_duration) * MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    dca0:	4431      	add	r1, r6
    dca2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    uwb_set_rx_timeout(inst, timeout);
    dca6:	b289      	uxth	r1, r1
    dca8:	4628      	mov	r0, r5
    dx_time -= ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(inst) +
    dcaa:	9300      	str	r3, [sp, #0]
    uwb_set_rx_timeout(inst, timeout);
    dcac:	f7ff ff90 	bl	dbd0 <uwb_set_rx_timeout.isra.0>
    ccp_listen(ccp, dx_time, UWB_BLOCKING);
    dcb0:	e9dd 3200 	ldrd	r3, r2, [sp]
    dcb4:	4620      	mov	r0, r4
    dcb6:	f7ff ff0f 	bl	dad8 <ccp_listen.constprop.0.isra.0>
    if(ccp->status.start_rx_error){
    dcba:	f994 30c8 	ldrsb.w	r3, [r4, #200]	; 0xc8
    dcbe:	2b00      	cmp	r3, #0
    dcc0:	dba4      	blt.n	dc0c <ccp_slave_timer_ev_cb+0x34>
    if (!ccp->status.enabled) {
    dcc2:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    dcc6:	06da      	lsls	r2, r3, #27
    dcc8:	d516      	bpl.n	dcf8 <ccp_slave_timer_ev_cb+0x120>
    dpl_cputime_timer_stop(&ccp->timer);
    dcca:	f104 06f4 	add.w	r6, r4, #244	; 0xf4
    dcce:	4630      	mov	r0, r6
    dcd0:	f003 facc 	bl	1126c <dpl_cputime_timer_stop>
    if (ccp->status.rx_timeout_error &&
    dcd4:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    dcd8:	079b      	lsls	r3, r3, #30
    dcda:	d510      	bpl.n	dcfe <ccp_slave_timer_ev_cb+0x126>
    dcdc:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    dce0:	b16b      	cbz	r3, dcfe <ccp_slave_timer_ev_cb+0x126>
        rc = dpl_cputime_timer_relative(&ccp->timer, 0);
    dce2:	2100      	movs	r1, #0
    dce4:	4630      	mov	r0, r6
    dce6:	f003 fad3 	bl	11290 <dpl_cputime_timer_relative>
    if (rc == 0) ccp->status.timer_restarted = 1;
    dcea:	b928      	cbnz	r0, dcf8 <ccp_slave_timer_ev_cb+0x120>
    dcec:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    dcf0:	f043 0308 	orr.w	r3, r3, #8
    dcf4:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
}
    dcf8:	b002      	add	sp, #8
    dcfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ccp->status.rx_timeout_error = 0;
    dcfe:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
        timer_expiry = ccp->os_epoch + dpl_cputime_usecs_to_ticks(
    dd02:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
        ccp->status.rx_timeout_error = 0;
    dd06:	f36f 0341 	bfc	r3, #1, #1
    dd0a:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
        timer_expiry = ccp->os_epoch + dpl_cputime_usecs_to_ticks(
    dd0e:	f012 f85d 	bl	1fdcc <__aeabi_ui2d>
    dd12:	a30b      	add	r3, pc, #44	; (adr r3, dd40 <ccp_slave_timer_ev_cb+0x168>)
    dd14:	e9d3 2300 	ldrd	r2, r3, [r3]
    dd18:	f012 f8d2 	bl	1fec0 <__aeabi_dmul>
    dd1c:	f012 fba8 	bl	20470 <__aeabi_d2uiz>
    dd20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    dd24:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    dd28:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
    dd2c:	1a5b      	subs	r3, r3, r1
    dd2e:	f895 151b 	ldrb.w	r1, [r5, #1307]	; 0x51b
    dd32:	4418      	add	r0, r3
        rc = dpl_cputime_timer_start(&ccp->timer, timer_expiry);
    dd34:	1a41      	subs	r1, r0, r1
    dd36:	4630      	mov	r0, r6
    dd38:	f003 fa96 	bl	11268 <dpl_cputime_timer_start>
    dd3c:	e7d5      	b.n	dcea <ccp_slave_timer_ev_cb+0x112>
    dd3e:	bf00      	nop
    dd40:	90690691 	.word	0x90690691
    dd44:	3ff06906 	.word	0x3ff06906

0000dd48 <ccp_master_timer_ev_cb>:
{
    dd48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    assert(ev != NULL);
    dd4c:	b928      	cbnz	r0, dd5a <ccp_master_timer_ev_cb+0x12>
    dd4e:	2300      	movs	r3, #0
    dd50:	461a      	mov	r2, r3
    dd52:	4619      	mov	r1, r3
    dd54:	4618      	mov	r0, r3
    dd56:	f7fb f8cd 	bl	8ef4 <__assert_func>
    dd5a:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev));
    dd5c:	2c00      	cmp	r4, #0
    dd5e:	d0f6      	beq.n	dd4e <ccp_master_timer_ev_cb+0x6>
    if (!ccp->status.enabled) {
    dd60:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    dd64:	06dd      	lsls	r5, r3, #27
    dd66:	f140 810e 	bpl.w	df86 <ccp_master_timer_ev_cb+0x23e>
    ccp->status.timer_restarted = 0;
    dd6a:	f36f 03c3 	bfc	r3, #3, #1
    CCP_STATS_INC(master_cnt);
    dd6e:	69a2      	ldr	r2, [r4, #24]
    ccp->status.timer_restarted = 0;
    dd70:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    CCP_STATS_INC(send);
    dd74:	6a23      	ldr	r3, [r4, #32]
    struct uwb_dev * inst = ccp->dev_inst;
    dd76:	6825      	ldr	r5, [r4, #0]
    CCP_STATS_INC(master_cnt);
    dd78:	3201      	adds	r2, #1
    CCP_STATS_INC(send);
    dd7a:	3301      	adds	r3, #1
    CCP_STATS_INC(master_cnt);
    dd7c:	61a2      	str	r2, [r4, #24]
    CCP_STATS_INC(send);
    dd7e:	6223      	str	r3, [r4, #32]
    uwb_phy_forcetrxoff(inst);
    dd80:	4628      	mov	r0, r5
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    dd82:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
    dd86:	f7ff fd3e 	bl	d806 <uwb_phy_forcetrxoff>
    dd8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    dd8e:	4640      	mov	r0, r8
    dd90:	f7fb ff82 	bl	9c98 <os_sem_pend>
    assert(err == DPL_OK);
    dd94:	4681      	mov	r9, r0
    dd96:	2800      	cmp	r0, #0
    dd98:	d1d9      	bne.n	dd4e <ccp_master_timer_ev_cb+0x6>
    uwb_ccp_frame_t * previous_frame = ccp->frames[(uint16_t)(ccp->idx)%ccp->nframes];
    dd9a:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
    dd9e:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    dda2:	fbb3 f2f1 	udiv	r2, r3, r1
    dda6:	fb01 3212 	mls	r2, r1, r2, r3
    ddaa:	b292      	uxth	r2, r2
    ddac:	32e0      	adds	r2, #224	; 0xe0
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx+1)%ccp->nframes];
    ddae:	3301      	adds	r3, #1
    uwb_ccp_frame_t * previous_frame = ccp->frames[(uint16_t)(ccp->idx)%ccp->nframes];
    ddb0:	f854 a022 	ldr.w	sl, [r4, r2, lsl #2]
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx+1)%ccp->nframes];
    ddb4:	fbb3 f2f1 	udiv	r2, r3, r1
    ddb8:	fb01 3312 	mls	r3, r1, r2, r3
    ddbc:	33e0      	adds	r3, #224	; 0xe0
    ddbe:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
    frame->rpt_max = MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    ddc2:	2304      	movs	r3, #4
    frame->rpt_count = 0;
    ddc4:	7730      	strb	r0, [r6, #28]
    frame->rpt_max = MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    ddc6:	7773      	strb	r3, [r6, #29]
    frame->epoch_to_rm_us = uwb_phy_SHR_duration(inst);
    ddc8:	4628      	mov	r0, r5
    ddca:	f7ff fd18 	bl	d7fe <uwb_phy_SHR_duration>
                        + ((uint64_t)ccp->period << 16);
    ddce:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    frame->epoch_to_rm_us = uwb_phy_SHR_duration(inst);
    ddd2:	83f0      	strh	r0, [r6, #30]
    uint64_t timestamp = previous_frame->transmission_timestamp.timestamp
    ddd4:	f8da 7014 	ldr.w	r7, [sl, #20]
    ddd8:	f8da b018 	ldr.w	fp, [sl, #24]
                        + ((uint64_t)ccp->period << 16);
    dddc:	041a      	lsls	r2, r3, #16
    uint64_t timestamp = previous_frame->transmission_timestamp.timestamp
    ddde:	18bf      	adds	r7, r7, r2
    timestamp = timestamp & 0xFFFFFFFFFFFFFE00ULL; /* Mask off the last 9 bits */
    dde0:	f427 77ff 	bic.w	r7, r7, #510	; 0x1fe
    uint64_t timestamp = previous_frame->transmission_timestamp.timestamp
    dde4:	eb4b 4b13 	adc.w	fp, fp, r3, lsr #16
    timestamp = timestamp & 0xFFFFFFFFFFFFFE00ULL; /* Mask off the last 9 bits */
    dde8:	f027 0701 	bic.w	r7, r7, #1
    uwb_set_delay_start(inst, timestamp);
    ddec:	463a      	mov	r2, r7
    ddee:	465b      	mov	r3, fp
    ddf0:	4628      	mov	r0, r5
    ddf2:	f7ff fe6c 	bl	dace <uwb_set_delay_start.isra.0>
    timestamp += inst->tx_antenna_delay;
    ddf6:	f8b5 24ce 	ldrh.w	r2, [r5, #1230]	; 0x4ce
    ddfa:	19d7      	adds	r7, r2, r7
    ddfc:	f14b 0300 	adc.w	r3, fp, #0
    frame->transmission_timestamp.timestamp = timestamp;
    de00:	6177      	str	r7, [r6, #20]
    de02:	61b3      	str	r3, [r6, #24]
    timestamp += inst->tx_antenna_delay;
    de04:	9301      	str	r3, [sp, #4]
    frame->seq_num = ++ccp->seq_num;
    de06:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
    de0a:	3301      	adds	r3, #1
    de0c:	b2db      	uxtb	r3, r3
    de0e:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    de12:	7073      	strb	r3, [r6, #1]
    frame->euid = inst->euid;
    de14:	f8d5 34bc 	ldr.w	r3, [r5, #1212]	; 0x4bc
    de18:	f8d5 24b8 	ldr.w	r2, [r5, #1208]	; 0x4b8
    de1c:	f8c6 3006 	str.w	r3, [r6, #6]
    frame->short_address = inst->my_short_address;
    de20:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
    de24:	8173      	strh	r3, [r6, #10]
    frame->transmission_interval = ((uint64_t)ccp->period << 16);
    de26:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    frame->euid = inst->euid;
    de2a:	f8c6 2002 	str.w	r2, [r6, #2]
    frame->transmission_interval = ((uint64_t)ccp->period << 16);
    de2e:	0c1a      	lsrs	r2, r3, #16
    de30:	041b      	lsls	r3, r3, #16
    de32:	60f3      	str	r3, [r6, #12]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    de34:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    de36:	7432      	strb	r2, [r6, #16]
    de38:	f8d3 b044 	ldr.w	fp, [r3, #68]	; 0x44
    de3c:	464a      	mov	r2, r9
    de3e:	2320      	movs	r3, #32
    de40:	4631      	mov	r1, r6
    de42:	4628      	mov	r0, r5
    de44:	47d8      	blx	fp
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    de46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    de48:	464a      	mov	r2, r9
    de4a:	f8d3 b048 	ldr.w	fp, [r3, #72]	; 0x48
    de4e:	2120      	movs	r1, #32
    de50:	464b      	mov	r3, r9
    de52:	4628      	mov	r0, r5
    de54:	47d8      	blx	fp
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    de56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    de58:	4649      	mov	r1, r9
    de5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    de5c:	4628      	mov	r0, r5
    de5e:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
    de60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    de62:	4628      	mov	r0, r5
    de64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    de66:	4798      	blx	r3
    ccp->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    de68:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    de6c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    de70:	f360 1386 	bfi	r3, r0, #6, #1
    if (ccp->status.start_tx_error) {
    de74:	0658      	lsls	r0, r3, #25
    ccp->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    de76:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if (ccp->status.start_tx_error) {
    de7a:	f140 8087 	bpl.w	df8c <ccp_master_timer_ev_cb+0x244>
    return (dev->uw_funcs->uf_read_systime(dev));
    de7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    de80:	4628      	mov	r0, r5
    de82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    de84:	4798      	blx	r3
        CCP_STATS_INC(tx_start_error);
    de86:	6c63      	ldr	r3, [r4, #68]	; 0x44
                        + ((uint64_t)ccp->period << 16));
    de88:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
        CCP_STATS_INC(tx_start_error);
    de8c:	3301      	adds	r3, #1
    de8e:	6463      	str	r3, [r4, #68]	; 0x44
        previous_frame->transmission_timestamp.timestamp = (frame->transmission_timestamp.timestamp
    de90:	6973      	ldr	r3, [r6, #20]
    de92:	69b6      	ldr	r6, [r6, #24]
                        + ((uint64_t)ccp->period << 16));
    de94:	0415      	lsls	r5, r2, #16
    de96:	195b      	adds	r3, r3, r5
        previous_frame->transmission_timestamp.timestamp = (frame->transmission_timestamp.timestamp
    de98:	f8ca 3014 	str.w	r3, [sl, #20]
        ccp->idx++;
    de9c:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
                        + ((uint64_t)ccp->period << 16));
    dea0:	eb46 4612 	adc.w	r6, r6, r2, lsr #16
        ccp->idx++;
    dea4:	3301      	adds	r3, #1
        previous_frame->transmission_timestamp.timestamp = (frame->transmission_timestamp.timestamp
    dea6:	f8ca 6018 	str.w	r6, [sl, #24]
        ccp->idx++;
    deaa:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
        uint64_t late_us = ((systime - timestamp)&UWB_DTU_40BMASK) >> 16;
    deae:	9b01      	ldr	r3, [sp, #4]
    deb0:	1bc7      	subs	r7, r0, r7
    deb2:	eb61 0103 	sbc.w	r1, r1, r3
    deb6:	0c3f      	lsrs	r7, r7, #16
    deb8:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
    debc:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
        ccp->os_epoch += dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period - late_us));
    dec0:	1bd0      	subs	r0, r2, r7
    dec2:	eb61 0101 	sbc.w	r1, r1, r1
                        + ((uint64_t)ccp->period << 16));
    dec6:	ea4f 4912 	mov.w	r9, r2, lsr #16
        ccp->os_epoch += dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period - late_us));
    deca:	f011 ffc3 	bl	1fe54 <__aeabi_ul2d>
    dece:	a33e      	add	r3, pc, #248	; (adr r3, dfc8 <ccp_master_timer_ev_cb+0x280>)
    ded0:	e9d3 2300 	ldrd	r2, r3, [r3]
    ded4:	f011 fff4 	bl	1fec0 <__aeabi_dmul>
    ded8:	4606      	mov	r6, r0
    deda:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    dede:	460f      	mov	r7, r1
    dee0:	f011 ff74 	bl	1fdcc <__aeabi_ui2d>
    dee4:	4602      	mov	r2, r0
    dee6:	460b      	mov	r3, r1
    dee8:	4630      	mov	r0, r6
    deea:	4639      	mov	r1, r7
    deec:	f011 fe32 	bl	1fb54 <__adddf3>
    def0:	f012 fabe 	bl	20470 <__aeabi_d2uiz>
        ccp->master_epoch.timestamp += ((uint64_t)ccp->period)<<16;
    def4:	e9d4 3234 	ldrd	r3, r2, [r4, #208]	; 0xd0
    def8:	195b      	adds	r3, r3, r5
    defa:	eb49 0202 	adc.w	r2, r9, r2
    defe:	e9c4 3234 	strd	r3, r2, [r4, #208]	; 0xd0
        ccp->local_epoch += ((uint64_t)ccp->period)<<16;
    df02:	e9d4 3236 	ldrd	r3, r2, [r4, #216]	; 0xd8
    df06:	195b      	adds	r3, r3, r5
    df08:	eb49 0202 	adc.w	r2, r9, r2
    df0c:	e9c4 3236 	strd	r3, r2, [r4, #216]	; 0xd8
        ccp->os_epoch -= dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY));
    df10:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
    df14:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    return (dpl_error_t)os_sem_release(&sem->sem);
    df18:	4640      	mov	r0, r8
    df1a:	f7fb fe8b 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
    df1e:	2800      	cmp	r0, #0
    df20:	f47f af15 	bne.w	dd4e <ccp_master_timer_ev_cb+0x6>
    return ccp->status;
    df24:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
        if (!ccp->status.enabled) {
    df28:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    if (ccp_send(ccp, UWB_BLOCKING).start_tx_error) {
    df2c:	0651      	lsls	r1, r2, #25
    df2e:	d501      	bpl.n	df34 <ccp_master_timer_ev_cb+0x1ec>
        if (!ccp->status.enabled) {
    df30:	06da      	lsls	r2, r3, #27
    df32:	d528      	bpl.n	df86 <ccp_master_timer_ev_cb+0x23e>
    if (!ccp->status.timer_restarted && ccp->status.enabled) {
    df34:	f003 0318 	and.w	r3, r3, #24
    df38:	2b10      	cmp	r3, #16
    df3a:	d124      	bne.n	df86 <ccp_master_timer_ev_cb+0x23e>
            - dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY))
    df3c:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
            + dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period))
    df40:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
    df44:	f011 ff42 	bl	1fdcc <__aeabi_ui2d>
    df48:	4606      	mov	r6, r0
    df4a:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    df4e:	460f      	mov	r7, r1
    df50:	f011 ff3c 	bl	1fdcc <__aeabi_ui2d>
    df54:	a31c      	add	r3, pc, #112	; (adr r3, dfc8 <ccp_master_timer_ev_cb+0x280>)
    df56:	e9d3 2300 	ldrd	r2, r3, [r3]
    df5a:	f011 ffb1 	bl	1fec0 <__aeabi_dmul>
    df5e:	4602      	mov	r2, r0
    df60:	460b      	mov	r3, r1
    df62:	4630      	mov	r0, r6
    df64:	4639      	mov	r1, r7
    df66:	f011 fdf5 	bl	1fb54 <__adddf3>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    df6a:	f012 fa81 	bl	20470 <__aeabi_d2uiz>
    df6e:	4601      	mov	r1, r0
    df70:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    df74:	f003 f978 	bl	11268 <dpl_cputime_timer_start>
        if (rc == 0) ccp->status.timer_restarted = 1;
    df78:	b928      	cbnz	r0, df86 <ccp_master_timer_ev_cb+0x23e>
    df7a:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    df7e:	f043 0308 	orr.w	r3, r3, #8
    df82:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
}
    df86:	b003      	add	sp, #12
    df88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t margin = 0xffffffffU&(frame->transmission_timestamp.lo - uwb_read_systime_lo32(inst));
    df8c:	4628      	mov	r0, r5
    df8e:	6976      	ldr	r6, [r6, #20]
    df90:	f7ff fc32 	bl	d7f8 <uwb_read_systime_lo32>
    df94:	1a30      	subs	r0, r6, r0
        CCP_STATS_SET(os_lat_margin, uwb_dwt_usecs_to_usecs(margin>>16));
    df96:	0c00      	lsrs	r0, r0, #16
    df98:	f011 ff18 	bl	1fdcc <__aeabi_ui2d>
    df9c:	a30a      	add	r3, pc, #40	; (adr r3, dfc8 <ccp_master_timer_ev_cb+0x280>)
    df9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    dfa2:	f011 ff8d 	bl	1fec0 <__aeabi_dmul>
    dfa6:	2200      	movs	r2, #0
    dfa8:	2300      	movs	r3, #0
    dfaa:	f011 fdd3 	bl	1fb54 <__adddf3>
    dfae:	f012 fa5f 	bl	20470 <__aeabi_d2uiz>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    dfb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    dfb6:	65a0      	str	r0, [r4, #88]	; 0x58
    dfb8:	4640      	mov	r0, r8
    dfba:	f7fb fe6d 	bl	9c98 <os_sem_pend>
        assert(err == DPL_OK);
    dfbe:	2800      	cmp	r0, #0
    dfc0:	d0aa      	beq.n	df18 <ccp_master_timer_ev_cb+0x1d0>
    dfc2:	e6c4      	b.n	dd4e <ccp_master_timer_ev_cb+0x6>
    dfc4:	f3af 8000 	nop.w
    dfc8:	90690691 	.word	0x90690691
    dfcc:	3ff06906 	.word	0x3ff06906

0000dfd0 <uwb_ccp_set_tof_comp_cb>:
    inst->tof_comp_cb = tof_comp_cb;
    dfd0:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
}
    dfd4:	4770      	bx	lr
	...

0000dfd8 <uwb_ccp_init>:
{
    dfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dfdc:	460f      	mov	r7, r1
    dfde:	b091      	sub	sp, #68	; 0x44
    assert(dev);
    dfe0:	4680      	mov	r8, r0
    dfe2:	b928      	cbnz	r0, dff0 <uwb_ccp_init+0x18>
    dfe4:	2300      	movs	r3, #0
    dfe6:	461a      	mov	r2, r3
    dfe8:	4619      	mov	r1, r3
    dfea:	4618      	mov	r0, r3
    dfec:	f7fa ff82 	bl	8ef4 <__assert_func>
    assert(nframes > 1);
    dff0:	2901      	cmp	r1, #1
    dff2:	d9f7      	bls.n	dfe4 <uwb_ccp_init+0xc>
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
    dff4:	2101      	movs	r1, #1
    dff6:	f7fa fd9b 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    if (ccp == NULL) {
    dffa:	4604      	mov	r4, r0
    dffc:	2800      	cmp	r0, #0
    dffe:	f040 80ab 	bne.w	e158 <uwb_ccp_init+0x180>
        ccp = (struct uwb_ccp_instance *) calloc(1, sizeof(struct uwb_ccp_instance) + nframes * sizeof(uwb_ccp_frame_t *));
    e002:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
    e006:	0089      	lsls	r1, r1, #2
    e008:	2001      	movs	r0, #1
    e00a:	f001 f9c7 	bl	f39c <calloc>
        assert(ccp);
    e00e:	4604      	mov	r4, r0
    e010:	2800      	cmp	r0, #0
    e012:	d0e7      	beq.n	dfe4 <uwb_ccp_init+0xc>
        ccp->status.selfmalloc = 1;
    e014:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
        ccp->nframes = nframes;
    e018:	f8a0 70ec 	strh.w	r7, [r0, #236]	; 0xec
        ccp->status.selfmalloc = 1;
    e01c:	f043 0301 	orr.w	r3, r3, #1
    e020:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
        uwb_ccp_frame_t ccp_default = {
    e024:	2230      	movs	r2, #48	; 0x30
    e026:	2100      	movs	r1, #0
    e028:	a804      	add	r0, sp, #16
    e02a:	f001 fae8 	bl	f5fe <memset>
        for (i = 0; i < ccp->nframes; i++){
    e02e:	f504 7a60 	add.w	sl, r4, #896	; 0x380
    e032:	f04f 0900 	mov.w	r9, #0
            memcpy(ccp->frames[i], &ccp_default, sizeof(uwb_ccp_frame_t));
    e036:	f04f 0bc5 	mov.w	fp, #197	; 0xc5
            ccp->frames[i] = (uwb_ccp_frame_t *) calloc(1, sizeof(uwb_ccp_frame_t));
    e03a:	2130      	movs	r1, #48	; 0x30
    e03c:	2001      	movs	r0, #1
    e03e:	f001 f9ad 	bl	f39c <calloc>
    e042:	f84a 0b04 	str.w	r0, [sl], #4
    e046:	4684      	mov	ip, r0
            assert(ccp->frames[i]);
    e048:	2800      	cmp	r0, #0
    e04a:	d0cb      	beq.n	dfe4 <uwb_ccp_init+0xc>
            memcpy(ccp->frames[i], &ccp_default, sizeof(uwb_ccp_frame_t));
    e04c:	23ff      	movs	r3, #255	; 0xff
    e04e:	f88d 3011 	strb.w	r3, [sp, #17]
    e052:	2304      	movs	r3, #4
    e054:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    e058:	f88d b010 	strb.w	fp, [sp, #16]
    e05c:	ae04      	add	r6, sp, #16
    e05e:	4605      	mov	r5, r0
    e060:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    e062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e064:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    e066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e068:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
        for (i = 0; i < ccp->nframes; i++){
    e06c:	f109 0901 	add.w	r9, r9, #1
            memcpy(ccp->frames[i], &ccp_default, sizeof(uwb_ccp_frame_t));
    e070:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        for (i = 0; i < ccp->nframes; i++){
    e074:	454f      	cmp	r7, r9
            ccp->frames[i]->seq_num = 0;
    e076:	f04f 0300 	mov.w	r3, #0
    e07a:	f88c 3001 	strb.w	r3, [ip, #1]
        for (i = 0; i < ccp->nframes; i++){
    e07e:	dcdc      	bgt.n	e03a <uwb_ccp_init+0x62>
        ccp->task_prio = dev->task_prio - 0x4;
    e080:	f898 302c 	ldrb.w	r3, [r8, #44]	; 0x2c
        ccp->dev_inst = dev;
    e084:	f8c4 8000 	str.w	r8, [r4]
        ccp->task_prio = dev->task_prio - 0x4;
    e088:	3b04      	subs	r3, #4
    e08a:	f884 317c 	strb.w	r3, [r4, #380]	; 0x17c
    ccp->period = MYNEWT_VAL(UWB_CCP_PERIOD);
    e08e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    e092:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    ccp->config = (struct uwb_ccp_config){
    e096:	2300      	movs	r3, #0
    e098:	f8c4 30ca 	str.w	r3, [r4, #202]	; 0xca
    e09c:	f44f 7360 	mov.w	r3, #896	; 0x380
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    e0a0:	2101      	movs	r1, #1
    e0a2:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    e0a6:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    e0aa:	f7fb fdbb 	bl	9c24 <os_sem_init>
    assert(err == DPL_OK);
    e0ae:	4601      	mov	r1, r0
    e0b0:	2800      	cmp	r0, #0
    e0b2:	d197      	bne.n	dfe4 <uwb_ccp_init+0xc>
    ccp->cbs = (struct uwb_mac_interface){
    e0b4:	f104 036c 	add.w	r3, r4, #108	; 0x6c
    e0b8:	223c      	movs	r2, #60	; 0x3c
    e0ba:	4618      	mov	r0, r3
    e0bc:	f001 fa9f 	bl	f5fe <memset>
    e0c0:	2201      	movs	r2, #1
    e0c2:	f8a4 206e 	strh.w	r2, [r4, #110]	; 0x6e
    e0c6:	4a27      	ldr	r2, [pc, #156]	; (e164 <uwb_ccp_init+0x18c>)
    e0c8:	67a2      	str	r2, [r4, #120]	; 0x78
    e0ca:	4a27      	ldr	r2, [pc, #156]	; (e168 <uwb_ccp_init+0x190>)
    e0cc:	67e2      	str	r2, [r4, #124]	; 0x7c
    e0ce:	4a27      	ldr	r2, [pc, #156]	; (e16c <uwb_ccp_init+0x194>)
    e0d0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    e0d4:	4a26      	ldr	r2, [pc, #152]	; (e170 <uwb_ccp_init+0x198>)
    e0d6:	6724      	str	r4, [r4, #112]	; 0x70
    e0d8:	e9c4 2222 	strd	r2, r2, [r4, #136]	; 0x88
    e0dc:	4a25      	ldr	r2, [pc, #148]	; (e174 <uwb_ccp_init+0x19c>)
    e0de:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    uwb_mac_append_interface(dev, &ccp->cbs);
    e0e2:	4601      	mov	r1, r0
    if (!dpl_eventq_inited(&inst->eventq))
    e0e4:	f504 7586 	add.w	r5, r4, #268	; 0x10c
    uwb_mac_append_interface(dev, &ccp->cbs);
    e0e8:	4640      	mov	r0, r8
    e0ea:	f7fa fcd7 	bl	8a9c <uwb_mac_append_interface>
    return os_eventq_inited((struct os_eventq *) evq);
    e0ee:	4628      	mov	r0, r5
    e0f0:	f7fb f9e8 	bl	94c4 <os_eventq_inited>
    if (!dpl_eventq_inited(&inst->eventq))
    e0f4:	b9a0      	cbnz	r0, e120 <uwb_ccp_init+0x148>
    os_eventq_init((struct os_eventq *) evq);
    e0f6:	4628      	mov	r0, r5
    e0f8:	f7fb f9da 	bl	94b0 <os_eventq_init>
    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    e0fc:	2380      	movs	r3, #128	; 0x80
    e0fe:	9303      	str	r3, [sp, #12]
                      inst->task_stack,
    e100:	f504 73c0 	add.w	r3, r4, #384	; 0x180
    e104:	9302      	str	r3, [sp, #8]
    e106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e10a:	9301      	str	r3, [sp, #4]
    e10c:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
    e110:	9300      	str	r3, [sp, #0]
    e112:	4a19      	ldr	r2, [pc, #100]	; (e178 <uwb_ccp_init+0x1a0>)
    e114:	4919      	ldr	r1, [pc, #100]	; (e17c <uwb_ccp_init+0x1a4>)
    e116:	4623      	mov	r3, r4
    e118:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    e11c:	f7fb fe12 	bl	9d44 <os_task_init>
    ccp->status.initialized = 1;
    e120:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    int rc = stats_init(
    e124:	1d25      	adds	r5, r4, #4
    ccp->status.initialized = 1;
    e126:	f043 0302 	orr.w	r3, r3, #2
    int rc = stats_init(
    e12a:	2214      	movs	r2, #20
    ccp->status.initialized = 1;
    e12c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    int rc = stats_init(
    e130:	2104      	movs	r1, #4
    e132:	4b13      	ldr	r3, [pc, #76]	; (e180 <uwb_ccp_init+0x1a8>)
    e134:	9200      	str	r2, [sp, #0]
    e136:	4628      	mov	r0, r5
    e138:	f006 f904 	bl	14344 <stats_init>
    assert(rc == 0);
    e13c:	2800      	cmp	r0, #0
    e13e:	f47f af51 	bne.w	dfe4 <uwb_ccp_init+0xc>
    rc = stats_register("ccp", STATS_HDR(ccp->stat));
    e142:	480e      	ldr	r0, [pc, #56]	; (e17c <uwb_ccp_init+0x1a4>)
    e144:	4629      	mov	r1, r5
    e146:	f006 f97d 	bl	14444 <stats_register>
    assert(rc == 0);
    e14a:	2800      	cmp	r0, #0
    e14c:	f47f af4a 	bne.w	dfe4 <uwb_ccp_init+0xc>
}
    e150:	4620      	mov	r0, r4
    e152:	b011      	add	sp, #68	; 0x44
    e154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert(ccp->nframes == nframes);
    e158:	f8b0 30ec 	ldrh.w	r3, [r0, #236]	; 0xec
    e15c:	42bb      	cmp	r3, r7
    e15e:	d096      	beq.n	e08e <uwb_ccp_init+0xb6>
    e160:	e740      	b.n	dfe4 <uwb_ccp_init+0xc>
    e162:	bf00      	nop
    e164:	0000d861 	.word	0x0000d861
    e168:	0000e389 	.word	0x0000e389
    e16c:	0000da77 	.word	0x0000da77
    e170:	0000d80f 	.word	0x0000d80f
    e174:	0000da51 	.word	0x0000da51
    e178:	0000da35 	.word	0x0000da35
    e17c:	0002224a 	.word	0x0002224a
    e180:	00022330 	.word	0x00022330

0000e184 <uwb_ccp_free>:
{
    e184:	b570      	push	{r4, r5, r6, lr}
    assert(inst);
    e186:	4604      	mov	r4, r0
    e188:	b920      	cbnz	r0, e194 <uwb_ccp_free+0x10>
    e18a:	4603      	mov	r3, r0
    e18c:	4602      	mov	r2, r0
    e18e:	4601      	mov	r1, r0
    e190:	f7fa feb0 	bl	8ef4 <__assert_func>
    inst->status.enabled = 0;
    e194:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    uwb_mac_remove_interface(inst->dev_inst, inst->cbs.id);
    e198:	4625      	mov	r5, r4
    inst->status.enabled = 0;
    e19a:	f36f 1304 	bfc	r3, #4, #1
    e19e:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    return (dpl_error_t)os_sem_release(&sem->sem);
    e1a2:	30b0      	adds	r0, #176	; 0xb0
    e1a4:	f7fb fd46 	bl	9c34 <os_sem_release>
    uwb_mac_remove_interface(inst->dev_inst, inst->cbs.id);
    e1a8:	f855 0bf4 	ldr.w	r0, [r5], #244
    e1ac:	f8b4 106e 	ldrh.w	r1, [r4, #110]	; 0x6e
    e1b0:	f7fa fc91 	bl	8ad6 <uwb_mac_remove_interface>
    dpl_cputime_timer_stop(&inst->timer);
    e1b4:	4628      	mov	r0, r5
    e1b6:	f003 f859 	bl	1126c <dpl_cputime_timer_stop>
    if (inst->status.selfmalloc) {
    e1ba:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    e1be:	f013 0201 	ands.w	r2, r3, #1
    e1c2:	d011      	beq.n	e1e8 <uwb_ccp_free+0x64>
    e1c4:	f504 7660 	add.w	r6, r4, #896	; 0x380
        for (i = 0; i < inst->nframes; i++) {
    e1c8:	2500      	movs	r5, #0
    e1ca:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    e1ce:	42ab      	cmp	r3, r5
    e1d0:	dc04      	bgt.n	e1dc <uwb_ccp_free+0x58>
        free(inst);
    e1d2:	4620      	mov	r0, r4
}
    e1d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        free(inst);
    e1d8:	f001 b9ca 	b.w	f570 <free>
            free(inst->frames[i]);
    e1dc:	f856 0b04 	ldr.w	r0, [r6], #4
    e1e0:	f001 f9c6 	bl	f570 <free>
        for (i = 0; i < inst->nframes; i++) {
    e1e4:	3501      	adds	r5, #1
    e1e6:	e7f0      	b.n	e1ca <uwb_ccp_free+0x46>
        inst->status.initialized = 0;
    e1e8:	f362 0341 	bfi	r3, r2, #1, #1
    e1ec:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
}
    e1f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0000e1f4 <uwb_ccp_start>:
 *
 * @return void
 */
void
uwb_ccp_start(struct uwb_ccp_instance *ccp, uwb_ccp_role_t role)
{
    e1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    struct uwb_dev * inst = ccp->dev_inst;
    e1f8:	f8d0 8000 	ldr.w	r8, [r0]
{
    e1fc:	4604      	mov	r4, r0
    uint16_t epoch_to_rm = uwb_phy_SHR_duration(inst);
    e1fe:	4640      	mov	r0, r8
{
    e200:	460d      	mov	r5, r1
    uint16_t epoch_to_rm = uwb_phy_SHR_duration(inst);
    e202:	f7ff fafc 	bl	d7fe <uwb_phy_SHR_duration>

    // Initialise frame timestamp to current time
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_start\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    assert(ccp);
    ccp->idx = 0x0;
    e206:	2300      	movs	r3, #0
    ccp->status.valid = false;
    ccp->master_euid = 0x0;
    e208:	2200      	movs	r2, #0
    ccp->idx = 0x0;
    e20a:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    ccp->master_euid = 0x0;
    e20e:	2300      	movs	r3, #0
    e210:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
    ccp->status.valid = false;
    e214:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx)%ccp->nframes];
    e218:	f8d4 7380 	ldr.w	r7, [r4, #896]	; 0x380
    ccp->status.valid = false;
    e21c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    e220:	f023 0304 	bic.w	r3, r3, #4
    e224:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e228:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    ccp->config.role = role;
    e22c:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    e230:	f365 0344 	bfi	r3, r5, #1, #4
    e234:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
    uint16_t epoch_to_rm = uwb_phy_SHR_duration(inst);
    e238:	4606      	mov	r6, r0
    ccp->status.enabled = 1;

    /* Setup CCP to send/listen for the first packet ASAP */
    ccp->os_epoch = dpl_cputime_get32() - epoch_to_rm;
    e23a:	f003 f819 	bl	11270 <dpl_cputime_get32>
    e23e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    e242:	1b80      	subs	r0, r0, r6
    e244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e246:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    e24a:	4640      	mov	r0, r8
    e24c:	4798      	blx	r3
    uint64_t ts = (uwb_read_systime(inst) - (((uint64_t)ccp->period)<<16))&UWB_DTU_40BMASK;
    e24e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    e252:	041a      	lsls	r2, r3, #16
    e254:	1a80      	subs	r0, r0, r2
    e256:	eb61 4313 	sbc.w	r3, r1, r3, lsr #16
    ts += ((uint64_t)ccp->config.tx_holdoff_dly + 2 * MYNEWT_VAL(OS_LATENCY))<<16;
    e25a:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    e25e:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
    e262:	040a      	lsls	r2, r1, #16
    e264:	1810      	adds	r0, r2, r0

    if (ccp->config.role == CCP_ROLE_MASTER){
    e266:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
    uint64_t ts = (uwb_read_systime(inst) - (((uint64_t)ccp->period)<<16))&UWB_DTU_40BMASK;
    e26a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    ts += ((uint64_t)ccp->config.tx_holdoff_dly + 2 * MYNEWT_VAL(OS_LATENCY))<<16;
    e26e:	eb43 4311 	adc.w	r3, r3, r1, lsr #16
    if (ccp->config.role == CCP_ROLE_MASTER){
    e272:	f012 021e 	ands.w	r2, r2, #30
    e276:	d135      	bne.n	e2e4 <uwb_ccp_start+0xf0>
        ccp->local_epoch = frame->transmission_timestamp.lo = ts;
    e278:	763b      	strb	r3, [r7, #24]
    e27a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    e27e:	6178      	str	r0, [r7, #20]
    e280:	e9c4 0336 	strd	r0, r3, [r4, #216]	; 0xd8
        frame->transmission_timestamp.hi = 0;
    e284:	7efb      	ldrb	r3, [r7, #27]
    e286:	767a      	strb	r2, [r7, #25]
    e288:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    e28c:	76ba      	strb	r2, [r7, #26]
    e28e:	76fb      	strb	r3, [r7, #27]
    } else {
        ccp->local_epoch = frame->reception_timestamp = ts;
    }
    ccp->local_epoch -= epoch_to_rm;
    e290:	e9d4 0336 	ldrd	r0, r3, [r4, #216]	; 0xd8
    e294:	1b80      	subs	r0, r0, r6
    e296:	f163 0300 	sbc.w	r3, r3, #0
    ccp->local_epoch &= UWB_DTU_40BMASK;
    e29a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    e29e:	e9c4 0336 	strd	r0, r3, [r4, #216]	; 0xd8
    ccp->status.timer_enabled = true;
    e2a2:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    dpl_cputime_timer_init(&ccp->timer, ccp_timer_irq, (void *) ccp);
    e2a6:	4914      	ldr	r1, [pc, #80]	; (e2f8 <uwb_ccp_start+0x104>)
    ccp->status.timer_enabled = true;
    e2a8:	f043 0304 	orr.w	r3, r3, #4
    dpl_cputime_timer_init(&ccp->timer, ccp_timer_irq, (void *) ccp);
    e2ac:	f104 06f4 	add.w	r6, r4, #244	; 0xf4
    ccp->status.timer_enabled = true;
    e2b0:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    dpl_cputime_timer_init(&ccp->timer, ccp_timer_irq, (void *) ccp);
    e2b4:	4622      	mov	r2, r4
    e2b6:	4630      	mov	r0, r6
    e2b8:	f002 ffc4 	bl	11244 <dpl_cputime_timer_init>
    if (dpl_event_get_arg(&ccp->timer_event) != (void *) ccp) {
    e2bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e2c0:	429c      	cmp	r4, r3
    e2c2:	d009      	beq.n	e2d8 <uwb_ccp_start+0xe4>
            dpl_event_init(&ccp->timer_event, ccp_master_timer_ev_cb, (void *) ccp);
    e2c4:	f504 708e 	add.w	r0, r4, #284	; 0x11c
    memset(ev, 0, sizeof(*ev));
    e2c8:	2210      	movs	r2, #16
        if (role == CCP_ROLE_MASTER){
    e2ca:	b985      	cbnz	r5, e2ee <uwb_ccp_start+0xfa>
    e2cc:	4629      	mov	r1, r5
    e2ce:	f001 f996 	bl	f5fe <memset>
    ev->ev.ev_cb = (os_event_fn *)fn;
    e2d2:	4b0a      	ldr	r3, [pc, #40]	; (e2fc <uwb_ccp_start+0x108>)
    ev->ev.ev_arg = arg;
    e2d4:	e9c4 3448 	strd	r3, r4, [r4, #288]	; 0x120
    dpl_cputime_timer_relative(&ccp->timer, 0);
    e2d8:	4630      	mov	r0, r6
    e2da:	2100      	movs	r1, #0

    ccp_timer_init(ccp, role);
}
    e2dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dpl_cputime_timer_relative(&ccp->timer, 0);
    e2e0:	f002 bfd6 	b.w	11290 <dpl_cputime_timer_relative>
        ccp->local_epoch = frame->reception_timestamp = ts;
    e2e4:	6238      	str	r0, [r7, #32]
    e2e6:	627b      	str	r3, [r7, #36]	; 0x24
    e2e8:	e9c4 0336 	strd	r0, r3, [r4, #216]	; 0xd8
    e2ec:	e7d0      	b.n	e290 <uwb_ccp_start+0x9c>
    memset(ev, 0, sizeof(*ev));
    e2ee:	2100      	movs	r1, #0
    e2f0:	f001 f985 	bl	f5fe <memset>
    ev->ev.ev_cb = (os_event_fn *)fn;
    e2f4:	4b02      	ldr	r3, [pc, #8]	; (e300 <uwb_ccp_start+0x10c>)
    e2f6:	e7ed      	b.n	e2d4 <uwb_ccp_start+0xe0>
    e2f8:	0000dab7 	.word	0x0000dab7
    e2fc:	0000dd49 	.word	0x0000dd49
    e300:	0000dbd9 	.word	0x0000dbd9

0000e304 <uwb_ccp_stop>:
 * @param inst   Pointer to struct uwb_ccp_instance.
 * @return void
 */
void
uwb_ccp_stop(struct uwb_ccp_instance *ccp)
{
    e304:	b510      	push	{r4, lr}
    assert(ccp);
    e306:	4604      	mov	r4, r0
    e308:	b928      	cbnz	r0, e316 <uwb_ccp_stop+0x12>
    e30a:	2300      	movs	r3, #0
    e30c:	461a      	mov	r2, r3
    e30e:	4619      	mov	r1, r3
    e310:	4618      	mov	r0, r3
    e312:	f7fa fdef 	bl	8ef4 <__assert_func>
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_stop\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    ccp->status.enabled = 0;
    e316:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    e31a:	f36f 1304 	bfc	r3, #4, #1
    e31e:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    dpl_cputime_timer_stop(&ccp->timer);
    e322:	30f4      	adds	r0, #244	; 0xf4
    e324:	f002 ffa2 	bl	1126c <dpl_cputime_timer_stop>
    if(dpl_sem_get_count(&ccp->sem) == 0){
    e328:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    e32c:	b95b      	cbnz	r3, e346 <uwb_ccp_stop+0x42>
        uwb_phy_forcetrxoff(ccp->dev_inst);
    e32e:	6820      	ldr	r0, [r4, #0]
    e330:	f7ff fa69 	bl	d806 <uwb_phy_forcetrxoff>
        if(dpl_sem_get_count(&ccp->sem) == 0){
    e334:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    e338:	b92b      	cbnz	r3, e346 <uwb_ccp_stop+0x42>
    return (dpl_error_t)os_sem_release(&sem->sem);
    e33a:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    e33e:	f7fb fc79 	bl	9c34 <os_sem_release>
            dpl_error_t err = dpl_sem_release(&ccp->sem);
            assert(err == DPL_OK);
    e342:	2800      	cmp	r0, #0
    e344:	d1e1      	bne.n	e30a <uwb_ccp_stop+0x6>
        }
    }
}
    e346:	bd10      	pop	{r4, pc}

0000e348 <uwb_ccp_skew_compensation_ui64>:
EXPORT_SYMBOL(uwb_ccp_stop);

uint64_t uwb_ccp_skew_compensation_ui64(struct uwb_ccp_instance *ccp, uint64_t value)
{
    e348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e34a:	461c      	mov	r4, r3
#if MYNEWT_VAL(UWB_WCS_ENABLED)
    struct uwb_wcs_instance * wcs = ccp->wcs;
    e34c:	6e83      	ldr	r3, [r0, #104]	; 0x68
{
    e34e:	4615      	mov	r5, r2
    if (!wcs) return value;
    e350:	b1ab      	cbz	r3, e37e <uwb_ccp_skew_compensation_ui64+0x36>
    // value *= (1.0l - fractional_skew);
    value = DPL_FLOAT64_F64_TO_U64(DPL_FLOAT64_MUL( DPL_FLOAT64_U64_TO_F64(value), DPL_FLOAT64_SUB( DPL_FLOAT64_INIT(1.0l),wcs->fractional_skew)));
    e352:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    e356:	490b      	ldr	r1, [pc, #44]	; (e384 <uwb_ccp_skew_compensation_ui64+0x3c>)
    e358:	2000      	movs	r0, #0
    e35a:	f011 fbf9 	bl	1fb50 <__aeabi_dsub>
    e35e:	4606      	mov	r6, r0
    e360:	460f      	mov	r7, r1
    e362:	4628      	mov	r0, r5
    e364:	4621      	mov	r1, r4
    e366:	f011 fd75 	bl	1fe54 <__aeabi_ul2d>
    e36a:	4602      	mov	r2, r0
    e36c:	460b      	mov	r3, r1
    e36e:	4630      	mov	r0, r6
    e370:	4639      	mov	r1, r7
    e372:	f011 fda5 	bl	1fec0 <__aeabi_dmul>
    e376:	f012 fa99 	bl	208ac <__aeabi_d2ulz>
    e37a:	4605      	mov	r5, r0
    e37c:	460c      	mov	r4, r1
#endif
    return value;
}
    e37e:	4628      	mov	r0, r5
    e380:	4621      	mov	r1, r4
    e382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e384:	3ff00000 	.word	0x3ff00000

0000e388 <rx_complete_cb>:
{
    e388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    e38c:	684c      	ldr	r4, [r1, #4]
    if (ccp->config.role == CCP_ROLE_MASTER) {
    e38e:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    e392:	f013 0f1e 	tst.w	r3, #30
{
    e396:	b08f      	sub	sp, #60	; 0x3c
    e398:	4606      	mov	r6, r0
    if (ccp->config.role == CCP_ROLE_MASTER) {
    e39a:	d103      	bne.n	e3a4 <rx_complete_cb+0x1c>
            return true;
    e39c:	2001      	movs	r0, #1
}
    e39e:	b00f      	add	sp, #60	; 0x3c
    e3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (inst->fctrl_array[0] != FCNTL_IEEE_BLINK_CCP_64){
    e3a4:	f890 24e0 	ldrb.w	r2, [r0, #1248]	; 0x4e0
    e3a8:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    e3ac:	2ac5      	cmp	r2, #197	; 0xc5
    e3ae:	d009      	beq.n	e3c4 <rx_complete_cb+0x3c>
        if(dpl_sem_get_count(&ccp->sem) == 0){
    e3b0:	b963      	cbnz	r3, e3cc <rx_complete_cb+0x44>
    return (dev->uw_funcs->uf_adj_rx_timeout(dev, to));
    e3b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e3b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e3ba:	4798      	blx	r3
            CCP_STATS_INC(rx_other_frame);
    e3bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    e3be:	3301      	adds	r3, #1
    e3c0:	63e3      	str	r3, [r4, #60]	; 0x3c
    e3c2:	e7eb      	b.n	e39c <rx_complete_cb+0x14>
    if(dpl_sem_get_count(&ccp->sem) != 0){
    e3c4:	b123      	cbz	r3, e3d0 <rx_complete_cb+0x48>
        CCP_STATS_INC(rx_unsolicited);
    e3c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e3c8:	3301      	adds	r3, #1
    e3ca:	63a3      	str	r3, [r4, #56]	; 0x38
        return false;
    e3cc:	2000      	movs	r0, #0
    e3ce:	e7e6      	b.n	e39e <rx_complete_cb+0x16>
    if (inst->frame_len >= sizeof(uwb_ccp_blink_frame_t) && inst->frame_len <= sizeof(frame->array))
    e3d0:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
    e3d4:	3b20      	subs	r3, #32
    e3d6:	b29b      	uxth	r3, r3
    e3d8:	2b10      	cmp	r3, #16
    e3da:	d8df      	bhi.n	e39c <rx_complete_cb+0x14>
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx+1)%ccp->nframes];  // speculative frame advance
    e3dc:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    e3e0:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
    e3e4:	3301      	adds	r3, #1
    e3e6:	fbb3 f1f2 	udiv	r1, r3, r2
    e3ea:	fb02 3311 	mls	r3, r2, r1, r3
    e3ee:	33e0      	adds	r3, #224	; 0xe0
    e3f0:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
        memcpy(frame->array, inst->rxbuf, sizeof(uwb_ccp_blink_frame_t));
    e3f4:	f8d0 34fc 	ldr.w	r3, [r0, #1276]	; 0x4fc
    e3f8:	462a      	mov	r2, r5
    e3fa:	f103 0120 	add.w	r1, r3, #32
    e3fe:	f853 0b04 	ldr.w	r0, [r3], #4
    e402:	f842 0b04 	str.w	r0, [r2], #4
    e406:	428b      	cmp	r3, r1
    e408:	d1f9      	bne.n	e3fe <rx_complete_cb+0x76>
    if (inst->status.lde_error)
    e40a:	f896 a509 	ldrb.w	sl, [r6, #1289]	; 0x509
    e40e:	f01a 0a04 	ands.w	sl, sl, #4
    e412:	d1c3      	bne.n	e39c <rx_complete_cb+0x14>
    return (dev->uw_funcs->uf_stop_rx(dev));
    e414:	6a73      	ldr	r3, [r6, #36]	; 0x24
    e416:	4630      	mov	r0, r6
    e418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e41a:	4798      	blx	r3
    ccp->idx++; // confirmed frame advance
    e41c:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    e420:	3301      	adds	r3, #1
    e422:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    ccp->seq_num = frame->seq_num;
    e426:	786b      	ldrb	r3, [r5, #1]
    e428:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    ccp->missed_frames = 0;
    e42c:	f884 a0f1 	strb.w	sl, [r4, #241]	; 0xf1
    uint32_t delta_0 = 0xffffffffU&(uwb_read_systime_lo32(inst) - (uint32_t)(inst->rxtimestamp&0xFFFFFFFFUL));
    e430:	4630      	mov	r0, r6
    e432:	f7ff f9e1 	bl	d7f8 <uwb_read_systime_lo32>
    e436:	f8d6 34e8 	ldr.w	r3, [r6, #1256]	; 0x4e8
    e43a:	eba0 0803 	sub.w	r8, r0, r3
    ccp->os_epoch = dpl_cputime_get32();
    e43e:	f002 ff17 	bl	11270 <dpl_cputime_get32>
    e442:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    uint32_t delta_1 = 0xffffffffU&(uwb_read_systime_lo32(inst) - (uint32_t)(inst->rxtimestamp&0xFFFFFFFFUL));
    e446:	4630      	mov	r0, r6
    e448:	f7ff f9d6 	bl	d7f8 <uwb_read_systime_lo32>
    e44c:	f8d6 74e8 	ldr.w	r7, [r6, #1256]	; 0x4e8
    e450:	f8d6 34ec 	ldr.w	r3, [r6, #1260]	; 0x4ec
    e454:	9301      	str	r3, [sp, #4]
    uint32_t delta = (delta_0>>1) + (delta_1>>1);
    e456:	ea4f 0858 	mov.w	r8, r8, lsr #1
    uint32_t delta_1 = 0xffffffffU&(uwb_read_systime_lo32(inst) - (uint32_t)(inst->rxtimestamp&0xFFFFFFFFUL));
    e45a:	1bc0      	subs	r0, r0, r7
    uint32_t delta = (delta_0>>1) + (delta_1>>1);
    e45c:	eb08 0050 	add.w	r0, r8, r0, lsr #1
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    e460:	0c00      	lsrs	r0, r0, #16
    e462:	f011 fcb3 	bl	1fdcc <__aeabi_ui2d>
    e466:	a3d8      	add	r3, pc, #864	; (adr r3, e7c8 <rx_complete_cb+0x440>)
    e468:	e9d3 2300 	ldrd	r2, r3, [r3]
    e46c:	f011 fd28 	bl	1fec0 <__aeabi_dmul>
    e470:	4680      	mov	r8, r0
    e472:	4689      	mov	r9, r1
    e474:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    e478:	f011 fca8 	bl	1fdcc <__aeabi_ui2d>
    e47c:	4642      	mov	r2, r8
    e47e:	464b      	mov	r3, r9
    e480:	f011 fb66 	bl	1fb50 <__aeabi_dsub>
    e484:	f011 fff4 	bl	20470 <__aeabi_d2uiz>
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    e488:	2300      	movs	r3, #0
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    e48a:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    e48e:	2200      	movs	r2, #0
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    e490:	4683      	mov	fp, r0
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    e492:	4649      	mov	r1, r9
    e494:	4640      	mov	r0, r8
    e496:	f011 fb5d 	bl	1fb54 <__adddf3>
    e49a:	f011 ffe9 	bl	20470 <__aeabi_d2uiz>
    CCP_STATS_INC(rx_complete);
    e49e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    e4a0:	6520      	str	r0, [r4, #80]	; 0x50
    CCP_STATS_INC(rx_complete);
    e4a2:	3301      	adds	r3, #1
    e4a4:	62e3      	str	r3, [r4, #44]	; 0x2c
    ccp->status.rx_timeout_error = 0;
    e4a6:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    e4aa:	f36a 0341 	bfi	r3, sl, #1, #1
    e4ae:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    if (frame->transmission_timestamp.timestamp < ccp->master_epoch.timestamp ||
    e4b2:	e9d4 0334 	ldrd	r0, r3, [r4, #208]	; 0xd0
    e4b6:	f8d5 e014 	ldr.w	lr, [r5, #20]
    e4ba:	f8d5 8018 	ldr.w	r8, [r5, #24]
    e4be:	4586      	cmp	lr, r0
    e4c0:	eb78 0303 	sbcs.w	r3, r8, r3
    e4c4:	f8d5 0002 	ldr.w	r0, [r5, #2]
    e4c8:	f8d5 3006 	ldr.w	r3, [r5, #6]
    e4cc:	d306      	bcc.n	e4dc <rx_complete_cb+0x154>
    e4ce:	e9d4 212a 	ldrd	r2, r1, [r4, #168]	; 0xa8
    e4d2:	428b      	cmp	r3, r1
    e4d4:	bf08      	it	eq
    e4d6:	4290      	cmpeq	r0, r2
    e4d8:	f000 814e 	beq.w	e778 <rx_complete_cb+0x3f0>
        ccp->master_euid = frame->euid;
    e4dc:	e9c4 032a 	strd	r0, r3, [r4, #168]	; 0xa8
        ccp->status.valid = (MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)==0);
    e4e0:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    e4e4:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
        ccp->status.valid |= (ccp->status.valid_count == MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)-1);
    e4e8:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    ccp->local_epoch = frame->reception_timestamp = inst->rxtimestamp;
    e4ec:	9b01      	ldr	r3, [sp, #4]
    e4ee:	626b      	str	r3, [r5, #36]	; 0x24
    ccp->period = (frame->transmission_interval >> 16);
    e4f0:	68eb      	ldr	r3, [r5, #12]
    e4f2:	7c28      	ldrb	r0, [r5, #16]
    ccp->local_epoch = frame->reception_timestamp = inst->rxtimestamp;
    e4f4:	622f      	str	r7, [r5, #32]
    ccp->period = (frame->transmission_interval >> 16);
    e4f6:	0c1b      	lsrs	r3, r3, #16
    e4f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    e4fc:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    adjust_for_epoch_to_rm(ccp, frame->epoch_to_rm_us);
    e500:	f8b5 a01e 	ldrh.w	sl, [r5, #30]
    ccp->master_epoch.timestamp -= ((uint64_t)epoch_to_rm_us << 16);
    e504:	ea4f 400a 	mov.w	r0, sl, lsl #16
    e508:	ebbe 0200 	subs.w	r2, lr, r0
    e50c:	f04f 0300 	mov.w	r3, #0
    e510:	eb68 0103 	sbc.w	r1, r8, r3
    e514:	e9c4 2134 	strd	r2, r1, [r4, #208]	; 0xd0
    ccp->local_epoch -= ((uint64_t)epoch_to_rm_us << 16);
    e518:	9a01      	ldr	r2, [sp, #4]
    e51a:	1a3f      	subs	r7, r7, r0
    e51c:	eb62 0303 	sbc.w	r3, r2, r3
    e520:	e9c4 7336 	strd	r7, r3, [r4, #216]	; 0xd8
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(epoch_to_rm_us));
    e524:	4658      	mov	r0, fp
    e526:	f011 fc51 	bl	1fdcc <__aeabi_ui2d>
    e52a:	4680      	mov	r8, r0
    e52c:	4650      	mov	r0, sl
    e52e:	4689      	mov	r9, r1
    e530:	f011 fc5c 	bl	1fdec <__aeabi_i2d>
    e534:	a3a4      	add	r3, pc, #656	; (adr r3, e7c8 <rx_complete_cb+0x440>)
    e536:	e9d3 2300 	ldrd	r2, r3, [r3]
    e53a:	f011 fcc1 	bl	1fec0 <__aeabi_dmul>
    e53e:	460b      	mov	r3, r1
    e540:	4602      	mov	r2, r0
    e542:	4649      	mov	r1, r9
    e544:	4640      	mov	r0, r8
    e546:	f011 fb03 	bl	1fb50 <__aeabi_dsub>
    e54a:	f011 ff91 	bl	20470 <__aeabi_d2uiz>
    frame->carrier_integrator = inst->carrier_integrator;
    e54e:	f8d6 34f0 	ldr.w	r3, [r6, #1264]	; 0x4f0
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(epoch_to_rm_us));
    e552:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    frame->carrier_integrator = inst->carrier_integrator;
    e556:	62ab      	str	r3, [r5, #40]	; 0x28
    if (inst->config.rxttcko_enable) {
    e558:	f996 352c 	ldrsb.w	r3, [r6, #1324]	; 0x52c
    e55c:	2b00      	cmp	r3, #0
        frame->rxttcko = inst->rxttcko;
    e55e:	bfb4      	ite	lt
    e560:	f8d6 34f4 	ldrlt.w	r3, [r6, #1268]	; 0x4f4
        frame->rxttcko = 0;
    e564:	2300      	movge	r3, #0
    e566:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (ccp->tof_comp_cb) {
    e568:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    e56c:	b17b      	cbz	r3, e58e <rx_complete_cb+0x206>
        uint32_t tof_comp = ccp->tof_comp_cb(frame->short_address);
    e56e:	8968      	ldrh	r0, [r5, #10]
    e570:	4798      	blx	r3
        tof_comp = uwb_ccp_skew_compensation_ui64(ccp, (uint64_t)tof_comp);
    e572:	2300      	movs	r3, #0
        uint32_t tof_comp = ccp->tof_comp_cb(frame->short_address);
    e574:	4602      	mov	r2, r0
        tof_comp = uwb_ccp_skew_compensation_ui64(ccp, (uint64_t)tof_comp);
    e576:	4620      	mov	r0, r4
    e578:	f7ff fee6 	bl	e348 <uwb_ccp_skew_compensation_ui64>
        ccp->local_epoch -= tof_comp;
    e57c:	e9d4 3236 	ldrd	r3, r2, [r4, #216]	; 0xd8
    e580:	1a18      	subs	r0, r3, r0
    e582:	f162 0200 	sbc.w	r2, r2, #0
    e586:	e9c4 0236 	strd	r0, r2, [r4, #216]	; 0xd8
        frame->reception_timestamp = ccp->local_epoch;
    e58a:	6228      	str	r0, [r5, #32]
    e58c:	626a      	str	r2, [r5, #36]	; 0x24
    if (frame->rpt_count != 0) {
    e58e:	f895 a01c 	ldrb.w	sl, [r5, #28]
    e592:	f1ba 0f00 	cmp.w	sl, #0
    e596:	d059      	beq.n	e64c <rx_complete_cb+0x2c4>
        CCP_STATS_INC(rx_relayed);
    e598:	6b23      	ldr	r3, [r4, #48]	; 0x30
        uint64_t master_interval = ((frame->transmission_interval/0x100000000UL+1)*0x100000000UL);
    e59a:	7c29      	ldrb	r1, [r5, #16]
    e59c:	68e8      	ldr	r0, [r5, #12]
    e59e:	f111 0c01 	adds.w	ip, r1, #1
        CCP_STATS_INC(rx_relayed);
    e5a2:	3301      	adds	r3, #1
    e5a4:	6323      	str	r3, [r4, #48]	; 0x30
        ccp->period = master_interval>>16;
    e5a6:	ea4f 430c 	mov.w	r3, ip, lsl #16
        uint64_t master_interval = ((frame->transmission_interval/0x100000000UL+1)*0x100000000UL);
    e5aa:	2700      	movs	r7, #0
        ccp->period = master_interval>>16;
    e5ac:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
        ccp->master_epoch.timestamp = (ccp->master_epoch.timestamp - repeat_dly);
    e5b0:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
        uint64_t repeat_dly = master_interval - frame->transmission_interval;
    e5b4:	1a3a      	subs	r2, r7, r0
    e5b6:	eb6c 0e01 	sbc.w	lr, ip, r1
        ccp->master_epoch.timestamp = (ccp->master_epoch.timestamp - repeat_dly);
    e5ba:	18c0      	adds	r0, r0, r3
    e5bc:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    e5c0:	eb41 0103 	adc.w	r1, r1, r3
    e5c4:	eba1 010c 	sub.w	r1, r1, ip
        repeat_dly = uwb_ccp_skew_compensation_ui64(ccp, repeat_dly);
    e5c8:	4673      	mov	r3, lr
        ccp->master_epoch.timestamp = (ccp->master_epoch.timestamp - repeat_dly);
    e5ca:	e9c4 0134 	strd	r0, r1, [r4, #208]	; 0xd0
        repeat_dly = uwb_ccp_skew_compensation_ui64(ccp, repeat_dly);
    e5ce:	4620      	mov	r0, r4
    e5d0:	f7ff feba 	bl	e348 <uwb_ccp_skew_compensation_ui64>
    e5d4:	460a      	mov	r2, r1
        ccp->local_epoch = (ccp->local_epoch - repeat_dly) & 0x0FFFFFFFFFFUL;
    e5d6:	e9d4 1336 	ldrd	r1, r3, [r4, #216]	; 0xd8
        repeat_dly = uwb_ccp_skew_compensation_ui64(ccp, repeat_dly);
    e5da:	4683      	mov	fp, r0
        ccp->local_epoch = (ccp->local_epoch - repeat_dly) & 0x0FFFFFFFFFFUL;
    e5dc:	ebb1 010b 	subs.w	r1, r1, fp
    e5e0:	eb63 0302 	sbc.w	r3, r3, r2
    e5e4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
        ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs((repeat_dly >> 16)));
    e5e8:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
        ccp->local_epoch = (ccp->local_epoch - repeat_dly) & 0x0FFFFFFFFFFUL;
    e5ec:	9201      	str	r2, [sp, #4]
    e5ee:	e9c4 1336 	strd	r1, r3, [r4, #216]	; 0xd8
        frame->reception_timestamp = ccp->local_epoch;
    e5f2:	626b      	str	r3, [r5, #36]	; 0x24
    e5f4:	6229      	str	r1, [r5, #32]
        ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs((repeat_dly >> 16)));
    e5f6:	f011 fbe9 	bl	1fdcc <__aeabi_ui2d>
    e5fa:	9a01      	ldr	r2, [sp, #4]
    e5fc:	4680      	mov	r8, r0
    e5fe:	ea4f 401b 	mov.w	r0, fp, lsr #16
    e602:	4689      	mov	r9, r1
    e604:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    e608:	0c11      	lsrs	r1, r2, #16
    e60a:	f011 fc23 	bl	1fe54 <__aeabi_ul2d>
    e60e:	a36e      	add	r3, pc, #440	; (adr r3, e7c8 <rx_complete_cb+0x440>)
    e610:	e9d3 2300 	ldrd	r2, r3, [r3]
    e614:	f011 fc54 	bl	1fec0 <__aeabi_dmul>
    e618:	4602      	mov	r2, r0
    e61a:	460b      	mov	r3, r1
    e61c:	4640      	mov	r0, r8
    e61e:	4649      	mov	r1, r9
    e620:	f011 fa96 	bl	1fb50 <__aeabi_dsub>
    e624:	f011 ff24 	bl	20470 <__aeabi_d2uiz>
    e628:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
        frame->carrier_integrator = 0;
    e62c:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    e630:	f885 7029 	strb.w	r7, [r5, #41]	; 0x29
    e634:	f885 702a 	strb.w	r7, [r5, #42]	; 0x2a
    e638:	f885 702b 	strb.w	r7, [r5, #43]	; 0x2b
        frame->rxttcko = 0;
    e63c:	f885 702c 	strb.w	r7, [r5, #44]	; 0x2c
    e640:	f885 702d 	strb.w	r7, [r5, #45]	; 0x2d
    e644:	f885 702e 	strb.w	r7, [r5, #46]	; 0x2e
    e648:	f885 702f 	strb.w	r7, [r5, #47]	; 0x2f
    if (ccp->config.role == CCP_ROLE_RELAY && ccp->status.valid && frame->rpt_count < frame->rpt_max) {
    e64c:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    e650:	4b5b      	ldr	r3, [pc, #364]	; (e7c0 <rx_complete_cb+0x438>)
    e652:	4013      	ands	r3, r2
    e654:	f1b3 1f04 	cmp.w	r3, #262148	; 0x40004
    e658:	d17b      	bne.n	e752 <rx_complete_cb+0x3ca>
    e65a:	7f6b      	ldrb	r3, [r5, #29]
    e65c:	4553      	cmp	r3, sl
    e65e:	d978      	bls.n	e752 <rx_complete_cb+0x3ca>
        memcpy(tx_frame.array, frame->array, sizeof(uwb_ccp_frame_t));
    e660:	aa02      	add	r2, sp, #8
    e662:	462b      	mov	r3, r5
    e664:	f105 0c30 	add.w	ip, r5, #48	; 0x30
    e668:	4690      	mov	r8, r2
    e66a:	6818      	ldr	r0, [r3, #0]
    e66c:	6859      	ldr	r1, [r3, #4]
    e66e:	4617      	mov	r7, r2
    e670:	c703      	stmia	r7!, {r0, r1}
    e672:	3308      	adds	r3, #8
    e674:	4563      	cmp	r3, ip
    e676:	463a      	mov	r2, r7
    e678:	d1f7      	bne.n	e66a <rx_complete_cb+0x2e2>
        tx_frame.short_address = inst->my_short_address;
    e67a:	f8b6 34b6 	ldrh.w	r3, [r6, #1206]	; 0x4b6
    e67e:	f8ad 3012 	strh.w	r3, [sp, #18]
        tx_frame.rpt_count++;
    e682:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        tx_timestamp += (inst->slot_id%4)*(((uint64_t)ccp->blink_frame_duration)<<16);
    e686:	f8b6 74c2 	ldrh.w	r7, [r6, #1218]	; 0x4c2
    e68a:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
        tx_timestamp += tx_frame.rpt_count*((uint64_t)ccp->config.tx_holdoff_dly<<16);
    e68e:	f8b4 c0cc 	ldrh.w	ip, [r4, #204]	; 0xcc
        tx_frame.rpt_count++;
    e692:	3301      	adds	r3, #1
    e694:	b2db      	uxtb	r3, r3
    e696:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        tx_timestamp += (inst->slot_id%4)*(((uint64_t)ccp->blink_frame_duration)<<16);
    e69a:	f007 0703 	and.w	r7, r7, #3
    e69e:	0409      	lsls	r1, r1, #16
        tx_timestamp += tx_frame.rpt_count*((uint64_t)ccp->config.tx_holdoff_dly<<16);
    e6a0:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    e6a4:	fbac c303 	umull	ip, r3, ip, r3
        uint64_t tx_timestamp = frame->reception_timestamp;
    e6a8:	6a2a      	ldr	r2, [r5, #32]
    e6aa:	6a68      	ldr	r0, [r5, #36]	; 0x24
        tx_timestamp += (inst->slot_id%4)*(((uint64_t)ccp->blink_frame_duration)<<16);
    e6ac:	fba7 7101 	umull	r7, r1, r7, r1
    e6b0:	eb17 070c 	adds.w	r7, r7, ip
    e6b4:	eb41 0303 	adc.w	r3, r1, r3
    e6b8:	18bf      	adds	r7, r7, r2
    e6ba:	eb40 0303 	adc.w	r3, r0, r3
        tx_timestamp &= 0x0FFFFFFFE00UL;
    e6be:	f427 77ff 	bic.w	r7, r7, #510	; 0x1fe
    e6c2:	f027 0701 	bic.w	r7, r7, #1
    e6c6:	f003 09ff 	and.w	r9, r3, #255	; 0xff
        uwb_set_delay_start(inst, tx_timestamp);
    e6ca:	463a      	mov	r2, r7
    e6cc:	464b      	mov	r3, r9
    e6ce:	4630      	mov	r0, r6
    e6d0:	f7ff f9fd 	bl	dace <uwb_set_delay_start.isra.0>
        uint64_t tx_delay = (tx_timestamp - frame->reception_timestamp);
    e6d4:	6a29      	ldr	r1, [r5, #32]
        tx_timestamp += inst->tx_antenna_delay;
    e6d6:	f8b6 24ce 	ldrh.w	r2, [r6, #1230]	; 0x4ce
        uint64_t tx_delay = (tx_timestamp - frame->reception_timestamp);
    e6da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e6dc:	1a52      	subs	r2, r2, r1
    e6de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    e6e2:	19d2      	adds	r2, r2, r7
        tx_delay = uwb_ccp_skew_compensation_ui64(ccp, tx_delay);
    e6e4:	eb49 0303 	adc.w	r3, r9, r3
    e6e8:	4620      	mov	r0, r4
    e6ea:	f7ff fe2d 	bl	e348 <uwb_ccp_skew_compensation_ui64>
        tx_frame.transmission_timestamp.timestamp += tx_delay;
    e6ee:	9b07      	ldr	r3, [sp, #28]
    e6f0:	9a08      	ldr	r2, [sp, #32]
    e6f2:	181b      	adds	r3, r3, r0
    e6f4:	eb41 0202 	adc.w	r2, r1, r2
    e6f8:	e9cd 3207 	strd	r3, r2, [sp, #28]
        tx_frame.transmission_interval = frame->transmission_interval - tx_delay;
    e6fc:	68eb      	ldr	r3, [r5, #12]
    e6fe:	7c2a      	ldrb	r2, [r5, #16]
    e700:	1a18      	subs	r0, r3, r0
    e702:	eb62 0101 	sbc.w	r1, r2, r1
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    e706:	6a73      	ldr	r3, [r6, #36]	; 0x24
    e708:	9005      	str	r0, [sp, #20]
    e70a:	f88d 1018 	strb.w	r1, [sp, #24]
    e70e:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    e710:	2200      	movs	r2, #0
    e712:	2320      	movs	r3, #32
    e714:	4641      	mov	r1, r8
    e716:	4630      	mov	r0, r6
    e718:	47a8      	blx	r5
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    e71a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    e71c:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    e71e:	2300      	movs	r3, #0
    e720:	461a      	mov	r2, r3
    e722:	2120      	movs	r1, #32
    e724:	4630      	mov	r0, r6
    e726:	47a8      	blx	r5
    return (dev->uw_funcs->uf_start_tx(dev));
    e728:	6a73      	ldr	r3, [r6, #36]	; 0x24
    e72a:	4630      	mov	r0, r6
    e72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e72e:	4798      	blx	r3
        ccp->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    e730:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    e734:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e738:	f360 1386 	bfi	r3, r0, #6, #1
    e73c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
        if (ccp->status.start_tx_error){
    e740:	065b      	lsls	r3, r3, #25
            CCP_STATS_INC(tx_relay_error);
    e742:	bf4b      	itete	mi
    e744:	6ca3      	ldrmi	r3, [r4, #72]	; 0x48
            CCP_STATS_INC(tx_relay_ok);
    e746:	6ce3      	ldrpl	r3, [r4, #76]	; 0x4c
            CCP_STATS_INC(tx_relay_error);
    e748:	3301      	addmi	r3, #1
            CCP_STATS_INC(tx_relay_ok);
    e74a:	3301      	addpl	r3, #1
            CCP_STATS_INC(tx_relay_error);
    e74c:	bf4c      	ite	mi
    e74e:	64a3      	strmi	r3, [r4, #72]	; 0x48
            CCP_STATS_INC(tx_relay_ok);
    e750:	64e3      	strpl	r3, [r4, #76]	; 0x4c
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
    e752:	f8d6 5530 	ldr.w	r5, [r6, #1328]	; 0x530
    e756:	bb4d      	cbnz	r5, e7ac <rx_complete_cb+0x424>
    if (ccp->config.postprocess && ccp->status.valid) {
    e758:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    e75c:	4b19      	ldr	r3, [pc, #100]	; (e7c4 <rx_complete_cb+0x43c>)
    e75e:	4393      	bics	r3, r2
    e760:	d105      	bne.n	e76e <rx_complete_cb+0x3e6>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    e762:	f7fa ff5b 	bl	961c <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    e766:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    e76a:	f7fa feb0 	bl	94ce <os_eventq_put>
    return (dpl_error_t)os_sem_release(&sem->sem);
    e76e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    e772:	f7fb fa5f 	bl	9c34 <os_sem_release>
    e776:	e629      	b.n	e3cc <rx_complete_cb+0x44>
        if(ccp->status.valid_count < MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)-1){
    e778:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    e77c:	f013 0f38 	tst.w	r3, #56	; 0x38
            ccp->status.valid_count++;
    e780:	bf01      	itttt	eq
    e782:	f3c3 00c2 	ubfxeq	r0, r3, #3, #3
    e786:	3001      	addeq	r0, #1
    e788:	f360 03c5 	bfieq	r3, r0, #3, #3
    e78c:	f884 30c8 	strbeq.w	r3, [r4, #200]	; 0xc8
        ccp->status.valid |= (ccp->status.valid_count == MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)-1);
    e790:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    e794:	f003 0c38 	and.w	ip, r3, #56	; 0x38
    e798:	f3c3 0080 	ubfx	r0, r3, #2, #1
    e79c:	f1bc 0f08 	cmp.w	ip, #8
    e7a0:	bf08      	it	eq
    e7a2:	f040 0001 	orreq.w	r0, r0, #1
    e7a6:	f360 0382 	bfi	r3, r0, #2, #1
    e7aa:	e69d      	b.n	e4e8 <rx_complete_cb+0x160>
            if (lcbs != NULL && lcbs->superframe_cb) {
    e7ac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    e7ae:	b113      	cbz	r3, e7b6 <rx_complete_cb+0x42e>
                if(lcbs->superframe_cb((struct uwb_dev*)inst, lcbs)) continue;
    e7b0:	4629      	mov	r1, r5
    e7b2:	4630      	mov	r0, r6
    e7b4:	4798      	blx	r3
        SLIST_FOREACH(lcbs, &inst->interface_cbs, next) {
    e7b6:	6bad      	ldr	r5, [r5, #56]	; 0x38
    e7b8:	e7cd      	b.n	e756 <rx_complete_cb+0x3ce>
    e7ba:	bf00      	nop
    e7bc:	f3af 8000 	nop.w
    e7c0:	001e0004 	.word	0x001e0004
    e7c4:	00010004 	.word	0x00010004
    e7c8:	90690691 	.word	0x90690691
    e7cc:	3ff06906 	.word	0x3ff06906

0000e7d0 <uwb_ccp_pkg_init>:
 *
 * @return void
 */
void
uwb_ccp_pkg_init(void)
{
    e7d0:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_ccp_instance * ccp __attribute__((unused));
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_pkg_init\"}\n",
    e7d2:	f002 fd4d 	bl	11270 <dpl_cputime_get32>
    e7d6:	4601      	mov	r1, r0
    e7d8:	4807      	ldr	r0, [pc, #28]	; (e7f8 <uwb_ccp_pkg_init+0x28>)
    e7da:	f001 f9ff 	bl	fbdc <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    e7de:	2400      	movs	r4, #0
        udev = uwb_dev_idx_lookup(i);
    e7e0:	4620      	mov	r0, r4
    e7e2:	f7fa f931 	bl	8a48 <uwb_dev_idx_lookup>
        if (!udev) {
    e7e6:	b110      	cbz	r0, e7ee <uwb_ccp_pkg_init+0x1e>
            continue;
        }
        ccp = uwb_ccp_init(udev, 2);
    e7e8:	2102      	movs	r1, #2
    e7ea:	f7ff fbf5 	bl	dfd8 <uwb_ccp_init>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    e7ee:	3401      	adds	r4, #1
    e7f0:	2c03      	cmp	r4, #3
    e7f2:	d1f5      	bne.n	e7e0 <uwb_ccp_pkg_init+0x10>
        pr_info("uwbccp: To start service: echo 1 > /sys/kernel/uwbcore/uwbccp%d/role; echo 1 > /sys/kernel/uwbcore/uwbccp%d/enable; cat /dev/uwbccp%d\n",
                udev->idx, udev->idx, udev->idx);
#endif  /* __KERNEL__ */
    }

}
    e7f4:	bd10      	pop	{r4, pc}
    e7f6:	bf00      	nop
    e7f8:	0002224e 	.word	0x0002224e

0000e7fc <uwb_ccp_pkg_down>:
 *
 * @return void
 */
int
uwb_ccp_pkg_down(int reason)
{
    e7fc:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_ccp_instance * ccp;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    e7fe:	2500      	movs	r5, #0
        udev = uwb_dev_idx_lookup(i);
    e800:	4628      	mov	r0, r5
    e802:	f7fa f921 	bl	8a48 <uwb_dev_idx_lookup>
        if (!udev) {
    e806:	b168      	cbz	r0, e824 <uwb_ccp_pkg_down+0x28>
            continue;
        }
        ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    e808:	2101      	movs	r1, #1
    e80a:	f7fa f991 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
    e80e:	4604      	mov	r4, r0
    e810:	b140      	cbz	r0, e824 <uwb_ccp_pkg_down+0x28>
            continue;
        }
        if (ccp->status.enabled) {
    e812:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    e816:	06db      	lsls	r3, r3, #27
    e818:	d501      	bpl.n	e81e <uwb_ccp_pkg_down+0x22>
            uwb_ccp_stop(ccp);
    e81a:	f7ff fd73 	bl	e304 <uwb_ccp_stop>
        }
#if __KERNEL__
        ccp_chrdev_destroy(udev->idx);
        ccp_sysfs_deinit(udev->idx);
#endif
        uwb_ccp_free(ccp);
    e81e:	4620      	mov	r0, r4
    e820:	f7ff fcb0 	bl	e184 <uwb_ccp_free>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    e824:	3501      	adds	r5, #1
    e826:	2d03      	cmp	r5, #3
    e828:	d1ea      	bne.n	e800 <uwb_ccp_pkg_down+0x4>
    }

    return 0;
}
    e82a:	2000      	movs	r0, #0
    e82c:	bd38      	pop	{r3, r4, r5, pc}

0000e82e <uwb_start_tx>:
    e82e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e832:	4718      	bx	r3

0000e834 <tx_complete_cb>:
 */
static bool
tx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    struct uwb_pan_instance * pan = (struct uwb_pan_instance *)cbs->inst_ptr;
    if(inst->fctrl_array[0] != FCNTL_IEEE_BLINK_TAG_64){
    e834:	f890 34e0 	ldrb.w	r3, [r0, #1248]	; 0x4e0
    e838:	2b56      	cmp	r3, #86	; 0x56
    e83a:	d10b      	bne.n	e854 <tx_complete_cb+0x20>
    struct uwb_pan_instance * pan = (struct uwb_pan_instance *)cbs->inst_ptr;
    e83c:	684a      	ldr	r2, [r1, #4]
        return false;
    }
    pan->idx++;
    e83e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
    e842:	3301      	adds	r3, #1
    e844:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
    STATS_INC(g_stat, tx_complete);
    e848:	4a03      	ldr	r2, [pc, #12]	; (e858 <tx_complete_cb+0x24>)
    e84a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    e84c:	3301      	adds	r3, #1
    e84e:	6293      	str	r3, [r2, #40]	; 0x28
    return true;
    e850:	2001      	movs	r0, #1
    e852:	4770      	bx	lr
        return false;
    e854:	2000      	movs	r0, #0
}
    e856:	4770      	bx	lr
    e858:	20003c68 	.word	0x20003c68

0000e85c <lease_expiry_cb>:
{
    e85c:	b508      	push	{r3, lr}
    assert(ev != NULL);
    e85e:	b928      	cbnz	r0, e86c <lease_expiry_cb+0x10>
    e860:	2300      	movs	r3, #0
    e862:	461a      	mov	r2, r3
    e864:	4619      	mov	r1, r3
    e866:	4618      	mov	r0, r3
    e868:	f7fa fb44 	bl	8ef4 <__assert_func>
    return ev->ev.ev_arg;
    e86c:	6881      	ldr	r1, [r0, #8]
    assert(dpl_event_get_arg(ev));
    e86e:	2900      	cmp	r1, #0
    e870:	d0f6      	beq.n	e860 <lease_expiry_cb+0x4>
    STATS_INC(g_stat, lease_expiry);
    e872:	4a0e      	ldr	r2, [pc, #56]	; (e8ac <lease_expiry_cb+0x50>)
    pan->dev_inst->slot_id = 0xffff;
    e874:	6808      	ldr	r0, [r1, #0]
    STATS_INC(g_stat, lease_expiry);
    e876:	6a53      	ldr	r3, [r2, #36]	; 0x24
    e878:	3301      	adds	r3, #1
    e87a:	6253      	str	r3, [r2, #36]	; 0x24
    pan->status.valid = false;
    e87c:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    e880:	f023 0314 	bic.w	r3, r3, #20
    e884:	f043 0310 	orr.w	r3, r3, #16
    e888:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    pan->dev_inst->slot_id = 0xffff;
    e88c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e890:	f8a0 34c2 	strh.w	r3, [r0, #1218]	; 0x4c2
    if (pan->control.postprocess) {
    e894:	f891 304a 	ldrb.w	r3, [r1, #74]	; 0x4a
    e898:	07db      	lsls	r3, r3, #31
    e89a:	d505      	bpl.n	e8a8 <lease_expiry_cb+0x4c>
}
    e89c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    e8a0:	3150      	adds	r1, #80	; 0x50
    e8a2:	303c      	adds	r0, #60	; 0x3c
    e8a4:	f7fa be13 	b.w	94ce <os_eventq_put>
    e8a8:	bd08      	pop	{r3, pc}
    e8aa:	bf00      	nop
    e8ac:	20003c68 	.word	0x20003c68

0000e8b0 <pan_postprocess>:
pan_postprocess(struct dpl_event * ev){
    e8b0:	b508      	push	{r3, lr}
    assert(ev != NULL);
    e8b2:	b928      	cbnz	r0, e8c0 <pan_postprocess+0x10>
    e8b4:	2300      	movs	r3, #0
    e8b6:	461a      	mov	r2, r3
    e8b8:	4619      	mov	r1, r3
    e8ba:	4618      	mov	r0, r3
    e8bc:	f7fa fb1a 	bl	8ef4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    e8c0:	6883      	ldr	r3, [r0, #8]
    e8c2:	2b00      	cmp	r3, #0
    e8c4:	d0f6      	beq.n	e8b4 <pan_postprocess+0x4>
}
    e8c6:	bd08      	pop	{r3, pc}

0000e8c8 <reset_cb.part.0>:
 * @param cbs    Pointer to struct uwb_mac_interface.
 *
 * @return bool
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
    e8c8:	b508      	push	{r3, lr}
{
    struct uwb_pan_instance * pan = (struct uwb_pan_instance *)cbs->inst_ptr;
    if (dpl_sem_get_count(&pan->sem) == 0){
        STATS_INC(g_stat, reset);
        dpl_error_t err = dpl_sem_release(&pan->sem);
        assert(err == DPL_OK);
    e8ca:	2300      	movs	r3, #0
    e8cc:	461a      	mov	r2, r3
    e8ce:	4619      	mov	r1, r3
    e8d0:	4618      	mov	r0, r3
    e8d2:	f7fa fb0f 	bl	8ef4 <__assert_func>
	...

0000e8d8 <reset_cb>:
    struct uwb_pan_instance * pan = (struct uwb_pan_instance *)cbs->inst_ptr;
    e8d8:	6848      	ldr	r0, [r1, #4]
{
    e8da:	b508      	push	{r3, lr}
    if (dpl_sem_get_count(&pan->sem) == 0){
    e8dc:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    e8e0:	b94b      	cbnz	r3, e8f6 <reset_cb+0x1e>
        STATS_INC(g_stat, reset);
    e8e2:	4a07      	ldr	r2, [pc, #28]	; (e900 <reset_cb+0x28>)
    e8e4:	6c53      	ldr	r3, [r2, #68]	; 0x44
    return (dpl_error_t)os_sem_release(&sem->sem);
    e8e6:	3040      	adds	r0, #64	; 0x40
    e8e8:	3301      	adds	r3, #1
    e8ea:	6453      	str	r3, [r2, #68]	; 0x44
    e8ec:	f7fb f9a2 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
    e8f0:	b118      	cbz	r0, e8fa <reset_cb+0x22>
    e8f2:	f7ff ffe9 	bl	e8c8 <reset_cb.part.0>
        return true;
    }
    return false;
    e8f6:	2000      	movs	r0, #0
}
    e8f8:	bd08      	pop	{r3, pc}
        return true;
    e8fa:	2001      	movs	r0, #1
    e8fc:	e7fc      	b.n	e8f8 <reset_cb+0x20>
    e8fe:	bf00      	nop
    e900:	20003c68 	.word	0x20003c68

0000e904 <rx_timeout_cb>:
 * @return bool
 */
static bool
rx_timeout_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    struct uwb_pan_instance * pan = (struct uwb_pan_instance *)cbs->inst_ptr;
    e904:	6848      	ldr	r0, [r1, #4]
{
    e906:	b508      	push	{r3, lr}
    if (dpl_sem_get_count(&pan->sem) == 0){
    e908:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    e90c:	b94b      	cbnz	r3, e922 <rx_timeout_cb+0x1e>
        STATS_INC(g_stat, rx_timeout);
    e90e:	4a07      	ldr	r2, [pc, #28]	; (e92c <rx_timeout_cb+0x28>)
    e910:	6c13      	ldr	r3, [r2, #64]	; 0x40
    e912:	3040      	adds	r0, #64	; 0x40
    e914:	3301      	adds	r3, #1
    e916:	6413      	str	r3, [r2, #64]	; 0x40
    e918:	f7fb f98c 	bl	9c34 <os_sem_release>
        dpl_error_t err = dpl_sem_release(&pan->sem);
        assert(err == DPL_OK);
    e91c:	b118      	cbz	r0, e926 <rx_timeout_cb+0x22>
    e91e:	f7ff ffd3 	bl	e8c8 <reset_cb.part.0>
        return true;
    }
    return false;
    e922:	2000      	movs	r0, #0
}
    e924:	bd08      	pop	{r3, pc}
        return true;
    e926:	2001      	movs	r0, #1
    e928:	e7fc      	b.n	e924 <rx_timeout_cb+0x20>
    e92a:	bf00      	nop
    e92c:	20003c68 	.word	0x20003c68

0000e930 <uwb_write_tx_fctrl.constprop.0>:
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    e930:	6a43      	ldr	r3, [r0, #36]	; 0x24
uwb_write_tx_fctrl(struct uwb_dev* dev, uint16_t tx_frame_length, uint16_t tx_buffer_offset)
    e932:	b410      	push	{r4}
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    e934:	6c9c      	ldr	r4, [r3, #72]	; 0x48
    e936:	2300      	movs	r3, #0
    e938:	46a4      	mov	ip, r4
    e93a:	461a      	mov	r2, r3
}
    e93c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    e940:	4760      	bx	ip

0000e942 <uwb_write_tx.constprop.0.isra.0>:
uwb_write_tx(struct uwb_dev* dev, uint8_t *tx_frame_bytes,
    e942:	4613      	mov	r3, r2
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    e944:	6a42      	ldr	r2, [r0, #36]	; 0x24
uwb_write_tx(struct uwb_dev* dev, uint8_t *tx_frame_bytes,
    e946:	b410      	push	{r4}
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    e948:	6c54      	ldr	r4, [r2, #68]	; 0x44
    e94a:	2200      	movs	r2, #0
    e94c:	46a4      	mov	ip, r4
}
    e94e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    e952:	4760      	bx	ip

0000e954 <uwb_set_wait4resp.isra.0>:
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    e954:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e958:	4718      	bx	r3

0000e95a <uwb_set_delay_start.isra.0>:
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    e95a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    e95c:	6b49      	ldr	r1, [r1, #52]	; 0x34
    e95e:	4708      	bx	r1

0000e960 <uwb_set_rx_timeout.isra.0>:
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    e960:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e964:	4718      	bx	r3
	...

0000e968 <rx_complete_cb>:
    if(inst->fctrl_array[0] != FCNTL_IEEE_BLINK_TAG_64) {
    e968:	f890 34e0 	ldrb.w	r3, [r0, #1248]	; 0x4e0
{
    e96c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    struct uwb_pan_instance * pan = (struct uwb_pan_instance *)cbs->inst_ptr;
    e970:	684c      	ldr	r4, [r1, #4]
    if(inst->fctrl_array[0] != FCNTL_IEEE_BLINK_TAG_64) {
    e972:	2b56      	cmp	r3, #86	; 0x56
    e974:	f8b4 6046 	ldrh.w	r6, [r4, #70]	; 0x46
{
    e978:	4605      	mov	r5, r0
    if(inst->fctrl_array[0] != FCNTL_IEEE_BLINK_TAG_64) {
    e97a:	d00a      	beq.n	e992 <rx_complete_cb+0x2a>
        if (dpl_sem_get_count(&pan->sem) == 0) {
    e97c:	b93e      	cbnz	r6, e98e <rx_complete_cb+0x26>
            STATS_INC(g_stat, rx_other_frame);
    e97e:	4a9d      	ldr	r2, [pc, #628]	; (ebf4 <rx_complete_cb+0x28c>)
    e980:	6b53      	ldr	r3, [r2, #52]	; 0x34
    e982:	f104 0040 	add.w	r0, r4, #64	; 0x40
    e986:	3301      	adds	r3, #1
    e988:	6353      	str	r3, [r2, #52]	; 0x34
    e98a:	f7fb f953 	bl	9c34 <os_sem_release>
    switch(frame->code) {
    e98e:	2000      	movs	r0, #0
    e990:	e06c      	b.n	ea6c <rx_complete_cb+0x104>
    if (dpl_sem_get_count(&pan->sem) == 1){
    e992:	2e01      	cmp	r6, #1
    e994:	4f97      	ldr	r7, [pc, #604]	; (ebf4 <rx_complete_cb+0x28c>)
    e996:	d103      	bne.n	e9a0 <rx_complete_cb+0x38>
        STATS_INC(g_stat, rx_unsolicited);
    e998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e99a:	3301      	adds	r3, #1
    e99c:	633b      	str	r3, [r7, #48]	; 0x30
        return false;
    e99e:	e7f6      	b.n	e98e <rx_complete_cb+0x26>
    STATS_INC(g_stat, rx_complete);
    e9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (inst->frame_len > sizeof(union pan_frame_t)) {
    e9a2:	f8b0 24e2 	ldrh.w	r2, [r0, #1250]	; 0x4e2
    STATS_INC(g_stat, rx_complete);
    e9a6:	3301      	adds	r3, #1
    if (inst->frame_len > sizeof(union pan_frame_t)) {
    e9a8:	2a19      	cmp	r2, #25
    STATS_INC(g_stat, rx_complete);
    e9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (inst->frame_len > sizeof(union pan_frame_t)) {
    e9ac:	d8ef      	bhi.n	e98e <rx_complete_cb+0x26>
    union pan_frame_t * frame = pan->frames[(pan->idx)%pan->nframes];
    e9ae:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
    e9b2:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
    e9b6:	fbb3 f0f1 	udiv	r0, r3, r1
    e9ba:	fb01 3310 	mls	r3, r1, r0, r3
    e9be:	b29b      	uxth	r3, r3
    e9c0:	3322      	adds	r3, #34	; 0x22
    memcpy(frame->array, inst->rxbuf, inst->frame_len);
    e9c2:	f8d5 14fc 	ldr.w	r1, [r5, #1276]	; 0x4fc
    union pan_frame_t * frame = pan->frames[(pan->idx)%pan->nframes];
    e9c6:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
    memcpy(frame->array, inst->rxbuf, inst->frame_len);
    e9ca:	4630      	mov	r0, r6
    e9cc:	f000 fe0a 	bl	f5e4 <memcpy>
    if (pan->config->role == UWB_PAN_ROLE_RELAY &&
    e9d0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    e9d4:	7adb      	ldrb	r3, [r3, #11]
    e9d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    e9da:	2b30      	cmp	r3, #48	; 0x30
    e9dc:	d132      	bne.n	ea44 <rx_complete_cb+0xdc>
        frame->rpt_count < frame->rpt_max &&
    e9de:	7ab3      	ldrb	r3, [r6, #10]
    e9e0:	f003 020f 	and.w	r2, r3, #15
    if (pan->config->role == UWB_PAN_ROLE_RELAY &&
    e9e4:	ebb2 1f13 	cmp.w	r2, r3, lsr #4
    e9e8:	d22c      	bcs.n	ea44 <rx_complete_cb+0xdc>
        frame->long_address != inst->my_long_address) {
    e9ea:	f8d6 e002 	ldr.w	lr, [r6, #2]
    e9ee:	f8d6 0006 	ldr.w	r0, [r6, #6]
        frame->rpt_count < frame->rpt_max &&
    e9f2:	f8d5 c4b8 	ldr.w	ip, [r5, #1208]	; 0x4b8
    e9f6:	f8d5 14bc 	ldr.w	r1, [r5, #1212]	; 0x4bc
    e9fa:	4288      	cmp	r0, r1
    e9fc:	bf08      	it	eq
    e9fe:	45e6      	cmpeq	lr, ip
    ea00:	d020      	beq.n	ea44 <rx_complete_cb+0xdc>
        frame->rpt_count++;
    ea02:	3201      	adds	r2, #1
    ea04:	f362 0303 	bfi	r3, r2, #0, #4
    ea08:	72b3      	strb	r3, [r6, #10]
        uwb_set_wait4resp(inst, true);
    ea0a:	2101      	movs	r1, #1
    ea0c:	4628      	mov	r0, r5
    ea0e:	f7ff ffa1 	bl	e954 <uwb_set_wait4resp.isra.0>
        uwb_write_tx_fctrl(inst, inst->frame_len, 0);
    ea12:	f8b5 14e2 	ldrh.w	r1, [r5, #1250]	; 0x4e2
    ea16:	4628      	mov	r0, r5
    ea18:	f7ff ff8a 	bl	e930 <uwb_write_tx_fctrl.constprop.0>
        pan->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    ea1c:	4628      	mov	r0, r5
    ea1e:	f7ff ff06 	bl	e82e <uwb_start_tx>
    ea22:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        uwb_write_tx(inst, frame->array, 0, inst->frame_len);
    ea26:	f8b5 24e2 	ldrh.w	r2, [r5, #1250]	; 0x4e2
        pan->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    ea2a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ea2e:	f360 03c3 	bfi	r3, r0, #3, #1
    ea32:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        uwb_write_tx(inst, frame->array, 0, inst->frame_len);
    ea36:	4631      	mov	r1, r6
    ea38:	4628      	mov	r0, r5
    ea3a:	f7ff ff82 	bl	e942 <uwb_write_tx.constprop.0.isra.0>
        STATS_INC(g_stat, relay_tx);
    ea3e:	6a3b      	ldr	r3, [r7, #32]
    ea40:	3301      	adds	r3, #1
    ea42:	623b      	str	r3, [r7, #32]
    switch(frame->code) {
    ea44:	f8b6 300b 	ldrh.w	r3, [r6, #11]
    ea48:	2b02      	cmp	r3, #2
    ea4a:	d067      	beq.n	eb1c <rx_complete_cb+0x1b4>
    ea4c:	2b03      	cmp	r3, #3
    ea4e:	f000 80b4 	beq.w	ebba <rx_complete_cb+0x252>
    ea52:	2b01      	cmp	r3, #1
    ea54:	d19b      	bne.n	e98e <rx_complete_cb+0x26>
        STATS_INC(g_stat, pan_request);
    ea56:	697b      	ldr	r3, [r7, #20]
    ea58:	3301      	adds	r3, #1
    ea5a:	617b      	str	r3, [r7, #20]
        if (pan->config->role == UWB_PAN_ROLE_MASTER) {
    ea5c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    ea60:	7adb      	ldrb	r3, [r3, #11]
    ea62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    ea66:	2b10      	cmp	r3, #16
    ea68:	d003      	beq.n	ea72 <rx_complete_cb+0x10a>
            return true;
    ea6a:	2001      	movs	r0, #1
}
    ea6c:	b003      	add	sp, #12
    ea6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (dev->uw_funcs->uf_stop_rx(dev));
    ea72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ea74:	4628      	mov	r0, r5
    ea76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ea78:	4798      	blx	r3
    if (!pan->request_cb) {
    ea7a:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
    ea7c:	b3a7      	cbz	r7, eae8 <rx_complete_cb+0x180>
    union pan_frame_t * response = pan->frames[(pan->idx)%pan->nframes];
    ea7e:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    ea82:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
    ea86:	fbb3 f1f2 	udiv	r1, r3, r2
    ea8a:	fb02 3311 	mls	r3, r2, r1, r3
    ea8e:	b29b      	uxth	r3, r3
    ea90:	3322      	adds	r3, #34	; 0x22
    response->code = DWT_PAN_RESP;
    ea92:	f04f 0900 	mov.w	r9, #0
    union pan_frame_t * response = pan->frames[(pan->idx)%pan->nframes];
    ea96:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
    response->code = DWT_PAN_RESP;
    ea9a:	2302      	movs	r3, #2
    ea9c:	f888 300b 	strb.w	r3, [r8, #11]
    eaa0:	f888 900c 	strb.w	r9, [r8, #12]
    if (pan->request_cb(request->long_address, &request->req, &response->req)) {
    eaa4:	f8d6 0002 	ldr.w	r0, [r6, #2]
    eaa8:	f8d6 1006 	ldr.w	r1, [r6, #6]
    eaac:	f108 030d 	add.w	r3, r8, #13
    eab0:	f106 020d 	add.w	r2, r6, #13
    eab4:	47b8      	blx	r7
    eab6:	b1b8      	cbz	r0, eae8 <rx_complete_cb+0x180>
        uwb_set_wait4resp(pan->dev_inst, false);
    eab8:	6820      	ldr	r0, [r4, #0]
    eaba:	4649      	mov	r1, r9
    eabc:	f7ff ff4a 	bl	e954 <uwb_set_wait4resp.isra.0>
        uwb_write_tx_fctrl(pan->dev_inst, sizeof(union pan_frame_t), 0);
    eac0:	6820      	ldr	r0, [r4, #0]
    eac2:	2119      	movs	r1, #25
    eac4:	f7ff ff34 	bl	e930 <uwb_write_tx_fctrl.constprop.0>
        uwb_write_tx(pan->dev_inst, response->array, 0, sizeof(union pan_frame_t));
    eac8:	6820      	ldr	r0, [r4, #0]
    eaca:	2219      	movs	r2, #25
    eacc:	4641      	mov	r1, r8
    eace:	f7ff ff38 	bl	e942 <uwb_write_tx.constprop.0.isra.0>
        pan->status.start_tx_error = uwb_start_tx(pan->dev_inst).start_tx_error;
    ead2:	6820      	ldr	r0, [r4, #0]
    ead4:	f7ff feab 	bl	e82e <uwb_start_tx>
    ead8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    eadc:	f3c0 0080 	ubfx	r0, r0, #2, #1
    eae0:	f360 03c3 	bfi	r3, r0, #3, #1
    eae4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (pan->control.postprocess) {
    eae8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
    eaec:	07db      	lsls	r3, r3, #31
    eaee:	d505      	bpl.n	eafc <rx_complete_cb+0x194>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    eaf0:	f104 0150 	add.w	r1, r4, #80	; 0x50
    eaf4:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    eaf8:	f7fa fce9 	bl	94ce <os_eventq_put>
    if (dpl_sem_get_count(&pan->sem) == 0) {
    eafc:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
    eb00:	2d00      	cmp	r5, #0
    eb02:	d1b2      	bne.n	ea6a <rx_complete_cb+0x102>
    return (dpl_error_t)os_sem_release(&sem->sem);
    eb04:	f104 0040 	add.w	r0, r4, #64	; 0x40
    eb08:	f7fb f894 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
    eb0c:	2800      	cmp	r0, #0
    eb0e:	d0ac      	beq.n	ea6a <rx_complete_cb+0x102>
    eb10:	462b      	mov	r3, r5
    eb12:	462a      	mov	r2, r5
    eb14:	4629      	mov	r1, r5
    eb16:	4628      	mov	r0, r5
    eb18:	f7fa f9ec 	bl	8ef4 <__assert_func>
        if(frame->long_address == inst->my_long_address){
    eb1c:	f8d6 0002 	ldr.w	r0, [r6, #2]
    eb20:	f8d6 2006 	ldr.w	r2, [r6, #6]
    eb24:	f8d5 14b8 	ldr.w	r1, [r5, #1208]	; 0x4b8
    eb28:	f8d5 34bc 	ldr.w	r3, [r5, #1212]	; 0x4bc
    eb2c:	429a      	cmp	r2, r3
    eb2e:	bf08      	it	eq
    eb30:	4288      	cmpeq	r0, r1
    eb32:	d19a      	bne.n	ea6a <rx_complete_cb+0x102>
            inst->uid = frame->req.short_address;
    eb34:	7d32      	ldrb	r2, [r6, #20]
    eb36:	7cf3      	ldrb	r3, [r6, #19]
    eb38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    eb3c:	f8a5 34b6 	strh.w	r3, [r5, #1206]	; 0x4b6
            inst->pan_id = frame->req.pan_id;
    eb40:	7cb2      	ldrb	r2, [r6, #18]
    eb42:	7c73      	ldrb	r3, [r6, #17]
    eb44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    eb48:	f8a5 34c0 	strh.w	r3, [r5, #1216]	; 0x4c0
            inst->slot_id = frame->req.slot_id;
    eb4c:	7d73      	ldrb	r3, [r6, #21]
    eb4e:	7db2      	ldrb	r2, [r6, #22]
    eb50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    eb54:	f8a5 34c2 	strh.w	r3, [r5, #1218]	; 0x4c2
            pan->status.valid = true;
    eb58:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    eb5c:	f023 0314 	bic.w	r3, r3, #20
    eb60:	f043 0304 	orr.w	r3, r3, #4
    os_callout_stop(&co->co);
    eb64:	f104 0760 	add.w	r7, r4, #96	; 0x60
    eb68:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    eb6c:	4638      	mov	r0, r7
    eb6e:	f7fa fb3b 	bl	91e8 <os_callout_stop>
            if (frame->req.lease_time > 0) {
    eb72:	f8b6 600f 	ldrh.w	r6, [r6, #15]
    eb76:	2e00      	cmp	r6, #0
    eb78:	d0b6      	beq.n	eae8 <rx_complete_cb+0x180>
                struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
    eb7a:	2101      	movs	r1, #1
    eb7c:	4628      	mov	r0, r5
    eb7e:	f7f9 ffd7 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
                lease_us = (uint32_t)(frame->req.lease_time)*1000000;
    eb82:	4b1d      	ldr	r3, [pc, #116]	; (ebf8 <rx_complete_cb+0x290>)
                lease_us -= (inst->rxtimestamp>>16) - (ccp->local_epoch>>16);
    eb84:	f8d5 24ec 	ldr.w	r2, [r5, #1260]	; 0x4ec
                lease_us = (uint32_t)(frame->req.lease_time)*1000000;
    eb88:	435e      	muls	r6, r3
                lease_us -= (inst->rxtimestamp>>16) - (ccp->local_epoch>>16);
    eb8a:	f8b5 34ea 	ldrh.w	r3, [r5, #1258]	; 0x4ea
    eb8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    eb92:	1af6      	subs	r6, r6, r3
    eb94:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
    eb98:	f8b0 00da 	ldrh.w	r0, [r0, #218]	; 0xda
    eb9c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    eba0:	4406      	add	r6, r0
    return (dpl_error_t)os_time_ms_to_ticks(ms, out_ticks);
    eba2:	a901      	add	r1, sp, #4
    eba4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    eba8:	fbb6 f0f0 	udiv	r0, r6, r0
    ebac:	f7fb fac2 	bl	a134 <os_time_ms_to_ticks>
    return (dpl_error_t)os_callout_reset(&co->co, ticks);
    ebb0:	9901      	ldr	r1, [sp, #4]
    ebb2:	4638      	mov	r0, r7
    ebb4:	f7fa fb36 	bl	9224 <os_callout_reset>
    ebb8:	e796      	b.n	eae8 <rx_complete_cb+0x180>
        STATS_INC(g_stat, pan_reset);
    ebba:	69fb      	ldr	r3, [r7, #28]
    ebbc:	3301      	adds	r3, #1
    ebbe:	61fb      	str	r3, [r7, #28]
        if (pan->config->role != UWB_PAN_ROLE_MASTER) {
    ebc0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    ebc4:	7adb      	ldrb	r3, [r3, #11]
    ebc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    ebca:	2b10      	cmp	r3, #16
    ebcc:	f43f aedf 	beq.w	e98e <rx_complete_cb+0x26>
            pan->status.valid = false;
    ebd0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    ebd4:	f023 0314 	bic.w	r3, r3, #20
    ebd8:	f043 0310 	orr.w	r3, r3, #16
    ebdc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
            inst->slot_id = 0xffff;
    ebe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ebe4:	f8a5 34c2 	strh.w	r3, [r5, #1218]	; 0x4c2
    os_callout_stop(&co->co);
    ebe8:	f104 0060 	add.w	r0, r4, #96	; 0x60
    ebec:	f7fa fafc 	bl	91e8 <os_callout_stop>
    ebf0:	e6cd      	b.n	e98e <rx_complete_cb+0x26>
    ebf2:	bf00      	nop
    ebf4:	20003c68 	.word	0x20003c68
    ebf8:	000f4240 	.word	0x000f4240

0000ebfc <uwb_pan_init>:
{
    ebfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ebfe:	460f      	mov	r7, r1
    ec00:	4616      	mov	r6, r2
    assert(inst);
    ec02:	4605      	mov	r5, r0
    ec04:	b928      	cbnz	r0, ec12 <uwb_pan_init+0x16>
    ec06:	2300      	movs	r3, #0
    ec08:	461a      	mov	r2, r3
    ec0a:	4619      	mov	r1, r3
    ec0c:	4618      	mov	r0, r3
    ec0e:	f7fa f971 	bl	8ef4 <__assert_func>
    struct uwb_pan_instance *pan = (struct uwb_pan_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_PAN);
    ec12:	2111      	movs	r1, #17
    ec14:	f7f9 ff8c 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    if (pan == NULL ) {
    ec18:	4604      	mov	r4, r0
    ec1a:	b998      	cbnz	r0, ec44 <uwb_pan_init+0x48>
        pan = (struct uwb_pan_instance *) malloc(sizeof(struct uwb_pan_instance) + nframes * sizeof(union pan_frame_t *));
    ec1c:	f106 0022 	add.w	r0, r6, #34	; 0x22
    ec20:	0080      	lsls	r0, r0, #2
    ec22:	f000 fc59 	bl	f4d8 <malloc>
        assert(pan);
    ec26:	4604      	mov	r4, r0
    ec28:	2800      	cmp	r0, #0
    ec2a:	d0ec      	beq.n	ec06 <uwb_pan_init+0xa>
        memset(pan, 0, sizeof(struct uwb_pan_instance));
    ec2c:	2288      	movs	r2, #136	; 0x88
    ec2e:	2100      	movs	r1, #0
    ec30:	f000 fce5 	bl	f5fe <memset>
        pan->status.selfmalloc = 1;
    ec34:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        pan->nframes = nframes;
    ec38:	f8a4 6084 	strh.w	r6, [r4, #132]	; 0x84
        pan->status.selfmalloc = 1;
    ec3c:	f043 0301 	orr.w	r3, r3, #1
    ec40:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    pan->control = (struct uwb_pan_control_t){0};
    ec44:	2300      	movs	r3, #0
    pan->dev_inst = inst;
    ec46:	6025      	str	r5, [r4, #0]
    pan->config = config;
    ec48:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
    pan->control = (struct uwb_pan_control_t){0};
    ec4c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    ec50:	2101      	movs	r1, #1
    ec52:	f104 0040 	add.w	r0, r4, #64	; 0x40
    ec56:	f7fa ffe5 	bl	9c24 <os_sem_init>
    assert(err == DPL_OK);
    ec5a:	4605      	mov	r5, r0
    ec5c:	2800      	cmp	r0, #0
    ec5e:	d1d2      	bne.n	ec06 <uwb_pan_init+0xa>
    uwb_pan_set_postprocess(pan, pan_postprocess);
    ec60:	4620      	mov	r0, r4
    ec62:	4907      	ldr	r1, [pc, #28]	; (ec80 <uwb_pan_init+0x84>)
    ec64:	f7fc fe02 	bl	b86c <uwb_pan_set_postprocess>
    pan->status.initialized = 1;
    ec68:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    pan->request_cb = 0;
    ec6c:	64e5      	str	r5, [r4, #76]	; 0x4c
    pan->status.initialized = 1;
    ec6e:	f023 0306 	bic.w	r3, r3, #6
    ec72:	f043 0306 	orr.w	r3, r3, #6
    ec76:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    ec7a:	4620      	mov	r0, r4
    ec7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ec7e:	bf00      	nop
    ec80:	0000e8b1 	.word	0x0000e8b1

0000ec84 <uwb_pan_set_frames>:
{
    ec84:	b538      	push	{r3, r4, r5, lr}
    assert(nframes <= pan->nframes);
    ec86:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
    ec8a:	4293      	cmp	r3, r2
    ec8c:	d306      	bcc.n	ec9c <uwb_pan_set_frames+0x18>
    ec8e:	3088      	adds	r0, #136	; 0x88
    ec90:	2300      	movs	r3, #0
        pan->frames[i] = &pan_f[i];
    ec92:	2519      	movs	r5, #25
    for (uint16_t i = 0; i < nframes; i++)
    ec94:	b29c      	uxth	r4, r3
    ec96:	42a2      	cmp	r2, r4
    ec98:	d802      	bhi.n	eca0 <uwb_pan_set_frames+0x1c>
}
    ec9a:	bd38      	pop	{r3, r4, r5, pc}
    ec9c:	f7ff fe14 	bl	e8c8 <reset_cb.part.0>
        pan->frames[i] = &pan_f[i];
    eca0:	fb05 1403 	mla	r4, r5, r3, r1
    eca4:	f840 4b04 	str.w	r4, [r0], #4
    for (uint16_t i = 0; i < nframes; i++)
    eca8:	3301      	adds	r3, #1
    ecaa:	e7f3      	b.n	ec94 <uwb_pan_set_frames+0x10>

0000ecac <uwb_pan_pkg_init>:
{
    ecac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    printf("{\"utime\": %"PRIu32",\"msg\": \"pan_pkg_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    ecae:	f002 fadf 	bl	11270 <dpl_cputime_get32>
    ecb2:	4601      	mov	r1, r0
    ecb4:	481a      	ldr	r0, [pc, #104]	; (ed20 <uwb_pan_pkg_init+0x74>)
    ecb6:	f000 ff91 	bl	fbdc <printf>
    dpl_error_t rc = stats_init(
    ecba:	220d      	movs	r2, #13
    ecbc:	4b19      	ldr	r3, [pc, #100]	; (ed24 <uwb_pan_pkg_init+0x78>)
    ecbe:	9200      	str	r2, [sp, #0]
    ecc0:	2104      	movs	r1, #4
    ecc2:	4819      	ldr	r0, [pc, #100]	; (ed28 <uwb_pan_pkg_init+0x7c>)
    ecc4:	f005 fb3e 	bl	14344 <stats_init>
    rc |= stats_register("pan", STATS_HDR(g_stat));
    ecc8:	4917      	ldr	r1, [pc, #92]	; (ed28 <uwb_pan_pkg_init+0x7c>)
    dpl_error_t rc = stats_init(
    ecca:	4604      	mov	r4, r0
    rc |= stats_register("pan", STATS_HDR(g_stat));
    eccc:	4817      	ldr	r0, [pc, #92]	; (ed2c <uwb_pan_pkg_init+0x80>)
    ecce:	f005 fbb9 	bl	14444 <stats_register>
    ecd2:	4320      	orrs	r0, r4
    assert(rc == DPL_OK);
    ecd4:	b240      	sxtb	r0, r0
    ecd6:	b128      	cbz	r0, ece4 <uwb_pan_pkg_init+0x38>
    ecd8:	2300      	movs	r3, #0
    ecda:	461a      	mov	r2, r3
    ecdc:	4619      	mov	r1, r3
    ecde:	4618      	mov	r0, r3
    ece0:	f7fa f908 	bl	8ef4 <__assert_func>
    udev = uwb_dev_idx_lookup(0);
    ece4:	f7f9 feb0 	bl	8a48 <uwb_dev_idx_lookup>
    g_cbs[0].inst_ptr = pan = uwb_pan_init(udev, &g_config, sizeof(g_pan_0)/sizeof(union pan_frame_t));
    ece8:	4911      	ldr	r1, [pc, #68]	; (ed30 <uwb_pan_pkg_init+0x84>)
    ecea:	4e12      	ldr	r6, [pc, #72]	; (ed34 <uwb_pan_pkg_init+0x88>)
    ecec:	2202      	movs	r2, #2
    udev = uwb_dev_idx_lookup(0);
    ecee:	4605      	mov	r5, r0
    g_cbs[0].inst_ptr = pan = uwb_pan_init(udev, &g_config, sizeof(g_pan_0)/sizeof(union pan_frame_t));
    ecf0:	f7ff ff84 	bl	ebfc <uwb_pan_init>
    uwb_pan_set_frames(pan, g_pan_0, sizeof(g_pan_0)/sizeof(union pan_frame_t));
    ecf4:	2202      	movs	r2, #2
    ecf6:	4910      	ldr	r1, [pc, #64]	; (ed38 <uwb_pan_pkg_init+0x8c>)
    g_cbs[0].inst_ptr = pan = uwb_pan_init(udev, &g_config, sizeof(g_pan_0)/sizeof(union pan_frame_t));
    ecf8:	6070      	str	r0, [r6, #4]
    ecfa:	4604      	mov	r4, r0
    uwb_pan_set_frames(pan, g_pan_0, sizeof(g_pan_0)/sizeof(union pan_frame_t));
    ecfc:	f7ff ffc2 	bl	ec84 <uwb_pan_set_frames>
    uwb_mac_append_interface(udev, &g_cbs[0]);
    ed00:	4631      	mov	r1, r6
    ed02:	4628      	mov	r0, r5
    ed04:	f7f9 feca 	bl	8a9c <uwb_mac_append_interface>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    ed08:	f7fa fc88 	bl	961c <os_eventq_dflt_get>
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
    ed0c:	4a0b      	ldr	r2, [pc, #44]	; (ed3c <uwb_pan_pkg_init+0x90>)
    return (struct dpl_eventq *) os_eventq_dflt_get();
    ed0e:	4601      	mov	r1, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
    ed10:	4623      	mov	r3, r4
    ed12:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
    ed16:	b002      	add	sp, #8
    ed18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ed1c:	f7fa ba56 	b.w	91cc <os_callout_init>
    ed20:	000223a8 	.word	0x000223a8
    ed24:	00022409 	.word	0x00022409
    ed28:	20003c68 	.word	0x20003c68
    ed2c:	000223ce 	.word	0x000223ce
    ed30:	20000650 	.word	0x20000650
    ed34:	20000614 	.word	0x20000614
    ed38:	20000660 	.word	0x20000660
    ed3c:	0000e85d 	.word	0x0000e85d

0000ed40 <uwb_pan_listen>:
 *
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
uwb_pan_listen(struct uwb_pan_instance * pan, uwb_dev_modes_t mode)
{
    ed40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    ed42:	f100 0540 	add.w	r5, r0, #64	; 0x40
    ed46:	4604      	mov	r4, r0
    ed48:	460f      	mov	r7, r1
    ed4a:	4628      	mov	r0, r5
    ed4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ed50:	f7fa ffa2 	bl	9c98 <os_sem_pend>
    dpl_error_t err = dpl_sem_pend(&pan->sem,  DPL_TIMEOUT_NEVER);
    assert(err == DPL_OK);
    ed54:	b128      	cbz	r0, ed62 <uwb_pan_listen+0x22>
    ed56:	2300      	movs	r3, #0
    ed58:	461a      	mov	r2, r3
    ed5a:	4619      	mov	r1, r3
    ed5c:	4618      	mov	r0, r3
    ed5e:	f7fa f8c9 	bl	8ef4 <__assert_func>

    STATS_INC(g_stat, pan_listen);
    ed62:	4e11      	ldr	r6, [pc, #68]	; (eda8 <uwb_pan_listen+0x68>)

    if(uwb_start_rx(pan->dev_inst).start_rx_error){
    ed64:	6820      	ldr	r0, [r4, #0]
    STATS_INC(g_stat, pan_listen);
    ed66:	69b3      	ldr	r3, [r6, #24]
    ed68:	3301      	adds	r3, #1
    ed6a:	61b3      	str	r3, [r6, #24]
    return (dev->uw_funcs->uf_start_rx(dev));
    ed6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ed6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ed70:	4798      	blx	r3
    if(uwb_start_rx(pan->dev_inst).start_rx_error){
    ed72:	0703      	lsls	r3, r0, #28
    ed74:	d507      	bpl.n	ed86 <uwb_pan_listen+0x46>
        STATS_INC(g_stat, rx_error);
    ed76:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    return (dpl_error_t)os_sem_release(&sem->sem);
    ed78:	4628      	mov	r0, r5
    ed7a:	3301      	adds	r3, #1
    ed7c:	63b3      	str	r3, [r6, #56]	; 0x38
    ed7e:	f7fa ff59 	bl	9c34 <os_sem_release>
        err = dpl_sem_release(&pan->sem);
        assert(err == DPL_OK);
    ed82:	2800      	cmp	r0, #0
    ed84:	d1e7      	bne.n	ed56 <uwb_pan_listen+0x16>
    }

    if (mode == UWB_BLOCKING){
    ed86:	b95f      	cbnz	r7, eda0 <uwb_pan_listen+0x60>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    ed88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ed8c:	4628      	mov	r0, r5
    ed8e:	f7fa ff83 	bl	9c98 <os_sem_pend>
        err = dpl_sem_pend(&pan->sem, DPL_TIMEOUT_NEVER);
        assert(err == DPL_OK);
    ed92:	2800      	cmp	r0, #0
    ed94:	d1df      	bne.n	ed56 <uwb_pan_listen+0x16>
    return (dpl_error_t)os_sem_release(&sem->sem);
    ed96:	4628      	mov	r0, r5
    ed98:	f7fa ff4c 	bl	9c34 <os_sem_release>
        err = dpl_sem_release(&pan->sem);
        assert(err == DPL_OK);
    ed9c:	2800      	cmp	r0, #0
    ed9e:	d1da      	bne.n	ed56 <uwb_pan_listen+0x16>
    }

    return pan->dev_inst->status;
    eda0:	6823      	ldr	r3, [r4, #0]
}
    eda2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    eda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eda8:	20003c68 	.word	0x20003c68

0000edac <uwb_pan_blink>:
 * @return uwb_pan_status_t
 */
struct uwb_pan_status_t
uwb_pan_blink(struct uwb_pan_instance *pan, uint16_t role,
                 uwb_dev_modes_t mode, uint64_t delay)
{
    edac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    edb0:	f100 0640 	add.w	r6, r0, #64	; 0x40
    edb4:	4604      	mov	r4, r0
    edb6:	4689      	mov	r9, r1
    edb8:	4630      	mov	r0, r6
    edba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    edbe:	4690      	mov	r8, r2
    edc0:	f7fa ff6a 	bl	9c98 <os_sem_pend>
    dpl_error_t err = dpl_sem_pend(&pan->sem,  DPL_TIMEOUT_NEVER);
    assert(err == DPL_OK);
    edc4:	b128      	cbz	r0, edd2 <uwb_pan_blink+0x26>
    edc6:	2300      	movs	r3, #0
    edc8:	461a      	mov	r2, r3
    edca:	4619      	mov	r1, r3
    edcc:	4618      	mov	r0, r3
    edce:	f7fa f891 	bl	8ef4 <__assert_func>

    STATS_INC(g_stat, pan_request);
    edd2:	4f3d      	ldr	r7, [pc, #244]	; (eec8 <uwb_pan_blink+0x11c>)
    union pan_frame_t * frame = pan->frames[(pan->idx)%pan->nframes];
    edd4:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    STATS_INC(g_stat, pan_request);
    edd8:	697b      	ldr	r3, [r7, #20]
    edda:	3301      	adds	r3, #1
    eddc:	617b      	str	r3, [r7, #20]
    union pan_frame_t * frame = pan->frames[(pan->idx)%pan->nframes];
    edde:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
    ede2:	fbb3 f1f2 	udiv	r1, r3, r2
    ede6:	fb02 3311 	mls	r3, r2, r1, r3
    edea:	b29b      	uxth	r3, r3
    edec:	3322      	adds	r3, #34	; 0x22

    frame->seq_num += pan->nframes;
    frame->long_address = pan->dev_inst->euid;
    frame->code = DWT_PAN_REQ;
    edee:	f04f 0a01 	mov.w	sl, #1
    union pan_frame_t * frame = pan->frames[(pan->idx)%pan->nframes];
    edf2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    frame->seq_num += pan->nframes;
    edf6:	786b      	ldrb	r3, [r5, #1]
    edf8:	4413      	add	r3, r2
    edfa:	706b      	strb	r3, [r5, #1]
    frame->long_address = pan->dev_inst->euid;
    edfc:	6823      	ldr	r3, [r4, #0]
    edfe:	f8d3 24b8 	ldr.w	r2, [r3, #1208]	; 0x4b8
    ee02:	f8c5 2002 	str.w	r2, [r5, #2]
    ee06:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
    ee0a:	f853 3c04 	ldr.w	r3, [r3, #-4]
    ee0e:	f8c5 3006 	str.w	r3, [r5, #6]
    frame->rpt_count = 0;
    ee12:	2320      	movs	r3, #32
    ee14:	72ab      	strb	r3, [r5, #10]
    frame->rpt_max = MYNEWT_VAL(UWB_PAN_RPT_MAX);
    frame->req.role = role;
    frame->req.lease_time = pan->config->lease_time;
    ee16:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    frame->code = DWT_PAN_REQ;
    ee1a:	7328      	strb	r0, [r5, #12]
    frame->req.lease_time = pan->config->lease_time;
    ee1c:	899b      	ldrh	r3, [r3, #12]
    ee1e:	f8a5 300f 	strh.w	r3, [r5, #15]
    frame->code = DWT_PAN_REQ;
    ee22:	f885 a00b 	strb.w	sl, [r5, #11]
    frame->req.role = role;
    ee26:	f8a5 900d 	strh.w	r9, [r5, #13]

#if MYNEWT_VAL(UWB_PAN_VERSION_ENABLED)
    struct image_version iv;
    imgr_my_version(&iv);
    ee2a:	4668      	mov	r0, sp
    ee2c:	f001 f88c 	bl	ff48 <imgr_my_version>
    frame->req.fw_ver.iv_major = iv.iv_major;
    ee30:	f89d 3000 	ldrb.w	r3, [sp]
    ee34:	746b      	strb	r3, [r5, #17]
    frame->req.fw_ver.iv_minor = iv.iv_minor;
    ee36:	f89d 3001 	ldrb.w	r3, [sp, #1]
    ee3a:	74ab      	strb	r3, [r5, #18]
    frame->req.fw_ver.iv_revision = iv.iv_revision;
    ee3c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    ee40:	f8a5 3013 	strh.w	r3, [r5, #19]
    frame->req.fw_ver.iv_build_num = iv.iv_build_num;
    ee44:	9b01      	ldr	r3, [sp, #4]
#endif

    uwb_set_delay_start(pan->dev_inst, delay);
    ee46:	6820      	ldr	r0, [r4, #0]
    frame->req.fw_ver.iv_build_num = iv.iv_build_num;
    ee48:	f8c5 3015 	str.w	r3, [r5, #21]
    uwb_set_delay_start(pan->dev_inst, delay);
    ee4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    ee50:	f7ff fd83 	bl	e95a <uwb_set_delay_start.isra.0>
    uwb_write_tx_fctrl(pan->dev_inst, sizeof(union pan_frame_t), 0);
    ee54:	6820      	ldr	r0, [r4, #0]
    ee56:	2119      	movs	r1, #25
    ee58:	f7ff fd6a 	bl	e930 <uwb_write_tx_fctrl.constprop.0>
    uwb_write_tx(pan->dev_inst, frame->array, 0, sizeof(union pan_frame_t));
    ee5c:	2219      	movs	r2, #25
    ee5e:	6820      	ldr	r0, [r4, #0]
    ee60:	4629      	mov	r1, r5
    ee62:	f7ff fd6e 	bl	e942 <uwb_write_tx.constprop.0.isra.0>
    uwb_set_wait4resp(pan->dev_inst, true);
    ee66:	6820      	ldr	r0, [r4, #0]
    ee68:	4651      	mov	r1, sl
    ee6a:	f7ff fd73 	bl	e954 <uwb_set_wait4resp.isra.0>
    uwb_set_rx_timeout(pan->dev_inst, pan->config->rx_timeout_period);
    ee6e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    ee72:	6820      	ldr	r0, [r4, #0]
    ee74:	8899      	ldrh	r1, [r3, #4]
    ee76:	f7ff fd73 	bl	e960 <uwb_set_rx_timeout.isra.0>
    pan->status.start_tx_error = uwb_start_tx(pan->dev_inst).start_tx_error;
    ee7a:	6820      	ldr	r0, [r4, #0]
    ee7c:	f7ff fcd7 	bl	e82e <uwb_start_tx>
    ee80:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    ee84:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ee88:	f360 03c3 	bfi	r3, r0, #3, #1
    ee8c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48

    if (pan->status.start_tx_error){
    ee90:	071b      	lsls	r3, r3, #28
    ee92:	d50a      	bpl.n	eeaa <uwb_pan_blink+0xfe>
        STATS_INC(g_stat, tx_error);
    ee94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    return (dpl_error_t)os_sem_release(&sem->sem);
    ee96:	4630      	mov	r0, r6
    ee98:	4453      	add	r3, sl
    ee9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    ee9c:	f7fa feca 	bl	9c34 <os_sem_release>
        err = dpl_sem_pend(&pan->sem, DPL_TIMEOUT_NEVER); // Wait for completion of transactions
        dpl_sem_release(&pan->sem);
        assert(err == DPL_OK);
    }
    return pan->status;
}
    eea0:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
    eea4:	b002      	add	sp, #8
    eea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(mode == UWB_BLOCKING){
    eeaa:	f1b8 0f00 	cmp.w	r8, #0
    eeae:	d1f7      	bne.n	eea0 <uwb_pan_blink+0xf4>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    eeb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    eeb4:	4630      	mov	r0, r6
    eeb6:	f7fa feef 	bl	9c98 <os_sem_pend>
    eeba:	4605      	mov	r5, r0
    return (dpl_error_t)os_sem_release(&sem->sem);
    eebc:	4630      	mov	r0, r6
    eebe:	f7fa feb9 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
    eec2:	2d00      	cmp	r5, #0
    eec4:	d0ec      	beq.n	eea0 <uwb_pan_blink+0xf4>
    eec6:	e77e      	b.n	edc6 <uwb_pan_blink+0x1a>
    eec8:	20003c68 	.word	0x20003c68

0000eecc <uwb_pan_reset>:
 *
 * @return uwb_pan_status_t
 */
struct uwb_pan_status_t
uwb_pan_reset(struct uwb_pan_instance * pan, uint64_t delay)
{
    eecc:	b570      	push	{r4, r5, r6, lr}
    eece:	4604      	mov	r4, r0
    union pan_frame_t * frame = pan->frames[(pan->idx)%pan->nframes];
    eed0:	f8b0 0084 	ldrh.w	r0, [r0, #132]	; 0x84
    eed4:	f8b4 1086 	ldrh.w	r1, [r4, #134]	; 0x86
    eed8:	fbb1 f5f0 	udiv	r5, r1, r0
    eedc:	fb00 1115 	mls	r1, r0, r5, r1
    eee0:	b289      	uxth	r1, r1
    eee2:	3122      	adds	r1, #34	; 0x22
    eee4:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]

    frame->seq_num += pan->nframes;
    eee8:	7869      	ldrb	r1, [r5, #1]
    eeea:	4401      	add	r1, r0
    frame->long_address = pan->dev_inst->euid;
    eeec:	6820      	ldr	r0, [r4, #0]
    frame->seq_num += pan->nframes;
    eeee:	7069      	strb	r1, [r5, #1]
    frame->long_address = pan->dev_inst->euid;
    eef0:	f8d0 64b8 	ldr.w	r6, [r0, #1208]	; 0x4b8
    eef4:	f8d0 14bc 	ldr.w	r1, [r0, #1212]	; 0x4bc
    eef8:	f8c5 6002 	str.w	r6, [r5, #2]
    eefc:	f8c5 1006 	str.w	r1, [r5, #6]
    frame->code = DWT_PAN_RESET;
    ef00:	2600      	movs	r6, #0
    ef02:	2103      	movs	r1, #3
    ef04:	72e9      	strb	r1, [r5, #11]
    ef06:	732e      	strb	r6, [r5, #12]

    uwb_set_delay_start(pan->dev_inst, delay);
    ef08:	f7ff fd27 	bl	e95a <uwb_set_delay_start.isra.0>
    uwb_write_tx_fctrl(pan->dev_inst, sizeof(union pan_frame_t), 0);
    ef0c:	6820      	ldr	r0, [r4, #0]
    ef0e:	2119      	movs	r1, #25
    ef10:	f7ff fd0e 	bl	e930 <uwb_write_tx_fctrl.constprop.0>
    uwb_write_tx(pan->dev_inst, frame->array, 0, sizeof(union pan_frame_t));
    ef14:	2219      	movs	r2, #25
    ef16:	6820      	ldr	r0, [r4, #0]
    ef18:	4629      	mov	r1, r5
    ef1a:	f7ff fd12 	bl	e942 <uwb_write_tx.constprop.0.isra.0>
    uwb_set_wait4resp(pan->dev_inst, false);
    ef1e:	6820      	ldr	r0, [r4, #0]
    ef20:	4631      	mov	r1, r6
    ef22:	f7ff fd17 	bl	e954 <uwb_set_wait4resp.isra.0>
    pan->status.start_tx_error = uwb_start_tx(pan->dev_inst).start_tx_error;
    ef26:	6820      	ldr	r0, [r4, #0]
    ef28:	f7ff fc81 	bl	e82e <uwb_start_tx>
    ef2c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    ef30:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ef34:	f360 03c3 	bfi	r3, r0, #3, #1
    ef38:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48

    if (pan->status.start_tx_error){
    ef3c:	071b      	lsls	r3, r3, #28
        STATS_INC(g_stat, tx_error);
    ef3e:	bf48      	it	mi
    ef40:	4a03      	ldrmi	r2, [pc, #12]	; (ef50 <uwb_pan_reset+0x84>)
        DIAGMSG("{\"utime\": %lu,\"msg\": \"pan_reset_tx_err\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    }
    return pan->status;
}
    ef42:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
        STATS_INC(g_stat, tx_error);
    ef46:	bf42      	ittt	mi
    ef48:	6bd3      	ldrmi	r3, [r2, #60]	; 0x3c
    ef4a:	3301      	addmi	r3, #1
    ef4c:	63d3      	strmi	r3, [r2, #60]	; 0x3c
}
    ef4e:	bd70      	pop	{r4, r5, r6, pc}
    ef50:	20003c68 	.word	0x20003c68

0000ef54 <uwb_pan_start>:
 *
 * @return void
 */
void
uwb_pan_start(struct uwb_pan_instance * pan, enum uwb_pan_role_t role, network_role_t network_role)
{
    ef54:	b510      	push	{r4, lr}
    pan->config->role = role;
    ef56:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
    ef5a:	7ae3      	ldrb	r3, [r4, #11]
    pan->config->network_role = network_role;
    ef5c:	81e2      	strh	r2, [r4, #14]
    pan->config->role = role;
    ef5e:	f361 1307 	bfi	r3, r1, #4, #4
    ef62:	72e3      	strb	r3, [r4, #11]

    if (pan->config->role == UWB_PAN_ROLE_MASTER) {
        /* Nothing for now */
    } else if (pan->config->role == UWB_PAN_ROLE_SLAVE) {
    ef64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    ef68:	2b20      	cmp	r3, #32
    ef6a:	d108      	bne.n	ef7e <uwb_pan_start+0x2a>
        pan->idx = 0x1;
    ef6c:	2301      	movs	r3, #1
    ef6e:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
        pan->status.valid = false;
    ef72:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    ef76:	f36f 0382 	bfc	r3, #2, #1
    ef7a:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
               dpl_cputime_ticks_to_usecs(dpl_cputime_get32()),
               "Provisioning"
            );
#endif
    }
}
    ef7e:	bd10      	pop	{r4, pc}

0000ef80 <uwb_pan_lease_remaining>:
 *
 * @return uint32_t ms to expiry, 0 if already expired
 */
uint32_t
uwb_pan_lease_remaining(struct uwb_pan_instance * pan)
{
    ef80:	b510      	push	{r4, lr}
    ef82:	4604      	mov	r4, r0
    return os_time_get();
    ef84:	f7fa ffc8 	bl	9f18 <os_time_get>
    ef88:	4601      	mov	r1, r0
    return os_callout_remaining_ticks(&co->co, time);
    ef8a:	f104 0060 	add.w	r0, r4, #96	; 0x60
    ef8e:	f7fa f9c5 	bl	931c <os_callout_remaining_ticks>
os_time_ticks_to_ms32(os_time_t ticks)
{
#if OS_TICKS_PER_SEC == 1000
    return ticks;
#else
    return ((uint64_t)ticks * 1000) / OS_TICKS_PER_SEC;
    ef92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    ef96:	fba0 3003 	umull	r3, r0, r0, r3
    ef9a:	09db      	lsrs	r3, r3, #7
    dpl_time_t rt = dpl_callout_remaining_ticks(&pan->pan_lease_callout_expiry, dpl_time_get());
    return dpl_time_ticks_to_ms32(rt);
}
    ef9c:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
    efa0:	bd10      	pop	{r4, pc}
	...

0000efa4 <uwb_pan_slot_timer_cb>:
 *
 * @return void
 */
void
uwb_pan_slot_timer_cb(struct dpl_event * ev)
{
    efa4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    assert(ev);
    efa6:	b928      	cbnz	r0, efb4 <uwb_pan_slot_timer_cb+0x10>
    efa8:	2300      	movs	r3, #0
    efaa:	461a      	mov	r2, r3
    efac:	4619      	mov	r1, r3
    efae:	4618      	mov	r0, r3
    efb0:	f7f9 ffa0 	bl	8ef4 <__assert_func>
    return ev->ev.ev_arg;
    efb4:	6883      	ldr	r3, [r0, #8]
    tdma_slot_t * slot = (tdma_slot_t *) dpl_event_get_arg(ev);

    tdma_instance_t * tdma = slot->parent;
    efb6:	689c      	ldr	r4, [r3, #8]
    struct uwb_ccp_instance *ccp = tdma->ccp;
    struct uwb_pan_instance *pan = (struct uwb_pan_instance*)slot->arg;
    efb8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    struct uwb_ccp_instance *ccp = tdma->ccp;
    efba:	6866      	ldr	r6, [r4, #4]
    assert(pan);
    efbc:	2d00      	cmp	r5, #0
    efbe:	d0f3      	beq.n	efa8 <uwb_pan_slot_timer_cb+0x4>
    uint16_t idx = slot->idx;
    efc0:	881b      	ldrh	r3, [r3, #0]
    efc2:	ee00 3a10 	vmov	s0, r3

    /* Check if we are to act as a Master Node in the network */
    if (tdma->dev_inst->role&UWB_ROLE_PAN_MASTER) {
    efc6:	6823      	ldr	r3, [r4, #0]
    efc8:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
    efcc:	f013 0f02 	tst.w	r3, #2
    efd0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    efd4:	d033      	beq.n	f03e <uwb_pan_slot_timer_cb+0x9a>
        static uint8_t _pan_cycles = 0;

        /* Broadcast an initial reset message to clear all leases */
        if (_pan_cycles < 8) {
    efd6:	4a4b      	ldr	r2, [pc, #300]	; (f104 <uwb_pan_slot_timer_cb+0x160>)
    efd8:	7813      	ldrb	r3, [r2, #0]
    efda:	2b07      	cmp	r3, #7
    efdc:	d80c      	bhi.n	eff8 <uwb_pan_slot_timer_cb+0x54>
            _pan_cycles++;
    efde:	3301      	adds	r3, #1
            uwb_pan_reset(pan, tdma_tx_slot_start(tdma, idx));
    efe0:	4620      	mov	r0, r4
            _pan_cycles++;
    efe2:	7013      	strb	r3, [r2, #0]
            uwb_pan_reset(pan, tdma_tx_slot_start(tdma, idx));
    efe4:	f7fe fbac 	bl	d740 <tdma_tx_slot_start>
    efe8:	4602      	mov	r2, r0
    efea:	460b      	mov	r3, r1
    efec:	4628      	mov	r0, r5
            /* Subslot 0 is for master reset, subslot 1 is for sending requests */
            uint64_t dx_time = tdma_tx_slot_start(tdma, (float)idx+1.0f/16);
            uwb_pan_blink(pan, pan->config->network_role, UWB_BLOCKING, dx_time);
        }
    }
}
    efee:	b004      	add	sp, #16
    eff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            uwb_pan_reset(pan, tdma_tx_slot_start(tdma, idx));
    eff4:	f7ff bf6a 	b.w	eecc <uwb_pan_reset>
            uint64_t dx_time = tdma_rx_slot_start(tdma, idx);
    eff8:	4620      	mov	r0, r4
    effa:	f7fe fb6e 	bl	d6da <tdma_rx_slot_start>
            uwb_set_rx_timeout(tdma->dev_inst, 3*ccp->period/tdma->nslots/4);
    effe:	f8d6 60e8 	ldr.w	r6, [r6, #232]	; 0xe8
            uint64_t dx_time = tdma_rx_slot_start(tdma, idx);
    f002:	9003      	str	r0, [sp, #12]
    f004:	9102      	str	r1, [sp, #8]
            uwb_set_rx_timeout(tdma->dev_inst, 3*ccp->period/tdma->nslots/4);
    f006:	6820      	ldr	r0, [r4, #0]
    f008:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    f00c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    f010:	fbb6 f1f1 	udiv	r1, r6, r1
    f014:	0889      	lsrs	r1, r1, #2
    f016:	f7ff fca3 	bl	e960 <uwb_set_rx_timeout.isra.0>
            uwb_set_delay_start(tdma->dev_inst, dx_time);
    f01a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    f01e:	6820      	ldr	r0, [r4, #0]
    f020:	f7ff fc9b 	bl	e95a <uwb_set_delay_start.isra.0>
            uwb_set_on_error_continue(tdma->dev_inst, true);
    f024:	6820      	ldr	r0, [r4, #0]
 *
 */
UWB_API_IMPL_PREFIX struct uwb_dev_status
uwb_set_on_error_continue(struct uwb_dev * dev, bool enable)
{
    return (dev->uw_funcs->uf_set_on_error_continue(dev, enable));
    f026:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f028:	2101      	movs	r1, #1
    f02a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    f02e:	4798      	blx	r3
            uwb_pan_listen(pan, UWB_BLOCKING);
    f030:	2100      	movs	r1, #0
    f032:	4628      	mov	r0, r5
}
    f034:	b004      	add	sp, #16
    f036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            uwb_pan_listen(pan, UWB_BLOCKING);
    f03a:	f7ff be81 	b.w	ed40 <uwb_pan_listen>
        if (pan->status.valid && uwb_pan_lease_remaining(pan)>MYNEWT_VAL(UWB_PAN_LEASE_EXP_MARGIN)) {
    f03e:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    f042:	075a      	lsls	r2, r3, #29
    f044:	d54a      	bpl.n	f0dc <uwb_pan_slot_timer_cb+0x138>
    f046:	4628      	mov	r0, r5
    f048:	ed8d 0a02 	vstr	s0, [sp, #8]
    f04c:	f7ff ff98 	bl	ef80 <uwb_pan_lease_remaining>
    f050:	f64e 2360 	movw	r3, #60000	; 0xea60
    f054:	4298      	cmp	r0, r3
    f056:	ed9d 0a02 	vldr	s0, [sp, #8]
    f05a:	d93f      	bls.n	f0dc <uwb_pan_slot_timer_cb+0x138>
            if (pan->config->role == UWB_PAN_ROLE_RELAY) {
    f05c:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    f060:	7adb      	ldrb	r3, [r3, #11]
    f062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    f066:	2b30      	cmp	r3, #48	; 0x30
    f068:	d12b      	bne.n	f0c2 <uwb_pan_slot_timer_cb+0x11e>
                timeout = 3*ccp->period/tdma->nslots/4;
    f06a:	f8d6 10e8 	ldr.w	r1, [r6, #232]	; 0xe8
    f06e:	f8b4 007a 	ldrh.w	r0, [r4, #122]	; 0x7a
    f072:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    f076:	fbb1 f1f0 	udiv	r1, r1, r0
    f07a:	f3c1 018f 	ubfx	r1, r1, #2, #16
            uwb_set_rx_timeout(tdma->dev_inst, timeout);
    f07e:	6820      	ldr	r0, [r4, #0]
    f080:	ed8d 0a02 	vstr	s0, [sp, #8]
    f084:	f7ff fc6c 	bl	e960 <uwb_set_rx_timeout.isra.0>
            uwb_set_delay_start(tdma->dev_inst, tdma_rx_slot_start(tdma, idx));
    f088:	ed9d 0a02 	vldr	s0, [sp, #8]
    f08c:	6826      	ldr	r6, [r4, #0]
    f08e:	4620      	mov	r0, r4
    f090:	f7fe fb23 	bl	d6da <tdma_rx_slot_start>
    f094:	4602      	mov	r2, r0
    f096:	460b      	mov	r3, r1
    f098:	4630      	mov	r0, r6
    f09a:	f7ff fc5e 	bl	e95a <uwb_set_delay_start.isra.0>
            uwb_set_on_error_continue(tdma->dev_inst, true);
    f09e:	6820      	ldr	r0, [r4, #0]
    f0a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f0a2:	2101      	movs	r1, #1
    f0a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    f0a8:	4798      	blx	r3
            if (uwb_pan_listen(pan, UWB_BLOCKING).start_rx_error) {
    f0aa:	2100      	movs	r1, #0
    f0ac:	4628      	mov	r0, r5
    f0ae:	f7ff fe47 	bl	ed40 <uwb_pan_listen>
    f0b2:	0703      	lsls	r3, r0, #28
    f0b4:	d503      	bpl.n	f0be <uwb_pan_slot_timer_cb+0x11a>
                STATS_INC(g_stat, rx_error);
    f0b6:	4a14      	ldr	r2, [pc, #80]	; (f108 <uwb_pan_slot_timer_cb+0x164>)
    f0b8:	6b93      	ldr	r3, [r2, #56]	; 0x38
    f0ba:	3301      	adds	r3, #1
    f0bc:	6393      	str	r3, [r2, #56]	; 0x38
}
    f0be:	b004      	add	sp, #16
    f0c0:	bd70      	pop	{r4, r5, r6, pc}
                timeout = uwb_phy_frame_duration(tdma->dev_inst, sizeof(sizeof(union pan_frame_t)))
    f0c2:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    f0c4:	ed8d 0a02 	vstr	s0, [sp, #8]
    f0c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f0ca:	2104      	movs	r1, #4
    f0cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f0ce:	4798      	blx	r3
    f0d0:	f500 7080 	add.w	r0, r0, #256	; 0x100
    f0d4:	ed9d 0a02 	vldr	s0, [sp, #8]
    f0d8:	b281      	uxth	r1, r0
    f0da:	e7d0      	b.n	f07e <uwb_pan_slot_timer_cb+0xda>
            uint64_t dx_time = tdma_tx_slot_start(tdma, (float)idx+1.0f/16);
    f0dc:	eddf 7a0b 	vldr	s15, [pc, #44]	; f10c <uwb_pan_slot_timer_cb+0x168>
    f0e0:	4620      	mov	r0, r4
    f0e2:	ee30 0a27 	vadd.f32	s0, s0, s15
    f0e6:	f7fe fb2b 	bl	d740 <tdma_tx_slot_start>
    f0ea:	460b      	mov	r3, r1
            uwb_pan_blink(pan, pan->config->network_role, UWB_BLOCKING, dx_time);
    f0ec:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
            uint64_t dx_time = tdma_tx_slot_start(tdma, (float)idx+1.0f/16);
    f0f0:	4602      	mov	r2, r0
            uwb_pan_blink(pan, pan->config->network_role, UWB_BLOCKING, dx_time);
    f0f2:	89c9      	ldrh	r1, [r1, #14]
    f0f4:	4628      	mov	r0, r5
    f0f6:	e9cd 2300 	strd	r2, r3, [sp]
    f0fa:	2200      	movs	r2, #0
    f0fc:	f7ff fe56 	bl	edac <uwb_pan_blink>
}
    f100:	e7dd      	b.n	f0be <uwb_pan_slot_timer_cb+0x11a>
    f102:	bf00      	nop
    f104:	20003c64 	.word	0x20003c64
    f108:	20003c68 	.word	0x20003c68
    f10c:	3d800000 	.word	0x3d800000

0000f110 <NumberOfBits>:
 *
 * @return number of set bits
 */
uint32_t
NumberOfBits(uint32_t n) {
    uint32_t count = 0;
    f110:	2300      	movs	r3, #0
    while (n) {
    f112:	b908      	cbnz	r0, f118 <NumberOfBits+0x8>
        n &= (n-1);
        count++;
    }
    return count;
}
    f114:	4618      	mov	r0, r3
    f116:	4770      	bx	lr
        n &= (n-1);
    f118:	1e42      	subs	r2, r0, #1
    f11a:	4010      	ands	r0, r2
        count++;
    f11c:	3301      	adds	r3, #1
    f11e:	e7f8      	b.n	f112 <NumberOfBits+0x2>

0000f120 <BitPosition>:
 *
 * @param n bitfield to count bits within
 *
 * @return number of set bits
 */
uint32_t BitPosition(uint32_t n) {
    f120:	b508      	push	{r3, lr}
    uint32_t count = 0;
    assert(n && (! (n & (n-1)) )); // single bit set
    f122:	b110      	cbz	r0, f12a <BitPosition+0xa>
    f124:	1e43      	subs	r3, r0, #1
    f126:	4003      	ands	r3, r0
    f128:	d005      	beq.n	f136 <BitPosition+0x16>
    f12a:	2300      	movs	r3, #0
    f12c:	461a      	mov	r2, r3
    f12e:	4619      	mov	r1, r3
    f130:	4618      	mov	r0, r3
    f132:	f7f9 fedf 	bl	8ef4 <__assert_func>

    while (n){
    f136:	0840      	lsrs	r0, r0, #1
        n = n >> 1;
        ++count; // position of bit within bitfield
    f138:	f103 0301 	add.w	r3, r3, #1
    while (n){
    f13c:	d1fb      	bne.n	f136 <BitPosition+0x16>
    }
    return count;
}
    f13e:	4618      	mov	r0, r3
    f140:	bd08      	pop	{r3, pc}

0000f142 <BitIndex>:
 *
 * @return numerical ordering of a bit witin bitmask.
 */
uint32_t
BitIndex(uint32_t nslots_mask, uint32_t n, slot_mode_t mode)
{
    f142:	b538      	push	{r3, r4, r5, lr}
    f144:	4604      	mov	r4, r0
    f146:	4615      	mov	r5, r2
    uint32_t idx, slot_mask, remaining_mask;
    assert(n && (! (n & (n-1)) ));  // single bit set
    f148:	4608      	mov	r0, r1
    f14a:	b111      	cbz	r1, f152 <BitIndex+0x10>
    f14c:	1e4b      	subs	r3, r1, #1
    f14e:	420b      	tst	r3, r1
    f150:	d005      	beq.n	f15e <BitIndex+0x1c>
    f152:	2300      	movs	r3, #0
    f154:	461a      	mov	r2, r3
    f156:	4619      	mov	r1, r3
    f158:	4618      	mov	r0, r3
    f15a:	f7f9 fecb 	bl	8ef4 <__assert_func>
    assert(n & nslots_mask);        // bit set is within ROI
    f15e:	4221      	tst	r1, r4
    f160:	d0f7      	beq.n	f152 <BitIndex+0x10>

    idx = BitPosition(n);
    f162:	f7ff ffdd 	bl	f120 <BitPosition>
    slot_mask =  (((uint32_t)~0UL >> (sizeof(uint32_t) * 8 - idx)));
    remaining_mask = ((uint32_t)~0UL << idx);

    if (mode == SLOT_POSITION)
    f166:	2d01      	cmp	r5, #1
    f168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    slot_mask =  (((uint32_t)~0UL >> (sizeof(uint32_t) * 8 - idx)));
    f16c:	bf05      	ittet	eq
    f16e:	f1c0 0220 	rsbeq	r2, r0, #32
    f172:	40d3      	lsreq	r3, r2
    remaining_mask = ((uint32_t)~0UL << idx);
    f174:	fa03 f000 	lslne.w	r0, r3, r0
        return NumberOfBits(nslots_mask & slot_mask) - 1; // slot position
    f178:	ea03 0004 	andeq.w	r0, r3, r4
    else
        return NumberOfBits(nslots_mask & remaining_mask) - 1; // no. of slots remaining
    f17c:	bf18      	it	ne
    f17e:	4020      	andne	r0, r4
    f180:	f7ff ffc6 	bl	f110 <NumberOfBits>
    f184:	3801      	subs	r0, #1
}
    f186:	bd38      	pop	{r3, r4, r5, pc}

0000f188 <uwb_wcs_free.part.0>:
 *
 * returns struct uwb_wcs_instance *
 */

struct uwb_wcs_instance *
uwb_wcs_init(struct uwb_wcs_instance * wcs, struct uwb_ccp_instance * ccp)
    f188:	b508      	push	{r3, lr}
{
    if (wcs == NULL ) {
        wcs = (struct uwb_wcs_instance *) calloc(1, sizeof(struct uwb_wcs_instance));
        assert(wcs);
    f18a:	2300      	movs	r3, #0
    f18c:	461a      	mov	r2, r3
    f18e:	4619      	mov	r1, r3
    f190:	4618      	mov	r0, r3
    f192:	f7f9 feaf 	bl	8ef4 <__assert_func>
	...

0000f198 <uwb_wcs_init>:
{
    f198:	b510      	push	{r4, lr}
    f19a:	460c      	mov	r4, r1
    if (wcs == NULL ) {
    f19c:	b950      	cbnz	r0, f1b4 <uwb_wcs_init+0x1c>
        wcs = (struct uwb_wcs_instance *) calloc(1, sizeof(struct uwb_wcs_instance));
    f19e:	21a8      	movs	r1, #168	; 0xa8
    f1a0:	2001      	movs	r0, #1
    f1a2:	f000 f8fb 	bl	f39c <calloc>
        assert(wcs);
    f1a6:	b908      	cbnz	r0, f1ac <uwb_wcs_init+0x14>
    f1a8:	f7ff ffee 	bl	f188 <uwb_wcs_free.part.0>
        wcs->status.selfmalloc = 1;
    f1ac:	7803      	ldrb	r3, [r0, #0]
    f1ae:	f043 0301 	orr.w	r3, r3, #1
    f1b2:	7003      	strb	r3, [r0, #0]
    }
    wcs->ccp = ccp;
    wcs->normalized_skew = DPL_FLOAT64_INIT(1.0l);
    f1b4:	4b04      	ldr	r3, [pc, #16]	; (f1c8 <uwb_wcs_init+0x30>)
    wcs->ccp = ccp;
    f1b6:	6604      	str	r4, [r0, #96]	; 0x60
    wcs->normalized_skew = DPL_FLOAT64_INIT(1.0l);
    f1b8:	2200      	movs	r2, #0
    f1ba:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    wcs->fractional_skew = DPL_FLOAT64_INIT(0.0l);
    f1be:	2200      	movs	r2, #0
    f1c0:	2300      	movs	r3, #0
    f1c2:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48

    return wcs;
}
    f1c6:	bd10      	pop	{r4, pc}
    f1c8:	3ff00000 	.word	0x3ff00000

0000f1cc <uwb_wcs_free>:
 *
 * returns none
 */
void
uwb_wcs_free(struct uwb_wcs_instance * inst)
{
    f1cc:	b510      	push	{r4, lr}
    assert(inst);
    f1ce:	4604      	mov	r4, r0
    f1d0:	b908      	cbnz	r0, f1d6 <uwb_wcs_free+0xa>
    f1d2:	f7ff ffd9 	bl	f188 <uwb_wcs_free.part.0>
#ifndef __KERNEL__
#if MYNEWT_VAL(TIMESCALE_ENABLED)
    timescale_free(inst->timescale);
    f1d6:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
    f1da:	f00c fed9 	bl	1bf90 <timescale_free>
#endif
#endif
    if (inst->status.selfmalloc)
    f1de:	7823      	ldrb	r3, [r4, #0]
    f1e0:	f013 0201 	ands.w	r2, r3, #1
    f1e4:	d004      	beq.n	f1f0 <uwb_wcs_free+0x24>
        free(inst);
    f1e6:	4620      	mov	r0, r4
    else
        inst->status.initialized = 0;
}
    f1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        free(inst);
    f1ec:	f000 b9c0 	b.w	f570 <free>
        inst->status.initialized = 0;
    f1f0:	f362 0341 	bfi	r3, r2, #1, #1
    f1f4:	7023      	strb	r3, [r4, #0]
}
    f1f6:	bd10      	pop	{r4, pc}

0000f1f8 <uwb_wcs_set_postprocess>:
 *
 * returns none
 */
void
uwb_wcs_set_postprocess(struct uwb_wcs_instance * wcs, dpl_event_fn * postprocess)
{
    f1f8:	b538      	push	{r3, r4, r5, lr}
    f1fa:	460d      	mov	r5, r1
    if(!wcs) return;
    f1fc:	4604      	mov	r4, r0
    f1fe:	b150      	cbz	r0, f216 <uwb_wcs_set_postprocess+0x1e>
    memset(ev, 0, sizeof(*ev));
    f200:	2210      	movs	r2, #16
    f202:	2100      	movs	r1, #0
    f204:	3050      	adds	r0, #80	; 0x50
    f206:	f000 f9fa 	bl	f5fe <memset>
    dpl_event_init(&wcs->postprocess_ev, postprocess, (void *)wcs);
    wcs->config.postprocess = true;
    f20a:	7923      	ldrb	r3, [r4, #4]
    ev->ev.ev_arg = arg;
    f20c:	e9c4 5415 	strd	r5, r4, [r4, #84]	; 0x54
    f210:	f043 0301 	orr.w	r3, r3, #1
    f214:	7123      	strb	r3, [r4, #4]
}
    f216:	bd38      	pop	{r3, r4, r5, pc}

0000f218 <uwb_wcs_dtu_time_adjust>:
 * @return dtu_time compensated.
 *
 */
uint64_t
uwb_wcs_dtu_time_adjust(struct uwb_wcs_instance * wcs, uint64_t dtu_time)
{
    f218:	b510      	push	{r4, lr}
    f21a:	4604      	mov	r4, r0
    f21c:	4619      	mov	r1, r3
    f21e:	4610      	mov	r0, r2
    if(!wcs) return dtu_time;
    f220:	b164      	cbz	r4, f23c <uwb_wcs_dtu_time_adjust+0x24>
    if (wcs->status.valid){
    f222:	7823      	ldrb	r3, [r4, #0]
    f224:	075b      	lsls	r3, r3, #29
    f226:	d507      	bpl.n	f238 <uwb_wcs_dtu_time_adjust+0x20>
        dtu_time = (uint64_t) DPL_FLOAT64_INT(DPL_FLOAT64_MUL(wcs->normalized_skew,DPL_FLOAT64_I64_TO_F64(dtu_time)));
    f228:	f010 fe14 	bl	1fe54 <__aeabi_ul2d>
    f22c:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    f230:	f010 fe46 	bl	1fec0 <__aeabi_dmul>
    f234:	f011 fb02 	bl	2083c <__aeabi_d2lz>
    }

    return dtu_time & 0x00FFFFFFFFFFUL;
    f238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
}
    f23c:	bd10      	pop	{r4, pc}
	...

0000f240 <uwb_wcs_prediction>:
 * @param T interval over which to predict.
 * @return Clock master prediction for local epoch T
 */
dpl_float64_t
uwb_wcs_prediction(dpl_float64_t * x, dpl_float64_t T)
{
    f240:	b570      	push	{r4, r5, r6, lr}
    f242:	ec53 2b10 	vmov	r2, r3, d0
    // x = A * x;
    dpl_float64_t A[] = { DPL_FLOAT64_INIT(1.0l), T, DPL_FLOAT64_DIV(DPL_FLOAT64_MUL(T,T),DPL_FLOAT64_INIT(2.0l))};
    f246:	491a      	ldr	r1, [pc, #104]	; (f2b0 <uwb_wcs_prediction+0x70>)
{
    f248:	b088      	sub	sp, #32
    f24a:	4604      	mov	r4, r0
    dpl_float64_t A[] = { DPL_FLOAT64_INIT(1.0l), T, DPL_FLOAT64_DIV(DPL_FLOAT64_MUL(T,T),DPL_FLOAT64_INIT(2.0l))};
    f24c:	2000      	movs	r0, #0
    f24e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    f252:	ee10 0a10 	vmov	r0, s0
    f256:	4619      	mov	r1, r3
    f258:	ed8d 0b04 	vstr	d0, [sp, #16]
    f25c:	f010 fe30 	bl	1fec0 <__aeabi_dmul>
    f260:	4b14      	ldr	r3, [pc, #80]	; (f2b4 <uwb_wcs_prediction+0x74>)
    f262:	2200      	movs	r2, #0
    f264:	f010 fe2c 	bl	1fec0 <__aeabi_dmul>
    dpl_float64_t tmp = DPL_FLOAT64_INIT(0.0l);
    f268:	ed9f 0b0f 	vldr	d0, [pc, #60]	; f2a8 <uwb_wcs_prediction+0x68>
    dpl_float64_t A[] = { DPL_FLOAT64_INIT(1.0l), T, DPL_FLOAT64_DIV(DPL_FLOAT64_MUL(T,T),DPL_FLOAT64_INIT(2.0l))};
    f26c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
    f270:	ad02      	add	r5, sp, #8
    f272:	f104 0618 	add.w	r6, r4, #24
            tmp = DPL_FLOAT64_ADD(tmp,DPL_FLOAT64_MUL(A[i],x[i]));
    f276:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    f27a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
    f27e:	ed8d 0b00 	vstr	d0, [sp]
    f282:	f010 fe1d 	bl	1fec0 <__aeabi_dmul>
    f286:	ed9d 0b00 	vldr	d0, [sp]
    f28a:	4602      	mov	r2, r0
    f28c:	460b      	mov	r3, r1
    f28e:	ec51 0b10 	vmov	r0, r1, d0
    f292:	f010 fc5f 	bl	1fb54 <__adddf3>
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
    f296:	42b4      	cmp	r4, r6
            tmp = DPL_FLOAT64_ADD(tmp,DPL_FLOAT64_MUL(A[i],x[i]));
    f298:	ec41 0b10 	vmov	d0, r0, r1
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
    f29c:	d1eb      	bne.n	f276 <uwb_wcs_prediction+0x36>
    }
    return tmp;
}
    f29e:	b008      	add	sp, #32
    f2a0:	bd70      	pop	{r4, r5, r6, pc}
    f2a2:	bf00      	nop
    f2a4:	f3af 8000 	nop.w
	...
    f2b0:	3ff00000 	.word	0x3ff00000
    f2b4:	3fe00000 	.word	0x3fe00000

0000f2b8 <uwb_wcs_local_to_master64>:
{
    f2b8:	b510      	push	{r4, lr}
    if(!wcs) return 0xffffffffffffffffULL;
    f2ba:	4604      	mov	r4, r0
    f2bc:	b338      	cbz	r0, f30e <uwb_wcs_local_to_master64+0x56>
    delta = ((dtu_time & 0x0FFFFFFFFFFUL) - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL;
    f2be:	6980      	ldr	r0, [r0, #24]
    f2c0:	7f21      	ldrb	r1, [r4, #28]
    f2c2:	1a10      	subs	r0, r2, r0
    f2c4:	eb63 0101 	sbc.w	r1, r3, r1
    if (wcs->status.valid) {
    f2c8:	7823      	ldrb	r3, [r4, #0]
    f2ca:	075b      	lsls	r3, r3, #29
    delta = ((dtu_time & 0x0FFFFFFFFFFUL) - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL;
    f2cc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    if (wcs->status.valid) {
    f2d0:	d517      	bpl.n	f302 <uwb_wcs_local_to_master64+0x4a>
        interval = DPL_FLOAT64_DIV(DPL_FLOAT64_U64_TO_F64(delta), DPL_FLOAT64_INIT(MYNEWT_VAL(UWB_WCS_DTU)));
    f2d2:	f010 fdbf 	bl	1fe54 <__aeabi_ul2d>
    f2d6:	a310      	add	r3, pc, #64	; (adr r3, f318 <uwb_wcs_local_to_master64+0x60>)
    f2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    f2dc:	f010 ff1a 	bl	20114 <__aeabi_ddiv>
        master_lo40 = (uint64_t) DPL_FLOAT64_INT(uwb_wcs_prediction(wcs->states.array, interval));
    f2e0:	ec41 0b10 	vmov	d0, r0, r1
    f2e4:	f104 0020 	add.w	r0, r4, #32
    f2e8:	f7ff ffaa 	bl	f240 <uwb_wcs_prediction>
    f2ec:	ec51 0b10 	vmov	r0, r1, d0
    f2f0:	f011 faa4 	bl	2083c <__aeabi_d2lz>
    f2f4:	4603      	mov	r3, r0
    return (wcs->master_epoch.timestamp & 0xFFFFFF0000000000UL) + master_lo40;
    f2f6:	6962      	ldr	r2, [r4, #20]
    f2f8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    f2fc:	4618      	mov	r0, r3
    f2fe:	4411      	add	r1, r2
}
    f300:	bd10      	pop	{r4, pc}
        master_lo40 = wcs->master_epoch.lo + delta;
    f302:	6923      	ldr	r3, [r4, #16]
    f304:	7d22      	ldrb	r2, [r4, #20]
    f306:	181b      	adds	r3, r3, r0
    f308:	eb42 0101 	adc.w	r1, r2, r1
    f30c:	e7f3      	b.n	f2f6 <uwb_wcs_local_to_master64+0x3e>
    if(!wcs) return 0xffffffffffffffffULL;
    f30e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f312:	4601      	mov	r1, r0
    f314:	e7f4      	b.n	f300 <uwb_wcs_local_to_master64+0x48>
    f316:	bf00      	nop
    f318:	00000000 	.word	0x00000000
    f31c:	422e8480 	.word	0x422e8480

0000f320 <uwb_wcs_local_to_master>:
{
    f320:	b508      	push	{r3, lr}
    assert(wcs);
    f322:	4601      	mov	r1, r0
    f324:	b918      	cbnz	r0, f32e <uwb_wcs_local_to_master+0xe>
    f326:	4603      	mov	r3, r0
    f328:	4602      	mov	r2, r0
    f32a:	f7f9 fde3 	bl	8ef4 <__assert_func>
    return uwb_wcs_local_to_master64(wcs, dtu_time) & 0x0FFFFFFFFFFUL;
    f32e:	f7ff ffc3 	bl	f2b8 <uwb_wcs_local_to_master64>
}
    f332:	b2c9      	uxtb	r1, r1
    f334:	bd08      	pop	{r3, pc}
	...

0000f338 <uwb_wcs_pkg_init>:
 *
 * @return void
 */
void
uwb_wcs_pkg_init(void)
{
    f338:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"uwb_wcs_pkg_init\"}\n",
    f33a:	f001 ff99 	bl	11270 <dpl_cputime_get32>
    f33e:	4601      	mov	r1, r0
    f340:	480a      	ldr	r0, [pc, #40]	; (f36c <uwb_wcs_pkg_init+0x34>)
    f342:	f000 fc4b 	bl	fbdc <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    f346:	2500      	movs	r5, #0
        udev = uwb_dev_idx_lookup(i);
    f348:	4628      	mov	r0, r5
    f34a:	f7f9 fb7d 	bl	8a48 <uwb_dev_idx_lookup>
        if (!udev) {
    f34e:	b148      	cbz	r0, f364 <uwb_wcs_pkg_init+0x2c>
            continue;
        }
#if MYNEWT_VAL(UWB_CCP_ENABLED)
        ccp = (struct uwb_ccp_instance *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    f350:	2101      	movs	r1, #1
    f352:	f7f9 fbed 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
    f356:	4604      	mov	r4, r0
    f358:	b120      	cbz	r0, f364 <uwb_wcs_pkg_init+0x2c>
            continue;
        }
        ccp->wcs = uwb_wcs_init(NULL, ccp);
    f35a:	4601      	mov	r1, r0
    f35c:	2000      	movs	r0, #0
    f35e:	f7ff ff1b 	bl	f198 <uwb_wcs_init>
    f362:	66a0      	str	r0, [r4, #104]	; 0x68
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    f364:	3501      	adds	r5, #1
    f366:	2d03      	cmp	r5, #3
    f368:	d1ee      	bne.n	f348 <uwb_wcs_pkg_init+0x10>
        wcs_chrdev_create(ccp->wcs);
#endif /* __KERNEL__ */
#endif
    }

}
    f36a:	bd38      	pop	{r3, r4, r5, pc}
    f36c:	00022457 	.word	0x00022457

0000f370 <uwb_wcs_pkg_down>:
 *
 * @return void
 */
int
uwb_wcs_pkg_down(int reason)
{
    f370:	b570      	push	{r4, r5, r6, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    f372:	2400      	movs	r4, #0
        if (!ccp) {
            continue;
        }
        if (ccp->wcs) {
            uwb_wcs_free(ccp->wcs);
            ccp->wcs = 0;
    f374:	4626      	mov	r6, r4
        udev = uwb_dev_idx_lookup(i);
    f376:	4620      	mov	r0, r4
    f378:	f7f9 fb66 	bl	8a48 <uwb_dev_idx_lookup>
        if (!udev) {
    f37c:	b148      	cbz	r0, f392 <uwb_wcs_pkg_down+0x22>
        ccp = (struct uwb_ccp_instance *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    f37e:	2101      	movs	r1, #1
    f380:	f7f9 fbd6 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
    f384:	4605      	mov	r5, r0
    f386:	b120      	cbz	r0, f392 <uwb_wcs_pkg_down+0x22>
        if (ccp->wcs) {
    f388:	6e80      	ldr	r0, [r0, #104]	; 0x68
    f38a:	b110      	cbz	r0, f392 <uwb_wcs_pkg_down+0x22>
            uwb_wcs_free(ccp->wcs);
    f38c:	f7ff ff1e 	bl	f1cc <uwb_wcs_free>
            ccp->wcs = 0;
    f390:	66ae      	str	r6, [r5, #104]	; 0x68
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    f392:	3401      	adds	r4, #1
    f394:	2c03      	cmp	r4, #3
    f396:	d1ee      	bne.n	f376 <uwb_wcs_pkg_down+0x6>
        }
#endif
    }

    return 0;
}
    f398:	2000      	movs	r0, #0
    f39a:	bd70      	pop	{r4, r5, r6, pc}

0000f39c <calloc>:
{
	void *ptr;
        int nb;

        nb = sizeof(size_t) * 4;
        if (size >= SIZE_MAX >> nb || nmemb >= SIZE_MAX >> nb) {
    f39c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    f3a0:	4299      	cmp	r1, r3
{
    f3a2:	b513      	push	{r0, r1, r4, lr}
        if (size >= SIZE_MAX >> nb || nmemb >= SIZE_MAX >> nb) {
    f3a4:	d810      	bhi.n	f3c8 <calloc+0x2c>
    f3a6:	4298      	cmp	r0, r3
    f3a8:	d80e      	bhi.n	f3c8 <calloc+0x2c>
            return NULL;
        }
	size *= nmemb;
    f3aa:	fb00 f201 	mul.w	r2, r0, r1
	ptr = malloc(size);
    f3ae:	4610      	mov	r0, r2
    f3b0:	9201      	str	r2, [sp, #4]
    f3b2:	f000 f891 	bl	f4d8 <malloc>
	if (ptr)
    f3b6:	4604      	mov	r4, r0
    f3b8:	b118      	cbz	r0, f3c2 <calloc+0x26>
		memset(ptr, 0, size);
    f3ba:	9a01      	ldr	r2, [sp, #4]
    f3bc:	2100      	movs	r1, #0
    f3be:	f000 f91e 	bl	f5fe <memset>

	return ptr;
}
    f3c2:	4620      	mov	r0, r4
    f3c4:	b002      	add	sp, #8
    f3c6:	bd10      	pop	{r4, pc}
            return NULL;
    f3c8:	2400      	movs	r4, #0
    f3ca:	e7fa      	b.n	f3c2 <calloc+0x26>

0000f3cc <fwrite>:
    if (stream->vmt->read == NULL) return 0;
    return stream->vmt->read(stream, (char*)buf, size*nmemb) / size;
}

__extern_inline size_t fwrite(const void *buf, size_t size, size_t nmemb, FILE *stream)
{
    f3cc:	b570      	push	{r4, r5, r6, lr}
    f3ce:	460d      	mov	r5, r1
    if (stream->vmt->write == NULL) return 0;
    f3d0:	6819      	ldr	r1, [r3, #0]
    f3d2:	680c      	ldr	r4, [r1, #0]
{
    f3d4:	4606      	mov	r6, r0
    f3d6:	4618      	mov	r0, r3
    if (stream->vmt->write == NULL) return 0;
    f3d8:	b12c      	cbz	r4, f3e6 <fwrite+0x1a>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    f3da:	436a      	muls	r2, r5
    f3dc:	4631      	mov	r1, r6
    f3de:	47a0      	blx	r4
    f3e0:	fbb0 f0f5 	udiv	r0, r0, r5
}
    f3e4:	bd70      	pop	{r4, r5, r6, pc}
    if (stream->vmt->write == NULL) return 0;
    f3e6:	4620      	mov	r0, r4
    f3e8:	e7fc      	b.n	f3e4 <fwrite+0x18>
	...

0000f3ec <puts>:
{
	return fwrite(s, 1, strlen(s), f);
}

__extern_inline int puts(const char *s)
{
    f3ec:	b513      	push	{r0, r1, r4, lr}
    f3ee:	4604      	mov	r4, r0
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
    f3f0:	f000 f935 	bl	f65e <strlen>
    f3f4:	4b08      	ldr	r3, [pc, #32]	; (f418 <puts+0x2c>)
    f3f6:	4602      	mov	r2, r0
    f3f8:	681b      	ldr	r3, [r3, #0]
    f3fa:	9301      	str	r3, [sp, #4]
    f3fc:	2101      	movs	r1, #1
    f3fe:	4620      	mov	r0, r4
    f400:	f7ff ffe4 	bl	f3cc <fwrite>
    f404:	2201      	movs	r2, #1
    f406:	4604      	mov	r4, r0
    f408:	9b01      	ldr	r3, [sp, #4]
    f40a:	4804      	ldr	r0, [pc, #16]	; (f41c <puts+0x30>)
    f40c:	4611      	mov	r1, r2
    f40e:	f7ff ffdd 	bl	f3cc <fwrite>
}
    f412:	4420      	add	r0, r4
    f414:	b002      	add	sp, #8
    f416:	bd10      	pop	{r4, pc}
    f418:	00022484 	.word	0x00022484
    f41c:	00022b8f 	.word	0x00022b8f

0000f420 <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
    f420:	2001      	movs	r0, #1
    f422:	4770      	bx	lr

0000f424 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
    f424:	4770      	bx	lr
	...

0000f428 <__free_block.isra.0>:
static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
    nah = ah->a.next;
    f428:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
    f42c:	6819      	ldr	r1, [r3, #0]
    f42e:	2901      	cmp	r1, #1
static struct free_arena_header *__free_block(struct free_arena_header *ah)
    f430:	b510      	push	{r4, lr}
    if (pah->a.type == ARENA_TYPE_FREE &&
    f432:	d11b      	bne.n	f46c <__free_block.isra.0+0x44>
        (char *)pah + pah->a.size == (char *)ah) {
    f434:	685c      	ldr	r4, [r3, #4]
    f436:	1919      	adds	r1, r3, r4
    if (pah->a.type == ARENA_TYPE_FREE &&
    f438:	4288      	cmp	r0, r1
    f43a:	d117      	bne.n	f46c <__free_block.isra.0+0x44>
        /* Coalesce into the previous block */
        pah->a.size += ah->a.size;
    f43c:	6841      	ldr	r1, [r0, #4]
    f43e:	4421      	add	r1, r4
        pah->a.next = nah;
    f440:	e9c3 1201 	strd	r1, r2, [r3, #4]
        nah->a.prev = pah;
    f444:	60d3      	str	r3, [r2, #12]
        ah->next_free->prev_free = ah;
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
    f446:	6811      	ldr	r1, [r2, #0]
    f448:	2901      	cmp	r1, #1
    f44a:	d10e      	bne.n	f46a <__free_block.isra.0+0x42>
        (char *)ah + ah->a.size == (char *)nah) {
    f44c:	6858      	ldr	r0, [r3, #4]
    f44e:	1819      	adds	r1, r3, r0
    if (nah->a.type == ARENA_TYPE_FREE &&
    f450:	428a      	cmp	r2, r1
    f452:	d10a      	bne.n	f46a <__free_block.isra.0+0x42>
        ah->a.size += nah->a.size;
    f454:	6851      	ldr	r1, [r2, #4]
    f456:	4401      	add	r1, r0
    f458:	6059      	str	r1, [r3, #4]
    an = ah->next_free;
    f45a:	e9d2 3104 	ldrd	r3, r1, [r2, #16]
    ap->next_free = an;
    f45e:	610b      	str	r3, [r1, #16]
    an->prev_free = ap;
    f460:	6159      	str	r1, [r3, #20]
    an = ah->a.next;
    f462:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
    ap->a.next = an;
    f466:	608b      	str	r3, [r1, #8]
    an->a.prev = ap;
    f468:	60d9      	str	r1, [r3, #12]
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
    f46a:	bd10      	pop	{r4, pc}
        ah->a.type = ARENA_TYPE_FREE;
    f46c:	2301      	movs	r3, #1
    f46e:	6003      	str	r3, [r0, #0]
        ah->next_free = __malloc_head.next_free;
    f470:	4b04      	ldr	r3, [pc, #16]	; (f484 <__free_block.isra.0+0x5c>)
    f472:	6919      	ldr	r1, [r3, #16]
        ah->prev_free = &__malloc_head;
    f474:	e9c0 1304 	strd	r1, r3, [r0, #16]
        __malloc_head.next_free = ah;
    f478:	6118      	str	r0, [r3, #16]
        ah->next_free->prev_free = ah;
    f47a:	6903      	ldr	r3, [r0, #16]
    f47c:	6158      	str	r0, [r3, #20]
    f47e:	4603      	mov	r3, r0
    f480:	e7e1      	b.n	f446 <__free_block.isra.0+0x1e>
    f482:	bf00      	nop
    f484:	20000694 	.word	0x20000694

0000f488 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
    f488:	2917      	cmp	r1, #23
{
    f48a:	b510      	push	{r4, lr}
    f48c:	4604      	mov	r4, r0
    if (size < sizeof(struct free_arena_header))
    f48e:	d91b      	bls.n	f4c8 <add_malloc_block+0x40>
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
    f490:	2301      	movs	r3, #1
    fp->a.size = size;
    f492:	e9c0 3100 	strd	r3, r1, [r0]

    if (!malloc_lock())
    f496:	4b0d      	ldr	r3, [pc, #52]	; (f4cc <add_malloc_block+0x44>)
    f498:	681b      	ldr	r3, [r3, #0]
    f49a:	4798      	blx	r3
    f49c:	b1a0      	cbz	r0, f4c8 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
    f49e:	4b0c      	ldr	r3, [pc, #48]	; (f4d0 <add_malloc_block+0x48>)
         pah = pah->a.prev) {
    f4a0:	68db      	ldr	r3, [r3, #12]
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
    f4a2:	681a      	ldr	r2, [r3, #0]
    f4a4:	2a02      	cmp	r2, #2
    f4a6:	d001      	beq.n	f4ac <add_malloc_block+0x24>
        if (pah < fp)
    f4a8:	429c      	cmp	r4, r3
    f4aa:	d9f9      	bls.n	f4a0 <add_malloc_block+0x18>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
    f4ac:	689a      	ldr	r2, [r3, #8]
    fp->a.prev = pah;
    f4ae:	e9c4 2302 	strd	r2, r3, [r4, #8]
    pah->a.next = fp;
    f4b2:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
    f4b4:	68a3      	ldr	r3, [r4, #8]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
    f4b6:	4620      	mov	r0, r4
    fp->a.next->a.prev = fp;
    f4b8:	60dc      	str	r4, [r3, #12]
    fp = __free_block(fp);
    f4ba:	f7ff ffb5 	bl	f428 <__free_block.isra.0>

    malloc_unlock();
    f4be:	4b05      	ldr	r3, [pc, #20]	; (f4d4 <add_malloc_block+0x4c>)
}
    f4c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    malloc_unlock();
    f4c4:	681b      	ldr	r3, [r3, #0]
    f4c6:	4718      	bx	r3
}
    f4c8:	bd10      	pop	{r4, pc}
    f4ca:	bf00      	nop
    f4cc:	200006ac 	.word	0x200006ac
    f4d0:	20000694 	.word	0x20000694
    f4d4:	200006b0 	.word	0x200006b0

0000f4d8 <malloc>:
{
    f4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
    f4da:	1e43      	subs	r3, r0, #1
    f4dc:	3312      	adds	r3, #18
    f4de:	d902      	bls.n	f4e6 <malloc+0xe>
        return NULL;
    f4e0:	2400      	movs	r4, #0
}
    f4e2:	4620      	mov	r0, r4
    f4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!malloc_lock())
    f4e6:	4b1f      	ldr	r3, [pc, #124]	; (f564 <malloc+0x8c>)
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
    f4e8:	301f      	adds	r0, #31
    if (!malloc_lock())
    f4ea:	681b      	ldr	r3, [r3, #0]
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
    f4ec:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
    f4f0:	4798      	blx	r3
    f4f2:	2800      	cmp	r0, #0
    f4f4:	d0f4      	beq.n	f4e0 <malloc+0x8>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
    f4f6:	4d1c      	ldr	r5, [pc, #112]	; (f568 <malloc+0x90>)
    f4f8:	6928      	ldr	r0, [r5, #16]
    f4fa:	6803      	ldr	r3, [r0, #0]
    f4fc:	2b02      	cmp	r3, #2
    f4fe:	d106      	bne.n	f50e <malloc+0x36>
        more_mem = _sbrk(size);
    f500:	4620      	mov	r0, r4
    f502:	f7f8 fe39 	bl	8178 <_sbrk>
        if (more_mem != (void *)-1) {
    f506:	1c43      	adds	r3, r0, #1
    f508:	d128      	bne.n	f55c <malloc+0x84>
    f50a:	2400      	movs	r4, #0
    f50c:	e01b      	b.n	f546 <malloc+0x6e>
        if (fp->a.size >= size) {
    f50e:	6841      	ldr	r1, [r0, #4]
        nfp->next_free = fpn = fp->next_free;
    f510:	6902      	ldr	r2, [r0, #16]
        if (fp->a.size >= size) {
    f512:	42a1      	cmp	r1, r4
    f514:	d320      	bcc.n	f558 <malloc+0x80>
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
    f516:	f104 0320 	add.w	r3, r4, #32
    f51a:	4299      	cmp	r1, r3
        nfp->prev_free = fpp = fp->prev_free;
    f51c:	6945      	ldr	r5, [r0, #20]
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
    f51e:	d316      	bcc.n	f54e <malloc+0x76>
        nfp = (struct free_arena_header *)((char *)fp + size);
    f520:	1903      	adds	r3, r0, r4
        na = fp->a.next;
    f522:	6886      	ldr	r6, [r0, #8]
        nfp->a.size = fsize - size;
    f524:	1b09      	subs	r1, r1, r4
        nfp->a.type = ARENA_TYPE_FREE;
    f526:	2701      	movs	r7, #1
    f528:	5107      	str	r7, [r0, r4]
        nfp->a.size = fsize - size;
    f52a:	6059      	str	r1, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
    f52c:	2100      	movs	r1, #0
        fp->a.size = size;
    f52e:	e9c0 1400 	strd	r1, r4, [r0]
        nfp->a.next = na;
    f532:	e9c3 6002 	strd	r6, r0, [r3, #8]
        na->a.prev = nfp;
    f536:	60f3      	str	r3, [r6, #12]
        fp->a.next = nfp;
    f538:	6083      	str	r3, [r0, #8]
        nfp->prev_free = fpp = fp->prev_free;
    f53a:	e9c3 2504 	strd	r2, r5, [r3, #16]
        fpn->prev_free = nfp;
    f53e:	6153      	str	r3, [r2, #20]
        fpp->next_free = nfp;
    f540:	612b      	str	r3, [r5, #16]
    return (void *)(&fp->a + 1);
    f542:	f100 0410 	add.w	r4, r0, #16
    malloc_unlock();
    f546:	4b09      	ldr	r3, [pc, #36]	; (f56c <malloc+0x94>)
    f548:	681b      	ldr	r3, [r3, #0]
    f54a:	4798      	blx	r3
    return result;
    f54c:	e7c9      	b.n	f4e2 <malloc+0xa>
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
    f54e:	2300      	movs	r3, #0
    f550:	6003      	str	r3, [r0, #0]
    ap->next_free = an;
    f552:	612a      	str	r2, [r5, #16]
    an->prev_free = ap;
    f554:	6155      	str	r5, [r2, #20]
}
    f556:	e7f4      	b.n	f542 <malloc+0x6a>
        nfp->next_free = fpn = fp->next_free;
    f558:	4610      	mov	r0, r2
    f55a:	e7ce      	b.n	f4fa <malloc+0x22>
            add_malloc_block(more_mem, size);
    f55c:	4621      	mov	r1, r4
    f55e:	f7ff ff93 	bl	f488 <add_malloc_block>
            goto retry_alloc;
    f562:	e7c9      	b.n	f4f8 <malloc+0x20>
    f564:	200006ac 	.word	0x200006ac
    f568:	20000694 	.word	0x20000694
    f56c:	200006b0 	.word	0x200006b0

0000f570 <free>:

void free(void *ptr)
{
    f570:	b510      	push	{r4, lr}
    struct free_arena_header *ah;

    if (!ptr)
    f572:	4604      	mov	r4, r0
    f574:	b160      	cbz	r0, f590 <free+0x20>

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
    f576:	4b07      	ldr	r3, [pc, #28]	; (f594 <free+0x24>)
    f578:	681b      	ldr	r3, [r3, #0]
    f57a:	4798      	blx	r3
    f57c:	b140      	cbz	r0, f590 <free+0x20>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    f57e:	f1a4 0010 	sub.w	r0, r4, #16
    f582:	f7ff ff51 	bl	f428 <__free_block.isra.0>
    malloc_unlock();
    f586:	4b04      	ldr	r3, [pc, #16]	; (f598 <free+0x28>)
}
    f588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    malloc_unlock();
    f58c:	681b      	ldr	r3, [r3, #0]
    f58e:	4718      	bx	r3
}
    f590:	bd10      	pop	{r4, pc}
    f592:	bf00      	nop
    f594:	200006ac 	.word	0x200006ac
    f598:	200006b0 	.word	0x200006b0

0000f59c <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
    f59c:	b470      	push	{r4, r5, r6}
    f59e:	f04f 0500 	mov.w	r5, #0
    f5a2:	f022 0603 	bic.w	r6, r2, #3
    f5a6:	e005      	b.n	f5b4 <test1>

0000f5a8 <loop1>:
    f5a8:	5943      	ldr	r3, [r0, r5]
    f5aa:	594c      	ldr	r4, [r1, r5]
    f5ac:	42a3      	cmp	r3, r4
    f5ae:	d104      	bne.n	f5ba <res1>
    f5b0:	f105 0504 	add.w	r5, r5, #4

0000f5b4 <test1>:
    f5b4:	42b5      	cmp	r5, r6
    f5b6:	d1f7      	bne.n	f5a8 <loop1>
    f5b8:	e00d      	b.n	f5d6 <test2>

0000f5ba <res1>:
    f5ba:	ba1b      	rev	r3, r3
    f5bc:	ba24      	rev	r4, r4
    f5be:	1b1b      	subs	r3, r3, r4
    f5c0:	bf8c      	ite	hi
    f5c2:	2301      	movhi	r3, #1
    f5c4:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    f5c8:	e009      	b.n	f5de <done>

0000f5ca <loop2>:
    f5ca:	5d43      	ldrb	r3, [r0, r5]
    f5cc:	5d4c      	ldrb	r4, [r1, r5]
    f5ce:	1b1b      	subs	r3, r3, r4
    f5d0:	d105      	bne.n	f5de <done>
    f5d2:	f105 0501 	add.w	r5, r5, #1

0000f5d6 <test2>:
    f5d6:	4295      	cmp	r5, r2
    f5d8:	d1f7      	bne.n	f5ca <loop2>
    f5da:	f04f 0300 	mov.w	r3, #0

0000f5de <done>:
    f5de:	4618      	mov	r0, r3
    f5e0:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    f5e2:	4770      	bx	lr

0000f5e4 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    f5e4:	e001      	b.n	f5ea <test1>

0000f5e6 <loop1>:
    f5e6:	588b      	ldr	r3, [r1, r2]
    f5e8:	5083      	str	r3, [r0, r2]

0000f5ea <test1>:
    f5ea:	3a04      	subs	r2, #4
    f5ec:	d5fb      	bpl.n	f5e6 <loop1>
    f5ee:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    f5f2:	e001      	b.n	f5f8 <test2>

0000f5f4 <loop2>:
    f5f4:	5c8b      	ldrb	r3, [r1, r2]
    f5f6:	5483      	strb	r3, [r0, r2]

0000f5f8 <test2>:
    f5f8:	3a01      	subs	r2, #1
    f5fa:	d5fb      	bpl.n	f5f4 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    f5fc:	4770      	bx	lr

0000f5fe <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    f5fe:	b530      	push	{r4, r5, lr}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    f600:	4605      	mov	r5, r0
    f602:	b2c9      	uxtb	r1, r1
    f604:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    f608:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    f60c:	18ab      	adds	r3, r5, r2
    f60e:	2403      	movs	r4, #3
    f610:	4023      	ands	r3, r4
    f612:	1ad3      	subs	r3, r2, r3
    f614:	d40b      	bmi.n	f62e <memset+0x30>
    f616:	e001      	b.n	f61c <memset+0x1e>
    f618:	3a01      	subs	r2, #1
    f61a:	54a9      	strb	r1, [r5, r2]
    f61c:	429a      	cmp	r2, r3
    f61e:	d1fb      	bne.n	f618 <memset+0x1a>
    f620:	e000      	b.n	f624 <memset+0x26>
    f622:	50a9      	str	r1, [r5, r2]
    f624:	3a04      	subs	r2, #4
    f626:	d5fc      	bpl.n	f622 <memset+0x24>
    f628:	3204      	adds	r2, #4
    f62a:	e000      	b.n	f62e <memset+0x30>
    f62c:	54a9      	strb	r1, [r5, r2]
    f62e:	3a01      	subs	r2, #1
    f630:	d5fc      	bpl.n	f62c <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    f632:	bd30      	pop	{r4, r5, pc}

0000f634 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
    f634:	2000      	movs	r0, #0
    f636:	4770      	bx	lr

0000f638 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
    f638:	b510      	push	{r4, lr}
    f63a:	4608      	mov	r0, r1
    f63c:	4614      	mov	r4, r2
    console_write(bp, n);
    f63e:	4611      	mov	r1, r2
    f640:	f002 fcd8 	bl	11ff4 <console_write>
    return n;
}
    f644:	4620      	mov	r0, r4
    f646:	bd10      	pop	{r4, pc}

0000f648 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
    f648:	b510      	push	{r4, lr}
    f64a:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
    f64c:	f812 4b01 	ldrb.w	r4, [r2], #1
    f650:	f811 3b01 	ldrb.w	r3, [r1], #1
		if (d || !ch)
    f654:	1ae0      	subs	r0, r4, r3
    f656:	d101      	bne.n	f65c <strcmp+0x14>
    f658:	2c00      	cmp	r4, #0
    f65a:	d1f7      	bne.n	f64c <strcmp+0x4>
			break;
	}

	return d;
}
    f65c:	bd10      	pop	{r4, pc}

0000f65e <strlen>:
#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
	while (*ss)
    f65e:	4603      	mov	r3, r0
    f660:	461a      	mov	r2, r3
    f662:	3301      	adds	r3, #1
    f664:	7811      	ldrb	r1, [r2, #0]
    f666:	2900      	cmp	r1, #0
    f668:	d1fa      	bne.n	f660 <strlen+0x2>
		ss++;
	return ss - s;
}
    f66a:	1a10      	subs	r0, r2, r0
    f66c:	4770      	bx	lr

0000f66e <strncpy>:
 */

#include <string.h>

char *strncpy(char *dst, const char *src, size_t n)
{
    f66e:	b510      	push	{r4, lr}
    f670:	4604      	mov	r4, r0
	char *q = dst;
	const char *p = src;
	char ch;

	while (n) {
    f672:	b132      	cbz	r2, f682 <strncpy+0x14>
		n--;
		*q++ = ch = *p++;
    f674:	f811 3b01 	ldrb.w	r3, [r1], #1
    f678:	f800 3b01 	strb.w	r3, [r0], #1
		n--;
    f67c:	3a01      	subs	r2, #1
		if (!ch)
    f67e:	2b00      	cmp	r3, #0
    f680:	d1f7      	bne.n	f672 <strncpy+0x4>
			break;
	}

	/* The specs say strncpy() fills the entire buffer with NUL.  Sigh. */
	memset(q, 0, n);
    f682:	2100      	movs	r1, #0
    f684:	f7ff ffbb 	bl	f5fe <memset>

	return dst;
}
    f688:	4620      	mov	r0, r4
    f68a:	bd10      	pop	{r4, pc}

0000f68c <strtoll>:
#include <stdlib.h>
#include <inttypes.h>

TYPE NAME(const char *nptr, char **endptr, int base)
{
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
    f68c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f690:	f000 bb00 	b.w	fc94 <strntoumax>

0000f694 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
    f694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    f698:	6856      	ldr	r6, [r2, #4]
    while (num / d >= p->base)
    f69a:	f892 a003 	ldrb.w	sl, [r2, #3]
{
    f69e:	b085      	sub	sp, #20
    f6a0:	4680      	mov	r8, r0
    f6a2:	4689      	mov	r9, r1
    f6a4:	4617      	mov	r7, r2
    unsigned long long int d = 1;
    f6a6:	2501      	movs	r5, #1
    f6a8:	2400      	movs	r4, #0
    while (num / d >= p->base)
    f6aa:	4623      	mov	r3, r4
    f6ac:	462a      	mov	r2, r5
    f6ae:	4640      	mov	r0, r8
    f6b0:	4649      	mov	r1, r9
    f6b2:	f011 f8ab 	bl	2080c <__aeabi_uldivmod>
    f6b6:	4550      	cmp	r0, sl
    f6b8:	f171 0300 	sbcs.w	r3, r1, #0
    f6bc:	d209      	bcs.n	f6d2 <ui2a+0x3e>
    int n = 0;
    f6be:	f04f 0b00 	mov.w	fp, #0
        d *= p->base;
    while (d != 0) {
    f6c2:	ea55 0304 	orrs.w	r3, r5, r4
    f6c6:	d10a      	bne.n	f6de <ui2a+0x4a>
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
            ++n;
        }
    }
    *bf = 0;
    f6c8:	2300      	movs	r3, #0
    f6ca:	7033      	strb	r3, [r6, #0]
}
    f6cc:	b005      	add	sp, #20
    f6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        d *= p->base;
    f6d2:	fb0a f304 	mul.w	r3, sl, r4
    f6d6:	fba5 540a 	umull	r5, r4, r5, sl
    f6da:	441c      	add	r4, r3
    f6dc:	e7e5      	b.n	f6aa <ui2a+0x16>
        unsigned long long  dgt = num / d;
    f6de:	462a      	mov	r2, r5
    f6e0:	4623      	mov	r3, r4
    f6e2:	4640      	mov	r0, r8
    f6e4:	4649      	mov	r1, r9
    f6e6:	f011 f891 	bl	2080c <__aeabi_uldivmod>
    f6ea:	e9cd 1200 	strd	r1, r2, [sp]
    f6ee:	4682      	mov	sl, r0
        d /= p->base;
    f6f0:	78fa      	ldrb	r2, [r7, #3]
    f6f2:	9302      	str	r3, [sp, #8]
    f6f4:	4628      	mov	r0, r5
    f6f6:	2300      	movs	r3, #0
    f6f8:	4621      	mov	r1, r4
    f6fa:	9203      	str	r2, [sp, #12]
    f6fc:	f011 f886 	bl	2080c <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
    f700:	f1bb 0f00 	cmp.w	fp, #0
    f704:	d108      	bne.n	f718 <ui2a+0x84>
    f706:	45a8      	cmp	r8, r5
    f708:	eb79 0304 	sbcs.w	r3, r9, r4
    f70c:	d204      	bcs.n	f718 <ui2a+0x84>
    f70e:	9a03      	ldr	r2, [sp, #12]
    f710:	4295      	cmp	r5, r2
    f712:	f174 0300 	sbcs.w	r3, r4, #0
    f716:	d210      	bcs.n	f73a <ui2a+0xa6>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    f718:	9b00      	ldr	r3, [sp, #0]
    f71a:	f1ba 0f0a 	cmp.w	sl, #10
    f71e:	f173 0300 	sbcs.w	r3, r3, #0
    f722:	d30f      	bcc.n	f744 <ui2a+0xb0>
    f724:	78bb      	ldrb	r3, [r7, #2]
    f726:	f013 0f04 	tst.w	r3, #4
    f72a:	bf14      	ite	ne
    f72c:	2337      	movne	r3, #55	; 0x37
    f72e:	2357      	moveq	r3, #87	; 0x57
    f730:	4453      	add	r3, sl
    f732:	f806 3b01 	strb.w	r3, [r6], #1
            ++n;
    f736:	f10b 0b01 	add.w	fp, fp, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    f73a:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
    f73e:	4605      	mov	r5, r0
    f740:	460c      	mov	r4, r1
    f742:	e7be      	b.n	f6c2 <ui2a+0x2e>
    f744:	2330      	movs	r3, #48	; 0x30
    f746:	e7f3      	b.n	f730 <ui2a+0x9c>

0000f748 <i2a>:

static void i2a(long long int num, struct param *p)
{
    if (num < 0) {
    f748:	2900      	cmp	r1, #0
    f74a:	da06      	bge.n	f75a <i2a+0x12>
        num = -num;
        p->sign = 1;
    f74c:	7893      	ldrb	r3, [r2, #2]
        num = -num;
    f74e:	4240      	negs	r0, r0
        p->sign = 1;
    f750:	f043 0301 	orr.w	r3, r3, #1
        num = -num;
    f754:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
    f758:	7093      	strb	r3, [r2, #2]
    }
    ui2a(num, p);
    f75a:	f7ff bf9b 	b.w	f694 <ui2a>

0000f75e <putf>:
    *nump = num;
    return ch;
}

static int putf(FILE *putp, char c)
{
    f75e:	b507      	push	{r0, r1, r2, lr}
    if (stream->vmt->write == NULL) return 0;
    f760:	6803      	ldr	r3, [r0, #0]

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
    f762:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
    f766:	681b      	ldr	r3, [r3, #0]
    f768:	b91b      	cbnz	r3, f772 <putf+0x14>
    if (fputc(c, putp) == EOF)
        return 0;
    f76a:	2000      	movs	r0, #0
    else
        return 1;
}
    f76c:	b003      	add	sp, #12
    f76e:	f85d fb04 	ldr.w	pc, [sp], #4
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    f772:	2201      	movs	r2, #1
    f774:	f10d 0107 	add.w	r1, sp, #7
    f778:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
    f77a:	2801      	cmp	r0, #1
    f77c:	d0f6      	beq.n	f76c <putf+0xe>
    f77e:	e7f4      	b.n	f76a <putf+0xc>

0000f780 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
    f780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned written = 0;
    char ch;
    int n = p->width;
    char *bf = p->bf;
    f784:	684b      	ldr	r3, [r1, #4]
    int n = p->width;
    f786:	780c      	ldrb	r4, [r1, #0]
{
    f788:	4607      	mov	r7, r0
    f78a:	460e      	mov	r6, r1

    /* Number of filling characters */
    while (*bf++ && n > 0)
    f78c:	f813 2b01 	ldrb.w	r2, [r3], #1
    f790:	b10a      	cbz	r2, f796 <putchw+0x16>
    f792:	2c00      	cmp	r4, #0
    f794:	d152      	bne.n	f83c <putchw+0xbc>
        n--;
    if (p->sign)
    f796:	78b3      	ldrb	r3, [r6, #2]
    f798:	07d9      	lsls	r1, r3, #31
        n--;
    if (p->alt && p->base == 16)
    f79a:	8873      	ldrh	r3, [r6, #2]
    f79c:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    f7a0:	b29b      	uxth	r3, r3
    f7a2:	f241 0202 	movw	r2, #4098	; 0x1002
        n--;
    f7a6:	bf48      	it	mi
    f7a8:	f104 34ff 	addmi.w	r4, r4, #4294967295	; 0xffffffff
    if (p->alt && p->base == 16)
    f7ac:	4293      	cmp	r3, r2
    f7ae:	d147      	bne.n	f840 <putchw+0xc0>
        n -= 2;
    f7b0:	3c02      	subs	r4, #2
    else if (p->alt && p->base == 8)
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
    f7b2:	6833      	ldr	r3, [r6, #0]
    f7b4:	4d38      	ldr	r5, [pc, #224]	; (f898 <putchw+0x118>)
    f7b6:	401d      	ands	r5, r3
    f7b8:	2d00      	cmp	r5, #0
    f7ba:	d150      	bne.n	f85e <putchw+0xde>
    f7bc:	46a0      	mov	r8, r4
        while (n-- > 0)
    f7be:	f1b8 0f00 	cmp.w	r8, #0
    f7c2:	dc44      	bgt.n	f84e <putchw+0xce>
    f7c4:	1e63      	subs	r3, r4, #1
    f7c6:	2c00      	cmp	r4, #0
    f7c8:	bfac      	ite	ge
    f7ca:	1b1c      	subge	r4, r3, r4
    f7cc:	461c      	movlt	r4, r3
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
    f7ce:	78b3      	ldrb	r3, [r6, #2]
    f7d0:	07da      	lsls	r2, r3, #31
    f7d2:	d504      	bpl.n	f7de <putchw+0x5e>
        written += putf(putp, '-');
    f7d4:	212d      	movs	r1, #45	; 0x2d
    f7d6:	4638      	mov	r0, r7
    f7d8:	f7ff ffc1 	bl	f75e <putf>
    f7dc:	4405      	add	r5, r0

    /* Alternate */
    if (p->alt && p->base == 16) {
    f7de:	8873      	ldrh	r3, [r6, #2]
    f7e0:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    f7e4:	b29b      	uxth	r3, r3
    f7e6:	f241 0202 	movw	r2, #4098	; 0x1002
    f7ea:	4293      	cmp	r3, r2
    f7ec:	d139      	bne.n	f862 <putchw+0xe2>
        written += putf(putp, '0');
    f7ee:	2130      	movs	r1, #48	; 0x30
    f7f0:	4638      	mov	r0, r7
    f7f2:	f7ff ffb4 	bl	f75e <putf>
        written += putf(putp, (p->uc ? 'X' : 'x'));
    f7f6:	78b3      	ldrb	r3, [r6, #2]
    f7f8:	f013 0f04 	tst.w	r3, #4
        written += putf(putp, '0');
    f7fc:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
    f7fe:	bf14      	ite	ne
    f800:	2158      	movne	r1, #88	; 0x58
    f802:	2178      	moveq	r1, #120	; 0x78
    } else if (p->alt && p->base == 8) {
        written += putf(putp, '0');
    f804:	4638      	mov	r0, r7
    f806:	f7ff ffaa 	bl	f75e <putf>
    f80a:	4405      	add	r5, r0
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
    f80c:	7873      	ldrb	r3, [r6, #1]
    f80e:	b143      	cbz	r3, f822 <putchw+0xa2>
    f810:	46a0      	mov	r8, r4
        while (n-- > 0)
    f812:	f1b8 0f00 	cmp.w	r8, #0
    f816:	dc2a      	bgt.n	f86e <putchw+0xee>
    f818:	1e63      	subs	r3, r4, #1
    f81a:	2c00      	cmp	r4, #0
    f81c:	bfac      	ite	ge
    f81e:	1b1c      	subge	r4, r3, r4
    f820:	461c      	movlt	r4, r3
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
    f822:	f8d6 8004 	ldr.w	r8, [r6, #4]
    while ((ch = *bf++))
    f826:	f818 1b01 	ldrb.w	r1, [r8], #1
    f82a:	bb41      	cbnz	r1, f87e <putchw+0xfe>
        written += putf(putp, ch);

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
    f82c:	78b3      	ldrb	r3, [r6, #2]
    f82e:	071b      	lsls	r3, r3, #28
    f830:	d501      	bpl.n	f836 <putchw+0xb6>
        while (n-- > 0)
    f832:	2c00      	cmp	r4, #0
    f834:	dc28      	bgt.n	f888 <putchw+0x108>
            written += putf(putp, ' ');
    }
    
    return written;
}
    f836:	4628      	mov	r0, r5
    f838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        n--;
    f83c:	3c01      	subs	r4, #1
    f83e:	e7a5      	b.n	f78c <putchw+0xc>
    else if (p->alt && p->base == 8)
    f840:	f640 0202 	movw	r2, #2050	; 0x802
    f844:	4293      	cmp	r3, r2
        n--;
    f846:	bf08      	it	eq
    f848:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
    f84c:	e7b1      	b.n	f7b2 <putchw+0x32>
            written += putf(putp, ' ');
    f84e:	2120      	movs	r1, #32
    f850:	4638      	mov	r0, r7
    f852:	f7ff ff84 	bl	f75e <putf>
    f856:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    f85a:	4405      	add	r5, r0
    f85c:	e7af      	b.n	f7be <putchw+0x3e>
    unsigned written = 0;
    f85e:	2500      	movs	r5, #0
    f860:	e7b5      	b.n	f7ce <putchw+0x4e>
    } else if (p->alt && p->base == 8) {
    f862:	f640 0202 	movw	r2, #2050	; 0x802
    f866:	4293      	cmp	r3, r2
    f868:	d1d0      	bne.n	f80c <putchw+0x8c>
        written += putf(putp, '0');
    f86a:	2130      	movs	r1, #48	; 0x30
    f86c:	e7ca      	b.n	f804 <putchw+0x84>
            written += putf(putp, '0');
    f86e:	2130      	movs	r1, #48	; 0x30
    f870:	4638      	mov	r0, r7
    f872:	f7ff ff74 	bl	f75e <putf>
    f876:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    f87a:	4405      	add	r5, r0
    f87c:	e7c9      	b.n	f812 <putchw+0x92>
        written += putf(putp, ch);
    f87e:	4638      	mov	r0, r7
    f880:	f7ff ff6d 	bl	f75e <putf>
    f884:	4405      	add	r5, r0
    f886:	e7ce      	b.n	f826 <putchw+0xa6>
            written += putf(putp, ' ');
    f888:	2120      	movs	r1, #32
    f88a:	4638      	mov	r0, r7
    f88c:	f7ff ff67 	bl	f75e <putf>
    f890:	3c01      	subs	r4, #1
    f892:	4405      	add	r5, r0
    f894:	e7cd      	b.n	f832 <putchw+0xb2>
    f896:	bf00      	nop
    f898:	0008ff00 	.word	0x0008ff00

0000f89c <tfp_format>:

    return val;
}

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
    f89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8a0:	b08b      	sub	sp, #44	; 0x2c
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
    f8a2:	ae04      	add	r6, sp, #16
{
    f8a4:	4607      	mov	r7, r0
    f8a6:	4614      	mov	r4, r2
    p.bf = bf;
    f8a8:	9603      	str	r6, [sp, #12]
    size_t written = 0;
    f8aa:	2500      	movs	r5, #0

    while ((ch = *(fmt++))) {
    f8ac:	468a      	mov	sl, r1
    f8ae:	f81a 1b01 	ldrb.w	r1, [sl], #1
    f8b2:	b919      	cbnz	r1, f8bc <tfp_format+0x20>
        }
    }
 abort:;
 
 return written;
}
    f8b4:	4628      	mov	r0, r5
    f8b6:	b00b      	add	sp, #44	; 0x2c
    f8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ch != '%') {
    f8bc:	2925      	cmp	r1, #37	; 0x25
    f8be:	d003      	beq.n	f8c8 <tfp_format+0x2c>
                written += putf(putp, ch);
    f8c0:	4638      	mov	r0, r7
    f8c2:	f7ff ff4c 	bl	f75e <putf>
    f8c6:	e0d9      	b.n	fa7c <tfp_format+0x1e0>
            p.width = 0;
    f8c8:	f04f 0300 	mov.w	r3, #0
    f8cc:	f8ad 3008 	strh.w	r3, [sp, #8]
            p.sign = 0;
    f8d0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f8d4:	f023 030f 	bic.w	r3, r3, #15
    f8d8:	f88d 300a 	strb.w	r3, [sp, #10]
            while ((ch = *(fmt++))) {
    f8dc:	2300      	movs	r3, #0
    f8de:	461a      	mov	r2, r3
    f8e0:	4650      	mov	r0, sl
    f8e2:	f810 1b01 	ldrb.w	r1, [r0], #1
    f8e6:	b989      	cbnz	r1, f90c <tfp_format+0x70>
    f8e8:	b10b      	cbz	r3, f8ee <tfp_format+0x52>
    f8ea:	f88d 2009 	strb.w	r2, [sp, #9]
            lng = 0;
    f8ee:	2200      	movs	r2, #0
    f8f0:	4682      	mov	sl, r0
            switch (ch) {
    f8f2:	2978      	cmp	r1, #120	; 0x78
    f8f4:	d808      	bhi.n	f908 <tfp_format+0x6c>
    f8f6:	2962      	cmp	r1, #98	; 0x62
    f8f8:	d870      	bhi.n	f9dc <tfp_format+0x140>
    f8fa:	2925      	cmp	r1, #37	; 0x25
    f8fc:	d0e0      	beq.n	f8c0 <tfp_format+0x24>
    f8fe:	2958      	cmp	r1, #88	; 0x58
    f900:	f000 80be 	beq.w	fa80 <tfp_format+0x1e4>
    f904:	2900      	cmp	r1, #0
    f906:	d0d5      	beq.n	f8b4 <tfp_format+0x18>
                v = va_arg(va, void *);
    f908:	4651      	mov	r1, sl
    f90a:	e7cf      	b.n	f8ac <tfp_format+0x10>
                switch (ch) {
    f90c:	292d      	cmp	r1, #45	; 0x2d
    f90e:	d012      	beq.n	f936 <tfp_format+0x9a>
    f910:	2930      	cmp	r1, #48	; 0x30
    f912:	d008      	beq.n	f926 <tfp_format+0x8a>
    f914:	2923      	cmp	r1, #35	; 0x23
    f916:	d117      	bne.n	f948 <tfp_format+0xac>
                    p.alt = 1;
    f918:	f89d 100a 	ldrb.w	r1, [sp, #10]
    f91c:	f041 0102 	orr.w	r1, r1, #2
    f920:	f88d 100a 	strb.w	r1, [sp, #10]
                    continue;
    f924:	e005      	b.n	f932 <tfp_format+0x96>
                    if (!p.left) {
    f926:	f89d 100a 	ldrb.w	r1, [sp, #10]
    f92a:	0709      	lsls	r1, r1, #28
    f92c:	d401      	bmi.n	f932 <tfp_format+0x96>
    f92e:	2301      	movs	r3, #1
                        p.lz = 1;
    f930:	461a      	mov	r2, r3
    f932:	4682      	mov	sl, r0
    f934:	e7d4      	b.n	f8e0 <tfp_format+0x44>
                    p.left = 1;
    f936:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f93a:	f043 0308 	orr.w	r3, r3, #8
    f93e:	f88d 300a 	strb.w	r3, [sp, #10]
                    p.lz = 0;
    f942:	2200      	movs	r2, #0
                    continue;
    f944:	2301      	movs	r3, #1
    f946:	e7f4      	b.n	f932 <tfp_format+0x96>
    f948:	b10b      	cbz	r3, f94e <tfp_format+0xb2>
    f94a:	f88d 2009 	strb.w	r2, [sp, #9]
            if (ch == '*') {
    f94e:	292a      	cmp	r1, #42	; 0x2a
    f950:	d11d      	bne.n	f98e <tfp_format+0xf2>
            val = va_arg(*va, int);
    f952:	f854 3b04 	ldr.w	r3, [r4], #4
                if (i > UCHAR_MAX) {
    f956:	2bff      	cmp	r3, #255	; 0xff
    f958:	dd03      	ble.n	f962 <tfp_format+0xc6>
                    p.width = UCHAR_MAX;
    f95a:	23ff      	movs	r3, #255	; 0xff
                    p.width = i;
    f95c:	f88d 3008 	strb.w	r3, [sp, #8]
    f960:	e001      	b.n	f966 <tfp_format+0xca>
                } else if (i > 0) {
    f962:	2b00      	cmp	r3, #0
    f964:	dcfa      	bgt.n	f95c <tfp_format+0xc0>
                ch = *(fmt++);
    f966:	7801      	ldrb	r1, [r0, #0]
    f968:	f10a 0002 	add.w	r0, sl, #2
            if (ch == 'l') {
    f96c:	296c      	cmp	r1, #108	; 0x6c
    f96e:	d133      	bne.n	f9d8 <tfp_format+0x13c>
                ch = *(fmt++);
    f970:	7801      	ldrb	r1, [r0, #0]
                if (ch == 'l') {
    f972:	296c      	cmp	r1, #108	; 0x6c
                    ch = *(fmt++);
    f974:	bf0d      	iteet	eq
    f976:	7841      	ldrbeq	r1, [r0, #1]
                ch = *(fmt++);
    f978:	3001      	addne	r0, #1
                lng = 1;
    f97a:	2201      	movne	r2, #1
                    ch = *(fmt++);
    f97c:	3002      	addeq	r0, #2
                    lng = 2;
    f97e:	bf08      	it	eq
    f980:	2202      	moveq	r2, #2
            if (ch == 'z') {
    f982:	297a      	cmp	r1, #122	; 0x7a
    f984:	d1b4      	bne.n	f8f0 <tfp_format+0x54>
                ch = *(fmt++);
    f986:	4682      	mov	sl, r0
    f988:	f81a 1b01 	ldrb.w	r1, [sl], #1
    f98c:	e7b1      	b.n	f8f2 <tfp_format+0x56>
            } else if (ch >= '0' && ch <= '9') {
    f98e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    f992:	2b09      	cmp	r3, #9
    f994:	d8ea      	bhi.n	f96c <tfp_format+0xd0>
    int num = 0;
    f996:	2200      	movs	r2, #0
        num = num * base + digit;
    f998:	f04f 0c0a 	mov.w	ip, #10
    f99c:	e003      	b.n	f9a6 <tfp_format+0x10a>
        ch = *p++;
    f99e:	f810 1b01 	ldrb.w	r1, [r0], #1
        num = num * base + digit;
    f9a2:	fb0c 3202 	mla	r2, ip, r2, r3
    if (ch >= '0' && ch <= '9')
    f9a6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    f9aa:	fa5f fe83 	uxtb.w	lr, r3
    f9ae:	f1be 0f09 	cmp.w	lr, #9
    f9b2:	d9f4      	bls.n	f99e <tfp_format+0x102>
    else if (ch >= 'a' && ch <= 'f')
    f9b4:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
    f9b8:	2b05      	cmp	r3, #5
    f9ba:	d806      	bhi.n	f9ca <tfp_format+0x12e>
        return ch - 'a' + 10;
    f9bc:	f1a1 0357 	sub.w	r3, r1, #87	; 0x57
        if (digit > base)
    f9c0:	2b0a      	cmp	r3, #10
    f9c2:	d0ec      	beq.n	f99e <tfp_format+0x102>
    *nump = num;
    f9c4:	f88d 2008 	strb.w	r2, [sp, #8]
    return ch;
    f9c8:	e7d0      	b.n	f96c <tfp_format+0xd0>
    else if (ch >= 'A' && ch <= 'F')
    f9ca:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    f9ce:	2b05      	cmp	r3, #5
    f9d0:	d8f8      	bhi.n	f9c4 <tfp_format+0x128>
        return ch - 'A' + 10;
    f9d2:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
    f9d6:	e7f3      	b.n	f9c0 <tfp_format+0x124>
            lng = 0;
    f9d8:	2200      	movs	r2, #0
    f9da:	e7d2      	b.n	f982 <tfp_format+0xe6>
            switch (ch) {
    f9dc:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
    f9e0:	2b15      	cmp	r3, #21
    f9e2:	d891      	bhi.n	f908 <tfp_format+0x6c>
    f9e4:	a001      	add	r0, pc, #4	; (adr r0, f9ec <tfp_format+0x150>)
    f9e6:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    f9ea:	bf00      	nop
    f9ec:	0000fb01 	.word	0x0000fb01
    f9f0:	0000fa4d 	.word	0x0000fa4d
    f9f4:	0000f909 	.word	0x0000f909
    f9f8:	0000fb1d 	.word	0x0000fb1d
    f9fc:	0000f909 	.word	0x0000f909
    fa00:	0000f909 	.word	0x0000f909
    fa04:	0000fa4d 	.word	0x0000fa4d
    fa08:	0000f909 	.word	0x0000f909
    fa0c:	0000f909 	.word	0x0000f909
    fa10:	0000f909 	.word	0x0000f909
    fa14:	0000f909 	.word	0x0000f909
    fa18:	0000f909 	.word	0x0000f909
    fa1c:	0000fab1 	.word	0x0000fab1
    fa20:	0000fac3 	.word	0x0000fac3
    fa24:	0000f909 	.word	0x0000f909
    fa28:	0000f909 	.word	0x0000f909
    fa2c:	0000fb09 	.word	0x0000fb09
    fa30:	0000f909 	.word	0x0000f909
    fa34:	0000fa45 	.word	0x0000fa45
    fa38:	0000f909 	.word	0x0000f909
    fa3c:	0000f909 	.word	0x0000f909
    fa40:	0000fa81 	.word	0x0000fa81
                p.base = 10;
    fa44:	230a      	movs	r3, #10
                p.base = 8;
    fa46:	f88d 300b 	strb.w	r3, [sp, #11]
    fa4a:	e026      	b.n	fa9a <tfp_format+0x1fe>
                p.base = 10;
    fa4c:	230a      	movs	r3, #10
    fa4e:	f88d 300b 	strb.w	r3, [sp, #11]
    switch (lng) {
    fa52:	b14a      	cbz	r2, fa68 <tfp_format+0x1cc>
    fa54:	2a01      	cmp	r2, #1
    fa56:	d007      	beq.n	fa68 <tfp_format+0x1cc>
            val = va_arg(*va, long long);
    fa58:	1de2      	adds	r2, r4, #7
    fa5a:	f022 0207 	bic.w	r2, r2, #7
    fa5e:	4614      	mov	r4, r2
    fa60:	6851      	ldr	r1, [r2, #4]
    fa62:	f854 0b08 	ldr.w	r0, [r4], #8
    fa66:	e002      	b.n	fa6e <tfp_format+0x1d2>
            val = va_arg(*va, long);
    fa68:	f854 0b04 	ldr.w	r0, [r4], #4
    fa6c:	17c1      	asrs	r1, r0, #31
                i2a(intarg(lng, 1, &va), &p);
    fa6e:	aa02      	add	r2, sp, #8
    fa70:	f7ff fe6a 	bl	f748 <i2a>
                written += putchw(putp, &p);
    fa74:	a902      	add	r1, sp, #8
    fa76:	4638      	mov	r0, r7
    fa78:	f7ff fe82 	bl	f780 <putchw>
                written += putf(putp, ch);
    fa7c:	4405      	add	r5, r0
                break;
    fa7e:	e743      	b.n	f908 <tfp_format+0x6c>
                p.uc = (ch == 'X');
    fa80:	3958      	subs	r1, #88	; 0x58
    fa82:	424b      	negs	r3, r1
    fa84:	414b      	adcs	r3, r1
    fa86:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    fa8a:	009b      	lsls	r3, r3, #2
    fa8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    fa90:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    fa94:	430b      	orrs	r3, r1
    fa96:	f8ad 300a 	strh.w	r3, [sp, #10]
    switch (lng) {
    fa9a:	b15a      	cbz	r2, fab4 <tfp_format+0x218>
    fa9c:	2a01      	cmp	r2, #1
    fa9e:	d009      	beq.n	fab4 <tfp_format+0x218>
            val = va_arg(*va, unsigned long long);
    faa0:	1de2      	adds	r2, r4, #7
    faa2:	f022 0207 	bic.w	r2, r2, #7
    faa6:	4614      	mov	r4, r2
    faa8:	6851      	ldr	r1, [r2, #4]
    faaa:	f854 0b08 	ldr.w	r0, [r4], #8
    faae:	e004      	b.n	faba <tfp_format+0x21e>
                p.base = 8;
    fab0:	2308      	movs	r3, #8
    fab2:	e7c8      	b.n	fa46 <tfp_format+0x1aa>
            val = va_arg(*va, unsigned long);
    fab4:	f854 0b04 	ldr.w	r0, [r4], #4
    fab8:	2100      	movs	r1, #0
                ui2a(intarg(lng, 0, &va), &p);
    faba:	aa02      	add	r2, sp, #8
    fabc:	f7ff fdea 	bl	f694 <ui2a>
                written += putchw(putp, &p);
    fac0:	e7d8      	b.n	fa74 <tfp_format+0x1d8>
                ui2a((uintptr_t)v, &p);
    fac2:	aa02      	add	r2, sp, #8
                p.base = 16;
    fac4:	2310      	movs	r3, #16
                ui2a((uintptr_t)v, &p);
    fac6:	f854 0b04 	ldr.w	r0, [r4], #4
                p.base = 16;
    faca:	f88d 300b 	strb.w	r3, [sp, #11]
                ui2a((uintptr_t)v, &p);
    face:	2100      	movs	r1, #0
    fad0:	f7ff fde0 	bl	f694 <ui2a>
                p.width = 2 * sizeof(void*);
    fad4:	f44f 7384 	mov.w	r3, #264	; 0x108
                written += putf(putp, '0');
    fad8:	2130      	movs	r1, #48	; 0x30
    fada:	4638      	mov	r0, r7
                p.width = 2 * sizeof(void*);
    fadc:	f8ad 3008 	strh.w	r3, [sp, #8]
                written += putf(putp, '0');
    fae0:	f7ff fe3d 	bl	f75e <putf>
                written += putf(putp, 'x');
    fae4:	2178      	movs	r1, #120	; 0x78
                written += putf(putp, '0');
    fae6:	4681      	mov	r9, r0
                written += putf(putp, 'x');
    fae8:	4638      	mov	r0, r7
    faea:	f7ff fe38 	bl	f75e <putf>
                written += putchw(putp, &p);
    faee:	a902      	add	r1, sp, #8
                written += putf(putp, 'x');
    faf0:	4680      	mov	r8, r0
                written += putchw(putp, &p);
    faf2:	4638      	mov	r0, r7
    faf4:	f7ff fe44 	bl	f780 <putchw>
    faf8:	4405      	add	r5, r0
    fafa:	444d      	add	r5, r9
    fafc:	4445      	add	r5, r8
                break;
    fafe:	e703      	b.n	f908 <tfp_format+0x6c>
                written += putf(putp, (char)(va_arg(va, int)));
    fb00:	f854 1b04 	ldr.w	r1, [r4], #4
    fb04:	b2c9      	uxtb	r1, r1
    fb06:	e6db      	b.n	f8c0 <tfp_format+0x24>
                p.bf = va_arg(va, char *);
    fb08:	f854 3b04 	ldr.w	r3, [r4], #4
    fb0c:	9303      	str	r3, [sp, #12]
                written += putchw(putp, &p);
    fb0e:	a902      	add	r1, sp, #8
    fb10:	4638      	mov	r0, r7
    fb12:	f7ff fe35 	bl	f780 <putchw>
                p.bf = bf;
    fb16:	9603      	str	r6, [sp, #12]
                written += putchw(putp, &p);
    fb18:	4405      	add	r5, r0
                break;
    fb1a:	e6f5      	b.n	f908 <tfp_format+0x6c>
                d = va_arg(va, double);
    fb1c:	3407      	adds	r4, #7
    fb1e:	f024 0407 	bic.w	r4, r4, #7
    fb22:	e8f4 8902 	ldrd	r8, r9, [r4], #8
                p.base = 10;
    fb26:	230a      	movs	r3, #10
                n = d;
    fb28:	4649      	mov	r1, r9
    fb2a:	4640      	mov	r0, r8
                p.base = 10;
    fb2c:	f88d 300b 	strb.w	r3, [sp, #11]
                n = d;
    fb30:	f010 fc76 	bl	20420 <__aeabi_d2iz>
                i2a(n, &p);
    fb34:	aa02      	add	r2, sp, #8
    fb36:	17c1      	asrs	r1, r0, #31
                n = d;
    fb38:	4683      	mov	fp, r0
                i2a(n, &p);
    fb3a:	f7ff fe05 	bl	f748 <i2a>
                if (d < 0.0) {
    fb3e:	2200      	movs	r2, #0
    fb40:	2300      	movs	r3, #0
    fb42:	4640      	mov	r0, r8
    fb44:	4649      	mov	r1, r9
    fb46:	f010 fc2d 	bl	203a4 <__aeabi_dcmplt>
    fb4a:	b128      	cbz	r0, fb58 <tfp_format+0x2bc>
                    p.sign = 1;
    fb4c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    fb50:	f043 0301 	orr.w	r3, r3, #1
    fb54:	f88d 300a 	strb.w	r3, [sp, #10]
                p.left = 0;
    fb58:	f89d 300a 	ldrb.w	r3, [sp, #10]
    fb5c:	f36f 03c3 	bfc	r3, #3, #1
    fb60:	f88d 300a 	strb.w	r3, [sp, #10]
                if (p.width >= 4) {
    fb64:	f89d 3008 	ldrb.w	r3, [sp, #8]
    fb68:	2b03      	cmp	r3, #3
                    p.width -= 4;
    fb6a:	bf86      	itte	hi
    fb6c:	3b04      	subhi	r3, #4
    fb6e:	b2db      	uxtbhi	r3, r3
                    p.width = 0;
    fb70:	2300      	movls	r3, #0
                written += putchw(putp, &p);
    fb72:	a902      	add	r1, sp, #8
    fb74:	4638      	mov	r0, r7
    fb76:	f88d 3008 	strb.w	r3, [sp, #8]
    fb7a:	f7ff fe01 	bl	f780 <putchw>
    fb7e:	9001      	str	r0, [sp, #4]
                n = (d-n)*1000;
    fb80:	4658      	mov	r0, fp
    fb82:	f010 f933 	bl	1fdec <__aeabi_i2d>
    fb86:	4602      	mov	r2, r0
    fb88:	460b      	mov	r3, r1
    fb8a:	4640      	mov	r0, r8
    fb8c:	4649      	mov	r1, r9
    fb8e:	f00f ffdf 	bl	1fb50 <__aeabi_dsub>
    fb92:	4b10      	ldr	r3, [pc, #64]	; (fbd4 <tfp_format+0x338>)
    fb94:	2200      	movs	r2, #0
    fb96:	f010 f993 	bl	1fec0 <__aeabi_dmul>
    fb9a:	f010 fc41 	bl	20420 <__aeabi_d2iz>
                i2a(n, &p);
    fb9e:	aa02      	add	r2, sp, #8
    fba0:	17c1      	asrs	r1, r0, #31
    fba2:	f7ff fdd1 	bl	f748 <i2a>
                p.width = 3;
    fba6:	f240 3303 	movw	r3, #771	; 0x303
    fbaa:	f8ad 3008 	strh.w	r3, [sp, #8]
                p.sign = 0;
    fbae:	f89d 300a 	ldrb.w	r3, [sp, #10]
                putf(putp, '.');
    fbb2:	212e      	movs	r1, #46	; 0x2e
                p.sign = 0;
    fbb4:	f36f 0300 	bfc	r3, #0, #1
                putf(putp, '.');
    fbb8:	4638      	mov	r0, r7
                p.sign = 0;
    fbba:	f88d 300a 	strb.w	r3, [sp, #10]
                putf(putp, '.');
    fbbe:	f7ff fdce 	bl	f75e <putf>
                written += putchw(putp, &p);
    fbc2:	a902      	add	r1, sp, #8
    fbc4:	4638      	mov	r0, r7
    fbc6:	f7ff fddb 	bl	f780 <putchw>
    fbca:	9b01      	ldr	r3, [sp, #4]
    fbcc:	4403      	add	r3, r0
    fbce:	4618      	mov	r0, r3
    fbd0:	e754      	b.n	fa7c <tfp_format+0x1e0>
    fbd2:	bf00      	nop
    fbd4:	408f4000 	.word	0x408f4000

0000fbd8 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
    return tfp_format(f, fmt, va);
    fbd8:	f7ff be60 	b.w	f89c <tfp_format>

0000fbdc <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
    fbdc:	b40f      	push	{r0, r1, r2, r3}
    fbde:	b507      	push	{r0, r1, r2, lr}
    return tfp_format(f, fmt, va);
    fbe0:	4b06      	ldr	r3, [pc, #24]	; (fbfc <printf+0x20>)
{
    fbe2:	aa04      	add	r2, sp, #16
    return tfp_format(f, fmt, va);
    fbe4:	6818      	ldr	r0, [r3, #0]
{
    fbe6:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
    fbea:	9201      	str	r2, [sp, #4]
    return tfp_format(f, fmt, va);
    fbec:	f7ff fe56 	bl	f89c <tfp_format>
    int rv = vfprintf(stdout, fmt, va);
    va_end(va);
    return rv;
}
    fbf0:	b003      	add	sp, #12
    fbf2:	f85d eb04 	ldr.w	lr, [sp], #4
    fbf6:	b004      	add	sp, #16
    fbf8:	4770      	bx	lr
    fbfa:	bf00      	nop
    fbfc:	00022484 	.word	0x00022484

0000fc00 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
    fc00:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc02:	b085      	sub	sp, #20
    fc04:	460d      	mov	r5, r1
    fc06:	4616      	mov	r6, r2
    fc08:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
    fc0a:	460a      	mov	r2, r1
{
    fc0c:	4604      	mov	r4, r0
    FILE *f = fmemopen_w(&state, str, size);
    fc0e:	4601      	mov	r1, r0
    fc10:	4668      	mov	r0, sp
    fc12:	f000 f835 	bl	fc80 <fmemopen_w>
    tfp_format(f, fmt, va);
    fc16:	463a      	mov	r2, r7
    fc18:	4631      	mov	r1, r6
    fc1a:	f7ff fe3f 	bl	f89c <tfp_format>
    if (size > 0) {
    fc1e:	b155      	cbz	r5, fc36 <vsnprintf+0x36>
        if (state.bytes_written < size) {
    fc20:	9b02      	ldr	r3, [sp, #8]
    fc22:	42ab      	cmp	r3, r5
            *(state.buffer) = '\0';
    fc24:	bf34      	ite	cc
    fc26:	9a01      	ldrcc	r2, [sp, #4]
        } else {
            str[size - 1] = '\0';
    fc28:	1964      	addcs	r4, r4, r5
    fc2a:	f04f 0300 	mov.w	r3, #0
            *(state.buffer) = '\0';
    fc2e:	bf34      	ite	cc
    fc30:	7013      	strbcc	r3, [r2, #0]
            str[size - 1] = '\0';
    fc32:	f804 3c01 	strbcs.w	r3, [r4, #-1]
        }
    }
    return state.bytes_written;
}
    fc36:	9802      	ldr	r0, [sp, #8]
    fc38:	b005      	add	sp, #20
    fc3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fc3c <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...)
{
    fc3c:	b40c      	push	{r2, r3}
    fc3e:	b507      	push	{r0, r1, r2, lr}
    fc40:	ab04      	add	r3, sp, #16
    fc42:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, fmt);
    fc46:	9301      	str	r3, [sp, #4]
    int rv = vsnprintf(str, size, fmt, va);
    fc48:	f7ff ffda 	bl	fc00 <vsnprintf>
    va_end(va);
    return rv;
}
    fc4c:	b003      	add	sp, #12
    fc4e:	f85d eb04 	ldr.w	lr, [sp], #4
    fc52:	b002      	add	sp, #8
    fc54:	4770      	bx	lr

0000fc56 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
    fc56:	b530      	push	{r4, r5, lr}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
    fc58:	2400      	movs	r4, #0
    
    while (n--)
    fc5a:	3a01      	subs	r2, #1
    fc5c:	d201      	bcs.n	fc62 <memfile_write+0xc>
            i++;
        }
    }
    
    return i;
}
    fc5e:	4620      	mov	r0, r4
    fc60:	bd30      	pop	{r4, r5, pc}
        f->bytes_written++;
    fc62:	6883      	ldr	r3, [r0, #8]
        if (f->bytes_written <= f->size)
    fc64:	68c5      	ldr	r5, [r0, #12]
        f->bytes_written++;
    fc66:	3301      	adds	r3, #1
        if (f->bytes_written <= f->size)
    fc68:	42ab      	cmp	r3, r5
        f->bytes_written++;
    fc6a:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
    fc6c:	d8f5      	bhi.n	fc5a <memfile_write+0x4>
            *f->buffer++ = *bp++;
    fc6e:	6843      	ldr	r3, [r0, #4]
    fc70:	1c5d      	adds	r5, r3, #1
    fc72:	6045      	str	r5, [r0, #4]
    fc74:	f811 5b01 	ldrb.w	r5, [r1], #1
    fc78:	701d      	strb	r5, [r3, #0]
            i++;
    fc7a:	3401      	adds	r4, #1
    fc7c:	e7ed      	b.n	fc5a <memfile_write+0x4>
	...

0000fc80 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
    fc80:	b510      	push	{r4, lr}
    storage->file.vmt = &MemFile_methods;
    fc82:	4c03      	ldr	r4, [pc, #12]	; (fc90 <fmemopen_w+0x10>)
    storage->buffer = buffer;
    fc84:	e9c0 4100 	strd	r4, r1, [r0]
    storage->bytes_written = 0;
    fc88:	2100      	movs	r1, #0
    storage->size = size;
    fc8a:	e9c0 1202 	strd	r1, r2, [r0, #8]
    return (FILE*)storage;
}
    fc8e:	bd10      	pop	{r4, pc}
    fc90:	00022488 	.word	0x00022488

0000fc94 <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
    fc94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fc98:	460f      	mov	r7, r1
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
    fc9a:	4949      	ldr	r1, [pc, #292]	; (fdc0 <strntoumax+0x12c>)
    fc9c:	4604      	mov	r4, r0
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
    fc9e:	2b00      	cmp	r3, #0
    fca0:	f000 8084 	beq.w	fdac <strntoumax+0x118>
    fca4:	f890 c000 	ldrb.w	ip, [r0]
    fca8:	f1ac 0509 	sub.w	r5, ip, #9
    fcac:	b2ed      	uxtb	r5, r5
    fcae:	2d17      	cmp	r5, #23
    fcb0:	f100 0001 	add.w	r0, r0, #1
    fcb4:	d91c      	bls.n	fcf0 <strntoumax+0x5c>
	}

	/* Single optional + or - */
	if (n) {
		char c = *nptr;
		if (c == '-' || c == '+') {
    fcb6:	f1bc 0f2d 	cmp.w	ip, #45	; 0x2d
    fcba:	d002      	beq.n	fcc2 <strntoumax+0x2e>
    fcbc:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
    fcc0:	d11c      	bne.n	fcfc <strntoumax+0x68>
			minus = (c == '-');
    fcc2:	f1ac 012d 	sub.w	r1, ip, #45	; 0x2d
    fcc6:	f1d1 0c00 	rsbs	ip, r1, #0
    fcca:	eb4c 0c01 	adc.w	ip, ip, r1
			nptr++;
    fcce:	3401      	adds	r4, #1
			n--;
    fcd0:	3b01      	subs	r3, #1
		}
	}

	if (base == 0) {
    fcd2:	bb32      	cbnz	r2, fd22 <strntoumax+0x8e>
		if (n >= 2 && nptr[0] == '0' &&
    fcd4:	2b01      	cmp	r3, #1
    fcd6:	d914      	bls.n	fd02 <strntoumax+0x6e>
    fcd8:	7822      	ldrb	r2, [r4, #0]
    fcda:	2a30      	cmp	r2, #48	; 0x30
    fcdc:	d14c      	bne.n	fd78 <strntoumax+0xe4>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
    fcde:	7862      	ldrb	r2, [r4, #1]
    fce0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    fce4:	2a58      	cmp	r2, #88	; 0x58
    fce6:	d111      	bne.n	fd0c <strntoumax+0x78>
			n -= 2;
    fce8:	3b02      	subs	r3, #2
			nptr += 2;
    fcea:	3402      	adds	r4, #2
			base = 16;
    fcec:	2210      	movs	r2, #16
    fcee:	e010      	b.n	fd12 <strntoumax+0x7e>
    fcf0:	fa21 f505 	lsr.w	r5, r1, r5
    fcf4:	07ed      	lsls	r5, r5, #31
    fcf6:	d501      	bpl.n	fcfc <strntoumax+0x68>
		n--;
    fcf8:	3b01      	subs	r3, #1
    fcfa:	e7cf      	b.n	fc9c <strntoumax+0x8>
	int minus = 0;
    fcfc:	f04f 0c00 	mov.w	ip, #0
    fd00:	e7e7      	b.n	fcd2 <strntoumax+0x3e>
		} else if (n >= 1 && nptr[0] == '0') {
    fd02:	2b00      	cmp	r3, #0
    fd04:	d041      	beq.n	fd8a <strntoumax+0xf6>
    fd06:	7822      	ldrb	r2, [r4, #0]
    fd08:	2a30      	cmp	r2, #48	; 0x30
    fd0a:	d134      	bne.n	fd76 <strntoumax+0xe2>
			n--;
    fd0c:	3b01      	subs	r3, #1
			nptr++;
    fd0e:	3401      	adds	r4, #1
			base = 8;
    fd10:	2208      	movs	r2, #8
			base = 16;
    fd12:	2000      	movs	r0, #0
    fd14:	46a6      	mov	lr, r4
    fd16:	eb04 0803 	add.w	r8, r4, r3
    fd1a:	4601      	mov	r1, r0
			nptr += 2;
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
		v = v * base + d;
    fd1c:	ea4f 79e2 	mov.w	r9, r2, asr #31
    fd20:	e017      	b.n	fd52 <strntoumax+0xbe>
	} else if (base == 16) {
    fd22:	2a10      	cmp	r2, #16
    fd24:	d1f5      	bne.n	fd12 <strntoumax+0x7e>
		if (n >= 2 && nptr[0] == '0' &&
    fd26:	2b01      	cmp	r3, #1
    fd28:	d9e0      	bls.n	fcec <strntoumax+0x58>
    fd2a:	7821      	ldrb	r1, [r4, #0]
    fd2c:	2930      	cmp	r1, #48	; 0x30
    fd2e:	d1f0      	bne.n	fd12 <strntoumax+0x7e>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
    fd30:	7861      	ldrb	r1, [r4, #1]
    fd32:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    fd36:	2958      	cmp	r1, #88	; 0x58
    fd38:	d1eb      	bne.n	fd12 <strntoumax+0x7e>
			n -= 2;
    fd3a:	3b02      	subs	r3, #2
			nptr += 2;
    fd3c:	3402      	adds	r4, #2
    fd3e:	e7e8      	b.n	fd12 <strntoumax+0x7e>
		v = v * base + d;
    fd40:	4351      	muls	r1, r2
    fd42:	fb00 1109 	mla	r1, r0, r9, r1
    fd46:	fba2 3000 	umull	r3, r0, r2, r0
    fd4a:	180c      	adds	r4, r1, r0
    fd4c:	18e8      	adds	r0, r5, r3
    fd4e:	eb44 71e5 	adc.w	r1, r4, r5, asr #31
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
    fd52:	45f0      	cmp	r8, lr
    fd54:	4674      	mov	r4, lr
    fd56:	d01a      	beq.n	fd8e <strntoumax+0xfa>
    fd58:	f81e 6b01 	ldrb.w	r6, [lr], #1
	if (ch >= '0' && ch <= '9') {
    fd5c:	f1a6 0530 	sub.w	r5, r6, #48	; 0x30
    fd60:	2d09      	cmp	r5, #9
    fd62:	d905      	bls.n	fd70 <strntoumax+0xdc>
	} else if (ch >= 'A' && ch <= 'Z') {
    fd64:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
    fd68:	2b19      	cmp	r3, #25
    fd6a:	d807      	bhi.n	fd7c <strntoumax+0xe8>
		return ch - 'A' + 10;
    fd6c:	f1a6 0537 	sub.w	r5, r6, #55	; 0x37
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
    fd70:	42aa      	cmp	r2, r5
    fd72:	dce5      	bgt.n	fd40 <strntoumax+0xac>
    fd74:	e00b      	b.n	fd8e <strntoumax+0xfa>
    fd76:	2301      	movs	r3, #1
			base = 10;
    fd78:	220a      	movs	r2, #10
    fd7a:	e7ca      	b.n	fd12 <strntoumax+0x7e>
	} else if (ch >= 'a' && ch <= 'z') {
    fd7c:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
    fd80:	2b19      	cmp	r3, #25
    fd82:	d804      	bhi.n	fd8e <strntoumax+0xfa>
		return ch - 'a' + 10;
    fd84:	f1a6 0557 	sub.w	r5, r6, #87	; 0x57
    fd88:	e7f2      	b.n	fd70 <strntoumax+0xdc>
    fd8a:	4618      	mov	r0, r3
    fd8c:	4619      	mov	r1, r3
		n--;
		nptr++;
	}

	if (endptr)
    fd8e:	b95f      	cbnz	r7, fda8 <strntoumax+0x114>
		*endptr = (char *)nptr;

	return minus ? -v : v;
    fd90:	f1bc 0f00 	cmp.w	ip, #0
    fd94:	d003      	beq.n	fd9e <strntoumax+0x10a>
    fd96:	4243      	negs	r3, r0
    fd98:	4618      	mov	r0, r3
    fd9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
}
    fd9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	int minus = 0;
    fda2:	4694      	mov	ip, r2
	if (endptr)
    fda4:	4610      	mov	r0, r2
    fda6:	4611      	mov	r1, r2
		*endptr = (char *)nptr;
    fda8:	603c      	str	r4, [r7, #0]
    fdaa:	e7f1      	b.n	fd90 <strntoumax+0xfc>
	if (base == 0) {
    fdac:	b922      	cbnz	r2, fdb8 <strntoumax+0x124>
	if (endptr)
    fdae:	2f00      	cmp	r7, #0
    fdb0:	d1f7      	bne.n	fda2 <strntoumax+0x10e>
    fdb2:	4638      	mov	r0, r7
    fdb4:	4639      	mov	r1, r7
    fdb6:	e7f2      	b.n	fd9e <strntoumax+0x10a>
	} else if (base == 16) {
    fdb8:	2a10      	cmp	r2, #16
	int minus = 0;
    fdba:	469c      	mov	ip, r3
	} else if (base == 16) {
    fdbc:	d1a9      	bne.n	fd12 <strntoumax+0x7e>
    fdbe:	e795      	b.n	fcec <strntoumax+0x58>
    fdc0:	00800013 	.word	0x00800013

0000fdc4 <cbor_encode_text_stringz>:
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
    fdc4:	b513      	push	{r0, r1, r4, lr}
    fdc6:	4604      	mov	r4, r0
    fdc8:	4608      	mov	r0, r1
    fdca:	9101      	str	r1, [sp, #4]
    fdcc:	f7ff fc47 	bl	f65e <strlen>
    fdd0:	9901      	ldr	r1, [sp, #4]
    fdd2:	4602      	mov	r2, r0
    fdd4:	4620      	mov	r0, r4
    fdd6:	b002      	add	sp, #8
    fdd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fddc:	f006 b955 	b.w	1608a <cbor_encode_text_string>

0000fde0 <imgr_upload_good_rsp>:
    return 0;
}

static int
imgr_upload_good_rsp(struct mgmt_cbuf *cb)
{
    fde0:	b538      	push	{r3, r4, r5, lr}
    CborError err = CborNoError;

    err |= cbor_encode_text_stringz(&cb->encoder, "rc");
    fde2:	f100 050c 	add.w	r5, r0, #12
    fde6:	490e      	ldr	r1, [pc, #56]	; (fe20 <imgr_upload_good_rsp+0x40>)
    fde8:	4628      	mov	r0, r5
    fdea:	f7ff ffeb 	bl	fdc4 <cbor_encode_text_stringz>
    err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
    fdee:	2200      	movs	r2, #0
    fdf0:	2300      	movs	r3, #0
    err |= cbor_encode_text_stringz(&cb->encoder, "rc");
    fdf2:	4604      	mov	r4, r0
    err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
    fdf4:	4628      	mov	r0, r5
    fdf6:	f006 f917 	bl	16028 <cbor_encode_int>
    err |= cbor_encode_text_stringz(&cb->encoder, "off");
    fdfa:	490a      	ldr	r1, [pc, #40]	; (fe24 <imgr_upload_good_rsp+0x44>)
    err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
    fdfc:	4304      	orrs	r4, r0
    err |= cbor_encode_text_stringz(&cb->encoder, "off");
    fdfe:	4628      	mov	r0, r5
    fe00:	f7ff ffe0 	bl	fdc4 <cbor_encode_text_stringz>
    err |= cbor_encode_int(&cb->encoder, imgr_state.off);
    fe04:	4b08      	ldr	r3, [pc, #32]	; (fe28 <imgr_upload_good_rsp+0x48>)
    err |= cbor_encode_text_stringz(&cb->encoder, "off");
    fe06:	4304      	orrs	r4, r0
    err |= cbor_encode_int(&cb->encoder, imgr_state.off);
    fe08:	685a      	ldr	r2, [r3, #4]
    fe0a:	4628      	mov	r0, r5
    fe0c:	2300      	movs	r3, #0
    fe0e:	f006 f90b 	bl	16028 <cbor_encode_int>

    if (err != 0) {
        return MGMT_ERR_ENOMEM;
    fe12:	ea54 0300 	orrs.w	r3, r4, r0
    }

    return 0;
}
    fe16:	bf14      	ite	ne
    fe18:	2002      	movne	r0, #2
    fe1a:	2000      	moveq	r0, #0
    fe1c:	bd38      	pop	{r3, r4, r5, pc}
    fe1e:	bf00      	nop
    fe20:	00022490 	.word	0x00022490
    fe24:	00022493 	.word	0x00022493
    fe28:	20003cb4 	.word	0x20003cb4

0000fe2c <imgr_erase.part.0>:
imgr_erase_state(struct mgmt_cbuf *cb)
    fe2c:	b538      	push	{r3, r4, r5, lr}
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
    fe2e:	f100 050c 	add.w	r5, r0, #12
    fe32:	4909      	ldr	r1, [pc, #36]	; (fe58 <imgr_erase.part.0+0x2c>)
    fe34:	4628      	mov	r0, r5
    fe36:	f7ff ffc5 	bl	fdc4 <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
    fe3a:	2200      	movs	r2, #0
    fe3c:	2300      	movs	r3, #0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
    fe3e:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
    fe40:	4628      	mov	r0, r5
    fe42:	f006 f8f1 	bl	16028 <cbor_encode_int>
    if (g_err) {
    fe46:	4320      	orrs	r0, r4
    imgr_state.area_id = -1;
    fe48:	bf03      	ittte	eq
    fe4a:	4b04      	ldreq	r3, [pc, #16]	; (fe5c <imgr_erase.part.0+0x30>)
    fe4c:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    fe50:	601a      	streq	r2, [r3, #0]
        return MGMT_ERR_ENOMEM;
    fe52:	2002      	movne	r0, #2
}
    fe54:	bd38      	pop	{r3, r4, r5, pc}
    fe56:	bf00      	nop
    fe58:	00022490 	.word	0x00022490
    fe5c:	20003cb4 	.word	0x20003cb4

0000fe60 <imgr_read_info>:
{
    fe60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe64:	b08a      	sub	sp, #40	; 0x28
    fe66:	460c      	mov	r4, r1
    fe68:	4615      	mov	r5, r2
    fe6a:	461e      	mov	r6, r3
    area_id = flash_area_id_from_image_slot(image_slot);
    fe6c:	f002 fd14 	bl	12898 <flash_area_id_from_image_slot>
    rc2 = flash_area_open(area_id, &fa);
    fe70:	4669      	mov	r1, sp
    fe72:	b2c0      	uxtb	r0, r0
    fe74:	f002 fc60 	bl	12738 <flash_area_open>
    if (rc2) {
    fe78:	4601      	mov	r1, r0
    fe7a:	b110      	cbz	r0, fe82 <imgr_read_info+0x22>
        rc = -1;
    fe7c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    fe80:	e059      	b.n	ff36 <imgr_read_info+0xd6>
    rc2 = flash_area_read_is_empty(fa, 0, hdr, sizeof(*hdr));
    fe82:	9800      	ldr	r0, [sp, #0]
    fe84:	2320      	movs	r3, #32
    fe86:	aa02      	add	r2, sp, #8
    fe88:	f002 fcfe 	bl	12888 <flash_area_read_is_empty>
    if (rc2 < 0) {
    fe8c:	2800      	cmp	r0, #0
    fe8e:	dbf5      	blt.n	fe7c <imgr_read_info+0x1c>
    if (ver) {
    fe90:	b11c      	cbz	r4, fe9a <imgr_read_info+0x3a>
        memset(ver, 0xff, sizeof(*ver));
    fe92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fe96:	6023      	str	r3, [r4, #0]
    fe98:	6063      	str	r3, [r4, #4]
    if (hdr->ih_magic == IMAGE_MAGIC) {
    fe9a:	4b2a      	ldr	r3, [pc, #168]	; (ff44 <imgr_read_info+0xe4>)
    fe9c:	9a02      	ldr	r2, [sp, #8]
    fe9e:	429a      	cmp	r2, r3
    fea0:	d13c      	bne.n	ff1c <imgr_read_info+0xbc>
        if (ver) {
    fea2:	b11c      	cbz	r4, feac <imgr_read_info+0x4c>
            memcpy(ver, &hdr->ih_ver, sizeof(*ver));
    fea4:	ab07      	add	r3, sp, #28
    fea6:	cb03      	ldmia	r3!, {r0, r1}
    fea8:	6020      	str	r0, [r4, #0]
    feaa:	6061      	str	r1, [r4, #4]
    if (flags) {
    feac:	b10e      	cbz	r6, feb2 <imgr_read_info+0x52>
        *flags = hdr->ih_flags;
    feae:	9b06      	ldr	r3, [sp, #24]
    feb0:	6033      	str	r3, [r6, #0]
    data_off = hdr->ih_hdr_size + hdr->ih_img_size;
    feb2:	9905      	ldr	r1, [sp, #20]
    feb4:	f8bd 4010 	ldrh.w	r4, [sp, #16]
    rc = flash_area_read(fa, *start_off, &tlv_info, sizeof(tlv_info));
    feb8:	9800      	ldr	r0, [sp, #0]
    feba:	2304      	movs	r3, #4
    data_off = hdr->ih_hdr_size + hdr->ih_img_size;
    febc:	440c      	add	r4, r1
    rc = flash_area_read(fa, *start_off, &tlv_info, sizeof(tlv_info));
    febe:	eb0d 0203 	add.w	r2, sp, r3
    fec2:	4621      	mov	r1, r4
    fec4:	f002 fc90 	bl	127e8 <flash_area_read>
    if (rc) {
    fec8:	4606      	mov	r6, r0
    feca:	2800      	cmp	r0, #0
    fecc:	d1d6      	bne.n	fe7c <imgr_read_info+0x1c>
    if (tlv_info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    fece:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fed2:	f646 1307 	movw	r3, #26887	; 0x6907
    fed6:	429a      	cmp	r2, r3
    fed8:	d122      	bne.n	ff20 <imgr_read_info+0xc0>
    if (data_end > fa->fa_size) {
    feda:	9b00      	ldr	r3, [sp, #0]
    *end_off = *start_off + tlv_info.it_tlv_tot;
    fedc:	f8bd 7006 	ldrh.w	r7, [sp, #6]
    if (data_end > fa->fa_size) {
    fee0:	689b      	ldr	r3, [r3, #8]
    *start_off += sizeof(tlv_info);
    fee2:	3404      	adds	r4, #4
    *end_off = *start_off + tlv_info.it_tlv_tot;
    fee4:	4427      	add	r7, r4
    if (data_end > fa->fa_size) {
    fee6:	42bb      	cmp	r3, r7
    fee8:	d31a      	bcc.n	ff20 <imgr_read_info+0xc0>
    while (data_off + sizeof(*tlv) <= data_end) {
    feea:	f104 0804 	add.w	r8, r4, #4
    feee:	45b8      	cmp	r8, r7
    fef0:	d816      	bhi.n	ff20 <imgr_read_info+0xc0>
        rc2 = flash_area_read_is_empty(fa, data_off, tlv, sizeof(*tlv));
    fef2:	2304      	movs	r3, #4
    fef4:	9800      	ldr	r0, [sp, #0]
    fef6:	aa02      	add	r2, sp, #8
    fef8:	4621      	mov	r1, r4
    fefa:	f002 fcc5 	bl	12888 <flash_area_read_is_empty>
        if (rc2 < 0) {
    fefe:	1e03      	subs	r3, r0, #0
    ff00:	db19      	blt.n	ff36 <imgr_read_info+0xd6>
        if (rc2 == 1) {
    ff02:	2b01      	cmp	r3, #1
    ff04:	d00c      	beq.n	ff20 <imgr_read_info+0xc0>
        if (tlv->it_type != IMAGE_TLV_SHA256 ||
    ff06:	f89d 2008 	ldrb.w	r2, [sp, #8]
          tlv->it_len != IMGMGR_HASH_LEN) {
    ff0a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
        if (tlv->it_type != IMAGE_TLV_SHA256 ||
    ff0e:	2a10      	cmp	r2, #16
    ff10:	d101      	bne.n	ff16 <imgr_read_info+0xb6>
    ff12:	2b20      	cmp	r3, #32
    ff14:	d006      	beq.n	ff24 <imgr_read_info+0xc4>
            data_off += sizeof(*tlv) + tlv->it_len;
    ff16:	3304      	adds	r3, #4
    ff18:	441c      	add	r4, r3
            continue;
    ff1a:	e7e6      	b.n	feea <imgr_read_info+0x8a>
    } else if (rc2 == 1) {
    ff1c:	2801      	cmp	r0, #1
    ff1e:	d00e      	beq.n	ff3e <imgr_read_info+0xde>
        rc = 1;
    ff20:	2601      	movs	r6, #1
    if (rc) {
    ff22:	e008      	b.n	ff36 <imgr_read_info+0xd6>
        if (hash) {
    ff24:	b13d      	cbz	r5, ff36 <imgr_read_info+0xd6>
            if (data_off + IMGMGR_HASH_LEN > data_end) {
    ff26:	3424      	adds	r4, #36	; 0x24
    ff28:	42bc      	cmp	r4, r7
    ff2a:	d804      	bhi.n	ff36 <imgr_read_info+0xd6>
            rc2 = flash_area_read(fa, data_off, hash, IMGMGR_HASH_LEN);
    ff2c:	9800      	ldr	r0, [sp, #0]
    ff2e:	462a      	mov	r2, r5
    ff30:	4641      	mov	r1, r8
    ff32:	f002 fc59 	bl	127e8 <flash_area_read>
}
    ff36:	4630      	mov	r0, r6
    ff38:	b00a      	add	sp, #40	; 0x28
    ff3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 2;
    ff3e:	2602      	movs	r6, #2
    ff40:	e7f9      	b.n	ff36 <imgr_read_info+0xd6>
    ff42:	bf00      	nop
    ff44:	96f3b83d 	.word	0x96f3b83d

0000ff48 <imgr_my_version>:
{
    ff48:	4601      	mov	r1, r0
    return imgr_read_info(boot_current_slot, ver, NULL, NULL);
    ff4a:	4803      	ldr	r0, [pc, #12]	; (ff58 <imgr_my_version+0x10>)
    ff4c:	2300      	movs	r3, #0
    ff4e:	6800      	ldr	r0, [r0, #0]
    ff50:	461a      	mov	r2, r3
    ff52:	f7ff bf85 	b.w	fe60 <imgr_read_info>
    ff56:	bf00      	nop
    ff58:	20004bc8 	.word	0x20004bc8

0000ff5c <imgr_find_by_hash>:
{
    ff5c:	b570      	push	{r4, r5, r6, lr}
    ff5e:	4605      	mov	r5, r0
    ff60:	b088      	sub	sp, #32
    ff62:	460e      	mov	r6, r1
    for (i = 0; i < 2; i++) {
    ff64:	2400      	movs	r4, #0
        if (imgr_read_info(i, ver, hash, NULL) != 0) {
    ff66:	2300      	movs	r3, #0
    ff68:	466a      	mov	r2, sp
    ff6a:	4631      	mov	r1, r6
    ff6c:	4620      	mov	r0, r4
    ff6e:	f7ff ff77 	bl	fe60 <imgr_read_info>
    ff72:	b928      	cbnz	r0, ff80 <imgr_find_by_hash+0x24>
        if (!memcmp(hash, find, IMGMGR_HASH_LEN)) {
    ff74:	2220      	movs	r2, #32
    ff76:	4629      	mov	r1, r5
    ff78:	4668      	mov	r0, sp
    ff7a:	f7ff fb0f 	bl	f59c <memcmp>
    ff7e:	b118      	cbz	r0, ff88 <imgr_find_by_hash+0x2c>
    for (i = 0; i < 2; i++) {
    ff80:	2c01      	cmp	r4, #1
    ff82:	d104      	bne.n	ff8e <imgr_find_by_hash+0x32>
    return -1;
    ff84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
    ff88:	4620      	mov	r0, r4
    ff8a:	b008      	add	sp, #32
    ff8c:	bd70      	pop	{r4, r5, r6, pc}
    ff8e:	2401      	movs	r4, #1
    ff90:	e7e9      	b.n	ff66 <imgr_find_by_hash+0xa>

0000ff92 <imgmgr_find_best_area_id>:
{
    ff92:	b537      	push	{r0, r1, r2, r4, r5, lr}
    for (i = 0; i < 2; i++) {
    ff94:	2500      	movs	r5, #0
    int best = -1;
    ff96:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        rc = imgr_read_info(i, &ver, NULL, NULL);
    ff9a:	2300      	movs	r3, #0
    ff9c:	461a      	mov	r2, r3
    ff9e:	4669      	mov	r1, sp
    ffa0:	4628      	mov	r0, r5
    ffa2:	f7ff ff5d 	bl	fe60 <imgr_read_info>
        if (rc < 0) {
    ffa6:	2800      	cmp	r0, #0
    ffa8:	db06      	blt.n	ffb8 <imgmgr_find_best_area_id+0x26>
        if (rc == 0) {
    ffaa:	d111      	bne.n	ffd0 <imgmgr_find_best_area_id+0x3e>
            if (imgmgr_state_slot_in_use(i)) {
    ffac:	4628      	mov	r0, r5
    ffae:	f000 fb88 	bl	106c2 <imgmgr_state_slot_in_use>
    ffb2:	2800      	cmp	r0, #0
    ffb4:	bf08      	it	eq
    ffb6:	462c      	moveq	r4, r5
    for (i = 0; i < 2; i++) {
    ffb8:	b145      	cbz	r5, ffcc <imgmgr_find_best_area_id+0x3a>
    if (best >= 0) {
    ffba:	1c63      	adds	r3, r4, #1
    ffbc:	d003      	beq.n	ffc6 <imgmgr_find_best_area_id+0x34>
        best = flash_area_id_from_image_slot(best);
    ffbe:	4620      	mov	r0, r4
    ffc0:	f002 fc6a 	bl	12898 <flash_area_id_from_image_slot>
    ffc4:	4604      	mov	r4, r0
}
    ffc6:	4620      	mov	r0, r4
    ffc8:	b003      	add	sp, #12
    ffca:	bd30      	pop	{r4, r5, pc}
    ffcc:	2501      	movs	r5, #1
    ffce:	e7e4      	b.n	ff9a <imgmgr_find_best_area_id+0x8>
    ffd0:	462c      	mov	r4, r5
    ffd2:	e7f4      	b.n	ffbe <imgmgr_find_best_area_id+0x2c>

0000ffd4 <imgr_erase_state>:
{
    ffd4:	b513      	push	{r0, r1, r4, lr}
    ffd6:	4604      	mov	r4, r0
    area_id = imgmgr_find_best_area_id();
    ffd8:	f7ff ffdb 	bl	ff92 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
    ffdc:	2800      	cmp	r0, #0
    ffde:	db12      	blt.n	10006 <imgr_erase_state+0x32>
        rc = flash_area_open(area_id, &fa);
    ffe0:	a901      	add	r1, sp, #4
    ffe2:	b2c0      	uxtb	r0, r0
    ffe4:	f002 fba8 	bl	12738 <flash_area_open>
        if (rc) {
    ffe8:	4601      	mov	r1, r0
    ffea:	b110      	cbz	r0, fff2 <imgr_erase_state+0x1e>
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
    ffec:	2003      	movs	r0, #3
}
    ffee:	b002      	add	sp, #8
    fff0:	bd10      	pop	{r4, pc}
        rc = flash_area_erase(fa, 0, sizeof(struct image_header));
    fff2:	9801      	ldr	r0, [sp, #4]
    fff4:	2220      	movs	r2, #32
    fff6:	f002 fc1b 	bl	12830 <flash_area_erase>
        if (rc) {
    fffa:	2800      	cmp	r0, #0
    fffc:	d1f6      	bne.n	ffec <imgr_erase_state+0x18>
    fffe:	4620      	mov	r0, r4
   10000:	f7ff ff14 	bl	fe2c <imgr_erase.part.0>
   10004:	e7f3      	b.n	ffee <imgr_erase_state+0x1a>
        return imgr_error_rsp(cb, MGMT_ERR_ENOMEM, imgmgr_err_str_no_slot);
   10006:	2002      	movs	r0, #2
   10008:	e7f1      	b.n	ffee <imgr_erase_state+0x1a>

0001000a <imgr_erase>:
{
   1000a:	b513      	push	{r0, r1, r4, lr}
   1000c:	4604      	mov	r4, r0
    area_id = imgmgr_find_best_area_id();
   1000e:	f7ff ffc0 	bl	ff92 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   10012:	2800      	cmp	r0, #0
   10014:	db12      	blt.n	1003c <imgr_erase+0x32>
        rc = flash_area_open(area_id, &fa);
   10016:	a901      	add	r1, sp, #4
   10018:	b2c0      	uxtb	r0, r0
   1001a:	f002 fb8d 	bl	12738 <flash_area_open>
        if (rc) {
   1001e:	4601      	mov	r1, r0
   10020:	b110      	cbz	r0, 10028 <imgr_erase+0x1e>
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   10022:	2003      	movs	r0, #3
}
   10024:	b002      	add	sp, #8
   10026:	bd10      	pop	{r4, pc}
        rc = flash_area_erase(fa, 0, fa->fa_size);
   10028:	9801      	ldr	r0, [sp, #4]
   1002a:	6882      	ldr	r2, [r0, #8]
   1002c:	f002 fc00 	bl	12830 <flash_area_erase>
        if (rc) {
   10030:	2800      	cmp	r0, #0
   10032:	d1f6      	bne.n	10022 <imgr_erase+0x18>
   10034:	4620      	mov	r0, r4
   10036:	f7ff fef9 	bl	fe2c <imgr_erase.part.0>
   1003a:	e7f3      	b.n	10024 <imgr_erase+0x1a>
        return imgr_error_rsp(cb, MGMT_ERR_ENOMEM, imgmgr_err_str_no_slot);
   1003c:	2002      	movs	r0, #2
   1003e:	e7f1      	b.n	10024 <imgr_erase+0x1a>

00010040 <imgmgr_dfu_stopped>:
}

void
imgmgr_dfu_stopped(void)
{
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_stopped_cb) {
   10040:	4b03      	ldr	r3, [pc, #12]	; (10050 <imgmgr_dfu_stopped+0x10>)
   10042:	681b      	ldr	r3, [r3, #0]
   10044:	b113      	cbz	r3, 1004c <imgmgr_dfu_stopped+0xc>
   10046:	685b      	ldr	r3, [r3, #4]
   10048:	b103      	cbz	r3, 1004c <imgmgr_dfu_stopped+0xc>
        imgmgr_dfu_callbacks_fn->dfu_stopped_cb();
   1004a:	4718      	bx	r3
    }
}
   1004c:	4770      	bx	lr
   1004e:	bf00      	nop
   10050:	20003cb0 	.word	0x20003cb0

00010054 <imgmgr_dfu_started>:

void
imgmgr_dfu_started(void)
{
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_started_cb) {
   10054:	4b03      	ldr	r3, [pc, #12]	; (10064 <imgmgr_dfu_started+0x10>)
   10056:	681b      	ldr	r3, [r3, #0]
   10058:	b113      	cbz	r3, 10060 <imgmgr_dfu_started+0xc>
   1005a:	681b      	ldr	r3, [r3, #0]
   1005c:	b103      	cbz	r3, 10060 <imgmgr_dfu_started+0xc>
        imgmgr_dfu_callbacks_fn->dfu_started_cb();
   1005e:	4718      	bx	r3
    }
}
   10060:	4770      	bx	lr
   10062:	bf00      	nop
   10064:	20003cb0 	.word	0x20003cb0

00010068 <imgmgr_dfu_pending>:

void
imgmgr_dfu_pending(void)
{
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_pending_cb) {
   10068:	4b03      	ldr	r3, [pc, #12]	; (10078 <imgmgr_dfu_pending+0x10>)
   1006a:	681b      	ldr	r3, [r3, #0]
   1006c:	b113      	cbz	r3, 10074 <imgmgr_dfu_pending+0xc>
   1006e:	689b      	ldr	r3, [r3, #8]
   10070:	b103      	cbz	r3, 10074 <imgmgr_dfu_pending+0xc>
        imgmgr_dfu_callbacks_fn->dfu_pending_cb();
   10072:	4718      	bx	r3
    }
}
   10074:	4770      	bx	lr
   10076:	bf00      	nop
   10078:	20003cb0 	.word	0x20003cb0

0001007c <imgr_upload>:
{
   1007c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10080:	f5ad 7d6a 	sub.w	sp, sp, #936	; 0x3a8
    struct imgr_upload_req req = {
   10084:	ad5a      	add	r5, sp, #360	; 0x168
{
   10086:	4606      	mov	r6, r0
    struct imgr_upload_req req = {
   10088:	f44f 7210 	mov.w	r2, #576	; 0x240
   1008c:	2100      	movs	r1, #0
   1008e:	4628      	mov	r0, r5
   10090:	f7ff fab5 	bl	f5fe <memset>
   10094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1009c:	e9cd 235a 	strd	r2, r3, [sp, #360]	; 0x168
   100a0:	e9c5 2302 	strd	r2, r3, [r5, #8]
    const struct cbor_attr_t off_attr[] = {
   100a4:	2100      	movs	r1, #0
   100a6:	f44f 7290 	mov.w	r2, #288	; 0x120
   100aa:	a812      	add	r0, sp, #72	; 0x48
   100ac:	f7ff faa7 	bl	f5fe <memset>
   100b0:	4baa      	ldr	r3, [pc, #680]	; (1035c <imgr_upload+0x2e0>)
   100b2:	9312      	str	r3, [sp, #72]	; 0x48
   100b4:	ab5e      	add	r3, sp, #376	; 0x178
   100b6:	9315      	str	r3, [sp, #84]	; 0x54
   100b8:	f44f 7300 	mov.w	r3, #512	; 0x200
   100bc:	931c      	str	r3, [sp, #112]	; 0x70
   100be:	4ba8      	ldr	r3, [pc, #672]	; (10360 <imgr_upload+0x2e4>)
   100c0:	931e      	str	r3, [sp, #120]	; 0x78
   100c2:	ab5c      	add	r3, sp, #368	; 0x170
   100c4:	9320      	str	r3, [sp, #128]	; 0x80
   100c6:	2301      	movs	r3, #1
   100c8:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
   100cc:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
   100d0:	4ba4      	ldr	r3, [pc, #656]	; (10364 <imgr_upload+0x2e8>)
   100d2:	9336      	str	r3, [sp, #216]	; 0xd8
   100d4:	ab5f      	add	r3, sp, #380	; 0x17c
   100d6:	9339      	str	r3, [sp, #228]	; 0xe4
   100d8:	2320      	movs	r3, #32
   100da:	9340      	str	r3, [sp, #256]	; 0x100
   100dc:	4ba2      	ldr	r3, [pc, #648]	; (10368 <imgr_upload+0x2ec>)
   100de:	9342      	str	r3, [sp, #264]	; 0x108
   100e0:	2305      	movs	r3, #5
   100e2:	49a2      	ldr	r1, [pc, #648]	; (1036c <imgr_upload+0x2f0>)
   100e4:	f88d 310c 	strb.w	r3, [sp, #268]	; 0x10c
   100e8:	abe8      	add	r3, sp, #928	; 0x3a0
   100ea:	2202      	movs	r2, #2
   100ec:	f04f 0903 	mov.w	r9, #3
   100f0:	912a      	str	r1, [sp, #168]	; 0xa8
   100f2:	9344      	str	r3, [sp, #272]	; 0x110
   100f4:	f50d 78c0 	add.w	r8, sp, #384	; 0x180
    const struct flash_area *fa = NULL;
   100f8:	2300      	movs	r3, #0
    const struct cbor_attr_t off_attr[] = {
   100fa:	afe0      	add	r7, sp, #896	; 0x380
    rc = cbor_read_object(&cb->it, off_attr);
   100fc:	a912      	add	r1, sp, #72	; 0x48
   100fe:	f106 001c 	add.w	r0, r6, #28
    const struct cbor_attr_t off_attr[] = {
   10102:	f88d 904c 	strb.w	r9, [sp, #76]	; 0x4c
   10106:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   1010a:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
   1010e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   10112:	952c      	str	r5, [sp, #176]	; 0xb0
   10114:	f88d 90dc 	strb.w	r9, [sp, #220]	; 0xdc
   10118:	9738      	str	r7, [sp, #224]	; 0xe0
    const struct flash_area *fa = NULL;
   1011a:	9302      	str	r3, [sp, #8]
    rc = cbor_read_object(&cb->it, off_attr);
   1011c:	f005 fe87 	bl	15e2e <cbor_read_object>
    if (rc != 0) {
   10120:	4604      	mov	r4, r0
   10122:	2800      	cmp	r0, #0
   10124:	f040 8145 	bne.w	103b2 <imgr_upload+0x336>
    memset(action, 0, sizeof *action);
   10128:	2218      	movs	r2, #24
   1012a:	4601      	mov	r1, r0
   1012c:	a804      	add	r0, sp, #16
   1012e:	f7ff fa66 	bl	f5fe <memset>
    if (req->off == -1) {
   10132:	e9d5 2300 	ldrd	r2, r3, [r5]
   10136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1013a:	bf08      	it	eq
   1013c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   10140:	f000 80b1 	beq.w	102a6 <imgr_upload+0x22a>
    if (req->off == 0) {
   10144:	ea52 0103 	orrs.w	r1, r2, r3
   10148:	f040 8093 	bne.w	10272 <imgr_upload+0x1f6>
        if (req->data_len < sizeof(struct image_header)) {
   1014c:	692b      	ldr	r3, [r5, #16]
   1014e:	2b1f      	cmp	r3, #31
   10150:	f240 80a9 	bls.w	102a6 <imgr_upload+0x22a>
        if (req->size == -1) {
   10154:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   10158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1015c:	bf08      	it	eq
   1015e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   10162:	f000 80a0 	beq.w	102a6 <imgr_upload+0x22a>
        action->size = req->size;
   10166:	e9cd 2304 	strd	r2, r3, [sp, #16]
        if (hdr->ih_magic != IMAGE_MAGIC) {
   1016a:	69aa      	ldr	r2, [r5, #24]
   1016c:	4b80      	ldr	r3, [pc, #512]	; (10370 <imgr_upload+0x2f4>)
   1016e:	429a      	cmp	r2, r3
   10170:	f040 8099 	bne.w	102a6 <imgr_upload+0x22a>
        if (req->data_sha_len > IMGMGR_DATA_SHA_LEN) {
   10174:	696a      	ldr	r2, [r5, #20]
   10176:	2a20      	cmp	r2, #32
   10178:	f200 8095 	bhi.w	102a6 <imgr_upload+0x22a>
        if ((req->data_sha_len > 0) && (imgr_state.area_id != -1)) {
   1017c:	b162      	cbz	r2, 10198 <imgr_upload+0x11c>
   1017e:	4b7d      	ldr	r3, [pc, #500]	; (10374 <imgr_upload+0x2f8>)
   10180:	6819      	ldr	r1, [r3, #0]
   10182:	3101      	adds	r1, #1
   10184:	d008      	beq.n	10198 <imgr_upload+0x11c>
            if ((imgr_state.data_sha_len == req->data_sha_len) &&
   10186:	7b1b      	ldrb	r3, [r3, #12]
   10188:	429a      	cmp	r2, r3
   1018a:	d105      	bne.n	10198 <imgr_upload+0x11c>
                            !memcmp(imgr_state.data_sha, req->data_sha,
   1018c:	487a      	ldr	r0, [pc, #488]	; (10378 <imgr_upload+0x2fc>)
   1018e:	4639      	mov	r1, r7
   10190:	f7ff fa04 	bl	f59c <memcmp>
            if ((imgr_state.data_sha_len == req->data_sha_len) &&
   10194:	2800      	cmp	r0, #0
   10196:	d077      	beq.n	10288 <imgr_upload+0x20c>
        action->area_id = imgmgr_find_best_area_id();
   10198:	f7ff fefb 	bl	ff92 <imgmgr_find_best_area_id>
        if (action->area_id < 0) {
   1019c:	2800      	cmp	r0, #0
        action->area_id = imgmgr_find_best_area_id();
   1019e:	4604      	mov	r4, r0
   101a0:	9007      	str	r0, [sp, #28]
        if (action->area_id < 0) {
   101a2:	db7e      	blt.n	102a2 <imgr_upload+0x226>
        if (req->upgrade) {
   101a4:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
   101a8:	2b00      	cmp	r3, #0
   101aa:	d149      	bne.n	10240 <imgr_upload+0x1c4>
        rc = flash_area_open(action->area_id, &fa);
   101ac:	a903      	add	r1, sp, #12
   101ae:	b2e0      	uxtb	r0, r4
   101b0:	f002 fac2 	bl	12738 <flash_area_open>
        if (rc) {
   101b4:	2800      	cmp	r0, #0
   101b6:	d16c      	bne.n	10292 <imgr_upload+0x216>
        rc = flash_area_is_empty(fa, &empty);
   101b8:	9803      	ldr	r0, [sp, #12]
   101ba:	f10d 0107 	add.w	r1, sp, #7
   101be:	f002 fb53 	bl	12868 <flash_area_is_empty>
        if (rc) {
   101c2:	2800      	cmp	r0, #0
   101c4:	d165      	bne.n	10292 <imgr_upload+0x216>
        action->erase = !empty;
   101c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101ca:	f083 0301 	eor.w	r3, r3, #1
   101ce:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    if (req->off + req->data_len < action->size) {
   101d2:	e9d5 3200 	ldrd	r3, r2, [r5]
   101d6:	e9dd 9104 	ldrd	r9, r1, [sp, #16]
    action->write_bytes = req->data_len;
   101da:	692c      	ldr	r4, [r5, #16]
   101dc:	9406      	str	r4, [sp, #24]
    if (req->off + req->data_len < action->size) {
   101de:	18e3      	adds	r3, r4, r3
   101e0:	f142 0200 	adc.w	r2, r2, #0
   101e4:	454b      	cmp	r3, r9
   101e6:	eb72 0301 	sbcs.w	r3, r2, r1
   101ea:	d212      	bcs.n	10212 <imgr_upload+0x196>
        rc = flash_area_open(action->area_id, &fa);
   101ec:	f89d 001c 	ldrb.w	r0, [sp, #28]
   101f0:	a903      	add	r1, sp, #12
   101f2:	f002 faa1 	bl	12738 <flash_area_open>
        if (rc) {
   101f6:	2800      	cmp	r0, #0
   101f8:	d14b      	bne.n	10292 <imgr_upload+0x216>
        rem_bytes = req->data_len % flash_area_align(fa);
   101fa:	9803      	ldr	r0, [sp, #12]
   101fc:	f8d5 a010 	ldr.w	sl, [r5, #16]
   10200:	f002 fb2a 	bl	12858 <flash_area_align>
   10204:	fbba f3f0 	udiv	r3, sl, r0
   10208:	fb03 a010 	mls	r0, r3, r0, sl
        if (rem_bytes) {
   1020c:	b108      	cbz	r0, 10212 <imgr_upload+0x196>
            action->write_bytes -= rem_bytes;
   1020e:	1a24      	subs	r4, r4, r0
   10210:	9406      	str	r4, [sp, #24]
    action->proceed = true;
   10212:	2301      	movs	r3, #1
   10214:	f88d 3020 	strb.w	r3, [sp, #32]
    if (imgr_upload_cb != NULL) {
   10218:	4b58      	ldr	r3, [pc, #352]	; (1037c <imgr_upload+0x300>)
   1021a:	681b      	ldr	r3, [r3, #0]
   1021c:	2b00      	cmp	r3, #0
   1021e:	d144      	bne.n	102aa <imgr_upload+0x22e>
    imgr_state.area_id = action.area_id;
   10220:	9807      	ldr	r0, [sp, #28]
   10222:	f8df a150 	ldr.w	sl, [pc, #336]	; 10374 <imgr_upload+0x2f8>
    rc = flash_area_open(imgr_state.area_id, &fa);
   10226:	a902      	add	r1, sp, #8
    imgr_state.area_id = action.area_id;
   10228:	f8ca 0000 	str.w	r0, [sl]
    rc = flash_area_open(imgr_state.area_id, &fa);
   1022c:	b2c0      	uxtb	r0, r0
    imgr_state.size = action.size;
   1022e:	f8ca 9008 	str.w	r9, [sl, #8]
    rc = flash_area_open(imgr_state.area_id, &fa);
   10232:	f002 fa81 	bl	12738 <flash_area_open>
    if (rc != 0) {
   10236:	4604      	mov	r4, r0
   10238:	2800      	cmp	r0, #0
   1023a:	d048      	beq.n	102ce <imgr_upload+0x252>
        rc = MGMT_ERR_EUNKNOWN;
   1023c:	2401      	movs	r4, #1
   1023e:	e03c      	b.n	102ba <imgr_upload+0x23e>
            rc = imgr_my_version(&cur_ver);
   10240:	a80a      	add	r0, sp, #40	; 0x28
   10242:	f7ff fe81 	bl	ff48 <imgr_my_version>
            if (rc != 0) {
   10246:	bb20      	cbnz	r0, 10292 <imgr_upload+0x216>
    if (a->iv_major < b->iv_major) {
   10248:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   1024c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   10250:	429a      	cmp	r2, r3
   10252:	d3ab      	bcc.n	101ac <imgr_upload+0x130>
    } else if (a->iv_major > b->iv_major) {
   10254:	d80b      	bhi.n	1026e <imgr_upload+0x1f2>
    if (a->iv_minor < b->iv_minor) {
   10256:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
   1025a:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   1025e:	429a      	cmp	r2, r3
   10260:	d3a4      	bcc.n	101ac <imgr_upload+0x130>
    } else if (a->iv_minor > b->iv_minor) {
   10262:	d804      	bhi.n	1026e <imgr_upload+0x1f2>
    if (a->iv_revision < b->iv_revision) {
   10264:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
   10268:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   1026a:	429a      	cmp	r2, r3
   1026c:	d39e      	bcc.n	101ac <imgr_upload+0x130>
    if (rc != 0) {
   1026e:	2406      	movs	r4, #6
   10270:	e010      	b.n	10294 <imgr_upload+0x218>
        action->area_id = imgr_state.area_id;
   10272:	4840      	ldr	r0, [pc, #256]	; (10374 <imgr_upload+0x2f8>)
   10274:	6801      	ldr	r1, [r0, #0]
   10276:	9107      	str	r1, [sp, #28]
        action->size = imgr_state.size;
   10278:	6881      	ldr	r1, [r0, #8]
   1027a:	e9cd 1404 	strd	r1, r4, [sp, #16]
        if (req->off != imgr_state.off) {
   1027e:	6841      	ldr	r1, [r0, #4]
   10280:	42a3      	cmp	r3, r4
   10282:	bf08      	it	eq
   10284:	428a      	cmpeq	r2, r1
   10286:	d0a4      	beq.n	101d2 <imgr_upload+0x156>
    return imgr_upload_good_rsp(cb);
   10288:	4630      	mov	r0, r6
   1028a:	f7ff fda9 	bl	fde0 <imgr_upload_good_rsp>
   1028e:	4604      	mov	r4, r0
   10290:	e002      	b.n	10298 <imgr_upload+0x21c>
            return MGMT_ERR_EUNKNOWN;
   10292:	2401      	movs	r4, #1
        imgmgr_dfu_stopped();
   10294:	f7ff fed4 	bl	10040 <imgmgr_dfu_stopped>
}
   10298:	4620      	mov	r0, r4
   1029a:	f50d 7d6a 	add.w	sp, sp, #936	; 0x3a8
   1029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return MGMT_ERR_ENOMEM;
   102a2:	2402      	movs	r4, #2
   102a4:	e7f6      	b.n	10294 <imgr_upload+0x218>
            return MGMT_ERR_EINVAL;
   102a6:	2403      	movs	r4, #3
        imgmgr_dfu_stopped();
   102a8:	e7f4      	b.n	10294 <imgr_upload+0x218>
        rc = imgr_upload_cb(req.off, action.size, imgr_upload_arg);
   102aa:	4a35      	ldr	r2, [pc, #212]	; (10380 <imgr_upload+0x304>)
   102ac:	6828      	ldr	r0, [r5, #0]
   102ae:	6812      	ldr	r2, [r2, #0]
   102b0:	4649      	mov	r1, r9
   102b2:	4798      	blx	r3
        if (rc != 0) {
   102b4:	4604      	mov	r4, r0
   102b6:	2800      	cmp	r0, #0
   102b8:	d0b2      	beq.n	10220 <imgr_upload+0x1a4>
    if (is_first) {
   102ba:	e9d5 2300 	ldrd	r2, r3, [r5]
   102be:	4313      	orrs	r3, r2
   102c0:	d160      	bne.n	10384 <imgr_upload+0x308>
        return imgmgr_log_upload_start(status);
   102c2:	4620      	mov	r0, r4
   102c4:	f000 f9a4 	bl	10610 <imgmgr_log_upload_start>
    if (rc != 0) {
   102c8:	2c00      	cmp	r4, #0
   102ca:	d1e3      	bne.n	10294 <imgr_upload+0x218>
   102cc:	e7dc      	b.n	10288 <imgr_upload+0x20c>
    if (req.off == 0) {
   102ce:	e9d5 2300 	ldrd	r2, r3, [r5]
   102d2:	4313      	orrs	r3, r2
   102d4:	d01e      	beq.n	10314 <imgr_upload+0x298>
    if (req.data_len != 0) {
   102d6:	692b      	ldr	r3, [r5, #16]
   102d8:	2b00      	cmp	r3, #0
   102da:	d03d      	beq.n	10358 <imgr_upload+0x2dc>
        rc = flash_area_write(fa, req.off, req.img_data, action.write_bytes);
   102dc:	9f06      	ldr	r7, [sp, #24]
   102de:	6829      	ldr	r1, [r5, #0]
   102e0:	9802      	ldr	r0, [sp, #8]
   102e2:	463b      	mov	r3, r7
   102e4:	4642      	mov	r2, r8
   102e6:	f002 fa91 	bl	1280c <flash_area_write>
        if (rc != 0) {
   102ea:	4604      	mov	r4, r0
   102ec:	2800      	cmp	r0, #0
   102ee:	d1a5      	bne.n	1023c <imgr_upload+0x1c0>
            imgr_state.off += action.write_bytes;
   102f0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 10374 <imgr_upload+0x2f8>
   102f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   102f8:	441f      	add	r7, r3
            if (imgr_state.off == imgr_state.size) {
   102fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
            imgr_state.off += action.write_bytes;
   102fe:	f8c8 7004 	str.w	r7, [r8, #4]
            if (imgr_state.off == imgr_state.size) {
   10302:	429f      	cmp	r7, r3
   10304:	d128      	bne.n	10358 <imgr_upload+0x2dc>
                imgmgr_dfu_pending();
   10306:	f7ff feaf 	bl	10068 <imgmgr_dfu_pending>
                imgr_state.area_id = -1;
   1030a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1030e:	f8c8 3000 	str.w	r3, [r8]
   10312:	e7d2      	b.n	102ba <imgr_upload+0x23e>
        imgr_state.off = 0;
   10314:	f8ca 0004 	str.w	r0, [sl, #4]
        imgmgr_dfu_started();
   10318:	f7ff fe9c 	bl	10054 <imgmgr_dfu_started>
        imgr_state.data_sha_len = req.data_sha_len;
   1031c:	f8d5 9014 	ldr.w	r9, [r5, #20]
   10320:	f88a 900c 	strb.w	r9, [sl, #12]
        memcpy(imgr_state.data_sha, req.data_sha, req.data_sha_len);
   10324:	464a      	mov	r2, r9
   10326:	4639      	mov	r1, r7
   10328:	f10a 000d 	add.w	r0, sl, #13
   1032c:	f7ff f95a 	bl	f5e4 <memcpy>
        memset(&imgr_state.data_sha[req.data_sha_len], 0,
   10330:	f109 000d 	add.w	r0, r9, #13
   10334:	f1c9 0220 	rsb	r2, r9, #32
   10338:	4621      	mov	r1, r4
   1033a:	4450      	add	r0, sl
   1033c:	f7ff f95f 	bl	f5fe <memset>
        if (action.erase) {
   10340:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10344:	2b00      	cmp	r3, #0
   10346:	d0c6      	beq.n	102d6 <imgr_upload+0x25a>
            rc = flash_area_erase(fa, 0, req.size);
   10348:	68aa      	ldr	r2, [r5, #8]
   1034a:	9802      	ldr	r0, [sp, #8]
   1034c:	4621      	mov	r1, r4
   1034e:	f002 fa6f 	bl	12830 <flash_area_erase>
            if (rc != 0) {
   10352:	2800      	cmp	r0, #0
   10354:	d0bf      	beq.n	102d6 <imgr_upload+0x25a>
   10356:	e771      	b.n	1023c <imgr_upload+0x1c0>
            return MGMT_ERR_ENOMEM;
   10358:	2400      	movs	r4, #0
   1035a:	e7ae      	b.n	102ba <imgr_upload+0x23e>
   1035c:	00022497 	.word	0x00022497
   10360:	00022f98 	.word	0x00022f98
   10364:	0002249c 	.word	0x0002249c
   10368:	000224a0 	.word	0x000224a0
   1036c:	00022493 	.word	0x00022493
   10370:	96f3b83d 	.word	0x96f3b83d
   10374:	20003cb4 	.word	0x20003cb4
   10378:	20003cc1 	.word	0x20003cc1
   1037c:	20003ce8 	.word	0x20003ce8
   10380:	20003ce4 	.word	0x20003ce4
    imgr_upload_log(req.off == 0, imgr_state.off == imgr_state.size, rc);
   10384:	4b0c      	ldr	r3, [pc, #48]	; (103b8 <imgr_upload+0x33c>)
    if (is_last || status != 0) {
   10386:	e9d3 2301 	ldrd	r2, r3, [r3, #4]
   1038a:	429a      	cmp	r2, r3
   1038c:	d002      	beq.n	10394 <imgr_upload+0x318>
   1038e:	2c00      	cmp	r4, #0
   10390:	f43f af7a 	beq.w	10288 <imgr_upload+0x20c>
        rc = imgr_read_info(1, NULL, hash, NULL);
   10394:	ad0a      	add	r5, sp, #40	; 0x28
   10396:	2300      	movs	r3, #0
   10398:	4619      	mov	r1, r3
   1039a:	462a      	mov	r2, r5
   1039c:	2001      	movs	r0, #1
   1039e:	f7ff fd5f 	bl	fe60 <imgr_read_info>
            hashp = hash;
   103a2:	2800      	cmp	r0, #0
        return imgmgr_log_upload_done(status, hashp);
   103a4:	bf0c      	ite	eq
   103a6:	4629      	moveq	r1, r5
   103a8:	2100      	movne	r1, #0
   103aa:	4620      	mov	r0, r4
   103ac:	f000 f932 	bl	10614 <imgmgr_log_upload_done>
   103b0:	e78a      	b.n	102c8 <imgr_upload+0x24c>
        return MGMT_ERR_EINVAL;
   103b2:	464c      	mov	r4, r9
   103b4:	e770      	b.n	10298 <imgr_upload+0x21c>
   103b6:	bf00      	nop
   103b8:	20003cb4 	.word	0x20003cb4

000103bc <imgmgr_dfu_confirmed>:

void
imgmgr_dfu_confirmed(void)
{
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_confirmed_cb) {
   103bc:	4b03      	ldr	r3, [pc, #12]	; (103cc <imgmgr_dfu_confirmed+0x10>)
   103be:	681b      	ldr	r3, [r3, #0]
   103c0:	b113      	cbz	r3, 103c8 <imgmgr_dfu_confirmed+0xc>
   103c2:	68db      	ldr	r3, [r3, #12]
   103c4:	b103      	cbz	r3, 103c8 <imgmgr_dfu_confirmed+0xc>
        imgmgr_dfu_callbacks_fn->dfu_confirmed_cb();
   103c6:	4718      	bx	r3
    }
}
   103c8:	4770      	bx	lr
   103ca:	bf00      	nop
   103cc:	20003cb0 	.word	0x20003cb0

000103d0 <imgmgr_module_init>:
    imgmgr_dfu_callbacks_fn = cb_struct;
}

void
imgmgr_module_init(void)
{
   103d0:	b513      	push	{r0, r1, r4, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   103d2:	4b10      	ldr	r3, [pc, #64]	; (10414 <imgmgr_module_init+0x44>)
   103d4:	781b      	ldrb	r3, [r3, #0]
   103d6:	b923      	cbnz	r3, 103e2 <imgmgr_module_init+0x12>
   103d8:	461a      	mov	r2, r3
   103da:	4619      	mov	r1, r3
   103dc:	4618      	mov	r0, r3
   103de:	f7f8 fd89 	bl	8ef4 <__assert_func>

    rc = mgmt_group_register(&imgr_nmgr_group);
   103e2:	480d      	ldr	r0, [pc, #52]	; (10418 <imgmgr_module_init+0x48>)
   103e4:	f000 fb1a 	bl	10a1c <mgmt_group_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   103e8:	b138      	cbz	r0, 103fa <imgmgr_module_init+0x2a>
   103ea:	2300      	movs	r3, #0
   103ec:	4a0b      	ldr	r2, [pc, #44]	; (1041c <imgmgr_module_init+0x4c>)
   103ee:	9300      	str	r3, [sp, #0]
   103f0:	6814      	ldr	r4, [r2, #0]
   103f2:	4619      	mov	r1, r3
   103f4:	461a      	mov	r2, r3
   103f6:	4618      	mov	r0, r3
   103f8:	47a0      	blx	r4

#if MYNEWT_VAL(IMGMGR_CLI)
    rc = imgr_cli_register();
   103fa:	f000 f903 	bl	10604 <imgr_cli_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   103fe:	b138      	cbz	r0, 10410 <imgmgr_module_init+0x40>
   10400:	2300      	movs	r3, #0
   10402:	4a06      	ldr	r2, [pc, #24]	; (1041c <imgmgr_module_init+0x4c>)
   10404:	9300      	str	r3, [sp, #0]
   10406:	6814      	ldr	r4, [r2, #0]
   10408:	4619      	mov	r1, r3
   1040a:	461a      	mov	r2, r3
   1040c:	4618      	mov	r0, r3
   1040e:	47a0      	blx	r4
     */
    if (imgmgr_state_slot_in_use(1)) {
        log_fcb_slot1_lock();
    }
#endif
}
   10410:	b002      	add	sp, #8
   10412:	bd10      	pop	{r4, pc}
   10414:	20004ba8 	.word	0x20004ba8
   10418:	200006c0 	.word	0x200006c0
   1041c:	20000768 	.word	0x20000768

00010420 <imgr_cli_set_pending>:
    }
}

static void
imgr_cli_set_pending(char *arg, int permanent)
{
   10420:	b570      	push	{r4, r5, r6, lr}
   10422:	b090      	sub	sp, #64	; 0x40
    *out_slot = parse_ll_bounds(arg, 0, 1, &rc);
   10424:	ab05      	add	r3, sp, #20
   10426:	9302      	str	r3, [sp, #8]
   10428:	2201      	movs	r2, #1
   1042a:	2300      	movs	r3, #0
   1042c:	e9cd 2300 	strd	r2, r3, [sp]
   10430:	2300      	movs	r3, #0
   10432:	2200      	movs	r2, #0
{
   10434:	4605      	mov	r5, r0
   10436:	460e      	mov	r6, r1
    *out_slot = parse_ll_bounds(arg, 0, 1, &rc);
   10438:	f004 ff3f 	bl	152ba <parse_ll_bounds>
    if (rc == 0) {
   1043c:	9b05      	ldr	r3, [sp, #20]
    *out_slot = parse_ll_bounds(arg, 0, 1, &rc);
   1043e:	4604      	mov	r4, r0
    if (rc == 0) {
   10440:	b1cb      	cbz	r3, 10476 <imgr_cli_set_pending+0x56>
    rc = hex_parse(arg, strlen(arg), hash, sizeof hash);
   10442:	4628      	mov	r0, r5
   10444:	f7ff f90b 	bl	f65e <strlen>
   10448:	2320      	movs	r3, #32
   1044a:	4601      	mov	r1, r0
   1044c:	eb0d 0203 	add.w	r2, sp, r3
   10450:	4628      	mov	r0, r5
   10452:	f005 fa93 	bl	1597c <hex_parse>
    if (rc != sizeof hash) {
   10456:	2820      	cmp	r0, #32
   10458:	d11a      	bne.n	10490 <imgr_cli_set_pending+0x70>
    slot = imgr_find_by_hash(hash, &ver);
   1045a:	a906      	add	r1, sp, #24
   1045c:	a808      	add	r0, sp, #32
   1045e:	f7ff fd7d 	bl	ff5c <imgr_find_by_hash>
    if (slot == -1) {
   10462:	1c41      	adds	r1, r0, #1
   10464:	bf16      	itet	ne
   10466:	4604      	movne	r4, r0
   10468:	f06f 0303 	mvneq.w	r3, #3
   1046c:	2300      	movne	r3, #0
    switch (rc) {
   1046e:	1d1a      	adds	r2, r3, #4
    rc = imgr_cli_hash_parse(arg, out_slot);
   10470:	9305      	str	r3, [sp, #20]
    switch (rc) {
   10472:	d010      	beq.n	10496 <imgr_cli_set_pending+0x76>
   10474:	b9c3      	cbnz	r3, 104a8 <imgr_cli_set_pending+0x88>
    rc = imgr_cli_slot_or_hash_parse(arg, &slot);
    if (rc != 0) {
        return;
    }

    rc = imgmgr_state_set_pending(slot, permanent);
   10476:	4631      	mov	r1, r6
   10478:	4620      	mov	r0, r4
   1047a:	f000 f92c 	bl	106d6 <imgmgr_state_set_pending>
    if (rc) {
   1047e:	4602      	mov	r2, r0
   10480:	b180      	cbz	r0, 104a4 <imgr_cli_set_pending+0x84>
        console_printf("Error setting slot %d to pending; rc=%d\n", slot, rc);
   10482:	480b      	ldr	r0, [pc, #44]	; (104b0 <imgr_cli_set_pending+0x90>)
   10484:	4621      	mov	r1, r4
        return;
    }
}
   10486:	b010      	add	sp, #64	; 0x40
   10488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        console_printf("Error setting slot %d to pending; rc=%d\n", slot, rc);
   1048c:	f002 b8a2 	b.w	125d4 <console_printf>
        return SYS_EINVAL;
   10490:	f06f 0301 	mvn.w	r3, #1
   10494:	e7eb      	b.n	1046e <imgr_cli_set_pending+0x4e>
        console_printf("No image with hash: %s\n", arg);
   10496:	4807      	ldr	r0, [pc, #28]	; (104b4 <imgr_cli_set_pending+0x94>)
   10498:	4629      	mov	r1, r5
        console_printf("Invalid slot number or image hash: %s\n", arg);
   1049a:	f002 f89b 	bl	125d4 <console_printf>
        return rc;
   1049e:	9b05      	ldr	r3, [sp, #20]
    if (rc != 0) {
   104a0:	2b00      	cmp	r3, #0
   104a2:	d0e8      	beq.n	10476 <imgr_cli_set_pending+0x56>
}
   104a4:	b010      	add	sp, #64	; 0x40
   104a6:	bd70      	pop	{r4, r5, r6, pc}
        console_printf("Invalid slot number or image hash: %s\n", arg);
   104a8:	4803      	ldr	r0, [pc, #12]	; (104b8 <imgr_cli_set_pending+0x98>)
   104aa:	4629      	mov	r1, r5
   104ac:	e7f5      	b.n	1049a <imgr_cli_set_pending+0x7a>
   104ae:	bf00      	nop
   104b0:	0002251f 	.word	0x0002251f
   104b4:	000224e0 	.word	0x000224e0
   104b8:	000224f8 	.word	0x000224f8

000104bc <imgr_cli_cmd>:
    }
}

static int
imgr_cli_cmd(int argc, char **argv)
{
   104bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    int i;

    if (argc < 2) {
   104be:	2801      	cmp	r0, #1
{
   104c0:	b0a7      	sub	sp, #156	; 0x9c
   104c2:	4606      	mov	r6, r0
   104c4:	460d      	mov	r5, r1
    if (argc < 2) {
   104c6:	dc03      	bgt.n	104d0 <imgr_cli_cmd+0x14>
    console_printf("Too few args\n");
   104c8:	4842      	ldr	r0, [pc, #264]	; (105d4 <imgr_cli_cmd+0x118>)
            imgr_cli_set_pending(argv[2], 1);
        }
    } else if (!strcmp(argv[1], "erase")) {
        imgr_cli_erase();
    } else {
        console_printf("Unknown cmd\n");
   104ca:	f002 f883 	bl	125d4 <console_printf>
   104ce:	e03e      	b.n	1054e <imgr_cli_cmd+0x92>
    if (!strcmp(argv[1], "list")) {
   104d0:	684f      	ldr	r7, [r1, #4]
   104d2:	4941      	ldr	r1, [pc, #260]	; (105d8 <imgr_cli_cmd+0x11c>)
   104d4:	4638      	mov	r0, r7
   104d6:	f7ff f8b7 	bl	f648 <strcmp>
   104da:	4604      	mov	r4, r0
   104dc:	2800      	cmp	r0, #0
   104de:	d13b      	bne.n	10558 <imgr_cli_cmd+0x9c>
    memset(buf, ' ', sizeof buf);
   104e0:	4d3e      	ldr	r5, [pc, #248]	; (105dc <imgr_cli_cmd+0x120>)
    console_printf("%d %8s: %s %s\n",
   104e2:	4f3f      	ldr	r7, [pc, #252]	; (105e0 <imgr_cli_cmd+0x124>)
    if (imgr_read_info(slot, &ver, hash, &flags)) {
   104e4:	ab03      	add	r3, sp, #12
   104e6:	aa0d      	add	r2, sp, #52	; 0x34
   104e8:	a904      	add	r1, sp, #16
   104ea:	4620      	mov	r0, r4
   104ec:	f7ff fcb8 	bl	fe60 <imgr_read_info>
   104f0:	bb58      	cbnz	r0, 1054a <imgr_cli_cmd+0x8e>
    state_flags = imgmgr_state_flags(slot);
   104f2:	4620      	mov	r0, r4
   104f4:	f000 f8a2 	bl	1063c <imgmgr_state_flags>
    (void)imgr_ver_str(&ver, ver_str);
   104f8:	a906      	add	r1, sp, #24
    state_flags = imgmgr_state_flags(slot);
   104fa:	4606      	mov	r6, r0
    (void)imgr_ver_str(&ver, ver_str);
   104fc:	a804      	add	r0, sp, #16
   104fe:	f000 fa5f 	bl	109c0 <imgr_ver_str>
    console_printf("%d %8s: %s %s\n",
   10502:	2341      	movs	r3, #65	; 0x41
   10504:	aa15      	add	r2, sp, #84	; 0x54
   10506:	2120      	movs	r1, #32
   10508:	a80d      	add	r0, sp, #52	; 0x34
   1050a:	f005 fa13 	bl	15934 <hex_format>
    memset(buf, ' ', sizeof buf);
   1050e:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
   10512:	602a      	str	r2, [r5, #0]
   10514:	606a      	str	r2, [r5, #4]
    console_printf("%d %8s: %s %s\n",
   10516:	9903      	ldr	r1, [sp, #12]
    if (state_flags & IMGMGR_STATE_F_ACTIVE) {
   10518:	0772      	lsls	r2, r6, #29
        *p = 'a';
   1051a:	bf44      	itt	mi
   1051c:	2261      	movmi	r2, #97	; 0x61
   1051e:	702a      	strbmi	r2, [r5, #0]
    console_printf("%d %8s: %s %s\n",
   10520:	4603      	mov	r3, r0
    if (!(image_flags & IMAGE_F_NON_BOOTABLE)) {
   10522:	06c8      	lsls	r0, r1, #27
        *p = 'b';
   10524:	bf5c      	itt	pl
   10526:	2262      	movpl	r2, #98	; 0x62
   10528:	706a      	strbpl	r2, [r5, #1]
    if (state_flags & IMGMGR_STATE_F_CONFIRMED) {
   1052a:	07b1      	lsls	r1, r6, #30
        *p = 'c';
   1052c:	bf44      	itt	mi
   1052e:	2263      	movmi	r2, #99	; 0x63
   10530:	70aa      	strbmi	r2, [r5, #2]
    if (state_flags & IMGMGR_STATE_F_PENDING) {
   10532:	07f2      	lsls	r2, r6, #31
        *p = 'p';
   10534:	bf44      	itt	mi
   10536:	2270      	movmi	r2, #112	; 0x70
   10538:	70ea      	strbmi	r2, [r5, #3]
    *p = '\0';
   1053a:	2200      	movs	r2, #0
   1053c:	712a      	strb	r2, [r5, #4]
    console_printf("%d %8s: %s %s\n",
   1053e:	4621      	mov	r1, r4
   10540:	9500      	str	r5, [sp, #0]
   10542:	aa06      	add	r2, sp, #24
   10544:	4638      	mov	r0, r7
   10546:	f002 f845 	bl	125d4 <console_printf>
        for (i = 0; i < 2; i++) {
   1054a:	2c01      	cmp	r4, #1
   1054c:	d102      	bne.n	10554 <imgr_cli_cmd+0x98>
    }
    return 0;
}
   1054e:	2000      	movs	r0, #0
   10550:	b027      	add	sp, #156	; 0x9c
   10552:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10554:	2401      	movs	r4, #1
   10556:	e7c5      	b.n	104e4 <imgr_cli_cmd+0x28>
    } else if (!strcmp(argv[1], "test")) {
   10558:	4922      	ldr	r1, [pc, #136]	; (105e4 <imgr_cli_cmd+0x128>)
   1055a:	4638      	mov	r0, r7
   1055c:	f7ff f874 	bl	f648 <strcmp>
   10560:	4601      	mov	r1, r0
   10562:	b928      	cbnz	r0, 10570 <imgr_cli_cmd+0xb4>
        if (argc < 3) {
   10564:	2e02      	cmp	r6, #2
   10566:	d0af      	beq.n	104c8 <imgr_cli_cmd+0xc>
            imgr_cli_set_pending(argv[2], 1);
   10568:	68a8      	ldr	r0, [r5, #8]
   1056a:	f7ff ff59 	bl	10420 <imgr_cli_set_pending>
   1056e:	e7ee      	b.n	1054e <imgr_cli_cmd+0x92>
    } else if (!strcmp(argv[1], "confirm")) {
   10570:	491d      	ldr	r1, [pc, #116]	; (105e8 <imgr_cli_cmd+0x12c>)
   10572:	4638      	mov	r0, r7
   10574:	f7ff f868 	bl	f648 <strcmp>
   10578:	b960      	cbnz	r0, 10594 <imgr_cli_cmd+0xd8>
        if (argc < 3) {
   1057a:	2e02      	cmp	r6, #2
   1057c:	d108      	bne.n	10590 <imgr_cli_cmd+0xd4>
    rc = imgmgr_state_confirm();
   1057e:	f000 f8e4 	bl	1074a <imgmgr_state_confirm>
    if (rc != 0) {
   10582:	4601      	mov	r1, r0
   10584:	2800      	cmp	r0, #0
   10586:	d0e2      	beq.n	1054e <imgr_cli_cmd+0x92>
        console_printf("Error confirming image state; rc=%d\n", rc);
   10588:	4818      	ldr	r0, [pc, #96]	; (105ec <imgr_cli_cmd+0x130>)
            console_printf("Error erasing area rc=%d\n", rc);
   1058a:	f002 f823 	bl	125d4 <console_printf>
   1058e:	e7de      	b.n	1054e <imgr_cli_cmd+0x92>
            imgr_cli_set_pending(argv[2], 1);
   10590:	2101      	movs	r1, #1
   10592:	e7e9      	b.n	10568 <imgr_cli_cmd+0xac>
    } else if (!strcmp(argv[1], "erase")) {
   10594:	4916      	ldr	r1, [pc, #88]	; (105f0 <imgr_cli_cmd+0x134>)
   10596:	4638      	mov	r0, r7
   10598:	f7ff f856 	bl	f648 <strcmp>
   1059c:	b9b8      	cbnz	r0, 105ce <imgr_cli_cmd+0x112>
    area_id = imgmgr_find_best_area_id();
   1059e:	f7ff fcf8 	bl	ff92 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   105a2:	1e04      	subs	r4, r0, #0
   105a4:	db11      	blt.n	105ca <imgr_cli_cmd+0x10e>
        rc = flash_area_open(area_id, &fa);
   105a6:	a915      	add	r1, sp, #84	; 0x54
   105a8:	b2e0      	uxtb	r0, r4
   105aa:	f002 f8c5 	bl	12738 <flash_area_open>
        if (rc) {
   105ae:	4601      	mov	r1, r0
   105b0:	b110      	cbz	r0, 105b8 <imgr_cli_cmd+0xfc>
            console_printf("Error opening area %d\n", area_id);
   105b2:	4810      	ldr	r0, [pc, #64]	; (105f4 <imgr_cli_cmd+0x138>)
   105b4:	4621      	mov	r1, r4
   105b6:	e7e8      	b.n	1058a <imgr_cli_cmd+0xce>
        rc = flash_area_erase(fa, 0, fa->fa_size);
   105b8:	9815      	ldr	r0, [sp, #84]	; 0x54
   105ba:	6882      	ldr	r2, [r0, #8]
   105bc:	f002 f938 	bl	12830 <flash_area_erase>
        if (rc) {
   105c0:	4601      	mov	r1, r0
   105c2:	2800      	cmp	r0, #0
   105c4:	d0c3      	beq.n	1054e <imgr_cli_cmd+0x92>
            console_printf("Error erasing area rc=%d\n", rc);
   105c6:	480c      	ldr	r0, [pc, #48]	; (105f8 <imgr_cli_cmd+0x13c>)
   105c8:	e7df      	b.n	1058a <imgr_cli_cmd+0xce>
        console_printf("No suitable area to erase\n");
   105ca:	480c      	ldr	r0, [pc, #48]	; (105fc <imgr_cli_cmd+0x140>)
   105cc:	e77d      	b.n	104ca <imgr_cli_cmd+0xe>
        console_printf("Unknown cmd\n");
   105ce:	480c      	ldr	r0, [pc, #48]	; (10600 <imgr_cli_cmd+0x144>)
   105d0:	e77b      	b.n	104ca <imgr_cli_cmd+0xe>
   105d2:	bf00      	nop
   105d4:	00021e76 	.word	0x00021e76
   105d8:	000220c7 	.word	0x000220c7
   105dc:	20003cec 	.word	0x20003cec
   105e0:	00022548 	.word	0x00022548
   105e4:	00022557 	.word	0x00022557
   105e8:	0002255c 	.word	0x0002255c
   105ec:	00022564 	.word	0x00022564
   105f0:	00022589 	.word	0x00022589
   105f4:	0002258f 	.word	0x0002258f
   105f8:	000225a6 	.word	0x000225a6
   105fc:	000225c0 	.word	0x000225c0
   10600:	00022015 	.word	0x00022015

00010604 <imgr_cli_register>:

int
imgr_cli_register(void)
{
    return shell_cmd_register(&shell_imgr_cmd);
   10604:	4801      	ldr	r0, [pc, #4]	; (1060c <imgr_cli_register+0x8>)
   10606:	f003 bb19 	b.w	13c3c <shell_cmd_register>
   1060a:	bf00      	nop
   1060c:	200006cc 	.word	0x200006cc

00010610 <imgmgr_log_upload_start>:

int
imgmgr_log_upload_start(int status)
{
    return imgmgr_log_gen(IMGMGR_LOG_EV_UPSTART, status, NULL);
}
   10610:	2000      	movs	r0, #0
   10612:	4770      	bx	lr

00010614 <imgmgr_log_upload_done>:

int
imgmgr_log_upload_done(int status, const uint8_t *hash)
{
    return imgmgr_log_gen(IMGMGR_LOG_EV_UPDONE, 0, hash);
}
   10614:	2000      	movs	r0, #0
   10616:	4770      	bx	lr

00010618 <imgmgr_log_pending>:
   10618:	2000      	movs	r0, #0
   1061a:	4770      	bx	lr

0001061c <imgmgr_log_confirm>:
   1061c:	2000      	movs	r0, #0
   1061e:	4770      	bx	lr

00010620 <cbor_encode_text_stringz>:
   10620:	b513      	push	{r0, r1, r4, lr}
   10622:	4604      	mov	r4, r0
   10624:	4608      	mov	r0, r1
   10626:	9101      	str	r1, [sp, #4]
   10628:	f7ff f819 	bl	f65e <strlen>
   1062c:	9901      	ldr	r1, [sp, #4]
   1062e:	4602      	mov	r2, r0
   10630:	4620      	mov	r0, r4
   10632:	b002      	add	sp, #8
   10634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10638:	f005 bd27 	b.w	1608a <cbor_encode_text_string>

0001063c <imgmgr_state_flags>:
{
    split_mode_t split_mode;
    uint8_t flags;
    int swap_type;

    assert(query_slot == 0 || query_slot == 1);
   1063c:	2801      	cmp	r0, #1
{
   1063e:	b538      	push	{r3, r4, r5, lr}
   10640:	4605      	mov	r5, r0
    assert(query_slot == 0 || query_slot == 1);
   10642:	d905      	bls.n	10650 <imgmgr_state_flags+0x14>
            flags |= IMGMGR_STATE_F_PENDING;
        }
        break;

    default:
        assert(0);
   10644:	2300      	movs	r3, #0
   10646:	461a      	mov	r2, r3
   10648:	4619      	mov	r1, r3
   1064a:	4618      	mov	r0, r3
   1064c:	f7f8 fc52 	bl	8ef4 <__assert_func>
    swap_type = boot_swap_type();
   10650:	f004 ff5c 	bl	1550c <boot_swap_type>
    switch (swap_type) {
   10654:	3801      	subs	r0, #1
   10656:	2803      	cmp	r0, #3
   10658:	d81b      	bhi.n	10692 <imgmgr_state_flags+0x56>
   1065a:	e8df f000 	tbb	[pc, r0]
   1065e:	0502      	.short	0x0502
   10660:	1714      	.short	0x1714
        if (query_slot == 0) {
   10662:	b345      	cbz	r5, 106b6 <imgmgr_state_flags+0x7a>
    flags = 0;
   10664:	2400      	movs	r4, #0
   10666:	e001      	b.n	1066c <imgmgr_state_flags+0x30>
        if (query_slot == 0) {
   10668:	b33d      	cbz	r5, 106ba <imgmgr_state_flags+0x7e>
            flags |= IMGMGR_STATE_F_PENDING;
   1066a:	2401      	movs	r4, #1
    if (query_slot == 0 || split_app_active_get()) {
   1066c:	f005 f828 	bl	156c0 <split_app_active_get>
   10670:	b108      	cbz	r0, 10676 <imgmgr_state_flags+0x3a>
        flags |= IMGMGR_STATE_F_ACTIVE;
   10672:	f044 0404 	orr.w	r4, r4, #4
    split_mode = split_mode_get();
   10676:	f005 f81d 	bl	156b4 <split_mode_get>
    switch (split_mode) {
   1067a:	2803      	cmp	r0, #3
   1067c:	d8e2      	bhi.n	10644 <imgmgr_state_flags+0x8>
   1067e:	e8df f000 	tbb	[pc, r0]
   10682:	1710      	.short	0x1710
   10684:	120c      	.short	0x120c
        if (query_slot == 0) {
   10686:	b1c5      	cbz	r5, 106ba <imgmgr_state_flags+0x7e>
            flags |= IMGMGR_STATE_F_PENDING | IMGMGR_STATE_F_PERMANENT;
   10688:	2409      	movs	r4, #9
   1068a:	e7ef      	b.n	1066c <imgmgr_state_flags+0x30>
        if (query_slot == 0) {
   1068c:	b1bd      	cbz	r5, 106be <imgmgr_state_flags+0x82>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1068e:	2402      	movs	r4, #2
   10690:	e7ec      	b.n	1066c <imgmgr_state_flags+0x30>
    if (query_slot == 0 || split_app_active_get()) {
   10692:	2d00      	cmp	r5, #0
   10694:	d1e6      	bne.n	10664 <imgmgr_state_flags+0x28>
    flags = 0;
   10696:	462c      	mov	r4, r5
   10698:	e7eb      	b.n	10672 <imgmgr_state_flags+0x36>
        if (query_slot == 1) {
   1069a:	2d01      	cmp	r5, #1
   1069c:	d101      	bne.n	106a2 <imgmgr_state_flags+0x66>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1069e:	f044 0402 	orr.w	r4, r4, #2
        break;
    }

    return flags;
}
   106a2:	4620      	mov	r0, r4
   106a4:	bd38      	pop	{r3, r4, r5, pc}
        if (query_slot == 0) {
   106a6:	2d00      	cmp	r5, #0
   106a8:	d1fb      	bne.n	106a2 <imgmgr_state_flags+0x66>
            flags |= IMGMGR_STATE_F_PENDING;
   106aa:	f044 0401 	orr.w	r4, r4, #1
    return flags;
   106ae:	e7f8      	b.n	106a2 <imgmgr_state_flags+0x66>
        if (query_slot == 1) {
   106b0:	2d01      	cmp	r5, #1
   106b2:	d1f6      	bne.n	106a2 <imgmgr_state_flags+0x66>
   106b4:	e7f9      	b.n	106aa <imgmgr_state_flags+0x6e>
            flags |= IMGMGR_STATE_F_ACTIVE;
   106b6:	2406      	movs	r4, #6
   106b8:	e7db      	b.n	10672 <imgmgr_state_flags+0x36>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   106ba:	2402      	movs	r4, #2
   106bc:	e7d9      	b.n	10672 <imgmgr_state_flags+0x36>
            flags |= IMGMGR_STATE_F_ACTIVE;
   106be:	2404      	movs	r4, #4
    if (query_slot == 0 || split_app_active_get()) {
   106c0:	e7d7      	b.n	10672 <imgmgr_state_flags+0x36>

000106c2 <imgmgr_state_slot_in_use>:
           (imgmgr_state_flags(1) & IMGMGR_STATE_F_PENDING);
}

int
imgmgr_state_slot_in_use(int slot)
{
   106c2:	b508      	push	{r3, lr}
    uint8_t state_flags;

    state_flags = imgmgr_state_flags(slot);
   106c4:	f7ff ffba 	bl	1063c <imgmgr_state_flags>
    return (state_flags & IMGMGR_STATE_F_ACTIVE)       ||
           (state_flags & IMGMGR_STATE_F_CONFIRMED)    ||
   106c8:	f010 0f06 	tst.w	r0, #6
   106cc:	bf0c      	ite	eq
   106ce:	f000 0001 	andeq.w	r0, r0, #1
   106d2:	2001      	movne	r0, #1
           (state_flags & IMGMGR_STATE_F_PENDING);
}
   106d4:	bd08      	pop	{r3, pc}

000106d6 <imgmgr_state_set_pending>:

int
imgmgr_state_set_pending(int slot, int permanent)
{
   106d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   106d8:	b08b      	sub	sp, #44	; 0x2c
   106da:	460d      	mov	r5, r1
   106dc:	4604      	mov	r4, r0
    uint8_t hash[IMGMGR_HASH_LEN];
    const uint8_t *hashp;
    int split_app_active;
    int rc;

    state_flags = imgmgr_state_flags(slot);
   106de:	f7ff ffad 	bl	1063c <imgmgr_state_flags>
   106e2:	4607      	mov	r7, r0
    split_app_active = split_app_active_get();
   106e4:	f004 ffec 	bl	156c0 <split_app_active_get>
    hashp = NULL;

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if ((state_flags & IMGMGR_STATE_F_CONFIRMED) &&
   106e8:	07ba      	lsls	r2, r7, #30
    split_app_active = split_app_active_get();
   106ea:	4606      	mov	r6, r0
    if ((state_flags & IMGMGR_STATE_F_CONFIRMED) &&
   106ec:	d501      	bpl.n	106f2 <imgmgr_state_set_pending+0x1c>
   106ee:	bb24      	cbnz	r4, 1073a <imgmgr_state_set_pending+0x64>
        (slot != 0 || !split_app_active)) {
   106f0:	b318      	cbz	r0, 1073a <imgmgr_state_set_pending+0x64>

        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    rc = imgr_read_info(slot, NULL, hash, &image_flags);
   106f2:	ab01      	add	r3, sp, #4
   106f4:	aa02      	add	r2, sp, #8
   106f6:	2100      	movs	r1, #0
   106f8:	4620      	mov	r0, r4
   106fa:	f7ff fbb1 	bl	fe60 <imgr_read_info>
    if (rc != 0) {
   106fe:	b9f8      	cbnz	r0, 10740 <imgmgr_state_set_pending+0x6a>
        rc = MGMT_ERR_EUNKNOWN;
        goto done;
    }
    hashp = hash;

    if (!(image_flags & IMAGE_F_NON_BOOTABLE)) {
   10700:	9b01      	ldr	r3, [sp, #4]
   10702:	06db      	lsls	r3, r3, #27
   10704:	d414      	bmi.n	10730 <imgmgr_state_set_pending+0x5a>
        /* Unified image or loader. */
        if (!split_app_active) {
   10706:	b96e      	cbnz	r6, 10724 <imgmgr_state_set_pending+0x4e>
            /* No change in split status. */
            rc = boot_set_pending(permanent);
   10708:	4628      	mov	r0, r5
   1070a:	f004 ff49 	bl	155a0 <boot_set_pending>
        if (permanent) {
            rc = split_write_split(SPLIT_MODE_APP);
        } else {
            rc = split_write_split(SPLIT_MODE_TEST_APP);
        }
        if (rc != 0) {
   1070e:	1e04      	subs	r4, r0, #0
   10710:	bf18      	it	ne
   10712:	2401      	movne	r4, #1
    hashp = hash;
   10714:	a902      	add	r1, sp, #8
        }
    }

done:
    if (permanent) {
        imgmgr_log_confirm(rc, hashp);
   10716:	4620      	mov	r0, r4
    if (permanent) {
   10718:	b1a5      	cbz	r5, 10744 <imgmgr_state_set_pending+0x6e>
        imgmgr_log_confirm(rc, hashp);
   1071a:	f7ff ff7f 	bl	1061c <imgmgr_log_confirm>
    } else {
        imgmgr_log_pending(rc, hashp);
    }
    return rc;
}
   1071e:	4620      	mov	r0, r4
   10720:	b00b      	add	sp, #44	; 0x2c
   10722:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (permanent) {
   10724:	b115      	cbz	r5, 1072c <imgmgr_state_set_pending+0x56>
            rc = split_write_split(SPLIT_MODE_TEST_APP);
   10726:	f005 f833 	bl	15790 <split_write_split>
   1072a:	e7f0      	b.n	1070e <imgmgr_state_set_pending+0x38>
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
   1072c:	2003      	movs	r0, #3
   1072e:	e7fa      	b.n	10726 <imgmgr_state_set_pending+0x50>
        if (permanent) {
   10730:	b10d      	cbz	r5, 10736 <imgmgr_state_set_pending+0x60>
            rc = split_write_split(SPLIT_MODE_APP);
   10732:	2002      	movs	r0, #2
   10734:	e7f7      	b.n	10726 <imgmgr_state_set_pending+0x50>
            rc = split_write_split(SPLIT_MODE_TEST_APP);
   10736:	2001      	movs	r0, #1
   10738:	e7f5      	b.n	10726 <imgmgr_state_set_pending+0x50>
        rc = MGMT_ERR_EBADSTATE;
   1073a:	2406      	movs	r4, #6
    hashp = NULL;
   1073c:	2100      	movs	r1, #0
   1073e:	e7ea      	b.n	10716 <imgmgr_state_set_pending+0x40>
        rc = MGMT_ERR_EUNKNOWN;
   10740:	2401      	movs	r4, #1
   10742:	e7fb      	b.n	1073c <imgmgr_state_set_pending+0x66>
        imgmgr_log_pending(rc, hashp);
   10744:	f7ff ff68 	bl	10618 <imgmgr_log_pending>
    return rc;
   10748:	e7e9      	b.n	1071e <imgmgr_state_set_pending+0x48>

0001074a <imgmgr_state_confirm>:

int
imgmgr_state_confirm(void)
{
   1074a:	b510      	push	{r4, lr}
    return (imgmgr_state_flags(0) & IMGMGR_STATE_F_PENDING) ||
   1074c:	2000      	movs	r0, #0
   1074e:	f7ff ff75 	bl	1063c <imgmgr_state_flags>
   10752:	07c2      	lsls	r2, r0, #31
   10754:	d506      	bpl.n	10764 <imgmgr_state_confirm+0x1a>
    int rc;

    /* Confirm disallowed if a test is pending. */
    if (imgmgr_state_any_pending()) {
        rc = MGMT_ERR_EBADSTATE;
   10756:	2406      	movs	r4, #6
    }

    imgmgr_dfu_confirmed();

done:
    imgmgr_log_confirm(rc, NULL);
   10758:	2100      	movs	r1, #0
   1075a:	4620      	mov	r0, r4
   1075c:	f7ff ff5e 	bl	1061c <imgmgr_log_confirm>
    return rc;
}
   10760:	4620      	mov	r0, r4
   10762:	bd10      	pop	{r4, pc}
           (imgmgr_state_flags(1) & IMGMGR_STATE_F_PENDING);
   10764:	2001      	movs	r0, #1
   10766:	f7ff ff69 	bl	1063c <imgmgr_state_flags>
    if (imgmgr_state_any_pending()) {
   1076a:	07c3      	lsls	r3, r0, #31
   1076c:	d4f3      	bmi.n	10756 <imgmgr_state_confirm+0xc>
    rc = boot_set_confirmed();
   1076e:	f004 ff58 	bl	15622 <boot_set_confirmed>
    if (rc != 0) {
   10772:	4604      	mov	r4, r0
   10774:	b108      	cbz	r0, 1077a <imgmgr_state_confirm+0x30>
        rc = MGMT_ERR_EUNKNOWN;
   10776:	2401      	movs	r4, #1
   10778:	e7ee      	b.n	10758 <imgmgr_state_confirm+0xe>
    if (split_app_active_get()) {
   1077a:	f004 ffa1 	bl	156c0 <split_app_active_get>
   1077e:	b100      	cbz	r0, 10782 <imgmgr_state_confirm+0x38>
        rc = split_write_split(SPLIT_MODE_APP);
   10780:	2002      	movs	r0, #2
        rc = split_write_split(SPLIT_MODE_LOADER);
   10782:	f005 f805 	bl	15790 <split_write_split>
        if (rc != 0) {
   10786:	2800      	cmp	r0, #0
   10788:	d1f5      	bne.n	10776 <imgmgr_state_confirm+0x2c>
    imgmgr_dfu_confirmed();
   1078a:	f7ff fe17 	bl	103bc <imgmgr_dfu_confirmed>
   1078e:	e7e3      	b.n	10758 <imgmgr_state_confirm+0xe>

00010790 <imgmgr_state_read>:

int
imgmgr_state_read(struct mgmt_cbuf *cb)
{
   10790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    CborEncoder images;
    CborEncoder image;

    any_non_bootable = 0;

    g_err |= cbor_encode_text_stringz(&cb->encoder, "images");
   10794:	f100 060c 	add.w	r6, r0, #12
{
   10798:	b09d      	sub	sp, #116	; 0x74
    g_err |= cbor_encode_text_stringz(&cb->encoder, "images");
   1079a:	495c      	ldr	r1, [pc, #368]	; (1090c <imgmgr_state_read+0x17c>)

        state_flags = imgmgr_state_flags(i);

        g_err |= cbor_encoder_create_map(&images, &image,
                                         CborIndefiniteLength);
        g_err |= cbor_encode_text_stringz(&image, "slot");
   1079c:	f8df 9188 	ldr.w	r9, [pc, #392]	; 10928 <imgmgr_state_read+0x198>
        g_err |= cbor_encode_int(&image, i);

        g_err |= cbor_encode_text_stringz(&image, "version");
   107a0:	f8df a188 	ldr.w	sl, [pc, #392]	; 1092c <imgmgr_state_read+0x19c>
        imgr_ver_str(&ver, vers_str);
        g_err |= cbor_encode_text_stringz(&image, vers_str);

        g_err |= cbor_encode_text_stringz(&image, "hash");
   107a4:	f8df b188 	ldr.w	fp, [pc, #392]	; 10930 <imgmgr_state_read+0x1a0>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "images");
   107a8:	4630      	mov	r0, r6
   107aa:	f7ff ff39 	bl	10620 <cbor_encode_text_stringz>
    g_err |= cbor_encoder_create_array(&cb->encoder, &images,
   107ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    g_err |= cbor_encode_text_stringz(&cb->encoder, "images");
   107b2:	4604      	mov	r4, r0
    g_err |= cbor_encoder_create_array(&cb->encoder, &images,
   107b4:	a905      	add	r1, sp, #20
   107b6:	4630      	mov	r0, r6
   107b8:	f005 fc79 	bl	160ae <cbor_encoder_create_array>
   107bc:	f04f 0800 	mov.w	r8, #0
   107c0:	4304      	orrs	r4, r0
    any_non_bootable = 0;
   107c2:	4647      	mov	r7, r8
        rc = imgr_read_info(i, &ver, hash, &flags);
   107c4:	ab02      	add	r3, sp, #8
   107c6:	aa14      	add	r2, sp, #80	; 0x50
   107c8:	a903      	add	r1, sp, #12
   107ca:	4640      	mov	r0, r8
   107cc:	f7ff fb48 	bl	fe60 <imgr_read_info>
        if (rc != 0) {
   107d0:	9001      	str	r0, [sp, #4]
   107d2:	2800      	cmp	r0, #0
   107d4:	d179      	bne.n	108ca <imgmgr_state_read+0x13a>
            any_non_bootable = 1;
   107d6:	9a02      	ldr	r2, [sp, #8]
        state_flags = imgmgr_state_flags(i);
   107d8:	4640      	mov	r0, r8
            any_non_bootable = 1;
   107da:	f012 0f10 	tst.w	r2, #16
   107de:	bf18      	it	ne
   107e0:	2701      	movne	r7, #1
        state_flags = imgmgr_state_flags(i);
   107e2:	f7ff ff2b 	bl	1063c <imgmgr_state_flags>
        g_err |= cbor_encoder_create_map(&images, &image,
   107e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
        state_flags = imgmgr_state_flags(i);
   107ea:	4605      	mov	r5, r0
        g_err |= cbor_encoder_create_map(&images, &image,
   107ec:	a909      	add	r1, sp, #36	; 0x24
   107ee:	a805      	add	r0, sp, #20
   107f0:	f005 fc60 	bl	160b4 <cbor_encoder_create_map>
        g_err |= cbor_encode_text_stringz(&image, "slot");
   107f4:	4649      	mov	r1, r9
        g_err |= cbor_encoder_create_map(&images, &image,
   107f6:	9000      	str	r0, [sp, #0]
        g_err |= cbor_encode_text_stringz(&image, "slot");
   107f8:	a809      	add	r0, sp, #36	; 0x24
   107fa:	f7ff ff11 	bl	10620 <cbor_encode_text_stringz>
   107fe:	9a00      	ldr	r2, [sp, #0]
        g_err |= cbor_encode_int(&image, i);
   10800:	9b01      	ldr	r3, [sp, #4]
        g_err |= cbor_encode_text_stringz(&image, "slot");
   10802:	4310      	orrs	r0, r2
   10804:	4304      	orrs	r4, r0
        g_err |= cbor_encode_int(&image, i);
   10806:	4642      	mov	r2, r8
   10808:	a809      	add	r0, sp, #36	; 0x24
   1080a:	f005 fc0d 	bl	16028 <cbor_encode_int>
        g_err |= cbor_encode_text_stringz(&image, "version");
   1080e:	4651      	mov	r1, sl
        g_err |= cbor_encode_int(&image, i);
   10810:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&image, "version");
   10812:	a809      	add	r0, sp, #36	; 0x24
   10814:	f7ff ff04 	bl	10620 <cbor_encode_text_stringz>
        imgr_ver_str(&ver, vers_str);
   10818:	a90d      	add	r1, sp, #52	; 0x34
        g_err |= cbor_encode_text_stringz(&image, "version");
   1081a:	4304      	orrs	r4, r0
        imgr_ver_str(&ver, vers_str);
   1081c:	a803      	add	r0, sp, #12
   1081e:	f000 f8cf 	bl	109c0 <imgr_ver_str>
        g_err |= cbor_encode_text_stringz(&image, vers_str);
   10822:	a90d      	add	r1, sp, #52	; 0x34
   10824:	a809      	add	r0, sp, #36	; 0x24
   10826:	f7ff fefb 	bl	10620 <cbor_encode_text_stringz>
        g_err |= cbor_encode_text_stringz(&image, "hash");
   1082a:	4659      	mov	r1, fp
        g_err |= cbor_encode_text_stringz(&image, vers_str);
   1082c:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&image, "hash");
   1082e:	a809      	add	r0, sp, #36	; 0x24
   10830:	f7ff fef6 	bl	10620 <cbor_encode_text_stringz>
        g_err |= cbor_encode_byte_string(&image, hash, IMGMGR_HASH_LEN);
   10834:	2220      	movs	r2, #32
        g_err |= cbor_encode_text_stringz(&image, "hash");
   10836:	4304      	orrs	r4, r0
        g_err |= cbor_encode_byte_string(&image, hash, IMGMGR_HASH_LEN);
   10838:	a914      	add	r1, sp, #80	; 0x50
   1083a:	a809      	add	r0, sp, #36	; 0x24
   1083c:	f005 fc13 	bl	16066 <cbor_encode_byte_string>

        g_err |= cbor_encode_text_stringz(&image, "bootable");
   10840:	4933      	ldr	r1, [pc, #204]	; (10910 <imgmgr_state_read+0x180>)
        g_err |= cbor_encode_byte_string(&image, hash, IMGMGR_HASH_LEN);
   10842:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&image, "bootable");
   10844:	a809      	add	r0, sp, #36	; 0x24
   10846:	f7ff feeb 	bl	10620 <cbor_encode_text_stringz>
        g_err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   1084a:	9902      	ldr	r1, [sp, #8]
   1084c:	f081 0110 	eor.w	r1, r1, #16
   10850:	f3c1 1100 	ubfx	r1, r1, #4, #1
        g_err |= cbor_encode_text_stringz(&image, "bootable");
   10854:	4304      	orrs	r4, r0
                                          int iov_len);
CBOR_API CborError cbor_encode_floating_point(CborEncoder *encoder, CborType fpType, const void *value);
CBOR_INLINE_API CborError cbor_encode_bytes_written(CborEncoder *encoder)
{   return encoder->writer->bytes_written; }
CBOR_INLINE_API CborError cbor_encode_boolean(CborEncoder *encoder, bool value)
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   10856:	3114      	adds	r1, #20
   10858:	a809      	add	r0, sp, #36	; 0x24
   1085a:	f005 fbf3 	bl	16044 <cbor_encode_simple_value>

        g_err |= cbor_encode_text_stringz(&image, "pending");
   1085e:	492d      	ldr	r1, [pc, #180]	; (10914 <imgmgr_state_read+0x184>)
        g_err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   10860:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&image, "pending");
   10862:	a809      	add	r0, sp, #36	; 0x24
   10864:	f7ff fedc 	bl	10620 <cbor_encode_text_stringz>
   10868:	f005 0101 	and.w	r1, r5, #1
   1086c:	4304      	orrs	r4, r0
   1086e:	3114      	adds	r1, #20
   10870:	a809      	add	r0, sp, #36	; 0x24
   10872:	f005 fbe7 	bl	16044 <cbor_encode_simple_value>
        g_err |= cbor_encode_boolean(&image,
                                     state_flags & IMGMGR_STATE_F_PENDING);

        g_err |= cbor_encode_text_stringz(&image, "confirmed");
   10876:	4928      	ldr	r1, [pc, #160]	; (10918 <imgmgr_state_read+0x188>)
        g_err |= cbor_encode_boolean(&image,
   10878:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&image, "confirmed");
   1087a:	a809      	add	r0, sp, #36	; 0x24
   1087c:	f7ff fed0 	bl	10620 <cbor_encode_text_stringz>
        g_err |= cbor_encode_boolean(&image,
   10880:	f3c5 0140 	ubfx	r1, r5, #1, #1
        g_err |= cbor_encode_text_stringz(&image, "confirmed");
   10884:	4304      	orrs	r4, r0
   10886:	3114      	adds	r1, #20
   10888:	a809      	add	r0, sp, #36	; 0x24
   1088a:	f005 fbdb 	bl	16044 <cbor_encode_simple_value>
                                     state_flags & IMGMGR_STATE_F_CONFIRMED);

        g_err |= cbor_encode_text_stringz(&image, "active");
   1088e:	4923      	ldr	r1, [pc, #140]	; (1091c <imgmgr_state_read+0x18c>)
        g_err |= cbor_encode_boolean(&image,
   10890:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&image, "active");
   10892:	a809      	add	r0, sp, #36	; 0x24
   10894:	f7ff fec4 	bl	10620 <cbor_encode_text_stringz>
        g_err |= cbor_encode_boolean(&image,
   10898:	f3c5 0180 	ubfx	r1, r5, #2, #1
        g_err |= cbor_encode_text_stringz(&image, "active");
   1089c:	4304      	orrs	r4, r0
   1089e:	3114      	adds	r1, #20
   108a0:	a809      	add	r0, sp, #36	; 0x24
   108a2:	f005 fbcf 	bl	16044 <cbor_encode_simple_value>
                                     state_flags & IMGMGR_STATE_F_ACTIVE);

        g_err |= cbor_encode_text_stringz(&image, "permanent");
   108a6:	491e      	ldr	r1, [pc, #120]	; (10920 <imgmgr_state_read+0x190>)
        g_err |= cbor_encode_boolean(&image,
   108a8:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&image, "permanent");
   108aa:	a809      	add	r0, sp, #36	; 0x24
   108ac:	f7ff feb8 	bl	10620 <cbor_encode_text_stringz>
        g_err |= cbor_encode_boolean(&image,
   108b0:	f3c5 01c0 	ubfx	r1, r5, #3, #1
        g_err |= cbor_encode_text_stringz(&image, "permanent");
   108b4:	4304      	orrs	r4, r0
   108b6:	3114      	adds	r1, #20
   108b8:	a809      	add	r0, sp, #36	; 0x24
   108ba:	f005 fbc3 	bl	16044 <cbor_encode_simple_value>
                                     state_flags & IMGMGR_STATE_F_PERMANENT);

        g_err |= cbor_encoder_close_container(&images, &image);
   108be:	a909      	add	r1, sp, #36	; 0x24
        g_err |= cbor_encode_boolean(&image,
   108c0:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_close_container(&images, &image);
   108c2:	a805      	add	r0, sp, #20
   108c4:	f005 fc07 	bl	160d6 <cbor_encoder_close_container>
   108c8:	4304      	orrs	r4, r0
    for (i = 0; i < 2; i++) {
   108ca:	f1b8 0f00 	cmp.w	r8, #0
   108ce:	d01a      	beq.n	10906 <imgmgr_state_read+0x176>
    }

    g_err |= cbor_encoder_close_container(&cb->encoder, &images);
   108d0:	a905      	add	r1, sp, #20
   108d2:	4630      	mov	r0, r6
   108d4:	f005 fbff 	bl	160d6 <cbor_encoder_close_container>
   108d8:	4304      	orrs	r4, r0

    if (any_non_bootable) {
   108da:	b117      	cbz	r7, 108e2 <imgmgr_state_read+0x152>
        split_status = split_check_status();
   108dc:	f004 fed6 	bl	1568c <split_check_status>
   108e0:	4607      	mov	r7, r0
    } else {
        split_status = SPLIT_STATUS_INVALID;
    }

    g_err |= cbor_encode_text_stringz(&cb->encoder, "splitStatus");
   108e2:	4910      	ldr	r1, [pc, #64]	; (10924 <imgmgr_state_read+0x194>)
   108e4:	4630      	mov	r0, r6
   108e6:	f7ff fe9b 	bl	10620 <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, split_status);
   108ea:	17fb      	asrs	r3, r7, #31
    g_err |= cbor_encode_text_stringz(&cb->encoder, "splitStatus");
   108ec:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, split_status);
   108ee:	463a      	mov	r2, r7
   108f0:	4630      	mov	r0, r6
   108f2:	f005 fb99 	bl	16028 <cbor_encode_int>

    if (g_err) {
        return MGMT_ERR_ENOMEM;
   108f6:	ea54 0300 	orrs.w	r3, r4, r0
    }
    return 0;
}
   108fa:	bf14      	ite	ne
   108fc:	2002      	movne	r0, #2
   108fe:	2000      	moveq	r0, #0
   10900:	b01d      	add	sp, #116	; 0x74
   10902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10906:	f04f 0801 	mov.w	r8, #1
   1090a:	e75b      	b.n	107c4 <imgmgr_state_read+0x34>
   1090c:	00022650 	.word	0x00022650
   10910:	00022664 	.word	0x00022664
   10914:	0002266d 	.word	0x0002266d
   10918:	00022675 	.word	0x00022675
   1091c:	0002267f 	.word	0x0002267f
   10920:	00022686 	.word	0x00022686
   10924:	00022690 	.word	0x00022690
   10928:	00021f69 	.word	0x00021f69
   1092c:	00022657 	.word	0x00022657
   10930:	0002265f 	.word	0x0002265f

00010934 <imgmgr_state_write>:

int
imgmgr_state_write(struct mgmt_cbuf *cb)
{
   10934:	b530      	push	{r4, r5, lr}
   10936:	b0af      	sub	sp, #188	; 0xbc
    uint8_t hash[IMGMGR_HASH_LEN];
    size_t hash_len = 0;
   10938:	2100      	movs	r1, #0
{
   1093a:	4604      	mov	r4, r0
    bool confirm;
    int slot;
    int rc;

    const struct cbor_attr_t write_attr[] = {
   1093c:	228c      	movs	r2, #140	; 0x8c
   1093e:	a80b      	add	r0, sp, #44	; 0x2c
    size_t hash_len = 0;
   10940:	9101      	str	r1, [sp, #4]
    const struct cbor_attr_t write_attr[] = {
   10942:	f7fe fe5c 	bl	f5fe <memset>
   10946:	4b1c      	ldr	r3, [pc, #112]	; (109b8 <imgmgr_state_write+0x84>)
   10948:	930a      	str	r3, [sp, #40]	; 0x28
   1094a:	2303      	movs	r3, #3
   1094c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   10950:	ab01      	add	r3, sp, #4
   10952:	930d      	str	r3, [sp, #52]	; 0x34
   10954:	2320      	movs	r3, #32
   10956:	9314      	str	r3, [sp, #80]	; 0x50
   10958:	4b18      	ldr	r3, [pc, #96]	; (109bc <imgmgr_state_write+0x88>)
   1095a:	9316      	str	r3, [sp, #88]	; 0x58
   1095c:	2305      	movs	r3, #5
   1095e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
            .dflt.boolean = false,
        },
        [2] = { 0 },
    };

    rc = cbor_read_object(&cb->it, write_attr);
   10962:	a90a      	add	r1, sp, #40	; 0x28
    const struct cbor_attr_t write_attr[] = {
   10964:	f10d 0303 	add.w	r3, sp, #3
   10968:	ad02      	add	r5, sp, #8
    rc = cbor_read_object(&cb->it, write_attr);
   1096a:	f104 001c 	add.w	r0, r4, #28
    const struct cbor_attr_t write_attr[] = {
   1096e:	950c      	str	r5, [sp, #48]	; 0x30
   10970:	9318      	str	r3, [sp, #96]	; 0x60
    rc = cbor_read_object(&cb->it, write_attr);
   10972:	f005 fa5c 	bl	15e2e <cbor_read_object>
    if (rc != 0) {
   10976:	4601      	mov	r1, r0
   10978:	b110      	cbz	r0, 10980 <imgmgr_state_write+0x4c>
        return MGMT_ERR_EINVAL;
   1097a:	2003      	movs	r0, #3
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1097c:	b02f      	add	sp, #188	; 0xbc
   1097e:	bd30      	pop	{r4, r5, pc}
    if (hash_len == 0) {
   10980:	9b01      	ldr	r3, [sp, #4]
   10982:	b95b      	cbnz	r3, 1099c <imgmgr_state_write+0x68>
        if (confirm) {
   10984:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10988:	2b00      	cmp	r3, #0
   1098a:	d0f6      	beq.n	1097a <imgmgr_state_write+0x46>
        rc = imgmgr_state_confirm();
   1098c:	f7ff fedd 	bl	1074a <imgmgr_state_confirm>
    if (rc != 0) {
   10990:	2800      	cmp	r0, #0
   10992:	d1f3      	bne.n	1097c <imgmgr_state_write+0x48>
    rc = imgmgr_state_read(cb);
   10994:	4620      	mov	r0, r4
   10996:	f7ff fefb 	bl	10790 <imgmgr_state_read>
    if (rc != 0) {
   1099a:	e7ef      	b.n	1097c <imgmgr_state_write+0x48>
        slot = imgr_find_by_hash(hash, NULL);
   1099c:	4628      	mov	r0, r5
   1099e:	f7ff fadd 	bl	ff5c <imgr_find_by_hash>
        if (slot < 0) {
   109a2:	2800      	cmp	r0, #0
   109a4:	dbe9      	blt.n	1097a <imgmgr_state_write+0x46>
    if (slot == 0 && confirm) {
   109a6:	f89d 1003 	ldrb.w	r1, [sp, #3]
   109aa:	d101      	bne.n	109b0 <imgmgr_state_write+0x7c>
   109ac:	2900      	cmp	r1, #0
   109ae:	d1ed      	bne.n	1098c <imgmgr_state_write+0x58>
        rc = imgmgr_state_set_pending(slot, confirm);
   109b0:	f7ff fe91 	bl	106d6 <imgmgr_state_set_pending>
   109b4:	e7ec      	b.n	10990 <imgmgr_state_write+0x5c>
   109b6:	bf00      	nop
   109b8:	0002265f 	.word	0x0002265f
   109bc:	0002255c 	.word	0x0002255c

000109c0 <imgr_ver_str>:
    return 0;
}

int
imgr_ver_str(struct image_version *ver, char *dst)
{
   109c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   109c2:	4604      	mov	r4, r0
   109c4:	4608      	mov	r0, r1
    if (ver->iv_build_num) {
   109c6:	6865      	ldr	r5, [r4, #4]
        return sprintf(dst, "%u.%u.%u.%lu",
   109c8:	7822      	ldrb	r2, [r4, #0]
   109ca:	7863      	ldrb	r3, [r4, #1]
   109cc:	8861      	ldrh	r1, [r4, #2]
    if (ver->iv_build_num) {
   109ce:	b135      	cbz	r5, 109de <imgr_ver_str+0x1e>
        return sprintf(dst, "%u.%u.%u.%lu",
   109d0:	e9cd 1500 	strd	r1, r5, [sp]
   109d4:	4904      	ldr	r1, [pc, #16]	; (109e8 <imgr_ver_str+0x28>)
   109d6:	f00d fb4d 	bl	1e074 <sprintf>
          (unsigned long)ver->iv_build_num);
    } else {
        return sprintf(dst, "%u.%u.%u",
          ver->iv_major, ver->iv_minor, ver->iv_revision);
    }
}
   109da:	b003      	add	sp, #12
   109dc:	bd30      	pop	{r4, r5, pc}
        return sprintf(dst, "%u.%u.%u",
   109de:	9100      	str	r1, [sp, #0]
   109e0:	4902      	ldr	r1, [pc, #8]	; (109ec <imgr_ver_str+0x2c>)
   109e2:	f00d fb47 	bl	1e074 <sprintf>
   109e6:	e7f8      	b.n	109da <imgr_ver_str+0x1a>
   109e8:	0002269c 	.word	0x0002269c
   109ec:	000226a9 	.word	0x000226a9

000109f0 <mgmt_group_list_lock>:
static STAILQ_HEAD(, mgmt_group) mgmt_group_list =
    STAILQ_HEAD_INITIALIZER(mgmt_group_list);

static int
mgmt_group_list_lock(void)
{
   109f0:	b508      	push	{r3, lr}
    int rc;

    if (!os_started()) {
   109f2:	f7f8 fb3b 	bl	906c <os_started>
   109f6:	b120      	cbz	r0, 10a02 <mgmt_group_list_lock+0x12>
        return (0);
    }

    rc = os_mutex_pend(&mgmt_group_lock, OS_WAIT_FOREVER);
   109f8:	4802      	ldr	r0, [pc, #8]	; (10a04 <mgmt_group_list_lock+0x14>)
   109fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   109fe:	f7f9 feb5 	bl	a76c <os_mutex_pend>
    }

    return (0);
err:
    return (rc);
}
   10a02:	bd08      	pop	{r3, pc}
   10a04:	20003cf4 	.word	0x20003cf4

00010a08 <mgmt_group_list_unlock>:

int
mgmt_group_list_unlock(void)
{
   10a08:	b508      	push	{r3, lr}
    int rc;

    if (!os_started()) {
   10a0a:	f7f8 fb2f 	bl	906c <os_started>
   10a0e:	b110      	cbz	r0, 10a16 <mgmt_group_list_unlock+0xe>
        return (0);
    }

    rc = os_mutex_release(&mgmt_group_lock);
   10a10:	4801      	ldr	r0, [pc, #4]	; (10a18 <mgmt_group_list_unlock+0x10>)
   10a12:	f7f9 fe59 	bl	a6c8 <os_mutex_release>
    }

    return (0);
err:
    return (rc);
}
   10a16:	bd08      	pop	{r3, pc}
   10a18:	20003cf4 	.word	0x20003cf4

00010a1c <mgmt_group_register>:

int
mgmt_group_register(struct mgmt_group *group)
{
   10a1c:	b510      	push	{r4, lr}
   10a1e:	4604      	mov	r4, r0
    int rc;

    rc = mgmt_group_list_lock();
   10a20:	f7ff ffe6 	bl	109f0 <mgmt_group_list_lock>
    if (rc != 0) {
   10a24:	b948      	cbnz	r0, 10a3a <mgmt_group_register+0x1e>
        goto err;
    }

    STAILQ_INSERT_TAIL(&mgmt_group_list, group, mg_next);
   10a26:	4b05      	ldr	r3, [pc, #20]	; (10a3c <mgmt_group_register+0x20>)
   10a28:	60a0      	str	r0, [r4, #8]
   10a2a:	685a      	ldr	r2, [r3, #4]
   10a2c:	6014      	str	r4, [r2, #0]
   10a2e:	3408      	adds	r4, #8
   10a30:	605c      	str	r4, [r3, #4]
    }

    return (0);
err:
    return (rc);
}
   10a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rc = mgmt_group_list_unlock();
   10a36:	f7ff bfe7 	b.w	10a08 <mgmt_group_list_unlock>
}
   10a3a:	bd10      	pop	{r4, pc}
   10a3c:	200006dc 	.word	0x200006dc

00010a40 <mgmt_find_handler>:
    return (NULL);
}

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t handler_id)
{
   10a40:	b570      	push	{r4, r5, r6, lr}
   10a42:	4606      	mov	r6, r0
   10a44:	460d      	mov	r5, r1
    rc = mgmt_group_list_lock();
   10a46:	f7ff ffd3 	bl	109f0 <mgmt_group_list_lock>
    if (rc != 0) {
   10a4a:	b108      	cbz	r0, 10a50 <mgmt_find_handler+0x10>

    handler = &group->mg_handlers[handler_id];

    return (handler);
err:
    return (NULL);
   10a4c:	2000      	movs	r0, #0
}
   10a4e:	bd70      	pop	{r4, r5, r6, pc}
    STAILQ_FOREACH(group, &mgmt_group_list, mg_next) {
   10a50:	4b0a      	ldr	r3, [pc, #40]	; (10a7c <mgmt_find_handler+0x3c>)
   10a52:	681c      	ldr	r4, [r3, #0]
   10a54:	b964      	cbnz	r4, 10a70 <mgmt_find_handler+0x30>
    rc = mgmt_group_list_unlock();
   10a56:	f7ff ffd7 	bl	10a08 <mgmt_group_list_unlock>
    if (rc != 0) {
   10a5a:	2800      	cmp	r0, #0
   10a5c:	d1f6      	bne.n	10a4c <mgmt_find_handler+0xc>
    if (!group) {
   10a5e:	2c00      	cmp	r4, #0
   10a60:	d0f4      	beq.n	10a4c <mgmt_find_handler+0xc>
    if (handler_id >= group->mg_handlers_count) {
   10a62:	88a3      	ldrh	r3, [r4, #4]
   10a64:	42ab      	cmp	r3, r5
   10a66:	d9f1      	bls.n	10a4c <mgmt_find_handler+0xc>
    handler = &group->mg_handlers[handler_id];
   10a68:	6820      	ldr	r0, [r4, #0]
   10a6a:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    return (handler);
   10a6e:	e7ee      	b.n	10a4e <mgmt_find_handler+0xe>
        if (group->mg_group_id == group_id) {
   10a70:	88e3      	ldrh	r3, [r4, #6]
   10a72:	42b3      	cmp	r3, r6
   10a74:	d0ef      	beq.n	10a56 <mgmt_find_handler+0x16>
    STAILQ_FOREACH(group, &mgmt_group_list, mg_next) {
   10a76:	68a4      	ldr	r4, [r4, #8]
   10a78:	e7ec      	b.n	10a54 <mgmt_find_handler+0x14>
   10a7a:	bf00      	nop
   10a7c:	200006dc 	.word	0x200006dc

00010a80 <mgmt_cbuf_setoerr>:

int
mgmt_cbuf_setoerr(struct mgmt_cbuf *cb, int errcode)
{
   10a80:	b570      	push	{r4, r5, r6, lr}
    int rc;

    rc = cbor_encode_text_stringz(&cb->encoder, "rc");
   10a82:	f100 040c 	add.w	r4, r0, #12
{
   10a86:	460d      	mov	r5, r1
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   10a88:	2202      	movs	r2, #2
   10a8a:	4906      	ldr	r1, [pc, #24]	; (10aa4 <mgmt_cbuf_setoerr+0x24>)
   10a8c:	4620      	mov	r0, r4
   10a8e:	f005 fafc 	bl	1608a <cbor_encode_text_string>
    if (rc != 0) {
   10a92:	b930      	cbnz	r0, 10aa2 <mgmt_cbuf_setoerr+0x22>
        return rc;
    }

    rc = cbor_encode_int(&cb->encoder, errcode);
   10a94:	462a      	mov	r2, r5
   10a96:	17eb      	asrs	r3, r5, #31
   10a98:	4620      	mov	r0, r4
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   10a9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    rc = cbor_encode_int(&cb->encoder, errcode);
   10a9e:	f005 bac3 	b.w	16028 <cbor_encode_int>
}
   10aa2:	bd70      	pop	{r4, r5, r6, pc}
   10aa4:	00022490 	.word	0x00022490

00010aa8 <nmgr_rsp_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing response fragment.
 */
static struct os_mbuf *
nmgr_rsp_frag_alloc(uint16_t frag_size, void *arg)
{
   10aa8:	b538      	push	{r3, r4, r5, lr}
   10aaa:	460d      	mov	r5, r1
    /* We need to duplicate the user header from the source response, as that
     * is where transport-specific information is stored.
     */
    src_rsp = arg;

    frag = os_msys_get_pkthdr(frag_size, OS_MBUF_USRHDR_LEN(src_rsp));
   10aac:	7949      	ldrb	r1, [r1, #5]
   10aae:	3908      	subs	r1, #8
   10ab0:	b289      	uxth	r1, r1
   10ab2:	f7f8 fe91 	bl	97d8 <os_msys_get_pkthdr>
    if (frag != NULL) {
   10ab6:	4604      	mov	r4, r0
   10ab8:	b130      	cbz	r0, 10ac8 <nmgr_rsp_frag_alloc+0x20>
        /* Copy the user header from the response into the fragment mbuf. */
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
               OS_MBUF_USRHDR_LEN(src_rsp));
   10aba:	796a      	ldrb	r2, [r5, #5]
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
   10abc:	f105 0118 	add.w	r1, r5, #24
   10ac0:	3a08      	subs	r2, #8
   10ac2:	3018      	adds	r0, #24
   10ac4:	f7fe fd8e 	bl	f5e4 <memcpy>
    }

    return frag;
}
   10ac8:	4620      	mov	r0, r4
   10aca:	bd38      	pop	{r3, r4, r5, pc}

00010acc <nmgr_init_rsp>:
{
   10acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ace:	460d      	mov	r5, r1
    hdr = (struct nmgr_hdr *) os_mbuf_extend(m, sizeof(struct nmgr_hdr));
   10ad0:	2108      	movs	r1, #8
{
   10ad2:	4606      	mov	r6, r0
    hdr = (struct nmgr_hdr *) os_mbuf_extend(m, sizeof(struct nmgr_hdr));
   10ad4:	f7f9 fdc8 	bl	a668 <os_mbuf_extend>
    if (!hdr) {
   10ad8:	4604      	mov	r4, r0
   10ada:	b320      	cbz	r0, 10b26 <nmgr_init_rsp+0x5a>
    memcpy(hdr, src, sizeof(*hdr));
   10adc:	682b      	ldr	r3, [r5, #0]
   10ade:	6003      	str	r3, [r0, #0]
   10ae0:	686b      	ldr	r3, [r5, #4]
   10ae2:	6043      	str	r3, [r0, #4]
    hdr->nh_len = 0;
   10ae4:	2700      	movs	r7, #0
    hdr->nh_flags = 0;
   10ae6:	7047      	strb	r7, [r0, #1]
    hdr->nh_len = 0;
   10ae8:	8047      	strh	r7, [r0, #2]
    hdr->nh_op = (src->nh_op == NMGR_OP_READ) ? NMGR_OP_READ_RSP :
   10aea:	782b      	ldrb	r3, [r5, #0]
   10aec:	f013 0f07 	tst.w	r3, #7
   10af0:	7803      	ldrb	r3, [r0, #0]
   10af2:	bf0c      	ite	eq
   10af4:	2201      	moveq	r2, #1
   10af6:	2203      	movne	r2, #3
   10af8:	f362 0302 	bfi	r3, r2, #0, #3
   10afc:	7003      	strb	r3, [r0, #0]
    hdr->nh_group = src->nh_group;
   10afe:	88ab      	ldrh	r3, [r5, #4]
   10b00:	8083      	strh	r3, [r0, #4]
    hdr->nh_seq = src->nh_seq;
   10b02:	79ab      	ldrb	r3, [r5, #6]
   10b04:	7183      	strb	r3, [r0, #6]
    hdr->nh_id = src->nh_id;
   10b06:	79eb      	ldrb	r3, [r5, #7]
    cbor_mbuf_writer_init(&nmgr_task_cbuf.writer, m);
   10b08:	4d08      	ldr	r5, [pc, #32]	; (10b2c <nmgr_init_rsp+0x60>)
    hdr->nh_id = src->nh_id;
   10b0a:	71c3      	strb	r3, [r0, #7]
    cbor_mbuf_writer_init(&nmgr_task_cbuf.writer, m);
   10b0c:	4631      	mov	r1, r6
   10b0e:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   10b12:	f005 fa17 	bl	15f44 <cbor_mbuf_writer_init>
    cbor_encoder_init(&nmgr_task_cbuf.n_b.encoder, &nmgr_task_cbuf.writer.enc, 0);
   10b16:	463a      	mov	r2, r7
   10b18:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   10b1c:	f105 000c 	add.w	r0, r5, #12
   10b20:	f005 fa75 	bl	1600e <cbor_encoder_init>
    nmgr_task_cbuf.n_out_m = m;
   10b24:	65ee      	str	r6, [r5, #92]	; 0x5c
}
   10b26:	4620      	mov	r0, r4
   10b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b2a:	bf00      	nop
   10b2c:	20003d04 	.word	0x20003d04

00010b30 <nmgr_event_data_in>:
    }
}

static void
nmgr_event_data_in(struct os_event *ev)
{
   10b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &map,
   10b34:	4e69      	ldr	r6, [pc, #420]	; (10cdc <nmgr_event_data_in+0x1ac>)
    nmgr_process(ev->ev_arg);
   10b36:	6887      	ldr	r7, [r0, #8]
{
   10b38:	b08c      	sub	sp, #48	; 0x30
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &map,
   10b3a:	f106 090c 	add.w	r9, r6, #12
        m = os_mqueue_get(&nt->nt_imq);
   10b3e:	4638      	mov	r0, r7
   10b40:	f7f9 fbe7 	bl	a312 <os_mqueue_get>
        if (!m) {
   10b44:	4605      	mov	r5, r0
   10b46:	2800      	cmp	r0, #0
   10b48:	f000 80c5 	beq.w	10cd6 <nmgr_event_data_in+0x1a6>
    rsp = os_msys_get_pkthdr(512, OS_MBUF_USRHDR_LEN(req));
   10b4c:	7941      	ldrb	r1, [r0, #5]
   10b4e:	3908      	subs	r1, #8
   10b50:	b289      	uxth	r1, r1
   10b52:	f44f 7000 	mov.w	r0, #512	; 0x200
   10b56:	f7f8 fe3f 	bl	97d8 <os_msys_get_pkthdr>
   10b5a:	4680      	mov	r8, r0
   10b5c:	9001      	str	r0, [sp, #4]
    if (!rsp) {
   10b5e:	b9d8      	cbnz	r0, 10b98 <nmgr_event_data_in+0x68>
        rc = os_mbuf_copydata(req, 0, sizeof(hdr), &hdr);
   10b60:	4601      	mov	r1, r0
   10b62:	ab02      	add	r3, sp, #8
   10b64:	2208      	movs	r2, #8
   10b66:	4628      	mov	r0, r5
   10b68:	f7f9 fc9f 	bl	a4aa <os_mbuf_copydata>
        if (rc < 0) {
   10b6c:	1e04      	subs	r4, r0, #0
   10b6e:	f2c0 80b0 	blt.w	10cd2 <nmgr_event_data_in+0x1a2>
        rsp = req;
   10b72:	9501      	str	r5, [sp, #4]
        req = NULL;
   10b74:	4645      	mov	r5, r8
    os_mbuf_adj(rsp, OS_MBUF_PKTLEN(rsp));
   10b76:	9801      	ldr	r0, [sp, #4]
   10b78:	8a01      	ldrh	r1, [r0, #16]
   10b7a:	f7f9 fcbc 	bl	a4f6 <os_mbuf_adj>
    nmgr_send_err_rsp(nt, rsp, &hdr, rc);
   10b7e:	f8dd a004 	ldr.w	sl, [sp, #4]
    hdr = nmgr_init_rsp(m, hdr);
   10b82:	a902      	add	r1, sp, #8
   10b84:	4650      	mov	r0, sl
   10b86:	f7ff ffa1 	bl	10acc <nmgr_init_rsp>
    if (!hdr) {
   10b8a:	4680      	mov	r8, r0
   10b8c:	2800      	cmp	r0, #0
   10b8e:	d17d      	bne.n	10c8c <nmgr_event_data_in+0x15c>
        os_mbuf_free_chain(m);
   10b90:	4650      	mov	r0, sl
    os_mbuf_free_chain(rsp);
   10b92:	f7f9 fc22 	bl	a3da <os_mbuf_free_chain>
   10b96:	e093      	b.n	10cc0 <nmgr_event_data_in+0x190>
    mtu = nt->nt_get_mtu(req);
   10b98:	69fb      	ldr	r3, [r7, #28]
   10b9a:	4628      	mov	r0, r5
   10b9c:	4798      	blx	r3
    if (mtu == 0) {
   10b9e:	4682      	mov	sl, r0
   10ba0:	2800      	cmp	r0, #0
   10ba2:	f000 8096 	beq.w	10cd2 <nmgr_event_data_in+0x1a2>
    memcpy(OS_MBUF_USRHDR(rsp), OS_MBUF_USRHDR(req), OS_MBUF_USRHDR_LEN(req));
   10ba6:	796a      	ldrb	r2, [r5, #5]
   10ba8:	9801      	ldr	r0, [sp, #4]
   10baa:	3a08      	subs	r2, #8
   10bac:	f105 0118 	add.w	r1, r5, #24
   10bb0:	3018      	adds	r0, #24
   10bb2:	f7fe fd17 	bl	f5e4 <memcpy>
    rc = os_mbuf_copydata(req, 0, sizeof(hdr), &hdr);
   10bb6:	ab02      	add	r3, sp, #8
   10bb8:	2208      	movs	r2, #8
   10bba:	2100      	movs	r1, #0
   10bbc:	4628      	mov	r0, r5
   10bbe:	f7f9 fc74 	bl	a4aa <os_mbuf_copydata>
    if (rc < 0) {
   10bc2:	2800      	cmp	r0, #0
   10bc4:	f2c0 8085 	blt.w	10cd2 <nmgr_event_data_in+0x1a2>
    handler = mgmt_find_handler(ntohs(hdr.nh_group), hdr.nh_id);
   10bc8:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    hdr.nh_len = ntohs(hdr.nh_len);
   10bcc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    handler = mgmt_find_handler(ntohs(hdr.nh_group), hdr.nh_id);
   10bd0:	f89d 100f 	ldrb.w	r1, [sp, #15]
   10bd4:	ba40      	rev16	r0, r0
    hdr.nh_len = ntohs(hdr.nh_len);
   10bd6:	ba5b      	rev16	r3, r3
    handler = mgmt_find_handler(ntohs(hdr.nh_group), hdr.nh_id);
   10bd8:	b280      	uxth	r0, r0
    hdr.nh_len = ntohs(hdr.nh_len);
   10bda:	f8ad 300a 	strh.w	r3, [sp, #10]
    handler = mgmt_find_handler(ntohs(hdr.nh_group), hdr.nh_id);
   10bde:	f7ff ff2f 	bl	10a40 <mgmt_find_handler>
    if (!handler) {
   10be2:	4604      	mov	r4, r0
   10be4:	2800      	cmp	r0, #0
   10be6:	d04d      	beq.n	10c84 <nmgr_event_data_in+0x154>
    rsp_hdr = nmgr_init_rsp(rsp, &hdr);
   10be8:	9801      	ldr	r0, [sp, #4]
   10bea:	a902      	add	r1, sp, #8
   10bec:	f7ff ff6e 	bl	10acc <nmgr_init_rsp>
    if (!rsp_hdr) {
   10bf0:	4680      	mov	r8, r0
   10bf2:	2800      	cmp	r0, #0
   10bf4:	d06d      	beq.n	10cd2 <nmgr_event_data_in+0x1a2>
    cbor_mbuf_reader_init(&nmgr_task_cbuf.reader, req, sizeof(hdr));
   10bf6:	483a      	ldr	r0, [pc, #232]	; (10ce0 <nmgr_event_data_in+0x1b0>)
   10bf8:	2208      	movs	r2, #8
   10bfa:	4629      	mov	r1, r5
   10bfc:	f005 f96a 	bl	15ed4 <cbor_mbuf_reader_init>
    cbor_parser_init(&nmgr_task_cbuf.reader.r, 0,
   10c00:	4b38      	ldr	r3, [pc, #224]	; (10ce4 <nmgr_event_data_in+0x1b4>)
   10c02:	2100      	movs	r1, #0
   10c04:	f1a3 021c 	sub.w	r2, r3, #28
   10c08:	f103 001c 	add.w	r0, r3, #28
   10c0c:	f005 fc6d 	bl	164ea <cbor_parser_init>
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &payload_enc,
   10c10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10c14:	a904      	add	r1, sp, #16
   10c16:	4648      	mov	r0, r9
   10c18:	f005 fa4c 	bl	160b4 <cbor_encoder_create_map>
    if (rc != 0) {
   10c1c:	2800      	cmp	r0, #0
   10c1e:	d133      	bne.n	10c88 <nmgr_event_data_in+0x158>
    if (hdr.nh_op == NMGR_OP_READ) {
   10c20:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10c24:	f013 0307 	ands.w	r3, r3, #7
   10c28:	d118      	bne.n	10c5c <nmgr_event_data_in+0x12c>
        if (handler->mh_read) {
   10c2a:	6823      	ldr	r3, [r4, #0]
        if (handler->mh_write) {
   10c2c:	b353      	cbz	r3, 10c84 <nmgr_event_data_in+0x154>
            rc = handler->mh_write(&nmgr_task_cbuf.n_b);
   10c2e:	4630      	mov	r0, r6
   10c30:	4798      	blx	r3
   10c32:	4604      	mov	r4, r0
    if (rc != 0) {
   10c34:	2800      	cmp	r0, #0
   10c36:	d19e      	bne.n	10b76 <nmgr_event_data_in+0x46>
    rc = cbor_encoder_close_container(&nmgr_task_cbuf.n_b.encoder,
   10c38:	a904      	add	r1, sp, #16
   10c3a:	4648      	mov	r0, r9
   10c3c:	f005 fa4b 	bl	160d6 <cbor_encoder_close_container>
    if (rc != 0) {
   10c40:	bb10      	cbnz	r0, 10c88 <nmgr_event_data_in+0x158>
{   return encoder->writer->bytes_written; }
   10c42:	68f3      	ldr	r3, [r6, #12]
    rsp_hdr->nh_len += cbor_encode_bytes_written(&nmgr_task_cbuf.n_b.encoder);
   10c44:	f8b8 2002 	ldrh.w	r2, [r8, #2]
   10c48:	685b      	ldr	r3, [r3, #4]
        frag = mem_split_frag(rsp, mtu, nmgr_rsp_frag_alloc, *rsp);
   10c4a:	4c27      	ldr	r4, [pc, #156]	; (10ce8 <nmgr_event_data_in+0x1b8>)
    rsp_hdr->nh_len += cbor_encode_bytes_written(&nmgr_task_cbuf.n_b.encoder);
   10c4c:	4413      	add	r3, r2
    rsp_hdr->nh_len = htons(rsp_hdr->nh_len);
   10c4e:	ba5b      	rev16	r3, r3
   10c50:	f8a8 3002 	strh.w	r3, [r8, #2]
    while (*rsp != NULL) {
   10c54:	9b01      	ldr	r3, [sp, #4]
   10c56:	b92b      	cbnz	r3, 10c64 <nmgr_event_data_in+0x134>
    os_mbuf_free_chain(rsp);
   10c58:	4618      	mov	r0, r3
   10c5a:	e79a      	b.n	10b92 <nmgr_event_data_in+0x62>
    } else if (hdr.nh_op == NMGR_OP_WRITE) {
   10c5c:	2b02      	cmp	r3, #2
   10c5e:	d10f      	bne.n	10c80 <nmgr_event_data_in+0x150>
        if (handler->mh_write) {
   10c60:	6863      	ldr	r3, [r4, #4]
   10c62:	e7e3      	b.n	10c2c <nmgr_event_data_in+0xfc>
        frag = mem_split_frag(rsp, mtu, nmgr_rsp_frag_alloc, *rsp);
   10c64:	4651      	mov	r1, sl
   10c66:	4622      	mov	r2, r4
   10c68:	a801      	add	r0, sp, #4
   10c6a:	f000 fb3d 	bl	112e8 <mem_split_frag>
        if (frag == NULL) {
   10c6e:	4601      	mov	r1, r0
   10c70:	b350      	cbz	r0, 10cc8 <nmgr_event_data_in+0x198>
        rc = nt->nt_output(nt, frag);
   10c72:	69bb      	ldr	r3, [r7, #24]
   10c74:	4638      	mov	r0, r7
   10c76:	4798      	blx	r3
        if (rc != 0) {
   10c78:	2800      	cmp	r0, #0
   10c7a:	d0eb      	beq.n	10c54 <nmgr_event_data_in+0x124>
            return MGMT_ERR_EUNKNOWN;
   10c7c:	2401      	movs	r4, #1
   10c7e:	e024      	b.n	10cca <nmgr_event_data_in+0x19a>
        rc = MGMT_ERR_EINVAL;
   10c80:	2403      	movs	r4, #3
   10c82:	e778      	b.n	10b76 <nmgr_event_data_in+0x46>
            rc = MGMT_ERR_ENOENT;
   10c84:	2405      	movs	r4, #5
   10c86:	e776      	b.n	10b76 <nmgr_event_data_in+0x46>
        rc = MGMT_ERR_ENOMEM;
   10c88:	2402      	movs	r4, #2
   10c8a:	e774      	b.n	10b76 <nmgr_event_data_in+0x46>
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &map,
   10c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10c90:	a908      	add	r1, sp, #32
   10c92:	4648      	mov	r0, r9
   10c94:	f005 fa0e 	bl	160b4 <cbor_encoder_create_map>
    if (rc != 0) {
   10c98:	b990      	cbnz	r0, 10cc0 <nmgr_event_data_in+0x190>
    rc = mgmt_cbuf_setoerr(&nmgr_task_cbuf.n_b, status);
   10c9a:	4621      	mov	r1, r4
   10c9c:	4630      	mov	r0, r6
   10c9e:	f7ff feef 	bl	10a80 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   10ca2:	b968      	cbnz	r0, 10cc0 <nmgr_event_data_in+0x190>
    rc = cbor_encoder_close_container(&nmgr_task_cbuf.n_b.encoder, &map);
   10ca4:	a908      	add	r1, sp, #32
   10ca6:	4648      	mov	r0, r9
   10ca8:	f005 fa15 	bl	160d6 <cbor_encoder_close_container>
    if (rc != 0) {
   10cac:	b940      	cbnz	r0, 10cc0 <nmgr_event_data_in+0x190>
    hdr->nh_len =
   10cae:	68f3      	ldr	r3, [r6, #12]
    nt->nt_output(nt, nmgr_task_cbuf.n_out_m);
   10cb0:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    hdr->nh_len =
   10cb2:	889b      	ldrh	r3, [r3, #4]
   10cb4:	ba5b      	rev16	r3, r3
   10cb6:	f8a8 3002 	strh.w	r3, [r8, #2]
    nt->nt_output(nt, nmgr_task_cbuf.n_out_m);
   10cba:	4638      	mov	r0, r7
   10cbc:	69bb      	ldr	r3, [r7, #24]
   10cbe:	4798      	blx	r3
    os_mbuf_free_chain(req);
   10cc0:	4628      	mov	r0, r5
   10cc2:	f7f9 fb8a 	bl	a3da <os_mbuf_free_chain>
    return;
   10cc6:	e73a      	b.n	10b3e <nmgr_event_data_in+0xe>
            return MGMT_ERR_ENOMEM;
   10cc8:	2402      	movs	r4, #2
        if (rsp == NULL) {
   10cca:	9b01      	ldr	r3, [sp, #4]
   10ccc:	2b00      	cmp	r3, #0
   10cce:	f47f af52 	bne.w	10b76 <nmgr_event_data_in+0x46>
    os_mbuf_free_chain(rsp);
   10cd2:	9801      	ldr	r0, [sp, #4]
   10cd4:	e75d      	b.n	10b92 <nmgr_event_data_in+0x62>
}
   10cd6:	b00c      	add	sp, #48	; 0x30
   10cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10cdc:	20003d04 	.word	0x20003d04
   10ce0:	20003d3c 	.word	0x20003d3c
   10ce4:	20003d20 	.word	0x20003d20
   10ce8:	00010aa9 	.word	0x00010aa9

00010cec <mgmt_evq_get>:
}
   10cec:	4b01      	ldr	r3, [pc, #4]	; (10cf4 <mgmt_evq_get+0x8>)
   10cee:	6818      	ldr	r0, [r3, #0]
   10cf0:	4770      	bx	lr
   10cf2:	bf00      	nop
   10cf4:	20003d00 	.word	0x20003d00

00010cf8 <nmgr_transport_init>:
        nmgr_transport_get_mtu_func_t get_mtu_func)
{
    int rc;

    nt->nt_output = output_func;
    nt->nt_get_mtu = get_mtu_func;
   10cf8:	e9c0 1206 	strd	r1, r2, [r0, #24]

    rc = os_mqueue_init(&nt->nt_imq, nmgr_event_data_in, nt);
   10cfc:	4901      	ldr	r1, [pc, #4]	; (10d04 <nmgr_transport_init+0xc>)
   10cfe:	4602      	mov	r2, r0
   10d00:	f7f9 baf7 	b.w	a2f2 <os_mqueue_init>
   10d04:	00010b31 	.word	0x00010b31

00010d08 <nmgr_rx_req>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
nmgr_rx_req(struct nmgr_transport *nt, struct os_mbuf *req)
{
   10d08:	b538      	push	{r3, r4, r5, lr}
    int rc;

    rc = os_mqueue_put(&nt->nt_imq, mgmt_evq_get(), req);
   10d0a:	4b06      	ldr	r3, [pc, #24]	; (10d24 <nmgr_rx_req+0x1c>)
   10d0c:	460a      	mov	r2, r1
{
   10d0e:	460d      	mov	r5, r1
    rc = os_mqueue_put(&nt->nt_imq, mgmt_evq_get(), req);
   10d10:	6819      	ldr	r1, [r3, #0]
   10d12:	f7f9 fb0e 	bl	a332 <os_mqueue_put>
    if (rc != 0) {
   10d16:	4604      	mov	r4, r0
   10d18:	b110      	cbz	r0, 10d20 <nmgr_rx_req+0x18>
        os_mbuf_free_chain(req);
   10d1a:	4628      	mov	r0, r5
   10d1c:	f7f9 fb5d 	bl	a3da <os_mbuf_free_chain>
    }

    return rc;
}
   10d20:	4620      	mov	r0, r4
   10d22:	bd38      	pop	{r3, r4, r5, pc}
   10d24:	20003d00 	.word	0x20003d00

00010d28 <nmgr_pkg_init>:

void
nmgr_pkg_init(void)
{
   10d28:	b513      	push	{r0, r1, r4, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   10d2a:	4b0f      	ldr	r3, [pc, #60]	; (10d68 <nmgr_pkg_init+0x40>)
   10d2c:	781b      	ldrb	r3, [r3, #0]
   10d2e:	b923      	cbnz	r3, 10d3a <nmgr_pkg_init+0x12>
   10d30:	461a      	mov	r2, r3
   10d32:	4619      	mov	r1, r3
   10d34:	4618      	mov	r0, r3
   10d36:	f7f8 f8dd 	bl	8ef4 <__assert_func>

    rc = nmgr_os_groups_register();
   10d3a:	f000 fa7d 	bl	11238 <nmgr_os_groups_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   10d3e:	b138      	cbz	r0, 10d50 <nmgr_pkg_init+0x28>
   10d40:	2300      	movs	r3, #0
   10d42:	4a0a      	ldr	r2, [pc, #40]	; (10d6c <nmgr_pkg_init+0x44>)
   10d44:	9300      	str	r3, [sp, #0]
   10d46:	6814      	ldr	r4, [r2, #0]
   10d48:	4619      	mov	r1, r3
   10d4a:	461a      	mov	r2, r3
   10d4c:	4618      	mov	r0, r3
   10d4e:	47a0      	blx	r4
    memset(njb, 0, sizeof(*njb));
   10d50:	2260      	movs	r2, #96	; 0x60
   10d52:	2100      	movs	r1, #0
   10d54:	4806      	ldr	r0, [pc, #24]	; (10d70 <nmgr_pkg_init+0x48>)
   10d56:	f7fe fc52 	bl	f5fe <memset>

    nmgr_cbuf_init(&nmgr_task_cbuf);

    mgmt_evq_set(os_eventq_dflt_get());
   10d5a:	f7f8 fc5f 	bl	961c <os_eventq_dflt_get>
    nmgr_evq = evq;
   10d5e:	4b05      	ldr	r3, [pc, #20]	; (10d74 <nmgr_pkg_init+0x4c>)
   10d60:	6018      	str	r0, [r3, #0]
}
   10d62:	b002      	add	sp, #8
   10d64:	bd10      	pop	{r4, pc}
   10d66:	bf00      	nop
   10d68:	20004ba8 	.word	0x20004ba8
   10d6c:	20000768 	.word	0x20000768
   10d70:	20003d04 	.word	0x20003d04
   10d74:	20003d00 	.word	0x20003d00

00010d78 <nmgr_reset>:
    os_reboot(HAL_RESET_REQUESTED);
}

static int
nmgr_reset(struct mgmt_cbuf *cb)
{
   10d78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10d7a:	4605      	mov	r5, r0
#if MYNEWT_VAL(LOG_SOFT_RESET)
    struct log_reboot_info info;
#endif
    int rc;

    os_callout_init(&nmgr_reset_callout, mgmt_evq_get(), nmgr_reset_tmo, NULL);
   10d7c:	f7ff ffb6 	bl	10cec <mgmt_evq_get>
   10d80:	4e0e      	ldr	r6, [pc, #56]	; (10dbc <nmgr_reset+0x44>)
   10d82:	4a0f      	ldr	r2, [pc, #60]	; (10dc0 <nmgr_reset+0x48>)
   10d84:	4601      	mov	r1, r0
   10d86:	2300      	movs	r3, #0
   10d88:	4630      	mov	r0, r6
   10d8a:	f7f8 fa1f 	bl	91cc <os_callout_init>

#if MYNEWT_VAL(LOG_SOFT_RESET)
    info = (struct log_reboot_info) {
   10d8e:	2400      	movs	r4, #0
   10d90:	2306      	movs	r3, #6
        .reason = HAL_RESET_REQUESTED,
        .file = NULL,
        .line = 0,
        .pc = 0,
    };
    log_reboot(&info);
   10d92:	4668      	mov	r0, sp
    info = (struct log_reboot_info) {
   10d94:	f88d 3000 	strb.w	r3, [sp]
   10d98:	e9cd 4401 	strd	r4, r4, [sp, #4]
   10d9c:	9403      	str	r4, [sp, #12]
    log_reboot(&info);
   10d9e:	f002 f9b1 	bl	13104 <log_reboot>
#endif
    os_callout_reset(&nmgr_reset_callout, OS_TICKS_PER_SEC / 4);
   10da2:	2120      	movs	r1, #32
   10da4:	4630      	mov	r0, r6
   10da6:	f7f8 fa3d 	bl	9224 <os_callout_reset>

    rc = mgmt_cbuf_setoerr(cb, 0);
   10daa:	4621      	mov	r1, r4
   10dac:	4628      	mov	r0, r5
   10dae:	f7ff fe67 	bl	10a80 <mgmt_cbuf_setoerr>
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   10db2:	1b00      	subs	r0, r0, r4
   10db4:	bf18      	it	ne
   10db6:	2001      	movne	r0, #1
   10db8:	b004      	add	sp, #16
   10dba:	bd70      	pop	{r4, r5, r6, pc}
   10dbc:	20003d64 	.word	0x20003d64
   10dc0:	00010dc5 	.word	0x00010dc5

00010dc4 <nmgr_reset_tmo>:
    os_reboot(HAL_RESET_REQUESTED);
   10dc4:	2006      	movs	r0, #6
   10dc6:	f7f8 b9e2 	b.w	918e <os_reboot>
	...

00010dcc <nmgr_datetime_set>:
{
   10dcc:	b530      	push	{r4, r5, lr}
   10dce:	b0a9      	sub	sp, #164	; 0xa4
   10dd0:	4604      	mov	r4, r0
    const struct cbor_attr_t datetime_write_attr[] = {
   10dd2:	2100      	movs	r1, #0
   10dd4:	225c      	movs	r2, #92	; 0x5c
   10dd6:	a811      	add	r0, sp, #68	; 0x44
   10dd8:	f7fe fc11 	bl	f5fe <memset>
   10ddc:	4b11      	ldr	r3, [pc, #68]	; (10e24 <nmgr_datetime_set+0x58>)
   10dde:	9310      	str	r3, [sp, #64]	; 0x40
   10de0:	2304      	movs	r3, #4
   10de2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   10de6:	ad07      	add	r5, sp, #28
   10de8:	2321      	movs	r3, #33	; 0x21
    rc = cbor_read_object(&cb->it, datetime_write_attr);
   10dea:	a910      	add	r1, sp, #64	; 0x40
   10dec:	f104 001c 	add.w	r0, r4, #28
    const struct cbor_attr_t datetime_write_attr[] = {
   10df0:	9512      	str	r5, [sp, #72]	; 0x48
   10df2:	931a      	str	r3, [sp, #104]	; 0x68
    rc = cbor_read_object(&cb->it, datetime_write_attr);
   10df4:	f005 f81b 	bl	15e2e <cbor_read_object>
    if (rc) {
   10df8:	b110      	cbz	r0, 10e00 <nmgr_datetime_set+0x34>
        return MGMT_ERR_EINVAL;
   10dfa:	2003      	movs	r0, #3
}
   10dfc:	b029      	add	sp, #164	; 0xa4
   10dfe:	bd30      	pop	{r4, r5, pc}
    rc = datetime_parse(buf, &tv, &tz);
   10e00:	aa01      	add	r2, sp, #4
   10e02:	a902      	add	r1, sp, #8
   10e04:	4628      	mov	r0, r5
   10e06:	f004 f931 	bl	1506c <datetime_parse>
    if (!rc) {
   10e0a:	2800      	cmp	r0, #0
   10e0c:	d1f5      	bne.n	10dfa <nmgr_datetime_set+0x2e>
        rc = os_settimeofday(&tv, &tz);
   10e0e:	a901      	add	r1, sp, #4
   10e10:	a802      	add	r0, sp, #8
   10e12:	f7f9 f903 	bl	a01c <os_settimeofday>
        if (rc) {
   10e16:	4601      	mov	r1, r0
   10e18:	2800      	cmp	r0, #0
   10e1a:	d1ee      	bne.n	10dfa <nmgr_datetime_set+0x2e>
    rc = mgmt_cbuf_setoerr(cb, 0);
   10e1c:	4620      	mov	r0, r4
   10e1e:	f7ff fe2f 	bl	10a80 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   10e22:	e7eb      	b.n	10dfc <nmgr_datetime_set+0x30>
   10e24:	000226b2 	.word	0x000226b2

00010e28 <cbor_encode_text_stringz>:
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   10e28:	b513      	push	{r0, r1, r4, lr}
   10e2a:	4604      	mov	r4, r0
   10e2c:	4608      	mov	r0, r1
   10e2e:	9101      	str	r1, [sp, #4]
   10e30:	f7fe fc15 	bl	f65e <strlen>
   10e34:	9901      	ldr	r1, [sp, #4]
   10e36:	4602      	mov	r2, r0
   10e38:	4620      	mov	r0, r4
   10e3a:	b002      	add	sp, #8
   10e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10e40:	f005 b923 	b.w	1608a <cbor_encode_text_string>

00010e44 <nmgr_datetime_get>:
{
   10e44:	b5f0      	push	{r4, r5, r6, r7, lr}
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   10e46:	f100 060c 	add.w	r6, r0, #12
{
   10e4a:	b091      	sub	sp, #68	; 0x44
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   10e4c:	4919      	ldr	r1, [pc, #100]	; (10eb4 <nmgr_datetime_get+0x70>)
   10e4e:	4630      	mov	r0, r6
   10e50:	f7ff ffea 	bl	10e28 <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   10e54:	2200      	movs	r2, #0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   10e56:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   10e58:	2300      	movs	r3, #0
   10e5a:	4630      	mov	r0, r6
   10e5c:	f005 f8e4 	bl	16028 <cbor_encode_int>
    rc = os_gettimeofday(&tv, &tz);
   10e60:	a901      	add	r1, sp, #4
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   10e62:	4607      	mov	r7, r0
    rc = os_gettimeofday(&tv, &tz);
   10e64:	a802      	add	r0, sp, #8
   10e66:	f7f9 f8af 	bl	9fc8 <os_gettimeofday>
    assert(rc == 0);
   10e6a:	b128      	cbz	r0, 10e78 <nmgr_datetime_get+0x34>
   10e6c:	2300      	movs	r3, #0
   10e6e:	461a      	mov	r2, r3
   10e70:	4619      	mov	r1, r3
   10e72:	4618      	mov	r0, r3
   10e74:	f7f8 f83e 	bl	8ef4 <__assert_func>
    rc = datetime_format(&tv, &tz, buf, DATETIME_BUFSIZE);
   10e78:	2321      	movs	r3, #33	; 0x21
   10e7a:	aa07      	add	r2, sp, #28
   10e7c:	a901      	add	r1, sp, #4
   10e7e:	a802      	add	r0, sp, #8
   10e80:	f004 f9a6 	bl	151d0 <datetime_format>
    if (rc) {
   10e84:	4604      	mov	r4, r0
   10e86:	b990      	cbnz	r0, 10eae <nmgr_datetime_get+0x6a>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "datetime");
   10e88:	490b      	ldr	r1, [pc, #44]	; (10eb8 <nmgr_datetime_get+0x74>)
   10e8a:	4630      	mov	r0, r6
   10e8c:	f7ff ffcc 	bl	10e28 <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   10e90:	ea45 0307 	orr.w	r3, r5, r7
    g_err |= cbor_encode_text_stringz(&cb->encoder, "datetime");
   10e94:	ea43 0500 	orr.w	r5, r3, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, buf);
   10e98:	a907      	add	r1, sp, #28
   10e9a:	4630      	mov	r0, r6
   10e9c:	f7ff ffc4 	bl	10e28 <cbor_encode_text_stringz>
        return MGMT_ERR_ENOMEM;
   10ea0:	ea55 0300 	orrs.w	r3, r5, r0
   10ea4:	bf18      	it	ne
   10ea6:	2402      	movne	r4, #2
}
   10ea8:	4620      	mov	r0, r4
   10eaa:	b011      	add	sp, #68	; 0x44
   10eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (rc);
   10eae:	2403      	movs	r4, #3
   10eb0:	e7fa      	b.n	10ea8 <nmgr_datetime_get+0x64>
   10eb2:	bf00      	nop
   10eb4:	00022490 	.word	0x00022490
   10eb8:	000226b2 	.word	0x000226b2

00010ebc <nmgr_def_echo>:
{
   10ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ebe:	b0b9      	sub	sp, #228	; 0xe4
   10ec0:	4605      	mov	r5, r0
    char echo_buf[128] = {'\0'};
   10ec2:	2100      	movs	r1, #0
   10ec4:	227c      	movs	r2, #124	; 0x7c
   10ec6:	a819      	add	r0, sp, #100	; 0x64
   10ec8:	9118      	str	r1, [sp, #96]	; 0x60
   10eca:	f7fe fb98 	bl	f5fe <memset>
    struct cbor_attr_t attrs[2] = {
   10ece:	225c      	movs	r2, #92	; 0x5c
   10ed0:	2100      	movs	r1, #0
   10ed2:	a801      	add	r0, sp, #4
   10ed4:	f7fe fb93 	bl	f5fe <memset>
   10ed8:	4b14      	ldr	r3, [pc, #80]	; (10f2c <nmgr_def_echo+0x70>)
   10eda:	9300      	str	r3, [sp, #0]
   10edc:	2304      	movs	r3, #4
    g_err |= cbor_encode_text_stringz(&cb->encoder, "r");
   10ede:	f105 070c 	add.w	r7, r5, #12
    struct cbor_attr_t attrs[2] = {
   10ee2:	f88d 3004 	strb.w	r3, [sp, #4]
   10ee6:	2380      	movs	r3, #128	; 0x80
   10ee8:	ae18      	add	r6, sp, #96	; 0x60
   10eea:	930a      	str	r3, [sp, #40]	; 0x28
    g_err |= cbor_encode_text_stringz(&cb->encoder, "r");
   10eec:	4910      	ldr	r1, [pc, #64]	; (10f30 <nmgr_def_echo+0x74>)
    struct cbor_attr_t attrs[2] = {
   10eee:	9602      	str	r6, [sp, #8]
   10ef0:	2301      	movs	r3, #1
    g_err |= cbor_encode_text_stringz(&cb->encoder, "r");
   10ef2:	4638      	mov	r0, r7
    struct cbor_attr_t attrs[2] = {
   10ef4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    g_err |= cbor_encode_text_stringz(&cb->encoder, "r");
   10ef8:	f7ff ff96 	bl	10e28 <cbor_encode_text_stringz>
    g_err |= cbor_read_object(&cb->it, attrs);
   10efc:	4669      	mov	r1, sp
    g_err |= cbor_encode_text_stringz(&cb->encoder, "r");
   10efe:	4604      	mov	r4, r0
    g_err |= cbor_read_object(&cb->it, attrs);
   10f00:	f105 001c 	add.w	r0, r5, #28
   10f04:	f004 ff93 	bl	15e2e <cbor_read_object>
   10f08:	4605      	mov	r5, r0
    g_err |= cbor_encode_text_string(&cb->encoder, echo_buf, strlen(echo_buf));
   10f0a:	4630      	mov	r0, r6
   10f0c:	f7fe fba7 	bl	f65e <strlen>
   10f10:	4631      	mov	r1, r6
   10f12:	4602      	mov	r2, r0
   10f14:	4638      	mov	r0, r7
   10f16:	f005 f8b8 	bl	1608a <cbor_encode_text_string>
   10f1a:	4304      	orrs	r4, r0
        return MGMT_ERR_ENOMEM;
   10f1c:	ea54 0305 	orrs.w	r3, r4, r5
}
   10f20:	bf14      	ite	ne
   10f22:	2002      	movne	r0, #2
   10f24:	2000      	moveq	r0, #0
   10f26:	b039      	add	sp, #228	; 0xe4
   10f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f2a:	bf00      	nop
   10f2c:	000228d4 	.word	0x000228d4
   10f30:	00023a1b 	.word	0x00023a1b

00010f34 <nmgr_def_mpstat_read>:
{
   10f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   10f38:	f100 070c 	add.w	r7, r0, #12
{
   10f3c:	b095      	sub	sp, #84	; 0x54
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   10f3e:	493a      	ldr	r1, [pc, #232]	; (11028 <nmgr_def_mpstat_read+0xf4>)
        g_err |= cbor_encode_text_stringz(&pool, "blksiz");
   10f40:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 11034 <nmgr_def_mpstat_read+0x100>
        g_err |= cbor_encode_text_stringz(&pool, "nblks");
   10f44:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 11038 <nmgr_def_mpstat_read+0x104>
        g_err |= cbor_encode_text_stringz(&pool, "nfree");
   10f48:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 1103c <nmgr_def_mpstat_read+0x108>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   10f4c:	4638      	mov	r0, r7
   10f4e:	f7ff ff6b 	bl	10e28 <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   10f52:	2200      	movs	r2, #0
   10f54:	2300      	movs	r3, #0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   10f56:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   10f58:	4638      	mov	r0, r7
   10f5a:	f005 f865 	bl	16028 <cbor_encode_int>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "mpools");
   10f5e:	4933      	ldr	r1, [pc, #204]	; (1102c <nmgr_def_mpstat_read+0xf8>)
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   10f60:	4304      	orrs	r4, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "mpools");
   10f62:	4638      	mov	r0, r7
   10f64:	f7ff ff60 	bl	10e28 <cbor_encode_text_stringz>
    g_err |= cbor_encoder_create_map(&cb->encoder, &pools,
   10f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    g_err |= cbor_encode_text_stringz(&cb->encoder, "mpools");
   10f6c:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &pools,
   10f6e:	4669      	mov	r1, sp
   10f70:	4638      	mov	r0, r7
   10f72:	f005 f89f 	bl	160b4 <cbor_encoder_create_map>
    prev_mp = NULL;
   10f76:	f04f 0800 	mov.w	r8, #0
    g_err |= cbor_encoder_create_map(&cb->encoder, &pools,
   10f7a:	4304      	orrs	r4, r0
        prev_mp = os_mempool_info_get_next(prev_mp, &omi);
   10f7c:	4640      	mov	r0, r8
   10f7e:	a908      	add	r1, sp, #32
   10f80:	f7f8 fbce 	bl	9720 <os_mempool_info_get_next>
        if (prev_mp == NULL) {
   10f84:	4680      	mov	r8, r0
   10f86:	2800      	cmp	r0, #0
   10f88:	d041      	beq.n	1100e <nmgr_def_mpstat_read+0xda>
        g_err |= cbor_encode_text_stringz(&pools, omi.omi_name);
   10f8a:	a90c      	add	r1, sp, #48	; 0x30
   10f8c:	4668      	mov	r0, sp
   10f8e:	f7ff ff4b 	bl	10e28 <cbor_encode_text_stringz>
        g_err |= cbor_encoder_create_map(&pools, &pool, CborIndefiniteLength);
   10f92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
        g_err |= cbor_encode_text_stringz(&pools, omi.omi_name);
   10f96:	4605      	mov	r5, r0
        g_err |= cbor_encoder_create_map(&pools, &pool, CborIndefiniteLength);
   10f98:	a904      	add	r1, sp, #16
   10f9a:	4668      	mov	r0, sp
   10f9c:	f005 f88a 	bl	160b4 <cbor_encoder_create_map>
        g_err |= cbor_encode_text_stringz(&pool, "blksiz");
   10fa0:	4659      	mov	r1, fp
        g_err |= cbor_encoder_create_map(&pools, &pool, CborIndefiniteLength);
   10fa2:	4305      	orrs	r5, r0
        g_err |= cbor_encode_text_stringz(&pool, "blksiz");
   10fa4:	a804      	add	r0, sp, #16
   10fa6:	f7ff ff3f 	bl	10e28 <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&pool, omi.omi_block_size);
   10faa:	9a08      	ldr	r2, [sp, #32]
        g_err |= cbor_encoder_create_map(&pools, &pool, CborIndefiniteLength);
   10fac:	432c      	orrs	r4, r5
        g_err |= cbor_encode_uint(&pool, omi.omi_block_size);
   10fae:	17d3      	asrs	r3, r2, #31
        g_err |= cbor_encode_text_stringz(&pool, "blksiz");
   10fb0:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_block_size);
   10fb2:	a804      	add	r0, sp, #16
   10fb4:	f005 f830 	bl	16018 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&pool, "nblks");
   10fb8:	4651      	mov	r1, sl
        g_err |= cbor_encode_uint(&pool, omi.omi_block_size);
   10fba:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&pool, "nblks");
   10fbc:	a804      	add	r0, sp, #16
   10fbe:	f7ff ff33 	bl	10e28 <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&pool, omi.omi_num_blocks);
   10fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
        g_err |= cbor_encode_text_stringz(&pool, "nblks");
   10fc4:	ea44 0600 	orr.w	r6, r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_num_blocks);
   10fc8:	17d3      	asrs	r3, r2, #31
   10fca:	a804      	add	r0, sp, #16
   10fcc:	f005 f824 	bl	16018 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&pool, "nfree");
   10fd0:	4649      	mov	r1, r9
        g_err |= cbor_encode_uint(&pool, omi.omi_num_blocks);
   10fd2:	4306      	orrs	r6, r0
        g_err |= cbor_encode_text_stringz(&pool, "nfree");
   10fd4:	a804      	add	r0, sp, #16
   10fd6:	f7ff ff27 	bl	10e28 <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&pool, omi.omi_num_free);
   10fda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        g_err |= cbor_encode_text_stringz(&pool, "nfree");
   10fdc:	ea46 0500 	orr.w	r5, r6, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_num_free);
   10fe0:	17d3      	asrs	r3, r2, #31
   10fe2:	a804      	add	r0, sp, #16
   10fe4:	f005 f818 	bl	16018 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&pool, "min");
   10fe8:	4911      	ldr	r1, [pc, #68]	; (11030 <nmgr_def_mpstat_read+0xfc>)
        g_err |= cbor_encode_uint(&pool, omi.omi_num_free);
   10fea:	4305      	orrs	r5, r0
        g_err |= cbor_encode_text_stringz(&pool, "min");
   10fec:	a804      	add	r0, sp, #16
   10fee:	f7ff ff1b 	bl	10e28 <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&pool, omi.omi_min_free);
   10ff2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        g_err |= cbor_encode_text_stringz(&pool, "min");
   10ff4:	ea45 0400 	orr.w	r4, r5, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_min_free);
   10ff8:	17d3      	asrs	r3, r2, #31
   10ffa:	a804      	add	r0, sp, #16
   10ffc:	f005 f80c 	bl	16018 <cbor_encode_uint>
        g_err |= cbor_encoder_close_container(&pools, &pool);
   11000:	a904      	add	r1, sp, #16
        g_err |= cbor_encode_uint(&pool, omi.omi_min_free);
   11002:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_close_container(&pools, &pool);
   11004:	4668      	mov	r0, sp
   11006:	f005 f866 	bl	160d6 <cbor_encoder_close_container>
   1100a:	4304      	orrs	r4, r0
        prev_mp = os_mempool_info_get_next(prev_mp, &omi);
   1100c:	e7b6      	b.n	10f7c <nmgr_def_mpstat_read+0x48>
    g_err |= cbor_encoder_close_container(&cb->encoder, &pools);
   1100e:	4669      	mov	r1, sp
   11010:	4638      	mov	r0, r7
   11012:	f005 f860 	bl	160d6 <cbor_encoder_close_container>
        return MGMT_ERR_ENOMEM;
   11016:	ea54 0300 	orrs.w	r3, r4, r0
}
   1101a:	bf14      	ite	ne
   1101c:	2002      	movne	r0, #2
   1101e:	2000      	moveq	r0, #0
   11020:	b015      	add	sp, #84	; 0x54
   11022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11026:	bf00      	nop
   11028:	00022490 	.word	0x00022490
   1102c:	000226bb 	.word	0x000226bb
   11030:	000226d5 	.word	0x000226d5
   11034:	000226c2 	.word	0x000226c2
   11038:	000226c9 	.word	0x000226c9
   1103c:	000226cf 	.word	0x000226cf

00011040 <nmgr_def_taskstat_read>:
{
   11040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   11044:	f100 070c 	add.w	r7, r0, #12
{
   11048:	b097      	sub	sp, #92	; 0x5c
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1104a:	495b      	ldr	r1, [pc, #364]	; (111b8 <nmgr_def_taskstat_read+0x178>)
        g_err |= cbor_encode_text_stringz(&task, "prio");
   1104c:	f8df b188 	ldr.w	fp, [pc, #392]	; 111d8 <nmgr_def_taskstat_read+0x198>
        g_err |= cbor_encode_text_stringz(&task, "tid");
   11050:	f8df a188 	ldr.w	sl, [pc, #392]	; 111dc <nmgr_def_taskstat_read+0x19c>
        g_err |= cbor_encode_text_stringz(&task, "state");
   11054:	f8df 9188 	ldr.w	r9, [pc, #392]	; 111e0 <nmgr_def_taskstat_read+0x1a0>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   11058:	4638      	mov	r0, r7
   1105a:	f7ff fee5 	bl	10e28 <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1105e:	2200      	movs	r2, #0
   11060:	2300      	movs	r3, #0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   11062:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   11064:	4638      	mov	r0, r7
   11066:	f004 ffdf 	bl	16028 <cbor_encode_int>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "tasks");
   1106a:	4954      	ldr	r1, [pc, #336]	; (111bc <nmgr_def_taskstat_read+0x17c>)
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1106c:	4304      	orrs	r4, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "tasks");
   1106e:	4638      	mov	r0, r7
   11070:	f7ff feda 	bl	10e28 <cbor_encode_text_stringz>
    g_err |= cbor_encoder_create_map(&cb->encoder, &tasks,
   11074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    g_err |= cbor_encode_text_stringz(&cb->encoder, "tasks");
   11078:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &tasks,
   1107a:	4669      	mov	r1, sp
   1107c:	4638      	mov	r0, r7
   1107e:	f005 f819 	bl	160b4 <cbor_encoder_create_map>
    prev_task = NULL;
   11082:	f04f 0800 	mov.w	r8, #0
    g_err |= cbor_encoder_create_map(&cb->encoder, &tasks,
   11086:	4304      	orrs	r4, r0
        prev_task = os_task_info_get_next(prev_task, &oti);
   11088:	4640      	mov	r0, r8
   1108a:	a908      	add	r1, sp, #32
   1108c:	f7f8 feee 	bl	9e6c <os_task_info_get_next>
        if (prev_task == NULL) {
   11090:	4680      	mov	r8, r0
   11092:	2800      	cmp	r0, #0
   11094:	f000 8084 	beq.w	111a0 <nmgr_def_taskstat_read+0x160>
        g_err |= cbor_encode_text_stringz(&tasks, oti.oti_name);
   11098:	a90e      	add	r1, sp, #56	; 0x38
   1109a:	4668      	mov	r0, sp
   1109c:	f7ff fec4 	bl	10e28 <cbor_encode_text_stringz>
        g_err |= cbor_encoder_create_map(&tasks, &task, CborIndefiniteLength);
   110a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
        g_err |= cbor_encode_text_stringz(&tasks, oti.oti_name);
   110a4:	4605      	mov	r5, r0
        g_err |= cbor_encoder_create_map(&tasks, &task, CborIndefiniteLength);
   110a6:	a904      	add	r1, sp, #16
   110a8:	4668      	mov	r0, sp
   110aa:	f005 f803 	bl	160b4 <cbor_encoder_create_map>
        g_err |= cbor_encode_text_stringz(&task, "prio");
   110ae:	4659      	mov	r1, fp
        g_err |= cbor_encoder_create_map(&tasks, &task, CborIndefiniteLength);
   110b0:	4305      	orrs	r5, r0
        g_err |= cbor_encode_text_stringz(&task, "prio");
   110b2:	a804      	add	r0, sp, #16
   110b4:	f7ff feb8 	bl	10e28 <cbor_encode_text_stringz>
        g_err |= cbor_encoder_create_map(&tasks, &task, CborIndefiniteLength);
   110b8:	432c      	orrs	r4, r5
        g_err |= cbor_encode_uint(&task, oti.oti_prio);
   110ba:	f89d 2020 	ldrb.w	r2, [sp, #32]
        g_err |= cbor_encode_text_stringz(&task, "prio");
   110be:	ea44 0600 	orr.w	r6, r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_prio);
   110c2:	2300      	movs	r3, #0
   110c4:	a804      	add	r0, sp, #16
   110c6:	f004 ffa7 	bl	16018 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&task, "tid");
   110ca:	4651      	mov	r1, sl
        g_err |= cbor_encode_uint(&task, oti.oti_prio);
   110cc:	4306      	orrs	r6, r0
        g_err |= cbor_encode_text_stringz(&task, "tid");
   110ce:	a804      	add	r0, sp, #16
   110d0:	f7ff feaa 	bl	10e28 <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&task, oti.oti_taskid);
   110d4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
        g_err |= cbor_encode_text_stringz(&task, "tid");
   110d8:	ea46 0500 	orr.w	r5, r6, r0
        g_err |= cbor_encode_uint(&task, oti.oti_taskid);
   110dc:	2300      	movs	r3, #0
   110de:	a804      	add	r0, sp, #16
   110e0:	f004 ff9a 	bl	16018 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&task, "state");
   110e4:	4649      	mov	r1, r9
        g_err |= cbor_encode_uint(&task, oti.oti_taskid);
   110e6:	4305      	orrs	r5, r0
        g_err |= cbor_encode_text_stringz(&task, "state");
   110e8:	a804      	add	r0, sp, #16
   110ea:	f7ff fe9d 	bl	10e28 <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&task, oti.oti_state);
   110ee:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
        g_err |= cbor_encode_text_stringz(&task, "state");
   110f2:	ea45 0400 	orr.w	r4, r5, r0
        g_err |= cbor_encode_uint(&task, oti.oti_state);
   110f6:	2300      	movs	r3, #0
   110f8:	a804      	add	r0, sp, #16
   110fa:	f004 ff8d 	bl	16018 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&task, "stkuse");
   110fe:	4930      	ldr	r1, [pc, #192]	; (111c0 <nmgr_def_taskstat_read+0x180>)
        g_err |= cbor_encode_uint(&task, oti.oti_state);
   11100:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&task, "stkuse");
   11102:	a804      	add	r0, sp, #16
   11104:	f7ff fe90 	bl	10e28 <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&task, oti.oti_stkusage);
   11108:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
        g_err |= cbor_encode_text_stringz(&task, "stkuse");
   1110c:	ea44 0600 	orr.w	r6, r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_stkusage);
   11110:	2300      	movs	r3, #0
   11112:	a804      	add	r0, sp, #16
   11114:	f004 ff80 	bl	16018 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&task, "stksiz");
   11118:	492a      	ldr	r1, [pc, #168]	; (111c4 <nmgr_def_taskstat_read+0x184>)
        g_err |= cbor_encode_uint(&task, oti.oti_stkusage);
   1111a:	4306      	orrs	r6, r0
        g_err |= cbor_encode_text_stringz(&task, "stksiz");
   1111c:	a804      	add	r0, sp, #16
   1111e:	f7ff fe83 	bl	10e28 <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&task, oti.oti_stksize);
   11122:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
        g_err |= cbor_encode_text_stringz(&task, "stksiz");
   11126:	ea46 0500 	orr.w	r5, r6, r0
        g_err |= cbor_encode_uint(&task, oti.oti_stksize);
   1112a:	2300      	movs	r3, #0
   1112c:	a804      	add	r0, sp, #16
   1112e:	f004 ff73 	bl	16018 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&task, "cswcnt");
   11132:	4925      	ldr	r1, [pc, #148]	; (111c8 <nmgr_def_taskstat_read+0x188>)
        g_err |= cbor_encode_uint(&task, oti.oti_stksize);
   11134:	4305      	orrs	r5, r0
        g_err |= cbor_encode_text_stringz(&task, "cswcnt");
   11136:	a804      	add	r0, sp, #16
   11138:	f7ff fe76 	bl	10e28 <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&task, oti.oti_cswcnt);
   1113c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        g_err |= cbor_encode_text_stringz(&task, "cswcnt");
   1113e:	ea45 0400 	orr.w	r4, r5, r0
        g_err |= cbor_encode_uint(&task, oti.oti_cswcnt);
   11142:	2300      	movs	r3, #0
   11144:	a804      	add	r0, sp, #16
   11146:	f004 ff67 	bl	16018 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&task, "runtime");
   1114a:	4920      	ldr	r1, [pc, #128]	; (111cc <nmgr_def_taskstat_read+0x18c>)
        g_err |= cbor_encode_uint(&task, oti.oti_cswcnt);
   1114c:	4304      	orrs	r4, r0
        g_err |= cbor_encode_text_stringz(&task, "runtime");
   1114e:	a804      	add	r0, sp, #16
   11150:	f7ff fe6a 	bl	10e28 <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&task, oti.oti_runtime);
   11154:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        g_err |= cbor_encode_text_stringz(&task, "runtime");
   11156:	ea44 0600 	orr.w	r6, r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_runtime);
   1115a:	2300      	movs	r3, #0
   1115c:	a804      	add	r0, sp, #16
   1115e:	f004 ff5b 	bl	16018 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&task, "last_checkin");
   11162:	491b      	ldr	r1, [pc, #108]	; (111d0 <nmgr_def_taskstat_read+0x190>)
        g_err |= cbor_encode_uint(&task, oti.oti_runtime);
   11164:	4306      	orrs	r6, r0
        g_err |= cbor_encode_text_stringz(&task, "last_checkin");
   11166:	a804      	add	r0, sp, #16
   11168:	f7ff fe5e 	bl	10e28 <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&task, oti.oti_last_checkin);
   1116c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1116e:	2300      	movs	r3, #0
        g_err |= cbor_encode_text_stringz(&task, "last_checkin");
   11170:	ea46 0500 	orr.w	r5, r6, r0
        g_err |= cbor_encode_uint(&task, oti.oti_last_checkin);
   11174:	a804      	add	r0, sp, #16
   11176:	f004 ff4f 	bl	16018 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&task, "next_checkin");
   1117a:	4916      	ldr	r1, [pc, #88]	; (111d4 <nmgr_def_taskstat_read+0x194>)
        g_err |= cbor_encode_uint(&task, oti.oti_last_checkin);
   1117c:	4305      	orrs	r5, r0
        g_err |= cbor_encode_text_stringz(&task, "next_checkin");
   1117e:	a804      	add	r0, sp, #16
   11180:	f7ff fe52 	bl	10e28 <cbor_encode_text_stringz>
        g_err |= cbor_encode_uint(&task, oti.oti_next_checkin);
   11184:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        g_err |= cbor_encode_text_stringz(&task, "next_checkin");
   11186:	ea45 0400 	orr.w	r4, r5, r0
        g_err |= cbor_encode_uint(&task, oti.oti_next_checkin);
   1118a:	2300      	movs	r3, #0
   1118c:	a804      	add	r0, sp, #16
   1118e:	f004 ff43 	bl	16018 <cbor_encode_uint>
        g_err |= cbor_encoder_close_container(&tasks, &task);
   11192:	a904      	add	r1, sp, #16
        g_err |= cbor_encode_uint(&task, oti.oti_next_checkin);
   11194:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_close_container(&tasks, &task);
   11196:	4668      	mov	r0, sp
   11198:	f004 ff9d 	bl	160d6 <cbor_encoder_close_container>
   1119c:	4304      	orrs	r4, r0
        prev_task = os_task_info_get_next(prev_task, &oti);
   1119e:	e773      	b.n	11088 <nmgr_def_taskstat_read+0x48>
    g_err |= cbor_encoder_close_container(&cb->encoder, &tasks);
   111a0:	4669      	mov	r1, sp
   111a2:	4638      	mov	r0, r7
   111a4:	f004 ff97 	bl	160d6 <cbor_encoder_close_container>
        return MGMT_ERR_ENOMEM;
   111a8:	ea54 0300 	orrs.w	r3, r4, r0
}
   111ac:	bf14      	ite	ne
   111ae:	2002      	movne	r0, #2
   111b0:	2000      	moveq	r0, #0
   111b2:	b017      	add	sp, #92	; 0x5c
   111b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111b8:	00022490 	.word	0x00022490
   111bc:	00022ca0 	.word	0x00022ca0
   111c0:	000226e8 	.word	0x000226e8
   111c4:	000226ef 	.word	0x000226ef
   111c8:	000226f6 	.word	0x000226f6
   111cc:	000226fd 	.word	0x000226fd
   111d0:	00022705 	.word	0x00022705
   111d4:	00022712 	.word	0x00022712
   111d8:	000226d9 	.word	0x000226d9
   111dc:	000226de 	.word	0x000226de
   111e0:	000226e2 	.word	0x000226e2

000111e4 <nmgr_def_console_echo>:
{
   111e4:	b530      	push	{r4, r5, lr}
    long long int echo_on = 1;
   111e6:	2300      	movs	r3, #0
{
   111e8:	b09b      	sub	sp, #108	; 0x6c
    long long int echo_on = 1;
   111ea:	2201      	movs	r2, #1
   111ec:	e9cd 2300 	strd	r2, r3, [sp]
{
   111f0:	4604      	mov	r4, r0
    struct cbor_attr_t attrs[2] = {
   111f2:	225c      	movs	r2, #92	; 0x5c
   111f4:	2100      	movs	r1, #0
   111f6:	a803      	add	r0, sp, #12
   111f8:	f7fe fa01 	bl	f5fe <memset>
   111fc:	2501      	movs	r5, #1
   111fe:	4b0d      	ldr	r3, [pc, #52]	; (11234 <nmgr_def_console_echo+0x50>)
   11200:	9302      	str	r3, [sp, #8]
    rc = cbor_read_object(&cb->it, attrs);
   11202:	f104 001c 	add.w	r0, r4, #28
   11206:	a902      	add	r1, sp, #8
    struct cbor_attr_t attrs[2] = {
   11208:	f88d 500c 	strb.w	r5, [sp, #12]
   1120c:	f8cd d010 	str.w	sp, [sp, #16]
   11210:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
    rc = cbor_read_object(&cb->it, attrs);
   11214:	f004 fe0b 	bl	15e2e <cbor_read_object>
    if (rc) {
   11218:	4604      	mov	r4, r0
   1121a:	b948      	cbnz	r0, 11230 <nmgr_def_console_echo+0x4c>
    if (echo_on) {
   1121c:	e9dd 2300 	ldrd	r2, r3, [sp]
   11220:	4313      	orrs	r3, r2
        console_echo(1);
   11222:	bf18      	it	ne
   11224:	4628      	movne	r0, r5
        console_echo(0);
   11226:	f000 fd2d 	bl	11c84 <console_echo>
}
   1122a:	4620      	mov	r0, r4
   1122c:	b01b      	add	sp, #108	; 0x6c
   1122e:	bd30      	pop	{r4, r5, pc}
        return MGMT_ERR_EINVAL;
   11230:	2403      	movs	r4, #3
   11232:	e7fa      	b.n	1122a <nmgr_def_console_echo+0x46>
   11234:	0002271f 	.word	0x0002271f

00011238 <nmgr_os_groups_register>:

int
nmgr_os_groups_register(void)
{
    return mgmt_group_register(&nmgr_def_group);
   11238:	4801      	ldr	r0, [pc, #4]	; (11240 <nmgr_os_groups_register+0x8>)
   1123a:	f7ff bbef 	b.w	10a1c <mgmt_group_register>
   1123e:	bf00      	nop
   11240:	200006e4 	.word	0x200006e4

00011244 <dpl_cputime_timer_init>:
    dpl_cputime_delay_ticks(ticks);
}

void
dpl_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
   11244:	b510      	push	{r4, lr}
   11246:	4613      	mov	r3, r2
    assert(timer != NULL);
   11248:	b928      	cbnz	r0, 11256 <dpl_cputime_timer_init+0x12>
   1124a:	2300      	movs	r3, #0
   1124c:	461a      	mov	r2, r3
   1124e:	4619      	mov	r1, r3
   11250:	4618      	mov	r0, r3
   11252:	f7f7 fe4f 	bl	8ef4 <__assert_func>
    assert(fp != NULL);
   11256:	2900      	cmp	r1, #0
   11258:	d0f7      	beq.n	1124a <dpl_cputime_timer_init+0x6>
    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
   1125a:	460a      	mov	r2, r1
}
   1125c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
   11260:	4601      	mov	r1, r0
   11262:	2000      	movs	r0, #0
   11264:	f00a b936 	b.w	1b4d4 <hal_timer_set_cb>

00011268 <dpl_cputime_timer_start>:
int
dpl_cputime_timer_start(struct hal_timer *timer, uint32_t cputime)
{
    int rc;

    rc = hal_timer_start_at(timer, cputime);
   11268:	f00a b946 	b.w	1b4f8 <hal_timer_start_at>

0001126c <dpl_cputime_timer_stop>:
}

void
dpl_cputime_timer_stop(struct hal_timer *timer)
{
    hal_timer_stop(timer);
   1126c:	f00a b97d 	b.w	1b56a <hal_timer_stop>

00011270 <dpl_cputime_get32>:
uint32_t
dpl_cputime_get32(void)
{
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   11270:	2000      	movs	r0, #0
   11272:	f00a b913 	b.w	1b49c <hal_timer_read>

00011276 <dpl_cputime_delay_ticks>:
{
   11276:	b510      	push	{r4, lr}
   11278:	4604      	mov	r4, r0
    until = dpl_cputime_get32() + ticks;
   1127a:	f7ff fff9 	bl	11270 <dpl_cputime_get32>
   1127e:	4404      	add	r4, r0
    while ((int32_t)(dpl_cputime_get32() - until) < 0) {
   11280:	f7ff fff6 	bl	11270 <dpl_cputime_get32>
   11284:	1b00      	subs	r0, r0, r4
   11286:	2800      	cmp	r0, #0
   11288:	dbfa      	blt.n	11280 <dpl_cputime_delay_ticks+0xa>
}
   1128a:	bd10      	pop	{r4, pc}

0001128c <dpl_cputime_delay_usecs>:
    dpl_cputime_delay_ticks(ticks);
   1128c:	f7ff bff3 	b.w	11276 <dpl_cputime_delay_ticks>

00011290 <dpl_cputime_timer_relative>:
{
   11290:	b513      	push	{r0, r1, r4, lr}
    assert(timer != NULL);
   11292:	4603      	mov	r3, r0
{
   11294:	460c      	mov	r4, r1
    assert(timer != NULL);
   11296:	b918      	cbnz	r0, 112a0 <dpl_cputime_timer_relative+0x10>
   11298:	4602      	mov	r2, r0
   1129a:	4601      	mov	r1, r0
   1129c:	f7f7 fe2a 	bl	8ef4 <__assert_func>
   112a0:	9001      	str	r0, [sp, #4]
    cputime = dpl_cputime_get32() + dpl_cputime_usecs_to_ticks(usecs);
   112a2:	f7ff ffe5 	bl	11270 <dpl_cputime_get32>
    rc = hal_timer_start_at(timer, cputime);
   112a6:	9b01      	ldr	r3, [sp, #4]
   112a8:	1901      	adds	r1, r0, r4
   112aa:	4618      	mov	r0, r3
}
   112ac:	b002      	add	sp, #8
   112ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rc = hal_timer_start_at(timer, cputime);
   112b2:	f00a b921 	b.w	1b4f8 <hal_timer_start_at>

000112b6 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct dpl_mempool *mempool,
                   struct dpl_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   112b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   112b8:	9f08      	ldr	r7, [sp, #32]
   112ba:	460c      	mov	r4, r1
    int rc;

    rc = dpl_mempool_init(mempool, num_blocks, block_size, mem, name);
   112bc:	b29d      	uxth	r5, r3
   112be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   112c0:	9300      	str	r3, [sp, #0]
{
   112c2:	4616      	mov	r6, r2
    rc = dpl_mempool_init(mempool, num_blocks, block_size, mem, name);
   112c4:	4603      	mov	r3, r0
   112c6:	463a      	mov	r2, r7
   112c8:	4629      	mov	r1, r5
   112ca:	4620      	mov	r0, r4
   112cc:	f000 f830 	bl	11330 <dpl_mempool_init>
    if (rc != 0) {
   112d0:	b940      	cbnz	r0, 112e4 <mem_init_mbuf_pool+0x2e>
        return rc;
    }

    rc = dpl_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   112d2:	462b      	mov	r3, r5
   112d4:	b2ba      	uxth	r2, r7
   112d6:	4621      	mov	r1, r4
   112d8:	4630      	mov	r0, r6
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   112da:	b003      	add	sp, #12
   112dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rc = dpl_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   112e0:	f000 b8d9 	b.w	11496 <dpl_mbuf_pool_init>
}
   112e4:	b003      	add	sp, #12
   112e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000112e8 <mem_split_frag>:
 *                              NULL on failure.
 */
struct dpl_mbuf *
mem_split_frag(struct dpl_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
   112e8:	b570      	push	{r4, r5, r6, lr}
    struct dpl_mbuf *frag;
    int rc;

    if (DPL_MBUF_PKTLEN(*om) <= max_frag_sz) {
   112ea:	6804      	ldr	r4, [r0, #0]
{
   112ec:	460e      	mov	r6, r1
   112ee:	4619      	mov	r1, r3
    if (DPL_MBUF_PKTLEN(*om) <= max_frag_sz) {
   112f0:	8a23      	ldrh	r3, [r4, #16]
   112f2:	42b3      	cmp	r3, r6
{
   112f4:	4605      	mov	r5, r0
    if (DPL_MBUF_PKTLEN(*om) <= max_frag_sz) {
   112f6:	d803      	bhi.n	11300 <mem_split_frag+0x18>
        /* Final fragment. */
        frag = *om;
        *om = NULL;
   112f8:	2300      	movs	r3, #0
   112fa:	6003      	str	r3, [r0, #0]
    return frag;

err:
    dpl_mbuf_free_chain(frag);
    return NULL;
}
   112fc:	4620      	mov	r0, r4
   112fe:	bd70      	pop	{r4, r5, r6, pc}
    frag = alloc_cb(max_frag_sz, cb_arg);
   11300:	4630      	mov	r0, r6
   11302:	4790      	blx	r2
    if (frag == NULL) {
   11304:	4604      	mov	r4, r0
   11306:	b170      	cbz	r0, 11326 <mem_split_frag+0x3e>
    rc = dpl_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
   11308:	6829      	ldr	r1, [r5, #0]
   1130a:	4633      	mov	r3, r6
   1130c:	2200      	movs	r2, #0
   1130e:	f000 f94e 	bl	115ae <dpl_mbuf_appendfrom>
    if (rc != 0) {
   11312:	b940      	cbnz	r0, 11326 <mem_split_frag+0x3e>
    dpl_mbuf_adj(*om, max_frag_sz);
   11314:	6828      	ldr	r0, [r5, #0]
   11316:	4631      	mov	r1, r6
   11318:	f000 f970 	bl	115fc <dpl_mbuf_adj>
    *om = dpl_mbuf_trim_front(*om);
   1131c:	6828      	ldr	r0, [r5, #0]
   1131e:	f000 f9b9 	bl	11694 <dpl_mbuf_trim_front>
   11322:	6028      	str	r0, [r5, #0]
    return frag;
   11324:	e7ea      	b.n	112fc <mem_split_frag+0x14>
    dpl_mbuf_free_chain(frag);
   11326:	4620      	mov	r0, r4
   11328:	f000 f8d9 	bl	114de <dpl_mbuf_free_chain>
    return NULL;
   1132c:	2400      	movs	r4, #0
   1132e:	e7e5      	b.n	112fc <mem_split_frag+0x14>

00011330 <dpl_mempool_init>:
#endif

dpl_error_t
dpl_mempool_init(struct dpl_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   11330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11332:	460d      	mov	r5, r1
   11334:	461e      	mov	r6, r3
    int true_block_size;
    uint8_t *block_addr;
    struct dpl_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   11336:	4604      	mov	r4, r0
   11338:	b110      	cbz	r0, 11340 <dpl_mempool_init+0x10>
   1133a:	b10a      	cbz	r2, 11340 <dpl_mempool_init+0x10>
        return DPL_INVALID_PARAM;
    }

    if ((!membuf) && (blocks != 0)) {
   1133c:	b913      	cbnz	r3, 11344 <dpl_mempool_init+0x14>
   1133e:	b119      	cbz	r1, 11348 <dpl_mempool_init+0x18>
        return DPL_INVALID_PARAM;
   11340:	2003      	movs	r0, #3
   11342:	e029      	b.n	11398 <dpl_mempool_init+0x68>

    if (membuf != NULL) {
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uintptr_t)membuf & (DPL_ALIGNMENT - 1)) != 0) {
   11344:	0799      	lsls	r1, r3, #30
   11346:	d12e      	bne.n	113a6 <dpl_mempool_init+0x76>
            return DPL_MEM_NOT_ALIGNED;
        }
    }
    true_block_size = DPL_MEM_TRUE_BLOCK_SIZE(block_size);
   11348:	0793      	lsls	r3, r2, #30
   1134a:	bf1c      	itt	ne
   1134c:	f022 0303 	bicne.w	r3, r2, #3
   11350:	1d1f      	addne	r7, r3, #4

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    mp->mp_num_free = blocks;
    mp->mp_min_free = blocks;
    mp->mp_flags = 0;
   11352:	f04f 0300 	mov.w	r3, #0
   11356:	72a3      	strb	r3, [r4, #10]
    mp->mp_num_blocks = blocks;
    mp->mp_membuf_addr = (uintptr_t)membuf;
    mp->name = name;
   11358:	9b06      	ldr	r3, [sp, #24]
    mp->mp_block_size = block_size;
   1135a:	6022      	str	r2, [r4, #0]
    dpl_mempool_poison(membuf, true_block_size);
    SLIST_FIRST(mp) = membuf;
   1135c:	e9c4 6305 	strd	r6, r3, [r4, #20]
    mp->mp_num_free = blocks;
   11360:	80e5      	strh	r5, [r4, #6]
    mp->mp_min_free = blocks;
   11362:	8125      	strh	r5, [r4, #8]
    mp->mp_num_blocks = blocks;
   11364:	80a5      	strh	r5, [r4, #4]
    mp->mp_membuf_addr = (uintptr_t)membuf;
   11366:	60e6      	str	r6, [r4, #12]
    return (dpl_error_t)os_mutex_init(&mu->mu);
   11368:	f104 001c 	add.w	r0, r4, #28
    true_block_size = DPL_MEM_TRUE_BLOCK_SIZE(block_size);
   1136c:	bf08      	it	eq
   1136e:	4617      	moveq	r7, r2
   11370:	f7f9 f9a0 	bl	a6b4 <os_mutex_init>
   11374:	4632      	mov	r2, r6
   11376:	462b      	mov	r3, r5
    dpl_mutex_init(&mp->mutex);

    /* Chain the memory blocks to the free list */
    block_addr = (uint8_t *)membuf;
    block_ptr = (struct dpl_memblock *)block_addr;
    while (blocks > 1) {
   11378:	2b01      	cmp	r3, #1
   1137a:	d80e      	bhi.n	1139a <dpl_mempool_init+0x6a>
        block_ptr = (struct dpl_memblock *)block_addr;
        --blocks;
    }

    /* Last one in the list should be NULL */
    SLIST_NEXT(block_ptr, mb_next) = NULL;
   1137c:	1e6b      	subs	r3, r5, #1
   1137e:	2d00      	cmp	r5, #0
   11380:	b29b      	uxth	r3, r3
   11382:	bf08      	it	eq
   11384:	2300      	moveq	r3, #0
   11386:	437b      	muls	r3, r7
   11388:	2000      	movs	r0, #0
   1138a:	50f0      	str	r0, [r6, r3]

    STAILQ_INSERT_TAIL(&g_dpl_mempool_list, mp, mp_list);
   1138c:	4b07      	ldr	r3, [pc, #28]	; (113ac <dpl_mempool_init+0x7c>)
   1138e:	6120      	str	r0, [r4, #16]
   11390:	685a      	ldr	r2, [r3, #4]
   11392:	6014      	str	r4, [r2, #0]
   11394:	3410      	adds	r4, #16
   11396:	605c      	str	r4, [r3, #4]

    return DPL_OK;
}
   11398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        block_addr += true_block_size;
   1139a:	19d1      	adds	r1, r2, r7
        --blocks;
   1139c:	3b01      	subs	r3, #1
        SLIST_NEXT(block_ptr, mb_next) = (struct dpl_memblock *)block_addr;
   1139e:	6011      	str	r1, [r2, #0]
        --blocks;
   113a0:	b29b      	uxth	r3, r3
        block_addr += true_block_size;
   113a2:	460a      	mov	r2, r1
   113a4:	e7e8      	b.n	11378 <dpl_mempool_init+0x48>
            return DPL_MEM_NOT_ALIGNED;
   113a6:	2004      	movs	r0, #4
   113a8:	e7f6      	b.n	11398 <dpl_mempool_init+0x68>
   113aa:	bf00      	nop
   113ac:	200006f0 	.word	0x200006f0

000113b0 <dpl_memblock_get>:
    return 1;
}

void *
dpl_memblock_get(struct dpl_mempool *mp)
{
   113b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dpl_sr_t sr;
    struct dpl_memblock *block;

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   113b2:	4604      	mov	r4, r0
   113b4:	b1e0      	cbz	r0, 113f0 <dpl_memblock_get+0x40>
    return os_arch_save_sr();
   113b6:	f7f8 fed7 	bl	a168 <os_arch_save_sr>
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   113ba:	f104 071c 	add.w	r7, r4, #28
    return os_arch_save_sr();
   113be:	4606      	mov	r6, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   113c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   113c4:	4638      	mov	r0, r7
   113c6:	f7f9 f9d1 	bl	a76c <os_mutex_pend>
        DPL_ENTER_CRITICAL(sr);
        dpl_mutex_pend(&mp->mutex, DPL_WAIT_FOREVER);
        /* Check for any free */
        if (mp->mp_num_free) {
   113ca:	88e3      	ldrh	r3, [r4, #6]
   113cc:	b193      	cbz	r3, 113f4 <dpl_memblock_get+0x44>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   113ce:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   113d0:	682a      	ldr	r2, [r5, #0]
   113d2:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   113d4:	3b01      	subs	r3, #1
            if (mp->mp_min_free > mp->mp_num_free) {
   113d6:	8922      	ldrh	r2, [r4, #8]
            mp->mp_num_free--;
   113d8:	b29b      	uxth	r3, r3
            if (mp->mp_min_free > mp->mp_num_free) {
   113da:	429a      	cmp	r2, r3
            mp->mp_num_free--;
   113dc:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   113de:	d900      	bls.n	113e2 <dpl_memblock_get+0x32>
                mp->mp_min_free = mp->mp_num_free;
   113e0:	8123      	strh	r3, [r4, #8]
    return (dpl_error_t)os_mutex_release(&mu->mu);
   113e2:	4638      	mov	r0, r7
   113e4:	f7f9 f970 	bl	a6c8 <os_mutex_release>
    os_arch_restore_sr(ctx);
   113e8:	4630      	mov	r0, r6
   113ea:	f7f8 fec3 	bl	a174 <os_arch_restore_sr>
}
   113ee:	462c      	mov	r4, r5
            dpl_mempool_poison_check(block, DPL_MEMPOOL_TRUE_BLOCK_SIZE(mp));
        }
    }

    return (void *)block;
}
   113f0:	4620      	mov	r0, r4
   113f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    block = NULL;
   113f4:	461d      	mov	r5, r3
   113f6:	e7f4      	b.n	113e2 <dpl_memblock_get+0x32>

000113f8 <dpl_memblock_put_from_cb>:

dpl_error_t
dpl_memblock_put_from_cb(struct dpl_mempool *mp, void *block_addr)
{
   113f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   113fa:	4604      	mov	r4, r0
   113fc:	460d      	mov	r5, r1
    return os_arch_save_sr();
   113fe:	f7f8 feb3 	bl	a168 <os_arch_save_sr>
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   11402:	f104 071c 	add.w	r7, r4, #28
   11406:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    return os_arch_save_sr();
   1140a:	4606      	mov	r6, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1140c:	4638      	mov	r0, r7
   1140e:	f7f9 f9ad 	bl	a76c <os_mutex_pend>
    block = (struct dpl_memblock *)block_addr;
    DPL_ENTER_CRITICAL(sr);
    dpl_mutex_pend(&mp->mutex, DPL_WAIT_FOREVER);

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   11412:	6963      	ldr	r3, [r4, #20]
   11414:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   11416:	88e3      	ldrh	r3, [r4, #6]
    SLIST_FIRST(mp) = block;
   11418:	6165      	str	r5, [r4, #20]
    mp->mp_num_free++;
   1141a:	3301      	adds	r3, #1
   1141c:	80e3      	strh	r3, [r4, #6]
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1141e:	4638      	mov	r0, r7
   11420:	f7f9 f952 	bl	a6c8 <os_mutex_release>
    os_arch_restore_sr(ctx);
   11424:	4630      	mov	r0, r6
   11426:	f7f8 fea5 	bl	a174 <os_arch_restore_sr>

    dpl_mutex_release(&mp->mutex);
    DPL_EXIT_CRITICAL(sr);

    return DPL_OK;
}
   1142a:	2000      	movs	r0, #0
   1142c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001142e <dpl_memblock_put>:

dpl_error_t
dpl_memblock_put(struct dpl_mempool *mp, void *block_addr)
{
   1142e:	b410      	push	{r4}
   11430:	460a      	mov	r2, r1
#if MYNEWT_VAL(DPL_MEMPOOL_CHECK)
    struct dpl_memblock *block;
#endif

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   11432:	4603      	mov	r3, r0
   11434:	b180      	cbz	r0, 11458 <dpl_memblock_put+0x2a>
   11436:	b179      	cbz	r1, 11458 <dpl_memblock_put+0x2a>
#endif

    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & DPL_MEMPOOL_F_EXT) {
   11438:	7a84      	ldrb	r4, [r0, #10]
   1143a:	07e4      	lsls	r4, r4, #31
   1143c:	d506      	bpl.n	1144c <dpl_memblock_put+0x1e>
        mpe = (struct dpl_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   1143e:	6a84      	ldr	r4, [r0, #40]	; 0x28
   11440:	b124      	cbz	r4, 1144c <dpl_memblock_put+0x1e>
            rc = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   11442:	4623      	mov	r3, r4
   11444:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        }
    }

    /* No callback; free the block. */
    return dpl_memblock_put_from_cb(mp, block_addr);
}
   11446:	f85d 4b04 	ldr.w	r4, [sp], #4
            rc = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   1144a:	4718      	bx	r3
}
   1144c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return dpl_memblock_put_from_cb(mp, block_addr);
   11450:	4611      	mov	r1, r2
   11452:	4618      	mov	r0, r3
   11454:	f7ff bfd0 	b.w	113f8 <dpl_memblock_put_from_cb>
}
   11458:	2003      	movs	r0, #3
   1145a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1145e:	4770      	bx	lr

00011460 <streamer_vprintf>:
}

int
streamer_vprintf(struct streamer *streamer, const char *fmt, va_list ap)
{
    return streamer->cfg->vprintf_cb(streamer, fmt, ap);
   11460:	6803      	ldr	r3, [r0, #0]
   11462:	685b      	ldr	r3, [r3, #4]
   11464:	4718      	bx	r3

00011466 <streamer_printf>:
}

int
streamer_printf(struct streamer *streamer, const char *fmt, ...)
{
   11466:	b40e      	push	{r1, r2, r3}
   11468:	b503      	push	{r0, r1, lr}
   1146a:	aa03      	add	r2, sp, #12
   1146c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list ap;
    int rc;

    va_start(ap, fmt);
   11470:	9201      	str	r2, [sp, #4]
    rc = streamer_vprintf(streamer, fmt, ap);
   11472:	f7ff fff5 	bl	11460 <streamer_vprintf>
    va_end(ap);

    return rc;
}
   11476:	b002      	add	sp, #8
   11478:	f85d eb04 	ldr.w	lr, [sp], #4
   1147c:	b003      	add	sp, #12
   1147e:	4770      	bx	lr

00011480 <_dpl_mbuf_trailingspace>:
{
    struct dpl_mbuf_pool *omp;

    omp = om->om_omp;

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   11480:	6882      	ldr	r2, [r0, #8]
   11482:	8812      	ldrh	r2, [r2, #0]
   11484:	f100 0310 	add.w	r3, r0, #16
   11488:	4413      	add	r3, r2
      (om->om_data + om->om_len);
   1148a:	88c2      	ldrh	r2, [r0, #6]
   1148c:	6800      	ldr	r0, [r0, #0]
   1148e:	4410      	add	r0, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   11490:	1a18      	subs	r0, r3, r0
}
   11492:	b280      	uxth	r0, r0
   11494:	4770      	bx	lr

00011496 <dpl_mbuf_pool_init>:

int
dpl_mbuf_pool_init(struct dpl_mbuf_pool *omp, struct dpl_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct dpl_mbuf);
   11496:	3a10      	subs	r2, #16
   11498:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   1149a:	6041      	str	r1, [r0, #4]

    return (0);
}
   1149c:	2000      	movs	r0, #0
   1149e:	4770      	bx	lr

000114a0 <dpl_mbuf_get>:

struct dpl_mbuf *
dpl_mbuf_get(struct dpl_mbuf_pool *omp, uint16_t leadingspace)
{
   114a0:	b538      	push	{r3, r4, r5, lr}
    struct dpl_mbuf *om;

    if (leadingspace > omp->omp_databuf_len) {
   114a2:	8803      	ldrh	r3, [r0, #0]
   114a4:	428b      	cmp	r3, r1
{
   114a6:	4604      	mov	r4, r0
   114a8:	460d      	mov	r5, r1
    if (leadingspace > omp->omp_databuf_len) {
   114aa:	d30c      	bcc.n	114c6 <dpl_mbuf_get+0x26>
        goto err;
    }

    om = dpl_memblock_get(omp->omp_pool);
   114ac:	6840      	ldr	r0, [r0, #4]
   114ae:	f7ff ff7f 	bl	113b0 <dpl_memblock_get>
    if (!om) {
   114b2:	b138      	cbz	r0, 114c4 <dpl_mbuf_get+0x24>

    SLIST_NEXT(om, om_next) = NULL;
    om->om_flags = 0;
    om->om_pkthdr_len = 0;
    om->om_len = 0;
    om->om_data = (&om->om_databuf[0] + leadingspace);
   114b4:	f100 0110 	add.w	r1, r0, #16
    SLIST_NEXT(om, om_next) = NULL;
   114b8:	2300      	movs	r3, #0
    om->om_data = (&om->om_databuf[0] + leadingspace);
   114ba:	440d      	add	r5, r1
    SLIST_NEXT(om, om_next) = NULL;
   114bc:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
   114be:	6043      	str	r3, [r0, #4]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   114c0:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
   114c2:	6084      	str	r4, [r0, #8]

    return (om);
err:
    return (NULL);
}
   114c4:	bd38      	pop	{r3, r4, r5, pc}
    return (NULL);
   114c6:	2000      	movs	r0, #0
   114c8:	e7fc      	b.n	114c4 <dpl_mbuf_get+0x24>

000114ca <dpl_mbuf_free>:
    return om;
}

int
dpl_mbuf_free(struct dpl_mbuf *om)
{
   114ca:	b508      	push	{r3, lr}
    int rc;

    if (om->om_omp != NULL) {
   114cc:	6883      	ldr	r3, [r0, #8]
{
   114ce:	4601      	mov	r1, r0
    if (om->om_omp != NULL) {
   114d0:	b11b      	cbz	r3, 114da <dpl_mbuf_free+0x10>
        rc = dpl_memblock_put(om->om_omp->omp_pool, om);
   114d2:	6858      	ldr	r0, [r3, #4]
   114d4:	f7ff ffab 	bl	1142e <dpl_memblock_put>
    }

    return (0);
err:
    return (rc);
}
   114d8:	bd08      	pop	{r3, pc}
    return (0);
   114da:	4618      	mov	r0, r3
   114dc:	e7fc      	b.n	114d8 <dpl_mbuf_free+0xe>

000114de <dpl_mbuf_free_chain>:

int
dpl_mbuf_free_chain(struct dpl_mbuf *om)
{
   114de:	b510      	push	{r4, lr}
    struct dpl_mbuf *next;
    int rc;

    while (om != NULL) {
   114e0:	b900      	cbnz	r0, 114e4 <dpl_mbuf_free_chain+0x6>
    }

    return (0);
err:
    return (rc);
}
   114e2:	bd10      	pop	{r4, pc}
        next = SLIST_NEXT(om, om_next);
   114e4:	68c4      	ldr	r4, [r0, #12]
        rc = dpl_mbuf_free(om);
   114e6:	f7ff fff0 	bl	114ca <dpl_mbuf_free>
        if (rc != 0) {
   114ea:	2800      	cmp	r0, #0
   114ec:	d1f9      	bne.n	114e2 <dpl_mbuf_free_chain+0x4>
        om = next;
   114ee:	4620      	mov	r0, r4
   114f0:	e7f6      	b.n	114e0 <dpl_mbuf_free_chain+0x2>

000114f2 <dpl_mbuf_append>:
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
}

int
dpl_mbuf_append(struct dpl_mbuf *om, const void *data,  uint16_t len)
{
   114f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   114f6:	460f      	mov	r7, r1
   114f8:	4615      	mov	r5, r2
    struct dpl_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   114fa:	4606      	mov	r6, r0
   114fc:	2800      	cmp	r0, #0
   114fe:	d046      	beq.n	1158e <dpl_mbuf_append+0x9c>
        rc = DPL_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   11500:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    while (SLIST_NEXT(last, om_next) != NULL) {
   11504:	4603      	mov	r3, r0
   11506:	4699      	mov	r9, r3
   11508:	68db      	ldr	r3, [r3, #12]
   1150a:	2b00      	cmp	r3, #0
   1150c:	d1fb      	bne.n	11506 <dpl_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    space = DPL_MBUF_TRAILINGSPACE(last);
   1150e:	4648      	mov	r0, r9
    remainder = len;
   11510:	462c      	mov	r4, r5
    space = DPL_MBUF_TRAILINGSPACE(last);
   11512:	f7ff ffb5 	bl	11480 <_dpl_mbuf_trailingspace>

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   11516:	b198      	cbz	r0, 11540 <dpl_mbuf_append+0x4e>
        if (space > remainder) {
   11518:	42a8      	cmp	r0, r5
   1151a:	bfa8      	it	ge
   1151c:	4628      	movge	r0, r5
   1151e:	4604      	mov	r4, r0
            space = remainder;
        }

        memcpy(DPL_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   11520:	f8d9 3000 	ldr.w	r3, [r9]
   11524:	f8b9 0006 	ldrh.w	r0, [r9, #6]
   11528:	4622      	mov	r2, r4
   1152a:	4639      	mov	r1, r7
   1152c:	4418      	add	r0, r3
   1152e:	f7fe f859 	bl	f5e4 <memcpy>

        last->om_len += space;
   11532:	f8b9 3006 	ldrh.w	r3, [r9, #6]
   11536:	4423      	add	r3, r4
        data += space;
   11538:	4427      	add	r7, r4
        last->om_len += space;
   1153a:	f8a9 3006 	strh.w	r3, [r9, #6]
        remainder -= space;
   1153e:	1b2c      	subs	r4, r5, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   11540:	2c00      	cmp	r4, #0
   11542:	dd05      	ble.n	11550 <dpl_mbuf_append+0x5e>
        new = dpl_mbuf_get(omp, 0);
   11544:	2100      	movs	r1, #0
   11546:	4640      	mov	r0, r8
   11548:	f7ff ffaa 	bl	114a0 <dpl_mbuf_get>
        if (!new) {
   1154c:	4682      	mov	sl, r0
   1154e:	b938      	cbnz	r0, 11560 <dpl_mbuf_append+0x6e>
        SLIST_NEXT(last, om_next) = new;
        last = new;
    }

    /* Adjust the packet header length in the buffer */
    if (DPL_MBUF_IS_PKTHDR(om)) {
   11550:	7973      	ldrb	r3, [r6, #5]
   11552:	2b07      	cmp	r3, #7
   11554:	d816      	bhi.n	11584 <dpl_mbuf_append+0x92>
        DPL_MBUF_PKTHDR(om)->omp_len += len - remainder;
    }

    if (remainder != 0) {
   11556:	1e20      	subs	r0, r4, #0
   11558:	bf18      	it	ne
   1155a:	2001      	movne	r0, #1


    return (0);
err:
    return (rc);
}
   1155c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        new->om_len = mynewt_min(omp->omp_databuf_len, remainder);
   11560:	f8b8 2000 	ldrh.w	r2, [r8]
   11564:	42a2      	cmp	r2, r4
   11566:	bfa8      	it	ge
   11568:	4622      	movge	r2, r4
   1156a:	80c2      	strh	r2, [r0, #6]
        memcpy(DPL_MBUF_DATA(new, void *), data, new->om_len);
   1156c:	4639      	mov	r1, r7
   1156e:	6800      	ldr	r0, [r0, #0]
   11570:	f7fe f838 	bl	f5e4 <memcpy>
        data += new->om_len;
   11574:	f8ba 3006 	ldrh.w	r3, [sl, #6]
        SLIST_NEXT(last, om_next) = new;
   11578:	f8c9 a00c 	str.w	sl, [r9, #12]
        data += new->om_len;
   1157c:	441f      	add	r7, r3
        remainder -= new->om_len;
   1157e:	1ae4      	subs	r4, r4, r3
        SLIST_NEXT(last, om_next) = new;
   11580:	46d1      	mov	r9, sl
   11582:	e7dd      	b.n	11540 <dpl_mbuf_append+0x4e>
        DPL_MBUF_PKTHDR(om)->omp_len += len - remainder;
   11584:	8a32      	ldrh	r2, [r6, #16]
   11586:	4415      	add	r5, r2
   11588:	1b2d      	subs	r5, r5, r4
   1158a:	8235      	strh	r5, [r6, #16]
   1158c:	e7e3      	b.n	11556 <dpl_mbuf_append+0x64>
        rc = DPL_EINVAL;
   1158e:	2002      	movs	r0, #2
   11590:	e7e4      	b.n	1155c <dpl_mbuf_append+0x6a>

00011592 <dpl_mbuf_off>:
    return (NULL);
}

struct dpl_mbuf *
dpl_mbuf_off(const struct dpl_mbuf *om, int off, uint16_t *out_off)
{
   11592:	b510      	push	{r4, lr}

    /* Cast away const. */
    cur = (struct dpl_mbuf *)om;

    while (1) {
        if (cur == NULL) {
   11594:	b120      	cbz	r0, 115a0 <dpl_mbuf_off+0xe>
            return NULL;
        }

        next = SLIST_NEXT(cur, om_next);

        if (cur->om_len > off ||
   11596:	88c4      	ldrh	r4, [r0, #6]
        next = SLIST_NEXT(cur, om_next);
   11598:	68c3      	ldr	r3, [r0, #12]
        if (cur->om_len > off ||
   1159a:	428c      	cmp	r4, r1
   1159c:	dd01      	ble.n	115a2 <dpl_mbuf_off+0x10>
            (cur->om_len == off && next == NULL)) {

            *out_off = off;
   1159e:	8011      	strh	r1, [r2, #0]
        }

        off -= cur->om_len;
        cur = next;
    }
}
   115a0:	bd10      	pop	{r4, pc}
        if (cur->om_len > off ||
   115a2:	d101      	bne.n	115a8 <dpl_mbuf_off+0x16>
            (cur->om_len == off && next == NULL)) {
   115a4:	2b00      	cmp	r3, #0
   115a6:	d0fa      	beq.n	1159e <dpl_mbuf_off+0xc>
        off -= cur->om_len;
   115a8:	1b09      	subs	r1, r1, r4
        next = SLIST_NEXT(cur, om_next);
   115aa:	4618      	mov	r0, r3
        if (cur == NULL) {
   115ac:	e7f2      	b.n	11594 <dpl_mbuf_off+0x2>

000115ae <dpl_mbuf_appendfrom>:
{
   115ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   115b0:	4605      	mov	r5, r0
   115b2:	4608      	mov	r0, r1
   115b4:	4611      	mov	r1, r2
    src_cur_om = dpl_mbuf_off(src, src_off, &src_cur_off);
   115b6:	f10d 0206 	add.w	r2, sp, #6
{
   115ba:	461f      	mov	r7, r3
    src_cur_om = dpl_mbuf_off(src, src_off, &src_cur_off);
   115bc:	f7ff ffe9 	bl	11592 <dpl_mbuf_off>
   115c0:	4606      	mov	r6, r0
    while (len > 0) {
   115c2:	b917      	cbnz	r7, 115ca <dpl_mbuf_appendfrom+0x1c>
    return 0;
   115c4:	4638      	mov	r0, r7
}
   115c6:	b003      	add	sp, #12
   115c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (src_cur_om == NULL) {
   115ca:	b1ae      	cbz	r6, 115f8 <dpl_mbuf_appendfrom+0x4a>
        chunk_sz = mynewt_min(len, src_cur_om->om_len - src_cur_off);
   115cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   115d0:	88f2      	ldrh	r2, [r6, #6]
        rc = dpl_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
   115d2:	6831      	ldr	r1, [r6, #0]
        chunk_sz = mynewt_min(len, src_cur_om->om_len - src_cur_off);
   115d4:	1ad2      	subs	r2, r2, r3
   115d6:	42ba      	cmp	r2, r7
   115d8:	bfa8      	it	ge
   115da:	463a      	movge	r2, r7
   115dc:	b294      	uxth	r4, r2
        rc = dpl_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
   115de:	4622      	mov	r2, r4
   115e0:	4419      	add	r1, r3
   115e2:	4628      	mov	r0, r5
   115e4:	f7ff ff85 	bl	114f2 <dpl_mbuf_append>
        if (rc != 0) {
   115e8:	2800      	cmp	r0, #0
   115ea:	d1ec      	bne.n	115c6 <dpl_mbuf_appendfrom+0x18>
        len -= chunk_sz;
   115ec:	1b3c      	subs	r4, r7, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
   115ee:	68f6      	ldr	r6, [r6, #12]
        src_cur_off = 0;
   115f0:	f8ad 0006 	strh.w	r0, [sp, #6]
        len -= chunk_sz;
   115f4:	b2a7      	uxth	r7, r4
        src_cur_off = 0;
   115f6:	e7e4      	b.n	115c2 <dpl_mbuf_appendfrom+0x14>
            return DPL_EINVAL;
   115f8:	2002      	movs	r0, #2
   115fa:	e7e4      	b.n	115c6 <dpl_mbuf_appendfrom+0x18>

000115fc <dpl_mbuf_adj>:
}
EXPORT_SYMBOL(dpl_mbuf_copydata);

void
dpl_mbuf_adj(struct dpl_mbuf *mp, int req_len)
{
   115fc:	b570      	push	{r4, r5, r6, lr}
    int len = req_len;
    struct dpl_mbuf *m;
    int count;

    if ((m = mp) == NULL)
   115fe:	2800      	cmp	r0, #0
   11600:	d030      	beq.n	11664 <dpl_mbuf_adj+0x68>
        return;
    if (len >= 0) {
   11602:	2900      	cmp	r1, #0
   11604:	da1a      	bge.n	1163c <dpl_mbuf_adj+0x40>
         * calculating its length and finding the last mbuf.
         * If the adjustment only affects this mbuf, then just
         * adjust and return.  Otherwise, rescan and truncate
         * after the remaining size.
         */
        len = -len;
   11606:	424b      	negs	r3, r1
   11608:	4604      	mov	r4, r0
        count = 0;
   1160a:	2500      	movs	r5, #0
        for (;;) {
            count += m->om_len;
   1160c:	88e2      	ldrh	r2, [r4, #6]
   1160e:	4626      	mov	r6, r4
            if (SLIST_NEXT(m, om_next) == (struct dpl_mbuf *)0)
   11610:	68e4      	ldr	r4, [r4, #12]
            count += m->om_len;
   11612:	4415      	add	r5, r2
            if (SLIST_NEXT(m, om_next) == (struct dpl_mbuf *)0)
   11614:	2c00      	cmp	r4, #0
   11616:	d1f9      	bne.n	1160c <dpl_mbuf_adj+0x10>
                break;
            m = SLIST_NEXT(m, om_next);
        }
        if (m->om_len >= len) {
   11618:	429a      	cmp	r2, r3
            m->om_len -= len;
            if (DPL_MBUF_IS_PKTHDR(mp))
   1161a:	7944      	ldrb	r4, [r0, #5]
        if (m->om_len >= len) {
   1161c:	db23      	blt.n	11666 <dpl_mbuf_adj+0x6a>
            m->om_len -= len;
   1161e:	b29b      	uxth	r3, r3
   11620:	1ad2      	subs	r2, r2, r3
            if (DPL_MBUF_IS_PKTHDR(mp))
   11622:	2c07      	cmp	r4, #7
            m->om_len -= len;
   11624:	80f2      	strh	r2, [r6, #6]
            if (DPL_MBUF_IS_PKTHDR(mp))
   11626:	d91d      	bls.n	11664 <dpl_mbuf_adj+0x68>
                DPL_MBUF_PKTHDR(mp)->omp_len -= len;
   11628:	8a02      	ldrh	r2, [r0, #16]
   1162a:	1ad3      	subs	r3, r2, r3
   1162c:	e019      	b.n	11662 <dpl_mbuf_adj+0x66>
                m->om_len -= len;
   1162e:	1ae4      	subs	r4, r4, r3
   11630:	80d4      	strh	r4, [r2, #6]
                m->om_data += len;
   11632:	6814      	ldr	r4, [r2, #0]
   11634:	4423      	add	r3, r4
   11636:	6013      	str	r3, [r2, #0]
                len = 0;
   11638:	2300      	movs	r3, #0
   1163a:	e00c      	b.n	11656 <dpl_mbuf_adj+0x5a>
   1163c:	4602      	mov	r2, r0
   1163e:	460b      	mov	r3, r1
                m->om_len = 0;
   11640:	2500      	movs	r5, #0
        while (m != NULL && len > 0) {
   11642:	2b00      	cmp	r3, #0
   11644:	dd07      	ble.n	11656 <dpl_mbuf_adj+0x5a>
            if (m->om_len <= len) {
   11646:	88d4      	ldrh	r4, [r2, #6]
   11648:	429c      	cmp	r4, r3
   1164a:	dcf0      	bgt.n	1162e <dpl_mbuf_adj+0x32>
                m->om_len = 0;
   1164c:	80d5      	strh	r5, [r2, #6]
                m = SLIST_NEXT(m, om_next);
   1164e:	68d2      	ldr	r2, [r2, #12]
                len -= m->om_len;
   11650:	1b1b      	subs	r3, r3, r4
        while (m != NULL && len > 0) {
   11652:	2a00      	cmp	r2, #0
   11654:	d1f5      	bne.n	11642 <dpl_mbuf_adj+0x46>
        if (DPL_MBUF_IS_PKTHDR(mp))
   11656:	7942      	ldrb	r2, [r0, #5]
   11658:	2a07      	cmp	r2, #7
   1165a:	d903      	bls.n	11664 <dpl_mbuf_adj+0x68>
            DPL_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
   1165c:	8a02      	ldrh	r2, [r0, #16]
   1165e:	1a51      	subs	r1, r2, r1
   11660:	440b      	add	r3, r1
                DPL_MBUF_PKTHDR(mp)->omp_len -= len;
   11662:	8203      	strh	r3, [r0, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
   11664:	bd70      	pop	{r4, r5, r6, pc}
        count -= len;
   11666:	4429      	add	r1, r5
        if (count < 0)
   11668:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
        if (DPL_MBUF_IS_PKTHDR(m))
   1166c:	2c07      	cmp	r4, #7
            DPL_MBUF_PKTHDR(m)->omp_len = count;
   1166e:	bf88      	it	hi
   11670:	8201      	strhhi	r1, [r0, #16]
            if (m->om_len >= count) {
   11672:	88c3      	ldrh	r3, [r0, #6]
   11674:	428b      	cmp	r3, r1
   11676:	4604      	mov	r4, r0
                if (SLIST_NEXT(m, om_next) != NULL) {
   11678:	68c0      	ldr	r0, [r0, #12]
            if (m->om_len >= count) {
   1167a:	db07      	blt.n	1168c <dpl_mbuf_adj+0x90>
                m->om_len = count;
   1167c:	80e1      	strh	r1, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
   1167e:	2800      	cmp	r0, #0
   11680:	d0f0      	beq.n	11664 <dpl_mbuf_adj+0x68>
                    dpl_mbuf_free_chain(SLIST_NEXT(m, om_next));
   11682:	f7ff ff2c 	bl	114de <dpl_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
   11686:	2300      	movs	r3, #0
   11688:	60e3      	str	r3, [r4, #12]
   1168a:	e7eb      	b.n	11664 <dpl_mbuf_adj+0x68>
            count -= m->om_len;
   1168c:	1ac9      	subs	r1, r1, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
   1168e:	2800      	cmp	r0, #0
   11690:	d1ef      	bne.n	11672 <dpl_mbuf_adj+0x76>
   11692:	e7e7      	b.n	11664 <dpl_mbuf_adj+0x68>

00011694 <dpl_mbuf_trim_front>:
{
    struct dpl_mbuf *next;
    struct dpl_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
   11694:	88c3      	ldrh	r3, [r0, #6]
{
   11696:	b570      	push	{r4, r5, r6, lr}
   11698:	4605      	mov	r5, r0
    if (om->om_len != 0) {
   1169a:	b113      	cbz	r3, 116a2 <dpl_mbuf_trim_front+0xe>
   1169c:	462c      	mov	r4, r5
        dpl_mbuf_free(om);
        om = cur;
    }

    return om;
}
   1169e:	4620      	mov	r0, r4
   116a0:	bd70      	pop	{r4, r5, r6, pc}
    cur = SLIST_NEXT(om, om_next);
   116a2:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
   116a4:	2c00      	cmp	r4, #0
   116a6:	d0f9      	beq.n	1169c <dpl_mbuf_trim_front+0x8>
   116a8:	88e3      	ldrh	r3, [r4, #6]
   116aa:	b1ab      	cbz	r3, 116d8 <dpl_mbuf_trim_front+0x44>
    if (DPL_MBUF_IS_PKTHDR(om)) {
   116ac:	7963      	ldrb	r3, [r4, #5]
    leadingspace = (uint16_t) (DPL_MBUF_DATA(om, uint8_t *) -
   116ae:	6821      	ldr	r1, [r4, #0]
    if (DPL_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
   116b0:	796a      	ldrb	r2, [r5, #5]
   116b2:	2b07      	cmp	r3, #7
   116b4:	bf98      	it	ls
   116b6:	2300      	movls	r3, #0
        ((uint8_t *) &om->om_databuf[0] + startoff));
   116b8:	f104 0010 	add.w	r0, r4, #16
   116bc:	4403      	add	r3, r0
    leadingspace = (uint16_t) (DPL_MBUF_DATA(om, uint8_t *) -
   116be:	1acb      	subs	r3, r1, r3
   116c0:	b29b      	uxth	r3, r3
   116c2:	429a      	cmp	r2, r3
   116c4:	d8ea      	bhi.n	1169c <dpl_mbuf_trim_front+0x8>
        cur->om_pkthdr_len = om->om_pkthdr_len;
   116c6:	7162      	strb	r2, [r4, #5]
        memcpy(DPL_MBUF_PKTHDR(cur), DPL_MBUF_PKTHDR(om), om->om_pkthdr_len);
   116c8:	f105 0110 	add.w	r1, r5, #16
   116cc:	f7fd ff8a 	bl	f5e4 <memcpy>
        dpl_mbuf_free(om);
   116d0:	4628      	mov	r0, r5
   116d2:	f7ff fefa 	bl	114ca <dpl_mbuf_free>
        om = cur;
   116d6:	e7e2      	b.n	1169e <dpl_mbuf_trim_front+0xa>
        next = SLIST_NEXT(cur, om_next);
   116d8:	68e6      	ldr	r6, [r4, #12]
        SLIST_NEXT(om, om_next) = next;
   116da:	60ee      	str	r6, [r5, #12]
        dpl_mbuf_free(cur);
   116dc:	4620      	mov	r0, r4
   116de:	f7ff fef4 	bl	114ca <dpl_mbuf_free>
        cur = next;
   116e2:	4634      	mov	r4, r6
   116e4:	e7de      	b.n	116a4 <dpl_mbuf_trim_front+0x10>

000116e6 <conf_ev_fn_load>:

#if MYNEWT_VAL(OS_SCHEDULING)
static void
conf_ev_fn_load(struct os_event *ev)
{
    conf_ensure_loaded();
   116e6:	f000 ba59 	b.w	11b9c <conf_ensure_loaded>
	...

000116ec <conf_init>:
{
   116ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    os_mutex_init(&conf_mtx);
   116ee:	480d      	ldr	r0, [pc, #52]	; (11724 <conf_init+0x38>)
   116f0:	f7f8 ffe0 	bl	a6b4 <os_mutex_init>
    SLIST_INIT(&conf_handlers);
   116f4:	4b0c      	ldr	r3, [pc, #48]	; (11728 <conf_init+0x3c>)
   116f6:	2400      	movs	r4, #0
   116f8:	601c      	str	r4, [r3, #0]
    conf_store_init();
   116fa:	f000 fab9 	bl	11c70 <conf_store_init>
    rc = conf_cli_register();
   116fe:	f000 f9db 	bl	11ab8 <conf_cli_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11702:	b138      	cbz	r0, 11714 <conf_init+0x28>
   11704:	4b09      	ldr	r3, [pc, #36]	; (1172c <conf_init+0x40>)
   11706:	9400      	str	r4, [sp, #0]
   11708:	681d      	ldr	r5, [r3, #0]
   1170a:	4622      	mov	r2, r4
   1170c:	4623      	mov	r3, r4
   1170e:	4621      	mov	r1, r4
   11710:	4620      	mov	r0, r4
   11712:	47a8      	blx	r5
    os_eventq_put(os_eventq_dflt_get(), &conf_ev_load);
   11714:	f7f7 ff82 	bl	961c <os_eventq_dflt_get>
   11718:	4905      	ldr	r1, [pc, #20]	; (11730 <conf_init+0x44>)
}
   1171a:	b003      	add	sp, #12
   1171c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    os_eventq_put(os_eventq_dflt_get(), &conf_ev_load);
   11720:	f7f7 bed5 	b.w	94ce <os_eventq_put>
   11724:	20003d88 	.word	0x20003d88
   11728:	20003d84 	.word	0x20003d84
   1172c:	20000768 	.word	0x20000768
   11730:	200006f8 	.word	0x200006f8

00011734 <conf_lock>:
    os_mutex_pend(&conf_mtx, 0xFFFFFFFF);
   11734:	4802      	ldr	r0, [pc, #8]	; (11740 <conf_lock+0xc>)
   11736:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1173a:	f7f9 b817 	b.w	a76c <os_mutex_pend>
   1173e:	bf00      	nop
   11740:	20003d88 	.word	0x20003d88

00011744 <conf_unlock>:
    os_mutex_release(&conf_mtx);
   11744:	4801      	ldr	r0, [pc, #4]	; (1174c <conf_unlock+0x8>)
   11746:	f7f8 bfbf 	b.w	a6c8 <os_mutex_release>
   1174a:	bf00      	nop
   1174c:	20003d88 	.word	0x20003d88

00011750 <conf_register>:
{
   11750:	b510      	push	{r4, lr}
   11752:	4604      	mov	r4, r0
    conf_lock();
   11754:	f7ff ffee 	bl	11734 <conf_lock>
    SLIST_INSERT_HEAD(&conf_handlers, handler, ch_list);
   11758:	4b03      	ldr	r3, [pc, #12]	; (11768 <conf_register+0x18>)
   1175a:	681a      	ldr	r2, [r3, #0]
   1175c:	6022      	str	r2, [r4, #0]
   1175e:	601c      	str	r4, [r3, #0]
    conf_unlock();
   11760:	f7ff fff0 	bl	11744 <conf_unlock>
}
   11764:	2000      	movs	r0, #0
   11766:	bd10      	pop	{r4, pc}
   11768:	20003d84 	.word	0x20003d84

0001176c <conf_handler_lookup>:
/*
 * Find conf_handler based on name.
 */
struct conf_handler *
conf_handler_lookup(char *name)
{
   1176c:	b538      	push	{r3, r4, r5, lr}
    struct conf_handler *ch;

    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   1176e:	4b07      	ldr	r3, [pc, #28]	; (1178c <conf_handler_lookup+0x20>)
   11770:	681c      	ldr	r4, [r3, #0]
{
   11772:	4605      	mov	r5, r0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   11774:	b90c      	cbnz	r4, 1177a <conf_handler_lookup+0xe>
        if (!strcmp(name, ch->ch_name)) {
            return ch;
        }
    }
    return NULL;
}
   11776:	4620      	mov	r0, r4
   11778:	bd38      	pop	{r3, r4, r5, pc}
        if (!strcmp(name, ch->ch_name)) {
   1177a:	6861      	ldr	r1, [r4, #4]
   1177c:	4628      	mov	r0, r5
   1177e:	f7fd ff63 	bl	f648 <strcmp>
   11782:	2800      	cmp	r0, #0
   11784:	d0f7      	beq.n	11776 <conf_handler_lookup+0xa>
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   11786:	6824      	ldr	r4, [r4, #0]
   11788:	e7f4      	b.n	11774 <conf_handler_lookup+0x8>
   1178a:	bf00      	nop
   1178c:	20003d84 	.word	0x20003d84

00011790 <conf_parse_name>:
/*
 * Separate string into argv array.
 */
int
conf_parse_name(char *name, int *name_argc, char *name_argv[])
{
   11790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11792:	460d      	mov	r5, r1
   11794:	4616      	mov	r6, r2
    char *tok;
    char *tok_ptr;
    char *sep = CONF_NAME_SEPARATOR;
    int i;

    tok = strtok_r(name, sep, &tok_ptr);
   11796:	4909      	ldr	r1, [pc, #36]	; (117bc <conf_parse_name+0x2c>)

    i = 0;
    while (tok) {
        name_argv[i++] = tok;
        tok = strtok_r(NULL, sep, &tok_ptr);
   11798:	4f08      	ldr	r7, [pc, #32]	; (117bc <conf_parse_name+0x2c>)
    tok = strtok_r(name, sep, &tok_ptr);
   1179a:	aa01      	add	r2, sp, #4
   1179c:	f00c fcb9 	bl	1e112 <strtok_r>
    while (tok) {
   117a0:	2400      	movs	r4, #0
   117a2:	b910      	cbnz	r0, 117aa <conf_parse_name+0x1a>
    }
    *name_argc = i;
   117a4:	602c      	str	r4, [r5, #0]

    return 0;
}
   117a6:	b003      	add	sp, #12
   117a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        name_argv[i++] = tok;
   117aa:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
        tok = strtok_r(NULL, sep, &tok_ptr);
   117ae:	aa01      	add	r2, sp, #4
   117b0:	4639      	mov	r1, r7
   117b2:	2000      	movs	r0, #0
   117b4:	f00c fcad 	bl	1e112 <strtok_r>
   117b8:	3401      	adds	r4, #1
   117ba:	e7f2      	b.n	117a2 <conf_parse_name+0x12>
   117bc:	00022754 	.word	0x00022754

000117c0 <conf_parse_and_lookup>:

struct conf_handler *
conf_parse_and_lookup(char *name, int *name_argc, char *name_argv[])
{
   117c0:	b510      	push	{r4, lr}
   117c2:	4614      	mov	r4, r2
    int rc;

    rc = conf_parse_name(name, name_argc, name_argv);
   117c4:	f7ff ffe4 	bl	11790 <conf_parse_name>
    if (rc) {
   117c8:	b920      	cbnz	r0, 117d4 <conf_parse_and_lookup+0x14>
        return NULL;
    }
    return conf_handler_lookup(name_argv[0]);
   117ca:	6820      	ldr	r0, [r4, #0]
}
   117cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return conf_handler_lookup(name_argv[0]);
   117d0:	f7ff bfcc 	b.w	1176c <conf_handler_lookup>
}
   117d4:	2000      	movs	r0, #0
   117d6:	bd10      	pop	{r4, pc}

000117d8 <conf_value_from_str>:

int
conf_value_from_str(char *val_str, enum conf_type type, void *vp, int maxlen)
{
   117d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   117da:	460e      	mov	r6, r1
   117dc:	4614      	mov	r4, r2
   117de:	461f      	mov	r7, r3
    int32_t val;
    int64_t val64;
    char *eptr;

    if (!val_str) {
   117e0:	4605      	mov	r5, r0
   117e2:	b908      	cbnz	r0, 117e8 <conf_value_from_str+0x10>
        goto err;
    }
    switch (type) {
   117e4:	2003      	movs	r0, #3
   117e6:	e027      	b.n	11838 <conf_value_from_str+0x60>
   117e8:	1e8b      	subs	r3, r1, #2
   117ea:	2b08      	cmp	r3, #8
   117ec:	d8fa      	bhi.n	117e4 <conf_value_from_str+0xc>
   117ee:	a201      	add	r2, pc, #4	; (adr r2, 117f4 <conf_value_from_str+0x1c>)
   117f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   117f4:	00011819 	.word	0x00011819
   117f8:	00011819 	.word	0x00011819
   117fc:	00011819 	.word	0x00011819
   11800:	00011867 	.word	0x00011867
   11804:	0001187f 	.word	0x0001187f
   11808:	000117e5 	.word	0x000117e5
   1180c:	000117e5 	.word	0x000117e5
   11810:	000117e5 	.word	0x000117e5
   11814:	00011819 	.word	0x00011819
    case CONF_INT8:
    case CONF_INT16:
    case CONF_INT32:
    case CONF_BOOL:
        val = strtol(val_str, &eptr, 0);
   11818:	2200      	movs	r2, #0
   1181a:	a901      	add	r1, sp, #4
   1181c:	f00c fc87 	bl	1e12e <strtol>
        if (*eptr != '\0') {
   11820:	9a01      	ldr	r2, [sp, #4]
        val = strtol(val_str, &eptr, 0);
   11822:	4603      	mov	r3, r0
        if (*eptr != '\0') {
   11824:	7810      	ldrb	r0, [r2, #0]
   11826:	2800      	cmp	r0, #0
   11828:	d1dc      	bne.n	117e4 <conf_value_from_str+0xc>
            goto err;
        }
        if (type == CONF_BOOL) {
   1182a:	2e0a      	cmp	r6, #10
   1182c:	d106      	bne.n	1183c <conf_value_from_str+0x64>
            if (val < 0 || val > 1) {
   1182e:	2b01      	cmp	r3, #1
   11830:	d8d8      	bhi.n	117e4 <conf_value_from_str+0xc>
                goto err;
            }
            *(bool *)vp = val;
   11832:	f003 0301 	and.w	r3, r3, #1
        } else if (type == CONF_INT8) {
            if (val < INT8_MIN || val > UINT8_MAX) {
                goto err;
            }
            *(int8_t *)vp = val;
   11836:	7023      	strb	r3, [r4, #0]
        goto err;
    }
    return 0;
err:
    return OS_INVALID_PARM;
}
   11838:	b003      	add	sp, #12
   1183a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if (type == CONF_INT8) {
   1183c:	2e02      	cmp	r6, #2
   1183e:	d105      	bne.n	1184c <conf_value_from_str+0x74>
            if (val < INT8_MIN || val > UINT8_MAX) {
   11840:	f103 0280 	add.w	r2, r3, #128	; 0x80
   11844:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   11848:	d3f5      	bcc.n	11836 <conf_value_from_str+0x5e>
   1184a:	e7cb      	b.n	117e4 <conf_value_from_str+0xc>
        } else if (type == CONF_INT16) {
   1184c:	2e03      	cmp	r6, #3
   1184e:	d106      	bne.n	1185e <conf_value_from_str+0x86>
            if (val < INT16_MIN || val > UINT16_MAX) {
   11850:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
   11854:	f5b2 3fc0 	cmp.w	r2, #98304	; 0x18000
   11858:	d2c4      	bcs.n	117e4 <conf_value_from_str+0xc>
            *(int16_t *)vp = val;
   1185a:	8023      	strh	r3, [r4, #0]
   1185c:	e7ec      	b.n	11838 <conf_value_from_str+0x60>
        } else if (type == CONF_INT32) {
   1185e:	2e04      	cmp	r6, #4
   11860:	d1ea      	bne.n	11838 <conf_value_from_str+0x60>
            *(int32_t *)vp = val;
   11862:	6023      	str	r3, [r4, #0]
   11864:	e7e8      	b.n	11838 <conf_value_from_str+0x60>
        val64 = strtoll(val_str, &eptr, 0);
   11866:	2200      	movs	r2, #0
   11868:	a901      	add	r1, sp, #4
   1186a:	f7fd ff0f 	bl	f68c <strtoll>
        if (*eptr != '\0') {
   1186e:	9b01      	ldr	r3, [sp, #4]
   11870:	781b      	ldrb	r3, [r3, #0]
   11872:	2b00      	cmp	r3, #0
   11874:	d1b6      	bne.n	117e4 <conf_value_from_str+0xc>
        *(int64_t *)vp = val64;
   11876:	e9c4 0100 	strd	r0, r1, [r4]
    return 0;
   1187a:	2000      	movs	r0, #0
        break;
   1187c:	e7dc      	b.n	11838 <conf_value_from_str+0x60>
        val = strlen(val_str);
   1187e:	f7fd feee 	bl	f65e <strlen>
        if (val + 1 > maxlen) {
   11882:	42b8      	cmp	r0, r7
   11884:	daae      	bge.n	117e4 <conf_value_from_str+0xc>
        strcpy(vp, val_str);
   11886:	4629      	mov	r1, r5
   11888:	4620      	mov	r0, r4
   1188a:	f00c fc0f 	bl	1e0ac <strcpy>
   1188e:	e7f4      	b.n	1187a <conf_value_from_str+0xa2>

00011890 <conf_str_from_value>:
    return 0;
}

char *
conf_str_from_value(enum conf_type type, void *vp, char *buf, int buf_len)
{
   11890:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11892:	4604      	mov	r4, r0
    int32_t val;

    if (type == CONF_STRING) {
   11894:	2c06      	cmp	r4, #6
{
   11896:	4608      	mov	r0, r1
   11898:	4615      	mov	r5, r2
   1189a:	4619      	mov	r1, r3
    if (type == CONF_STRING) {
   1189c:	d012      	beq.n	118c4 <conf_str_from_value+0x34>
        return vp;
    }
    switch (type) {
   1189e:	2c05      	cmp	r4, #5
   118a0:	d018      	beq.n	118d4 <conf_str_from_value+0x44>
   118a2:	d807      	bhi.n	118b4 <conf_str_from_value+0x24>
   118a4:	1ea3      	subs	r3, r4, #2
   118a6:	2b02      	cmp	r3, #2
   118a8:	d81d      	bhi.n	118e6 <conf_str_from_value+0x56>
    case CONF_INT16:
    case CONF_INT32:
    case CONF_BOOL:
        if (type == CONF_BOOL) {
            val = *(bool *)vp;
        } else if (type == CONF_INT8) {
   118aa:	2c02      	cmp	r4, #2
   118ac:	d10c      	bne.n	118c8 <conf_str_from_value+0x38>
            val = *(int8_t *)vp;
   118ae:	f990 3000 	ldrsb.w	r3, [r0]
   118b2:	e002      	b.n	118ba <conf_str_from_value+0x2a>
    switch (type) {
   118b4:	2c0a      	cmp	r4, #10
   118b6:	d116      	bne.n	118e6 <conf_str_from_value+0x56>
            val = *(bool *)vp;
   118b8:	7803      	ldrb	r3, [r0, #0]
        } else if (type == CONF_INT16) {
            val = *(int16_t *)vp;
        } else {
            val = *(int32_t *)vp;
        }
        snprintf(buf, buf_len, "%ld", (long)val);
   118ba:	4a0c      	ldr	r2, [pc, #48]	; (118ec <conf_str_from_value+0x5c>)
   118bc:	4628      	mov	r0, r5
   118be:	f7fe f9bd 	bl	fc3c <snprintf>
        return buf;
    case CONF_INT64:
        snprintf(buf, buf_len, "%lld", *(long long *)vp);
        return buf;
   118c2:	4628      	mov	r0, r5
    default:
        return NULL;
    }
}
   118c4:	b003      	add	sp, #12
   118c6:	bd30      	pop	{r4, r5, pc}
        } else if (type == CONF_INT16) {
   118c8:	2c03      	cmp	r4, #3
            val = *(int16_t *)vp;
   118ca:	bf0c      	ite	eq
   118cc:	f9b0 3000 	ldrsheq.w	r3, [r0]
            val = *(int32_t *)vp;
   118d0:	6803      	ldrne	r3, [r0, #0]
   118d2:	e7f2      	b.n	118ba <conf_str_from_value+0x2a>
        snprintf(buf, buf_len, "%lld", *(long long *)vp);
   118d4:	e9d0 2300 	ldrd	r2, r3, [r0]
   118d8:	4628      	mov	r0, r5
   118da:	e9cd 2300 	strd	r2, r3, [sp]
   118de:	4a04      	ldr	r2, [pc, #16]	; (118f0 <conf_str_from_value+0x60>)
   118e0:	f7fe f9ac 	bl	fc3c <snprintf>
   118e4:	e7ed      	b.n	118c2 <conf_str_from_value+0x32>
    switch (type) {
   118e6:	2000      	movs	r0, #0
   118e8:	e7ec      	b.n	118c4 <conf_str_from_value+0x34>
   118ea:	bf00      	nop
   118ec:	00022756 	.word	0x00022756
   118f0:	0002275a 	.word	0x0002275a

000118f4 <conf_set_value>:
    return buf;
}

int
conf_set_value(char *name, char *val_str)
{
   118f4:	b510      	push	{r4, lr}
   118f6:	b08c      	sub	sp, #48	; 0x30
   118f8:	460c      	mov	r4, r1
   118fa:	9001      	str	r0, [sp, #4]
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;

    conf_lock();
   118fc:	f7ff ff1a 	bl	11734 <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   11900:	9801      	ldr	r0, [sp, #4]
   11902:	aa04      	add	r2, sp, #16
   11904:	a903      	add	r1, sp, #12
   11906:	f7ff ff5b 	bl	117c0 <conf_parse_and_lookup>
    if (!ch) {
   1190a:	b158      	cbz	r0, 11924 <conf_set_value+0x30>
        rc = OS_INVALID_PARM;
        goto out;
    }
    rc = ch->ch_set(name_argc - 1, &name_argv[1], val_str);
   1190c:	68c3      	ldr	r3, [r0, #12]
   1190e:	9803      	ldr	r0, [sp, #12]
   11910:	4622      	mov	r2, r4
   11912:	a905      	add	r1, sp, #20
   11914:	3801      	subs	r0, #1
   11916:	4798      	blx	r3
   11918:	4604      	mov	r4, r0
out:
    conf_unlock();
   1191a:	f7ff ff13 	bl	11744 <conf_unlock>
    return rc;
}
   1191e:	4620      	mov	r0, r4
   11920:	b00c      	add	sp, #48	; 0x30
   11922:	bd10      	pop	{r4, pc}
        rc = OS_INVALID_PARM;
   11924:	2403      	movs	r4, #3
   11926:	e7f8      	b.n	1191a <conf_set_value+0x26>

00011928 <conf_get_value>:
 * Return value will be pointer to beginning of that buffer,
 * except for string it will pointer to beginning of string.
 */
char *
conf_get_value(char *name, char *buf, int buf_len)
{
   11928:	b530      	push	{r4, r5, lr}
   1192a:	b08d      	sub	sp, #52	; 0x34
   1192c:	460d      	mov	r5, r1
   1192e:	9001      	str	r0, [sp, #4]
   11930:	9200      	str	r2, [sp, #0]
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    char *rval = NULL;

    conf_lock();
   11932:	f7ff feff 	bl	11734 <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   11936:	9801      	ldr	r0, [sp, #4]
   11938:	aa04      	add	r2, sp, #16
   1193a:	a903      	add	r1, sp, #12
   1193c:	f7ff ff40 	bl	117c0 <conf_parse_and_lookup>
    if (!ch) {
   11940:	4604      	mov	r4, r0
   11942:	b140      	cbz	r0, 11956 <conf_get_value+0x2e>
        goto out;
    }

    if (!ch->ch_get) {
   11944:	6884      	ldr	r4, [r0, #8]
   11946:	b134      	cbz	r4, 11956 <conf_get_value+0x2e>
        goto out;
    }
    rval = ch->ch_get(name_argc - 1, &name_argv[1], buf, buf_len);
   11948:	9803      	ldr	r0, [sp, #12]
   1194a:	9b00      	ldr	r3, [sp, #0]
   1194c:	462a      	mov	r2, r5
   1194e:	a905      	add	r1, sp, #20
   11950:	3801      	subs	r0, #1
   11952:	47a0      	blx	r4
   11954:	4604      	mov	r4, r0
out:
    conf_unlock();
   11956:	f7ff fef5 	bl	11744 <conf_unlock>
    return rval;
}
   1195a:	4620      	mov	r0, r4
   1195c:	b00d      	add	sp, #52	; 0x34
   1195e:	bd30      	pop	{r4, r5, pc}

00011960 <conf_commit>:

int
conf_commit(char *name)
{
   11960:	b530      	push	{r4, r5, lr}
   11962:	4604      	mov	r4, r0
   11964:	b08b      	sub	sp, #44	; 0x2c
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
   11966:	f7ff fee5 	bl	11734 <conf_lock>
    if (name) {
   1196a:	b174      	cbz	r4, 1198a <conf_commit+0x2a>
        ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   1196c:	aa02      	add	r2, sp, #8
   1196e:	a901      	add	r1, sp, #4
   11970:	4620      	mov	r0, r4
   11972:	f7ff ff25 	bl	117c0 <conf_parse_and_lookup>
        if (!ch) {
   11976:	b1a0      	cbz	r0, 119a2 <conf_commit+0x42>
            rc = OS_INVALID_PARM;
            goto out;
        }
        if (ch->ch_commit) {
   11978:	6904      	ldr	r4, [r0, #16]
   1197a:	b10c      	cbz	r4, 11980 <conf_commit+0x20>
            rc = ch->ch_commit();
   1197c:	47a0      	blx	r4
   1197e:	4604      	mov	r4, r0
                }
            }
        }
    }
out:
    conf_unlock();
   11980:	f7ff fee0 	bl	11744 <conf_unlock>
    return rc;
}
   11984:	4620      	mov	r0, r4
   11986:	b00b      	add	sp, #44	; 0x2c
   11988:	bd30      	pop	{r4, r5, pc}
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   1198a:	4b07      	ldr	r3, [pc, #28]	; (119a8 <conf_commit+0x48>)
   1198c:	681d      	ldr	r5, [r3, #0]
   1198e:	2d00      	cmp	r5, #0
   11990:	d0f6      	beq.n	11980 <conf_commit+0x20>
            if (ch->ch_commit) {
   11992:	692b      	ldr	r3, [r5, #16]
   11994:	b11b      	cbz	r3, 1199e <conf_commit+0x3e>
                rc2 = ch->ch_commit();
   11996:	4798      	blx	r3
                    rc = rc2;
   11998:	2c00      	cmp	r4, #0
   1199a:	bf08      	it	eq
   1199c:	4604      	moveq	r4, r0
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   1199e:	682d      	ldr	r5, [r5, #0]
   119a0:	e7f5      	b.n	1198e <conf_commit+0x2e>
            rc = OS_INVALID_PARM;
   119a2:	2403      	movs	r4, #3
   119a4:	e7ec      	b.n	11980 <conf_commit+0x20>
   119a6:	bf00      	nop
   119a8:	20003d84 	.word	0x20003d84

000119ac <conf_running_one>:

#if (MYNEWT_VAL(CONFIG_CLI_RW) & 1) == 1
static void
conf_running_one(char *name, char *val)
{
    console_printf("%s = %s\n", name, val ? val : "<del>");
   119ac:	4a03      	ldr	r2, [pc, #12]	; (119bc <conf_running_one+0x10>)
   119ae:	2900      	cmp	r1, #0
   119b0:	bf18      	it	ne
   119b2:	460a      	movne	r2, r1
   119b4:	4601      	mov	r1, r0
   119b6:	4802      	ldr	r0, [pc, #8]	; (119c0 <conf_running_one+0x14>)
   119b8:	f000 be0c 	b.w	125d4 <console_printf>
   119bc:	0002275f 	.word	0x0002275f
   119c0:	00022765 	.word	0x00022765

000119c4 <shell_conf_command>:
}
#endif

static int
shell_conf_command(int argc, char **argv)
{
   119c4:	b530      	push	{r4, r5, lr}
    char *val = NULL;
    char tmp_buf[CONF_MAX_VAL_LEN + 1];
    int rc;

    (void)rc;
    switch (argc) {
   119c6:	2802      	cmp	r0, #2
{
   119c8:	b0c3      	sub	sp, #268	; 0x10c
    switch (argc) {
   119ca:	d005      	beq.n	119d8 <shell_conf_command+0x14>
   119cc:	2803      	cmp	r0, #3
   119ce:	d016      	beq.n	119fe <shell_conf_command+0x3a>
        }
    }
    return 0;
err:
#endif
    console_printf("Invalid args\n");
   119d0:	482c      	ldr	r0, [pc, #176]	; (11a84 <shell_conf_command+0xc0>)
   119d2:	f000 fdff 	bl	125d4 <console_printf>
    return 0;
   119d6:	e028      	b.n	11a2a <shell_conf_command+0x66>
        name = argv[1];
   119d8:	684c      	ldr	r4, [r1, #4]
    char *val = NULL;
   119da:	2500      	movs	r5, #0
    if (!strcmp(name, "commit")) {
   119dc:	492a      	ldr	r1, [pc, #168]	; (11a88 <shell_conf_command+0xc4>)
   119de:	4620      	mov	r0, r4
   119e0:	f7fd fe32 	bl	f648 <strcmp>
   119e4:	b970      	cbnz	r0, 11a04 <shell_conf_command+0x40>
        rc = conf_commit(val);
   119e6:	4628      	mov	r0, r5
   119e8:	f7ff ffba 	bl	11960 <conf_commit>
        console_printf("%s", val);
   119ec:	4a27      	ldr	r2, [pc, #156]	; (11a8c <shell_conf_command+0xc8>)
   119ee:	4928      	ldr	r1, [pc, #160]	; (11a90 <shell_conf_command+0xcc>)
   119f0:	2800      	cmp	r0, #0
   119f2:	bf18      	it	ne
   119f4:	4611      	movne	r1, r2
   119f6:	4827      	ldr	r0, [pc, #156]	; (11a94 <shell_conf_command+0xd0>)
        console_printf("%s\n", val);
   119f8:	f000 fdec 	bl	125d4 <console_printf>
   119fc:	e015      	b.n	11a2a <shell_conf_command+0x66>
        val = argv[2];
   119fe:	e9d1 4501 	ldrd	r4, r5, [r1, #4]
        break;
   11a02:	e7eb      	b.n	119dc <shell_conf_command+0x18>
        if (!strcmp(name, "dump")) {
   11a04:	4924      	ldr	r1, [pc, #144]	; (11a98 <shell_conf_command+0xd4>)
   11a06:	4620      	mov	r0, r4
   11a08:	f7fd fe1e 	bl	f648 <strcmp>
   11a0c:	b9b8      	cbnz	r0, 11a3e <shell_conf_command+0x7a>
            if (!val || !strcmp(val, "running")) {
   11a0e:	b125      	cbz	r5, 11a1a <shell_conf_command+0x56>
   11a10:	4922      	ldr	r1, [pc, #136]	; (11a9c <shell_conf_command+0xd8>)
   11a12:	4628      	mov	r0, r5
   11a14:	f7fd fe18 	bl	f648 <strcmp>
   11a18:	b938      	cbnz	r0, 11a2a <shell_conf_command+0x66>
    conf_lock();
   11a1a:	f7ff fe8b 	bl	11734 <conf_lock>
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   11a1e:	4b20      	ldr	r3, [pc, #128]	; (11aa0 <shell_conf_command+0xdc>)
            ch->ch_export(conf_running_one, CONF_EXPORT_SHOW);
   11a20:	4d20      	ldr	r5, [pc, #128]	; (11aa4 <shell_conf_command+0xe0>)
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   11a22:	681c      	ldr	r4, [r3, #0]
   11a24:	b924      	cbnz	r4, 11a30 <shell_conf_command+0x6c>
    conf_unlock();
   11a26:	f7ff fe8d 	bl	11744 <conf_unlock>
}
   11a2a:	2000      	movs	r0, #0
   11a2c:	b043      	add	sp, #268	; 0x10c
   11a2e:	bd30      	pop	{r4, r5, pc}
        if (ch->ch_export) {
   11a30:	6963      	ldr	r3, [r4, #20]
   11a32:	b113      	cbz	r3, 11a3a <shell_conf_command+0x76>
            ch->ch_export(conf_running_one, CONF_EXPORT_SHOW);
   11a34:	2101      	movs	r1, #1
   11a36:	4628      	mov	r0, r5
   11a38:	4798      	blx	r3
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   11a3a:	6824      	ldr	r4, [r4, #0]
   11a3c:	e7f2      	b.n	11a24 <shell_conf_command+0x60>
            if (!strcmp(name, "save")) {
   11a3e:	491a      	ldr	r1, [pc, #104]	; (11aa8 <shell_conf_command+0xe4>)
   11a40:	4620      	mov	r0, r4
   11a42:	f7fd fe01 	bl	f648 <strcmp>
   11a46:	b910      	cbnz	r0, 11a4e <shell_conf_command+0x8a>
                conf_save();
   11a48:	f000 f8e6 	bl	11c18 <conf_save>
                return 0;
   11a4c:	e7ed      	b.n	11a2a <shell_conf_command+0x66>
    if (!val) {
   11a4e:	b96d      	cbnz	r5, 11a6c <shell_conf_command+0xa8>
        val = conf_get_value(name, tmp_buf, sizeof(tmp_buf));
   11a50:	a901      	add	r1, sp, #4
   11a52:	f240 1201 	movw	r2, #257	; 0x101
   11a56:	4620      	mov	r0, r4
   11a58:	f7ff ff66 	bl	11928 <conf_get_value>
        if (!val) {
   11a5c:	4601      	mov	r1, r0
   11a5e:	b918      	cbnz	r0, 11a68 <shell_conf_command+0xa4>
            console_printf("Cannot display value\n");
   11a60:	4812      	ldr	r0, [pc, #72]	; (11aac <shell_conf_command+0xe8>)
   11a62:	f000 fdb7 	bl	125d4 <console_printf>
            goto err;
   11a66:	e7b3      	b.n	119d0 <shell_conf_command+0xc>
        console_printf("%s\n", val);
   11a68:	4811      	ldr	r0, [pc, #68]	; (11ab0 <shell_conf_command+0xec>)
   11a6a:	e7c5      	b.n	119f8 <shell_conf_command+0x34>
        rc = conf_set_value(name, val);
   11a6c:	4629      	mov	r1, r5
   11a6e:	4620      	mov	r0, r4
   11a70:	f7ff ff40 	bl	118f4 <conf_set_value>
        if (rc) {
   11a74:	4601      	mov	r1, r0
   11a76:	2800      	cmp	r0, #0
   11a78:	d0d7      	beq.n	11a2a <shell_conf_command+0x66>
            console_printf("Failed to set, err: %d\n", rc);
   11a7a:	480e      	ldr	r0, [pc, #56]	; (11ab4 <shell_conf_command+0xf0>)
   11a7c:	f000 fdaa 	bl	125d4 <console_printf>
            goto err;
   11a80:	e7a6      	b.n	119d0 <shell_conf_command+0xc>
   11a82:	bf00      	nop
   11a84:	000227c8 	.word	0x000227c8
   11a88:	00022786 	.word	0x00022786
   11a8c:	0002276e 	.word	0x0002276e
   11a90:	00022780 	.word	0x00022780
   11a94:	00022f05 	.word	0x00022f05
   11a98:	00021fdd 	.word	0x00021fdd
   11a9c:	0002278d 	.word	0x0002278d
   11aa0:	20003d84 	.word	0x20003d84
   11aa4:	000119ad 	.word	0x000119ad
   11aa8:	00022795 	.word	0x00022795
   11aac:	0002279a 	.word	0x0002279a
   11ab0:	00022e9f 	.word	0x00022e9f
   11ab4:	000227b0 	.word	0x000227b0

00011ab8 <conf_cli_register>:

int
conf_cli_register(void)
{
    return shell_cmd_register(&shell_conf_cmd);
   11ab8:	4801      	ldr	r0, [pc, #4]	; (11ac0 <conf_cli_register+0x8>)
   11aba:	f002 b8bf 	b.w	13c3c <shell_cmd_register>
   11abe:	bf00      	nop
   11ac0:	20000708 	.word	0x20000708

00011ac4 <conf_load_cb>:
    conf_save_dst = cs;
}

static void
conf_load_cb(char *name, char *val, void *cb_arg)
{
   11ac4:	b538      	push	{r3, r4, r5, lr}
   11ac6:	4604      	mov	r4, r0
   11ac8:	460d      	mov	r5, r1
    if (!cb_arg || !strcmp((char*)cb_arg, name)) {
   11aca:	4610      	mov	r0, r2
   11acc:	b11a      	cbz	r2, 11ad6 <conf_load_cb+0x12>
   11ace:	4621      	mov	r1, r4
   11ad0:	f7fd fdba 	bl	f648 <strcmp>
   11ad4:	b928      	cbnz	r0, 11ae2 <conf_load_cb+0x1e>
        /* If cb_arg is set, set specific conf value
         * If cb_arg is not set, just set the value
         * anyways
         */
        conf_set_value(name, val);
   11ad6:	4629      	mov	r1, r5
   11ad8:	4620      	mov	r0, r4
    }
}
   11ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        conf_set_value(name, val);
   11ade:	f7ff bf09 	b.w	118f4 <conf_set_value>
}
   11ae2:	bd38      	pop	{r3, r4, r5, pc}

00011ae4 <conf_dup_check_cb>:
    return 0;
}

static void
conf_dup_check_cb(char *name, char *val, void *cb_arg)
{
   11ae4:	b538      	push	{r3, r4, r5, lr}
   11ae6:	460d      	mov	r5, r1
    struct conf_dup_check_arg *cdca = (struct conf_dup_check_arg *)cb_arg;

    if (strcmp(name, cdca->name)) {
   11ae8:	6811      	ldr	r1, [r2, #0]
{
   11aea:	4614      	mov	r4, r2
    if (strcmp(name, cdca->name)) {
   11aec:	f7fd fdac 	bl	f648 <strcmp>
   11af0:	b930      	cbnz	r0, 11b00 <conf_dup_check_cb+0x1c>
        return;
    }
    if (!val) {
        if (!cdca->val || cdca->val[0] == '\0') {
   11af2:	6861      	ldr	r1, [r4, #4]
    if (!val) {
   11af4:	b92d      	cbnz	r5, 11b02 <conf_dup_check_cb+0x1e>
        if (!cdca->val || cdca->val[0] == '\0') {
   11af6:	b109      	cbz	r1, 11afc <conf_dup_check_cb+0x18>
   11af8:	780b      	ldrb	r3, [r1, #0]
   11afa:	b943      	cbnz	r3, 11b0e <conf_dup_check_cb+0x2a>
            cdca->is_dup = 1;
   11afc:	2301      	movs	r3, #1
        } else {
            cdca->is_dup = 0;
   11afe:	60a3      	str	r3, [r4, #8]
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
        }
    }
}
   11b00:	bd38      	pop	{r3, r4, r5, pc}
        if (cdca->val && !strcmp(val, cdca->val)) {
   11b02:	b121      	cbz	r1, 11b0e <conf_dup_check_cb+0x2a>
   11b04:	4628      	mov	r0, r5
   11b06:	f7fd fd9f 	bl	f648 <strcmp>
   11b0a:	2800      	cmp	r0, #0
   11b0c:	d0f6      	beq.n	11afc <conf_dup_check_cb+0x18>
            cdca->is_dup = 0;
   11b0e:	2300      	movs	r3, #0
   11b10:	e7f5      	b.n	11afe <conf_dup_check_cb+0x1a>
	...

00011b14 <conf_src_register>:
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   11b14:	4908      	ldr	r1, [pc, #32]	; (11b38 <conf_src_register+0x24>)
{
   11b16:	b510      	push	{r4, lr}
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   11b18:	680c      	ldr	r4, [r1, #0]
    prev = NULL;
   11b1a:	2300      	movs	r3, #0
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   11b1c:	4622      	mov	r2, r4
   11b1e:	b91a      	cbnz	r2, 11b28 <conf_src_register+0x14>
    if (!prev) {
   11b20:	b92b      	cbnz	r3, 11b2e <conf_src_register+0x1a>
        SLIST_INSERT_HEAD(&conf_load_srcs, cs, cs_next);
   11b22:	6004      	str	r4, [r0, #0]
   11b24:	6008      	str	r0, [r1, #0]
}
   11b26:	bd10      	pop	{r4, pc}
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   11b28:	4613      	mov	r3, r2
   11b2a:	6812      	ldr	r2, [r2, #0]
   11b2c:	e7f7      	b.n	11b1e <conf_src_register+0xa>
        SLIST_INSERT_AFTER(prev, cs, cs_next);
   11b2e:	681a      	ldr	r2, [r3, #0]
   11b30:	6002      	str	r2, [r0, #0]
   11b32:	6018      	str	r0, [r3, #0]
}
   11b34:	e7f7      	b.n	11b26 <conf_src_register+0x12>
   11b36:	bf00      	nop
   11b38:	20003d94 	.word	0x20003d94

00011b3c <conf_dst_register>:
    conf_save_dst = cs;
   11b3c:	4b01      	ldr	r3, [pc, #4]	; (11b44 <conf_dst_register+0x8>)
   11b3e:	6018      	str	r0, [r3, #0]
}
   11b40:	4770      	bx	lr
   11b42:	bf00      	nop
   11b44:	20003d9c 	.word	0x20003d9c

00011b48 <conf_load>:
{
   11b48:	b570      	push	{r4, r5, r6, lr}
    conf_lock();
   11b4a:	f7ff fdf3 	bl	11734 <conf_lock>
    conf_loading = true;
   11b4e:	4d0f      	ldr	r5, [pc, #60]	; (11b8c <conf_load+0x44>)
    conf_loaded = true;
   11b50:	4a0f      	ldr	r2, [pc, #60]	; (11b90 <conf_load+0x48>)
        cs->cs_itf->csi_load(cs, conf_load_cb, NULL);
   11b52:	4e10      	ldr	r6, [pc, #64]	; (11b94 <conf_load+0x4c>)
    conf_loaded = true;
   11b54:	2301      	movs	r3, #1
   11b56:	7013      	strb	r3, [r2, #0]
    conf_loading = true;
   11b58:	702b      	strb	r3, [r5, #0]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   11b5a:	4b0f      	ldr	r3, [pc, #60]	; (11b98 <conf_load+0x50>)
   11b5c:	681c      	ldr	r4, [r3, #0]
   11b5e:	b93c      	cbnz	r4, 11b70 <conf_load+0x28>
    conf_loading = false;
   11b60:	702c      	strb	r4, [r5, #0]
    conf_unlock();
   11b62:	f7ff fdef 	bl	11744 <conf_unlock>
    return conf_commit(NULL);
   11b66:	4620      	mov	r0, r4
}
   11b68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return conf_commit(NULL);
   11b6c:	f7ff bef8 	b.w	11960 <conf_commit>
        cs->cs_itf->csi_load(cs, conf_load_cb, NULL);
   11b70:	6863      	ldr	r3, [r4, #4]
   11b72:	2200      	movs	r2, #0
   11b74:	681b      	ldr	r3, [r3, #0]
   11b76:	4631      	mov	r1, r6
   11b78:	4620      	mov	r0, r4
   11b7a:	4798      	blx	r3
        if (SLIST_NEXT(cs, cs_next)) {
   11b7c:	6823      	ldr	r3, [r4, #0]
   11b7e:	b113      	cbz	r3, 11b86 <conf_load+0x3e>
            conf_commit(NULL);
   11b80:	2000      	movs	r0, #0
   11b82:	f7ff feed 	bl	11960 <conf_commit>
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   11b86:	6824      	ldr	r4, [r4, #0]
   11b88:	e7e9      	b.n	11b5e <conf_load+0x16>
   11b8a:	bf00      	nop
   11b8c:	20003d99 	.word	0x20003d99
   11b90:	20003d98 	.word	0x20003d98
   11b94:	00011ac5 	.word	0x00011ac5
   11b98:	20003d94 	.word	0x20003d94

00011b9c <conf_ensure_loaded>:
    if (conf_loaded) {
   11b9c:	4b03      	ldr	r3, [pc, #12]	; (11bac <conf_ensure_loaded+0x10>)
   11b9e:	781b      	ldrb	r3, [r3, #0]
   11ba0:	b90b      	cbnz	r3, 11ba6 <conf_ensure_loaded+0xa>
    return conf_load();
   11ba2:	f7ff bfd1 	b.w	11b48 <conf_load>
}
   11ba6:	2000      	movs	r0, #0
   11ba8:	4770      	bx	lr
   11baa:	bf00      	nop
   11bac:	20003d98 	.word	0x20003d98

00011bb0 <conf_save_one>:
/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int
conf_save_one(const char *name, char *value)
{
   11bb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    struct conf_store *cs;
    struct conf_dup_check_arg cdca;
    int rc;

    conf_lock();
    if (!conf_save_dst) {
   11bb4:	4f14      	ldr	r7, [pc, #80]	; (11c08 <conf_save_one+0x58>)
{
   11bb6:	4605      	mov	r5, r0
   11bb8:	460e      	mov	r6, r1
    conf_lock();
   11bba:	f7ff fdbb 	bl	11734 <conf_lock>
    if (!conf_save_dst) {
   11bbe:	683b      	ldr	r3, [r7, #0]
   11bc0:	b303      	cbz	r3, 11c04 <conf_save_one+0x54>
    /*
     * Check if we're writing the same value again.
     */
    cdca.name = name;
    cdca.val = value;
    cdca.is_dup = 0;
   11bc2:	2300      	movs	r3, #0
   11bc4:	9303      	str	r3, [sp, #12]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   11bc6:	4b11      	ldr	r3, [pc, #68]	; (11c0c <conf_save_one+0x5c>)
        cs->cs_itf->csi_load(cs, conf_dup_check_cb, &cdca);
   11bc8:	f8df 8044 	ldr.w	r8, [pc, #68]	; 11c10 <conf_save_one+0x60>
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   11bcc:	681c      	ldr	r4, [r3, #0]
    cdca.val = value;
   11bce:	e9cd 5601 	strd	r5, r6, [sp, #4]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   11bd2:	b97c      	cbnz	r4, 11bf4 <conf_save_one+0x44>
    }
    if (cdca.is_dup == 1) {
   11bd4:	9b03      	ldr	r3, [sp, #12]
   11bd6:	2b01      	cmp	r3, #1
   11bd8:	d006      	beq.n	11be8 <conf_save_one+0x38>
        rc = 0;
        goto out;
    }
    cs = conf_save_dst;
   11bda:	6838      	ldr	r0, [r7, #0]
    rc = cs->cs_itf->csi_save(cs, name, value);
   11bdc:	6843      	ldr	r3, [r0, #4]
   11bde:	4632      	mov	r2, r6
   11be0:	689b      	ldr	r3, [r3, #8]
   11be2:	4629      	mov	r1, r5
   11be4:	4798      	blx	r3
   11be6:	4604      	mov	r4, r0
out:
    conf_unlock();
   11be8:	f7ff fdac 	bl	11744 <conf_unlock>
    return rc;
}
   11bec:	4620      	mov	r0, r4
   11bee:	b004      	add	sp, #16
   11bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        cs->cs_itf->csi_load(cs, conf_dup_check_cb, &cdca);
   11bf4:	6863      	ldr	r3, [r4, #4]
   11bf6:	4620      	mov	r0, r4
   11bf8:	681b      	ldr	r3, [r3, #0]
   11bfa:	aa01      	add	r2, sp, #4
   11bfc:	4641      	mov	r1, r8
   11bfe:	4798      	blx	r3
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   11c00:	6824      	ldr	r4, [r4, #0]
   11c02:	e7e6      	b.n	11bd2 <conf_save_one+0x22>
        rc = OS_ENOENT;
   11c04:	240a      	movs	r4, #10
   11c06:	e7ef      	b.n	11be8 <conf_save_one+0x38>
   11c08:	20003d9c 	.word	0x20003d9c
   11c0c:	20003d94 	.word	0x20003d94
   11c10:	00011ae5 	.word	0x00011ae5

00011c14 <conf_store_one>:

static void
conf_store_one(char *name, char *value)
{
    conf_save_one(name, value);
   11c14:	f7ff bfcc 	b.w	11bb0 <conf_save_one>

00011c18 <conf_save>:
 * Walk through all registered subsystems, and ask them to export their
 * config variables. Persist these settings.
 */
int
conf_save(void)
{
   11c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct conf_store *cs;
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
   11c1a:	f7ff fd8b 	bl	11734 <conf_lock>
    cs = conf_save_dst;
   11c1e:	4b11      	ldr	r3, [pc, #68]	; (11c64 <conf_save+0x4c>)
   11c20:	681d      	ldr	r5, [r3, #0]
    if (!cs) {
   11c22:	b1e5      	cbz	r5, 11c5e <conf_save+0x46>
        rc = OS_ENOENT;
        goto out;
    }

    if (cs->cs_itf->csi_save_start) {
   11c24:	686b      	ldr	r3, [r5, #4]
   11c26:	685b      	ldr	r3, [r3, #4]
   11c28:	b10b      	cbz	r3, 11c2e <conf_save+0x16>
        cs->cs_itf->csi_save_start(cs);
   11c2a:	4628      	mov	r0, r5
   11c2c:	4798      	blx	r3
    }
    rc = 0;
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   11c2e:	4b0e      	ldr	r3, [pc, #56]	; (11c68 <conf_save+0x50>)
        if (ch->ch_export) {
            rc2 = ch->ch_export(conf_store_one, CONF_EXPORT_PERSIST);
   11c30:	4f0e      	ldr	r7, [pc, #56]	; (11c6c <conf_save+0x54>)
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   11c32:	681e      	ldr	r6, [r3, #0]
    rc = 0;
   11c34:	2400      	movs	r4, #0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   11c36:	b946      	cbnz	r6, 11c4a <conf_save+0x32>
            if (!rc) {
                rc = rc2;
            }
        }
    }
    if (cs->cs_itf->csi_save_end) {
   11c38:	686b      	ldr	r3, [r5, #4]
   11c3a:	68db      	ldr	r3, [r3, #12]
   11c3c:	b10b      	cbz	r3, 11c42 <conf_save+0x2a>
        cs->cs_itf->csi_save_end(cs);
   11c3e:	4628      	mov	r0, r5
   11c40:	4798      	blx	r3
    }
out:
    conf_unlock();
   11c42:	f7ff fd7f 	bl	11744 <conf_unlock>
    return rc;
}
   11c46:	4620      	mov	r0, r4
   11c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (ch->ch_export) {
   11c4a:	6973      	ldr	r3, [r6, #20]
   11c4c:	b12b      	cbz	r3, 11c5a <conf_save+0x42>
            rc2 = ch->ch_export(conf_store_one, CONF_EXPORT_PERSIST);
   11c4e:	2100      	movs	r1, #0
   11c50:	4638      	mov	r0, r7
   11c52:	4798      	blx	r3
                rc = rc2;
   11c54:	2c00      	cmp	r4, #0
   11c56:	bf08      	it	eq
   11c58:	4604      	moveq	r4, r0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   11c5a:	6836      	ldr	r6, [r6, #0]
   11c5c:	e7eb      	b.n	11c36 <conf_save+0x1e>
        rc = OS_ENOENT;
   11c5e:	240a      	movs	r4, #10
   11c60:	e7ef      	b.n	11c42 <conf_save+0x2a>
   11c62:	bf00      	nop
   11c64:	20003d9c 	.word	0x20003d9c
   11c68:	20003d84 	.word	0x20003d84
   11c6c:	00011c15 	.word	0x00011c15

00011c70 <conf_store_init>:

void
conf_store_init(void)
{
    conf_loaded = false;
   11c70:	4a02      	ldr	r2, [pc, #8]	; (11c7c <conf_store_init+0xc>)
   11c72:	2300      	movs	r3, #0
   11c74:	7013      	strb	r3, [r2, #0]
    SLIST_INIT(&conf_load_srcs);
   11c76:	4a02      	ldr	r2, [pc, #8]	; (11c80 <conf_store_init+0x10>)
   11c78:	6013      	str	r3, [r2, #0]
}
   11c7a:	4770      	bx	lr
   11c7c:	20003d98 	.word	0x20003d98
   11c80:	20003d94 	.word	0x20003d94

00011c84 <console_echo>:
}

void
console_echo(int on)
{
    echo = on;
   11c84:	4b01      	ldr	r3, [pc, #4]	; (11c8c <console_echo+0x8>)
   11c86:	6018      	str	r0, [r3, #0]
}
   11c88:	4770      	bx	lr
   11c8a:	bf00      	nop
   11c8c:	20000718 	.word	0x20000718

00011c90 <console_lock>:

int
console_lock(int timeout)
{
   11c90:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   11c92:	4b09      	ldr	r3, [pc, #36]	; (11cb8 <console_lock+0x28>)
   11c94:	685b      	ldr	r3, [r3, #4]
   11c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
   11c9a:	4601      	mov	r1, r0
    int rc = OS_OK;

    /* Locking from isr while some task own mutex fails with OS_EBUSY */
    if (os_arch_in_isr()) {
   11c9c:	b123      	cbz	r3, 11ca8 <console_lock+0x18>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
   11c9e:	4b07      	ldr	r3, [pc, #28]	; (11cbc <console_lock+0x2c>)
        if (os_mutex_get_level(&console_write_lock)) {
   11ca0:	88db      	ldrh	r3, [r3, #6]
   11ca2:	b93b      	cbnz	r3, 11cb4 <console_lock+0x24>
    int rc = OS_OK;
   11ca4:	2000      	movs	r0, #0
        rc = OS_OK;
    }

end:
    return rc;
}
   11ca6:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&console_write_lock, timeout);
   11ca8:	4804      	ldr	r0, [pc, #16]	; (11cbc <console_lock+0x2c>)
   11caa:	f7f8 fd5f 	bl	a76c <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
   11cae:	2809      	cmp	r0, #9
   11cb0:	d1f9      	bne.n	11ca6 <console_lock+0x16>
   11cb2:	e7f7      	b.n	11ca4 <console_lock+0x14>
            rc = OS_EBUSY;
   11cb4:	200b      	movs	r0, #11
    return rc;
   11cb6:	e7f6      	b.n	11ca6 <console_lock+0x16>
   11cb8:	e000ed00 	.word	0xe000ed00
   11cbc:	200045ec 	.word	0x200045ec

00011cc0 <console_unlock>:
   11cc0:	4b0a      	ldr	r3, [pc, #40]	; (11cec <console_unlock+0x2c>)

int
console_unlock(void)
{
   11cc2:	b510      	push	{r4, lr}
   11cc4:	685c      	ldr	r4, [r3, #4]
   11cc6:	f3c4 0408 	ubfx	r4, r4, #0, #9
    int rc = OS_OK;

    if (os_arch_in_isr()) {
   11cca:	b964      	cbnz	r4, 11ce6 <console_unlock+0x26>
        goto end;
    }

    rc = os_mutex_release(&console_write_lock);
   11ccc:	4808      	ldr	r0, [pc, #32]	; (11cf0 <console_unlock+0x30>)
   11cce:	f7f8 fcfb 	bl	a6c8 <os_mutex_release>
   11cd2:	4603      	mov	r3, r0
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
   11cd4:	b138      	cbz	r0, 11ce6 <console_unlock+0x26>
   11cd6:	2809      	cmp	r0, #9
   11cd8:	d006      	beq.n	11ce8 <console_unlock+0x28>
   11cda:	4623      	mov	r3, r4
   11cdc:	4622      	mov	r2, r4
   11cde:	4621      	mov	r1, r4
   11ce0:	4620      	mov	r0, r4
   11ce2:	f7f7 f907 	bl	8ef4 <__assert_func>
    int rc = OS_OK;
   11ce6:	2300      	movs	r3, #0
end:
    return rc;
}
   11ce8:	4618      	mov	r0, r3
   11cea:	bd10      	pop	{r4, pc}
   11cec:	e000ed00 	.word	0xe000ed00
   11cf0:	200045ec 	.word	0x200045ec

00011cf4 <console_out>:

int
console_out(int c)
{
   11cf4:	b510      	push	{r4, lr}
   11cf6:	4604      	mov	r4, r0
    int rc;
    const os_time_t timeout =
        os_time_ms_to_ticks32(MYNEWT_VAL(CONSOLE_DEFAULT_LOCK_TIMEOUT));

    if (console_lock(timeout) != OS_OK) {
   11cf8:	2080      	movs	r0, #128	; 0x80
   11cfa:	f7ff ffc9 	bl	11c90 <console_lock>
   11cfe:	b928      	cbnz	r0, 11d0c <console_out+0x18>
        return c;
    }
    rc = console_out_nolock(c);
   11d00:	4620      	mov	r0, r4
   11d02:	f000 fcd1 	bl	126a8 <console_out_nolock>
   11d06:	4604      	mov	r4, r0

    (void)console_unlock();
   11d08:	f7ff ffda 	bl	11cc0 <console_unlock>

    return rc;
}
   11d0c:	4620      	mov	r0, r4
   11d0e:	bd10      	pop	{r4, pc}

00011d10 <console_append_char>:
    }
}

static int
console_append_char(char *line, uint8_t byte)
{
   11d10:	b510      	push	{r4, lr}
    if (cur + end >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   11d12:	4a0b      	ldr	r2, [pc, #44]	; (11d40 <console_append_char+0x30>)
   11d14:	4c0b      	ldr	r4, [pc, #44]	; (11d44 <console_append_char+0x34>)
   11d16:	8812      	ldrh	r2, [r2, #0]
   11d18:	8823      	ldrh	r3, [r4, #0]
   11d1a:	4413      	add	r3, r2
   11d1c:	2bfe      	cmp	r3, #254	; 0xfe
   11d1e:	dc0c      	bgt.n	11d3a <console_append_char+0x2a>
        return 0;
    }

    line[cur + end] = byte;
   11d20:	54c1      	strb	r1, [r0, r3]

    if (byte == '\0') {
   11d22:	b141      	cbz	r1, 11d36 <console_append_char+0x26>
        return 1;
    }

    if (echo) {
   11d24:	4b08      	ldr	r3, [pc, #32]	; (11d48 <console_append_char+0x38>)
   11d26:	681b      	ldr	r3, [r3, #0]
   11d28:	b113      	cbz	r3, 11d30 <console_append_char+0x20>
        /* Echo back to console */
        console_out(byte);
   11d2a:	4608      	mov	r0, r1
   11d2c:	f7ff ffe2 	bl	11cf4 <console_out>
    }
    ++cur;
   11d30:	8823      	ldrh	r3, [r4, #0]
   11d32:	3301      	adds	r3, #1
   11d34:	8023      	strh	r3, [r4, #0]
        return 1;
   11d36:	2001      	movs	r0, #1
   11d38:	e000      	b.n	11d3c <console_append_char+0x2c>
        return 0;
   11d3a:	2000      	movs	r0, #0
    return 1;
}
   11d3c:	bd10      	pop	{r4, pc}
   11d3e:	bf00      	nop
   11d40:	200045fa 	.word	0x200045fa
   11d44:	200045f8 	.word	0x200045f8
   11d48:	20000718 	.word	0x20000718

00011d4c <cursor_save>:
{
   11d4c:	b508      	push	{r3, lr}
    console_out(ESC);
   11d4e:	201b      	movs	r0, #27
   11d50:	f7ff ffd0 	bl	11cf4 <console_out>
    console_out('[');
   11d54:	205b      	movs	r0, #91	; 0x5b
   11d56:	f7ff ffcd 	bl	11cf4 <console_out>
}
   11d5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    console_out('s');
   11d5e:	2073      	movs	r0, #115	; 0x73
   11d60:	f7ff bfc8 	b.w	11cf4 <console_out>

00011d64 <cursor_restore>:
{
   11d64:	b508      	push	{r3, lr}
    console_out(ESC);
   11d66:	201b      	movs	r0, #27
   11d68:	f7ff ffc4 	bl	11cf4 <console_out>
    console_out('[');
   11d6c:	205b      	movs	r0, #91	; 0x5b
   11d6e:	f7ff ffc1 	bl	11cf4 <console_out>
}
   11d72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    console_out('u');
   11d76:	2075      	movs	r0, #117	; 0x75
   11d78:	f7ff bfbc 	b.w	11cf4 <console_out>

00011d7c <del_char>:
{
   11d7c:	b538      	push	{r3, r4, r5, lr}
   11d7e:	4604      	mov	r4, r0
   11d80:	460d      	mov	r5, r1
    console_out('\b');
   11d82:	2008      	movs	r0, #8
   11d84:	f7ff ffb6 	bl	11cf4 <console_out>
    if (end == 0) {
   11d88:	b93d      	cbnz	r5, 11d9a <del_char+0x1e>
        console_out(' ');
   11d8a:	2020      	movs	r0, #32
   11d8c:	f7ff ffb2 	bl	11cf4 <console_out>
}
   11d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        console_out('\b');
   11d94:	2008      	movs	r0, #8
   11d96:	f7ff bfad 	b.w	11cf4 <console_out>
    cursor_save();
   11d9a:	f7ff ffd7 	bl	11d4c <cursor_save>
    while (end-- > 0) {
   11d9e:	4425      	add	r5, r4
   11da0:	42ac      	cmp	r4, r5
   11da2:	d106      	bne.n	11db2 <del_char+0x36>
    console_out(' ');
   11da4:	2020      	movs	r0, #32
   11da6:	f7ff ffa5 	bl	11cf4 <console_out>
}
   11daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cursor_restore();
   11dae:	f7ff bfd9 	b.w	11d64 <cursor_restore>
        *pos = *(pos + 1);
   11db2:	7860      	ldrb	r0, [r4, #1]
   11db4:	f804 0b01 	strb.w	r0, [r4], #1
        console_out(*(pos++));
   11db8:	f7ff ff9c 	bl	11cf4 <console_out>
   11dbc:	e7f0      	b.n	11da0 <del_char+0x24>
	...

00011dc0 <insert_char>:
{
   11dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (cur + end >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   11dc2:	4e14      	ldr	r6, [pc, #80]	; (11e14 <insert_char+0x54>)
   11dc4:	8833      	ldrh	r3, [r6, #0]
   11dc6:	4413      	add	r3, r2
   11dc8:	2bfe      	cmp	r3, #254	; 0xfe
{
   11dca:	4605      	mov	r5, r0
   11dcc:	460f      	mov	r7, r1
   11dce:	4614      	mov	r4, r2
    if (cur + end >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   11dd0:	dc0a      	bgt.n	11de8 <insert_char+0x28>
    if (echo) {
   11dd2:	4b11      	ldr	r3, [pc, #68]	; (11e18 <insert_char+0x58>)
   11dd4:	681b      	ldr	r3, [r3, #0]
   11dd6:	b113      	cbz	r3, 11dde <insert_char+0x1e>
        console_out(c);
   11dd8:	4608      	mov	r0, r1
   11dda:	f7ff ff8b 	bl	11cf4 <console_out>
    ++cur;
   11dde:	8833      	ldrh	r3, [r6, #0]
   11de0:	3301      	adds	r3, #1
   11de2:	8033      	strh	r3, [r6, #0]
    if (end == 0) {
   11de4:	b90c      	cbnz	r4, 11dea <insert_char+0x2a>
        *pos = c;
   11de6:	702f      	strb	r7, [r5, #0]
}
   11de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp = *pos;
   11dea:	782e      	ldrb	r6, [r5, #0]
    *(pos++) = c;
   11dec:	f805 7b01 	strb.w	r7, [r5], #1
    cursor_save();
   11df0:	f7ff ffac 	bl	11d4c <cursor_save>
        console_out(tmp);
   11df4:	4630      	mov	r0, r6
   11df6:	3c01      	subs	r4, #1
   11df8:	f7ff ff7c 	bl	11cf4 <console_out>
        c = *pos;
   11dfc:	b2a4      	uxth	r4, r4
   11dfe:	4633      	mov	r3, r6
   11e00:	782e      	ldrb	r6, [r5, #0]
        *(pos++) = tmp;
   11e02:	f805 3b01 	strb.w	r3, [r5], #1
    while (end-- > 0) {
   11e06:	2c00      	cmp	r4, #0
   11e08:	d1f4      	bne.n	11df4 <insert_char+0x34>
}
   11e0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cursor_restore();
   11e0e:	f7ff bfa9 	b.w	11d64 <cursor_restore>
   11e12:	bf00      	nop
   11e14:	200045f8 	.word	0x200045f8
   11e18:	20000718 	.word	0x20000718

00011e1c <handle_ansi>:
{
   11e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (esc_state & ESC_ANSI_FIRST) {
   11e20:	4c6c      	ldr	r4, [pc, #432]	; (11fd4 <handle_ansi+0x1b8>)
   11e22:	6823      	ldr	r3, [r4, #0]
   11e24:	075e      	lsls	r6, r3, #29
{
   11e26:	460d      	mov	r5, r1
    if (esc_state & ESC_ANSI_FIRST) {
   11e28:	d520      	bpl.n	11e6c <handle_ansi+0x50>
        if (!isdigit(byte)) {
   11e2a:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
        esc_state &= ~ESC_ANSI_FIRST;
   11e2e:	f023 0304 	bic.w	r3, r3, #4
        if (!isdigit(byte)) {
   11e32:	2909      	cmp	r1, #9
   11e34:	4a68      	ldr	r2, [pc, #416]	; (11fd8 <handle_ansi+0x1bc>)
        esc_state &= ~ESC_ANSI_FIRST;
   11e36:	6023      	str	r3, [r4, #0]
        if (!isdigit(byte)) {
   11e38:	d90f      	bls.n	11e5a <handle_ansi+0x3e>
            ansi_val = 1;
   11e3a:	2301      	movs	r3, #1
   11e3c:	6013      	str	r3, [r2, #0]
    switch (byte) {
   11e3e:	2848      	cmp	r0, #72	; 0x48
   11e40:	d839      	bhi.n	11eb6 <handle_ansi+0x9a>
   11e42:	2840      	cmp	r0, #64	; 0x40
   11e44:	d939      	bls.n	11eba <handle_ansi+0x9e>
   11e46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   11e4a:	2b07      	cmp	r3, #7
   11e4c:	d835      	bhi.n	11eba <handle_ansi+0x9e>
   11e4e:	e8df f003 	tbb	[pc, r3]
   11e52:	3838      	.short	0x3838
   11e54:	a5347687 	.word	0xa5347687
   11e58:	9634      	.short	0x9634
        esc_state |= ESC_ANSI_VAL;
   11e5a:	f043 0308 	orr.w	r3, r3, #8
   11e5e:	6023      	str	r3, [r4, #0]
        ansi_val_2 = 0;
   11e60:	4b5e      	ldr	r3, [pc, #376]	; (11fdc <handle_ansi+0x1c0>)
        ansi_val = byte - '0';
   11e62:	6011      	str	r1, [r2, #0]
        ansi_val_2 = 0;
   11e64:	2200      	movs	r2, #0
   11e66:	601a      	str	r2, [r3, #0]
}
   11e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (esc_state & ESC_ANSI_VAL) {
   11e6c:	0719      	lsls	r1, r3, #28
   11e6e:	d5e6      	bpl.n	11e3e <handle_ansi+0x22>
        if (isdigit(byte)) {
   11e70:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   11e74:	2a09      	cmp	r2, #9
   11e76:	d812      	bhi.n	11e9e <handle_ansi+0x82>
            if (esc_state & ESC_ANSI_VAL_2) {
   11e78:	f013 0f10 	tst.w	r3, #16
   11e7c:	f04f 040a 	mov.w	r4, #10
   11e80:	d006      	beq.n	11e90 <handle_ansi+0x74>
                ansi_val_2 += byte - '0';
   11e82:	4b56      	ldr	r3, [pc, #344]	; (11fdc <handle_ansi+0x1c0>)
                ansi_val_2 *= 10;
   11e84:	681a      	ldr	r2, [r3, #0]
                ansi_val_2 += byte - '0';
   11e86:	fb04 0002 	mla	r0, r4, r2, r0
   11e8a:	3830      	subs	r0, #48	; 0x30
   11e8c:	6018      	str	r0, [r3, #0]
   11e8e:	e7eb      	b.n	11e68 <handle_ansi+0x4c>
                ansi_val += byte - '0';
   11e90:	4951      	ldr	r1, [pc, #324]	; (11fd8 <handle_ansi+0x1bc>)
                ansi_val *= 10;
   11e92:	680b      	ldr	r3, [r1, #0]
                ansi_val += byte - '0';
   11e94:	fb04 0003 	mla	r0, r4, r3, r0
   11e98:	3830      	subs	r0, #48	; 0x30
   11e9a:	6008      	str	r0, [r1, #0]
   11e9c:	e7e4      	b.n	11e68 <handle_ansi+0x4c>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   11e9e:	283b      	cmp	r0, #59	; 0x3b
   11ea0:	d105      	bne.n	11eae <handle_ansi+0x92>
   11ea2:	06da      	lsls	r2, r3, #27
   11ea4:	d403      	bmi.n	11eae <handle_ansi+0x92>
            esc_state |= ESC_ANSI_VAL_2;
   11ea6:	f043 0310 	orr.w	r3, r3, #16
    esc_state &= ~ESC_ANSI;
   11eaa:	6023      	str	r3, [r4, #0]
   11eac:	e7dc      	b.n	11e68 <handle_ansi+0x4c>
        esc_state &= ~ESC_ANSI_VAL_2;
   11eae:	f023 0318 	bic.w	r3, r3, #24
   11eb2:	6023      	str	r3, [r4, #0]
   11eb4:	e7c3      	b.n	11e3e <handle_ansi+0x22>
    switch (byte) {
   11eb6:	287e      	cmp	r0, #126	; 0x7e
   11eb8:	d079      	beq.n	11fae <handle_ansi+0x192>
    esc_state &= ~ESC_ANSI;
   11eba:	6823      	ldr	r3, [r4, #0]
   11ebc:	f023 0302 	bic.w	r3, r3, #2
   11ec0:	e7f3      	b.n	11eaa <handle_ansi+0x8e>
    uint8_t limit = direction ==  ANSI_UP ? sh->tail : sh->head;
   11ec2:	4e47      	ldr	r6, [pc, #284]	; (11fe0 <handle_ansi+0x1c4>)
   11ec4:	2841      	cmp	r0, #65	; 0x41
   11ec6:	bf0c      	ite	eq
   11ec8:	7872      	ldrbeq	r2, [r6, #1]
   11eca:	7832      	ldrbne	r2, [r6, #0]
    if (sh->curr == limit) {
   11ecc:	78f3      	ldrb	r3, [r6, #3]
   11ece:	4293      	cmp	r3, r2
   11ed0:	d0f3      	beq.n	11eba <handle_ansi+0x9e>
    if (direction == ANSI_UP) {
   11ed2:	2841      	cmp	r0, #65	; 0x41
        sh->curr = ring_buf_prev(sh->curr, sh->size);
   11ed4:	78b2      	ldrb	r2, [r6, #2]
    if (direction == ANSI_UP) {
   11ed6:	d12c      	bne.n	11f32 <handle_ansi+0x116>
    return i == 0 ? i = size - 1 : --i;
   11ed8:	bb4b      	cbnz	r3, 11f2e <handle_ansi+0x112>
   11eda:	1e53      	subs	r3, r2, #1
   11edc:	b2db      	uxtb	r3, r3
    if (cur) {
   11ede:	4f41      	ldr	r7, [pc, #260]	; (11fe4 <handle_ansi+0x1c8>)
    return (uint8_t) ((i + 1) % size);
   11ee0:	70f3      	strb	r3, [r6, #3]
    if (cur) {
   11ee2:	8839      	ldrh	r1, [r7, #0]
   11ee4:	b111      	cbz	r1, 11eec <handle_ansi+0xd0>
    console_printf("\x1b[%uD", count);
   11ee6:	4840      	ldr	r0, [pc, #256]	; (11fe8 <handle_ansi+0x1cc>)
   11ee8:	f000 fb74 	bl	125d4 <console_printf>
    end = 0;
   11eec:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 11fec <handle_ansi+0x1d0>
    cur = 0;
   11ef0:	2300      	movs	r3, #0
    console_out(ESC);
   11ef2:	201b      	movs	r0, #27
    cur = 0;
   11ef4:	803b      	strh	r3, [r7, #0]
    end = 0;
   11ef6:	f8a8 3000 	strh.w	r3, [r8]
    console_out(ESC);
   11efa:	f7ff fefb 	bl	11cf4 <console_out>
    console_out('[');
   11efe:	205b      	movs	r0, #91	; 0x5b
   11f00:	f7ff fef8 	bl	11cf4 <console_out>
    console_out('K');
   11f04:	204b      	movs	r0, #75	; 0x4b
   11f06:	f7ff fef5 	bl	11cf4 <console_out>
    str = sh->lines[sh->curr];
   11f0a:	78f3      	ldrb	r3, [r6, #3]
   11f0c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
   11f10:	6876      	ldr	r6, [r6, #4]
   11f12:	3e01      	subs	r6, #1
    while (str && *str != '\0') {
   11f14:	1c73      	adds	r3, r6, #1
   11f16:	d0d0      	beq.n	11eba <handle_ansi+0x9e>
   11f18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   11f1c:	2900      	cmp	r1, #0
   11f1e:	d0cc      	beq.n	11eba <handle_ansi+0x9e>
        insert_char(&line[cur], *str, end);
   11f20:	8838      	ldrh	r0, [r7, #0]
   11f22:	f8b8 2000 	ldrh.w	r2, [r8]
   11f26:	4428      	add	r0, r5
   11f28:	f7ff ff4a 	bl	11dc0 <insert_char>
        ++str;
   11f2c:	e7f2      	b.n	11f14 <handle_ansi+0xf8>
    return i == 0 ? i = size - 1 : --i;
   11f2e:	3b01      	subs	r3, #1
   11f30:	e7d4      	b.n	11edc <handle_ansi+0xc0>
    return (uint8_t) ((i + 1) % size);
   11f32:	3301      	adds	r3, #1
   11f34:	fbb3 f1f2 	udiv	r1, r3, r2
   11f38:	fb02 3311 	mls	r3, r2, r1, r3
   11f3c:	e7cf      	b.n	11ede <handle_ansi+0xc2>
        if (ansi_val > cur) {
   11f3e:	4829      	ldr	r0, [pc, #164]	; (11fe4 <handle_ansi+0x1c8>)
   11f40:	4a25      	ldr	r2, [pc, #148]	; (11fd8 <handle_ansi+0x1bc>)
   11f42:	8803      	ldrh	r3, [r0, #0]
   11f44:	6811      	ldr	r1, [r2, #0]
   11f46:	428b      	cmp	r3, r1
   11f48:	d3b7      	bcc.n	11eba <handle_ansi+0x9e>
        end += ansi_val;
   11f4a:	4d28      	ldr	r5, [pc, #160]	; (11fec <handle_ansi+0x1d0>)
   11f4c:	882a      	ldrh	r2, [r5, #0]
        cur -= ansi_val;
   11f4e:	1a5b      	subs	r3, r3, r1
        end += ansi_val;
   11f50:	fa12 f281 	uxtah	r2, r2, r1
        cur -= ansi_val;
   11f54:	8003      	strh	r3, [r0, #0]
    console_printf("\x1b[%uD", count);
   11f56:	4824      	ldr	r0, [pc, #144]	; (11fe8 <handle_ansi+0x1cc>)
        end += ansi_val;
   11f58:	802a      	strh	r2, [r5, #0]
    console_printf("\x1b[%uC", count);
   11f5a:	f000 fb3b 	bl	125d4 <console_printf>
}
   11f5e:	e7ac      	b.n	11eba <handle_ansi+0x9e>
        if (ansi_val > end) {
   11f60:	4822      	ldr	r0, [pc, #136]	; (11fec <handle_ansi+0x1d0>)
   11f62:	4b1d      	ldr	r3, [pc, #116]	; (11fd8 <handle_ansi+0x1bc>)
   11f64:	8802      	ldrh	r2, [r0, #0]
   11f66:	6819      	ldr	r1, [r3, #0]
   11f68:	428a      	cmp	r2, r1
   11f6a:	d3a6      	bcc.n	11eba <handle_ansi+0x9e>
        end -= ansi_val;
   11f6c:	b28b      	uxth	r3, r1
   11f6e:	1ad2      	subs	r2, r2, r3
   11f70:	8002      	strh	r2, [r0, #0]
        cur += ansi_val;
   11f72:	4a1c      	ldr	r2, [pc, #112]	; (11fe4 <handle_ansi+0x1c8>)
   11f74:	8810      	ldrh	r0, [r2, #0]
   11f76:	4403      	add	r3, r0
   11f78:	8013      	strh	r3, [r2, #0]
    console_printf("\x1b[%uC", count);
   11f7a:	481d      	ldr	r0, [pc, #116]	; (11ff0 <handle_ansi+0x1d4>)
   11f7c:	e7ed      	b.n	11f5a <handle_ansi+0x13e>
        if (!cur) {
   11f7e:	4d19      	ldr	r5, [pc, #100]	; (11fe4 <handle_ansi+0x1c8>)
   11f80:	8829      	ldrh	r1, [r5, #0]
   11f82:	2900      	cmp	r1, #0
   11f84:	d099      	beq.n	11eba <handle_ansi+0x9e>
    console_printf("\x1b[%uD", count);
   11f86:	4818      	ldr	r0, [pc, #96]	; (11fe8 <handle_ansi+0x1cc>)
   11f88:	f000 fb24 	bl	125d4 <console_printf>
        end += cur;
   11f8c:	4a17      	ldr	r2, [pc, #92]	; (11fec <handle_ansi+0x1d0>)
        cur += end;
   11f8e:	8813      	ldrh	r3, [r2, #0]
   11f90:	8829      	ldrh	r1, [r5, #0]
   11f92:	440b      	add	r3, r1
   11f94:	8013      	strh	r3, [r2, #0]
        end = 0;
   11f96:	2300      	movs	r3, #0
   11f98:	802b      	strh	r3, [r5, #0]
        break;
   11f9a:	e78e      	b.n	11eba <handle_ansi+0x9e>
        if (!end) {
   11f9c:	4d13      	ldr	r5, [pc, #76]	; (11fec <handle_ansi+0x1d0>)
   11f9e:	8829      	ldrh	r1, [r5, #0]
   11fa0:	2900      	cmp	r1, #0
   11fa2:	d08a      	beq.n	11eba <handle_ansi+0x9e>
    console_printf("\x1b[%uC", count);
   11fa4:	4812      	ldr	r0, [pc, #72]	; (11ff0 <handle_ansi+0x1d4>)
   11fa6:	f000 fb15 	bl	125d4 <console_printf>
        cur += end;
   11faa:	4a0e      	ldr	r2, [pc, #56]	; (11fe4 <handle_ansi+0x1c8>)
   11fac:	e7ef      	b.n	11f8e <handle_ansi+0x172>
        if (!end) {
   11fae:	4e0f      	ldr	r6, [pc, #60]	; (11fec <handle_ansi+0x1d0>)
   11fb0:	8833      	ldrh	r3, [r6, #0]
   11fb2:	2b00      	cmp	r3, #0
   11fb4:	d081      	beq.n	11eba <handle_ansi+0x9e>
    console_printf("\x1b[%uC", count);
   11fb6:	2101      	movs	r1, #1
   11fb8:	480d      	ldr	r0, [pc, #52]	; (11ff0 <handle_ansi+0x1d4>)
   11fba:	f000 fb0b 	bl	125d4 <console_printf>
        del_char(&line[cur], --end);
   11fbe:	4b09      	ldr	r3, [pc, #36]	; (11fe4 <handle_ansi+0x1c8>)
   11fc0:	8831      	ldrh	r1, [r6, #0]
   11fc2:	8818      	ldrh	r0, [r3, #0]
   11fc4:	3901      	subs	r1, #1
   11fc6:	b289      	uxth	r1, r1
   11fc8:	4428      	add	r0, r5
   11fca:	8031      	strh	r1, [r6, #0]
   11fcc:	f7ff fed6 	bl	11d7c <del_char>
        break;
   11fd0:	e773      	b.n	11eba <handle_ansi+0x9e>
   11fd2:	bf00      	nop
   11fd4:	200045fc 	.word	0x200045fc
   11fd8:	20003da0 	.word	0x20003da0
   11fdc:	20003da4 	.word	0x20003da4
   11fe0:	20003dc0 	.word	0x20003dc0
   11fe4:	200045f8 	.word	0x200045f8
   11fe8:	000227dd 	.word	0x000227dd
   11fec:	200045fa 	.word	0x200045fa
   11ff0:	000227e3 	.word	0x000227e3

00011ff4 <console_write>:
{
   11ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ff6:	4606      	mov	r6, r0
    if (console_lock(timeout) != OS_OK) {
   11ff8:	2080      	movs	r0, #128	; 0x80
{
   11ffa:	460c      	mov	r4, r1
    if (console_lock(timeout) != OS_OK) {
   11ffc:	f7ff fe48 	bl	11c90 <console_lock>
   12000:	4605      	mov	r5, r0
   12002:	bb78      	cbnz	r0, 12064 <console_write+0x70>
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   12004:	2c01      	cmp	r4, #1
   12006:	4f18      	ldr	r7, [pc, #96]	; (12068 <console_write+0x74>)
   12008:	dd18      	ble.n	1203c <console_write+0x48>
   1200a:	7833      	ldrb	r3, [r6, #0]
   1200c:	2b04      	cmp	r3, #4
   1200e:	d10d      	bne.n	1202c <console_write+0x38>
   12010:	7873      	ldrb	r3, [r6, #1]
   12012:	2b14      	cmp	r3, #20
   12014:	d10a      	bne.n	1202c <console_write+0x38>
        g_is_output_nlip = 1;
   12016:	2301      	movs	r3, #1
   12018:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < cnt; i++) {
   1201a:	42a5      	cmp	r5, r4
   1201c:	da15      	bge.n	1204a <console_write+0x56>
        if (console_out_nolock((int)str[i]) == EOF) {
   1201e:	5d70      	ldrb	r0, [r6, r5]
   12020:	f000 fb42 	bl	126a8 <console_out_nolock>
   12024:	3001      	adds	r0, #1
   12026:	d012      	beq.n	1204e <console_write+0x5a>
    for (i = 0; i < cnt; i++) {
   12028:	3501      	adds	r5, #1
   1202a:	e7f6      	b.n	1201a <console_write+0x26>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   1202c:	2c02      	cmp	r4, #2
   1202e:	d005      	beq.n	1203c <console_write+0x48>
   12030:	7873      	ldrb	r3, [r6, #1]
   12032:	2b06      	cmp	r3, #6
   12034:	d102      	bne.n	1203c <console_write+0x48>
   12036:	78b3      	ldrb	r3, [r6, #2]
   12038:	2b09      	cmp	r3, #9
   1203a:	d0ec      	beq.n	12016 <console_write+0x22>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
   1203c:	783b      	ldrb	r3, [r7, #0]
   1203e:	2b00      	cmp	r3, #0
   12040:	d1eb      	bne.n	1201a <console_write+0x26>
   12042:	4b0a      	ldr	r3, [pc, #40]	; (1206c <console_write+0x78>)
   12044:	781b      	ldrb	r3, [r3, #0]
   12046:	2b00      	cmp	r3, #0
   12048:	d0e7      	beq.n	1201a <console_write+0x26>
    if (cnt > 0 && str[cnt - 1] == '\n') {
   1204a:	2c00      	cmp	r4, #0
   1204c:	dd06      	ble.n	1205c <console_write+0x68>
   1204e:	4434      	add	r4, r6
   12050:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   12054:	2b0a      	cmp	r3, #10
   12056:	d101      	bne.n	1205c <console_write+0x68>
        g_is_output_nlip = 0;
   12058:	2300      	movs	r3, #0
   1205a:	703b      	strb	r3, [r7, #0]
}
   1205c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)console_unlock();
   12060:	f7ff be2e 	b.w	11cc0 <console_unlock>
}
   12064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12066:	bf00      	nop
   12068:	20004607 	.word	0x20004607
   1206c:	20004606 	.word	0x20004606

00012070 <console_blocking_mode>:
   12070:	4770      	bx	lr
	...

00012074 <console_handle_char>:


int
console_handle_char(uint8_t byte)
{
   12074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
    static struct os_event *ev;
    static struct console_input *input;
    static char prev_endl = '\0';

    if (!lines_queue) {
   12078:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 12368 <console_handle_char+0x2f4>
   1207c:	f8d8 3000 	ldr.w	r3, [r8]
{
   12080:	b0c5      	sub	sp, #276	; 0x114
   12082:	4604      	mov	r4, r0
    if (!lines_queue) {
   12084:	b90b      	cbnz	r3, 1208a <console_handle_char+0x16>
#endif

            input = NULL;
            ev = NULL;
            console_echo(1);
            return 0;
   12086:	2700      	movs	r7, #0
   12088:	e00f      	b.n	120aa <console_handle_char+0x36>
    if (!ev) {
   1208a:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 1236c <console_handle_char+0x2f8>
   1208e:	f8da 3000 	ldr.w	r3, [sl]
   12092:	b98b      	cbnz	r3, 120b8 <console_handle_char+0x44>
        ev = os_eventq_get_no_wait(&avail_queue);
   12094:	48a7      	ldr	r0, [pc, #668]	; (12334 <console_handle_char+0x2c0>)
   12096:	f7f7 fa4d 	bl	9534 <os_eventq_get_no_wait>
   1209a:	f8ca 0000 	str.w	r0, [sl]
        if (!ev) {
   1209e:	b940      	cbnz	r0, 120b2 <console_handle_char+0x3e>
            rx_stalled = true;
   120a0:	4ba5      	ldr	r3, [pc, #660]	; (12338 <console_handle_char+0x2c4>)
   120a2:	2201      	movs	r2, #1
   120a4:	701a      	strb	r2, [r3, #0]
            return -1;
   120a6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

    if (!g_console_ignore_non_nlip) {
        insert_char(&input->line[cur], byte, end);
    }
    return 0;
}
   120aa:	4638      	mov	r0, r7
   120ac:	b045      	add	sp, #276	; 0x114
   120ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        input = ev->ev_arg;
   120b2:	4ba2      	ldr	r3, [pc, #648]	; (1233c <console_handle_char+0x2c8>)
   120b4:	6882      	ldr	r2, [r0, #8]
   120b6:	601a      	str	r2, [r3, #0]
    if (((nlip_state & NLIP_PKT_START1) &&
   120b8:	4da1      	ldr	r5, [pc, #644]	; (12340 <console_handle_char+0x2cc>)
   120ba:	682b      	ldr	r3, [r5, #0]
   120bc:	f003 0203 	and.w	r2, r3, #3
   120c0:	2a03      	cmp	r2, #3
   120c2:	d046      	beq.n	12152 <console_handle_char+0xde>
        ((nlip_state & NLIP_DATA_START1) &&
   120c4:	f003 020c 	and.w	r2, r3, #12
         (nlip_state & NLIP_PKT_START2)) ||
   120c8:	2a0c      	cmp	r2, #12
   120ca:	d042      	beq.n	12152 <console_handle_char+0xde>
    if ((nlip_state & NLIP_PKT_START1) &&
   120cc:	07df      	lsls	r7, r3, #31
   120ce:	d512      	bpl.n	120f6 <console_handle_char+0x82>
   120d0:	2c09      	cmp	r4, #9
   120d2:	d110      	bne.n	120f6 <console_handle_char+0x82>
        nlip_state |= NLIP_PKT_START2;
   120d4:	f043 0302 	orr.w	r3, r3, #2
   120d8:	602b      	str	r3, [r5, #0]
    echo = on;
   120da:	4b9a      	ldr	r3, [pc, #616]	; (12344 <console_handle_char+0x2d0>)
   120dc:	2200      	movs	r2, #0
   120de:	601a      	str	r2, [r3, #0]
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1, end);
   120e0:	4a96      	ldr	r2, [pc, #600]	; (1233c <console_handle_char+0x2c8>)
   120e2:	4b99      	ldr	r3, [pc, #612]	; (12348 <console_handle_char+0x2d4>)
   120e4:	6810      	ldr	r0, [r2, #0]
   120e6:	4a99      	ldr	r2, [pc, #612]	; (1234c <console_handle_char+0x2d8>)
   120e8:	881b      	ldrh	r3, [r3, #0]
   120ea:	8812      	ldrh	r2, [r2, #0]
   120ec:	2106      	movs	r1, #6
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1, end);
   120ee:	4418      	add	r0, r3
   120f0:	f7ff fe66 	bl	11dc0 <insert_char>
   120f4:	e058      	b.n	121a8 <console_handle_char+0x134>
    } else if ((nlip_state & NLIP_DATA_START1) &&
   120f6:	075e      	lsls	r6, r3, #29
   120f8:	d50f      	bpl.n	1211a <console_handle_char+0xa6>
   120fa:	2c14      	cmp	r4, #20
   120fc:	d10d      	bne.n	1211a <console_handle_char+0xa6>
        nlip_state |= NLIP_DATA_START2;
   120fe:	f043 0308 	orr.w	r3, r3, #8
   12102:	602b      	str	r3, [r5, #0]
    echo = on;
   12104:	4b8f      	ldr	r3, [pc, #572]	; (12344 <console_handle_char+0x2d0>)
   12106:	2200      	movs	r2, #0
   12108:	601a      	str	r2, [r3, #0]
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1, end);
   1210a:	4a8c      	ldr	r2, [pc, #560]	; (1233c <console_handle_char+0x2c8>)
   1210c:	4b8e      	ldr	r3, [pc, #568]	; (12348 <console_handle_char+0x2d4>)
   1210e:	6810      	ldr	r0, [r2, #0]
   12110:	4a8e      	ldr	r2, [pc, #568]	; (1234c <console_handle_char+0x2d8>)
   12112:	881b      	ldrh	r3, [r3, #0]
   12114:	8812      	ldrh	r2, [r2, #0]
   12116:	2104      	movs	r1, #4
   12118:	e7e9      	b.n	120ee <console_handle_char+0x7a>
    if (esc_state & ESC_ANSI) {
   1211a:	4e8d      	ldr	r6, [pc, #564]	; (12350 <console_handle_char+0x2dc>)
        nlip_state = 0;
   1211c:	2300      	movs	r3, #0
   1211e:	602b      	str	r3, [r5, #0]
    if (esc_state & ESC_ANSI) {
   12120:	6833      	ldr	r3, [r6, #0]
   12122:	0798      	lsls	r0, r3, #30
   12124:	d44b      	bmi.n	121be <console_handle_char+0x14a>
    if (esc_state & ESC_ESC) {
   12126:	f013 0701 	ands.w	r7, r3, #1
   1212a:	d053      	beq.n	121d4 <console_handle_char+0x160>
        if (g_console_ignore_non_nlip) {
   1212c:	4a89      	ldr	r2, [pc, #548]	; (12354 <console_handle_char+0x2e0>)
   1212e:	7817      	ldrb	r7, [r2, #0]
   12130:	2f00      	cmp	r7, #0
   12132:	d1a8      	bne.n	12086 <console_handle_char+0x12>
        esc_state &= ~ESC_ESC;
   12134:	f023 0301 	bic.w	r3, r3, #1
   12138:	6033      	str	r3, [r6, #0]
        handle_ansi(byte, input->line);
   1213a:	4b80      	ldr	r3, [pc, #512]	; (1233c <console_handle_char+0x2c8>)
   1213c:	4620      	mov	r0, r4
   1213e:	6819      	ldr	r1, [r3, #0]
   12140:	f7ff fe6c 	bl	11e1c <handle_ansi>
        switch (byte) {
   12144:	2c5b      	cmp	r4, #91	; 0x5b
   12146:	d19e      	bne.n	12086 <console_handle_char+0x12>
            esc_state |= ESC_ANSI_FIRST;
   12148:	6833      	ldr	r3, [r6, #0]
   1214a:	f043 0306 	orr.w	r3, r3, #6
            esc_state |= ESC_ESC;
   1214e:	6033      	str	r3, [r6, #0]
            break;
   12150:	e7ab      	b.n	120aa <console_handle_char+0x36>
        if (byte == '\n') {
   12152:	2c0a      	cmp	r4, #10
   12154:	d124      	bne.n	121a0 <console_handle_char+0x12c>
        insert_char(&input->line[cur], byte, end);
   12156:	4f7c      	ldr	r7, [pc, #496]	; (12348 <console_handle_char+0x2d4>)
        handle_ansi(byte, input->line);
   12158:	4e78      	ldr	r6, [pc, #480]	; (1233c <console_handle_char+0x2c8>)
        insert_char(&input->line[cur], byte, end);
   1215a:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 1234c <console_handle_char+0x2d8>
   1215e:	6833      	ldr	r3, [r6, #0]
   12160:	8838      	ldrh	r0, [r7, #0]
            insert_char(&input->line[cur], byte, end);
   12162:	f8b9 2000 	ldrh.w	r2, [r9]
   12166:	4621      	mov	r1, r4
   12168:	4418      	add	r0, r3
   1216a:	f7ff fe29 	bl	11dc0 <insert_char>
            input->line[cur] = '\0';
   1216e:	883b      	ldrh	r3, [r7, #0]
   12170:	6832      	ldr	r2, [r6, #0]
            os_eventq_put(lines_queue, ev);
   12172:	f8da 1000 	ldr.w	r1, [sl]
   12176:	f8d8 0000 	ldr.w	r0, [r8]
            input->line[cur] = '\0';
   1217a:	2400      	movs	r4, #0
   1217c:	54d4      	strb	r4, [r2, r3]
            cur = 0;
   1217e:	803c      	strh	r4, [r7, #0]
            end = 0;
   12180:	f8a9 4000 	strh.w	r4, [r9]
            os_eventq_put(lines_queue, ev);
   12184:	f7f7 f9a3 	bl	94ce <os_eventq_put>
            if (console_compat_rx_cb) {
   12188:	4b73      	ldr	r3, [pc, #460]	; (12358 <console_handle_char+0x2e4>)
            nlip_state = 0;
   1218a:	602c      	str	r4, [r5, #0]
            if (console_compat_rx_cb) {
   1218c:	681b      	ldr	r3, [r3, #0]
   1218e:	b103      	cbz	r3, 12192 <console_handle_char+0x11e>
                console_compat_rx_cb();
   12190:	4798      	blx	r3
    echo = on;
   12192:	4b6c      	ldr	r3, [pc, #432]	; (12344 <console_handle_char+0x2d0>)
            input = NULL;
   12194:	6034      	str	r4, [r6, #0]
    echo = on;
   12196:	2201      	movs	r2, #1
            ev = NULL;
   12198:	f8ca 4000 	str.w	r4, [sl]
    echo = on;
   1219c:	601a      	str	r2, [r3, #0]
   1219e:	e772      	b.n	12086 <console_handle_char+0x12>
        } else if (byte == CONSOLE_NLIP_PKT_START2) {
   121a0:	2c09      	cmp	r4, #9
   121a2:	d09a      	beq.n	120da <console_handle_char+0x66>
        } else if (byte == CONSOLE_NLIP_DATA_START2) {
   121a4:	2c14      	cmp	r4, #20
   121a6:	d0ad      	beq.n	12104 <console_handle_char+0x90>
        insert_char(&input->line[cur], byte, end);
   121a8:	4a64      	ldr	r2, [pc, #400]	; (1233c <console_handle_char+0x2c8>)
   121aa:	4b67      	ldr	r3, [pc, #412]	; (12348 <console_handle_char+0x2d4>)
   121ac:	6810      	ldr	r0, [r2, #0]
   121ae:	881b      	ldrh	r3, [r3, #0]
   121b0:	4a66      	ldr	r2, [pc, #408]	; (1234c <console_handle_char+0x2d8>)
   121b2:	4621      	mov	r1, r4
   121b4:	8812      	ldrh	r2, [r2, #0]
   121b6:	4418      	add	r0, r3
   121b8:	f7ff fe02 	bl	11dc0 <insert_char>
        return 0;
   121bc:	e763      	b.n	12086 <console_handle_char+0x12>
        if (g_console_ignore_non_nlip) {
   121be:	4b65      	ldr	r3, [pc, #404]	; (12354 <console_handle_char+0x2e0>)
   121c0:	781f      	ldrb	r7, [r3, #0]
   121c2:	2f00      	cmp	r7, #0
   121c4:	f47f af5f 	bne.w	12086 <console_handle_char+0x12>
        handle_ansi(byte, input->line);
   121c8:	4b5c      	ldr	r3, [pc, #368]	; (1233c <console_handle_char+0x2c8>)
   121ca:	4620      	mov	r0, r4
   121cc:	6819      	ldr	r1, [r3, #0]
   121ce:	f7ff fe25 	bl	11e1c <handle_ansi>
        return 0;
   121d2:	e76a      	b.n	120aa <console_handle_char+0x36>
	    (__c >= '{' && __c <= '~');
}

__extern_inline int isprint(int __c)
{
	return (__c >= 0x20 && __c <= 0x7e);
   121d4:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
   121d8:	2b5e      	cmp	r3, #94	; 0x5e
   121da:	f240 8155 	bls.w	12488 <console_handle_char+0x414>
        handle_ansi(byte, input->line);
   121de:	f8df 915c 	ldr.w	r9, [pc, #348]	; 1233c <console_handle_char+0x2c8>
   121e2:	4620      	mov	r0, r4
   121e4:	f8d9 1000 	ldr.w	r1, [r9]
   121e8:	f7ff fe18 	bl	11e1c <handle_ansi>
        switch (byte) {
   121ec:	2c0d      	cmp	r4, #13
   121ee:	d810      	bhi.n	12212 <console_handle_char+0x19e>
   121f0:	2c03      	cmp	r4, #3
   121f2:	d914      	bls.n	1221e <console_handle_char+0x1aa>
   121f4:	1f23      	subs	r3, r4, #4
   121f6:	2b09      	cmp	r3, #9
   121f8:	d811      	bhi.n	1221e <console_handle_char+0x1aa>
   121fa:	e8df f013 	tbh	[pc, r3, lsl #1]
   121fe:	0096      	.short	0x0096
   12200:	00910010 	.word	0x00910010
   12204:	00b90010 	.word	0x00b90010
   12208:	00d70131 	.word	0x00d70131
   1220c:	00100010 	.word	0x00100010
   12210:	00d7      	.short	0x00d7
   12212:	2c1b      	cmp	r4, #27
   12214:	f000 80c1 	beq.w	1239a <console_handle_char+0x326>
   12218:	2c7f      	cmp	r4, #127	; 0x7f
   1221a:	f000 80a9 	beq.w	12370 <console_handle_char+0x2fc>
            insert_char(&input->line[cur], byte, end);
   1221e:	4b4a      	ldr	r3, [pc, #296]	; (12348 <console_handle_char+0x2d4>)
   12220:	4a4a      	ldr	r2, [pc, #296]	; (1234c <console_handle_char+0x2d8>)
   12222:	8818      	ldrh	r0, [r3, #0]
   12224:	f8d9 3000 	ldr.w	r3, [r9]
   12228:	8812      	ldrh	r2, [r2, #0]
   1222a:	4621      	mov	r1, r4
   1222c:	4418      	add	r0, r3
   1222e:	f7ff fdc7 	bl	11dc0 <insert_char>
            prev_endl = byte;
   12232:	4b4a      	ldr	r3, [pc, #296]	; (1235c <console_handle_char+0x2e8>)
            input->line[cur + end] = '\0';
   12234:	4e44      	ldr	r6, [pc, #272]	; (12348 <console_handle_char+0x2d4>)
   12236:	4d45      	ldr	r5, [pc, #276]	; (1234c <console_handle_char+0x2d8>)
   12238:	8831      	ldrh	r1, [r6, #0]
            prev_endl = byte;
   1223a:	701c      	strb	r4, [r3, #0]
            input->line[cur + end] = '\0';
   1223c:	f8d9 3000 	ldr.w	r3, [r9]
   12240:	882a      	ldrh	r2, [r5, #0]
   12242:	440b      	add	r3, r1
   12244:	2400      	movs	r4, #0
   12246:	549c      	strb	r4, [r3, r2]
            console_out('\r');
   12248:	200d      	movs	r0, #13
   1224a:	f7ff fd53 	bl	11cf4 <console_out>
            console_out('\n');
   1224e:	200a      	movs	r0, #10
   12250:	f7ff fd50 	bl	11cf4 <console_out>
            end = 0;
   12254:	802c      	strh	r4, [r5, #0]
    sh->curr = sh->head;
   12256:	4d42      	ldr	r5, [pc, #264]	; (12360 <console_handle_char+0x2ec>)
            os_eventq_put(lines_queue, ev);
   12258:	f8d8 0000 	ldr.w	r0, [r8]
   1225c:	f8da 1000 	ldr.w	r1, [sl]
            cur = 0;
   12260:	8034      	strh	r4, [r6, #0]
            os_eventq_put(lines_queue, ev);
   12262:	f7f7 f934 	bl	94ce <os_eventq_put>
    sh->curr = sh->head;
   12266:	f895 b000 	ldrb.w	fp, [r5]
   1226a:	f8d9 2000 	ldr.w	r2, [r9]
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   1226e:	483d      	ldr	r0, [pc, #244]	; (12364 <console_handle_char+0x2f0>)
   12270:	f885 b003 	strb.w	fp, [r5, #3]
    while (isspace((unsigned char)*str)) {
   12274:	7811      	ldrb	r1, [r2, #0]
   12276:	f1a1 0309 	sub.w	r3, r1, #9
   1227a:	b2db      	uxtb	r3, r3
   1227c:	2b17      	cmp	r3, #23
   1227e:	4614      	mov	r4, r2
   12280:	f102 0201 	add.w	r2, r2, #1
   12284:	f240 809c 	bls.w	123c0 <console_handle_char+0x34c>
    if (*str == 0) { /* All spaces? */
   12288:	2900      	cmp	r1, #0
   1228a:	f000 80c1 	beq.w	12410 <console_handle_char+0x39c>
    end = str + strlen(str) - 1;
   1228e:	4620      	mov	r0, r4
   12290:	f7fd f9e5 	bl	f65e <strlen>
   12294:	4a33      	ldr	r2, [pc, #204]	; (12364 <console_handle_char+0x2f0>)
   12296:	3801      	subs	r0, #1
   12298:	4420      	add	r0, r4
    while (end > str && isspace((unsigned char)*end)) {
   1229a:	4284      	cmp	r4, r0
   1229c:	4606      	mov	r6, r0
   1229e:	d20a      	bcs.n	122b6 <console_handle_char+0x242>
   122a0:	7833      	ldrb	r3, [r6, #0]
   122a2:	3b09      	subs	r3, #9
   122a4:	b2db      	uxtb	r3, r3
   122a6:	2b17      	cmp	r3, #23
   122a8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   122ac:	d803      	bhi.n	122b6 <console_handle_char+0x242>
   122ae:	fa22 f303 	lsr.w	r3, r2, r3
   122b2:	07db      	lsls	r3, r3, #31
   122b4:	d4f1      	bmi.n	1229a <console_handle_char+0x226>
    end++;
   122b6:	3601      	adds	r6, #1
    out_size = min(end - str, len - 1);
   122b8:	eba6 0804 	sub.w	r8, r6, r4
   122bc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   122c0:	bf28      	it	cs
   122c2:	f04f 08ff 	movcs.w	r8, #255	; 0xff
    memcpy(out, str, out_size);
   122c6:	4642      	mov	r2, r8
   122c8:	4621      	mov	r1, r4
   122ca:	a804      	add	r0, sp, #16
   122cc:	f7fd f98a 	bl	f5e4 <memcpy>
    out[out_size] = 0;
   122d0:	aa04      	add	r2, sp, #16
   122d2:	2300      	movs	r3, #0
    if (!len) {
   122d4:	42b4      	cmp	r4, r6
    out[out_size] = 0;
   122d6:	f802 3008 	strb.w	r3, [r2, r8]
    if (!len) {
   122da:	f000 8099 	beq.w	12410 <console_handle_char+0x39c>
    curr = sh->tail;
   122de:	f895 8001 	ldrb.w	r8, [r5, #1]
    return (uint8_t) ((i + 1) % size);
   122e2:	78ab      	ldrb	r3, [r5, #2]
    curr = sh->tail;
   122e4:	4646      	mov	r6, r8
        if (strcmp(sh->lines[curr], line) == 0) {
   122e6:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
    while (curr != sh->head) {
   122ea:	45b3      	cmp	fp, r6
    return (uint8_t) ((i + 1) % size);
   122ec:	f106 0401 	add.w	r4, r6, #1
        if (strcmp(sh->lines[curr], line) == 0) {
   122f0:	f8dc 2004 	ldr.w	r2, [ip, #4]
   122f4:	fbb4 f0f3 	udiv	r0, r4, r3
   122f8:	ea4f 0186 	mov.w	r1, r6, lsl #2
   122fc:	9001      	str	r0, [sp, #4]
    while (curr != sh->head) {
   122fe:	d165      	bne.n	123cc <console_handle_char+0x358>
    return (uint8_t) ((i + 1) % size);
   12300:	9801      	ldr	r0, [sp, #4]
   12302:	fb03 4410 	mls	r4, r3, r0, r4
    if (console_hist_is_full()) {
   12306:	b2e4      	uxtb	r4, r4
   12308:	45a0      	cmp	r8, r4
   1230a:	f040 8099 	bne.w	12440 <console_handle_char+0x3cc>
        assert(sh->lines[sh->head] == NULL);
   1230e:	2a00      	cmp	r2, #0
   12310:	f000 8088 	beq.w	12424 <console_handle_char+0x3b0>
   12314:	2300      	movs	r3, #0
   12316:	461a      	mov	r2, r3
   12318:	4619      	mov	r1, r3
   1231a:	4618      	mov	r0, r3
   1231c:	f7f6 fdea 	bl	8ef4 <__assert_func>
            nlip_state |= NLIP_PKT_START1;
   12320:	682b      	ldr	r3, [r5, #0]
   12322:	f043 0301 	orr.w	r3, r3, #1
            nlip_state |= NLIP_DATA_START1;
   12326:	602b      	str	r3, [r5, #0]
            break;
   12328:	e6bf      	b.n	120aa <console_handle_char+0x36>
            nlip_state |= NLIP_DATA_START1;
   1232a:	682b      	ldr	r3, [r5, #0]
   1232c:	f043 0304 	orr.w	r3, r3, #4
   12330:	e7f9      	b.n	12326 <console_handle_char+0x2b2>
   12332:	bf00      	nop
   12334:	20003da8 	.word	0x20003da8
   12338:	20004615 	.word	0x20004615
   1233c:	20004608 	.word	0x20004608
   12340:	20004610 	.word	0x20004610
   12344:	20000718 	.word	0x20000718
   12348:	200045f8 	.word	0x200045f8
   1234c:	200045fa 	.word	0x200045fa
   12350:	200045fc 	.word	0x200045fc
   12354:	20004604 	.word	0x20004604
   12358:	20003dbc 	.word	0x20003dbc
   1235c:	20004614 	.word	0x20004614
   12360:	20003dc0 	.word	0x20003dc0
   12364:	00800013 	.word	0x00800013
   12368:	2000460c 	.word	0x2000460c
   1236c:	20004600 	.word	0x20004600
            if (g_console_ignore_non_nlip) {
   12370:	4b50      	ldr	r3, [pc, #320]	; (124b4 <console_handle_char+0x440>)
   12372:	781b      	ldrb	r3, [r3, #0]
   12374:	2b00      	cmp	r3, #0
   12376:	f47f ae86 	bne.w	12086 <console_handle_char+0x12>
            if (cur > 0) {
   1237a:	4a4f      	ldr	r2, [pc, #316]	; (124b8 <console_handle_char+0x444>)
   1237c:	8813      	ldrh	r3, [r2, #0]
   1237e:	2b00      	cmp	r3, #0
   12380:	f43f ae81 	beq.w	12086 <console_handle_char+0x12>
                del_char(&input->line[--cur], end);
   12384:	3b01      	subs	r3, #1
   12386:	b29b      	uxth	r3, r3
   12388:	8013      	strh	r3, [r2, #0]
   1238a:	f8d9 0000 	ldr.w	r0, [r9]
   1238e:	4a4b      	ldr	r2, [pc, #300]	; (124bc <console_handle_char+0x448>)
   12390:	4418      	add	r0, r3
   12392:	8811      	ldrh	r1, [r2, #0]
   12394:	f7ff fcf2 	bl	11d7c <del_char>
   12398:	e687      	b.n	120aa <console_handle_char+0x36>
            if (g_console_ignore_non_nlip) {
   1239a:	4b46      	ldr	r3, [pc, #280]	; (124b4 <console_handle_char+0x440>)
   1239c:	781b      	ldrb	r3, [r3, #0]
   1239e:	2b00      	cmp	r3, #0
   123a0:	f47f ae71 	bne.w	12086 <console_handle_char+0x12>
            esc_state |= ESC_ESC;
   123a4:	6833      	ldr	r3, [r6, #0]
   123a6:	f043 0301 	orr.w	r3, r3, #1
   123aa:	e6d0      	b.n	1214e <console_handle_char+0xda>
            if (byte == '\n' && prev_endl == '\r') {
   123ac:	2c0a      	cmp	r4, #10
   123ae:	f47f af40 	bne.w	12232 <console_handle_char+0x1be>
   123b2:	4b43      	ldr	r3, [pc, #268]	; (124c0 <console_handle_char+0x44c>)
   123b4:	781a      	ldrb	r2, [r3, #0]
   123b6:	2a0d      	cmp	r2, #13
   123b8:	f47f af3b 	bne.w	12232 <console_handle_char+0x1be>
                prev_endl = byte;
   123bc:	701c      	strb	r4, [r3, #0]
                break;
   123be:	e674      	b.n	120aa <console_handle_char+0x36>
   123c0:	fa20 f303 	lsr.w	r3, r0, r3
   123c4:	07d9      	lsls	r1, r3, #31
   123c6:	f53f af55 	bmi.w	12274 <console_handle_char+0x200>
   123ca:	e760      	b.n	1228e <console_handle_char+0x21a>
        if (strcmp(sh->lines[curr], line) == 0) {
   123cc:	4610      	mov	r0, r2
   123ce:	a904      	add	r1, sp, #16
   123d0:	9303      	str	r3, [sp, #12]
   123d2:	9202      	str	r2, [sp, #8]
   123d4:	f7fd f938 	bl	f648 <strcmp>
   123d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   123dc:	2800      	cmp	r0, #0
   123de:	d063      	beq.n	124a8 <console_handle_char+0x434>
    return (uint8_t) ((i + 1) % size);
   123e0:	9a01      	ldr	r2, [sp, #4]
   123e2:	fb03 4412 	mls	r4, r3, r2, r4
   123e6:	b2e6      	uxtb	r6, r4
   123e8:	e77d      	b.n	122e6 <console_handle_char+0x272>
        sh->lines[prev] = sh->lines[curr];
   123ea:	eb05 0184 	add.w	r1, r5, r4, lsl #2
   123ee:	442e      	add	r6, r5
   123f0:	6849      	ldr	r1, [r1, #4]
   123f2:	6071      	str	r1, [r6, #4]
    return (uint8_t) ((i + 1) % size);
   123f4:	1c61      	adds	r1, r4, #1
   123f6:	b2c9      	uxtb	r1, r1
   123f8:	fbb1 f0f3 	udiv	r0, r1, r3
   123fc:	fb03 1110 	mls	r1, r3, r0, r1
   12400:	4626      	mov	r6, r4
        curr = ring_buf_next(curr, sh->size);
   12402:	b2cc      	uxtb	r4, r1
    while (curr != sh->head) {
   12404:	45a3      	cmp	fp, r4
   12406:	ea4f 0686 	mov.w	r6, r6, lsl #2
   1240a:	d1ee      	bne.n	123ea <console_handle_char+0x376>
    sh->lines[prev] = match;
   1240c:	442e      	add	r6, r5
   1240e:	6072      	str	r2, [r6, #4]
            if (console_compat_rx_cb) {
   12410:	4b2c      	ldr	r3, [pc, #176]	; (124c4 <console_handle_char+0x450>)
   12412:	681b      	ldr	r3, [r3, #0]
   12414:	b103      	cbz	r3, 12418 <console_handle_char+0x3a4>
                console_compat_rx_cb();
   12416:	4798      	blx	r3
            input = NULL;
   12418:	2300      	movs	r3, #0
   1241a:	f8c9 3000 	str.w	r3, [r9]
            ev = NULL;
   1241e:	f8ca 3000 	str.w	r3, [sl]
            break;
   12422:	e642      	b.n	120aa <console_handle_char+0x36>
        sh->lines[sh->head] = sh->lines[sh->tail];
   12424:	eb05 0488 	add.w	r4, r5, r8, lsl #2
    return (uint8_t) ((i + 1) % size);
   12428:	f108 0801 	add.w	r8, r8, #1
        sh->lines[sh->head] = sh->lines[sh->tail];
   1242c:	6860      	ldr	r0, [r4, #4]
   1242e:	f8cc 0004 	str.w	r0, [ip, #4]
        sh->lines[sh->tail] = NULL;
   12432:	6062      	str	r2, [r4, #4]
    return (uint8_t) ((i + 1) % size);
   12434:	fbb8 f2f3 	udiv	r2, r8, r3
   12438:	fb03 8812 	mls	r8, r3, r2, r8
   1243c:	f885 8001 	strb.w	r8, [r5, #1]
    strcpy(sh->lines[sh->head], buf);
   12440:	186b      	adds	r3, r5, r1
   12442:	a904      	add	r1, sp, #16
   12444:	6858      	ldr	r0, [r3, #4]
   12446:	f00b fe31 	bl	1e0ac <strcpy>
    return (uint8_t) ((i + 1) % size);
   1244a:	782b      	ldrb	r3, [r5, #0]
   1244c:	78aa      	ldrb	r2, [r5, #2]
   1244e:	3301      	adds	r3, #1
   12450:	fbb3 f1f2 	udiv	r1, r3, r2
   12454:	fb02 3311 	mls	r3, r2, r1, r3
   12458:	b2db      	uxtb	r3, r3
    sh->head = ring_buf_next(sh->head, sh->size);
   1245a:	702b      	strb	r3, [r5, #0]
    sh->curr = sh->head;
   1245c:	70eb      	strb	r3, [r5, #3]
   1245e:	e7d7      	b.n	12410 <console_handle_char+0x39c>
            if (g_console_ignore_non_nlip) {
   12460:	4b14      	ldr	r3, [pc, #80]	; (124b4 <console_handle_char+0x440>)
   12462:	781b      	ldrb	r3, [r3, #0]
   12464:	2b00      	cmp	r3, #0
   12466:	f47f ae0e 	bne.w	12086 <console_handle_char+0x12>
            if (completion && !end) {
   1246a:	4b17      	ldr	r3, [pc, #92]	; (124c8 <console_handle_char+0x454>)
   1246c:	681b      	ldr	r3, [r3, #0]
   1246e:	2b00      	cmp	r3, #0
   12470:	f43f ae09 	beq.w	12086 <console_handle_char+0x12>
   12474:	4a11      	ldr	r2, [pc, #68]	; (124bc <console_handle_char+0x448>)
   12476:	8812      	ldrh	r2, [r2, #0]
   12478:	2a00      	cmp	r2, #0
   1247a:	f47f ae04 	bne.w	12086 <console_handle_char+0x12>
                completion(input->line, console_append_char);
   1247e:	4913      	ldr	r1, [pc, #76]	; (124cc <console_handle_char+0x458>)
   12480:	f8d9 0000 	ldr.w	r0, [r9]
   12484:	4798      	blx	r3
   12486:	e610      	b.n	120aa <console_handle_char+0x36>
    if (!g_console_ignore_non_nlip) {
   12488:	4b0a      	ldr	r3, [pc, #40]	; (124b4 <console_handle_char+0x440>)
   1248a:	781b      	ldrb	r3, [r3, #0]
   1248c:	2b00      	cmp	r3, #0
   1248e:	f47f adfa 	bne.w	12086 <console_handle_char+0x12>
        insert_char(&input->line[cur], byte, end);
   12492:	4a0f      	ldr	r2, [pc, #60]	; (124d0 <console_handle_char+0x45c>)
   12494:	4b08      	ldr	r3, [pc, #32]	; (124b8 <console_handle_char+0x444>)
   12496:	6810      	ldr	r0, [r2, #0]
   12498:	881b      	ldrh	r3, [r3, #0]
   1249a:	4a08      	ldr	r2, [pc, #32]	; (124bc <console_handle_char+0x448>)
   1249c:	4621      	mov	r1, r4
   1249e:	8812      	ldrh	r2, [r2, #0]
   124a0:	4418      	add	r0, r3
   124a2:	f7ff fc8d 	bl	11dc0 <insert_char>
   124a6:	e600      	b.n	120aa <console_handle_char+0x36>
    return (uint8_t) ((i + 1) % size);
   124a8:	9901      	ldr	r1, [sp, #4]
   124aa:	fb03 4411 	mls	r4, r3, r1, r4
   124ae:	b2e4      	uxtb	r4, r4
    while (curr != sh->head) {
   124b0:	e7a8      	b.n	12404 <console_handle_char+0x390>
   124b2:	bf00      	nop
   124b4:	20004604 	.word	0x20004604
   124b8:	200045f8 	.word	0x200045f8
   124bc:	200045fa 	.word	0x200045fa
   124c0:	20004614 	.word	0x20004614
   124c4:	20003dbc 	.word	0x20003dbc
   124c8:	20003db8 	.word	0x20003db8
   124cc:	00011d11 	.word	0x00011d11
   124d0:	20004608 	.word	0x20004608

000124d4 <console_is_init>:
{
#if MYNEWT_VAL(CONSOLE_UART)
    return uart_console_is_init();
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    return rtt_console_is_init();
   124d4:	f000 b90a 	b.w	126ec <rtt_console_is_init>

000124d8 <console_line_queue_set>:
}

void
console_line_queue_set(struct os_eventq *evq)
{
    lines_queue = evq;
   124d8:	4b01      	ldr	r3, [pc, #4]	; (124e0 <console_line_queue_set+0x8>)
   124da:	6018      	str	r0, [r3, #0]
}
   124dc:	4770      	bx	lr
   124de:	bf00      	nop
   124e0:	2000460c 	.word	0x2000460c

000124e4 <console_line_event_put>:

void
console_line_event_put(struct os_event *ev)
{
   124e4:	b508      	push	{r3, lr}
   124e6:	4601      	mov	r1, r0
    os_eventq_put(&avail_queue, ev);
   124e8:	4806      	ldr	r0, [pc, #24]	; (12504 <console_line_event_put+0x20>)
   124ea:	f7f6 fff0 	bl	94ce <os_eventq_put>

    if (rx_stalled) {
   124ee:	4b06      	ldr	r3, [pc, #24]	; (12508 <console_line_event_put+0x24>)
   124f0:	781a      	ldrb	r2, [r3, #0]
   124f2:	b12a      	cbz	r2, 12500 <console_line_event_put+0x1c>
        rx_stalled = false;
   124f4:	2200      	movs	r2, #0
   124f6:	701a      	strb	r2, [r3, #0]
        console_rx_restart();
    }
}
   124f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        console_rx_restart();
   124fc:	f000 b8f0 	b.w	126e0 <console_rx_restart>
}
   12500:	bd08      	pop	{r3, pc}
   12502:	bf00      	nop
   12504:	20003da8 	.word	0x20003da8
   12508:	20004615 	.word	0x20004615

0001250c <console_set_completion_cb>:

void
console_set_completion_cb(completion_cb cb)
{
    completion = cb;
   1250c:	4b01      	ldr	r3, [pc, #4]	; (12514 <console_set_completion_cb+0x8>)
   1250e:	6018      	str	r0, [r3, #0]
}
   12510:	4770      	bx	lr
   12512:	bf00      	nop
   12514:	20003db8 	.word	0x20003db8

00012518 <console_pkg_init>:
}
#endif

void
console_pkg_init(void)
{
   12518:	b513      	push	{r0, r1, r4, lr}
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1251a:	4b19      	ldr	r3, [pc, #100]	; (12580 <console_pkg_init+0x68>)
   1251c:	781b      	ldrb	r3, [r3, #0]
   1251e:	b923      	cbnz	r3, 1252a <console_pkg_init+0x12>
   12520:	461a      	mov	r2, r3
   12522:	4619      	mov	r1, r3
   12524:	4618      	mov	r0, r3
   12526:	f7f6 fce5 	bl	8ef4 <__assert_func>

    os_eventq_init(&avail_queue);
   1252a:	4816      	ldr	r0, [pc, #88]	; (12584 <console_pkg_init+0x6c>)
   1252c:	f7f6 ffc0 	bl	94b0 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   12530:	4815      	ldr	r0, [pc, #84]	; (12588 <console_pkg_init+0x70>)
   12532:	f7f8 f8bf 	bl	a6b4 <os_mutex_init>
    memset(console_hist_lines, 0, sizeof(console_hist_lines));
   12536:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1253a:	2100      	movs	r1, #0
   1253c:	4813      	ldr	r0, [pc, #76]	; (1258c <console_pkg_init+0x74>)
   1253e:	f7fd f85e 	bl	f5fe <memset>
    memset(&console_hist, 0, sizeof(console_hist));
   12542:	4b13      	ldr	r3, [pc, #76]	; (12590 <console_pkg_init+0x78>)
   12544:	2228      	movs	r2, #40	; 0x28
   12546:	2100      	movs	r1, #0
   12548:	4618      	mov	r0, r3
   1254a:	f7fd f858 	bl	f5fe <memset>
    sh->size = MYNEWT_VAL(CONSOLE_HISTORY_SIZE) + 1;
   1254e:	2209      	movs	r2, #9
   12550:	490e      	ldr	r1, [pc, #56]	; (1258c <console_pkg_init+0x74>)
   12552:	7082      	strb	r2, [r0, #2]
    memset(&console_hist, 0, sizeof(console_hist));
   12554:	4603      	mov	r3, r0
    for (i = 0; i < sh->size - 1; i++) {
   12556:	2200      	movs	r2, #0
   12558:	3201      	adds	r2, #1
   1255a:	2a08      	cmp	r2, #8
        sh->lines[i] = console_hist_lines[i];
   1255c:	f843 1f04 	str.w	r1, [r3, #4]!
    for (i = 0; i < sh->size - 1; i++) {
   12560:	f501 7180 	add.w	r1, r1, #256	; 0x100
   12564:	d1f8      	bne.n	12558 <console_pkg_init+0x40>

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
   12566:	f000 f8c3 	bl	126f0 <rtt_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   1256a:	b138      	cbz	r0, 1257c <console_pkg_init+0x64>
   1256c:	2300      	movs	r3, #0
   1256e:	4a09      	ldr	r2, [pc, #36]	; (12594 <console_pkg_init+0x7c>)
   12570:	9300      	str	r3, [sp, #0]
   12572:	6814      	ldr	r4, [r2, #0]
   12574:	4619      	mov	r1, r3
   12576:	461a      	mov	r2, r3
   12578:	4618      	mov	r0, r3
   1257a:	47a0      	blx	r4
}
   1257c:	b002      	add	sp, #8
   1257e:	bd10      	pop	{r4, pc}
   12580:	20004ba8 	.word	0x20004ba8
   12584:	20003da8 	.word	0x20003da8
   12588:	200045ec 	.word	0x200045ec
   1258c:	20003de8 	.word	0x20003de8
   12590:	20003dc0 	.word	0x20003dc0
   12594:	20000768 	.word	0x20000768

00012598 <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
   12598:	b570      	push	{r4, r5, r6, lr}
   1259a:	4605      	mov	r5, r0
   1259c:	460e      	mov	r6, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   1259e:	f000 f8c5 	bl	1272c <console_get_ticks>
   125a2:	4604      	mov	r4, r0
   125a4:	b148      	cbz	r0, 125ba <console_vprintf+0x22>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   125a6:	4b09      	ldr	r3, [pc, #36]	; (125cc <console_vprintf+0x34>)
   125a8:	681b      	ldr	r3, [r3, #0]
   125aa:	b963      	cbnz	r3, 125c6 <console_vprintf+0x2e>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   125ac:	f7f7 fcb4 	bl	9f18 <os_time_get>
   125b0:	4601      	mov	r1, r0
   125b2:	4807      	ldr	r0, [pc, #28]	; (125d0 <console_vprintf+0x38>)
   125b4:	f7fd fb12 	bl	fbdc <printf>
   125b8:	4604      	mov	r4, r0
        }
    }

    num_chars += vprintf(fmt, ap);
   125ba:	4631      	mov	r1, r6
   125bc:	4628      	mov	r0, r5
   125be:	f00b fdbd 	bl	1e13c <vprintf>

    return num_chars;
}
   125c2:	4420      	add	r0, r4
   125c4:	bd70      	pop	{r4, r5, r6, pc}
    num_chars = 0;
   125c6:	2400      	movs	r4, #0
   125c8:	e7f7      	b.n	125ba <console_vprintf+0x22>
   125ca:	bf00      	nop
   125cc:	200045e8 	.word	0x200045e8
   125d0:	000227e9 	.word	0x000227e9

000125d4 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   125d4:	b40f      	push	{r0, r1, r2, r3}
   125d6:	b507      	push	{r0, r1, r2, lr}
   125d8:	a904      	add	r1, sp, #16
   125da:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
   125de:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
   125e0:	f7ff ffda 	bl	12598 <console_vprintf>
    va_end(args);

    return num_chars;
}
   125e4:	b003      	add	sp, #12
   125e6:	f85d eb04 	ldr.w	lr, [sp], #4
   125ea:	b004      	add	sp, #16
   125ec:	4770      	bx	lr
	...

000125f0 <rtt_console_write_ch>:
    }
}

static void
rtt_console_write_ch(char c)
{
   125f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   125f2:	4c12      	ldr	r4, [pc, #72]	; (1263c <rtt_console_write_ch+0x4c>)
   125f4:	4e12      	ldr	r6, [pc, #72]	; (12640 <rtt_console_write_ch+0x50>)
   125f6:	f88d 0007 	strb.w	r0, [sp, #7]
    static int rtt_console_retries_left = MYNEWT_VAL(CONSOLE_RTT_RETRY_COUNT);
    os_sr_t sr;
    int ret;

    while (1) {
        OS_ENTER_CRITICAL(sr);
   125fa:	f7f7 fdb5 	bl	a168 <os_arch_save_sr>
        ret = SEGGER_RTT_WriteNoLock(0, &c, 1);
   125fe:	2201      	movs	r2, #1
        OS_ENTER_CRITICAL(sr);
   12600:	4607      	mov	r7, r0
        ret = SEGGER_RTT_WriteNoLock(0, &c, 1);
   12602:	f10d 0107 	add.w	r1, sp, #7
   12606:	2000      	movs	r0, #0
   12608:	f004 fbb4 	bl	16d74 <SEGGER_RTT_WriteNoLock>
   1260c:	4605      	mov	r5, r0
        OS_EXIT_CRITICAL(sr);
   1260e:	4638      	mov	r0, r7
   12610:	f7f7 fdb0 	bl	a174 <os_arch_restore_sr>
         * retries (which means that most likely there is no host connected to
         * read data), we stop retrying until successful write (which means that
         * host is reading data).
         */

        if (ret) {
   12614:	b11d      	cbz	r5, 1261e <rtt_console_write_ch+0x2e>
            rtt_console_retries_left = MYNEWT_VAL(CONSOLE_RTT_RETRY_COUNT);
   12616:	2302      	movs	r3, #2
   12618:	6023      	str	r3, [r4, #0]
        }

        rtt_console_wait_for_retry();
        rtt_console_retries_left--;
    }
}
   1261a:	b003      	add	sp, #12
   1261c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (rtt_console_retries_left <= 0) {
   1261e:	6823      	ldr	r3, [r4, #0]
   12620:	2b00      	cmp	r3, #0
   12622:	ddfa      	ble.n	1261a <rtt_console_write_ch+0x2a>
   12624:	6873      	ldr	r3, [r6, #4]
   12626:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   1262a:	b913      	cbnz	r3, 12632 <rtt_console_write_ch+0x42>
        os_time_delay(ticks);
   1262c:	2001      	movs	r0, #1
   1262e:	f7f7 fcb7 	bl	9fa0 <os_time_delay>
        rtt_console_retries_left--;
   12632:	6823      	ldr	r3, [r4, #0]
   12634:	3b01      	subs	r3, #1
   12636:	6023      	str	r3, [r4, #0]
        OS_ENTER_CRITICAL(sr);
   12638:	e7df      	b.n	125fa <rtt_console_write_ch+0xa>
   1263a:	bf00      	nop
   1263c:	20000724 	.word	0x20000724
   12640:	e000ed00 	.word	0xe000ed00

00012644 <rtt_console_poll_func>:
#define RTT_INPUT_POLL_INTERVAL_STEP    10 /* ms */
#define RTT_INPUT_POLL_INTERVAL_MAX     MYNEWT_VAL(CONSOLE_RTT_INPUT_POLL_INTERVAL_MAX)

static void
rtt_console_poll_func(void *arg)
{
   12644:	b510      	push	{r4, lr}
    static uint32_t itvl_ms = RTT_INPUT_POLL_INTERVAL_MIN;
    static int key = -1;
    int ret;

    if (key < 0) {
   12646:	4c15      	ldr	r4, [pc, #84]	; (1269c <rtt_console_poll_func+0x58>)
   12648:	6823      	ldr	r3, [r4, #0]
   1264a:	2b00      	cmp	r3, #0
   1264c:	da1d      	bge.n	1268a <rtt_console_poll_func+0x46>
        key = SEGGER_RTT_GetKey();
   1264e:	f004 fc67 	bl	16f20 <SEGGER_RTT_GetKey>
    }

    if (key < 0) {
   12652:	2800      	cmp	r0, #0
        key = SEGGER_RTT_GetKey();
   12654:	6020      	str	r0, [r4, #0]
    if (key < 0) {
   12656:	da18      	bge.n	1268a <rtt_console_poll_func+0x46>
        itvl_ms += RTT_INPUT_POLL_INTERVAL_STEP;
        itvl_ms = min(itvl_ms, RTT_INPUT_POLL_INTERVAL_MAX);
   12658:	4a11      	ldr	r2, [pc, #68]	; (126a0 <rtt_console_poll_func+0x5c>)
        itvl_ms += RTT_INPUT_POLL_INTERVAL_STEP;
   1265a:	6813      	ldr	r3, [r2, #0]
   1265c:	330a      	adds	r3, #10
        itvl_ms = min(itvl_ms, RTT_INPUT_POLL_INTERVAL_MAX);
   1265e:	2bfa      	cmp	r3, #250	; 0xfa
   12660:	bf28      	it	cs
   12662:	23fa      	movcs	r3, #250	; 0xfa
   12664:	6013      	str	r3, [r2, #0]
            key = SEGGER_RTT_GetKey();
        }
        itvl_ms = RTT_INPUT_POLL_INTERVAL_MIN;
    }

    os_cputime_timer_relative(&rtt_timer, itvl_ms * 1000);
   12666:	4b0e      	ldr	r3, [pc, #56]	; (126a0 <rtt_console_poll_func+0x5c>)
   12668:	480e      	ldr	r0, [pc, #56]	; (126a4 <rtt_console_poll_func+0x60>)
   1266a:	681b      	ldr	r3, [r3, #0]
   1266c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
}
   12670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_cputime_timer_relative(&rtt_timer, itvl_ms * 1000);
   12674:	4359      	muls	r1, r3
   12676:	f7f6 be77 	b.w	9368 <os_cputime_timer_relative>
            ret = console_handle_char((char)key);
   1267a:	b2c0      	uxtb	r0, r0
   1267c:	f7ff fcfa 	bl	12074 <console_handle_char>
            if (ret < 0) {
   12680:	2800      	cmp	r0, #0
   12682:	db09      	blt.n	12698 <rtt_console_poll_func+0x54>
            key = SEGGER_RTT_GetKey();
   12684:	f004 fc4c 	bl	16f20 <SEGGER_RTT_GetKey>
   12688:	6020      	str	r0, [r4, #0]
        while (key >= 0) {
   1268a:	6820      	ldr	r0, [r4, #0]
   1268c:	2800      	cmp	r0, #0
   1268e:	daf4      	bge.n	1267a <rtt_console_poll_func+0x36>
        itvl_ms = RTT_INPUT_POLL_INTERVAL_MIN;
   12690:	4b03      	ldr	r3, [pc, #12]	; (126a0 <rtt_console_poll_func+0x5c>)
   12692:	220a      	movs	r2, #10
   12694:	601a      	str	r2, [r3, #0]
   12696:	e7e6      	b.n	12666 <rtt_console_poll_func+0x22>
}
   12698:	bd10      	pop	{r4, pc}
   1269a:	bf00      	nop
   1269c:	20000720 	.word	0x20000720
   126a0:	2000071c 	.word	0x2000071c
   126a4:	20004618 	.word	0x20004618

000126a8 <console_out_nolock>:
{
   126a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (g_console_silence) {
   126aa:	4b0b      	ldr	r3, [pc, #44]	; (126d8 <console_out_nolock+0x30>)
   126ac:	781f      	ldrb	r7, [r3, #0]
{
   126ae:	4604      	mov	r4, r0
   126b0:	b2c5      	uxtb	r5, r0
    if (g_console_silence) {
   126b2:	b117      	cbz	r7, 126ba <console_out_nolock+0x12>
        return c;
   126b4:	462c      	mov	r4, r5
}
   126b6:	4620      	mov	r0, r4
   126b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ('\n' == c) {
   126ba:	2d0a      	cmp	r5, #10
   126bc:	4e07      	ldr	r6, [pc, #28]	; (126dc <console_out_nolock+0x34>)
   126be:	d107      	bne.n	126d0 <console_out_nolock+0x28>
        rtt_console_write_ch('\r');
   126c0:	200d      	movs	r0, #13
   126c2:	f7ff ff95 	bl	125f0 <rtt_console_write_ch>
        console_is_midline = 0;
   126c6:	6037      	str	r7, [r6, #0]
    rtt_console_write_ch(c);
   126c8:	4628      	mov	r0, r5
   126ca:	f7ff ff91 	bl	125f0 <rtt_console_write_ch>
    return character;
   126ce:	e7f2      	b.n	126b6 <console_out_nolock+0xe>
        console_is_midline = 1;
   126d0:	2301      	movs	r3, #1
   126d2:	6033      	str	r3, [r6, #0]
   126d4:	e7f8      	b.n	126c8 <console_out_nolock+0x20>
   126d6:	bf00      	nop
   126d8:	20004605 	.word	0x20004605
   126dc:	200045e8 	.word	0x200045e8

000126e0 <console_rx_restart>:
    os_cputime_timer_relative(&rtt_timer, 0);
   126e0:	4801      	ldr	r0, [pc, #4]	; (126e8 <console_rx_restart+0x8>)
   126e2:	2100      	movs	r1, #0
   126e4:	f7f6 be40 	b.w	9368 <os_cputime_timer_relative>
   126e8:	20004618 	.word	0x20004618

000126ec <rtt_console_is_init>:

int
rtt_console_is_init(void)
{
    return 1;
}
   126ec:	2001      	movs	r0, #1
   126ee:	4770      	bx	lr

000126f0 <rtt_console_init>:

int
rtt_console_init(void)
{
   126f0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(CONSOLE_INPUT)
    os_cputime_timer_init(&rtt_timer, rtt_console_poll_func, NULL);
   126f2:	2200      	movs	r2, #0
   126f4:	4804      	ldr	r0, [pc, #16]	; (12708 <rtt_console_init+0x18>)
   126f6:	4905      	ldr	r1, [pc, #20]	; (1270c <rtt_console_init+0x1c>)
   126f8:	f7f6 fe21 	bl	933e <os_cputime_timer_init>
    /* start after a second */
    os_cputime_timer_relative(&rtt_timer, 1000000);
   126fc:	4904      	ldr	r1, [pc, #16]	; (12710 <rtt_console_init+0x20>)
   126fe:	4802      	ldr	r0, [pc, #8]	; (12708 <rtt_console_init+0x18>)
   12700:	f7f6 fe32 	bl	9368 <os_cputime_timer_relative>
#endif
    return 0;
}
   12704:	2000      	movs	r0, #0
   12706:	bd08      	pop	{r3, pc}
   12708:	20004618 	.word	0x20004618
   1270c:	00012645 	.word	0x00012645
   12710:	000f4240 	.word	0x000f4240

00012714 <console_no_ticks>:

/* Turn OS Ticks off */
void
console_no_ticks(void)
{
    do_ticks = 0;
   12714:	4b01      	ldr	r3, [pc, #4]	; (1271c <console_no_ticks+0x8>)
   12716:	2200      	movs	r2, #0
   12718:	701a      	strb	r2, [r3, #0]
}
   1271a:	4770      	bx	lr
   1271c:	20000728 	.word	0x20000728

00012720 <console_yes_ticks>:

/* Turn OS Ticks on */
void
console_yes_ticks(void)
{
    do_ticks = 1;
   12720:	4b01      	ldr	r3, [pc, #4]	; (12728 <console_yes_ticks+0x8>)
   12722:	2201      	movs	r2, #1
   12724:	701a      	strb	r2, [r3, #0]
}
   12726:	4770      	bx	lr
   12728:	20000728 	.word	0x20000728

0001272c <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   1272c:	4b01      	ldr	r3, [pc, #4]	; (12734 <console_get_ticks+0x8>)
   1272e:	7818      	ldrb	r0, [r3, #0]
   12730:	4770      	bx	lr
   12732:	bf00      	nop
   12734:	20000728 	.word	0x20000728

00012738 <flash_area_open>:
flash_area_open(uint8_t id, const struct flash_area **fap)
{
    const struct flash_area *area;
    int i;

    if (flash_map == NULL) {
   12738:	4b0c      	ldr	r3, [pc, #48]	; (1276c <flash_area_open+0x34>)
   1273a:	681b      	ldr	r3, [r3, #0]
{
   1273c:	b570      	push	{r4, r5, r6, lr}
    if (flash_map == NULL) {
   1273e:	b18b      	cbz	r3, 12764 <flash_area_open+0x2c>
        return SYS_EACCES;
    }

    for (i = 0; i < flash_map_entries; i++) {
   12740:	4a0b      	ldr	r2, [pc, #44]	; (12770 <flash_area_open+0x38>)
   12742:	6814      	ldr	r4, [r2, #0]
   12744:	2200      	movs	r2, #0
   12746:	4294      	cmp	r4, r2
   12748:	dc02      	bgt.n	12750 <flash_area_open+0x18>
            *fap = area;
            return 0;
        }
    }

    return SYS_ENOENT;
   1274a:	f06f 0003 	mvn.w	r0, #3
   1274e:	e006      	b.n	1275e <flash_area_open+0x26>
        area = flash_map + i;
   12750:	461d      	mov	r5, r3
        if (area->fa_id == id) {
   12752:	f813 6b0c 	ldrb.w	r6, [r3], #12
   12756:	4286      	cmp	r6, r0
   12758:	d102      	bne.n	12760 <flash_area_open+0x28>
            *fap = area;
   1275a:	600d      	str	r5, [r1, #0]
            return 0;
   1275c:	2000      	movs	r0, #0
}
   1275e:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < flash_map_entries; i++) {
   12760:	3201      	adds	r2, #1
   12762:	e7f0      	b.n	12746 <flash_area_open+0xe>
        return SYS_EACCES;
   12764:	f06f 0006 	mvn.w	r0, #6
   12768:	e7f9      	b.n	1275e <flash_area_open+0x26>
   1276a:	bf00      	nop
   1276c:	20004630 	.word	0x20004630
   12770:	20004634 	.word	0x20004634

00012774 <flash_area_to_sectors>:

int
flash_area_to_sectors(int id, int *cnt, struct flash_area *ret)
{
   12774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t start;
    uint32_t size;
    int rc;
    int i;

    rc = flash_area_open(id, &fa);
   12778:	fa5f f980 	uxtb.w	r9, r0
{
   1277c:	460f      	mov	r7, r1
    rc = flash_area_open(id, &fa);
   1277e:	4648      	mov	r0, r9
   12780:	a901      	add	r1, sp, #4
{
   12782:	4614      	mov	r4, r2
    rc = flash_area_open(id, &fa);
   12784:	f7ff ffd8 	bl	12738 <flash_area_open>
    if (rc != 0) {
   12788:	4605      	mov	r5, r0
   1278a:	b948      	cbnz	r0, 127a0 <flash_area_to_sectors+0x2c>
        return rc;
    }

    *cnt = 0;

    hf = hal_bsp_flash_dev(fa->fa_device_id);
   1278c:	9b01      	ldr	r3, [sp, #4]
    *cnt = 0;
   1278e:	6038      	str	r0, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
   12790:	7858      	ldrb	r0, [r3, #1]
   12792:	f004 fabf 	bl	16d14 <hal_bsp_flash_dev>
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   12796:	46a8      	mov	r8, r5
    hf = hal_bsp_flash_dev(fa->fa_device_id);
   12798:	4606      	mov	r6, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   1279a:	68f3      	ldr	r3, [r6, #12]
   1279c:	4543      	cmp	r3, r8
   1279e:	dc03      	bgt.n	127a8 <flash_area_to_sectors+0x34>
            (*cnt)++;
        }
    }
    flash_area_close(fa);
    return 0;
}
   127a0:	4628      	mov	r0, r5
   127a2:	b004      	add	sp, #16
   127a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   127a8:	6833      	ldr	r3, [r6, #0]
   127aa:	aa02      	add	r2, sp, #8
   127ac:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   127b0:	4641      	mov	r1, r8
   127b2:	ab03      	add	r3, sp, #12
   127b4:	4630      	mov	r0, r6
   127b6:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
   127b8:	9801      	ldr	r0, [sp, #4]
   127ba:	9a02      	ldr	r2, [sp, #8]
   127bc:	6843      	ldr	r3, [r0, #4]
   127be:	4293      	cmp	r3, r2
   127c0:	d80f      	bhi.n	127e2 <flash_area_to_sectors+0x6e>
   127c2:	6881      	ldr	r1, [r0, #8]
   127c4:	440b      	add	r3, r1
   127c6:	429a      	cmp	r2, r3
   127c8:	d20b      	bcs.n	127e2 <flash_area_to_sectors+0x6e>
            if (ret) {
   127ca:	b13c      	cbz	r4, 127dc <flash_area_to_sectors+0x68>
                ret->fa_id = id;
   127cc:	f884 9000 	strb.w	r9, [r4]
                ret->fa_device_id = fa->fa_device_id;
   127d0:	7843      	ldrb	r3, [r0, #1]
   127d2:	7063      	strb	r3, [r4, #1]
                ret->fa_size = size;
   127d4:	9b03      	ldr	r3, [sp, #12]
                ret->fa_off = start;
   127d6:	6062      	str	r2, [r4, #4]
                ret->fa_size = size;
   127d8:	60a3      	str	r3, [r4, #8]
                ret++;
   127da:	340c      	adds	r4, #12
            (*cnt)++;
   127dc:	683b      	ldr	r3, [r7, #0]
   127de:	3301      	adds	r3, #1
   127e0:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   127e2:	f108 0801 	add.w	r8, r8, #1
   127e6:	e7d8      	b.n	1279a <flash_area_to_sectors+0x26>

000127e8 <flash_area_read>:
}

int
flash_area_read(const struct flash_area *fa, uint32_t off, void *dst,
    uint32_t len)
{
   127e8:	b430      	push	{r4, r5}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   127ea:	6885      	ldr	r5, [r0, #8]
   127ec:	428d      	cmp	r5, r1
{
   127ee:	461c      	mov	r4, r3
    if (off > fa->fa_size || off + len > fa->fa_size) {
   127f0:	d308      	bcc.n	12804 <flash_area_read+0x1c>
   127f2:	440c      	add	r4, r1
   127f4:	42a5      	cmp	r5, r4
   127f6:	d305      	bcc.n	12804 <flash_area_read+0x1c>
        return -1;
    }
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   127f8:	6844      	ldr	r4, [r0, #4]
   127fa:	7840      	ldrb	r0, [r0, #1]
   127fc:	4421      	add	r1, r4
}
   127fe:	bc30      	pop	{r4, r5}
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   12800:	f008 b81d 	b.w	1a83e <hal_flash_read>
}
   12804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12808:	bc30      	pop	{r4, r5}
   1280a:	4770      	bx	lr

0001280c <flash_area_write>:

int
flash_area_write(const struct flash_area *fa, uint32_t off, const void *src,
    uint32_t len)
{
   1280c:	b430      	push	{r4, r5}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1280e:	6885      	ldr	r5, [r0, #8]
   12810:	428d      	cmp	r5, r1
{
   12812:	461c      	mov	r4, r3
    if (off > fa->fa_size || off + len > fa->fa_size) {
   12814:	d308      	bcc.n	12828 <flash_area_write+0x1c>
   12816:	440c      	add	r4, r1
   12818:	42a5      	cmp	r5, r4
   1281a:	d305      	bcc.n	12828 <flash_area_write+0x1c>
        return -1;
    }
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
   1281c:	6844      	ldr	r4, [r0, #4]
   1281e:	7840      	ldrb	r0, [r0, #1]
   12820:	4421      	add	r1, r4
                           (void *)src, len);
}
   12822:	bc30      	pop	{r4, r5}
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
   12824:	f008 b82e 	b.w	1a884 <hal_flash_write>
}
   12828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1282c:	bc30      	pop	{r4, r5}
   1282e:	4770      	bx	lr

00012830 <flash_area_erase>:

int
flash_area_erase(const struct flash_area *fa, uint32_t off, uint32_t len)
{
   12830:	b410      	push	{r4}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   12832:	6884      	ldr	r4, [r0, #8]
   12834:	428c      	cmp	r4, r1
{
   12836:	4613      	mov	r3, r2
    if (off > fa->fa_size || off + len > fa->fa_size) {
   12838:	d309      	bcc.n	1284e <flash_area_erase+0x1e>
   1283a:	440b      	add	r3, r1
   1283c:	429c      	cmp	r4, r3
   1283e:	d306      	bcc.n	1284e <flash_area_erase+0x1e>
        return -1;
    }
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
   12840:	6843      	ldr	r3, [r0, #4]
}
   12842:	f85d 4b04 	ldr.w	r4, [sp], #4
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
   12846:	7840      	ldrb	r0, [r0, #1]
   12848:	4419      	add	r1, r3
   1284a:	f008 b84d 	b.w	1a8e8 <hal_flash_erase>
}
   1284e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12852:	f85d 4b04 	ldr.w	r4, [sp], #4
   12856:	4770      	bx	lr

00012858 <flash_area_align>:

uint8_t
flash_area_align(const struct flash_area *fa)
{
    return hal_flash_align(fa->fa_device_id);
   12858:	7840      	ldrb	r0, [r0, #1]
   1285a:	f007 bfe0 	b.w	1a81e <hal_flash_align>

0001285e <flash_area_erased_val>:
}

uint32_t
flash_area_erased_val(const struct flash_area *fa)
{
   1285e:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
   12860:	7840      	ldrb	r0, [r0, #1]
   12862:	f007 ffe4 	bl	1a82e <hal_flash_erased_val>
}
   12866:	bd08      	pop	{r3, pc}

00012868 <flash_area_is_empty>:
 *                                  here.
 * @return                      0 on success; nonzero on failure.
 */
int
flash_area_is_empty(const struct flash_area *fa, bool *empty)
{
   12868:	b538      	push	{r3, r4, r5, lr}
    int rc;

    *empty = false;
   1286a:	2500      	movs	r5, #0
   1286c:	700d      	strb	r5, [r1, #0]
{
   1286e:	460c      	mov	r4, r1
    rc = hal_flash_isempty_no_buf(fa->fa_device_id, fa->fa_off, fa->fa_size);
   12870:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
   12874:	7840      	ldrb	r0, [r0, #1]
   12876:	f008 f8d2 	bl	1aa1e <hal_flash_isempty_no_buf>
    if (rc < 0) {
   1287a:	2800      	cmp	r0, #0
   1287c:	db03      	blt.n	12886 <flash_area_is_empty+0x1e>
        return rc;
    } else if (rc == 1) {
   1287e:	2801      	cmp	r0, #1
        *empty = true;
   12880:	bf08      	it	eq
   12882:	7020      	strbeq	r0, [r4, #0]
    }

    return 0;
   12884:	4628      	mov	r0, r5
}
   12886:	bd38      	pop	{r3, r4, r5, pc}

00012888 <flash_area_read_is_empty>:

int
flash_area_read_is_empty(const struct flash_area *fa, uint32_t off, void *dst,
                         uint32_t len)
{
   12888:	b410      	push	{r4}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
   1288a:	6844      	ldr	r4, [r0, #4]
   1288c:	7840      	ldrb	r0, [r0, #1]
   1288e:	4421      	add	r1, r4
}
   12890:	f85d 4b04 	ldr.w	r4, [sp], #4
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
   12894:	f008 b89b 	b.w	1a9ce <hal_flash_isempty>

00012898 <flash_area_id_from_image_slot>:
 * specified value is not a valid image slot index (0 or 1), a crash is
 * triggered.
 */
int
flash_area_id_from_image_slot(int slot)
{
   12898:	b508      	push	{r3, lr}
    switch (slot) {
   1289a:	b138      	cbz	r0, 128ac <flash_area_id_from_image_slot+0x14>
   1289c:	2801      	cmp	r0, #1
   1289e:	d007      	beq.n	128b0 <flash_area_id_from_image_slot+0x18>
    case 0:
        return FLASH_AREA_IMAGE_0;
    case 1:
        return FLASH_AREA_IMAGE_1;
    default:
        assert(0);
   128a0:	2300      	movs	r3, #0
   128a2:	461a      	mov	r2, r3
   128a4:	4619      	mov	r1, r3
   128a6:	4618      	mov	r0, r3
   128a8:	f7f6 fb24 	bl	8ef4 <__assert_func>
        return FLASH_AREA_IMAGE_0;
   128ac:	2001      	movs	r0, #1
        return FLASH_AREA_IMAGE_0;
    }
}
   128ae:	bd08      	pop	{r3, pc}
    switch (slot) {
   128b0:	2002      	movs	r0, #2
   128b2:	e7fc      	b.n	128ae <flash_area_id_from_image_slot+0x16>

000128b4 <flash_map_init>:
    }
}

void
flash_map_init(void)
{
   128b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   128b8:	4b24      	ldr	r3, [pc, #144]	; (1294c <flash_map_init+0x98>)
   128ba:	781b      	ldrb	r3, [r3, #0]
{
   128bc:	b088      	sub	sp, #32
    SYSINIT_ASSERT_ACTIVE();
   128be:	b923      	cbnz	r3, 128ca <flash_map_init+0x16>
   128c0:	461a      	mov	r2, r3
   128c2:	4619      	mov	r1, r3
   128c4:	4618      	mov	r0, r3
   128c6:	f7f6 fb15 	bl	8ef4 <__assert_func>

    rc = hal_flash_init();
   128ca:	f007 ff96 	bl	1a7fa <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   128ce:	b138      	cbz	r0, 128e0 <flash_map_init+0x2c>
   128d0:	2300      	movs	r3, #0
   128d2:	4a1f      	ldr	r2, [pc, #124]	; (12950 <flash_map_init+0x9c>)
   128d4:	9300      	str	r3, [sp, #0]
   128d6:	6814      	ldr	r4, [r2, #0]
   128d8:	4619      	mov	r1, r3
   128da:	461a      	mov	r2, r3
   128dc:	4618      	mov	r0, r3
   128de:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   128e0:	4f1c      	ldr	r7, [pc, #112]	; (12954 <flash_map_init+0xa0>)
   128e2:	4b1d      	ldr	r3, [pc, #116]	; (12958 <flash_map_init+0xa4>)
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   128e4:	4e1d      	ldr	r6, [pc, #116]	; (1295c <flash_map_init+0xa8>)
    flash_map = sysflash_map_dflt;
   128e6:	603b      	str	r3, [r7, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   128e8:	2306      	movs	r3, #6
   128ea:	6033      	str	r3, [r6, #0]
    mfg_init();
   128ec:	f000 faca 	bl	12e84 <mfg_init>
    mfg_open(&reader);
   128f0:	a803      	add	r0, sp, #12
   128f2:	4c1b      	ldr	r4, [pc, #108]	; (12960 <flash_map_init+0xac>)
   128f4:	f000 fb02 	bl	12efc <mfg_open>
    *out_num_areas = 0;
   128f8:	2500      	movs	r5, #0
   128fa:	46a0      	mov	r8, r4
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   128fc:	2102      	movs	r1, #2
   128fe:	a803      	add	r0, sp, #12
   12900:	f000 faae 	bl	12e60 <mfg_seek_next_with_type>
        switch (rc) {
   12904:	f110 0f0f 	cmn.w	r0, #15
   12908:	d019      	beq.n	1293e <flash_map_init+0x8a>
   1290a:	b9a8      	cbnz	r0, 12938 <flash_map_init+0x84>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1290c:	a905      	add	r1, sp, #20
   1290e:	a803      	add	r0, sp, #12
   12910:	f000 fab1 	bl	12e76 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   12914:	b980      	cbnz	r0, 12938 <flash_map_init+0x84>
        fap->fa_id = meta_flash_area.area_id;
   12916:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1291a:	7023      	strb	r3, [r4, #0]
        fap->fa_device_id = meta_flash_area.device_id;
   1291c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12920:	7063      	strb	r3, [r4, #1]
        fap->fa_off = meta_flash_area.offset;
   12922:	f8dd 3016 	ldr.w	r3, [sp, #22]
   12926:	6063      	str	r3, [r4, #4]
        (*out_num_areas)++;
   12928:	3501      	adds	r5, #1
        fap->fa_size = meta_flash_area.size;
   1292a:	f8dd 301a 	ldr.w	r3, [sp, #26]
   1292e:	60a3      	str	r3, [r4, #8]
        if (*out_num_areas >= max_areas) {
   12930:	2d0a      	cmp	r5, #10
   12932:	f104 040c 	add.w	r4, r4, #12
   12936:	d1e1      	bne.n	128fc <flash_map_init+0x48>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
        flash_map = mfg_areas;
        flash_map_entries = num_areas;
    }
}
   12938:	b008      	add	sp, #32
   1293a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (rc == 0 && num_areas > 0) {
   1293e:	2d00      	cmp	r5, #0
   12940:	d0fa      	beq.n	12938 <flash_map_init+0x84>
        flash_map = mfg_areas;
   12942:	f8c7 8000 	str.w	r8, [r7]
        flash_map_entries = num_areas;
   12946:	6035      	str	r5, [r6, #0]
}
   12948:	e7f6      	b.n	12938 <flash_map_init+0x84>
   1294a:	bf00      	nop
   1294c:	20004ba8 	.word	0x20004ba8
   12950:	20000768 	.word	0x20000768
   12954:	20004630 	.word	0x20004630
   12958:	000232f8 	.word	0x000232f8
   1295c:	20004634 	.word	0x20004634
   12960:	20004638 	.word	0x20004638

00012964 <log_call_append_cb>:
/**
 * Calls the given log's append callback, if it has one.
 */
static void
log_call_append_cb(struct log *log, uint32_t idx)
{
   12964:	b082      	sub	sp, #8
     * preventing a TOCTTOU race.
     * (This all assumes that function pointer reads and writes are atomic.)
     */
    log_append_cb * volatile cb;

    cb = log->l_append_cb;
   12966:	6903      	ldr	r3, [r0, #16]
   12968:	9301      	str	r3, [sp, #4]
    if (cb != NULL) {
   1296a:	9b01      	ldr	r3, [sp, #4]
   1296c:	b113      	cbz	r3, 12974 <log_call_append_cb+0x10>
        cb(log, idx);
   1296e:	9b01      	ldr	r3, [sp, #4]
    }
}
   12970:	b002      	add	sp, #8
        cb(log, idx);
   12972:	4718      	bx	r3
}
   12974:	b002      	add	sp, #8
   12976:	4770      	bx	lr

00012978 <log_append_prepare>:
{
   12978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1297c:	461f      	mov	r7, r3
   1297e:	b085      	sub	sp, #20
    if (log->l_name == NULL || log->l_log == NULL) {
   12980:	6803      	ldr	r3, [r0, #0]
{
   12982:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   12984:	460e      	mov	r6, r1
    if (log->l_name == NULL || log->l_log == NULL) {
   12986:	2b00      	cmp	r3, #0
   12988:	d047      	beq.n	12a1a <log_append_prepare+0xa2>
   1298a:	6843      	ldr	r3, [r0, #4]
   1298c:	2b00      	cmp	r3, #0
   1298e:	d044      	beq.n	12a1a <log_append_prepare+0xa2>
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   12990:	681b      	ldr	r3, [r3, #0]
   12992:	2a0f      	cmp	r2, #15
   12994:	bf28      	it	cs
   12996:	220f      	movcs	r2, #15
   12998:	2b02      	cmp	r3, #2
        log_written = 1;
   1299a:	bf08      	it	eq
   1299c:	4b22      	ldreq	r3, [pc, #136]	; (12a28 <log_append_prepare+0xb0>)
   1299e:	4615      	mov	r5, r2
   129a0:	bf04      	itt	eq
   129a2:	2201      	moveq	r2, #1
   129a4:	701a      	strbeq	r2, [r3, #0]
    if (level < log->l_level) {
   129a6:	7d03      	ldrb	r3, [r0, #20]
   129a8:	42ab      	cmp	r3, r5
   129aa:	d836      	bhi.n	12a1a <log_append_prepare+0xa2>
    if (level < log_level_get(module)) {
   129ac:	4608      	mov	r0, r1
   129ae:	f000 f98f 	bl	12cd0 <log_level_get>
   129b2:	42a8      	cmp	r0, r5
   129b4:	d831      	bhi.n	12a1a <log_append_prepare+0xa2>
    OS_ENTER_CRITICAL(sr);
   129b6:	f7f7 fbd7 	bl	a168 <os_arch_save_sr>
    idx = g_log_info.li_next_index++;
   129ba:	4b1c      	ldr	r3, [pc, #112]	; (12a2c <log_append_prepare+0xb4>)
   129bc:	f8d3 8000 	ldr.w	r8, [r3]
   129c0:	f108 0201 	add.w	r2, r8, #1
   129c4:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   129c6:	f7f7 fbd5 	bl	a174 <os_arch_restore_sr>
    rc = os_gettimeofday(&tv, NULL);
   129ca:	2100      	movs	r1, #0
   129cc:	4668      	mov	r0, sp
   129ce:	f7f7 fafb 	bl	9fc8 <os_gettimeofday>
    if (rc || tv.tv_sec < UTC01_01_2016) {
   129d2:	4681      	mov	r9, r0
   129d4:	b930      	cbnz	r0, 129e4 <log_append_prepare+0x6c>
   129d6:	e9dd 2000 	ldrd	r2, r0, [sp]
   129da:	4b15      	ldr	r3, [pc, #84]	; (12a30 <log_append_prepare+0xb8>)
   129dc:	4293      	cmp	r3, r2
   129de:	eb79 0300 	sbcs.w	r3, r9, r0
   129e2:	db0e      	blt.n	12a02 <log_append_prepare+0x8a>
        ue->ue_ts = os_get_uptime_usec();
   129e4:	f7f7 fb92 	bl	a10c <os_get_uptime_usec>
   129e8:	6020      	str	r0, [r4, #0]
   129ea:	6061      	str	r1, [r4, #4]
    ue->ue_level = level;
   129ec:	7365      	strb	r5, [r4, #13]
    ue->ue_module = module;
   129ee:	7326      	strb	r6, [r4, #12]
    ue->ue_index = idx;
   129f0:	f8c4 8008 	str.w	r8, [r4, #8]
    assert(etype == LOG_ETYPE_STRING);
   129f4:	b19f      	cbz	r7, 12a1e <log_append_prepare+0xa6>
   129f6:	2300      	movs	r3, #0
   129f8:	461a      	mov	r2, r3
   129fa:	4619      	mov	r1, r3
   129fc:	4618      	mov	r0, r3
   129fe:	f7f6 fa79 	bl	8ef4 <__assert_func>
        ue->ue_ts = tv.tv_sec * 1000000 + tv.tv_usec;
   12a02:	490c      	ldr	r1, [pc, #48]	; (12a34 <log_append_prepare+0xbc>)
   12a04:	fba2 2301 	umull	r2, r3, r2, r1
   12a08:	fb01 3300 	mla	r3, r1, r0, r3
   12a0c:	9902      	ldr	r1, [sp, #8]
   12a0e:	1852      	adds	r2, r2, r1
   12a10:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   12a14:	6022      	str	r2, [r4, #0]
   12a16:	6063      	str	r3, [r4, #4]
   12a18:	e7e8      	b.n	129ec <log_append_prepare+0x74>
        rc = -1;
   12a1a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
}
   12a1e:	4648      	mov	r0, r9
   12a20:	b005      	add	sp, #20
   12a22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12a26:	bf00      	nop
   12a28:	200046bc 	.word	0x200046bc
   12a2c:	200046b0 	.word	0x200046b0
   12a30:	5685c17f 	.word	0x5685c17f
   12a34:	000f4240 	.word	0x000f4240

00012a38 <log_init>:
{
   12a38:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   12a3a:	4b0c      	ldr	r3, [pc, #48]	; (12a6c <log_init+0x34>)
   12a3c:	781b      	ldrb	r3, [r3, #0]
   12a3e:	b923      	cbnz	r3, 12a4a <log_init+0x12>
   12a40:	461a      	mov	r2, r3
   12a42:	4619      	mov	r1, r3
   12a44:	4618      	mov	r0, r3
   12a46:	f7f6 fa55 	bl	8ef4 <__assert_func>
    memset(g_log_module_list, 0, sizeof(g_log_module_list));
   12a4a:	4a09      	ldr	r2, [pc, #36]	; (12a70 <log_init+0x38>)
   12a4c:	2300      	movs	r3, #0
   12a4e:	6013      	str	r3, [r2, #0]
    log_written = 0;
   12a50:	4a08      	ldr	r2, [pc, #32]	; (12a74 <log_init+0x3c>)
   12a52:	7013      	strb	r3, [r2, #0]
    STAILQ_INIT(&g_log_list);
   12a54:	4a08      	ldr	r2, [pc, #32]	; (12a78 <log_init+0x40>)
   12a56:	e9c2 3200 	strd	r3, r2, [r2]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
   12a5a:	4a08      	ldr	r2, [pc, #32]	; (12a7c <log_init+0x44>)
   12a5c:	2102      	movs	r1, #2
   12a5e:	7111      	strb	r1, [r2, #4]
    g_log_info.li_next_index = 0;
   12a60:	6013      	str	r3, [r2, #0]
}
   12a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    log_console_init();
   12a66:	f000 b90d 	b.w	12c84 <log_console_init>
   12a6a:	bf00      	nop
   12a6c:	20004ba8 	.word	0x20004ba8
   12a70:	200046b8 	.word	0x200046b8
   12a74:	200046bc 	.word	0x200046bc
   12a78:	2000072c 	.word	0x2000072c
   12a7c:	200046b0 	.word	0x200046b0

00012a80 <log_append_body>:
}

int
log_append_body(struct log *log, uint8_t module, uint8_t level, uint8_t etype,
                const void *body, uint16_t body_len)
{
   12a80:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a82:	4605      	mov	r5, r0
   12a84:	b087      	sub	sp, #28
   12a86:	8ac0      	ldrh	r0, [r0, #22]
   12a88:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
    if (log->l_max_entry_len != 0) {
   12a8c:	b108      	cbz	r0, 12a92 <log_append_body+0x12>
        if (len > log->l_max_entry_len) {
   12a8e:	4287      	cmp	r7, r0
   12a90:	d816      	bhi.n	12ac0 <log_append_body+0x40>
    rc = log_chk_max_entry_len(log, body_len);
    if (rc != OS_OK) {
        return rc;
    }

    rc = log_append_prepare(log, module, level, etype, &hdr);
   12a92:	ae02      	add	r6, sp, #8
   12a94:	9600      	str	r6, [sp, #0]
   12a96:	4628      	mov	r0, r5
   12a98:	f7ff ff6e 	bl	12978 <log_append_prepare>
    if (rc != 0) {
   12a9c:	4604      	mov	r4, r0
   12a9e:	b960      	cbnz	r0, 12aba <log_append_body+0x3a>
        LOG_STATS_INC(log, drops);
        return rc;
    }

    rc = log->l_log->log_append_body(log, &hdr, body, body_len);
   12aa0:	686b      	ldr	r3, [r5, #4]
   12aa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12aa4:	691c      	ldr	r4, [r3, #16]
   12aa6:	4631      	mov	r1, r6
   12aa8:	463b      	mov	r3, r7
   12aaa:	4628      	mov	r0, r5
   12aac:	47a0      	blx	r4
    if (rc != 0) {
   12aae:	4604      	mov	r4, r0
   12ab0:	b918      	cbnz	r0, 12aba <log_append_body+0x3a>
        LOG_STATS_INC(log, errs);
        return rc;
    }

    log_call_append_cb(log, hdr.ue_index);
   12ab2:	9904      	ldr	r1, [sp, #16]
   12ab4:	4628      	mov	r0, r5
   12ab6:	f7ff ff55 	bl	12964 <log_call_append_cb>

    return 0;
}
   12aba:	4620      	mov	r0, r4
   12abc:	b007      	add	sp, #28
   12abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rc = OS_ENOMEM;
   12ac0:	2401      	movs	r4, #1
   12ac2:	e7fa      	b.n	12aba <log_append_body+0x3a>

00012ac4 <log_printf>:
}

void
log_printf(struct log *log, uint8_t module, uint8_t level,
           const char *msg, ...)
{
   12ac4:	b408      	push	{r3}
   12ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ac8:	b0a4      	sub	sp, #144	; 0x90
   12aca:	ab29      	add	r3, sp, #164	; 0xa4
    va_list args;
    char buf[LOG_PRINTF_MAX_ENTRY_LEN];
    int len;

    va_start(args, msg);
    len = vsnprintf(buf, LOG_PRINTF_MAX_ENTRY_LEN, msg, args);
   12acc:	af04      	add	r7, sp, #16
{
   12ace:	4604      	mov	r4, r0
   12ad0:	460d      	mov	r5, r1
   12ad2:	4616      	mov	r6, r2
    len = vsnprintf(buf, LOG_PRINTF_MAX_ENTRY_LEN, msg, args);
   12ad4:	2180      	movs	r1, #128	; 0x80
{
   12ad6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, msg);
   12ada:	9303      	str	r3, [sp, #12]
    len = vsnprintf(buf, LOG_PRINTF_MAX_ENTRY_LEN, msg, args);
   12adc:	4638      	mov	r0, r7
   12ade:	f7fd f88f 	bl	fc00 <vsnprintf>
    va_end(args);
    if (len >= LOG_PRINTF_MAX_ENTRY_LEN) {
        len = LOG_PRINTF_MAX_ENTRY_LEN-1;
    }

    log_append_body(log, module, level, LOG_ETYPE_STRING, buf, len);
   12ae2:	287f      	cmp	r0, #127	; 0x7f
   12ae4:	4603      	mov	r3, r0
   12ae6:	bfa8      	it	ge
   12ae8:	237f      	movge	r3, #127	; 0x7f
   12aea:	b29b      	uxth	r3, r3
   12aec:	e9cd 7300 	strd	r7, r3, [sp]
   12af0:	4632      	mov	r2, r6
   12af2:	2300      	movs	r3, #0
   12af4:	4629      	mov	r1, r5
   12af6:	4620      	mov	r0, r4
   12af8:	f7ff ffc2 	bl	12a80 <log_append_body>
}
   12afc:	b024      	add	sp, #144	; 0x90
   12afe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   12b02:	b001      	add	sp, #4
   12b04:	4770      	bx	lr

00012b06 <log_walk>:
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
   12b06:	6843      	ldr	r3, [r0, #4]
   12b08:	69db      	ldr	r3, [r3, #28]
   12b0a:	4718      	bx	r3

00012b0c <log_register>:
{
   12b0c:	b510      	push	{r4, lr}
   12b0e:	460c      	mov	r4, r1
    assert(!log_written);
   12b10:	4926      	ldr	r1, [pc, #152]	; (12bac <log_register+0xa0>)
   12b12:	7809      	ldrb	r1, [r1, #0]
{
   12b14:	b08c      	sub	sp, #48	; 0x30
    assert(!log_written);
   12b16:	b129      	cbz	r1, 12b24 <log_register+0x18>
   12b18:	2300      	movs	r3, #0
   12b1a:	461a      	mov	r2, r3
   12b1c:	4619      	mov	r1, r3
   12b1e:	4618      	mov	r0, r3
   12b20:	f7f6 f9e8 	bl	8ef4 <__assert_func>
    log->l_arg = arg;
   12b24:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
   12b26:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    log->l_append_cb = NULL;
   12b2a:	6121      	str	r1, [r4, #16]
    log->l_level = level;
   12b2c:	2b0f      	cmp	r3, #15
    log->l_max_entry_len = 0;
   12b2e:	82e1      	strh	r1, [r4, #22]
    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   12b30:	491f      	ldr	r1, [pc, #124]	; (12bb0 <log_register+0xa4>)
    log->l_level = level;
   12b32:	bf28      	it	cs
   12b34:	230f      	movcs	r3, #15
    log->l_log = lh;
   12b36:	e9c4 0200 	strd	r0, r2, [r4]
    log->l_level = level;
   12b3a:	7523      	strb	r3, [r4, #20]
    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   12b3c:	680b      	ldr	r3, [r1, #0]
   12b3e:	2b00      	cmp	r3, #0
   12b40:	d130      	bne.n	12ba4 <log_register+0x98>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
   12b42:	60e3      	str	r3, [r4, #12]
   12b44:	684b      	ldr	r3, [r1, #4]
   12b46:	601c      	str	r4, [r3, #0]
   12b48:	f104 030c 	add.w	r3, r4, #12
   12b4c:	604b      	str	r3, [r1, #4]
    if (log->l_log->log_registered) {
   12b4e:	6a53      	ldr	r3, [r2, #36]	; 0x24
   12b50:	b10b      	cbz	r3, 12b56 <log_register+0x4a>
        log->l_log->log_registered(log);
   12b52:	4620      	mov	r0, r4
   12b54:	4798      	blx	r3
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   12b56:	6863      	ldr	r3, [r4, #4]
   12b58:	681b      	ldr	r3, [r3, #0]
   12b5a:	2b02      	cmp	r3, #2
   12b5c:	d11f      	bne.n	12b9e <log_register+0x92>
    arg.hdr = out_hdr;
   12b5e:	ab02      	add	r3, sp, #8
    log_offset.lo_ts = -1;
   12b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12b64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12b68:	e9cd 0106 	strd	r0, r1, [sp, #24]
    arg.hdr = out_hdr;
   12b6c:	9300      	str	r3, [sp, #0]
    log_walk(log, log_read_hdr_walk, &log_offset);
   12b6e:	4911      	ldr	r1, [pc, #68]	; (12bb4 <log_register+0xa8>)
    log_offset.lo_arg = &arg;
   12b70:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
    arg.read_success = 0;
   12b74:	2300      	movs	r3, #0
    log_walk(log, log_read_hdr_walk, &log_offset);
   12b76:	aa06      	add	r2, sp, #24
   12b78:	4620      	mov	r0, r4
    log_offset.lo_data_len = 0;
   12b7a:	e9cd 3308 	strd	r3, r3, [sp, #32]
    arg.read_success = 0;
   12b7e:	9301      	str	r3, [sp, #4]
    log_walk(log, log_read_hdr_walk, &log_offset);
   12b80:	f7ff ffc1 	bl	12b06 <log_walk>
    if (!arg.read_success) {
   12b84:	9b01      	ldr	r3, [sp, #4]
   12b86:	b153      	cbz	r3, 12b9e <log_register+0x92>
            OS_ENTER_CRITICAL(sr);
   12b88:	f7f7 faee 	bl	a168 <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
   12b8c:	4a0a      	ldr	r2, [pc, #40]	; (12bb8 <log_register+0xac>)
   12b8e:	9b04      	ldr	r3, [sp, #16]
   12b90:	6811      	ldr	r1, [r2, #0]
   12b92:	428b      	cmp	r3, r1
                g_log_info.li_next_index = hdr.ue_index + 1;
   12b94:	bf24      	itt	cs
   12b96:	3301      	addcs	r3, #1
   12b98:	6013      	strcs	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   12b9a:	f7f7 faeb 	bl	a174 <os_arch_restore_sr>
}
   12b9e:	2000      	movs	r0, #0
   12ba0:	b00c      	add	sp, #48	; 0x30
   12ba2:	bd10      	pop	{r4, pc}
        if (cur == log) {
   12ba4:	429c      	cmp	r4, r3
   12ba6:	d0d2      	beq.n	12b4e <log_register+0x42>
    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   12ba8:	68db      	ldr	r3, [r3, #12]
   12baa:	e7c8      	b.n	12b3e <log_register+0x32>
   12bac:	200046bc 	.word	0x200046bc
   12bb0:	2000072c 	.word	0x2000072c
   12bb4:	00012bcf 	.word	0x00012bcf
   12bb8:	200046b0 	.word	0x200046b0

00012bbc <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
   12bbc:	b430      	push	{r4, r5}
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
   12bbe:	6844      	ldr	r4, [r0, #4]
{
   12bc0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    rc = log->l_log->log_read(log, dptr, buf, off, len);
   12bc4:	9502      	str	r5, [sp, #8]
   12bc6:	6864      	ldr	r4, [r4, #4]
   12bc8:	46a4      	mov	ip, r4

    return (rc);
}
   12bca:	bc30      	pop	{r4, r5}
    rc = log->l_log->log_read(log, dptr, buf, off, len);
   12bcc:	4760      	bx	ip

00012bce <log_read_hdr_walk>:
{
   12bce:	b513      	push	{r0, r1, r4, lr}
   12bd0:	460b      	mov	r3, r1
   12bd2:	4611      	mov	r1, r2
    arg = log_offset->lo_arg;
   12bd4:	691c      	ldr	r4, [r3, #16]
    rc = log_read(log, dptr, arg->hdr, 0, sizeof *arg->hdr);
   12bd6:	230e      	movs	r3, #14
   12bd8:	9300      	str	r3, [sp, #0]
   12bda:	6822      	ldr	r2, [r4, #0]
   12bdc:	2300      	movs	r3, #0
   12bde:	f7ff ffed 	bl	12bbc <log_read>
    if (rc >= sizeof *arg->hdr) {
   12be2:	280d      	cmp	r0, #13
        arg->read_success = 1;
   12be4:	bf88      	it	hi
   12be6:	2301      	movhi	r3, #1
}
   12be8:	f04f 0001 	mov.w	r0, #1
        arg->read_success = 1;
   12bec:	bf88      	it	hi
   12bee:	6063      	strhi	r3, [r4, #4]
}
   12bf0:	b002      	add	sp, #8
   12bf2:	bd10      	pop	{r4, pc}

00012bf4 <log_console_read>:
log_console_read(struct log *log, void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
   12bf4:	2002      	movs	r0, #2
   12bf6:	4770      	bx	lr

00012bf8 <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
   12bf8:	2002      	movs	r0, #2
   12bfa:	4770      	bx	lr

00012bfc <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
   12bfc:	2002      	movs	r0, #2
   12bfe:	4770      	bx	lr

00012c00 <log_console_append_body>:
{
   12c00:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12c02:	460c      	mov	r4, r1
   12c04:	4615      	mov	r5, r2
   12c06:	461e      	mov	r6, r3
    if (!console_is_init()) {
   12c08:	f7ff fc64 	bl	124d4 <console_is_init>
   12c0c:	b178      	cbz	r0, 12c2e <log_console_append_body+0x2e>
    if (!console_is_midline) {
   12c0e:	4b09      	ldr	r3, [pc, #36]	; (12c34 <log_console_append_body+0x34>)
   12c10:	681b      	ldr	r3, [r3, #0]
   12c12:	b943      	cbnz	r3, 12c26 <log_console_append_body+0x26>
    console_printf("[ts=%lluus, mod=%u level=%u] ",
   12c14:	7b63      	ldrb	r3, [r4, #13]
   12c16:	9301      	str	r3, [sp, #4]
   12c18:	7b23      	ldrb	r3, [r4, #12]
   12c1a:	9300      	str	r3, [sp, #0]
   12c1c:	6822      	ldr	r2, [r4, #0]
   12c1e:	6863      	ldr	r3, [r4, #4]
   12c20:	4805      	ldr	r0, [pc, #20]	; (12c38 <log_console_append_body+0x38>)
   12c22:	f7ff fcd7 	bl	125d4 <console_printf>
    console_write(body, body_len);
   12c26:	4631      	mov	r1, r6
   12c28:	4628      	mov	r0, r5
   12c2a:	f7ff f9e3 	bl	11ff4 <console_write>
}
   12c2e:	2000      	movs	r0, #0
   12c30:	b002      	add	sp, #8
   12c32:	bd70      	pop	{r4, r5, r6, pc}
   12c34:	200045e8 	.word	0x200045e8
   12c38:	000227f0 	.word	0x000227f0

00012c3c <log_console_append>:
{
   12c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12c3e:	460c      	mov	r4, r1
   12c40:	4615      	mov	r5, r2
    if (!console_is_init()) {
   12c42:	f7ff fc47 	bl	124d4 <console_is_init>
   12c46:	b188      	cbz	r0, 12c6c <log_console_append+0x30>
    if (!console_is_midline) {
   12c48:	4b0a      	ldr	r3, [pc, #40]	; (12c74 <log_console_append+0x38>)
   12c4a:	681b      	ldr	r3, [r3, #0]
   12c4c:	b943      	cbnz	r3, 12c60 <log_console_append+0x24>
    console_printf("[ts=%lluus, mod=%u level=%u] ",
   12c4e:	7b63      	ldrb	r3, [r4, #13]
   12c50:	9301      	str	r3, [sp, #4]
   12c52:	7b23      	ldrb	r3, [r4, #12]
   12c54:	9300      	str	r3, [sp, #0]
   12c56:	6822      	ldr	r2, [r4, #0]
   12c58:	6863      	ldr	r3, [r4, #4]
   12c5a:	4807      	ldr	r0, [pc, #28]	; (12c78 <log_console_append+0x3c>)
   12c5c:	f7ff fcba 	bl	125d4 <console_printf>
    console_write((char *) buf + LOG_ENTRY_HDR_SIZE, len - LOG_ENTRY_HDR_SIZE);
   12c60:	f1a5 010e 	sub.w	r1, r5, #14
   12c64:	f104 000e 	add.w	r0, r4, #14
   12c68:	f7ff f9c4 	bl	11ff4 <console_write>
}
   12c6c:	2000      	movs	r0, #0
   12c6e:	b003      	add	sp, #12
   12c70:	bd30      	pop	{r4, r5, pc}
   12c72:	bf00      	nop
   12c74:	200045e8 	.word	0x200045e8
   12c78:	000227f0 	.word	0x000227f0

00012c7c <log_console_get>:
}
   12c7c:	4800      	ldr	r0, [pc, #0]	; (12c80 <log_console_get+0x4>)
   12c7e:	4770      	bx	lr
   12c80:	200046c0 	.word	0x200046c0

00012c84 <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
   12c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   12c86:	4b0d      	ldr	r3, [pc, #52]	; (12cbc <log_console_init+0x38>)
   12c88:	781b      	ldrb	r3, [r3, #0]
   12c8a:	b923      	cbnz	r3, 12c96 <log_console_init+0x12>
   12c8c:	461a      	mov	r2, r3
   12c8e:	4619      	mov	r1, r3
   12c90:	4618      	mov	r0, r3
   12c92:	f7f6 f92f 	bl	8ef4 <__assert_func>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
   12c96:	2400      	movs	r4, #0
   12c98:	4a09      	ldr	r2, [pc, #36]	; (12cc0 <log_console_init+0x3c>)
   12c9a:	490a      	ldr	r1, [pc, #40]	; (12cc4 <log_console_init+0x40>)
   12c9c:	480a      	ldr	r0, [pc, #40]	; (12cc8 <log_console_init+0x44>)
   12c9e:	9400      	str	r4, [sp, #0]
   12ca0:	4623      	mov	r3, r4
   12ca2:	f7ff ff33 	bl	12b0c <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
   12ca6:	b138      	cbz	r0, 12cb8 <log_console_init+0x34>
   12ca8:	4b08      	ldr	r3, [pc, #32]	; (12ccc <log_console_init+0x48>)
   12caa:	9400      	str	r4, [sp, #0]
   12cac:	681d      	ldr	r5, [r3, #0]
   12cae:	4622      	mov	r2, r4
   12cb0:	4623      	mov	r3, r4
   12cb2:	4621      	mov	r1, r4
   12cb4:	4620      	mov	r0, r4
   12cb6:	47a8      	blx	r5
}
   12cb8:	b003      	add	sp, #12
   12cba:	bd30      	pop	{r4, r5, pc}
   12cbc:	20004ba8 	.word	0x20004ba8
   12cc0:	00022818 	.word	0x00022818
   12cc4:	200046c0 	.word	0x200046c0
   12cc8:	0002280e 	.word	0x0002280e
   12ccc:	20000768 	.word	0x20000768

00012cd0 <log_level_get>:
uint8_t
log_level_get(uint8_t module)
{
    uint8_t byte;

    byte = log_level_map[module / 2];
   12cd0:	0843      	lsrs	r3, r0, #1
   12cd2:	4a04      	ldr	r2, [pc, #16]	; (12ce4 <log_level_get+0x14>)
   12cd4:	5cd3      	ldrb	r3, [r2, r3]
    if (module % 2 == 0) {
   12cd6:	07c2      	lsls	r2, r0, #31
        return byte & 0x0f;
   12cd8:	bf54      	ite	pl
   12cda:	f003 000f 	andpl.w	r0, r3, #15
    } else {
        return byte >> 4;
   12cde:	0918      	lsrmi	r0, r3, #4
    }
}
   12ce0:	4770      	bx	lr
   12ce2:	bf00      	nop
   12ce4:	200046d8 	.word	0x200046d8

00012ce8 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   12ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   12cea:	4e25      	ldr	r6, [pc, #148]	; (12d80 <mfg_read_next_mmr+0x98>)
        if (mfg_mmrs[i].area_id == area_id) {
   12cec:	4a25      	ldr	r2, [pc, #148]	; (12d84 <mfg_read_next_mmr+0x9c>)
    for (i = 0; i < mfg_num_mmrs; i++) {
   12cee:	6834      	ldr	r4, [r6, #0]
{
   12cf0:	b085      	sub	sp, #20
   12cf2:	4605      	mov	r5, r0
    for (i = 0; i < mfg_num_mmrs; i++) {
   12cf4:	2300      	movs	r3, #0
        if (mfg_mmrs[i].area_id == area_id) {
   12cf6:	210c      	movs	r1, #12
    for (i = 0; i < mfg_num_mmrs; i++) {
   12cf8:	429c      	cmp	r4, r3
   12cfa:	dc0a      	bgt.n	12d12 <mfg_read_next_mmr+0x2a>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   12cfc:	2c02      	cmp	r4, #2
   12cfe:	d03c      	beq.n	12d7a <mfg_read_next_mmr+0x92>
    rc = flash_area_open(area_id, &fap);
   12d00:	a901      	add	r1, sp, #4
   12d02:	4628      	mov	r0, r5
   12d04:	f7ff fd18 	bl	12738 <flash_area_open>
    if (rc != 0) {
   12d08:	b150      	cbz	r0, 12d20 <mfg_read_next_mmr+0x38>
        return SYS_EIO;
   12d0a:	f06f 0004 	mvn.w	r0, #4
        return rc;
    }

    mfg_num_mmrs++;
    return 0;
}
   12d0e:	b005      	add	sp, #20
   12d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (mfg_mmrs[i].area_id == area_id) {
   12d12:	fb01 f003 	mul.w	r0, r1, r3
   12d16:	5c80      	ldrb	r0, [r0, r2]
   12d18:	42a8      	cmp	r0, r5
   12d1a:	d02b      	beq.n	12d74 <mfg_read_next_mmr+0x8c>
    for (i = 0; i < mfg_num_mmrs; i++) {
   12d1c:	3301      	adds	r3, #1
   12d1e:	e7eb      	b.n	12cf8 <mfg_read_next_mmr+0x10>
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   12d20:	9801      	ldr	r0, [sp, #4]
   12d22:	6881      	ldr	r1, [r0, #8]
   12d24:	2308      	movs	r3, #8
   12d26:	eb0d 0203 	add.w	r2, sp, r3
   12d2a:	3908      	subs	r1, #8
   12d2c:	f7ff fd5c 	bl	127e8 <flash_area_read>
    if (rc != 0) {
   12d30:	2800      	cmp	r0, #0
   12d32:	d1ea      	bne.n	12d0a <mfg_read_next_mmr+0x22>
    if (ftr.magic != MFG_META_MAGIC) {
   12d34:	4b14      	ldr	r3, [pc, #80]	; (12d88 <mfg_read_next_mmr+0xa0>)
   12d36:	9a03      	ldr	r2, [sp, #12]
   12d38:	429a      	cmp	r2, r3
   12d3a:	d115      	bne.n	12d68 <mfg_read_next_mmr+0x80>
    if (ftr.version != MFG_META_VERSION) {
   12d3c:	f89d 300a 	ldrb.w	r3, [sp, #10]
   12d40:	2b02      	cmp	r3, #2
   12d42:	d114      	bne.n	12d6e <mfg_read_next_mmr+0x86>
    if (ftr.size > fap->fa_size) {
   12d44:	9b01      	ldr	r3, [sp, #4]
   12d46:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   12d4a:	689b      	ldr	r3, [r3, #8]
   12d4c:	429a      	cmp	r2, r3
   12d4e:	d80b      	bhi.n	12d68 <mfg_read_next_mmr+0x80>
    *out_mmr = (struct mfg_mmr) {
   12d50:	4f0c      	ldr	r7, [pc, #48]	; (12d84 <mfg_read_next_mmr+0x9c>)
   12d52:	210c      	movs	r1, #12
   12d54:	434c      	muls	r4, r1
        .offset = fap->fa_size - ftr.size,
   12d56:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   12d58:	1939      	adds	r1, r7, r4
   12d5a:	e9c1 3201 	strd	r3, r2, [r1, #4]
    mfg_num_mmrs++;
   12d5e:	6833      	ldr	r3, [r6, #0]
    *out_mmr = (struct mfg_mmr) {
   12d60:	553d      	strb	r5, [r7, r4]
    mfg_num_mmrs++;
   12d62:	3301      	adds	r3, #1
   12d64:	6033      	str	r3, [r6, #0]
    return 0;
   12d66:	e7d2      	b.n	12d0e <mfg_read_next_mmr+0x26>
        return SYS_ENODEV;
   12d68:	f06f 0008 	mvn.w	r0, #8
   12d6c:	e7cf      	b.n	12d0e <mfg_read_next_mmr+0x26>
        return SYS_ENOTSUP;
   12d6e:	f06f 000b 	mvn.w	r0, #11
   12d72:	e7cc      	b.n	12d0e <mfg_read_next_mmr+0x26>
            return SYS_EALREADY;
   12d74:	f06f 000a 	mvn.w	r0, #10
   12d78:	e7c9      	b.n	12d0e <mfg_read_next_mmr+0x26>
        return SYS_ENOMEM;
   12d7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12d7e:	e7c6      	b.n	12d0e <mfg_read_next_mmr+0x26>
   12d80:	20004774 	.word	0x20004774
   12d84:	2000475c 	.word	0x2000475c
   12d88:	3bb2a269 	.word	0x3bb2a269

00012d8c <mfg_read_tlv_body>:
{
   12d8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12d8e:	4616      	mov	r6, r2
    assert(reader->mmr_idx < mfg_num_mmrs);
   12d90:	4a14      	ldr	r2, [pc, #80]	; (12de4 <mfg_read_tlv_body+0x58>)
   12d92:	7883      	ldrb	r3, [r0, #2]
   12d94:	6812      	ldr	r2, [r2, #0]
   12d96:	4293      	cmp	r3, r2
{
   12d98:	4604      	mov	r4, r0
   12d9a:	460d      	mov	r5, r1
    assert(reader->mmr_idx < mfg_num_mmrs);
   12d9c:	db05      	blt.n	12daa <mfg_read_tlv_body+0x1e>
   12d9e:	2300      	movs	r3, #0
   12da0:	461a      	mov	r2, r3
   12da2:	4619      	mov	r1, r3
   12da4:	4618      	mov	r0, r3
   12da6:	f7f6 f8a5 	bl	8ef4 <__assert_func>
    rc = flash_area_open(mmr->area_id, fap);
   12daa:	220c      	movs	r2, #12
   12dac:	4353      	muls	r3, r2
   12dae:	4a0e      	ldr	r2, [pc, #56]	; (12de8 <mfg_read_tlv_body+0x5c>)
   12db0:	a901      	add	r1, sp, #4
   12db2:	5cd0      	ldrb	r0, [r2, r3]
   12db4:	f7ff fcc0 	bl	12738 <flash_area_open>
    if (rc != 0) {
   12db8:	4601      	mov	r1, r0
   12dba:	b970      	cbnz	r0, 12dda <mfg_read_tlv_body+0x4e>
    memset(dst, 0, max_size);
   12dbc:	4632      	mov	r2, r6
   12dbe:	4628      	mov	r0, r5
   12dc0:	f7fc fc1d 	bl	f5fe <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   12dc4:	7863      	ldrb	r3, [r4, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   12dc6:	6861      	ldr	r1, [r4, #4]
   12dc8:	9801      	ldr	r0, [sp, #4]
   12dca:	42b3      	cmp	r3, r6
   12dcc:	bfa8      	it	ge
   12dce:	4633      	movge	r3, r6
   12dd0:	462a      	mov	r2, r5
   12dd2:	3102      	adds	r1, #2
   12dd4:	f7ff fd08 	bl	127e8 <flash_area_read>
    if (rc != 0) {
   12dd8:	b108      	cbz	r0, 12dde <mfg_read_tlv_body+0x52>
        return SYS_EIO;
   12dda:	f06f 0004 	mvn.w	r0, #4
}
   12dde:	b002      	add	sp, #8
   12de0:	bd70      	pop	{r4, r5, r6, pc}
   12de2:	bf00      	nop
   12de4:	20004774 	.word	0x20004774
   12de8:	2000475c 	.word	0x2000475c

00012dec <mfg_seek_next>:
{
   12dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (reader->mmr_idx >= mfg_num_mmrs) {
   12dee:	4d1a      	ldr	r5, [pc, #104]	; (12e58 <mfg_seek_next+0x6c>)
    rc = flash_area_open(mmr->area_id, &fap);
   12df0:	4e1a      	ldr	r6, [pc, #104]	; (12e5c <mfg_seek_next+0x70>)
{
   12df2:	4604      	mov	r4, r0
    if (reader->mmr_idx >= mfg_num_mmrs) {
   12df4:	78a3      	ldrb	r3, [r4, #2]
   12df6:	682a      	ldr	r2, [r5, #0]
   12df8:	4293      	cmp	r3, r2
   12dfa:	db03      	blt.n	12e04 <mfg_seek_next+0x18>
        return SYS_EINVAL;
   12dfc:	f06f 0001 	mvn.w	r0, #1
}
   12e00:	b003      	add	sp, #12
   12e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = flash_area_open(mmr->area_id, &fap);
   12e04:	220c      	movs	r2, #12
   12e06:	4353      	muls	r3, r2
   12e08:	a901      	add	r1, sp, #4
   12e0a:	5cf0      	ldrb	r0, [r6, r3]
   12e0c:	18f7      	adds	r7, r6, r3
   12e0e:	f7ff fc93 	bl	12738 <flash_area_open>
    if (rc != 0) {
   12e12:	b9f0      	cbnz	r0, 12e52 <mfg_seek_next+0x66>
    if (reader->offset == 0) {
   12e14:	6863      	ldr	r3, [r4, #4]
   12e16:	b973      	cbnz	r3, 12e36 <mfg_seek_next+0x4a>
        reader->offset = mmr->offset;
   12e18:	6879      	ldr	r1, [r7, #4]
    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   12e1a:	9801      	ldr	r0, [sp, #4]
   12e1c:	6061      	str	r1, [r4, #4]
   12e1e:	6883      	ldr	r3, [r0, #8]
   12e20:	3b08      	subs	r3, #8
   12e22:	428b      	cmp	r3, r1
   12e24:	d80f      	bhi.n	12e46 <mfg_seek_next+0x5a>
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   12e26:	78a3      	ldrb	r3, [r4, #2]
   12e28:	682a      	ldr	r2, [r5, #0]
   12e2a:	3301      	adds	r3, #1
   12e2c:	4293      	cmp	r3, r2
   12e2e:	db06      	blt.n	12e3e <mfg_seek_next+0x52>
            rc = SYS_EDONE;
   12e30:	f06f 000e 	mvn.w	r0, #14
   12e34:	e7e4      	b.n	12e00 <mfg_seek_next+0x14>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   12e36:	7861      	ldrb	r1, [r4, #1]
   12e38:	3302      	adds	r3, #2
   12e3a:	4419      	add	r1, r3
   12e3c:	e7ed      	b.n	12e1a <mfg_seek_next+0x2e>
            reader->offset = 0;
   12e3e:	2200      	movs	r2, #0
   12e40:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   12e42:	70a3      	strb	r3, [r4, #2]
    } while (rc == SYS_EAGAIN);
   12e44:	e7d6      	b.n	12df4 <mfg_seek_next+0x8>
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   12e46:	2302      	movs	r3, #2
   12e48:	4622      	mov	r2, r4
   12e4a:	f7ff fccd 	bl	127e8 <flash_area_read>
    if (rc != 0) {
   12e4e:	2800      	cmp	r0, #0
   12e50:	d0d6      	beq.n	12e00 <mfg_seek_next+0x14>
        rc = SYS_EIO;
   12e52:	f06f 0004 	mvn.w	r0, #4
   12e56:	e7d3      	b.n	12e00 <mfg_seek_next+0x14>
   12e58:	20004774 	.word	0x20004774
   12e5c:	2000475c 	.word	0x2000475c

00012e60 <mfg_seek_next_with_type>:
{
   12e60:	b538      	push	{r3, r4, r5, lr}
   12e62:	4604      	mov	r4, r0
   12e64:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   12e66:	4620      	mov	r0, r4
   12e68:	f7ff ffc0 	bl	12dec <mfg_seek_next>
        if (rc != 0) {
   12e6c:	b910      	cbnz	r0, 12e74 <mfg_seek_next_with_type+0x14>
        if (reader->cur_tlv.type == type) {
   12e6e:	7823      	ldrb	r3, [r4, #0]
   12e70:	42ab      	cmp	r3, r5
   12e72:	d1f8      	bne.n	12e66 <mfg_seek_next_with_type+0x6>
}
   12e74:	bd38      	pop	{r3, r4, r5, pc}

00012e76 <mfg_read_tlv_flash_area>:
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   12e76:	220a      	movs	r2, #10
   12e78:	f7ff bf88 	b.w	12d8c <mfg_read_tlv_body>

00012e7c <mfg_read_tlv_mmr_ref>:
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   12e7c:	2201      	movs	r2, #1
   12e7e:	f7ff bf85 	b.w	12d8c <mfg_read_tlv_body>
	...

00012e84 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   12e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;

    if (mfg_initialized) {
   12e86:	4b1a      	ldr	r3, [pc, #104]	; (12ef0 <mfg_init+0x6c>)
   12e88:	7818      	ldrb	r0, [r3, #0]
   12e8a:	bb70      	cbnz	r0, 12eea <mfg_init+0x66>
        return;
    }
    mfg_initialized = true;
   12e8c:	2201      	movs	r2, #1
   12e8e:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   12e90:	4b18      	ldr	r3, [pc, #96]	; (12ef4 <mfg_init+0x70>)
   12e92:	781b      	ldrb	r3, [r3, #0]
   12e94:	b923      	cbnz	r3, 12ea0 <mfg_init+0x1c>
   12e96:	461a      	mov	r2, r3
   12e98:	4619      	mov	r1, r3
   12e9a:	4618      	mov	r0, r3
   12e9c:	f7f6 f82a 	bl	8ef4 <__assert_func>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   12ea0:	f7ff ff22 	bl	12ce8 <mfg_read_next_mmr>
    if (rc != 0) {
   12ea4:	b9c0      	cbnz	r0, 12ed8 <mfg_init+0x54>
    mfg_open(&reader);
   12ea6:	a802      	add	r0, sp, #8
   12ea8:	f000 f828 	bl	12efc <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   12eac:	2104      	movs	r1, #4
   12eae:	a802      	add	r0, sp, #8
   12eb0:	f7ff ffd6 	bl	12e60 <mfg_seek_next_with_type>
        switch (rc) {
   12eb4:	f110 0f0f 	cmn.w	r0, #15
   12eb8:	d017      	beq.n	12eea <mfg_init+0x66>
   12eba:	b968      	cbnz	r0, 12ed8 <mfg_init+0x54>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   12ebc:	a901      	add	r1, sp, #4
   12ebe:	a802      	add	r0, sp, #8
   12ec0:	f7ff ffdc 	bl	12e7c <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   12ec4:	b940      	cbnz	r0, 12ed8 <mfg_init+0x54>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   12ec6:	f89d 0004 	ldrb.w	r0, [sp, #4]
   12eca:	f7ff ff0d 	bl	12ce8 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   12ece:	2800      	cmp	r0, #0
   12ed0:	d0ec      	beq.n	12eac <mfg_init+0x28>
   12ed2:	f110 0f0b 	cmn.w	r0, #11
   12ed6:	d0e9      	beq.n	12eac <mfg_init+0x28>
    }

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
   12ed8:	4a07      	ldr	r2, [pc, #28]	; (12ef8 <mfg_init+0x74>)
   12eda:	4603      	mov	r3, r0
   12edc:	2103      	movs	r1, #3
   12ede:	2080      	movs	r0, #128	; 0x80
}
   12ee0:	b005      	add	sp, #20
   12ee2:	f85d eb04 	ldr.w	lr, [sp], #4
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
   12ee6:	f00c b983 	b.w	1f1f0 <modlog_printf>
}
   12eea:	b005      	add	sp, #20
   12eec:	f85d fb04 	ldr.w	pc, [sp], #4
   12ef0:	20004758 	.word	0x20004758
   12ef4:	20004ba8 	.word	0x20004ba8
   12ef8:	00022840 	.word	0x00022840

00012efc <mfg_open>:
{
   12efc:	b510      	push	{r4, lr}
   12efe:	4604      	mov	r4, r0
    mfg_init();
   12f00:	f7ff ffc0 	bl	12e84 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   12f04:	2300      	movs	r3, #0
   12f06:	e9c4 3300 	strd	r3, r3, [r4]
}
   12f0a:	bd10      	pop	{r4, pc}

00012f0c <log_reboot_write>:
 * @param reason for reboot
 * @return 0 on success; non-zero on failure
 */
static int
log_reboot_write(const struct log_reboot_info *info)
{
   12f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12f10:	4605      	mov	r5, r0
            return 0;
        }
    }
#endif

    rc = imgr_read_info(boot_current_slot, &ver, hash, NULL);
   12f12:	483c      	ldr	r0, [pc, #240]	; (13004 <log_reboot_write+0xf8>)
{
   12f14:	b0d1      	sub	sp, #324	; 0x144
    rc = imgr_read_info(boot_current_slot, &ver, hash, NULL);
   12f16:	6800      	ldr	r0, [r0, #0]
   12f18:	2300      	movs	r3, #0
   12f1a:	aa08      	add	r2, sp, #32
   12f1c:	a906      	add	r1, sp, #24
   12f1e:	f7fc ff9f 	bl	fe60 <imgr_read_info>
    if (rc != 0) {
   12f22:	4607      	mov	r7, r0
   12f24:	2800      	cmp	r0, #0
   12f26:	d15d      	bne.n	12fe4 <log_reboot_write+0xd8>
    }

    off = 0;
    off += snprintf(buf + off, sizeof buf - off,
                    "rsn:%s, cnt:%u, img:%u.%u.%u.%u, hash:",
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   12f28:	782a      	ldrb	r2, [r5, #0]
    off += snprintf(buf + off, sizeof buf - off,
   12f2a:	2a01      	cmp	r2, #1
   12f2c:	d05e      	beq.n	12fec <log_reboot_write+0xe0>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   12f2e:	2a02      	cmp	r2, #2
   12f30:	d05e      	beq.n	12ff0 <log_reboot_write+0xe4>
   12f32:	2a03      	cmp	r2, #3
   12f34:	d05e      	beq.n	12ff4 <log_reboot_write+0xe8>
   12f36:	2a04      	cmp	r2, #4
   12f38:	d05e      	beq.n	12ff8 <log_reboot_write+0xec>
   12f3a:	2a05      	cmp	r2, #5
   12f3c:	d05e      	beq.n	12ffc <log_reboot_write+0xf0>
   12f3e:	2a06      	cmp	r2, #6
   12f40:	d05e      	beq.n	13000 <log_reboot_write+0xf4>
   12f42:	4b31      	ldr	r3, [pc, #196]	; (13008 <log_reboot_write+0xfc>)
   12f44:	4931      	ldr	r1, [pc, #196]	; (1300c <log_reboot_write+0x100>)
   12f46:	2a07      	cmp	r2, #7
   12f48:	bf18      	it	ne
   12f4a:	460b      	movne	r3, r1
    off += snprintf(buf + off, sizeof buf - off,
   12f4c:	9a07      	ldr	r2, [sp, #28]
   12f4e:	9204      	str	r2, [sp, #16]
   12f50:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   12f54:	9203      	str	r2, [sp, #12]
   12f56:	f89d 2019 	ldrb.w	r2, [sp, #25]
   12f5a:	9202      	str	r2, [sp, #8]
   12f5c:	f89d 2018 	ldrb.w	r2, [sp, #24]
   12f60:	9201      	str	r2, [sp, #4]
   12f62:	4a2b      	ldr	r2, [pc, #172]	; (13010 <log_reboot_write+0x104>)
                    ver.iv_minor, ver.iv_revision,
                    (unsigned int)ver.iv_build_num);

    for (i = 0; i < sizeof hash; i++) {
        off += snprintf(buf + off, sizeof buf - off, "%02x",
   12f64:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 13038 <log_reboot_write+0x12c>
    off += snprintf(buf + off, sizeof buf - off,
   12f68:	8812      	ldrh	r2, [r2, #0]
   12f6a:	9200      	str	r2, [sp, #0]
   12f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
   12f70:	4a28      	ldr	r2, [pc, #160]	; (13014 <log_reboot_write+0x108>)
   12f72:	a810      	add	r0, sp, #64	; 0x40
   12f74:	f7fc fe62 	bl	fc3c <snprintf>
   12f78:	ae08      	add	r6, sp, #32
   12f7a:	4604      	mov	r4, r0
    for (i = 0; i < sizeof hash; i++) {
   12f7c:	f04f 0800 	mov.w	r8, #0
        off += snprintf(buf + off, sizeof buf - off, "%02x",
   12f80:	a810      	add	r0, sp, #64	; 0x40
   12f82:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   12f86:	4420      	add	r0, r4
   12f88:	f816 3b01 	ldrb.w	r3, [r6], #1
   12f8c:	464a      	mov	r2, r9
   12f8e:	f7fc fe55 	bl	fc3c <snprintf>
    for (i = 0; i < sizeof hash; i++) {
   12f92:	f108 0801 	add.w	r8, r8, #1
   12f96:	f1b8 0f20 	cmp.w	r8, #32
        off += snprintf(buf + off, sizeof buf - off, "%02x",
   12f9a:	4404      	add	r4, r0
    for (i = 0; i < sizeof hash; i++) {
   12f9c:	d1f0      	bne.n	12f80 <log_reboot_write+0x74>
                        (unsigned int)hash[i]);
    }

    if (info->file != NULL) {
   12f9e:	686b      	ldr	r3, [r5, #4]
   12fa0:	b14b      	cbz	r3, 12fb6 <log_reboot_write+0xaa>
        off += snprintf(buf + off, sizeof buf - off, ", die:%s:%d",
   12fa2:	68aa      	ldr	r2, [r5, #8]
   12fa4:	9200      	str	r2, [sp, #0]
   12fa6:	a810      	add	r0, sp, #64	; 0x40
   12fa8:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   12fac:	4420      	add	r0, r4
   12fae:	4a1a      	ldr	r2, [pc, #104]	; (13018 <log_reboot_write+0x10c>)
   12fb0:	f7fc fe44 	bl	fc3c <snprintf>
   12fb4:	4404      	add	r4, r0
                info->file, info->line);
    }

    if (info->pc != 0) {
   12fb6:	68eb      	ldr	r3, [r5, #12]
   12fb8:	b13b      	cbz	r3, 12fca <log_reboot_write+0xbe>
        off += snprintf(buf + off, sizeof buf - off, ", pc:0x%lx",
   12fba:	a810      	add	r0, sp, #64	; 0x40
   12fbc:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   12fc0:	4420      	add	r0, r4
   12fc2:	4a16      	ldr	r2, [pc, #88]	; (1301c <log_reboot_write+0x110>)
   12fc4:	f7fc fe3a 	bl	fc3c <snprintf>
   12fc8:	4404      	add	r4, r0
                (unsigned long)info->pc);
    }

    /* Make sure we don't log beyond the end of the source buffer. */
    if (off > sizeof buf) {
        off = sizeof buf;
   12fca:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   12fce:	bf88      	it	hi
   12fd0:	f44f 7480 	movhi.w	r4, #256	; 0x100
    }

    /* Log a reboot */
    modlog_append(LOG_MODULE_REBOOT, LOG_LEVEL_CRITICAL, LOG_ETYPE_STRING,
   12fd4:	b2a4      	uxth	r4, r4
   12fd6:	9400      	str	r4, [sp, #0]
   12fd8:	ab10      	add	r3, sp, #64	; 0x40
   12fda:	2200      	movs	r2, #0
   12fdc:	2104      	movs	r1, #4
   12fde:	2006      	movs	r0, #6
   12fe0:	f00c f8b4 	bl	1f14c <modlog_append>
                  buf, off);

    return 0;
}
   12fe4:	4638      	mov	r0, r7
   12fe6:	b051      	add	sp, #324	; 0x144
   12fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    off += snprintf(buf + off, sizeof buf - off,
   12fec:	4b0c      	ldr	r3, [pc, #48]	; (13020 <log_reboot_write+0x114>)
   12fee:	e7ad      	b.n	12f4c <log_reboot_write+0x40>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   12ff0:	4b0c      	ldr	r3, [pc, #48]	; (13024 <log_reboot_write+0x118>)
   12ff2:	e7ab      	b.n	12f4c <log_reboot_write+0x40>
   12ff4:	4b0c      	ldr	r3, [pc, #48]	; (13028 <log_reboot_write+0x11c>)
   12ff6:	e7a9      	b.n	12f4c <log_reboot_write+0x40>
   12ff8:	4b0c      	ldr	r3, [pc, #48]	; (1302c <log_reboot_write+0x120>)
   12ffa:	e7a7      	b.n	12f4c <log_reboot_write+0x40>
   12ffc:	4b0c      	ldr	r3, [pc, #48]	; (13030 <log_reboot_write+0x124>)
   12ffe:	e7a5      	b.n	12f4c <log_reboot_write+0x40>
   13000:	4b0c      	ldr	r3, [pc, #48]	; (13034 <log_reboot_write+0x128>)
   13002:	e7a3      	b.n	12f4c <log_reboot_write+0x40>
   13004:	20004bc8 	.word	0x20004bc8
   13008:	00022873 	.word	0x00022873
   1300c:	00022896 	.word	0x00022896
   13010:	20004786 	.word	0x20004786
   13014:	0002289e 	.word	0x0002289e
   13018:	000228ca 	.word	0x000228ca
   1301c:	000228d6 	.word	0x000228d6
   13020:	00022882 	.word	0x00022882
   13024:	00022887 	.word	0x00022887
   13028:	00022864 	.word	0x00022864
   1302c:	00022891 	.word	0x00022891
   13030:	0002285b 	.word	0x0002285b
   13034:	00022869 	.word	0x00022869
   13038:	000228c5 	.word	0x000228c5

0001303c <reboot_conf_export>:

static int
reboot_conf_export(void (*func)(char *name, char *val),
                   enum conf_export_tgt tgt)
{
    if (tgt == CONF_EXPORT_SHOW) {
   1303c:	2901      	cmp	r1, #1
{
   1303e:	b510      	push	{r4, lr}
   13040:	4604      	mov	r4, r0
    if (tgt == CONF_EXPORT_SHOW) {
   13042:	d105      	bne.n	13050 <reboot_conf_export+0x14>
        func("reboot/reboot_cnt", reboot_cnt_str);
   13044:	4903      	ldr	r1, [pc, #12]	; (13054 <reboot_conf_export+0x18>)
   13046:	4804      	ldr	r0, [pc, #16]	; (13058 <reboot_conf_export+0x1c>)
   13048:	47a0      	blx	r4
        func("reboot/written", log_reboot_written_str);
   1304a:	4904      	ldr	r1, [pc, #16]	; (1305c <reboot_conf_export+0x20>)
   1304c:	4804      	ldr	r0, [pc, #16]	; (13060 <reboot_conf_export+0x24>)
   1304e:	47a0      	blx	r4
    }
    return 0;
}
   13050:	2000      	movs	r0, #0
   13052:	bd10      	pop	{r4, pc}
   13054:	20004788 	.word	0x20004788
   13058:	000228e1 	.word	0x000228e1
   1305c:	20004779 	.word	0x20004779
   13060:	000228f3 	.word	0x000228f3

00013064 <reboot_conf_get>:
    if (argc == 1) {
   13064:	2801      	cmp	r0, #1
{
   13066:	b510      	push	{r4, lr}
    if (argc == 1) {
   13068:	d117      	bne.n	1309a <reboot_conf_get+0x36>
        if (!strcmp(argv[0], "reboot_cnt")) {
   1306a:	680c      	ldr	r4, [r1, #0]
   1306c:	490c      	ldr	r1, [pc, #48]	; (130a0 <reboot_conf_get+0x3c>)
   1306e:	4620      	mov	r0, r4
   13070:	f7fc faea 	bl	f648 <strcmp>
   13074:	b938      	cbnz	r0, 13086 <reboot_conf_get+0x22>
            return conf_str_from_value(CONF_INT16, &reboot_cnt,
   13076:	4a0b      	ldr	r2, [pc, #44]	; (130a4 <reboot_conf_get+0x40>)
   13078:	490b      	ldr	r1, [pc, #44]	; (130a8 <reboot_conf_get+0x44>)
   1307a:	230c      	movs	r3, #12
   1307c:	2003      	movs	r0, #3
}
   1307e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            return conf_str_from_value(CONF_BOOL, &log_reboot_written,
   13082:	f7fe bc05 	b.w	11890 <conf_str_from_value>
        } else if (!strcmp(argv[0], "written")) {
   13086:	4909      	ldr	r1, [pc, #36]	; (130ac <reboot_conf_get+0x48>)
   13088:	4620      	mov	r0, r4
   1308a:	f7fc fadd 	bl	f648 <strcmp>
   1308e:	b920      	cbnz	r0, 1309a <reboot_conf_get+0x36>
            return conf_str_from_value(CONF_BOOL, &log_reboot_written,
   13090:	4a07      	ldr	r2, [pc, #28]	; (130b0 <reboot_conf_get+0x4c>)
   13092:	4908      	ldr	r1, [pc, #32]	; (130b4 <reboot_conf_get+0x50>)
   13094:	230c      	movs	r3, #12
   13096:	200a      	movs	r0, #10
   13098:	e7f1      	b.n	1307e <reboot_conf_get+0x1a>
}
   1309a:	2000      	movs	r0, #0
   1309c:	bd10      	pop	{r4, pc}
   1309e:	bf00      	nop
   130a0:	000228e8 	.word	0x000228e8
   130a4:	20004788 	.word	0x20004788
   130a8:	20004786 	.word	0x20004786
   130ac:	000228fa 	.word	0x000228fa
   130b0:	20004779 	.word	0x20004779
   130b4:	20004778 	.word	0x20004778

000130b8 <reboot_conf_set>:
    if (argc == 1) {
   130b8:	2801      	cmp	r0, #1
{
   130ba:	b570      	push	{r4, r5, r6, lr}
   130bc:	4605      	mov	r5, r0
   130be:	4614      	mov	r4, r2
    if (argc == 1) {
   130c0:	d115      	bne.n	130ee <reboot_conf_set+0x36>
   130c2:	680e      	ldr	r6, [r1, #0]
        if (!strcmp(argv[0], "reboot_cnt")) {
   130c4:	490b      	ldr	r1, [pc, #44]	; (130f4 <reboot_conf_set+0x3c>)
   130c6:	4630      	mov	r0, r6
   130c8:	f7fc fabe 	bl	f648 <strcmp>
   130cc:	b938      	cbnz	r0, 130de <reboot_conf_set+0x26>
            return CONF_VALUE_SET(val, CONF_INT16, reboot_cnt);
   130ce:	4a0a      	ldr	r2, [pc, #40]	; (130f8 <reboot_conf_set+0x40>)
   130d0:	2302      	movs	r3, #2
            return CONF_VALUE_SET(val, CONF_INT16, log_reboot_written);
   130d2:	4620      	mov	r0, r4
   130d4:	2103      	movs	r1, #3
}
   130d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return CONF_VALUE_SET(val, CONF_INT16, log_reboot_written);
   130da:	f7fe bb7d 	b.w	117d8 <conf_value_from_str>
        } else if (!strcmp(argv[0], "written")) {
   130de:	4907      	ldr	r1, [pc, #28]	; (130fc <reboot_conf_set+0x44>)
   130e0:	4630      	mov	r0, r6
   130e2:	f7fc fab1 	bl	f648 <strcmp>
   130e6:	b910      	cbnz	r0, 130ee <reboot_conf_set+0x36>
            return CONF_VALUE_SET(val, CONF_INT16, log_reboot_written);
   130e8:	4a05      	ldr	r2, [pc, #20]	; (13100 <reboot_conf_set+0x48>)
   130ea:	462b      	mov	r3, r5
   130ec:	e7f1      	b.n	130d2 <reboot_conf_set+0x1a>
}
   130ee:	200a      	movs	r0, #10
   130f0:	bd70      	pop	{r4, r5, r6, pc}
   130f2:	bf00      	nop
   130f4:	000228e8 	.word	0x000228e8
   130f8:	20004786 	.word	0x20004786
   130fc:	000228fa 	.word	0x000228fa
   13100:	20004778 	.word	0x20004778

00013104 <log_reboot>:
{
   13104:	b538      	push	{r3, r4, r5, lr}
    if (log_reboot_written) {
   13106:	4d09      	ldr	r5, [pc, #36]	; (1312c <log_reboot+0x28>)
   13108:	f995 3000 	ldrsb.w	r3, [r5]
   1310c:	b95b      	cbnz	r3, 13126 <log_reboot+0x22>
    rc = log_reboot_write(info);
   1310e:	f7ff fefd 	bl	12f0c <log_reboot_write>
    if (rc != 0) {
   13112:	4604      	mov	r4, r0
   13114:	b928      	cbnz	r0, 13122 <log_reboot+0x1e>
    log_reboot_written = 1;
   13116:	2301      	movs	r3, #1
    conf_save_one("reboot/written", "1");
   13118:	4905      	ldr	r1, [pc, #20]	; (13130 <log_reboot+0x2c>)
   1311a:	4806      	ldr	r0, [pc, #24]	; (13134 <log_reboot+0x30>)
    log_reboot_written = 1;
   1311c:	702b      	strb	r3, [r5, #0]
    conf_save_one("reboot/written", "1");
   1311e:	f7fe fd47 	bl	11bb0 <conf_save_one>
}
   13122:	4620      	mov	r0, r4
   13124:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
   13126:	2400      	movs	r4, #0
   13128:	e7fb      	b.n	13122 <log_reboot+0x1e>
   1312a:	bf00      	nop
   1312c:	20004778 	.word	0x20004778
   13130:	000236f3 	.word	0x000236f3
   13134:	000228f3 	.word	0x000228f3

00013138 <log_reboot_pkg_init>:

void
log_reboot_pkg_init(void)
{
   13138:	b513      	push	{r0, r1, r4, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1313a:	4b13      	ldr	r3, [pc, #76]	; (13188 <log_reboot_pkg_init+0x50>)
   1313c:	781b      	ldrb	r3, [r3, #0]
   1313e:	b923      	cbnz	r3, 1314a <log_reboot_pkg_init+0x12>
   13140:	461a      	mov	r2, r3
   13142:	4619      	mov	r1, r3
   13144:	4618      	mov	r0, r3
   13146:	f7f5 fed5 	bl	8ef4 <__assert_func>

    rc = conf_register(&reboot_conf_handler);
   1314a:	4810      	ldr	r0, [pc, #64]	; (1318c <log_reboot_pkg_init+0x54>)
   1314c:	f7fe fb00 	bl	11750 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   13150:	b138      	cbz	r0, 13162 <log_reboot_pkg_init+0x2a>
   13152:	2300      	movs	r3, #0
   13154:	4a0e      	ldr	r2, [pc, #56]	; (13190 <log_reboot_pkg_init+0x58>)
   13156:	9300      	str	r3, [sp, #0]
   13158:	6814      	ldr	r4, [r2, #0]
   1315a:	4619      	mov	r1, r3
   1315c:	461a      	mov	r2, r3
   1315e:	4618      	mov	r0, r3
   13160:	47a0      	blx	r4
    rc = modlog_register(LOG_MODULE_REBOOT, log_console_get(), LOG_SYSLEVEL,
   13162:	f7ff fd8b 	bl	12c7c <log_console_get>
   13166:	2300      	movs	r3, #0
   13168:	4601      	mov	r1, r0
   1316a:	461a      	mov	r2, r3
   1316c:	2006      	movs	r0, #6
   1316e:	f00b ff91 	bl	1f094 <modlog_register>
    if (rc != 0) {
   13172:	b138      	cbz	r0, 13184 <log_reboot_pkg_init+0x4c>
    rc = log_reboot_init_fcb();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
#if MYNEWT_VAL(REBOOT_LOG_CONSOLE)
    rc = log_reboot_init_console();
    SYSINIT_PANIC_ASSERT(rc == 0);
   13174:	2300      	movs	r3, #0
   13176:	4a06      	ldr	r2, [pc, #24]	; (13190 <log_reboot_pkg_init+0x58>)
   13178:	9300      	str	r3, [sp, #0]
   1317a:	6814      	ldr	r4, [r2, #0]
   1317c:	4619      	mov	r1, r3
   1317e:	461a      	mov	r2, r3
   13180:	4618      	mov	r0, r3
   13182:	47a0      	blx	r4
#endif
}
   13184:	b002      	add	sp, #8
   13186:	bd10      	pop	{r4, pc}
   13188:	20004ba8 	.word	0x20004ba8
   1318c:	20000734 	.word	0x20000734
   13190:	20000768 	.word	0x20000768

00013194 <print_module_commands>:
    }
}

static void
print_module_commands(const int module, struct streamer *streamer)
{
   13194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13196:	460c      	mov	r4, r1
   13198:	4606      	mov	r6, r0
    const struct shell_module *shell_module = &shell_modules[module];
    int i;

    streamer_printf(streamer, "help\n");
   1319a:	4911      	ldr	r1, [pc, #68]	; (131e0 <print_module_commands+0x4c>)

    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
        streamer_printf(streamer, "%-30s", shell_module->commands[i].sc_cmd);
   1319c:	4f11      	ldr	r7, [pc, #68]	; (131e4 <print_module_commands+0x50>)
    streamer_printf(streamer, "help\n");
   1319e:	4620      	mov	r0, r4
   131a0:	f7fe f961 	bl	11466 <streamer_printf>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   131a4:	4810      	ldr	r0, [pc, #64]	; (131e8 <print_module_commands+0x54>)
   131a6:	2500      	movs	r5, #0
   131a8:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
   131ac:	6873      	ldr	r3, [r6, #4]
   131ae:	442b      	add	r3, r5
   131b0:	689a      	ldr	r2, [r3, #8]
   131b2:	b902      	cbnz	r2, 131b6 <print_module_commands+0x22>
            streamer_printf(streamer, "%s",
                            shell_module->commands[i].help->summary);
        }
        streamer_printf(streamer, "\n");
    }
}
   131b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        streamer_printf(streamer, "%-30s", shell_module->commands[i].sc_cmd);
   131b6:	4639      	mov	r1, r7
   131b8:	4620      	mov	r0, r4
   131ba:	f7fe f954 	bl	11466 <streamer_printf>
        if (shell_module->commands[i].help &&
   131be:	6873      	ldr	r3, [r6, #4]
   131c0:	442b      	add	r3, r5
   131c2:	68db      	ldr	r3, [r3, #12]
   131c4:	b12b      	cbz	r3, 131d2 <print_module_commands+0x3e>
            shell_module->commands[i].help->summary) {
   131c6:	681a      	ldr	r2, [r3, #0]
        if (shell_module->commands[i].help &&
   131c8:	b11a      	cbz	r2, 131d2 <print_module_commands+0x3e>
            streamer_printf(streamer, "%s",
   131ca:	4908      	ldr	r1, [pc, #32]	; (131ec <print_module_commands+0x58>)
   131cc:	4620      	mov	r0, r4
   131ce:	f7fe f94a 	bl	11466 <streamer_printf>
        streamer_printf(streamer, "\n");
   131d2:	4907      	ldr	r1, [pc, #28]	; (131f0 <print_module_commands+0x5c>)
   131d4:	4620      	mov	r0, r4
   131d6:	f7fe f946 	bl	11466 <streamer_printf>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   131da:	3510      	adds	r5, #16
   131dc:	e7e6      	b.n	131ac <print_module_commands+0x18>
   131de:	bf00      	nop
   131e0:	00022909 	.word	0x00022909
   131e4:	0002290f 	.word	0x0002290f
   131e8:	20004b28 	.word	0x20004b28
   131ec:	00022f05 	.word	0x00022f05
   131f0:	00022b8f 	.word	0x00022b8f

000131f4 <print_modules>:
{
   131f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (module = 0; module < num_of_shell_entities; module++) {
   131f8:	4e09      	ldr	r6, [pc, #36]	; (13220 <print_modules+0x2c>)
        streamer_printf(streamer, "%s\n", shell_modules[module].name);
   131fa:	4f0a      	ldr	r7, [pc, #40]	; (13224 <print_modules+0x30>)
   131fc:	f8df 8028 	ldr.w	r8, [pc, #40]	; 13228 <print_modules+0x34>
{
   13200:	4605      	mov	r5, r0
    for (module = 0; module < num_of_shell_entities; module++) {
   13202:	2400      	movs	r4, #0
   13204:	6833      	ldr	r3, [r6, #0]
   13206:	42a3      	cmp	r3, r4
   13208:	d801      	bhi.n	1320e <print_modules+0x1a>
}
   1320a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        streamer_printf(streamer, "%s\n", shell_modules[module].name);
   1320e:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
   13212:	4641      	mov	r1, r8
   13214:	4628      	mov	r0, r5
   13216:	f7fe f926 	bl	11466 <streamer_printf>
    for (module = 0; module < num_of_shell_entities; module++) {
   1321a:	3401      	adds	r4, #1
   1321c:	e7f2      	b.n	13204 <print_modules+0x10>
   1321e:	bf00      	nop
   13220:	20004b00 	.word	0x20004b00
   13224:	20004b28 	.word	0x20004b28
   13228:	00022e9f 	.word	0x00022e9f

0001322c <print_command_params>:
{
   1322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct shell_cmd *shell_cmd = &shell_module->commands[command];
   1322e:	4b0d      	ldr	r3, [pc, #52]	; (13264 <print_command_params+0x38>)
   13230:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
{
   13234:	4616      	mov	r6, r2
	const struct shell_cmd *shell_cmd = &shell_module->commands[command];
   13236:	6845      	ldr	r5, [r0, #4]
   13238:	eb05 1501 	add.w	r5, r5, r1, lsl #4
	if (!(shell_cmd->help && shell_cmd->help->params)) {
   1323c:	68eb      	ldr	r3, [r5, #12]
   1323e:	b14b      	cbz	r3, 13254 <print_command_params+0x28>
   13240:	689b      	ldr	r3, [r3, #8]
   13242:	b13b      	cbz	r3, 13254 <print_command_params+0x28>
		streamer_printf(streamer, "%-30s%s\n",
   13244:	4f08      	ldr	r7, [pc, #32]	; (13268 <print_command_params+0x3c>)
   13246:	2400      	movs	r4, #0
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
   13248:	68eb      	ldr	r3, [r5, #12]
   1324a:	689b      	ldr	r3, [r3, #8]
   1324c:	591a      	ldr	r2, [r3, r4]
   1324e:	1918      	adds	r0, r3, r4
   13250:	3408      	adds	r4, #8
   13252:	b902      	cbnz	r2, 13256 <print_command_params+0x2a>
}
   13254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		streamer_printf(streamer, "%-30s%s\n",
   13256:	6843      	ldr	r3, [r0, #4]
   13258:	4639      	mov	r1, r7
   1325a:	4630      	mov	r0, r6
   1325c:	f7fe f903 	bl	11466 <streamer_printf>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
   13260:	e7f2      	b.n	13248 <print_command_params+0x1c>
   13262:	bf00      	nop
   13264:	20004b28 	.word	0x20004b28
   13268:	00022915 	.word	0x00022915

0001326c <get_destination_module>:
    for (i = 0; i < num_of_shell_entities; i++) {
   1326c:	4b0f      	ldr	r3, [pc, #60]	; (132ac <get_destination_module+0x40>)
{
   1326e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13272:	681f      	ldr	r7, [r3, #0]
            if (!strcmp(module_str, shell_modules[i].name)) {
   13274:	f8df 8038 	ldr.w	r8, [pc, #56]	; 132b0 <get_destination_module+0x44>
{
   13278:	4605      	mov	r5, r0
   1327a:	460e      	mov	r6, r1
    for (i = 0; i < num_of_shell_entities; i++) {
   1327c:	2400      	movs	r4, #0
   1327e:	42bc      	cmp	r4, r7
   13280:	d104      	bne.n	1328c <get_destination_module+0x20>
    return -1;
   13282:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   13286:	4620      	mov	r0, r4
   13288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (len < 0) {
   1328c:	2e00      	cmp	r6, #0
            if (!strcmp(module_str, shell_modules[i].name)) {
   1328e:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
        if (len < 0) {
   13292:	da06      	bge.n	132a2 <get_destination_module+0x36>
            if (!strcmp(module_str, shell_modules[i].name)) {
   13294:	4628      	mov	r0, r5
   13296:	f7fc f9d7 	bl	f648 <strcmp>
            if (!strncmp(module_str, shell_modules[i].name, len)) {
   1329a:	2800      	cmp	r0, #0
   1329c:	d0f3      	beq.n	13286 <get_destination_module+0x1a>
    for (i = 0; i < num_of_shell_entities; i++) {
   1329e:	3401      	adds	r4, #1
   132a0:	e7ed      	b.n	1327e <get_destination_module+0x12>
            if (!strncmp(module_str, shell_modules[i].name, len)) {
   132a2:	4632      	mov	r2, r6
   132a4:	4628      	mov	r0, r5
   132a6:	f00a ff09 	bl	1e0bc <strncmp>
   132aa:	e7f6      	b.n	1329a <get_destination_module+0x2e>
   132ac:	20004b00 	.word	0x20004b00
   132b0:	20004b28 	.word	0x20004b28

000132b4 <set_default_module>:
static const struct shell_cmd shell_cmd_help =
    SHELL_CMD_EXT("help", show_help, NULL);

static int
set_default_module(const char *name)
{
   132b4:	b508      	push	{r3, lr}
    int module;

    module = get_destination_module(name, -1);
   132b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   132ba:	f7ff ffd7 	bl	1326c <get_destination_module>

    if (module == -1) {
   132be:	1c43      	adds	r3, r0, #1
        return -1;
    }

    default_module = module;
   132c0:	bf1e      	ittt	ne
   132c2:	4b02      	ldrne	r3, [pc, #8]	; (132cc <set_default_module+0x18>)
   132c4:	6018      	strne	r0, [r3, #0]

    return 0;
   132c6:	2000      	movne	r0, #0
}
   132c8:	bd08      	pop	{r3, pc}
   132ca:	bf00      	nop
   132cc:	2000074c 	.word	0x2000074c

000132d0 <select_module>:

static int
select_module(const struct shell_cmd *cmd, int argc, char *argv[],
              struct streamer *streamer)
{
    if (argc == 1) {
   132d0:	2901      	cmp	r1, #1
{
   132d2:	b508      	push	{r3, lr}
    if (argc == 1) {
   132d4:	d105      	bne.n	132e2 <select_module+0x12>
        default_module = -1;
   132d6:	4b05      	ldr	r3, [pc, #20]	; (132ec <select_module+0x1c>)
   132d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   132dc:	601a      	str	r2, [r3, #0]
    } else {
        set_default_module(argv[1]);
    }

    return 0;
}
   132de:	2000      	movs	r0, #0
   132e0:	bd08      	pop	{r3, pc}
        set_default_module(argv[1]);
   132e2:	6850      	ldr	r0, [r2, #4]
   132e4:	f7ff ffe6 	bl	132b4 <set_default_module>
   132e8:	e7f9      	b.n	132de <select_module+0xe>
   132ea:	bf00      	nop
   132ec:	2000074c 	.word	0x2000074c

000132f0 <print_prompt>:
{
   132f0:	b508      	push	{r3, lr}
    if (app_prompt_handler) {
   132f2:	4b0c      	ldr	r3, [pc, #48]	; (13324 <print_prompt+0x34>)
   132f4:	681b      	ldr	r3, [r3, #0]
   132f6:	b933      	cbnz	r3, 13306 <print_prompt+0x16>
    if (default_module != -1) {
   132f8:	4b0b      	ldr	r3, [pc, #44]	; (13328 <print_prompt+0x38>)
   132fa:	681b      	ldr	r3, [r3, #0]
   132fc:	1c5a      	adds	r2, r3, #1
   132fe:	d10c      	bne.n	1331a <print_prompt+0x2a>
    return prompt;
   13300:	4b0a      	ldr	r3, [pc, #40]	; (1332c <print_prompt+0x3c>)
   13302:	6819      	ldr	r1, [r3, #0]
   13304:	e003      	b.n	1330e <print_prompt+0x1e>
        str = app_prompt_handler();
   13306:	4798      	blx	r3
        if (str) {
   13308:	4601      	mov	r1, r0
   1330a:	2800      	cmp	r0, #0
   1330c:	d0f4      	beq.n	132f8 <print_prompt+0x8>
}
   1330e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    console_printf("%s%s", get_prompt(), MYNEWT_VAL(SHELL_PROMPT_SUFFIX));
   13312:	4a07      	ldr	r2, [pc, #28]	; (13330 <print_prompt+0x40>)
   13314:	4807      	ldr	r0, [pc, #28]	; (13334 <print_prompt+0x44>)
   13316:	f7ff b95d 	b.w	125d4 <console_printf>
        return shell_modules[default_module].name;
   1331a:	4a07      	ldr	r2, [pc, #28]	; (13338 <print_prompt+0x48>)
   1331c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   13320:	e7f5      	b.n	1330e <print_prompt+0x1e>
   13322:	bf00      	nop
   13324:	200047a4 	.word	0x200047a4
   13328:	2000074c 	.word	0x2000074c
   1332c:	20004b04 	.word	0x20004b04
   13330:	00021f92 	.word	0x00021f92
   13334:	0002291e 	.word	0x0002291e
   13338:	20004b28 	.word	0x20004b28

0001333c <print_prompt_if_console>:
{
   1333c:	b510      	push	{r4, lr}
   1333e:	4604      	mov	r4, r0
    if (streamer == streamer_console_get()) {
   13340:	f001 fff0 	bl	15324 <streamer_console_get>
   13344:	4284      	cmp	r4, r0
   13346:	d103      	bne.n	13350 <print_prompt_if_console+0x14>
}
   13348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        print_prompt();
   1334c:	f7ff bfd0 	b.w	132f0 <print_prompt>
}
   13350:	bd10      	pop	{r4, pc}
	...

00013354 <complete_command>:

static void
complete_command(char *line, char *command_prefix,
                 int command_len, int module_idx,
                 console_append_char_cb append_char)
{
   13354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13358:	4615      	mov	r5, r2
    int first_match = -1;
    int match_count = 0;
    int i, j, common_chars = -1;
    const struct shell_cmd *commands;

    commands = shell_modules[module_idx].commands;
   1335a:	4a3d      	ldr	r2, [pc, #244]	; (13450 <complete_command+0xfc>)
   1335c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
{
   13360:	b085      	sub	sp, #20
    commands = shell_modules[module_idx].commands;
   13362:	685c      	ldr	r4, [r3, #4]
{
   13364:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    int i, j, common_chars = -1;
   13368:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

    for (i = 0; commands[i].sc_cmd; i++) {
   1336c:	f04f 0900 	mov.w	r9, #0
   13370:	f104 0208 	add.w	r2, r4, #8
{
   13374:	4607      	mov	r7, r0
   13376:	468a      	mov	sl, r1
    int match_count = 0;
   13378:	46c8      	mov	r8, r9
    int first_match = -1;
   1337a:	4633      	mov	r3, r6
    for (i = 0; commands[i].sc_cmd; i++) {
   1337c:	9201      	str	r2, [sp, #4]
   1337e:	9901      	ldr	r1, [sp, #4]
   13380:	ea4f 1209 	mov.w	r2, r9, lsl #4
   13384:	5889      	ldr	r1, [r1, r2]
   13386:	b9c9      	cbnz	r1, 133bc <complete_command+0x68>
            }
        }
        common_chars = j;
    }

    if (match_count == 0) {
   13388:	f1b8 0f00 	cmp.w	r8, #0
   1338c:	d05d      	beq.n	1344a <complete_command+0xf6>
        return;
    }

    /* Additional characters could be appended */
    if (common_chars > command_len) {
   1338e:	42ae      	cmp	r6, r5
            if (commands[first_match].sc_cmd[j] != commands[i].sc_cmd[j]) {
   13390:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    if (common_chars > command_len) {
   13394:	dd3a      	ble.n	1340c <complete_command+0xb8>
        /* complete common part */
        for (i = command_len; i < common_chars; i++) {
            if (!append_char(line, (uint8_t)commands[first_match].sc_cmd[i])) {
   13396:	68a3      	ldr	r3, [r4, #8]
   13398:	4638      	mov	r0, r7
   1339a:	5d59      	ldrb	r1, [r3, r5]
   1339c:	47d8      	blx	fp
   1339e:	2800      	cmp	r0, #0
   133a0:	d053      	beq.n	1344a <complete_command+0xf6>
        for (i = command_len; i < common_chars; i++) {
   133a2:	3501      	adds	r5, #1
   133a4:	42ae      	cmp	r6, r5
   133a6:	d1f6      	bne.n	13396 <complete_command+0x42>
                return;
            }
        }
        if (match_count == 1) {
   133a8:	f1b8 0f01 	cmp.w	r8, #1
   133ac:	d14d      	bne.n	1344a <complete_command+0xf6>
            /* Whole word matched, append space */
            append_char(line, ' ');
   133ae:	2120      	movs	r1, #32
   133b0:	4638      	mov	r0, r7
   133b2:	465b      	mov	r3, fp
        }
    }
    /* restore prompt */
    print_prompt();
    console_printf("%s", line);
}
   133b4:	b005      	add	sp, #20
   133b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            append_char(line, ' ');
   133ba:	4718      	bx	r3
        if (0 != strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   133bc:	462a      	mov	r2, r5
   133be:	4650      	mov	r0, sl
   133c0:	9303      	str	r3, [sp, #12]
   133c2:	9102      	str	r1, [sp, #8]
   133c4:	f00a fe7a 	bl	1e0bc <strncmp>
   133c8:	9b03      	ldr	r3, [sp, #12]
   133ca:	b950      	cbnz	r0, 133e2 <complete_command+0x8e>
        match_count++;
   133cc:	f108 0801 	add.w	r8, r8, #1
        if (match_count == 1) {
   133d0:	f1b8 0f01 	cmp.w	r8, #1
   133d4:	9902      	ldr	r1, [sp, #8]
   133d6:	d107      	bne.n	133e8 <complete_command+0x94>
            common_chars = strlen(commands[i].sc_cmd);
   133d8:	4608      	mov	r0, r1
   133da:	f7fc f940 	bl	f65e <strlen>
            first_match = i;
   133de:	464b      	mov	r3, r9
            common_chars = strlen(commands[i].sc_cmd);
   133e0:	4606      	mov	r6, r0
    for (i = 0; commands[i].sc_cmd; i++) {
   133e2:	f109 0901 	add.w	r9, r9, #1
   133e6:	e7ca      	b.n	1337e <complete_command+0x2a>
        if (common_chars <= command_len) {
   133e8:	42ae      	cmp	r6, r5
   133ea:	ddfa      	ble.n	133e2 <complete_command+0x8e>
            if (commands[first_match].sc_cmd[j] != commands[i].sc_cmd[j]) {
   133ec:	eb04 1203 	add.w	r2, r4, r3, lsl #4
   133f0:	6890      	ldr	r0, [r2, #8]
   133f2:	462a      	mov	r2, r5
   133f4:	f810 e002 	ldrb.w	lr, [r0, r2]
   133f8:	f811 c002 	ldrb.w	ip, [r1, r2]
   133fc:	45e6      	cmp	lr, ip
   133fe:	d103      	bne.n	13408 <complete_command+0xb4>
        for (j = command_len; j < common_chars; j++) {
   13400:	3201      	adds	r2, #1
   13402:	4296      	cmp	r6, r2
   13404:	d1f6      	bne.n	133f4 <complete_command+0xa0>
   13406:	e7ec      	b.n	133e2 <complete_command+0x8e>
   13408:	4616      	mov	r6, r2
   1340a:	e7ea      	b.n	133e2 <complete_command+0x8e>
    console_printf("\n");
   1340c:	4811      	ldr	r0, [pc, #68]	; (13454 <complete_command+0x100>)
            console_printf("%s\n", commands[i].sc_cmd);
   1340e:	4e12      	ldr	r6, [pc, #72]	; (13458 <complete_command+0x104>)
    console_printf("\n");
   13410:	f7ff f8e0 	bl	125d4 <console_printf>
    console_printf("%s\n", commands[first_match].sc_cmd);
   13414:	68a1      	ldr	r1, [r4, #8]
   13416:	4810      	ldr	r0, [pc, #64]	; (13458 <complete_command+0x104>)
   13418:	f7ff f8dc 	bl	125d4 <console_printf>
    for (i = first_match + 1; commands[i].sc_cmd; i++) {
   1341c:	69a1      	ldr	r1, [r4, #24]
   1341e:	b941      	cbnz	r1, 13432 <complete_command+0xde>
    print_prompt();
   13420:	f7ff ff66 	bl	132f0 <print_prompt>
    console_printf("%s", line);
   13424:	480d      	ldr	r0, [pc, #52]	; (1345c <complete_command+0x108>)
   13426:	4639      	mov	r1, r7
}
   13428:	b005      	add	sp, #20
   1342a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    console_printf("%s", line);
   1342e:	f7ff b8d1 	b.w	125d4 <console_printf>
        if (0 == strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   13432:	462a      	mov	r2, r5
   13434:	4650      	mov	r0, sl
   13436:	9101      	str	r1, [sp, #4]
   13438:	f00a fe40 	bl	1e0bc <strncmp>
   1343c:	9901      	ldr	r1, [sp, #4]
   1343e:	b910      	cbnz	r0, 13446 <complete_command+0xf2>
            console_printf("%s\n", commands[i].sc_cmd);
   13440:	4630      	mov	r0, r6
   13442:	f7ff f8c7 	bl	125d4 <console_printf>
    for (i = first_match + 1; commands[i].sc_cmd; i++) {
   13446:	3410      	adds	r4, #16
   13448:	e7e8      	b.n	1341c <complete_command+0xc8>
}
   1344a:	b005      	add	sp, #20
   1344c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13450:	20004b28 	.word	0x20004b28
   13454:	00022b8f 	.word	0x00022b8f
   13458:	00022e9f 	.word	0x00022e9f
   1345c:	00022f05 	.word	0x00022f05

00013460 <get_token>:
{
   13460:	b538      	push	{r3, r4, r5, lr}
    *null_terminated = 0;
   13462:	2300      	movs	r3, #0
    char *str = *cur;
   13464:	6802      	ldr	r2, [r0, #0]
    *null_terminated = 0;
   13466:	600b      	str	r3, [r1, #0]
{
   13468:	460c      	mov	r4, r1
   1346a:	4615      	mov	r5, r2
    while (*str && *str == ' ') {
   1346c:	f812 3b01 	ldrb.w	r3, [r2], #1
   13470:	2b20      	cmp	r3, #32
   13472:	d0fa      	beq.n	1346a <get_token+0xa>
    if (*str == '\0') {
   13474:	b91b      	cbnz	r3, 1347e <get_token+0x1e>
        *null_terminated = 1;
   13476:	2201      	movs	r2, #1
   13478:	6022      	str	r2, [r4, #0]
        return 0;
   1347a:	4618      	mov	r0, r3
}
   1347c:	bd38      	pop	{r3, r4, r5, pc}
    *cur = str;
   1347e:	6005      	str	r5, [r0, #0]
    str = strchr(str, ' ');
   13480:	2120      	movs	r1, #32
   13482:	4628      	mov	r0, r5
   13484:	f00a fe05 	bl	1e092 <strchr>
    if (str == NULL) {
   13488:	b930      	cbnz	r0, 13498 <get_token+0x38>
        *null_terminated = 1;
   1348a:	2301      	movs	r3, #1
   1348c:	6023      	str	r3, [r4, #0]
        return strlen(*cur);
   1348e:	4628      	mov	r0, r5
}
   13490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return strlen(*cur);
   13494:	f7fc b8e3 	b.w	f65e <strlen>
    return str - *cur;
   13498:	1b40      	subs	r0, r0, r5
   1349a:	e7ef      	b.n	1347c <get_token+0x1c>

0001349c <complete_module>:

static void
complete_module(char *line, char *module_prefix,
                int module_len, console_append_char_cb append_char)
{
   1349c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134a0:	ed2d 8b02 	vpush	{d8}
   134a4:	b083      	sub	sp, #12
   134a6:	ee08 1a10 	vmov	s16, r1
   134aa:	f8df 912c 	ldr.w	r9, [pc, #300]	; 135d8 <complete_module+0x13c>
   134ae:	9300      	str	r3, [sp, #0]
   134b0:	4607      	mov	r7, r0
    int i, j;
    const char *first_match = NULL;
    int common_chars = -1, space = 0;

    if (!module_len) {
   134b2:	4614      	mov	r4, r2
   134b4:	2a00      	cmp	r2, #0
   134b6:	d16c      	bne.n	13592 <complete_module+0xf6>
        console_printf("\n");
   134b8:	4843      	ldr	r0, [pc, #268]	; (135c8 <complete_module+0x12c>)
        for (i = 0; i < num_of_shell_entities; i++) {
            console_printf("%s\n", shell_modules[i].name);
   134ba:	4d44      	ldr	r5, [pc, #272]	; (135cc <complete_module+0x130>)
   134bc:	4e44      	ldr	r6, [pc, #272]	; (135d0 <complete_module+0x134>)
        console_printf("\n");
   134be:	f7ff f889 	bl	125d4 <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
   134c2:	f8d9 3000 	ldr.w	r3, [r9]
   134c6:	42a3      	cmp	r3, r4
   134c8:	d80a      	bhi.n	134e0 <complete_module+0x44>
        }
        print_prompt();
   134ca:	f7ff ff11 	bl	132f0 <print_prompt>
        console_printf("%s", line);
   134ce:	4841      	ldr	r0, [pc, #260]	; (135d4 <complete_module+0x138>)
   134d0:	4639      	mov	r1, r7

    /* for convenience add space after command */
    if (space) {
        append_char(line, ' ');
    }
}
   134d2:	b003      	add	sp, #12
   134d4:	ecbd 8b02 	vpop	{d8}
   134d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        console_printf("%s", line);
   134dc:	f7ff b87a 	b.w	125d4 <console_printf>
            console_printf("%s\n", shell_modules[i].name);
   134e0:	f855 1034 	ldr.w	r1, [r5, r4, lsl #3]
   134e4:	4630      	mov	r0, r6
   134e6:	f7ff f875 	bl	125d4 <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
   134ea:	3401      	adds	r4, #1
   134ec:	e7e9      	b.n	134c2 <complete_module+0x26>
        if (strncmp(module_prefix,
   134ee:	4b37      	ldr	r3, [pc, #220]	; (135cc <complete_module+0x130>)
   134f0:	ee18 0a10 	vmov	r0, s16
   134f4:	f853 1038 	ldr.w	r1, [r3, r8, lsl #3]
   134f8:	9101      	str	r1, [sp, #4]
   134fa:	4622      	mov	r2, r4
   134fc:	f00a fdde 	bl	1e0bc <strncmp>
   13500:	4682      	mov	sl, r0
   13502:	b9c0      	cbnz	r0, 13536 <complete_module+0x9a>
        if (!first_match) {
   13504:	9901      	ldr	r1, [sp, #4]
   13506:	2e00      	cmp	r6, #0
   13508:	d041      	beq.n	1358e <complete_module+0xf2>
        if (first_match && (common_chars < 0)) {
   1350a:	1c6a      	adds	r2, r5, #1
   1350c:	d10a      	bne.n	13524 <complete_module+0x88>
            console_printf("\n");
   1350e:	482e      	ldr	r0, [pc, #184]	; (135c8 <complete_module+0x12c>)
   13510:	f7ff f860 	bl	125d4 <console_printf>
            console_printf("%s\n", first_match);
   13514:	4631      	mov	r1, r6
   13516:	4658      	mov	r0, fp
   13518:	f7ff f85c 	bl	125d4 <console_printf>
            common_chars = strlen(first_match);
   1351c:	4630      	mov	r0, r6
   1351e:	f7fc f89e 	bl	f65e <strlen>
   13522:	4605      	mov	r5, r0
            if (first_match[j] != shell_modules[i].name[j]) {
   13524:	4b29      	ldr	r3, [pc, #164]	; (135cc <complete_module+0x130>)
   13526:	f853 1038 	ldr.w	r1, [r3, r8, lsl #3]
        for (j = 0; j < common_chars; j++) {
   1352a:	45aa      	cmp	sl, r5
   1352c:	d126      	bne.n	1357c <complete_module+0xe0>
        console_printf("%s\n", shell_modules[i].name);
   1352e:	4658      	mov	r0, fp
   13530:	f7ff f850 	bl	125d4 <console_printf>
   13534:	4655      	mov	r5, sl
    for (i = 0; i < num_of_shell_entities; i++) {
   13536:	f108 0801 	add.w	r8, r8, #1
   1353a:	f8d9 2000 	ldr.w	r2, [r9]
   1353e:	4590      	cmp	r8, r2
   13540:	d3d5      	bcc.n	134ee <complete_module+0x52>
    if (!first_match) {
   13542:	2e00      	cmp	r6, #0
   13544:	d03a      	beq.n	135bc <complete_module+0x120>
    if (common_chars >= 0) {
   13546:	1c6b      	adds	r3, r5, #1
   13548:	d02a      	beq.n	135a0 <complete_module+0x104>
        print_prompt();
   1354a:	f7ff fed1 	bl	132f0 <print_prompt>
        console_printf("%s", line);
   1354e:	4821      	ldr	r0, [pc, #132]	; (135d4 <complete_module+0x138>)
   13550:	4639      	mov	r1, r7
   13552:	f7ff f83f 	bl	125d4 <console_printf>
    int common_chars = -1, space = 0;
   13556:	f04f 0800 	mov.w	r8, #0
    for (i = module_len; i < common_chars; i++) {
   1355a:	42ac      	cmp	r4, r5
   1355c:	db27      	blt.n	135ae <complete_module+0x112>
    if (space) {
   1355e:	f1b8 0f00 	cmp.w	r8, #0
   13562:	d02b      	beq.n	135bc <complete_module+0x120>
        append_char(line, ' ');
   13564:	eddd 7a00 	vldr	s15, [sp]
   13568:	ee17 3a90 	vmov	r3, s15
   1356c:	2120      	movs	r1, #32
   1356e:	4638      	mov	r0, r7
}
   13570:	b003      	add	sp, #12
   13572:	ecbd 8b02 	vpop	{d8}
   13576:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        append_char(line, ' ');
   1357a:	4718      	bx	r3
            if (first_match[j] != shell_modules[i].name[j]) {
   1357c:	f816 c00a 	ldrb.w	ip, [r6, sl]
   13580:	f811 000a 	ldrb.w	r0, [r1, sl]
   13584:	4584      	cmp	ip, r0
   13586:	d1d2      	bne.n	1352e <complete_module+0x92>
        for (j = 0; j < common_chars; j++) {
   13588:	f10a 0a01 	add.w	sl, sl, #1
   1358c:	e7cd      	b.n	1352a <complete_module+0x8e>
   1358e:	460e      	mov	r6, r1
   13590:	e7d1      	b.n	13536 <complete_module+0x9a>
    const char *first_match = NULL;
   13592:	2600      	movs	r6, #0
        console_printf("%s\n", shell_modules[i].name);
   13594:	f8df b038 	ldr.w	fp, [pc, #56]	; 135d0 <complete_module+0x134>
    int common_chars = -1, space = 0;
   13598:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < num_of_shell_entities; i++) {
   1359c:	46b0      	mov	r8, r6
   1359e:	e7cc      	b.n	1353a <complete_module+0x9e>
        common_chars = strlen(first_match);
   135a0:	4630      	mov	r0, r6
   135a2:	f7fc f85c 	bl	f65e <strlen>
        space = 1;
   135a6:	f04f 0801 	mov.w	r8, #1
        common_chars = strlen(first_match);
   135aa:	4605      	mov	r5, r0
    for (i = module_len; i < common_chars; i++) {
   135ac:	e7d5      	b.n	1355a <complete_module+0xbe>
        if (!append_char(line, first_match[i])) {
   135ae:	5d31      	ldrb	r1, [r6, r4]
   135b0:	9b00      	ldr	r3, [sp, #0]
   135b2:	4638      	mov	r0, r7
   135b4:	4798      	blx	r3
   135b6:	b108      	cbz	r0, 135bc <complete_module+0x120>
    for (i = module_len; i < common_chars; i++) {
   135b8:	3401      	adds	r4, #1
   135ba:	e7ce      	b.n	1355a <complete_module+0xbe>
}
   135bc:	b003      	add	sp, #12
   135be:	ecbd 8b02 	vpop	{d8}
   135c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135c6:	bf00      	nop
   135c8:	00022b8f 	.word	0x00022b8f
   135cc:	20004b28 	.word	0x20004b28
   135d0:	00022e9f 	.word	0x00022e9f
   135d4:	00022f05 	.word	0x00022f05
   135d8:	20004b00 	.word	0x20004b00

000135dc <completion>:
    }
}

static void
completion(char *line, console_append_char_cb append_char)
{
   135dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135e0:	b089      	sub	sp, #36	; 0x24
   135e2:	4688      	mov	r8, r1
    char *cur;
    int tok_len;
    int module, command;
    int null_terminated = 0;
   135e4:	2100      	movs	r1, #0
{
   135e6:	4604      	mov	r4, r0
    int null_terminated = 0;
   135e8:	9105      	str	r1, [sp, #20]

    /*
     * line to completion is not ended by '\0' as the line that gets from
     * os_eventq_get function
     */
    if (!append_char(line, '\0')) {
   135ea:	47c0      	blx	r8
   135ec:	b338      	cbz	r0, 1363e <completion+0x62>
        return;
    }

    cur = line;
    tok_len = get_token(&cur, &null_terminated);
   135ee:	a905      	add	r1, sp, #20
   135f0:	a804      	add	r0, sp, #16
    cur = line;
   135f2:	9404      	str	r4, [sp, #16]
    tok_len = get_token(&cur, &null_terminated);
   135f4:	f7ff ff34 	bl	13460 <get_token>

    /* empty token - print options */
    if (tok_len == 0) {
   135f8:	4606      	mov	r6, r0
   135fa:	b988      	cbnz	r0, 13620 <completion+0x44>
        console_printf("\n");
   135fc:	4886      	ldr	r0, [pc, #536]	; (13818 <completion+0x23c>)
   135fe:	f7fe ffe9 	bl	125d4 <console_printf>
        if (default_module == -1) {
   13602:	4b86      	ldr	r3, [pc, #536]	; (1381c <completion+0x240>)
   13604:	681d      	ldr	r5, [r3, #0]
   13606:	1c69      	adds	r1, r5, #1
   13608:	d15d      	bne.n	136c6 <completion+0xea>
        print_modules(streamer_console_get());
   1360a:	f001 fe8b 	bl	15324 <streamer_console_get>
   1360e:	f7ff fdf1 	bl	131f4 <print_modules>
    cur += tok_len;
    tok_len = get_last_token(&cur);
    if (tok_len == 0) {
        console_printf("\n");
        print_command_params(module, command, streamer_console_get());
        print_prompt();
   13612:	f7ff fe6d 	bl	132f0 <print_prompt>
        console_printf("%s", line);
   13616:	4621      	mov	r1, r4
   13618:	4881      	ldr	r0, [pc, #516]	; (13820 <completion+0x244>)
   1361a:	f7fe ffdb 	bl	125d4 <console_printf>
        return;
   1361e:	e00e      	b.n	1363e <completion+0x62>
            complete_module(line, cur, tok_len, append_char);
   13620:	e9dd 7904 	ldrd	r7, r9, [sp, #16]
    if (null_terminated) {
   13624:	f1b9 0f00 	cmp.w	r9, #0
   13628:	d014      	beq.n	13654 <completion+0x78>
        if (default_module == -1) {
   1362a:	4b7c      	ldr	r3, [pc, #496]	; (1381c <completion+0x240>)
   1362c:	681b      	ldr	r3, [r3, #0]
   1362e:	1c5a      	adds	r2, r3, #1
   13630:	d108      	bne.n	13644 <completion+0x68>
            complete_module(line, cur, tok_len, append_char);
   13632:	4643      	mov	r3, r8
   13634:	4602      	mov	r2, r0
   13636:	4639      	mov	r1, r7
            complete_module(line, cur, tok_len, append_char);
   13638:	4620      	mov	r0, r4
   1363a:	f7ff ff2f 	bl	1349c <complete_module>
    }
    complete_param(line, cur, tok_len,
                   module, command, append_char);
    return;
}
   1363e:	b009      	add	sp, #36	; 0x24
   13640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        complete_command(line, cur, tok_len,
   13644:	f8cd 8000 	str.w	r8, [sp]
   13648:	4602      	mov	r2, r0
   1364a:	4639      	mov	r1, r7
            complete_command(line, cur, tok_len,
   1364c:	4620      	mov	r0, r4
   1364e:	f7ff fe81 	bl	13354 <complete_command>
            return;
   13652:	e7f4      	b.n	1363e <completion+0x62>
    if (strncmp("select", cur, tok_len) == 0) {
   13654:	4602      	mov	r2, r0
   13656:	4639      	mov	r1, r7
   13658:	4872      	ldr	r0, [pc, #456]	; (13824 <completion+0x248>)
   1365a:	f00a fd2f 	bl	1e0bc <strncmp>
   1365e:	b9d8      	cbnz	r0, 13698 <completion+0xbc>
    cur += tok_len + 1;
   13660:	3601      	adds	r6, #1
    int null_terminated = 0;
   13662:	9007      	str	r0, [sp, #28]
    cur += tok_len + 1;
   13664:	4437      	add	r7, r6
    tok_len = get_token(&cur, &null_terminated);
   13666:	a907      	add	r1, sp, #28
   13668:	a806      	add	r0, sp, #24
    cur += tok_len + 1;
   1366a:	9706      	str	r7, [sp, #24]
    tok_len = get_token(&cur, &null_terminated);
   1366c:	f7ff fef8 	bl	13460 <get_token>
    if (tok_len == 0) {
   13670:	4602      	mov	r2, r0
   13672:	b938      	cbnz	r0, 13684 <completion+0xa8>
        if (default_module != -1) {
   13674:	4b69      	ldr	r3, [pc, #420]	; (1381c <completion+0x240>)
   13676:	681b      	ldr	r3, [r3, #0]
   13678:	3301      	adds	r3, #1
   1367a:	d1e0      	bne.n	1363e <completion+0x62>
        console_printf("\n");
   1367c:	4866      	ldr	r0, [pc, #408]	; (13818 <completion+0x23c>)
   1367e:	f7fe ffa9 	bl	125d4 <console_printf>
   13682:	e7c2      	b.n	1360a <completion+0x2e>
    if (null_terminated) {
   13684:	9b07      	ldr	r3, [sp, #28]
   13686:	2b00      	cmp	r3, #0
   13688:	d0d9      	beq.n	1363e <completion+0x62>
        if (default_module == -1) {
   1368a:	4b64      	ldr	r3, [pc, #400]	; (1381c <completion+0x240>)
   1368c:	681b      	ldr	r3, [r3, #0]
   1368e:	3301      	adds	r3, #1
   13690:	d1d5      	bne.n	1363e <completion+0x62>
            complete_module(line, cur, tok_len, append_char);
   13692:	9906      	ldr	r1, [sp, #24]
   13694:	4643      	mov	r3, r8
   13696:	e7cf      	b.n	13638 <completion+0x5c>
    if (default_module != -1) {
   13698:	4b60      	ldr	r3, [pc, #384]	; (1381c <completion+0x240>)
   1369a:	681d      	ldr	r5, [r3, #0]
   1369c:	1c6b      	adds	r3, r5, #1
   1369e:	d121      	bne.n	136e4 <completion+0x108>
        module = get_destination_module(cur, tok_len);
   136a0:	4631      	mov	r1, r6
   136a2:	4638      	mov	r0, r7
   136a4:	f7ff fde2 	bl	1326c <get_destination_module>
   136a8:	4605      	mov	r5, r0
        if (module == -1) {
   136aa:	1c68      	adds	r0, r5, #1
   136ac:	d0c7      	beq.n	1363e <completion+0x62>
        cur += tok_len + 1;
   136ae:	3601      	adds	r6, #1
   136b0:	4437      	add	r7, r6
        tok_len = get_token(&cur, &null_terminated);
   136b2:	a905      	add	r1, sp, #20
   136b4:	a804      	add	r0, sp, #16
        cur += tok_len + 1;
   136b6:	9704      	str	r7, [sp, #16]
        tok_len = get_token(&cur, &null_terminated);
   136b8:	f7ff fed2 	bl	13460 <get_token>
        if (tok_len == 0) {
   136bc:	4606      	mov	r6, r0
   136be:	b948      	cbnz	r0, 136d4 <completion+0xf8>
            console_printf("\n");
   136c0:	4855      	ldr	r0, [pc, #340]	; (13818 <completion+0x23c>)
   136c2:	f7fe ff87 	bl	125d4 <console_printf>
            print_module_commands(module, streamer_console_get());
   136c6:	f001 fe2d 	bl	15324 <streamer_console_get>
   136ca:	4601      	mov	r1, r0
   136cc:	4628      	mov	r0, r5
   136ce:	f7ff fd61 	bl	13194 <print_module_commands>
            print_prompt();
   136d2:	e79e      	b.n	13612 <completion+0x36>
        if (null_terminated) {
   136d4:	9b05      	ldr	r3, [sp, #20]
   136d6:	b12b      	cbz	r3, 136e4 <completion+0x108>
            complete_command(line, cur, tok_len,
   136d8:	9904      	ldr	r1, [sp, #16]
   136da:	f8cd 8000 	str.w	r8, [sp]
   136de:	462b      	mov	r3, r5
   136e0:	4602      	mov	r2, r0
   136e2:	e7b3      	b.n	1364c <completion+0x70>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   136e4:	4b50      	ldr	r3, [pc, #320]	; (13828 <completion+0x24c>)
    command = get_command_from_module(cur, tok_len, module);
   136e6:	9f04      	ldr	r7, [sp, #16]
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   136e8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   136ec:	f8d3 a004 	ldr.w	sl, [r3, #4]
   136f0:	f8da 1008 	ldr.w	r1, [sl, #8]
   136f4:	2900      	cmp	r1, #0
   136f6:	d0a2      	beq.n	1363e <completion+0x62>
        if (strlen(shell_module->commands[i].sc_cmd) != len) {
   136f8:	4608      	mov	r0, r1
   136fa:	9103      	str	r1, [sp, #12]
   136fc:	f7fb ffaf 	bl	f65e <strlen>
   13700:	42b0      	cmp	r0, r6
   13702:	d107      	bne.n	13714 <completion+0x138>
        if (!strncmp(command, shell_module->commands[i].sc_cmd, len)) {
   13704:	9903      	ldr	r1, [sp, #12]
   13706:	4632      	mov	r2, r6
   13708:	4638      	mov	r0, r7
   1370a:	f00a fcd7 	bl	1e0bc <strncmp>
   1370e:	4683      	mov	fp, r0
   13710:	2800      	cmp	r0, #0
   13712:	d078      	beq.n	13806 <completion+0x22a>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   13714:	f109 0901 	add.w	r9, r9, #1
   13718:	f10a 0a10 	add.w	sl, sl, #16
   1371c:	e7e8      	b.n	136f0 <completion+0x114>
    (*cur)++;
   1371e:	1c47      	adds	r7, r0, #1
    return strlen(*cur);
   13720:	4638      	mov	r0, r7
    (*cur)++;
   13722:	9704      	str	r7, [sp, #16]
    return strlen(*cur);
   13724:	f7fb ff9b 	bl	f65e <strlen>
    if (tok_len == 0) {
   13728:	4606      	mov	r6, r0
   1372a:	b950      	cbnz	r0, 13742 <completion+0x166>
        console_printf("\n");
   1372c:	483a      	ldr	r0, [pc, #232]	; (13818 <completion+0x23c>)
   1372e:	f7fe ff51 	bl	125d4 <console_printf>
        print_command_params(module, command, streamer_console_get());
   13732:	f001 fdf7 	bl	15324 <streamer_console_get>
   13736:	4649      	mov	r1, r9
   13738:	4602      	mov	r2, r0
   1373a:	4628      	mov	r0, r5
   1373c:	f7ff fd76 	bl	1322c <print_command_params>
   13740:	e767      	b.n	13612 <completion+0x36>
    if (!(command->help && command->help->params)) {
   13742:	f8da 300c 	ldr.w	r3, [sl, #12]
   13746:	2b00      	cmp	r3, #0
   13748:	f43f af79 	beq.w	1363e <completion+0x62>
   1374c:	689b      	ldr	r3, [r3, #8]
   1374e:	2b00      	cmp	r3, #0
   13750:	f43f af75 	beq.w	1363e <completion+0x62>
    int i, j, common_chars = -1;
   13754:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    const char *first_match = NULL;
   13758:	46d9      	mov	r9, fp
    for (i = 0; command->help->params[i].param_name; i++) {
   1375a:	f8da 200c 	ldr.w	r2, [sl, #12]
   1375e:	6892      	ldr	r2, [r2, #8]
   13760:	f852 100b 	ldr.w	r1, [r2, fp]
   13764:	b9b9      	cbnz	r1, 13796 <completion+0x1ba>
    if (!first_match) {
   13766:	f1b9 0f00 	cmp.w	r9, #0
   1376a:	f43f af68 	beq.w	1363e <completion+0x62>
    if (common_chars >= 0) {
   1376e:	1c6b      	adds	r3, r5, #1
   13770:	d044      	beq.n	137fc <completion+0x220>
        print_prompt();
   13772:	f7ff fdbd 	bl	132f0 <print_prompt>
        console_printf("%s", line);
   13776:	482a      	ldr	r0, [pc, #168]	; (13820 <completion+0x244>)
   13778:	4621      	mov	r1, r4
   1377a:	f7fe ff2b 	bl	125d4 <console_printf>
    for (i = param_len; i < common_chars; i++) {
   1377e:	42ae      	cmp	r6, r5
   13780:	f6bf af5d 	bge.w	1363e <completion+0x62>
        if (!append_char(line, first_match[i])) {
   13784:	f819 1006 	ldrb.w	r1, [r9, r6]
   13788:	4620      	mov	r0, r4
   1378a:	47c0      	blx	r8
   1378c:	2800      	cmp	r0, #0
   1378e:	f43f af56 	beq.w	1363e <completion+0x62>
    for (i = param_len; i < common_chars; i++) {
   13792:	3601      	adds	r6, #1
   13794:	e7f3      	b.n	1377e <completion+0x1a2>
        if (strncmp(param_prefix,
   13796:	4632      	mov	r2, r6
   13798:	4638      	mov	r0, r7
   1379a:	9103      	str	r1, [sp, #12]
   1379c:	f00a fc8e 	bl	1e0bc <strncmp>
   137a0:	4602      	mov	r2, r0
   137a2:	b9f8      	cbnz	r0, 137e4 <completion+0x208>
        if (!first_match) {
   137a4:	9903      	ldr	r1, [sp, #12]
   137a6:	f1b9 0f00 	cmp.w	r9, #0
   137aa:	d025      	beq.n	137f8 <completion+0x21c>
        if (first_match && (common_chars < 0)) {
   137ac:	1c69      	adds	r1, r5, #1
   137ae:	d10c      	bne.n	137ca <completion+0x1ee>
   137b0:	9003      	str	r0, [sp, #12]
            console_printf("\n");
   137b2:	4819      	ldr	r0, [pc, #100]	; (13818 <completion+0x23c>)
   137b4:	f7fe ff0e 	bl	125d4 <console_printf>
            console_printf("%s\n", first_match);
   137b8:	4649      	mov	r1, r9
   137ba:	481c      	ldr	r0, [pc, #112]	; (1382c <completion+0x250>)
   137bc:	f7fe ff0a 	bl	125d4 <console_printf>
            common_chars = strlen(first_match);
   137c0:	4648      	mov	r0, r9
   137c2:	f7fb ff4c 	bl	f65e <strlen>
   137c6:	9a03      	ldr	r2, [sp, #12]
   137c8:	4605      	mov	r5, r0
            if (first_match[j] != command->help->params[i].param_name[j]) {
   137ca:	f8da 100c 	ldr.w	r1, [sl, #12]
   137ce:	6889      	ldr	r1, [r1, #8]
   137d0:	f851 100b 	ldr.w	r1, [r1, fp]
        for (j = 0; j < common_chars; j++) {
   137d4:	42aa      	cmp	r2, r5
   137d6:	d108      	bne.n	137ea <completion+0x20e>
        console_printf("%s\n", command->help->params[i].param_name);
   137d8:	4814      	ldr	r0, [pc, #80]	; (1382c <completion+0x250>)
   137da:	9203      	str	r2, [sp, #12]
   137dc:	f7fe fefa 	bl	125d4 <console_printf>
   137e0:	9a03      	ldr	r2, [sp, #12]
   137e2:	4615      	mov	r5, r2
    for (i = 0; command->help->params[i].param_name; i++) {
   137e4:	f10b 0b08 	add.w	fp, fp, #8
   137e8:	e7b7      	b.n	1375a <completion+0x17e>
            if (first_match[j] != command->help->params[i].param_name[j]) {
   137ea:	f819 c002 	ldrb.w	ip, [r9, r2]
   137ee:	5c88      	ldrb	r0, [r1, r2]
   137f0:	4584      	cmp	ip, r0
   137f2:	d1f1      	bne.n	137d8 <completion+0x1fc>
        for (j = 0; j < common_chars; j++) {
   137f4:	3201      	adds	r2, #1
   137f6:	e7ed      	b.n	137d4 <completion+0x1f8>
   137f8:	4689      	mov	r9, r1
   137fa:	e7f3      	b.n	137e4 <completion+0x208>
        common_chars = strlen(first_match);
   137fc:	4648      	mov	r0, r9
   137fe:	f7fb ff2e 	bl	f65e <strlen>
   13802:	4605      	mov	r5, r0
    for (i = param_len; i < common_chars; i++) {
   13804:	e7bb      	b.n	1377e <completion+0x1a2>
    cur += tok_len;
   13806:	19b8      	adds	r0, r7, r6
    *cur = strrchr(*cur, ' ');
   13808:	2120      	movs	r1, #32
    cur += tok_len;
   1380a:	9004      	str	r0, [sp, #16]
    *cur = strrchr(*cur, ' ');
   1380c:	f00a fc66 	bl	1e0dc <strrchr>
    if (*cur == NULL) {
   13810:	2800      	cmp	r0, #0
   13812:	d184      	bne.n	1371e <completion+0x142>
    *cur = strrchr(*cur, ' ');
   13814:	9004      	str	r0, [sp, #16]
   13816:	e789      	b.n	1372c <completion+0x150>
   13818:	00022b8f 	.word	0x00022b8f
   1381c:	2000074c 	.word	0x2000074c
   13820:	00022f05 	.word	0x00022f05
   13824:	00022923 	.word	0x00022923
   13828:	20004b28 	.word	0x20004b28
   1382c:	00022e9f 	.word	0x00022e9f

00013830 <get_command_and_module.constprop.0>:
get_command_and_module(char *argv[], int *module, struct streamer *streamer)
   13830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!argv[0]) {
   13832:	6804      	ldr	r4, [r0, #0]
    *module = -1;
   13834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
get_command_and_module(char *argv[], int *module, struct streamer *streamer)
   13838:	460d      	mov	r5, r1
   1383a:	4616      	mov	r6, r2
    *module = -1;
   1383c:	600b      	str	r3, [r1, #0]
    if (!argv[0]) {
   1383e:	b92c      	cbnz	r4, 1384c <get_command_and_module.constprop.0+0x1c>
        streamer_printf(streamer, "Unrecognized command\n");
   13840:	4910      	ldr	r1, [pc, #64]	; (13884 <get_command_and_module.constprop.0+0x54>)
   13842:	4610      	mov	r0, r2
   13844:	f7fd fe0f 	bl	11466 <streamer_printf>
}
   13848:	4620      	mov	r0, r4
   1384a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (default_module == -1) {
   1384c:	4b0e      	ldr	r3, [pc, #56]	; (13888 <get_command_and_module.constprop.0+0x58>)
   1384e:	6819      	ldr	r1, [r3, #0]
   13850:	1c4b      	adds	r3, r1, #1
   13852:	d113      	bne.n	1387c <get_command_and_module.constprop.0+0x4c>
        if (!argv[1] || argv[1][0] == '\0') {
   13854:	6847      	ldr	r7, [r0, #4]
   13856:	b10f      	cbz	r7, 1385c <get_command_and_module.constprop.0+0x2c>
   13858:	783b      	ldrb	r3, [r7, #0]
   1385a:	b933      	cbnz	r3, 1386a <get_command_and_module.constprop.0+0x3a>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   1385c:	490b      	ldr	r1, [pc, #44]	; (1388c <get_command_and_module.constprop.0+0x5c>)
   1385e:	4622      	mov	r2, r4
            streamer_printf(streamer, "Illegal module %s\n", argv[0]);
   13860:	4630      	mov	r0, r6
   13862:	f7fd fe00 	bl	11466 <streamer_printf>
            return NULL;
   13866:	2400      	movs	r4, #0
   13868:	e7ee      	b.n	13848 <get_command_and_module.constprop.0+0x18>
        *module = get_destination_module(argv[0], -1);
   1386a:	4620      	mov	r0, r4
   1386c:	f7ff fcfe 	bl	1326c <get_destination_module>
   13870:	6028      	str	r0, [r5, #0]
        if (*module == -1) {
   13872:	3001      	adds	r0, #1
   13874:	d104      	bne.n	13880 <get_command_and_module.constprop.0+0x50>
            streamer_printf(streamer, "Illegal module %s\n", argv[0]);
   13876:	4906      	ldr	r1, [pc, #24]	; (13890 <get_command_and_module.constprop.0+0x60>)
   13878:	4622      	mov	r2, r4
   1387a:	e7f1      	b.n	13860 <get_command_and_module.constprop.0+0x30>
    *module = default_module;
   1387c:	6029      	str	r1, [r5, #0]
    return argv[0];
   1387e:	e7e3      	b.n	13848 <get_command_and_module.constprop.0+0x18>
   13880:	463c      	mov	r4, r7
   13882:	e7e1      	b.n	13848 <get_command_and_module.constprop.0+0x18>
   13884:	0002292a 	.word	0x0002292a
   13888:	2000074c 	.word	0x2000074c
   1388c:	00022940 	.word	0x00022940
   13890:	0002295a 	.word	0x0002295a

00013894 <show_cmd_help>:
{
   13894:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    int module = -1;
   13898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    command = get_command_and_module(argv, &module, streamer);
   1389c:	460a      	mov	r2, r1
{
   1389e:	460c      	mov	r4, r1
    command = get_command_and_module(argv, &module, streamer);
   138a0:	a901      	add	r1, sp, #4
    int module = -1;
   138a2:	9301      	str	r3, [sp, #4]
{
   138a4:	4680      	mov	r8, r0
    command = get_command_and_module(argv, &module, streamer);
   138a6:	f7ff ffc3 	bl	13830 <get_command_and_module.constprop.0>
    if ((module == -1) || (command == NULL)) {
   138aa:	9a01      	ldr	r2, [sp, #4]
   138ac:	1c53      	adds	r3, r2, #1
    command = get_command_and_module(argv, &module, streamer);
   138ae:	4607      	mov	r7, r0
    if ((module == -1) || (command == NULL)) {
   138b0:	d03b      	beq.n	1392a <show_cmd_help+0x96>
   138b2:	2800      	cmp	r0, #0
   138b4:	d039      	beq.n	1392a <show_cmd_help+0x96>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   138b6:	4b28      	ldr	r3, [pc, #160]	; (13958 <show_cmd_help+0xc4>)
   138b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   138bc:	f04f 0900 	mov.w	r9, #0
   138c0:	685e      	ldr	r6, [r3, #4]
   138c2:	68b1      	ldr	r1, [r6, #8]
   138c4:	4635      	mov	r5, r6
   138c6:	b931      	cbnz	r1, 138d6 <show_cmd_help+0x42>
    streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   138c8:	f8d8 2000 	ldr.w	r2, [r8]
   138cc:	4923      	ldr	r1, [pc, #140]	; (1395c <show_cmd_help+0xc8>)
   138ce:	4620      	mov	r0, r4
   138d0:	f7fd fdc9 	bl	11466 <streamer_printf>
    return 0;
   138d4:	e029      	b.n	1392a <show_cmd_help+0x96>
        if (!strcmp(command, cmd->sc_cmd)) {
   138d6:	4638      	mov	r0, r7
   138d8:	f7fb feb6 	bl	f648 <strcmp>
   138dc:	3610      	adds	r6, #16
   138de:	2800      	cmp	r0, #0
   138e0:	d136      	bne.n	13950 <show_cmd_help+0xbc>
            if (!cmd->help || (!cmd->help->summary &&
   138e2:	68eb      	ldr	r3, [r5, #12]
   138e4:	b1eb      	cbz	r3, 13922 <show_cmd_help+0x8e>
   138e6:	681a      	ldr	r2, [r3, #0]
   138e8:	bb1a      	cbnz	r2, 13932 <show_cmd_help+0x9e>
   138ea:	685a      	ldr	r2, [r3, #4]
   138ec:	b1b2      	cbz	r2, 1391c <show_cmd_help+0x88>
                streamer_printf(streamer, "Usage:\n");
   138ee:	491c      	ldr	r1, [pc, #112]	; (13960 <show_cmd_help+0xcc>)
   138f0:	4620      	mov	r0, r4
   138f2:	f7fd fdb8 	bl	11466 <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->usage);
   138f6:	68eb      	ldr	r3, [r5, #12]
   138f8:	491a      	ldr	r1, [pc, #104]	; (13964 <show_cmd_help+0xd0>)
   138fa:	685a      	ldr	r2, [r3, #4]
   138fc:	4620      	mov	r0, r4
   138fe:	f7fd fdb2 	bl	11466 <streamer_printf>
            if (cmd->help->params) {
   13902:	68eb      	ldr	r3, [r5, #12]
   13904:	689b      	ldr	r3, [r3, #8]
   13906:	b183      	cbz	r3, 1392a <show_cmd_help+0x96>
                streamer_printf(streamer, "Parameters:\n");
   13908:	4917      	ldr	r1, [pc, #92]	; (13968 <show_cmd_help+0xd4>)
   1390a:	4620      	mov	r0, r4
   1390c:	f7fd fdab 	bl	11466 <streamer_printf>
                print_command_params(module, i, streamer);
   13910:	9801      	ldr	r0, [sp, #4]
   13912:	4622      	mov	r2, r4
   13914:	4649      	mov	r1, r9
   13916:	f7ff fc89 	bl	1322c <print_command_params>
   1391a:	e006      	b.n	1392a <show_cmd_help+0x96>
                               !cmd->help->usage &&
   1391c:	689b      	ldr	r3, [r3, #8]
   1391e:	2b00      	cmp	r3, #0
   13920:	d1f2      	bne.n	13908 <show_cmd_help+0x74>
                streamer_printf(streamer, "(no help available)\n");
   13922:	4912      	ldr	r1, [pc, #72]	; (1396c <show_cmd_help+0xd8>)
   13924:	4620      	mov	r0, r4
   13926:	f7fd fd9e 	bl	11466 <streamer_printf>
}
   1392a:	2000      	movs	r0, #0
   1392c:	b003      	add	sp, #12
   1392e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                streamer_printf(streamer, "Summary:\n");
   13932:	490f      	ldr	r1, [pc, #60]	; (13970 <show_cmd_help+0xdc>)
   13934:	4620      	mov	r0, r4
   13936:	f7fd fd96 	bl	11466 <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->summary);
   1393a:	68eb      	ldr	r3, [r5, #12]
   1393c:	4909      	ldr	r1, [pc, #36]	; (13964 <show_cmd_help+0xd0>)
   1393e:	681a      	ldr	r2, [r3, #0]
   13940:	4620      	mov	r0, r4
   13942:	f7fd fd90 	bl	11466 <streamer_printf>
            if (cmd->help->usage) {
   13946:	68eb      	ldr	r3, [r5, #12]
   13948:	685b      	ldr	r3, [r3, #4]
   1394a:	2b00      	cmp	r3, #0
   1394c:	d0d9      	beq.n	13902 <show_cmd_help+0x6e>
   1394e:	e7ce      	b.n	138ee <show_cmd_help+0x5a>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   13950:	f109 0901 	add.w	r9, r9, #1
   13954:	e7b5      	b.n	138c2 <show_cmd_help+0x2e>
   13956:	bf00      	nop
   13958:	20004b28 	.word	0x20004b28
   1395c:	00022940 	.word	0x00022940
   13960:	0002296d 	.word	0x0002296d
   13964:	00022e9f 	.word	0x00022e9f
   13968:	00022994 	.word	0x00022994
   1396c:	00022975 	.word	0x00022975
   13970:	0002298a 	.word	0x0002298a

00013974 <show_help>:
    if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   13974:	2902      	cmp	r1, #2
{
   13976:	b513      	push	{r0, r1, r4, lr}
   13978:	461c      	mov	r4, r3
    if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   1397a:	dc05      	bgt.n	13988 <show_help+0x14>
   1397c:	4b18      	ldr	r3, [pc, #96]	; (139e0 <show_help+0x6c>)
   1397e:	6818      	ldr	r0, [r3, #0]
   13980:	1c43      	adds	r3, r0, #1
   13982:	d01e      	beq.n	139c2 <show_help+0x4e>
   13984:	2902      	cmp	r1, #2
   13986:	d106      	bne.n	13996 <show_help+0x22>
        return show_cmd_help(&argv[1], streamer);
   13988:	4621      	mov	r1, r4
   1398a:	1d10      	adds	r0, r2, #4
}
   1398c:	b002      	add	sp, #8
   1398e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return show_cmd_help(&argv[1], streamer);
   13992:	f7ff bf7f 	b.w	13894 <show_cmd_help>
    if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   13996:	2901      	cmp	r1, #1
   13998:	d115      	bne.n	139c6 <show_help+0x52>
        print_module_commands(module, streamer);
   1399a:	4621      	mov	r1, r4
   1399c:	f7ff fbfa 	bl	13194 <print_module_commands>
   139a0:	e00c      	b.n	139bc <show_help+0x48>
            module = get_destination_module(argv[1], -1);
   139a2:	6852      	ldr	r2, [r2, #4]
   139a4:	9201      	str	r2, [sp, #4]
   139a6:	4601      	mov	r1, r0
   139a8:	4610      	mov	r0, r2
   139aa:	f7ff fc5f 	bl	1326c <get_destination_module>
            if (module == -1) {
   139ae:	1c43      	adds	r3, r0, #1
   139b0:	9a01      	ldr	r2, [sp, #4]
   139b2:	d1f2      	bne.n	1399a <show_help+0x26>
                streamer_printf(streamer, "Illegal module %s\n", argv[1]);
   139b4:	490b      	ldr	r1, [pc, #44]	; (139e4 <show_help+0x70>)
   139b6:	4620      	mov	r0, r4
   139b8:	f7fd fd55 	bl	11466 <streamer_printf>
}
   139bc:	2000      	movs	r0, #0
   139be:	b002      	add	sp, #8
   139c0:	bd10      	pop	{r4, pc}
    if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   139c2:	2902      	cmp	r1, #2
   139c4:	d0ed      	beq.n	139a2 <show_help+0x2e>
        streamer_printf(streamer, "Available modules:\n");
   139c6:	4908      	ldr	r1, [pc, #32]	; (139e8 <show_help+0x74>)
   139c8:	4620      	mov	r0, r4
   139ca:	f7fd fd4c 	bl	11466 <streamer_printf>
        print_modules(streamer);
   139ce:	4620      	mov	r0, r4
   139d0:	f7ff fc10 	bl	131f4 <print_modules>
        streamer_printf(streamer,
   139d4:	4905      	ldr	r1, [pc, #20]	; (139ec <show_help+0x78>)
   139d6:	4620      	mov	r0, r4
   139d8:	f7fd fd45 	bl	11466 <streamer_printf>
   139dc:	e7ee      	b.n	139bc <show_help+0x48>
   139de:	bf00      	nop
   139e0:	2000074c 	.word	0x2000074c
   139e4:	0002295a 	.word	0x0002295a
   139e8:	000229a1 	.word	0x000229a1
   139ec:	000229b5 	.word	0x000229b5

000139f0 <shell_evq_set>:
    console_line_queue_set(shell_evq);
   139f0:	f7fe bd72 	b.w	124d8 <console_line_queue_set>

000139f4 <shell_exec>:
{
   139f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    const char *first_string = argv[0];
   139f8:	680c      	ldr	r4, [r1, #0]
    int module = -1;
   139fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
   139fe:	4607      	mov	r7, r0
   13a00:	460e      	mov	r6, r1
   13a02:	4615      	mov	r5, r2
    int module = -1;
   13a04:	9301      	str	r3, [sp, #4]
    if (!first_string || first_string[0] == '\0') {
   13a06:	b10c      	cbz	r4, 13a0c <shell_exec+0x18>
   13a08:	7823      	ldrb	r3, [r4, #0]
   13a0a:	b9cb      	cbnz	r3, 13a40 <shell_exec+0x4c>
        streamer_printf(streamer, "Illegal parameter\n");
   13a0c:	493a      	ldr	r1, [pc, #232]	; (13af8 <shell_exec+0x104>)
        streamer_printf(streamer, "Missing parameter\n");
   13a0e:	4628      	mov	r0, r5
   13a10:	f7fd fd29 	bl	11466 <streamer_printf>
        if (app_cmd.sc_cmd_func != NULL) {
   13a14:	4c39      	ldr	r4, [pc, #228]	; (13afc <shell_exec+0x108>)
   13a16:	6863      	ldr	r3, [r4, #4]
   13a18:	2b00      	cmp	r3, #0
   13a1a:	d141      	bne.n	13aa0 <shell_exec+0xac>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   13a1c:	6832      	ldr	r2, [r6, #0]
   13a1e:	4938      	ldr	r1, [pc, #224]	; (13b00 <shell_exec+0x10c>)
   13a20:	4628      	mov	r0, r5
   13a22:	f7fd fd20 	bl	11466 <streamer_printf>
            streamer_printf(streamer,
   13a26:	4937      	ldr	r1, [pc, #220]	; (13b04 <shell_exec+0x110>)
   13a28:	4628      	mov	r0, r5
   13a2a:	f7fd fd1c 	bl	11466 <streamer_printf>
            print_prompt_if_console(streamer);
   13a2e:	4628      	mov	r0, r5
   13a30:	f7ff fc84 	bl	1333c <print_prompt_if_console>
            return SYS_ENOENT;
   13a34:	f06f 0403 	mvn.w	r4, #3
}
   13a38:	4620      	mov	r0, r4
   13a3a:	b003      	add	sp, #12
   13a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!strcmp(first_string, "help")) {
   13a40:	4931      	ldr	r1, [pc, #196]	; (13b08 <shell_exec+0x114>)
   13a42:	4620      	mov	r0, r4
   13a44:	f7fb fe00 	bl	f648 <strcmp>
   13a48:	2800      	cmp	r0, #0
   13a4a:	d051      	beq.n	13af0 <shell_exec+0xfc>
    if (!strcmp(first_string, "select")) {
   13a4c:	492f      	ldr	r1, [pc, #188]	; (13b0c <shell_exec+0x118>)
   13a4e:	4620      	mov	r0, r4
   13a50:	f7fb fdfa 	bl	f648 <strcmp>
   13a54:	2800      	cmp	r0, #0
   13a56:	d04d      	beq.n	13af4 <shell_exec+0x100>
    if ((argc == 1) && (default_module == -1)) {
   13a58:	2f01      	cmp	r7, #1
   13a5a:	d105      	bne.n	13a68 <shell_exec+0x74>
   13a5c:	4b2c      	ldr	r3, [pc, #176]	; (13b10 <shell_exec+0x11c>)
   13a5e:	681b      	ldr	r3, [r3, #0]
   13a60:	3301      	adds	r3, #1
   13a62:	d101      	bne.n	13a68 <shell_exec+0x74>
        streamer_printf(streamer, "Missing parameter\n");
   13a64:	492b      	ldr	r1, [pc, #172]	; (13b14 <shell_exec+0x120>)
   13a66:	e7d2      	b.n	13a0e <shell_exec+0x1a>
    command = get_command_and_module(argv, &module, streamer);
   13a68:	462a      	mov	r2, r5
   13a6a:	a901      	add	r1, sp, #4
   13a6c:	4630      	mov	r0, r6
   13a6e:	f7ff fedf 	bl	13830 <get_command_and_module.constprop.0>
    if ((module == -1) || (command == NULL)) {
   13a72:	9a01      	ldr	r2, [sp, #4]
   13a74:	1c51      	adds	r1, r2, #1
    command = get_command_and_module(argv, &module, streamer);
   13a76:	4681      	mov	r9, r0
    if ((module == -1) || (command == NULL)) {
   13a78:	d0cc      	beq.n	13a14 <shell_exec+0x20>
   13a7a:	2800      	cmp	r0, #0
   13a7c:	d0ca      	beq.n	13a14 <shell_exec+0x20>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   13a7e:	4b26      	ldr	r3, [pc, #152]	; (13b18 <shell_exec+0x124>)
   13a80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   13a84:	f8d3 8004 	ldr.w	r8, [r3, #4]
   13a88:	f8d8 1008 	ldr.w	r1, [r8, #8]
   13a8c:	4644      	mov	r4, r8
   13a8e:	2900      	cmp	r1, #0
   13a90:	d0c0      	beq.n	13a14 <shell_exec+0x20>
        if (!strcmp(command, shell_module->commands[i].sc_cmd)) {
   13a92:	4648      	mov	r0, r9
   13a94:	f7fb fdd8 	bl	f648 <strcmp>
   13a98:	f108 0810 	add.w	r8, r8, #16
   13a9c:	2800      	cmp	r0, #0
   13a9e:	d1f3      	bne.n	13a88 <shell_exec+0x94>
    if (default_module == -1 && cmd != &shell_cmd_select_module &&
   13aa0:	4b1b      	ldr	r3, [pc, #108]	; (13b10 <shell_exec+0x11c>)
   13aa2:	681b      	ldr	r3, [r3, #0]
   13aa4:	3301      	adds	r3, #1
   13aa6:	d11c      	bne.n	13ae2 <shell_exec+0xee>
   13aa8:	4b1c      	ldr	r3, [pc, #112]	; (13b1c <shell_exec+0x128>)
   13aaa:	429c      	cmp	r4, r3
   13aac:	d019      	beq.n	13ae2 <shell_exec+0xee>
   13aae:	4a1c      	ldr	r2, [pc, #112]	; (13b20 <shell_exec+0x12c>)
   13ab0:	1aa2      	subs	r2, r4, r2
   13ab2:	bf18      	it	ne
   13ab4:	2201      	movne	r2, #1
    if (!cmd->sc_ext) {
   13ab6:	7823      	ldrb	r3, [r4, #0]
        rc = cmd->sc_cmd_func(argc - argc_offset, &argv[argc_offset]);
   13ab8:	f8d4 8004 	ldr.w	r8, [r4, #4]
    if (!cmd->sc_ext) {
   13abc:	07db      	lsls	r3, r3, #31
        rc = cmd->sc_cmd_func(argc - argc_offset, &argv[argc_offset]);
   13abe:	eba7 0002 	sub.w	r0, r7, r2
   13ac2:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    if (!cmd->sc_ext) {
   13ac6:	d40e      	bmi.n	13ae6 <shell_exec+0xf2>
        rc = cmd->sc_cmd_func(argc - argc_offset, &argv[argc_offset]);
   13ac8:	4611      	mov	r1, r2
   13aca:	47c0      	blx	r8
    if (rc < 0) {
   13acc:	2800      	cmp	r0, #0
        rc = cmd->sc_cmd_ext_func(cmd, argc - argc_offset, &argv[argc_offset],
   13ace:	4604      	mov	r4, r0
    if (rc < 0) {
   13ad0:	da03      	bge.n	13ada <shell_exec+0xe6>
        show_cmd_help(argv, streamer);
   13ad2:	4629      	mov	r1, r5
   13ad4:	4630      	mov	r0, r6
   13ad6:	f7ff fedd 	bl	13894 <show_cmd_help>
    print_prompt_if_console(streamer);
   13ada:	4628      	mov	r0, r5
   13adc:	f7ff fc2e 	bl	1333c <print_prompt_if_console>
    return rc;
   13ae0:	e7aa      	b.n	13a38 <shell_exec+0x44>
    size_t argc_offset = 0;
   13ae2:	2200      	movs	r2, #0
   13ae4:	e7e7      	b.n	13ab6 <shell_exec+0xc2>
        rc = cmd->sc_cmd_ext_func(cmd, argc - argc_offset, &argv[argc_offset],
   13ae6:	4601      	mov	r1, r0
   13ae8:	462b      	mov	r3, r5
   13aea:	4620      	mov	r0, r4
   13aec:	47c0      	blx	r8
   13aee:	e7ed      	b.n	13acc <shell_exec+0xd8>
        return &shell_cmd_help;
   13af0:	4c0b      	ldr	r4, [pc, #44]	; (13b20 <shell_exec+0x12c>)
   13af2:	e7d5      	b.n	13aa0 <shell_exec+0xac>
        return &shell_cmd_select_module;
   13af4:	4c09      	ldr	r4, [pc, #36]	; (13b1c <shell_exec+0x128>)
    if (!cmd) {
   13af6:	e7d3      	b.n	13aa0 <shell_exec+0xac>
   13af8:	000229e8 	.word	0x000229e8
   13afc:	20004794 	.word	0x20004794
   13b00:	00022940 	.word	0x00022940
   13b04:	00022a13 	.word	0x00022a13
   13b08:	000229fb 	.word	0x000229fb
   13b0c:	00022923 	.word	0x00022923
   13b10:	2000074c 	.word	0x2000074c
   13b14:	00022a00 	.word	0x00022a00
   13b18:	20004b28 	.word	0x20004b28
   13b1c:	00022aec 	.word	0x00022aec
   13b20:	00022adc 	.word	0x00022adc

00013b24 <shell_process_command>:
{
   13b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!strlen(str)) {
   13b26:	7803      	ldrb	r3, [r0, #0]
{
   13b28:	b08f      	sub	sp, #60	; 0x3c
   13b2a:	460d      	mov	r5, r1
    if (!strlen(str)) {
   13b2c:	b37b      	cbz	r3, 13b8e <shell_process_command+0x6a>
   13b2e:	4603      	mov	r3, r0
    while (*str && *str == ' ') {
   13b30:	781a      	ldrb	r2, [r3, #0]
   13b32:	2a20      	cmp	r2, #32
   13b34:	4618      	mov	r0, r3
   13b36:	f103 0301 	add.w	r3, r3, #1
   13b3a:	d0f9      	beq.n	13b30 <shell_process_command+0xc>
    if (!*str) {
   13b3c:	b33a      	cbz	r2, 13b8e <shell_process_command+0x6a>
    argv[argc++] = str;
   13b3e:	9001      	str	r0, [sp, #4]
    while ((str = strchr(str, ' '))) {
   13b40:	2401      	movs	r4, #1
        *str++ = '\0';
   13b42:	2600      	movs	r6, #0
        argv[argc++] = str;
   13b44:	af01      	add	r7, sp, #4
    while ((str = strchr(str, ' '))) {
   13b46:	2120      	movs	r1, #32
   13b48:	f00a faa3 	bl	1e092 <strchr>
   13b4c:	b140      	cbz	r0, 13b60 <shell_process_command+0x3c>
        *str++ = '\0';
   13b4e:	4603      	mov	r3, r0
   13b50:	f803 6b01 	strb.w	r6, [r3], #1
        while (*str && *str == ' ') {
   13b54:	4618      	mov	r0, r3
   13b56:	f813 2b01 	ldrb.w	r2, [r3], #1
   13b5a:	2a20      	cmp	r2, #32
   13b5c:	d0fa      	beq.n	13b54 <shell_process_command+0x30>
        if (!*str) {
   13b5e:	b962      	cbnz	r2, 13b7a <shell_process_command+0x56>
    argv[argc] = NULL;
   13b60:	ab0e      	add	r3, sp, #56	; 0x38
   13b62:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   13b66:	2200      	movs	r2, #0
   13b68:	f843 2c34 	str.w	r2, [r3, #-52]
    shell_exec(argc, argv, streamer);
   13b6c:	a901      	add	r1, sp, #4
   13b6e:	462a      	mov	r2, r5
   13b70:	4620      	mov	r0, r4
   13b72:	f7ff ff3f 	bl	139f4 <shell_exec>
}
   13b76:	b00f      	add	sp, #60	; 0x3c
   13b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        argv[argc++] = str;
   13b7a:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
        if (argc == size) {
   13b7e:	3401      	adds	r4, #1
   13b80:	2c0d      	cmp	r4, #13
   13b82:	d1e0      	bne.n	13b46 <shell_process_command+0x22>
            streamer_printf(streamer, "Too many parameters (max %zu)\n",
   13b84:	4904      	ldr	r1, [pc, #16]	; (13b98 <shell_process_command+0x74>)
   13b86:	220c      	movs	r2, #12
   13b88:	4628      	mov	r0, r5
   13b8a:	f7fd fc6c 	bl	11466 <streamer_printf>
        print_prompt_if_console(streamer);
   13b8e:	4628      	mov	r0, r5
   13b90:	f7ff fbd4 	bl	1333c <print_prompt_if_console>
        return;
   13b94:	e7ef      	b.n	13b76 <shell_process_command+0x52>
   13b96:	bf00      	nop
   13b98:	00022a3f 	.word	0x00022a3f

00013b9c <shell>:
{
   13b9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!ev) {
   13b9e:	4605      	mov	r5, r0
   13ba0:	b920      	cbnz	r0, 13bac <shell+0x10>
}
   13ba2:	b002      	add	sp, #8
   13ba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        print_prompt();
   13ba8:	f7ff bba2 	b.w	132f0 <print_prompt>
    cmd = ev->ev_arg;
   13bac:	6884      	ldr	r4, [r0, #8]
    if (!cmd) {
   13bae:	2c00      	cmp	r4, #0
   13bb0:	d0f7      	beq.n	13ba2 <shell+0x6>
    streamer = streamer_console_get();
   13bb2:	f001 fbb7 	bl	15324 <streamer_console_get>
   13bb6:	9001      	str	r0, [sp, #4]
    shell_line_len = strlen(shell_line);
   13bb8:	4620      	mov	r0, r4
   13bba:	f7fb fd50 	bl	f65e <strlen>
    if (shell_line_len > 2) {
   13bbe:	2802      	cmp	r0, #2
   13bc0:	9901      	ldr	r1, [sp, #4]
    shell_line_len = strlen(shell_line);
   13bc2:	4606      	mov	r6, r0
    if (shell_line_len > 2) {
   13bc4:	d916      	bls.n	13bf4 <shell+0x58>
        if (shell_line[0] == SHELL_NLIP_PKT_START1 &&
   13bc6:	7823      	ldrb	r3, [r4, #0]
   13bc8:	2b06      	cmp	r3, #6
   13bca:	d10e      	bne.n	13bea <shell+0x4e>
   13bcc:	7863      	ldrb	r3, [r4, #1]
   13bce:	2b09      	cmp	r3, #9
   13bd0:	d110      	bne.n	13bf4 <shell+0x58>
            shell_nlip_clear_pkt();
   13bd2:	f000 f93f 	bl	13e54 <shell_nlip_clear_pkt>
            shell_nlip_process(&shell_line[2], shell_line_len - 2);
   13bd6:	1eb1      	subs	r1, r6, #2
   13bd8:	1ca0      	adds	r0, r4, #2
   13bda:	f000 f94b 	bl	13e74 <shell_nlip_process>
    console_line_event_put(ev);
   13bde:	4628      	mov	r0, r5
}
   13be0:	b002      	add	sp, #8
   13be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    console_line_event_put(ev);
   13be6:	f7fe bc7d 	b.w	124e4 <console_line_event_put>
        } else if (shell_line[0] == SHELL_NLIP_DATA_START1 &&
   13bea:	2b04      	cmp	r3, #4
   13bec:	d102      	bne.n	13bf4 <shell+0x58>
   13bee:	7863      	ldrb	r3, [r4, #1]
   13bf0:	2b14      	cmp	r3, #20
   13bf2:	d0f0      	beq.n	13bd6 <shell+0x3a>
        shell_process_command(shell_line, streamer);
   13bf4:	4620      	mov	r0, r4
   13bf6:	f7ff ff95 	bl	13b24 <shell_process_command>
   13bfa:	e7f0      	b.n	13bde <shell+0x42>

00013bfc <shell_register>:
    }
}

int
shell_register(const char *module_name, const struct shell_cmd *commands)
{
   13bfc:	b510      	push	{r4, lr}
    if (num_of_shell_entities >= MYNEWT_VAL(SHELL_MAX_MODULES)) {
   13bfe:	4c0c      	ldr	r4, [pc, #48]	; (13c30 <shell_register+0x34>)
   13c00:	6823      	ldr	r3, [r4, #0]
   13c02:	2b02      	cmp	r3, #2
   13c04:	d90a      	bls.n	13c1c <shell_register+0x20>
        MODLOG_ERROR(LOG_MODULE_DEFAULT, "Max number of modules reached\n");
   13c06:	4a0b      	ldr	r2, [pc, #44]	; (13c34 <shell_register+0x38>)
   13c08:	2103      	movs	r1, #3
   13c0a:	2000      	movs	r0, #0
   13c0c:	f00b faf0 	bl	1f1f0 <modlog_printf>
        assert(0);
   13c10:	2300      	movs	r3, #0
   13c12:	461a      	mov	r2, r3
   13c14:	4619      	mov	r1, r3
   13c16:	4618      	mov	r0, r3
   13c18:	f7f5 f96c 	bl	8ef4 <__assert_func>
    }

    shell_modules[num_of_shell_entities].name = module_name;
   13c1c:	4a06      	ldr	r2, [pc, #24]	; (13c38 <shell_register+0x3c>)
   13c1e:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    shell_modules[num_of_shell_entities].commands = commands;
   13c22:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    ++num_of_shell_entities;
   13c26:	3301      	adds	r3, #1
    shell_modules[num_of_shell_entities].commands = commands;
   13c28:	6051      	str	r1, [r2, #4]
    ++num_of_shell_entities;
   13c2a:	6023      	str	r3, [r4, #0]

    return 0;
}
   13c2c:	2000      	movs	r0, #0
   13c2e:	bd10      	pop	{r4, pc}
   13c30:	20004b00 	.word	0x20004b00
   13c34:	00022a5e 	.word	0x00022a5e
   13c38:	20004b28 	.word	0x20004b28

00013c3c <shell_cmd_register>:
static int num_compat_commands;
static int module_registered;

int
shell_cmd_register(const struct shell_cmd *sc)
{
   13c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;

    if (num_compat_commands >= MYNEWT_VAL(SHELL_MAX_COMPAT_COMMANDS)) {
   13c3e:	4f17      	ldr	r7, [pc, #92]	; (13c9c <shell_cmd_register+0x60>)
   13c40:	683b      	ldr	r3, [r7, #0]
   13c42:	2b13      	cmp	r3, #19
{
   13c44:	4605      	mov	r5, r0
    if (num_compat_commands >= MYNEWT_VAL(SHELL_MAX_COMPAT_COMMANDS)) {
   13c46:	dd0a      	ble.n	13c5e <shell_cmd_register+0x22>
        MODLOG_ERROR(LOG_MODULE_DEFAULT,
   13c48:	4a15      	ldr	r2, [pc, #84]	; (13ca0 <shell_cmd_register+0x64>)
   13c4a:	2103      	movs	r1, #3
   13c4c:	2000      	movs	r0, #0
   13c4e:	f00b facf 	bl	1f1f0 <modlog_printf>
                     "Max number of compat commands reached\n");
        assert(0);
   13c52:	2300      	movs	r3, #0
   13c54:	461a      	mov	r2, r3
   13c56:	4619      	mov	r1, r3
   13c58:	4618      	mov	r0, r3
   13c5a:	f7f5 f94b 	bl	8ef4 <__assert_func>
    }

    if (!module_registered) {
   13c5e:	4e11      	ldr	r6, [pc, #68]	; (13ca4 <shell_cmd_register+0x68>)
   13c60:	6834      	ldr	r4, [r6, #0]
   13c62:	b97c      	cbnz	r4, 13c84 <shell_cmd_register+0x48>
        shell_register(SHELL_COMPAT_MODULE_NAME, compat_commands);
   13c64:	4910      	ldr	r1, [pc, #64]	; (13ca8 <shell_cmd_register+0x6c>)
   13c66:	4811      	ldr	r0, [pc, #68]	; (13cac <shell_cmd_register+0x70>)
   13c68:	f7ff ffc8 	bl	13bfc <shell_register>
        module_registered = 1;
   13c6c:	2301      	movs	r3, #1

        rc = set_default_module(SHELL_COMPAT_MODULE_NAME);
   13c6e:	480f      	ldr	r0, [pc, #60]	; (13cac <shell_cmd_register+0x70>)
        module_registered = 1;
   13c70:	6033      	str	r3, [r6, #0]
        rc = set_default_module(SHELL_COMPAT_MODULE_NAME);
   13c72:	f7ff fb1f 	bl	132b4 <set_default_module>
        if (rc != 0) {
   13c76:	b128      	cbz	r0, 13c84 <shell_cmd_register+0x48>
            MODLOG_ERROR(LOG_MODULE_DEFAULT,
   13c78:	4b0c      	ldr	r3, [pc, #48]	; (13cac <shell_cmd_register+0x70>)
   13c7a:	4a0d      	ldr	r2, [pc, #52]	; (13cb0 <shell_cmd_register+0x74>)
   13c7c:	2103      	movs	r1, #3
   13c7e:	4620      	mov	r0, r4
   13c80:	f00b fab6 	bl	1f1f0 <modlog_printf>
                         "Illegal module %s, default is not changed\n",
                         SHELL_COMPAT_MODULE_NAME);
        }
    }

    compat_commands[num_compat_commands] = *sc;
   13c84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   13c88:	683e      	ldr	r6, [r7, #0]
   13c8a:	4c07      	ldr	r4, [pc, #28]	; (13ca8 <shell_cmd_register+0x6c>)
   13c8c:	eb04 1406 	add.w	r4, r4, r6, lsl #4
    ++num_compat_commands;
   13c90:	3601      	adds	r6, #1
    compat_commands[num_compat_commands] = *sc;
   13c92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    ++num_compat_commands;
   13c96:	603e      	str	r6, [r7, #0]
    return 0;
}
   13c98:	2000      	movs	r0, #0
   13c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13c9c:	20004afc 	.word	0x20004afc
   13ca0:	00022a7d 	.word	0x00022a7d
   13ca4:	20004af8 	.word	0x20004af8
   13ca8:	200049a8 	.word	0x200049a8
   13cac:	00022aa4 	.word	0x00022aa4
   13cb0:	00022aab 	.word	0x00022aab

00013cb4 <shell_init>:
#endif

void
shell_init(void)
{
   13cb4:	b570      	push	{r4, r5, r6, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   13cb6:	4b15      	ldr	r3, [pc, #84]	; (13d0c <shell_init+0x58>)
   13cb8:	781b      	ldrb	r3, [r3, #0]
   13cba:	b30b      	cbz	r3, 13d00 <shell_init+0x4c>
        shell_console_ev[i].ev_cb = shell;
   13cbc:	4c14      	ldr	r4, [pc, #80]	; (13d10 <shell_init+0x5c>)
        shell_console_ev[i].ev_arg = &buf[i];
   13cbe:	4d15      	ldr	r5, [pc, #84]	; (13d14 <shell_init+0x60>)
        shell_console_ev[i].ev_cb = shell;
   13cc0:	4e15      	ldr	r6, [pc, #84]	; (13d18 <shell_init+0x64>)
        shell_console_ev[i].ev_arg = &buf[i];
   13cc2:	60a5      	str	r5, [r4, #8]
        console_line_event_put(&shell_console_ev[i]);
   13cc4:	4620      	mov	r0, r4
        shell_console_ev[i].ev_cb = shell;
   13cc6:	6066      	str	r6, [r4, #4]
        shell_console_ev[i].ev_arg = &buf[i];
   13cc8:	f505 7580 	add.w	r5, r5, #256	; 0x100
        console_line_event_put(&shell_console_ev[i]);
   13ccc:	f7fe fc0a 	bl	124e4 <console_line_event_put>
   13cd0:	f104 0010 	add.w	r0, r4, #16
        shell_console_ev[i].ev_cb = shell;
   13cd4:	6166      	str	r6, [r4, #20]
        shell_console_ev[i].ev_arg = &buf[i];
   13cd6:	61a5      	str	r5, [r4, #24]
        console_line_event_put(&shell_console_ev[i]);
   13cd8:	f7fe fc04 	bl	124e4 <console_line_event_put>
#if !MYNEWT_VAL(SHELL_TASK)
    return;
#endif

    shell_avail_queue_init();
    shell_evq_set(os_eventq_dflt_get());
   13cdc:	f7f5 fc9e 	bl	961c <os_eventq_dflt_get>
   13ce0:	f7ff fe86 	bl	139f0 <shell_evq_set>

    prompt = SHELL_PROMPT;
   13ce4:	4b0d      	ldr	r3, [pc, #52]	; (13d1c <shell_init+0x68>)
   13ce6:	4a0e      	ldr	r2, [pc, #56]	; (13d20 <shell_init+0x6c>)
   13ce8:	601a      	str	r2, [r3, #0]

#if MYNEWT_VAL(SHELL_NEWTMGR)
    shell_nlip_init();
   13cea:	f000 f923 	bl	13f34 <shell_nlip_init>
#endif

#if MYNEWT_VAL(SHELL_COMPLETION)
    console_set_completion_cb(completion);
   13cee:	480d      	ldr	r0, [pc, #52]	; (13d24 <shell_init+0x70>)
   13cf0:	f7fe fc0c 	bl	1250c <console_set_completion_cb>
#endif

#if MYNEWT_VAL(SHELL_OS_MODULE)
    shell_os_register();
   13cf4:	f000 fa70 	bl	141d8 <shell_os_register>
    shell_prompt_register();
#endif
#if MYNEWT_VAL(SHELL_BRIDGE)
    shell_bridge_init();
#endif
}
   13cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    shell_prompt_register();
   13cfc:	f000 baae 	b.w	1425c <shell_prompt_register>
    SYSINIT_ASSERT_ACTIVE();
   13d00:	461a      	mov	r2, r3
   13d02:	4619      	mov	r1, r3
   13d04:	4618      	mov	r0, r3
   13d06:	f7f5 f8f5 	bl	8ef4 <__assert_func>
   13d0a:	bf00      	nop
   13d0c:	20004ba8 	.word	0x20004ba8
   13d10:	20004b08 	.word	0x20004b08
   13d14:	200047a8 	.word	0x200047a8
   13d18:	00013b9d 	.word	0x00013b9d
   13d1c:	20004b04 	.word	0x20004b04
   13d20:	00022ad6 	.word	0x00022ad6
   13d24:	000135dd 	.word	0x000135dd

00013d28 <shell_event_data_in>:
    return os_mqueue_put(&g_shell_nlip_mq, os_eventq_dflt_get(), m);
}

static void
shell_event_data_in(struct os_event *ev)
{
   13d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char pkt_seq[3] = { '\n', SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
   13d2c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 13e4c <shell_event_data_in+0x124>
            console_write("\n", 1);
   13d30:	f8df a11c 	ldr.w	sl, [pc, #284]	; 13e50 <shell_event_data_in+0x128>
{
   13d34:	b08b      	sub	sp, #44	; 0x2c

    /* Copy data out of the mbuf 12 bytes at a time and write it to
     * the console.
     */
    while (1) {
        m = os_mqueue_get(&g_shell_nlip_mq);
   13d36:	4844      	ldr	r0, [pc, #272]	; (13e48 <shell_event_data_in+0x120>)
   13d38:	f7f6 faeb 	bl	a312 <os_mqueue_get>
        if (!m) {
   13d3c:	4606      	mov	r6, r0
   13d3e:	2800      	cmp	r0, #0
   13d40:	d07e      	beq.n	13e40 <shell_event_data_in+0x118>
    char pkt_seq[3] = { '\n', SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
   13d42:	f899 3002 	ldrb.w	r3, [r9, #2]
   13d46:	f8b9 2000 	ldrh.w	r2, [r9]
   13d4a:	f88d 300a 	strb.w	r3, [sp, #10]
    char esc_seq[2] = { SHELL_NLIP_DATA_START1, SHELL_NLIP_DATA_START2 };
   13d4e:	f241 4304 	movw	r3, #5124	; 0x1404
   13d52:	4604      	mov	r4, r0
    char pkt_seq[3] = { '\n', SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
   13d54:	f8ad 2008 	strh.w	r2, [sp, #8]
    char esc_seq[2] = { SHELL_NLIP_DATA_START1, SHELL_NLIP_DATA_START2 };
   13d58:	f8ad 3004 	strh.w	r3, [sp, #4]
    crc = CRC16_INITIAL_CRC;
   13d5c:	2000      	movs	r0, #0
        crc = crc16_ccitt(crc, tmp->om_data, tmp->om_len);
   13d5e:	88e2      	ldrh	r2, [r4, #6]
   13d60:	6821      	ldr	r1, [r4, #0]
   13d62:	f001 fa85 	bl	15270 <crc16_ccitt>
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
   13d66:	68e4      	ldr	r4, [r4, #12]
   13d68:	2c00      	cmp	r4, #0
   13d6a:	d1f8      	bne.n	13d5e <shell_event_data_in+0x36>
    crc = htons(crc);
   13d6c:	ba45      	rev16	r5, r0
    ptr = os_mbuf_extend(m, sizeof(crc));
   13d6e:	2102      	movs	r1, #2
   13d70:	4630      	mov	r0, r6
   13d72:	f7f6 fc79 	bl	a668 <os_mbuf_extend>
    if (!ptr) {
   13d76:	b1e8      	cbz	r0, 13db4 <shell_event_data_in+0x8c>
    memcpy(ptr, &crc, sizeof(crc));
   13d78:	8005      	strh	r5, [r0, #0]
    rc = console_lock(OS_TICKS_PER_SEC);
   13d7a:	2080      	movs	r0, #128	; 0x80
   13d7c:	8a37      	ldrh	r7, [r6, #16]
   13d7e:	f7fd ff87 	bl	11c90 <console_lock>
    if (rc != OS_OK) {
   13d82:	b9b8      	cbnz	r0, 13db4 <shell_event_data_in+0x8c>
    console_write(pkt_seq, sizeof(pkt_seq));
   13d84:	2103      	movs	r1, #3
   13d86:	a802      	add	r0, sp, #8
   13d88:	f7fe f934 	bl	11ff4 <console_write>
    memcpy(readbuf, &dlen, sizeof(dlen));
   13d8c:	ba7b      	rev16	r3, r7
   13d8e:	f8ad 300c 	strh.w	r3, [sp, #12]
    off = 0;
   13d92:	46a0      	mov	r8, r4
    rb_off += 2;
   13d94:	2302      	movs	r3, #2
    while (totlen > 0) {
   13d96:	b98f      	cbnz	r7, 13dbc <shell_event_data_in+0x94>
    elen = base64_pad(encodebuf, bodylen);
   13d98:	4621      	mov	r1, r4
   13d9a:	a806      	add	r0, sp, #24
   13d9c:	f001 fd5e 	bl	1585c <base64_pad>
   13da0:	4601      	mov	r1, r0
    console_write(encodebuf, elen);
   13da2:	a806      	add	r0, sp, #24
   13da4:	f7fe f926 	bl	11ff4 <console_write>
    console_write("\n", 1);
   13da8:	2101      	movs	r1, #1
   13daa:	4650      	mov	r0, sl
   13dac:	f7fe f922 	bl	11ff4 <console_write>
    (void)console_unlock();
   13db0:	f7fd ff86 	bl	11cc0 <console_unlock>
            break;
        }

        (void) shell_nlip_mtx(m);

        os_mbuf_free_chain(m);
   13db4:	4630      	mov	r0, r6
   13db6:	f7f6 fb10 	bl	a3da <os_mbuf_free_chain>
        m = os_mqueue_get(&g_shell_nlip_mq);
   13dba:	e7bc      	b.n	13d36 <shell_event_data_in+0xe>
        dlen = min(SHELL_NLIP_MTX_BUF_SIZE - rb_off, totlen);
   13dbc:	f1c3 050c 	rsb	r5, r3, #12
   13dc0:	42bd      	cmp	r5, r7
   13dc2:	bfa8      	it	ge
   13dc4:	463d      	movge	r5, r7
        newbodylen = 2 + bodylen + BASE64_ENCODE_SIZE(dlen + rb_off) + 1;
   13dc6:	eb03 0b05 	add.w	fp, r3, r5
   13dca:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   13dce:	2103      	movs	r1, #3
   13dd0:	fbb2 f2f1 	udiv	r2, r2, r1
   13dd4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   13dd8:	3207      	adds	r2, #7
        if (newbodylen > MGMT_NLIP_MAX_FRAME) {
   13dda:	b292      	uxth	r2, r2
   13ddc:	2a7f      	cmp	r2, #127	; 0x7f
   13dde:	d912      	bls.n	13e06 <shell_event_data_in+0xde>
            elen = base64_pad(encodebuf, bodylen);
   13de0:	4621      	mov	r1, r4
   13de2:	a806      	add	r0, sp, #24
   13de4:	f001 fd3a 	bl	1585c <base64_pad>
   13de8:	4601      	mov	r1, r0
            console_write(encodebuf, elen);
   13dea:	a806      	add	r0, sp, #24
   13dec:	f7fe f902 	bl	11ff4 <console_write>
            console_write("\n", 1);
   13df0:	2101      	movs	r1, #1
   13df2:	4650      	mov	r0, sl
   13df4:	f7fe f8fe 	bl	11ff4 <console_write>
            console_write(esc_seq, sizeof(esc_seq));
   13df8:	2102      	movs	r1, #2
   13dfa:	a801      	add	r0, sp, #4
   13dfc:	f7fe f8fa 	bl	11ff4 <console_write>
            bodylen = 0;
   13e00:	2400      	movs	r4, #0
   13e02:	2300      	movs	r3, #0
   13e04:	e7c7      	b.n	13d96 <shell_event_data_in+0x6e>
            rc = os_mbuf_copydata(m, off, dlen, readbuf + rb_off);
   13e06:	aa03      	add	r2, sp, #12
   13e08:	4413      	add	r3, r2
   13e0a:	4641      	mov	r1, r8
   13e0c:	462a      	mov	r2, r5
   13e0e:	4630      	mov	r0, r6
   13e10:	f7f6 fb4b 	bl	a4aa <os_mbuf_copydata>
            if (rc != 0) {
   13e14:	4603      	mov	r3, r0
   13e16:	2800      	cmp	r0, #0
   13e18:	d1ca      	bne.n	13db0 <shell_event_data_in+0x88>
            elen = base64_encode(readbuf, dlen + rb_off, encodebuf, 0);
   13e1a:	4659      	mov	r1, fp
   13e1c:	aa06      	add	r2, sp, #24
   13e1e:	a803      	add	r0, sp, #12
   13e20:	f001 fcd0 	bl	157c4 <base64_encode>
        dlen = min(SHELL_NLIP_MTX_BUF_SIZE - rb_off, totlen);
   13e24:	b2ad      	uxth	r5, r5
            elen = base64_encode(readbuf, dlen + rb_off, encodebuf, 0);
   13e26:	4683      	mov	fp, r0
            console_write(encodebuf, elen);
   13e28:	4601      	mov	r1, r0
            bodylen += elen;
   13e2a:	445c      	add	r4, fp
            console_write(encodebuf, elen);
   13e2c:	a806      	add	r0, sp, #24
            totlen -= dlen;
   13e2e:	1b7f      	subs	r7, r7, r5
            off += dlen;
   13e30:	44a8      	add	r8, r5
            console_write(encodebuf, elen);
   13e32:	f7fe f8df 	bl	11ff4 <console_write>
            bodylen += elen;
   13e36:	b2a4      	uxth	r4, r4
            totlen -= dlen;
   13e38:	b2bf      	uxth	r7, r7
            off += dlen;
   13e3a:	fa1f f888 	uxth.w	r8, r8
   13e3e:	e7e0      	b.n	13e02 <shell_event_data_in+0xda>
    }
}
   13e40:	b00b      	add	sp, #44	; 0x2c
   13e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e46:	bf00      	nop
   13e48:	20004b50 	.word	0x20004b50
   13e4c:	00022afc 	.word	0x00022afc
   13e50:	00022b8f 	.word	0x00022b8f

00013e54 <shell_nlip_clear_pkt>:
{
   13e54:	b510      	push	{r4, lr}
    if (g_nlip_mbuf) {
   13e56:	4c05      	ldr	r4, [pc, #20]	; (13e6c <shell_nlip_clear_pkt+0x18>)
   13e58:	6820      	ldr	r0, [r4, #0]
   13e5a:	b118      	cbz	r0, 13e64 <shell_nlip_clear_pkt+0x10>
        os_mbuf_free_chain(g_nlip_mbuf);
   13e5c:	f7f6 fabd 	bl	a3da <os_mbuf_free_chain>
        g_nlip_mbuf = NULL;
   13e60:	2300      	movs	r3, #0
   13e62:	6023      	str	r3, [r4, #0]
    g_nlip_expected_len = 0;
   13e64:	4b02      	ldr	r3, [pc, #8]	; (13e70 <shell_nlip_clear_pkt+0x1c>)
   13e66:	2200      	movs	r2, #0
   13e68:	801a      	strh	r2, [r3, #0]
}
   13e6a:	bd10      	pop	{r4, pc}
   13e6c:	20004b44 	.word	0x20004b44
   13e70:	20004b40 	.word	0x20004b40

00013e74 <shell_nlip_process>:
{
   13e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    rc = base64_decode(data, data);
   13e78:	4601      	mov	r1, r0
{
   13e7a:	4606      	mov	r6, r0
    rc = base64_decode(data, data);
   13e7c:	f001 fd00 	bl	15880 <base64_decode>
    if (rc < 0) {
   13e80:	1e04      	subs	r4, r0, #0
   13e82:	db06      	blt.n	13e92 <shell_nlip_process+0x1e>
    if (g_nlip_mbuf == NULL) {
   13e84:	4d27      	ldr	r5, [pc, #156]	; (13f24 <shell_nlip_process+0xb0>)
   13e86:	6829      	ldr	r1, [r5, #0]
   13e88:	b991      	cbnz	r1, 13eb0 <shell_nlip_process+0x3c>
        if (len < 2) {
   13e8a:	2c01      	cmp	r4, #1
   13e8c:	dc04      	bgt.n	13e98 <shell_nlip_process+0x24>
            rc = -1;
   13e8e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   13e92:	4620      	mov	r0, r4
   13e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        g_nlip_expected_len = ntohs(*(uint16_t *) data);
   13e98:	8830      	ldrh	r0, [r6, #0]
   13e9a:	4b23      	ldr	r3, [pc, #140]	; (13f28 <shell_nlip_process+0xb4>)
   13e9c:	ba40      	rev16	r0, r0
   13e9e:	8018      	strh	r0, [r3, #0]
        g_nlip_mbuf = os_msys_get_pkthdr(g_nlip_expected_len, 0);
   13ea0:	b280      	uxth	r0, r0
   13ea2:	f7f5 fc99 	bl	97d8 <os_msys_get_pkthdr>
   13ea6:	6028      	str	r0, [r5, #0]
        if (!g_nlip_mbuf) {
   13ea8:	2800      	cmp	r0, #0
   13eaa:	d0f0      	beq.n	13e8e <shell_nlip_process+0x1a>
        data += sizeof(uint16_t);
   13eac:	3602      	adds	r6, #2
        len -= sizeof(uint16_t);
   13eae:	3c02      	subs	r4, #2
    copy_len = min(g_nlip_expected_len - OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len,
   13eb0:	6828      	ldr	r0, [r5, #0]
   13eb2:	4f1d      	ldr	r7, [pc, #116]	; (13f28 <shell_nlip_process+0xb4>)
   13eb4:	8a01      	ldrh	r1, [r0, #16]
   13eb6:	883b      	ldrh	r3, [r7, #0]
   13eb8:	1a5b      	subs	r3, r3, r1
   13eba:	42a3      	cmp	r3, r4
   13ebc:	bfa8      	it	ge
   13ebe:	4623      	movge	r3, r4
    rc = os_mbuf_copyinto(g_nlip_mbuf, OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len,
   13ec0:	b29b      	uxth	r3, r3
   13ec2:	4632      	mov	r2, r6
   13ec4:	f7f6 fb92 	bl	a5ec <os_mbuf_copyinto>
    if (rc != 0) {
   13ec8:	4604      	mov	r4, r0
   13eca:	2800      	cmp	r0, #0
   13ecc:	d1e1      	bne.n	13e92 <shell_nlip_process+0x1e>
    if (OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len == g_nlip_expected_len) {
   13ece:	682e      	ldr	r6, [r5, #0]
   13ed0:	883b      	ldrh	r3, [r7, #0]
   13ed2:	8a32      	ldrh	r2, [r6, #16]
   13ed4:	429a      	cmp	r2, r3
   13ed6:	d1dc      	bne.n	13e92 <shell_nlip_process+0x1e>
        if (g_shell_nlip_in_func) {
   13ed8:	f8df 8054 	ldr.w	r8, [pc, #84]	; 13f30 <shell_nlip_process+0xbc>
   13edc:	f8d8 3000 	ldr.w	r3, [r8]
   13ee0:	b1e3      	cbz	r3, 13f1c <shell_nlip_process+0xa8>
            crc = CRC16_INITIAL_CRC;
   13ee2:	4603      	mov	r3, r0
                crc = crc16_ccitt(crc, m->om_data, m->om_len);
   13ee4:	88f2      	ldrh	r2, [r6, #6]
   13ee6:	6831      	ldr	r1, [r6, #0]
   13ee8:	4618      	mov	r0, r3
   13eea:	f001 f9c1 	bl	15270 <crc16_ccitt>
            for (m = g_nlip_mbuf; m; m = SLIST_NEXT(m, om_next)) {
   13eee:	68f6      	ldr	r6, [r6, #12]
                crc = crc16_ccitt(crc, m->om_data, m->om_len);
   13ef0:	4603      	mov	r3, r0
            for (m = g_nlip_mbuf; m; m = SLIST_NEXT(m, om_next)) {
   13ef2:	2e00      	cmp	r6, #0
   13ef4:	d1f6      	bne.n	13ee4 <shell_nlip_process+0x70>
                os_mbuf_adj(g_nlip_mbuf, -sizeof(crc));
   13ef6:	6828      	ldr	r0, [r5, #0]
            if (crc == 0 && g_nlip_expected_len >= sizeof(crc)) {
   13ef8:	b98b      	cbnz	r3, 13f1e <shell_nlip_process+0xaa>
   13efa:	883b      	ldrh	r3, [r7, #0]
   13efc:	2b01      	cmp	r3, #1
   13efe:	d90e      	bls.n	13f1e <shell_nlip_process+0xaa>
                os_mbuf_adj(g_nlip_mbuf, -sizeof(crc));
   13f00:	f06f 0101 	mvn.w	r1, #1
   13f04:	f7f6 faf7 	bl	a4f6 <os_mbuf_adj>
                g_shell_nlip_in_func(g_nlip_mbuf, g_shell_nlip_in_arg);
   13f08:	4a08      	ldr	r2, [pc, #32]	; (13f2c <shell_nlip_process+0xb8>)
   13f0a:	f8d8 3000 	ldr.w	r3, [r8]
   13f0e:	6811      	ldr	r1, [r2, #0]
   13f10:	6828      	ldr	r0, [r5, #0]
   13f12:	4798      	blx	r3
        g_nlip_mbuf = NULL;
   13f14:	2300      	movs	r3, #0
   13f16:	602b      	str	r3, [r5, #0]
        g_nlip_expected_len = 0;
   13f18:	803b      	strh	r3, [r7, #0]
   13f1a:	e7ba      	b.n	13e92 <shell_nlip_process+0x1e>
            os_mbuf_free_chain(g_nlip_mbuf);
   13f1c:	4630      	mov	r0, r6
   13f1e:	f7f6 fa5c 	bl	a3da <os_mbuf_free_chain>
   13f22:	e7f7      	b.n	13f14 <shell_nlip_process+0xa0>
   13f24:	20004b44 	.word	0x20004b44
   13f28:	20004b40 	.word	0x20004b40
   13f2c:	20004b48 	.word	0x20004b48
   13f30:	20004b4c 	.word	0x20004b4c

00013f34 <shell_nlip_init>:

void
shell_nlip_init(void)
{
    os_mqueue_init(&g_shell_nlip_mq, shell_event_data_in, NULL);
   13f34:	4902      	ldr	r1, [pc, #8]	; (13f40 <shell_nlip_init+0xc>)
   13f36:	4803      	ldr	r0, [pc, #12]	; (13f44 <shell_nlip_init+0x10>)
   13f38:	2200      	movs	r2, #0
   13f3a:	f7f6 b9da 	b.w	a2f2 <os_mqueue_init>
   13f3e:	bf00      	nop
   13f40:	00013d29 	.word	0x00013d29
   13f44:	20004b50 	.word	0x20004b50

00013f48 <shell_os_ls_dev>:
    return 0;
}

static int
shell_os_ls_dev(struct os_dev *dev, void *arg)
{
   13f48:	b507      	push	{r0, r1, r2, lr}
   13f4a:	4602      	mov	r2, r0
   13f4c:	4608      	mov	r0, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "%4d %3x %s\n",
   13f4e:	69d3      	ldr	r3, [r2, #28]
   13f50:	9300      	str	r3, [sp, #0]
   13f52:	7ed3      	ldrb	r3, [r2, #27]
   13f54:	4903      	ldr	r1, [pc, #12]	; (13f64 <shell_os_ls_dev+0x1c>)
   13f56:	7e92      	ldrb	r2, [r2, #26]
   13f58:	f7fd fa85 	bl	11466 <streamer_printf>
                    dev->od_open_ref, dev->od_flags, dev->od_name);
    return 0;
}
   13f5c:	2000      	movs	r0, #0
   13f5e:	b003      	add	sp, #12
   13f60:	f85d fb04 	ldr.w	pc, [sp], #4
   13f64:	00022b00 	.word	0x00022b00

00013f68 <shell_os_mpool_display_cmd>:
{
   13f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (argc > 1 && strcmp(argv[1], "")) {
   13f6c:	2901      	cmp	r1, #1
{
   13f6e:	b090      	sub	sp, #64	; 0x40
   13f70:	461d      	mov	r5, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   13f72:	dd33      	ble.n	13fdc <shell_os_mpool_display_cmd+0x74>
   13f74:	6854      	ldr	r4, [r2, #4]
   13f76:	7823      	ldrb	r3, [r4, #0]
    name = NULL;
   13f78:	2b00      	cmp	r3, #0
   13f7a:	bf08      	it	eq
   13f7c:	2400      	moveq	r4, #0
    streamer_printf(streamer, "Mempools: \n");
   13f7e:	491e      	ldr	r1, [pc, #120]	; (13ff8 <shell_os_mpool_display_cmd+0x90>)
        streamer_printf(streamer, "%32s %5d %4d %4d %4d\n", omi.omi_name,
   13f80:	f8df 8094 	ldr.w	r8, [pc, #148]	; 14018 <shell_os_mpool_display_cmd+0xb0>
    streamer_printf(streamer, "Mempools: \n");
   13f84:	4628      	mov	r0, r5
   13f86:	f7fd fa6e 	bl	11466 <streamer_printf>
    streamer_printf(streamer, "%32s %5s %4s %4s %4s\n",
   13f8a:	4b1c      	ldr	r3, [pc, #112]	; (13ffc <shell_os_mpool_display_cmd+0x94>)
   13f8c:	9302      	str	r3, [sp, #8]
   13f8e:	4b1c      	ldr	r3, [pc, #112]	; (14000 <shell_os_mpool_display_cmd+0x98>)
   13f90:	9301      	str	r3, [sp, #4]
   13f92:	4b1c      	ldr	r3, [pc, #112]	; (14004 <shell_os_mpool_display_cmd+0x9c>)
   13f94:	9300      	str	r3, [sp, #0]
   13f96:	4a1c      	ldr	r2, [pc, #112]	; (14008 <shell_os_mpool_display_cmd+0xa0>)
   13f98:	4b1c      	ldr	r3, [pc, #112]	; (1400c <shell_os_mpool_display_cmd+0xa4>)
   13f9a:	491d      	ldr	r1, [pc, #116]	; (14010 <shell_os_mpool_display_cmd+0xa8>)
   13f9c:	4628      	mov	r0, r5
   13f9e:	f7fd fa62 	bl	11466 <streamer_printf>
    found = 0;
   13fa2:	2700      	movs	r7, #0
    mp = NULL;
   13fa4:	463e      	mov	r6, r7
        mp = os_mempool_info_get_next(mp, &omi);
   13fa6:	4630      	mov	r0, r6
   13fa8:	a904      	add	r1, sp, #16
   13faa:	f7f5 fbb9 	bl	9720 <os_mempool_info_get_next>
        if (mp == NULL) {
   13fae:	4606      	mov	r6, r0
   13fb0:	b1b0      	cbz	r0, 13fe0 <shell_os_mpool_display_cmd+0x78>
        if (name) {
   13fb2:	b134      	cbz	r4, 13fc2 <shell_os_mpool_display_cmd+0x5a>
            if (strcmp(name, omi.omi_name)) {
   13fb4:	a908      	add	r1, sp, #32
   13fb6:	4620      	mov	r0, r4
   13fb8:	f7fb fb46 	bl	f648 <strcmp>
   13fbc:	2800      	cmp	r0, #0
   13fbe:	d1f2      	bne.n	13fa6 <shell_os_mpool_display_cmd+0x3e>
                found = 1;
   13fc0:	2701      	movs	r7, #1
        streamer_printf(streamer, "%32s %5d %4d %4d %4d\n", omi.omi_name,
   13fc2:	9b07      	ldr	r3, [sp, #28]
   13fc4:	9302      	str	r3, [sp, #8]
   13fc6:	9b06      	ldr	r3, [sp, #24]
   13fc8:	9301      	str	r3, [sp, #4]
   13fca:	9b05      	ldr	r3, [sp, #20]
   13fcc:	9300      	str	r3, [sp, #0]
   13fce:	aa08      	add	r2, sp, #32
   13fd0:	9b04      	ldr	r3, [sp, #16]
   13fd2:	4641      	mov	r1, r8
   13fd4:	4628      	mov	r0, r5
   13fd6:	f7fd fa46 	bl	11466 <streamer_printf>
   13fda:	e7e4      	b.n	13fa6 <shell_os_mpool_display_cmd+0x3e>
    name = NULL;
   13fdc:	2400      	movs	r4, #0
   13fde:	e7ce      	b.n	13f7e <shell_os_mpool_display_cmd+0x16>
    if (name && !found) {
   13fe0:	b12c      	cbz	r4, 13fee <shell_os_mpool_display_cmd+0x86>
   13fe2:	b927      	cbnz	r7, 13fee <shell_os_mpool_display_cmd+0x86>
        streamer_printf(streamer, "Couldn't find a memory pool with name %s\n",
   13fe4:	490b      	ldr	r1, [pc, #44]	; (14014 <shell_os_mpool_display_cmd+0xac>)
   13fe6:	4622      	mov	r2, r4
   13fe8:	4628      	mov	r0, r5
   13fea:	f7fd fa3c 	bl	11466 <streamer_printf>
}
   13fee:	2000      	movs	r0, #0
   13ff0:	b010      	add	sp, #64	; 0x40
   13ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ff6:	bf00      	nop
   13ff8:	00022b0c 	.word	0x00022b0c
   13ffc:	000226d5 	.word	0x000226d5
   14000:	000226d0 	.word	0x000226d0
   14004:	00023562 	.word	0x00023562
   14008:	00022cab 	.word	0x00022cab
   1400c:	00022b18 	.word	0x00022b18
   14010:	00022b1e 	.word	0x00022b1e
   14014:	00022b4a 	.word	0x00022b4a
   14018:	00022b34 	.word	0x00022b34

0001401c <shell_os_reset_cmd>:
{
   1401c:	b508      	push	{r3, lr}
    os_time_delay(OS_TICKS_PER_SEC / 10);
   1401e:	200c      	movs	r0, #12
   14020:	f7f5 ffbe 	bl	9fa0 <os_time_delay>
    os_reboot(HAL_RESET_REQUESTED);
   14024:	2006      	movs	r0, #6
   14026:	f7f5 f8b2 	bl	918e <os_reboot>
}
   1402a:	2000      	movs	r0, #0
   1402c:	bd08      	pop	{r3, pc}
	...

00014030 <shell_os_ls_dev_cmd>:

int
shell_os_ls_dev_cmd(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
   14030:	b513      	push	{r0, r1, r4, lr}
   14032:	461c      	mov	r4, r3
    streamer_printf(streamer, "%4s %3s %s\n", "ref", "flg", "name");
   14034:	4b07      	ldr	r3, [pc, #28]	; (14054 <shell_os_ls_dev_cmd+0x24>)
   14036:	4a08      	ldr	r2, [pc, #32]	; (14058 <shell_os_ls_dev_cmd+0x28>)
   14038:	9300      	str	r3, [sp, #0]
   1403a:	4908      	ldr	r1, [pc, #32]	; (1405c <shell_os_ls_dev_cmd+0x2c>)
   1403c:	4b08      	ldr	r3, [pc, #32]	; (14060 <shell_os_ls_dev_cmd+0x30>)
   1403e:	4620      	mov	r0, r4
   14040:	f7fd fa11 	bl	11466 <streamer_printf>
    os_dev_walk(shell_os_ls_dev, streamer);
   14044:	4807      	ldr	r0, [pc, #28]	; (14064 <shell_os_ls_dev_cmd+0x34>)
   14046:	4621      	mov	r1, r4
   14048:	f7f5 fa22 	bl	9490 <os_dev_walk>
    return 0;
}
   1404c:	2000      	movs	r0, #0
   1404e:	b002      	add	sp, #8
   14050:	bd10      	pop	{r4, pc}
   14052:	bf00      	nop
   14054:	00022cab 	.word	0x00022cab
   14058:	00022b78 	.word	0x00022b78
   1405c:	00022b7c 	.word	0x00022b7c
   14060:	00022b74 	.word	0x00022b74
   14064:	00013f49 	.word	0x00013f49

00014068 <shell_os_tasks_display_cmd>:
{
   14068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (argc > 1 && strcmp(argv[1], "")) {
   1406c:	2901      	cmp	r1, #1
{
   1406e:	b096      	sub	sp, #88	; 0x58
   14070:	461d      	mov	r5, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   14072:	dd49      	ble.n	14108 <shell_os_tasks_display_cmd+0xa0>
   14074:	6854      	ldr	r4, [r2, #4]
   14076:	7823      	ldrb	r3, [r4, #0]
    name = NULL;
   14078:	2b00      	cmp	r3, #0
   1407a:	bf08      	it	eq
   1407c:	2400      	moveq	r4, #0
    streamer_printf(streamer, "Tasks: \n");
   1407e:	4929      	ldr	r1, [pc, #164]	; (14124 <shell_os_tasks_display_cmd+0xbc>)
        streamer_printf(streamer, "%8s %3u %3u %8lu %8lu %8u %8u %8lu %8lu\n",
   14080:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 14158 <shell_os_tasks_display_cmd+0xf0>
    streamer_printf(streamer, "Tasks: \n");
   14084:	4628      	mov	r0, r5
   14086:	f7fd f9ee 	bl	11466 <streamer_printf>
    streamer_printf(streamer, "%8s %3s %3s %8s %8s %8s %8s %8s %8s %3s\n",
   1408a:	4b27      	ldr	r3, [pc, #156]	; (14128 <shell_os_tasks_display_cmd+0xc0>)
   1408c:	9307      	str	r3, [sp, #28]
   1408e:	4b27      	ldr	r3, [pc, #156]	; (1412c <shell_os_tasks_display_cmd+0xc4>)
   14090:	9306      	str	r3, [sp, #24]
   14092:	4b27      	ldr	r3, [pc, #156]	; (14130 <shell_os_tasks_display_cmd+0xc8>)
   14094:	9305      	str	r3, [sp, #20]
   14096:	4b27      	ldr	r3, [pc, #156]	; (14134 <shell_os_tasks_display_cmd+0xcc>)
   14098:	9304      	str	r3, [sp, #16]
   1409a:	4b27      	ldr	r3, [pc, #156]	; (14138 <shell_os_tasks_display_cmd+0xd0>)
   1409c:	9303      	str	r3, [sp, #12]
   1409e:	4b27      	ldr	r3, [pc, #156]	; (1413c <shell_os_tasks_display_cmd+0xd4>)
   140a0:	9302      	str	r3, [sp, #8]
   140a2:	4b27      	ldr	r3, [pc, #156]	; (14140 <shell_os_tasks_display_cmd+0xd8>)
   140a4:	9301      	str	r3, [sp, #4]
   140a6:	4b27      	ldr	r3, [pc, #156]	; (14144 <shell_os_tasks_display_cmd+0xdc>)
   140a8:	9300      	str	r3, [sp, #0]
   140aa:	4a27      	ldr	r2, [pc, #156]	; (14148 <shell_os_tasks_display_cmd+0xe0>)
   140ac:	4b27      	ldr	r3, [pc, #156]	; (1414c <shell_os_tasks_display_cmd+0xe4>)
   140ae:	4928      	ldr	r1, [pc, #160]	; (14150 <shell_os_tasks_display_cmd+0xe8>)
   140b0:	4628      	mov	r0, r5
   140b2:	f7fd f9d8 	bl	11466 <streamer_printf>
    found = 0;
   140b6:	2700      	movs	r7, #0
    prev_task = NULL;
   140b8:	463e      	mov	r6, r7
        prev_task = os_task_info_get_next(prev_task, &oti);
   140ba:	4630      	mov	r0, r6
   140bc:	a908      	add	r1, sp, #32
   140be:	f7f5 fed5 	bl	9e6c <os_task_info_get_next>
        if (prev_task == NULL) {
   140c2:	4606      	mov	r6, r0
   140c4:	b310      	cbz	r0, 1410c <shell_os_tasks_display_cmd+0xa4>
        if (name) {
   140c6:	b134      	cbz	r4, 140d6 <shell_os_tasks_display_cmd+0x6e>
            if (strcmp(name, oti.oti_name)) {
   140c8:	a90e      	add	r1, sp, #56	; 0x38
   140ca:	4620      	mov	r0, r4
   140cc:	f7fb fabc 	bl	f648 <strcmp>
   140d0:	2800      	cmp	r0, #0
   140d2:	d1f2      	bne.n	140ba <shell_os_tasks_display_cmd+0x52>
                found = 1;
   140d4:	2701      	movs	r7, #1
        streamer_printf(streamer, "%8s %3u %3u %8lu %8lu %8u %8u %8lu %8lu\n",
   140d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   140d8:	9306      	str	r3, [sp, #24]
   140da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   140dc:	9305      	str	r3, [sp, #20]
   140de:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   140e2:	9304      	str	r3, [sp, #16]
   140e4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   140e8:	9303      	str	r3, [sp, #12]
   140ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   140ec:	9302      	str	r3, [sp, #8]
   140ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   140f0:	9301      	str	r3, [sp, #4]
   140f2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   140f6:	9300      	str	r3, [sp, #0]
   140f8:	aa0e      	add	r2, sp, #56	; 0x38
   140fa:	f89d 3020 	ldrb.w	r3, [sp, #32]
   140fe:	4641      	mov	r1, r8
   14100:	4628      	mov	r0, r5
   14102:	f7fd f9b0 	bl	11466 <streamer_printf>
   14106:	e7d8      	b.n	140ba <shell_os_tasks_display_cmd+0x52>
    name = NULL;
   14108:	2400      	movs	r4, #0
   1410a:	e7b8      	b.n	1407e <shell_os_tasks_display_cmd+0x16>
    if (name && !found) {
   1410c:	b12c      	cbz	r4, 1411a <shell_os_tasks_display_cmd+0xb2>
   1410e:	b927      	cbnz	r7, 1411a <shell_os_tasks_display_cmd+0xb2>
        streamer_printf(streamer, "Couldn't find task with name %s\n", name);
   14110:	4910      	ldr	r1, [pc, #64]	; (14154 <shell_os_tasks_display_cmd+0xec>)
   14112:	4622      	mov	r2, r4
   14114:	4628      	mov	r0, r5
   14116:	f7fd f9a6 	bl	11466 <streamer_printf>
}
   1411a:	2000      	movs	r0, #0
   1411c:	b016      	add	sp, #88	; 0x58
   1411e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14122:	bf00      	nop
   14124:	00022b88 	.word	0x00022b88
   14128:	00022b74 	.word	0x00022b74
   1412c:	00022bc3 	.word	0x00022bc3
   14130:	00022bca 	.word	0x00022bca
   14134:	000226e8 	.word	0x000226e8
   14138:	00022bd1 	.word	0x00022bd1
   1413c:	00022bd7 	.word	0x00022bd7
   14140:	000226fd 	.word	0x000226fd
   14144:	000226de 	.word	0x000226de
   14148:	00022b95 	.word	0x00022b95
   1414c:	00022b91 	.word	0x00022b91
   14150:	00022b9a 	.word	0x00022b9a
   14154:	00022c04 	.word	0x00022c04
   14158:	00022bdb 	.word	0x00022bdb

0001415c <shell_os_date_cmd>:
{
   1415c:	b530      	push	{r4, r5, lr}
    if (argc == 0) {
   1415e:	3901      	subs	r1, #1
{
   14160:	b091      	sub	sp, #68	; 0x44
   14162:	4610      	mov	r0, r2
   14164:	461d      	mov	r5, r3
    if (argc == 0) {
   14166:	d11b      	bne.n	141a0 <shell_os_date_cmd+0x44>
        rc = os_gettimeofday(&tv, &tz);
   14168:	a901      	add	r1, sp, #4
   1416a:	a802      	add	r0, sp, #8
   1416c:	f7f5 ff2c 	bl	9fc8 <os_gettimeofday>
        assert(rc == 0);
   14170:	b128      	cbz	r0, 1417e <shell_os_date_cmd+0x22>
   14172:	2300      	movs	r3, #0
   14174:	461a      	mov	r2, r3
   14176:	4619      	mov	r1, r3
   14178:	4618      	mov	r0, r3
   1417a:	f7f4 febb 	bl	8ef4 <__assert_func>
        rc = datetime_format(&tv, &tz, buf, sizeof(buf));
   1417e:	2321      	movs	r3, #33	; 0x21
   14180:	aa06      	add	r2, sp, #24
   14182:	a901      	add	r1, sp, #4
   14184:	a802      	add	r0, sp, #8
   14186:	f001 f823 	bl	151d0 <datetime_format>
        assert(rc == 0);
   1418a:	4604      	mov	r4, r0
   1418c:	2800      	cmp	r0, #0
   1418e:	d1f0      	bne.n	14172 <shell_os_date_cmd+0x16>
        streamer_printf(streamer, "%s\n", buf);
   14190:	490f      	ldr	r1, [pc, #60]	; (141d0 <shell_os_date_cmd+0x74>)
   14192:	aa06      	add	r2, sp, #24
   14194:	4628      	mov	r0, r5
   14196:	f7fd f966 	bl	11466 <streamer_printf>
}
   1419a:	4620      	mov	r0, r4
   1419c:	b011      	add	sp, #68	; 0x44
   1419e:	bd30      	pop	{r4, r5, pc}
    } else if (argc == 1) {
   141a0:	2901      	cmp	r1, #1
   141a2:	d111      	bne.n	141c8 <shell_os_date_cmd+0x6c>
        rc = datetime_parse(*argv, &tv, &tz);
   141a4:	6840      	ldr	r0, [r0, #4]
   141a6:	aa02      	add	r2, sp, #8
   141a8:	a906      	add	r1, sp, #24
   141aa:	f000 ff5f 	bl	1506c <datetime_parse>
        if (rc == 0) {
   141ae:	4604      	mov	r4, r0
   141b0:	b928      	cbnz	r0, 141be <shell_os_date_cmd+0x62>
            rc = os_settimeofday(&tv, &tz);
   141b2:	a902      	add	r1, sp, #8
   141b4:	a806      	add	r0, sp, #24
   141b6:	f7f5 ff31 	bl	a01c <os_settimeofday>
   141ba:	4604      	mov	r4, r0
   141bc:	e7ed      	b.n	1419a <shell_os_date_cmd+0x3e>
            streamer_printf(streamer, "Invalid datetime\n");
   141be:	4905      	ldr	r1, [pc, #20]	; (141d4 <shell_os_date_cmd+0x78>)
   141c0:	4628      	mov	r0, r5
   141c2:	f7fd f950 	bl	11466 <streamer_printf>
   141c6:	e7e8      	b.n	1419a <shell_os_date_cmd+0x3e>
        rc = -1;
   141c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    return rc;
   141cc:	e7e5      	b.n	1419a <shell_os_date_cmd+0x3e>
   141ce:	bf00      	nop
   141d0:	00022e9f 	.word	0x00022e9f
   141d4:	00022c25 	.word	0x00022c25

000141d8 <shell_os_register>:
    { 0 },
};

void
shell_os_register(void)
{
   141d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    const struct shell_cmd *cmd;
    int rc;

    for (cmd = os_commands; cmd->sc_cmd != NULL; cmd++) {
   141da:	4c0a      	ldr	r4, [pc, #40]	; (14204 <shell_os_register+0x2c>)
        rc = shell_cmd_register(cmd);
        SYSINIT_PANIC_ASSERT_MSG(
   141dc:	4d0a      	ldr	r5, [pc, #40]	; (14208 <shell_os_register+0x30>)
   141de:	2600      	movs	r6, #0
        rc = shell_cmd_register(cmd);
   141e0:	4620      	mov	r0, r4
   141e2:	f7ff fd2b 	bl	13c3c <shell_cmd_register>
        SYSINIT_PANIC_ASSERT_MSG(
   141e6:	b130      	cbz	r0, 141f6 <shell_os_register+0x1e>
   141e8:	2300      	movs	r3, #0
   141ea:	682f      	ldr	r7, [r5, #0]
   141ec:	9600      	str	r6, [sp, #0]
   141ee:	461a      	mov	r2, r3
   141f0:	4619      	mov	r1, r3
   141f2:	4618      	mov	r0, r3
   141f4:	47b8      	blx	r7
    for (cmd = os_commands; cmd->sc_cmd != NULL; cmd++) {
   141f6:	69a3      	ldr	r3, [r4, #24]
   141f8:	3410      	adds	r4, #16
   141fa:	2b00      	cmp	r3, #0
   141fc:	d1f0      	bne.n	141e0 <shell_os_register+0x8>
            rc == 0, "Failed to register OS shell commands");
    }
}
   141fe:	b003      	add	sp, #12
   14200:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14202:	bf00      	nop
   14204:	00022cf4 	.word	0x00022cf4
   14208:	20000768 	.word	0x20000768

0001420c <shell_ticks_cmd>:
 * Handles the 'ticks' command
 */
int
shell_ticks_cmd(int argc, char **argv)
{
    if (argc > 1) {
   1420c:	2801      	cmp	r0, #1
{
   1420e:	b510      	push	{r4, lr}
    if (argc > 1) {
   14210:	dd17      	ble.n	14242 <shell_ticks_cmd+0x36>
        if (!strcmp(argv[1], "on")) {
   14212:	684c      	ldr	r4, [r1, #4]
   14214:	490c      	ldr	r1, [pc, #48]	; (14248 <shell_ticks_cmd+0x3c>)
   14216:	4620      	mov	r0, r4
   14218:	f7fb fa16 	bl	f648 <strcmp>
   1421c:	b928      	cbnz	r0, 1422a <shell_ticks_cmd+0x1e>
            console_yes_ticks();
   1421e:	f7fe fa7f 	bl	12720 <console_yes_ticks>
            console_printf(" Console Ticks on\n");
   14222:	480a      	ldr	r0, [pc, #40]	; (1424c <shell_ticks_cmd+0x40>)
            console_printf(" Console Ticks off\n");
            console_no_ticks();
        }
        return 0;
    }
    console_printf(" Usage: ticks [on|off]\n");
   14224:	f7fe f9d6 	bl	125d4 <console_printf>
    return 0;
   14228:	e009      	b.n	1423e <shell_ticks_cmd+0x32>
        else if (!strcmp(argv[1],"off")) {
   1422a:	4909      	ldr	r1, [pc, #36]	; (14250 <shell_ticks_cmd+0x44>)
   1422c:	4620      	mov	r0, r4
   1422e:	f7fb fa0b 	bl	f648 <strcmp>
   14232:	b920      	cbnz	r0, 1423e <shell_ticks_cmd+0x32>
            console_printf(" Console Ticks off\n");
   14234:	4807      	ldr	r0, [pc, #28]	; (14254 <shell_ticks_cmd+0x48>)
   14236:	f7fe f9cd 	bl	125d4 <console_printf>
            console_no_ticks();
   1423a:	f7fe fa6b 	bl	12714 <console_no_ticks>
}
   1423e:	2000      	movs	r0, #0
   14240:	bd10      	pop	{r4, pc}
    console_printf(" Usage: ticks [on|off]\n");
   14242:	4805      	ldr	r0, [pc, #20]	; (14258 <shell_ticks_cmd+0x4c>)
   14244:	e7ee      	b.n	14224 <shell_ticks_cmd+0x18>
   14246:	bf00      	nop
   14248:	00022dff 	.word	0x00022dff
   1424c:	00022d84 	.word	0x00022d84
   14250:	00022493 	.word	0x00022493
   14254:	00022d97 	.word	0x00022d97
   14258:	00022dab 	.word	0x00022dab

0001425c <shell_prompt_register>:


void
shell_prompt_register(void)
{
    shell_register(SHELL_PROMPT, prompt_commands);
   1425c:	4901      	ldr	r1, [pc, #4]	; (14264 <shell_prompt_register+0x8>)
   1425e:	4802      	ldr	r0, [pc, #8]	; (14268 <shell_prompt_register+0xc>)
   14260:	f7ff bccc 	b.w	13bfc <shell_register>
   14264:	00022e04 	.word	0x00022e04
   14268:	00022dc3 	.word	0x00022dc3

0001426c <stats_register_internal>:
    return (uint8_t *)hdr + offset;
}

static int
stats_register_internal(const char *name, struct stats_hdr *shdr)
{
   1426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;

    /* Don't allow duplicate entries, return an error if this stat
     * is already registered.
     */
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1426e:	4f0e      	ldr	r7, [pc, #56]	; (142a8 <stats_register_internal+0x3c>)
   14270:	683c      	ldr	r4, [r7, #0]
{
   14272:	4606      	mov	r6, r0
   14274:	460d      	mov	r5, r1
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   14276:	b95c      	cbnz	r4, 14290 <stats_register_internal+0x24>
    if (shdr->s_flags & STATS_HDR_F_PERSIST) {
        stats_conf_assert_valid(shdr);
    }
#endif

    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   14278:	687b      	ldr	r3, [r7, #4]

    STATS_INC(g_stats_stats, num_registered);
   1427a:	4a0c      	ldr	r2, [pc, #48]	; (142ac <stats_register_internal+0x40>)
    shdr->s_name = name;
   1427c:	602e      	str	r6, [r5, #0]
    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   1427e:	612c      	str	r4, [r5, #16]
   14280:	601d      	str	r5, [r3, #0]
    STATS_INC(g_stats_stats, num_registered);
   14282:	6953      	ldr	r3, [r2, #20]
    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   14284:	3510      	adds	r5, #16
    STATS_INC(g_stats_stats, num_registered);
   14286:	3301      	adds	r3, #1
    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   14288:	607d      	str	r5, [r7, #4]
    STATS_INC(g_stats_stats, num_registered);
   1428a:	6153      	str	r3, [r2, #20]
   1428c:	4620      	mov	r0, r4

    return (0);
err:
    return (rc);
}
   1428e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!strcmp(cur->s_name, name) || cur == shdr) {
   14290:	6820      	ldr	r0, [r4, #0]
   14292:	4631      	mov	r1, r6
   14294:	f7fb f9d8 	bl	f648 <strcmp>
   14298:	b118      	cbz	r0, 142a2 <stats_register_internal+0x36>
   1429a:	42ac      	cmp	r4, r5
   1429c:	d001      	beq.n	142a2 <stats_register_internal+0x36>
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1429e:	6924      	ldr	r4, [r4, #16]
   142a0:	e7e9      	b.n	14276 <stats_register_internal+0xa>
    return (rc);
   142a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   142a6:	e7f2      	b.n	1428e <stats_register_internal+0x22>
   142a8:	20000750 	.word	0x20000750
   142ac:	20004b68 	.word	0x20004b68

000142b0 <stats_walk>:
 * @return 0 on success, the return code of the walk_func on abort.
 *
 */
int
stats_walk(struct stats_hdr *hdr, stats_walk_func_t walk_func, void *arg)
{
   142b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (hdr->s_flags & STATS_HDR_F_PERSIST) {
   142b4:	88c3      	ldrh	r3, [r0, #6]
    return hdr->s_cnt * hdr->s_size;
   142b6:	7906      	ldrb	r6, [r0, #4]
         * is set.  Users may only partially name elements in the statistics
         * structure.
         */
        if (name == NULL) {
            ent_n = (cur - start) / hdr->s_size;
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
   142b8:	f8df b084 	ldr.w	fp, [pc, #132]	; 14340 <stats_walk+0x90>
        return sizeof (struct stats_hdr);
   142bc:	f013 0f01 	tst.w	r3, #1
    return hdr->s_cnt * hdr->s_size;
   142c0:	7943      	ldrb	r3, [r0, #5]
        return sizeof (struct stats_hdr);
   142c2:	bf14      	ite	ne
   142c4:	2738      	movne	r7, #56	; 0x38
   142c6:	2714      	moveq	r7, #20
    end = start + stats_size(hdr);
   142c8:	fb03 7606 	mla	r6, r3, r6, r7
{
   142cc:	b085      	sub	sp, #20
   142ce:	4604      	mov	r4, r0
   142d0:	4688      	mov	r8, r1
   142d2:	4691      	mov	r9, r2
    start = stats_offset(hdr);
   142d4:	b2bd      	uxth	r5, r7
    end = start + stats_size(hdr);
   142d6:	b2b6      	uxth	r6, r6
            if (hdr->s_map[i].snm_off == cur) {
   142d8:	f04f 0a06 	mov.w	sl, #6
    while (cur < end) {
   142dc:	42b5      	cmp	r5, r6
   142de:	d22a      	bcs.n	14336 <stats_walk+0x86>
        for (i = 0; i < hdr->s_map_cnt; ++i) {
   142e0:	68e0      	ldr	r0, [r4, #12]
   142e2:	2300      	movs	r3, #0
   142e4:	e000      	b.n	142e8 <stats_walk+0x38>
   142e6:	3301      	adds	r3, #1
   142e8:	4298      	cmp	r0, r3
   142ea:	dd0a      	ble.n	14302 <stats_walk+0x52>
            if (hdr->s_map[i].snm_off == cur) {
   142ec:	68a1      	ldr	r1, [r4, #8]
   142ee:	fb0a f203 	mul.w	r2, sl, r3
   142f2:	eb01 0c02 	add.w	ip, r1, r2
   142f6:	5a8a      	ldrh	r2, [r1, r2]
   142f8:	42aa      	cmp	r2, r5
   142fa:	d1f4      	bne.n	142e6 <stats_walk+0x36>
                name = hdr->s_map[i].snm_name;
   142fc:	f8dc 2002 	ldr.w	r2, [ip, #2]
        if (name == NULL) {
   14300:	b982      	cbnz	r2, 14324 <stats_walk+0x74>
            ent_n = (cur - start) / hdr->s_size;
   14302:	7922      	ldrb	r2, [r4, #4]
   14304:	1beb      	subs	r3, r5, r7
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
   14306:	210c      	movs	r1, #12
   14308:	fb93 f3f2 	sdiv	r3, r3, r2
   1430c:	a801      	add	r0, sp, #4
   1430e:	465a      	mov	r2, fp
   14310:	f7fb fc94 	bl	fc3c <snprintf>
            name_buf[len] = '\0';
   14314:	f100 0310 	add.w	r3, r0, #16
   14318:	eb0d 0003 	add.w	r0, sp, r3
   1431c:	2300      	movs	r3, #0
   1431e:	f800 3c0c 	strb.w	r3, [r0, #-12]
            name = name_buf;
   14322:	aa01      	add	r2, sp, #4
        }

        rc = walk_func(hdr, arg, name, cur);
   14324:	462b      	mov	r3, r5
   14326:	4649      	mov	r1, r9
   14328:	4620      	mov	r0, r4
   1432a:	47c0      	blx	r8
        if (rc != 0) {
   1432c:	b920      	cbnz	r0, 14338 <stats_walk+0x88>
        }

        /* Statistics are variable sized, move forward either 16, 32 or 64
         * bits in the structure.
         */
        cur += hdr->s_size;
   1432e:	7923      	ldrb	r3, [r4, #4]
   14330:	441d      	add	r5, r3
   14332:	b2ad      	uxth	r5, r5
   14334:	e7d2      	b.n	142dc <stats_walk+0x2c>
    }

    return (0);
   14336:	2000      	movs	r0, #0
err:
    return (rc);
}
   14338:	b005      	add	sp, #20
   1433a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1433e:	bf00      	nop
   14340:	00022e48 	.word	0x00022e48

00014344 <stats_init>:
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_init(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
        const struct stats_name_map *map, uint8_t map_cnt)
{
   14344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14346:	461f      	mov	r7, r3
    if (hdr->s_flags & STATS_HDR_F_PERSIST) {
   14348:	88c3      	ldrh	r3, [r0, #6]
        return sizeof (struct stats_hdr);
   1434a:	f013 0f01 	tst.w	r3, #1
{
   1434e:	4604      	mov	r4, r0
        return sizeof (struct stats_hdr);
   14350:	bf14      	ite	ne
   14352:	2038      	movne	r0, #56	; 0x38
   14354:	2014      	moveq	r0, #20
{
   14356:	460e      	mov	r6, r1
   14358:	4615      	mov	r5, r2
    size_t offset;

    offset = stats_offset(shdr);
    memset((uint8_t *)shdr + offset, 0, size * cnt);
   1435a:	4420      	add	r0, r4
   1435c:	434a      	muls	r2, r1
   1435e:	2100      	movs	r1, #0
   14360:	f7fb f94d 	bl	f5fe <memset>
    shdr->s_size = size;
    shdr->s_cnt = cnt;
    shdr->s_flags = 0;
#if MYNEWT_VAL(STATS_NAMES)
    shdr->s_map = map;
    shdr->s_map_cnt = map_cnt;
   14364:	f89d 3018 	ldrb.w	r3, [sp, #24]
    shdr->s_size = size;
   14368:	7126      	strb	r6, [r4, #4]
    shdr->s_flags = 0;
   1436a:	2000      	movs	r0, #0
    shdr->s_cnt = cnt;
   1436c:	7165      	strb	r5, [r4, #5]
    shdr->s_flags = 0;
   1436e:	80e0      	strh	r0, [r4, #6]
    shdr->s_map = map;
   14370:	60a7      	str	r7, [r4, #8]
    shdr->s_map_cnt = map_cnt;
   14372:	60e3      	str	r3, [r4, #12]
#endif

    return (0);
}
   14374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00014378 <stats_module_init_internal>:
{
   14378:	b507      	push	{r0, r1, r2, lr}
    STAILQ_INIT(&g_stats_registry);
   1437a:	4b0c      	ldr	r3, [pc, #48]	; (143ac <stats_module_init_internal+0x34>)
    rc = stats_init(STATS_HDR(g_stats_stats),
   1437c:	480c      	ldr	r0, [pc, #48]	; (143b0 <stats_module_init_internal+0x38>)
    STAILQ_INIT(&g_stats_registry);
   1437e:	2200      	movs	r2, #0
   14380:	e9c3 2300 	strd	r2, r3, [r3]
    rc = stats_init(STATS_HDR(g_stats_stats),
   14384:	2201      	movs	r2, #1
   14386:	4b0b      	ldr	r3, [pc, #44]	; (143b4 <stats_module_init_internal+0x3c>)
   14388:	9200      	str	r2, [sp, #0]
   1438a:	2104      	movs	r1, #4
   1438c:	f7ff ffda 	bl	14344 <stats_init>
    if (rc) {
   14390:	b948      	cbnz	r0, 143a6 <stats_module_init_internal+0x2e>
    rc = stats_register_internal("stat", STATS_HDR(g_stats_stats));
   14392:	4907      	ldr	r1, [pc, #28]	; (143b0 <stats_module_init_internal+0x38>)
   14394:	4808      	ldr	r0, [pc, #32]	; (143b8 <stats_module_init_internal+0x40>)
   14396:	f7ff ff69 	bl	1426c <stats_register_internal>
    if (rc) {
   1439a:	b920      	cbnz	r0, 143a6 <stats_module_init_internal+0x2e>
}
   1439c:	b003      	add	sp, #12
   1439e:	f85d eb04 	ldr.w	lr, [sp], #4
    rc = stats_shell_register();
   143a2:	f000 b8c5 	b.w	14530 <stats_shell_register>
}
   143a6:	b003      	add	sp, #12
   143a8:	f85d fb04 	ldr.w	pc, [sp], #4
   143ac:	20000750 	.word	0x20000750
   143b0:	20004b68 	.word	0x20004b68
   143b4:	00022e60 	.word	0x00022e60
   143b8:	00022e4c 	.word	0x00022e4c

000143bc <stats_module_init>:
{
   143bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SYSINIT_ASSERT_ACTIVE();
   143be:	4b0c      	ldr	r3, [pc, #48]	; (143f0 <stats_module_init+0x34>)
   143c0:	781b      	ldrb	r3, [r3, #0]
   143c2:	b923      	cbnz	r3, 143ce <stats_module_init+0x12>
   143c4:	461a      	mov	r2, r3
   143c6:	4619      	mov	r1, r3
   143c8:	4618      	mov	r0, r3
   143ca:	f7f4 fd93 	bl	8ef4 <__assert_func>
    if (g_stats_stats.snum_registered) {
   143ce:	4b09      	ldr	r3, [pc, #36]	; (143f4 <stats_module_init+0x38>)
   143d0:	695c      	ldr	r4, [r3, #20]
   143d2:	b954      	cbnz	r4, 143ea <stats_module_init+0x2e>
    rc = stats_module_init_internal();
   143d4:	f7ff ffd0 	bl	14378 <stats_module_init_internal>
    SYSINIT_PANIC_ASSERT(rc == 0);
   143d8:	b138      	cbz	r0, 143ea <stats_module_init+0x2e>
   143da:	4b07      	ldr	r3, [pc, #28]	; (143f8 <stats_module_init+0x3c>)
   143dc:	9400      	str	r4, [sp, #0]
   143de:	681d      	ldr	r5, [r3, #0]
   143e0:	4622      	mov	r2, r4
   143e2:	4623      	mov	r3, r4
   143e4:	4621      	mov	r1, r4
   143e6:	4620      	mov	r0, r4
   143e8:	47a8      	blx	r5
}
   143ea:	b003      	add	sp, #12
   143ec:	bd30      	pop	{r4, r5, pc}
   143ee:	bf00      	nop
   143f0:	20004ba8 	.word	0x20004ba8
   143f4:	20004b68 	.word	0x20004b68
   143f8:	20000768 	.word	0x20000768

000143fc <stats_group_walk>:
stats_group_walk(stats_group_walk_func_t walk_func, void *arg)
{
    struct stats_hdr *hdr;
    int rc;

    STAILQ_FOREACH(hdr, &g_stats_registry, s_next) {
   143fc:	4b07      	ldr	r3, [pc, #28]	; (1441c <stats_group_walk+0x20>)
{
   143fe:	b570      	push	{r4, r5, r6, lr}
    STAILQ_FOREACH(hdr, &g_stats_registry, s_next) {
   14400:	681c      	ldr	r4, [r3, #0]
{
   14402:	4605      	mov	r5, r0
   14404:	460e      	mov	r6, r1
    STAILQ_FOREACH(hdr, &g_stats_registry, s_next) {
   14406:	b90c      	cbnz	r4, 1440c <stats_group_walk+0x10>
        rc = walk_func(hdr, arg);
        if (rc != 0) {
            goto err;
        }
    }
    return (0);
   14408:	4620      	mov	r0, r4
err:
    return (rc);
}
   1440a:	bd70      	pop	{r4, r5, r6, pc}
        rc = walk_func(hdr, arg);
   1440c:	4631      	mov	r1, r6
   1440e:	4620      	mov	r0, r4
   14410:	47a8      	blx	r5
        if (rc != 0) {
   14412:	2800      	cmp	r0, #0
   14414:	d1f9      	bne.n	1440a <stats_group_walk+0xe>
    STAILQ_FOREACH(hdr, &g_stats_registry, s_next) {
   14416:	6924      	ldr	r4, [r4, #16]
   14418:	e7f5      	b.n	14406 <stats_group_walk+0xa>
   1441a:	bf00      	nop
   1441c:	20000750 	.word	0x20000750

00014420 <stats_group_find>:
 *
 * @return statistic structure if found, NULL if not found.
 */
struct stats_hdr *
stats_group_find(const char *name)
{
   14420:	b538      	push	{r3, r4, r5, lr}
    struct stats_hdr *cur;

    cur = NULL;
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   14422:	4b07      	ldr	r3, [pc, #28]	; (14440 <stats_group_find+0x20>)
   14424:	681c      	ldr	r4, [r3, #0]
{
   14426:	4605      	mov	r5, r0
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   14428:	b90c      	cbnz	r4, 1442e <stats_group_find+0xe>
            break;
        }
    }

    return (cur);
}
   1442a:	4620      	mov	r0, r4
   1442c:	bd38      	pop	{r3, r4, r5, pc}
        if (!strcmp(cur->s_name, name)) {
   1442e:	6820      	ldr	r0, [r4, #0]
   14430:	4629      	mov	r1, r5
   14432:	f7fb f909 	bl	f648 <strcmp>
   14436:	2800      	cmp	r0, #0
   14438:	d0f7      	beq.n	1442a <stats_group_find+0xa>
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1443a:	6924      	ldr	r4, [r4, #16]
   1443c:	e7f4      	b.n	14428 <stats_group_find+0x8>
   1443e:	bf00      	nop
   14440:	20000750 	.word	0x20000750

00014444 <stats_register>:
    /*
     * We should always have at least "stat" registered so if there are no stats
     * registered, try to initialize module first. This allows to register stat
     * before sysinit is called (e.g. from BSP).
     */
    if (g_stats_stats.snum_registered == 0) {
   14444:	4b0a      	ldr	r3, [pc, #40]	; (14470 <stats_register+0x2c>)
   14446:	695b      	ldr	r3, [r3, #20]
{
   14448:	b513      	push	{r0, r1, r4, lr}
   1444a:	4604      	mov	r4, r0
    if (g_stats_stats.snum_registered == 0) {
   1444c:	b12b      	cbz	r3, 1445a <stats_register+0x16>
        if (stats_module_init_internal()) {
            return -1;
        }
    }

    return stats_register_internal(name, shdr);
   1444e:	4620      	mov	r0, r4
}
   14450:	b002      	add	sp, #8
   14452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stats_register_internal(name, shdr);
   14456:	f7ff bf09 	b.w	1426c <stats_register_internal>
   1445a:	9101      	str	r1, [sp, #4]
        if (stats_module_init_internal()) {
   1445c:	f7ff ff8c 	bl	14378 <stats_module_init_internal>
   14460:	9901      	ldr	r1, [sp, #4]
   14462:	2800      	cmp	r0, #0
   14464:	d0f3      	beq.n	1444e <stats_register+0xa>
}
   14466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1446a:	b002      	add	sp, #8
   1446c:	bd10      	pop	{r4, pc}
   1446e:	bf00      	nop
   14470:	20004b68 	.word	0x20004b68

00014474 <stats_shell_display_entry>:
uint8_t stats_shell_registered;

static int 
stats_shell_display_entry(struct stats_hdr *hdr, void *arg, char *name,
        uint16_t stat_off)
{
   14474:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14476:	4604      	mov	r4, r0
   14478:	4608      	mov	r0, r1
    void *stat_val;

    streamer = arg;

    stat_val = (uint8_t *)hdr + stat_off;
    switch (hdr->s_size) {
   1447a:	7921      	ldrb	r1, [r4, #4]
   1447c:	2904      	cmp	r1, #4
    stat_val = (uint8_t *)hdr + stat_off;
   1447e:	eb04 0503 	add.w	r5, r4, r3
    switch (hdr->s_size) {
   14482:	d008      	beq.n	14496 <stats_shell_display_entry+0x22>
   14484:	2908      	cmp	r1, #8
   14486:	d009      	beq.n	1449c <stats_shell_display_entry+0x28>
   14488:	2902      	cmp	r1, #2
   1448a:	d111      	bne.n	144b0 <stats_shell_display_entry+0x3c>
        case sizeof(uint16_t):
            streamer_printf(streamer, "%s: %u\n", name,
   1448c:	5ae3      	ldrh	r3, [r4, r3]
   1448e:	490a      	ldr	r1, [pc, #40]	; (144b8 <stats_shell_display_entry+0x44>)
        case sizeof(uint64_t):
            streamer_printf(streamer, "%s: %llu\n", name,
                    *(uint64_t *) stat_val);
            break;
        default:
            streamer_printf(streamer, "Unknown stat size for %s %u\n", name, 
   14490:	f7fc ffe9 	bl	11466 <streamer_printf>
                    hdr->s_size);
            break;
   14494:	e009      	b.n	144aa <stats_shell_display_entry+0x36>
            streamer_printf(streamer, "%s: %lu\n", name,
   14496:	58e3      	ldr	r3, [r4, r3]
   14498:	4908      	ldr	r1, [pc, #32]	; (144bc <stats_shell_display_entry+0x48>)
   1449a:	e7f9      	b.n	14490 <stats_shell_display_entry+0x1c>
            streamer_printf(streamer, "%s: %llu\n", name,
   1449c:	e9d5 4500 	ldrd	r4, r5, [r5]
   144a0:	4907      	ldr	r1, [pc, #28]	; (144c0 <stats_shell_display_entry+0x4c>)
   144a2:	e9cd 4500 	strd	r4, r5, [sp]
   144a6:	f7fc ffde 	bl	11466 <streamer_printf>
    }

    return (0);
}
   144aa:	2000      	movs	r0, #0
   144ac:	b003      	add	sp, #12
   144ae:	bd30      	pop	{r4, r5, pc}
            streamer_printf(streamer, "Unknown stat size for %s %u\n", name, 
   144b0:	460b      	mov	r3, r1
   144b2:	4904      	ldr	r1, [pc, #16]	; (144c4 <stats_shell_display_entry+0x50>)
   144b4:	e7ec      	b.n	14490 <stats_shell_display_entry+0x1c>
   144b6:	bf00      	nop
   144b8:	00022e66 	.word	0x00022e66
   144bc:	00022e6e 	.word	0x00022e6e
   144c0:	00022e77 	.word	0x00022e77
   144c4:	00022e81 	.word	0x00022e81

000144c8 <stats_shell_display_group>:

static int 
stats_shell_display_group(struct stats_hdr *hdr, void *arg)
{
   144c8:	b508      	push	{r3, lr}
   144ca:	460b      	mov	r3, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "\t%s\n", hdr->s_name);
   144cc:	6802      	ldr	r2, [r0, #0]
   144ce:	4903      	ldr	r1, [pc, #12]	; (144dc <stats_shell_display_group+0x14>)
   144d0:	4618      	mov	r0, r3
   144d2:	f7fc ffc8 	bl	11466 <streamer_printf>
    return (0);
}
   144d6:	2000      	movs	r0, #0
   144d8:	bd08      	pop	{r3, pc}
   144da:	bf00      	nop
   144dc:	00022e9e 	.word	0x00022e9e

000144e0 <shell_stats_display>:

static int
shell_stats_display(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
   144e0:	b538      	push	{r3, r4, r5, lr}
    struct stats_hdr *hdr;
    char *name;
    int rc;

    name = argv[1];
   144e2:	6855      	ldr	r5, [r2, #4]
{
   144e4:	461c      	mov	r4, r3
    if (name == NULL || !strcmp(name, "")) {
   144e6:	b10d      	cbz	r5, 144ec <shell_stats_display+0xc>
   144e8:	782b      	ldrb	r3, [r5, #0]
   144ea:	b94b      	cbnz	r3, 14500 <shell_stats_display+0x20>
        streamer_printf(streamer, "Must specify a statistic name to dump, "
   144ec:	490c      	ldr	r1, [pc, #48]	; (14520 <shell_stats_display+0x40>)
   144ee:	4620      	mov	r0, r4
   144f0:	f7fc ffb9 	bl	11466 <streamer_printf>
                "possible names are:\n");
        stats_group_walk(stats_shell_display_group, streamer);
   144f4:	480b      	ldr	r0, [pc, #44]	; (14524 <shell_stats_display+0x44>)
   144f6:	4621      	mov	r1, r4
   144f8:	f7ff ff80 	bl	143fc <stats_group_walk>
    }

    return (0);
err:
    return (rc);
}
   144fc:	2002      	movs	r0, #2
   144fe:	bd38      	pop	{r3, r4, r5, pc}
    hdr = stats_group_find(name);
   14500:	4628      	mov	r0, r5
   14502:	f7ff ff8d 	bl	14420 <stats_group_find>
    if (!hdr) {
   14506:	b928      	cbnz	r0, 14514 <shell_stats_display+0x34>
        streamer_printf(streamer, "Could not find statistic group %s\n", name);
   14508:	4907      	ldr	r1, [pc, #28]	; (14528 <shell_stats_display+0x48>)
   1450a:	462a      	mov	r2, r5
   1450c:	4620      	mov	r0, r4
   1450e:	f7fc ffaa 	bl	11466 <streamer_printf>
        goto err;
   14512:	e7f3      	b.n	144fc <shell_stats_display+0x1c>
    rc = stats_walk(hdr, stats_shell_display_entry, streamer);
   14514:	4622      	mov	r2, r4
   14516:	4905      	ldr	r1, [pc, #20]	; (1452c <shell_stats_display+0x4c>)
}
   14518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    rc = stats_walk(hdr, stats_shell_display_entry, streamer);
   1451c:	f7ff bec8 	b.w	142b0 <stats_walk>
   14520:	00022ea3 	.word	0x00022ea3
   14524:	000144c9 	.word	0x000144c9
   14528:	00022edf 	.word	0x00022edf
   1452c:	00014475 	.word	0x00014475

00014530 <stats_shell_register>:


int 
stats_shell_register(void)
{
   14530:	b508      	push	{r3, lr}
    if (!stats_shell_registered) {
   14532:	4b05      	ldr	r3, [pc, #20]	; (14548 <stats_shell_register+0x18>)
   14534:	781a      	ldrb	r2, [r3, #0]
   14536:	b922      	cbnz	r2, 14542 <stats_shell_register+0x12>
        stats_shell_registered = 1;
   14538:	2201      	movs	r2, #1
        shell_cmd_register(&shell_stats_cmd);
   1453a:	4804      	ldr	r0, [pc, #16]	; (1454c <stats_shell_register+0x1c>)
        stats_shell_registered = 1;
   1453c:	701a      	strb	r2, [r3, #0]
        shell_cmd_register(&shell_stats_cmd);
   1453e:	f7ff fb7d 	bl	13c3c <shell_cmd_register>
    }

    return (0);
}
   14542:	2000      	movs	r0, #0
   14544:	bd08      	pop	{r3, pc}
   14546:	bf00      	nop
   14548:	20004b80 	.word	0x20004b80
   1454c:	20000758 	.word	0x20000758

00014550 <sysdown_timer_exp>:
    }
}

static void
sysdown_timer_exp(struct os_event *unused)
{
   14550:	b508      	push	{r3, lr}
    assert(0);
   14552:	2300      	movs	r3, #0
   14554:	461a      	mov	r2, r3
   14556:	4619      	mov	r1, r3
   14558:	4618      	mov	r0, r3
   1455a:	f7f4 fccb 	bl	8ef4 <__assert_func>
	...

00014560 <sysdown>:
}

int
sysdown(int reason)
{
   14560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14562:	4605      	mov	r5, r0
    os_sr_t sr;
    int rc;
    int i;

    /* Only allow one shutdown operation. */
    OS_ENTER_CRITICAL(sr);
   14564:	f7f5 fe00 	bl	a168 <os_arch_save_sr>
    if (sysdown_active) {
   14568:	4b1d      	ldr	r3, [pc, #116]	; (145e0 <sysdown+0x80>)
   1456a:	781c      	ldrb	r4, [r3, #0]
   1456c:	bb1c      	cbnz	r4, 145b6 <sysdown+0x56>
        rc = SYS_EALREADY;
    } else {
        sysdown_active = true;
   1456e:	2201      	movs	r2, #1
   14570:	701a      	strb	r2, [r3, #0]
        rc = 0;
    }
    OS_EXIT_CRITICAL(sr);
   14572:	f7f5 fdff 	bl	a174 <os_arch_restore_sr>

    if (rc != 0) {
   14576:	b9e4      	cbnz	r4, 145b2 <sysdown+0x52>
        return rc;
    }

    os_callout_init(&sysdown_timer, os_eventq_dflt_get(), sysdown_timer_exp,
   14578:	f7f5 f850 	bl	961c <os_eventq_dflt_get>
   1457c:	4623      	mov	r3, r4
   1457e:	4601      	mov	r1, r0
   14580:	4a18      	ldr	r2, [pc, #96]	; (145e4 <sysdown+0x84>)
   14582:	4819      	ldr	r0, [pc, #100]	; (145e8 <sysdown+0x88>)
   14584:	f7f4 fe22 	bl	91cc <os_callout_init>
                    NULL);
    rc = os_callout_reset(&sysdown_timer, SYSDOWN_TIMEOUT_TICKS);
   14588:	4817      	ldr	r0, [pc, #92]	; (145e8 <sysdown+0x88>)
   1458a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
   1458e:	f7f4 fe49 	bl	9224 <os_callout_reset>
    assert(rc == 0);
   14592:	4604      	mov	r4, r0
   14594:	b990      	cbnz	r0, 145bc <sysdown+0x5c>
   14596:	4e15      	ldr	r6, [pc, #84]	; (145ec <sysdown+0x8c>)
        case SYSDOWN_COMPLETE:
            break;

        case SYSDOWN_IN_PROGRESS:
            OS_ENTER_CRITICAL(sr);
            sysdown_num_in_progress++;
   14598:	4f15      	ldr	r7, [pc, #84]	; (145f0 <sysdown+0x90>)
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
   1459a:	f856 3b04 	ldr.w	r3, [r6], #4
   1459e:	b99b      	cbnz	r3, 145c8 <sysdown+0x68>

    /* If all subprocedures are complete, signal completion of sysdown.
     * Otherwise, wait for in-progress subprocedures to signal completion
     * asynchronously.
     */
    if (sysdown_num_in_progress == 0) {
   145a0:	4b13      	ldr	r3, [pc, #76]	; (145f0 <sysdown+0x90>)
   145a2:	681d      	ldr	r5, [r3, #0]
   145a4:	b92d      	cbnz	r5, 145b2 <sysdown+0x52>
    os_callout_stop(&sysdown_timer);
   145a6:	4810      	ldr	r0, [pc, #64]	; (145e8 <sysdown+0x88>)
   145a8:	f7f4 fe1e 	bl	91e8 <os_callout_stop>
    os_system_reset();
   145ac:	f7f4 fdf1 	bl	9192 <os_system_reset>
        sysdown_complete();
    }

    return 0;
   145b0:	462c      	mov	r4, r5
}
   145b2:	4620      	mov	r0, r4
   145b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = SYS_EALREADY;
   145b6:	f06f 040a 	mvn.w	r4, #10
   145ba:	e7da      	b.n	14572 <sysdown+0x12>
    assert(rc == 0);
   145bc:	2300      	movs	r3, #0
   145be:	461a      	mov	r2, r3
   145c0:	4619      	mov	r1, r3
   145c2:	4618      	mov	r0, r3
   145c4:	f7f4 fc96 	bl	8ef4 <__assert_func>
        rc = sysdown_cbs[i](reason);
   145c8:	4628      	mov	r0, r5
   145ca:	4798      	blx	r3
        switch (rc) {
   145cc:	2801      	cmp	r0, #1
   145ce:	d1e4      	bne.n	1459a <sysdown+0x3a>
            OS_ENTER_CRITICAL(sr);
   145d0:	f7f5 fdca 	bl	a168 <os_arch_save_sr>
            sysdown_num_in_progress++;
   145d4:	683b      	ldr	r3, [r7, #0]
   145d6:	3301      	adds	r3, #1
   145d8:	603b      	str	r3, [r7, #0]
            OS_EXIT_CRITICAL(sr);
   145da:	f7f5 fdcb 	bl	a174 <os_arch_restore_sr>
            break;
   145de:	e7dc      	b.n	1459a <sysdown+0x3a>
   145e0:	20004b81 	.word	0x20004b81
   145e4:	00014551 	.word	0x00014551
   145e8:	20004b88 	.word	0x20004b88
   145ec:	000232d8 	.word	0x000232d8
   145f0:	20004b84 	.word	0x20004b84

000145f4 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   145f4:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   145f6:	f7f4 fc7d 	bl	8ef4 <__assert_func>
	...

000145fc <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   145fc:	4b01      	ldr	r3, [pc, #4]	; (14604 <sysinit_start+0x8>)
   145fe:	2201      	movs	r2, #1
   14600:	701a      	strb	r2, [r3, #0]
}
   14602:	4770      	bx	lr
   14604:	20004ba8 	.word	0x20004ba8

00014608 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   14608:	4b01      	ldr	r3, [pc, #4]	; (14610 <sysinit_end+0x8>)
   1460a:	2200      	movs	r2, #0
   1460c:	701a      	strb	r2, [r3, #0]
}
   1460e:	4770      	bx	lr
   14610:	20004ba8 	.word	0x20004ba8

00014614 <uwbcfg_export>:
}

static int
uwbcfg_export(void (*export_func)(char *name, char *val),
  enum conf_export_tgt tgt)
{
   14614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14618:	4f0f      	ldr	r7, [pc, #60]	; (14658 <uwbcfg_export+0x44>)
   1461a:	4d10      	ldr	r5, [pc, #64]	; (1465c <uwbcfg_export+0x48>)
    int i;
    char b[32];
    for (i=0;i<CFGSTR_MAX;i++) {
        snprintf(b, sizeof(b), "%s/%s", uwbcfg_handler.ch_name, g_uwbcfg_str[i]);
   1461c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 14660 <uwbcfg_export+0x4c>
   14620:	f8df 8040 	ldr.w	r8, [pc, #64]	; 14664 <uwbcfg_export+0x50>
{
   14624:	b08b      	sub	sp, #44	; 0x2c
   14626:	4606      	mov	r6, r0
    for (i=0;i<CFGSTR_MAX;i++) {
   14628:	2400      	movs	r4, #0
        snprintf(b, sizeof(b), "%s/%s", uwbcfg_handler.ch_name, g_uwbcfg_str[i]);
   1462a:	f857 3b04 	ldr.w	r3, [r7], #4
   1462e:	9300      	str	r3, [sp, #0]
   14630:	4642      	mov	r2, r8
   14632:	f8d9 3004 	ldr.w	r3, [r9, #4]
   14636:	2120      	movs	r1, #32
   14638:	a802      	add	r0, sp, #8
   1463a:	f7fb faff 	bl	fc3c <snprintf>
    for (i=0;i<CFGSTR_MAX;i++) {
   1463e:	3401      	adds	r4, #1
        export_func(b, g_uwb_config[i]);
   14640:	4629      	mov	r1, r5
   14642:	a802      	add	r0, sp, #8
   14644:	47b0      	blx	r6
    for (i=0;i<CFGSTR_MAX;i++) {
   14646:	2c14      	cmp	r4, #20
   14648:	f105 0508 	add.w	r5, r5, #8
   1464c:	d1ed      	bne.n	1462a <uwbcfg_export+0x16>
    }
    return 0;
}
   1464e:	2000      	movs	r0, #0
   14650:	b00b      	add	sp, #44	; 0x2c
   14652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14656:	bf00      	nop
   14658:	2000080c 	.word	0x2000080c
   1465c:	2000076c 	.word	0x2000076c
   14660:	2000085c 	.word	0x2000085c
   14664:	00022f02 	.word	0x00022f02

00014668 <uwbcfg_set>:
    if (argc == 1) {
   14668:	2801      	cmp	r0, #1
{
   1466a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1466e:	4615      	mov	r5, r2
    if (argc == 1) {
   14670:	d115      	bne.n	1469e <uwbcfg_set+0x36>
            if (!strcmp(argv[0], g_uwbcfg_str[i]))
   14672:	680f      	ldr	r7, [r1, #0]
   14674:	4e0b      	ldr	r6, [pc, #44]	; (146a4 <uwbcfg_set+0x3c>)
        for (i=0;i<CFGSTR_MAX;i++) {
   14676:	2400      	movs	r4, #0
            if (!strcmp(argv[0], g_uwbcfg_str[i]))
   14678:	f856 1b04 	ldr.w	r1, [r6], #4
   1467c:	4638      	mov	r0, r7
   1467e:	f7fa ffe3 	bl	f648 <strcmp>
   14682:	b948      	cbnz	r0, 14698 <uwbcfg_set+0x30>
                return CONF_VALUE_SET(val, CONF_STRING, g_uwb_config[i]);
   14684:	4a08      	ldr	r2, [pc, #32]	; (146a8 <uwbcfg_set+0x40>)
   14686:	4628      	mov	r0, r5
   14688:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   1468c:	2308      	movs	r3, #8
}
   1468e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                return CONF_VALUE_SET(val, CONF_STRING, g_uwb_config[i]);
   14692:	2106      	movs	r1, #6
   14694:	f7fd b8a0 	b.w	117d8 <conf_value_from_str>
        for (i=0;i<CFGSTR_MAX;i++) {
   14698:	3401      	adds	r4, #1
   1469a:	2c14      	cmp	r4, #20
   1469c:	d1ec      	bne.n	14678 <uwbcfg_set+0x10>
}
   1469e:	200a      	movs	r0, #10
   146a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   146a4:	2000080c 	.word	0x2000080c
   146a8:	2000076c 	.word	0x2000076c

000146ac <uwbcfg_get>:
    if (argc == 1) {
   146ac:	2801      	cmp	r0, #1
{
   146ae:	b570      	push	{r4, r5, r6, lr}
    if (argc == 1) {
   146b0:	d10f      	bne.n	146d2 <uwbcfg_get+0x26>
            if (!strcmp(argv[0], g_uwbcfg_str[i])) return g_uwb_config[i];
   146b2:	680e      	ldr	r6, [r1, #0]
   146b4:	4d08      	ldr	r5, [pc, #32]	; (146d8 <uwbcfg_get+0x2c>)
        for (i=0;i<CFGSTR_MAX;i++) {
   146b6:	2400      	movs	r4, #0
            if (!strcmp(argv[0], g_uwbcfg_str[i])) return g_uwb_config[i];
   146b8:	f855 1b04 	ldr.w	r1, [r5], #4
   146bc:	4630      	mov	r0, r6
   146be:	f7fa ffc3 	bl	f648 <strcmp>
   146c2:	b918      	cbnz	r0, 146cc <uwbcfg_get+0x20>
   146c4:	4805      	ldr	r0, [pc, #20]	; (146dc <uwbcfg_get+0x30>)
   146c6:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
}
   146ca:	bd70      	pop	{r4, r5, r6, pc}
        for (i=0;i<CFGSTR_MAX;i++) {
   146cc:	3401      	adds	r4, #1
   146ce:	2c14      	cmp	r4, #20
   146d0:	d1f2      	bne.n	146b8 <uwbcfg_get+0xc>
    return NULL;
   146d2:	2000      	movs	r0, #0
   146d4:	e7f9      	b.n	146ca <uwbcfg_get+0x1e>
   146d6:	bf00      	nop
   146d8:	2000080c 	.word	0x2000080c
   146dc:	2000076c 	.word	0x2000076c

000146e0 <uwbcfg_commit_to_inst>:
{
   146e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   146e2:	460d      	mov	r5, r1
    conf_value_from_str(cfg[CFGSTR_CH], CONF_INT8, (void*)&(inst->config.channel), 0);
   146e4:	f200 520c 	addw	r2, r0, #1292	; 0x50c
   146e8:	2102      	movs	r1, #2
{
   146ea:	4604      	mov	r4, r0
    conf_value_from_str(cfg[CFGSTR_CH], CONF_INT8, (void*)&(inst->config.channel), 0);
   146ec:	2300      	movs	r3, #0
   146ee:	4628      	mov	r0, r5
    if (!strcmp(cfg[CFGSTR_DATARATE], "6m8")) {
   146f0:	f105 0610 	add.w	r6, r5, #16
    conf_value_from_str(cfg[CFGSTR_CH], CONF_INT8, (void*)&(inst->config.channel), 0);
   146f4:	f7fd f870 	bl	117d8 <conf_value_from_str>
    if (!strcmp(cfg[CFGSTR_DATARATE], "6m8")) {
   146f8:	497f      	ldr	r1, [pc, #508]	; (148f8 <uwbcfg_commit_to_inst+0x218>)
   146fa:	4630      	mov	r0, r6
   146fc:	f7fa ffa4 	bl	f648 <strcmp>
   14700:	2800      	cmp	r0, #0
   14702:	f040 80c7 	bne.w	14894 <uwbcfg_commit_to_inst+0x1b4>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(0.12821f);
   14706:	4a7d      	ldr	r2, [pc, #500]	; (148fc <uwbcfg_commit_to_inst+0x21c>)
   14708:	f204 533c 	addw	r3, r4, #1340	; 0x53c
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(1.02564f);
   1470c:	601a      	str	r2, [r3, #0]
        sfd_len = 8;
   1470e:	2708      	movs	r7, #8
    conf_value_from_str(cfg[CFGSTR_RX_PACLEN], CONF_INT8, (void*)&paclen, 0);
   14710:	2300      	movs	r3, #0
   14712:	f10d 0203 	add.w	r2, sp, #3
   14716:	2102      	movs	r1, #2
   14718:	f105 0018 	add.w	r0, r5, #24
   1471c:	f7fd f85c 	bl	117d8 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_SFDTYPE], CONF_INT8,
   14720:	2300      	movs	r3, #0
   14722:	f204 5212 	addw	r2, r4, #1298	; 0x512
   14726:	2102      	movs	r1, #2
   14728:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1472c:	f7fd f854 	bl	117d8 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_SFD_TO], CONF_INT16, (void*)&sfd_timeout, 0);
   14730:	2300      	movs	r3, #0
   14732:	f10d 0206 	add.w	r2, sp, #6
   14736:	2103      	movs	r1, #3
   14738:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1473c:	f7fd f84c 	bl	117d8 <conf_value_from_str>
    inst->config.rx.phrMode = (cfg[CFGSTR_RX_PHRMODE][0] == 's')? DWT_PHRMODE_STD : DWT_PHRMODE_EXT;
   14740:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    if (inst->rxdiag) {
   14744:	f8d4 24f8 	ldr.w	r2, [r4, #1272]	; 0x4f8
    inst->config.rx.phrMode = (cfg[CFGSTR_RX_PHRMODE][0] == 's')? DWT_PHRMODE_STD : DWT_PHRMODE_EXT;
   14748:	2b73      	cmp	r3, #115	; 0x73
   1474a:	bf0c      	ite	eq
   1474c:	2300      	moveq	r3, #0
   1474e:	2303      	movne	r3, #3
   14750:	f884 3513 	strb.w	r3, [r4, #1299]	; 0x513
    if (inst->rxdiag) {
   14754:	b192      	cbz	r2, 1477c <uwbcfg_commit_to_inst+0x9c>
        conf_value_from_str(cfg[CFGSTR_RX_DIAG_EN], CONF_INT16,
   14756:	2300      	movs	r3, #0
   14758:	3202      	adds	r2, #2
   1475a:	2103      	movs	r1, #3
   1475c:	f105 0040 	add.w	r0, r5, #64	; 0x40
   14760:	f7fd f83a 	bl	117d8 <conf_value_from_str>
        inst->config.rxdiag_enable = (inst->rxdiag->enabled != 0);
   14764:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
   14768:	f894 252c 	ldrb.w	r2, [r4, #1324]	; 0x52c
   1476c:	885b      	ldrh	r3, [r3, #2]
   1476e:	3b00      	subs	r3, #0
   14770:	bf18      	it	ne
   14772:	2301      	movne	r3, #1
   14774:	f363 1286 	bfi	r2, r3, #6, #1
   14778:	f884 252c 	strb.w	r2, [r4, #1324]	; 0x52c
    conf_value_from_str(cfg[CFGSTR_RX_PREAM_CIDX], CONF_INT8,
   1477c:	2300      	movs	r3, #0
   1477e:	f204 5211 	addw	r2, r4, #1297	; 0x511
   14782:	2102      	movs	r1, #2
   14784:	f105 0020 	add.w	r0, r5, #32
   14788:	f7fd f826 	bl	117d8 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TX_PREAM_CIDX], CONF_INT8,
   1478c:	2300      	movs	r3, #0
   1478e:	f504 62a4 	add.w	r2, r4, #1312	; 0x520
   14792:	2102      	movs	r1, #2
   14794:	f105 0048 	add.w	r0, r5, #72	; 0x48
   14798:	f7fd f81e 	bl	117d8 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_ANTDLY], CONF_INT16, (void*)&inst->rx_antenna_delay, 0);
   1479c:	2300      	movs	r3, #0
   1479e:	f204 42cc 	addw	r2, r4, #1228	; 0x4cc
   147a2:	2103      	movs	r1, #3
   147a4:	f105 0068 	add.w	r0, r5, #104	; 0x68
   147a8:	f7fd f816 	bl	117d8 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TX_ANTDLY], CONF_INT16, (void*)&inst->tx_antenna_delay, 0);
   147ac:	2300      	movs	r3, #0
   147ae:	f204 42ce 	addw	r2, r4, #1230	; 0x4ce
   147b2:	2103      	movs	r1, #3
   147b4:	f105 0070 	add.w	r0, r5, #112	; 0x70
   147b8:	f7fd f80e 	bl	117d8 <conf_value_from_str>
    inst->rx_ant_separation = DPL_FLOAT32_FROM_F64(strtod_soft(cfg[CFGSTR_RX_ANTSEP], 0));
   147bc:	2100      	movs	r1, #0
   147be:	f105 0078 	add.w	r0, r5, #120	; 0x78
   147c2:	f000 fa63 	bl	14c8c <strtod_soft>
   147c6:	ec51 0b10 	vmov	r0, r1, d0
   147ca:	f00b fe71 	bl	204b0 <__aeabi_d2f>
   147ce:	f504 669a 	add.w	r6, r4, #1232	; 0x4d0
    conf_value_from_str(cfg[CFGSTR_EXT_CLKDLY], CONF_INT32, (void*)&inst->ext_clock_delay, 0);
   147d2:	2300      	movs	r3, #0
    inst->rx_ant_separation = DPL_FLOAT32_FROM_F64(strtod_soft(cfg[CFGSTR_RX_ANTSEP], 0));
   147d4:	6030      	str	r0, [r6, #0]
    conf_value_from_str(cfg[CFGSTR_EXT_CLKDLY], CONF_INT32, (void*)&inst->ext_clock_delay, 0);
   147d6:	f204 42d4 	addw	r2, r4, #1236	; 0x4d4
   147da:	2104      	movs	r1, #4
   147dc:	f105 0080 	add.w	r0, r5, #128	; 0x80
   147e0:	f7fc fffa 	bl	117d8 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_ROLE], CONF_INT16, (void*)&inst->role, 0);
   147e4:	2300      	movs	r3, #0
   147e6:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
   147ea:	2103      	movs	r1, #3
   147ec:	f105 0088 	add.w	r0, r5, #136	; 0x88
   147f0:	f7fc fff2 	bl	117d8 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_FRAME_FILTER], CONF_INT16,
   147f4:	2300      	movs	r3, #0
   147f6:	f204 521c 	addw	r2, r4, #1308	; 0x51c
   147fa:	2103      	movs	r1, #3
   147fc:	f105 0090 	add.w	r0, r5, #144	; 0x90
   14800:	f7fc ffea 	bl	117d8 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_XTAL_TRIM], CONF_INT8,
   14804:	2300      	movs	r3, #0
   14806:	f204 521e 	addw	r2, r4, #1310	; 0x51e
   1480a:	2102      	movs	r1, #2
   1480c:	f105 0098 	add.w	r0, r5, #152	; 0x98
   14810:	f7fc ffe2 	bl	117d8 <conf_value_from_str>
    sfd_timeout = inst->config.rx.sfdTimeout;
   14814:	f8b4 3516 	ldrh.w	r3, [r4, #1302]	; 0x516
   14818:	f8ad 3006 	strh.w	r3, [sp, #6]
    conf_value_from_str(cfg[CFGSTR_TX_PREAM_LEN], CONF_INT16,
   1481c:	aa01      	add	r2, sp, #4
   1481e:	2300      	movs	r3, #0
   14820:	2103      	movs	r1, #3
   14822:	f105 0050 	add.w	r0, r5, #80	; 0x50
    txP = inst->config.tx.preambleLength;
   14826:	f894 6521 	ldrb.w	r6, [r4, #1313]	; 0x521
    conf_value_from_str(cfg[CFGSTR_TX_PREAM_LEN], CONF_INT16,
   1482a:	f7fc ffd5 	bl	117d8 <conf_value_from_str>
    switch (preamble_len)
   1482e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   14832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   14836:	d04e      	beq.n	148d6 <uwbcfg_commit_to_inst+0x1f6>
   14838:	d842      	bhi.n	148c0 <uwbcfg_commit_to_inst+0x1e0>
   1483a:	2b80      	cmp	r3, #128	; 0x80
   1483c:	d04d      	beq.n	148da <uwbcfg_commit_to_inst+0x1fa>
   1483e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   14842:	d04c      	beq.n	148de <uwbcfg_commit_to_inst+0x1fe>
   14844:	2b40      	cmp	r3, #64	; 0x40
   14846:	d04c      	beq.n	148e2 <uwbcfg_commit_to_inst+0x202>
        UC_WARN("inv preamb_len\n");
   14848:	4b2d      	ldr	r3, [pc, #180]	; (14900 <uwbcfg_commit_to_inst+0x220>)
   1484a:	482e      	ldr	r0, [pc, #184]	; (14904 <uwbcfg_commit_to_inst+0x224>)
   1484c:	2202      	movs	r2, #2
   1484e:	215c      	movs	r1, #92	; 0x5c
   14850:	f7fe f938 	bl	12ac4 <log_printf>
    if (sfd_timeout < 1) {
   14854:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        sfd_timeout = (preamble_len + 1 + sfd_len - paclen);
   14858:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    if (sfd_timeout < 1) {
   1485c:	b933      	cbnz	r3, 1486c <uwbcfg_commit_to_inst+0x18c>
        sfd_timeout = (preamble_len + 1 + sfd_len - paclen);
   1485e:	f89d 1003 	ldrb.w	r1, [sp, #3]
   14862:	1c53      	adds	r3, r2, #1
   14864:	1a5b      	subs	r3, r3, r1
   14866:	443b      	add	r3, r7
   14868:	f8ad 3006 	strh.w	r3, [sp, #6]
    inst->config.rx.sfdTimeout = sfd_timeout;
   1486c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   14870:	f8a4 3516 	strh.w	r3, [r4, #1302]	; 0x516
    inst->config.tx.preambleLength = txP;
   14874:	f884 6521 	strb.w	r6, [r4, #1313]	; 0x521
    inst->attrib.nsfd = sfd_len;
   14878:	f884 7540 	strb.w	r7, [r4, #1344]	; 0x540
    inst->attrib.nsync = preamble_len;
   1487c:	f8a4 2542 	strh.w	r2, [r4, #1346]	; 0x542
    uwbcfg_commit_to_inst_dw1000(inst, cfg);
   14880:	4620      	mov	r0, r4
   14882:	4629      	mov	r1, r5
   14884:	f000 f8f6 	bl	14a74 <uwbcfg_commit_to_inst_dw1000>
    SLIST_FOREACH(cb, &uwbcfg_callbacks, uc_list) {
   14888:	4b1f      	ldr	r3, [pc, #124]	; (14908 <uwbcfg_commit_to_inst+0x228>)
   1488a:	681c      	ldr	r4, [r3, #0]
   1488c:	bb7c      	cbnz	r4, 148ee <uwbcfg_commit_to_inst+0x20e>
}
   1488e:	4620      	mov	r0, r4
   14890:	b003      	add	sp, #12
   14892:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "850k")) {
   14894:	491d      	ldr	r1, [pc, #116]	; (1490c <uwbcfg_commit_to_inst+0x22c>)
   14896:	4630      	mov	r0, r6
   14898:	f7fa fed6 	bl	f648 <strcmp>
   1489c:	b918      	cbnz	r0, 148a6 <uwbcfg_commit_to_inst+0x1c6>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(1.02564f);
   1489e:	4a1c      	ldr	r2, [pc, #112]	; (14910 <uwbcfg_commit_to_inst+0x230>)
   148a0:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   148a4:	e732      	b.n	1470c <uwbcfg_commit_to_inst+0x2c>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "110k")) {
   148a6:	491b      	ldr	r1, [pc, #108]	; (14914 <uwbcfg_commit_to_inst+0x234>)
   148a8:	4630      	mov	r0, r6
   148aa:	f7fa fecd 	bl	f648 <strcmp>
   148ae:	b928      	cbnz	r0, 148bc <uwbcfg_commit_to_inst+0x1dc>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(8.20513f);
   148b0:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   148b4:	4a18      	ldr	r2, [pc, #96]	; (14918 <uwbcfg_commit_to_inst+0x238>)
   148b6:	601a      	str	r2, [r3, #0]
        sfd_len = 64;
   148b8:	2740      	movs	r7, #64	; 0x40
   148ba:	e729      	b.n	14710 <uwbcfg_commit_to_inst+0x30>
    int sfd_len=0;
   148bc:	2700      	movs	r7, #0
   148be:	e727      	b.n	14710 <uwbcfg_commit_to_inst+0x30>
    switch (preamble_len)
   148c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   148c4:	d00f      	beq.n	148e6 <uwbcfg_commit_to_inst+0x206>
   148c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   148ca:	d00e      	beq.n	148ea <uwbcfg_commit_to_inst+0x20a>
   148cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   148d0:	d1ba      	bne.n	14848 <uwbcfg_commit_to_inst+0x168>
    case (1024): txP = DWT_PLEN_1024;break;
   148d2:	2608      	movs	r6, #8
   148d4:	e7be      	b.n	14854 <uwbcfg_commit_to_inst+0x174>
    case (512):  txP = DWT_PLEN_512 ;break;
   148d6:	2634      	movs	r6, #52	; 0x34
   148d8:	e7bc      	b.n	14854 <uwbcfg_commit_to_inst+0x174>
    switch (preamble_len)
   148da:	2614      	movs	r6, #20
   148dc:	e7ba      	b.n	14854 <uwbcfg_commit_to_inst+0x174>
    case (256):  txP = DWT_PLEN_256 ;break;
   148de:	2624      	movs	r6, #36	; 0x24
   148e0:	e7b8      	b.n	14854 <uwbcfg_commit_to_inst+0x174>
    case (64):   txP = DWT_PLEN_64  ;break;
   148e2:	2604      	movs	r6, #4
   148e4:	e7b6      	b.n	14854 <uwbcfg_commit_to_inst+0x174>
    case (2048): txP = DWT_PLEN_2048;break;
   148e6:	2628      	movs	r6, #40	; 0x28
   148e8:	e7b4      	b.n	14854 <uwbcfg_commit_to_inst+0x174>
    case (4096): txP = DWT_PLEN_4096;break;
   148ea:	260c      	movs	r6, #12
   148ec:	e7b2      	b.n	14854 <uwbcfg_commit_to_inst+0x174>
        if (cb->uc_update) {
   148ee:	6863      	ldr	r3, [r4, #4]
   148f0:	b103      	cbz	r3, 148f4 <uwbcfg_commit_to_inst+0x214>
            cb->uc_update();
   148f2:	4798      	blx	r3
    SLIST_FOREACH(cb, &uwbcfg_callbacks, uc_list) {
   148f4:	6824      	ldr	r4, [r4, #0]
   148f6:	e7c9      	b.n	1488c <uwbcfg_commit_to_inst+0x1ac>
   148f8:	00022f08 	.word	0x00022f08
   148fc:	3e03497b 	.word	0x3e03497b
   14900:	00022f16 	.word	0x00022f16
   14904:	20004bac 	.word	0x20004bac
   14908:	20004bc4 	.word	0x20004bc4
   1490c:	00022f0c 	.word	0x00022f0c
   14910:	3f83482c 	.word	0x3f83482c
   14914:	00022f11 	.word	0x00022f11
   14918:	41034836 	.word	0x41034836

0001491c <uwbcfg_commit>:
{
   1491c:	b538      	push	{r3, r4, r5, lr}
        uwbcfg_commit_to_inst(udev, g_uwb_config);
   1491e:	4d07      	ldr	r5, [pc, #28]	; (1493c <uwbcfg_commit+0x20>)
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   14920:	2400      	movs	r4, #0
        udev = uwb_dev_idx_lookup(i);
   14922:	4620      	mov	r0, r4
   14924:	f7f4 f890 	bl	8a48 <uwb_dev_idx_lookup>
        if (!udev) {
   14928:	b110      	cbz	r0, 14930 <uwbcfg_commit+0x14>
        uwbcfg_commit_to_inst(udev, g_uwb_config);
   1492a:	4629      	mov	r1, r5
   1492c:	f7ff fed8 	bl	146e0 <uwbcfg_commit_to_inst>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   14930:	3401      	adds	r4, #1
   14932:	2c03      	cmp	r4, #3
   14934:	d1f5      	bne.n	14922 <uwbcfg_commit+0x6>
}
   14936:	2000      	movs	r0, #0
   14938:	bd38      	pop	{r3, r4, r5, pc}
   1493a:	bf00      	nop
   1493c:	2000076c 	.word	0x2000076c

00014940 <uwbcfg_register>:

int
uwbcfg_register(struct uwbcfg_cbs *handler)
{
    SLIST_INSERT_HEAD(&uwbcfg_callbacks, handler, uc_list);
   14940:	4b02      	ldr	r3, [pc, #8]	; (1494c <uwbcfg_register+0xc>)
   14942:	681a      	ldr	r2, [r3, #0]
   14944:	6002      	str	r2, [r0, #0]
   14946:	6018      	str	r0, [r3, #0]
    return 0;
}
   14948:	2000      	movs	r0, #0
   1494a:	4770      	bx	lr
   1494c:	20004bc4 	.word	0x20004bc4

00014950 <uwbcfg_pkg_init>:
    return uwbcfg_commit();
}

int
uwbcfg_pkg_init(void)
{
   14950:	b513      	push	{r0, r1, r4, lr}
#ifndef __KERNEL__
    int rc;
    rc = conf_register(&uwbcfg_handler);
   14952:	480d      	ldr	r0, [pc, #52]	; (14988 <uwbcfg_pkg_init+0x38>)
   14954:	f7fc fefc 	bl	11750 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   14958:	b138      	cbz	r0, 1496a <uwbcfg_pkg_init+0x1a>
   1495a:	2300      	movs	r3, #0
   1495c:	4a0b      	ldr	r2, [pc, #44]	; (1498c <uwbcfg_pkg_init+0x3c>)
   1495e:	9300      	str	r3, [sp, #0]
   14960:	6814      	ldr	r4, [r2, #0]
   14962:	4619      	mov	r1, r3
   14964:	461a      	mov	r2, r3
   14966:	4618      	mov	r0, r3
   14968:	47a0      	blx	r4
#endif

    /* Init log and Config */
    log_register("uwbcfg", &_uwbcfg_log, &log_console_handler,
   1496a:	2400      	movs	r4, #0
   1496c:	4a08      	ldr	r2, [pc, #32]	; (14990 <uwbcfg_pkg_init+0x40>)
   1496e:	4909      	ldr	r1, [pc, #36]	; (14994 <uwbcfg_pkg_init+0x44>)
   14970:	9400      	str	r4, [sp, #0]
   14972:	4623      	mov	r3, r4
   14974:	4808      	ldr	r0, [pc, #32]	; (14998 <uwbcfg_pkg_init+0x48>)
   14976:	f7fe f8c9 	bl	12b0c <log_register>
                 NULL, LOG_SYSLEVEL);

    SLIST_INIT(&uwbcfg_callbacks);
   1497a:	4b08      	ldr	r3, [pc, #32]	; (1499c <uwbcfg_pkg_init+0x4c>)
   1497c:	601c      	str	r4, [r3, #0]
#if MYNEWT_VAL(UWBCFG_CLI)
    uwbcfg_cli_register();
#endif

#if MYNEWT_VAL(UWBCFG_APPLY_AT_INIT)
    uwbcfg_commit();
   1497e:	f7ff ffcd 	bl	1491c <uwbcfg_commit>
#endif
#ifdef __KERNEL__
    uwbcfg_sysfs_init();
#endif
    return 0;
}
   14982:	4620      	mov	r0, r4
   14984:	b002      	add	sp, #8
   14986:	bd10      	pop	{r4, pc}
   14988:	2000085c 	.word	0x2000085c
   1498c:	20000768 	.word	0x20000768
   14990:	00022818 	.word	0x00022818
   14994:	20004bac 	.word	0x20004bac
   14998:	00022f26 	.word	0x00022f26
   1499c:	20004bc4 	.word	0x20004bc4

000149a0 <uwbcfg_pkg_down>:
{
#ifdef __KERNEL__
    uwbcfg_sysfs_deinit();
#endif
    return 0;
}
   149a0:	2000      	movs	r0, #0
   149a2:	4770      	bx	lr

000149a4 <check_preamble_code.isra.0>:
 *  Thus to get 15.5dB from fine, set FINE to 31 */
#define power_value(COARSE,FINE) ((COARSE<<5) + FINE)

#if MYNEWT_VAL(DW1000_DEVICE_0)
static void
check_preamble_code(struct uwb_dev * inst, uint8_t *arg_code)
   149a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
    int new_code = 0;
    int ch = inst->config.channel;
    int prf = inst->config.prf;
    uint8_t code = *arg_code;
    if (prf == DWT_PRF_16M) {
   149a6:	2901      	cmp	r1, #1
    uint8_t code = *arg_code;
   149a8:	7813      	ldrb	r3, [r2, #0]
check_preamble_code(struct uwb_dev * inst, uint8_t *arg_code)
   149aa:	4615      	mov	r5, r2
    if (prf == DWT_PRF_16M) {
   149ac:	d122      	bne.n	149f4 <check_preamble_code.isra.0+0x50>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
   149ae:	2801      	cmp	r0, #1
   149b0:	d10e      	bne.n	149d0 <check_preamble_code.isra.0+0x2c>
   149b2:	3b01      	subs	r3, #1
   149b4:	2b01      	cmp	r3, #1
   149b6:	bf94      	ite	ls
   149b8:	2400      	movls	r4, #0
   149ba:	2401      	movhi	r4, #1
            if (code < 9 || code > 12)  new_code = 9;
        } else { /* channels 4 and 7 */
            if (code < 17 || code > 20) new_code = 17;
        }
    }
    if (new_code) {
   149bc:	b314      	cbz	r4, 14a04 <check_preamble_code.isra.0+0x60>
        UC_WARN("inv pream code (using %d)\n", new_code);
   149be:	4b1c      	ldr	r3, [pc, #112]	; (14a30 <check_preamble_code.isra.0+0x8c>)
   149c0:	481c      	ldr	r0, [pc, #112]	; (14a34 <check_preamble_code.isra.0+0x90>)
   149c2:	9400      	str	r4, [sp, #0]
   149c4:	2202      	movs	r2, #2
   149c6:	215c      	movs	r1, #92	; 0x5c
   149c8:	f7fe f87c 	bl	12ac4 <log_printf>
        *arg_code = new_code;
   149cc:	702c      	strb	r4, [r5, #0]
    }
}
   149ce:	e019      	b.n	14a04 <check_preamble_code.isra.0+0x60>
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
   149d0:	2802      	cmp	r0, #2
   149d2:	d001      	beq.n	149d8 <check_preamble_code.isra.0+0x34>
   149d4:	2805      	cmp	r0, #5
   149d6:	d10b      	bne.n	149f0 <check_preamble_code.isra.0+0x4c>
   149d8:	2b03      	cmp	r3, #3
   149da:	d01c      	beq.n	14a16 <check_preamble_code.isra.0+0x72>
   149dc:	2b04      	cmp	r3, #4
   149de:	d01a      	beq.n	14a16 <check_preamble_code.isra.0+0x72>
   149e0:	2403      	movs	r4, #3
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
   149e2:	2803      	cmp	r0, #3
   149e4:	d11a      	bne.n	14a1c <check_preamble_code.isra.0+0x78>
   149e6:	3b05      	subs	r3, #5
   149e8:	2b01      	cmp	r3, #1
   149ea:	d9e7      	bls.n	149bc <check_preamble_code.isra.0+0x18>
   149ec:	2405      	movs	r4, #5
   149ee:	e7e6      	b.n	149be <check_preamble_code.isra.0+0x1a>
   149f0:	2400      	movs	r4, #0
   149f2:	e7f6      	b.n	149e2 <check_preamble_code.isra.0+0x3e>
        if (ch == 1 || ch==2 || ch==3 || ch==5) {
   149f4:	1e42      	subs	r2, r0, #1
   149f6:	2a02      	cmp	r2, #2
   149f8:	d901      	bls.n	149fe <check_preamble_code.isra.0+0x5a>
   149fa:	2805      	cmp	r0, #5
   149fc:	d104      	bne.n	14a08 <check_preamble_code.isra.0+0x64>
            if (code < 9 || code > 12)  new_code = 9;
   149fe:	3b09      	subs	r3, #9
   14a00:	2b03      	cmp	r3, #3
   14a02:	d806      	bhi.n	14a12 <check_preamble_code.isra.0+0x6e>
}
   14a04:	b003      	add	sp, #12
   14a06:	bd30      	pop	{r4, r5, pc}
            if (code < 17 || code > 20) new_code = 17;
   14a08:	3b11      	subs	r3, #17
   14a0a:	2b03      	cmp	r3, #3
   14a0c:	d9fa      	bls.n	14a04 <check_preamble_code.isra.0+0x60>
   14a0e:	2411      	movs	r4, #17
   14a10:	e7d5      	b.n	149be <check_preamble_code.isra.0+0x1a>
            if (code < 9 || code > 12)  new_code = 9;
   14a12:	2409      	movs	r4, #9
   14a14:	e7d3      	b.n	149be <check_preamble_code.isra.0+0x1a>
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
   14a16:	2803      	cmp	r0, #3
   14a18:	d0e8      	beq.n	149ec <check_preamble_code.isra.0+0x48>
   14a1a:	2400      	movs	r4, #0
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
   14a1c:	2804      	cmp	r0, #4
   14a1e:	d001      	beq.n	14a24 <check_preamble_code.isra.0+0x80>
   14a20:	2807      	cmp	r0, #7
   14a22:	d1cb      	bne.n	149bc <check_preamble_code.isra.0+0x18>
   14a24:	3b07      	subs	r3, #7
   14a26:	2b01      	cmp	r3, #1
   14a28:	d9c8      	bls.n	149bc <check_preamble_code.isra.0+0x18>
   14a2a:	2407      	movs	r4, #7
   14a2c:	e7c7      	b.n	149be <check_preamble_code.isra.0+0x1a>
   14a2e:	bf00      	nop
   14a30:	00023006 	.word	0x00023006
   14a34:	20004bac 	.word	0x20004bac

00014a38 <remap_framefilter>:

uint16_t
remap_framefilter(uint16_t cfg_ff)
{
   14a38:	4602      	mov	r2, r0
    uint16_t r=0;
    if (cfg_ff & UWB_FF_BEACON_EN) r|= DWT_FF_BEACON_EN;
   14a3a:	f010 0001 	ands.w	r0, r0, #1
   14a3e:	bf18      	it	ne
   14a40:	2004      	movne	r0, #4
    if (cfg_ff & UWB_FF_DATA_EN)   r|= DWT_FF_DATA_EN;
   14a42:	0793      	lsls	r3, r2, #30
   14a44:	bf48      	it	mi
   14a46:	f040 0008 	orrmi.w	r0, r0, #8
    if (cfg_ff & UWB_FF_ACK_EN)    r|= DWT_FF_ACK_EN;
   14a4a:	0751      	lsls	r1, r2, #29
   14a4c:	bf44      	itt	mi
   14a4e:	f040 0310 	orrmi.w	r3, r0, #16
   14a52:	b298      	uxthmi	r0, r3
    if (cfg_ff & UWB_FF_MAC_EN)    r|= DWT_FF_MAC_EN;
   14a54:	0713      	lsls	r3, r2, #28
   14a56:	bf44      	itt	mi
   14a58:	f040 0320 	orrmi.w	r3, r0, #32
   14a5c:	b298      	uxthmi	r0, r3
    if (cfg_ff & UWB_FF_RSVD_EN)   r|= DWT_FF_RSVD_EN;
   14a5e:	06d1      	lsls	r1, r2, #27
   14a60:	bf44      	itt	mi
   14a62:	f040 0340 	orrmi.w	r3, r0, #64	; 0x40
   14a66:	b298      	uxthmi	r0, r3
    if (cfg_ff & UWB_FF_COORD_EN)  r|= DWT_FF_COORD_EN;
   14a68:	05d3      	lsls	r3, r2, #23
   14a6a:	bf44      	itt	mi
   14a6c:	f040 0002 	orrmi.w	r0, r0, #2
   14a70:	b280      	uxthmi	r0, r0
    return r;
}
   14a72:	4770      	bx	lr

00014a74 <uwbcfg_commit_to_inst_dw1000>:
#endif

int
uwbcfg_commit_to_inst_dw1000(struct uwb_dev * inst, char cfg[CFGSTR_MAX][CFGSTR_STRLEN])
{
   14a74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if MYNEWT_VAL(DW1000_DEVICE_0)
    uint8_t prf, coarse, fine, txpwr, paclen;

    /* Only proceed if this device is a dw1000 */
    if(inst->device_id != DWT_DEVICE_ID) {
   14a76:	f8d0 24c8 	ldr.w	r2, [r0, #1224]	; 0x4c8
   14a7a:	4b79      	ldr	r3, [pc, #484]	; (14c60 <uwbcfg_commit_to_inst_dw1000+0x1ec>)
   14a7c:	429a      	cmp	r2, r3
{
   14a7e:	4604      	mov	r4, r0
   14a80:	460d      	mov	r5, r1
    if(inst->device_id != DWT_DEVICE_ID) {
   14a82:	f040 80c6 	bne.w	14c12 <uwbcfg_commit_to_inst_dw1000+0x19e>
        return 0;
    }

    /* Set the PRF */
    conf_value_from_str(cfg[CFGSTR_PRF], CONF_INT8, (void*)&prf, 0);
   14a86:	2300      	movs	r3, #0
   14a88:	aa03      	add	r2, sp, #12
   14a8a:	2102      	movs	r1, #2
   14a8c:	f105 0008 	add.w	r0, r5, #8
   14a90:	f7fc fea2 	bl	117d8 <conf_value_from_str>
    if (prf == 16) {
   14a94:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14a98:	2b10      	cmp	r3, #16
   14a9a:	d11d      	bne.n	14ad8 <uwbcfg_commit_to_inst_dw1000+0x64>
        inst->config.prf = DWT_PRF_16M;
   14a9c:	2301      	movs	r3, #1
    } else if (prf == 64) {
        inst->config.prf = DWT_PRF_64M;
   14a9e:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    } else {
        UC_WARN("inv prf %d\n", prf);
    }

    /* Check that the rx and tx preamble codes are legal for the ch+prf combo */
    check_preamble_code(inst, &inst->config.rx.preambleCodeIndex);
   14aa2:	f894 150e 	ldrb.w	r1, [r4, #1294]	; 0x50e
   14aa6:	f894 050c 	ldrb.w	r0, [r4, #1292]	; 0x50c
   14aaa:	f204 5211 	addw	r2, r4, #1297	; 0x511
   14aae:	f7ff ff79 	bl	149a4 <check_preamble_code.isra.0>
    check_preamble_code(inst, &inst->config.tx.preambleCodeIndex);
   14ab2:	f894 150e 	ldrb.w	r1, [r4, #1294]	; 0x50e
   14ab6:	f894 050c 	ldrb.w	r0, [r4, #1292]	; 0x50c
   14aba:	f504 62a4 	add.w	r2, r4, #1312	; 0x520
   14abe:	f7ff ff71 	bl	149a4 <check_preamble_code.isra.0>

    switch (inst->config.channel) {
   14ac2:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
   14ac6:	3b01      	subs	r3, #1
   14ac8:	2b06      	cmp	r3, #6
   14aca:	d840      	bhi.n	14b4e <uwbcfg_commit_to_inst_dw1000+0xda>
   14acc:	e8df f003 	tbb	[pc, r3]
   14ad0:	39373510 	.word	0x39373510
   14ad4:	3f3d      	.short	0x3f3d
   14ad6:	3b          	.byte	0x3b
   14ad7:	00          	.byte	0x00
    } else if (prf == 64) {
   14ad8:	2b40      	cmp	r3, #64	; 0x40
   14ada:	d101      	bne.n	14ae0 <uwbcfg_commit_to_inst_dw1000+0x6c>
        inst->config.prf = DWT_PRF_64M;
   14adc:	2302      	movs	r3, #2
   14ade:	e7de      	b.n	14a9e <uwbcfg_commit_to_inst_dw1000+0x2a>
        UC_WARN("inv prf %d\n", prf);
   14ae0:	9300      	str	r3, [sp, #0]
   14ae2:	4860      	ldr	r0, [pc, #384]	; (14c64 <uwbcfg_commit_to_inst_dw1000+0x1f0>)
   14ae4:	4b60      	ldr	r3, [pc, #384]	; (14c68 <uwbcfg_commit_to_inst_dw1000+0x1f4>)
   14ae6:	2202      	movs	r2, #2
   14ae8:	215c      	movs	r1, #92	; 0x5c
   14aea:	f7fd ffeb 	bl	12ac4 <log_printf>
   14aee:	e7d8      	b.n	14aa2 <uwbcfg_commit_to_inst_dw1000+0x2e>
    case (1): inst->config.txrf.PGdly = TC_PGDELAY_CH1;break;
   14af0:	23c9      	movs	r3, #201	; 0xc9
    case (2): inst->config.txrf.PGdly = TC_PGDELAY_CH2;break;
   14af2:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
        UC_WARN("inv ch\n");
        break;
    }

    /* Data rate */
    if (!strcmp(cfg[CFGSTR_DATARATE], "6m8")) {
   14af6:	f105 0610 	add.w	r6, r5, #16
   14afa:	495c      	ldr	r1, [pc, #368]	; (14c6c <uwbcfg_commit_to_inst_dw1000+0x1f8>)
   14afc:	4630      	mov	r0, r6
   14afe:	f7fa fda3 	bl	f648 <strcmp>
   14b02:	bb58      	cbnz	r0, 14b5c <uwbcfg_commit_to_inst_dw1000+0xe8>
        inst->config.dataRate = DWT_BR_6M8;
   14b04:	2302      	movs	r3, #2
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "850k")) {
        inst->config.dataRate = DWT_BR_850K;
   14b06:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
    } else {
        UC_WARN("inv datarate\n");
    }

    /* PAC length */
    conf_value_from_str(cfg[CFGSTR_RX_PACLEN], CONF_INT8, (void*)&paclen, 0);
   14b0a:	2300      	movs	r3, #0
   14b0c:	f10d 020f 	add.w	r2, sp, #15
   14b10:	2102      	movs	r1, #2
   14b12:	f105 0018 	add.w	r0, r5, #24
   14b16:	f7fc fe5f 	bl	117d8 <conf_value_from_str>
    switch (paclen) {
   14b1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14b1e:	2b20      	cmp	r3, #32
   14b20:	d065      	beq.n	14bee <uwbcfg_commit_to_inst_dw1000+0x17a>
   14b22:	d831      	bhi.n	14b88 <uwbcfg_commit_to_inst_dw1000+0x114>
   14b24:	2b08      	cmp	r3, #8
   14b26:	d033      	beq.n	14b90 <uwbcfg_commit_to_inst_dw1000+0x11c>
   14b28:	2b10      	cmp	r3, #16
   14b2a:	d05e      	beq.n	14bea <uwbcfg_commit_to_inst_dw1000+0x176>
    case (8):  inst->config.rx.pacLength = DWT_PAC8;break;
    case (16): inst->config.rx.pacLength = DWT_PAC16;break;
    case (32): inst->config.rx.pacLength = DWT_PAC32;break;
    case (64): inst->config.rx.pacLength = DWT_PAC64;break;
    default:
        UC_WARN("inv paclen\n");
   14b2c:	4b50      	ldr	r3, [pc, #320]	; (14c70 <uwbcfg_commit_to_inst_dw1000+0x1fc>)
   14b2e:	484d      	ldr	r0, [pc, #308]	; (14c64 <uwbcfg_commit_to_inst_dw1000+0x1f0>)
   14b30:	2202      	movs	r2, #2
   14b32:	215c      	movs	r1, #92	; 0x5c
   14b34:	f7fd ffc6 	bl	12ac4 <log_printf>
   14b38:	e02d      	b.n	14b96 <uwbcfg_commit_to_inst_dw1000+0x122>
    case (2): inst->config.txrf.PGdly = TC_PGDELAY_CH2;break;
   14b3a:	23c2      	movs	r3, #194	; 0xc2
   14b3c:	e7d9      	b.n	14af2 <uwbcfg_commit_to_inst_dw1000+0x7e>
    case (3): inst->config.txrf.PGdly = TC_PGDELAY_CH3;break;
   14b3e:	23c5      	movs	r3, #197	; 0xc5
   14b40:	e7d7      	b.n	14af2 <uwbcfg_commit_to_inst_dw1000+0x7e>
    case (4): inst->config.txrf.PGdly = TC_PGDELAY_CH4;break;
   14b42:	2395      	movs	r3, #149	; 0x95
   14b44:	e7d5      	b.n	14af2 <uwbcfg_commit_to_inst_dw1000+0x7e>
    case (7): inst->config.txrf.PGdly = TC_PGDELAY_CH7;break;
   14b46:	2393      	movs	r3, #147	; 0x93
   14b48:	e7d3      	b.n	14af2 <uwbcfg_commit_to_inst_dw1000+0x7e>
    case (5): inst->config.txrf.PGdly = TC_PGDELAY_CH5;break;
   14b4a:	23c0      	movs	r3, #192	; 0xc0
   14b4c:	e7d1      	b.n	14af2 <uwbcfg_commit_to_inst_dw1000+0x7e>
        UC_WARN("inv ch\n");
   14b4e:	4b49      	ldr	r3, [pc, #292]	; (14c74 <uwbcfg_commit_to_inst_dw1000+0x200>)
   14b50:	4844      	ldr	r0, [pc, #272]	; (14c64 <uwbcfg_commit_to_inst_dw1000+0x1f0>)
   14b52:	2202      	movs	r2, #2
   14b54:	215c      	movs	r1, #92	; 0x5c
   14b56:	f7fd ffb5 	bl	12ac4 <log_printf>
        break;
   14b5a:	e7cc      	b.n	14af6 <uwbcfg_commit_to_inst_dw1000+0x82>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "850k")) {
   14b5c:	4946      	ldr	r1, [pc, #280]	; (14c78 <uwbcfg_commit_to_inst_dw1000+0x204>)
   14b5e:	4630      	mov	r0, r6
   14b60:	f7fa fd72 	bl	f648 <strcmp>
   14b64:	b908      	cbnz	r0, 14b6a <uwbcfg_commit_to_inst_dw1000+0xf6>
        inst->config.dataRate = DWT_BR_850K;
   14b66:	2301      	movs	r3, #1
   14b68:	e7cd      	b.n	14b06 <uwbcfg_commit_to_inst_dw1000+0x92>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "110k")) {
   14b6a:	4944      	ldr	r1, [pc, #272]	; (14c7c <uwbcfg_commit_to_inst_dw1000+0x208>)
   14b6c:	4630      	mov	r0, r6
   14b6e:	f7fa fd6b 	bl	f648 <strcmp>
   14b72:	b910      	cbnz	r0, 14b7a <uwbcfg_commit_to_inst_dw1000+0x106>
        inst->config.dataRate = DWT_BR_110K;
   14b74:	f884 050d 	strb.w	r0, [r4, #1293]	; 0x50d
   14b78:	e7c7      	b.n	14b0a <uwbcfg_commit_to_inst_dw1000+0x96>
        UC_WARN("inv datarate\n");
   14b7a:	4b41      	ldr	r3, [pc, #260]	; (14c80 <uwbcfg_commit_to_inst_dw1000+0x20c>)
   14b7c:	4839      	ldr	r0, [pc, #228]	; (14c64 <uwbcfg_commit_to_inst_dw1000+0x1f0>)
   14b7e:	2202      	movs	r2, #2
   14b80:	215c      	movs	r1, #92	; 0x5c
   14b82:	f7fd ff9f 	bl	12ac4 <log_printf>
   14b86:	e7c0      	b.n	14b0a <uwbcfg_commit_to_inst_dw1000+0x96>
    switch (paclen) {
   14b88:	2b40      	cmp	r3, #64	; 0x40
   14b8a:	d1cf      	bne.n	14b2c <uwbcfg_commit_to_inst_dw1000+0xb8>
    case (64): inst->config.rx.pacLength = DWT_PAC64;break;
   14b8c:	2303      	movs	r3, #3
   14b8e:	e000      	b.n	14b92 <uwbcfg_commit_to_inst_dw1000+0x11e>
    case (8):  inst->config.rx.pacLength = DWT_PAC8;break;
   14b90:	2300      	movs	r3, #0
    case (16): inst->config.rx.pacLength = DWT_PAC16;break;
   14b92:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
    }

    /* SFDType, only 0 or 1 allowed on dw1000 */
    if (inst->config.rx.sfdType>1) {
   14b96:	f894 3512 	ldrb.w	r3, [r4, #1298]	; 0x512
   14b9a:	2b01      	cmp	r3, #1
   14b9c:	d905      	bls.n	14baa <uwbcfg_commit_to_inst_dw1000+0x136>
        UC_WARN("inv sfdType\n");
   14b9e:	4b39      	ldr	r3, [pc, #228]	; (14c84 <uwbcfg_commit_to_inst_dw1000+0x210>)
   14ba0:	4830      	ldr	r0, [pc, #192]	; (14c64 <uwbcfg_commit_to_inst_dw1000+0x1f0>)
   14ba2:	2202      	movs	r2, #2
   14ba4:	215c      	movs	r1, #92	; 0x5c
   14ba6:	f7fd ff8d 	bl	12ac4 <log_printf>
    }

    /* Tx Power */
    conf_value_from_str(cfg[CFGSTR_TXRF_PWR_COARSE], CONF_INT8, (void*)&coarse, 0);
   14baa:	2300      	movs	r3, #0
   14bac:	f10d 020d 	add.w	r2, sp, #13
   14bb0:	2102      	movs	r1, #2
   14bb2:	f105 0058 	add.w	r0, r5, #88	; 0x58
   14bb6:	f7fc fe0f 	bl	117d8 <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TXRF_PWR_FINE], CONF_INT8, (void*)&fine, 0);
   14bba:	2300      	movs	r3, #0
   14bbc:	f10d 020e 	add.w	r2, sp, #14
   14bc0:	2102      	movs	r1, #2
   14bc2:	f105 0060 	add.w	r0, r5, #96	; 0x60
   14bc6:	f7fc fe07 	bl	117d8 <conf_value_from_str>

    txpwr = inst->config.txrf.BOOSTNORM;
    switch (coarse) {
   14bca:	f89d 300d 	ldrb.w	r3, [sp, #13]
   14bce:	2b12      	cmp	r3, #18
   14bd0:	d83c      	bhi.n	14c4c <uwbcfg_commit_to_inst_dw1000+0x1d8>
   14bd2:	e8df f003 	tbb	[pc, r3]
   14bd6:	3b37      	.short	0x3b37
   14bd8:	3b3b333b 	.word	0x3b3b333b
   14bdc:	2a3b3b2e 	.word	0x2a3b3b2e
   14be0:	3b263b3b 	.word	0x3b263b3b
   14be4:	3b3b213b 	.word	0x3b3b213b
   14be8:	0e          	.byte	0x0e
   14be9:	00          	.byte	0x00
    case (16): inst->config.rx.pacLength = DWT_PAC16;break;
   14bea:	2301      	movs	r3, #1
   14bec:	e7d1      	b.n	14b92 <uwbcfg_commit_to_inst_dw1000+0x11e>
    case (32): inst->config.rx.pacLength = DWT_PAC32;break;
   14bee:	2302      	movs	r3, #2
   14bf0:	e7cf      	b.n	14b92 <uwbcfg_commit_to_inst_dw1000+0x11e>
    case(18): txpwr = power_value(DW1000_txrf_config_18db, fine);break;
   14bf2:	f89d 500e 	ldrb.w	r5, [sp, #14]
    inst->config.txrf.BOOSTP250 = txpwr;
    inst->config.txrf.BOOSTP125 = txpwr;

    /* Remap the uwb_mac style framefilter to something that
     * dw1000 understands */
    inst->config.rx.frameFilter = remap_framefilter(
   14bf6:	f8b4 051c 	ldrh.w	r0, [r4, #1308]	; 0x51c
    inst->config.txrf.BOOSTNORM = txpwr;
   14bfa:	f884 5528 	strb.w	r5, [r4, #1320]	; 0x528
    inst->config.txrf.BOOSTP500 = txpwr;
   14bfe:	f884 5529 	strb.w	r5, [r4, #1321]	; 0x529
    inst->config.txrf.BOOSTP250 = txpwr;
   14c02:	f884 552a 	strb.w	r5, [r4, #1322]	; 0x52a
    inst->config.txrf.BOOSTP125 = txpwr;
   14c06:	f884 552b 	strb.w	r5, [r4, #1323]	; 0x52b
    inst->config.rx.frameFilter = remap_framefilter(
   14c0a:	f7ff ff15 	bl	14a38 <remap_framefilter>
   14c0e:	f8a4 051c 	strh.w	r0, [r4, #1308]	; 0x51c
        inst->config.rx.frameFilter);
#endif
    return 0;
}
   14c12:	2000      	movs	r0, #0
   14c14:	b004      	add	sp, #16
   14c16:	bd70      	pop	{r4, r5, r6, pc}
    case(15): txpwr = power_value(DW1000_txrf_config_15db, fine);break;
   14c18:	f89d 500e 	ldrb.w	r5, [sp, #14]
   14c1c:	3520      	adds	r5, #32
    case(12): txpwr = power_value(DW1000_txrf_config_12db, fine);break;
   14c1e:	b2ed      	uxtb	r5, r5
   14c20:	e7e9      	b.n	14bf6 <uwbcfg_commit_to_inst_dw1000+0x182>
   14c22:	f89d 500e 	ldrb.w	r5, [sp, #14]
   14c26:	3540      	adds	r5, #64	; 0x40
   14c28:	e7f9      	b.n	14c1e <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(9):  txpwr = power_value(DW1000_txrf_config_9db, fine);break;
   14c2a:	f89d 500e 	ldrb.w	r5, [sp, #14]
   14c2e:	3560      	adds	r5, #96	; 0x60
   14c30:	e7f5      	b.n	14c1e <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(6):  txpwr = power_value(DW1000_txrf_config_6db, fine);break;
   14c32:	f89d 500e 	ldrb.w	r5, [sp, #14]
   14c36:	f085 0580 	eor.w	r5, r5, #128	; 0x80
   14c3a:	e7dc      	b.n	14bf6 <uwbcfg_commit_to_inst_dw1000+0x182>
        txpwr = power_value(DW1000_txrf_config_3db, fine);
   14c3c:	f89d 500e 	ldrb.w	r5, [sp, #14]
   14c40:	3d60      	subs	r5, #96	; 0x60
   14c42:	e7ec      	b.n	14c1e <uwbcfg_commit_to_inst_dw1000+0x1aa>
        txpwr = power_value(DW1000_txrf_config_0db, fine);
   14c44:	f89d 500e 	ldrb.w	r5, [sp, #14]
   14c48:	3d40      	subs	r5, #64	; 0x40
   14c4a:	e7e8      	b.n	14c1e <uwbcfg_commit_to_inst_dw1000+0x1aa>
        UC_WARN("inv coarse txpwr\n");
   14c4c:	4b0e      	ldr	r3, [pc, #56]	; (14c88 <uwbcfg_commit_to_inst_dw1000+0x214>)
   14c4e:	4805      	ldr	r0, [pc, #20]	; (14c64 <uwbcfg_commit_to_inst_dw1000+0x1f0>)
    txpwr = inst->config.txrf.BOOSTNORM;
   14c50:	f894 5528 	ldrb.w	r5, [r4, #1320]	; 0x528
        UC_WARN("inv coarse txpwr\n");
   14c54:	2202      	movs	r2, #2
   14c56:	215c      	movs	r1, #92	; 0x5c
   14c58:	f7fd ff34 	bl	12ac4 <log_printf>
   14c5c:	e7cb      	b.n	14bf6 <uwbcfg_commit_to_inst_dw1000+0x182>
   14c5e:	bf00      	nop
   14c60:	deca0130 	.word	0xdeca0130
   14c64:	20004bac 	.word	0x20004bac
   14c68:	00023021 	.word	0x00023021
   14c6c:	00022f08 	.word	0x00022f08
   14c70:	00023043 	.word	0x00023043
   14c74:	0002302d 	.word	0x0002302d
   14c78:	00022f0c 	.word	0x00022f0c
   14c7c:	00022f11 	.word	0x00022f11
   14c80:	00023035 	.word	0x00023035
   14c84:	0002304f 	.word	0x0002304f
   14c88:	0002305c 	.word	0x0002305c

00014c8c <strtod_soft>:
#include <inttypes.h>

#ifndef __KERNEL__

double strtod_soft( const char *nptr, char **endptr )
{
   14c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c90:	b087      	sub	sp, #28
    int i, n;
    char *period_at;
    char *dash_at;
    char *exponent_at;
    char *ep = 0;
   14c92:	2300      	movs	r3, #0
{
   14c94:	460e      	mov	r6, r1
    int64_t ival, frac, div, exp;
    double f, f_frac;

    period_at = strchr(nptr, '.');
   14c96:	212e      	movs	r1, #46	; 0x2e
{
   14c98:	4604      	mov	r4, r0
    char *ep = 0;
   14c9a:	9305      	str	r3, [sp, #20]
    period_at = strchr(nptr, '.');
   14c9c:	f009 f9f9 	bl	1e092 <strchr>
    dash_at = strchr(nptr, '-');
   14ca0:	212d      	movs	r1, #45	; 0x2d
    period_at = strchr(nptr, '.');
   14ca2:	4607      	mov	r7, r0
    dash_at = strchr(nptr, '-');
   14ca4:	4620      	mov	r0, r4
   14ca6:	f009 f9f4 	bl	1e092 <strchr>
    exponent_at = strchr(nptr, 'e');
   14caa:	2165      	movs	r1, #101	; 0x65
    dash_at = strchr(nptr, '-');
   14cac:	4683      	mov	fp, r0
    exponent_at = strchr(nptr, 'e');
   14cae:	4620      	mov	r0, r4
   14cb0:	f009 f9ef 	bl	1e092 <strchr>
    ival = strtoll(nptr, &ep, 10);
   14cb4:	220a      	movs	r2, #10
    exponent_at = strchr(nptr, 'e');
   14cb6:	4682      	mov	sl, r0
    ival = strtoll(nptr, &ep, 10);
   14cb8:	a905      	add	r1, sp, #20
   14cba:	4620      	mov	r0, r4
   14cbc:	f7fa fce6 	bl	f68c <strtoll>
   14cc0:	9101      	str	r1, [sp, #4]
    f = (double)(ival);
   14cc2:	f00b f8cf 	bl	1fe64 <__aeabi_l2d>
   14cc6:	4604      	mov	r4, r0
   14cc8:	460d      	mov	r5, r1

    if (period_at == 0 || *(period_at+1) == 0) {
   14cca:	b10f      	cbz	r7, 14cd0 <strtod_soft+0x44>
   14ccc:	787b      	ldrb	r3, [r7, #1]
   14cce:	b93b      	cbnz	r3, 14ce0 <strtod_soft+0x54>
        /* No period, or period at the very end, treat as integer */
        if (endptr) *endptr = ep;
   14cd0:	b10e      	cbz	r6, 14cd6 <strtod_soft+0x4a>
   14cd2:	9b05      	ldr	r3, [sp, #20]
   14cd4:	6033      	str	r3, [r6, #0]
        exp = 1;
        for (i = 0; i < n; i++) exp *= 10;
        f *= (double)exp;
    }
    return f;
}
   14cd6:	ec45 4b10 	vmov	d0, r4, r5
   14cda:	b007      	add	sp, #28
   14cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    frac = strtoll(period_at+1, &ep, 10);
   14ce0:	f107 0901 	add.w	r9, r7, #1
   14ce4:	220a      	movs	r2, #10
   14ce6:	a905      	add	r1, sp, #20
   14ce8:	4648      	mov	r0, r9
   14cea:	f7fa fccf 	bl	f68c <strtoll>
   14cee:	4680      	mov	r8, r0
    if (endptr == 0) n = strlen(period_at + 1);
   14cf0:	2e00      	cmp	r6, #0
   14cf2:	d157      	bne.n	14da4 <strtod_soft+0x118>
   14cf4:	4648      	mov	r0, r9
   14cf6:	9102      	str	r1, [sp, #8]
   14cf8:	f7fa fcb1 	bl	f65e <strlen>
   14cfc:	9902      	ldr	r1, [sp, #8]
   14cfe:	4684      	mov	ip, r0
    div = 1;
   14d00:	2300      	movs	r3, #0
   14d02:	2201      	movs	r2, #1
    for (i = 0; i < n; i++) div *= 10;
   14d04:	4618      	mov	r0, r3
   14d06:	f04f 0e0a 	mov.w	lr, #10
   14d0a:	4560      	cmp	r0, ip
   14d0c:	db4f      	blt.n	14dae <strtod_soft+0x122>
    f_frac = (double)frac / (double)div;
   14d0e:	4640      	mov	r0, r8
   14d10:	e9cd 2302 	strd	r2, r3, [sp, #8]
   14d14:	f00b f8a6 	bl	1fe64 <__aeabi_l2d>
   14d18:	9a02      	ldr	r2, [sp, #8]
   14d1a:	9b03      	ldr	r3, [sp, #12]
   14d1c:	4680      	mov	r8, r0
   14d1e:	4689      	mov	r9, r1
   14d20:	4610      	mov	r0, r2
   14d22:	4619      	mov	r1, r3
   14d24:	f00b f89e 	bl	1fe64 <__aeabi_l2d>
   14d28:	4602      	mov	r2, r0
   14d2a:	460b      	mov	r3, r1
   14d2c:	4640      	mov	r0, r8
   14d2e:	4649      	mov	r1, r9
   14d30:	f00b f9f0 	bl	20114 <__aeabi_ddiv>
   14d34:	460b      	mov	r3, r1
    if (ival < 0 || (dash_at != 0 && dash_at < period_at)) {
   14d36:	9901      	ldr	r1, [sp, #4]
   14d38:	2900      	cmp	r1, #0
    f_frac = (double)frac / (double)div;
   14d3a:	4602      	mov	r2, r0
    if (ival < 0 || (dash_at != 0 && dash_at < period_at)) {
   14d3c:	db04      	blt.n	14d48 <strtod_soft+0xbc>
   14d3e:	f1bb 0f00 	cmp.w	fp, #0
   14d42:	d03b      	beq.n	14dbc <strtod_soft+0x130>
   14d44:	455f      	cmp	r7, fp
   14d46:	d939      	bls.n	14dbc <strtod_soft+0x130>
        f -= f_frac;
   14d48:	4620      	mov	r0, r4
   14d4a:	4629      	mov	r1, r5
   14d4c:	f00a ff00 	bl	1fb50 <__aeabi_dsub>
        f += f_frac;
   14d50:	4604      	mov	r4, r0
   14d52:	460d      	mov	r5, r1
    if (endptr) *endptr = ep;
   14d54:	b10e      	cbz	r6, 14d5a <strtod_soft+0xce>
   14d56:	9b05      	ldr	r3, [sp, #20]
   14d58:	6033      	str	r3, [r6, #0]
    if (exponent_at == 0 || *(exponent_at+1) == 0|| ep == 0 || exponent_at != ep) {
   14d5a:	f1ba 0f00 	cmp.w	sl, #0
   14d5e:	d0ba      	beq.n	14cd6 <strtod_soft+0x4a>
   14d60:	f89a 3001 	ldrb.w	r3, [sl, #1]
   14d64:	2b00      	cmp	r3, #0
   14d66:	d0b6      	beq.n	14cd6 <strtod_soft+0x4a>
   14d68:	9b05      	ldr	r3, [sp, #20]
   14d6a:	2b00      	cmp	r3, #0
   14d6c:	d0b3      	beq.n	14cd6 <strtod_soft+0x4a>
   14d6e:	4553      	cmp	r3, sl
   14d70:	d1b1      	bne.n	14cd6 <strtod_soft+0x4a>
    n = strtoll(exponent_at+1, &ep, 10);
   14d72:	220a      	movs	r2, #10
   14d74:	a905      	add	r1, sp, #20
   14d76:	f10a 0001 	add.w	r0, sl, #1
   14d7a:	f7fa fc87 	bl	f68c <strtoll>
    if (n < 0) {
   14d7e:	1e03      	subs	r3, r0, #0
   14d80:	dba9      	blt.n	14cd6 <strtod_soft+0x4a>
        exp = 1;
   14d82:	2100      	movs	r1, #0
   14d84:	2001      	movs	r0, #1
        for (i = 0; i < n; i++) exp *= 10;
   14d86:	460a      	mov	r2, r1
   14d88:	260a      	movs	r6, #10
   14d8a:	429a      	cmp	r2, r3
   14d8c:	d11b      	bne.n	14dc6 <strtod_soft+0x13a>
        f *= (double)exp;
   14d8e:	f00b f869 	bl	1fe64 <__aeabi_l2d>
   14d92:	4602      	mov	r2, r0
   14d94:	460b      	mov	r3, r1
   14d96:	4620      	mov	r0, r4
   14d98:	4629      	mov	r1, r5
   14d9a:	f00b f891 	bl	1fec0 <__aeabi_dmul>
   14d9e:	4604      	mov	r4, r0
   14da0:	460d      	mov	r5, r1
   14da2:	e798      	b.n	14cd6 <strtod_soft+0x4a>
    else n = *endptr - period_at + 1;
   14da4:	6830      	ldr	r0, [r6, #0]
   14da6:	1bc0      	subs	r0, r0, r7
   14da8:	f100 0c01 	add.w	ip, r0, #1
   14dac:	e7a8      	b.n	14d00 <strtod_soft+0x74>
    for (i = 0; i < n; i++) div *= 10;
   14dae:	fb0e f903 	mul.w	r9, lr, r3
   14db2:	fba2 230e 	umull	r2, r3, r2, lr
   14db6:	444b      	add	r3, r9
   14db8:	3001      	adds	r0, #1
   14dba:	e7a6      	b.n	14d0a <strtod_soft+0x7e>
        f += f_frac;
   14dbc:	4620      	mov	r0, r4
   14dbe:	4629      	mov	r1, r5
   14dc0:	f00a fec8 	bl	1fb54 <__adddf3>
   14dc4:	e7c4      	b.n	14d50 <strtod_soft+0xc4>
        for (i = 0; i < n; i++) exp *= 10;
   14dc6:	fb06 f701 	mul.w	r7, r6, r1
   14dca:	fba0 0106 	umull	r0, r1, r0, r6
   14dce:	4439      	add	r1, r7
   14dd0:	3201      	adds	r2, #1
   14dd2:	e7da      	b.n	14d8a <strtod_soft+0xfe>

00014dd4 <parse_number>:
parse_number(const char *str, int digits, int *val)
{
    const char *cp;
    const char *end;

    *val = 0;
   14dd4:	2300      	movs	r3, #0
{
   14dd6:	b530      	push	{r4, r5, lr}
    *val = 0;
   14dd8:	6013      	str	r3, [r2, #0]
    cp = str;
    end = str + digits;
   14dda:	4401      	add	r1, r0
    while (cp < end) {
        if (!isdigit((int) *cp)) {
            return (NULL);
        }
        *val *= 10;
   14ddc:	250a      	movs	r5, #10
    while (cp < end) {
   14dde:	4288      	cmp	r0, r1
   14de0:	d301      	bcc.n	14de6 <parse_number+0x12>
        *val += (*cp - '0');
        cp++;
    }
    return (end);
}
   14de2:	4608      	mov	r0, r1
   14de4:	bd30      	pop	{r4, r5, pc}
        if (!isdigit((int) *cp)) {
   14de6:	7803      	ldrb	r3, [r0, #0]
   14de8:	3b30      	subs	r3, #48	; 0x30
   14dea:	2b09      	cmp	r3, #9
   14dec:	d809      	bhi.n	14e02 <parse_number+0x2e>
        *val *= 10;
   14dee:	6813      	ldr	r3, [r2, #0]
   14df0:	fb05 f403 	mul.w	r4, r5, r3
   14df4:	6014      	str	r4, [r2, #0]
        *val += (*cp - '0');
   14df6:	f810 3b01 	ldrb.w	r3, [r0], #1
   14dfa:	3b30      	subs	r3, #48	; 0x30
   14dfc:	4423      	add	r3, r4
   14dfe:	6013      	str	r3, [r2, #0]
        cp++;
   14e00:	e7ed      	b.n	14dde <parse_number+0xa>
            return (NULL);
   14e02:	2100      	movs	r1, #0
   14e04:	e7ed      	b.n	14de2 <parse_number+0xe>

00014e06 <leapyear>:
    if ((year & 3) == 0) {
   14e06:	0783      	lsls	r3, r0, #30
   14e08:	d10f      	bne.n	14e2a <leapyear+0x24>
        if ((year % 100) == 0) {
   14e0a:	2264      	movs	r2, #100	; 0x64
   14e0c:	fb90 f3f2 	sdiv	r3, r0, r2
   14e10:	fb02 0313 	mls	r3, r2, r3, r0
   14e14:	b95b      	cbnz	r3, 14e2e <leapyear+0x28>
            if ((year % 400) == 0)
   14e16:	f44f 73c8 	mov.w	r3, #400	; 0x190
   14e1a:	fb90 f2f3 	sdiv	r2, r0, r3
   14e1e:	fb03 0012 	mls	r0, r3, r2, r0
   14e22:	fab0 f080 	clz	r0, r0
   14e26:	0940      	lsrs	r0, r0, #5
   14e28:	4770      	bx	lr
    int rv = 0;
   14e2a:	2000      	movs	r0, #0
   14e2c:	4770      	bx	lr
        rv = 1;
   14e2e:	2001      	movs	r0, #1
}
   14e30:	4770      	bx	lr
	...

00014e34 <clocktime_to_timeval>:
{
   14e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    year = ct->year;
   14e38:	6805      	ldr	r5, [r0, #0]
{
   14e3a:	4616      	mov	r6, r2
    if (year < POSIX_BASE_YEAR ||
   14e3c:	f240 72b1 	movw	r2, #1969	; 0x7b1
   14e40:	4295      	cmp	r5, r2
{
   14e42:	b085      	sub	sp, #20
   14e44:	4607      	mov	r7, r0
    if (year < POSIX_BASE_YEAR ||
   14e46:	f340 8085 	ble.w	14f54 <clocktime_to_timeval+0x120>
        ct->mon < 1 || ct->mon > 12 ||
   14e4a:	f8d0 b004 	ldr.w	fp, [r0, #4]
    if (year < POSIX_BASE_YEAR ||
   14e4e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   14e52:	2a0b      	cmp	r2, #11
   14e54:	d87e      	bhi.n	14f54 <clocktime_to_timeval+0x120>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   14e56:	6883      	ldr	r3, [r0, #8]
   14e58:	9300      	str	r3, [sp, #0]
        ct->mon < 1 || ct->mon > 12 ||
   14e5a:	2b00      	cmp	r3, #0
   14e5c:	dd7a      	ble.n	14f54 <clocktime_to_timeval+0x120>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   14e5e:	483f      	ldr	r0, [pc, #252]	; (14f5c <clocktime_to_timeval+0x128>)
   14e60:	f1bb 0f02 	cmp.w	fp, #2
   14e64:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   14e68:	d151      	bne.n	14f0e <clocktime_to_timeval+0xda>
   14e6a:	4628      	mov	r0, r5
   14e6c:	f7ff ffcb 	bl	14e06 <leapyear>
   14e70:	9b00      	ldr	r3, [sp, #0]
   14e72:	4420      	add	r0, r4
   14e74:	4283      	cmp	r3, r0
   14e76:	dc6d      	bgt.n	14f54 <clocktime_to_timeval+0x120>
        ct->hour < 0 || ct->hour > 23 ||
   14e78:	68fc      	ldr	r4, [r7, #12]
   14e7a:	2c17      	cmp	r4, #23
   14e7c:	d86a      	bhi.n	14f54 <clocktime_to_timeval+0x120>
        ct->min < 0 || ct->min > 59 ||
   14e7e:	f8d7 9010 	ldr.w	r9, [r7, #16]
   14e82:	f1b9 0f3b 	cmp.w	r9, #59	; 0x3b
   14e86:	d865      	bhi.n	14f54 <clocktime_to_timeval+0x120>
        ct->sec < 0 || ct->sec > 59 ||
   14e88:	f8d7 8014 	ldr.w	r8, [r7, #20]
   14e8c:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
   14e90:	d860      	bhi.n	14f54 <clocktime_to_timeval+0x120>
        ct->usec < 0 || ct->usec > 999999) {
   14e92:	69fb      	ldr	r3, [r7, #28]
   14e94:	4a32      	ldr	r2, [pc, #200]	; (14f60 <clocktime_to_timeval+0x12c>)
   14e96:	9301      	str	r3, [sp, #4]
   14e98:	4293      	cmp	r3, r2
   14e9a:	d85b      	bhi.n	14f54 <clocktime_to_timeval+0x120>
    days = 0;
   14e9c:	2700      	movs	r7, #0
    for (i = POSIX_BASE_YEAR; i < year; i++)
   14e9e:	f240 7ab2 	movw	sl, #1970	; 0x7b2
   14ea2:	45aa      	cmp	sl, r5
   14ea4:	d135      	bne.n	14f12 <clocktime_to_timeval+0xde>
   14ea6:	4a2d      	ldr	r2, [pc, #180]	; (14f5c <clocktime_to_timeval+0x128>)
    for (i = 1; i < ct->mon; i++)
   14ea8:	f04f 0a01 	mov.w	sl, #1
   14eac:	45d3      	cmp	fp, sl
   14eae:	d13e      	bne.n	14f2e <clocktime_to_timeval+0xfa>
    days += (ct->day - 1);
   14eb0:	9b00      	ldr	r3, [sp, #0]
   14eb2:	1e5d      	subs	r5, r3, #1
   14eb4:	442f      	add	r7, r5
    tv->tv_sec = (((int64_t)days * 24 + ct->hour) * 60 + ct->min) * 60 +
   14eb6:	2318      	movs	r3, #24
   14eb8:	17e0      	asrs	r0, r4, #31
   14eba:	223c      	movs	r2, #60	; 0x3c
   14ebc:	fbc7 4003 	smlal	r4, r0, r7, r3
   14ec0:	fba4 3402 	umull	r3, r4, r4, r2
   14ec4:	eb13 0309 	adds.w	r3, r3, r9
   14ec8:	fb02 4400 	mla	r4, r2, r0, r4
   14ecc:	eb44 79e9 	adc.w	r9, r4, r9, asr #31
   14ed0:	fba3 3402 	umull	r3, r4, r3, r2
   14ed4:	fb02 4909 	mla	r9, r2, r9, r4
   14ed8:	eb13 0408 	adds.w	r4, r3, r8
   14edc:	eb49 75e8 	adc.w	r5, r9, r8, asr #31
    tv->tv_usec = ct->usec;
   14ee0:	9b01      	ldr	r3, [sp, #4]
   14ee2:	60b3      	str	r3, [r6, #8]
    tv->tv_sec = (((int64_t)days * 24 + ct->hour) * 60 + ct->min) * 60 +
   14ee4:	e9c6 4500 	strd	r4, r5, [r6]
    if (tz != NULL) {
   14ee8:	b3b1      	cbz	r1, 14f58 <clocktime_to_timeval+0x124>
	tv->tv_sec += tz->tz_minuteswest * 60;
   14eea:	880b      	ldrh	r3, [r1, #0]
   14eec:	fbc3 4582 	smlalbb	r4, r5, r3, r2
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   14ef0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   14ef4:	2b00      	cmp	r3, #0
   14ef6:	bf18      	it	ne
   14ef8:	f44f 6361 	movne.w	r3, #3600	; 0xe10
   14efc:	1ae3      	subs	r3, r4, r3
   14efe:	f165 0200 	sbc.w	r2, r5, #0
   14f02:	e9c6 3200 	strd	r3, r2, [r6]
    return (0);
   14f06:	2000      	movs	r0, #0
}
   14f08:	b005      	add	sp, #20
   14f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   14f0e:	2000      	movs	r0, #0
   14f10:	e7ae      	b.n	14e70 <clocktime_to_timeval+0x3c>
        days += days_in_year(i);
   14f12:	4650      	mov	r0, sl
   14f14:	f7ff ff77 	bl	14e06 <leapyear>
   14f18:	f240 126d 	movw	r2, #365	; 0x16d
   14f1c:	2800      	cmp	r0, #0
   14f1e:	bf14      	ite	ne
   14f20:	f44f 70b7 	movne.w	r0, #366	; 0x16e
   14f24:	4610      	moveq	r0, r2
   14f26:	4407      	add	r7, r0
    for (i = POSIX_BASE_YEAR; i < year; i++)
   14f28:	f10a 0a01 	add.w	sl, sl, #1
   14f2c:	e7b9      	b.n	14ea2 <clocktime_to_timeval+0x6e>
          days += days_in_month(year, i);
   14f2e:	f852 3b04 	ldr.w	r3, [r2], #4
   14f32:	9302      	str	r3, [sp, #8]
   14f34:	f1ba 0f02 	cmp.w	sl, #2
   14f38:	d10a      	bne.n	14f50 <clocktime_to_timeval+0x11c>
   14f3a:	4628      	mov	r0, r5
   14f3c:	9203      	str	r2, [sp, #12]
   14f3e:	f7ff ff62 	bl	14e06 <leapyear>
   14f42:	9a03      	ldr	r2, [sp, #12]
   14f44:	9b02      	ldr	r3, [sp, #8]
   14f46:	4403      	add	r3, r0
   14f48:	441f      	add	r7, r3
    for (i = 1; i < ct->mon; i++)
   14f4a:	f10a 0a01 	add.w	sl, sl, #1
   14f4e:	e7ad      	b.n	14eac <clocktime_to_timeval+0x78>
          days += days_in_month(year, i);
   14f50:	2000      	movs	r0, #0
   14f52:	e7f7      	b.n	14f44 <clocktime_to_timeval+0x110>
        return (OS_EINVAL);
   14f54:	2002      	movs	r0, #2
   14f56:	e7d7      	b.n	14f08 <clocktime_to_timeval+0xd4>
    return (0);
   14f58:	4608      	mov	r0, r1
   14f5a:	e7d5      	b.n	14f08 <clocktime_to_timeval+0xd4>
   14f5c:	000230a0 	.word	0x000230a0
   14f60:	000f423f 	.word	0x000f423f

00014f64 <timeval_to_clocktime>:
{
   14f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    secs = tv->tv_sec;
   14f68:	e9d0 5700 	ldrd	r5, r7, [r0]
{
   14f6c:	4616      	mov	r6, r2
    if (tz != NULL) {
   14f6e:	b181      	cbz	r1, 14f92 <timeval_to_clocktime+0x2e>
        secs -= tz->tz_minuteswest * 60;
   14f70:	f9b1 3000 	ldrsh.w	r3, [r1]
   14f74:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   14f78:	009a      	lsls	r2, r3, #2
   14f7a:	1aaa      	subs	r2, r5, r2
        secs += tz->tz_dsttime ? 3600 : 0;
   14f7c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
        secs -= tz->tz_minuteswest * 60;
   14f80:	eb67 73e3 	sbc.w	r3, r7, r3, asr #31
        secs += tz->tz_dsttime ? 3600 : 0;
   14f84:	2d00      	cmp	r5, #0
   14f86:	bf18      	it	ne
   14f88:	f44f 6561 	movne.w	r5, #3600	; 0xe10
   14f8c:	18ad      	adds	r5, r5, r2
   14f8e:	f143 0700 	adc.w	r7, r3, #0
    if (secs < 0 || tv->tv_usec < 0 || tv->tv_usec > 999999) {
   14f92:	2f00      	cmp	r7, #0
   14f94:	db62      	blt.n	1505c <timeval_to_clocktime+0xf8>
   14f96:	f8d0 8008 	ldr.w	r8, [r0, #8]
   14f9a:	4b31      	ldr	r3, [pc, #196]	; (15060 <timeval_to_clocktime+0xfc>)
   14f9c:	4598      	cmp	r8, r3
   14f9e:	d85d      	bhi.n	1505c <timeval_to_clocktime+0xf8>
    days = secs / SECDAY;
   14fa0:	4a30      	ldr	r2, [pc, #192]	; (15064 <timeval_to_clocktime+0x100>)
   14fa2:	2300      	movs	r3, #0
   14fa4:	4628      	mov	r0, r5
   14fa6:	4639      	mov	r1, r7
   14fa8:	f00b fbe0 	bl	2076c <__aeabi_ldivmod>
    rsec = secs % SECDAY;
   14fac:	4639      	mov	r1, r7
    days = secs / SECDAY;
   14fae:	4604      	mov	r4, r0
    rsec = secs % SECDAY;
   14fb0:	4a2c      	ldr	r2, [pc, #176]	; (15064 <timeval_to_clocktime+0x100>)
   14fb2:	4628      	mov	r0, r5
   14fb4:	2300      	movs	r3, #0
   14fb6:	f00b fbd9 	bl	2076c <__aeabi_ldivmod>
    ct->dow = day_of_week(days);
   14fba:	2507      	movs	r5, #7
    rsec = secs % SECDAY;
   14fbc:	461f      	mov	r7, r3
    ct->dow = day_of_week(days);
   14fbe:	1d23      	adds	r3, r4, #4
   14fc0:	fb93 f5f5 	sdiv	r5, r3, r5
   14fc4:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   14fc8:	1b5d      	subs	r5, r3, r5
   14fca:	61b5      	str	r5, [r6, #24]
    rsec = secs % SECDAY;
   14fcc:	4691      	mov	r9, r2
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   14fce:	f240 71b2 	movw	r1, #1970	; 0x7b2
   14fd2:	f240 156d 	movw	r5, #365	; 0x16d
   14fd6:	4608      	mov	r0, r1
   14fd8:	f7ff ff15 	bl	14e06 <leapyear>
   14fdc:	2800      	cmp	r0, #0
   14fde:	bf14      	ite	ne
   14fe0:	f44f 73b7 	movne.w	r3, #366	; 0x16e
   14fe4:	462b      	moveq	r3, r5
   14fe6:	429c      	cmp	r4, r3
   14fe8:	da32      	bge.n	15050 <timeval_to_clocktime+0xec>
    ct->year = year;
   14fea:	6031      	str	r1, [r6, #0]
    for (i = 1; days >= days_in_month(year, i); i++)
   14fec:	491e      	ldr	r1, [pc, #120]	; (15068 <timeval_to_clocktime+0x104>)
   14fee:	2301      	movs	r3, #1
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   14ff0:	2b02      	cmp	r3, #2
    for (i = 1; days >= days_in_month(year, i); i++)
   14ff2:	f851 2b04 	ldr.w	r2, [r1], #4
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   14ff6:	bf0c      	ite	eq
   14ff8:	4605      	moveq	r5, r0
   14ffa:	2500      	movne	r5, #0
    for (i = 1; days >= days_in_month(year, i); i++)
   14ffc:	442a      	add	r2, r5
   14ffe:	42a2      	cmp	r2, r4
   15000:	dd29      	ble.n	15056 <timeval_to_clocktime+0xf2>
    ct->day = days + 1;
   15002:	3401      	adds	r4, #1
    ct->mon = i;
   15004:	6073      	str	r3, [r6, #4]
    ct->day = days + 1;
   15006:	60b4      	str	r4, [r6, #8]
    ct->hour = rsec / 3600;
   15008:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   1500c:	2300      	movs	r3, #0
   1500e:	4648      	mov	r0, r9
   15010:	4639      	mov	r1, r7
   15012:	f00b fbab 	bl	2076c <__aeabi_ldivmod>
    rsec = rsec % 3600;
   15016:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    ct->hour = rsec / 3600;
   1501a:	60f0      	str	r0, [r6, #12]
    rsec = rsec % 3600;
   1501c:	2300      	movs	r3, #0
   1501e:	4648      	mov	r0, r9
   15020:	4639      	mov	r1, r7
   15022:	f00b fba3 	bl	2076c <__aeabi_ldivmod>
   15026:	4615      	mov	r5, r2
   15028:	461c      	mov	r4, r3
    ct->min  = rsec / 60;
   1502a:	223c      	movs	r2, #60	; 0x3c
   1502c:	2300      	movs	r3, #0
   1502e:	4628      	mov	r0, r5
   15030:	4621      	mov	r1, r4
   15032:	f00b fb9b 	bl	2076c <__aeabi_ldivmod>
    rsec = rsec % 60;
   15036:	223c      	movs	r2, #60	; 0x3c
    ct->min  = rsec / 60;
   15038:	6130      	str	r0, [r6, #16]
    rsec = rsec % 60;
   1503a:	2300      	movs	r3, #0
   1503c:	4628      	mov	r0, r5
   1503e:	4621      	mov	r1, r4
   15040:	f00b fb94 	bl	2076c <__aeabi_ldivmod>
    ct->usec = tv->tv_usec;
   15044:	f8c6 801c 	str.w	r8, [r6, #28]
    ct->sec  = rsec;
   15048:	6172      	str	r2, [r6, #20]
    return (0);
   1504a:	2000      	movs	r0, #0
}
   1504c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        days -= days_in_year(year);
   15050:	1ae4      	subs	r4, r4, r3
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   15052:	3101      	adds	r1, #1
   15054:	e7bf      	b.n	14fd6 <timeval_to_clocktime+0x72>
        days -= days_in_month(year, i);
   15056:	1aa4      	subs	r4, r4, r2
    for (i = 1; days >= days_in_month(year, i); i++)
   15058:	3301      	adds	r3, #1
   1505a:	e7c9      	b.n	14ff0 <timeval_to_clocktime+0x8c>
        return (OS_EINVAL);
   1505c:	2002      	movs	r0, #2
   1505e:	e7f5      	b.n	1504c <timeval_to_clocktime+0xe8>
   15060:	000f423f 	.word	0x000f423f
   15064:	00015180 	.word	0x00015180
   15068:	000230a0 	.word	0x000230a0

0001506c <datetime_parse>:
 * 2016-03-02T22:44:00.1                fractional seconds
 * 2016-03-02T22:44:00.101+05:30        fractional seconds with timezone
 */
int
datetime_parse(const char *input, struct os_timeval *tv, struct os_timezone *tz)
{
   1506c:	b570      	push	{r4, r5, r6, lr}
   1506e:	b08a      	sub	sp, #40	; 0x28
   15070:	4604      	mov	r4, r0
   15072:	460e      	mov	r6, r1
   15074:	4615      	mov	r5, r2
    int off_hour, off_min;
    const char *cp;
    const char *ep;
    struct clocktime ct;

    bzero(&ct, sizeof(struct clocktime));
   15076:	2100      	movs	r1, #0
   15078:	2220      	movs	r2, #32
   1507a:	a802      	add	r0, sp, #8
   1507c:	f7fa fabf 	bl	f5fe <memset>
    bzero(tv, sizeof(struct os_timeval));
   15080:	2210      	movs	r2, #16
   15082:	2100      	movs	r1, #0
   15084:	4630      	mov	r0, r6
   15086:	f7fa faba 	bl	f5fe <memset>
    bzero(tz, sizeof(struct os_timezone));      /* default to UTC time */
   1508a:	2300      	movs	r3, #0
   1508c:	602b      	str	r3, [r5, #0]

    cp = input;
    cp = parse_number(cp, 4, &ct.year);
   1508e:	aa02      	add	r2, sp, #8
   15090:	2104      	movs	r1, #4
   15092:	4620      	mov	r0, r4
   15094:	f7ff fe9e 	bl	14dd4 <parse_number>
    if (cp == NULL || *cp != '-') {
   15098:	b918      	cbnz	r0, 150a2 <datetime_parse+0x36>
        goto err;
    }

    return (0);
err:
    return (-1);
   1509a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1509e:	b00a      	add	sp, #40	; 0x28
   150a0:	bd70      	pop	{r4, r5, r6, pc}
    if (cp == NULL || *cp != '-') {
   150a2:	7803      	ldrb	r3, [r0, #0]
   150a4:	2b2d      	cmp	r3, #45	; 0x2d
   150a6:	d1f8      	bne.n	1509a <datetime_parse+0x2e>
    cp = parse_number(cp + 1, 2, &ct.mon);
   150a8:	aa03      	add	r2, sp, #12
   150aa:	2102      	movs	r1, #2
   150ac:	3001      	adds	r0, #1
   150ae:	f7ff fe91 	bl	14dd4 <parse_number>
    if (cp == NULL || *cp != '-') {
   150b2:	2800      	cmp	r0, #0
   150b4:	d0f1      	beq.n	1509a <datetime_parse+0x2e>
   150b6:	7803      	ldrb	r3, [r0, #0]
   150b8:	2b2d      	cmp	r3, #45	; 0x2d
   150ba:	d1ee      	bne.n	1509a <datetime_parse+0x2e>
    cp = parse_number(cp + 1, 2, &ct.day);
   150bc:	aa04      	add	r2, sp, #16
   150be:	2102      	movs	r1, #2
   150c0:	3001      	adds	r0, #1
   150c2:	f7ff fe87 	bl	14dd4 <parse_number>
    if (cp == NULL || *cp != 'T') {
   150c6:	2800      	cmp	r0, #0
   150c8:	d0e7      	beq.n	1509a <datetime_parse+0x2e>
   150ca:	7803      	ldrb	r3, [r0, #0]
   150cc:	2b54      	cmp	r3, #84	; 0x54
   150ce:	d1e4      	bne.n	1509a <datetime_parse+0x2e>
    cp = parse_number(cp + 1, 2, &ct.hour);
   150d0:	aa05      	add	r2, sp, #20
   150d2:	2102      	movs	r1, #2
   150d4:	3001      	adds	r0, #1
   150d6:	f7ff fe7d 	bl	14dd4 <parse_number>
    if (cp == NULL || *cp != ':') {
   150da:	2800      	cmp	r0, #0
   150dc:	d0dd      	beq.n	1509a <datetime_parse+0x2e>
   150de:	7803      	ldrb	r3, [r0, #0]
   150e0:	2b3a      	cmp	r3, #58	; 0x3a
   150e2:	d1da      	bne.n	1509a <datetime_parse+0x2e>
    cp = parse_number(cp + 1, 2, &ct.min);
   150e4:	aa06      	add	r2, sp, #24
   150e6:	2102      	movs	r1, #2
   150e8:	3001      	adds	r0, #1
   150ea:	f7ff fe73 	bl	14dd4 <parse_number>
    if (cp == NULL || *cp != ':') {
   150ee:	2800      	cmp	r0, #0
   150f0:	d0d3      	beq.n	1509a <datetime_parse+0x2e>
   150f2:	7803      	ldrb	r3, [r0, #0]
   150f4:	2b3a      	cmp	r3, #58	; 0x3a
   150f6:	d1d0      	bne.n	1509a <datetime_parse+0x2e>
    cp = parse_number(cp + 1, 2, &ct.sec);
   150f8:	aa07      	add	r2, sp, #28
   150fa:	2102      	movs	r1, #2
   150fc:	3001      	adds	r0, #1
   150fe:	f7ff fe69 	bl	14dd4 <parse_number>
    if (cp == NULL) {
   15102:	2800      	cmp	r0, #0
   15104:	d0c9      	beq.n	1509a <datetime_parse+0x2e>
    if (*cp == '.') {
   15106:	7803      	ldrb	r3, [r0, #0]
   15108:	2b2e      	cmp	r3, #46	; 0x2e
   1510a:	d119      	bne.n	15140 <datetime_parse+0xd4>
        ep = ++cp;
   1510c:	3001      	adds	r0, #1
        while (isdigit((int) *ep)) {
   1510e:	4602      	mov	r2, r0
   15110:	4614      	mov	r4, r2
   15112:	3201      	adds	r2, #1
   15114:	7823      	ldrb	r3, [r4, #0]
   15116:	3b30      	subs	r3, #48	; 0x30
   15118:	2b09      	cmp	r3, #9
   1511a:	d9f9      	bls.n	15110 <datetime_parse+0xa4>
        digits = ep - cp;
   1511c:	1a24      	subs	r4, r4, r0
        if (digits <= 0 || digits > 6) {
   1511e:	1e63      	subs	r3, r4, #1
   15120:	2b05      	cmp	r3, #5
   15122:	d8ba      	bhi.n	1509a <datetime_parse+0x2e>
        cp = parse_number(cp, digits, &ct.usec);
   15124:	aa09      	add	r2, sp, #36	; 0x24
   15126:	4621      	mov	r1, r4
   15128:	f7ff fe54 	bl	14dd4 <parse_number>
        if (cp == NULL) {
   1512c:	2800      	cmp	r0, #0
   1512e:	d0b4      	beq.n	1509a <datetime_parse+0x2e>
   15130:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15132:	2200      	movs	r2, #0
            ct.usec *= 10;
   15134:	210a      	movs	r1, #10
        while (digits++ < 6) {
   15136:	3401      	adds	r4, #1
   15138:	2c07      	cmp	r4, #7
   1513a:	d114      	bne.n	15166 <datetime_parse+0xfa>
   1513c:	b102      	cbz	r2, 15140 <datetime_parse+0xd4>
   1513e:	9309      	str	r3, [sp, #36]	; 0x24
    if (*cp == 'Z' || *cp == 'z') {
   15140:	7803      	ldrb	r3, [r0, #0]
   15142:	f003 02df 	and.w	r2, r3, #223	; 0xdf
   15146:	2a5a      	cmp	r2, #90	; 0x5a
   15148:	d110      	bne.n	1516c <datetime_parse+0x100>
        cp++;
   1514a:	3001      	adds	r0, #1
    if (*cp != '\0') {
   1514c:	7803      	ldrb	r3, [r0, #0]
   1514e:	2b00      	cmp	r3, #0
   15150:	d1a3      	bne.n	1509a <datetime_parse+0x2e>
    if (clocktime_to_timeval(&ct, tz, tv) != 0) {
   15152:	4632      	mov	r2, r6
   15154:	4629      	mov	r1, r5
   15156:	a802      	add	r0, sp, #8
   15158:	f7ff fe6c 	bl	14e34 <clocktime_to_timeval>
   1515c:	3800      	subs	r0, #0
   1515e:	bf18      	it	ne
   15160:	2001      	movne	r0, #1
   15162:	4240      	negs	r0, r0
   15164:	e79b      	b.n	1509e <datetime_parse+0x32>
            ct.usec *= 10;
   15166:	434b      	muls	r3, r1
   15168:	2201      	movs	r2, #1
   1516a:	e7e4      	b.n	15136 <datetime_parse+0xca>
    } else if (*cp == '+' || *cp == '-') {
   1516c:	2b2b      	cmp	r3, #43	; 0x2b
   1516e:	d02c      	beq.n	151ca <datetime_parse+0x15e>
   15170:	2b2d      	cmp	r3, #45	; 0x2d
   15172:	d1eb      	bne.n	1514c <datetime_parse+0xe0>
        sign = (*cp == '+') ? +1 : -1;
   15174:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        cp = parse_number(cp + 1, 2, &off_hour);
   15178:	466a      	mov	r2, sp
   1517a:	2102      	movs	r1, #2
   1517c:	3001      	adds	r0, #1
   1517e:	f7ff fe29 	bl	14dd4 <parse_number>
        if (cp == NULL || *cp != ':') {
   15182:	2800      	cmp	r0, #0
   15184:	d089      	beq.n	1509a <datetime_parse+0x2e>
   15186:	7803      	ldrb	r3, [r0, #0]
   15188:	2b3a      	cmp	r3, #58	; 0x3a
   1518a:	d186      	bne.n	1509a <datetime_parse+0x2e>
        cp = parse_number(cp + 1, 2, &off_min);
   1518c:	aa01      	add	r2, sp, #4
   1518e:	2102      	movs	r1, #2
   15190:	3001      	adds	r0, #1
   15192:	f7ff fe1f 	bl	14dd4 <parse_number>
        if (cp == NULL) {
   15196:	2800      	cmp	r0, #0
   15198:	f43f af7f 	beq.w	1509a <datetime_parse+0x2e>
        if (off_hour < 0 || off_hour > 23 || off_min < 0 || off_min > 59) {
   1519c:	9a00      	ldr	r2, [sp, #0]
   1519e:	2a17      	cmp	r2, #23
   151a0:	f63f af7b 	bhi.w	1509a <datetime_parse+0x2e>
   151a4:	9b01      	ldr	r3, [sp, #4]
   151a6:	2b3b      	cmp	r3, #59	; 0x3b
   151a8:	f63f af77 	bhi.w	1509a <datetime_parse+0x2e>
        tz->tz_minuteswest = off_hour * 60 + off_min;
   151ac:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   151b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   151b4:	b29b      	uxth	r3, r3
        if (tz->tz_minuteswest > 18 * 60) {
   151b6:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
        tz->tz_minuteswest = off_hour * 60 + off_min;
   151ba:	802b      	strh	r3, [r5, #0]
        if (tz->tz_minuteswest > 18 * 60) {
   151bc:	f63f af6d 	bhi.w	1509a <datetime_parse+0x2e>
        if (sign > 0) {
   151c0:	2c01      	cmp	r4, #1
            tz->tz_minuteswest = -tz->tz_minuteswest;
   151c2:	bf04      	itt	eq
   151c4:	425b      	negeq	r3, r3
   151c6:	802b      	strheq	r3, [r5, #0]
   151c8:	e7c0      	b.n	1514c <datetime_parse+0xe0>
        sign = (*cp == '+') ? +1 : -1;
   151ca:	2401      	movs	r4, #1
   151cc:	e7d4      	b.n	15178 <datetime_parse+0x10c>
	...

000151d0 <datetime_format>:

int
datetime_format(const struct os_timeval *tv, const struct os_timezone *tz,
    char *ostr, int olen)
{
   151d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   151d4:	b08e      	sub	sp, #56	; 0x38
   151d6:	4617      	mov	r7, r2
    char *cp;
    int rc, rlen, minswest;
    int off_hour, off_min, sign;
    struct clocktime ct;

    rc = timeval_to_clocktime(tv, tz, &ct);
   151d8:	aa06      	add	r2, sp, #24
{
   151da:	4688      	mov	r8, r1
   151dc:	461c      	mov	r4, r3
    rc = timeval_to_clocktime(tv, tz, &ct);
   151de:	f7ff fec1 	bl	14f64 <timeval_to_clocktime>
    if (rc != 0) {
   151e2:	4606      	mov	r6, r0
   151e4:	2800      	cmp	r0, #0
   151e6:	d134      	bne.n	15252 <datetime_format+0x82>
    }

    cp = ostr;
    rlen = olen;

    rc = snprintf(cp, rlen, "%04d-%02d-%02dT%02d:%02d:%02d.%06d",
   151e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   151ea:	9305      	str	r3, [sp, #20]
   151ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   151ee:	9304      	str	r3, [sp, #16]
   151f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   151f2:	9303      	str	r3, [sp, #12]
   151f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   151f6:	9302      	str	r3, [sp, #8]
   151f8:	9b08      	ldr	r3, [sp, #32]
   151fa:	9301      	str	r3, [sp, #4]
   151fc:	9b07      	ldr	r3, [sp, #28]
   151fe:	9300      	str	r3, [sp, #0]
   15200:	4621      	mov	r1, r4
   15202:	9b06      	ldr	r3, [sp, #24]
   15204:	4a18      	ldr	r2, [pc, #96]	; (15268 <datetime_format+0x98>)
   15206:	4638      	mov	r0, r7
   15208:	f7fa fd18 	bl	fc3c <snprintf>
   1520c:	4605      	mov	r5, r0
        ct.year, ct.mon, ct.day, ct.hour, ct.min, ct.sec, ct.usec);
    cp += rc;
    rlen -= rc;
    if (rc < 0 || rlen <= 0) {
   1520e:	2d00      	cmp	r5, #0
    cp += rc;
   15210:	4438      	add	r0, r7
    rlen -= rc;
   15212:	eba4 0405 	sub.w	r4, r4, r5
    if (rc < 0 || rlen <= 0) {
   15216:	db1c      	blt.n	15252 <datetime_format+0x82>
   15218:	2c00      	cmp	r4, #0
   1521a:	dd1a      	ble.n	15252 <datetime_format+0x82>
        goto err;
    }

    if (tz != NULL) {
   1521c:	f1b8 0f00 	cmp.w	r8, #0
   15220:	d01d      	beq.n	1525e <datetime_format+0x8e>
        minswest = tz->tz_minuteswest;
        if (tz->tz_dsttime) {
   15222:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
        minswest = tz->tz_minuteswest;
   15226:	f9b8 5000 	ldrsh.w	r5, [r8]
        if (tz->tz_dsttime) {
   1522a:	b103      	cbz	r3, 1522e <datetime_format+0x5e>
            minswest -= 60;
   1522c:	3d3c      	subs	r5, #60	; 0x3c
        }
    } else {
        minswest = 0;
    }

    if (minswest <= 0) {
   1522e:	2d00      	cmp	r5, #0
   15230:	dc17      	bgt.n	15262 <datetime_format+0x92>
        sign = '+';
        minswest = -minswest;
   15232:	426d      	negs	r5, r5
        sign = '+';
   15234:	232b      	movs	r3, #43	; 0x2b
    } else {
        sign = '-';
    }

    off_hour = minswest / 60;
    off_min = minswest % 60;
   15236:	213c      	movs	r1, #60	; 0x3c
   15238:	fbb5 f2f1 	udiv	r2, r5, r1
   1523c:	fb01 5512 	mls	r5, r1, r2, r5

    rc = snprintf(cp, rlen, "%c%02d:%02d", sign, off_hour, off_min);
   15240:	e9cd 2500 	strd	r2, r5, [sp]
   15244:	4621      	mov	r1, r4
   15246:	4a09      	ldr	r2, [pc, #36]	; (1526c <datetime_format+0x9c>)
   15248:	f7fa fcf8 	bl	fc3c <snprintf>
    cp += rc;
    rlen -= rc;
   1524c:	1a24      	subs	r4, r4, r0
    if (rc < 0 || rlen <= 0) {
   1524e:	2c00      	cmp	r4, #0
   15250:	dc01      	bgt.n	15256 <datetime_format+0x86>
    }

    return (0);

err:
    return (-1);
   15252:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
}
   15256:	4630      	mov	r0, r6
   15258:	b00e      	add	sp, #56	; 0x38
   1525a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        minswest = 0;
   1525e:	4635      	mov	r5, r6
   15260:	e7e7      	b.n	15232 <datetime_format+0x62>
        sign = '-';
   15262:	232d      	movs	r3, #45	; 0x2d
   15264:	e7e7      	b.n	15236 <datetime_format+0x66>
   15266:	bf00      	nop
   15268:	0002306e 	.word	0x0002306e
   1526c:	00023091 	.word	0x00023091

00015270 <crc16_ccitt>:
    0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0
};

uint16_t
crc16_ccitt(uint16_t initial_crc, const void *buf, int len)
{
   15270:	b530      	push	{r4, r5, lr}

    crc = initial_crc;
    ptr = buf;

    for (counter = 0; counter < len; counter++) {
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *ptr++)&0x00FF];
   15272:	4d08      	ldr	r5, [pc, #32]	; (15294 <crc16_ccitt+0x24>)
    ptr = buf;
   15274:	460b      	mov	r3, r1
    for (counter = 0; counter < len; counter++) {
   15276:	1a5c      	subs	r4, r3, r1
   15278:	42a2      	cmp	r2, r4
   1527a:	dc00      	bgt.n	1527e <crc16_ccitt+0xe>
    }

    return crc;
}
   1527c:	bd30      	pop	{r4, r5, pc}
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *ptr++)&0x00FF];
   1527e:	f813 4b01 	ldrb.w	r4, [r3], #1
   15282:	ea84 2410 	eor.w	r4, r4, r0, lsr #8
   15286:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
   1528a:	ea84 2000 	eor.w	r0, r4, r0, lsl #8
   1528e:	b280      	uxth	r0, r0
    for (counter = 0; counter < len; counter++) {
   15290:	e7f1      	b.n	15276 <crc16_ccitt+0x6>
   15292:	bf00      	nop
   15294:	000230d0 	.word	0x000230d0

00015298 <parse_num_base>:
 */
static int
parse_num_base(const char *sval)
{
    /* Skip optional sign. */
    if (sval[0] == '+' || sval[0] == '-') {
   15298:	7803      	ldrb	r3, [r0, #0]
   1529a:	2b2b      	cmp	r3, #43	; 0x2b
   1529c:	d001      	beq.n	152a2 <parse_num_base+0xa>
   1529e:	2b2d      	cmp	r3, #45	; 0x2d
   152a0:	d100      	bne.n	152a4 <parse_num_base+0xc>
        sval++;
   152a2:	3001      	adds	r0, #1
    }

    if (sval[0] == '0' && sval[1] == 'x') {
   152a4:	7803      	ldrb	r3, [r0, #0]
   152a6:	2b30      	cmp	r3, #48	; 0x30
   152a8:	d105      	bne.n	152b6 <parse_num_base+0x1e>
   152aa:	7843      	ldrb	r3, [r0, #1]
        return 0;
   152ac:	2b78      	cmp	r3, #120	; 0x78
   152ae:	bf14      	ite	ne
   152b0:	200a      	movne	r0, #10
   152b2:	2000      	moveq	r0, #0
   152b4:	4770      	bx	lr
    } else {
        return 10;
   152b6:	200a      	movs	r0, #10
    }
}
   152b8:	4770      	bx	lr

000152ba <parse_ll_bounds>:

long long
parse_ll_bounds(const char *sval, long long min, long long max,
                int *out_status)
{
   152ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   152be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   152c0:	461e      	mov	r6, r3
    char *endptr;
    long long llval;

    *out_status = SYS_EOK;
   152c2:	2300      	movs	r3, #0
   152c4:	602b      	str	r3, [r5, #0]
{
   152c6:	4604      	mov	r4, r0

    llval = strtoll(sval, &endptr, parse_num_base(sval));
   152c8:	f7ff ffe6 	bl	15298 <parse_num_base>
{
   152cc:	4617      	mov	r7, r2
    llval = strtoll(sval, &endptr, parse_num_base(sval));
   152ce:	a901      	add	r1, sp, #4
   152d0:	4602      	mov	r2, r0
   152d2:	4620      	mov	r0, r4
{
   152d4:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
    llval = strtoll(sval, &endptr, parse_num_base(sval));
   152d8:	f7fa f9d8 	bl	f68c <strtoll>
    if (sval[0] != '\0' && *endptr == '\0') {
   152dc:	7823      	ldrb	r3, [r4, #0]
   152de:	b183      	cbz	r3, 15302 <parse_ll_bounds+0x48>
   152e0:	9b01      	ldr	r3, [sp, #4]
   152e2:	781b      	ldrb	r3, [r3, #0]
   152e4:	b96b      	cbnz	r3, 15302 <parse_ll_bounds+0x48>
        if (llval < min || llval > max) {
   152e6:	42b8      	cmp	r0, r7
   152e8:	eb71 0306 	sbcs.w	r3, r1, r6
   152ec:	db03      	blt.n	152f6 <parse_ll_bounds+0x3c>
   152ee:	4581      	cmp	r9, r0
   152f0:	eb78 0301 	sbcs.w	r3, r8, r1
   152f4:	da02      	bge.n	152fc <parse_ll_bounds+0x42>
            *out_status = SYS_ERANGE;
   152f6:	f06f 0309 	mvn.w	r3, #9
   152fa:	602b      	str	r3, [r5, #0]
        return llval;
    }

    *out_status = SYS_EINVAL;
    return 0;
}
   152fc:	b003      	add	sp, #12
   152fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *out_status = SYS_EINVAL;
   15302:	f06f 0301 	mvn.w	r3, #1
    return 0;
   15306:	2000      	movs	r0, #0
    *out_status = SYS_EINVAL;
   15308:	602b      	str	r3, [r5, #0]
    return 0;
   1530a:	4601      	mov	r1, r0
   1530c:	e7f6      	b.n	152fc <parse_ll_bounds+0x42>

0001530e <streamer_console_vprintf>:
}

static int
streamer_console_vprintf(struct streamer *streamer,
                         const char *fmt, va_list ap)
{
   1530e:	4608      	mov	r0, r1
    return console_vprintf(fmt, ap);
   15310:	4611      	mov	r1, r2
   15312:	f7fd b941 	b.w	12598 <console_vprintf>

00015316 <streamer_console_write>:
{
   15316:	b508      	push	{r3, lr}
   15318:	4608      	mov	r0, r1
    console_write(src, len);
   1531a:	4611      	mov	r1, r2
   1531c:	f7fc fe6a 	bl	11ff4 <console_write>
}
   15320:	2000      	movs	r0, #0
   15322:	bd08      	pop	{r3, pc}

00015324 <streamer_console_get>:

struct streamer *
streamer_console_get(void)
{
    return &streamer_console;
}
   15324:	4800      	ldr	r0, [pc, #0]	; (15328 <streamer_console_get+0x4>)
   15326:	4770      	bx	lr
   15328:	20000874 	.word	0x20000874

0001532c <sysinit_app>:
void panmaster_pkg_init(void);
void uwb_rng_pkg_init2(void);

void
sysinit_app(void)
{
   1532c:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1532e:	f7f3 ff35 	bl	919c <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   15332:	f7fd fabf 	bl	128b4 <flash_map_init>

    /*** Stage 10 */
    /* 10.0: stats_module_init (sys/stats/full) */
    stats_module_init();
   15336:	f7ff f841 	bl	143bc <stats_module_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
   1533a:	f7fd f8ed 	bl	12518 <console_pkg_init>

    /*** Stage 50 */
    /* 50.0: config_pkg_init (sys/config) */
    config_pkg_init();
   1533e:	f009 fcad 	bl	1ec9c <config_pkg_init>

    /*** Stage 100 */
    /* 100.0: log_init (sys/log/full) */
    log_init();
   15342:	f7fd fb79 	bl	12a38 <log_init>
    /* 100.1: mfg_init (sys/mfg) */
    mfg_init();
   15346:	f7fd fd9d 	bl	12e84 <mfg_init>
    /* 100.2: modlog_init (sys/log/modlog) */
    modlog_init();
   1534a:	f009 ff6f 	bl	1f22c <modlog_init>

    /*** Stage 200 */
    /* 200.0: log_reboot_pkg_init (sys/reboot) */
    log_reboot_pkg_init();
   1534e:	f7fd fef3 	bl	13138 <log_reboot_pkg_init>

    /*** Stage 220 */
    /* 220.0: config_pkg_init_stage2 (sys/config) */
    config_pkg_init_stage2();
   15352:	f009 fd07 	bl	1ed64 <config_pkg_init_stage2>

    /*** Stage 401 */
    /* 401.0: dw1000_pkg_init (hw/drivers/uwb/uwb_dw1000) */
    dw1000_pkg_init();
   15356:	f004 ff85 	bl	1a264 <dw1000_pkg_init>

    /*** Stage 402 */
    /* 402.0: uwb_ccp_pkg_init (lib/uwb_ccp) */
    uwb_ccp_pkg_init();
   1535a:	f7f9 fa39 	bl	e7d0 <uwb_ccp_pkg_init>

    /*** Stage 403 */
    /* 403.0: uwb_wcs_pkg_init (lib/uwb_wcs) */
    uwb_wcs_pkg_init();
   1535e:	f7f9 ffeb 	bl	f338 <uwb_wcs_pkg_init>

    /*** Stage 404 */
    /* 404.0: tdma_pkg_init (lib/tdma) */
    tdma_pkg_init();
   15362:	f7f8 fa19 	bl	d798 <tdma_pkg_init>
    /* 404.1: uwb_pan_pkg_init (lib/uwb_pan) */
    uwb_pan_pkg_init();
   15366:	f7f9 fca1 	bl	ecac <uwb_pan_pkg_init>
    /* 404.2: uwb_rng_pkg_init (lib/uwb_rng) */
    uwb_rng_pkg_init();
   1536a:	f008 fc8d 	bl	1dc88 <uwb_rng_pkg_init>
    /* 404.3: wcs_timescale_pkg_init (lib/uwb_wcs) */
    wcs_timescale_pkg_init();
   1536e:	f008 fe29 	bl	1dfc4 <wcs_timescale_pkg_init>

    /*** Stage 410 */
    /* 410.0: nmgr_uwb_pkg_init (lib/nmgr_uwb) */
    nmgr_uwb_pkg_init();
   15372:	f7f5 fbc9 	bl	ab08 <nmgr_uwb_pkg_init>

    /*** Stage 411 */
    /* 411.0: nrng_pkg_init (lib/nrng) */
    nrng_pkg_init();
   15376:	f7f5 fe2d 	bl	afd4 <nrng_pkg_init>

    /*** Stage 414 */
    /* 414.0: twr_ss_nrng_pkg_init (lib/twr_ss_nrng) */
    twr_ss_nrng_pkg_init();
   1537a:	f008 f9b3 	bl	1d6e4 <twr_ss_nrng_pkg_init>

    /*** Stage 420 */
    /* 420.0: survey_pkg_init (lib/survey) */
    survey_pkg_init();
   1537e:	f7f7 ff03 	bl	d188 <survey_pkg_init>

    /*** Stage 500 */
    /* 500.0: bcast_ota_pkg_init (mgmt/bcast_ota) */
    bcast_ota_pkg_init();
   15382:	f009 f86d 	bl	1e460 <bcast_ota_pkg_init>
    /* 500.1: imgmgr_module_init (mgmt/imgmgr) */
    imgmgr_module_init();
   15386:	f7fb f823 	bl	103d0 <imgmgr_module_init>
    /* 500.2: nmgr_pkg_init (mgmt/newtmgr) */
    nmgr_pkg_init();
   1538a:	f7fb fccd 	bl	10d28 <nmgr_pkg_init>
    /* 500.3: shell_init (sys/shell) */
    shell_init();
   1538e:	f7fe fc91 	bl	13cb4 <shell_init>
    /* 500.4: split_app_init (boot/split) */
    split_app_init();
   15392:	f000 f969 	bl	15668 <split_app_init>
    /* 500.5: uwbcfg_pkg_init (sys/uwbcfg) */
    uwbcfg_pkg_init();
   15396:	f7ff fadb 	bl	14950 <uwbcfg_pkg_init>

    /*** Stage 501 */
    /* 501.0: panmaster_pkg_init (lib/panmaster) */
    panmaster_pkg_init();
   1539a:	f7f6 fe1f 	bl	bfdc <panmaster_pkg_init>

    /*** Stage 999 */
    /* 999.0: uwb_rng_pkg_init2 (lib/uwb_rng) */
    uwb_rng_pkg_init2();
}
   1539e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    uwb_rng_pkg_init2();
   153a2:	f008 bc97 	b.w	1dcd4 <uwb_rng_pkg_init2>

000153a6 <boot_write_trailer_byte>:
}

static int
boot_write_trailer_byte(const struct flash_area *fap, uint32_t off,
                        uint8_t val)
{
   153a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   153a8:	4604      	mov	r4, r0
   153aa:	460e      	mov	r6, r1
   153ac:	4617      	mov	r7, r2
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
   153ae:	f7fd fa53 	bl	12858 <flash_area_align>
    assert(align <= BOOT_MAX_ALIGN);
   153b2:	2808      	cmp	r0, #8
    align = flash_area_align(fap);
   153b4:	4605      	mov	r5, r0
    assert(align <= BOOT_MAX_ALIGN);
   153b6:	d905      	bls.n	153c4 <boot_write_trailer_byte+0x1e>
   153b8:	2300      	movs	r3, #0
   153ba:	461a      	mov	r2, r3
   153bc:	4619      	mov	r1, r3
   153be:	4618      	mov	r0, r3
   153c0:	f7f3 fd98 	bl	8ef4 <__assert_func>
    erased_val = flash_area_erased_val(fap);
   153c4:	4620      	mov	r0, r4
   153c6:	f7fd fa4a 	bl	1285e <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
   153ca:	2208      	movs	r2, #8
   153cc:	b2c1      	uxtb	r1, r0
   153ce:	4668      	mov	r0, sp
   153d0:	f7fa f915 	bl	f5fe <memset>
    buf[0] = val;

    rc = flash_area_write(fap, off, buf, align);
   153d4:	462b      	mov	r3, r5
   153d6:	466a      	mov	r2, sp
   153d8:	4631      	mov	r1, r6
   153da:	4620      	mov	r0, r4
    buf[0] = val;
   153dc:	f88d 7000 	strb.w	r7, [sp]
    rc = flash_area_write(fap, off, buf, align);
   153e0:	f7fd fa14 	bl	1280c <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
   153e4:	3800      	subs	r0, #0
   153e6:	bf18      	it	ne
   153e8:	2001      	movne	r0, #1
   153ea:	b003      	add	sp, #12
   153ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

000153ee <boot_magic_compatible_check>:
    switch (tbl_val) {
   153ee:	2804      	cmp	r0, #4
   153f0:	d009      	beq.n	15406 <boot_magic_compatible_check+0x18>
   153f2:	2805      	cmp	r0, #5
   153f4:	d103      	bne.n	153fe <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
   153f6:	1e48      	subs	r0, r1, #1
   153f8:	bf18      	it	ne
   153fa:	2001      	movne	r0, #1
   153fc:	4770      	bx	lr
        return tbl_val == val;
   153fe:	1a43      	subs	r3, r0, r1
   15400:	4258      	negs	r0, r3
   15402:	4158      	adcs	r0, r3
   15404:	4770      	bx	lr
    switch (tbl_val) {
   15406:	2001      	movs	r0, #1
}
   15408:	4770      	bx	lr
	...

0001540c <boot_read_swap_state>:
{
   1540c:	b530      	push	{r4, r5, lr}
   1540e:	460c      	mov	r4, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
   15410:	6881      	ldr	r1, [r0, #8]
{
   15412:	b085      	sub	sp, #20
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
   15414:	2310      	movs	r3, #16
   15416:	466a      	mov	r2, sp
   15418:	3910      	subs	r1, #16
{
   1541a:	4605      	mov	r5, r0
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
   1541c:	f7fd fa34 	bl	12888 <flash_area_read_is_empty>
    if (rc < 0) {
   15420:	2800      	cmp	r0, #0
   15422:	da02      	bge.n	1542a <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
   15424:	2001      	movs	r0, #1
}
   15426:	b005      	add	sp, #20
   15428:	bd30      	pop	{r4, r5, pc}
    if (rc == 1) {
   1542a:	2801      	cmp	r0, #1
   1542c:	d12d      	bne.n	1548a <boot_read_swap_state+0x7e>
        state->magic = BOOT_MAGIC_UNSET;
   1542e:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
   15430:	7023      	strb	r3, [r4, #0]
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 3;
   15432:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->swap_type,
   15434:	2301      	movs	r3, #1
   15436:	18e2      	adds	r2, r4, r3
   15438:	3928      	subs	r1, #40	; 0x28
   1543a:	4628      	mov	r0, r5
   1543c:	f7fd fa24 	bl	12888 <flash_area_read_is_empty>
    if (rc < 0) {
   15440:	2800      	cmp	r0, #0
   15442:	dbef      	blt.n	15424 <boot_read_swap_state+0x18>
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
   15444:	2801      	cmp	r0, #1
   15446:	d002      	beq.n	1544e <boot_read_swap_state+0x42>
   15448:	7863      	ldrb	r3, [r4, #1]
   1544a:	2b04      	cmp	r3, #4
   1544c:	d901      	bls.n	15452 <boot_read_swap_state+0x46>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   1544e:	2301      	movs	r3, #1
   15450:	7063      	strb	r3, [r4, #1]
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 2;
   15452:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
   15454:	2301      	movs	r3, #1
   15456:	1ca2      	adds	r2, r4, #2
   15458:	3920      	subs	r1, #32
   1545a:	4628      	mov	r0, r5
   1545c:	f7fd fa14 	bl	12888 <flash_area_read_is_empty>
    if (rc < 0) {
   15460:	2800      	cmp	r0, #0
   15462:	dbdf      	blt.n	15424 <boot_read_swap_state+0x18>
    if (rc == 1) {
   15464:	2801      	cmp	r0, #1
   15466:	d11a      	bne.n	1549e <boot_read_swap_state+0x92>
        state->copy_done = BOOT_FLAG_UNSET;
   15468:	2303      	movs	r3, #3
        state->copy_done = boot_flag_decode(state->copy_done);
   1546a:	70a3      	strb	r3, [r4, #2]
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN;
   1546c:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
   1546e:	2301      	movs	r3, #1
   15470:	1ce2      	adds	r2, r4, #3
   15472:	3918      	subs	r1, #24
   15474:	4628      	mov	r0, r5
   15476:	f7fd fa07 	bl	12888 <flash_area_read_is_empty>
    if (rc < 0) {
   1547a:	2800      	cmp	r0, #0
   1547c:	dbd2      	blt.n	15424 <boot_read_swap_state+0x18>
    if (rc == 1) {
   1547e:	2801      	cmp	r0, #1
   15480:	d113      	bne.n	154aa <boot_read_swap_state+0x9e>
        state->image_ok = BOOT_FLAG_UNSET;
   15482:	2303      	movs	r3, #3
        state->image_ok = boot_flag_decode(state->image_ok);
   15484:	70e3      	strb	r3, [r4, #3]
    return 0;
   15486:	2000      	movs	r0, #0
   15488:	e7cd      	b.n	15426 <boot_read_swap_state+0x1a>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   1548a:	490b      	ldr	r1, [pc, #44]	; (154b8 <boot_read_swap_state+0xac>)
   1548c:	2210      	movs	r2, #16
   1548e:	4668      	mov	r0, sp
   15490:	f7fa f884 	bl	f59c <memcmp>
        return BOOT_MAGIC_GOOD;
   15494:	2800      	cmp	r0, #0
   15496:	bf14      	ite	ne
   15498:	2302      	movne	r3, #2
   1549a:	2301      	moveq	r3, #1
   1549c:	e7c8      	b.n	15430 <boot_read_swap_state+0x24>
    if (flag != BOOT_FLAG_SET) {
   1549e:	78a3      	ldrb	r3, [r4, #2]
        return BOOT_FLAG_BAD;
   154a0:	2b01      	cmp	r3, #1
   154a2:	bf0c      	ite	eq
   154a4:	2301      	moveq	r3, #1
   154a6:	2302      	movne	r3, #2
   154a8:	e7df      	b.n	1546a <boot_read_swap_state+0x5e>
    if (flag != BOOT_FLAG_SET) {
   154aa:	78e3      	ldrb	r3, [r4, #3]
        return BOOT_FLAG_BAD;
   154ac:	2b01      	cmp	r3, #1
   154ae:	bf0c      	ite	eq
   154b0:	2301      	moveq	r3, #1
   154b2:	2302      	movne	r3, #2
   154b4:	e7e6      	b.n	15484 <boot_read_swap_state+0x78>
   154b6:	bf00      	nop
   154b8:	00023340 	.word	0x00023340

000154bc <boot_read_swap_state_by_id.part.0>:
boot_read_swap_state_by_id(int flash_area_id, struct boot_swap_state *state)
   154bc:	b513      	push	{r0, r1, r4, lr}
   154be:	460c      	mov	r4, r1
        rc = flash_area_open(flash_area_id, &fap);
   154c0:	b2c0      	uxtb	r0, r0
   154c2:	a901      	add	r1, sp, #4
   154c4:	f7fd f938 	bl	12738 <flash_area_open>
        if (rc != 0) {
   154c8:	b928      	cbnz	r0, 154d6 <boot_read_swap_state_by_id.part.0+0x1a>
    rc = boot_read_swap_state(fap, state);
   154ca:	9801      	ldr	r0, [sp, #4]
   154cc:	4621      	mov	r1, r4
   154ce:	f7ff ff9d 	bl	1540c <boot_read_swap_state>
}
   154d2:	b002      	add	sp, #8
   154d4:	bd10      	pop	{r4, pc}
            return BOOT_EFLASH;
   154d6:	2001      	movs	r0, #1
   154d8:	e7fb      	b.n	154d2 <boot_read_swap_state_by_id.part.0+0x16>
	...

000154dc <boot_write_magic>:
    return fap->fa_size - BOOT_MAGIC_SZ;
   154dc:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   154de:	4a05      	ldr	r2, [pc, #20]	; (154f4 <boot_write_magic+0x18>)
{
   154e0:	b508      	push	{r3, lr}
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   154e2:	3910      	subs	r1, #16
   154e4:	2310      	movs	r3, #16
   154e6:	f7fd f991 	bl	1280c <flash_area_write>
}
   154ea:	3800      	subs	r0, #0
   154ec:	bf18      	it	ne
   154ee:	2001      	movne	r0, #1
   154f0:	bd08      	pop	{r3, pc}
   154f2:	bf00      	nop
   154f4:	00023340 	.word	0x00023340

000154f8 <boot_write_image_ok>:
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN;
   154f8:	6881      	ldr	r1, [r0, #8]
    uint32_t off;

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%x (0x%x)",
                 fap->fa_id, off, fap->fa_off + off);
    return boot_write_trailer_byte(fap, off, BOOT_FLAG_SET);
   154fa:	2201      	movs	r2, #1
   154fc:	3918      	subs	r1, #24
   154fe:	f7ff bf52 	b.w	153a6 <boot_write_trailer_byte>

00015502 <boot_write_swap_type>:
 * This value is persisted so that the boot loader knows what swap operation to
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_type(const struct flash_area *fap, uint8_t swap_type)
{
   15502:	460a      	mov	r2, r1
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 3;
   15504:	6881      	ldr	r1, [r0, #8]
    uint32_t off;

    off = boot_swap_type_off(fap);
    BOOT_LOG_DBG("writing swap_type; fa_id=%d off=0x%x (0x%x), swap_type=0x%x",
                 fap->fa_id, off, fap->fa_off + off, swap_type);
    return boot_write_trailer_byte(fap, off, swap_type);
   15506:	3928      	subs	r1, #40	; 0x28
   15508:	f7ff bf4d 	b.w	153a6 <boot_write_trailer_byte>

0001550c <boot_swap_type>:
}
#endif

int
boot_swap_type(void)
{
   1550c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    switch (flash_area_id) {
   15510:	2001      	movs	r0, #1
   15512:	4669      	mov	r1, sp
   15514:	f7ff ffd2 	bl	154bc <boot_read_swap_state_by_id.part.0>
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY, &primary_slot);
    if (rc) {
   15518:	2800      	cmp	r0, #0
   1551a:	d13c      	bne.n	15596 <boot_swap_type+0x8a>
    switch (flash_area_id) {
   1551c:	a901      	add	r1, sp, #4
   1551e:	2002      	movs	r0, #2
   15520:	f7ff ffcc 	bl	154bc <boot_read_swap_state_by_id.part.0>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY,
                                    &secondary_slot);
    if (rc) {
   15524:	bbb8      	cbnz	r0, 15596 <boot_swap_type+0x8a>
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
        table = boot_swap_tables + i;

        if (boot_magic_compatible_check(table->magic_primary_slot,
   15526:	f89d 5000 	ldrb.w	r5, [sp]
                                        primary_slot.magic) &&
            boot_magic_compatible_check(table->magic_secondary_slot,
   1552a:	f89d 6004 	ldrb.w	r6, [sp, #4]
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   1552e:	f89d 7003 	ldrb.w	r7, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   15532:	f89d 8007 	ldrb.w	r8, [sp, #7]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
                table->copy_done_primary_slot == primary_slot.copy_done)) {
   15536:	f89d 9002 	ldrb.w	r9, [sp, #2]
   1553a:	4c18      	ldr	r4, [pc, #96]	; (1559c <boot_swap_type+0x90>)
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   1553c:	4602      	mov	r2, r0
        if (boot_magic_compatible_check(table->magic_primary_slot,
   1553e:	7820      	ldrb	r0, [r4, #0]
   15540:	4629      	mov	r1, r5
   15542:	f7ff ff54 	bl	153ee <boot_magic_compatible_check>
   15546:	b1e8      	cbz	r0, 15584 <boot_swap_type+0x78>
            boot_magic_compatible_check(table->magic_secondary_slot,
   15548:	7860      	ldrb	r0, [r4, #1]
   1554a:	4631      	mov	r1, r6
   1554c:	f7ff ff4f 	bl	153ee <boot_magic_compatible_check>
                                        primary_slot.magic) &&
   15550:	b1c0      	cbz	r0, 15584 <boot_swap_type+0x78>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   15552:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
   15554:	2b04      	cmp	r3, #4
   15556:	d001      	beq.n	1555c <boot_swap_type+0x50>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   15558:	42bb      	cmp	r3, r7
   1555a:	d113      	bne.n	15584 <boot_swap_type+0x78>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   1555c:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   1555e:	2b04      	cmp	r3, #4
   15560:	d001      	beq.n	15566 <boot_swap_type+0x5a>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   15562:	4543      	cmp	r3, r8
   15564:	d10e      	bne.n	15584 <boot_swap_type+0x78>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   15566:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   15568:	2b04      	cmp	r3, #4
   1556a:	d109      	bne.n	15580 <boot_swap_type+0x74>
            BOOT_LOG_INF("Swap type: %s",
   1556c:	7960      	ldrb	r0, [r4, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            assert(table->swap_type == BOOT_SWAP_TYPE_TEST ||
   1556e:	1e83      	subs	r3, r0, #2
   15570:	2b02      	cmp	r3, #2
   15572:	d90d      	bls.n	15590 <boot_swap_type+0x84>
   15574:	2300      	movs	r3, #0
   15576:	461a      	mov	r2, r3
   15578:	4619      	mov	r1, r3
   1557a:	4618      	mov	r0, r3
   1557c:	f7f3 fcba 	bl	8ef4 <__assert_func>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   15580:	454b      	cmp	r3, r9
   15582:	d0f3      	beq.n	1556c <boot_swap_type+0x60>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   15584:	3201      	adds	r2, #1
   15586:	2a03      	cmp	r2, #3
   15588:	f104 0406 	add.w	r4, r4, #6
   1558c:	d1d7      	bne.n	1553e <boot_swap_type+0x32>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
   1558e:	2001      	movs	r0, #1
}
   15590:	b003      	add	sp, #12
   15592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BOOT_SWAP_TYPE_PANIC;
   15596:	20ff      	movs	r0, #255	; 0xff
   15598:	e7fa      	b.n	15590 <boot_swap_type+0x84>
   1559a:	bf00      	nop
   1559c:	00023350 	.word	0x00023350

000155a0 <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   155a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   155a2:	4606      	mov	r6, r0
   155a4:	a901      	add	r1, sp, #4
   155a6:	2002      	movs	r0, #2
   155a8:	f7ff ff88 	bl	154bc <boot_read_swap_state_by_id.part.0>
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY,
                                    &state_secondary_slot);
    if (rc != 0) {
   155ac:	4604      	mov	r4, r0
   155ae:	b938      	cbnz	r0, 155c0 <boot_set_pending+0x20>
        return rc;
    }

    switch (state_secondary_slot.magic) {
   155b0:	f89d 5004 	ldrb.w	r5, [sp, #4]
   155b4:	2d02      	cmp	r5, #2
   155b6:	d022      	beq.n	155fe <boot_set_pending+0x5e>
   155b8:	2d03      	cmp	r5, #3
   155ba:	d004      	beq.n	155c6 <boot_set_pending+0x26>
   155bc:	2d01      	cmp	r5, #1
   155be:	d12b      	bne.n	15618 <boot_set_pending+0x78>

    default:
        assert(0);
        return BOOT_EBADIMAGE;
    }
}
   155c0:	4620      	mov	r0, r4
   155c2:	b002      	add	sp, #8
   155c4:	bd70      	pop	{r4, r5, r6, pc}
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY, &fap);
   155c6:	4669      	mov	r1, sp
   155c8:	2002      	movs	r0, #2
   155ca:	f7fd f8b5 	bl	12738 <flash_area_open>
        if (rc != 0) {
   155ce:	b108      	cbz	r0, 155d4 <boot_set_pending+0x34>
            rc = BOOT_EFLASH;
   155d0:	2401      	movs	r4, #1
   155d2:	e7f5      	b.n	155c0 <boot_set_pending+0x20>
            rc = boot_write_magic(fap);
   155d4:	9800      	ldr	r0, [sp, #0]
   155d6:	f7ff ff81 	bl	154dc <boot_write_magic>
        if (rc == 0 && permanent) {
   155da:	4604      	mov	r4, r0
   155dc:	2800      	cmp	r0, #0
   155de:	d1ef      	bne.n	155c0 <boot_set_pending+0x20>
            rc = boot_write_image_ok(fap);
   155e0:	9800      	ldr	r0, [sp, #0]
        if (rc == 0 && permanent) {
   155e2:	b156      	cbz	r6, 155fa <boot_set_pending+0x5a>
            rc = boot_write_image_ok(fap);
   155e4:	f7ff ff88 	bl	154f8 <boot_write_image_ok>
        if (rc == 0) {
   155e8:	4604      	mov	r4, r0
   155ea:	2800      	cmp	r0, #0
   155ec:	d1e8      	bne.n	155c0 <boot_set_pending+0x20>
            rc = boot_write_swap_type(fap, swap_type);
   155ee:	9800      	ldr	r0, [sp, #0]
   155f0:	4629      	mov	r1, r5
   155f2:	f7ff ff86 	bl	15502 <boot_write_swap_type>
   155f6:	4604      	mov	r4, r0
   155f8:	e7e2      	b.n	155c0 <boot_set_pending+0x20>
                swap_type = BOOT_SWAP_TYPE_TEST;
   155fa:	2502      	movs	r5, #2
   155fc:	e7f7      	b.n	155ee <boot_set_pending+0x4e>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY, &fap);
   155fe:	4669      	mov	r1, sp
   15600:	4628      	mov	r0, r5
   15602:	f7fd f899 	bl	12738 <flash_area_open>
        if (rc != 0) {
   15606:	2800      	cmp	r0, #0
   15608:	d1e2      	bne.n	155d0 <boot_set_pending+0x30>
        flash_area_erase(fap, 0, fap->fa_size);
   1560a:	9800      	ldr	r0, [sp, #0]
   1560c:	4621      	mov	r1, r4
   1560e:	6882      	ldr	r2, [r0, #8]
   15610:	f7fd f90e 	bl	12830 <flash_area_erase>
        return BOOT_EBADIMAGE;
   15614:	2403      	movs	r4, #3
   15616:	e7d3      	b.n	155c0 <boot_set_pending+0x20>
        assert(0);
   15618:	4603      	mov	r3, r0
   1561a:	4602      	mov	r2, r0
   1561c:	4601      	mov	r1, r0
   1561e:	f7f3 fc69 	bl	8ef4 <__assert_func>

00015622 <boot_set_confirmed>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
   15622:	b507      	push	{r0, r1, r2, lr}
    switch (flash_area_id) {
   15624:	2001      	movs	r0, #1
   15626:	a901      	add	r1, sp, #4
   15628:	f7ff ff48 	bl	154bc <boot_read_swap_state_by_id.part.0>
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY,
                                    &state_primary_slot);
    if (rc != 0) {
   1562c:	b9a8      	cbnz	r0, 1565a <boot_set_confirmed+0x38>
        return rc;
    }

    switch (state_primary_slot.magic) {
   1562e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   15632:	2b02      	cmp	r3, #2
   15634:	d016      	beq.n	15664 <boot_set_confirmed+0x42>
   15636:	2b03      	cmp	r3, #3
   15638:	d00f      	beq.n	1565a <boot_set_confirmed+0x38>
    case BOOT_MAGIC_BAD:
        /* Unexpected state. */
        return BOOT_EBADVECT;
    }

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY, &fap);
   1563a:	4669      	mov	r1, sp
   1563c:	2001      	movs	r0, #1
   1563e:	f7fd f87b 	bl	12738 <flash_area_open>
    if (rc) {
   15642:	b968      	cbnz	r0, 15660 <boot_set_confirmed+0x3e>
        rc = BOOT_EFLASH;
        goto done;
    }

    if (state_primary_slot.copy_done == BOOT_FLAG_UNSET) {
   15644:	f89d 3006 	ldrb.w	r3, [sp, #6]
   15648:	2b03      	cmp	r3, #3
   1564a:	d00b      	beq.n	15664 <boot_set_confirmed+0x42>
        /* Swap never completed.  This is unexpected. */
        rc = BOOT_EBADVECT;
        goto done;
    }

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   1564c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15650:	2b03      	cmp	r3, #3
   15652:	d102      	bne.n	1565a <boot_set_confirmed+0x38>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   15654:	9800      	ldr	r0, [sp, #0]
   15656:	f7ff ff4f 	bl	154f8 <boot_write_image_ok>

done:
    flash_area_close(fap);
    return rc;
}
   1565a:	b003      	add	sp, #12
   1565c:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = BOOT_EFLASH;
   15660:	2001      	movs	r0, #1
   15662:	e7fa      	b.n	1565a <boot_set_confirmed+0x38>
        rc = BOOT_EBADVECT;
   15664:	2004      	movs	r0, #4
   15666:	e7f8      	b.n	1565a <boot_set_confirmed+0x38>

00015668 <split_app_init>:
static int8_t split_mode_cur;
static int8_t split_app_active;

void
split_app_init(void)
{
   15668:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1566a:	4b07      	ldr	r3, [pc, #28]	; (15688 <split_app_init+0x20>)
   1566c:	781b      	ldrb	r3, [r3, #0]
   1566e:	b92b      	cbnz	r3, 1567c <split_app_init+0x14>
   15670:	2300      	movs	r3, #0
   15672:	461a      	mov	r2, r3
   15674:	4619      	mov	r1, r3
   15676:	4618      	mov	r0, r3
   15678:	f7f3 fc3c 	bl	8ef4 <__assert_func>

    rc = split_conf_init();
   1567c:	f000 f882 	bl	15784 <split_conf_init>
    assert(rc == 0);
   15680:	2800      	cmp	r0, #0
   15682:	d1f5      	bne.n	15670 <split_app_init+0x8>
}
   15684:	bd08      	pop	{r3, pc}
   15686:	bf00      	nop
   15688:	20004ba8 	.word	0x20004ba8

0001568c <split_check_status>:

split_status_t
split_check_status(void)
{
   1568c:	b507      	push	{r0, r1, r2, lr}
    void *entry;
    int rc;

    rc = split_go(LOADER_IMAGE_SLOT, SPLIT_IMAGE_SLOT, &entry);
   1568e:	2101      	movs	r1, #1
   15690:	aa01      	add	r2, sp, #4
   15692:	2000      	movs	r0, #0
   15694:	f009 ffd2 	bl	1f63c <split_go>
    switch (rc) {
   15698:	3002      	adds	r0, #2
   1569a:	2802      	cmp	r0, #2
   1569c:	d905      	bls.n	156aa <split_check_status+0x1e>

    case SPLIT_GO_OK:
        return SPLIT_STATUS_MATCHING;

    default:
        assert(0);
   1569e:	2300      	movs	r3, #0
   156a0:	461a      	mov	r2, r3
   156a2:	4619      	mov	r1, r3
   156a4:	4618      	mov	r0, r3
   156a6:	f7f3 fc25 	bl	8ef4 <__assert_func>
        return SPLIT_STATUS_INVALID;
    }
}
   156aa:	b2c0      	uxtb	r0, r0
   156ac:	b003      	add	sp, #12
   156ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000156b4 <split_mode_get>:

split_mode_t
split_mode_get(void)
{
    return split_mode_cur;
}
   156b4:	4b01      	ldr	r3, [pc, #4]	; (156bc <split_mode_get+0x8>)
   156b6:	7818      	ldrb	r0, [r3, #0]
   156b8:	4770      	bx	lr
   156ba:	bf00      	nop
   156bc:	20004bcd 	.word	0x20004bcd

000156c0 <split_app_active_get>:

int
split_app_active_get(void)
{
    return split_app_active;
}
   156c0:	4b01      	ldr	r3, [pc, #4]	; (156c8 <split_app_active_get+0x8>)
   156c2:	f993 0000 	ldrsb.w	r0, [r3]
   156c6:	4770      	bx	lr
   156c8:	20004bcc 	.word	0x20004bcc

000156cc <split_mode_set>:
    /* XXX: For now, cast this as an integer.  This value should either be
     * treated as an enumeration generally (i.e. not read directly and assigned
     * from values in flash), or switched to a native type of integer.  However,
     * this is not a high priority change, so just cast it for now.
     */
    if ((int) split_mode < 0 || (int) split_mode >= SPLIT_MODE_CNT) {
   156cc:	2803      	cmp	r0, #3
        return SYS_EINVAL;
    }

    split_mode_cur = split_mode;
   156ce:	bf9d      	ittte	ls
   156d0:	4b02      	ldrls	r3, [pc, #8]	; (156dc <split_mode_set+0x10>)
   156d2:	7018      	strbls	r0, [r3, #0]
    return 0;
   156d4:	2000      	movls	r0, #0
        return SYS_EINVAL;
   156d6:	f06f 0001 	mvnhi.w	r0, #1
}
   156da:	4770      	bx	lr
   156dc:	20004bcd 	.word	0x20004bcd

000156e0 <split_conf_commit>:

static int
split_conf_commit(void)
{
    return 0;
}
   156e0:	2000      	movs	r0, #0
   156e2:	4770      	bx	lr

000156e4 <split_conf_export>:

static int
split_conf_export(void (*func)(char *name, char *val), enum conf_export_tgt tgt)
{
   156e4:	b513      	push	{r0, r1, r4, lr}
   156e6:	4604      	mov	r4, r0
    split_mode_t split_mode;
    char buf[4];

    split_mode = split_mode_get();
   156e8:	f7ff ffe4 	bl	156b4 <split_mode_get>
    conf_str_from_value(CONF_INT8, &split_mode, buf, sizeof(buf));
   156ec:	2304      	movs	r3, #4
    split_mode = split_mode_get();
   156ee:	f88d 0003 	strb.w	r0, [sp, #3]
    conf_str_from_value(CONF_INT8, &split_mode, buf, sizeof(buf));
   156f2:	eb0d 0203 	add.w	r2, sp, r3
   156f6:	f10d 0103 	add.w	r1, sp, #3
   156fa:	2002      	movs	r0, #2
   156fc:	f7fc f8c8 	bl	11890 <conf_str_from_value>
    func("split/status", buf);
   15700:	4802      	ldr	r0, [pc, #8]	; (1570c <split_conf_export+0x28>)
   15702:	a901      	add	r1, sp, #4
   15704:	47a0      	blx	r4
    return 0;
}
   15706:	2000      	movs	r0, #0
   15708:	b002      	add	sp, #8
   1570a:	bd10      	pop	{r4, pc}
   1570c:	00023362 	.word	0x00023362

00015710 <split_conf_set>:
    if (argc == 1) {
   15710:	2801      	cmp	r0, #1
{
   15712:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15714:	460b      	mov	r3, r1
   15716:	4604      	mov	r4, r0
   15718:	4615      	mov	r5, r2
    if (argc == 1) {
   1571a:	d112      	bne.n	15742 <split_conf_set+0x32>
        if (!strcmp(argv[0], "status")) {
   1571c:	490a      	ldr	r1, [pc, #40]	; (15748 <split_conf_set+0x38>)
   1571e:	6818      	ldr	r0, [r3, #0]
   15720:	f7f9 ff92 	bl	f648 <strcmp>
   15724:	b968      	cbnz	r0, 15742 <split_conf_set+0x32>
            rc = CONF_VALUE_SET(val, CONF_INT8, split_mode);
   15726:	4623      	mov	r3, r4
   15728:	f10d 0207 	add.w	r2, sp, #7
   1572c:	2102      	movs	r1, #2
   1572e:	4628      	mov	r0, r5
   15730:	f7fc f852 	bl	117d8 <conf_value_from_str>
            if (rc != 0) {
   15734:	b918      	cbnz	r0, 1573e <split_conf_set+0x2e>
            rc = split_mode_set(split_mode);
   15736:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1573a:	f7ff ffc7 	bl	156cc <split_mode_set>
}
   1573e:	b003      	add	sp, #12
   15740:	bd30      	pop	{r4, r5, pc}
    return -1;
   15742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15746:	e7fa      	b.n	1573e <split_conf_set+0x2e>
   15748:	00023368 	.word	0x00023368

0001574c <split_conf_get>:
    if (argc == 1) {
   1574c:	2801      	cmp	r0, #1
{
   1574e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15750:	460e      	mov	r6, r1
   15752:	4614      	mov	r4, r2
   15754:	461d      	mov	r5, r3
    if (argc == 1) {
   15756:	d111      	bne.n	1577c <split_conf_get+0x30>
        if (!strcmp(argv[0], "status")) {
   15758:	4909      	ldr	r1, [pc, #36]	; (15780 <split_conf_get+0x34>)
   1575a:	6830      	ldr	r0, [r6, #0]
   1575c:	f7f9 ff74 	bl	f648 <strcmp>
   15760:	b960      	cbnz	r0, 1577c <split_conf_get+0x30>
            split_mode = split_mode_get();
   15762:	f7ff ffa7 	bl	156b4 <split_mode_get>
            return conf_str_from_value(CONF_INT8, &split_mode, buf, max_len);
   15766:	462b      	mov	r3, r5
            split_mode = split_mode_get();
   15768:	f88d 0007 	strb.w	r0, [sp, #7]
            return conf_str_from_value(CONF_INT8, &split_mode, buf, max_len);
   1576c:	4622      	mov	r2, r4
   1576e:	f10d 0107 	add.w	r1, sp, #7
   15772:	2002      	movs	r0, #2
   15774:	f7fc f88c 	bl	11890 <conf_str_from_value>
}
   15778:	b002      	add	sp, #8
   1577a:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
   1577c:	2000      	movs	r0, #0
   1577e:	e7fb      	b.n	15778 <split_conf_get+0x2c>
   15780:	00023368 	.word	0x00023368

00015784 <split_conf_init>:
    rc = conf_register(&split_conf_handler);
   15784:	4801      	ldr	r0, [pc, #4]	; (1578c <split_conf_init+0x8>)
   15786:	f7fb bfe3 	b.w	11750 <conf_register>
   1578a:	bf00      	nop
   1578c:	20000878 	.word	0x20000878

00015790 <split_write_split>:

int
split_write_split(split_mode_t split_mode)
{
   15790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   15792:	f88d 0007 	strb.w	r0, [sp, #7]
    char str[CONF_STR_FROM_BYTES_LEN(sizeof(split_mode_t))];
    int rc;

    rc = split_mode_set(split_mode);
   15796:	f7ff ff99 	bl	156cc <split_mode_set>
    if (rc != 0) {
   1579a:	b958      	cbnz	r0, 157b4 <split_write_split+0x24>
        return rc;
    }

    if (!conf_str_from_value(CONF_INT8, &split_mode, str, sizeof(str))) {
   1579c:	2305      	movs	r3, #5
   1579e:	aa02      	add	r2, sp, #8
   157a0:	f10d 0107 	add.w	r1, sp, #7
   157a4:	2002      	movs	r0, #2
   157a6:	f7fc f873 	bl	11890 <conf_str_from_value>
   157aa:	b130      	cbz	r0, 157ba <split_write_split+0x2a>
        return -1;
    }
    return conf_save_one("split/status", str);
   157ac:	4804      	ldr	r0, [pc, #16]	; (157c0 <split_write_split+0x30>)
   157ae:	a902      	add	r1, sp, #8
   157b0:	f7fc f9fe 	bl	11bb0 <conf_save_one>
}
   157b4:	b005      	add	sp, #20
   157b6:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   157ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   157be:	e7f9      	b.n	157b4 <split_write_split+0x24>
   157c0:	00023362 	.word	0x00023362

000157c4 <base64_encode>:
    return -1;
}

int
base64_encode(const void *data, int size, char *s, uint8_t should_pad)
{
   157c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   157c6:	4615      	mov	r5, r2
    int c;
    const unsigned char *q;
    char *last;
    int diff;

    p = s;
   157c8:	4616      	mov	r6, r2

    q = (const unsigned char *) data;
    last = NULL;
   157ca:	2400      	movs	r4, #0
        i++;
        c *= 256;
        if (i < size)
            c += q[i];
        i++;
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   157cc:	4a22      	ldr	r2, [pc, #136]	; (15858 <base64_encode+0x94>)
    i = 0;
   157ce:	4627      	mov	r7, r4
    while (i < size) {
   157d0:	428f      	cmp	r7, r1
   157d2:	db0e      	blt.n	157f2 <base64_encode+0x2e>
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
        last = p;
        p += 4;
    }

    if (last) {
   157d4:	b14c      	cbz	r4, 157ea <base64_encode+0x26>
        diff = i - size;
   157d6:	1a7a      	subs	r2, r7, r1
        if (diff > 0) {
   157d8:	2a00      	cmp	r2, #0
   157da:	dd06      	ble.n	157ea <base64_encode+0x26>
            if (should_pad) {
                memset(last + (4 - diff), '=', diff);
   157dc:	f1c2 0004 	rsb	r0, r2, #4
   157e0:	4420      	add	r0, r4
            if (should_pad) {
   157e2:	b3b3      	cbz	r3, 15852 <base64_encode+0x8e>
                memset(last + (4 - diff), '=', diff);
   157e4:	213d      	movs	r1, #61	; 0x3d
   157e6:	f7f9 ff0a 	bl	f5fe <memset>
                p = last + (4 - diff);
            }
        }
    }

    *p = 0;
   157ea:	2300      	movs	r3, #0
   157ec:	7033      	strb	r3, [r6, #0]

    return (p - s);
}
   157ee:	1b70      	subs	r0, r6, r5
   157f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (i < size)
   157f2:	f107 0c01 	add.w	ip, r7, #1
        c = q[i++];
   157f6:	7804      	ldrb	r4, [r0, #0]
        if (i < size)
   157f8:	458c      	cmp	ip, r1
            c += q[i];
   157fa:	bfb8      	it	lt
   157fc:	f890 c001 	ldrblt.w	ip, [r0, #1]
        c *= 256;
   15800:	ea4f 2404 	mov.w	r4, r4, lsl #8
            c += q[i];
   15804:	bfb8      	it	lt
   15806:	4464      	addlt	r4, ip
        if (i < size)
   15808:	f107 0c02 	add.w	ip, r7, #2
   1580c:	458c      	cmp	ip, r1
            c += q[i];
   1580e:	bfb8      	it	lt
   15810:	f890 c002 	ldrblt.w	ip, [r0, #2]
        c *= 256;
   15814:	ea4f 2404 	mov.w	r4, r4, lsl #8
            c += q[i];
   15818:	bfb8      	it	lt
   1581a:	4464      	addlt	r4, ip
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   1581c:	ea4f 4ca4 	mov.w	ip, r4, asr #18
        i++;
   15820:	3703      	adds	r7, #3
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   15822:	f812 c00c 	ldrb.w	ip, [r2, ip]
   15826:	f886 c000 	strb.w	ip, [r6]
        p[1] = base64_chars[(c & 0x0003f000) >> 12];
   1582a:	f3c4 3c05 	ubfx	ip, r4, #12, #6
   1582e:	3003      	adds	r0, #3
   15830:	f812 c00c 	ldrb.w	ip, [r2, ip]
   15834:	f886 c001 	strb.w	ip, [r6, #1]
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   15838:	f3c4 1c85 	ubfx	ip, r4, #6, #6
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
   1583c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   15840:	f812 c00c 	ldrb.w	ip, [r2, ip]
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
   15844:	5d14      	ldrb	r4, [r2, r4]
   15846:	70f4      	strb	r4, [r6, #3]
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   15848:	f886 c002 	strb.w	ip, [r6, #2]
        p += 4;
   1584c:	4634      	mov	r4, r6
   1584e:	3604      	adds	r6, #4
   15850:	e7be      	b.n	157d0 <base64_encode+0xc>
                memset(last + (4 - diff), '=', diff);
   15852:	4606      	mov	r6, r0
   15854:	e7c9      	b.n	157ea <base64_encode+0x26>
   15856:	bf00      	nop
   15858:	00023375 	.word	0x00023375

0001585c <base64_pad>:

int
base64_pad(char *buf, int len)
{
   1585c:	b510      	push	{r4, lr}
    int remainder;

    remainder = len % 4;
    if (remainder == 0) {
   1585e:	f011 0403 	ands.w	r4, r1, #3
   15862:	d00a      	beq.n	1587a <base64_pad+0x1e>
    remainder = len % 4;
   15864:	4249      	negs	r1, r1
   15866:	f001 0103 	and.w	r1, r1, #3
   1586a:	bf58      	it	pl
   1586c:	424c      	negpl	r4, r1
        return (0);
    }

    memset(buf, '=', 4 - remainder);
   1586e:	f1c4 0404 	rsb	r4, r4, #4
   15872:	4622      	mov	r2, r4
   15874:	213d      	movs	r1, #61	; 0x3d
   15876:	f7f9 fec2 	bl	f5fe <memset>

    return (4 - remainder);
}
   1587a:	4620      	mov	r0, r4
   1587c:	bd10      	pop	{r4, pc}
	...

00015880 <base64_decode>:
    return (marker << 24) | val;
}

int
base64_decode(const char *str, void *data)
{
   15880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const char *p;
    unsigned char *q;

    q = data;
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   15884:	4f2a      	ldr	r7, [pc, #168]	; (15930 <base64_decode+0xb0>)
{
   15886:	460e      	mov	r6, r1
   15888:	1e45      	subs	r5, r0, #1
    q = data;
   1588a:	460c      	mov	r4, r1
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   1588c:	7869      	ldrb	r1, [r5, #1]
   1588e:	f105 0801 	add.w	r8, r5, #1
   15892:	b9f9      	cbnz	r1, 158d4 <base64_decode+0x54>
        if (marker < 2)
            *q++ = (val >> 8) & 0xff;
        if (marker < 1)
            *q++ = val & 0xff;
    }
    return q - (unsigned char *) data;
   15894:	1ba0      	subs	r0, r4, r6
}
   15896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if (marker > 0)
   1589a:	b982      	cbnz	r2, 158be <base64_decode+0x3e>
   1589c:	4824      	ldr	r0, [pc, #144]	; (15930 <base64_decode+0xb0>)
   1589e:	4682      	mov	sl, r0
   158a0:	4601      	mov	r1, r0
    for (p = base64_chars; *p; p++)
   158a2:	f810 eb01 	ldrb.w	lr, [r0], #1
   158a6:	f1be 0f00 	cmp.w	lr, #0
   158aa:	d102      	bne.n	158b2 <base64_decode+0x32>
    return -1;
   158ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   158b0:	e003      	b.n	158ba <base64_decode+0x3a>
        if (*p == c)
   158b2:	45f0      	cmp	r8, lr
   158b4:	d1f4      	bne.n	158a0 <base64_decode+0x20>
            return p - base64_chars;
   158b6:	eba1 010a 	sub.w	r1, r1, sl
            val += pos(token[i]);
   158ba:	440b      	add	r3, r1
   158bc:	e023      	b.n	15906 <base64_decode+0x86>
            return DECODE_ERROR;
   158be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   158c2:	e026      	b.n	15912 <base64_decode+0x92>
            *q++ = (val >> 8) & 0xff;
   158c4:	0a02      	lsrs	r2, r0, #8
   158c6:	7062      	strb	r2, [r4, #1]
        if (marker < 1)
   158c8:	b10b      	cbz	r3, 158ce <base64_decode+0x4e>
            *q++ = (val >> 8) & 0xff;
   158ca:	3402      	adds	r4, #2
   158cc:	e02a      	b.n	15924 <base64_decode+0xa4>
            *q++ = val & 0xff;
   158ce:	70a0      	strb	r0, [r4, #2]
   158d0:	3403      	adds	r4, #3
   158d2:	e027      	b.n	15924 <base64_decode+0xa4>
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   158d4:	293d      	cmp	r1, #61	; 0x3d
   158d6:	d004      	beq.n	158e2 <base64_decode+0x62>
   158d8:	4638      	mov	r0, r7
   158da:	f008 fbda 	bl	1e092 <strchr>
   158de:	2800      	cmp	r0, #0
   158e0:	d0d8      	beq.n	15894 <base64_decode+0x14>
    if (strlen(token) < 4)
   158e2:	4640      	mov	r0, r8
   158e4:	f7f9 febb 	bl	f65e <strlen>
   158e8:	2803      	cmp	r0, #3
   158ea:	d91d      	bls.n	15928 <base64_decode+0xa8>
    int marker = 0;
   158ec:	2200      	movs	r2, #0
   158ee:	46ac      	mov	ip, r5
    unsigned int val = 0;
   158f0:	4613      	mov	r3, r2
    for (i = 0; i < 4; i++) {
   158f2:	f105 0904 	add.w	r9, r5, #4
        if (token[i] == '=')
   158f6:	f81c 8f01 	ldrb.w	r8, [ip, #1]!
   158fa:	f1b8 0f3d 	cmp.w	r8, #61	; 0x3d
        val *= 64;
   158fe:	ea4f 1383 	mov.w	r3, r3, lsl #6
        if (token[i] == '=')
   15902:	d1ca      	bne.n	1589a <base64_decode+0x1a>
            marker++;
   15904:	3201      	adds	r2, #1
    for (i = 0; i < 4; i++) {
   15906:	45cc      	cmp	ip, r9
   15908:	d1f5      	bne.n	158f6 <base64_decode+0x76>
    if (marker > 2)
   1590a:	2a02      	cmp	r2, #2
   1590c:	dc0c      	bgt.n	15928 <base64_decode+0xa8>
    return (marker << 24) | val;
   1590e:	ea43 6002 	orr.w	r0, r3, r2, lsl #24
        if (val == DECODE_ERROR)
   15912:	1c42      	adds	r2, r0, #1
        unsigned int marker = (val >> 24) & 0xff;
   15914:	ea4f 6310 	mov.w	r3, r0, lsr #24
        if (val == DECODE_ERROR)
   15918:	d0bd      	beq.n	15896 <base64_decode+0x16>
        *q++ = (val >> 16) & 0xff;
   1591a:	0c02      	lsrs	r2, r0, #16
        if (marker < 2)
   1591c:	2b01      	cmp	r3, #1
        *q++ = (val >> 16) & 0xff;
   1591e:	7022      	strb	r2, [r4, #0]
        if (marker < 2)
   15920:	d9d0      	bls.n	158c4 <base64_decode+0x44>
        *q++ = (val >> 16) & 0xff;
   15922:	3401      	adds	r4, #1
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   15924:	3504      	adds	r5, #4
   15926:	e7b1      	b.n	1588c <base64_decode+0xc>
            return -1;
   15928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1592c:	e7b3      	b.n	15896 <base64_decode+0x16>
   1592e:	bf00      	nop
   15930:	00023375 	.word	0x00023375

00015934 <hex_format>:
{
    int i;
    uint8_t *src = (uint8_t *)src_v;
    char *tgt = dst;

    if (dst_len <= src_len * 2) {
   15934:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
{
   15938:	b570      	push	{r4, r5, r6, lr}
    if (dst_len <= src_len * 2) {
   1593a:	dd1a      	ble.n	15972 <hex_format+0x3e>
        return NULL;
    }
    for (i = 0; i < src_len; i++) {
        tgt[0] = hex_bytes[(src[i] >> 4) & 0xf];
   1593c:	4d0e      	ldr	r5, [pc, #56]	; (15978 <hex_format+0x44>)
   1593e:	3801      	subs	r0, #1
    for (i = 0; i < src_len; i++) {
   15940:	2300      	movs	r3, #0
        tgt[1] = hex_bytes[src[i] & 0xf];
   15942:	1c56      	adds	r6, r2, #1
    for (i = 0; i < src_len; i++) {
   15944:	428b      	cmp	r3, r1
   15946:	db06      	blt.n	15956 <hex_format+0x22>
        tgt += 2;
        dst_len -= 2;
    }
    *tgt = '\0';
   15948:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1594c:	2300      	movs	r3, #0
   1594e:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]
    return dst;
}
   15952:	4610      	mov	r0, r2
   15954:	bd70      	pop	{r4, r5, r6, pc}
        tgt[0] = hex_bytes[(src[i] >> 4) & 0xf];
   15956:	f810 4f01 	ldrb.w	r4, [r0, #1]!
   1595a:	0924      	lsrs	r4, r4, #4
   1595c:	5d2c      	ldrb	r4, [r5, r4]
   1595e:	f802 4013 	strb.w	r4, [r2, r3, lsl #1]
        tgt[1] = hex_bytes[src[i] & 0xf];
   15962:	7804      	ldrb	r4, [r0, #0]
   15964:	f004 040f 	and.w	r4, r4, #15
   15968:	5d2c      	ldrb	r4, [r5, r4]
   1596a:	f806 4013 	strb.w	r4, [r6, r3, lsl #1]
    for (i = 0; i < src_len; i++) {
   1596e:	3301      	adds	r3, #1
   15970:	e7e8      	b.n	15944 <hex_format+0x10>
        return NULL;
   15972:	2200      	movs	r2, #0
   15974:	e7ed      	b.n	15952 <hex_format+0x1e>
   15976:	bf00      	nop
   15978:	000233b6 	.word	0x000233b6

0001597c <hex_parse>:
 *
 * @return		-1 on failure; number of bytes of input
 */
int
hex_parse(const char *src, int src_len, void *dst_v, int dst_len)
{
   1597c:	b570      	push	{r4, r5, r6, lr}
    int i;
    uint8_t *dst = (uint8_t *)dst_v;
    char c;

    if (src_len & 0x1) {
   1597e:	f011 0401 	ands.w	r4, r1, #1
   15982:	d002      	beq.n	1598a <hex_parse+0xe>
        return -1;
   15984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        } else {
            *dst = c << 4;
        }
    }
    return src_len >> 1;
}
   15988:	bd70      	pop	{r4, r5, r6, pc}
    if (dst_len * 2 < src_len) {
   1598a:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
   1598e:	dcf9      	bgt.n	15984 <hex_parse+0x8>
    for (i = 0; i < src_len; i++, src++) {
   15990:	428c      	cmp	r4, r1
   15992:	db01      	blt.n	15998 <hex_parse+0x1c>
    return src_len >> 1;
   15994:	1048      	asrs	r0, r1, #1
   15996:	e7f7      	b.n	15988 <hex_parse+0xc>
        c = *src;
   15998:	5d03      	ldrb	r3, [r0, r4]
        if (isdigit((int) c)) {
   1599a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
   1599e:	2d09      	cmp	r5, #9
   159a0:	d80e      	bhi.n	159c0 <hex_parse+0x44>
            c -= '0';
   159a2:	b2eb      	uxtb	r3, r5
        if (i & 1) {
   159a4:	07e5      	lsls	r5, r4, #31
            *dst |= c;
   159a6:	bf4b      	itete	mi
   159a8:	4615      	movmi	r5, r2
            *dst = c << 4;
   159aa:	011b      	lslpl	r3, r3, #4
            *dst |= c;
   159ac:	f815 6b01 	ldrbmi.w	r6, [r5], #1
            *dst = c << 4;
   159b0:	b2db      	uxtbpl	r3, r3
            *dst |= c;
   159b2:	bf4c      	ite	mi
   159b4:	4333      	orrmi	r3, r6
            *dst = c << 4;
   159b6:	4615      	movpl	r5, r2
   159b8:	7013      	strb	r3, [r2, #0]
    for (i = 0; i < src_len; i++, src++) {
   159ba:	3401      	adds	r4, #1
   159bc:	462a      	mov	r2, r5
   159be:	e7e7      	b.n	15990 <hex_parse+0x14>
        } else if (c >= 'a' && c <= 'f') {
   159c0:	f1a3 0561 	sub.w	r5, r3, #97	; 0x61
   159c4:	2d05      	cmp	r5, #5
   159c6:	d802      	bhi.n	159ce <hex_parse+0x52>
            c -= ('a' - 10);
   159c8:	3b57      	subs	r3, #87	; 0x57
            c -= ('A' - 10);
   159ca:	b2db      	uxtb	r3, r3
   159cc:	e7ea      	b.n	159a4 <hex_parse+0x28>
        } else if (c >= 'A' && c <= 'F') {
   159ce:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
   159d2:	2d05      	cmp	r5, #5
   159d4:	d8d6      	bhi.n	15984 <hex_parse+0x8>
            c -= ('A' - 10);
   159d6:	3b37      	subs	r3, #55	; 0x37
   159d8:	e7f7      	b.n	159ca <hex_parse+0x4e>

000159da <cbor_target_address>:
cbor_target_address(const struct cbor_attr_t *cursor,
                    const struct cbor_array_t *parent, int offset)
{
    char *targetaddr = NULL;

    if (parent == NULL || parent->element_type != CborAttrStructObjectType) {
   159da:	b111      	cbz	r1, 159e2 <cbor_target_address+0x8>
   159dc:	780b      	ldrb	r3, [r1, #0]
   159de:	2b0a      	cmp	r3, #10
   159e0:	d016      	beq.n	15a10 <cbor_target_address+0x36>
        /* ordinary case - use the address in the cursor structure */
        switch (cursor->type) {
   159e2:	7903      	ldrb	r3, [r0, #4]
   159e4:	3b01      	subs	r3, #1
   159e6:	2b06      	cmp	r3, #6
   159e8:	d818      	bhi.n	15a1c <cbor_target_address+0x42>
   159ea:	e8df f003 	tbb	[pc, r3]
   159ee:	0808      	.short	0x0808
   159f0:	040e0c0c 	.word	0x040e0c0c
   159f4:	08          	.byte	0x08
   159f5:	00          	.byte	0x00
        case CborAttrUnsignedIntegerType:
            targetaddr = (char *)&cursor->addr.uinteger[offset];
            break;
#if FLOAT_SUPPORT
        case CborAttrFloatType:
            targetaddr = (char *)&cursor->addr.fval[offset];
   159f6:	6880      	ldr	r0, [r0, #8]
   159f8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
            break;
   159fc:	4770      	bx	lr
        case CborAttrDoubleType:
            targetaddr = (char *)&cursor->addr.real[offset];
   159fe:	6880      	ldr	r0, [r0, #8]
   15a00:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   15a04:	4770      	bx	lr
#endif
        case CborAttrByteStringType:
            targetaddr = (char *) cursor->addr.bytestring.data;
            break;
        case CborAttrTextStringType:
            targetaddr = cursor->addr.string;
   15a06:	6880      	ldr	r0, [r0, #8]
            break;
   15a08:	4770      	bx	lr
        case CborAttrBooleanType:
            targetaddr = (char *)&cursor->addr.boolean[offset];
   15a0a:	6880      	ldr	r0, [r0, #8]
            targetaddr = NULL;
            break;
        }
    } else {
        /* tricky case - hacking a member in an array of structures */
        targetaddr =
   15a0c:	4410      	add	r0, r2
   15a0e:	4770      	bx	lr
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   15a10:	6880      	ldr	r0, [r0, #8]
   15a12:	68cb      	ldr	r3, [r1, #12]
   15a14:	fb03 0202 	mla	r2, r3, r2, r0
        targetaddr =
   15a18:	6888      	ldr	r0, [r1, #8]
   15a1a:	e7f7      	b.n	15a0c <cbor_target_address+0x32>
        switch (cursor->type) {
   15a1c:	2000      	movs	r0, #0
            cursor->addr.offset;
    }
    return targetaddr;
}
   15a1e:	4770      	bx	lr

00015a20 <cbor_value_copy_text_string.part.0>:
{ return value->type == CborUndefinedType; }

/* Booleans */
CBOR_INLINE_API bool cbor_value_is_boolean(const CborValue *value)
{ return value->type == CborBooleanType; }
CBOR_INLINE_API CborError cbor_value_get_boolean(const CborValue *value, bool *result)
   15a20:	b508      	push	{r3, lr}
{
    assert(cbor_value_is_boolean(value));
   15a22:	2300      	movs	r3, #0
   15a24:	461a      	mov	r2, r3
   15a26:	4619      	mov	r1, r3
   15a28:	4618      	mov	r0, r3
   15a2a:	f7f3 fa63 	bl	8ef4 <__assert_func>

00015a2e <cbor_value_get_int64>:
    *result = _cbor_value_extract_int64_helper(value);
    return CborNoError;
}

CBOR_INLINE_API CborError cbor_value_get_int64(const CborValue *value, int64_t *result)
{
   15a2e:	b538      	push	{r3, r4, r5, lr}
    assert(cbor_value_is_integer(value));
   15a30:	7b83      	ldrb	r3, [r0, #14]
{
   15a32:	4605      	mov	r5, r0
   15a34:	460c      	mov	r4, r1
    assert(cbor_value_is_integer(value));
   15a36:	b10b      	cbz	r3, 15a3c <cbor_value_get_int64+0xe>
   15a38:	f7ff fff2 	bl	15a20 <cbor_value_copy_text_string.part.0>
                _cbor_value_decode_int64_internal(value) : value->extra;
   15a3c:	7bc3      	ldrb	r3, [r0, #15]
   15a3e:	f013 0301 	ands.w	r3, r3, #1
   15a42:	d00c      	beq.n	15a5e <cbor_value_get_int64+0x30>
   15a44:	f000 fd21 	bl	1648a <_cbor_value_decode_int64_internal>
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   15a48:	e9c4 0100 	strd	r0, r1, [r4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   15a4c:	7beb      	ldrb	r3, [r5, #15]
   15a4e:	079b      	lsls	r3, r3, #30
        *result = -*result - 1;
   15a50:	bf42      	ittt	mi
   15a52:	43c0      	mvnmi	r0, r0
   15a54:	43c9      	mvnmi	r1, r1
   15a56:	e9c4 0100 	strdmi	r0, r1, [r4]
    return CborNoError;
}
   15a5a:	2000      	movs	r0, #0
   15a5c:	bd38      	pop	{r3, r4, r5, pc}
                _cbor_value_decode_int64_internal(value) : value->extra;
   15a5e:	8980      	ldrh	r0, [r0, #12]
   15a60:	4619      	mov	r1, r3
   15a62:	e7f1      	b.n	15a48 <cbor_value_get_int64+0x1a>

00015a64 <cbor_value_get_double>:
}

CBOR_INLINE_API bool cbor_value_is_double(const CborValue *value)
{ return value->type == CborDoubleType; }
CBOR_INLINE_API CborError cbor_value_get_double(const CborValue *value, double *result)
{
   15a64:	b513      	push	{r0, r1, r4, lr}
    assert(cbor_value_is_double(value));
   15a66:	7b82      	ldrb	r2, [r0, #14]
   15a68:	2afb      	cmp	r2, #251	; 0xfb
{
   15a6a:	460c      	mov	r4, r1
    assert(cbor_value_is_double(value));
   15a6c:	d005      	beq.n	15a7a <cbor_value_get_double+0x16>
   15a6e:	2300      	movs	r3, #0
   15a70:	461a      	mov	r2, r3
   15a72:	4619      	mov	r1, r3
   15a74:	4618      	mov	r0, r3
   15a76:	f7f3 fa3d 	bl	8ef4 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   15a7a:	7bc3      	ldrb	r3, [r0, #15]
   15a7c:	07db      	lsls	r3, r3, #31
   15a7e:	d401      	bmi.n	15a84 <cbor_value_get_double+0x20>
   15a80:	f7ff ffce 	bl	15a20 <cbor_value_copy_text_string.part.0>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   15a84:	f000 fd01 	bl	1648a <_cbor_value_decode_int64_internal>
   15a88:	e9cd 0100 	strd	r0, r1, [sp]
    memcpy(result, &data, sizeof(*result));
   15a8c:	466b      	mov	r3, sp
   15a8e:	cb03      	ldmia	r3!, {r0, r1}
   15a90:	6020      	str	r0, [r4, #0]
    return CborNoError;
}
   15a92:	2000      	movs	r0, #0
    memcpy(result, &data, sizeof(*result));
   15a94:	6061      	str	r1, [r4, #4]
}
   15a96:	b002      	add	sp, #8
   15a98:	bd10      	pop	{r4, pc}

00015a9a <cbor_value_get_uint64>:
{
   15a9a:	b510      	push	{r4, lr}
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   15a9c:	7b83      	ldrb	r3, [r0, #14]
{
   15a9e:	460c      	mov	r4, r1
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   15aa0:	b963      	cbnz	r3, 15abc <cbor_value_get_uint64+0x22>
   15aa2:	7bc3      	ldrb	r3, [r0, #15]
   15aa4:	0799      	lsls	r1, r3, #30
   15aa6:	d409      	bmi.n	15abc <cbor_value_get_uint64+0x22>
                _cbor_value_decode_int64_internal(value) : value->extra;
   15aa8:	f013 0301 	ands.w	r3, r3, #1
   15aac:	d008      	beq.n	15ac0 <cbor_value_get_uint64+0x26>
   15aae:	f000 fcec 	bl	1648a <_cbor_value_decode_int64_internal>
   15ab2:	460b      	mov	r3, r1
    *result = _cbor_value_extract_int64_helper(value);
   15ab4:	e9c4 0300 	strd	r0, r3, [r4]
}
   15ab8:	2000      	movs	r0, #0
   15aba:	bd10      	pop	{r4, pc}
   15abc:	f7ff ffb0 	bl	15a20 <cbor_value_copy_text_string.part.0>
                _cbor_value_decode_int64_internal(value) : value->extra;
   15ac0:	8980      	ldrh	r0, [r0, #12]
   15ac2:	e7f7      	b.n	15ab4 <cbor_value_get_uint64+0x1a>

00015ac4 <cbor_read_array>:
    return err;
}

int
cbor_read_array(struct CborValue *value, const struct cbor_array_t *arr)
{
   15ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ac8:	b086      	sub	sp, #24
   15aca:	460d      	mov	r5, r1
    int off, arrcount;
    size_t len;
    void *lptr;
    char *tp;

    err = cbor_value_enter_container(value, &elem);
   15acc:	a902      	add	r1, sp, #8
{
   15ace:	4680      	mov	r8, r0
    err = cbor_value_enter_container(value, &elem);
   15ad0:	f000 fd1c 	bl	1650c <cbor_value_enter_container>
    if (err) {
   15ad4:	4604      	mov	r4, r0
   15ad6:	b110      	cbz	r0, 15ade <cbor_read_array+0x1a>
        err |= CborErrorDataTooLarge;
        cbor_value_advance(&elem);
    }
    err |= cbor_value_leave_container(value, &elem);
    return err;
}
   15ad8:	b006      	add	sp, #24
   15ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tp = arr->arr.strings.store;
   15ade:	68af      	ldr	r7, [r5, #8]
    for (off = 0; off < arr->maxlen; off++) {
   15ae0:	4606      	mov	r6, r0
   15ae2:	696b      	ldr	r3, [r5, #20]
   15ae4:	42b3      	cmp	r3, r6
   15ae6:	dd24      	ble.n	15b32 <cbor_read_array+0x6e>
        switch (arr->element_type) {
   15ae8:	782b      	ldrb	r3, [r5, #0]
   15aea:	3b01      	subs	r3, #1
   15aec:	2b09      	cmp	r3, #9
   15aee:	d862      	bhi.n	15bb6 <cbor_read_array+0xf2>
   15af0:	e8df f003 	tbb	[pc, r3]
   15af4:	4161332b 	.word	0x4161332b
   15af8:	613a3a05 	.word	0x613a3a05
   15afc:	5a61      	.short	0x5a61
    assert(cbor_value_is_boolean(value));
   15afe:	f89d 1016 	ldrb.w	r1, [sp, #22]
            lptr = &arr->arr.booleans.store[off];
   15b02:	686a      	ldr	r2, [r5, #4]
            err |= cbor_value_get_boolean(&elem, lptr);
   15b04:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   15b08:	29f5      	cmp	r1, #245	; 0xf5
   15b0a:	d001      	beq.n	15b10 <cbor_read_array+0x4c>
   15b0c:	f7ff ff88 	bl	15a20 <cbor_value_copy_text_string.part.0>
    *result = !!value->extra;
   15b10:	3b00      	subs	r3, #0
   15b12:	bf18      	it	ne
   15b14:	2301      	movne	r3, #1
   15b16:	5593      	strb	r3, [r2, r6]
        if (arr->element_type != CborAttrStructObjectType) {
   15b18:	782b      	ldrb	r3, [r5, #0]
   15b1a:	2b0a      	cmp	r3, #10
        arrcount++;
   15b1c:	f106 0601 	add.w	r6, r6, #1
        if (arr->element_type != CborAttrStructObjectType) {
   15b20:	d003      	beq.n	15b2a <cbor_read_array+0x66>
            err |= cbor_value_advance(&elem);
   15b22:	a802      	add	r0, sp, #8
   15b24:	f000 fda1 	bl	1666a <cbor_value_advance>
   15b28:	4304      	orrs	r4, r0
        if (!cbor_value_is_valid(&elem)) {
   15b2a:	f89d 3016 	ldrb.w	r3, [sp, #22]
   15b2e:	2bff      	cmp	r3, #255	; 0xff
   15b30:	d1d7      	bne.n	15ae2 <cbor_read_array+0x1e>
    if (arr->count) {
   15b32:	692b      	ldr	r3, [r5, #16]
   15b34:	b103      	cbz	r3, 15b38 <cbor_read_array+0x74>
        *arr->count = arrcount;
   15b36:	601e      	str	r6, [r3, #0]
    while (!cbor_value_at_end(&elem)) {
   15b38:	9b04      	ldr	r3, [sp, #16]
   15b3a:	2b00      	cmp	r3, #0
   15b3c:	d13e      	bne.n	15bbc <cbor_read_array+0xf8>
    err |= cbor_value_leave_container(value, &elem);
   15b3e:	a902      	add	r1, sp, #8
   15b40:	4640      	mov	r0, r8
   15b42:	f000 fd29 	bl	16598 <cbor_value_leave_container>
   15b46:	4320      	orrs	r0, r4
    return err;
   15b48:	e7c6      	b.n	15ad8 <cbor_read_array+0x14>
            lptr = &arr->arr.integers.store[off];
   15b4a:	6869      	ldr	r1, [r5, #4]
            err |= cbor_value_get_int64(&elem, lptr);
   15b4c:	a802      	add	r0, sp, #8
   15b4e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
   15b52:	f7ff ff6c 	bl	15a2e <cbor_value_get_int64>
            err |= cbor_value_get_uint64(&elem, lptr);
   15b56:	4304      	orrs	r4, r0
            break;
   15b58:	e7de      	b.n	15b18 <cbor_read_array+0x54>
            lptr = &arr->arr.uintegers.store[off];
   15b5a:	6869      	ldr	r1, [r5, #4]
            err |= cbor_value_get_uint64(&elem, lptr);
   15b5c:	a802      	add	r0, sp, #8
   15b5e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
   15b62:	f7ff ff9a 	bl	15a9a <cbor_value_get_uint64>
   15b66:	e7f6      	b.n	15b56 <cbor_read_array+0x92>
            lptr = &arr->arr.reals.store[off];
   15b68:	6869      	ldr	r1, [r5, #4]
            err |= cbor_value_get_double(&elem, lptr);
   15b6a:	a802      	add	r0, sp, #8
   15b6c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
   15b70:	f7ff ff78 	bl	15a64 <cbor_value_get_double>
   15b74:	e7ef      	b.n	15b56 <cbor_read_array+0x92>
            len = arr->arr.strings.storelen - (tp - arr->arr.strings.store);
   15b76:	68ab      	ldr	r3, [r5, #8]
   15b78:	1afa      	subs	r2, r7, r3
   15b7a:	68eb      	ldr	r3, [r5, #12]
   15b7c:	1a9b      	subs	r3, r3, r2
   15b7e:	9301      	str	r3, [sp, #4]
    assert(cbor_value_is_text_string(value));
   15b80:	f89d 3016 	ldrb.w	r3, [sp, #22]
   15b84:	2b60      	cmp	r3, #96	; 0x60
   15b86:	d001      	beq.n	15b8c <cbor_read_array+0xc8>
   15b88:	f7ff ff4a 	bl	15a20 <cbor_value_copy_text_string.part.0>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   15b8c:	2300      	movs	r3, #0
   15b8e:	4639      	mov	r1, r7
   15b90:	aa01      	add	r2, sp, #4
   15b92:	a802      	add	r0, sp, #8
   15b94:	f000 fd18 	bl	165c8 <_cbor_value_copy_string>
            arr->arr.strings.ptrs[off] = tp;
   15b98:	686b      	ldr	r3, [r5, #4]
   15b9a:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
            tp += len + 1;
   15b9e:	9b01      	ldr	r3, [sp, #4]
   15ba0:	3301      	adds	r3, #1
            err |= cbor_value_copy_text_string(&elem, tp, &len, NULL);
   15ba2:	4304      	orrs	r4, r0
            tp += len + 1;
   15ba4:	441f      	add	r7, r3
            break;
   15ba6:	e7b7      	b.n	15b18 <cbor_read_array+0x54>
            err |= cbor_internal_read_object(&elem, arr->arr.objects.subtype,
   15ba8:	6869      	ldr	r1, [r5, #4]
   15baa:	4633      	mov	r3, r6
   15bac:	462a      	mov	r2, r5
   15bae:	a802      	add	r0, sp, #8
   15bb0:	f000 f80a 	bl	15bc8 <cbor_internal_read_object>
   15bb4:	e7cf      	b.n	15b56 <cbor_read_array+0x92>
            err |= CborErrorIllegalType;
   15bb6:	f444 7482 	orr.w	r4, r4, #260	; 0x104
            break;
   15bba:	e7ad      	b.n	15b18 <cbor_read_array+0x54>
        cbor_value_advance(&elem);
   15bbc:	a802      	add	r0, sp, #8
        err |= CborErrorDataTooLarge;
   15bbe:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
        cbor_value_advance(&elem);
   15bc2:	f000 fd52 	bl	1666a <cbor_value_advance>
   15bc6:	e7b7      	b.n	15b38 <cbor_read_array+0x74>

00015bc8 <cbor_internal_read_object>:
{
   15bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bcc:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
   15bd0:	4607      	mov	r7, r0
   15bd2:	9101      	str	r1, [sp, #4]
   15bd4:	4691      	mov	r9, r2
   15bd6:	469a      	mov	sl, r3
   15bd8:	f101 0420 	add.w	r4, r1, #32
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   15bdc:	f854 3c20 	ldr.w	r3, [r4, #-32]
   15be0:	f1a4 0520 	sub.w	r5, r4, #32
   15be4:	bb0b      	cbnz	r3, 15c2a <cbor_internal_read_object+0x62>
    if (cbor_value_is_map(root_value)) {
   15be6:	7bbb      	ldrb	r3, [r7, #14]
   15be8:	2ba0      	cmp	r3, #160	; 0xa0
   15bea:	f040 811d 	bne.w	15e28 <cbor_internal_read_object+0x260>
        err |= cbor_value_enter_container(root_value, &cur_value);
   15bee:	a907      	add	r1, sp, #28
   15bf0:	4638      	mov	r0, r7
   15bf2:	f000 fc8b 	bl	1650c <cbor_value_enter_container>
   15bf6:	4604      	mov	r4, r0
{ return value && value->type != CborInvalidType; }
   15bf8:	f89d 602a 	ldrb.w	r6, [sp, #42]	; 0x2a
    while (cbor_value_is_valid(&cur_value) && !err) {
   15bfc:	2eff      	cmp	r6, #255	; 0xff
   15bfe:	f000 8107 	beq.w	15e10 <cbor_internal_read_object+0x248>
   15c02:	2c00      	cmp	r4, #0
   15c04:	d142      	bne.n	15c8c <cbor_internal_read_object+0xc4>
        if (cbor_value_is_text_string(&cur_value)) {
   15c06:	2e60      	cmp	r6, #96	; 0x60
   15c08:	d145      	bne.n	15c96 <cbor_internal_read_object+0xce>
            if (cbor_value_calculate_string_length(&cur_value, &len) == 0) {
   15c0a:	a905      	add	r1, sp, #20
   15c0c:	a807      	add	r0, sp, #28
   15c0e:	f000 fd3b 	bl	16688 <cbor_value_calculate_string_length>
   15c12:	bb80      	cbnz	r0, 15c76 <cbor_internal_read_object+0xae>
                if (len > MYNEWT_VAL(CBORATTR_MAX_SIZE)) {
   15c14:	9b05      	ldr	r3, [sp, #20]
   15c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   15c1a:	f200 8102 	bhi.w	15e22 <cbor_internal_read_object+0x25a>
    assert(cbor_value_is_text_string(value));
   15c1e:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   15c22:	2b60      	cmp	r3, #96	; 0x60
   15c24:	d020      	beq.n	15c68 <cbor_internal_read_object+0xa0>
   15c26:	f7ff fefb 	bl	15a20 <cbor_value_copy_text_string.part.0>
        if (!cursor->nodefault) {
   15c2a:	7b23      	ldrb	r3, [r4, #12]
   15c2c:	b993      	cbnz	r3, 15c54 <cbor_internal_read_object+0x8c>
            lptr = cbor_target_address(cursor, parent, offset);
   15c2e:	4652      	mov	r2, sl
   15c30:	4649      	mov	r1, r9
   15c32:	4628      	mov	r0, r5
   15c34:	f7ff fed1 	bl	159da <cbor_target_address>
            if (lptr != NULL) {
   15c38:	b160      	cbz	r0, 15c54 <cbor_internal_read_object+0x8c>
                switch (cursor->type) {
   15c3a:	f814 3c1c 	ldrb.w	r3, [r4, #-28]
   15c3e:	3b01      	subs	r3, #1
   15c40:	2b06      	cmp	r3, #6
   15c42:	d807      	bhi.n	15c54 <cbor_internal_read_object+0x8c>
   15c44:	e8df f003 	tbb	[pc, r3]
   15c48:	06060b0b 	.word	0x06060b0b
   15c4c:	0804      	.short	0x0804
   15c4e:	0b          	.byte	0x0b
   15c4f:	00          	.byte	0x00
                    memcpy(lptr, &cursor->dflt.boolean, sizeof(bool));
   15c50:	7823      	ldrb	r3, [r4, #0]
   15c52:	7003      	strb	r3, [r0, #0]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   15c54:	3430      	adds	r4, #48	; 0x30
   15c56:	e7c1      	b.n	15bdc <cbor_internal_read_object+0x14>
                    memcpy(lptr, &cursor->dflt.fval, sizeof(float));
   15c58:	6a2b      	ldr	r3, [r5, #32]
   15c5a:	6003      	str	r3, [r0, #0]
                    break;
   15c5c:	e7fa      	b.n	15c54 <cbor_internal_read_object+0x8c>
                    memcpy(lptr, &cursor->dflt.real, sizeof(double));
   15c5e:	6823      	ldr	r3, [r4, #0]
   15c60:	6003      	str	r3, [r0, #0]
   15c62:	6863      	ldr	r3, [r4, #4]
   15c64:	6043      	str	r3, [r0, #4]
                    break;
   15c66:	e7f5      	b.n	15c54 <cbor_internal_read_object+0x8c>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   15c68:	4623      	mov	r3, r4
   15c6a:	aa05      	add	r2, sp, #20
   15c6c:	a90b      	add	r1, sp, #44	; 0x2c
   15c6e:	a807      	add	r0, sp, #28
   15c70:	f000 fcaa 	bl	165c8 <_cbor_value_copy_string>
   15c74:	4604      	mov	r4, r0
            err |= cbor_value_advance(&cur_value);
   15c76:	a807      	add	r0, sp, #28
   15c78:	f000 fcf7 	bl	1666a <cbor_value_advance>
{ return value && value->type != CborInvalidType; }
   15c7c:	f89d 602a 	ldrb.w	r6, [sp, #42]	; 0x2a
            if (cbor_value_is_valid(&cur_value)) {
   15c80:	2eff      	cmp	r6, #255	; 0xff
            err |= cbor_value_advance(&cur_value);
   15c82:	ea44 0400 	orr.w	r4, r4, r0
            if (cbor_value_is_valid(&cur_value)) {
   15c86:	d108      	bne.n	15c9a <cbor_internal_read_object+0xd2>
                err |= CborErrorIllegalType;
   15c88:	f444 7482 	orr.w	r4, r4, #260	; 0x104
    return err;
   15c8c:	4620      	mov	r0, r4
}
   15c8e:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
   15c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            attrbuf[0] = '\0';
   15c96:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
                    attrbuf[0] == '\0') {
   15c9a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
                } else if (strlen(cursor->attribute) == len &&
   15c9e:	9a05      	ldr	r2, [sp, #20]
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   15ca0:	9d01      	ldr	r5, [sp, #4]
                    attrbuf[0] == '\0') {
   15ca2:	9302      	str	r3, [sp, #8]
        best_match = NULL;
   15ca4:	f04f 0800 	mov.w	r8, #0
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   15ca8:	f8d5 b000 	ldr.w	fp, [r5]
   15cac:	f1bb 0f00 	cmp.w	fp, #0
   15cb0:	d104      	bne.n	15cbc <cbor_internal_read_object+0xf4>
        if (!cursor->attribute && best_match) {
   15cb2:	f1b8 0f00 	cmp.w	r8, #0
   15cb6:	bf18      	it	ne
   15cb8:	4645      	movne	r5, r8
   15cba:	e01e      	b.n	15cfa <cbor_internal_read_object+0x132>
    switch (at) {
   15cbc:	7929      	ldrb	r1, [r5, #4]
   15cbe:	3901      	subs	r1, #1
   15cc0:	290a      	cmp	r1, #10
   15cc2:	d830      	bhi.n	15d26 <cbor_internal_read_object+0x15e>
   15cc4:	e8df f001 	tbb	[pc, r1]
   15cc8:	312d0606 	.word	0x312d0606
   15ccc:	39373533 	.word	0x39373533
   15cd0:	2f3b      	.short	0x2f3b
   15cd2:	3d          	.byte	0x3d
   15cd3:	00          	.byte	0x00
        if (ct == CborIntegerType) {
   15cd4:	bb3e      	cbnz	r6, 15d26 <cbor_internal_read_object+0x15e>
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   15cd6:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   15cda:	d101      	bne.n	15ce0 <cbor_internal_read_object+0x118>
   15cdc:	9b02      	ldr	r3, [sp, #8]
   15cde:	b393      	cbz	r3, 15d46 <cbor_internal_read_object+0x17e>
                } else if (strlen(cursor->attribute) == len &&
   15ce0:	4658      	mov	r0, fp
   15ce2:	9203      	str	r2, [sp, #12]
   15ce4:	f7f9 fcbb 	bl	f65e <strlen>
   15ce8:	9a03      	ldr	r2, [sp, #12]
   15cea:	4290      	cmp	r0, r2
   15cec:	d11b      	bne.n	15d26 <cbor_internal_read_object+0x15e>
                    !memcmp(cursor->attribute, attrbuf, len)) {
   15cee:	a90b      	add	r1, sp, #44	; 0x2c
   15cf0:	4658      	mov	r0, fp
   15cf2:	f7f9 fc53 	bl	f59c <memcmp>
                } else if (strlen(cursor->attribute) == len &&
   15cf6:	9a03      	ldr	r2, [sp, #12]
   15cf8:	b9a8      	cbnz	r0, 15d26 <cbor_internal_read_object+0x15e>
        if (cursor->attribute != NULL) {
   15cfa:	682b      	ldr	r3, [r5, #0]
   15cfc:	b38b      	cbz	r3, 15d62 <cbor_internal_read_object+0x19a>
            lptr = cbor_target_address(cursor, parent, offset);
   15cfe:	4652      	mov	r2, sl
   15d00:	4649      	mov	r1, r9
   15d02:	4628      	mov	r0, r5
   15d04:	f7ff fe69 	bl	159da <cbor_target_address>
            switch (cursor->type) {
   15d08:	792b      	ldrb	r3, [r5, #4]
   15d0a:	3b01      	subs	r3, #1
            lptr = cbor_target_address(cursor, parent, offset);
   15d0c:	4606      	mov	r6, r0
            switch (cursor->type) {
   15d0e:	2b0a      	cmp	r3, #10
   15d10:	d87b      	bhi.n	15e0a <cbor_internal_read_object+0x242>
   15d12:	e8df f003 	tbb	[pc, r3]
   15d16:	302a      	.short	0x302a
   15d18:	351a5e4d 	.word	0x351a5e4d
   15d1c:	7a736c48 	.word	0x7a736c48
   15d20:	26          	.byte	0x26
   15d21:	00          	.byte	0x00
        if (ct == CborByteStringType) {
   15d22:	2e40      	cmp	r6, #64	; 0x40
        if (ct == CborNullType) {
   15d24:	d0d7      	beq.n	15cd6 <cbor_internal_read_object+0x10e>
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   15d26:	3530      	adds	r5, #48	; 0x30
   15d28:	e7be      	b.n	15ca8 <cbor_internal_read_object+0xe0>
        if (ct == CborTextStringType) {
   15d2a:	2e60      	cmp	r6, #96	; 0x60
   15d2c:	e7fa      	b.n	15d24 <cbor_internal_read_object+0x15c>
        if (ct == CborBooleanType) {
   15d2e:	2ef5      	cmp	r6, #245	; 0xf5
   15d30:	d0d1      	beq.n	15cd6 <cbor_internal_read_object+0x10e>
        if (ct == CborFloatType) {
   15d32:	2efa      	cmp	r6, #250	; 0xfa
   15d34:	e7f6      	b.n	15d24 <cbor_internal_read_object+0x15c>
        if (ct == CborDoubleType) {
   15d36:	2efb      	cmp	r6, #251	; 0xfb
   15d38:	e7f4      	b.n	15d24 <cbor_internal_read_object+0x15c>
        if (ct == CborArrayType) {
   15d3a:	2e80      	cmp	r6, #128	; 0x80
   15d3c:	e7f2      	b.n	15d24 <cbor_internal_read_object+0x15c>
        if (ct == CborMapType) {
   15d3e:	2ea0      	cmp	r6, #160	; 0xa0
   15d40:	e7f0      	b.n	15d24 <cbor_internal_read_object+0x15c>
        if (ct == CborNullType) {
   15d42:	2ef6      	cmp	r6, #246	; 0xf6
   15d44:	e7ee      	b.n	15d24 <cbor_internal_read_object+0x15c>
   15d46:	46a8      	mov	r8, r5
   15d48:	e7ed      	b.n	15d26 <cbor_internal_read_object+0x15e>
    assert(cbor_value_is_boolean(value));
   15d4a:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
   15d4e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   15d52:	2af5      	cmp	r2, #245	; 0xf5
   15d54:	d001      	beq.n	15d5a <cbor_internal_read_object+0x192>
   15d56:	f7ff fe63 	bl	15a20 <cbor_value_copy_text_string.part.0>
    *result = !!value->extra;
   15d5a:	3b00      	subs	r3, #0
   15d5c:	bf18      	it	ne
   15d5e:	2301      	movne	r3, #1
   15d60:	7003      	strb	r3, [r0, #0]
        cbor_value_advance(&cur_value);
   15d62:	a807      	add	r0, sp, #28
   15d64:	f000 fc81 	bl	1666a <cbor_value_advance>
   15d68:	e746      	b.n	15bf8 <cbor_internal_read_object+0x30>
                err |= cbor_value_get_int64(&cur_value, lptr);
   15d6a:	4601      	mov	r1, r0
   15d6c:	a807      	add	r0, sp, #28
   15d6e:	f7ff fe5e 	bl	15a2e <cbor_value_get_int64>
                err |= cbor_value_get_uint64(&cur_value, lptr);
   15d72:	4304      	orrs	r4, r0
                break;
   15d74:	e7f5      	b.n	15d62 <cbor_internal_read_object+0x19a>
                err |= cbor_value_get_uint64(&cur_value, lptr);
   15d76:	4601      	mov	r1, r0
   15d78:	a807      	add	r0, sp, #28
   15d7a:	f7ff fe8e 	bl	15a9a <cbor_value_get_uint64>
   15d7e:	e7f8      	b.n	15d72 <cbor_internal_read_object+0x1aa>
    assert(cbor_value_is_float(value));
   15d80:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   15d84:	2bfa      	cmp	r3, #250	; 0xfa
   15d86:	d005      	beq.n	15d94 <cbor_internal_read_object+0x1cc>
   15d88:	2300      	movs	r3, #0
   15d8a:	461a      	mov	r2, r3
   15d8c:	4619      	mov	r1, r3
   15d8e:	4618      	mov	r0, r3
   15d90:	f7f3 f8b0 	bl	8ef4 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   15d94:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   15d98:	07db      	lsls	r3, r3, #31
   15d9a:	d5f5      	bpl.n	15d88 <cbor_internal_read_object+0x1c0>
    uint32_t data = (uint32_t)_cbor_value_decode_int64_internal(value);
   15d9c:	a807      	add	r0, sp, #28
   15d9e:	f000 fb74 	bl	1648a <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   15da2:	6030      	str	r0, [r6, #0]
                break;
   15da4:	e7dd      	b.n	15d62 <cbor_internal_read_object+0x19a>
                err |= cbor_value_get_double(&cur_value, lptr);
   15da6:	4601      	mov	r1, r0
   15da8:	a807      	add	r0, sp, #28
   15daa:	f7ff fe5b 	bl	15a64 <cbor_value_get_double>
   15dae:	e7e0      	b.n	15d72 <cbor_internal_read_object+0x1aa>
                size_t len = cursor->len;
   15db0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15db2:	9306      	str	r3, [sp, #24]
    assert(cbor_value_is_byte_string(value));
   15db4:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   15db8:	2b40      	cmp	r3, #64	; 0x40
   15dba:	d1e5      	bne.n	15d88 <cbor_internal_read_object+0x1c0>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   15dbc:	2300      	movs	r3, #0
   15dbe:	aa06      	add	r2, sp, #24
   15dc0:	4601      	mov	r1, r0
   15dc2:	a807      	add	r0, sp, #28
   15dc4:	f000 fc00 	bl	165c8 <_cbor_value_copy_string>
                *cursor->addr.bytestring.len = len;
   15dc8:	68eb      	ldr	r3, [r5, #12]
   15dca:	9a06      	ldr	r2, [sp, #24]
   15dcc:	601a      	str	r2, [r3, #0]
                err |= cbor_value_copy_byte_string(&cur_value, lptr,
   15dce:	4304      	orrs	r4, r0
                break;
   15dd0:	e7c7      	b.n	15d62 <cbor_internal_read_object+0x19a>
                size_t len = cursor->len;
   15dd2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15dd4:	9306      	str	r3, [sp, #24]
    assert(cbor_value_is_text_string(value));
   15dd6:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   15dda:	2b60      	cmp	r3, #96	; 0x60
   15ddc:	f47f af23 	bne.w	15c26 <cbor_internal_read_object+0x5e>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   15de0:	4601      	mov	r1, r0
   15de2:	2300      	movs	r3, #0
   15de4:	aa06      	add	r2, sp, #24
   15de6:	a807      	add	r0, sp, #28
   15de8:	f000 fbee 	bl	165c8 <_cbor_value_copy_string>
   15dec:	e7c1      	b.n	15d72 <cbor_internal_read_object+0x1aa>
                err |= cbor_read_array(&cur_value, &cursor->addr.array);
   15dee:	f105 0108 	add.w	r1, r5, #8
   15df2:	a807      	add	r0, sp, #28
   15df4:	f7ff fe66 	bl	15ac4 <cbor_read_array>
                err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   15df8:	4304      	orrs	r4, r0
                continue;
   15dfa:	e6fd      	b.n	15bf8 <cbor_internal_read_object+0x30>
                err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   15dfc:	2300      	movs	r3, #0
   15dfe:	68a9      	ldr	r1, [r5, #8]
   15e00:	461a      	mov	r2, r3
   15e02:	a807      	add	r0, sp, #28
   15e04:	f7ff fee0 	bl	15bc8 <cbor_internal_read_object>
   15e08:	e7f6      	b.n	15df8 <cbor_internal_read_object+0x230>
                err |= CborErrorIllegalType;
   15e0a:	f444 7482 	orr.w	r4, r4, #260	; 0x104
   15e0e:	e7a8      	b.n	15d62 <cbor_internal_read_object+0x19a>
    if (!err) {
   15e10:	2c00      	cmp	r4, #0
   15e12:	f47f af3b 	bne.w	15c8c <cbor_internal_read_object+0xc4>
        err |= cbor_value_leave_container(root_value, &cur_value);
   15e16:	a907      	add	r1, sp, #28
   15e18:	4638      	mov	r0, r7
   15e1a:	f000 fbbd 	bl	16598 <cbor_value_leave_container>
   15e1e:	4604      	mov	r4, r0
   15e20:	e734      	b.n	15c8c <cbor_internal_read_object+0xc4>
                    err |= CborErrorDataTooLarge;
   15e22:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15e26:	e731      	b.n	15c8c <cbor_internal_read_object+0xc4>
        return err;
   15e28:	f44f 7082 	mov.w	r0, #260	; 0x104
   15e2c:	e72f      	b.n	15c8e <cbor_internal_read_object+0xc6>

00015e2e <cbor_read_object>:
int
cbor_read_object(struct CborValue *value, const struct cbor_attr_t *attrs)
{
    int st;

    st = cbor_internal_read_object(value, attrs, NULL, 0);
   15e2e:	2300      	movs	r3, #0
   15e30:	461a      	mov	r2, r3
   15e32:	f7ff bec9 	b.w	15bc8 <cbor_internal_read_object>

00015e36 <cbor_mbuf_reader_cpy>:
}

static uintptr_t
cbor_mbuf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int offset,
                     size_t len)
{
   15e36:	b538      	push	{r3, r4, r5, lr}
    int rc;
    struct cbor_mbuf_reader *cb = (struct cbor_mbuf_reader *) d;

    rc = os_mbuf_copydata(cb->m, offset + cb->init_off, len, dst);
   15e38:	69c4      	ldr	r4, [r0, #28]
   15e3a:	6a00      	ldr	r0, [r0, #32]
{
   15e3c:	4615      	mov	r5, r2
   15e3e:	461a      	mov	r2, r3
    rc = os_mbuf_copydata(cb->m, offset + cb->init_off, len, dst);
   15e40:	460b      	mov	r3, r1
   15e42:	1929      	adds	r1, r5, r4
   15e44:	f7f4 fb31 	bl	a4aa <os_mbuf_copydata>
    if (rc == 0) {
        return true;
    }
    return false;
}
   15e48:	fab0 f080 	clz	r0, r0
   15e4c:	0940      	lsrs	r0, r0, #5
   15e4e:	bd38      	pop	{r3, r4, r5, pc}

00015e50 <cbor_mbuf_reader_get8>:
{
   15e50:	b513      	push	{r0, r1, r4, lr}
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   15e52:	69c4      	ldr	r4, [r0, #28]
   15e54:	6a00      	ldr	r0, [r0, #32]
   15e56:	f10d 0307 	add.w	r3, sp, #7
   15e5a:	2201      	movs	r2, #1
   15e5c:	4421      	add	r1, r4
   15e5e:	f7f4 fb24 	bl	a4aa <os_mbuf_copydata>
}
   15e62:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15e66:	b002      	add	sp, #8
   15e68:	bd10      	pop	{r4, pc}

00015e6a <cbor_mbuf_reader_cmp>:
{
   15e6a:	b538      	push	{r3, r4, r5, lr}
    return os_mbuf_cmpf(cb->m, offset + cb->init_off, buf, len) == 0;
   15e6c:	69c4      	ldr	r4, [r0, #28]
   15e6e:	6a00      	ldr	r0, [r0, #32]
{
   15e70:	4615      	mov	r5, r2
    return os_mbuf_cmpf(cb->m, offset + cb->init_off, buf, len) == 0;
   15e72:	460a      	mov	r2, r1
   15e74:	1929      	adds	r1, r5, r4
   15e76:	f7f4 fb8a 	bl	a58e <os_mbuf_cmpf>
}
   15e7a:	fab0 f080 	clz	r0, r0
   15e7e:	0940      	lsrs	r0, r0, #5
   15e80:	bd38      	pop	{r3, r4, r5, pc}

00015e82 <cbor_mbuf_reader_get64>:
{
   15e82:	b513      	push	{r0, r1, r4, lr}
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   15e84:	69c4      	ldr	r4, [r0, #28]
   15e86:	6a00      	ldr	r0, [r0, #32]
   15e88:	4421      	add	r1, r4
   15e8a:	466b      	mov	r3, sp
   15e8c:	2208      	movs	r2, #8
   15e8e:	f7f4 fb0c 	bl	a4aa <os_mbuf_copydata>
}
   15e92:	9801      	ldr	r0, [sp, #4]
   15e94:	9900      	ldr	r1, [sp, #0]
   15e96:	ba00      	rev	r0, r0
   15e98:	ba09      	rev	r1, r1
   15e9a:	b002      	add	sp, #8
   15e9c:	bd10      	pop	{r4, pc}

00015e9e <cbor_mbuf_reader_get32>:
{
   15e9e:	b513      	push	{r0, r1, r4, lr}
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   15ea0:	69c4      	ldr	r4, [r0, #28]
   15ea2:	6a00      	ldr	r0, [r0, #32]
   15ea4:	ab01      	add	r3, sp, #4
   15ea6:	2204      	movs	r2, #4
   15ea8:	4421      	add	r1, r4
   15eaa:	f7f4 fafe 	bl	a4aa <os_mbuf_copydata>
}
   15eae:	9801      	ldr	r0, [sp, #4]
   15eb0:	ba00      	rev	r0, r0
   15eb2:	b002      	add	sp, #8
   15eb4:	bd10      	pop	{r4, pc}

00015eb6 <cbor_mbuf_reader_get16>:
{
   15eb6:	b513      	push	{r0, r1, r4, lr}
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   15eb8:	69c4      	ldr	r4, [r0, #28]
   15eba:	6a00      	ldr	r0, [r0, #32]
   15ebc:	f10d 0306 	add.w	r3, sp, #6
   15ec0:	2202      	movs	r2, #2
   15ec2:	4421      	add	r1, r4
   15ec4:	f7f4 faf1 	bl	a4aa <os_mbuf_copydata>
    return cbor_ntohs(val);
   15ec8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   15ecc:	ba40      	rev16	r0, r0
}
   15ece:	b280      	uxth	r0, r0
   15ed0:	b002      	add	sp, #8
   15ed2:	bd10      	pop	{r4, pc}

00015ed4 <cbor_mbuf_reader_init>:

void
cbor_mbuf_reader_init(struct cbor_mbuf_reader *cb, struct os_mbuf *m,
                      int initial_offset)
{
   15ed4:	b508      	push	{r3, lr}
    struct os_mbuf_pkthdr *hdr;

    cb->r.get8 = &cbor_mbuf_reader_get8;
   15ed6:	4b0d      	ldr	r3, [pc, #52]	; (15f0c <cbor_mbuf_reader_init+0x38>)
   15ed8:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbor_mbuf_reader_get16;
   15eda:	4b0d      	ldr	r3, [pc, #52]	; (15f10 <cbor_mbuf_reader_init+0x3c>)
   15edc:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbor_mbuf_reader_get32;
   15ede:	4b0d      	ldr	r3, [pc, #52]	; (15f14 <cbor_mbuf_reader_init+0x40>)
   15ee0:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbor_mbuf_reader_get64;
   15ee2:	4b0d      	ldr	r3, [pc, #52]	; (15f18 <cbor_mbuf_reader_init+0x44>)
   15ee4:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_mbuf_reader_cmp;
   15ee6:	4b0d      	ldr	r3, [pc, #52]	; (15f1c <cbor_mbuf_reader_init+0x48>)
   15ee8:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_mbuf_reader_cpy;
   15eea:	4b0d      	ldr	r3, [pc, #52]	; (15f20 <cbor_mbuf_reader_init+0x4c>)
   15eec:	6143      	str	r3, [r0, #20]

    assert(OS_MBUF_IS_PKTHDR(m));
   15eee:	794b      	ldrb	r3, [r1, #5]
   15ef0:	2b07      	cmp	r3, #7
   15ef2:	d805      	bhi.n	15f00 <cbor_mbuf_reader_init+0x2c>
   15ef4:	2300      	movs	r3, #0
   15ef6:	461a      	mov	r2, r3
   15ef8:	4619      	mov	r1, r3
   15efa:	4618      	mov	r0, r3
   15efc:	f7f2 fffa 	bl	8ef4 <__assert_func>
    hdr = OS_MBUF_PKTHDR(m);
    cb->m = m;
    cb->init_off = initial_offset;
    cb->r.message_size = hdr->omp_len - initial_offset;
   15f00:	8a0b      	ldrh	r3, [r1, #16]
    cb->init_off = initial_offset;
   15f02:	e9c0 2107 	strd	r2, r1, [r0, #28]
    cb->r.message_size = hdr->omp_len - initial_offset;
   15f06:	1a9a      	subs	r2, r3, r2
   15f08:	6182      	str	r2, [r0, #24]
}
   15f0a:	bd08      	pop	{r3, pc}
   15f0c:	00015e51 	.word	0x00015e51
   15f10:	00015eb7 	.word	0x00015eb7
   15f14:	00015e9f 	.word	0x00015e9f
   15f18:	00015e83 	.word	0x00015e83
   15f1c:	00015e6b 	.word	0x00015e6b
   15f20:	00015e37 	.word	0x00015e37

00015f24 <cbor_mbuf_writer>:
#include <tinycbor/cbor.h>
#include <tinycbor/cbor_mbuf_writer.h>

int
cbor_mbuf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   15f24:	b538      	push	{r3, r4, r5, lr}
   15f26:	4604      	mov	r4, r0
   15f28:	4615      	mov	r5, r2
    int rc;
    struct cbor_mbuf_writer *cb = (struct cbor_mbuf_writer *) arg;

    rc = os_mbuf_append(cb->m, data, len);
   15f2a:	6880      	ldr	r0, [r0, #8]
   15f2c:	b292      	uxth	r2, r2
   15f2e:	f7f4 fa5e 	bl	a3ee <os_mbuf_append>
    if (rc) {
   15f32:	b918      	cbnz	r0, 15f3c <cbor_mbuf_writer+0x18>
        return CborErrorOutOfMemory;
    }
    cb->enc.bytes_written += len;
   15f34:	6862      	ldr	r2, [r4, #4]
   15f36:	442a      	add	r2, r5
   15f38:	6062      	str	r2, [r4, #4]
    return CborNoError;
}
   15f3a:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   15f3c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   15f40:	e7fb      	b.n	15f3a <cbor_mbuf_writer+0x16>
	...

00015f44 <cbor_mbuf_writer_init>:

void
cbor_mbuf_writer_init(struct cbor_mbuf_writer *cb, struct os_mbuf *m)
{
    cb->m = m;
    cb->enc.bytes_written = 0;
   15f44:	2300      	movs	r3, #0
   15f46:	6043      	str	r3, [r0, #4]
    cb->enc.write = &cbor_mbuf_writer;
   15f48:	4b01      	ldr	r3, [pc, #4]	; (15f50 <cbor_mbuf_writer_init+0xc>)
    cb->m = m;
   15f4a:	6081      	str	r1, [r0, #8]
    cb->enc.write = &cbor_mbuf_writer;
   15f4c:	6003      	str	r3, [r0, #0]
}
   15f4e:	4770      	bx	lr
   15f50:	00015f25 	.word	0x00015f25

00015f54 <append_to_buffer.isra.0>:
    memcpy(where, &v, sizeof(v));
}

static inline CborError append_to_buffer(CborEncoder *encoder, const void *data, size_t len)
{
    return encoder->writer->write(encoder->writer, data, len);
   15f54:	6803      	ldr	r3, [r0, #0]
   15f56:	4718      	bx	r3

00015f58 <encode_number_no_update>:
{
    return append_to_buffer(encoder, &byte, 1);
}

static inline CborError encode_number_no_update(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
   15f58:	b530      	push	{r4, r5, lr}
    v = cbor_htonll(v);
   15f5a:	ba19      	rev	r1, r3
{
   15f5c:	b085      	sub	sp, #20
    v = cbor_htonll(v);
   15f5e:	ba15      	rev	r5, r2
    uint64_t buf[2];
    uint8_t *const bufend = (uint8_t *)buf + sizeof(buf);
    uint8_t *bufstart = bufend - 1;
    put64(buf + 1, ui);     /* we probably have a bunch of zeros in the beginning */

    if (ui < Value8Bit) {
   15f60:	2a18      	cmp	r2, #24
    memcpy(where, &v, sizeof(v));
   15f62:	e9cd 1502 	strd	r1, r5, [sp, #8]
    if (ui < Value8Bit) {
   15f66:	f173 0100 	sbcs.w	r1, r3, #0
{
   15f6a:	f89d 4020 	ldrb.w	r4, [sp, #32]
   15f6e:	f10d 010f 	add.w	r1, sp, #15
    if (ui < Value8Bit) {
   15f72:	d20a      	bcs.n	15f8a <encode_number_no_update+0x32>
        *bufstart += shiftedMajorType;
   15f74:	eb04 6415 	add.w	r4, r4, r5, lsr #24
   15f78:	f88d 400f 	strb.w	r4, [sp, #15]
            ++more;
        bufstart -= (size_t)1 << more;
        *bufstart = shiftedMajorType + Value8Bit + more;
    }

    return append_to_buffer(encoder, bufstart, bufend - bufstart);
   15f7c:	ab04      	add	r3, sp, #16
   15f7e:	1a5a      	subs	r2, r3, r1
   15f80:	6800      	ldr	r0, [r0, #0]
   15f82:	f7ff ffe7 	bl	15f54 <append_to_buffer.isra.0>
}
   15f86:	b005      	add	sp, #20
   15f88:	bd30      	pop	{r4, r5, pc}
        if (ui > 0xffU)
   15f8a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   15f8e:	f173 0500 	sbcs.w	r5, r3, #0
   15f92:	bf2c      	ite	cs
   15f94:	2501      	movcs	r5, #1
   15f96:	2500      	movcc	r5, #0
        if (ui > 0xffffU)
   15f98:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   15f9c:	f173 0200 	sbcs.w	r2, r3, #0
            ++more;
   15fa0:	bf28      	it	cs
   15fa2:	3501      	addcs	r5, #1
        if (ui > 0xffffffffU)
   15fa4:	b103      	cbz	r3, 15fa8 <encode_number_no_update+0x50>
            ++more;
   15fa6:	3501      	adds	r5, #1
        bufstart -= (size_t)1 << more;
   15fa8:	2301      	movs	r3, #1
   15faa:	40ab      	lsls	r3, r5
   15fac:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   15fae:	3418      	adds	r4, #24
   15fb0:	442c      	add	r4, r5
   15fb2:	700c      	strb	r4, [r1, #0]
   15fb4:	e7e2      	b.n	15f7c <encode_number_no_update+0x24>

00015fb6 <encode_number>:

static inline CborError encode_number(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
   15fb6:	b430      	push	{r4, r5}
    ++encoder->added;
   15fb8:	6884      	ldr	r4, [r0, #8]
{
   15fba:	f89d 5008 	ldrb.w	r5, [sp, #8]
    ++encoder->added;
   15fbe:	3401      	adds	r4, #1
   15fc0:	6084      	str	r4, [r0, #8]
    return encode_number_no_update(encoder, ui, shiftedMajorType);
   15fc2:	9502      	str	r5, [sp, #8]
}
   15fc4:	bc30      	pop	{r4, r5}
    return encode_number_no_update(encoder, ui, shiftedMajorType);
   15fc6:	f7ff bfc7 	b.w	15f58 <encode_number_no_update>

00015fca <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
   15fca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    CborError err;
    container->writer = encoder->writer;
    ++encoder->added;
   15fcc:	6884      	ldr	r4, [r0, #8]
    container->writer = encoder->writer;
   15fce:	6806      	ldr	r6, [r0, #0]
   15fd0:	600e      	str	r6, [r1, #0]
    ++encoder->added;
   15fd2:	3401      	adds	r4, #1
   15fd4:	6084      	str	r4, [r0, #8]
    container->added = 0;
   15fd6:	2500      	movs	r5, #0
   15fd8:	f003 0420 	and.w	r4, r3, #32

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;

    if (length == CborIndefiniteLength) {
   15fdc:	1c50      	adds	r0, r2, #1
    container->added = 0;
   15fde:	608d      	str	r5, [r1, #8]
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
   15fe0:	60cc      	str	r4, [r1, #12]
    if (length == CborIndefiniteLength) {
   15fe2:	d10e      	bne.n	16002 <create_container+0x38>
        container->flags |= CborIteratorFlag_UnknownLength;
   15fe4:	f044 0404 	orr.w	r4, r4, #4
   15fe8:	60cc      	str	r4, [r1, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
   15fea:	331f      	adds	r3, #31
   15fec:	2201      	movs	r2, #1
   15fee:	f10d 010f 	add.w	r1, sp, #15
   15ff2:	4630      	mov	r0, r6
   15ff4:	f88d 300f 	strb.w	r3, [sp, #15]
    return append_to_buffer(encoder, &byte, 1);
   15ff8:	f7ff ffac 	bl	15f54 <append_to_buffer.isra.0>
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
   15ffc:	2000      	movs	r0, #0
   15ffe:	b004      	add	sp, #16
   16000:	bd70      	pop	{r4, r5, r6, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
   16002:	9300      	str	r3, [sp, #0]
   16004:	4608      	mov	r0, r1
   16006:	462b      	mov	r3, r5
   16008:	f7ff ffa6 	bl	15f58 <encode_number_no_update>
   1600c:	e7f6      	b.n	15ffc <create_container+0x32>

0001600e <cbor_encoder_init>:
    encoder->added = 0;
   1600e:	2300      	movs	r3, #0
    encoder->flags = flags;
   16010:	e9c0 3202 	strd	r3, r2, [r0, #8]
    encoder->writer = writer;
   16014:	6001      	str	r1, [r0, #0]
}
   16016:	4770      	bx	lr

00016018 <cbor_encode_uint>:
{
   16018:	b507      	push	{r0, r1, r2, lr}
    return encode_number(encoder, value, UnsignedIntegerType << MajorTypeShift);
   1601a:	2100      	movs	r1, #0
   1601c:	9100      	str	r1, [sp, #0]
   1601e:	f7ff ffca 	bl	15fb6 <encode_number>
}
   16022:	b003      	add	sp, #12
   16024:	f85d fb04 	ldr.w	pc, [sp], #4

00016028 <cbor_encode_int>:
{
   16028:	b507      	push	{r0, r1, r2, lr}
    uint64_t ui = value >> 63;              /* extend sign to whole length */
   1602a:	17d9      	asrs	r1, r3, #31
    return encode_number(encoder, ui, majorType);
   1602c:	f001 0120 	and.w	r1, r1, #32
   16030:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   16034:	9100      	str	r1, [sp, #0]
   16036:	ea83 73e3 	eor.w	r3, r3, r3, asr #31
   1603a:	f7ff ffbc 	bl	15fb6 <encode_number>
}
   1603e:	b003      	add	sp, #12
   16040:	f85d fb04 	ldr.w	pc, [sp], #4

00016044 <cbor_encode_simple_value>:
    if (value >= HalfPrecisionFloat && value <= Break)
   16044:	f1a1 0319 	sub.w	r3, r1, #25
   16048:	2b06      	cmp	r3, #6
{
   1604a:	b507      	push	{r0, r1, r2, lr}
   1604c:	460a      	mov	r2, r1
    if (value >= HalfPrecisionFloat && value <= Break)
   1604e:	d907      	bls.n	16060 <cbor_encode_simple_value+0x1c>
    return encode_number(encoder, value, SimpleTypesType << MajorTypeShift);
   16050:	23e0      	movs	r3, #224	; 0xe0
   16052:	9300      	str	r3, [sp, #0]
   16054:	2300      	movs	r3, #0
   16056:	f7ff ffae 	bl	15fb6 <encode_number>
}
   1605a:	b003      	add	sp, #12
   1605c:	f85d fb04 	ldr.w	pc, [sp], #4
        return CborErrorIllegalSimpleType;
   16060:	f44f 7083 	mov.w	r0, #262	; 0x106
   16064:	e7f9      	b.n	1605a <cbor_encode_simple_value+0x16>

00016066 <cbor_encode_byte_string>:
{
   16066:	b530      	push	{r4, r5, lr}
   16068:	b085      	sub	sp, #20
    CborError err = encode_number(encoder, length, shiftedMajorType);
   1606a:	2340      	movs	r3, #64	; 0x40
{
   1606c:	4604      	mov	r4, r0
    CborError err = encode_number(encoder, length, shiftedMajorType);
   1606e:	9300      	str	r3, [sp, #0]
   16070:	2300      	movs	r3, #0
{
   16072:	9103      	str	r1, [sp, #12]
   16074:	4615      	mov	r5, r2
    CborError err = encode_number(encoder, length, shiftedMajorType);
   16076:	f7ff ff9e 	bl	15fb6 <encode_number>
    return append_to_buffer(encoder, string, length);
   1607a:	9903      	ldr	r1, [sp, #12]
   1607c:	6820      	ldr	r0, [r4, #0]
   1607e:	462a      	mov	r2, r5
}
   16080:	b005      	add	sp, #20
   16082:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return append_to_buffer(encoder, string, length);
   16086:	f7ff bf65 	b.w	15f54 <append_to_buffer.isra.0>

0001608a <cbor_encode_text_string>:
{
   1608a:	b530      	push	{r4, r5, lr}
   1608c:	b085      	sub	sp, #20
    CborError err = encode_number(encoder, length, shiftedMajorType);
   1608e:	2360      	movs	r3, #96	; 0x60
{
   16090:	4604      	mov	r4, r0
    CborError err = encode_number(encoder, length, shiftedMajorType);
   16092:	9300      	str	r3, [sp, #0]
   16094:	2300      	movs	r3, #0
{
   16096:	9103      	str	r1, [sp, #12]
   16098:	4615      	mov	r5, r2
    CborError err = encode_number(encoder, length, shiftedMajorType);
   1609a:	f7ff ff8c 	bl	15fb6 <encode_number>
    return append_to_buffer(encoder, string, length);
   1609e:	9903      	ldr	r1, [sp, #12]
   160a0:	6820      	ldr	r0, [r4, #0]
   160a2:	462a      	mov	r2, r5
}
   160a4:	b005      	add	sp, #20
   160a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return append_to_buffer(encoder, string, length);
   160aa:	f7ff bf53 	b.w	15f54 <append_to_buffer.isra.0>

000160ae <cbor_encoder_create_array>:
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
   160ae:	2380      	movs	r3, #128	; 0x80
   160b0:	f7ff bf8b 	b.w	15fca <create_container>

000160b4 <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
   160b4:	b410      	push	{r4}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
   160b6:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   160ba:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   160be:	42a3      	cmp	r3, r4
   160c0:	d304      	bcc.n	160cc <cbor_encoder_create_map+0x18>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
}
   160c2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
   160c6:	23a0      	movs	r3, #160	; 0xa0
   160c8:	f7ff bf7f 	b.w	15fca <create_container>
}
   160cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   160d0:	f85d 4b04 	ldr.w	r4, [sp], #4
   160d4:	4770      	bx	lr

000160d6 <cbor_encoder_close_container>:
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
    encoder->writer = containerEncoder->writer;

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   160d6:	68cb      	ldr	r3, [r1, #12]
{
   160d8:	b513      	push	{r0, r1, r4, lr}
    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   160da:	f013 0304 	ands.w	r3, r3, #4
    encoder->writer = containerEncoder->writer;
   160de:	680c      	ldr	r4, [r1, #0]
   160e0:	6004      	str	r4, [r0, #0]
    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   160e2:	d00a      	beq.n	160fa <cbor_encoder_close_container+0x24>
        return append_byte_to_buffer(encoder, BreakByte);
   160e4:	23ff      	movs	r3, #255	; 0xff
   160e6:	2201      	movs	r2, #1
   160e8:	f10d 0107 	add.w	r1, sp, #7
   160ec:	4620      	mov	r0, r4
   160ee:	f88d 3007 	strb.w	r3, [sp, #7]
    return append_to_buffer(encoder, &byte, 1);
   160f2:	f7ff ff2f 	bl	15f54 <append_to_buffer.isra.0>
    return CborNoError;
}
   160f6:	b002      	add	sp, #8
   160f8:	bd10      	pop	{r4, pc}
    return CborNoError;
   160fa:	4618      	mov	r0, r3
   160fc:	e7fb      	b.n	160f6 <cbor_encoder_close_container+0x20>

000160fe <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   160fe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   16102:	2840      	cmp	r0, #64	; 0x40
   16104:	d003      	beq.n	1610e <is_fixed_type+0x10>
   16106:	3880      	subs	r0, #128	; 0x80
   16108:	bf18      	it	ne
   1610a:	2001      	movne	r0, #1
   1610c:	4770      	bx	lr
   1610e:	2000      	movs	r0, #0
           type != CborMapType;
}
   16110:	4770      	bx	lr

00016112 <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   16112:	2001      	movs	r0, #1
   16114:	4770      	bx	lr

00016116 <preparse_value>:
{
   16116:	b570      	push	{r4, r5, r6, lr}
    it->type = CborInvalidType;
   16118:	23ff      	movs	r3, #255	; 0xff
    const CborParser *parser = it->parser;
   1611a:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   1611c:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   1611e:	6841      	ldr	r1, [r0, #4]
   16120:	686b      	ldr	r3, [r5, #4]
   16122:	4299      	cmp	r1, r3
{
   16124:	4604      	mov	r4, r0
    if (it->offset == parser->end)
   16126:	d102      	bne.n	1612e <preparse_value+0x18>
        return CborErrorUnexpectedEOF;
   16128:	f240 1001 	movw	r0, #257	; 0x101
}
   1612c:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   1612e:	6828      	ldr	r0, [r5, #0]
   16130:	6803      	ldr	r3, [r0, #0]
   16132:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   16134:	f000 02e0 	and.w	r2, r0, #224	; 0xe0
    it->extra = (descriptor &= SmallValueMask);
   16138:	f000 001f 	and.w	r0, r0, #31
    it->flags = 0;
   1613c:	2300      	movs	r3, #0
    if (descriptor > Value64Bit) {
   1613e:	281b      	cmp	r0, #27
    it->type = type;
   16140:	73a2      	strb	r2, [r4, #14]
    it->flags = 0;
   16142:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   16144:	81a0      	strh	r0, [r4, #12]
    if (descriptor > Value64Bit) {
   16146:	d917      	bls.n	16178 <preparse_value+0x62>
        if (unlikely(descriptor != IndefiniteLength))
   16148:	281f      	cmp	r0, #31
   1614a:	d007      	beq.n	1615c <preparse_value+0x46>
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   1614c:	f240 1005 	movw	r0, #261	; 0x105
   16150:	f240 1303 	movw	r3, #259	; 0x103
   16154:	2ae0      	cmp	r2, #224	; 0xe0
   16156:	bf08      	it	eq
   16158:	4618      	moveq	r0, r3
   1615a:	e7e7      	b.n	1612c <preparse_value+0x16>
        if (likely(!is_fixed_type(type))) {
   1615c:	4610      	mov	r0, r2
   1615e:	f7ff ffce 	bl	160fe <is_fixed_type>
   16162:	b910      	cbnz	r0, 1616a <preparse_value+0x54>
            it->flags |= CborIteratorFlag_UnknownLength;
   16164:	2304      	movs	r3, #4
   16166:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   16168:	e7e0      	b.n	1612c <preparse_value+0x16>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   1616a:	2ae0      	cmp	r2, #224	; 0xe0
   1616c:	f240 1005 	movw	r0, #261	; 0x105
   16170:	bf08      	it	eq
   16172:	f44f 7081 	moveq.w	r0, #258	; 0x102
   16176:	e7d9      	b.n	1612c <preparse_value+0x16>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   16178:	2817      	cmp	r0, #23
   1617a:	bf82      	ittt	hi
   1617c:	f1a0 0118 	subhi.w	r1, r0, #24
   16180:	2301      	movhi	r3, #1
   16182:	408b      	lslhi	r3, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   16184:	686e      	ldr	r6, [r5, #4]
   16186:	6861      	ldr	r1, [r4, #4]
   16188:	3301      	adds	r3, #1
   1618a:	1a76      	subs	r6, r6, r1
   1618c:	42b3      	cmp	r3, r6
   1618e:	d8cb      	bhi.n	16128 <preparse_value+0x12>
    if (majortype == NegativeIntegerType) {
   16190:	2a20      	cmp	r2, #32
    uint8_t majortype = type >> MajorTypeShift;
   16192:	ea4f 1352 	mov.w	r3, r2, lsr #5
    if (majortype == NegativeIntegerType) {
   16196:	d10c      	bne.n	161b2 <preparse_value+0x9c>
        it->type = CborIntegerType;
   16198:	f44f 7300 	mov.w	r3, #512	; 0x200
   1619c:	81e3      	strh	r3, [r4, #14]
    if (descriptor < Value8Bit)
   1619e:	2817      	cmp	r0, #23
   161a0:	d916      	bls.n	161d0 <preparse_value+0xba>
    if (descriptor == Value8Bit)
   161a2:	2818      	cmp	r0, #24
   161a4:	d12a      	bne.n	161fc <preparse_value+0xe6>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   161a6:	6828      	ldr	r0, [r5, #0]
   161a8:	6803      	ldr	r3, [r0, #0]
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   161aa:	3101      	adds	r1, #1
   161ac:	4798      	blx	r3
   161ae:	81a0      	strh	r0, [r4, #12]
   161b0:	e00e      	b.n	161d0 <preparse_value+0xba>
    } else if (majortype == SimpleTypesType) {
   161b2:	2b07      	cmp	r3, #7
   161b4:	d1f3      	bne.n	1619e <preparse_value+0x88>
        switch (descriptor) {
   161b6:	3814      	subs	r0, #20
   161b8:	2807      	cmp	r0, #7
   161ba:	d809      	bhi.n	161d0 <preparse_value+0xba>
   161bc:	e8df f000 	tbb	[pc, r0]
   161c0:	0c0c0c04 	.word	0x0c0c0c04
   161c4:	0a0a0c11 	.word	0x0a0a0c11
            it->extra = false;
   161c8:	2300      	movs	r3, #0
            it->type = CborBooleanType;
   161ca:	22f5      	movs	r2, #245	; 0xf5
            it->extra = false;
   161cc:	81a3      	strh	r3, [r4, #12]
            it->type = CborBooleanType;
   161ce:	73a2      	strb	r2, [r4, #14]
        switch (descriptor) {
   161d0:	2000      	movs	r0, #0
   161d2:	e7ab      	b.n	1612c <preparse_value+0x16>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   161d4:	2301      	movs	r3, #1
   161d6:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   161d8:	6828      	ldr	r0, [r5, #0]
   161da:	6803      	ldr	r3, [r0, #0]
   161dc:	4798      	blx	r3
   161de:	73a0      	strb	r0, [r4, #14]
            break;
   161e0:	e7f6      	b.n	161d0 <preparse_value+0xba>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   161e2:	6828      	ldr	r0, [r5, #0]
   161e4:	3101      	adds	r1, #1
   161e6:	6803      	ldr	r3, [r0, #0]
   161e8:	4798      	blx	r3
   161ea:	b280      	uxth	r0, r0
            if (unlikely(it->extra < 32)) {
   161ec:	281f      	cmp	r0, #31
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   161ee:	81a0      	strh	r0, [r4, #12]
            if (unlikely(it->extra < 32)) {
   161f0:	d8ee      	bhi.n	161d0 <preparse_value+0xba>
                it->type = CborInvalidType;
   161f2:	23ff      	movs	r3, #255	; 0xff
   161f4:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   161f6:	f44f 7083 	mov.w	r0, #262	; 0x106
   161fa:	e797      	b.n	1612c <preparse_value+0x16>
    else if (descriptor == Value16Bit)
   161fc:	2819      	cmp	r0, #25
   161fe:	d102      	bne.n	16206 <preparse_value+0xf0>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   16200:	6828      	ldr	r0, [r5, #0]
   16202:	6843      	ldr	r3, [r0, #4]
   16204:	e7d1      	b.n	161aa <preparse_value+0x94>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   16206:	7be3      	ldrb	r3, [r4, #15]
   16208:	f043 0301 	orr.w	r3, r3, #1
   1620c:	73e3      	strb	r3, [r4, #15]
   1620e:	e7df      	b.n	161d0 <preparse_value+0xba>

00016210 <preparse_next_value>:
{
   16210:	b538      	push	{r3, r4, r5, lr}
    if (it->remaining != UINT32_MAX) {
   16212:	6885      	ldr	r5, [r0, #8]
   16214:	1c6b      	adds	r3, r5, #1
{
   16216:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   16218:	d009      	beq.n	1622e <preparse_next_value+0x1e>
        if (it->type != CborTagType && !--it->remaining) {
   1621a:	7b83      	ldrb	r3, [r0, #14]
   1621c:	2bc0      	cmp	r3, #192	; 0xc0
   1621e:	d017      	beq.n	16250 <preparse_next_value+0x40>
   16220:	3d01      	subs	r5, #1
   16222:	6085      	str	r5, [r0, #8]
   16224:	b9a5      	cbnz	r5, 16250 <preparse_next_value+0x40>
            it->type = CborInvalidType;
   16226:	23ff      	movs	r3, #255	; 0xff
   16228:	7383      	strb	r3, [r0, #14]
}
   1622a:	2000      	movs	r0, #0
   1622c:	bd38      	pop	{r3, r4, r5, pc}
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   1622e:	e9d0 3100 	ldrd	r3, r1, [r0]
   16232:	685a      	ldr	r2, [r3, #4]
   16234:	4291      	cmp	r1, r2
   16236:	d00b      	beq.n	16250 <preparse_next_value+0x40>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   16238:	6818      	ldr	r0, [r3, #0]
   1623a:	6803      	ldr	r3, [r0, #0]
   1623c:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   1623e:	28ff      	cmp	r0, #255	; 0xff
   16240:	d106      	bne.n	16250 <preparse_next_value+0x40>
        ++it->offset;
   16242:	6863      	ldr	r3, [r4, #4]
        it->type = CborInvalidType;
   16244:	73a5      	strb	r5, [r4, #14]
        ++it->offset;
   16246:	3301      	adds	r3, #1
   16248:	6063      	str	r3, [r4, #4]
        it->remaining = 0;
   1624a:	2300      	movs	r3, #0
   1624c:	60a3      	str	r3, [r4, #8]
        return CborNoError;
   1624e:	e7ec      	b.n	1622a <preparse_next_value+0x1a>
    return preparse_value(it);
   16250:	4620      	mov	r0, r4
}
   16252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return preparse_value(it);
   16256:	f7ff bf5e 	b.w	16116 <preparse_value>

0001625a <extract_number>:
    memcpy(&result, ptr, sizeof(result));
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
   1625a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1625e:	4607      	mov	r7, r0
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   16260:	6800      	ldr	r0, [r0, #0]
{
   16262:	460d      	mov	r5, r1
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   16264:	6803      	ldr	r3, [r0, #0]
   16266:	6809      	ldr	r1, [r1, #0]
{
   16268:	4614      	mov	r4, r2
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   1626a:	4798      	blx	r3
    ++*offset;
   1626c:	6829      	ldr	r1, [r5, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   1626e:	f000 031f 	and.w	r3, r0, #31
    ++*offset;
   16272:	3101      	adds	r1, #1
    *len = 1;
   16274:	f04f 0801 	mov.w	r8, #1
   16278:	f04f 0900 	mov.w	r9, #0
    if (additional_information < Value8Bit) {
   1627c:	2b17      	cmp	r3, #23
    ++*offset;
   1627e:	6029      	str	r1, [r5, #0]
    *len = 1;
   16280:	e9c4 8900 	strd	r8, r9, [r4]
    if (additional_information < Value8Bit) {
   16284:	d804      	bhi.n	16290 <extract_number+0x36>
        *len = additional_information;
   16286:	2000      	movs	r0, #0
   16288:	e9c4 3000 	strd	r3, r0, [r4]
    } else {
        *len =  p->d->get64(p->d, *offset);
    }
    *offset += bytesNeeded;
    return CborNoError;
}
   1628c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (unlikely(additional_information > Value64Bit))
   16290:	2b1b      	cmp	r3, #27
   16292:	d820      	bhi.n	162d6 <extract_number+0x7c>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   16294:	3b18      	subs	r3, #24
   16296:	2601      	movs	r6, #1
   16298:	409e      	lsls	r6, r3
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   1629a:	687b      	ldr	r3, [r7, #4]
   1629c:	1a5b      	subs	r3, r3, r1
   1629e:	42b3      	cmp	r3, r6
   162a0:	d31c      	bcc.n	162dc <extract_number+0x82>
    } else if (bytesNeeded == 1) {
   162a2:	2e01      	cmp	r6, #1
        *len = p->d->get8(p->d, *offset);
   162a4:	6838      	ldr	r0, [r7, #0]
    } else if (bytesNeeded == 1) {
   162a6:	d109      	bne.n	162bc <extract_number+0x62>
        *len = p->d->get8(p->d, *offset);
   162a8:	6803      	ldr	r3, [r0, #0]
        *len =  p->d->get16(p->d, *offset);
   162aa:	4798      	blx	r3
   162ac:	2300      	movs	r3, #0
   162ae:	6020      	str	r0, [r4, #0]
   162b0:	6063      	str	r3, [r4, #4]
    *offset += bytesNeeded;
   162b2:	682b      	ldr	r3, [r5, #0]
   162b4:	4433      	add	r3, r6
   162b6:	602b      	str	r3, [r5, #0]
    return CborNoError;
   162b8:	2000      	movs	r0, #0
   162ba:	e7e7      	b.n	1628c <extract_number+0x32>
    } else if (bytesNeeded == 2) {
   162bc:	2e02      	cmp	r6, #2
   162be:	d101      	bne.n	162c4 <extract_number+0x6a>
        *len =  p->d->get16(p->d, *offset);
   162c0:	6843      	ldr	r3, [r0, #4]
   162c2:	e7f2      	b.n	162aa <extract_number+0x50>
    } else if (bytesNeeded == 4) {
   162c4:	2e04      	cmp	r6, #4
   162c6:	d101      	bne.n	162cc <extract_number+0x72>
        *len =  p->d->get32(p->d, *offset);
   162c8:	6883      	ldr	r3, [r0, #8]
   162ca:	e7ee      	b.n	162aa <extract_number+0x50>
        *len =  p->d->get64(p->d, *offset);
   162cc:	68c3      	ldr	r3, [r0, #12]
   162ce:	4798      	blx	r3
   162d0:	e9c4 0100 	strd	r0, r1, [r4]
   162d4:	e7ed      	b.n	162b2 <extract_number+0x58>
        return CborErrorIllegalNumber;
   162d6:	f240 1005 	movw	r0, #261	; 0x105
   162da:	e7d7      	b.n	1628c <extract_number+0x32>
        return CborErrorUnexpectedEOF;
   162dc:	f240 1001 	movw	r0, #257	; 0x101
   162e0:	e7d4      	b.n	1628c <extract_number+0x32>

000162e2 <advance_internal>:
{
   162e2:	b513      	push	{r0, r1, r4, lr}
   162e4:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   162e6:	1d01      	adds	r1, r0, #4
   162e8:	466a      	mov	r2, sp
   162ea:	6800      	ldr	r0, [r0, #0]
   162ec:	f7ff ffb5 	bl	1625a <extract_number>
    assert(err == CborNoError);
   162f0:	b128      	cbz	r0, 162fe <advance_internal+0x1c>
   162f2:	2300      	movs	r3, #0
   162f4:	461a      	mov	r2, r3
   162f6:	4619      	mov	r1, r3
   162f8:	4618      	mov	r0, r3
   162fa:	f7f2 fdfb 	bl	8ef4 <__assert_func>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   162fe:	7ba3      	ldrb	r3, [r4, #14]
   16300:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   16304:	2b40      	cmp	r3, #64	; 0x40
   16306:	d109      	bne.n	1631c <advance_internal+0x3a>
        assert(length == (size_t)length);
   16308:	e9dd 2300 	ldrd	r2, r3, [sp]
   1630c:	2b00      	cmp	r3, #0
   1630e:	d1f0      	bne.n	162f2 <advance_internal+0x10>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   16310:	7be3      	ldrb	r3, [r4, #15]
   16312:	075b      	lsls	r3, r3, #29
   16314:	d4ed      	bmi.n	162f2 <advance_internal+0x10>
        it->offset += length;
   16316:	6863      	ldr	r3, [r4, #4]
   16318:	4413      	add	r3, r2
   1631a:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
   1631c:	4620      	mov	r0, r4
   1631e:	f7ff ff77 	bl	16210 <preparse_next_value>
}
   16322:	b002      	add	sp, #8
   16324:	bd10      	pop	{r4, pc}

00016326 <cbor_value_advance.part.0>:
CborError cbor_value_advance_fixed(CborValue *it)
   16326:	b508      	push	{r3, lr}
    assert(is_fixed_type(it->type));
   16328:	2300      	movs	r3, #0
   1632a:	461a      	mov	r2, r3
   1632c:	4619      	mov	r1, r3
   1632e:	4618      	mov	r0, r3
   16330:	f7f2 fde0 	bl	8ef4 <__assert_func>

00016334 <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   16334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16338:	461e      	mov	r6, r3
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   1633a:	7b83      	ldrb	r3, [r0, #14]
   1633c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   16340:	2b40      	cmp	r3, #64	; 0x40
{
   16342:	b087      	sub	sp, #28
   16344:	4604      	mov	r4, r0
   16346:	4689      	mov	r9, r1
   16348:	4690      	mov	r8, r2
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   1634a:	d005      	beq.n	16358 <iterate_string_chunks+0x24>
   1634c:	2300      	movs	r3, #0
   1634e:	461a      	mov	r2, r3
   16350:	4619      	mov	r1, r3
   16352:	4618      	mov	r0, r3
   16354:	f7f2 fdce 	bl	8ef4 <__assert_func>

    size_t total;
    CborError err;
    int offset = value->offset;
    if (cbor_value_is_length_known(value)) {
   16358:	7bc2      	ldrb	r2, [r0, #15]
    int offset = value->offset;
   1635a:	6843      	ldr	r3, [r0, #4]
   1635c:	9303      	str	r3, [sp, #12]
    if (cbor_value_is_length_known(value)) {
   1635e:	0752      	lsls	r2, r2, #29
   16360:	d447      	bmi.n	163f2 <iterate_string_chunks+0xbe>
    CborError err = extract_number(parser, offset, &v);
   16362:	6800      	ldr	r0, [r0, #0]
   16364:	aa04      	add	r2, sp, #16
   16366:	a903      	add	r1, sp, #12
   16368:	f7ff ff77 	bl	1625a <extract_number>
    if (err) {
   1636c:	b988      	cbnz	r0, 16392 <iterate_string_chunks+0x5e>
    *len = v;
   1636e:	f8dd a010 	ldr.w	sl, [sp, #16]
    if (v != *len)
   16372:	9b05      	ldr	r3, [sp, #20]
   16374:	4283      	cmp	r3, r0
   16376:	bf08      	it	eq
   16378:	45d2      	cmpeq	sl, sl
    *len = v;
   1637a:	4655      	mov	r5, sl
    if (v != *len)
   1637c:	d15b      	bne.n	16436 <iterate_string_chunks+0x102>
        /* easy case: fixed length */
        err = extract_length(value->parser, &offset, &total);
        if (err)
            return err;
        if (total > (size_t)(value->parser->end - offset))
   1637e:	f8d4 c000 	ldr.w	ip, [r4]
   16382:	9a03      	ldr	r2, [sp, #12]
   16384:	f8dc 3004 	ldr.w	r3, [ip, #4]
   16388:	1a9b      	subs	r3, r3, r2
   1638a:	4553      	cmp	r3, sl
   1638c:	d204      	bcs.n	16398 <iterate_string_chunks+0x64>
            return CborErrorUnexpectedEOF;
   1638e:	f240 1001 	movw	r0, #257	; 0x101
        *next = *value;
        next->offset = offset;
        return preparse_next_value(next);
    }
    return CborNoError;
}
   16392:	b007      	add	sp, #28
   16394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (total <= *buflen)
   16398:	f8d8 3000 	ldr.w	r3, [r8]
   1639c:	4553      	cmp	r3, sl
   1639e:	d308      	bcc.n	163b2 <iterate_string_chunks+0x7e>
            *result = !!func(value->parser->d, buffer, offset, total);
   163a0:	f8dc 0000 	ldr.w	r0, [ip]
   163a4:	9f11      	ldr	r7, [sp, #68]	; 0x44
   163a6:	4653      	mov	r3, sl
   163a8:	4649      	mov	r1, r9
   163aa:	47b8      	blx	r7
   163ac:	3800      	subs	r0, #0
   163ae:	bf18      	it	ne
   163b0:	2001      	movne	r0, #1
        offset += total;
   163b2:	9b03      	ldr	r3, [sp, #12]
            *result = false;
   163b4:	7030      	strb	r0, [r6, #0]
        offset += total;
   163b6:	4453      	add	r3, sl
                ++offset;
   163b8:	9303      	str	r3, [sp, #12]
    if (*result && *buflen > total) {
   163ba:	7833      	ldrb	r3, [r6, #0]
   163bc:	b14b      	cbz	r3, 163d2 <iterate_string_chunks+0x9e>
   163be:	f8d8 3000 	ldr.w	r3, [r8]
   163c2:	42ab      	cmp	r3, r5
   163c4:	d905      	bls.n	163d2 <iterate_string_chunks+0x9e>
        if(buffer) {
   163c6:	f1b9 0f00 	cmp.w	r9, #0
   163ca:	d002      	beq.n	163d2 <iterate_string_chunks+0x9e>
            *(buffer + total) = '\0';
   163cc:	2300      	movs	r3, #0
   163ce:	f809 3005 	strb.w	r3, [r9, r5]
    if (next) {
   163d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    *buflen = total;
   163d4:	f8c8 5000 	str.w	r5, [r8]
    if (next) {
   163d8:	2b00      	cmp	r3, #0
   163da:	d054      	beq.n	16486 <iterate_string_chunks+0x152>
        *next = *value;
   163dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   163e0:	9c10      	ldr	r4, [sp, #64]	; 0x40
   163e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   163e6:	9b03      	ldr	r3, [sp, #12]
   163e8:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   163ea:	4620      	mov	r0, r4
   163ec:	f7ff ff10 	bl	16210 <preparse_next_value>
   163f0:	e7cf      	b.n	16392 <iterate_string_chunks+0x5e>
        ++offset;
   163f2:	3301      	adds	r3, #1
   163f4:	9303      	str	r3, [sp, #12]
        total = 0;
   163f6:	2500      	movs	r5, #0
        *result = true;
   163f8:	2301      	movs	r3, #1
   163fa:	7033      	strb	r3, [r6, #0]
                *result = false;
   163fc:	46ab      	mov	fp, r5
            if (offset == value->parser->end)
   163fe:	6823      	ldr	r3, [r4, #0]
   16400:	9903      	ldr	r1, [sp, #12]
   16402:	685a      	ldr	r2, [r3, #4]
   16404:	428a      	cmp	r2, r1
   16406:	d0c2      	beq.n	1638e <iterate_string_chunks+0x5a>
            val = value->parser->d->get8(value->parser->d, offset);
   16408:	6818      	ldr	r0, [r3, #0]
   1640a:	6803      	ldr	r3, [r0, #0]
   1640c:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   1640e:	28ff      	cmp	r0, #255	; 0xff
   16410:	d102      	bne.n	16418 <iterate_string_chunks+0xe4>
                ++offset;
   16412:	9b03      	ldr	r3, [sp, #12]
   16414:	3301      	adds	r3, #1
   16416:	e7cf      	b.n	163b8 <iterate_string_chunks+0x84>
            if ((val & MajorTypeMask) != value->type)
   16418:	7ba3      	ldrb	r3, [r4, #14]
   1641a:	f020 001f 	bic.w	r0, r0, #31
   1641e:	4298      	cmp	r0, r3
   16420:	d12e      	bne.n	16480 <iterate_string_chunks+0x14c>
    CborError err = extract_number(parser, offset, &v);
   16422:	6820      	ldr	r0, [r4, #0]
   16424:	aa04      	add	r2, sp, #16
   16426:	a903      	add	r1, sp, #12
   16428:	f7ff ff17 	bl	1625a <extract_number>
    if (err) {
   1642c:	2800      	cmp	r0, #0
   1642e:	d1b0      	bne.n	16392 <iterate_string_chunks+0x5e>
    *len = v;
   16430:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    if (v != *len)
   16434:	b112      	cbz	r2, 1643c <iterate_string_chunks+0x108>
                return CborErrorDataTooLarge;
   16436:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1643a:	e7aa      	b.n	16392 <iterate_string_chunks+0x5e>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   1643c:	eb15 0a03 	adds.w	sl, r5, r3
   16440:	d2f9      	bcs.n	16436 <iterate_string_chunks+0x102>
            if (chunkLen > (size_t)(value->parser->end - offset))
   16442:	6820      	ldr	r0, [r4, #0]
   16444:	9a03      	ldr	r2, [sp, #12]
   16446:	6841      	ldr	r1, [r0, #4]
   16448:	1a89      	subs	r1, r1, r2
   1644a:	4299      	cmp	r1, r3
   1644c:	d39f      	bcc.n	1638e <iterate_string_chunks+0x5a>
            if (*result && *buflen >= newTotal)
   1644e:	7831      	ldrb	r1, [r6, #0]
   16450:	b199      	cbz	r1, 1647a <iterate_string_chunks+0x146>
   16452:	f8d8 1000 	ldr.w	r1, [r8]
   16456:	4551      	cmp	r1, sl
   16458:	d30f      	bcc.n	1647a <iterate_string_chunks+0x146>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   1645a:	9301      	str	r3, [sp, #4]
   1645c:	eb09 0105 	add.w	r1, r9, r5
   16460:	6800      	ldr	r0, [r0, #0]
   16462:	9d11      	ldr	r5, [sp, #68]	; 0x44
   16464:	47a8      	blx	r5
   16466:	3800      	subs	r0, #0
   16468:	bf18      	it	ne
   1646a:	2001      	movne	r0, #1
   1646c:	9b01      	ldr	r3, [sp, #4]
   1646e:	7030      	strb	r0, [r6, #0]
            offset += chunkLen;
   16470:	9a03      	ldr	r2, [sp, #12]
   16472:	4413      	add	r3, r2
   16474:	9303      	str	r3, [sp, #12]
   16476:	4655      	mov	r5, sl
        while (true) {
   16478:	e7c1      	b.n	163fe <iterate_string_chunks+0xca>
                *result = false;
   1647a:	f886 b000 	strb.w	fp, [r6]
   1647e:	e7f7      	b.n	16470 <iterate_string_chunks+0x13c>
                return CborErrorIllegalType;
   16480:	f44f 7082 	mov.w	r0, #260	; 0x104
   16484:	e785      	b.n	16392 <iterate_string_chunks+0x5e>
    return CborNoError;
   16486:	9810      	ldr	r0, [sp, #64]	; 0x40
   16488:	e783      	b.n	16392 <iterate_string_chunks+0x5e>

0001648a <_cbor_value_decode_int64_internal>:
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   1648a:	6803      	ldr	r3, [r0, #0]
{
   1648c:	b570      	push	{r4, r5, r6, lr}
   1648e:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   16490:	6818      	ldr	r0, [r3, #0]
   16492:	6861      	ldr	r1, [r4, #4]
   16494:	6803      	ldr	r3, [r0, #0]
   16496:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   16498:	7be3      	ldrb	r3, [r4, #15]
   1649a:	07db      	lsls	r3, r3, #31
   1649c:	d40a      	bmi.n	164b4 <_cbor_value_decode_int64_internal+0x2a>
   1649e:	7ba3      	ldrb	r3, [r4, #14]
   164a0:	3306      	adds	r3, #6
   164a2:	b2db      	uxtb	r3, r3
   164a4:	2b01      	cmp	r3, #1
   164a6:	d905      	bls.n	164b4 <_cbor_value_decode_int64_internal+0x2a>
   164a8:	2300      	movs	r3, #0
   164aa:	461a      	mov	r2, r3
   164ac:	4619      	mov	r1, r3
   164ae:	4618      	mov	r0, r3
   164b0:	f7f2 fd20 	bl	8ef4 <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   164b4:	f000 031e 	and.w	r3, r0, #30
   164b8:	2b1a      	cmp	r3, #26
   164ba:	d1f5      	bne.n	164a8 <_cbor_value_decode_int64_internal+0x1e>
    if ((val & 1) == (Value32Bit & 1))
   164bc:	f010 0501 	ands.w	r5, r0, #1
   164c0:	d00b      	beq.n	164da <_cbor_value_decode_int64_internal+0x50>
    assert((val & SmallValueMask) == Value64Bit);
   164c2:	f000 001f 	and.w	r0, r0, #31
   164c6:	281b      	cmp	r0, #27
   164c8:	d1ee      	bne.n	164a8 <_cbor_value_decode_int64_internal+0x1e>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   164ca:	6823      	ldr	r3, [r4, #0]
   164cc:	6861      	ldr	r1, [r4, #4]
   164ce:	6818      	ldr	r0, [r3, #0]
}
   164d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   164d4:	68c3      	ldr	r3, [r0, #12]
   164d6:	3101      	adds	r1, #1
   164d8:	4718      	bx	r3
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   164da:	6823      	ldr	r3, [r4, #0]
   164dc:	6861      	ldr	r1, [r4, #4]
   164de:	6818      	ldr	r0, [r3, #0]
   164e0:	3101      	adds	r1, #1
   164e2:	6883      	ldr	r3, [r0, #8]
   164e4:	4798      	blx	r3
}
   164e6:	4629      	mov	r1, r5
   164e8:	bd70      	pop	{r4, r5, r6, pc}

000164ea <cbor_parser_init>:
{
   164ea:	b410      	push	{r4}
    memset(parser, 0, sizeof(*parser));
   164ec:	2400      	movs	r4, #0
   164ee:	6054      	str	r4, [r2, #4]
   164f0:	6094      	str	r4, [r2, #8]
    parser->d = d;
   164f2:	6010      	str	r0, [r2, #0]
    parser->end = d->message_size;
   164f4:	6980      	ldr	r0, [r0, #24]
    parser->flags = flags;
   164f6:	e9c2 0101 	strd	r0, r1, [r2, #4]
    it->offset = 0;
   164fa:	e9c3 2400 	strd	r2, r4, [r3]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   164fe:	2201      	movs	r2, #1
}
   16500:	f85d 4b04 	ldr.w	r4, [sp], #4
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   16504:	609a      	str	r2, [r3, #8]
    return preparse_value(it);
   16506:	4618      	mov	r0, r3
   16508:	f7ff be05 	b.w	16116 <preparse_value>

0001650c <cbor_value_enter_container>:
{
   1650c:	b537      	push	{r0, r1, r2, r4, r5, lr}
{ return it->type == CborArrayType || it->type == CborMapType; }
   1650e:	7b83      	ldrb	r3, [r0, #14]
   16510:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   16514:	2b80      	cmp	r3, #128	; 0x80
   16516:	4605      	mov	r5, r0
   16518:	460c      	mov	r4, r1
   1651a:	d005      	beq.n	16528 <cbor_value_enter_container+0x1c>
    assert(cbor_value_is_container(it));
   1651c:	2300      	movs	r3, #0
   1651e:	461a      	mov	r2, r3
   16520:	4619      	mov	r1, r3
   16522:	4618      	mov	r0, r3
   16524:	f7f2 fce6 	bl	8ef4 <__assert_func>
    *recursed = *it;
   16528:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   1652a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   1652e:	7beb      	ldrb	r3, [r5, #15]
   16530:	075b      	lsls	r3, r3, #29
   16532:	d512      	bpl.n	1655a <cbor_value_enter_container+0x4e>
        recursed->remaining = UINT32_MAX;
   16534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        ++recursed->offset;
   16538:	3101      	adds	r1, #1
        recursed->remaining = UINT32_MAX;
   1653a:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   1653c:	6061      	str	r1, [r4, #4]
        err = preparse_value(recursed);
   1653e:	4620      	mov	r0, r4
   16540:	f7ff fde9 	bl	16116 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   16544:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   16548:	d117      	bne.n	1657a <cbor_value_enter_container+0x6e>
        ++recursed->offset;
   1654a:	6863      	ldr	r3, [r4, #4]
   1654c:	3301      	adds	r3, #1
   1654e:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   16550:	23ff      	movs	r3, #255	; 0xff
    recursed->remaining = 0;
   16552:	2000      	movs	r0, #0
    recursed->type = CborInvalidType;
   16554:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   16556:	60a0      	str	r0, [r4, #8]
    return CborNoError;
   16558:	e00f      	b.n	1657a <cbor_value_enter_container+0x6e>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   1655a:	466a      	mov	r2, sp
   1655c:	1d21      	adds	r1, r4, #4
   1655e:	f7ff fe7c 	bl	1625a <extract_number>
        assert(err == CborNoError);
   16562:	2800      	cmp	r0, #0
   16564:	d1da      	bne.n	1651c <cbor_value_enter_container+0x10>
        recursed->remaining = (uint32_t)len;
   16566:	e9dd 3200 	ldrd	r3, r2, [sp]
   1656a:	60a3      	str	r3, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   1656c:	b90a      	cbnz	r2, 16572 <cbor_value_enter_container+0x66>
   1656e:	1c59      	adds	r1, r3, #1
   16570:	d105      	bne.n	1657e <cbor_value_enter_container+0x72>
            recursed->offset = it->offset;
   16572:	686b      	ldr	r3, [r5, #4]
   16574:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   16576:	f44f 6080 	mov.w	r0, #1024	; 0x400
}
   1657a:	b003      	add	sp, #12
   1657c:	bd30      	pop	{r4, r5, pc}
        if (recursed->type == CborMapType) {
   1657e:	7ba1      	ldrb	r1, [r4, #14]
   16580:	29a0      	cmp	r1, #160	; 0xa0
   16582:	d103      	bne.n	1658c <cbor_value_enter_container+0x80>
            if (recursed->remaining > UINT32_MAX / 2) {
   16584:	2b00      	cmp	r3, #0
   16586:	dbf4      	blt.n	16572 <cbor_value_enter_container+0x66>
            recursed->remaining *= 2;
   16588:	0059      	lsls	r1, r3, #1
   1658a:	60a1      	str	r1, [r4, #8]
        if (len != 0)
   1658c:	4313      	orrs	r3, r2
   1658e:	d0df      	beq.n	16550 <cbor_value_enter_container+0x44>
            return preparse_value(recursed);
   16590:	4620      	mov	r0, r4
   16592:	f7ff fdc0 	bl	16116 <preparse_value>
   16596:	e7f0      	b.n	1657a <cbor_value_enter_container+0x6e>

00016598 <cbor_value_leave_container>:
{
   16598:	b508      	push	{r3, lr}
   1659a:	7b82      	ldrb	r2, [r0, #14]
   1659c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   165a0:	2a80      	cmp	r2, #128	; 0x80
   165a2:	d005      	beq.n	165b0 <cbor_value_leave_container+0x18>
    assert(cbor_value_is_container(it));
   165a4:	2300      	movs	r3, #0
   165a6:	461a      	mov	r2, r3
   165a8:	4619      	mov	r1, r3
   165aa:	4618      	mov	r0, r3
   165ac:	f7f2 fca2 	bl	8ef4 <__assert_func>
    assert(recursed->type == CborInvalidType);
   165b0:	7b8a      	ldrb	r2, [r1, #14]
   165b2:	2aff      	cmp	r2, #255	; 0xff
   165b4:	d001      	beq.n	165ba <cbor_value_leave_container+0x22>
   165b6:	f7ff feb6 	bl	16326 <cbor_value_advance.part.0>
    it->offset = recursed->offset;
   165ba:	684a      	ldr	r2, [r1, #4]
   165bc:	6042      	str	r2, [r0, #4]
}
   165be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return preparse_next_value(it);
   165c2:	f7ff be25 	b.w	16210 <preparse_next_value>
	...

000165c8 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   165c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   165ca:	b189      	cbz	r1, 165f0 <_cbor_value_copy_string+0x28>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   165cc:	6804      	ldr	r4, [r0, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   165ce:	6824      	ldr	r4, [r4, #0]
   165d0:	6964      	ldr	r4, [r4, #20]
   165d2:	e9cd 3400 	strd	r3, r4, [sp]
   165d6:	f10d 030f 	add.w	r3, sp, #15
   165da:	f7ff feab 	bl	16334 <iterate_string_chunks>
    return err ? err :
   165de:	b928      	cbnz	r0, 165ec <_cbor_value_copy_string+0x24>
   165e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   165e4:	2b00      	cmp	r3, #0
   165e6:	bf08      	it	eq
   165e8:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
                 copied_all ? CborNoError : CborErrorOutOfMemory;
}
   165ec:	b004      	add	sp, #16
   165ee:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   165f0:	4c00      	ldr	r4, [pc, #0]	; (165f4 <_cbor_value_copy_string+0x2c>)
   165f2:	e7ee      	b.n	165d2 <_cbor_value_copy_string+0xa>
   165f4:	00016113 	.word	0x00016113

000165f8 <advance_recursive>:
{
   165f8:	b530      	push	{r4, r5, lr}
    if (is_fixed_type(it->type))
   165fa:	7b83      	ldrb	r3, [r0, #14]
{
   165fc:	b085      	sub	sp, #20
   165fe:	4604      	mov	r4, r0
    if (is_fixed_type(it->type))
   16600:	4618      	mov	r0, r3
   16602:	f7ff fd7c 	bl	160fe <is_fixed_type>
{
   16606:	460d      	mov	r5, r1
    if (is_fixed_type(it->type))
   16608:	4601      	mov	r1, r0
   1660a:	b128      	cbz	r0, 16618 <advance_recursive+0x20>
        return advance_internal(it);
   1660c:	4620      	mov	r0, r4
}
   1660e:	b005      	add	sp, #20
   16610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return advance_internal(it);
   16614:	f7ff be65 	b.w	162e2 <advance_internal>
   16618:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1661c:	2b80      	cmp	r3, #128	; 0x80
   1661e:	d009      	beq.n	16634 <advance_recursive+0x3c>
        size_t len = SIZE_MAX;
   16620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16624:	9300      	str	r3, [sp, #0]
        return _cbor_value_copy_string(it, NULL, &len, it);
   16626:	466a      	mov	r2, sp
   16628:	4623      	mov	r3, r4
   1662a:	4620      	mov	r0, r4
   1662c:	f7ff ffcc 	bl	165c8 <_cbor_value_copy_string>
}
   16630:	b005      	add	sp, #20
   16632:	bd30      	pop	{r4, r5, pc}
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
   16634:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   16638:	d014      	beq.n	16664 <advance_recursive+0x6c>
    err = cbor_value_enter_container(it, &recursed);
   1663a:	4669      	mov	r1, sp
   1663c:	4620      	mov	r0, r4
   1663e:	f7ff ff65 	bl	1650c <cbor_value_enter_container>
    if (err)
   16642:	2800      	cmp	r0, #0
   16644:	d1f4      	bne.n	16630 <advance_recursive+0x38>
        err = advance_recursive(&recursed, nestingLevel + 1);
   16646:	3501      	adds	r5, #1
    while (!cbor_value_at_end(&recursed)) {
   16648:	9b02      	ldr	r3, [sp, #8]
   1664a:	b923      	cbnz	r3, 16656 <advance_recursive+0x5e>
    return cbor_value_leave_container(it, &recursed);
   1664c:	4669      	mov	r1, sp
   1664e:	4620      	mov	r0, r4
   16650:	f7ff ffa2 	bl	16598 <cbor_value_leave_container>
   16654:	e7ec      	b.n	16630 <advance_recursive+0x38>
        err = advance_recursive(&recursed, nestingLevel + 1);
   16656:	4629      	mov	r1, r5
   16658:	4668      	mov	r0, sp
   1665a:	f7ff ffcd 	bl	165f8 <advance_recursive>
        if (err)
   1665e:	2800      	cmp	r0, #0
   16660:	d0f2      	beq.n	16648 <advance_recursive+0x50>
   16662:	e7e5      	b.n	16630 <advance_recursive+0x38>
        return CborErrorNestingTooDeep;
   16664:	f240 4001 	movw	r0, #1025	; 0x401
   16668:	e7e2      	b.n	16630 <advance_recursive+0x38>

0001666a <cbor_value_advance>:
{
   1666a:	b508      	push	{r3, lr}
    assert(it->type != CborInvalidType);
   1666c:	7b82      	ldrb	r2, [r0, #14]
   1666e:	2aff      	cmp	r2, #255	; 0xff
   16670:	d101      	bne.n	16676 <cbor_value_advance+0xc>
   16672:	f7ff fe58 	bl	16326 <cbor_value_advance.part.0>
    if (!it->remaining)
   16676:	6883      	ldr	r3, [r0, #8]
   16678:	b123      	cbz	r3, 16684 <cbor_value_advance+0x1a>
}
   1667a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return advance_recursive(it, 0);
   1667e:	2100      	movs	r1, #0
   16680:	f7ff bfba 	b.w	165f8 <advance_recursive>
}
   16684:	2003      	movs	r0, #3
   16686:	bd08      	pop	{r3, pc}

00016688 <cbor_value_calculate_string_length>:
    *len = SIZE_MAX;
   16688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1668c:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
   1668e:	2300      	movs	r3, #0
{
   16690:	460a      	mov	r2, r1
    return _cbor_value_copy_string(value, NULL, len, NULL);
   16692:	4619      	mov	r1, r3
   16694:	f7ff bf98 	b.w	165c8 <_cbor_value_copy_string>

00016698 <fcb_free_sector_cnt>:
fcb_free_sector_cnt(struct fcb *fcb)
{
    int i;
    struct flash_area *fa;

    fa = fcb->f_active.fe_area;
   16698:	69c1      	ldr	r1, [r0, #28]
{
   1669a:	b538      	push	{r3, r4, r5, lr}
   1669c:	4604      	mov	r4, r0
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   1669e:	2500      	movs	r5, #0
   166a0:	7963      	ldrb	r3, [r4, #5]
   166a2:	42ab      	cmp	r3, r5
   166a4:	dc01      	bgt.n	166aa <fcb_free_sector_cnt+0x12>
        if (fa == fcb->f_oldest) {
            break;
        }
    }
    return i;
}
   166a6:	4628      	mov	r0, r5
   166a8:	bd38      	pop	{r3, r4, r5, pc}
        fa = fcb_getnext_area(fcb, fa);
   166aa:	4620      	mov	r0, r4
   166ac:	f000 fa67 	bl	16b7e <fcb_getnext_area>
        if (fa == fcb->f_oldest) {
   166b0:	69a3      	ldr	r3, [r4, #24]
   166b2:	4283      	cmp	r3, r0
        fa = fcb_getnext_area(fcb, fa);
   166b4:	4601      	mov	r1, r0
        if (fa == fcb->f_oldest) {
   166b6:	d0f6      	beq.n	166a6 <fcb_free_sector_cnt+0xe>
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   166b8:	3501      	adds	r5, #1
   166ba:	e7f1      	b.n	166a0 <fcb_free_sector_cnt+0x8>

000166bc <fcb_is_empty>:

int
fcb_is_empty(struct fcb *fcb)
{
    return (fcb->f_active.fe_area == fcb->f_oldest &&
   166bc:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   166c0:	429a      	cmp	r2, r3
   166c2:	d105      	bne.n	166d0 <fcb_is_empty+0x14>
   166c4:	6a00      	ldr	r0, [r0, #32]
   166c6:	f1a0 0308 	sub.w	r3, r0, #8
   166ca:	4258      	negs	r0, r3
   166cc:	4158      	adcs	r0, r3
   166ce:	4770      	bx	lr
   166d0:	2000      	movs	r0, #0
      fcb->f_active.fe_elem_off == sizeof(struct fcb_disk_area));
}
   166d2:	4770      	bx	lr

000166d4 <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(uint8_t *buf, uint16_t len)
{
    if (len < 0x80) {
   166d4:	297f      	cmp	r1, #127	; 0x7f
   166d6:	d802      	bhi.n	166de <fcb_put_len+0xa>
        buf[0] = len;
   166d8:	7001      	strb	r1, [r0, #0]
        return 1;
   166da:	2001      	movs	r0, #1
   166dc:	4770      	bx	lr
    } else if (len < FCB_MAX_LEN) {
   166de:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   166e2:	4299      	cmp	r1, r3
        buf[0] = (len & 0x7f) | 0x80;
   166e4:	bf9f      	itttt	ls
   166e6:	f061 037f 	ornls	r3, r1, #127	; 0x7f
        buf[1] = len >> 7;
   166ea:	09c9      	lsrls	r1, r1, #7
        buf[0] = (len & 0x7f) | 0x80;
   166ec:	7003      	strbls	r3, [r0, #0]
        buf[1] = len >> 7;
   166ee:	7041      	strbls	r1, [r0, #1]
        return 2;
   166f0:	bf94      	ite	ls
   166f2:	2002      	movls	r0, #2
    } else {
        return FCB_ERR_ARGS;
   166f4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
    }
}
   166f8:	4770      	bx	lr

000166fa <fcb_get_len>:
int
fcb_get_len(uint8_t *buf, uint16_t *len)
{
    int rc;

    if (buf[0] & 0x80) {
   166fa:	f990 2000 	ldrsb.w	r2, [r0]
   166fe:	7803      	ldrb	r3, [r0, #0]
   16700:	2a00      	cmp	r2, #0
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
   16702:	bfbd      	ittte	lt
   16704:	7842      	ldrblt	r2, [r0, #1]
   16706:	f003 037f 	andlt.w	r3, r3, #127	; 0x7f
   1670a:	ea43 13c2 	orrlt.w	r3, r3, r2, lsl #7
        rc = 2;
    } else {
        *len = buf[0];
   1670e:	b29b      	uxthge	r3, r3
        rc = 2;
   16710:	bfb4      	ite	lt
   16712:	2002      	movlt	r0, #2
        rc = 1;
   16714:	2001      	movge	r0, #1
   16716:	800b      	strh	r3, [r1, #0]
    }
    return rc;
}
   16718:	4770      	bx	lr

0001671a <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_area *fap, uint16_t id)
{
   1671a:	b507      	push	{r0, r1, r2, lr}
   1671c:	4603      	mov	r3, r0
   1671e:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    fda.fd_magic = fcb->f_magic;
   16720:	6819      	ldr	r1, [r3, #0]
    fda.fd_ver = fcb->f_version;
   16722:	791b      	ldrb	r3, [r3, #4]
   16724:	f88d 3004 	strb.w	r3, [sp, #4]
    fda._pad = 0xff;
   16728:	23ff      	movs	r3, #255	; 0xff
    fda.fd_magic = fcb->f_magic;
   1672a:	9100      	str	r1, [sp, #0]
    fda._pad = 0xff;
   1672c:	f88d 3005 	strb.w	r3, [sp, #5]
    fda.fd_id = id;
   16730:	f8ad 2006 	strh.w	r2, [sp, #6]

    rc = flash_area_write(fap, 0, &fda, sizeof(fda));
   16734:	2308      	movs	r3, #8
   16736:	466a      	mov	r2, sp
   16738:	2100      	movs	r1, #0
   1673a:	f7fc f867 	bl	1280c <flash_area_write>
    if (rc) {
        return FCB_ERR_FLASH;
   1673e:	2800      	cmp	r0, #0
    }
    return 0;
}
   16740:	bf18      	it	ne
   16742:	f06f 0001 	mvnne.w	r0, #1
   16746:	b003      	add	sp, #12
   16748:	f85d fb04 	ldr.w	pc, [sp], #4

0001674c <fcb_sector_hdr_read>:
 * Returns 1 if sector has data.
 */
int
fcb_sector_hdr_read(struct fcb *fcb, struct flash_area *fap,
  struct fcb_disk_area *fdap)
{
   1674c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1674e:	4605      	mov	r5, r0
    struct fcb_disk_area fda;
    int rc;

    if (!fdap) {
   16750:	4614      	mov	r4, r2
{
   16752:	4608      	mov	r0, r1
    if (!fdap) {
   16754:	b902      	cbnz	r2, 16758 <fcb_sector_hdr_read+0xc>
        fdap = &fda;
   16756:	466c      	mov	r4, sp
    }
    rc = flash_area_read_is_empty(fap, 0, fdap, sizeof(*fdap));
   16758:	2308      	movs	r3, #8
   1675a:	4622      	mov	r2, r4
   1675c:	2100      	movs	r1, #0
   1675e:	f7fc f893 	bl	12888 <flash_area_read_is_empty>
    if (rc < 0) {
   16762:	2800      	cmp	r0, #0
   16764:	db0e      	blt.n	16784 <fcb_sector_hdr_read+0x38>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   16766:	2801      	cmp	r0, #1
   16768:	d00f      	beq.n	1678a <fcb_sector_hdr_read+0x3e>
        return 0;
    }
    if (fdap->fd_magic != fcb->f_magic) {
   1676a:	6822      	ldr	r2, [r4, #0]
   1676c:	682b      	ldr	r3, [r5, #0]
   1676e:	429a      	cmp	r2, r3
   16770:	d10d      	bne.n	1678e <fcb_sector_hdr_read+0x42>
        return FCB_ERR_MAGIC;
    }
    if (fdap->fd_ver != fcb->f_version) {
   16772:	7922      	ldrb	r2, [r4, #4]
   16774:	792b      	ldrb	r3, [r5, #4]
        return FCB_ERR_VERSION;
   16776:	429a      	cmp	r2, r3
   16778:	bf0c      	ite	eq
   1677a:	2001      	moveq	r0, #1
   1677c:	f06f 0007 	mvnne.w	r0, #7
    }
    return 1;
}
   16780:	b003      	add	sp, #12
   16782:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   16784:	f06f 0001 	mvn.w	r0, #1
   16788:	e7fa      	b.n	16780 <fcb_sector_hdr_read+0x34>
        return 0;
   1678a:	2000      	movs	r0, #0
   1678c:	e7f8      	b.n	16780 <fcb_sector_hdr_read+0x34>
        return FCB_ERR_MAGIC;
   1678e:	f06f 0006 	mvn.w	r0, #6
   16792:	e7f5      	b.n	16780 <fcb_sector_hdr_read+0x34>

00016794 <fcb_init>:
{
   16794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   16798:	6883      	ldr	r3, [r0, #8]
{
   1679a:	b085      	sub	sp, #20
   1679c:	4604      	mov	r4, r0
    if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   1679e:	2b00      	cmp	r3, #0
   167a0:	d078      	beq.n	16894 <fcb_init+0x100>
   167a2:	7943      	ldrb	r3, [r0, #5]
   167a4:	7982      	ldrb	r2, [r0, #6]
   167a6:	1a9b      	subs	r3, r3, r2
   167a8:	2b00      	cmp	r3, #0
   167aa:	dd73      	ble.n	16894 <fcb_init+0x100>
    struct flash_area *oldest_fap = NULL, *newest_fap = NULL;
   167ac:	2700      	movs	r7, #0
    int oldest = -1, newest = -1;
   167ae:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    struct flash_area *oldest_fap = NULL, *newest_fap = NULL;
   167b2:	46b8      	mov	r8, r7
    int oldest = -1, newest = -1;
   167b4:	46d9      	mov	r9, fp
    int max_align = 1;
   167b6:	2601      	movs	r6, #1
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   167b8:	9701      	str	r7, [sp, #4]
   167ba:	7962      	ldrb	r2, [r4, #5]
   167bc:	9b01      	ldr	r3, [sp, #4]
   167be:	429a      	cmp	r2, r3
   167c0:	dc29      	bgt.n	16816 <fcb_init+0x82>
    if (oldest < 0) {
   167c2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   167c6:	d15d      	bne.n	16884 <fcb_init+0xf0>
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   167c8:	f8d4 8008 	ldr.w	r8, [r4, #8]
        rc = fcb_sector_hdr_init(fcb, oldest_fap, 0);
   167cc:	2200      	movs	r2, #0
   167ce:	4641      	mov	r1, r8
   167d0:	4620      	mov	r0, r4
   167d2:	f7ff ffa2 	bl	1671a <fcb_sector_hdr_init>
        if (rc) {
   167d6:	4605      	mov	r5, r0
   167d8:	b9c8      	cbnz	r0, 1680e <fcb_init+0x7a>
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   167da:	4647      	mov	r7, r8
    fcb->f_active_id = newest;
   167dc:	85a5      	strh	r5, [r4, #44]	; 0x2c
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   167de:	1e75      	subs	r5, r6, #1
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   167e0:	2308      	movs	r3, #8
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   167e2:	4035      	ands	r5, r6
    fcb->f_active.fe_area = newest_fap;
   167e4:	e9c4 8706 	strd	r8, r7, [r4, #24]
    fcb->f_align = max_align;
   167e8:	f884 602e 	strb.w	r6, [r4, #46]	; 0x2e
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   167ec:	6223      	str	r3, [r4, #32]
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   167ee:	d14b      	bne.n	16888 <fcb_init+0xf4>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   167f0:	f104 061c 	add.w	r6, r4, #28
   167f4:	4631      	mov	r1, r6
   167f6:	4620      	mov	r0, r4
   167f8:	f000 f9a0 	bl	16b3c <fcb_getnext_in_area>
        if (rc == FCB_ERR_NOVAR) {
   167fc:	1cc3      	adds	r3, r0, #3
   167fe:	d002      	beq.n	16806 <fcb_init+0x72>
        if (rc != 0) {
   16800:	2800      	cmp	r0, #0
   16802:	d0f7      	beq.n	167f4 <fcb_init+0x60>
   16804:	4605      	mov	r5, r0
    os_mutex_init(&fcb->f_mtx);
   16806:	f104 000c 	add.w	r0, r4, #12
   1680a:	f7f3 ff53 	bl	a6b4 <os_mutex_init>
}
   1680e:	4628      	mov	r0, r5
   16810:	b005      	add	sp, #20
   16812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        fap = &fcb->f_sectors[i];
   16816:	68a1      	ldr	r1, [r4, #8]
   16818:	9b01      	ldr	r3, [sp, #4]
   1681a:	220c      	movs	r2, #12
   1681c:	fb02 1a03 	mla	sl, r2, r3, r1
        align = flash_area_align(fap);
   16820:	4650      	mov	r0, sl
   16822:	f7fc f819 	bl	12858 <flash_area_align>
        if (align > max_align) {
   16826:	4286      	cmp	r6, r0
   16828:	da03      	bge.n	16832 <fcb_init+0x9e>
            max_align = flash_area_align(fap);
   1682a:	4650      	mov	r0, sl
   1682c:	f7fc f814 	bl	12858 <flash_area_align>
   16830:	4606      	mov	r6, r0
        rc = fcb_sector_hdr_read(fcb, fap, &fda);
   16832:	aa02      	add	r2, sp, #8
   16834:	4651      	mov	r1, sl
   16836:	4620      	mov	r0, r4
   16838:	f7ff ff88 	bl	1674c <fcb_sector_hdr_read>
        if (rc < 0) {
   1683c:	1e05      	subs	r5, r0, #0
   1683e:	dbe6      	blt.n	1680e <fcb_init+0x7a>
        if (rc == 0) {
   16840:	d008      	beq.n	16854 <fcb_init+0xc0>
        if (oldest < 0) {
   16842:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
            oldest = newest = fda.fd_id;
   16846:	f8bd 200e 	ldrh.w	r2, [sp, #14]
        if (oldest < 0) {
   1684a:	d107      	bne.n	1685c <fcb_init+0xc8>
            oldest = newest = fda.fd_id;
   1684c:	4691      	mov	r9, r2
            oldest_fap = newest_fap = fap;
   1684e:	4657      	mov	r7, sl
   16850:	46d0      	mov	r8, sl
            oldest = newest = fda.fd_id;
   16852:	4693      	mov	fp, r2
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   16854:	9b01      	ldr	r3, [sp, #4]
   16856:	3301      	adds	r3, #1
   16858:	9301      	str	r3, [sp, #4]
   1685a:	e7ae      	b.n	167ba <fcb_init+0x26>
        if (FCB_ID_GT(fda.fd_id, newest)) {
   1685c:	fa0f fc82 	sxth.w	ip, r2
   16860:	fa0f f58b 	sxth.w	r5, fp
   16864:	ebac 0505 	sub.w	r5, ip, r5
   16868:	2d00      	cmp	r5, #0
   1686a:	dd02      	ble.n	16872 <fcb_init+0xde>
            newest = fda.fd_id;
   1686c:	4693      	mov	fp, r2
            newest_fap = fap;
   1686e:	4657      	mov	r7, sl
   16870:	e7f0      	b.n	16854 <fcb_init+0xc0>
        } else if (FCB_ID_GT(oldest, fda.fd_id)) {
   16872:	fa0f f089 	sxth.w	r0, r9
   16876:	eba0 000c 	sub.w	r0, r0, ip
            oldest = fda.fd_id;
   1687a:	2800      	cmp	r0, #0
   1687c:	bfc4      	itt	gt
   1687e:	4691      	movgt	r9, r2
   16880:	46d0      	movgt	r8, sl
   16882:	e7e7      	b.n	16854 <fcb_init+0xc0>
   16884:	465d      	mov	r5, fp
   16886:	e7a9      	b.n	167dc <fcb_init+0x48>
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   16888:	2300      	movs	r3, #0
   1688a:	461a      	mov	r2, r3
   1688c:	4619      	mov	r1, r3
   1688e:	4618      	mov	r0, r3
   16890:	f7f2 fb30 	bl	8ef4 <__assert_func>
        return FCB_ERR_ARGS;
   16894:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16898:	e7b9      	b.n	1680e <fcb_init+0x7a>

0001689a <fcb_clear>:
 * @param fcb
 * @return 0 on success; non-zero on failure
 */
int
fcb_clear(struct fcb *fcb)
{
   1689a:	b510      	push	{r4, lr}
   1689c:	4604      	mov	r4, r0
    int rc;

    rc = 0;
    while (!fcb_is_empty(fcb)) {
   1689e:	4620      	mov	r0, r4
   168a0:	f7ff ff0c 	bl	166bc <fcb_is_empty>
   168a4:	b108      	cbz	r0, 168aa <fcb_clear+0x10>
   168a6:	2000      	movs	r0, #0
        rc = fcb_rotate(fcb);
        if (rc) {
            break;
        }
    }
    return rc;
   168a8:	e004      	b.n	168b4 <fcb_clear+0x1a>
        rc = fcb_rotate(fcb);
   168aa:	4620      	mov	r0, r4
   168ac:	f000 f9c4 	bl	16c38 <fcb_rotate>
        if (rc) {
   168b0:	2800      	cmp	r0, #0
   168b2:	d0f4      	beq.n	1689e <fcb_clear+0x4>
}
   168b4:	bd10      	pop	{r4, pc}

000168b6 <fcb_len_in_flash.isra.0>:
int fcb_get_len(uint8_t *buf, uint16_t *len);

static inline int
fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
    if (fcb->f_align <= 1) {
   168b6:	2801      	cmp	r0, #1
        return len;
    }
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   168b8:	bf81      	itttt	hi
   168ba:	f100 33ff 	addhi.w	r3, r0, #4294967295	; 0xffffffff
   168be:	18c9      	addhi	r1, r1, r3
   168c0:	4240      	neghi	r0, r0
   168c2:	4001      	andhi	r1, r0
}
   168c4:	4608      	mov	r0, r1
   168c6:	4770      	bx	lr

000168c8 <fcb_append_to_scratch>:
/*
 * Take one of the scratch blocks into use, if at all possible.
 */
int
fcb_append_to_scratch(struct fcb *fcb)
{
   168c8:	b538      	push	{r3, r4, r5, lr}
        fa = fcb_getnext_area(fcb, fa);
   168ca:	69c1      	ldr	r1, [r0, #28]
{
   168cc:	4604      	mov	r4, r0
        fa = fcb_getnext_area(fcb, fa);
   168ce:	f000 f956 	bl	16b7e <fcb_getnext_area>
        if (fa == fcb->f_oldest) {
   168d2:	69a3      	ldr	r3, [r4, #24]
   168d4:	4298      	cmp	r0, r3
        fa = fcb_getnext_area(fcb, fa);
   168d6:	4605      	mov	r5, r0
        if (fa == fcb->f_oldest) {
   168d8:	d00f      	beq.n	168fa <fcb_append_to_scratch+0x32>
    struct flash_area *fa;
    int rc;

    fa = fcb_new_area(fcb, 0);
    if (!fa) {
   168da:	b170      	cbz	r0, 168fa <fcb_append_to_scratch+0x32>
        return FCB_ERR_NOSPACE;
    }
    rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   168dc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   168de:	3201      	adds	r2, #1
   168e0:	4601      	mov	r1, r0
   168e2:	b292      	uxth	r2, r2
   168e4:	4620      	mov	r0, r4
   168e6:	f7ff ff18 	bl	1671a <fcb_sector_hdr_init>
    if (rc) {
   168ea:	b928      	cbnz	r0, 168f8 <fcb_append_to_scratch+0x30>
        return rc;
    }
    fcb->f_active.fe_area = fa;
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   168ec:	2308      	movs	r3, #8
   168ee:	6223      	str	r3, [r4, #32]
    fcb->f_active_id++;
   168f0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    fcb->f_active.fe_area = fa;
   168f2:	61e5      	str	r5, [r4, #28]
    fcb->f_active_id++;
   168f4:	3301      	adds	r3, #1
   168f6:	85a3      	strh	r3, [r4, #44]	; 0x2c
    return FCB_OK;
}
   168f8:	bd38      	pop	{r3, r4, r5, pc}
        return FCB_ERR_NOSPACE;
   168fa:	f06f 0003 	mvn.w	r0, #3
   168fe:	e7fb      	b.n	168f8 <fcb_append_to_scratch+0x30>

00016900 <fcb_append>:

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   16900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16904:	4604      	mov	r4, r0
    struct flash_area *fa;
    uint8_t tmp_str[2];
    int cnt;
    int rc;

    cnt = fcb_put_len(tmp_str, len);
   16906:	a801      	add	r0, sp, #4
{
   16908:	460e      	mov	r6, r1
   1690a:	4691      	mov	r9, r2
    cnt = fcb_put_len(tmp_str, len);
   1690c:	f7ff fee2 	bl	166d4 <fcb_put_len>
    if (cnt < 0) {
   16910:	1e05      	subs	r5, r0, #0
   16912:	db68      	blt.n	169e6 <fcb_append+0xe6>
        return cnt;
    }
    cnt = fcb_len_in_flash(fcb, cnt);
   16914:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   16918:	b2a9      	uxth	r1, r5
   1691a:	4610      	mov	r0, r2
   1691c:	f7ff ffcb 	bl	168b6 <fcb_len_in_flash.isra.0>
    len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   16920:	4631      	mov	r1, r6
    cnt = fcb_len_in_flash(fcb, cnt);
   16922:	4607      	mov	r7, r0
    len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   16924:	4610      	mov	r0, r2
   16926:	f7ff ffc6 	bl	168b6 <fcb_len_in_flash.isra.0>
   1692a:	2101      	movs	r1, #1
   1692c:	4606      	mov	r6, r0
   1692e:	4610      	mov	r0, r2
   16930:	f7ff ffc1 	bl	168b6 <fcb_len_in_flash.isra.0>

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   16934:	f104 0a0c 	add.w	sl, r4, #12
    len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   16938:	4430      	add	r0, r6
   1693a:	b286      	uxth	r6, r0
    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1693c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16940:	4650      	mov	r0, sl
   16942:	f7f3 ff13 	bl	a76c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   16946:	b108      	cbz	r0, 1694c <fcb_append+0x4c>
   16948:	2809      	cmp	r0, #9
   1694a:	d158      	bne.n	169fe <fcb_append+0xfe>
        return FCB_ERR_ARGS;
    }
    active = &fcb->f_active;
    if (active->fe_elem_off + len + cnt > active->fe_area->fa_size) {
   1694c:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
   16950:	688a      	ldr	r2, [r1, #8]
   16952:	443b      	add	r3, r7
   16954:	4433      	add	r3, r6
   16956:	4293      	cmp	r3, r2
   16958:	d92c      	bls.n	169b4 <fcb_append+0xb4>
    i = 0;
   1695a:	2500      	movs	r5, #0
        fa = fcb_new_area(fcb, fcb->f_scratch_cnt);
   1695c:	f894 b006 	ldrb.w	fp, [r4, #6]
    rfa = NULL;
   16960:	46a8      	mov	r8, r5
        fa = fcb_getnext_area(fcb, fa);
   16962:	4620      	mov	r0, r4
   16964:	f000 f90b 	bl	16b7e <fcb_getnext_area>
        if (fa == fcb->f_oldest) {
   16968:	69a3      	ldr	r3, [r4, #24]
        fa = fcb_getnext_area(fcb, fa);
   1696a:	f1b8 0f00 	cmp.w	r8, #0
   1696e:	bf08      	it	eq
   16970:	4680      	moveq	r8, r0
        if (fa == fcb->f_oldest) {
   16972:	4298      	cmp	r0, r3
        fa = fcb_getnext_area(fcb, fa);
   16974:	4601      	mov	r1, r0
        if (fa == fcb->f_oldest) {
   16976:	d03c      	beq.n	169f2 <fcb_append+0xf2>
    } while (i++ < cnt);
   16978:	45ab      	cmp	fp, r5
   1697a:	f105 0301 	add.w	r3, r5, #1
   1697e:	dc36      	bgt.n	169ee <fcb_append+0xee>
        if (!fa || (fa->fa_size <
   16980:	f1b8 0f00 	cmp.w	r8, #0
   16984:	d035      	beq.n	169f2 <fcb_append+0xf2>
   16986:	f8d8 2008 	ldr.w	r2, [r8, #8]
            sizeof(struct fcb_disk_area) + len + cnt)) {
   1698a:	f107 0308 	add.w	r3, r7, #8
   1698e:	4433      	add	r3, r6
        if (!fa || (fa->fa_size <
   16990:	429a      	cmp	r2, r3
   16992:	d32e      	bcc.n	169f2 <fcb_append+0xf2>
            rc = FCB_ERR_NOSPACE;
            goto err;
        }
        rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   16994:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   16996:	3201      	adds	r2, #1
   16998:	b292      	uxth	r2, r2
   1699a:	4641      	mov	r1, r8
   1699c:	4620      	mov	r0, r4
   1699e:	f7ff febc 	bl	1671a <fcb_sector_hdr_init>
        if (rc) {
   169a2:	4605      	mov	r5, r0
   169a4:	b9e0      	cbnz	r0, 169e0 <fcb_append+0xe0>
            goto err;
        }
        fcb->f_active.fe_area = fa;
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   169a6:	2308      	movs	r3, #8
   169a8:	6223      	str	r3, [r4, #32]
        fcb->f_active_id++;
   169aa:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
        fcb->f_active.fe_area = fa;
   169ac:	f8c4 801c 	str.w	r8, [r4, #28]
        fcb->f_active_id++;
   169b0:	3301      	adds	r3, #1
   169b2:	85a3      	strh	r3, [r4, #44]	; 0x2c
    }

    rc = flash_area_write(active->fe_area, active->fe_elem_off, tmp_str, cnt);
   169b4:	e9d4 0107 	ldrd	r0, r1, [r4, #28]
   169b8:	463b      	mov	r3, r7
   169ba:	aa01      	add	r2, sp, #4
   169bc:	f7fb ff26 	bl	1280c <flash_area_write>
    if (rc) {
   169c0:	4605      	mov	r5, r0
   169c2:	b9c8      	cbnz	r0, 169f8 <fcb_append+0xf8>
        rc = FCB_ERR_FLASH;
        goto err;
    }
    append_loc->fe_area = active->fe_area;
   169c4:	69e3      	ldr	r3, [r4, #28]
   169c6:	f8c9 3000 	str.w	r3, [r9]
    append_loc->fe_elem_off = active->fe_elem_off;
   169ca:	6a23      	ldr	r3, [r4, #32]
   169cc:	f8c9 3004 	str.w	r3, [r9, #4]
    append_loc->fe_data_off = active->fe_elem_off + cnt;
   169d0:	6a20      	ldr	r0, [r4, #32]
   169d2:	4407      	add	r7, r0

    active->fe_elem_off = append_loc->fe_data_off + len;
   169d4:	19f3      	adds	r3, r6, r7
    append_loc->fe_data_off = active->fe_elem_off + cnt;
   169d6:	f8c9 7008 	str.w	r7, [r9, #8]
    active->fe_data_off = append_loc->fe_data_off;
   169da:	e9c4 3708 	strd	r3, r7, [r4, #32]
    active->fe_data_len = len;
   169de:	8526      	strh	r6, [r4, #40]	; 0x28

    os_mutex_release(&fcb->f_mtx);

    return FCB_OK;
err:
    os_mutex_release(&fcb->f_mtx);
   169e0:	4650      	mov	r0, sl
   169e2:	f7f3 fe71 	bl	a6c8 <os_mutex_release>
    return rc;
}
   169e6:	4628      	mov	r0, r5
   169e8:	b003      	add	sp, #12
   169ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } while (i++ < cnt);
   169ee:	461d      	mov	r5, r3
   169f0:	e7b7      	b.n	16962 <fcb_append+0x62>
            rc = FCB_ERR_NOSPACE;
   169f2:	f06f 0503 	mvn.w	r5, #3
   169f6:	e7f3      	b.n	169e0 <fcb_append+0xe0>
        rc = FCB_ERR_FLASH;
   169f8:	f06f 0501 	mvn.w	r5, #1
   169fc:	e7f0      	b.n	169e0 <fcb_append+0xe0>
        return FCB_ERR_ARGS;
   169fe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16a02:	e7f0      	b.n	169e6 <fcb_append+0xe6>

00016a04 <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   16a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int rc;
    uint8_t crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   16a06:	f10d 0207 	add.w	r2, sp, #7
{
   16a0a:	4605      	mov	r5, r0
   16a0c:	460c      	mov	r4, r1
    rc = fcb_elem_crc8(fcb, loc, &crc8);
   16a0e:	f000 f814 	bl	16a3a <fcb_elem_crc8>
    if (rc) {
   16a12:	b980      	cbnz	r0, 16a36 <fcb_append_finish+0x32>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   16a14:	89a1      	ldrh	r1, [r4, #12]
   16a16:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
   16a1a:	f7ff ff4c 	bl	168b6 <fcb_len_in_flash.isra.0>
   16a1e:	68a1      	ldr	r1, [r4, #8]

    rc = flash_area_write(loc->fe_area, off, &crc8, sizeof(crc8));
   16a20:	2301      	movs	r3, #1
   16a22:	4401      	add	r1, r0
   16a24:	f10d 0207 	add.w	r2, sp, #7
   16a28:	6820      	ldr	r0, [r4, #0]
   16a2a:	f7fb feef 	bl	1280c <flash_area_write>
    if (rc) {
        return FCB_ERR_FLASH;
   16a2e:	2800      	cmp	r0, #0
   16a30:	bf18      	it	ne
   16a32:	f06f 0001 	mvnne.w	r0, #1
    }
    return 0;
}
   16a36:	b003      	add	sp, #12
   16a38:	bd30      	pop	{r4, r5, pc}

00016a3a <fcb_elem_crc8>:
 * Given offset in flash area, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   16a3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16a3e:	4607      	mov	r7, r0
   16a40:	460c      	mov	r4, r1
    uint16_t len;
    uint32_t off;
    uint32_t end;
    int rc;

    if (loc->fe_elem_off + 2 > loc->fe_area->fa_size) {
   16a42:	e9d1 0100 	ldrd	r0, r1, [r1]
   16a46:	6883      	ldr	r3, [r0, #8]
{
   16a48:	4616      	mov	r6, r2
    if (loc->fe_elem_off + 2 > loc->fe_area->fa_size) {
   16a4a:	1c8a      	adds	r2, r1, #2
   16a4c:	429a      	cmp	r2, r3
{
   16a4e:	b08b      	sub	sp, #44	; 0x2c
    if (loc->fe_elem_off + 2 > loc->fe_area->fa_size) {
   16a50:	d904      	bls.n	16a5c <fcb_elem_crc8+0x22>
        return FCB_ERR_NOVAR;
   16a52:	f06f 0002 	mvn.w	r0, #2
        crc8 = crc8_calc(crc8, tmp_str, blk_sz);
    }
    *c8p = crc8;

    return 0;
}
   16a56:	b00b      	add	sp, #44	; 0x2c
   16a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = flash_area_read_is_empty(loc->fe_area, loc->fe_elem_off, tmp_str, 2);
   16a5c:	2302      	movs	r3, #2
   16a5e:	aa02      	add	r2, sp, #8
   16a60:	f7fb ff12 	bl	12888 <flash_area_read_is_empty>
    if (rc < 0) {
   16a64:	1e03      	subs	r3, r0, #0
   16a66:	da02      	bge.n	16a6e <fcb_elem_crc8+0x34>
        return FCB_ERR_FLASH;
   16a68:	f06f 0001 	mvn.w	r0, #1
   16a6c:	e7f3      	b.n	16a56 <fcb_elem_crc8+0x1c>
    } else if (rc == 1) {
   16a6e:	2b01      	cmp	r3, #1
   16a70:	d0ef      	beq.n	16a52 <fcb_elem_crc8+0x18>
    cnt = fcb_get_len(tmp_str, &len);
   16a72:	f10d 0106 	add.w	r1, sp, #6
   16a76:	a802      	add	r0, sp, #8
   16a78:	f7ff fe3f 	bl	166fa <fcb_get_len>
   16a7c:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
    loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   16a80:	6862      	ldr	r2, [r4, #4]
    if (fcb->f_align <= 1) {
   16a82:	2901      	cmp	r1, #1
   16a84:	b283      	uxth	r3, r0
    cnt = fcb_get_len(tmp_str, &len);
   16a86:	4605      	mov	r5, r0
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   16a88:	bf81      	itttt	hi
   16a8a:	f101 30ff 	addhi.w	r0, r1, #4294967295	; 0xffffffff
   16a8e:	181b      	addhi	r3, r3, r0
   16a90:	4249      	neghi	r1, r1
   16a92:	400b      	andhi	r3, r1
    loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   16a94:	4413      	add	r3, r2
   16a96:	60a3      	str	r3, [r4, #8]
    loc->fe_data_len = len;
   16a98:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16a9c:	81a3      	strh	r3, [r4, #12]
    crc8 = crc8_init();
   16a9e:	f008 fc13 	bl	1f2c8 <crc8_init>
    crc8 = crc8_calc(crc8, tmp_str, cnt);
   16aa2:	462a      	mov	r2, r5
   16aa4:	a902      	add	r1, sp, #8
   16aa6:	f008 fc11 	bl	1f2cc <crc8_calc>
    off = loc->fe_data_off;
   16aaa:	68a7      	ldr	r7, [r4, #8]
    end = loc->fe_data_off + len;
   16aac:	f8bd 9006 	ldrh.w	r9, [sp, #6]
    crc8 = crc8_calc(crc8, tmp_str, cnt);
   16ab0:	4605      	mov	r5, r0
    end = loc->fe_data_off + len;
   16ab2:	44b9      	add	r9, r7
    for (; off < end; off += blk_sz) {
   16ab4:	454f      	cmp	r7, r9
   16ab6:	d302      	bcc.n	16abe <fcb_elem_crc8+0x84>
    *c8p = crc8;
   16ab8:	7035      	strb	r5, [r6, #0]
    return 0;
   16aba:	2000      	movs	r0, #0
   16abc:	e7cb      	b.n	16a56 <fcb_elem_crc8+0x1c>
        blk_sz = end - off;
   16abe:	eba9 0807 	sub.w	r8, r9, r7
   16ac2:	f1b8 0f20 	cmp.w	r8, #32
   16ac6:	bf28      	it	cs
   16ac8:	f04f 0820 	movcs.w	r8, #32
        rc = flash_area_read(loc->fe_area, off, tmp_str, blk_sz);
   16acc:	6820      	ldr	r0, [r4, #0]
   16ace:	4643      	mov	r3, r8
   16ad0:	aa02      	add	r2, sp, #8
   16ad2:	4639      	mov	r1, r7
   16ad4:	f7fb fe88 	bl	127e8 <flash_area_read>
        if (rc) {
   16ad8:	2800      	cmp	r0, #0
   16ada:	d1c5      	bne.n	16a68 <fcb_elem_crc8+0x2e>
        crc8 = crc8_calc(crc8, tmp_str, blk_sz);
   16adc:	4628      	mov	r0, r5
   16ade:	4642      	mov	r2, r8
   16ae0:	a902      	add	r1, sp, #8
   16ae2:	f008 fbf3 	bl	1f2cc <crc8_calc>
    for (; off < end; off += blk_sz) {
   16ae6:	4447      	add	r7, r8
        crc8 = crc8_calc(crc8, tmp_str, blk_sz);
   16ae8:	4605      	mov	r5, r0
    for (; off < end; off += blk_sz) {
   16aea:	e7e3      	b.n	16ab4 <fcb_elem_crc8+0x7a>

00016aec <fcb_elem_info>:

int
fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   16aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int rc;
    uint8_t crc8;
    uint8_t fl_crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   16aee:	f10d 0206 	add.w	r2, sp, #6
{
   16af2:	4605      	mov	r5, r0
   16af4:	460c      	mov	r4, r1
    rc = fcb_elem_crc8(fcb, loc, &crc8);
   16af6:	f7ff ffa0 	bl	16a3a <fcb_elem_crc8>
    if (rc) {
   16afa:	b9d0      	cbnz	r0, 16b32 <fcb_elem_info+0x46>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   16afc:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
        return len;
   16b00:	89a1      	ldrh	r1, [r4, #12]
   16b02:	68a0      	ldr	r0, [r4, #8]
    if (fcb->f_align <= 1) {
   16b04:	2b01      	cmp	r3, #1
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   16b06:	bf81      	itttt	hi
   16b08:	f103 32ff 	addhi.w	r2, r3, #4294967295	; 0xffffffff
   16b0c:	1889      	addhi	r1, r1, r2
   16b0e:	425b      	neghi	r3, r3
   16b10:	4019      	andhi	r1, r3

    rc = flash_area_read(loc->fe_area, off, &fl_crc8, sizeof(fl_crc8));
   16b12:	4401      	add	r1, r0
   16b14:	2301      	movs	r3, #1
   16b16:	6820      	ldr	r0, [r4, #0]
   16b18:	f10d 0207 	add.w	r2, sp, #7
   16b1c:	f7fb fe64 	bl	127e8 <flash_area_read>
    if (rc) {
   16b20:	b948      	cbnz	r0, 16b36 <fcb_elem_info+0x4a>
        return FCB_ERR_FLASH;
    }

    if (fl_crc8 != crc8) {
   16b22:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16b26:	f89d 3006 	ldrb.w	r3, [sp, #6]
        return FCB_ERR_CRC;
   16b2a:	429a      	cmp	r2, r3
   16b2c:	bf18      	it	ne
   16b2e:	f06f 0005 	mvnne.w	r0, #5
    }
    return 0;
}
   16b32:	b003      	add	sp, #12
   16b34:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   16b36:	f06f 0001 	mvn.w	r0, #1
   16b3a:	e7fa      	b.n	16b32 <fcb_elem_info+0x46>

00016b3c <fcb_getnext_in_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_getnext_in_area(struct fcb *fcb, struct fcb_entry *loc)
{
   16b3c:	b538      	push	{r3, r4, r5, lr}
   16b3e:	4605      	mov	r5, r0
   16b40:	460c      	mov	r4, r1
    int rc;

    rc = fcb_elem_info(fcb, loc);
   16b42:	f7ff ffd3 	bl	16aec <fcb_elem_info>
    if (rc == 0 || rc == FCB_ERR_CRC) {
   16b46:	b108      	cbz	r0, 16b4c <fcb_getnext_in_area+0x10>
   16b48:	1d83      	adds	r3, r0, #6
   16b4a:	d117      	bne.n	16b7c <fcb_getnext_in_area+0x40>
        do {
            loc->fe_elem_off = loc->fe_data_off +
   16b4c:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
   16b50:	89a3      	ldrh	r3, [r4, #12]
   16b52:	68a2      	ldr	r2, [r4, #8]
    if (fcb->f_align <= 1) {
   16b54:	2901      	cmp	r1, #1
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   16b56:	bf81      	itttt	hi
   16b58:	f101 30ff 	addhi.w	r0, r1, #4294967295	; 0xffffffff
   16b5c:	181b      	addhi	r3, r3, r0
   16b5e:	4248      	neghi	r0, r1
   16b60:	4003      	andhi	r3, r0
    if (fcb->f_align <= 1) {
   16b62:	2901      	cmp	r1, #1
   16b64:	4413      	add	r3, r2
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   16b66:	bf86      	itte	hi
   16b68:	424a      	neghi	r2, r1
   16b6a:	400a      	andhi	r2, r1
        return len;
   16b6c:	2201      	movls	r2, #1
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   16b6e:	4413      	add	r3, r2
            loc->fe_elem_off = loc->fe_data_off +
   16b70:	6063      	str	r3, [r4, #4]
              fcb_len_in_flash(fcb, FCB_CRC_SZ);
            rc = fcb_elem_info(fcb, loc);
   16b72:	4621      	mov	r1, r4
   16b74:	4628      	mov	r0, r5
   16b76:	f7ff ffb9 	bl	16aec <fcb_elem_info>
            if (rc != FCB_ERR_CRC) {
   16b7a:	e7e5      	b.n	16b48 <fcb_getnext_in_area+0xc>
                break;
            }
        } while (rc == FCB_ERR_CRC);
    }
    return rc;
}
   16b7c:	bd38      	pop	{r3, r4, r5, pc}

00016b7e <fcb_getnext_area>:

struct flash_area *
fcb_getnext_area(struct fcb *fcb, struct flash_area *fap)
{
    fap++;
    if (fap >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   16b7e:	7943      	ldrb	r3, [r0, #5]
   16b80:	6882      	ldr	r2, [r0, #8]
   16b82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    fap++;
   16b86:	310c      	adds	r1, #12
    if (fap >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   16b88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
        fap = &fcb->f_sectors[0];
    }
    return fap;
}
   16b8c:	4299      	cmp	r1, r3
   16b8e:	bf34      	ite	cc
   16b90:	4608      	movcc	r0, r1
   16b92:	4610      	movcs	r0, r2
   16b94:	4770      	bx	lr

00016b96 <fcb_getnext_nolock>:
int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
    int rc;

    if (loc->fe_area == NULL) {
   16b96:	680b      	ldr	r3, [r1, #0]
{
   16b98:	b570      	push	{r4, r5, r6, lr}
   16b9a:	4605      	mov	r5, r0
   16b9c:	460c      	mov	r4, r1
    if (loc->fe_area == NULL) {
   16b9e:	b90b      	cbnz	r3, 16ba4 <fcb_getnext_nolock+0xe>
        /*
         * Find the first one we have in flash.
         */
        loc->fe_area = fcb->f_oldest;
   16ba0:	6983      	ldr	r3, [r0, #24]
   16ba2:	600b      	str	r3, [r1, #0]
    }
    if (loc->fe_elem_off == 0) {
   16ba4:	6863      	ldr	r3, [r4, #4]
   16ba6:	b953      	cbnz	r3, 16bbe <fcb_getnext_nolock+0x28>
        /*
         * If offset is zero, we serve the first entry from the area.
         */
        loc->fe_elem_off = sizeof(struct fcb_disk_area);
   16ba8:	2308      	movs	r3, #8
   16baa:	6063      	str	r3, [r4, #4]
        rc = fcb_elem_info(fcb, loc);
   16bac:	4621      	mov	r1, r4
   16bae:	4628      	mov	r0, r5
   16bb0:	f7ff ff9c 	bl	16aec <fcb_elem_info>
    } else {
        rc = fcb_getnext_in_area(fcb, loc);
    }
    switch (rc) {
   16bb4:	1d82      	adds	r2, r0, #6
   16bb6:	d007      	beq.n	16bc8 <fcb_getnext_nolock+0x32>
   16bb8:	b970      	cbnz	r0, 16bd8 <fcb_getnext_nolock+0x42>
    case 0:
        return 0;
   16bba:	2000      	movs	r0, #0
            }
        }
    }

    return 0;
}
   16bbc:	bd70      	pop	{r4, r5, r6, pc}
        rc = fcb_getnext_in_area(fcb, loc);
   16bbe:	4621      	mov	r1, r4
   16bc0:	4628      	mov	r0, r5
   16bc2:	f7ff ffbb 	bl	16b3c <fcb_getnext_in_area>
   16bc6:	e7f5      	b.n	16bb4 <fcb_getnext_nolock+0x1e>
        rc = fcb_getnext_in_area(fcb, loc);
   16bc8:	4621      	mov	r1, r4
   16bca:	4628      	mov	r0, r5
   16bcc:	f7ff ffb6 	bl	16b3c <fcb_getnext_in_area>
        if (rc == 0) {
   16bd0:	2800      	cmp	r0, #0
   16bd2:	d0f3      	beq.n	16bbc <fcb_getnext_nolock+0x26>
        if (rc != FCB_ERR_CRC) {
   16bd4:	3006      	adds	r0, #6
   16bd6:	d0f7      	beq.n	16bc8 <fcb_getnext_nolock+0x32>
            loc->fe_elem_off = sizeof(struct fcb_disk_area);
   16bd8:	2608      	movs	r6, #8
            if (loc->fe_area == fcb->f_active.fe_area) {
   16bda:	6821      	ldr	r1, [r4, #0]
   16bdc:	69eb      	ldr	r3, [r5, #28]
   16bde:	4299      	cmp	r1, r3
   16be0:	d00d      	beq.n	16bfe <fcb_getnext_nolock+0x68>
            loc->fe_area = fcb_getnext_area(fcb, loc->fe_area);
   16be2:	4628      	mov	r0, r5
   16be4:	f7ff ffcb 	bl	16b7e <fcb_getnext_area>
            rc = fcb_elem_info(fcb, loc);
   16be8:	4621      	mov	r1, r4
            loc->fe_elem_off = sizeof(struct fcb_disk_area);
   16bea:	e9c4 0600 	strd	r0, r6, [r4]
            rc = fcb_elem_info(fcb, loc);
   16bee:	4628      	mov	r0, r5
   16bf0:	f7ff ff7c 	bl	16aec <fcb_elem_info>
            switch (rc) {
   16bf4:	1d83      	adds	r3, r0, #6
   16bf6:	d0e7      	beq.n	16bc8 <fcb_getnext_nolock+0x32>
   16bf8:	2800      	cmp	r0, #0
   16bfa:	d0de      	beq.n	16bba <fcb_getnext_nolock+0x24>
   16bfc:	e7ed      	b.n	16bda <fcb_getnext_nolock+0x44>
                return FCB_ERR_NOVAR;
   16bfe:	f06f 0002 	mvn.w	r0, #2
   16c02:	e7db      	b.n	16bbc <fcb_getnext_nolock+0x26>

00016c04 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   16c04:	b570      	push	{r4, r5, r6, lr}
    int rc;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   16c06:	f100 060c 	add.w	r6, r0, #12
{
   16c0a:	4604      	mov	r4, r0
   16c0c:	460d      	mov	r5, r1
    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   16c0e:	4630      	mov	r0, r6
   16c10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16c14:	f7f3 fdaa 	bl	a76c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   16c18:	b108      	cbz	r0, 16c1e <fcb_getnext+0x1a>
   16c1a:	2809      	cmp	r0, #9
   16c1c:	d109      	bne.n	16c32 <fcb_getnext+0x2e>
        return FCB_ERR_ARGS;
    }
    rc = fcb_getnext_nolock(fcb, loc);
   16c1e:	4620      	mov	r0, r4
   16c20:	4629      	mov	r1, r5
   16c22:	f7ff ffb8 	bl	16b96 <fcb_getnext_nolock>
   16c26:	4604      	mov	r4, r0
    os_mutex_release(&fcb->f_mtx);
   16c28:	4630      	mov	r0, r6
   16c2a:	f7f3 fd4d 	bl	a6c8 <os_mutex_release>

    return rc;
}
   16c2e:	4620      	mov	r0, r4
   16c30:	bd70      	pop	{r4, r5, r6, pc}
        return FCB_ERR_ARGS;
   16c32:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16c36:	e7fa      	b.n	16c2e <fcb_getnext+0x2a>

00016c38 <fcb_rotate>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   16c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct flash_area *fap;
    int rc = 0;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   16c3a:	f100 070c 	add.w	r7, r0, #12
{
   16c3e:	4604      	mov	r4, r0
    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   16c40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16c44:	4638      	mov	r0, r7
   16c46:	f7f3 fd91 	bl	a76c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   16c4a:	b108      	cbz	r0, 16c50 <fcb_rotate+0x18>
   16c4c:	2809      	cmp	r0, #9
   16c4e:	d12a      	bne.n	16ca6 <fcb_rotate+0x6e>
        return FCB_ERR_ARGS;
    }

    rc = flash_area_erase(fcb->f_oldest, 0, fcb->f_oldest->fa_size);
   16c50:	69a0      	ldr	r0, [r4, #24]
   16c52:	2100      	movs	r1, #0
   16c54:	6882      	ldr	r2, [r0, #8]
   16c56:	f7fb fdeb 	bl	12830 <flash_area_erase>
    if (rc) {
   16c5a:	bb08      	cbnz	r0, 16ca0 <fcb_rotate+0x68>
        rc = FCB_ERR_FLASH;
        goto out;
    }
    if (fcb->f_oldest == fcb->f_active.fe_area) {
   16c5c:	e9d4 1306 	ldrd	r1, r3, [r4, #24]
   16c60:	4299      	cmp	r1, r3
   16c62:	d112      	bne.n	16c8a <fcb_rotate+0x52>
        /*
         * Need to create a new active area, as we're wiping the current.
         */
        fap = fcb_getnext_area(fcb, fcb->f_oldest);
   16c64:	4620      	mov	r0, r4
   16c66:	f7ff ff8a 	bl	16b7e <fcb_getnext_area>
        rc = fcb_sector_hdr_init(fcb, fap, fcb->f_active_id + 1);
   16c6a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   16c6c:	3201      	adds	r2, #1
   16c6e:	4601      	mov	r1, r0
        fap = fcb_getnext_area(fcb, fcb->f_oldest);
   16c70:	4606      	mov	r6, r0
        rc = fcb_sector_hdr_init(fcb, fap, fcb->f_active_id + 1);
   16c72:	b292      	uxth	r2, r2
   16c74:	4620      	mov	r0, r4
   16c76:	f7ff fd50 	bl	1671a <fcb_sector_hdr_init>
        if (rc) {
   16c7a:	4605      	mov	r5, r0
   16c7c:	b958      	cbnz	r0, 16c96 <fcb_rotate+0x5e>
            goto out;
        }
        fcb->f_active.fe_area = fap;
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   16c7e:	2308      	movs	r3, #8
   16c80:	6223      	str	r3, [r4, #32]
        fcb->f_active_id++;
   16c82:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
        fcb->f_active.fe_area = fap;
   16c84:	61e6      	str	r6, [r4, #28]
        fcb->f_active_id++;
   16c86:	3301      	adds	r3, #1
   16c88:	85a3      	strh	r3, [r4, #44]	; 0x2c
    }
    fcb->f_oldest = fcb_getnext_area(fcb, fcb->f_oldest);
   16c8a:	69a1      	ldr	r1, [r4, #24]
   16c8c:	4620      	mov	r0, r4
   16c8e:	f7ff ff76 	bl	16b7e <fcb_getnext_area>
   16c92:	2500      	movs	r5, #0
   16c94:	61a0      	str	r0, [r4, #24]
out:
    os_mutex_release(&fcb->f_mtx);
   16c96:	4638      	mov	r0, r7
   16c98:	f7f3 fd16 	bl	a6c8 <os_mutex_release>
    return rc;
}
   16c9c:	4628      	mov	r0, r5
   16c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = FCB_ERR_FLASH;
   16ca0:	f06f 0501 	mvn.w	r5, #1
   16ca4:	e7f7      	b.n	16c96 <fcb_rotate+0x5e>
        return FCB_ERR_ARGS;
   16ca6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16caa:	e7f7      	b.n	16c9c <fcb_rotate+0x64>

00016cac <fcb_walk>:
 * Call 'cb' for every element in flash circular buffer. If fap is specified,
 * only elements with that flash_area are reported.
 */
int
fcb_walk(struct fcb *fcb, struct flash_area *fap, fcb_walk_cb cb, void *cb_arg)
{
   16cac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    int rc;

    loc.fe_area = fap;
    loc.fe_elem_off = 0;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   16cb0:	f100 050c 	add.w	r5, r0, #12
{
   16cb4:	4606      	mov	r6, r0
   16cb6:	460c      	mov	r4, r1
   16cb8:	4698      	mov	r8, r3
    loc.fe_area = fap;
   16cba:	9100      	str	r1, [sp, #0]
    loc.fe_elem_off = 0;
   16cbc:	2300      	movs	r3, #0
    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   16cbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16cc2:	4628      	mov	r0, r5
{
   16cc4:	4617      	mov	r7, r2
    loc.fe_elem_off = 0;
   16cc6:	9301      	str	r3, [sp, #4]
    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   16cc8:	f7f3 fd50 	bl	a76c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   16ccc:	b1b0      	cbz	r0, 16cfc <fcb_walk+0x50>
   16cce:	2809      	cmp	r0, #9
   16cd0:	d014      	beq.n	16cfc <fcb_walk+0x50>
        return FCB_ERR_ARGS;
   16cd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
        os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
    }
    os_mutex_release(&fcb->f_mtx);
    return 0;
}
   16cd6:	b004      	add	sp, #16
   16cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mutex_release(&fcb->f_mtx);
   16cdc:	f7f3 fcf4 	bl	a6c8 <os_mutex_release>
        if (fap && loc.fe_area != fap) {
   16ce0:	b114      	cbz	r4, 16ce8 <fcb_walk+0x3c>
   16ce2:	9b00      	ldr	r3, [sp, #0]
   16ce4:	42a3      	cmp	r3, r4
   16ce6:	d112      	bne.n	16d0e <fcb_walk+0x62>
        rc = cb(&loc, cb_arg);
   16ce8:	4641      	mov	r1, r8
   16cea:	4668      	mov	r0, sp
   16cec:	47b8      	blx	r7
        if (rc) {
   16cee:	2800      	cmp	r0, #0
   16cf0:	d1f1      	bne.n	16cd6 <fcb_walk+0x2a>
        os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   16cf2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16cf6:	4628      	mov	r0, r5
   16cf8:	f7f3 fd38 	bl	a76c <os_mutex_pend>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
   16cfc:	4669      	mov	r1, sp
   16cfe:	4630      	mov	r0, r6
   16d00:	f7ff ff49 	bl	16b96 <fcb_getnext_nolock>
   16d04:	3003      	adds	r0, #3
        os_mutex_release(&fcb->f_mtx);
   16d06:	4628      	mov	r0, r5
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
   16d08:	d1e8      	bne.n	16cdc <fcb_walk+0x30>
    os_mutex_release(&fcb->f_mtx);
   16d0a:	f7f3 fcdd 	bl	a6c8 <os_mutex_release>
            return 0;
   16d0e:	2000      	movs	r0, #0
   16d10:	e7e1      	b.n	16cd6 <fcb_walk+0x2a>
	...

00016d14 <hal_bsp_flash_dev>:
    case 0:
        /* MCU internal flash. */
        return &nrf52k_flash_dev;
    default:
        /* External flash.  Assume not present in this BSP. */
        return NULL;
   16d14:	2800      	cmp	r0, #0
    }
}
   16d16:	4802      	ldr	r0, [pc, #8]	; (16d20 <hal_bsp_flash_dev+0xc>)
   16d18:	bf18      	it	ne
   16d1a:	2000      	movne	r0, #0
   16d1c:	4770      	bx	lr
   16d1e:	bf00      	nop
   16d20:	00023990 	.word	0x00023990

00016d24 <hal_bsp_init>:
}


void
hal_bsp_init(void)
{
   16d24:	b513      	push	{r0, r1, r4, lr}
    int rc;

    (void)rc;

    /* Make sure system clocks have started */
    hal_system_clock_start();
   16d26:	f7f1 fa61 	bl	81ec <hal_system_clock_start>

    /* Create all available nRF52832 peripherals */
    nrf52_periph_create();
   16d2a:	f004 fca9 	bl	1b680 <nrf52_periph_create>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   16d2e:	480d      	ldr	r0, [pc, #52]	; (16d64 <hal_bsp_init+0x40>)
   16d30:	2101      	movs	r1, #1
   16d32:	f7f2 ff77 	bl	9c24 <os_sem_init>

#if MYNEWT_VAL(SPI_0_MASTER)
    rc = dpl_sem_init(&g_spi0_sem, 0x1);
    assert(rc == 0);
   16d36:	4604      	mov	r4, r0
   16d38:	b128      	cbz	r0, 16d46 <hal_bsp_init+0x22>
   16d3a:	2300      	movs	r3, #0
   16d3c:	461a      	mov	r2, r3
   16d3e:	4619      	mov	r1, r3
   16d40:	4618      	mov	r0, r3
   16d42:	f7f2 f8d7 	bl	8ef4 <__assert_func>
#endif

#if MYNEWT_VAL(DW1000_DEVICE_0)
    dw1000_0 = hal_dw1000_inst(0);
   16d46:	f000 fec5 	bl	17ad4 <hal_dw1000_inst>
    rc = os_dev_create((struct os_dev *) dw1000_0, "dw1000_0",
   16d4a:	4b07      	ldr	r3, [pc, #28]	; (16d68 <hal_bsp_init+0x44>)
   16d4c:	9301      	str	r3, [sp, #4]
   16d4e:	4b07      	ldr	r3, [pc, #28]	; (16d6c <hal_bsp_init+0x48>)
   16d50:	9300      	str	r3, [sp, #0]
   16d52:	4907      	ldr	r1, [pc, #28]	; (16d70 <hal_bsp_init+0x4c>)
   16d54:	4623      	mov	r3, r4
   16d56:	2201      	movs	r2, #1
   16d58:	f7f2 fb2a 	bl	93b0 <os_dev_create>
      OS_DEV_INIT_PRIMARY, 0, dw1000_dev_init, (void *)&dw1000_0_cfg);
    assert(rc == 0);
   16d5c:	2800      	cmp	r0, #0
   16d5e:	d1ec      	bne.n	16d3a <hal_bsp_init+0x16>
#endif
}
   16d60:	b002      	add	sp, #8
   16d62:	bd10      	pop	{r4, pc}
   16d64:	20004bd0 	.word	0x20004bd0
   16d68:	000233d0 	.word	0x000233d0
   16d6c:	00017975 	.word	0x00017975
   16d70:	000233c7 	.word	0x000233c7

00016d74 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   16d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   16d78:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 16f1c <SEGGER_RTT_WriteNoLock+0x1a8>
   16d7c:	eb00 0640 	add.w	r6, r0, r0, lsl #1
   16d80:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   16d84:	b083      	sub	sp, #12
  switch (pRing->Flags) {
   16d86:	6af7      	ldr	r7, [r6, #44]	; 0x2c
   16d88:	2f01      	cmp	r7, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   16d8a:	4680      	mov	r8, r0
   16d8c:	468b      	mov	fp, r1
   16d8e:	4692      	mov	sl, r2
  switch (pRing->Flags) {
   16d90:	ea4f 0440 	mov.w	r4, r0, lsl #1
   16d94:	d007      	beq.n	16da6 <SEGGER_RTT_WriteNoLock+0x32>
   16d96:	2f02      	cmp	r7, #2
   16d98:	d049      	beq.n	16e2e <SEGGER_RTT_WriteNoLock+0xba>
   16d9a:	b33f      	cbz	r7, 16dec <SEGGER_RTT_WriteNoLock+0x78>
   16d9c:	2700      	movs	r7, #0
  }
  //
  // Finish up.
  //
  return Status;
}
   16d9e:	4638      	mov	r0, r7
   16da0:	b003      	add	sp, #12
   16da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RdOff = pRing->RdOff;
   16da6:	6ab7      	ldr	r7, [r6, #40]	; 0x28
  WrOff = pRing->WrOff;
   16da8:	6a75      	ldr	r5, [r6, #36]	; 0x24
  if (RdOff <= WrOff) {
   16daa:	42af      	cmp	r7, r5
   16dac:	d97a      	bls.n	16ea4 <SEGGER_RTT_WriteNoLock+0x130>
    r = RdOff - WrOff - 1u;
   16dae:	3f01      	subs	r7, #1
   16db0:	1b7f      	subs	r7, r7, r5
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   16db2:	6a36      	ldr	r6, [r6, #32]
    Status = Avail < NumBytes ? Avail : NumBytes;
   16db4:	4557      	cmp	r7, sl
   16db6:	bf28      	it	cs
   16db8:	4657      	movcs	r7, sl
  Rem = pRing->SizeOfBuffer - WrOff;
   16dba:	1b72      	subs	r2, r6, r5
  if (Rem > NumBytes) {
   16dbc:	4297      	cmp	r7, r2
   16dbe:	d27b      	bcs.n	16eb8 <SEGGER_RTT_WriteNoLock+0x144>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   16dc0:	f108 0301 	add.w	r3, r8, #1
   16dc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   16dc8:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
   16dcc:	4659      	mov	r1, fp
   16dce:	6858      	ldr	r0, [r3, #4]
   16dd0:	463a      	mov	r2, r7
   16dd2:	4428      	add	r0, r5
   16dd4:	f7f8 fc06 	bl	f5e4 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   16dd8:	4444      	add	r4, r8
   16dda:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
   16dde:	443d      	add	r5, r7
}
   16de0:	4638      	mov	r0, r7
    pRing->WrOff = WrOff + NumBytes;
   16de2:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
}
   16de6:	b003      	add	sp, #12
   16de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RdOff = pRing->RdOff;
   16dec:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  WrOff = pRing->WrOff;
   16dee:	6a75      	ldr	r5, [r6, #36]	; 0x24
  if (RdOff <= WrOff) {
   16df0:	42ab      	cmp	r3, r5
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   16df2:	bf9c      	itt	ls
   16df4:	6a32      	ldrls	r2, [r6, #32]
   16df6:	189b      	addls	r3, r3, r2
    r = RdOff - WrOff - 1u;
   16df8:	3b01      	subs	r3, #1
   16dfa:	1b5b      	subs	r3, r3, r5
    if (Avail < NumBytes) {
   16dfc:	459a      	cmp	sl, r3
   16dfe:	d8ce      	bhi.n	16d9e <SEGGER_RTT_WriteNoLock+0x2a>
  Rem = pRing->SizeOfBuffer - WrOff;
   16e00:	4404      	add	r4, r0
   16e02:	eb09 04c4 	add.w	r4, r9, r4, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   16e06:	f100 0801 	add.w	r8, r0, #1
  Rem = pRing->SizeOfBuffer - WrOff;
   16e0a:	6a26      	ldr	r6, [r4, #32]
   16e0c:	1b77      	subs	r7, r6, r5
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   16e0e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  if (Rem > NumBytes) {
   16e12:	45ba      	cmp	sl, r7
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   16e14:	eb09 09c8 	add.w	r9, r9, r8, lsl #3
  if (Rem > NumBytes) {
   16e18:	d26e      	bcs.n	16ef8 <SEGGER_RTT_WriteNoLock+0x184>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   16e1a:	f8d9 0004 	ldr.w	r0, [r9, #4]
   16e1e:	4652      	mov	r2, sl
   16e20:	4428      	add	r0, r5
    pRing->WrOff = WrOff + NumBytes;
   16e22:	4455      	add	r5, sl
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   16e24:	f7f8 fbde 	bl	f5e4 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   16e28:	4657      	mov	r7, sl
   16e2a:	6265      	str	r5, [r4, #36]	; 0x24
   16e2c:	e7b7      	b.n	16d9e <SEGGER_RTT_WriteNoLock+0x2a>
  WrOff = pRing->WrOff;
   16e2e:	f100 0801 	add.w	r8, r0, #1
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   16e32:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  WrOff = pRing->WrOff;
   16e36:	6a75      	ldr	r5, [r6, #36]	; 0x24
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   16e38:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  NumBytesWritten = 0u;
   16e3c:	2700      	movs	r7, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   16e3e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    if (RdOff > WrOff) {
   16e40:	42aa      	cmp	r2, r5
      NumBytesToWrite = RdOff - WrOff - 1u;
   16e42:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   16e46:	d922      	bls.n	16e8e <SEGGER_RTT_WriteNoLock+0x11a>
      NumBytesToWrite = RdOff - WrOff - 1u;
   16e48:	1b62      	subs	r2, r4, r5
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   16e4a:	6a34      	ldr	r4, [r6, #32]
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   16e4c:	4552      	cmp	r2, sl
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   16e4e:	eb09 0108 	add.w	r1, r9, r8
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   16e52:	eba4 0405 	sub.w	r4, r4, r5
   16e56:	bf28      	it	cs
   16e58:	4652      	movcs	r2, sl
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   16e5a:	4294      	cmp	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   16e5c:	6848      	ldr	r0, [r1, #4]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   16e5e:	bf28      	it	cs
   16e60:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   16e62:	4428      	add	r0, r5
   16e64:	4659      	mov	r1, fp
   16e66:	4622      	mov	r2, r4
   16e68:	f7f8 fbbc 	bl	f5e4 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   16e6c:	6a33      	ldr	r3, [r6, #32]
    WrOff           += NumBytesToWrite;
   16e6e:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
   16e70:	429d      	cmp	r5, r3
    NumBytes        -= NumBytesToWrite;
   16e72:	ebaa 0a04 	sub.w	sl, sl, r4
    NumBytesWritten += NumBytesToWrite;
   16e76:	4427      	add	r7, r4
    pBuffer         += NumBytesToWrite;
   16e78:	44a3      	add	fp, r4
    if (WrOff == pRing->SizeOfBuffer) {
   16e7a:	d00d      	beq.n	16e98 <SEGGER_RTT_WriteNoLock+0x124>
    pRing->WrOff = WrOff;
   16e7c:	6275      	str	r5, [r6, #36]	; 0x24
  } while (NumBytes);
   16e7e:	f1ba 0f00 	cmp.w	sl, #0
   16e82:	d08c      	beq.n	16d9e <SEGGER_RTT_WriteNoLock+0x2a>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   16e84:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    if (RdOff > WrOff) {
   16e86:	42aa      	cmp	r2, r5
      NumBytesToWrite = RdOff - WrOff - 1u;
   16e88:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   16e8c:	d8dc      	bhi.n	16e48 <SEGGER_RTT_WriteNoLock+0xd4>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   16e8e:	6a34      	ldr	r4, [r6, #32]
   16e90:	4422      	add	r2, r4
   16e92:	3a01      	subs	r2, #1
   16e94:	1b52      	subs	r2, r2, r5
   16e96:	e7d9      	b.n	16e4c <SEGGER_RTT_WriteNoLock+0xd8>
    pRing->WrOff = WrOff;
   16e98:	2500      	movs	r5, #0
   16e9a:	6275      	str	r5, [r6, #36]	; 0x24
  } while (NumBytes);
   16e9c:	f1ba 0f00 	cmp.w	sl, #0
   16ea0:	d1cd      	bne.n	16e3e <SEGGER_RTT_WriteNoLock+0xca>
   16ea2:	e77c      	b.n	16d9e <SEGGER_RTT_WriteNoLock+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   16ea4:	6a36      	ldr	r6, [r6, #32]
   16ea6:	4437      	add	r7, r6
   16ea8:	3f01      	subs	r7, #1
   16eaa:	1b7f      	subs	r7, r7, r5
    Status = Avail < NumBytes ? Avail : NumBytes;
   16eac:	4557      	cmp	r7, sl
   16eae:	bf28      	it	cs
   16eb0:	4657      	movcs	r7, sl
  Rem = pRing->SizeOfBuffer - WrOff;
   16eb2:	1b72      	subs	r2, r6, r5
  if (Rem > NumBytes) {
   16eb4:	4297      	cmp	r7, r2
   16eb6:	d383      	bcc.n	16dc0 <SEGGER_RTT_WriteNoLock+0x4c>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   16eb8:	f108 0a01 	add.w	sl, r8, #1
   16ebc:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
   16ec0:	eb09 0aca 	add.w	sl, r9, sl, lsl #3
   16ec4:	4659      	mov	r1, fp
   16ec6:	f8da 0004 	ldr.w	r0, [sl, #4]
   16eca:	9201      	str	r2, [sp, #4]
   16ecc:	4428      	add	r0, r5
   16ece:	f7f8 fb89 	bl	f5e4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   16ed2:	1bbe      	subs	r6, r7, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   16ed4:	9a01      	ldr	r2, [sp, #4]
   16ed6:	f8da 0004 	ldr.w	r0, [sl, #4]
    NumBytesAtOnce = NumBytes - Rem;
   16eda:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   16edc:	eb0b 0102 	add.w	r1, fp, r2
   16ee0:	462a      	mov	r2, r5
   16ee2:	f7f8 fb7f 	bl	f5e4 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   16ee6:	4444      	add	r4, r8
   16ee8:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
}
   16eec:	4638      	mov	r0, r7
    pRing->WrOff = NumBytesAtOnce;
   16eee:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
}
   16ef2:	b003      	add	sp, #12
   16ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   16ef8:	f8d9 0004 	ldr.w	r0, [r9, #4]
   16efc:	4428      	add	r0, r5
    NumBytesAtOnce = NumBytes - Rem;
   16efe:	4455      	add	r5, sl
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   16f00:	463a      	mov	r2, r7
    NumBytesAtOnce = NumBytes - Rem;
   16f02:	1bad      	subs	r5, r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   16f04:	f7f8 fb6e 	bl	f5e4 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   16f08:	eb0b 0107 	add.w	r1, fp, r7
   16f0c:	f8d9 0004 	ldr.w	r0, [r9, #4]
   16f10:	462a      	mov	r2, r5
   16f12:	f7f8 fb67 	bl	f5e4 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   16f16:	4657      	mov	r7, sl
   16f18:	6265      	str	r5, [r4, #36]	; 0x24
   16f1a:	e740      	b.n	16d9e <SEGGER_RTT_WriteNoLock+0x2a>
   16f1c:	200000d8 	.word	0x200000d8

00016f20 <SEGGER_RTT_GetKey>:
*    >= 0 -   Character which has been read. (Possible values: 0 - 255)
*
*  Notes
*    (1) This function is only specified for accesses to RTT buffer 0.
*/
int SEGGER_RTT_GetKey(void) {
   16f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INIT();
   16f24:	4c3e      	ldr	r4, [pc, #248]	; (17020 <SEGGER_RTT_GetKey+0x100>)
int SEGGER_RTT_GetKey(void) {
   16f26:	b082      	sub	sp, #8
  SEGGER_RTT_LOCK();
   16f28:	f7f3 f91e 	bl	a168 <os_arch_save_sr>
  INIT();
   16f2c:	7825      	ldrb	r5, [r4, #0]
  SEGGER_RTT_LOCK();
   16f2e:	4606      	mov	r6, r0
  INIT();
   16f30:	2d00      	cmp	r5, #0
   16f32:	d04d      	beq.n	16fd0 <SEGGER_RTT_GetKey+0xb0>
  WrOff = pRing->WrOff;
   16f34:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
  RdOff = pRing->RdOff;
   16f38:	6c25      	ldr	r5, [r4, #64]	; 0x40
  if (RdOff > WrOff) {
   16f3a:	4555      	cmp	r5, sl
   16f3c:	d809      	bhi.n	16f52 <SEGGER_RTT_GetKey+0x32>
  if (NumBytesRem > 0u) {
   16f3e:	4555      	cmp	r5, sl
   16f40:	d128      	bne.n	16f94 <SEGGER_RTT_GetKey+0x74>
  SEGGER_RTT_UNLOCK();
   16f42:	4630      	mov	r0, r6
   16f44:	f7f3 f916 	bl	a174 <os_arch_restore_sr>

  r = (int)SEGGER_RTT_Read(0u, &c, 1u);
  if (r == 1) {
    r = (int)(unsigned char)c;
  } else {
    r = -1;
   16f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  return r;
}
   16f4c:	b002      	add	sp, #8
   16f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   16f52:	e9d4 980d 	ldrd	r9, r8, [r4, #52]	; 0x34
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
   16f56:	eba8 0705 	sub.w	r7, r8, r5
    NumBytesRem = MIN(NumBytesRem, BufferSize);
   16f5a:	2f01      	cmp	r7, #1
   16f5c:	bf28      	it	cs
   16f5e:	2701      	movcs	r7, #1
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   16f60:	463a      	mov	r2, r7
   16f62:	eb09 0105 	add.w	r1, r9, r5
   16f66:	f10d 0007 	add.w	r0, sp, #7
   16f6a:	f7f8 fb3b 	bl	f5e4 <memcpy>
    RdOff        += NumBytesRem;
   16f6e:	19eb      	adds	r3, r5, r7
    if (RdOff == pRing->SizeOfBuffer) {
   16f70:	4598      	cmp	r8, r3
    BufferSize   -= NumBytesRem;
   16f72:	f1c7 0201 	rsb	r2, r7, #1
  NumBytesRem = WrOff - RdOff;
   16f76:	bf14      	ite	ne
   16f78:	ebaa 0a03 	subne.w	sl, sl, r3
      RdOff = 0u;
   16f7c:	2300      	moveq	r3, #0
  NumBytesRem = MIN(NumBytesRem, BufferSize);
   16f7e:	4552      	cmp	r2, sl
   16f80:	bf28      	it	cs
   16f82:	4652      	movcs	r2, sl
  if (NumBytesRem > 0u) {
   16f84:	b9a2      	cbnz	r2, 16fb0 <SEGGER_RTT_GetKey+0x90>
  if (NumBytesRead) {
   16f86:	4545      	cmp	r5, r8
   16f88:	d0db      	beq.n	16f42 <SEGGER_RTT_GetKey+0x22>
  SEGGER_RTT_UNLOCK();
   16f8a:	4630      	mov	r0, r6
    pRing->RdOff = RdOff;
   16f8c:	6423      	str	r3, [r4, #64]	; 0x40
  SEGGER_RTT_UNLOCK();
   16f8e:	f7f3 f8f1 	bl	a174 <os_arch_restore_sr>
  if (r == 1) {
   16f92:	e008      	b.n	16fa6 <SEGGER_RTT_GetKey+0x86>
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   16f94:	6b62      	ldr	r2, [r4, #52]	; 0x34
    RdOff        += NumBytesRem;
   16f96:	1c6b      	adds	r3, r5, #1
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   16f98:	5d52      	ldrb	r2, [r2, r5]
   16f9a:	f88d 2007 	strb.w	r2, [sp, #7]
  SEGGER_RTT_UNLOCK();
   16f9e:	4630      	mov	r0, r6
    pRing->RdOff = RdOff;
   16fa0:	6423      	str	r3, [r4, #64]	; 0x40
  SEGGER_RTT_UNLOCK();
   16fa2:	f7f3 f8e7 	bl	a174 <os_arch_restore_sr>
    r = (int)(unsigned char)c;
   16fa6:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   16faa:	b002      	add	sp, #8
   16fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   16fb0:	f107 0208 	add.w	r2, r7, #8
   16fb4:	eb0d 0702 	add.w	r7, sp, r2
   16fb8:	f819 2003 	ldrb.w	r2, [r9, r3]
   16fbc:	f807 2c01 	strb.w	r2, [r7, #-1]
    RdOff        += NumBytesRem;
   16fc0:	3301      	adds	r3, #1
  SEGGER_RTT_UNLOCK();
   16fc2:	4630      	mov	r0, r6
    pRing->RdOff = RdOff;
   16fc4:	6423      	str	r3, [r4, #64]	; 0x40
  SEGGER_RTT_UNLOCK();
   16fc6:	f7f3 f8d5 	bl	a174 <os_arch_restore_sr>
  if (r == 1) {
   16fca:	4545      	cmp	r5, r8
   16fcc:	d0eb      	beq.n	16fa6 <SEGGER_RTT_GetKey+0x86>
   16fce:	e7bb      	b.n	16f48 <SEGGER_RTT_GetKey+0x28>
  p->aUp[0].sName         = "Terminal";
   16fd0:	4a14      	ldr	r2, [pc, #80]	; (17024 <SEGGER_RTT_GetKey+0x104>)
  p->aUp[0].RdOff         = 0u;
   16fd2:	62a5      	str	r5, [r4, #40]	; 0x28
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   16fd4:	2301      	movs	r3, #1
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   16fd6:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   16fda:	f104 0348 	add.w	r3, r4, #72	; 0x48
   16fde:	e9c4 2306 	strd	r2, r3, [r4, #24]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   16fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   16fe6:	6223      	str	r3, [r4, #32]
  strcpy(&p->acID[7], "RTT");
   16fe8:	4b0f      	ldr	r3, [pc, #60]	; (17028 <SEGGER_RTT_GetKey+0x108>)
  p->aDown[0].WrOff         = 0u;
   16fea:	63e5      	str	r5, [r4, #60]	; 0x3c
  strcpy(&p->acID[7], "RTT");
   16fec:	6818      	ldr	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
   16fee:	4b0f      	ldr	r3, [pc, #60]	; (1702c <SEGGER_RTT_GetKey+0x10c>)
  WrOff = pRing->WrOff;
   16ff0:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
  strcpy(&p->acID[7], "RTT");
   16ff4:	f8c4 0007 	str.w	r0, [r4, #7]
  p->aDown[0].pBuffer       = _acDownBuffer;
   16ff8:	f504 6189 	add.w	r1, r4, #1096	; 0x448
   16ffc:	6361      	str	r1, [r4, #52]	; 0x34
  strcpy(&p->acID[0], "SEGGER");
   16ffe:	e893 0003 	ldmia.w	r3, {r0, r1}
  p->acID[6] = ' ';
   17002:	2320      	movs	r3, #32
   17004:	71a3      	strb	r3, [r4, #6]
  if (NumBytesRem > 0u) {
   17006:	4555      	cmp	r5, sl
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   17008:	f04f 0310 	mov.w	r3, #16
  p->aDown[0].sName         = "Terminal";
   1700c:	e9c4 520b 	strd	r5, r2, [r4, #44]	; 0x2c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   17010:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
  p->aUp[0].WrOff         = 0u;
   17014:	6265      	str	r5, [r4, #36]	; 0x24
  strcpy(&p->acID[0], "SEGGER");
   17016:	6020      	str	r0, [r4, #0]
   17018:	80a1      	strh	r1, [r4, #4]
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1701a:	63a3      	str	r3, [r4, #56]	; 0x38
  if (NumBytesRem > 0u) {
   1701c:	d091      	beq.n	16f42 <SEGGER_RTT_GetKey+0x22>
   1701e:	e7b9      	b.n	16f94 <SEGGER_RTT_GetKey+0x74>
   17020:	200000d8 	.word	0x200000d8
   17024:	000233e8 	.word	0x000233e8
   17028:	000233f4 	.word	0x000233f4
   1702c:	000233f8 	.word	0x000233f8

00017030 <SEGGER_RTT_Init>:
  strcpy(&p->acID[7], "RTT");
   17030:	4814      	ldr	r0, [pc, #80]	; (17084 <SEGGER_RTT_Init+0x54>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   17032:	4b15      	ldr	r3, [pc, #84]	; (17088 <SEGGER_RTT_Init+0x58>)
  strcpy(&p->acID[0], "SEGGER");
   17034:	4915      	ldr	r1, [pc, #84]	; (1708c <SEGGER_RTT_Init+0x5c>)
  strcpy(&p->acID[7], "RTT");
   17036:	6800      	ldr	r0, [r0, #0]
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   17038:	b410      	push	{r4}
  strcpy(&p->acID[7], "RTT");
   1703a:	f8c3 0007 	str.w	r0, [r3, #7]
  strcpy(&p->acID[0], "SEGGER");
   1703e:	c903      	ldmia	r1, {r0, r1}
  p->aUp[0].sName         = "Terminal";
   17040:	4c13      	ldr	r4, [pc, #76]	; (17090 <SEGGER_RTT_Init+0x60>)
  strcpy(&p->acID[0], "SEGGER");
   17042:	6018      	str	r0, [r3, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   17044:	2001      	movs	r0, #1
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   17046:	e9c3 0004 	strd	r0, r0, [r3, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1704a:	f103 0048 	add.w	r0, r3, #72	; 0x48
   1704e:	e9c3 4006 	strd	r4, r0, [r3, #24]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   17052:	f44f 6080 	mov.w	r0, #1024	; 0x400
  p->acID[6] = ' ';
   17056:	f04f 0c20 	mov.w	ip, #32
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1705a:	6218      	str	r0, [r3, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   1705c:	f503 6089 	add.w	r0, r3, #1096	; 0x448
  p->aUp[0].RdOff         = 0u;
   17060:	2200      	movs	r2, #0
  p->acID[6] = ' ';
   17062:	f883 c006 	strb.w	ip, [r3, #6]
  p->aDown[0].pBuffer       = _acDownBuffer;
   17066:	6358      	str	r0, [r3, #52]	; 0x34
  strcpy(&p->acID[0], "SEGGER");
   17068:	8099      	strh	r1, [r3, #4]
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1706a:	2010      	movs	r0, #16
  p->aDown[0].sName         = "Terminal";
   1706c:	e9c3 240b 	strd	r2, r4, [r3, #44]	; 0x2c
  p->aUp[0].RdOff         = 0u;
   17070:	629a      	str	r2, [r3, #40]	; 0x28
  _DoInit();
}
   17072:	f85d 4b04 	ldr.w	r4, [sp], #4
  p->aUp[0].WrOff         = 0u;
   17076:	625a      	str	r2, [r3, #36]	; 0x24
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   17078:	6398      	str	r0, [r3, #56]	; 0x38
  p->aDown[0].RdOff         = 0u;
   1707a:	641a      	str	r2, [r3, #64]	; 0x40
  p->aDown[0].WrOff         = 0u;
   1707c:	63da      	str	r2, [r3, #60]	; 0x3c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1707e:	645a      	str	r2, [r3, #68]	; 0x44
}
   17080:	4770      	bx	lr
   17082:	bf00      	nop
   17084:	000233f4 	.word	0x000233f4
   17088:	200000d8 	.word	0x200000d8
   1708c:	000233f8 	.word	0x000233f8
   17090:	000233e8 	.word	0x000233e8

00017094 <uwb_dw1000_read_sts_rxtime>:
inline static uint64_t
uwb_dw1000_read_sts_rxtime(struct uwb_dev* __attribute((unused)) dev)
{
    /* No such functionality */
    return 0xffffffffffffffffULL;
}
   17094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17098:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1709c:	4770      	bx	lr

0001709e <uwb_dw1000_hal_noblock_wait>:
    return hal_dw1000_rw_noblock_wait((dw1000_dev_instance_t *)dev, timeout);
   1709e:	f000 bf95 	b.w	17fcc <hal_dw1000_rw_noblock_wait>

000170a2 <uwb_dw1000_mac_framefilter>:
    assert(0);
}

struct uwb_dev_status
uwb_dw1000_mac_framefilter(struct uwb_dev * dev, uint16_t enable)
{
   170a2:	460a      	mov	r2, r1
    uint16_t dw1k_en = 0;

    /* Translate uwb-level frame filtering flags to dw1000 reg */
    if (enable & UWB_FF_BEACON_EN) dw1k_en |= DWT_FF_BEACON_EN;
   170a4:	f011 0101 	ands.w	r1, r1, #1
   170a8:	bf18      	it	ne
   170aa:	2104      	movne	r1, #4
    if (enable & UWB_FF_DATA_EN)   dw1k_en |= DWT_FF_DATA_EN;
   170ac:	0793      	lsls	r3, r2, #30
   170ae:	bf48      	it	mi
   170b0:	f041 0108 	orrmi.w	r1, r1, #8
    if (enable & UWB_FF_ACK_EN)    dw1k_en |= DWT_FF_ACK_EN;
   170b4:	0753      	lsls	r3, r2, #29
   170b6:	bf44      	itt	mi
   170b8:	f041 0310 	orrmi.w	r3, r1, #16
   170bc:	b299      	uxthmi	r1, r3
    if (enable & UWB_FF_MAC_EN)    dw1k_en |= DWT_FF_MAC_EN;
   170be:	0713      	lsls	r3, r2, #28
   170c0:	bf44      	itt	mi
   170c2:	f041 0320 	orrmi.w	r3, r1, #32
   170c6:	b299      	uxthmi	r1, r3
    if (enable & UWB_FF_RSVD_EN)   dw1k_en |= DWT_FF_RSVD_EN;
   170c8:	06d3      	lsls	r3, r2, #27
   170ca:	bf44      	itt	mi
   170cc:	f041 0340 	orrmi.w	r3, r1, #64	; 0x40
   170d0:	b299      	uxthmi	r1, r3
    if (enable & UWB_FF_COORD_EN)  dw1k_en |= DWT_FF_COORD_EN;
   170d2:	05d3      	lsls	r3, r2, #23
   170d4:	bf44      	itt	mi
   170d6:	f041 0102 	orrmi.w	r1, r1, #2
   170da:	b289      	uxthmi	r1, r1

    return dw1000_mac_framefilter((dw1000_dev_instance_t *)dev, dw1k_en);
   170dc:	f001 bb4e 	b.w	1877c <dw1000_mac_framefilter>

000170e0 <uwb_dw1000_set_autoack>:
}

struct uwb_dev_status
uwb_dw1000_set_autoack(struct uwb_dev * dev, bool enable)
{
    return dw1000_set_autoack((dw1000_dev_instance_t *)dev, enable);
   170e0:	f001 bb8c 	b.w	187fc <dw1000_set_autoack>

000170e4 <uwb_dw1000_set_autoack_delay>:
}

struct uwb_dev_status
uwb_dw1000_set_autoack_delay(struct uwb_dev * dev, uint8_t delay)
{
    return dw1000_set_autoack_delay((dw1000_dev_instance_t *)dev, delay);
   170e4:	f001 bbd4 	b.w	18890 <dw1000_set_autoack_delay>

000170e8 <uwb_dw1000_event_cnt_ctrl>:
}

struct uwb_dev_status
uwb_dw1000_event_cnt_ctrl(struct uwb_dev * dev, bool enable, bool reset)
{
    return dw1000_phy_event_cnt_ctrl((dw1000_dev_instance_t *)dev, enable, reset);
   170e8:	f003 b877 	b.w	1a1da <dw1000_phy_event_cnt_ctrl>

000170ec <uwb_dw1000_event_cnt_read>:
}

struct uwb_dev_status
uwb_dw1000_event_cnt_read(struct uwb_dev * dev, struct uwb_dev_evcnt *res)
{
    return dw1000_phy_event_cnt_read((dw1000_dev_instance_t *)dev, res);
   170ec:	f003 b891 	b.w	1a212 <dw1000_phy_event_cnt_read>

000170f0 <uwb_dw1000_calc_pdoa>:
{
   170f0:	b508      	push	{r3, lr}
    printf("%s not implemented\n", __func__);
   170f2:	4905      	ldr	r1, [pc, #20]	; (17108 <uwb_dw1000_calc_pdoa+0x18>)
   170f4:	4805      	ldr	r0, [pc, #20]	; (1710c <uwb_dw1000_calc_pdoa+0x1c>)
   170f6:	f7f8 fd71 	bl	fbdc <printf>
    assert(0);
   170fa:	2300      	movs	r3, #0
   170fc:	461a      	mov	r2, r3
   170fe:	4619      	mov	r1, r3
   17100:	4618      	mov	r0, r3
   17102:	f7f1 fef7 	bl	8ef4 <__assert_func>
   17106:	bf00      	nop
   17108:	0002343c 	.word	0x0002343c
   1710c:	000233ff 	.word	0x000233ff

00017110 <uwb_dw1000_estimate_los>:
    return dw1000_estimate_los(rssi, fppl);
   17110:	f001 bfc4 	b.w	1909c <dw1000_estimate_los>

00017114 <uwb_dw1000_calc_fppl>:
    return dw1000_calc_fppl((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
   17114:	f001 bf32 	b.w	18f7c <dw1000_calc_fppl>

00017118 <uwb_dw1000_calc_seq_rssi>:
    return dw1000_calc_rssi((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
   17118:	f001 bf84 	b.w	19024 <dw1000_calc_rssi>

0001711c <uwb_dw1000_calc_rssi>:
    return dw1000_calc_rssi((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
   1711c:	f001 bf82 	b.w	19024 <dw1000_calc_rssi>

00017120 <uwb_dw1000_get_fppl>:
    return dw1000_get_fppl((dw1000_dev_instance_t *)dev);
   17120:	f001 bf72 	b.w	19008 <dw1000_get_fppl>

00017124 <uwb_dw1000_get_rssi>:
    return dw1000_get_rssi((dw1000_dev_instance_t *)dev);
   17124:	f001 bfac 	b.w	19080 <dw1000_get_rssi>

00017128 <uwb_dw1000_set_on_error_continue>:
    return dw1000_set_on_error_continue((dw1000_dev_instance_t *)dev, enable);
   17128:	f001 b9a1 	b.w	1846e <dw1000_set_on_error_continue>

0001712c <uwb_dw1000_phy_repeated_frames>:
    return dw1000_phy_repeated_frames((dw1000_dev_instance_t *)dev, rate);
   1712c:	f002 bf16 	b.w	19f5c <dw1000_phy_repeated_frames>

00017130 <uwb_dw1000_phy_rx_reset>:
    return dw1000_phy_rx_reset((dw1000_dev_instance_t *)dev);
   17130:	f002 be2d 	b.w	19d8e <dw1000_phy_rx_reset>

00017134 <uwb_dw1000_phy_forcetrxoff>:
    return dw1000_phy_forcetrxoff((dw1000_dev_instance_t *)dev);
   17134:	f002 be60 	b.w	19df8 <dw1000_phy_forcetrxoff>

00017138 <uwb_dw1000_phy_data_duration>:
    return dw1000_phy_data_duration(&dev->attrib, nlen);
   17138:	f200 5034 	addw	r0, r0, #1332	; 0x534
   1713c:	f002 bfc6 	b.w	1a0cc <dw1000_phy_data_duration>

00017140 <uwb_dw1000_phy_SHR_duration>:
    return dw1000_phy_SHR_duration(&dev->attrib);
   17140:	f200 5034 	addw	r0, r0, #1332	; 0x534
   17144:	f002 bfae 	b.w	1a0a4 <dw1000_phy_SHR_duration>

00017148 <uwb_dw1000_phy_frame_duration>:
    return dw1000_phy_frame_duration(&dev->attrib, nlen);
   17148:	f200 5034 	addw	r0, r0, #1332	; 0x534
   1714c:	f002 bfe2 	b.w	1a114 <dw1000_phy_frame_duration>

00017150 <uwb_dw1000_read_txtime_lo32>:
    return dw1000_read_txtime_lo((dw1000_dev_instance_t *)dev);
   17150:	f002 bbee 	b.w	19930 <dw1000_read_txtime_lo>

00017154 <uwb_dw1000_read_txtime>:
    return dw1000_read_txtime((dw1000_dev_instance_t *)dev);
   17154:	f001 bfe4 	b.w	19120 <dw1000_read_txtime>

00017158 <uwb_dw1000_read_rxtime_lo32>:
    return dw1000_read_rxtime_lo((dw1000_dev_instance_t *)dev);
   17158:	f001 bfdb 	b.w	19112 <dw1000_read_rxtime_lo>

0001715c <uwb_dw1000_read_rxtime>:
    return dw1000_read_rxtime((dw1000_dev_instance_t *)dev);
   1715c:	f001 bfd1 	b.w	19102 <dw1000_read_rxtime>

00017160 <uwb_dw1000_read_systime_lo32>:
    return dw1000_read_systime_lo((dw1000_dev_instance_t *)dev);
   17160:	f001 bfc8 	b.w	190f4 <dw1000_read_systime_lo>

00017164 <uwb_dw1000_read_systime>:
    return dw1000_read_systime((dw1000_dev_instance_t *)dev);
   17164:	f001 bfbe 	b.w	190e4 <dw1000_read_systime>

00017168 <uwb_dw1000_set_rxauto_disable>:
    return dw1000_set_rxauto_disable((dw1000_dev_instance_t *)dev, disable);
   17168:	f001 b98a 	b.w	18480 <dw1000_set_rxauto_disable>

0001716c <uwb_dw1000_set_wait4resp_delay>:
    return dw1000_set_wait4resp_delay((dw1000_dev_instance_t *)dev, delay);
   1716c:	f001 bba4 	b.w	188b8 <dw1000_set_wait4resp_delay>

00017170 <uwb_dw1000_set_wait4resp>:
    return dw1000_set_wait4resp((dw1000_dev_instance_t *)dev, enable);
   17170:	f001 b96e 	b.w	18450 <dw1000_set_wait4resp>

00017174 <uwb_dw1000_tx_wait>:
    return dw1000_tx_wait((dw1000_dev_instance_t *)dev, timeout);
   17174:	f001 b8d2 	b.w	1831c <dw1000_tx_wait>

00017178 <uwb_dw1000_write_tx_fctrl>:
    dw1000_write_tx_fctrl((dw1000_dev_instance_t *)dev, tx_frame_length,
   17178:	f001 b80a 	b.w	18190 <dw1000_write_tx_fctrl>

0001717c <uwb_dw1000_write_tx>:
    return dw1000_write_tx((dw1000_dev_instance_t *)dev, tx_frame_bytes,
   1717c:	f000 bfc2 	b.w	18104 <dw1000_write_tx>

00017180 <uwb_dw1000_stop_rx>:
    return dw1000_stop_rx((dw1000_dev_instance_t *)dev);
   17180:	f001 b90e 	b.w	183a0 <dw1000_stop_rx>

00017184 <uwb_dw1000_start_rx>:
    return dw1000_start_rx((dw1000_dev_instance_t *)dev);
   17184:	f001 ba5e 	b.w	18644 <dw1000_start_rx>

00017188 <uwb_dw1000_start_tx>:
    return dw1000_start_tx((dw1000_dev_instance_t *)dev);
   17188:	f001 b848 	b.w	1821c <dw1000_start_tx>

0001718c <uwb_dw1000_set_delay_start>:
    return dw1000_set_delay_start((dw1000_dev_instance_t *)dev, dx_time);
   1718c:	f001 b8d1 	b.w	18332 <dw1000_set_delay_start>

00017190 <uwb_dw1000_set_abs_timeout>:
    return dw1000_set_abs_timeout((dw1000_dev_instance_t *)dev, rx_end);
   17190:	f001 ba28 	b.w	185e4 <dw1000_set_abs_timeout>

00017194 <uwb_dw1000_set_rx_window>:
    return dw1000_set_rx_window((dw1000_dev_instance_t *)dev, rx_start, rx_end);
   17194:	f001 b9fa 	b.w	1858c <dw1000_set_rx_window>

00017198 <uwb_dw1000_adj_rx_timeout>:
    return dw1000_adj_rx_timeout((dw1000_dev_instance_t *)dev, timeout);
   17198:	b289      	uxth	r1, r1
   1719a:	f001 b97a 	b.w	18492 <dw1000_adj_rx_timeout>

0001719e <uwb_dw1000_set_rx_timeout>:
    return dw1000_set_rx_timeout((dw1000_dev_instance_t *)dev, timeout);
   1719e:	b289      	uxth	r1, r1
   171a0:	f001 b99f 	b.w	184e2 <dw1000_set_rx_timeout>

000171a4 <uwb_dw1000_set_dblrxbuf>:
    return dw1000_set_dblrxbuff((dw1000_dev_instance_t *)dev, enable);
   171a4:	f001 bbca 	b.w	1893c <dw1000_set_dblrxbuff>

000171a8 <uwb_dw1000_txrf_power_value>:
    return dw1000_phy_txrf_power_value((dw1000_dev_instance_t *)dev, reg, coarse, fine);
   171a8:	f002 bfc2 	b.w	1a130 <dw1000_phy_txrf_power_value>

000171ac <uwb_dw1000_txrf_config>:
    dw1000_phy_config_txrf((dw1000_dev_instance_t *)dev, config);
   171ac:	f002 bcf7 	b.w	19b9e <dw1000_phy_config_txrf>

000171b0 <uwb_dw1000_mac_config>:
    return dw1000_mac_config((dw1000_dev_instance_t *)dev, config);
   171b0:	f001 bc0a 	b.w	189c8 <dw1000_mac_config>
   171b4:	0000      	movs	r0, r0
	...

000171b8 <uwb_dw1000_calc_clock_offset_ratio>:
    if (type == UWB_CR_CARRIER_INTEGRATOR) {
   171b8:	b90a      	cbnz	r2, 171be <uwb_dw1000_calc_clock_offset_ratio+0x6>
        return dw1000_calc_clock_offset_ratio((dw1000_dev_instance_t *)dev, val);
   171ba:	f001 bdc5 	b.w	18d48 <dw1000_calc_clock_offset_ratio>
    } else if (type == UWB_CR_RXTTCKO) {
   171be:	2a01      	cmp	r2, #1
   171c0:	d101      	bne.n	171c6 <uwb_dw1000_calc_clock_offset_ratio+0xe>
        return dw1000_calc_clock_offset_ratio_ttco((dw1000_dev_instance_t *)dev, val);
   171c2:	f001 be34 	b.w	18e2e <dw1000_calc_clock_offset_ratio_ttco>
}
   171c6:	ed9f 0b02 	vldr	d0, [pc, #8]	; 171d0 <uwb_dw1000_calc_clock_offset_ratio+0x18>
   171ca:	4770      	bx	lr
   171cc:	f3af 8000 	nop.w
	...

000171d8 <dw1000_read>:
{
   171d8:	b5f0      	push	{r4, r5, r6, r7, lr}
        .subindex = subaddress != 0,
   171da:	1e17      	subs	r7, r2, #0
{
   171dc:	b085      	sub	sp, #20
        .subindex = subaddress != 0,
   171de:	bf18      	it	ne
   171e0:	2701      	movne	r7, #1
    dw1000_cmd_t cmd = {
   171e2:	f001 043f 	and.w	r4, r1, #63	; 0x3f
        .extended = subaddress > 0x7F,
   171e6:	2a7f      	cmp	r2, #127	; 0x7f
        .subindex = subaddress != 0,
   171e8:	4615      	mov	r5, r2
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   171ea:	ea44 1c87 	orr.w	ip, r4, r7, lsl #6
        .extended = subaddress > 0x7F,
   171ee:	bf94      	ite	ls
   171f0:	2200      	movls	r2, #0
   171f2:	2201      	movhi	r2, #1
    uint8_t header[] = {
   171f4:	f88d c00c 	strb.w	ip, [sp, #12]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   171f8:	ea44 1487 	orr.w	r4, r4, r7, lsl #6
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   171fc:	ea45 1cc2 	orr.w	ip, r5, r2, lsl #7
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   17200:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
    uint8_t header[] = {
   17204:	f88d c00d 	strb.w	ip, [sp, #13]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   17208:	f3c5 020e 	ubfx	r2, r5, #0, #15
        [2] = (uint8_t) (subaddress >> 7)
   1720c:	ea4f 1cd5 	mov.w	ip, r5, lsr #7
{
   17210:	4606      	mov	r6, r0
        [2] = (uint8_t) (subaddress >> 7)
   17212:	f88d c00e 	strb.w	ip, [sp, #14]
{
   17216:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   1721a:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
   1721e:	b152      	cbz	r2, 17236 <dw1000_read+0x5e>
   17220:	f3c4 2400 	ubfx	r4, r4, #8, #1
   17224:	1ca2      	adds	r2, r4, #2
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   17226:	293f      	cmp	r1, #63	; 0x3f
   17228:	d907      	bls.n	1723a <dw1000_read+0x62>
   1722a:	2300      	movs	r3, #0
   1722c:	461a      	mov	r2, r3
   1722e:	4619      	mov	r1, r3
   17230:	4618      	mov	r0, r3
   17232:	f7f1 fe5f 	bl	8ef4 <__assert_func>
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   17236:	2201      	movs	r2, #1
   17238:	e7f5      	b.n	17226 <dw1000_read+0x4e>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   1723a:	042c      	lsls	r4, r5, #16
   1723c:	d4f5      	bmi.n	1722a <dw1000_read+0x52>
   1723e:	4405      	add	r5, r0
   17240:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   17244:	daf1      	bge.n	1722a <dw1000_read+0x52>
    if (length < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   17246:	2808      	cmp	r0, #8
   17248:	d903      	bls.n	17252 <dw1000_read+0x7a>
   1724a:	f896 152e 	ldrb.w	r1, [r6, #1326]	; 0x52e
   1724e:	07c9      	lsls	r1, r1, #31
   17250:	d508      	bpl.n	17264 <dw1000_read+0x8c>
        hal_dw1000_read(inst, header, len, buffer, length);
   17252:	9000      	str	r0, [sp, #0]
   17254:	a903      	add	r1, sp, #12
   17256:	4630      	mov	r0, r6
   17258:	f000 fc6e 	bl	17b38 <hal_dw1000_read>
}
   1725c:	f8d6 0508 	ldr.w	r0, [r6, #1288]	; 0x508
   17260:	b005      	add	sp, #20
   17262:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hal_dw1000_read_noblock(inst, header, len, buffer, length);
   17264:	9000      	str	r0, [sp, #0]
   17266:	a903      	add	r1, sp, #12
   17268:	4630      	mov	r0, r6
   1726a:	f000 fcbb 	bl	17be4 <hal_dw1000_read_noblock>
   1726e:	e7f5      	b.n	1725c <dw1000_read+0x84>

00017270 <dw1000_write>:
{
   17270:	b5f0      	push	{r4, r5, r6, r7, lr}
        .subindex = subaddress != 0,
   17272:	f1b2 0c00 	subs.w	ip, r2, #0
   17276:	bf18      	it	ne
   17278:	f04f 0c01 	movne.w	ip, #1
    dw1000_cmd_t cmd = {
   1727c:	f001 043f 	and.w	r4, r1, #63	; 0x3f
{
   17280:	b085      	sub	sp, #20
        .extended = subaddress > 0x7F,
   17282:	2a7f      	cmp	r2, #127	; 0x7f
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   17284:	ea44 178c 	orr.w	r7, r4, ip, lsl #6
   17288:	f067 077f 	orn	r7, r7, #127	; 0x7f
{
   1728c:	4605      	mov	r5, r0
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   1728e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
        .subindex = subaddress != 0,
   17292:	4610      	mov	r0, r2
        .extended = subaddress > 0x7F,
   17294:	bf94      	ite	ls
   17296:	2200      	movls	r2, #0
   17298:	2201      	movhi	r2, #1
    uint8_t header[] = {
   1729a:	f88d 700c 	strb.w	r7, [sp, #12]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   1729e:	ea44 148c 	orr.w	r4, r4, ip, lsl #6
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   172a2:	ea40 17c2 	orr.w	r7, r0, r2, lsl #7
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   172a6:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
    uint8_t header[] = {
   172aa:	f88d 700d 	strb.w	r7, [sp, #13]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   172ae:	f3c0 020e 	ubfx	r2, r0, #0, #15
        [2] = (uint8_t) (subaddress >> 7)
   172b2:	09c7      	lsrs	r7, r0, #7
{
   172b4:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
        [2] = (uint8_t) (subaddress >> 7)
   172b8:	f88d 700e 	strb.w	r7, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   172bc:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
   172c0:	b152      	cbz	r2, 172d8 <dw1000_write+0x68>
   172c2:	f3c4 2400 	ubfx	r4, r4, #8, #1
   172c6:	1ca2      	adds	r2, r4, #2
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   172c8:	293f      	cmp	r1, #63	; 0x3f
   172ca:	d907      	bls.n	172dc <dw1000_write+0x6c>
   172cc:	2300      	movs	r3, #0
   172ce:	461a      	mov	r2, r3
   172d0:	4619      	mov	r1, r3
   172d2:	4618      	mov	r0, r3
   172d4:	f7f1 fe0e 	bl	8ef4 <__assert_func>
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   172d8:	2201      	movs	r2, #1
   172da:	e7f5      	b.n	172c8 <dw1000_write+0x58>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   172dc:	0404      	lsls	r4, r0, #16
   172de:	d4f5      	bmi.n	172cc <dw1000_write+0x5c>
   172e0:	4430      	add	r0, r6
   172e2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   172e6:	daf1      	bge.n	172cc <dw1000_write+0x5c>
    if (len+length < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   172e8:	1991      	adds	r1, r2, r6
   172ea:	2908      	cmp	r1, #8
   172ec:	dd03      	ble.n	172f6 <dw1000_write+0x86>
   172ee:	f895 152e 	ldrb.w	r1, [r5, #1326]	; 0x52e
   172f2:	07c9      	lsls	r1, r1, #31
   172f4:	d508      	bpl.n	17308 <dw1000_write+0x98>
        hal_dw1000_write(inst, header, len, buffer, length);
   172f6:	9600      	str	r6, [sp, #0]
   172f8:	a903      	add	r1, sp, #12
   172fa:	4628      	mov	r0, r5
   172fc:	f000 fd62 	bl	17dc4 <hal_dw1000_write>
}
   17300:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
   17304:	b005      	add	sp, #20
   17306:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hal_dw1000_write_noblock(inst, header, len, buffer, length);
   17308:	9600      	str	r6, [sp, #0]
   1730a:	a903      	add	r1, sp, #12
   1730c:	4628      	mov	r0, r5
   1730e:	f000 fd9f 	bl	17e50 <hal_dw1000_write_noblock>
   17312:	e7f5      	b.n	17300 <dw1000_write+0x90>

00017314 <dw1000_read_reg>:
{
   17314:	b5f0      	push	{r4, r5, r6, r7, lr}
        .subindex = subaddress != 0,
   17316:	1e16      	subs	r6, r2, #0
{
   17318:	b087      	sub	sp, #28
    } __attribute__((__packed__, aligned (8))) buffer = {0};
   1731a:	f04f 0400 	mov.w	r4, #0
   1731e:	f04f 0500 	mov.w	r5, #0
        .subindex = subaddress != 0,
   17322:	bf18      	it	ne
   17324:	2601      	movne	r6, #1
    } __attribute__((__packed__, aligned (8))) buffer = {0};
   17326:	e9cd 4504 	strd	r4, r5, [sp, #16]
        .extended = subaddress > 0x7F,
   1732a:	2a7f      	cmp	r2, #127	; 0x7f
    dw1000_cmd_t cmd = {
   1732c:	f001 043f 	and.w	r4, r1, #63	; 0x3f
        .subindex = subaddress != 0,
   17330:	4615      	mov	r5, r2
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   17332:	ea44 1786 	orr.w	r7, r4, r6, lsl #6
        .extended = subaddress > 0x7F,
   17336:	bf94      	ite	ls
   17338:	2200      	movls	r2, #0
   1733a:	2201      	movhi	r2, #1
    uint8_t header[] = {
   1733c:	f88d 700c 	strb.w	r7, [sp, #12]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   17340:	ea44 1486 	orr.w	r4, r4, r6, lsl #6
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   17344:	ea45 17c2 	orr.w	r7, r5, r2, lsl #7
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   17348:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
    uint8_t header[] = {
   1734c:	f88d 700d 	strb.w	r7, [sp, #13]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   17350:	f3c5 020e 	ubfx	r2, r5, #0, #15
        [2] = (uint8_t) (subaddress >> 7)
   17354:	09ef      	lsrs	r7, r5, #7
   17356:	f88d 700e 	strb.w	r7, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   1735a:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
   1735e:	b152      	cbz	r2, 17376 <dw1000_read_reg+0x62>
   17360:	f3c4 2400 	ubfx	r4, r4, #8, #1
   17364:	1ca2      	adds	r2, r4, #2
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   17366:	293f      	cmp	r1, #63	; 0x3f
   17368:	d907      	bls.n	1737a <dw1000_read_reg+0x66>
   1736a:	2300      	movs	r3, #0
   1736c:	461a      	mov	r2, r3
   1736e:	4619      	mov	r1, r3
   17370:	4618      	mov	r0, r3
   17372:	f7f1 fdbf 	bl	8ef4 <__assert_func>
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   17376:	2201      	movs	r2, #1
   17378:	e7f5      	b.n	17366 <dw1000_read_reg+0x52>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   1737a:	0429      	lsls	r1, r5, #16
   1737c:	d4f5      	bmi.n	1736a <dw1000_read_reg+0x56>
   1737e:	441d      	add	r5, r3
   17380:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   17384:	d2f1      	bcs.n	1736a <dw1000_read_reg+0x56>
    assert(nbytes <= sizeof(uint64_t));
   17386:	2b08      	cmp	r3, #8
   17388:	d8ef      	bhi.n	1736a <dw1000_read_reg+0x56>
        hal_dw1000_read_noblock(inst, header, len, buffer.array, nbytes);
   1738a:	b299      	uxth	r1, r3
    if (len+nbytes < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   1738c:	4413      	add	r3, r2
   1738e:	2b08      	cmp	r3, #8
   17390:	d903      	bls.n	1739a <dw1000_read_reg+0x86>
   17392:	f890 352e 	ldrb.w	r3, [r0, #1326]	; 0x52e
   17396:	07db      	lsls	r3, r3, #31
   17398:	d508      	bpl.n	173ac <dw1000_read_reg+0x98>
        hal_dw1000_read(inst, header, len, buffer.array, nbytes);
   1739a:	9100      	str	r1, [sp, #0]
   1739c:	ab04      	add	r3, sp, #16
   1739e:	a903      	add	r1, sp, #12
   173a0:	f000 fbca 	bl	17b38 <hal_dw1000_read>
}
   173a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   173a8:	b007      	add	sp, #28
   173aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hal_dw1000_read_noblock(inst, header, len, buffer.array, nbytes);
   173ac:	9100      	str	r1, [sp, #0]
   173ae:	ab04      	add	r3, sp, #16
   173b0:	a903      	add	r1, sp, #12
   173b2:	f000 fc17 	bl	17be4 <hal_dw1000_read_noblock>
   173b6:	e7f5      	b.n	173a4 <dw1000_read_reg+0x90>

000173b8 <dw1000_write_reg>:
{
   173b8:	b5f0      	push	{r4, r5, r6, r7, lr}
        .subindex = subaddress != 0,
   173ba:	1e17      	subs	r7, r2, #0
   173bc:	bf18      	it	ne
   173be:	2701      	movne	r7, #1
    dw1000_cmd_t cmd = {
   173c0:	f001 033f 	and.w	r3, r1, #63	; 0x3f
{
   173c4:	b087      	sub	sp, #28
        .extended = subaddress > 0x7F,
   173c6:	2a7f      	cmp	r2, #127	; 0x7f
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   173c8:	ea43 1687 	orr.w	r6, r3, r7, lsl #6
   173cc:	f066 067f 	orn	r6, r6, #127	; 0x7f
{
   173d0:	4604      	mov	r4, r0
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   173d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        .subindex = subaddress != 0,
   173d6:	4610      	mov	r0, r2
        .extended = subaddress > 0x7F,
   173d8:	bf94      	ite	ls
   173da:	2200      	movls	r2, #0
   173dc:	2201      	movhi	r2, #1
    uint8_t header[] = {
   173de:	f88d 600c 	strb.w	r6, [sp, #12]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   173e2:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   173e6:	ea40 16c2 	orr.w	r6, r0, r2, lsl #7
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   173ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    uint8_t header[] = {
   173ee:	f88d 600d 	strb.w	r6, [sp, #13]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   173f2:	f3c0 020e 	ubfx	r2, r0, #0, #15
        [2] = (uint8_t) (subaddress >> 7)
   173f6:	09c6      	lsrs	r6, r0, #7
{
   173f8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        [2] = (uint8_t) (subaddress >> 7)
   173fa:	f88d 600e 	strb.w	r6, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   173fe:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   17402:	b172      	cbz	r2, 17422 <dw1000_write_reg+0x6a>
   17404:	f3c3 2300 	ubfx	r3, r3, #8, #1
   17408:	1c9a      	adds	r2, r3, #2
    buffer.value = val;
   1740a:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
    assert(nbytes <= sizeof(uint64_t));
   1740e:	2d08      	cmp	r5, #8
    buffer.value = val;
   17410:	e9cd 6704 	strd	r6, r7, [sp, #16]
    assert(nbytes <= sizeof(uint64_t));
   17414:	d907      	bls.n	17426 <dw1000_write_reg+0x6e>
   17416:	2300      	movs	r3, #0
   17418:	461a      	mov	r2, r3
   1741a:	4619      	mov	r1, r3
   1741c:	4618      	mov	r0, r3
   1741e:	f7f1 fd69 	bl	8ef4 <__assert_func>
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   17422:	2201      	movs	r2, #1
   17424:	e7f1      	b.n	1740a <dw1000_write_reg+0x52>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   17426:	293f      	cmp	r1, #63	; 0x3f
   17428:	d8f5      	bhi.n	17416 <dw1000_write_reg+0x5e>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   1742a:	0406      	lsls	r6, r0, #16
   1742c:	d4f3      	bmi.n	17416 <dw1000_write_reg+0x5e>
   1742e:	4428      	add	r0, r5
   17430:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   17434:	d2ef      	bcs.n	17416 <dw1000_write_reg+0x5e>
        hal_dw1000_write_noblock(inst, header, len, buffer.array, nbytes);
   17436:	b2ab      	uxth	r3, r5
    if (len+nbytes < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   17438:	4415      	add	r5, r2
   1743a:	2d08      	cmp	r5, #8
   1743c:	d903      	bls.n	17446 <dw1000_write_reg+0x8e>
   1743e:	f894 152e 	ldrb.w	r1, [r4, #1326]	; 0x52e
   17442:	07c9      	lsls	r1, r1, #31
   17444:	d507      	bpl.n	17456 <dw1000_write_reg+0x9e>
        hal_dw1000_write(inst, header, len, buffer.array, nbytes);
   17446:	9300      	str	r3, [sp, #0]
   17448:	a903      	add	r1, sp, #12
   1744a:	ab04      	add	r3, sp, #16
   1744c:	4620      	mov	r0, r4
   1744e:	f000 fcb9 	bl	17dc4 <hal_dw1000_write>
}
   17452:	b007      	add	sp, #28
   17454:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hal_dw1000_write_noblock(inst, header, len, buffer.array, nbytes);
   17456:	9300      	str	r3, [sp, #0]
   17458:	a903      	add	r1, sp, #12
   1745a:	ab04      	add	r3, sp, #16
   1745c:	4620      	mov	r0, r4
   1745e:	f000 fcf7 	bl	17e50 <hal_dw1000_write_noblock>
        hal_dw1000_rw_noblock_wait(inst, DPL_TIMEOUT_NEVER);
   17462:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17466:	4620      	mov	r0, r4
   17468:	f000 fdb0 	bl	17fcc <hal_dw1000_rw_noblock_wait>
}
   1746c:	e7f1      	b.n	17452 <dw1000_write_reg+0x9a>

0001746e <uwb_dw1000_set_euid>:
{
   1746e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return dw1000_set_eui((dw1000_dev_instance_t *)dev, euid);
   17470:	2108      	movs	r1, #8
   17472:	e9cd 2300 	strd	r2, r3, [sp]
   17476:	9102      	str	r1, [sp, #8]
   17478:	2200      	movs	r2, #0
   1747a:	2101      	movs	r1, #1
   1747c:	f7ff ff9c 	bl	173b8 <dw1000_write_reg>
}
   17480:	b005      	add	sp, #20
   17482:	f85d fb04 	ldr.w	pc, [sp], #4

00017486 <uwb_dw1000_set_uid>:
{
   17486:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return dw1000_set_address16((dw1000_dev_instance_t *)dev, uid);
   17488:	2302      	movs	r3, #2
   1748a:	2200      	movs	r2, #0
   1748c:	e9cd 1200 	strd	r1, r2, [sp]
   17490:	9302      	str	r3, [sp, #8]
   17492:	2103      	movs	r1, #3
   17494:	f7ff ff90 	bl	173b8 <dw1000_write_reg>
}
   17498:	b005      	add	sp, #20
   1749a:	f85d fb04 	ldr.w	pc, [sp], #4

0001749e <uwb_dw1000_set_panid>:
{
   1749e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return dw1000_set_panid((dw1000_dev_instance_t *)dev, pan_id);
   174a0:	2202      	movs	r2, #2
   174a2:	2300      	movs	r3, #0
   174a4:	9100      	str	r1, [sp, #0]
   174a6:	9202      	str	r2, [sp, #8]
   174a8:	9301      	str	r3, [sp, #4]
   174aa:	2103      	movs	r1, #3
   174ac:	f7ff ff84 	bl	173b8 <dw1000_write_reg>
}
   174b0:	b005      	add	sp, #20
   174b2:	f85d fb04 	ldr.w	pc, [sp], #4

000174b6 <dw1000_softreset>:
{
   174b6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   174ba:	4604      	mov	r4, r0
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, sizeof(uint16_t)); // Disable PMSC ctrl of RF and RX clk blocks
   174bc:	2600      	movs	r6, #0
   174be:	2700      	movs	r7, #0
   174c0:	f04f 0802 	mov.w	r8, #2
    dw1000_phy_sysclk_XTAL(inst);
   174c4:	f002 faca 	bl	19a5c <dw1000_phy_sysclk_XTAL>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, sizeof(uint16_t)); // Disable PMSC ctrl of RF and RX clk blocks
   174c8:	4620      	mov	r0, r4
   174ca:	e9cd 6700 	strd	r6, r7, [sp]
   174ce:	f8cd 8008 	str.w	r8, [sp, #8]
   174d2:	2204      	movs	r2, #4
   174d4:	2136      	movs	r1, #54	; 0x36
   174d6:	f7ff ff6f 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, 0x0, sizeof(uint8_t));  // Clear the wake-up configuration
   174da:	2501      	movs	r5, #1
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET, 0x0, sizeof(uint16_t)); // Clear any AON auto download bits (as reset will trigger AON download)
   174dc:	4620      	mov	r0, r4
   174de:	e9cd 6700 	strd	r6, r7, [sp]
   174e2:	f8cd 8008 	str.w	r8, [sp, #8]
   174e6:	2200      	movs	r2, #0
   174e8:	212c      	movs	r1, #44	; 0x2c
   174ea:	f7ff ff65 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, 0x0, sizeof(uint8_t));  // Clear the wake-up configuration
   174ee:	4620      	mov	r0, r4
   174f0:	e9cd 6700 	strd	r6, r7, [sp]
   174f4:	9502      	str	r5, [sp, #8]
   174f6:	2206      	movs	r2, #6
   174f8:	212c      	movs	r1, #44	; 0x2c
   174fa:	f7ff ff5d 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, 0x0, sizeof(uint8_t)); // Clear the register
   174fe:	4642      	mov	r2, r8
   17500:	4620      	mov	r0, r4
   17502:	e9cd 6700 	strd	r6, r7, [sp]
   17506:	9502      	str	r5, [sp, #8]
   17508:	212c      	movs	r1, #44	; 0x2c
   1750a:	f7ff ff55 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, sizeof(uint8_t));
   1750e:	2300      	movs	r3, #0
   17510:	2202      	movs	r2, #2
   17512:	e9cd 2300 	strd	r2, r3, [sp]
   17516:	4620      	mov	r0, r4
   17518:	4642      	mov	r2, r8
   1751a:	9502      	str	r5, [sp, #8]
   1751c:	212c      	movs	r1, #44	; 0x2c
   1751e:	f7ff ff4b 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL, sizeof(uint8_t));// Reset HIF, TX, RX and PMSC
   17522:	2203      	movs	r2, #3
   17524:	2136      	movs	r1, #54	; 0x36
   17526:	4620      	mov	r0, r4
   17528:	e9cd 6700 	strd	r6, r7, [sp]
   1752c:	9502      	str	r5, [sp, #8]
   1752e:	f7ff ff43 	bl	173b8 <dw1000_write_reg>
    dpl_cputime_delay_usecs(10);
   17532:	200a      	movs	r0, #10
   17534:	f7f9 feaa 	bl	1128c <dpl_cputime_delay_usecs>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t)); // Clear reset
   17538:	2300      	movs	r3, #0
   1753a:	22f0      	movs	r2, #240	; 0xf0
   1753c:	e9cd 2300 	strd	r2, r3, [sp]
   17540:	9502      	str	r5, [sp, #8]
   17542:	2203      	movs	r2, #3
   17544:	2136      	movs	r1, #54	; 0x36
   17546:	4620      	mov	r0, r4
   17548:	f7ff ff36 	bl	173b8 <dw1000_write_reg>
}
   1754c:	b004      	add	sp, #16
   1754e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017552 <dw1000_dev_configure_sleep>:
{
   17552:	b530      	push	{r4, r5, lr}
    uint16_t reg = dw1000_read_reg(inst, AON_ID, AON_WCFG_OFFSET, sizeof(uint16_t));
   17554:	2302      	movs	r3, #2
{
   17556:	b085      	sub	sp, #20
   17558:	4604      	mov	r4, r0
    uint16_t reg = dw1000_read_reg(inst, AON_ID, AON_WCFG_OFFSET, sizeof(uint16_t));
   1755a:	2200      	movs	r2, #0
   1755c:	212c      	movs	r1, #44	; 0x2c
   1755e:	f7ff fed9 	bl	17314 <dw1000_read_reg>
    if (inst->uwb_dev.status.LDE_enabled)
   17562:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
    uint16_t reg = dw1000_read_reg(inst, AON_ID, AON_WCFG_OFFSET, sizeof(uint16_t));
   17566:	b283      	uxth	r3, r0
    if (inst->uwb_dev.status.LDE_enabled)
   17568:	06d0      	lsls	r0, r2, #27
        reg |= AON_WCFG_ONW_LLDE;
   1756a:	bf5a      	itte	pl
   1756c:	f423 6300 	bicpl.w	r3, r3, #2048	; 0x800
        reg &= ~AON_WCFG_ONW_LLDE;
   17570:	f043 03c0 	orrpl.w	r3, r3, #192	; 0xc0
        reg |= AON_WCFG_ONW_LLDE;
   17574:	f443 630c 	orrmi.w	r3, r3, #2240	; 0x8c0
    if (inst->uwb_dev.status.LDO_enabled)
   17578:	0691      	lsls	r1, r2, #26
    if (inst->uwb_dev.config.wakeup_rx_enable)
   1757a:	f894 252d 	ldrb.w	r2, [r4, #1325]	; 0x52d
        reg &= ~AON_WCFG_ONW_LLDO;
   1757e:	bf5a      	itte	pl
   17580:	f423 5380 	bicpl.w	r3, r3, #4096	; 0x1000
   17584:	b29b      	uxthpl	r3, r3
        reg |= AON_WCFG_ONW_LLDO;
   17586:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
    if (inst->uwb_dev.config.wakeup_rx_enable)
   1758a:	06d2      	lsls	r2, r2, #27
        reg &= ~AON_WCFG_ONW_RX;
   1758c:	bf56      	itet	pl
   1758e:	f023 0302 	bicpl.w	r3, r3, #2
        reg |= AON_WCFG_ONW_RX;
   17592:	f043 0302 	orrmi.w	r3, r3, #2
        reg &= ~AON_WCFG_ONW_RX;
   17596:	b29b      	uxthpl	r3, r3
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET, reg, sizeof(uint16_t));
   17598:	2502      	movs	r5, #2
   1759a:	2200      	movs	r2, #0
   1759c:	e9cd 3200 	strd	r3, r2, [sp]
   175a0:	4620      	mov	r0, r4
   175a2:	9502      	str	r5, [sp, #8]
   175a4:	212c      	movs	r1, #44	; 0x2c
   175a6:	f7ff ff07 	bl	173b8 <dw1000_write_reg>
    reg = dw1000_read_reg(inst, AON_ID, AON_CFG0_OFFSET, sizeof(uint16_t));
   175aa:	462b      	mov	r3, r5
   175ac:	2206      	movs	r2, #6
   175ae:	4620      	mov	r0, r4
   175b0:	212c      	movs	r1, #44	; 0x2c
   175b2:	f7ff feaf 	bl	17314 <dw1000_read_reg>
    inst->uwb_dev.status.sleep_enabled = inst->uwb_dev.config.sleep_enable;
   175b6:	f894 252d 	ldrb.w	r2, [r4, #1325]	; 0x52d
   175ba:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   175be:	f3c2 1240 	ubfx	r2, r2, #5, #1
   175c2:	f362 13c7 	bfi	r3, r2, #7, #1
    reg = dw1000_read_reg(inst, AON_ID, AON_CFG0_OFFSET, sizeof(uint16_t));
   175c6:	b280      	uxth	r0, r0
    inst->uwb_dev.status.sleep_enabled = inst->uwb_dev.config.sleep_enable;
   175c8:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
    if (inst->uwb_dev.status.sleep_enabled)
   175cc:	061b      	lsls	r3, r3, #24
        reg |= AON_CFG0_WAKE_CNT | AON_CFG0_SLEEP_EN;
   175ce:	bf58      	it	pl
   175d0:	f020 0009 	bicpl.w	r0, r0, #9
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, reg, sizeof(uint16_t));
   175d4:	f04f 0302 	mov.w	r3, #2
        reg |= AON_CFG0_WAKE_CNT | AON_CFG0_SLEEP_EN;
   175d8:	bf4c      	ite	mi
   175da:	f040 000f 	orrmi.w	r0, r0, #15
        reg &= ~(AON_CFG0_WAKE_CNT | AON_CFG0_SLEEP_EN);
   175de:	f040 0006 	orrpl.w	r0, r0, #6
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, reg, sizeof(uint16_t));
   175e2:	9302      	str	r3, [sp, #8]
   175e4:	2300      	movs	r3, #0
   175e6:	9000      	str	r0, [sp, #0]
   175e8:	9301      	str	r3, [sp, #4]
   175ea:	2206      	movs	r2, #6
   175ec:	212c      	movs	r1, #44	; 0x2c
   175ee:	4620      	mov	r0, r4
   175f0:	f7ff fee2 	bl	173b8 <dw1000_write_reg>
}
   175f4:	b005      	add	sp, #20
   175f6:	bd30      	pop	{r4, r5, pc}

000175f8 <uwb_dw1000_sleep_config>:
    dw1000_dev_configure_sleep((dw1000_dev_instance_t *)dev);
   175f8:	f7ff bfab 	b.w	17552 <dw1000_dev_configure_sleep>

000175fc <dw1000_dev_enter_sleep>:
{
   175fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   175fe:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   17602:	b085      	sub	sp, #20
   17604:	4604      	mov	r4, r0
   17606:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1760a:	4638      	mov	r0, r7
   1760c:	f7f3 f8ae 	bl	a76c <os_mutex_pend>
    if (err != DPL_OK) {
   17610:	4605      	mov	r5, r0
   17612:	b148      	cbz	r0, 17628 <dw1000_dev_enter_sleep+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   17614:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   17618:	f043 0308 	orr.w	r3, r3, #8
   1761c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   17620:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17624:	b005      	add	sp, #20
   17626:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, 0x0, sizeof(uint16_t));
   17628:	2602      	movs	r6, #2
   1762a:	2300      	movs	r3, #0
   1762c:	2200      	movs	r2, #0
   1762e:	e9cd 2300 	strd	r2, r3, [sp]
   17632:	212c      	movs	r1, #44	; 0x2c
   17634:	4632      	mov	r2, r6
   17636:	4620      	mov	r0, r4
   17638:	9602      	str	r6, [sp, #8]
   1763a:	f7ff febd 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, sizeof(uint16_t));
   1763e:	2300      	movs	r3, #0
   17640:	2202      	movs	r2, #2
   17642:	e9cd 2300 	strd	r2, r3, [sp]
   17646:	4620      	mov	r0, r4
   17648:	9602      	str	r6, [sp, #8]
   1764a:	4632      	mov	r2, r6
   1764c:	212c      	movs	r1, #44	; 0x2c
   1764e:	f7ff feb3 	bl	173b8 <dw1000_write_reg>
    inst->uwb_dev.status.sleeping = 1;
   17652:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   17656:	f043 0301 	orr.w	r3, r3, #1
   1765a:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1765e:	4638      	mov	r0, r7
   17660:	f7f3 f832 	bl	a6c8 <os_mutex_release>
    assert(err == DPL_OK);
   17664:	2800      	cmp	r0, #0
   17666:	d0db      	beq.n	17620 <dw1000_dev_enter_sleep+0x24>
   17668:	462b      	mov	r3, r5
   1766a:	462a      	mov	r2, r5
   1766c:	4629      	mov	r1, r5
   1766e:	4628      	mov	r0, r5
   17670:	f7f1 fc40 	bl	8ef4 <__assert_func>

00017674 <uwb_dw1000_enter_sleep>:
    return dw1000_dev_enter_sleep((dw1000_dev_instance_t *)dev);
   17674:	f7ff bfc2 	b.w	175fc <dw1000_dev_enter_sleep>

00017678 <dw1000_dev_wakeup>:
{
   17678:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1767a:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
   1767e:	b085      	sub	sp, #20
   17680:	4604      	mov	r4, r0
   17682:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17686:	4628      	mov	r0, r5
   17688:	f7f3 f870 	bl	a76c <os_mutex_pend>
    if (err != DPL_OK) {
   1768c:	4602      	mov	r2, r0
   1768e:	b148      	cbz	r0, 176a4 <dw1000_dev_wakeup+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   17690:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   17694:	f043 0308 	orr.w	r3, r3, #8
   17698:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1769c:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   176a0:	b005      	add	sp, #20
   176a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->uwb_dev.status.sleeping = 0;
   176a4:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    while (devid != 0xDECA0130 && --timeout)
   176a8:	4f33      	ldr	r7, [pc, #204]	; (17778 <dw1000_dev_wakeup+0x100>)
    inst->uwb_dev.status.sleeping = 0;
   176aa:	f360 0300 	bfi	r3, r0, #0, #1
   176ae:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    devid = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   176b2:	4601      	mov	r1, r0
   176b4:	2304      	movs	r3, #4
   176b6:	4620      	mov	r0, r4
   176b8:	f7ff fe2c 	bl	17314 <dw1000_read_reg>
    while (devid != 0xDECA0130 && --timeout)
   176bc:	2605      	movs	r6, #5
   176be:	42b8      	cmp	r0, r7
   176c0:	d001      	beq.n	176c6 <dw1000_dev_wakeup+0x4e>
   176c2:	3e01      	subs	r6, #1
   176c4:	d140      	bne.n	17748 <dw1000_dev_wakeup+0xd0>
    inst->uwb_dev.status.sleeping = (devid != DWT_DEVICE_ID);
   176c6:	1bc0      	subs	r0, r0, r7
   176c8:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   176cc:	bf18      	it	ne
   176ce:	2001      	movne	r0, #1
   176d0:	f360 0300 	bfi	r3, r0, #0, #1
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_SLP2INIT, sizeof(uint32_t));
   176d4:	2604      	movs	r6, #4
    inst->uwb_dev.status.sleeping = (devid != DWT_DEVICE_ID);
   176d6:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_SLP2INIT, sizeof(uint32_t));
   176da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   176de:	2300      	movs	r3, #0
   176e0:	e9cd 2300 	strd	r2, r3, [sp]
   176e4:	9602      	str	r6, [sp, #8]
   176e6:	2200      	movs	r2, #0
   176e8:	210f      	movs	r1, #15
   176ea:	4620      	mov	r0, r4
   176ec:	f7ff fe64 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_RX_ERR, sizeof(uint32_t));
   176f0:	a31f      	add	r3, pc, #124	; (adr r3, 17770 <dw1000_dev_wakeup+0xf8>)
   176f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   176f6:	9602      	str	r6, [sp, #8]
   176f8:	e9cd 2300 	strd	r2, r3, [sp]
   176fc:	210f      	movs	r1, #15
   176fe:	2200      	movs	r2, #0
   17700:	4620      	mov	r0, r4
   17702:	f7ff fe59 	bl	173b8 <dw1000_write_reg>
    dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   17706:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
   1770a:	2600      	movs	r6, #0
   1770c:	2702      	movs	r7, #2
   1770e:	e9cd 3600 	strd	r3, r6, [sp]
   17712:	f641 0204 	movw	r2, #6148	; 0x1804
   17716:	212e      	movs	r1, #46	; 0x2e
   17718:	4620      	mov	r0, r4
   1771a:	9702      	str	r7, [sp, #8]
   1771c:	f7ff fe4c 	bl	173b8 <dw1000_write_reg>
    dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
   17720:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   17724:	9702      	str	r7, [sp, #8]
   17726:	4620      	mov	r0, r4
   17728:	e9cd 3600 	strd	r3, r6, [sp]
   1772c:	4632      	mov	r2, r6
   1772e:	2118      	movs	r1, #24
   17730:	f7ff fe42 	bl	173b8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   17734:	4628      	mov	r0, r5
   17736:	f7f2 ffc7 	bl	a6c8 <os_mutex_release>
    assert(err == DPL_OK);
   1773a:	b178      	cbz	r0, 1775c <dw1000_dev_wakeup+0xe4>
   1773c:	4633      	mov	r3, r6
   1773e:	4632      	mov	r2, r6
   17740:	4631      	mov	r1, r6
   17742:	4630      	mov	r0, r6
   17744:	f7f1 fbd6 	bl	8ef4 <__assert_func>
        hal_dw1000_wakeup(inst);
   17748:	4620      	mov	r0, r4
   1774a:	f000 fc58 	bl	17ffe <hal_dw1000_wakeup>
        devid = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   1774e:	2200      	movs	r2, #0
   17750:	2304      	movs	r3, #4
   17752:	4611      	mov	r1, r2
   17754:	4620      	mov	r0, r4
   17756:	f7ff fddd 	bl	17314 <dw1000_read_reg>
   1775a:	e7b0      	b.n	176be <dw1000_dev_wakeup+0x46>
    if(dpl_sem_get_count(&inst->tx_sem) == 0) {
   1775c:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
   17760:	2b00      	cmp	r3, #0
   17762:	d19b      	bne.n	1769c <dw1000_dev_wakeup+0x24>
    return (dpl_error_t)os_sem_release(&sem->sem);
   17764:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   17768:	f7f2 fa64 	bl	9c34 <os_sem_release>
   1776c:	e796      	b.n	1769c <dw1000_dev_wakeup+0x24>
   1776e:	bf00      	nop
   17770:	24119000 	.word	0x24119000
   17774:	00000000 	.word	0x00000000
   17778:	deca0130 	.word	0xdeca0130

0001777c <dw1000_dev_config>:
{
   1777c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    inst->uwb_dev.status.initialized = (inst->uwb_dev.device_id == DWT_DEVICE_ID);
   17780:	f8df 8158 	ldr.w	r8, [pc, #344]	; 178dc <dw1000_dev_config+0x160>
{
   17784:	4604      	mov	r4, r0
   17786:	2603      	movs	r6, #3
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   17788:	f200 5794 	addw	r7, r0, #1428	; 0x594
    inst->spi_settings.baudrate = inst->spi_baudrate_low;
   1778c:	f8d4 3558 	ldr.w	r3, [r4, #1368]	; 0x558
   17790:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
    hal_dw1000_reset(inst);
   17794:	4620      	mov	r0, r4
   17796:	f000 f9a5 	bl	17ae4 <hal_dw1000_reset>
    rc = hal_spi_disable(inst->spi_num);
   1779a:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1779e:	f003 fbbb 	bl	1af18 <hal_spi_disable>
    assert(rc == 0);
   177a2:	b128      	cbz	r0, 177b0 <dw1000_dev_config+0x34>
   177a4:	2300      	movs	r3, #0
   177a6:	461a      	mov	r2, r3
   177a8:	4619      	mov	r1, r3
   177aa:	4618      	mov	r0, r3
   177ac:	f7f1 fba2 	bl	8ef4 <__assert_func>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   177b0:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   177b4:	4639      	mov	r1, r7
   177b6:	f003 fb01 	bl	1adbc <hal_spi_config>
    assert(rc == 0);
   177ba:	2800      	cmp	r0, #0
   177bc:	d1f2      	bne.n	177a4 <dw1000_dev_config+0x28>
    rc = hal_spi_enable(inst->spi_num);
   177be:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   177c2:	f003 fb89 	bl	1aed8 <hal_spi_enable>
    assert(rc == 0);
   177c6:	4605      	mov	r5, r0
   177c8:	2800      	cmp	r0, #0
   177ca:	d1eb      	bne.n	177a4 <dw1000_dev_config+0x28>
    inst->uwb_dev.device_id = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   177cc:	4602      	mov	r2, r0
   177ce:	2304      	movs	r3, #4
   177d0:	4601      	mov	r1, r0
   177d2:	4620      	mov	r0, r4
   177d4:	f7ff fd9e 	bl	17314 <dw1000_read_reg>
    inst->uwb_dev.status.initialized = (inst->uwb_dev.device_id == DWT_DEVICE_ID);
   177d8:	eba0 0308 	sub.w	r3, r0, r8
    inst->uwb_dev.device_id = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   177dc:	f8c4 04c8 	str.w	r0, [r4, #1224]	; 0x4c8
    inst->uwb_dev.status.initialized = (inst->uwb_dev.device_id == DWT_DEVICE_ID);
   177e0:	4258      	negs	r0, r3
   177e2:	4158      	adcs	r0, r3
   177e4:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   177e8:	f360 0341 	bfi	r3, r0, #1, #1
    if (!inst->uwb_dev.status.initialized && --timeout)
   177ec:	079a      	lsls	r2, r3, #30
    inst->uwb_dev.status.initialized = (inst->uwb_dev.device_id == DWT_DEVICE_ID);
   177ee:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    if (!inst->uwb_dev.status.initialized && --timeout)
   177f2:	d407      	bmi.n	17804 <dw1000_dev_config+0x88>
   177f4:	3e01      	subs	r6, #1
   177f6:	d003      	beq.n	17800 <dw1000_dev_config+0x84>
        dw1000_dev_wakeup(inst);
   177f8:	4620      	mov	r0, r4
   177fa:	f7ff ff3d 	bl	17678 <dw1000_dev_wakeup>
        goto retry;
   177fe:	e7c5      	b.n	1778c <dw1000_dev_config+0x10>
        return DPL_TIMEOUT;
   17800:	2506      	movs	r5, #6
   17802:	e067      	b.n	178d4 <dw1000_dev_config+0x158>
    dw1000_phy_init(inst, NULL);
   17804:	4629      	mov	r1, r5
   17806:	4620      	mov	r0, r4
   17808:	f002 f9e2 	bl	19bd0 <dw1000_phy_init>
    inst->spi_settings.baudrate = inst->spi_baudrate;
   1780c:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
    rc = hal_spi_disable(inst->spi_num);
   17810:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    inst->spi_settings.baudrate = inst->spi_baudrate;
   17814:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
    rc = hal_spi_disable(inst->spi_num);
   17818:	f003 fb7e 	bl	1af18 <hal_spi_disable>
    assert(rc == 0);
   1781c:	2800      	cmp	r0, #0
   1781e:	d1c1      	bne.n	177a4 <dw1000_dev_config+0x28>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   17820:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   17824:	4639      	mov	r1, r7
   17826:	f003 fac9 	bl	1adbc <hal_spi_config>
    assert(rc == 0);
   1782a:	2800      	cmp	r0, #0
   1782c:	d1ba      	bne.n	177a4 <dw1000_dev_config+0x28>
    rc = hal_spi_enable(inst->spi_num);
   1782e:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   17832:	f003 fb51 	bl	1aed8 <hal_spi_enable>
    assert(rc == 0);
   17836:	4605      	mov	r5, r0
   17838:	2800      	cmp	r0, #0
   1783a:	d1b3      	bne.n	177a4 <dw1000_dev_config+0x28>
    inst->uwb_dev.pan_id = MYNEWT_VAL(PANID);
   1783c:	f64d 63ca 	movw	r3, #57034	; 0xdeca
   17840:	f8a4 34c0 	strh.w	r3, [r4, #1216]	; 0x4c0
    inst->uwb_dev.uid = inst->part_id & 0xffff;
   17844:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
   17848:	f8a4 34b6 	strh.w	r3, [r4, #1206]	; 0x4b6
    if (inst == hal_dw1000_inst(0)) {
   1784c:	f000 f942 	bl	17ad4 <hal_dw1000_inst>
   17850:	4284      	cmp	r4, r0
   17852:	d007      	beq.n	17864 <dw1000_dev_config+0xe8>
    } else if (inst == hal_dw1000_inst(1)){
   17854:	2001      	movs	r0, #1
   17856:	f000 f93d 	bl	17ad4 <hal_dw1000_inst>
   1785a:	4284      	cmp	r4, r0
   1785c:	d002      	beq.n	17864 <dw1000_dev_config+0xe8>
    } else if (inst == hal_dw1000_inst(2)){
   1785e:	2002      	movs	r0, #2
   17860:	f000 f938 	bl	17ad4 <hal_dw1000_inst>
    inst->uwb_dev.euid = (((uint64_t)inst->lot_id) << 32) + inst->part_id;
   17864:	f8d4 3578 	ldr.w	r3, [r4, #1400]	; 0x578
   17868:	f8d4 2574 	ldr.w	r2, [r4, #1396]	; 0x574
   1786c:	f504 6898 	add.w	r8, r4, #1216	; 0x4c0
   17870:	e948 2302 	strd	r2, r3, [r8, #-8]
    dw1000_mac_init(inst, NULL);
   17874:	2100      	movs	r1, #0
   17876:	4620      	mov	r0, r4
   17878:	f001 fb4c 	bl	18f14 <dw1000_mac_init>
    if (!inst->uwb_dev.uid || inst->uwb_dev.uid == 0xFFFF) {
   1787c:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   17880:	3b01      	subs	r3, #1
   17882:	b29b      	uxth	r3, r3
   17884:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   17888:	4293      	cmp	r3, r2
        inst->uwb_dev.uid = 0x1;
   1788a:	bf84      	itt	hi
   1788c:	2301      	movhi	r3, #1
   1788e:	f8a4 34b6 	strhhi.w	r3, [r4, #1206]	; 0x4b6
    dw1000_set_panid(inst,inst->uwb_dev.pan_id);
   17892:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
   17896:	2600      	movs	r6, #0
   17898:	2702      	movs	r7, #2
   1789a:	e9cd 3600 	strd	r3, r6, [sp]
   1789e:	463a      	mov	r2, r7
   178a0:	2103      	movs	r1, #3
   178a2:	4620      	mov	r0, r4
   178a4:	9702      	str	r7, [sp, #8]
   178a6:	f7ff fd87 	bl	173b8 <dw1000_write_reg>
    dw1000_set_eui(inst,inst->uwb_dev.euid);
   178aa:	2308      	movs	r3, #8
   178ac:	9302      	str	r3, [sp, #8]
   178ae:	e958 2302 	ldrd	r2, r3, [r8, #-8]
   178b2:	2101      	movs	r1, #1
   178b4:	e9cd 2300 	strd	r2, r3, [sp]
   178b8:	4620      	mov	r0, r4
   178ba:	4632      	mov	r2, r6
   178bc:	f7ff fd7c 	bl	173b8 <dw1000_write_reg>
    dw1000_set_address16(inst,inst->uwb_dev.uid);
   178c0:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   178c4:	9702      	str	r7, [sp, #8]
   178c6:	e9cd 3600 	strd	r3, r6, [sp]
   178ca:	4632      	mov	r2, r6
   178cc:	2103      	movs	r1, #3
   178ce:	4620      	mov	r0, r4
   178d0:	f7ff fd72 	bl	173b8 <dw1000_write_reg>
}
   178d4:	4628      	mov	r0, r5
   178d6:	b004      	add	sp, #16
   178d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   178dc:	deca0130 	.word	0xdeca0130

000178e0 <uwb_dw1000_wakeup>:
    return dw1000_dev_wakeup((dw1000_dev_instance_t *)dev);
   178e0:	f7ff beca 	b.w	17678 <dw1000_dev_wakeup>

000178e4 <dw1000_dev_enter_sleep_after_tx>:
{
   178e4:	b530      	push	{r4, r5, lr}
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
   178e6:	2304      	movs	r3, #4
{
   178e8:	4604      	mov	r4, r0
   178ea:	b085      	sub	sp, #20
   178ec:	460d      	mov	r5, r1
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
   178ee:	461a      	mov	r2, r3
   178f0:	2136      	movs	r1, #54	; 0x36
   178f2:	f7ff fd0f 	bl	17314 <dw1000_read_reg>
    inst->control.sleep_after_tx = enable;
   178f6:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   178fa:	f365 13c7 	bfi	r3, r5, #7, #1
   178fe:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if(inst->control.sleep_after_tx)
   17902:	061b      	lsls	r3, r3, #24
        reg |= PMSC_CTRL1_ATXSLP;
   17904:	bf4c      	ite	mi
   17906:	f440 6000 	orrmi.w	r0, r0, #2048	; 0x800
        reg &= ~(PMSC_CTRL1_ATXSLP);
   1790a:	f420 6000 	bicpl.w	r0, r0, #2048	; 0x800
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, reg, sizeof(uint32_t));
   1790e:	2204      	movs	r2, #4
   17910:	2300      	movs	r3, #0
   17912:	9000      	str	r0, [sp, #0]
   17914:	9202      	str	r2, [sp, #8]
   17916:	4620      	mov	r0, r4
   17918:	9301      	str	r3, [sp, #4]
   1791a:	2136      	movs	r1, #54	; 0x36
   1791c:	f7ff fd4c 	bl	173b8 <dw1000_write_reg>
}
   17920:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17924:	b005      	add	sp, #20
   17926:	bd30      	pop	{r4, r5, pc}

00017928 <uwb_dw1000_enter_sleep_after_tx>:
    return dw1000_dev_enter_sleep_after_tx((dw1000_dev_instance_t *)dev, enable);
   17928:	f7ff bfdc 	b.w	178e4 <dw1000_dev_enter_sleep_after_tx>

0001792c <dw1000_dev_enter_sleep_after_rx>:
{
   1792c:	b530      	push	{r4, r5, lr}
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
   1792e:	2304      	movs	r3, #4
{
   17930:	4604      	mov	r4, r0
   17932:	b085      	sub	sp, #20
   17934:	460d      	mov	r5, r1
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
   17936:	461a      	mov	r2, r3
   17938:	2136      	movs	r1, #54	; 0x36
   1793a:	f7ff fceb 	bl	17314 <dw1000_read_reg>
    inst->control.sleep_after_rx = enable;
   1793e:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   17942:	f365 0300 	bfi	r3, r5, #0, #1
   17946:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
    if(inst->control.sleep_after_rx)
   1794a:	07db      	lsls	r3, r3, #31
        reg |= PMSC_CTRL1_ARXSLP;
   1794c:	bf4c      	ite	mi
   1794e:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
        reg &= ~(PMSC_CTRL1_ARXSLP);
   17952:	f420 5080 	bicpl.w	r0, r0, #4096	; 0x1000
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, reg, sizeof(uint32_t));
   17956:	2204      	movs	r2, #4
   17958:	2300      	movs	r3, #0
   1795a:	9000      	str	r0, [sp, #0]
   1795c:	9202      	str	r2, [sp, #8]
   1795e:	4620      	mov	r0, r4
   17960:	9301      	str	r3, [sp, #4]
   17962:	2136      	movs	r1, #54	; 0x36
   17964:	f7ff fd28 	bl	173b8 <dw1000_write_reg>
}
   17968:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1796c:	b005      	add	sp, #20
   1796e:	bd30      	pop	{r4, r5, pc}

00017970 <uwb_dw1000_enter_sleep_after_rx>:
    return dw1000_dev_enter_sleep_after_rx((dw1000_dev_instance_t *)dev, enable);
   17970:	f7ff bfdc 	b.w	1792c <dw1000_dev_enter_sleep_after_rx>

00017974 <dw1000_dev_init>:
 * @param arg   Argument to set as pointer to struct dw1000_dev_cfg.
 * @return DPL_OK on success
 */
int
dw1000_dev_init(struct os_dev *odev, void *arg)
{
   17974:	b538      	push	{r3, r4, r5, lr}
   17976:	4604      	mov	r4, r0
   17978:	460d      	mov	r5, r1
    dpl_error_t err;
    struct dw1000_dev_cfg *cfg = (struct dw1000_dev_cfg*)arg;
    struct uwb_dev *udev = (struct uwb_dev*)odev;
    dw1000_dev_instance_t *inst = (dw1000_dev_instance_t *)odev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"dw1000_dev_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   1797a:	f7f9 fc79 	bl	11270 <dpl_cputime_get32>
   1797e:	4601      	mov	r1, r0
   17980:	482d      	ldr	r0, [pc, #180]	; (17a38 <dw1000_dev_init+0xc4>)
   17982:	f7f8 f92b 	bl	fbdc <printf>
#endif
    /* TODO, replace with open anch close function pointers below */
    OS_DEV_SETHANDLERS(odev, 0, 0);
   17986:	2300      	movs	r3, #0
   17988:	6023      	str	r3, [r4, #0]
   1798a:	60e3      	str	r3, [r4, #12]
        assert(inst);
        inst->uwb_dev.status.selfmalloc = 1;
        udev = (struct uwb_dev*)inst;
    }

    udev->rxbuf_size = MYNEWT_VAL(UWB_RX_BUFFER_SIZE);
   1798c:	4b2b      	ldr	r3, [pc, #172]	; (17a3c <dw1000_dev_init+0xc8>)
   1798e:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    udev->txbuf_size = MYNEWT_VAL(DW1000_HAL_SPI_BUFFER_SIZE);
    uwb_dev_init(udev);
   17992:	4620      	mov	r0, r4
   17994:	f7f1 f91b 	bl	8bce <uwb_dev_init>

    /* Setup common uwb interface */
    udev->uw_funcs = &dw1000_uwb_funcs;
   17998:	4b29      	ldr	r3, [pc, #164]	; (17a40 <dw1000_dev_init+0xcc>)
   1799a:	6263      	str	r3, [r4, #36]	; 0x24
    udev->rxdiag = (struct uwb_dev_rxdiag*)&inst->rxdiag;
   1799c:	f204 539c 	addw	r3, r4, #1436	; 0x59c
   179a0:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
    udev->rxdiag->rxd_len = sizeof(inst->rxdiag);
   179a4:	2314      	movs	r3, #20
   179a6:	f8a4 359c 	strh.w	r3, [r4, #1436]	; 0x59c

    /* Check size requirements */
    assert(sizeof(inst->rxdiag) <= MYNEWT_VAL(UWB_DEV_RXDIAG_MAXLEN));

    /* Capture dev_cfg parameters */
    inst->spi_sem = cfg->spi_sem;
   179aa:	682b      	ldr	r3, [r5, #0]
   179ac:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    inst->spi_num = cfg->spi_num;
   179b0:	7b2b      	ldrb	r3, [r5, #12]
   179b2:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
    inst->spi_baudrate = cfg->spi_baudrate;
   179b6:	686b      	ldr	r3, [r5, #4]
   179b8:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
    inst->spi_baudrate_low = cfg->spi_baudrate_low;
   179bc:	68ab      	ldr	r3, [r5, #8]
   179be:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
    inst->irq_pin = cfg->irq_pin;
   179c2:	7bab      	ldrb	r3, [r5, #14]
   179c4:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
    inst->rst_pin = cfg->rst_pin;
   179c8:	7b6b      	ldrb	r3, [r5, #13]
   179ca:	f884 355f 	strb.w	r3, [r4, #1375]	; 0x55f
    inst->ss_pin  = cfg->ss_pin;
   179ce:	7beb      	ldrb	r3, [r5, #15]
   179d0:	f884 355e 	strb.w	r3, [r4, #1374]	; 0x55e

    udev->rx_antenna_delay = cfg->rx_antenna_delay;
   179d4:	8a2b      	ldrh	r3, [r5, #16]
   179d6:	f8a4 34cc 	strh.w	r3, [r4, #1228]	; 0x4cc
    udev->tx_antenna_delay = cfg->tx_antenna_delay;
   179da:	8a6b      	ldrh	r3, [r5, #18]
   179dc:	f8a4 34ce 	strh.w	r3, [r4, #1230]	; 0x4ce
    udev->ext_clock_delay = cfg->ext_clock_delay;
   179e0:	696b      	ldr	r3, [r5, #20]
   179e2:	f8c4 34d4 	str.w	r3, [r4, #1236]	; 0x4d4
    return (dpl_error_t)os_mutex_init(&mu->mu);
   179e6:	f504 60ad 	add.w	r0, r4, #1384	; 0x568
   179ea:	f7f2 fe63 	bl	a6b4 <os_mutex_init>

    err = dpl_mutex_init(&inst->mutex);
    assert(err == DPL_OK);
   179ee:	b128      	cbz	r0, 179fc <dw1000_dev_init+0x88>
   179f0:	2300      	movs	r3, #0
   179f2:	461a      	mov	r2, r3
   179f4:	4619      	mov	r1, r3
   179f6:	4618      	mov	r0, r3
   179f8:	f7f1 fa7c 	bl	8ef4 <__assert_func>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   179fc:	2101      	movs	r1, #1
   179fe:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   17a02:	f7f2 f90f 	bl	9c24 <os_sem_init>
    err = dpl_sem_init(&inst->tx_sem, 0x1);
    assert(err == DPL_OK);
   17a06:	2800      	cmp	r0, #0
   17a08:	d1f2      	bne.n	179f0 <dw1000_dev_init+0x7c>
   17a0a:	2101      	movs	r1, #1
   17a0c:	f204 504c 	addw	r0, r4, #1356	; 0x54c
   17a10:	f7f2 f908 	bl	9c24 <os_sem_init>
    err = dpl_sem_init(&inst->spi_nb_sem, 0x1);
    assert(err == DPL_OK);
   17a14:	2800      	cmp	r0, #0
   17a16:	d1eb      	bne.n	179f0 <dw1000_dev_init+0x7c>

    /* phy attritubes per the IEEE802.15.4-2011 standard, Table 99 and Table 101 */
    udev->attrib.Tpsym = DPL_FLOAT32_INIT(1.0176282f); //!< Preamble symbols duration (usec) for MPRF of 62.89Mhz
   17a18:	f204 5234 	addw	r2, r4, #1332	; 0x534
   17a1c:	4909      	ldr	r1, [pc, #36]	; (17a44 <dw1000_dev_init+0xd0>)
   17a1e:	6011      	str	r1, [r2, #0]
    udev->attrib.Tbsym = DPL_FLOAT32_INIT(1.0256410f); //!< Baserate symbols duration (usec) 850khz
   17a20:	f504 62a7 	add.w	r2, r4, #1336	; 0x538
   17a24:	4908      	ldr	r1, [pc, #32]	; (17a48 <dw1000_dev_init+0xd4>)
   17a26:	6011      	str	r1, [r2, #0]
    udev->attrib.Tdsym = DPL_FLOAT32_INIT(0.1282051f); //!< Datarate symbols duration (usec) 6.81Mhz
   17a28:	f204 523c 	addw	r2, r4, #1340	; 0x53c
   17a2c:	4907      	ldr	r1, [pc, #28]	; (17a4c <dw1000_dev_init+0xd8>)
   17a2e:	6011      	str	r1, [r2, #0]

    SLIST_INIT(&inst->uwb_dev.interface_cbs);
   17a30:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530

#if MYNEWT_VAL(DW1000_SPI_BACKTRACE_LEN) || MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)
    inst->bt_ticks2usec = 1000000/MYNEWT_VAL(OS_CPUTIME_FREQ);
#endif
    return DPL_OK;
}
   17a34:	bd38      	pop	{r3, r4, r5, pc}
   17a36:	bf00      	nop
   17a38:	00023413 	.word	0x00023413
   17a3c:	01000400 	.word	0x01000400
   17a40:	00023454 	.word	0x00023454
   17a44:	3f8241a4 	.word	0x3f8241a4
   17a48:	3f834834 	.word	0x3f834834
   17a4c:	3e034833 	.word	0x3e034833

00017a50 <dw1000_dev_deinit>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void
dw1000_dev_deinit(dw1000_dev_instance_t * inst)
{
   17a50:	b510      	push	{r4, lr}
    assert(inst);
   17a52:	4604      	mov	r4, r0
   17a54:	b920      	cbnz	r0, 17a60 <dw1000_dev_deinit+0x10>
   17a56:	4603      	mov	r3, r0
   17a58:	4602      	mov	r2, r0
   17a5a:	4601      	mov	r1, r0
   17a5c:	f7f1 fa4a 	bl	8ef4 <__assert_func>
    hal_spi_disable(inst->spi_num);
   17a60:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
   17a64:	f003 fa58 	bl	1af18 <hal_spi_disable>

    /* De-Initialise task structures in uwb_dev */
    uwb_task_deinit(&inst->uwb_dev);
   17a68:	4620      	mov	r0, r4
   17a6a:	f7f1 f8a3 	bl	8bb4 <uwb_task_deinit>
    hal_gpio_irq_disable(inst->irq_pin);
   17a6e:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   17a72:	f7f1 fa15 	bl	8ea0 <hal_gpio_irq_disable>
    hal_gpio_irq_release(inst->irq_pin);
   17a76:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   17a7a:	f7f1 fa1f 	bl	8ebc <hal_gpio_irq_release>

    if (inst->uwb_dev.status.selfmalloc) {
   17a7e:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   17a82:	f013 0201 	ands.w	r2, r3, #1
   17a86:	d004      	beq.n	17a92 <dw1000_dev_deinit+0x42>
        free(inst);
   17a88:	4620      	mov	r0, r4
    } else {
        inst->uwb_dev.status.initialized = 0;
    }
}
   17a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        free(inst);
   17a8e:	f7f7 bd6f 	b.w	f570 <free>
        inst->uwb_dev.status.initialized = 0;
   17a92:	f362 0341 	bfi	r3, r2, #1, #1
   17a96:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
}
   17a9a:	bd10      	pop	{r4, pc}

00017a9c <hal_dw1000_spi_txrx_cb>:
 * @param ev    pointer to os_event
 * @return void
 */
void
hal_dw1000_spi_txrx_cb(void *arg, int len)
{
   17a9c:	b510      	push	{r4, lr}
    dpl_error_t err;
    struct _dw1000_dev_instance_t * inst = arg;
    assert(inst!=0);
   17a9e:	4604      	mov	r4, r0
   17aa0:	b928      	cbnz	r0, 17aae <hal_dw1000_spi_txrx_cb+0x12>
   17aa2:	2300      	movs	r3, #0
   17aa4:	461a      	mov	r2, r3
   17aa6:	4619      	mov	r1, r3
   17aa8:	4618      	mov	r0, r3
   17aaa:	f7f1 fa23 	bl	8ef4 <__assert_func>

    /* Check for longer nonblocking read/write op */
    if (dpl_sem_get_count(&inst->spi_nb_sem) == 0) {
   17aae:	f8b0 3552 	ldrh.w	r3, [r0, #1362]	; 0x552
   17ab2:	b933      	cbnz	r3, 17ac2 <hal_dw1000_spi_txrx_cb+0x26>
    return (dpl_error_t)os_sem_release(&sem->sem);
   17ab4:	f200 504c 	addw	r0, r0, #1356	; 0x54c
   17ab8:	f7f2 f8bc 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
    } else {
        hal_gpio_write(inst->ss_pin, 1);
        DW1000_SPI_BT_ADD_END(inst);
        err = dpl_sem_release(inst->spi_sem);
        assert(err == DPL_OK);
   17abc:	2800      	cmp	r0, #0
   17abe:	d1f0      	bne.n	17aa2 <hal_dw1000_spi_txrx_cb+0x6>
    }
}
   17ac0:	bd10      	pop	{r4, pc}
        hal_gpio_write(inst->ss_pin, 1);
   17ac2:	f890 055e 	ldrb.w	r0, [r0, #1374]	; 0x55e
   17ac6:	2101      	movs	r1, #1
   17ac8:	f7f1 f966 	bl	8d98 <hal_gpio_write>
   17acc:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   17ad0:	e7f2      	b.n	17ab8 <hal_dw1000_spi_txrx_cb+0x1c>
	...

00017ad4 <hal_dw1000_inst>:
        return &hal_dw1000_instances[idx];
   17ad4:	2800      	cmp	r0, #0
}
   17ad6:	4802      	ldr	r0, [pc, #8]	; (17ae0 <hal_dw1000_inst+0xc>)
   17ad8:	bf18      	it	ne
   17ada:	2000      	movne	r0, #0
   17adc:	4770      	bx	lr
   17ade:	bf00      	nop
   17ae0:	20000890 	.word	0x20000890

00017ae4 <hal_dw1000_reset>:
{
   17ae4:	b510      	push	{r4, lr}
    assert(inst);
   17ae6:	4604      	mov	r4, r0
   17ae8:	b920      	cbnz	r0, 17af4 <hal_dw1000_reset+0x10>
   17aea:	4603      	mov	r3, r0
   17aec:	4602      	mov	r2, r0
   17aee:	4601      	mov	r1, r0
   17af0:	f7f1 fa00 	bl	8ef4 <__assert_func>
    hal_gpio_init_out(inst->ss_pin, 1);
   17af4:	2101      	movs	r1, #1
   17af6:	f890 055e 	ldrb.w	r0, [r0, #1374]	; 0x55e
   17afa:	f7f1 f93a 	bl	8d72 <hal_gpio_init_out>
    hal_gpio_init_out(inst->rst_pin, 0);
   17afe:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   17b02:	2100      	movs	r1, #0
   17b04:	f7f1 f935 	bl	8d72 <hal_gpio_init_out>
    hal_gpio_write(inst->rst_pin, 0);
   17b08:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   17b0c:	2100      	movs	r1, #0
   17b0e:	f7f1 f943 	bl	8d98 <hal_gpio_write>
    dpl_cputime_delay_usecs(1);
   17b12:	2001      	movs	r0, #1
   17b14:	f7f9 fbba 	bl	1128c <dpl_cputime_delay_usecs>
    hal_gpio_write(inst->rst_pin, 1);
   17b18:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   17b1c:	2101      	movs	r1, #1
   17b1e:	f7f1 f93b 	bl	8d98 <hal_gpio_write>
    hal_gpio_init_in(inst->rst_pin, HAL_GPIO_PULL_NONE);
   17b22:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   17b26:	2100      	movs	r1, #0
   17b28:	f7f1 f90e 	bl	8d48 <hal_gpio_init_in>
}
   17b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dpl_cputime_delay_usecs(5000);
   17b30:	f241 3088 	movw	r0, #5000	; 0x1388
   17b34:	f7f9 bbaa 	b.w	1128c <dpl_cputime_delay_usecs>

00017b38 <hal_dw1000_read>:
{
   17b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17b3c:	4605      	mov	r5, r0
    assert(inst->spi_sem);
   17b3e:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
{
   17b42:	f8bd a020 	ldrh.w	sl, [sp, #32]
   17b46:	460e      	mov	r6, r1
   17b48:	4617      	mov	r7, r2
   17b4a:	4699      	mov	r9, r3
    assert(inst->spi_sem);
   17b4c:	b928      	cbnz	r0, 17b5a <hal_dw1000_read+0x22>
   17b4e:	2300      	movs	r3, #0
   17b50:	461a      	mov	r2, r3
   17b52:	4619      	mov	r1, r3
   17b54:	4618      	mov	r0, r3
   17b56:	f7f1 f9cd 	bl	8ef4 <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   17b5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17b5e:	f7f2 f89b 	bl	9c98 <os_sem_pend>
    if (rc != DPL_OK) {
   17b62:	4604      	mov	r4, r0
   17b64:	b140      	cbz	r0, 17b78 <hal_dw1000_read+0x40>
        inst->uwb_dev.status.sem_error = 1;
   17b66:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   17b6a:	f043 0304 	orr.w	r3, r3, #4
   17b6e:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
}
   17b72:	4620      	mov	r0, r4
   17b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hal_gpio_write(inst->ss_pin, 0);
   17b78:	4601      	mov	r1, r0
   17b7a:	f895 055e 	ldrb.w	r0, [r5, #1374]	; 0x55e
   17b7e:	f7f1 f90b 	bl	8d98 <hal_gpio_write>
    rc = hal_spi_txrx(inst->spi_num, (void*)cmd, 0, cmd_size);
   17b82:	4622      	mov	r2, r4
   17b84:	f895 055c 	ldrb.w	r0, [r5, #1372]	; 0x55c
   17b88:	463b      	mov	r3, r7
   17b8a:	4631      	mov	r1, r6
   17b8c:	f003 fa76 	bl	1b07c <hal_spi_txrx>
    assert(rc == DPL_OK);
   17b90:	4604      	mov	r4, r0
   17b92:	2800      	cmp	r0, #0
   17b94:	d1db      	bne.n	17b4e <hal_dw1000_read+0x16>
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
   17b96:	f8b5 7506 	ldrh.w	r7, [r5, #1286]	; 0x506
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT)) ?
   17b9a:	2fff      	cmp	r7, #255	; 0xff
   17b9c:	bf28      	it	cs
   17b9e:	27ff      	movcs	r7, #255	; 0xff
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   17ba0:	4606      	mov	r6, r0
    int bytes_left = length;
   17ba2:	46d0      	mov	r8, sl
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   17ba4:	4556      	cmp	r6, sl
   17ba6:	da00      	bge.n	17baa <hal_dw1000_read+0x72>
   17ba8:	b158      	cbz	r0, 17bc2 <hal_dw1000_read+0x8a>
    hal_gpio_write(inst->ss_pin, 1);
   17baa:	f895 055e 	ldrb.w	r0, [r5, #1374]	; 0x55e
   17bae:	2101      	movs	r1, #1
   17bb0:	f7f1 f8f2 	bl	8d98 <hal_gpio_write>
    return (dpl_error_t)os_sem_release(&sem->sem);
   17bb4:	f8d5 0548 	ldr.w	r0, [r5, #1352]	; 0x548
   17bb8:	f7f2 f83c 	bl	9c34 <os_sem_release>
    assert(rc == DPL_OK);
   17bbc:	2800      	cmp	r0, #0
   17bbe:	d0d8      	beq.n	17b72 <hal_dw1000_read+0x3a>
   17bc0:	e7c5      	b.n	17b4e <hal_dw1000_read+0x16>
        int bytes_to_read = (bytes_left > step) ? step : bytes_left;
   17bc2:	45b8      	cmp	r8, r7
   17bc4:	4643      	mov	r3, r8
        rc = hal_spi_txrx(inst->spi_num, inst->uwb_dev.txbuf, buffer+offset, bytes_to_read);
   17bc6:	eb09 0206 	add.w	r2, r9, r6
        int bytes_to_read = (bytes_left > step) ? step : bytes_left;
   17bca:	bfa8      	it	ge
   17bcc:	463b      	movge	r3, r7
        rc = hal_spi_txrx(inst->spi_num, inst->uwb_dev.txbuf, buffer+offset, bytes_to_read);
   17bce:	f8d5 1500 	ldr.w	r1, [r5, #1280]	; 0x500
   17bd2:	f895 055c 	ldrb.w	r0, [r5, #1372]	; 0x55c
        bytes_left-=bytes_to_read;
   17bd6:	eba8 0803 	sub.w	r8, r8, r3
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   17bda:	443e      	add	r6, r7
        rc = hal_spi_txrx(inst->spi_num, inst->uwb_dev.txbuf, buffer+offset, bytes_to_read);
   17bdc:	f003 fa4e 	bl	1b07c <hal_spi_txrx>
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   17be0:	e7e0      	b.n	17ba4 <hal_dw1000_read+0x6c>
	...

00017be4 <hal_dw1000_read_noblock>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_read_noblock(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
   17be4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17be8:	4604      	mov	r4, r0
    int rc = DPL_OK;
    assert(inst->spi_sem);
   17bea:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
{
   17bee:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
   17bf2:	9301      	str	r3, [sp, #4]
   17bf4:	4689      	mov	r9, r1
   17bf6:	4616      	mov	r6, r2
    assert(inst->spi_sem);
   17bf8:	b928      	cbnz	r0, 17c06 <hal_dw1000_read_noblock+0x22>
   17bfa:	2300      	movs	r3, #0
   17bfc:	461a      	mov	r2, r3
   17bfe:	4619      	mov	r1, r3
   17c00:	4618      	mov	r0, r3
   17c02:	f7f1 f977 	bl	8ef4 <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   17c06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17c0a:	f7f2 f845 	bl	9c98 <os_sem_pend>

    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   17c0e:	4607      	mov	r7, r0
   17c10:	b148      	cbz	r0, 17c26 <hal_dw1000_read_noblock+0x42>
        inst->uwb_dev.status.sem_error = 1;
   17c12:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   17c16:	f043 0304 	orr.w	r3, r3, #4
   17c1a:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);

early_exit:
    return rc;
}
   17c1e:	4638      	mov	r0, r7
   17c20:	b003      	add	sp, #12
   17c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = hal_spi_disable(inst->spi_num);
   17c26:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   17c2a:	f003 f975 	bl	1af18 <hal_spi_disable>
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
   17c2e:	4964      	ldr	r1, [pc, #400]	; (17dc0 <hal_dw1000_read_noblock+0x1dc>)
    rc = hal_spi_disable(inst->spi_num);
   17c30:	4605      	mov	r5, r0
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
   17c32:	4622      	mov	r2, r4
   17c34:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   17c38:	f003 fa0c 	bl	1b054 <hal_spi_set_txrx_cb>
   17c3c:	4305      	orrs	r5, r0
    rc |= hal_spi_enable(inst->spi_num);
   17c3e:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   17c42:	f003 f949 	bl	1aed8 <hal_spi_enable>
    if (rc != DPL_OK) {
   17c46:	ea55 0300 	orrs.w	r3, r5, r0
   17c4a:	d127      	bne.n	17c9c <hal_dw1000_read_noblock+0xb8>
    hal_gpio_write(inst->ss_pin, 0);
   17c4c:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   17c50:	4639      	mov	r1, r7
   17c52:	f7f1 f8a1 	bl	8d98 <hal_gpio_write>
    if (cmd_size + length < inst->uwb_dev.txbuf_size &&
   17c56:	f8b4 3506 	ldrh.w	r3, [r4, #1286]	; 0x506
   17c5a:	eb06 0a08 	add.w	sl, r6, r8
   17c5e:	459a      	cmp	sl, r3
   17c60:	f204 554c 	addw	r5, r4, #1356	; 0x54c
   17c64:	da42      	bge.n	17cec <hal_dw1000_read_noblock+0x108>
   17c66:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
   17c6a:	dc3f      	bgt.n	17cec <hal_dw1000_read_noblock+0x108>
        memset(inst->uwb_dev.txbuf, 0, cmd_size + length);
   17c6c:	4652      	mov	r2, sl
   17c6e:	4639      	mov	r1, r7
   17c70:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   17c74:	f7f7 fcc3 	bl	f5fe <memset>
        memcpy(inst->uwb_dev.txbuf, cmd, cmd_size);
   17c78:	4649      	mov	r1, r9
   17c7a:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   17c7e:	4632      	mov	r2, r6
   17c80:	f7f7 fcb0 	bl	f5e4 <memcpy>
   17c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17c88:	4628      	mov	r0, r5
   17c8a:	f7f2 f805 	bl	9c98 <os_sem_pend>
        if (rc != DPL_OK) {
   17c8e:	b160      	cbz	r0, 17caa <hal_dw1000_read_noblock+0xc6>
            inst->uwb_dev.status.sem_error = 1;
   17c90:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   17c94:	f043 0304 	orr.w	r3, r3, #4
   17c98:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    return (dpl_error_t)os_sem_release(&sem->sem);
   17c9c:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   17ca0:	f7f1 ffc8 	bl	9c34 <os_sem_release>
    assert(rc == DPL_OK);
   17ca4:	2800      	cmp	r0, #0
   17ca6:	d0ba      	beq.n	17c1e <hal_dw1000_read_noblock+0x3a>
   17ca8:	e7a7      	b.n	17bfa <hal_dw1000_read_noblock+0x16>
        rc = hal_spi_txrx_noblock(inst->spi_num, inst->uwb_dev.txbuf,
   17caa:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   17cae:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   17cb2:	4611      	mov	r1, r2
   17cb4:	4653      	mov	r3, sl
   17cb6:	f003 fa29 	bl	1b10c <hal_spi_txrx_noblock>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   17cba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17cbe:	4628      	mov	r0, r5
   17cc0:	f7f1 ffea 	bl	9c98 <os_sem_pend>
        if (rc != DPL_OK) {
   17cc4:	2800      	cmp	r0, #0
   17cc6:	d1e3      	bne.n	17c90 <hal_dw1000_read_noblock+0xac>
    return (dpl_error_t)os_sem_release(&sem->sem);
   17cc8:	4628      	mov	r0, r5
   17cca:	f7f1 ffb3 	bl	9c34 <os_sem_release>
        assert(rc == DPL_OK);
   17cce:	2800      	cmp	r0, #0
   17cd0:	d193      	bne.n	17bfa <hal_dw1000_read_noblock+0x16>
        hal_gpio_write(inst->ss_pin, 1);
   17cd2:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   17cd6:	2101      	movs	r1, #1
   17cd8:	f7f1 f85e 	bl	8d98 <hal_gpio_write>
        memcpy(buffer, inst->uwb_dev.txbuf + cmd_size, length);
   17cdc:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   17ce0:	9801      	ldr	r0, [sp, #4]
   17ce2:	4642      	mov	r2, r8
   17ce4:	4431      	add	r1, r6
   17ce6:	f7f7 fc7d 	bl	f5e4 <memcpy>
   17cea:	e7d7      	b.n	17c9c <hal_dw1000_read_noblock+0xb8>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   17cec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17cf0:	4628      	mov	r0, r5
   17cf2:	f7f1 ffd1 	bl	9c98 <os_sem_pend>
    if (rc != DPL_OK) {
   17cf6:	2800      	cmp	r0, #0
   17cf8:	d1ca      	bne.n	17c90 <hal_dw1000_read_noblock+0xac>
    rc = hal_spi_txrx_noblock(inst->spi_num, (void*)cmd, inst->uwb_dev.txbuf, cmd_size);
   17cfa:	4633      	mov	r3, r6
   17cfc:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   17d00:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   17d04:	4649      	mov	r1, r9
   17d06:	f003 fa01 	bl	1b10c <hal_spi_txrx_noblock>
    if (rc != DPL_OK) {
   17d0a:	4606      	mov	r6, r0
   17d0c:	2800      	cmp	r0, #0
   17d0e:	d1c5      	bne.n	17c9c <hal_dw1000_read_noblock+0xb8>
    memset(inst->uwb_dev.txbuf, 0, (length < inst->uwb_dev.txbuf_size)? length : inst->uwb_dev.txbuf_size);
   17d10:	f8b4 2506 	ldrh.w	r2, [r4, #1286]	; 0x506
   17d14:	4542      	cmp	r2, r8
   17d16:	4601      	mov	r1, r0
   17d18:	bf28      	it	cs
   17d1a:	4642      	movcs	r2, r8
   17d1c:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   17d20:	f7f7 fc6d 	bl	f5fe <memset>
   17d24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17d28:	4628      	mov	r0, r5
   17d2a:	f7f1 ffb5 	bl	9c98 <os_sem_pend>
    if (rc != DPL_OK) {
   17d2e:	2800      	cmp	r0, #0
   17d30:	d1ae      	bne.n	17c90 <hal_dw1000_read_noblock+0xac>
    return (dpl_error_t)os_sem_release(&sem->sem);
   17d32:	4628      	mov	r0, r5
   17d34:	f7f1 ff7e 	bl	9c34 <os_sem_release>
    assert(rc == DPL_OK);
   17d38:	2800      	cmp	r0, #0
   17d3a:	f47f af5e 	bne.w	17bfa <hal_dw1000_read_noblock+0x16>
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
   17d3e:	f8b4 b506 	ldrh.w	fp, [r4, #1286]	; 0x506
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT))?
   17d42:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   17d46:	bf28      	it	cs
   17d48:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    int bytes_left = length;
   17d4c:	46c1      	mov	r9, r8
    while (offset<length) {
   17d4e:	45b0      	cmp	r8, r6
   17d50:	dc08      	bgt.n	17d64 <hal_dw1000_read_noblock+0x180>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   17d52:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   17d56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17d5a:	f7f1 ff9d 	bl	9c98 <os_sem_pend>
    if (rc != DPL_OK) {
   17d5e:	2800      	cmp	r0, #0
   17d60:	d09c      	beq.n	17c9c <hal_dw1000_read_noblock+0xb8>
   17d62:	e795      	b.n	17c90 <hal_dw1000_read_noblock+0xac>
        int bytes_to_read = (bytes_left > step) ? step : bytes_left;
   17d64:	45d9      	cmp	r9, fp
   17d66:	46ca      	mov	sl, r9
   17d68:	bfa8      	it	ge
   17d6a:	46da      	movge	sl, fp
        if (bytes_left) {
   17d6c:	ebb9 090a 	subs.w	r9, r9, sl
   17d70:	d006      	beq.n	17d80 <hal_dw1000_read_noblock+0x19c>
   17d72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17d76:	4628      	mov	r0, r5
   17d78:	f7f1 ff8e 	bl	9c98 <os_sem_pend>
            if (rc != DPL_OK) {
   17d7c:	2800      	cmp	r0, #0
   17d7e:	d187      	bne.n	17c90 <hal_dw1000_read_noblock+0xac>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)inst->uwb_dev.txbuf,
   17d80:	9a01      	ldr	r2, [sp, #4]
   17d82:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   17d86:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   17d8a:	4653      	mov	r3, sl
   17d8c:	4432      	add	r2, r6
   17d8e:	f003 f9bd 	bl	1b10c <hal_spi_txrx_noblock>
        assert(rc==DPL_OK);
   17d92:	2800      	cmp	r0, #0
   17d94:	f47f af31 	bne.w	17bfa <hal_dw1000_read_noblock+0x16>
        if (bytes_left) {
   17d98:	f1b9 0f00 	cmp.w	r9, #0
   17d9c:	d00d      	beq.n	17dba <hal_dw1000_read_noblock+0x1d6>
   17d9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17da2:	4628      	mov	r0, r5
   17da4:	f7f1 ff78 	bl	9c98 <os_sem_pend>
            if (rc != DPL_OK) {
   17da8:	2800      	cmp	r0, #0
   17daa:	f47f af71 	bne.w	17c90 <hal_dw1000_read_noblock+0xac>
    return (dpl_error_t)os_sem_release(&sem->sem);
   17dae:	4628      	mov	r0, r5
   17db0:	f7f1 ff40 	bl	9c34 <os_sem_release>
            assert(rc == DPL_OK);
   17db4:	2800      	cmp	r0, #0
   17db6:	f47f af20 	bne.w	17bfa <hal_dw1000_read_noblock+0x16>
        offset+=bytes_to_read;
   17dba:	4456      	add	r6, sl
   17dbc:	e7c7      	b.n	17d4e <hal_dw1000_read_noblock+0x16a>
   17dbe:	bf00      	nop
   17dc0:	00017a9d 	.word	0x00017a9d

00017dc4 <hal_dw1000_write>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_write(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
   17dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17dc8:	4605      	mov	r5, r0
    int rc = DPL_OK;
    assert(inst->spi_sem);
   17dca:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
{
   17dce:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   17dd2:	460f      	mov	r7, r1
   17dd4:	4690      	mov	r8, r2
   17dd6:	461e      	mov	r6, r3
    assert(inst->spi_sem);
   17dd8:	b928      	cbnz	r0, 17de6 <hal_dw1000_write+0x22>
   17dda:	2300      	movs	r3, #0
   17ddc:	461a      	mov	r2, r3
   17dde:	4619      	mov	r1, r3
   17de0:	4618      	mov	r0, r3
   17de2:	f7f1 f887 	bl	8ef4 <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   17de6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17dea:	f7f1 ff55 	bl	9c98 <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   17dee:	4604      	mov	r4, r0
   17df0:	b140      	cbz	r0, 17e04 <hal_dw1000_write+0x40>
        inst->uwb_dev.status.sem_error = 1;
   17df2:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   17df6:	f043 0304 	orr.w	r3, r3, #4
   17dfa:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
    DW1000_SPI_BT_ADD_END(inst);
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
early_exit:
    return rc;
}
   17dfe:	4620      	mov	r0, r4
   17e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hal_gpio_write(inst->ss_pin, 0);
   17e04:	4601      	mov	r1, r0
   17e06:	f895 055e 	ldrb.w	r0, [r5, #1374]	; 0x55e
   17e0a:	f7f0 ffc5 	bl	8d98 <hal_gpio_write>
    rc = hal_spi_txrx(inst->spi_num, (void*)cmd, 0, cmd_size);
   17e0e:	4622      	mov	r2, r4
   17e10:	f895 055c 	ldrb.w	r0, [r5, #1372]	; 0x55c
   17e14:	4643      	mov	r3, r8
   17e16:	4639      	mov	r1, r7
   17e18:	f003 f930 	bl	1b07c <hal_spi_txrx>
    assert(rc == DPL_OK);
   17e1c:	4604      	mov	r4, r0
   17e1e:	2800      	cmp	r0, #0
   17e20:	d1db      	bne.n	17dda <hal_dw1000_write+0x16>
    if (length) {
   17e22:	f1b9 0f00 	cmp.w	r9, #0
   17e26:	d006      	beq.n	17e36 <hal_dw1000_write+0x72>
        hal_spi_txrx(inst->spi_num, (void*)buffer, 0, length);
   17e28:	4602      	mov	r2, r0
   17e2a:	464b      	mov	r3, r9
   17e2c:	f895 055c 	ldrb.w	r0, [r5, #1372]	; 0x55c
   17e30:	4631      	mov	r1, r6
   17e32:	f003 f923 	bl	1b07c <hal_spi_txrx>
    hal_gpio_write(inst->ss_pin, 1);
   17e36:	f895 055e 	ldrb.w	r0, [r5, #1374]	; 0x55e
   17e3a:	2101      	movs	r1, #1
   17e3c:	f7f0 ffac 	bl	8d98 <hal_gpio_write>
    return (dpl_error_t)os_sem_release(&sem->sem);
   17e40:	f8d5 0548 	ldr.w	r0, [r5, #1352]	; 0x548
   17e44:	f7f1 fef6 	bl	9c34 <os_sem_release>
    assert(rc == DPL_OK);
   17e48:	2800      	cmp	r0, #0
   17e4a:	d0d8      	beq.n	17dfe <hal_dw1000_write+0x3a>
   17e4c:	e7c5      	b.n	17dda <hal_dw1000_write+0x16>
	...

00017e50 <hal_dw1000_write_noblock>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_write_noblock(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
   17e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e54:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
   17e58:	4604      	mov	r4, r0
   17e5a:	4689      	mov	r9, r1
   17e5c:	4690      	mov	r8, r2
   17e5e:	469a      	mov	sl, r3
    int rc = DPL_OK;
    assert(length);
   17e60:	b92f      	cbnz	r7, 17e6e <hal_dw1000_write_noblock+0x1e>
   17e62:	2300      	movs	r3, #0
   17e64:	461a      	mov	r2, r3
   17e66:	4619      	mov	r1, r3
   17e68:	4618      	mov	r0, r3
   17e6a:	f7f1 f843 	bl	8ef4 <__assert_func>
    assert(inst->spi_sem);
   17e6e:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   17e72:	2800      	cmp	r0, #0
   17e74:	d0f5      	beq.n	17e62 <hal_dw1000_write_noblock+0x12>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   17e76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17e7a:	f7f1 ff0d 	bl	9c98 <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   17e7e:	9001      	str	r0, [sp, #4]
   17e80:	b148      	cbz	r0, 17e96 <hal_dw1000_write_noblock+0x46>
        inst->uwb_dev.status.sem_error = 1;
   17e82:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   17e86:	f043 0304 	orr.w	r3, r3, #4
   17e8a:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b

err_return:
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
    return rc;
}
   17e8e:	9801      	ldr	r0, [sp, #4]
   17e90:	b003      	add	sp, #12
   17e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = hal_spi_disable(inst->spi_num);
   17e96:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   17e9a:	f003 f83d 	bl	1af18 <hal_spi_disable>
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
   17e9e:	494a      	ldr	r1, [pc, #296]	; (17fc8 <hal_dw1000_write_noblock+0x178>)
    rc = hal_spi_disable(inst->spi_num);
   17ea0:	4605      	mov	r5, r0
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
   17ea2:	4622      	mov	r2, r4
   17ea4:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   17ea8:	f003 f8d4 	bl	1b054 <hal_spi_set_txrx_cb>
   17eac:	4305      	orrs	r5, r0
    rc |= hal_spi_enable(inst->spi_num);
   17eae:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   17eb2:	f003 f811 	bl	1aed8 <hal_spi_enable>
    if (rc != DPL_OK) {
   17eb6:	ea55 0100 	orrs.w	r1, r5, r0
   17eba:	d131      	bne.n	17f20 <hal_dw1000_write_noblock+0xd0>
    hal_gpio_write(inst->ss_pin, 0);
   17ebc:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   17ec0:	f7f0 ff6a 	bl	8d98 <hal_gpio_write>
    if (cmd_size + length < inst->uwb_dev.txbuf_size &&
   17ec4:	f8b4 3506 	ldrh.w	r3, [r4, #1286]	; 0x506
   17ec8:	eb08 0507 	add.w	r5, r8, r7
   17ecc:	429d      	cmp	r5, r3
   17ece:	da19      	bge.n	17f04 <hal_dw1000_write_noblock+0xb4>
   17ed0:	2dfe      	cmp	r5, #254	; 0xfe
   17ed2:	dc17      	bgt.n	17f04 <hal_dw1000_write_noblock+0xb4>
        memcpy(inst->uwb_dev.txbuf, cmd, cmd_size);
   17ed4:	4642      	mov	r2, r8
   17ed6:	4649      	mov	r1, r9
   17ed8:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   17edc:	f7f7 fb82 	bl	f5e4 <memcpy>
        memcpy(inst->uwb_dev.txbuf+cmd_size, buffer, length);
   17ee0:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   17ee4:	463a      	mov	r2, r7
   17ee6:	4651      	mov	r1, sl
   17ee8:	4440      	add	r0, r8
   17eea:	f7f7 fb7b 	bl	f5e4 <memcpy>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)inst->uwb_dev.txbuf,
   17eee:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   17ef2:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   17ef6:	462b      	mov	r3, r5
   17ef8:	4611      	mov	r1, r2
}
   17efa:	b003      	add	sp, #12
   17efc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)inst->uwb_dev.txbuf,
   17f00:	f003 b904 	b.w	1b10c <hal_spi_txrx_noblock>
   17f04:	f204 564c 	addw	r6, r4, #1356	; 0x54c
   17f08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17f0c:	4630      	mov	r0, r6
   17f0e:	f7f1 fec3 	bl	9c98 <os_sem_pend>
    if (rc != DPL_OK) {
   17f12:	b160      	cbz	r0, 17f2e <hal_dw1000_write_noblock+0xde>
        inst->uwb_dev.status.sem_error = 1;
   17f14:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   17f18:	f043 0304 	orr.w	r3, r3, #4
   17f1c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    return (dpl_error_t)os_sem_release(&sem->sem);
   17f20:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   17f24:	f7f1 fe86 	bl	9c34 <os_sem_release>
    assert(rc == DPL_OK);
   17f28:	2800      	cmp	r0, #0
   17f2a:	d0b0      	beq.n	17e8e <hal_dw1000_write_noblock+0x3e>
   17f2c:	e799      	b.n	17e62 <hal_dw1000_write_noblock+0x12>
    rc = hal_spi_txrx_noblock(inst->spi_num, (void*)cmd, inst->uwb_dev.txbuf, cmd_size);
   17f2e:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   17f32:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   17f36:	4643      	mov	r3, r8
   17f38:	4649      	mov	r1, r9
   17f3a:	f003 f8e7 	bl	1b10c <hal_spi_txrx_noblock>
    assert(rc==DPL_OK);
   17f3e:	4605      	mov	r5, r0
   17f40:	2800      	cmp	r0, #0
   17f42:	d18e      	bne.n	17e62 <hal_dw1000_write_noblock+0x12>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   17f44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17f48:	4630      	mov	r0, r6
   17f4a:	f7f1 fea5 	bl	9c98 <os_sem_pend>
    if (rc != DPL_OK) {
   17f4e:	2800      	cmp	r0, #0
   17f50:	d1e0      	bne.n	17f14 <hal_dw1000_write_noblock+0xc4>
    return (dpl_error_t)os_sem_release(&sem->sem);
   17f52:	4630      	mov	r0, r6
   17f54:	f7f1 fe6e 	bl	9c34 <os_sem_release>
    assert(rc == DPL_OK);
   17f58:	2800      	cmp	r0, #0
   17f5a:	d182      	bne.n	17e62 <hal_dw1000_write_noblock+0x12>
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
   17f5c:	f8b4 b506 	ldrh.w	fp, [r4, #1286]	; 0x506
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT)) ?
   17f60:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   17f64:	bf28      	it	cs
   17f66:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    int bytes_left = length;
   17f6a:	46b8      	mov	r8, r7
        int bytes_to_write = (bytes_left > step) ? step : bytes_left;
   17f6c:	45c3      	cmp	fp, r8
   17f6e:	46d9      	mov	r9, fp
   17f70:	bfa8      	it	ge
   17f72:	46c1      	movge	r9, r8
        if (bytes_left) {
   17f74:	ebb8 0809 	subs.w	r8, r8, r9
   17f78:	d006      	beq.n	17f88 <hal_dw1000_write_noblock+0x138>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   17f7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17f7e:	4630      	mov	r0, r6
   17f80:	f7f1 fe8a 	bl	9c98 <os_sem_pend>
            if (rc != DPL_OK) {
   17f84:	2800      	cmp	r0, #0
   17f86:	d1c5      	bne.n	17f14 <hal_dw1000_write_noblock+0xc4>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)buffer+offset,
   17f88:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   17f8c:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   17f90:	464b      	mov	r3, r9
   17f92:	eb0a 0105 	add.w	r1, sl, r5
   17f96:	f003 f8b9 	bl	1b10c <hal_spi_txrx_noblock>
        assert(rc==DPL_OK);
   17f9a:	2800      	cmp	r0, #0
   17f9c:	f47f af61 	bne.w	17e62 <hal_dw1000_write_noblock+0x12>
        if (bytes_left) {
   17fa0:	f1b8 0f00 	cmp.w	r8, #0
   17fa4:	d00c      	beq.n	17fc0 <hal_dw1000_write_noblock+0x170>
   17fa6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17faa:	4630      	mov	r0, r6
   17fac:	f7f1 fe74 	bl	9c98 <os_sem_pend>
            if (rc != DPL_OK) {
   17fb0:	2800      	cmp	r0, #0
   17fb2:	d1af      	bne.n	17f14 <hal_dw1000_write_noblock+0xc4>
    return (dpl_error_t)os_sem_release(&sem->sem);
   17fb4:	4630      	mov	r0, r6
   17fb6:	f7f1 fe3d 	bl	9c34 <os_sem_release>
            assert(rc == DPL_OK);
   17fba:	2800      	cmp	r0, #0
   17fbc:	f47f af51 	bne.w	17e62 <hal_dw1000_write_noblock+0x12>
        offset+=bytes_to_write;
   17fc0:	444d      	add	r5, r9
    while (offset<length) {
   17fc2:	42af      	cmp	r7, r5
   17fc4:	dcd2      	bgt.n	17f6c <hal_dw1000_write_noblock+0x11c>
   17fc6:	e762      	b.n	17e8e <hal_dw1000_write_noblock+0x3e>
   17fc8:	00017a9d 	.word	0x00017a9d

00017fcc <hal_dw1000_rw_noblock_wait>:
int
hal_dw1000_rw_noblock_wait(struct _dw1000_dev_instance_t * inst, uint32_t timeout_ms)
{
    int err;
    dpl_time_t ticks;
    if (timeout_ms != DPL_TIMEOUT_NEVER) {
   17fcc:	1c4b      	adds	r3, r1, #1
{
   17fce:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17fd0:	4604      	mov	r4, r0
   17fd2:	4608      	mov	r0, r1
    if (timeout_ms != DPL_TIMEOUT_NEVER) {
   17fd4:	d011      	beq.n	17ffa <hal_dw1000_rw_noblock_wait+0x2e>
    return (dpl_error_t)os_time_ms_to_ticks(ms, out_ticks);
   17fd6:	a901      	add	r1, sp, #4
   17fd8:	f7f2 f8ac 	bl	a134 <os_time_ms_to_ticks>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   17fdc:	9901      	ldr	r1, [sp, #4]
   17fde:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   17fe2:	f7f1 fe59 	bl	9c98 <os_sem_pend>
   17fe6:	4605      	mov	r5, r0
        dpl_time_ms_to_ticks(timeout_ms, &ticks);
    } else {
        ticks = DPL_TIMEOUT_NEVER;
    }
    err = dpl_sem_pend(inst->spi_sem, ticks);
    if (dpl_sem_get_count(inst->spi_sem) == 0) {
   17fe8:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   17fec:	88c3      	ldrh	r3, [r0, #6]
   17fee:	b90b      	cbnz	r3, 17ff4 <hal_dw1000_rw_noblock_wait+0x28>
    return (dpl_error_t)os_sem_release(&sem->sem);
   17ff0:	f7f1 fe20 	bl	9c34 <os_sem_release>
        dpl_sem_release(inst->spi_sem);
    }
    return err;
}
   17ff4:	4628      	mov	r0, r5
   17ff6:	b003      	add	sp, #12
   17ff8:	bd30      	pop	{r4, r5, pc}
        ticks = DPL_TIMEOUT_NEVER;
   17ffa:	9101      	str	r1, [sp, #4]
   17ffc:	e7ee      	b.n	17fdc <hal_dw1000_rw_noblock_wait+0x10>

00017ffe <hal_dw1000_wakeup>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return int  DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_wakeup(struct _dw1000_dev_instance_t * inst)
{
   17ffe:	b570      	push	{r4, r5, r6, lr}
   18000:	4604      	mov	r4, r0
    int rc = DPL_OK;
    os_sr_t sr;
    assert(inst->spi_sem);
   18002:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   18006:	b928      	cbnz	r0, 18014 <hal_dw1000_wakeup+0x16>
   18008:	2300      	movs	r3, #0
   1800a:	461a      	mov	r2, r3
   1800c:	4619      	mov	r1, r3
   1800e:	4618      	mov	r0, r3
   18010:	f7f0 ff70 	bl	8ef4 <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   18014:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18018:	f7f1 fe3e 	bl	9c98 <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   1801c:	4605      	mov	r5, r0
   1801e:	b138      	cbz	r0, 18030 <hal_dw1000_wakeup+0x32>
        inst->uwb_dev.status.sem_error = 1;
   18020:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   18024:	f043 0304 	orr.w	r3, r3, #4
   18028:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b

    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
early_exit:
    return rc;
}
   1802c:	4628      	mov	r0, r5
   1802e:	bd70      	pop	{r4, r5, r6, pc}
    return os_arch_save_sr();
   18030:	f7f2 f89a 	bl	a168 <os_arch_save_sr>
   18034:	4606      	mov	r6, r0
    hal_spi_disable(inst->spi_num);
   18036:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1803a:	f002 ff6d 	bl	1af18 <hal_spi_disable>
    hal_gpio_write(inst->ss_pin, 0);
   1803e:	4629      	mov	r1, r5
   18040:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   18044:	f7f0 fea8 	bl	8d98 <hal_gpio_write>
    dpl_cputime_delay_usecs(2000);
   18048:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   1804c:	f7f9 f91e 	bl	1128c <dpl_cputime_delay_usecs>
    hal_gpio_write(inst->ss_pin, 1);
   18050:	2101      	movs	r1, #1
   18052:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   18056:	f7f0 fe9f 	bl	8d98 <hal_gpio_write>
    hal_spi_enable(inst->spi_num);
   1805a:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1805e:	f002 ff3b 	bl	1aed8 <hal_spi_enable>
    dpl_cputime_delay_usecs(5000);
   18062:	f241 3088 	movw	r0, #5000	; 0x1388
   18066:	f7f9 f911 	bl	1128c <dpl_cputime_delay_usecs>
    os_arch_restore_sr(ctx);
   1806a:	4630      	mov	r0, r6
   1806c:	f7f2 f882 	bl	a174 <os_arch_restore_sr>
    return (dpl_error_t)os_sem_release(&sem->sem);
   18070:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   18074:	f7f1 fdde 	bl	9c34 <os_sem_release>
    assert(rc == DPL_OK);
   18078:	2800      	cmp	r0, #0
   1807a:	d0d7      	beq.n	1802c <hal_dw1000_wakeup+0x2e>
   1807c:	e7c4      	b.n	18008 <hal_dw1000_wakeup+0xa>

0001807e <dw1000_irq>:
 * @param arg  Pointer to the queue of interrupts.
 * @return void
 */
static void
dw1000_irq(void *arg)
{
   1807e:	b510      	push	{r4, lr}
   18080:	4604      	mov	r4, r0
    dw1000_dev_instance_t * inst = arg;
    inst->uwb_dev.irq_at_ticks = dpl_cputime_get32();
   18082:	f7f9 f8f5 	bl	11270 <dpl_cputime_get32>
    if (!inst->uwb_dev.status.sleeping) {
   18086:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    inst->uwb_dev.irq_at_ticks = dpl_cputime_get32();
   1808a:	6320      	str	r0, [r4, #48]	; 0x30
    if (!inst->uwb_dev.status.sleeping) {
   1808c:	07db      	lsls	r3, r3, #31
   1808e:	d407      	bmi.n	180a0 <dw1000_irq+0x22>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   18090:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   18094:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        dpl_eventq_put(&inst->uwb_dev.eventq, &inst->uwb_dev.interrupt_ev);
    }
}
   18098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1809c:	f7f1 ba17 	b.w	94ce <os_eventq_put>
   180a0:	bd10      	pop	{r4, pc}

000180a2 <dw1000_read_rx>:
{
   180a2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   180a6:	461e      	mov	r6, r3
    MAC_STATS_INCN(rx_bytes, rxFrameLength);
   180a8:	f8d0 35cc 	ldr.w	r3, [r0, #1484]	; 0x5cc
{
   180ac:	9203      	str	r2, [sp, #12]
    MAC_STATS_INCN(rx_bytes, rxFrameLength);
   180ae:	4433      	add	r3, r6
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   180b0:	f500 68ad 	add.w	r8, r0, #1384	; 0x568
   180b4:	f8c0 35cc 	str.w	r3, [r0, #1484]	; 0x5cc
{
   180b8:	4604      	mov	r4, r0
   180ba:	460f      	mov	r7, r1
   180bc:	4640      	mov	r0, r8
   180be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   180c2:	f7f2 fb53 	bl	a76c <os_mutex_pend>
    if (err != DPL_OK) {
   180c6:	9a03      	ldr	r2, [sp, #12]
   180c8:	4605      	mov	r5, r0
   180ca:	b150      	cbz	r0, 180e2 <dw1000_read_rx+0x40>
        inst->uwb_dev.status.mtx_error = 1;
   180cc:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   180d0:	f043 0308 	orr.w	r3, r3, #8
   180d4:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   180d8:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   180dc:	b004      	add	sp, #16
   180de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dw1000_read(inst, RX_BUFFER_ID, rxBufferOffset, rxFrameBytes, rxFrameLength);
   180e2:	9600      	str	r6, [sp, #0]
   180e4:	463b      	mov	r3, r7
   180e6:	2111      	movs	r1, #17
   180e8:	4620      	mov	r0, r4
   180ea:	f7ff f875 	bl	171d8 <dw1000_read>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   180ee:	4640      	mov	r0, r8
   180f0:	f7f2 faea 	bl	a6c8 <os_mutex_release>
    assert(err == DPL_OK);
   180f4:	2800      	cmp	r0, #0
   180f6:	d0ef      	beq.n	180d8 <dw1000_read_rx+0x36>
   180f8:	462b      	mov	r3, r5
   180fa:	462a      	mov	r2, r5
   180fc:	4629      	mov	r1, r5
   180fe:	4628      	mov	r0, r5
   18100:	f7f0 fef8 	bl	8ef4 <__assert_func>

00018104 <dw1000_write_tx>:
{
   18104:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18108:	461f      	mov	r7, r3
    MAC_STATS_INCN(tx_bytes, txFrameLength);
   1810a:	f8d0 35c8 	ldr.w	r3, [r0, #1480]	; 0x5c8
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1810e:	f500 68ad 	add.w	r8, r0, #1384	; 0x568
   18112:	443b      	add	r3, r7
{
   18114:	4604      	mov	r4, r0
   18116:	460d      	mov	r5, r1
    MAC_STATS_INCN(tx_bytes, txFrameLength);
   18118:	f8c0 35c8 	str.w	r3, [r0, #1480]	; 0x5c8
   1811c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18120:	4640      	mov	r0, r8
{
   18122:	4616      	mov	r6, r2
   18124:	f7f2 fb22 	bl	a76c <os_mutex_pend>
    if (err != DPL_OK) {
   18128:	b150      	cbz	r0, 18140 <dw1000_write_tx+0x3c>
        inst->uwb_dev.status.mtx_error = 1;
   1812a:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1812e:	f043 0308 	orr.w	r3, r3, #8
   18132:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   18136:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1813a:	b002      	add	sp, #8
   1813c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((txBufferOffset + txFrameLength) <= 1024){
   18140:	19f3      	adds	r3, r6, r7
   18142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   18146:	dc1e      	bgt.n	18186 <dw1000_write_tx+0x82>
        dw1000_write(inst, TX_BUFFER_ID, txBufferOffset,  txFrameBytes, txFrameLength);
   18148:	9700      	str	r7, [sp, #0]
   1814a:	462b      	mov	r3, r5
   1814c:	4632      	mov	r2, r6
   1814e:	2109      	movs	r1, #9
   18150:	4620      	mov	r0, r4
   18152:	f7ff f88d 	bl	17270 <dw1000_write>
        if (txBufferOffset == 0) {
   18156:	b92e      	cbnz	r6, 18164 <dw1000_write_tx+0x60>
                inst->uwb_dev.fctrl_array[i] =  txFrameBytes[i];
   18158:	782b      	ldrb	r3, [r5, #0]
   1815a:	f884 34e0 	strb.w	r3, [r4, #1248]	; 0x4e0
   1815e:	786b      	ldrb	r3, [r5, #1]
   18160:	f884 34e1 	strb.w	r3, [r4, #1249]	; 0x4e1
        inst->uwb_dev.status.tx_frame_error = 0;
   18164:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   18168:	f36f 1304 	bfc	r3, #4, #1
        inst->uwb_dev.status.tx_frame_error = 1;
   1816c:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    return (dpl_error_t)os_mutex_release(&mu->mu);
   18170:	4640      	mov	r0, r8
   18172:	f7f2 faa9 	bl	a6c8 <os_mutex_release>
    assert(err == DPL_OK);
   18176:	2800      	cmp	r0, #0
   18178:	d0dd      	beq.n	18136 <dw1000_write_tx+0x32>
   1817a:	2300      	movs	r3, #0
   1817c:	461a      	mov	r2, r3
   1817e:	4619      	mov	r1, r3
   18180:	4618      	mov	r0, r3
   18182:	f7f0 feb7 	bl	8ef4 <__assert_func>
        inst->uwb_dev.status.tx_frame_error = 1;
   18186:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1818a:	f043 0310 	orr.w	r3, r3, #16
   1818e:	e7ed      	b.n	1816c <dw1000_write_tx+0x68>

00018190 <dw1000_write_tx_fctrl>:
{
   18190:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   18194:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   18198:	4605      	mov	r5, r0
   1819a:	460c      	mov	r4, r1
   1819c:	4630      	mov	r0, r6
   1819e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   181a2:	4617      	mov	r7, r2
   181a4:	4698      	mov	r8, r3
   181a6:	f7f2 fae1 	bl	a76c <os_mutex_pend>
    if (err != DPL_OK) {
   181aa:	b140      	cbz	r0, 181be <dw1000_write_tx_fctrl+0x2e>
        inst->uwb_dev.status.mtx_error = 1;
   181ac:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   181b0:	f043 0308 	orr.w	r3, r3, #8
   181b4:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
}
   181b8:	b004      	add	sp, #16
   181ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (ext) {
   181be:	f1b8 0f00 	cmp.w	r8, #0
   181c2:	d028      	beq.n	18216 <dw1000_write_tx_fctrl+0x86>
            (((uint32_t)ext->ranging_en_bit) << TX_FCTRL_TR_SHFT);
   181c4:	f898 1002 	ldrb.w	r1, [r8, #2]
            (((uint32_t)ext->dataRate) << TX_FCTRL_TXBR_SHFT) |
   181c8:	f898 3000 	ldrb.w	r3, [r8]
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   181cc:	f895 250e 	ldrb.w	r2, [r5, #1294]	; 0x50e
            (((uint32_t)ext->ranging_en_bit) << TX_FCTRL_TR_SHFT);
   181d0:	03c9      	lsls	r1, r1, #15
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   181d2:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
   181d6:	f898 3001 	ldrb.w	r3, [r8, #1]
   181da:	4313      	orrs	r3, r2
   181dc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    tx_fctrl_reg |= ((txFrameLength + 2) & TX_FCTRL_FLE_MASK)  |
   181e0:	1ca1      	adds	r1, r4, #2
   181e2:	f3c1 0109 	ubfx	r1, r1, #0, #10
   181e6:	ea41 5487 	orr.w	r4, r1, r7, lsl #22
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, tx_fctrl_reg, sizeof(uint32_t));
   181ea:	2204      	movs	r2, #4
    tx_fctrl_reg |= ((txFrameLength + 2) & TX_FCTRL_FLE_MASK)  |
   181ec:	431c      	orrs	r4, r3
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, tx_fctrl_reg, sizeof(uint32_t));
   181ee:	2300      	movs	r3, #0
   181f0:	e9cd 4300 	strd	r4, r3, [sp]
   181f4:	9202      	str	r2, [sp, #8]
   181f6:	2108      	movs	r1, #8
   181f8:	461a      	mov	r2, r3
   181fa:	4628      	mov	r0, r5
   181fc:	f7ff f8dc 	bl	173b8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   18200:	4630      	mov	r0, r6
   18202:	f7f2 fa61 	bl	a6c8 <os_mutex_release>
    assert(err == DPL_OK);
   18206:	2300      	movs	r3, #0
   18208:	2800      	cmp	r0, #0
   1820a:	d0d5      	beq.n	181b8 <dw1000_write_tx_fctrl+0x28>
   1820c:	461a      	mov	r2, r3
   1820e:	4619      	mov	r1, r3
   18210:	4618      	mov	r0, r3
   18212:	f7f0 fe6f 	bl	8ef4 <__assert_func>
        tx_fctrl_reg = inst->tx_fctrl;
   18216:	f8d5 3588 	ldr.w	r3, [r5, #1416]	; 0x588
   1821a:	e7e1      	b.n	181e0 <dw1000_write_tx_fctrl+0x50>

0001821c <dw1000_start_tx>:
{
   1821c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   18220:	f500 67ac 	add.w	r7, r0, #1376	; 0x560
   18224:	4604      	mov	r4, r0
   18226:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1822a:	4638      	mov	r0, r7
   1822c:	f7f1 fd34 	bl	9c98 <os_sem_pend>
    if (err != DPL_OK) {
   18230:	b150      	cbz	r0, 18248 <dw1000_start_tx+0x2c>
        inst->uwb_dev.status.sem_error = 1;
   18232:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   18236:	f043 0304 	orr.w	r3, r3, #4
   1823a:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1823e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   18242:	b004      	add	sp, #16
   18244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (config->trxoff_enable){ // force return to idle state
   18248:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
    control = inst->control;
   1824c:	f8d4 55b0 	ldr.w	r5, [r4, #1456]	; 0x5b0
    if (config->trxoff_enable){ // force return to idle state
   18250:	069a      	lsls	r2, r3, #26
   18252:	d50a      	bpl.n	1826a <dw1000_start_tx+0x4e>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   18254:	2301      	movs	r3, #1
   18256:	2240      	movs	r2, #64	; 0x40
   18258:	9302      	str	r3, [sp, #8]
   1825a:	2300      	movs	r3, #0
   1825c:	e9cd 2300 	strd	r2, r3, [sp]
   18260:	210d      	movs	r1, #13
   18262:	4602      	mov	r2, r0
   18264:	4620      	mov	r0, r4
   18266:	f7ff f8a7 	bl	173b8 <dw1000_write_reg>
        sys_ctrl_reg |= SYS_CTRL_WAIT4RESP;
   1826a:	f015 0f01 	tst.w	r5, #1
   1826e:	bf14      	ite	ne
   18270:	2382      	movne	r3, #130	; 0x82
   18272:	2302      	moveq	r3, #2
    if (control.delay_start_enabled)
   18274:	f015 0504 	ands.w	r5, r5, #4
        sys_ctrl_reg |= SYS_CTRL_TXDLYS;
   18278:	bf18      	it	ne
   1827a:	f043 0304 	orrne.w	r3, r3, #4
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) sys_ctrl_reg, sizeof(uint8_t));
   1827e:	2600      	movs	r6, #0
   18280:	f04f 0801 	mov.w	r8, #1
   18284:	e9cd 3600 	strd	r3, r6, [sp]
   18288:	f8cd 8008 	str.w	r8, [sp, #8]
   1828c:	4632      	mov	r2, r6
   1828e:	210d      	movs	r1, #13
   18290:	4620      	mov	r0, r4
   18292:	f7ff f891 	bl	173b8 <dw1000_write_reg>
    if (control.delay_start_enabled){
   18296:	b33d      	cbz	r5, 182e8 <dw1000_start_tx+0xcc>
        sys_status_reg = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint16_t)); // Read at offset 3 to get the upper 2 bytes out of 5
   18298:	2203      	movs	r2, #3
   1829a:	2302      	movs	r3, #2
   1829c:	210f      	movs	r1, #15
   1829e:	4620      	mov	r0, r4
   182a0:	f7ff f838 	bl	17314 <dw1000_read_reg>
        inst->uwb_dev.status.start_tx_error = (sys_status_reg & ((SYS_STATUS_HPDWARN | SYS_STATUS_TXPUTE) >> 24)) != 0;
   182a4:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   182a8:	f410 6f81 	tst.w	r0, #1032	; 0x408
   182ac:	bf14      	ite	ne
   182ae:	4642      	movne	r2, r8
   182b0:	4632      	moveq	r2, r6
   182b2:	f362 0382 	bfi	r3, r2, #2, #1
   182b6:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
        if (inst->uwb_dev.status.start_tx_error){
   182ba:	075b      	lsls	r3, r3, #29
   182bc:	d51a      	bpl.n	182f4 <dw1000_start_tx+0xd8>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   182be:	2240      	movs	r2, #64	; 0x40
   182c0:	2300      	movs	r3, #0
   182c2:	e9cd 2300 	strd	r2, r3, [sp]
   182c6:	4620      	mov	r0, r4
   182c8:	f8cd 8008 	str.w	r8, [sp, #8]
   182cc:	4632      	mov	r2, r6
   182ce:	210d      	movs	r1, #13
   182d0:	f7ff f872 	bl	173b8 <dw1000_write_reg>
    return (dpl_error_t)os_sem_release(&sem->sem);
   182d4:	4638      	mov	r0, r7
   182d6:	f7f1 fcad 	bl	9c34 <os_sem_release>
            assert(err == DPL_OK);
   182da:	b158      	cbz	r0, 182f4 <dw1000_start_tx+0xd8>
   182dc:	4633      	mov	r3, r6
   182de:	4632      	mov	r2, r6
   182e0:	4631      	mov	r1, r6
   182e2:	4630      	mov	r0, r6
   182e4:	f7f0 fe06 	bl	8ef4 <__assert_func>
        inst->uwb_dev.status.start_tx_error = 0;
   182e8:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   182ec:	f365 0382 	bfi	r3, r5, #2, #1
   182f0:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    if(inst->control.sleep_after_tx) {
   182f4:	f994 35b0 	ldrsb.w	r3, [r4, #1456]	; 0x5b0
   182f8:	2b00      	cmp	r3, #0
   182fa:	da08      	bge.n	1830e <dw1000_start_tx+0xf2>
        inst->uwb_dev.status.sleeping = 1;
   182fc:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   18300:	f043 0301 	orr.w	r3, r3, #1
   18304:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
   18308:	4638      	mov	r0, r7
   1830a:	f7f1 fc93 	bl	9c34 <os_sem_release>
    inst->control.wait4resp_enabled = false;
   1830e:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   18312:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
   18316:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
   1831a:	e790      	b.n	1823e <dw1000_start_tx+0x22>

0001831c <dw1000_tx_wait>:
{
   1831c:	b510      	push	{r4, lr}
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1831e:	f500 64ac 	add.w	r4, r0, #1376	; 0x560
   18322:	4620      	mov	r0, r4
   18324:	f7f1 fcb8 	bl	9c98 <os_sem_pend>
    if (rc == DPL_OK) {
   18328:	b910      	cbnz	r0, 18330 <dw1000_tx_wait+0x14>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1832a:	4620      	mov	r0, r4
   1832c:	f7f1 fc82 	bl	9c34 <os_sem_release>
}
   18330:	bd10      	pop	{r4, pc}

00018332 <dw1000_set_delay_start>:
{
   18332:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   18336:	f500 68ad 	add.w	r8, r0, #1384	; 0x568
   1833a:	4604      	mov	r4, r0
   1833c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18340:	4640      	mov	r0, r8
   18342:	4616      	mov	r6, r2
   18344:	461d      	mov	r5, r3
   18346:	f7f2 fa11 	bl	a76c <os_mutex_pend>
    if (err != DPL_OK) {
   1834a:	4607      	mov	r7, r0
   1834c:	b150      	cbz	r0, 18364 <dw1000_set_delay_start+0x32>
        inst->uwb_dev.status.mtx_error = 1;
   1834e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   18352:	f043 0308 	orr.w	r3, r3, #8
   18356:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1835a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1835e:	b004      	add	sp, #16
   18360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inst->control.delay_start_enabled = true;
   18364:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
    dw1000_write_reg(inst, DX_TIME_ID, 1, dx_time >> 8, DX_TIME_LEN-1);
   18368:	0a36      	lsrs	r6, r6, #8
    inst->control.delay_start_enabled = true;
   1836a:	f043 0304 	orr.w	r3, r3, #4
   1836e:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    dw1000_write_reg(inst, DX_TIME_ID, 1, dx_time >> 8, DX_TIME_LEN-1);
   18372:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
   18376:	2304      	movs	r3, #4
   18378:	0a2d      	lsrs	r5, r5, #8
   1837a:	4620      	mov	r0, r4
   1837c:	e9cd 6500 	strd	r6, r5, [sp]
   18380:	9302      	str	r3, [sp, #8]
   18382:	2201      	movs	r2, #1
   18384:	210a      	movs	r1, #10
   18386:	f7ff f817 	bl	173b8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1838a:	4640      	mov	r0, r8
   1838c:	f7f2 f99c 	bl	a6c8 <os_mutex_release>
    assert(err == DPL_OK);
   18390:	2800      	cmp	r0, #0
   18392:	d0e2      	beq.n	1835a <dw1000_set_delay_start+0x28>
   18394:	463b      	mov	r3, r7
   18396:	463a      	mov	r2, r7
   18398:	4639      	mov	r1, r7
   1839a:	4638      	mov	r0, r7
   1839c:	f7f0 fdaa 	bl	8ef4 <__assert_func>

000183a0 <dw1000_stop_rx>:
{
   183a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   183a4:	f500 68ad 	add.w	r8, r0, #1384	; 0x568
   183a8:	4604      	mov	r4, r0
   183aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   183ae:	4640      	mov	r0, r8
   183b0:	f7f2 f9dc 	bl	a76c <os_mutex_pend>
    if (err != DPL_OK) {
   183b4:	4605      	mov	r5, r0
   183b6:	b150      	cbz	r0, 183ce <dw1000_stop_rx+0x2e>
        inst->uwb_dev.status.mtx_error = 1;
   183b8:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   183bc:	f043 0308 	orr.w	r3, r3, #8
   183c0:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   183c4:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   183c8:	b004      	add	sp, #16
   183ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
   183ce:	4602      	mov	r2, r0
   183d0:	2304      	movs	r3, #4
   183d2:	210e      	movs	r1, #14
   183d4:	4620      	mov	r0, r4
   183d6:	f7fe ff9d 	bl	17314 <dw1000_read_reg>
    dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t)) ; // Clear interrupt mask - so we don't get any unwanted events
   183da:	2704      	movs	r7, #4
   183dc:	2300      	movs	r3, #0
   183de:	2200      	movs	r2, #0
   183e0:	e9cd 2300 	strd	r2, r3, [sp]
    mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
   183e4:	4606      	mov	r6, r0
    dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t)) ; // Clear interrupt mask - so we don't get any unwanted events
   183e6:	462a      	mov	r2, r5
   183e8:	210e      	movs	r1, #14
   183ea:	4620      	mov	r0, r4
   183ec:	9702      	str	r7, [sp, #8]
   183ee:	f7fe ffe3 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t)); // return to idle state
   183f2:	2301      	movs	r3, #1
   183f4:	9302      	str	r3, [sp, #8]
   183f6:	2240      	movs	r2, #64	; 0x40
   183f8:	2300      	movs	r3, #0
   183fa:	e9cd 2300 	strd	r2, r3, [sp]
   183fe:	210d      	movs	r1, #13
   18400:	462a      	mov	r2, r5
   18402:	4620      	mov	r0, r4
   18404:	f7fe ffd8 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD), sizeof(uint32_t));
   18408:	a30f      	add	r3, pc, #60	; (adr r3, 18448 <dw1000_stop_rx+0xa8>)
   1840a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1840e:	210f      	movs	r1, #15
   18410:	e9cd 2300 	strd	r2, r3, [sp]
   18414:	4620      	mov	r0, r4
   18416:	462a      	mov	r2, r5
   18418:	9702      	str	r7, [sp, #8]
   1841a:	f7fe ffcd 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t)); // Restore mask to what it was
   1841e:	4620      	mov	r0, r4
   18420:	e9cd 6500 	strd	r6, r5, [sp]
   18424:	9702      	str	r7, [sp, #8]
   18426:	462a      	mov	r2, r5
   18428:	210e      	movs	r1, #14
   1842a:	f7fe ffc5 	bl	173b8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1842e:	4640      	mov	r0, r8
   18430:	f7f2 f94a 	bl	a6c8 <os_mutex_release>
    assert(err == DPL_OK);
   18434:	2800      	cmp	r0, #0
   18436:	d0c5      	beq.n	183c4 <dw1000_stop_rx+0x24>
   18438:	462b      	mov	r3, r5
   1843a:	462a      	mov	r2, r5
   1843c:	4629      	mov	r1, r5
   1843e:	4628      	mov	r0, r5
   18440:	f7f0 fd58 	bl	8ef4 <__assert_func>
   18444:	f3af 8000 	nop.w
   18448:	2433fbf8 	.word	0x2433fbf8
   1844c:	00000000 	.word	0x00000000

00018450 <dw1000_set_wait4resp>:
    inst->uwb_dev.status.rx_restarted = 0;
   18450:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
   18454:	f36f 03c3 	bfc	r3, #3, #1
   18458:	f880 350a 	strb.w	r3, [r0, #1290]	; 0x50a
    inst->control.wait4resp_enabled = enable;
   1845c:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
   18460:	f361 0300 	bfi	r3, r1, #0, #1
   18464:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
}
   18468:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   1846c:	4770      	bx	lr

0001846e <dw1000_set_on_error_continue>:
    inst->control.on_error_continue_enabled = enable;
   1846e:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
   18472:	f361 1386 	bfi	r3, r1, #6, #1
   18476:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
}
   1847a:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   1847e:	4770      	bx	lr

00018480 <dw1000_set_rxauto_disable>:
    inst->control.rxauto_disable = disable;
   18480:	f890 35b1 	ldrb.w	r3, [r0, #1457]	; 0x5b1
   18484:	f361 0382 	bfi	r3, r1, #2, #1
   18488:	f880 35b1 	strb.w	r3, [r0, #1457]	; 0x5b1
}
   1848c:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   18490:	4770      	bx	lr

00018492 <dw1000_adj_rx_timeout>:
{
   18492:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    dw1000_write_reg(inst, RX_FWTO_ID, RX_FWTO_OFFSET, timeout, sizeof(uint16_t));
   18494:	2302      	movs	r3, #2
   18496:	2200      	movs	r2, #0
   18498:	e9cd 1200 	strd	r1, r2, [sp]
{
   1849c:	4604      	mov	r4, r0
    dw1000_write_reg(inst, RX_FWTO_ID, RX_FWTO_OFFSET, timeout, sizeof(uint16_t));
   1849e:	9302      	str	r3, [sp, #8]
   184a0:	210c      	movs	r1, #12
   184a2:	f7fe ff89 	bl	173b8 <dw1000_write_reg>
}
   184a6:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   184aa:	b004      	add	sp, #16
   184ac:	bd10      	pop	{r4, pc}

000184ae <update_rx_window_timeout.isra.0>:
update_rx_window_timeout(struct _dw1000_dev_instance_t * inst, uint64_t rel_start)
   184ae:	b430      	push	{r4, r5}
    uint32_t timeout = ((rx_end - rx_start) & UWB_DTU_40BMASK) >> 16;
   184b0:	f8d0 44d8 	ldr.w	r4, [r0, #1240]	; 0x4d8
   184b4:	f8d0 54dc 	ldr.w	r5, [r0, #1244]	; 0x4dc
   184b8:	1aa1      	subs	r1, r4, r2
   184ba:	eb65 0503 	sbc.w	r5, r5, r3
   184be:	0c09      	lsrs	r1, r1, #16
   184c0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    if (timeout > 0x7fffff) {
   184c4:	020b      	lsls	r3, r1, #8
   184c6:	d40a      	bmi.n	184de <update_rx_window_timeout.isra.0+0x30>
    uint32_t timeout = ((rx_end - rx_start) & UWB_DTU_40BMASK) >> 16;
   184c8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   184cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   184d0:	4299      	cmp	r1, r3
   184d2:	bf28      	it	cs
   184d4:	4619      	movcs	r1, r3
}
   184d6:	bc30      	pop	{r4, r5}
    dw1000_adj_rx_timeout(inst, timeout);
   184d8:	b289      	uxth	r1, r1
   184da:	f7ff bfda 	b.w	18492 <dw1000_adj_rx_timeout>
        timeout = 1;
   184de:	2101      	movs	r1, #1
   184e0:	e7f9      	b.n	184d6 <update_rx_window_timeout.isra.0+0x28>

000184e2 <dw1000_set_rx_timeout>:
{
   184e2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   184e6:	f500 68ad 	add.w	r8, r0, #1384	; 0x568
   184ea:	4604      	mov	r4, r0
   184ec:	460f      	mov	r7, r1
   184ee:	4640      	mov	r0, r8
   184f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   184f4:	f7f2 f93a 	bl	a76c <os_mutex_pend>
    if (err != DPL_OK) {
   184f8:	4605      	mov	r5, r0
   184fa:	b150      	cbz	r0, 18512 <dw1000_set_rx_timeout+0x30>
        inst->uwb_dev.status.mtx_error = 1;
   184fc:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   18500:	f043 0308 	orr.w	r3, r3, #8
   18504:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   18508:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1850c:	b004      	add	sp, #16
   1850e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inst->uwb_dev.status.rx_timeout_error = 0;
   18512:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   18516:	f360 13c7 	bfi	r3, r0, #7, #1
   1851a:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    sys_cfg_reg = dw1000_read_reg(inst, SYS_CFG_ID, 3, sizeof(uint8_t));
   1851e:	2203      	movs	r2, #3
   18520:	2301      	movs	r3, #1
   18522:	2104      	movs	r1, #4
   18524:	4620      	mov	r0, r4
   18526:	f7fe fef5 	bl	17314 <dw1000_read_reg>
    inst->control.rx_timeout_enabled = timeout > 0;
   1852a:	1e3a      	subs	r2, r7, #0
   1852c:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   18530:	bf18      	it	ne
   18532:	2201      	movne	r2, #1
   18534:	f362 1345 	bfi	r3, r2, #5, #1
   18538:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if(inst->control.rx_timeout_enabled) {
   1853c:	069b      	lsls	r3, r3, #26
    sys_cfg_reg = dw1000_read_reg(inst, SYS_CFG_ID, 3, sizeof(uint8_t));
   1853e:	b2c6      	uxtb	r6, r0
    if(inst->control.rx_timeout_enabled) {
   18540:	d521      	bpl.n	18586 <dw1000_set_rx_timeout+0xa4>
        dw1000_write_reg(inst, RX_FWTO_ID, RX_FWTO_OFFSET, timeout, sizeof(uint16_t));
   18542:	2302      	movs	r3, #2
   18544:	9302      	str	r3, [sp, #8]
   18546:	e9cd 7500 	strd	r7, r5, [sp]
   1854a:	462a      	mov	r2, r5
   1854c:	210c      	movs	r1, #12
   1854e:	4620      	mov	r0, r4
   18550:	f7fe ff32 	bl	173b8 <dw1000_write_reg>
        new_reg_val = sys_cfg_reg | (SYS_CFG_RXWTOE>>24);
   18554:	f046 0310 	orr.w	r3, r6, #16
    if (sys_cfg_reg != new_reg_val) {
   18558:	42b3      	cmp	r3, r6
   1855a:	d009      	beq.n	18570 <dw1000_set_rx_timeout+0x8e>
        dw1000_write_reg(inst, SYS_CFG_ID, 3, new_reg_val, sizeof(uint8_t));
   1855c:	2201      	movs	r2, #1
   1855e:	9300      	str	r3, [sp, #0]
   18560:	2300      	movs	r3, #0
   18562:	9202      	str	r2, [sp, #8]
   18564:	9301      	str	r3, [sp, #4]
   18566:	2203      	movs	r2, #3
   18568:	2104      	movs	r1, #4
   1856a:	4620      	mov	r0, r4
   1856c:	f7fe ff24 	bl	173b8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   18570:	4640      	mov	r0, r8
   18572:	f7f2 f8a9 	bl	a6c8 <os_mutex_release>
    assert(err == DPL_OK);
   18576:	2800      	cmp	r0, #0
   18578:	d0c6      	beq.n	18508 <dw1000_set_rx_timeout+0x26>
   1857a:	2300      	movs	r3, #0
   1857c:	461a      	mov	r2, r3
   1857e:	4619      	mov	r1, r3
   18580:	4618      	mov	r0, r3
   18582:	f7f0 fcb7 	bl	8ef4 <__assert_func>
        new_reg_val = sys_cfg_reg & (~(SYS_CFG_RXWTOE>>24));
   18586:	f006 03ef 	and.w	r3, r6, #239	; 0xef
   1858a:	e7e5      	b.n	18558 <dw1000_set_rx_timeout+0x76>

0001858c <dw1000_set_rx_window>:
{
   1858c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18590:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
   18594:	4614      	mov	r4, r2
   18596:	461e      	mov	r6, r3
   18598:	4605      	mov	r5, r0
    dw1000_set_delay_start(inst, rx_start);
   1859a:	f7ff feca 	bl	18332 <dw1000_set_delay_start>
    uint32_t timeout = ((rx_end - rx_start) & UWB_DTU_40BMASK) >> 16;
   1859e:	1b39      	subs	r1, r7, r4
   185a0:	eb68 0606 	sbc.w	r6, r8, r6
   185a4:	0c09      	lsrs	r1, r1, #16
   185a6:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
    if (timeout > 0x7fffff) {
   185aa:	020b      	lsls	r3, r1, #8
   185ac:	d418      	bmi.n	185e0 <dw1000_set_rx_window+0x54>
    uint32_t timeout = ((rx_end - rx_start) & UWB_DTU_40BMASK) >> 16;
   185ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   185b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   185b6:	4299      	cmp	r1, r3
   185b8:	bf28      	it	cs
   185ba:	4619      	movcs	r1, r3
    inst->control.abs_timeout = 1;
   185bc:	f895 35b1 	ldrb.w	r3, [r5, #1457]	; 0x5b1
    inst->uwb_dev.abs_timeout = rx_end;
   185c0:	f8c5 74d8 	str.w	r7, [r5, #1240]	; 0x4d8
    inst->control.abs_timeout = 1;
   185c4:	f043 0308 	orr.w	r3, r3, #8
   185c8:	f885 35b1 	strb.w	r3, [r5, #1457]	; 0x5b1
    inst->uwb_dev.abs_timeout = rx_end;
   185cc:	f8c5 84dc 	str.w	r8, [r5, #1244]	; 0x4dc
    dw1000_set_rx_timeout(inst, timeout);
   185d0:	b289      	uxth	r1, r1
   185d2:	4628      	mov	r0, r5
   185d4:	f7ff ff85 	bl	184e2 <dw1000_set_rx_timeout>
}
   185d8:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
   185dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        timeout = 1;
   185e0:	2101      	movs	r1, #1
   185e2:	e7eb      	b.n	185bc <dw1000_set_rx_window+0x30>

000185e4 <dw1000_set_abs_timeout>:
{
   185e4:	b530      	push	{r4, r5, lr}
   185e6:	461d      	mov	r5, r3
    inst->control.abs_timeout = 1;
   185e8:	f890 35b1 	ldrb.w	r3, [r0, #1457]	; 0x5b1
   185ec:	f043 0308 	orr.w	r3, r3, #8
   185f0:	f880 35b1 	strb.w	r3, [r0, #1457]	; 0x5b1
{
   185f4:	4614      	mov	r4, r2
    inst->uwb_dev.abs_timeout = rx_end;
   185f6:	f500 639c 	add.w	r3, r0, #1248	; 0x4e0
   185fa:	e943 4502 	strd	r4, r5, [r3, #-8]
}
   185fe:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   18602:	bd30      	pop	{r4, r5, pc}

00018604 <dw1000_sync_rxbufptrs>:
{
   18604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    inst->control.start_rx_syncbuf_enabled = 1;
   18606:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
   1860a:	f043 0310 	orr.w	r3, r3, #16
   1860e:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   18612:	2203      	movs	r2, #3
   18614:	2301      	movs	r3, #1
   18616:	210f      	movs	r1, #15
{
   18618:	4604      	mov	r4, r0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   1861a:	f7fe fe7b 	bl	17314 <dw1000_read_reg>
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   1861e:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   18622:	0603      	lsls	r3, r0, #24
   18624:	d50a      	bpl.n	1863c <dw1000_sync_rxbufptrs+0x38>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   18626:	2301      	movs	r3, #1
   18628:	2201      	movs	r2, #1
   1862a:	9302      	str	r3, [sp, #8]
   1862c:	2300      	movs	r3, #0
   1862e:	e9cd 2300 	strd	r2, r3, [sp]
   18632:	210d      	movs	r1, #13
   18634:	2203      	movs	r2, #3
   18636:	4620      	mov	r0, r4
   18638:	f7fe febe 	bl	173b8 <dw1000_write_reg>
}
   1863c:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   18640:	b004      	add	sp, #16
   18642:	bd10      	pop	{r4, pc}

00018644 <dw1000_start_rx>:
{
   18644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   18648:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   1864c:	4604      	mov	r4, r0
   1864e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18652:	4638      	mov	r0, r7
   18654:	f7f2 f88a 	bl	a76c <os_mutex_pend>
    if (err != DPL_OK) {
   18658:	4605      	mov	r5, r0
   1865a:	b150      	cbz	r0, 18672 <dw1000_start_rx+0x2e>
        inst->uwb_dev.status.mtx_error = 1;
   1865c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   18660:	f043 0308 	orr.w	r3, r3, #8
   18664:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   18668:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1866c:	b004      	add	sp, #16
   1866e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    inst->uwb_dev.status.rx_restarted = 0;
   18672:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    control = inst->control;
   18676:	f8d4 65b0 	ldr.w	r6, [r4, #1456]	; 0x5b0
    inst->uwb_dev.status.rx_restarted = 0;
   1867a:	f360 03c3 	bfi	r3, r0, #3, #1
   1867e:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    if (config->trxoff_enable){ // force return to idle state, if in RX state
   18682:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   18686:	0698      	lsls	r0, r3, #26
   18688:	d513      	bpl.n	186b2 <dw1000_start_rx+0x6e>
        uint8_t state = (uint8_t) dw1000_read_reg(inst, SYS_STATE_ID, PMSC_STATE_OFFSET, sizeof(uint8_t));
   1868a:	2301      	movs	r3, #1
   1868c:	2202      	movs	r2, #2
   1868e:	2119      	movs	r1, #25
   18690:	4620      	mov	r0, r4
   18692:	f7fe fe3f 	bl	17314 <dw1000_read_reg>
        if(state != PMSC_STATE_IDLE){
   18696:	b2c0      	uxtb	r0, r0
   18698:	2801      	cmp	r0, #1
   1869a:	d00a      	beq.n	186b2 <dw1000_start_rx+0x6e>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   1869c:	2301      	movs	r3, #1
   1869e:	2240      	movs	r2, #64	; 0x40
   186a0:	9302      	str	r3, [sp, #8]
   186a2:	2300      	movs	r3, #0
   186a4:	e9cd 2300 	strd	r2, r3, [sp]
   186a8:	210d      	movs	r1, #13
   186aa:	462a      	mov	r2, r5
   186ac:	4620      	mov	r0, r4
   186ae:	f7fe fe83 	bl	173b8 <dw1000_write_reg>
    if (config->dblbuffon_enabled) {
   186b2:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   186b6:	06d9      	lsls	r1, r3, #27
   186b8:	d502      	bpl.n	186c0 <dw1000_start_rx+0x7c>
        dw1000_sync_rxbufptrs(inst);
   186ba:	4620      	mov	r0, r4
   186bc:	f7ff ffa2 	bl	18604 <dw1000_sync_rxbufptrs>
        sys_ctrl |= SYS_CTRL_RXDLYE;
   186c0:	f016 0a04 	ands.w	sl, r6, #4
   186c4:	bf0c      	ite	eq
   186c6:	f44f 7580 	moveq.w	r5, #256	; 0x100
   186ca:	f44f 7540 	movne.w	r5, #768	; 0x300
    if (control.wait4resp_enabled) {
   186ce:	07f2      	lsls	r2, r6, #31
        sys_ctrl |= SYS_CTRL_WAIT4RESP;
   186d0:	bf48      	it	mi
   186d2:	f045 0580 	orrmi.w	r5, r5, #128	; 0x80
    if (control.delay_start_enabled)
   186d6:	fa5f f886 	uxtb.w	r8, r6
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, sys_ctrl, sizeof(uint16_t));
   186da:	f04f 0902 	mov.w	r9, #2
   186de:	2600      	movs	r6, #0
   186e0:	e9cd 5600 	strd	r5, r6, [sp]
   186e4:	f8cd 9008 	str.w	r9, [sp, #8]
   186e8:	4632      	mov	r2, r6
   186ea:	210d      	movs	r1, #13
   186ec:	4620      	mov	r0, r4
   186ee:	f7fe fe63 	bl	173b8 <dw1000_write_reg>
    if (control.delay_start_enabled){   // check for errors
   186f2:	f1ba 0f00 	cmp.w	sl, #0
   186f6:	d039      	beq.n	1876c <dw1000_start_rx+0x128>
        sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t));  // Read 1 byte at offset 3 to get the 4th byte out of 5
   186f8:	2301      	movs	r3, #1
   186fa:	2203      	movs	r2, #3
   186fc:	210f      	movs	r1, #15
   186fe:	4620      	mov	r0, r4
   18700:	f7fe fe08 	bl	17314 <dw1000_read_reg>
        inst->uwb_dev.status.start_rx_error = (sys_status & (SYS_STATUS_HPDWARN >> 24)) != 0;
   18704:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   18708:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1870c:	f360 03c3 	bfi	r3, r0, #3, #1
   18710:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
        if (inst->uwb_dev.status.start_rx_error){   // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
   18714:	071b      	lsls	r3, r3, #28
   18716:	d518      	bpl.n	1874a <dw1000_start_rx+0x106>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t)); // return to idle state
   18718:	2301      	movs	r3, #1
   1871a:	9302      	str	r3, [sp, #8]
   1871c:	2240      	movs	r2, #64	; 0x40
   1871e:	2300      	movs	r3, #0
   18720:	e9cd 2300 	strd	r2, r3, [sp]
   18724:	210d      	movs	r1, #13
   18726:	4632      	mov	r2, r6
   18728:	4620      	mov	r0, r4
   1872a:	f7fe fe45 	bl	173b8 <dw1000_write_reg>
            if (control.on_error_continue_enabled){
   1872e:	f018 0f40 	tst.w	r8, #64	; 0x40
   18732:	d00a      	beq.n	1874a <dw1000_start_rx+0x106>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, sys_ctrl, sizeof(uint16_t)); // turn on receiver
   18734:	f405 75c0 	and.w	r5, r5, #384	; 0x180
   18738:	e9cd 5600 	strd	r5, r6, [sp]
   1873c:	f8cd 9008 	str.w	r9, [sp, #8]
   18740:	4632      	mov	r2, r6
   18742:	210d      	movs	r1, #13
   18744:	4620      	mov	r0, r4
   18746:	f7fe fe37 	bl	173b8 <dw1000_write_reg>
    inst->control.wait4resp_enabled = false;
   1874a:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1874e:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
   18752:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    return (dpl_error_t)os_mutex_release(&mu->mu);
   18756:	4638      	mov	r0, r7
   18758:	f7f1 ffb6 	bl	a6c8 <os_mutex_release>
    assert(err == DPL_OK);
   1875c:	2800      	cmp	r0, #0
   1875e:	d083      	beq.n	18668 <dw1000_start_rx+0x24>
   18760:	2300      	movs	r3, #0
   18762:	461a      	mov	r2, r3
   18764:	4619      	mov	r1, r3
   18766:	4618      	mov	r0, r3
   18768:	f7f0 fbc4 	bl	8ef4 <__assert_func>
        inst->uwb_dev.status.start_rx_error = 0;
   1876c:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   18770:	f36a 03c3 	bfi	r3, sl, #3, #1
   18774:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
   18778:	e7e7      	b.n	1874a <dw1000_start_rx+0x106>
	...

0001877c <dw1000_mac_framefilter>:
{
   1877c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1877e:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   18782:	4605      	mov	r5, r0
   18784:	460c      	mov	r4, r1
   18786:	4630      	mov	r0, r6
   18788:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1878c:	f7f1 ffee 	bl	a76c <os_mutex_pend>
    if (err != DPL_OK) {
   18790:	4602      	mov	r2, r0
   18792:	b148      	cbz	r0, 187a8 <dw1000_mac_framefilter+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   18794:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   18798:	f043 0308 	orr.w	r3, r3, #8
   1879c:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
}
   187a0:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
   187a4:	b004      	add	sp, #16
   187a6:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)) ; // Read sysconfig register
   187a8:	2304      	movs	r3, #4
   187aa:	4619      	mov	r1, r3
   187ac:	4628      	mov	r0, r5
   187ae:	f7fe fdb1 	bl	17314 <dw1000_read_reg>
    inst->uwb_dev.config.rx.frameFilter = enable;
   187b2:	f8a5 451c 	strh.w	r4, [r5, #1308]	; 0x51c
    if(enable > 0){   // Enable frame filtering and configure frame types
   187b6:	b1d4      	cbz	r4, 187ee <dw1000_mac_framefilter+0x72>
        sys_cfg_reg &= ~(SYS_CFG_FF_ALL_EN);  // Clear all
   187b8:	490e      	ldr	r1, [pc, #56]	; (187f4 <dw1000_mac_framefilter+0x78>)
        sys_cfg_reg |= (enable & SYS_CFG_FF_ALL_EN) | SYS_CFG_FFE;
   187ba:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
        sys_cfg_reg &= ~(SYS_CFG_FF_ALL_EN);  // Clear all
   187be:	4001      	ands	r1, r0
        sys_cfg_reg |= (enable & SYS_CFG_FF_ALL_EN) | SYS_CFG_FFE;
   187c0:	430c      	orrs	r4, r1
   187c2:	f044 0401 	orr.w	r4, r4, #1
    dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   187c6:	2300      	movs	r3, #0
   187c8:	2104      	movs	r1, #4
   187ca:	e9cd 4300 	strd	r4, r3, [sp]
   187ce:	461a      	mov	r2, r3
   187d0:	9102      	str	r1, [sp, #8]
   187d2:	4628      	mov	r0, r5
   187d4:	f7fe fdf0 	bl	173b8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   187d8:	4630      	mov	r0, r6
   187da:	f7f1 ff75 	bl	a6c8 <os_mutex_release>
    assert(err == DPL_OK);
   187de:	2300      	movs	r3, #0
   187e0:	2800      	cmp	r0, #0
   187e2:	d0dd      	beq.n	187a0 <dw1000_mac_framefilter+0x24>
   187e4:	461a      	mov	r2, r3
   187e6:	4619      	mov	r1, r3
   187e8:	4618      	mov	r0, r3
   187ea:	f7f0 fb83 	bl	8ef4 <__assert_func>
        sys_cfg_reg &= ~(SYS_CFG_FFE);
   187ee:	4c02      	ldr	r4, [pc, #8]	; (187f8 <dw1000_mac_framefilter+0x7c>)
   187f0:	4004      	ands	r4, r0
   187f2:	e7e8      	b.n	187c6 <dw1000_mac_framefilter+0x4a>
   187f4:	f047fe01 	.word	0xf047fe01
   187f8:	f047fffe 	.word	0xf047fffe

000187fc <dw1000_set_autoack>:
{
   187fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   18800:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   18804:	4604      	mov	r4, r0
   18806:	4688      	mov	r8, r1
   18808:	4630      	mov	r0, r6
   1880a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1880e:	f7f1 ffad 	bl	a76c <os_mutex_pend>
    if (err != DPL_OK) {
   18812:	4607      	mov	r7, r0
   18814:	b150      	cbz	r0, 1882c <dw1000_set_autoack+0x30>
        inst->uwb_dev.status.mtx_error = 1;
   18816:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1881a:	f043 0308 	orr.w	r3, r3, #8
   1881e:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   18822:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   18826:	b004      	add	sp, #16
   18828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)); // Read sysconfig register
   1882c:	2304      	movs	r3, #4
   1882e:	4602      	mov	r2, r0
   18830:	4619      	mov	r1, r3
   18832:	4620      	mov	r0, r4
   18834:	f7fe fd6e 	bl	17314 <dw1000_read_reg>
    inst->uwb_dev.config.autoack_enabled = enable;
   18838:	f894 552c 	ldrb.w	r5, [r4, #1324]	; 0x52c
   1883c:	f368 0582 	bfi	r5, r8, #2, #1
    if(inst->uwb_dev.config.autoack_enabled){
   18840:	f015 0204 	ands.w	r2, r5, #4
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)); // Read sysconfig register
   18844:	4603      	mov	r3, r0
    inst->uwb_dev.config.autoack_enabled = enable;
   18846:	f884 552c 	strb.w	r5, [r4, #1324]	; 0x52c
    if(inst->uwb_dev.config.autoack_enabled){
   1884a:	f04f 0104 	mov.w	r1, #4
   1884e:	d017      	beq.n	18880 <dw1000_set_autoack+0x84>
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)); // Read sysconfig register
   18850:	f023 637b 	bic.w	r3, r3, #263192576	; 0xfb00000
   18854:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
        sys_cfg_reg |= SYS_CFG_AUTOACK;
   18858:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
        dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   1885c:	e9cd 3700 	strd	r3, r7, [sp]
   18860:	9102      	str	r1, [sp, #8]
   18862:	463a      	mov	r2, r7
        dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   18864:	4620      	mov	r0, r4
   18866:	f7fe fda7 	bl	173b8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1886a:	4630      	mov	r0, r6
   1886c:	f7f1 ff2c 	bl	a6c8 <os_mutex_release>
    assert(err == DPL_OK);
   18870:	2800      	cmp	r0, #0
   18872:	d0d6      	beq.n	18822 <dw1000_set_autoack+0x26>
   18874:	2300      	movs	r3, #0
   18876:	461a      	mov	r2, r3
   18878:	4619      	mov	r1, r3
   1887a:	4618      	mov	r0, r3
   1887c:	f7f0 fb3a 	bl	8ef4 <__assert_func>
        sys_cfg_reg &= ~SYS_CFG_AUTOACK;
   18880:	f023 439f 	bic.w	r3, r3, #1333788672	; 0x4f800000
   18884:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
        dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   18888:	e9cd 3200 	strd	r3, r2, [sp]
   1888c:	9102      	str	r1, [sp, #8]
   1888e:	e7e9      	b.n	18864 <dw1000_set_autoack+0x68>

00018890 <dw1000_set_autoack_delay>:
{
   18890:	b530      	push	{r4, r5, lr}
   18892:	b085      	sub	sp, #20
    dw1000_write_reg(inst, ACK_RESP_T_ID, ACK_RESP_T_ACK_TIM_OFFSET, delay, sizeof(uint8_t));
   18894:	2300      	movs	r3, #0
   18896:	2501      	movs	r5, #1
{
   18898:	4604      	mov	r4, r0
    dw1000_write_reg(inst, ACK_RESP_T_ID, ACK_RESP_T_ACK_TIM_OFFSET, delay, sizeof(uint8_t));
   1889a:	9100      	str	r1, [sp, #0]
   1889c:	9301      	str	r3, [sp, #4]
   1889e:	2203      	movs	r2, #3
   188a0:	9502      	str	r5, [sp, #8]
   188a2:	211a      	movs	r1, #26
   188a4:	f7fe fd88 	bl	173b8 <dw1000_write_reg>
    dw1000_set_autoack(inst, true);
   188a8:	4629      	mov	r1, r5
   188aa:	4620      	mov	r0, r4
   188ac:	f7ff ffa6 	bl	187fc <dw1000_set_autoack>
}
   188b0:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   188b4:	b005      	add	sp, #20
   188b6:	bd30      	pop	{r4, r5, pc}

000188b8 <dw1000_set_wait4resp_delay>:
{
   188b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   188ba:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   188be:	4604      	mov	r4, r0
   188c0:	460d      	mov	r5, r1
   188c2:	4630      	mov	r0, r6
   188c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   188c8:	f7f1 ff50 	bl	a76c <os_mutex_pend>
    if (err != DPL_OK) {
   188cc:	4602      	mov	r2, r0
   188ce:	b148      	cbz	r0, 188e4 <dw1000_set_wait4resp_delay+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   188d0:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   188d4:	f043 0308 	orr.w	r3, r3, #8
   188d8:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   188dc:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   188e0:	b004      	add	sp, #16
   188e2:	bd70      	pop	{r4, r5, r6, pc}
    ack_resp_reg = dw1000_read_reg(inst, ACK_RESP_T_ID, 0, sizeof(uint32_t));
   188e4:	2304      	movs	r3, #4
   188e6:	211a      	movs	r1, #26
   188e8:	4620      	mov	r0, r4
   188ea:	f7fe fd13 	bl	17314 <dw1000_read_reg>
    inst->control.wait4resp_delay_enabled = delay > 0;
   188ee:	1e2a      	subs	r2, r5, #0
   188f0:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   188f4:	bf18      	it	ne
   188f6:	2201      	movne	r2, #1
   188f8:	f362 0341 	bfi	r3, r2, #1, #1
   188fc:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if (inst->control.wait4resp_delay_enabled || (ack_resp_reg&ACK_RESP_T_W4R_TIM_MASK)) {
   18900:	079b      	lsls	r3, r3, #30
   18902:	d402      	bmi.n	1890a <dw1000_set_wait4resp_delay+0x52>
   18904:	f3c0 0313 	ubfx	r3, r0, #0, #20
   18908:	b16b      	cbz	r3, 18926 <dw1000_set_wait4resp_delay+0x6e>
        ack_resp_reg &= ~(ACK_RESP_T_W4R_TIM_MASK) ;        // Clear the timer (19:0)
   1890a:	0d00      	lsrs	r0, r0, #20
   1890c:	0500      	lsls	r0, r0, #20
        ack_resp_reg |= (delay & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
   1890e:	f3c5 0513 	ubfx	r5, r5, #0, #20
   18912:	4328      	orrs	r0, r5
        dw1000_write_reg(inst, ACK_RESP_T_ID, 0, ack_resp_reg, sizeof(uint32_t));
   18914:	2304      	movs	r3, #4
   18916:	2200      	movs	r2, #0
   18918:	e9cd 0200 	strd	r0, r2, [sp]
   1891c:	9302      	str	r3, [sp, #8]
   1891e:	211a      	movs	r1, #26
   18920:	4620      	mov	r0, r4
   18922:	f7fe fd49 	bl	173b8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   18926:	4630      	mov	r0, r6
   18928:	f7f1 fece 	bl	a6c8 <os_mutex_release>
    assert(err == DPL_OK);
   1892c:	2800      	cmp	r0, #0
   1892e:	d0d5      	beq.n	188dc <dw1000_set_wait4resp_delay+0x24>
   18930:	2300      	movs	r3, #0
   18932:	461a      	mov	r2, r3
   18934:	4619      	mov	r1, r3
   18936:	4618      	mov	r0, r3
   18938:	f7f0 fadc 	bl	8ef4 <__assert_func>

0001893c <dw1000_set_dblrxbuff>:
{
   1893c:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1893e:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   18942:	b085      	sub	sp, #20
   18944:	4605      	mov	r5, r0
   18946:	460f      	mov	r7, r1
   18948:	4630      	mov	r0, r6
   1894a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1894e:	f7f1 ff0d 	bl	a76c <os_mutex_pend>
    if (err != DPL_OK) {
   18952:	4602      	mov	r2, r0
   18954:	b148      	cbz	r0, 1896a <dw1000_set_dblrxbuff+0x2e>
        inst->uwb_dev.status.mtx_error = 1;
   18956:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   1895a:	f043 0308 	orr.w	r3, r3, #8
   1895e:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
}
   18962:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
   18966:	b005      	add	sp, #20
   18968:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
   1896a:	2304      	movs	r3, #4
   1896c:	4619      	mov	r1, r3
   1896e:	4628      	mov	r0, r5
   18970:	f7fe fcd0 	bl	17314 <dw1000_read_reg>
    inst->uwb_dev.config.dblbuffon_enabled = enable;
   18974:	f895 352c 	ldrb.w	r3, [r5, #1324]	; 0x52c
   18978:	f367 1304 	bfi	r3, r7, #4, #1
        sys_cfg_reg &= ~SYS_CFG_DIS_DRXB;
   1897c:	f020 647b 	bic.w	r4, r0, #263192576	; 0xfb00000
    inst->uwb_dev.config.dblbuffon_enabled = enable;
   18980:	f885 352c 	strb.w	r3, [r5, #1324]	; 0x52c
    if(inst->uwb_dev.config.dblbuffon_enabled)
   18984:	06db      	lsls	r3, r3, #27
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
   18986:	bf58      	it	pl
   18988:	f424 2400 	bicpl.w	r4, r4, #524288	; 0x80000
    dw1000_write_reg(inst, SYS_CFG_ID, 0, sys_cfg_reg, sizeof(uint32_t));
   1898c:	f04f 0300 	mov.w	r3, #0
        sys_cfg_reg &= ~SYS_CFG_DIS_DRXB;
   18990:	bf4c      	ite	mi
   18992:	f424 2401 	bicmi.w	r4, r4, #528384	; 0x81000
        sys_cfg_reg |= SYS_CFG_DIS_DRXB;
   18996:	f444 5480 	orrpl.w	r4, r4, #4096	; 0x1000
    dw1000_write_reg(inst, SYS_CFG_ID, 0, sys_cfg_reg, sizeof(uint32_t));
   1899a:	2104      	movs	r1, #4
   1899c:	e9cd 4300 	strd	r4, r3, [sp]
   189a0:	461a      	mov	r2, r3
   189a2:	9102      	str	r1, [sp, #8]
   189a4:	4628      	mov	r0, r5
   189a6:	f7fe fd07 	bl	173b8 <dw1000_write_reg>
    dw1000_sync_rxbufptrs(inst);
   189aa:	4628      	mov	r0, r5
   189ac:	f7ff fe2a 	bl	18604 <dw1000_sync_rxbufptrs>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   189b0:	4630      	mov	r0, r6
   189b2:	f7f1 fe89 	bl	a6c8 <os_mutex_release>
    assert(err == DPL_OK);
   189b6:	2300      	movs	r3, #0
   189b8:	2800      	cmp	r0, #0
   189ba:	d0d2      	beq.n	18962 <dw1000_set_dblrxbuff+0x26>
   189bc:	461a      	mov	r2, r3
   189be:	4619      	mov	r1, r3
   189c0:	4618      	mov	r0, r3
   189c2:	f7f0 fa97 	bl	8ef4 <__assert_func>
	...

000189c8 <dw1000_mac_config>:
{
   189c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189cc:	4604      	mov	r4, r0
   189ce:	b087      	sub	sp, #28
        config = &inst->uwb_dev.config;
   189d0:	f200 550c 	addw	r5, r0, #1292	; 0x50c
    if (config == NULL) {
   189d4:	b149      	cbz	r1, 189ea <dw1000_mac_config+0x22>
        memcpy(&inst->uwb_dev.config, config, sizeof(struct uwb_dev_config));
   189d6:	460b      	mov	r3, r1
   189d8:	f101 0224 	add.w	r2, r1, #36	; 0x24
   189dc:	f853 0b04 	ldr.w	r0, [r3], #4
   189e0:	f845 0b04 	str.w	r0, [r5], #4
   189e4:	4293      	cmp	r3, r2
   189e6:	d1f9      	bne.n	189dc <dw1000_mac_config+0x14>
   189e8:	460d      	mov	r5, r1
    chan = config->channel;
   189ea:	782e      	ldrb	r6, [r5, #0]
    prfIndex = config->prf - DWT_PRF_16M;
   189ec:	f895 9002 	ldrb.w	r9, [r5, #2]
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
   189f0:	2e04      	cmp	r6, #4
    prfIndex = config->prf - DWT_PRF_16M;
   189f2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   189f6:	fa5f f989 	uxtb.w	r9, r9
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
   189fa:	f000 8142 	beq.w	18c82 <dw1000_mac_config+0x2ba>
   189fe:	1ff1      	subs	r1, r6, #7
   18a00:	424b      	negs	r3, r1
   18a02:	414b      	adcs	r3, r1
    reg16 = lde_replicaCoeff[config->rx.preambleCodeIndex];
   18a04:	796a      	ldrb	r2, [r5, #5]
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
   18a06:	9305      	str	r3, [sp, #20]
    reg16 = lde_replicaCoeff[config->rx.preambleCodeIndex];
   18a08:	4bbb      	ldr	r3, [pc, #748]	; (18cf8 <dw1000_mac_config+0x330>)
   18a0a:	f833 b012 	ldrh.w	fp, [r3, r2, lsl #1]
    inst->sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
   18a0e:	2304      	movs	r3, #4
   18a10:	4619      	mov	r1, r3
   18a12:	2200      	movs	r2, #0
   18a14:	4620      	mov	r0, r4
   18a16:	f7fe fc7d 	bl	17314 <dw1000_read_reg>
    if(config->dataRate == DWT_BR_110K){
   18a1a:	786b      	ldrb	r3, [r5, #1]
   18a1c:	2b00      	cmp	r3, #0
   18a1e:	f040 8132 	bne.w	18c86 <dw1000_mac_config+0x2be>
    inst->sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
   18a22:	f020 607b 	bic.w	r0, r0, #263192576	; 0xfb00000
   18a26:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
        inst->sys_cfg_reg |= SYS_CFG_RXM110K;
   18a2a:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
   18a2e:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
    inst->sys_cfg_reg |= (SYS_CFG_PHR_MODE_11 & (((uint32_t)config->rx.phrMode) << SYS_CFG_PHR_MODE_SHFT));
   18a32:	79eb      	ldrb	r3, [r5, #7]
   18a34:	041b      	lsls	r3, r3, #16
   18a36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    inst->sys_cfg_reg &= ~SYS_CFG_PHR_MODE_11;
   18a3a:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    inst->sys_cfg_reg |= (SYS_CFG_PHR_MODE_11 & (((uint32_t)config->rx.phrMode) << SYS_CFG_PHR_MODE_SHFT));
   18a3e:	4318      	orrs	r0, r3
    if (config->rxauto_enable)
   18a40:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   18a44:	07da      	lsls	r2, r3, #31
        inst->sys_cfg_reg |=SYS_CFG_RXAUTR;
   18a46:	bf4c      	ite	mi
   18a48:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
        inst->sys_cfg_reg &= (~SYS_CFG_RXAUTR);
   18a4c:	f020 5000 	bicpl.w	r0, r0, #536870912	; 0x20000000
    dw1000_write_reg(inst, SYS_CFG_ID, 0, inst->sys_cfg_reg, sizeof(uint32_t));
   18a50:	f04f 0800 	mov.w	r8, #0
   18a54:	f04f 0a04 	mov.w	sl, #4
    inst->sys_cfg_reg |= SYS_CFG_DIS_DRXB;
   18a58:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    dw1000_write_reg(inst, LDE_IF_ID, LDE_REPC_OFFSET, reg16, sizeof(uint16_t));
   18a5c:	2702      	movs	r7, #2
    dw1000_write_reg(inst, SYS_CFG_ID, 0, inst->sys_cfg_reg, sizeof(uint32_t));
   18a5e:	e9cd 0800 	strd	r0, r8, [sp]
    inst->sys_cfg_reg |= SYS_CFG_DIS_DRXB;
   18a62:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
    dw1000_write_reg(inst, SYS_CFG_ID, 0, inst->sys_cfg_reg, sizeof(uint32_t));
   18a66:	4642      	mov	r2, r8
   18a68:	4651      	mov	r1, sl
   18a6a:	4620      	mov	r0, r4
   18a6c:	f8cd a008 	str.w	sl, [sp, #8]
   18a70:	f7fe fca2 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, LDE_IF_ID, LDE_REPC_OFFSET, reg16, sizeof(uint16_t));
   18a74:	f642 0204 	movw	r2, #10244	; 0x2804
   18a78:	e9cd b800 	strd	fp, r8, [sp]
   18a7c:	212e      	movs	r1, #46	; 0x2e
   18a7e:	4620      	mov	r0, r4
   18a80:	9702      	str	r7, [sp, #8]
   18a82:	f7fe fc99 	bl	173b8 <dw1000_write_reg>
    dw1000_phy_config_lde(inst, prfIndex);
   18a86:	4649      	mov	r1, r9
   18a88:	4620      	mov	r0, r4
   18a8a:	f001 f866 	bl	19b5a <dw1000_phy_config_lde>
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]], sizeof(uint32_t));
   18a8e:	4b9b      	ldr	r3, [pc, #620]	; (18cfc <dw1000_mac_config+0x334>)
   18a90:	f8cd a008 	str.w	sl, [sp, #8]
   18a94:	f813 b006 	ldrb.w	fp, [r3, r6]
   18a98:	4b99      	ldr	r3, [pc, #612]	; (18d00 <dw1000_mac_config+0x338>)
   18a9a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   18a9e:	2207      	movs	r2, #7
   18aa0:	e9cd 3800 	strd	r3, r8, [sp]
   18aa4:	212b      	movs	r1, #43	; 0x2b
   18aa6:	4620      	mov	r0, r4
   18aa8:	f7fe fc86 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]], sizeof(uint8_t));
   18aac:	4a95      	ldr	r2, [pc, #596]	; (18d04 <dw1000_mac_config+0x33c>)
   18aae:	f812 200b 	ldrb.w	r2, [r2, fp]
   18ab2:	2301      	movs	r3, #1
   18ab4:	e9cd 2800 	strd	r2, r8, [sp]
   18ab8:	9302      	str	r3, [sp, #8]
   18aba:	220b      	movs	r2, #11
   18abc:	212b      	movs	r1, #43	; 0x2b
   18abe:	4620      	mov	r0, r4
   18ac0:	f7fe fc7a 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw], sizeof(uint8_t));
   18ac4:	2301      	movs	r3, #1
   18ac6:	9a05      	ldr	r2, [sp, #20]
   18ac8:	9302      	str	r3, [sp, #8]
   18aca:	4b8f      	ldr	r3, [pc, #572]	; (18d08 <dw1000_mac_config+0x340>)
   18acc:	5c9b      	ldrb	r3, [r3, r2]
   18ace:	2128      	movs	r1, #40	; 0x28
   18ad0:	e9cd 3800 	strd	r3, r8, [sp]
   18ad4:	220b      	movs	r2, #11
   18ad6:	4620      	mov	r0, r4
   18ad8:	f7fe fc6e 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]], sizeof(uint32_t));
   18adc:	4b8b      	ldr	r3, [pc, #556]	; (18d0c <dw1000_mac_config+0x344>)
   18ade:	f8cd a008 	str.w	sl, [sp, #8]
   18ae2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   18ae6:	220c      	movs	r2, #12
   18ae8:	e9cd 3800 	strd	r3, r8, [sp]
   18aec:	2128      	movs	r1, #40	; 0x28
   18aee:	4620      	mov	r0, r4
   18af0:	f7fe fc62 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->rx.sfdType], sizeof(uint16_t));
   18af4:	9702      	str	r7, [sp, #8]
   18af6:	786a      	ldrb	r2, [r5, #1]
   18af8:	79ab      	ldrb	r3, [r5, #6]
   18afa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   18afe:	4a84      	ldr	r2, [pc, #528]	; (18d10 <dw1000_mac_config+0x348>)
   18b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   18b04:	2127      	movs	r1, #39	; 0x27
   18b06:	e9cd 3800 	strd	r3, r8, [sp]
   18b0a:	463a      	mov	r2, r7
   18b0c:	4620      	mov	r0, r4
   18b0e:	f7fe fc53 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex], sizeof(uint16_t));
   18b12:	4b80      	ldr	r3, [pc, #512]	; (18d14 <dw1000_mac_config+0x34c>)
   18b14:	9702      	str	r7, [sp, #8]
   18b16:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
   18b1a:	4652      	mov	r2, sl
   18b1c:	e9cd 3800 	strd	r3, r8, [sp]
   18b20:	2127      	movs	r1, #39	; 0x27
   18b22:	4620      	mov	r0, r4
   18b24:	f7fe fc48 	bl	173b8 <dw1000_write_reg>
    if(config->dataRate == DWT_BR_110K){
   18b28:	786b      	ldrb	r3, [r5, #1]
   18b2a:	2b00      	cmp	r3, #0
   18b2c:	f040 80b0 	bne.w	18c90 <dw1000_mac_config+0x2c8>
        dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K, sizeof(uint16_t));
   18b30:	2264      	movs	r2, #100	; 0x64
   18b32:	2300      	movs	r3, #0
   18b34:	e9cd 2300 	strd	r2, r3, [sp]
   18b38:	9702      	str	r7, [sp, #8]
   18b3a:	2206      	movs	r2, #6
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS, sizeof(uint16_t));
   18b3c:	2127      	movs	r1, #39	; 0x27
   18b3e:	4620      	mov	r0, r4
   18b40:	f7fe fc3a 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE2_OFFSET,
   18b44:	2304      	movs	r3, #4
   18b46:	9302      	str	r3, [sp, #8]
                     digital_bb_config[prfIndex][config->rx.pacLength], sizeof(uint32_t));
   18b48:	792b      	ldrb	r3, [r5, #4]
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE2_OFFSET,
   18b4a:	4a73      	ldr	r2, [pc, #460]	; (18d18 <dw1000_mac_config+0x350>)
                     digital_bb_config[prfIndex][config->rx.pacLength], sizeof(uint32_t));
   18b4c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE2_OFFSET,
   18b50:	2127      	movs	r1, #39	; 0x27
   18b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18b56:	9300      	str	r3, [sp, #0]
   18b58:	2300      	movs	r3, #0
   18b5a:	9301      	str	r3, [sp, #4]
   18b5c:	2208      	movs	r2, #8
   18b5e:	4620      	mov	r0, r4
   18b60:	f7fe fc2a 	bl	173b8 <dw1000_write_reg>
    if(config->rx.sfdTimeout == 0)
   18b64:	896b      	ldrh	r3, [r5, #10]
   18b66:	b90b      	cbnz	r3, 18b6c <dw1000_mac_config+0x1a4>
        config->rx.sfdTimeout= DWT_SFDTOC_DEF;
   18b68:	2381      	movs	r3, #129	; 0x81
   18b6a:	816b      	strh	r3, [r5, #10]
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->rx.sfdTimeout, sizeof(uint16_t));
   18b6c:	f04f 0a02 	mov.w	sl, #2
   18b70:	f8cd a008 	str.w	sl, [sp, #8]
   18b74:	896b      	ldrh	r3, [r5, #10]
   18b76:	2700      	movs	r7, #0
   18b78:	e9cd 3700 	strd	r3, r7, [sp]
   18b7c:	2220      	movs	r2, #32
   18b7e:	2127      	movs	r1, #39	; 0x27
   18b80:	4620      	mov	r0, r4
   18b82:	f7fe fc19 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, AGC_CTRL_ID, AGC_TUNE2_OFFSET, agc_config.lo32, sizeof(uint32_t));
   18b86:	a35a      	add	r3, pc, #360	; (adr r3, 18cf0 <dw1000_mac_config+0x328>)
   18b88:	e9d3 2300 	ldrd	r2, r3, [r3]
   18b8c:	f04f 0804 	mov.w	r8, #4
   18b90:	e9cd 2300 	strd	r2, r3, [sp]
   18b94:	2123      	movs	r1, #35	; 0x23
   18b96:	220c      	movs	r2, #12
   18b98:	4620      	mov	r0, r4
   18b9a:	f8cd 8008 	str.w	r8, [sp, #8]
   18b9e:	f7fe fc0b 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, AGC_CTRL_ID, AGC_TUNE1_OFFSET, agc_config.target[prfIndex], sizeof(uint16_t));
   18ba2:	4b5e      	ldr	r3, [pc, #376]	; (18d1c <dw1000_mac_config+0x354>)
   18ba4:	f8cd a008 	str.w	sl, [sp, #8]
   18ba8:	eb03 0949 	add.w	r9, r3, r9, lsl #1
   18bac:	4620      	mov	r0, r4
   18bae:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   18bb2:	4642      	mov	r2, r8
   18bb4:	e9cd 3700 	strd	r3, r7, [sp]
   18bb8:	2123      	movs	r1, #35	; 0x23
   18bba:	f7fe fbfd 	bl	173b8 <dw1000_write_reg>
    if(config->rx.sfdType){
   18bbe:	79a8      	ldrb	r0, [r5, #6]
   18bc0:	2800      	cmp	r0, #0
   18bc2:	f000 8088 	beq.w	18cd6 <dw1000_mac_config+0x30e>
        dw1000_write_reg(inst, USR_SFD_ID, 0x0, dwnsSFDlen[config->dataRate], sizeof(uint8_t));
   18bc6:	f04f 0801 	mov.w	r8, #1
   18bca:	f8cd 8008 	str.w	r8, [sp, #8]
   18bce:	786b      	ldrb	r3, [r5, #1]
   18bd0:	4a53      	ldr	r2, [pc, #332]	; (18d20 <dw1000_mac_config+0x358>)
   18bd2:	5cd3      	ldrb	r3, [r2, r3]
   18bd4:	4620      	mov	r0, r4
   18bd6:	463a      	mov	r2, r7
   18bd8:	e9cd 3700 	strd	r3, r7, [sp]
   18bdc:	2121      	movs	r1, #33	; 0x21
   18bde:	f7fe fbeb 	bl	173b8 <dw1000_write_reg>
        useDWnsSFD = 1 ;
   18be2:	4642      	mov	r2, r8
        nsSfd_result = 3 ;
   18be4:	2003      	movs	r0, #3
    dw1000_write_reg(inst, CHAN_CTRL_ID, 0, regval, sizeof(uint32_t)) ;
   18be6:	2704      	movs	r7, #4
   18be8:	9702      	str	r7, [sp, #8]
        (CHAN_CTRL_RX_PCOD_MASK & (((uint32_t)config->rx.preambleCodeIndex) << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
   18bea:	7969      	ldrb	r1, [r5, #5]
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   18bec:	f006 030f 	and.w	r3, r6, #15
        (CHAN_CTRL_RX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_RX_CHAN_SHIFT)) |                         // Receive Channel
   18bf0:	40be      	lsls	r6, r7
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   18bf2:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
        (CHAN_CTRL_RX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_RX_CHAN_SHIFT)) |                         // Receive Channel
   18bf6:	b2f6      	uxtb	r6, r6
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   18bf8:	4333      	orrs	r3, r6
        (CHAN_CTRL_RXFPRF_MASK & (((uint32_t)config->prf) << CHAN_CTRL_RXFPRF_SHIFT)) |                    // RX PRF
   18bfa:	78ae      	ldrb	r6, [r5, #2]
        (CHAN_CTRL_TX_PCOD_MASK & (((uint32_t)config->tx.preambleCodeIndex) << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
   18bfc:	7d29      	ldrb	r1, [r5, #20]
        (CHAN_CTRL_RXFPRF_MASK & (((uint32_t)config->prf) << CHAN_CTRL_RXFPRF_SHIFT)) |                    // RX PRF
   18bfe:	04b6      	lsls	r6, r6, #18
   18c00:	f406 2640 	and.w	r6, r6, #786432	; 0xc0000
        (CHAN_CTRL_TX_PCOD_MASK & (((uint32_t)config->tx.preambleCodeIndex) << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
   18c04:	0589      	lsls	r1, r1, #22
   18c06:	f001 61f8 	and.w	r1, r1, #130023424	; 0x7c00000
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   18c0a:	4333      	orrs	r3, r6
   18c0c:	430b      	orrs	r3, r1
   18c0e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   18c12:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    dw1000_write_reg(inst, CHAN_CTRL_ID, 0, regval, sizeof(uint32_t)) ;
   18c16:	2200      	movs	r2, #0
   18c18:	e9cd 3200 	strd	r3, r2, [sp]
   18c1c:	211f      	movs	r1, #31
   18c1e:	4620      	mov	r0, r4
   18c20:	f7fe fbca 	bl	173b8 <dw1000_write_reg>
    inst->tx_fctrl = (((uint32_t)(config->tx.preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   18c24:	7d6b      	ldrb	r3, [r5, #21]
   18c26:	78a9      	ldrb	r1, [r5, #2]
   18c28:	4319      	orrs	r1, r3
        (((uint32_t)config->dataRate) << TX_FCTRL_TXBR_SHFT);
   18c2a:	786b      	ldrb	r3, [r5, #1]
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, inst->tx_fctrl, sizeof(uint32_t));
   18c2c:	9702      	str	r7, [sp, #8]
        (((uint32_t)config->dataRate) << TX_FCTRL_TXBR_SHFT);
   18c2e:	035b      	lsls	r3, r3, #13
    inst->tx_fctrl = (((uint32_t)(config->tx.preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   18c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, inst->tx_fctrl, sizeof(uint32_t));
   18c34:	2200      	movs	r2, #0
    inst->tx_fctrl = (((uint32_t)(config->tx.preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   18c36:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, inst->tx_fctrl, sizeof(uint32_t));
   18c3a:	9300      	str	r3, [sp, #0]
   18c3c:	9201      	str	r2, [sp, #4]
   18c3e:	2108      	movs	r1, #8
   18c40:	4620      	mov	r0, r4
   18c42:	f7fe fbb9 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF, sizeof(uint8_t));
   18c46:	2301      	movs	r3, #1
   18c48:	2042      	movs	r0, #66	; 0x42
   18c4a:	2100      	movs	r1, #0
   18c4c:	e9cd 0100 	strd	r0, r1, [sp]
   18c50:	9302      	str	r3, [sp, #8]
   18c52:	2200      	movs	r2, #0
   18c54:	210d      	movs	r1, #13
   18c56:	4620      	mov	r0, r4
   18c58:	f7fe fbae 	bl	173b8 <dw1000_write_reg>
    dw1000_mac_framefilter(inst, config->rx.frameFilter);
   18c5c:	8a29      	ldrh	r1, [r5, #16]
   18c5e:	4620      	mov	r0, r4
   18c60:	f7ff fd8c 	bl	1877c <dw1000_mac_framefilter>
    if (config->rxauto_enable)
   18c64:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   18c68:	f895 2020 	ldrb.w	r2, [r5, #32]
   18c6c:	f013 0f01 	tst.w	r3, #1
   18c70:	d033      	beq.n	18cda <dw1000_mac_config+0x312>
        assert(config->trxoff_enable);
   18c72:	f012 0320 	ands.w	r3, r2, #32
   18c76:	d130      	bne.n	18cda <dw1000_mac_config+0x312>
   18c78:	461a      	mov	r2, r3
   18c7a:	4619      	mov	r1, r3
   18c7c:	4618      	mov	r0, r3
   18c7e:	f7f0 f939 	bl	8ef4 <__assert_func>
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
   18c82:	2301      	movs	r3, #1
   18c84:	e6be      	b.n	18a04 <dw1000_mac_config+0x3c>
        inst->sys_cfg_reg &= (~SYS_CFG_RXM110K);
   18c86:	f020 607f 	bic.w	r0, r0, #267386880	; 0xff00000
   18c8a:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
   18c8e:	e6d0      	b.n	18a32 <dw1000_mac_config+0x6a>
        if(config->tx.preambleLength == DWT_PLEN_64){
   18c90:	7d6b      	ldrb	r3, [r5, #21]
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64, sizeof(uint16_t));
   18c92:	9702      	str	r7, [sp, #8]
        if(config->tx.preambleLength == DWT_PLEN_64){
   18c94:	2b04      	cmp	r3, #4
   18c96:	d10f      	bne.n	18cb8 <dw1000_mac_config+0x2f0>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64, sizeof(uint16_t));
   18c98:	f04f 0a10 	mov.w	sl, #16
   18c9c:	f04f 0b00 	mov.w	fp, #0
   18ca0:	e9cd ab00 	strd	sl, fp, [sp]
   18ca4:	2206      	movs	r2, #6
   18ca6:	2127      	movs	r1, #39	; 0x27
   18ca8:	4620      	mov	r0, r4
   18caa:	f7fe fb85 	bl	173b8 <dw1000_write_reg>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64, sizeof(uint16_t));
   18cae:	e9cd ab00 	strd	sl, fp, [sp]
   18cb2:	9702      	str	r7, [sp, #8]
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS, sizeof(uint16_t));
   18cb4:	2226      	movs	r2, #38	; 0x26
   18cb6:	e741      	b.n	18b3c <dw1000_mac_config+0x174>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8, sizeof(uint16_t));
   18cb8:	2300      	movs	r3, #0
   18cba:	2220      	movs	r2, #32
   18cbc:	e9cd 2300 	strd	r2, r3, [sp]
   18cc0:	2127      	movs	r1, #39	; 0x27
   18cc2:	2206      	movs	r2, #6
   18cc4:	4620      	mov	r0, r4
   18cc6:	f7fe fb77 	bl	173b8 <dw1000_write_reg>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS, sizeof(uint16_t));
   18cca:	2228      	movs	r2, #40	; 0x28
   18ccc:	2300      	movs	r3, #0
   18cce:	e9cd 2300 	strd	r2, r3, [sp]
   18cd2:	9702      	str	r7, [sp, #8]
   18cd4:	e7ee      	b.n	18cb4 <dw1000_mac_config+0x2ec>
    uint8_t useDWnsSFD = 0;
   18cd6:	4602      	mov	r2, r0
   18cd8:	e785      	b.n	18be6 <dw1000_mac_config+0x21e>
    if(config->dblbuffon_enabled)
   18cda:	06d3      	lsls	r3, r2, #27
   18cdc:	d503      	bpl.n	18ce6 <dw1000_mac_config+0x31e>
        dw1000_set_dblrxbuff(inst, true);
   18cde:	2101      	movs	r1, #1
   18ce0:	4620      	mov	r0, r4
   18ce2:	f7ff fe2b 	bl	1893c <dw1000_set_dblrxbuff>
}
   18ce6:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   18cea:	b007      	add	sp, #28
   18cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cf0:	2502a907 	.word	0x2502a907
   18cf4:	00000000 	.word	0x00000000
   18cf8:	0002361e 	.word	0x0002361e
   18cfc:	00023594 	.word	0x00023594
   18d00:	000235c4 	.word	0x000235c4
   18d04:	000235dc 	.word	0x000235dc
   18d08:	00023650 	.word	0x00023650
   18d0c:	00023660 	.word	0x00023660
   18d10:	00023652 	.word	0x00023652
   18d14:	000235bc 	.word	0x000235bc
   18d18:	0002359c 	.word	0x0002359c
   18d1c:	0002358c 	.word	0x0002358c
   18d20:	000235c0 	.word	0x000235c0

00018d24 <dw1000_read_carrier_integrator>:
{
   18d24:	b508      	push	{r3, lr}
    regval = dw1000_read_reg(inst, DRX_CONF_ID, DRX_CARRIER_INT_OFFSET, DRX_CARRIER_INT_LEN);
   18d26:	2228      	movs	r2, #40	; 0x28
   18d28:	2303      	movs	r3, #3
   18d2a:	2127      	movs	r1, #39	; 0x27
   18d2c:	f7fe faf2 	bl	17314 <dw1000_read_reg>
    if (regval & B20_SIGN_EXTEND_TEST) {
   18d30:	02c3      	lsls	r3, r0, #11
        regval |= B20_SIGN_EXTEND_MASK;
   18d32:	bf46      	itte	mi
   18d34:	ea6f 3000 	mvnmi.w	r0, r0, lsl #12
   18d38:	ea6f 3010 	mvnmi.w	r0, r0, lsr #12
        regval &= DRX_CARRIER_INT_MASK;
   18d3c:	f3c0 0014 	ubfxpl	r0, r0, #0, #21
}
   18d40:	4240      	negs	r0, r0
   18d42:	bd08      	pop	{r3, pc}
   18d44:	0000      	movs	r0, r0
	...

00018d48 <dw1000_calc_clock_offset_ratio>:
{
   18d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18d4c:	4603      	mov	r3, r0
   18d4e:	4608      	mov	r0, r1
    if (inst->uwb_dev.config.dataRate == DWT_BR_110K) {
   18d50:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
   18d54:	b96a      	cbnz	r2, 18d72 <dw1000_calc_clock_offset_ratio+0x2a>
        fom = DPL_FLOAT64_INIT(DWT_FREQ_OFFSET_MULTIPLIER_110KB);
   18d56:	a720      	add	r7, pc, #128	; (adr r7, 18dd8 <dw1000_calc_clock_offset_ratio+0x90>)
   18d58:	e9d7 6700 	ldrd	r6, r7, [r7]
    switch ( inst->uwb_dev.config.channel ) {
   18d5c:	f893 350c 	ldrb.w	r3, [r3, #1292]	; 0x50c
   18d60:	3b01      	subs	r3, #1
   18d62:	2b06      	cmp	r3, #6
   18d64:	d829      	bhi.n	18dba <dw1000_calc_clock_offset_ratio+0x72>
   18d66:	e8df f003 	tbb	[pc, r3]
   18d6a:	082e      	.short	0x082e
   18d6c:	28243232 	.word	0x28243232
   18d70:	24          	.byte	0x24
   18d71:	00          	.byte	0x00
    dpl_float64_t fom = DPL_FLOAT64_INIT(DWT_FREQ_OFFSET_MULTIPLIER);
   18d72:	a71b      	add	r7, pc, #108	; (adr r7, 18de0 <dw1000_calc_clock_offset_ratio+0x98>)
   18d74:	e9d7 6700 	ldrd	r6, r7, [r7]
   18d78:	e7f0      	b.n	18d5c <dw1000_calc_clock_offset_ratio+0x14>
    switch ( inst->uwb_dev.config.channel ) {
   18d7a:	a51b      	add	r5, pc, #108	; (adr r5, 18de8 <dw1000_calc_clock_offset_ratio+0xa0>)
   18d7c:	e9d5 4500 	ldrd	r4, r5, [r5]
    ccor = DPL_FLOAT64_MUL(DPL_FLOAT64_I32_TO_F64(integrator_val), DPL_FLOAT64_MUL(fom, hz_to_ppm));
   18d80:	f007 f834 	bl	1fdec <__aeabi_i2d>
   18d84:	4622      	mov	r2, r4
   18d86:	4680      	mov	r8, r0
   18d88:	4689      	mov	r9, r1
   18d8a:	462b      	mov	r3, r5
   18d8c:	4630      	mov	r0, r6
   18d8e:	4639      	mov	r1, r7
   18d90:	f007 f896 	bl	1fec0 <__aeabi_dmul>
   18d94:	4602      	mov	r2, r0
   18d96:	460b      	mov	r3, r1
   18d98:	4640      	mov	r0, r8
   18d9a:	4649      	mov	r1, r9
   18d9c:	f007 f890 	bl	1fec0 <__aeabi_dmul>
    ccor = DPL_FLOAT64_DIV(ccor, DPL_FLOAT64_INIT(1.0e6));
   18da0:	a313      	add	r3, pc, #76	; (adr r3, 18df0 <dw1000_calc_clock_offset_ratio+0xa8>)
   18da2:	e9d3 2300 	ldrd	r2, r3, [r3]
   18da6:	f007 f9b5 	bl	20114 <__aeabi_ddiv>
}
   18daa:	ec41 0b10 	vmov	d0, r0, r1
   18dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    case 5: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_5);break;
   18db2:	a511      	add	r5, pc, #68	; (adr r5, 18df8 <dw1000_calc_clock_offset_ratio+0xb0>)
   18db4:	e9d5 4500 	ldrd	r4, r5, [r5]
   18db8:	e7e2      	b.n	18d80 <dw1000_calc_clock_offset_ratio+0x38>
    default: assert(0);
   18dba:	2300      	movs	r3, #0
   18dbc:	461a      	mov	r2, r3
   18dbe:	4619      	mov	r1, r3
   18dc0:	4618      	mov	r0, r3
   18dc2:	f7f0 f897 	bl	8ef4 <__assert_func>
    case 1: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_1);break;
   18dc6:	a50e      	add	r5, pc, #56	; (adr r5, 18e00 <dw1000_calc_clock_offset_ratio+0xb8>)
   18dc8:	e9d5 4500 	ldrd	r4, r5, [r5]
   18dcc:	e7d8      	b.n	18d80 <dw1000_calc_clock_offset_ratio+0x38>
    case 3: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_3);break;
   18dce:	a50e      	add	r5, pc, #56	; (adr r5, 18e08 <dw1000_calc_clock_offset_ratio+0xc0>)
   18dd0:	e9d5 4500 	ldrd	r4, r5, [r5]
   18dd4:	e7d4      	b.n	18d80 <dw1000_calc_clock_offset_ratio+0x38>
   18dd6:	bf00      	nop
   18dd8:	00000000 	.word	0x00000000
   18ddc:	3fddc130 	.word	0x3fddc130
   18de0:	00000000 	.word	0x00000000
   18de4:	400dc130 	.word	0x400dc130
   18de8:	90690690 	.word	0x90690690
   18dec:	3f306906 	.word	0x3f306906
   18df0:	00000000 	.word	0x00000000
   18df4:	412e8480 	.word	0x412e8480
   18df8:	3b94f463 	.word	0x3b94f463
   18dfc:	3f24327e 	.word	0x3f24327e
   18e00:	12c12c13 	.word	0x12c12c13
   18e04:	3f32c12c 	.word	0x3f32c12c
   18e08:	7281d2c8 	.word	0x7281d2c8
   18e0c:	3f2d2c7d 	.word	0x3f2d2c7d

00018e10 <dw1000_read_time_tracking_offset>:
{
   18e10:	b508      	push	{r3, lr}
    regval = dw1000_read_reg(inst, RX_TTCKO_ID, 0, 3);
   18e12:	2200      	movs	r2, #0
   18e14:	2303      	movs	r3, #3
   18e16:	2114      	movs	r1, #20
   18e18:	f7fe fa7c 	bl	17314 <dw1000_read_reg>
    if (regval & B18_SIGN_EXTEND_TEST) {
   18e1c:	0343      	lsls	r3, r0, #13
        regval |= B18_SIGN_EXTEND_MASK;
   18e1e:	bf46      	itte	mi
   18e20:	ea6f 3080 	mvnmi.w	r0, r0, lsl #14
   18e24:	ea6f 3090 	mvnmi.w	r0, r0, lsr #14
        regval &= RX_TTCKO_RXTOFS_MASK;
   18e28:	f3c0 0012 	ubfxpl	r0, r0, #0, #19
}
   18e2c:	bd08      	pop	{r3, pc}

00018e2e <dw1000_calc_clock_offset_ratio_ttco>:
{
   18e2e:	b570      	push	{r4, r5, r6, lr}
    if (inst->uwb_dev.config.prf != DWT_PRF_16M) {
   18e30:	f890 350e 	ldrb.w	r3, [r0, #1294]	; 0x50e
    return DPL_FLOAT64_DIV(DPL_FLOAT64_I32_TO_F64(-ttcko), DPL_FLOAT64_I32_TO_F64(denom));
   18e34:	4248      	negs	r0, r1
        denom = 0x01FC0000;
   18e36:	2b01      	cmp	r3, #1
   18e38:	bf0c      	ite	eq
   18e3a:	f04f 76f8 	moveq.w	r6, #32505856	; 0x1f00000
   18e3e:	f04f 76fe 	movne.w	r6, #33292288	; 0x1fc0000
    return DPL_FLOAT64_DIV(DPL_FLOAT64_I32_TO_F64(-ttcko), DPL_FLOAT64_I32_TO_F64(denom));
   18e42:	f006 ffd3 	bl	1fdec <__aeabi_i2d>
   18e46:	4604      	mov	r4, r0
   18e48:	4630      	mov	r0, r6
   18e4a:	460d      	mov	r5, r1
   18e4c:	f006 ffce 	bl	1fdec <__aeabi_i2d>
   18e50:	4602      	mov	r2, r0
   18e52:	460b      	mov	r3, r1
   18e54:	4620      	mov	r0, r4
   18e56:	4629      	mov	r1, r5
   18e58:	f007 f95c 	bl	20114 <__aeabi_ddiv>
}
   18e5c:	ec41 0b10 	vmov	d0, r0, r1
   18e60:	bd70      	pop	{r4, r5, r6, pc}

00018e62 <dw1000_read_rxdiag>:
{
   18e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dw1000_read(inst, RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET, (uint8_t*)&diag->rx_time, sizeof(diag->rx_time));
   18e64:	2604      	movs	r6, #4
{
   18e66:	460c      	mov	r4, r1
    dw1000_read(inst, RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET, (uint8_t*)&diag->rx_time, sizeof(diag->rx_time));
   18e68:	1d8b      	adds	r3, r1, #6
   18e6a:	9600      	str	r6, [sp, #0]
   18e6c:	2205      	movs	r2, #5
   18e6e:	2115      	movs	r1, #21
{
   18e70:	4605      	mov	r5, r0
    dw1000_read(inst, RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET, (uint8_t*)&diag->rx_time, sizeof(diag->rx_time));
   18e72:	f7fe f9b1 	bl	171d8 <dw1000_read>
    dw1000_read(inst, RX_FQUAL_ID, 0, (uint8_t*)&diag->rx_fqual, sizeof(diag->rx_fqual));
   18e76:	2308      	movs	r3, #8
   18e78:	9300      	str	r3, [sp, #0]
   18e7a:	2200      	movs	r2, #0
   18e7c:	f104 030a 	add.w	r3, r4, #10
   18e80:	2112      	movs	r1, #18
   18e82:	4628      	mov	r0, r5
   18e84:	f7fe f9a8 	bl	171d8 <dw1000_read>
    diag->pacc_cnt =  (dw1000_read_reg(inst, RX_FINFO_ID, 0, sizeof(uint32_t)) & RX_FINFO_RXPACC_MASK) >> RX_FINFO_RXPACC_SHIFT;
   18e88:	4633      	mov	r3, r6
   18e8a:	2200      	movs	r2, #0
   18e8c:	4628      	mov	r0, r5
   18e8e:	2110      	movs	r1, #16
   18e90:	f7fe fa40 	bl	17314 <dw1000_read_reg>
   18e94:	0d00      	lsrs	r0, r0, #20
   18e96:	8260      	strh	r0, [r4, #18]
}
   18e98:	b002      	add	sp, #8
   18e9a:	bd70      	pop	{r4, r5, r6, pc}
   18e9c:	0000      	movs	r0, r0
	...

00018ea0 <dw1000_tasks_init>:
{
   18ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   18ea2:	4604      	mov	r4, r0
    return os_eventq_inited((struct os_eventq *) evq);
   18ea4:	303c      	adds	r0, #60	; 0x3c
   18ea6:	f7f0 fb0d 	bl	94c4 <os_eventq_inited>
    if (!dpl_eventq_inited(&inst->uwb_dev.eventq))
   18eaa:	b980      	cbnz	r0, 18ece <dw1000_tasks_init+0x2e>
        uwb_task_init(&inst->uwb_dev, dw1000_interrupt_ev_cb);
   18eac:	4916      	ldr	r1, [pc, #88]	; (18f08 <dw1000_tasks_init+0x68>)
   18eae:	4620      	mov	r0, r4
   18eb0:	f7ef fe44 	bl	8b3c <uwb_task_init>
        hal_gpio_irq_init(inst->irq_pin, dw1000_irq, inst, HAL_GPIO_TRIG_RISING, HAL_GPIO_PULL_DOWN);
   18eb4:	2302      	movs	r3, #2
   18eb6:	9300      	str	r3, [sp, #0]
   18eb8:	4914      	ldr	r1, [pc, #80]	; (18f0c <dw1000_tasks_init+0x6c>)
   18eba:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   18ebe:	2301      	movs	r3, #1
   18ec0:	4622      	mov	r2, r4
   18ec2:	f7ef ff93 	bl	8dec <hal_gpio_irq_init>
        hal_gpio_irq_enable(inst->irq_pin);
   18ec6:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   18eca:	f7ef ffd5 	bl	8e78 <hal_gpio_irq_enable>
    dw1000_phy_interrupt_mask(inst,          SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO   | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR, false);
   18ece:	4620      	mov	r0, r4
   18ed0:	490f      	ldr	r1, [pc, #60]	; (18f10 <dw1000_tasks_init+0x70>)
   18ed2:	2200      	movs	r2, #0
   18ed4:	f001 f80c 	bl	19ef0 <dw1000_phy_interrupt_mask>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_SLP2INIT | SYS_STATUS_CPLOCK| SYS_STATUS_RXDFR | SYS_STATUS_LDEERR | SYS_STATUS_TXFRB | SYS_STATUS_TXFRS | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_TXBERR, sizeof(uint32_t));
   18ed8:	2304      	movs	r3, #4
   18eda:	9302      	str	r3, [sp, #8]
   18edc:	a308      	add	r3, pc, #32	; (adr r3, 18f00 <dw1000_tasks_init+0x60>)
   18ede:	e9d3 2300 	ldrd	r2, r3, [r3]
   18ee2:	4620      	mov	r0, r4
   18ee4:	e9cd 2300 	strd	r2, r3, [sp]
   18ee8:	210f      	movs	r1, #15
   18eea:	2200      	movs	r2, #0
   18eec:	f7fe fa64 	bl	173b8 <dw1000_write_reg>
    dw1000_phy_interrupt_mask(inst,          SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO   | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR, true);
   18ef0:	4907      	ldr	r1, [pc, #28]	; (18f10 <dw1000_tasks_init+0x70>)
   18ef2:	2201      	movs	r2, #1
   18ef4:	4620      	mov	r0, r4
}
   18ef6:	b004      	add	sp, #16
   18ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dw1000_phy_interrupt_mask(inst,          SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO   | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR, true);
   18efc:	f000 bff8 	b.w	19ef0 <dw1000_phy_interrupt_mask>
   18f00:	34b7b092 	.word	0x34b7b092
   18f04:	00000000 	.word	0x00000000
   18f08:	00019131 	.word	0x00019131
   18f0c:	0001807f 	.word	0x0001807f
   18f10:	3437b092 	.word	0x3437b092

00018f14 <dw1000_mac_init>:
{
   18f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18f16:	4604      	mov	r4, r0
    dw1000_mac_config(inst, config);
   18f18:	f7ff fd56 	bl	189c8 <dw1000_mac_config>
    dw1000_tasks_init(inst);
   18f1c:	4620      	mov	r0, r4
   18f1e:	f7ff ffbf 	bl	18ea0 <dw1000_tasks_init>
        int rc = stats_init(
   18f22:	f204 55b4 	addw	r5, r4, #1460	; 0x5b4
   18f26:	220a      	movs	r2, #10
   18f28:	4b0b      	ldr	r3, [pc, #44]	; (18f58 <dw1000_mac_init+0x44>)
   18f2a:	9200      	str	r2, [sp, #0]
   18f2c:	2104      	movs	r1, #4
   18f2e:	4628      	mov	r0, r5
   18f30:	f7fb fa08 	bl	14344 <stats_init>
        assert(rc == 0);
   18f34:	b128      	cbz	r0, 18f42 <dw1000_mac_init+0x2e>
   18f36:	2300      	movs	r3, #0
   18f38:	461a      	mov	r2, r3
   18f3a:	4619      	mov	r1, r3
   18f3c:	4618      	mov	r0, r3
   18f3e:	f7ef ffd9 	bl	8ef4 <__assert_func>
        rc = stats_register("mac", STATS_HDR(inst->stat));
   18f42:	4806      	ldr	r0, [pc, #24]	; (18f5c <dw1000_mac_init+0x48>)
   18f44:	4629      	mov	r1, r5
   18f46:	f7fb fa7d 	bl	14444 <stats_register>
        assert(rc == 0);
   18f4a:	2800      	cmp	r0, #0
   18f4c:	d1f3      	bne.n	18f36 <dw1000_mac_init+0x22>
}
   18f4e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   18f52:	b003      	add	sp, #12
   18f54:	bd30      	pop	{r4, r5, pc}
   18f56:	bf00      	nop
   18f58:	000235e2 	.word	0x000235e2
   18f5c:	00023530 	.word	0x00023530

00018f60 <dw1000_ic_and_host_ptrs_equal>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return uint8_t 1 = host and ic pointers match, 0 otherwise
 */
uint8_t
dw1000_ic_and_host_ptrs_equal(dw1000_dev_instance_t * inst)
{
   18f60:	b508      	push	{r3, lr}
    uint8_t b = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t));
   18f62:	2203      	movs	r2, #3
   18f64:	2301      	movs	r3, #1
   18f66:	210f      	movs	r1, #15
   18f68:	f7fe f9d4 	bl	17314 <dw1000_read_reg>
    /* Check where the receiver is at, and if it's in the same buffer as the host */
    return (uint8_t)((b & (SYS_STATUS_ICRBP >> 24)) == ((b & (SYS_STATUS_HSRBP >> 24)) << 1));
   18f6c:	b2c0      	uxtb	r0, r0
   18f6e:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   18f72:	f080 0080 	eor.w	r0, r0, #128	; 0x80
}
   18f76:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   18f7a:	bd08      	pop	{r3, pc}

00018f7c <dw1000_calc_fppl>:
 * @return fppl on success, nan otherwise
 */
dpl_float32_t
dw1000_calc_fppl(struct _dw1000_dev_instance_t * inst,
                 struct _dw1000_dev_rxdiag_t * diag)
{
   18f7c:	b538      	push	{r3, r4, r5, lr}
   18f7e:	ed2d 8b02 	vpush	{d8}
    dpl_float32_t A, N, v, fppl;
    if (diag->pacc_cnt == 0 ||
   18f82:	8a4a      	ldrh	r2, [r1, #18]
   18f84:	b3ba      	cbz	r2, 18ff6 <dw1000_calc_fppl+0x7a>
        (!diag->fp_amp && !diag->fp_amp2 && !diag->fp_amp3)) {
   18f86:	890b      	ldrh	r3, [r1, #8]
   18f88:	898c      	ldrh	r4, [r1, #12]
   18f8a:	89c9      	ldrh	r1, [r1, #14]
   18f8c:	ea43 0504 	orr.w	r5, r3, r4
   18f90:	430d      	orrs	r5, r1
   18f92:	d030      	beq.n	18ff6 <dw1000_calc_fppl+0x7a>
        return DPL_FLOAT32_NAN();
    }
    A = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   18f94:	f890 050e 	ldrb.w	r0, [r0, #1294]	; 0x50e
   18f98:	eddf 7a18 	vldr	s15, [pc, #96]	; 18ffc <dw1000_calc_fppl+0x80>
   18f9c:	ed9f 8a18 	vldr	s16, [pc, #96]	; 19000 <dw1000_calc_fppl+0x84>
   18fa0:	2801      	cmp	r0, #1
   18fa2:	bf08      	it	eq
   18fa4:	eeb0 8a67 	vmoveq.f32	s16, s15
                        ui32_to_f32(diag->fp_amp2*diag->fp_amp2)),
                ui32_to_f32(diag->fp_amp3*diag->fp_amp3));
    v = f32_div(v, f32_mul(N, N));
    fppl = f32_sub(f32_mul(DPL_FLOAT32_INIT(10.0), f64_to_f32(log10_soft(f32_to_f64(v)))), A);
#else
    N = (float)(diag->pacc_cnt);
   18fa8:	ee07 2a90 	vmov	s15, r2
    v = (float)(diag->fp_amp*diag->fp_amp) +
   18fac:	435b      	muls	r3, r3
    N = (float)(diag->pacc_cnt);
   18fae:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
   18fb2:	ee07 3a90 	vmov	s15, r3
        (float)(diag->fp_amp2*diag->fp_amp2) +
   18fb6:	4364      	muls	r4, r4
    v = (float)(diag->fp_amp*diag->fp_amp) +
   18fb8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
        (float)(diag->fp_amp2*diag->fp_amp2) +
   18fbc:	ee07 4a90 	vmov	s15, r4
   18fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        (float)(diag->fp_amp3*diag->fp_amp3);
   18fc4:	fb01 f301 	mul.w	r3, r1, r1
    v = (float)(diag->fp_amp*diag->fp_amp) +
   18fc8:	ee36 7aa7 	vadd.f32	s14, s13, s15
        (float)(diag->fp_amp3*diag->fp_amp3);
   18fcc:	ee07 3a90 	vmov	s15, r3
   18fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    v /= N * N;
   18fd4:	ee20 0a00 	vmul.f32	s0, s0, s0
    v = (float)(diag->fp_amp*diag->fp_amp) +
   18fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
    fppl = 10.0f * log10f(v) - A;
   18fdc:	ee87 0a80 	vdiv.f32	s0, s15, s0
   18fe0:	f007 feb4 	bl	20d4c <log10f>
   18fe4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   18fe8:	ee90 8a07 	vfnms.f32	s16, s0, s14
#endif
    return fppl;
}
   18fec:	eeb0 0a48 	vmov.f32	s0, s16
   18ff0:	ecbd 8b02 	vpop	{d8}
   18ff4:	bd38      	pop	{r3, r4, r5, pc}
        return DPL_FLOAT32_NAN();
   18ff6:	ed9f 8a03 	vldr	s16, [pc, #12]	; 19004 <dw1000_calc_fppl+0x88>
   18ffa:	e7f7      	b.n	18fec <dw1000_calc_fppl+0x70>
   18ffc:	42e38a3d 	.word	0x42e38a3d
   19000:	42f37ae1 	.word	0x42f37ae1
   19004:	7fc00000 	.word	0x7fc00000

00019008 <dw1000_get_fppl>:
 * @return fppl on success, nan otherwise
 */
dpl_float32_t
dw1000_get_fppl(struct _dw1000_dev_instance_t * inst)
{
    if (!inst->uwb_dev.config.rxdiag_enable) {
   19008:	f890 352c 	ldrb.w	r3, [r0, #1324]	; 0x52c
   1900c:	065b      	lsls	r3, r3, #25
   1900e:	d503      	bpl.n	19018 <dw1000_get_fppl+0x10>
        return DPL_FLOAT32_NAN();
    }
    return dw1000_calc_fppl(inst, &inst->rxdiag);
   19010:	f200 519c 	addw	r1, r0, #1436	; 0x59c
   19014:	f7ff bfb2 	b.w	18f7c <dw1000_calc_fppl>
}
   19018:	ed9f 0a01 	vldr	s0, [pc, #4]	; 19020 <dw1000_get_fppl+0x18>
   1901c:	4770      	bx	lr
   1901e:	bf00      	nop
   19020:	7fc00000 	.word	0x7fc00000

00019024 <dw1000_calc_rssi>:
 * @return rssi on success, nan otherwise
 */
dpl_float32_t
dw1000_calc_rssi(struct _dw1000_dev_instance_t * inst,
                 struct _dw1000_dev_rxdiag_t * diag)
{
   19024:	b508      	push	{r3, lr}
   19026:	ed2d 8b02 	vpush	{d8}
    dpl_float32_t rssi, A, B;
    uint32_t pacc_cnt = diag->pacc_cnt;
    uint32_t cir_pwr = diag->cir_pwr;
   1902a:	8a0b      	ldrh	r3, [r1, #16]
    if (cir_pwr == 0 || pacc_cnt == 0) {
   1902c:	b1f3      	cbz	r3, 1906c <dw1000_calc_rssi+0x48>
    uint32_t pacc_cnt = diag->pacc_cnt;
   1902e:	8a4a      	ldrh	r2, [r1, #18]
    if (cir_pwr == 0 || pacc_cnt == 0) {
   19030:	b1e2      	cbz	r2, 1906c <dw1000_calc_rssi+0x48>
        return DPL_FLOAT32_NAN();
    }
    B = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   19032:	f890 150e 	ldrb.w	r1, [r0, #1294]	; 0x50e
   19036:	eddf 7a0f 	vldr	s15, [pc, #60]	; 19074 <dw1000_calc_rssi+0x50>
   1903a:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 19078 <dw1000_calc_rssi+0x54>
#ifndef __KERNEL__
    A = cir_pwr * 0x20000/(pacc_cnt * pacc_cnt);
   1903e:	4352      	muls	r2, r2
   19040:	045b      	lsls	r3, r3, #17
   19042:	fbb3 f3f2 	udiv	r3, r3, r2
   19046:	ee00 3a10 	vmov	s0, r3
    B = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   1904a:	2901      	cmp	r1, #1
    rssi = 10.0f * log10f(A) - B;
   1904c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    B = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   19050:	bf08      	it	eq
   19052:	eeb0 8a67 	vmoveq.f32	s16, s15
    rssi = 10.0f * log10f(A) - B;
   19056:	f007 fe79 	bl	20d4c <log10f>
   1905a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   1905e:	ee90 8a07 	vfnms.f32	s16, s0, s14
    A = f32_div(A, ui32_to_f32(pacc_cnt * pacc_cnt));
    A = f32_mul(i32_to_f32(10), f64_to_f32(log10_soft(f32_to_f64(A))));
    rssi = f32_sub(A, B);
#endif
    return rssi;
}
   19062:	eeb0 0a48 	vmov.f32	s0, s16
   19066:	ecbd 8b02 	vpop	{d8}
   1906a:	bd08      	pop	{r3, pc}
        return DPL_FLOAT32_NAN();
   1906c:	ed9f 8a03 	vldr	s16, [pc, #12]	; 1907c <dw1000_calc_rssi+0x58>
   19070:	e7f7      	b.n	19062 <dw1000_calc_rssi+0x3e>
   19072:	bf00      	nop
   19074:	42e38a3d 	.word	0x42e38a3d
   19078:	42f37ae1 	.word	0x42f37ae1
   1907c:	7fc00000 	.word	0x7fc00000

00019080 <dw1000_get_rssi>:
 * @return rssi on success, nan otherwise
 */
dpl_float32_t
dw1000_get_rssi(struct _dw1000_dev_instance_t * inst)
{
    if (!inst->uwb_dev.config.rxdiag_enable) {
   19080:	f890 352c 	ldrb.w	r3, [r0, #1324]	; 0x52c
   19084:	065b      	lsls	r3, r3, #25
   19086:	d503      	bpl.n	19090 <dw1000_get_rssi+0x10>
        return DPL_FLOAT32_NAN();
    }
    return dw1000_calc_rssi(inst, &inst->rxdiag);
   19088:	f200 519c 	addw	r1, r0, #1436	; 0x59c
   1908c:	f7ff bfca 	b.w	19024 <dw1000_calc_rssi>
}
   19090:	ed9f 0a01 	vldr	s0, [pc, #4]	; 19098 <dw1000_get_rssi+0x18>
   19094:	4770      	bx	lr
   19096:	bf00      	nop
   19098:	7fc00000 	.word	0x7fc00000

0001909c <dw1000_estimate_los>:
    if (f32_lt(DPL_FLOAT32_INIT(10.0f), d)) return DPL_FLOAT32_INIT(0.0f);
    /* 1.0 - (d-6)/4.0; */
    los = f32_sub(DPL_FLOAT32_INIT(1.0f),
        f32_div(f32_sub(d, DPL_FLOAT32_INIT(6.0f)), DPL_FLOAT32_INIT(4.0f)));
#else
    d = DPL_FLOAT32_FABS(DPL_FLOAT32_SUB(rssi, fppl));
   1909c:	ee70 0a60 	vsub.f32	s1, s0, s1
    /* Less than 6dB difference - LOS */
    if (d < DPL_FLOAT32_INIT(6.0f))  return DPL_FLOAT32_INIT(1.0f);
   190a0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    d = DPL_FLOAT32_FABS(DPL_FLOAT32_SUB(rssi, fppl));
   190a4:	eef0 0ae0 	vabs.f32	s1, s1
    if (d < DPL_FLOAT32_INIT(6.0f))  return DPL_FLOAT32_INIT(1.0f);
   190a8:	eef4 0ac0 	vcmpe.f32	s1, s0
   190ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   190b0:	d40f      	bmi.n	190d2 <dw1000_estimate_los+0x36>
    /* More than 10dB difference - NLOS */
    if (d > DPL_FLOAT32_INIT(10.0f)) return DPL_FLOAT32_INIT(0.0f);
   190b2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   190b6:	eef4 0ae7 	vcmpe.f32	s1, s15
   190ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   190be:	dc0b      	bgt.n	190d8 <dw1000_estimate_los+0x3c>
    /* 1.0 - (d-6)/4.0; */
    los = DPL_FLOAT32_SUB(DPL_FLOAT32_INIT(1.0f),
   190c0:	ee70 0ac0 	vsub.f32	s1, s1, s0
   190c4:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
   190c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   190cc:	eea0 0ae7 	vfms.f32	s0, s1, s15
               DPL_FLOAT32_DIV(d - DPL_FLOAT32_INIT(6.0f),
                               DPL_FLOAT32_INIT(4.0f))
        );
#endif
    return los;
   190d0:	4770      	bx	lr
    if (d < DPL_FLOAT32_INIT(6.0f))  return DPL_FLOAT32_INIT(1.0f);
   190d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   190d6:	4770      	bx	lr
    if (d > DPL_FLOAT32_INIT(10.0f)) return DPL_FLOAT32_INIT(0.0f);
   190d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 190e0 <dw1000_estimate_los+0x44>
}
   190dc:	4770      	bx	lr
   190de:	bf00      	nop
   190e0:	00000000 	.word	0x00000000

000190e4 <dw1000_read_systime>:
 * API to read system time.
 *
 * @param inst  Pointer to _dw1000_dev_instance_t.
 * @return time
 */
inline uint64_t dw1000_read_systime(struct _dw1000_dev_instance_t * inst){
   190e4:	b508      	push	{r3, lr}
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
   190e6:	2200      	movs	r2, #0
   190e8:	2305      	movs	r3, #5
   190ea:	2106      	movs	r1, #6
   190ec:	f7fe f912 	bl	17314 <dw1000_read_reg>
    return time;
}
   190f0:	b2c9      	uxtb	r1, r1
   190f2:	bd08      	pop	{r3, pc}

000190f4 <dw1000_read_systime_lo>:
 *
 * @param inst  Pointer to _dw1000_dev_instance_t.
 *
 * @return time
 */
inline uint32_t dw1000_read_systime_lo(struct _dw1000_dev_instance_t * inst){
   190f4:	b508      	push	{r3, lr}
    uint32_t time = (uint32_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, sizeof(uint32_t));
   190f6:	2200      	movs	r2, #0
   190f8:	2304      	movs	r3, #4
   190fa:	2106      	movs	r1, #6
   190fc:	f7fe f90a 	bl	17314 <dw1000_read_reg>
    return time;
}
   19100:	bd08      	pop	{r3, pc}

00019102 <dw1000_read_rxtime>:
 * @param inst  Pointer to _dw1000_dev_instance_t.
 *
 * @return time
 */

inline uint64_t dw1000_read_rxtime(struct _dw1000_dev_instance_t * inst){
   19102:	b508      	push	{r3, lr}
    uint64_t time = (uint64_t)  dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   19104:	2200      	movs	r2, #0
   19106:	2305      	movs	r3, #5
   19108:	2115      	movs	r1, #21
   1910a:	f7fe f903 	bl	17314 <dw1000_read_reg>
    return time;
}
   1910e:	b2c9      	uxtb	r1, r1
   19110:	bd08      	pop	{r3, pc}

00019112 <dw1000_read_rxtime_lo>:
 *
 * @param inst  Pointer to _dw1000_dev_instance_t.
 *
 * @return time
 */
inline uint32_t dw1000_read_rxtime_lo(struct _dw1000_dev_instance_t * inst){
   19112:	b508      	push	{r3, lr}
    uint64_t time = (uint32_t) dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, sizeof(uint32_t));
   19114:	2200      	movs	r2, #0
   19116:	2304      	movs	r3, #4
   19118:	2115      	movs	r1, #21
   1911a:	f7fe f8fb 	bl	17314 <dw1000_read_reg>
    return time;
}
   1911e:	bd08      	pop	{r3, pc}

00019120 <dw1000_read_txtime>:
 * @param inst  Pointer to _dw1000_dev_instance_t.
 *
 * @return time
 *
 */
inline uint64_t dw1000_read_txtime(struct _dw1000_dev_instance_t * inst){
   19120:	b508      	push	{r3, lr}
    uint64_t time = (uint64_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   19122:	2200      	movs	r2, #0
   19124:	2305      	movs	r3, #5
   19126:	2117      	movs	r1, #23
   19128:	f7fe f8f4 	bl	17314 <dw1000_read_reg>
    return time;
}
   1912c:	b2c9      	uxtb	r1, r1
   1912e:	bd08      	pop	{r3, pc}

00019130 <dw1000_interrupt_ev_cb>:
{
   19130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return ev->ev.ev_arg;
   19134:	6884      	ldr	r4, [r0, #8]
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   19136:	f104 0634 	add.w	r6, r4, #52	; 0x34
   1913a:	b085      	sub	sp, #20
   1913c:	4605      	mov	r5, r0
   1913e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19142:	4630      	mov	r0, r6
   19144:	f7f0 fda8 	bl	9c98 <os_sem_pend>
    if (err != DPL_OK) {
   19148:	4602      	mov	r2, r0
   1914a:	b1c8      	cbz	r0, 19180 <dw1000_interrupt_ev_cb+0x50>
        inst->uwb_dev.status.sem_error = 1;
   1914c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   19150:	f043 0304 	orr.w	r3, r3, #4
   19154:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    if (hal_gpio_read(inst->irq_pin) && !dpl_event_is_queued(ev)) {
   19158:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   1915c:	f7ef fe28 	bl	8db0 <hal_gpio_read>
   19160:	2800      	cmp	r0, #0
   19162:	f000 83db 	beq.w	1991c <dw1000_interrupt_ev_cb+0x7ec>
   19166:	782b      	ldrb	r3, [r5, #0]
   19168:	2b00      	cmp	r3, #0
   1916a:	f040 83d7 	bne.w	1991c <dw1000_interrupt_ev_cb+0x7ec>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   1916e:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   19172:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   19176:	b005      	add	sp, #20
   19178:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1917c:	f7f0 b9a7 	b.w	94ce <os_eventq_put>
        inst->sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 0, sizeof(uint32_t));
   19180:	2304      	movs	r3, #4
   19182:	210f      	movs	r1, #15
   19184:	4620      	mov	r0, r4
   19186:	f7fe f8c5 	bl	17314 <dw1000_read_reg>
        if (!(inst->sys_status & (SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR))) {
   1918a:	4b53      	ldr	r3, [pc, #332]	; (192d8 <dw1000_interrupt_ev_cb+0x1a8>)
        inst->sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 0, sizeof(uint32_t));
   1918c:	f8c4 058c 	str.w	r0, [r4, #1420]	; 0x58c
        if (!(inst->sys_status & (SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR))) {
   19190:	4003      	ands	r3, r0
   19192:	b93b      	cbnz	r3, 191a4 <dw1000_interrupt_ev_cb+0x74>
            inst->sys_status_hi = dw1000_read_reg(inst, SYS_STATUS_ID, 4, sizeof(uint8_t));
   19194:	2301      	movs	r3, #1
   19196:	2204      	movs	r2, #4
   19198:	210f      	movs	r1, #15
   1919a:	4620      	mov	r0, r4
   1919c:	f7fe f8ba 	bl	17314 <dw1000_read_reg>
   191a0:	f884 0590 	strb.w	r0, [r4, #1424]	; 0x590
    inst->uwb_dev.status.rx_error = (inst->sys_status & SYS_STATUS_ALL_RX_ERR) !=0;
   191a4:	f8d4 258c 	ldr.w	r2, [r4, #1420]	; 0x58c
    inst->uwb_dev.status.rx_error |= (inst->sys_status_hi & (SYS_STATUS_RXRSCS>>32)) != 0;
   191a8:	f894 1590 	ldrb.w	r1, [r4, #1424]	; 0x590
    inst->uwb_dev.status.rx_error = (inst->sys_status & SYS_STATUS_ALL_RX_ERR) !=0;
   191ac:	4f4b      	ldr	r7, [pc, #300]	; (192dc <dw1000_interrupt_ev_cb+0x1ac>)
    inst->uwb_dev.status.rx_error |= (inst->sys_status_hi & (SYS_STATUS_RXRSCS>>32)) != 0;
   191ae:	f001 0301 	and.w	r3, r1, #1
    inst->uwb_dev.status.rx_error = (inst->sys_status & SYS_STATUS_ALL_RX_ERR) !=0;
   191b2:	4017      	ands	r7, r2
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
   191b4:	2f00      	cmp	r7, #0
   191b6:	bf0c      	ite	eq
   191b8:	4618      	moveq	r0, r3
   191ba:	f043 0001 	orrne.w	r0, r3, #1
   191be:	f3c2 7300 	ubfx	r3, r2, #28, #1
    inst->uwb_dev.status.rx_timeout_error = (inst->sys_status & SYS_STATUS_ALL_RX_TO) !=0;
   191c2:	f412 1f08 	tst.w	r2, #2228224	; 0x220000
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
   191c6:	ea4f 1343 	mov.w	r3, r3, lsl #5
   191ca:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
    inst->uwb_dev.status.rx_timeout_error = (inst->sys_status & SYS_STATUS_ALL_RX_TO) !=0;
   191ce:	bf14      	ite	ne
   191d0:	2001      	movne	r0, #1
   191d2:	2000      	moveq	r0, #0
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
   191d4:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
    inst->uwb_dev.status.rx_autoframefilt_rej = (inst->sys_status & SYS_STATUS_AFFREJ) !=0;
   191d8:	f3c2 7040 	ubfx	r0, r2, #29, #1
    inst->uwb_dev.status.rx_prej = (inst->sys_status_hi & (SYS_STATUS_RXPREJ>>32)) != 0;
   191dc:	f3c1 0140 	ubfx	r1, r1, #1, #1
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
   191e0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   191e4:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
    inst->uwb_dev.status.lde_error = (inst->sys_status & SYS_STATUS_LDEDONE) == 0;
   191e8:	f482 6180 	eor.w	r1, r2, #1024	; 0x400
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
   191ec:	f401 6180 	and.w	r1, r1, #1024	; 0x400
   191f0:	430b      	orrs	r3, r1
    inst->uwb_dev.status.autoack_triggered = (inst->sys_status & SYS_STATUS_AAT) != 0;
   191f2:	f3c2 01c0 	ubfx	r1, r2, #3, #1
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
   191f6:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
    inst->uwb_dev.status.overrun_error = (inst->sys_status & SYS_STATUS_RXOVRR) != 0;
   191fa:	f3c2 5100 	ubfx	r1, r2, #20, #1
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
   191fe:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
   19202:	f8d4 1508 	ldr.w	r1, [r4, #1288]	; 0x508
   19206:	f421 2188 	bic.w	r1, r1, #278528	; 0x44000
   1920a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
   1920e:	430b      	orrs	r3, r1
   19210:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    if(dpl_sem_get_count(&inst->tx_sem) == 0 && !(
   19214:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
   19218:	b973      	cbnz	r3, 19238 <dw1000_interrupt_ev_cb+0x108>
   1921a:	f002 0290 	and.w	r2, r2, #144	; 0x90
   1921e:	2a10      	cmp	r2, #16
   19220:	d00a      	beq.n	19238 <dw1000_interrupt_ev_cb+0x108>
    return (dpl_error_t)os_sem_release(&sem->sem);
   19222:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   19226:	f7f0 fd05 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
   1922a:	b128      	cbz	r0, 19238 <dw1000_interrupt_ev_cb+0x108>
   1922c:	2300      	movs	r3, #0
   1922e:	461a      	mov	r2, r3
   19230:	4619      	mov	r1, r3
   19232:	4618      	mov	r0, r3
   19234:	f7ef fe5e 	bl	8ef4 <__assert_func>
    if((inst->sys_status & SYS_STATUS_RXFCG)){
   19238:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1923c:	045a      	lsls	r2, r3, #17
   1923e:	d41a      	bmi.n	19276 <dw1000_interrupt_ev_cb+0x146>
    if(inst->sys_status & SYS_STATUS_TXFRB) {
   19240:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   19244:	06db      	lsls	r3, r3, #27
   19246:	f140 81bf 	bpl.w	195c8 <dw1000_interrupt_ev_cb+0x498>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_TXFRB, sizeof(uint8_t)); // Clear TX Frame Begins
   1924a:	2301      	movs	r3, #1
   1924c:	9302      	str	r3, [sp, #8]
   1924e:	2210      	movs	r2, #16
   19250:	2300      	movs	r3, #0
   19252:	e9cd 2300 	strd	r2, r3, [sp]
   19256:	210f      	movs	r1, #15
   19258:	2200      	movs	r2, #0
   1925a:	4620      	mov	r0, r4
   1925c:	f7fe f8ac 	bl	173b8 <dw1000_write_reg>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   19260:	f8d4 7530 	ldr.w	r7, [r4, #1328]	; 0x530
   19264:	2f00      	cmp	r7, #0
   19266:	f000 81af 	beq.w	195c8 <dw1000_interrupt_ev_cb+0x498>
            if (cbs!=NULL && cbs->tx_begins_cb)
   1926a:	68bb      	ldr	r3, [r7, #8]
   1926c:	2b00      	cmp	r3, #0
   1926e:	f040 81a5 	bne.w	195bc <dw1000_interrupt_ev_cb+0x48c>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   19272:	6bbf      	ldr	r7, [r7, #56]	; 0x38
   19274:	e7f6      	b.n	19264 <dw1000_interrupt_ev_cb+0x134>
        MAC_STATS_INC(DFR_cnt);
   19276:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
   1927a:	3301      	adds	r3, #1
   1927c:	f8c4 35d0 	str.w	r3, [r4, #1488]	; 0x5d0
        if (inst->uwb_dev.status.overrun_error){
   19280:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   19284:	075f      	lsls	r7, r3, #29
   19286:	d52d      	bpl.n	192e4 <dw1000_interrupt_ev_cb+0x1b4>
            MAC_STATS_INC(ROV_err);
   19288:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
            dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_RXOVRR |SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR), sizeof(uint32_t));
   1928c:	4a14      	ldr	r2, [pc, #80]	; (192e0 <dw1000_interrupt_ev_cb+0x1b0>)
            MAC_STATS_INC(ROV_err);
   1928e:	3301      	adds	r3, #1
   19290:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
            dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_RXOVRR |SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR), sizeof(uint32_t));
   19294:	2304      	movs	r3, #4
   19296:	9302      	str	r3, [sp, #8]
   19298:	2300      	movs	r3, #0
   1929a:	e9cd 2300 	strd	r2, r3, [sp]
   1929e:	210f      	movs	r1, #15
   192a0:	2200      	movs	r2, #0
   192a2:	4620      	mov	r0, r4
   192a4:	f7fe f888 	bl	173b8 <dw1000_write_reg>
            dw1000_phy_forcetrxoff(inst);
   192a8:	4620      	mov	r0, r4
   192aa:	f000 fda5 	bl	19df8 <dw1000_phy_forcetrxoff>
            dw1000_phy_rx_reset(inst);
   192ae:	4620      	mov	r0, r4
   192b0:	f000 fd6d 	bl	19d8e <dw1000_phy_rx_reset>
            dw1000_sync_rxbufptrs(inst);
   192b4:	4620      	mov	r0, r4
   192b6:	f7ff f9a5 	bl	18604 <dw1000_sync_rxbufptrs>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   192ba:	2001      	movs	r0, #1
   192bc:	2100      	movs	r1, #0
   192be:	2201      	movs	r2, #1
   192c0:	e9cd 0100 	strd	r0, r1, [sp]
   192c4:	9202      	str	r2, [sp, #8]
   192c6:	210d      	movs	r1, #13
   192c8:	4620      	mov	r0, r4
   192ca:	f7fe f875 	bl	173b8 <dw1000_write_reg>
   192ce:	4630      	mov	r0, r6
   192d0:	f7f0 fcb0 	bl	9c34 <os_sem_release>
   192d4:	e740      	b.n	19158 <dw1000_interrupt_ev_cb+0x28>
   192d6:	bf00      	nop
   192d8:	3437b092 	.word	0x3437b092
   192dc:	24119000 	.word	0x24119000
   192e0:	0010e400 	.word	0x0010e400
        if (inst->uwb_dev.config.rxauto_enable == 0 && inst->uwb_dev.config.dblbuffon_enabled) {
   192e4:	f8b4 352c 	ldrh.w	r3, [r4, #1324]	; 0x52c
   192e8:	f403 7388 	and.w	r3, r3, #272	; 0x110
   192ec:	2b10      	cmp	r3, #16
   192ee:	d11d      	bne.n	1932c <dw1000_interrupt_ev_cb+0x1fc>
            if (inst->control.rxauto_disable == false && !inst->uwb_dev.status.autoack_triggered) {
   192f0:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   192f4:	0758      	lsls	r0, r3, #29
   192f6:	d413      	bmi.n	19320 <dw1000_interrupt_ev_cb+0x1f0>
   192f8:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   192fc:	0659      	lsls	r1, r3, #25
   192fe:	d40f      	bmi.n	19320 <dw1000_interrupt_ev_cb+0x1f0>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   19300:	2201      	movs	r2, #1
   19302:	2001      	movs	r0, #1
   19304:	2100      	movs	r1, #0
   19306:	e9cd 0100 	strd	r0, r1, [sp]
   1930a:	9202      	str	r2, [sp, #8]
   1930c:	210d      	movs	r1, #13
   1930e:	4620      	mov	r0, r4
   19310:	f7fe f852 	bl	173b8 <dw1000_write_reg>
                inst->uwb_dev.status.rx_restarted = 1;
   19314:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   19318:	f043 0308 	orr.w	r3, r3, #8
   1931c:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
            inst->control.rxauto_disable = false;
   19320:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   19324:	f36f 0382 	bfc	r3, #2, #1
   19328:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
        finfo = dw1000_read_reg(inst, RX_FINFO_ID, RX_FINFO_OFFSET, sizeof(uint16_t));
   1932c:	2302      	movs	r3, #2
   1932e:	2200      	movs	r2, #0
   19330:	2110      	movs	r1, #16
   19332:	4620      	mov	r0, r4
   19334:	f7fd ffee 	bl	17314 <dw1000_read_reg>
        inst->uwb_dev.frame_len = (finfo & RX_FINFO_RXFL_MASK_1023);
   19338:	f3c0 0009 	ubfx	r0, r0, #0, #10
        if (inst->uwb_dev.frame_len) inst->uwb_dev.frame_len -= 2;
   1933c:	2800      	cmp	r0, #0
   1933e:	f040 80d5 	bne.w	194ec <dw1000_interrupt_ev_cb+0x3bc>
   19342:	f8a4 04e2 	strh.w	r0, [r4, #1250]	; 0x4e2
        dw1000_read_rx(inst, inst->uwb_dev.rxbuf, 0,
   19346:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
   1934a:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   1934e:	f8d4 14fc 	ldr.w	r1, [r4, #1276]	; 0x4fc
   19352:	4293      	cmp	r3, r2
   19354:	bf28      	it	cs
   19356:	4613      	movcs	r3, r2
   19358:	4620      	mov	r0, r4
   1935a:	2200      	movs	r2, #0
   1935c:	f7fe fea1 	bl	180a2 <dw1000_read_rx>
        inst->uwb_dev.fctrl = ((uint16_t)inst->uwb_dev.rxbuf[1]<<8) | inst->uwb_dev.rxbuf[0];
   19360:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
   19364:	881b      	ldrh	r3, [r3, #0]
   19366:	f8a4 34e0 	strh.w	r3, [r4, #1248]	; 0x4e0
        if (inst->uwb_dev.status.lde_error) // retest lde_error condition
   1936a:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1936e:	075a      	lsls	r2, r3, #29
   19370:	d517      	bpl.n	193a2 <dw1000_interrupt_ev_cb+0x272>
            inst->uwb_dev.status.lde_error = (dw1000_read_reg(inst, SYS_STATUS_ID, 1, sizeof(uint8_t))  & (SYS_STATUS_LDEDONE >> 8)) == 0;
   19372:	2301      	movs	r3, #1
   19374:	461a      	mov	r2, r3
   19376:	210f      	movs	r1, #15
   19378:	4620      	mov	r0, r4
   1937a:	f7fd ffcb 	bl	17314 <dw1000_read_reg>
   1937e:	0880      	lsrs	r0, r0, #2
   19380:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   19384:	ea40 7081 	orr.w	r0, r0, r1, lsl #30
   19388:	f080 0001 	eor.w	r0, r0, #1
   1938c:	f360 0382 	bfi	r3, r0, #2, #1
   19390:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
        if (inst->uwb_dev.status.lde_error) // LDE error or LDE late
   19394:	075b      	lsls	r3, r3, #29
            MAC_STATS_INC(LDE_err);
   19396:	bf42      	ittt	mi
   19398:	f8d4 35e0 	ldrmi.w	r3, [r4, #1504]	; 0x5e0
   1939c:	3301      	addmi	r3, #1
   1939e:	f8c4 35e0 	strmi.w	r3, [r4, #1504]	; 0x5e0
        inst->uwb_dev.rxtimestamp = dw1000_read_rxtime(inst);
   193a2:	4620      	mov	r0, r4
   193a4:	f7ff fead 	bl	19102 <dw1000_read_rxtime>
        if (inst->control.abs_timeout) {
   193a8:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
        inst->uwb_dev.rxtimestamp = dw1000_read_rxtime(inst);
   193ac:	f8c4 04e8 	str.w	r0, [r4, #1256]	; 0x4e8
        if (inst->control.abs_timeout) {
   193b0:	071f      	lsls	r7, r3, #28
        inst->uwb_dev.rxtimestamp = dw1000_read_rxtime(inst);
   193b2:	4602      	mov	r2, r0
   193b4:	f8c4 14ec 	str.w	r1, [r4, #1260]	; 0x4ec
        if (inst->control.abs_timeout) {
   193b8:	d503      	bpl.n	193c2 <dw1000_interrupt_ev_cb+0x292>
            update_rx_window_timeout(inst, inst->uwb_dev.rxtimestamp);
   193ba:	460b      	mov	r3, r1
   193bc:	4620      	mov	r0, r4
   193be:	f7ff f876 	bl	184ae <update_rx_window_timeout.isra.0>
        if (inst->uwb_dev.status.autoack_triggered) {
   193c2:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   193c6:	0658      	lsls	r0, r3, #25
   193c8:	d51c      	bpl.n	19404 <dw1000_interrupt_ev_cb+0x2d4>
            if ((inst->uwb_dev.fctrl & UWB_FCTRL_ACK_REQUESTED) == 0){
   193ca:	f8b4 74e0 	ldrh.w	r7, [r4, #1248]	; 0x4e0
   193ce:	2201      	movs	r2, #1
   193d0:	f017 0720 	ands.w	r7, r7, #32
                dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_AAT, sizeof(uint8_t));
   193d4:	9202      	str	r2, [sp, #8]
            if ((inst->uwb_dev.fctrl & UWB_FCTRL_ACK_REQUESTED) == 0){
   193d6:	f040 808b 	bne.w	194f0 <dw1000_interrupt_ev_cb+0x3c0>
                dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_AAT, sizeof(uint8_t));
   193da:	2300      	movs	r3, #0
   193dc:	2208      	movs	r2, #8
   193de:	e9cd 2300 	strd	r2, r3, [sp]
   193e2:	210f      	movs	r1, #15
   193e4:	463a      	mov	r2, r7
   193e6:	4620      	mov	r0, r4
   193e8:	f7fd ffe6 	bl	173b8 <dw1000_write_reg>
                inst->sys_status &= ~SYS_STATUS_AAT;
   193ec:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   193f0:	f023 0308 	bic.w	r3, r3, #8
   193f4:	f8c4 358c 	str.w	r3, [r4, #1420]	; 0x58c
                inst->uwb_dev.status.autoack_triggered = 0;
   193f8:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   193fc:	f367 1386 	bfi	r3, r7, #6, #1
   19400:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
        if(inst->uwb_dev.config.rxdiag_enable)
   19404:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   19408:	0659      	lsls	r1, r3, #25
   1940a:	d504      	bpl.n	19416 <dw1000_interrupt_ev_cb+0x2e6>
            dw1000_read_rxdiag(inst, &inst->rxdiag);
   1940c:	f204 519c 	addw	r1, r4, #1436	; 0x59c
   19410:	4620      	mov	r0, r4
   19412:	f7ff fd26 	bl	18e62 <dw1000_read_rxdiag>
        if (inst->uwb_dev.config.dblbuffon_enabled) {
   19416:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   1941a:	f013 0710 	ands.w	r7, r3, #16
   1941e:	f000 80a0 	beq.w	19562 <dw1000_interrupt_ev_cb+0x432>
            if (inst->uwb_dev.config.rxttcko_enable) {
   19422:	061a      	lsls	r2, r3, #24
   19424:	d504      	bpl.n	19430 <dw1000_interrupt_ev_cb+0x300>
                inst->uwb_dev.rxttcko = dw1000_read_time_tracking_offset(inst);
   19426:	4620      	mov	r0, r4
   19428:	f7ff fcf2 	bl	18e10 <dw1000_read_time_tracking_offset>
   1942c:	f8c4 04f4 	str.w	r0, [r4, #1268]	; 0x4f4
    uint8_t ov = dw1000_read_reg(inst, SYS_STATUS_ID, 2, sizeof(uint8_t)) & (SYS_STATUS_RXOVRR >> 16);
   19430:	2301      	movs	r3, #1
   19432:	2202      	movs	r2, #2
   19434:	210f      	movs	r1, #15
   19436:	4620      	mov	r0, r4
   19438:	f7fd ff6c 	bl	17314 <dw1000_read_reg>
            inst->uwb_dev.status.overrun_error = dw1000_checkoverrun(inst);
   1943c:	f894 750a 	ldrb.w	r7, [r4, #1290]	; 0x50a
    return (ov!=0);
   19440:	f3c0 1000 	ubfx	r0, r0, #4, #1
            inst->uwb_dev.status.overrun_error = dw1000_checkoverrun(inst);
   19444:	f360 0782 	bfi	r7, r0, #2, #1
   19448:	f884 750a 	strb.w	r7, [r4, #1290]	; 0x50a
            if (inst->uwb_dev.status.overrun_error == 0) {
   1944c:	f017 0704 	ands.w	r7, r7, #4
   19450:	d166      	bne.n	19520 <dw1000_interrupt_ev_cb+0x3f0>
                if (inst->uwb_dev.config.rxauto_enable) {
   19452:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
   19456:	07db      	lsls	r3, r3, #31
   19458:	d531      	bpl.n	194be <dw1000_interrupt_ev_cb+0x38e>
                    if (dw1000_ic_and_host_ptrs_equal(inst)) {
   1945a:	4620      	mov	r0, r4
   1945c:	f7ff fd80 	bl	18f60 <dw1000_ic_and_host_ptrs_equal>
   19460:	2800      	cmp	r0, #0
   19462:	d052      	beq.n	1950a <dw1000_interrupt_ev_cb+0x3da>
                        uint8_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 1 , sizeof(uint8_t));
   19464:	2301      	movs	r3, #1
   19466:	461a      	mov	r2, r3
   19468:	210e      	movs	r1, #14
   1946a:	4620      	mov	r0, r4
   1946c:	f7fd ff52 	bl	17314 <dw1000_read_reg>
                        dw1000_write_reg(inst, SYS_MASK_ID, 1, 0, sizeof(uint8_t));
   19470:	f04f 0801 	mov.w	r8, #1
   19474:	2300      	movs	r3, #0
   19476:	2200      	movs	r2, #0
   19478:	e9cd 2300 	strd	r2, r3, [sp]
                        uint8_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 1 , sizeof(uint8_t));
   1947c:	4681      	mov	r9, r0
                        dw1000_write_reg(inst, SYS_MASK_ID, 1, 0, sizeof(uint8_t));
   1947e:	4642      	mov	r2, r8
   19480:	210e      	movs	r1, #14
   19482:	4620      	mov	r0, r4
   19484:	f8cd 8008 	str.w	r8, [sp, #8]
   19488:	f7fd ff96 	bl	173b8 <dw1000_write_reg>
                        dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   1948c:	f8cd 8008 	str.w	r8, [sp, #8]
   19490:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   19494:	0a1b      	lsrs	r3, r3, #8
   19496:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
   1949a:	4642      	mov	r2, r8
   1949c:	210f      	movs	r1, #15
   1949e:	4620      	mov	r0, r4
   194a0:	e9cd 3700 	strd	r3, r7, [sp]
   194a4:	f7fd ff88 	bl	173b8 <dw1000_write_reg>
                        dw1000_write_reg(inst, SYS_MASK_ID, 1, mask, sizeof(uint8_t));
   194a8:	f009 00ff 	and.w	r0, r9, #255	; 0xff
   194ac:	e9cd 0700 	strd	r0, r7, [sp]
   194b0:	f8cd 8008 	str.w	r8, [sp, #8]
   194b4:	4642      	mov	r2, r8
   194b6:	210e      	movs	r1, #14
                        dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   194b8:	4620      	mov	r0, r4
   194ba:	f7fd ff7d 	bl	173b8 <dw1000_write_reg>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0b1, sizeof(uint8_t));
   194be:	2301      	movs	r3, #1
   194c0:	2201      	movs	r2, #1
   194c2:	9302      	str	r3, [sp, #8]
   194c4:	2300      	movs	r3, #0
   194c6:	e9cd 2300 	strd	r2, r3, [sp]
   194ca:	2203      	movs	r2, #3
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   194cc:	210d      	movs	r1, #13
   194ce:	4620      	mov	r0, r4
   194d0:	f7fd ff72 	bl	173b8 <dw1000_write_reg>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   194d4:	f8d4 7530 	ldr.w	r7, [r4, #1328]	; 0x530
   194d8:	2f00      	cmp	r7, #0
   194da:	f43f aeb1 	beq.w	19240 <dw1000_interrupt_ev_cb+0x110>
            if (cbs != NULL && cbs->rx_complete_cb)
   194de:	693b      	ldr	r3, [r7, #16]
   194e0:	b113      	cbz	r3, 194e8 <dw1000_interrupt_ev_cb+0x3b8>
                if(cbs->rx_complete_cb((struct uwb_dev*)inst,cbs)) continue;
   194e2:	4639      	mov	r1, r7
   194e4:	4620      	mov	r0, r4
   194e6:	4798      	blx	r3
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   194e8:	6bbf      	ldr	r7, [r7, #56]	; 0x38
   194ea:	e7f5      	b.n	194d8 <dw1000_interrupt_ev_cb+0x3a8>
        if (inst->uwb_dev.frame_len) inst->uwb_dev.frame_len -= 2;
   194ec:	3802      	subs	r0, #2
   194ee:	e728      	b.n	19342 <dw1000_interrupt_ev_cb+0x212>
                dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   194f0:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   194f4:	0a1b      	lsrs	r3, r3, #8
   194f6:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
   194fa:	9300      	str	r3, [sp, #0]
   194fc:	2300      	movs	r3, #0
   194fe:	9301      	str	r3, [sp, #4]
   19500:	210f      	movs	r1, #15
   19502:	4620      	mov	r0, r4
   19504:	f7fd ff58 	bl	173b8 <dw1000_write_reg>
   19508:	e77c      	b.n	19404 <dw1000_interrupt_ev_cb+0x2d4>
                        dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   1950a:	2201      	movs	r2, #1
   1950c:	9202      	str	r2, [sp, #8]
   1950e:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   19512:	0a1b      	lsrs	r3, r3, #8
   19514:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
   19518:	e9cd 3000 	strd	r3, r0, [sp]
   1951c:	210f      	movs	r1, #15
   1951e:	e7cb      	b.n	194b8 <dw1000_interrupt_ev_cb+0x388>
                MAC_STATS_INC(ROV_err);
   19520:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
   19524:	3301      	adds	r3, #1
   19526:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
                dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_RXOVRR, sizeof(uint32_t));
   1952a:	2304      	movs	r3, #4
   1952c:	9302      	str	r3, [sp, #8]
   1952e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   19532:	2300      	movs	r3, #0
   19534:	e9cd 2300 	strd	r2, r3, [sp]
   19538:	210f      	movs	r1, #15
   1953a:	2200      	movs	r2, #0
   1953c:	4620      	mov	r0, r4
   1953e:	f7fd ff3b 	bl	173b8 <dw1000_write_reg>
                dw1000_phy_forcetrxoff(inst);
   19542:	4620      	mov	r0, r4
   19544:	f000 fc58 	bl	19df8 <dw1000_phy_forcetrxoff>
                dw1000_phy_rx_reset(inst);
   19548:	4620      	mov	r0, r4
   1954a:	f000 fc20 	bl	19d8e <dw1000_phy_rx_reset>
                dw1000_sync_rxbufptrs(inst);
   1954e:	4620      	mov	r0, r4
   19550:	f7ff f858 	bl	18604 <dw1000_sync_rxbufptrs>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   19554:	2201      	movs	r2, #1
   19556:	2001      	movs	r0, #1
   19558:	2100      	movs	r1, #0
   1955a:	e9cd 0100 	strd	r0, r1, [sp]
   1955e:	9202      	str	r2, [sp, #8]
   19560:	e7b4      	b.n	194cc <dw1000_interrupt_ev_cb+0x39c>
            inst->uwb_dev.carrier_integrator = dw1000_read_carrier_integrator(inst);
   19562:	4620      	mov	r0, r4
   19564:	f7ff fbde 	bl	18d24 <dw1000_read_carrier_integrator>
            dw1000_write_reg(inst, SYS_STATUS_ID, 0,
   19568:	2302      	movs	r3, #2
            inst->uwb_dev.carrier_integrator = dw1000_read_carrier_integrator(inst);
   1956a:	f8c4 04f0 	str.w	r0, [r4, #1264]	; 0x4f0
            dw1000_write_reg(inst, SYS_STATUS_ID, 0,
   1956e:	9302      	str	r3, [sp, #8]
   19570:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   19574:	f403 436c 	and.w	r3, r3, #60416	; 0xec00
   19578:	e9cd 3700 	strd	r3, r7, [sp]
   1957c:	463a      	mov	r2, r7
   1957e:	210f      	movs	r1, #15
   19580:	4620      	mov	r0, r4
   19582:	f7fd ff19 	bl	173b8 <dw1000_write_reg>
            if (inst->control.rxauto_disable == false){
   19586:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1958a:	075f      	lsls	r7, r3, #29
   1958c:	d40f      	bmi.n	195ae <dw1000_interrupt_ev_cb+0x47e>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1958e:	2201      	movs	r2, #1
   19590:	2001      	movs	r0, #1
   19592:	2100      	movs	r1, #0
   19594:	e9cd 0100 	strd	r0, r1, [sp]
   19598:	9202      	str	r2, [sp, #8]
   1959a:	210d      	movs	r1, #13
   1959c:	4620      	mov	r0, r4
   1959e:	f7fd ff0b 	bl	173b8 <dw1000_write_reg>
                inst->uwb_dev.status.rx_restarted = 1;
   195a2:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   195a6:	f043 0308 	orr.w	r3, r3, #8
   195aa:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
            inst->control.rxauto_disable = false;
   195ae:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   195b2:	f36f 0382 	bfc	r3, #2, #1
   195b6:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
   195ba:	e78b      	b.n	194d4 <dw1000_interrupt_ev_cb+0x3a4>
                if(cbs->tx_begins_cb((struct uwb_dev*)inst,cbs)) break;
   195bc:	4639      	mov	r1, r7
   195be:	4620      	mov	r0, r4
   195c0:	4798      	blx	r3
   195c2:	2800      	cmp	r0, #0
   195c4:	f43f ae55 	beq.w	19272 <dw1000_interrupt_ev_cb+0x142>
    if(inst->sys_status & SYS_STATUS_TXFRS) {
   195c8:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   195cc:	0618      	lsls	r0, r3, #24
   195ce:	d53b      	bpl.n	19648 <dw1000_interrupt_ev_cb+0x518>
        MAC_STATS_INC(TFG_cnt);
   195d0:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
   195d4:	3301      	adds	r3, #1
   195d6:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_TX, sizeof(uint8_t)); // Clear TX event bits
   195da:	22f8      	movs	r2, #248	; 0xf8
   195dc:	2300      	movs	r3, #0
   195de:	2701      	movs	r7, #1
   195e0:	e9cd 2300 	strd	r2, r3, [sp]
   195e4:	9702      	str	r7, [sp, #8]
   195e6:	2200      	movs	r2, #0
   195e8:	210f      	movs	r1, #15
   195ea:	4620      	mov	r0, r4
   195ec:	f7fd fee4 	bl	173b8 <dw1000_write_reg>
        if (inst->control.abs_timeout) {
   195f0:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   195f4:	071a      	lsls	r2, r3, #28
   195f6:	d511      	bpl.n	1961c <dw1000_interrupt_ev_cb+0x4ec>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   195f8:	2300      	movs	r3, #0
   195fa:	2201      	movs	r2, #1
   195fc:	e9cd 2300 	strd	r2, r3, [sp]
   19600:	210d      	movs	r1, #13
   19602:	463a      	mov	r2, r7
   19604:	4620      	mov	r0, r4
   19606:	9702      	str	r7, [sp, #8]
   19608:	f7fd fed6 	bl	173b8 <dw1000_write_reg>
            update_rx_window_timeout(inst, dw1000_read_txtime(inst));
   1960c:	4620      	mov	r0, r4
   1960e:	f7ff fd87 	bl	19120 <dw1000_read_txtime>
   19612:	4602      	mov	r2, r0
   19614:	460b      	mov	r3, r1
   19616:	4620      	mov	r0, r4
   19618:	f7fe ff49 	bl	184ae <update_rx_window_timeout.isra.0>
        if(dpl_sem_get_count(&inst->tx_sem) == 0){
   1961c:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
   19620:	b933      	cbnz	r3, 19630 <dw1000_interrupt_ev_cb+0x500>
   19622:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   19626:	f7f0 fb05 	bl	9c34 <os_sem_release>
            assert(err == DPL_OK);
   1962a:	2800      	cmp	r0, #0
   1962c:	f47f adfe 	bne.w	1922c <dw1000_interrupt_ev_cb+0xfc>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   19630:	f8d4 7530 	ldr.w	r7, [r4, #1328]	; 0x530
   19634:	b147      	cbz	r7, 19648 <dw1000_interrupt_ev_cb+0x518>
            if (cbs!=NULL && cbs->tx_complete_cb)
   19636:	68fb      	ldr	r3, [r7, #12]
   19638:	b90b      	cbnz	r3, 1963e <dw1000_interrupt_ev_cb+0x50e>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1963a:	6bbf      	ldr	r7, [r7, #56]	; 0x38
   1963c:	e7fa      	b.n	19634 <dw1000_interrupt_ev_cb+0x504>
                if(cbs->tx_complete_cb((struct uwb_dev*)inst,cbs)) break;
   1963e:	4639      	mov	r1, r7
   19640:	4620      	mov	r0, r4
   19642:	4798      	blx	r3
   19644:	2800      	cmp	r0, #0
   19646:	d0f8      	beq.n	1963a <dw1000_interrupt_ev_cb+0x50a>
    if(inst->uwb_dev.status.txbuf_error){
   19648:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1964c:	0699      	lsls	r1, r3, #26
   1964e:	d51a      	bpl.n	19686 <dw1000_interrupt_ev_cb+0x556>
        MAC_STATS_INC(TXBUF_err);
   19650:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
   19654:	3301      	adds	r3, #1
   19656:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_TXBERR, sizeof(uint32_t));
   1965a:	2304      	movs	r3, #4
   1965c:	9302      	str	r3, [sp, #8]
   1965e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19662:	2300      	movs	r3, #0
   19664:	e9cd 2300 	strd	r2, r3, [sp]
   19668:	210f      	movs	r1, #15
   1966a:	2200      	movs	r2, #0
   1966c:	4620      	mov	r0, r4
   1966e:	f7fd fea3 	bl	173b8 <dw1000_write_reg>
        if(dpl_sem_get_count(&inst->tx_sem) == 0){
   19672:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
   19676:	b933      	cbnz	r3, 19686 <dw1000_interrupt_ev_cb+0x556>
   19678:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   1967c:	f7f0 fada 	bl	9c34 <os_sem_release>
            assert(err == DPL_OK);
   19680:	2800      	cmp	r0, #0
   19682:	f47f add3 	bne.w	1922c <dw1000_interrupt_ev_cb+0xfc>
    if(inst->sys_status & SYS_STATUS_LDEERR){
   19686:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1968a:	035b      	lsls	r3, r3, #13
   1968c:	d510      	bpl.n	196b0 <dw1000_interrupt_ev_cb+0x580>
        MAC_STATS_INC(LDE_err);
   1968e:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
   19692:	3301      	adds	r3, #1
   19694:	f8c4 35e0 	str.w	r3, [r4, #1504]	; 0x5e0
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_LDEERR, sizeof(uint32_t));
   19698:	2304      	movs	r3, #4
   1969a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1969e:	9302      	str	r3, [sp, #8]
   196a0:	2300      	movs	r3, #0
   196a2:	e9cd 2300 	strd	r2, r3, [sp]
   196a6:	210f      	movs	r1, #15
   196a8:	2200      	movs	r2, #0
   196aa:	4620      	mov	r0, r4
   196ac:	f7fd fe84 	bl	173b8 <dw1000_write_reg>
    if(inst->uwb_dev.status.rx_timeout_error){
   196b0:	f994 3508 	ldrsb.w	r3, [r4, #1288]	; 0x508
   196b4:	2b00      	cmp	r3, #0
   196b6:	db56      	blt.n	19766 <dw1000_interrupt_ev_cb+0x636>
    if(inst->uwb_dev.status.rx_error) {
   196b8:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   196bc:	065f      	lsls	r7, r3, #25
   196be:	f140 80be 	bpl.w	1983e <dw1000_interrupt_ev_cb+0x70e>
        MAC_STATS_INC(RX_err);
   196c2:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
   196c6:	3301      	adds	r3, #1
   196c8:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_RX_ERR), sizeof(uint32_t)); // Clear RX error event bits
   196cc:	2304      	movs	r3, #4
   196ce:	9302      	str	r3, [sp, #8]
   196d0:	a395      	add	r3, pc, #596	; (adr r3, 19928 <dw1000_interrupt_ev_cb+0x7f8>)
   196d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   196d6:	210f      	movs	r1, #15
   196d8:	e9cd 2300 	strd	r2, r3, [sp]
   196dc:	4620      	mov	r0, r4
   196de:	2200      	movs	r2, #0
   196e0:	f7fd fe6a 	bl	173b8 <dw1000_write_reg>
        if (inst->uwb_dev.config.dblbuffon_enabled && inst->uwb_dev.status.overrun_error) {
   196e4:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   196e8:	06df      	lsls	r7, r3, #27
   196ea:	f140 8108 	bpl.w	198fe <dw1000_interrupt_ev_cb+0x7ce>
   196ee:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   196f2:	0758      	lsls	r0, r3, #29
   196f4:	f140 8103 	bpl.w	198fe <dw1000_interrupt_ev_cb+0x7ce>
            MAC_STATS_INC(ROV_err);
   196f8:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
   196fc:	3301      	adds	r3, #1
   196fe:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
            dw1000_phy_rx_reset(inst);
   19702:	4620      	mov	r0, r4
   19704:	f000 fb43 	bl	19d8e <dw1000_phy_rx_reset>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0b1, sizeof(uint8_t));
   19708:	2301      	movs	r3, #1
   1970a:	9302      	str	r3, [sp, #8]
   1970c:	2201      	movs	r2, #1
   1970e:	2300      	movs	r3, #0
   19710:	e9cd 2300 	strd	r2, r3, [sp]
   19714:	4620      	mov	r0, r4
   19716:	2203      	movs	r2, #3
   19718:	210d      	movs	r1, #13
   1971a:	f7fd fe4d 	bl	173b8 <dw1000_write_reg>
            dw1000_sync_rxbufptrs(inst);
   1971e:	4620      	mov	r0, r4
   19720:	f7fe ff70 	bl	18604 <dw1000_sync_rxbufptrs>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   19724:	2201      	movs	r2, #1
   19726:	2001      	movs	r0, #1
   19728:	2100      	movs	r1, #0
   1972a:	e9cd 0100 	strd	r0, r1, [sp]
   1972e:	9202      	str	r2, [sp, #8]
   19730:	210d      	movs	r1, #13
   19732:	4620      	mov	r0, r4
   19734:	f7fd fe40 	bl	173b8 <dw1000_write_reg>
        if (inst->control.abs_timeout) {
   19738:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1973c:	0719      	lsls	r1, r3, #28
   1973e:	d507      	bpl.n	19750 <dw1000_interrupt_ev_cb+0x620>
            update_rx_window_timeout(inst, dw1000_read_systime(inst));
   19740:	4620      	mov	r0, r4
   19742:	f7ff fccf 	bl	190e4 <dw1000_read_systime>
   19746:	4602      	mov	r2, r0
   19748:	460b      	mov	r3, r1
   1974a:	4620      	mov	r0, r4
   1974c:	f7fe feaf 	bl	184ae <update_rx_window_timeout.isra.0>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   19750:	f8d4 7530 	ldr.w	r7, [r4, #1328]	; 0x530
   19754:	2f00      	cmp	r7, #0
   19756:	d072      	beq.n	1983e <dw1000_interrupt_ev_cb+0x70e>
            if (cbs!=NULL && cbs->rx_error_cb)
   19758:	69fb      	ldr	r3, [r7, #28]
   1975a:	b113      	cbz	r3, 19762 <dw1000_interrupt_ev_cb+0x632>
                if(cbs->rx_error_cb((struct uwb_dev*)inst,cbs)) continue;
   1975c:	4639      	mov	r1, r7
   1975e:	4620      	mov	r0, r4
   19760:	4798      	blx	r3
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   19762:	6bbf      	ldr	r7, [r7, #56]	; 0x38
   19764:	e7f6      	b.n	19754 <dw1000_interrupt_ev_cb+0x624>
        MAC_STATS_INC(RTO_cnt);
   19766:	f8d4 35d4 	ldr.w	r3, [r4, #1492]	; 0x5d4
   1976a:	3301      	adds	r3, #1
   1976c:	f8c4 35d4 	str.w	r3, [r4, #1492]	; 0x5d4
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_RX_TO, sizeof(uint32_t)); // Clear RX timeout event bits
   19770:	2304      	movs	r3, #4
   19772:	9302      	str	r3, [sp, #8]
   19774:	f44f 1208 	mov.w	r2, #2228224	; 0x220000
   19778:	2300      	movs	r3, #0
   1977a:	e9cd 2300 	strd	r2, r3, [sp]
   1977e:	4620      	mov	r0, r4
   19780:	2200      	movs	r2, #0
   19782:	210f      	movs	r1, #15
   19784:	f7fd fe18 	bl	173b8 <dw1000_write_reg>
        if (inst->control.abs_timeout) {
   19788:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1978c:	0718      	lsls	r0, r3, #28
   1978e:	d41f      	bmi.n	197d0 <dw1000_interrupt_ev_cb+0x6a0>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint16_t)SYS_CTRL_TRXOFF, sizeof(uint16_t)) ; // Disable the radio
   19790:	2302      	movs	r3, #2
   19792:	9302      	str	r3, [sp, #8]
   19794:	2240      	movs	r2, #64	; 0x40
   19796:	2300      	movs	r3, #0
   19798:	e9cd 2300 	strd	r2, r3, [sp]
   1979c:	210d      	movs	r1, #13
   1979e:	2200      	movs	r2, #0
   197a0:	4620      	mov	r0, r4
   197a2:	f7fd fe09 	bl	173b8 <dw1000_write_reg>
            dw1000_phy_rx_reset(inst);
   197a6:	4620      	mov	r0, r4
   197a8:	f000 faf1 	bl	19d8e <dw1000_phy_rx_reset>
            inst->control.cir_enable = false;
   197ac:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
            if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   197b0:	f8d4 7530 	ldr.w	r7, [r4, #1328]	; 0x530
            inst->control.cir_enable = false;
   197b4:	f023 030e 	bic.w	r3, r3, #14
   197b8:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
                SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   197bc:	2f00      	cmp	r7, #0
   197be:	f43f af7b 	beq.w	196b8 <dw1000_interrupt_ev_cb+0x588>
                    if (cbs!=NULL && cbs->rx_timeout_cb)
   197c2:	69bb      	ldr	r3, [r7, #24]
   197c4:	b113      	cbz	r3, 197cc <dw1000_interrupt_ev_cb+0x69c>
                        if(cbs->rx_timeout_cb((struct uwb_dev*)inst,cbs)) continue;
   197c6:	4639      	mov	r1, r7
   197c8:	4620      	mov	r0, r4
   197ca:	4798      	blx	r3
                SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   197cc:	6bbf      	ldr	r7, [r7, #56]	; 0x38
   197ce:	e7f5      	b.n	197bc <dw1000_interrupt_ev_cb+0x68c>
            uint64_t systime = dw1000_read_systime(inst);
   197d0:	4620      	mov	r0, r4
   197d2:	f7ff fc87 	bl	190e4 <dw1000_read_systime>
    uint32_t timeout = ((rx_end - rx_start) & UWB_DTU_40BMASK) >> 16;
   197d6:	f8d4 34d8 	ldr.w	r3, [r4, #1240]	; 0x4d8
   197da:	f8d4 24dc 	ldr.w	r2, [r4, #1244]	; 0x4dc
   197de:	1a18      	subs	r0, r3, r0
   197e0:	eb62 0201 	sbc.w	r2, r2, r1
   197e4:	0c00      	lsrs	r0, r0, #16
   197e6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    if (timeout > 0x7fffff) {
   197ea:	0201      	lsls	r1, r0, #8
   197ec:	d420      	bmi.n	19830 <dw1000_interrupt_ev_cb+0x700>
    uint32_t timeout = ((rx_end - rx_start) & UWB_DTU_40BMASK) >> 16;
   197ee:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    return timeout;
   197f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   197f6:	4299      	cmp	r1, r3
            if (new_timeout > 1) {
   197f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    return timeout;
   197fc:	bf28      	it	cs
   197fe:	4619      	movcs	r1, r3
            if (new_timeout > 1) {
   19800:	f020 0001 	bic.w	r0, r0, #1
    return timeout;
   19804:	b28f      	uxth	r7, r1
            if (new_timeout > 1) {
   19806:	b198      	cbz	r0, 19830 <dw1000_interrupt_ev_cb+0x700>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   19808:	2201      	movs	r2, #1
   1980a:	2001      	movs	r0, #1
   1980c:	2100      	movs	r1, #0
   1980e:	e9cd 0100 	strd	r0, r1, [sp]
   19812:	9202      	str	r2, [sp, #8]
   19814:	210d      	movs	r1, #13
   19816:	4620      	mov	r0, r4
   19818:	f7fd fdce 	bl	173b8 <dw1000_write_reg>
                dw1000_adj_rx_timeout(inst, new_timeout);
   1981c:	4639      	mov	r1, r7
   1981e:	4620      	mov	r0, r4
   19820:	f7fe fe37 	bl	18492 <dw1000_adj_rx_timeout>
        if (!inst->control.abs_timeout) {
   19824:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   19828:	071a      	lsls	r2, r3, #28
   1982a:	f53f af45 	bmi.w	196b8 <dw1000_interrupt_ev_cb+0x588>
   1982e:	e7af      	b.n	19790 <dw1000_interrupt_ev_cb+0x660>
                inst->control.abs_timeout = false;
   19830:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   19834:	f36f 03c3 	bfc	r3, #3, #1
   19838:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
   1983c:	e7f2      	b.n	19824 <dw1000_interrupt_ev_cb+0x6f4>
    if(inst->sys_status & SYS_STATUS_SLP2INIT){
   1983e:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   19842:	021b      	lsls	r3, r3, #8
   19844:	d50a      	bpl.n	1985c <dw1000_interrupt_ev_cb+0x72c>
        dw1000_write_reg(inst, SYS_STATUS_ID, 2, SYS_STATUS_SLP2INIT>>16, 1);
   19846:	2301      	movs	r3, #1
   19848:	2280      	movs	r2, #128	; 0x80
   1984a:	9302      	str	r3, [sp, #8]
   1984c:	2300      	movs	r3, #0
   1984e:	e9cd 2300 	strd	r2, r3, [sp]
   19852:	210f      	movs	r1, #15
   19854:	2202      	movs	r2, #2
   19856:	4620      	mov	r0, r4
   19858:	f7fd fdae 	bl	173b8 <dw1000_write_reg>
    if(inst->sys_status & SYS_STATUS_CLKPLL_LL){
   1985c:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   19860:	019a      	lsls	r2, r3, #6
   19862:	d510      	bpl.n	19886 <dw1000_interrupt_ev_cb+0x756>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_CLKPLL_LL, sizeof(uint32_t));
   19864:	2304      	movs	r3, #4
   19866:	9302      	str	r3, [sp, #8]
   19868:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1986c:	2300      	movs	r3, #0
   1986e:	e9cd 2300 	strd	r2, r3, [sp]
   19872:	210f      	movs	r1, #15
   19874:	2200      	movs	r2, #0
   19876:	4620      	mov	r0, r4
   19878:	f7fd fd9e 	bl	173b8 <dw1000_write_reg>
        MAC_STATS_INC(PLL_LL_err);
   1987c:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
   19880:	3301      	adds	r3, #1
   19882:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec
    if(inst->sys_status & SYS_MASK_MCPLOCK){
   19886:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1988a:	079b      	lsls	r3, r3, #30
   1988c:	f57f ad1f 	bpl.w	192ce <dw1000_interrupt_ev_cb+0x19e>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_MASK_MCPLOCK, sizeof(uint32_t));
   19890:	2304      	movs	r3, #4
   19892:	9302      	str	r3, [sp, #8]
   19894:	2202      	movs	r2, #2
   19896:	2300      	movs	r3, #0
   19898:	e9cd 2300 	strd	r2, r3, [sp]
   1989c:	210f      	movs	r1, #15
   1989e:	2200      	movs	r2, #0
   198a0:	4620      	mov	r0, r4
        dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   198a2:	f04f 0802 	mov.w	r8, #2
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_MASK_MCPLOCK, sizeof(uint32_t));
   198a6:	f7fd fd87 	bl	173b8 <dw1000_write_reg>
        dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   198aa:	f8cd 8008 	str.w	r8, [sp, #8]
   198ae:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
   198b2:	2700      	movs	r7, #0
   198b4:	e9cd 3700 	strd	r3, r7, [sp]
   198b8:	f641 0204 	movw	r2, #6148	; 0x1804
   198bc:	212e      	movs	r1, #46	; 0x2e
   198be:	4620      	mov	r0, r4
   198c0:	f7fd fd7a 	bl	173b8 <dw1000_write_reg>
        dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
   198c4:	f8cd 8008 	str.w	r8, [sp, #8]
   198c8:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   198cc:	463a      	mov	r2, r7
   198ce:	e9cd 3700 	strd	r3, r7, [sp]
   198d2:	2118      	movs	r1, #24
   198d4:	4620      	mov	r0, r4
   198d6:	f7fd fd6f 	bl	173b8 <dw1000_write_reg>
        inst->uwb_dev.status.sleeping = 0;
   198da:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   198de:	f367 0300 	bfi	r3, r7, #0, #1
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   198e2:	f8d4 7530 	ldr.w	r7, [r4, #1328]	; 0x530
        inst->uwb_dev.status.sleeping = 0;
   198e6:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   198ea:	2f00      	cmp	r7, #0
   198ec:	f43f acef 	beq.w	192ce <dw1000_interrupt_ev_cb+0x19e>
            if (cbs!=NULL && cbs->sleep_cb)
   198f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   198f2:	b113      	cbz	r3, 198fa <dw1000_interrupt_ev_cb+0x7ca>
                if (cbs->sleep_cb((struct uwb_dev*)inst,cbs)) continue;
   198f4:	4639      	mov	r1, r7
   198f6:	4620      	mov	r0, r4
   198f8:	4798      	blx	r3
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   198fa:	6bbf      	ldr	r7, [r7, #56]	; 0x38
   198fc:	e7f5      	b.n	198ea <dw1000_interrupt_ev_cb+0x7ba>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   198fe:	2301      	movs	r3, #1
   19900:	9302      	str	r3, [sp, #8]
   19902:	2240      	movs	r2, #64	; 0x40
   19904:	2300      	movs	r3, #0
   19906:	e9cd 2300 	strd	r2, r3, [sp]
   1990a:	4620      	mov	r0, r4
   1990c:	2200      	movs	r2, #0
   1990e:	210d      	movs	r1, #13
   19910:	f7fd fd52 	bl	173b8 <dw1000_write_reg>
            dw1000_phy_rx_reset(inst);
   19914:	4620      	mov	r0, r4
   19916:	f000 fa3a 	bl	19d8e <dw1000_phy_rx_reset>
   1991a:	e703      	b.n	19724 <dw1000_interrupt_ev_cb+0x5f4>
}
   1991c:	b005      	add	sp, #20
   1991e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19922:	bf00      	nop
   19924:	f3af 8000 	nop.w
   19928:	24119000 	.word	0x24119000
   1992c:	00000000 	.word	0x00000000

00019930 <dw1000_read_txtime_lo>:
 *
 * @param inst  Pointer to _dw1000_dev_instance_t.
 *
 * @return time
 */
inline uint32_t dw1000_read_txtime_lo(struct _dw1000_dev_instance_t * inst){
   19930:	b508      	push	{r3, lr}
    uint32_t time = (uint32_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, sizeof(uint32_t));
   19932:	2200      	movs	r2, #0
   19934:	2304      	movs	r3, #4
   19936:	2117      	movs	r1, #23
   19938:	f7fd fcec 	bl	17314 <dw1000_read_reg>
    return time;
}
   1993c:	bd08      	pop	{r3, pc}
	...

00019940 <dw1000_configcwmode>:
 * @param chan - specifies the operating channel (e.g. 1, 2, 3, 4, 5, 6 or 7)
 *
 */
void
dw1000_configcwmode(struct _dw1000_dev_instance_t * inst, uint8_t chan)
{
   19940:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rc;
    if ((chan < 1) || (chan > 7) || (6 == chan)) {
   19942:	1e4b      	subs	r3, r1, #1
   19944:	2b06      	cmp	r3, #6
{
   19946:	b085      	sub	sp, #20
   19948:	4604      	mov	r4, r0
   1994a:	460e      	mov	r6, r1
    if ((chan < 1) || (chan > 7) || (6 == chan)) {
   1994c:	d801      	bhi.n	19952 <dw1000_configcwmode+0x12>
   1994e:	2906      	cmp	r1, #6
   19950:	d105      	bne.n	1995e <dw1000_configcwmode+0x1e>
        assert(0);
   19952:	2300      	movs	r3, #0
   19954:	461a      	mov	r2, r3
   19956:	4619      	mov	r1, r3
   19958:	4618      	mov	r0, r3
   1995a:	f7ef facb 	bl	8ef4 <__assert_func>
    }

    /* Lower the speed of the SPI bus before activating CW mode.
     * This is needed because we disable the hiher sysclk and thus
     * dw1000 only support < 2Mbit spi */
    inst->spi_settings.baudrate = inst->spi_baudrate_low;
   1995e:	f8d0 3558 	ldr.w	r3, [r0, #1368]	; 0x558
   19962:	f8c0 3598 	str.w	r3, [r0, #1432]	; 0x598
    rc = hal_spi_disable(inst->spi_num);
   19966:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
   1996a:	f001 fad5 	bl	1af18 <hal_spi_disable>
    assert(rc == 0);
   1996e:	2800      	cmp	r0, #0
   19970:	d1ef      	bne.n	19952 <dw1000_configcwmode+0x12>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   19972:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   19976:	f204 5194 	addw	r1, r4, #1428	; 0x594
   1997a:	f001 fa1f 	bl	1adbc <hal_spi_config>
    assert(rc == 0);
   1997e:	2800      	cmp	r0, #0
   19980:	d1e7      	bne.n	19952 <dw1000_configcwmode+0x12>
    rc = hal_spi_enable(inst->spi_num);
   19982:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   19986:	f001 faa7 	bl	1aed8 <hal_spi_enable>
    assert(rc == 0);
   1998a:	4605      	mov	r5, r0
   1998c:	2800      	cmp	r0, #0
   1998e:	d1e0      	bne.n	19952 <dw1000_configcwmode+0x12>

    /* disable TX/RX RF block sequencing (needed for cw frame mode) */
    dw1000_phy_disable_sequencing(inst);
   19990:	4620      	mov	r0, r4
   19992:	f000 f8d1 	bl	19b38 <dw1000_phy_disable_sequencing>

    /* config RF pll (for a given channel) */
    /* configure PLL2/RF PLL block CFG */
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET,
                     fs_pll_cfg[chan_idx[chan]], sizeof(uint32_t));
   19996:	4b2d      	ldr	r3, [pc, #180]	; (19a4c <dw1000_configcwmode+0x10c>)
   19998:	5d9f      	ldrb	r7, [r3, r6]
   1999a:	4b2d      	ldr	r3, [pc, #180]	; (19a50 <dw1000_configcwmode+0x110>)
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET,
   1999c:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   199a0:	2604      	movs	r6, #4
   199a2:	e9cd 3500 	strd	r3, r5, [sp]
   199a6:	9602      	str	r6, [sp, #8]
   199a8:	4620      	mov	r0, r4
   199aa:	2207      	movs	r2, #7
   199ac:	212b      	movs	r1, #43	; 0x2b
   199ae:	f7fd fd03 	bl	173b8 <dw1000_write_reg>

    /* Configure RF TX blocks (for specified channel and prf) */
    /* Config RF TX control */
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET,
                     tx_config[chan_idx[chan]], sizeof(uint32_t));
   199b2:	4b28      	ldr	r3, [pc, #160]	; (19a54 <dw1000_configcwmode+0x114>)
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET,
   199b4:	9602      	str	r6, [sp, #8]
   199b6:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   199ba:	4620      	mov	r0, r4
   199bc:	e9cd 3500 	strd	r3, r5, [sp]
   199c0:	220c      	movs	r2, #12
   199c2:	2128      	movs	r1, #40	; 0x28
   199c4:	f7fd fcf8 	bl	173b8 <dw1000_write_reg>

    /* enable RF PLL */
    dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXPLLPOWEN_MASK, sizeof(uint32_t));
   199c8:	2300      	movs	r3, #0
   199ca:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
   199ce:	e9cd 2300 	strd	r2, r3, [sp]
   199d2:	9602      	str	r6, [sp, #8]
   199d4:	462a      	mov	r2, r5
   199d6:	4620      	mov	r0, r4
   199d8:	2128      	movs	r1, #40	; 0x28
   199da:	f7fd fced 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXALLEN_MASK, sizeof(uint32_t));
   199de:	4a1e      	ldr	r2, [pc, #120]	; (19a58 <dw1000_configcwmode+0x118>)
   199e0:	9602      	str	r6, [sp, #8]
   199e2:	2300      	movs	r3, #0
   199e4:	e9cd 2300 	strd	r2, r3, [sp]
   199e8:	4620      	mov	r0, r4
   199ea:	462a      	mov	r2, r5
   199ec:	2128      	movs	r1, #40	; 0x28
   199ee:	f7fd fce3 	bl	173b8 <dw1000_write_reg>

    /* configure TX clocks */
    dw1000_write_reg(inst, PMSC_ID,PMSC_CTRL0_OFFSET, 0x22, 1);
   199f2:	2601      	movs	r6, #1
   199f4:	2300      	movs	r3, #0
   199f6:	2222      	movs	r2, #34	; 0x22
   199f8:	e9cd 2300 	strd	r2, r3, [sp]
   199fc:	4620      	mov	r0, r4
   199fe:	462a      	mov	r2, r5
   19a00:	9602      	str	r6, [sp, #8]
   19a02:	2136      	movs	r1, #54	; 0x36
   19a04:	f7fd fcd8 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, 0x1, 0x07, 1);
   19a08:	2300      	movs	r3, #0
   19a0a:	2207      	movs	r2, #7
   19a0c:	e9cd 2300 	strd	r2, r3, [sp]
   19a10:	4620      	mov	r0, r4
   19a12:	4632      	mov	r2, r6
   19a14:	9602      	str	r6, [sp, #8]
   19a16:	2136      	movs	r1, #54	; 0x36
   19a18:	f7fd fcce 	bl	173b8 <dw1000_write_reg>

    /* disable fine grain TX seq */
    dw1000_write_reg(inst, PMSC_ID, PMSC_TXFINESEQ_OFFSET,
   19a1c:	2302      	movs	r3, #2
   19a1e:	9302      	str	r3, [sp, #8]
   19a20:	2200      	movs	r2, #0
   19a22:	2300      	movs	r3, #0
   19a24:	e9cd 2300 	strd	r2, r3, [sp]
   19a28:	4620      	mov	r0, r4
   19a2a:	2226      	movs	r2, #38	; 0x26
   19a2c:	2136      	movs	r1, #54	; 0x36
   19a2e:	f7fd fcc3 	bl	173b8 <dw1000_write_reg>
                     PMSC_TXFINESEQ_DISABLE, sizeof(uint16_t));

    /* configure CW mode */
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGTEST_OFFSET,
   19a32:	2300      	movs	r3, #0
   19a34:	2213      	movs	r2, #19
   19a36:	e9cd 2300 	strd	r2, r3, [sp]
   19a3a:	9602      	str	r6, [sp, #8]
   19a3c:	220c      	movs	r2, #12
   19a3e:	212a      	movs	r1, #42	; 0x2a
   19a40:	4620      	mov	r0, r4
   19a42:	f7fd fcb9 	bl	173b8 <dw1000_write_reg>
                     TC_PGTEST_CW, TC_PGTEST_LEN);
}
   19a46:	b005      	add	sp, #20
   19a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19a4a:	bf00      	nop
   19a4c:	00023594 	.word	0x00023594
   19a50:	000235c4 	.word	0x000235c4
   19a54:	00023660 	.word	0x00023660
   19a58:	005fff00 	.word	0x005fff00

00019a5c <dw1000_phy_sysclk_XTAL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_XTAL(struct _dw1000_dev_instance_t * inst)
{
   19a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   19a5e:	2301      	movs	r3, #1
   19a60:	2200      	movs	r2, #0
   19a62:	2136      	movs	r1, #54	; 0x36
{
   19a64:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   19a66:	f7fd fc55 	bl	17314 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
    reg |= (uint8_t) PMSC_CTRL0_SYSCLKS_19M;
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   19a6a:	2201      	movs	r2, #1
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
   19a6c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   19a70:	4313      	orrs	r3, r2
   19a72:	9202      	str	r2, [sp, #8]
   19a74:	2200      	movs	r2, #0
   19a76:	e9cd 3200 	strd	r3, r2, [sp]
   19a7a:	2136      	movs	r1, #54	; 0x36
   19a7c:	4620      	mov	r0, r4
   19a7e:	f7fd fc9b 	bl	173b8 <dw1000_write_reg>
}
   19a82:	b004      	add	sp, #16
   19a84:	bd10      	pop	{r4, pc}

00019a86 <dw1000_phy_sysclk_PLL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_PLL(struct _dw1000_dev_instance_t * inst)
{
   19a86:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   19a88:	2301      	movs	r3, #1
   19a8a:	2200      	movs	r2, #0
   19a8c:	2136      	movs	r1, #54	; 0x36
{
   19a8e:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   19a90:	f7fd fc40 	bl	17314 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
    reg |= (uint8_t) PMSC_CTRL0_SYSCLKS_125M;
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   19a94:	2201      	movs	r2, #1
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
   19a96:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   19a9a:	9202      	str	r2, [sp, #8]
   19a9c:	f043 0302 	orr.w	r3, r3, #2
   19aa0:	2200      	movs	r2, #0
   19aa2:	e9cd 3200 	strd	r3, r2, [sp]
   19aa6:	2136      	movs	r1, #54	; 0x36
   19aa8:	4620      	mov	r0, r4
   19aaa:	f7fd fc85 	bl	173b8 <dw1000_write_reg>
}
   19aae:	b004      	add	sp, #16
   19ab0:	bd10      	pop	{r4, pc}

00019ab2 <dw1000_phy_txclk_PLL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_txclk_PLL(struct _dw1000_dev_instance_t * inst)
{
   19ab2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   19ab4:	2301      	movs	r3, #1
   19ab6:	2200      	movs	r2, #0
   19ab8:	2136      	movs	r1, #54	; 0x36
{
   19aba:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   19abc:	f7fd fc2a 	bl	17314 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_TXCLKS_19M & (uint8_t)~PMSC_CTRL0_TXCLKS_125M;
    reg |= (uint8_t) PMSC_CTRL0_TXCLKS_125M;
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   19ac0:	2201      	movs	r2, #1
    reg &= (uint8_t)~PMSC_CTRL0_TXCLKS_19M & (uint8_t)~PMSC_CTRL0_TXCLKS_125M;
   19ac2:	f000 03cf 	and.w	r3, r0, #207	; 0xcf
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   19ac6:	9202      	str	r2, [sp, #8]
   19ac8:	f043 0320 	orr.w	r3, r3, #32
   19acc:	2200      	movs	r2, #0
   19ace:	e9cd 3200 	strd	r3, r2, [sp]
   19ad2:	2136      	movs	r1, #54	; 0x36
   19ad4:	4620      	mov	r0, r4
   19ad6:	f7fd fc6f 	bl	173b8 <dw1000_write_reg>
}
   19ada:	b004      	add	sp, #16
   19adc:	bd10      	pop	{r4, pc}

00019ade <dw1000_phy_sysclk_LDE>:
 * API to enable running of the LDE algorithm.
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_LDE(struct _dw1000_dev_instance_t * inst){
   19ade:	b530      	push	{r4, r5, lr}
   19ae0:	b085      	sub	sp, #20
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, 0x01, sizeof(uint8_t));
   19ae2:	2501      	movs	r5, #1
   19ae4:	2300      	movs	r3, #0
   19ae6:	2201      	movs	r2, #1
   19ae8:	e9cd 2300 	strd	r2, r3, [sp]
   19aec:	9502      	str	r5, [sp, #8]
   19aee:	2200      	movs	r2, #0
   19af0:	2136      	movs	r1, #54	; 0x36
void dw1000_phy_sysclk_LDE(struct _dw1000_dev_instance_t * inst){
   19af2:	4604      	mov	r4, r0
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, 0x01, sizeof(uint8_t));
   19af4:	f7fd fc60 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET + 1 , 0x03, sizeof(uint8_t));
   19af8:	2300      	movs	r3, #0
   19afa:	2203      	movs	r2, #3
   19afc:	e9cd 2300 	strd	r2, r3, [sp]
   19b00:	9502      	str	r5, [sp, #8]
   19b02:	462a      	mov	r2, r5
   19b04:	2136      	movs	r1, #54	; 0x36
   19b06:	4620      	mov	r0, r4
   19b08:	f7fd fc56 	bl	173b8 <dw1000_write_reg>
}
   19b0c:	b005      	add	sp, #20
   19b0e:	bd30      	pop	{r4, r5, pc}

00019b10 <dw1000_phy_sysclk_SEQ>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_SEQ(struct _dw1000_dev_instance_t * inst)
{
   19b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   19b12:	2301      	movs	r3, #1
   19b14:	2200      	movs	r2, #0
   19b16:	2136      	movs	r1, #54	; 0x36
{
   19b18:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   19b1a:	f7fd fbfb 	bl	17314 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   19b1e:	2301      	movs	r3, #1
   19b20:	2200      	movs	r2, #0
   19b22:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
   19b26:	e9cd 0200 	strd	r0, r2, [sp]
   19b2a:	9302      	str	r3, [sp, #8]
   19b2c:	2136      	movs	r1, #54	; 0x36
   19b2e:	4620      	mov	r0, r4
   19b30:	f7fd fc42 	bl	173b8 <dw1000_write_reg>
}
   19b34:	b004      	add	sp, #16
   19b36:	bd10      	pop	{r4, pc}

00019b38 <dw1000_phy_disable_sequencing>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_disable_sequencing(struct _dw1000_dev_instance_t * inst)
{
   19b38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   19b3a:	4604      	mov	r4, r0
    dw1000_phy_sysclk_XTAL(inst);
   19b3c:	f7ff ff8e 	bl	19a5c <dw1000_phy_sysclk_XTAL>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, sizeof(uint16_t)); // Disable PMSC ctrl of RF and RX clk blocks
   19b40:	2302      	movs	r3, #2
   19b42:	9302      	str	r3, [sp, #8]
   19b44:	2200      	movs	r2, #0
   19b46:	2300      	movs	r3, #0
   19b48:	e9cd 2300 	strd	r2, r3, [sp]
   19b4c:	2136      	movs	r1, #54	; 0x36
   19b4e:	2204      	movs	r2, #4
   19b50:	4620      	mov	r0, r4
   19b52:	f7fd fc31 	bl	173b8 <dw1000_write_reg>
}
   19b56:	b004      	add	sp, #16
   19b58:	bd10      	pop	{r4, pc}

00019b5a <dw1000_phy_config_lde>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @param prf   This is the PRF index (0 or 1) 0 corresponds to 16 and 1 to 64 PRF.
 * @return void
 */
void dw1000_phy_config_lde(struct _dw1000_dev_instance_t * inst, int prfIndex)
{
   19b5a:	b530      	push	{r4, r5, lr}
   19b5c:	b085      	sub	sp, #20
    dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1, sizeof(uint8_t)); // 8-bit configuration register
   19b5e:	2301      	movs	r3, #1
   19b60:	9302      	str	r3, [sp, #8]
   19b62:	226d      	movs	r2, #109	; 0x6d
   19b64:	2300      	movs	r3, #0
   19b66:	e9cd 2300 	strd	r2, r3, [sp]
{
   19b6a:	460d      	mov	r5, r1
    dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1, sizeof(uint8_t)); // 8-bit configuration register
   19b6c:	f640 0206 	movw	r2, #2054	; 0x806
   19b70:	212e      	movs	r1, #46	; 0x2e
{
   19b72:	4604      	mov	r4, r0
    dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1, sizeof(uint8_t)); // 8-bit configuration register
   19b74:	f7fd fc20 	bl	173b8 <dw1000_write_reg>

    if(prfIndex)
   19b78:	2302      	movs	r3, #2
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_64, sizeof(uint16_t)); // 16-bit LDE configuration tuning register
   19b7a:	9302      	str	r3, [sp, #8]
    if(prfIndex)
   19b7c:	b165      	cbz	r5, 19b98 <dw1000_phy_config_lde+0x3e>
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_64, sizeof(uint16_t)); // 16-bit LDE configuration tuning register
   19b7e:	f240 6207 	movw	r2, #1543	; 0x607
    else
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_16, sizeof(uint16_t));
   19b82:	2300      	movs	r3, #0
   19b84:	e9cd 2300 	strd	r2, r3, [sp]
   19b88:	212e      	movs	r1, #46	; 0x2e
   19b8a:	f641 0206 	movw	r2, #6150	; 0x1806
   19b8e:	4620      	mov	r0, r4
   19b90:	f7fd fc12 	bl	173b8 <dw1000_write_reg>
}
   19b94:	b005      	add	sp, #20
   19b96:	bd30      	pop	{r4, r5, pc}
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_16, sizeof(uint16_t));
   19b98:	f241 6207 	movw	r2, #5639	; 0x1607
   19b9c:	e7f1      	b.n	19b82 <dw1000_phy_config_lde+0x28>

00019b9e <dw1000_phy_config_txrf>:
 * @param inst      Pointer to dw1000_dev_instance_t.
 * @param config    Pointer to dw1000_dev_txrf_config_t.
 * @return void
 */
void dw1000_phy_config_txrf(struct _dw1000_dev_instance_t * inst, struct uwb_dev_txrf_config *config)
{
   19b9e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // Configure RF TX PG_DELAY
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly, sizeof(uint8_t));
   19ba0:	2301      	movs	r3, #1
   19ba2:	9302      	str	r3, [sp, #8]
   19ba4:	780b      	ldrb	r3, [r1, #0]
   19ba6:	2600      	movs	r6, #0
   19ba8:	e9cd 3600 	strd	r3, r6, [sp]
{
   19bac:	460c      	mov	r4, r1
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly, sizeof(uint8_t));
   19bae:	220b      	movs	r2, #11
   19bb0:	212a      	movs	r1, #42	; 0x2a
{
   19bb2:	4605      	mov	r5, r0
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly, sizeof(uint8_t));
   19bb4:	f7fd fc00 	bl	173b8 <dw1000_write_reg>
    // Configure TX power
    dw1000_write_reg(inst, TX_POWER_ID, 0, config->power, sizeof(uint32_t));
   19bb8:	2304      	movs	r3, #4
   19bba:	9302      	str	r3, [sp, #8]
   19bbc:	6863      	ldr	r3, [r4, #4]
   19bbe:	4632      	mov	r2, r6
   19bc0:	e9cd 3600 	strd	r3, r6, [sp]
   19bc4:	211e      	movs	r1, #30
   19bc6:	4628      	mov	r0, r5
   19bc8:	f7fd fbf6 	bl	173b8 <dw1000_write_reg>
}
   19bcc:	b004      	add	sp, #16
   19bce:	bd70      	pop	{r4, r5, r6, pc}

00019bd0 <dw1000_phy_init>:
{
   19bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   19bd2:	4604      	mov	r4, r0
   19bd4:	b085      	sub	sp, #20
        txrf_config = &inst->uwb_dev.config.txrf;
   19bd6:	f200 5624 	addw	r6, r0, #1316	; 0x524
    if (txrf_config == NULL)
   19bda:	b129      	cbz	r1, 19be8 <dw1000_phy_init+0x18>
        memcpy(&inst->uwb_dev.config.txrf, txrf_config, sizeof(struct uwb_dev_txrf_config));
   19bdc:	680b      	ldr	r3, [r1, #0]
   19bde:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
   19be2:	684b      	ldr	r3, [r1, #4]
   19be4:	6073      	str	r3, [r6, #4]
   19be6:	460e      	mov	r6, r1
    dw1000_softreset(inst);
   19be8:	4620      	mov	r0, r4
   19bea:	f7fd fc64 	bl	174b6 <dw1000_softreset>
    dw1000_phy_sysclk_XTAL(inst);
   19bee:	4620      	mov	r0, r4
   19bf0:	f7ff ff34 	bl	19a5c <dw1000_phy_sysclk_XTAL>
    dw1000_gpio_config_leds(inst, DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
   19bf4:	2106      	movs	r1, #6
   19bf6:	4620      	mov	r0, r4
   19bf8:	f000 fd60 	bl	1a6bc <dw1000_gpio_config_leds>
    reg = dw1000_read_reg(inst, EXT_SYNC_ID, EC_CTRL_OFFSET, sizeof(uint8_t));
   19bfc:	2301      	movs	r3, #1
   19bfe:	2200      	movs	r2, #0
   19c00:	2124      	movs	r1, #36	; 0x24
   19c02:	4620      	mov	r0, r4
   19c04:	f7fd fb86 	bl	17314 <dw1000_read_reg>
   19c08:	b2c0      	uxtb	r0, r0
    dw1000_write_reg(inst, EXT_SYNC_ID, EC_CTRL_OFFSET, reg, sizeof(uint8_t));
   19c0a:	2200      	movs	r2, #0
   19c0c:	f040 0004 	orr.w	r0, r0, #4
   19c10:	2701      	movs	r7, #1
   19c12:	e9cd 0200 	strd	r0, r2, [sp]
   19c16:	2124      	movs	r1, #36	; 0x24
   19c18:	4620      	mov	r0, r4
   19c1a:	9702      	str	r7, [sp, #8]
   19c1c:	f7fd fbcc 	bl	173b8 <dw1000_write_reg>
    otp_addr = (uint32_t) _dw1000_otp_read(inst, OTP_XTRIM_ADDRESS) & 0xffff;    // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
   19c20:	211e      	movs	r1, #30
   19c22:	4620      	mov	r0, r4
   19c24:	f000 fdaf 	bl	1a786 <_dw1000_otp_read>
   19c28:	b285      	uxth	r5, r0
    inst->otp_rev = (otp_addr >> 8) & 0xff;                                               // OTP revision is next byte
   19c2a:	f3c0 2007 	ubfx	r0, r0, #8, #8
   19c2e:	f8a4 057c 	strh.w	r0, [r4, #1404]	; 0x57c
    ldo_tune = _dw1000_otp_read(inst, OTP_LDOTUNE_ADDRESS);
   19c32:	2104      	movs	r1, #4
   19c34:	4620      	mov	r0, r4
   19c36:	f000 fda6 	bl	1a786 <_dw1000_otp_read>
    if((ldo_tune & 0xFF) != 0){
   19c3a:	b2c0      	uxtb	r0, r0
   19c3c:	b178      	cbz	r0, 19c5e <dw1000_phy_init+0x8e>
        dw1000_write_reg(inst, OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK, sizeof(uint8_t)); // Set load LDE kick bit
   19c3e:	2300      	movs	r3, #0
   19c40:	2202      	movs	r2, #2
   19c42:	e9cd 2300 	strd	r2, r3, [sp]
   19c46:	9702      	str	r7, [sp, #8]
   19c48:	2212      	movs	r2, #18
   19c4a:	212d      	movs	r1, #45	; 0x2d
   19c4c:	4620      	mov	r0, r4
   19c4e:	f7fd fbb3 	bl	173b8 <dw1000_write_reg>
        inst->uwb_dev.status.LDO_enabled = 1; // LDO tune must be kicked at wake-up
   19c52:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   19c56:	f043 0320 	orr.w	r3, r3, #32
   19c5a:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
    inst->part_id = _dw1000_otp_read(inst, OTP_PARTID_ADDRESS);
   19c5e:	2106      	movs	r1, #6
   19c60:	4620      	mov	r0, r4
   19c62:	f000 fd90 	bl	1a786 <_dw1000_otp_read>
    inst->lot_id = _dw1000_otp_read(inst, OTP_LOTID_ADDRESS);
   19c66:	2107      	movs	r1, #7
    inst->part_id = _dw1000_otp_read(inst, OTP_PARTID_ADDRESS);
   19c68:	f8c4 0574 	str.w	r0, [r4, #1396]	; 0x574
    inst->lot_id = _dw1000_otp_read(inst, OTP_LOTID_ADDRESS);
   19c6c:	4620      	mov	r0, r4
   19c6e:	f000 fd8a 	bl	1a786 <_dw1000_otp_read>
    inst->otp_vbat = _dw1000_otp_read(inst, OTP_VBAT_ADDRESS);
   19c72:	2108      	movs	r1, #8
    inst->lot_id = _dw1000_otp_read(inst, OTP_LOTID_ADDRESS);
   19c74:	f8c4 0578 	str.w	r0, [r4, #1400]	; 0x578
    inst->otp_vbat = _dw1000_otp_read(inst, OTP_VBAT_ADDRESS);
   19c78:	4620      	mov	r0, r4
   19c7a:	f000 fd84 	bl	1a786 <_dw1000_otp_read>
    inst->otp_temp = _dw1000_otp_read(inst, OTP_VTEMP_ADDRESS);
   19c7e:	2109      	movs	r1, #9
    inst->otp_vbat = _dw1000_otp_read(inst, OTP_VBAT_ADDRESS);
   19c80:	f884 057e 	strb.w	r0, [r4, #1406]	; 0x57e
    inst->otp_temp = _dw1000_otp_read(inst, OTP_VTEMP_ADDRESS);
   19c84:	4620      	mov	r0, r4
   19c86:	f000 fd7e 	bl	1a786 <_dw1000_otp_read>
    inst->otp_xtal_trim = otp_addr & 0x1F;
   19c8a:	f005 051f 	and.w	r5, r5, #31
    inst->otp_temp = _dw1000_otp_read(inst, OTP_VTEMP_ADDRESS);
   19c8e:	f884 057f 	strb.w	r0, [r4, #1407]	; 0x57f
    inst->otp_xtal_trim = otp_addr & 0x1F;
   19c92:	f884 5580 	strb.w	r5, [r4, #1408]	; 0x580
    if (inst->otp_xtal_trim && (inst->uwb_dev.config.rx.xtalTrim == 0xff)) {
   19c96:	b12d      	cbz	r5, 19ca4 <dw1000_phy_init+0xd4>
   19c98:	f894 251e 	ldrb.w	r2, [r4, #1310]	; 0x51e
   19c9c:	2aff      	cmp	r2, #255	; 0xff
        inst->uwb_dev.config.rx.xtalTrim = inst->otp_xtal_trim;
   19c9e:	bf08      	it	eq
   19ca0:	f884 551e 	strbeq.w	r5, [r4, #1310]	; 0x51e
    dw1000_write_reg(inst, FS_CTRL_ID, FS_XTALT_OFFSET, reg, sizeof(uint8_t));
   19ca4:	2301      	movs	r3, #1
   19ca6:	9302      	str	r3, [sp, #8]
    reg = (3 << 5) | (inst->uwb_dev.config.rx.xtalTrim & FS_XTALT_MASK);
   19ca8:	f894 351e 	ldrb.w	r3, [r4, #1310]	; 0x51e
   19cac:	f003 031f 	and.w	r3, r3, #31
    dw1000_write_reg(inst, FS_CTRL_ID, FS_XTALT_OFFSET, reg, sizeof(uint8_t));
   19cb0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   19cb4:	9300      	str	r3, [sp, #0]
   19cb6:	2300      	movs	r3, #0
   19cb8:	9301      	str	r3, [sp, #4]
   19cba:	220e      	movs	r2, #14
   19cbc:	212b      	movs	r1, #43	; 0x2b
   19cbe:	4620      	mov	r0, r4
   19cc0:	f7fd fb7a 	bl	173b8 <dw1000_write_reg>
    if(inst->uwb_dev.config.LDE_enable)
   19cc4:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
   19cc8:	075b      	lsls	r3, r3, #29
   19cca:	d51a      	bpl.n	19d02 <dw1000_phy_init+0x132>
    dw1000_phy_sysclk_LDE(inst);
   19ccc:	4620      	mov	r0, r4
   19cce:	f7ff ff06 	bl	19ade <dw1000_phy_sysclk_LDE>
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD, sizeof(uint16_t)); // Set load LDE kick bit
   19cd2:	2302      	movs	r3, #2
   19cd4:	9302      	str	r3, [sp, #8]
   19cd6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   19cda:	2300      	movs	r3, #0
   19cdc:	e9cd 2300 	strd	r2, r3, [sp]
   19ce0:	212d      	movs	r1, #45	; 0x2d
   19ce2:	2206      	movs	r2, #6
   19ce4:	4620      	mov	r0, r4
   19ce6:	f7fd fb67 	bl	173b8 <dw1000_write_reg>
    dpl_cputime_delay_usecs(120); // Allow time for code to upload (should take up to 120 us)
   19cea:	2078      	movs	r0, #120	; 0x78
   19cec:	f7f7 face 	bl	1128c <dpl_cputime_delay_usecs>
    dw1000_phy_sysclk_SEQ(inst); // Enable clocks for sequencing
   19cf0:	4620      	mov	r0, r4
   19cf2:	f7ff ff0d 	bl	19b10 <dw1000_phy_sysclk_SEQ>
    inst->uwb_dev.status.LDE_enabled = 1;
   19cf6:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   19cfa:	f043 0310 	orr.w	r3, r3, #16
   19cfe:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
    dw1000_phy_sysclk_SEQ(inst);    // Enable clocks for sequencing
   19d02:	4620      	mov	r0, r4
   19d04:	f7ff ff04 	bl	19b10 <dw1000_phy_sysclk_SEQ>
    reg = dw1000_read_reg(inst, AON_ID, AON_CFG1_OFFSET, sizeof(uint8_t));
   19d08:	2301      	movs	r3, #1
   19d0a:	220a      	movs	r2, #10
   19d0c:	4620      	mov	r0, r4
   19d0e:	212c      	movs	r1, #44	; 0x2c
   19d10:	f7fd fb00 	bl	17314 <dw1000_read_reg>
    reg |= ~AON_CFG1_SMXX;
   19d14:	f060 0002 	orn	r0, r0, #2
    dw1000_write_reg(inst, AON_ID, AON_CFG1_OFFSET, reg, sizeof(uint8_t));
   19d18:	2500      	movs	r5, #0
   19d1a:	2301      	movs	r3, #1
   19d1c:	b2c0      	uxtb	r0, r0
   19d1e:	e9cd 0500 	strd	r0, r5, [sp]
   19d22:	9302      	str	r3, [sp, #8]
   19d24:	4620      	mov	r0, r4
   19d26:	220a      	movs	r2, #10
   19d28:	212c      	movs	r1, #44	; 0x2c
   19d2a:	f7fd fb45 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET , AON_WCFG_ONW_RADC, sizeof(uint16_t));
   19d2e:	2702      	movs	r7, #2
   19d30:	2300      	movs	r3, #0
   19d32:	2201      	movs	r2, #1
   19d34:	e9cd 2300 	strd	r2, r3, [sp]
   19d38:	4620      	mov	r0, r4
   19d3a:	462a      	mov	r2, r5
   19d3c:	9702      	str	r7, [sp, #8]
   19d3e:	212c      	movs	r1, #44	; 0x2c
   19d40:	f7fd fb3a 	bl	173b8 <dw1000_write_reg>
    dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   19d44:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
   19d48:	9702      	str	r7, [sp, #8]
   19d4a:	e9cd 3500 	strd	r3, r5, [sp]
   19d4e:	4620      	mov	r0, r4
   19d50:	f641 0204 	movw	r2, #6148	; 0x1804
   19d54:	212e      	movs	r1, #46	; 0x2e
   19d56:	f7fd fb2f 	bl	173b8 <dw1000_write_reg>
    dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
   19d5a:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   19d5e:	9702      	str	r7, [sp, #8]
   19d60:	e9cd 3500 	strd	r3, r5, [sp]
   19d64:	462a      	mov	r2, r5
   19d66:	4620      	mov	r0, r4
   19d68:	2118      	movs	r1, #24
   19d6a:	f7fd fb25 	bl	173b8 <dw1000_write_reg>
    dw1000_phy_config_txrf(inst, txrf_config);
   19d6e:	4631      	mov	r1, r6
   19d70:	4620      	mov	r0, r4
   19d72:	f7ff ff14 	bl	19b9e <dw1000_phy_config_txrf>
    inst->sys_cfg_reg = dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)) ; // Read sysconfig register
   19d76:	2304      	movs	r3, #4
   19d78:	462a      	mov	r2, r5
   19d7a:	4619      	mov	r1, r3
   19d7c:	4620      	mov	r0, r4
   19d7e:	f7fd fac9 	bl	17314 <dw1000_read_reg>
   19d82:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
}
   19d86:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19d8a:	b005      	add	sp, #20
   19d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019d8e <dw1000_phy_rx_reset>:
 *
 * @param inst   Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_rx_reset(struct _dw1000_dev_instance_t * inst)
{
   19d8e:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   19d90:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   19d94:	b085      	sub	sp, #20
   19d96:	4604      	mov	r4, r0
   19d98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19d9c:	4630      	mov	r0, r6
   19d9e:	f7f0 fce5 	bl	a76c <os_mutex_pend>
    dpl_error_t err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
   19da2:	4605      	mov	r5, r0
   19da4:	b138      	cbz	r0, 19db6 <dw1000_phy_rx_reset+0x28>
        inst->uwb_dev.status.mtx_error = 1;
   19da6:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   19daa:	f043 0308 	orr.w	r3, r3, #8
   19dae:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    // Clear RX reset
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t));

    err = dpl_mutex_release(&inst->mutex);
    assert(err == DPL_OK);
}
   19db2:	b005      	add	sp, #20
   19db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX, sizeof(uint8_t));
   19db6:	2300      	movs	r3, #0
   19db8:	2701      	movs	r7, #1
   19dba:	22e0      	movs	r2, #224	; 0xe0
   19dbc:	e9cd 2300 	strd	r2, r3, [sp]
   19dc0:	2136      	movs	r1, #54	; 0x36
   19dc2:	2203      	movs	r2, #3
   19dc4:	4620      	mov	r0, r4
   19dc6:	9702      	str	r7, [sp, #8]
   19dc8:	f7fd faf6 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t));
   19dcc:	22f0      	movs	r2, #240	; 0xf0
   19dce:	2300      	movs	r3, #0
   19dd0:	e9cd 2300 	strd	r2, r3, [sp]
   19dd4:	4620      	mov	r0, r4
   19dd6:	9702      	str	r7, [sp, #8]
   19dd8:	2203      	movs	r2, #3
   19dda:	2136      	movs	r1, #54	; 0x36
   19ddc:	f7fd faec 	bl	173b8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   19de0:	4630      	mov	r0, r6
   19de2:	f7f0 fc71 	bl	a6c8 <os_mutex_release>
    assert(err == DPL_OK);
   19de6:	2800      	cmp	r0, #0
   19de8:	d0e3      	beq.n	19db2 <dw1000_phy_rx_reset+0x24>
   19dea:	462b      	mov	r3, r5
   19dec:	462a      	mov	r2, r5
   19dee:	4629      	mov	r1, r5
   19df0:	4628      	mov	r0, r5
   19df2:	f7ef f87f 	bl	8ef4 <__assert_func>
	...

00019df8 <dw1000_phy_forcetrxoff>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_forcetrxoff(struct _dw1000_dev_instance_t * inst)
{
   19df8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dpl_error_t err;
    struct uwb_mac_interface * cbs = NULL;
    uint32_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
   19dfa:	2200      	movs	r2, #0
{
   19dfc:	b087      	sub	sp, #28
    uint32_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
   19dfe:	2304      	movs	r3, #4
   19e00:	210e      	movs	r1, #14
{
   19e02:	4604      	mov	r4, r0
    uint32_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
   19e04:	f7fd fa86 	bl	17314 <dw1000_read_reg>
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   19e08:	f504 67ad 	add.w	r7, r4, #1384	; 0x568
   19e0c:	4605      	mov	r5, r0
   19e0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19e12:	4638      	mov	r0, r7
   19e14:	f7f0 fcaa 	bl	a76c <os_mutex_pend>
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation

    err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
   19e18:	4602      	mov	r2, r0
   19e1a:	b138      	cbz	r0, 19e2c <dw1000_phy_forcetrxoff+0x34>
        inst->uwb_dev.status.mtx_error = 1;
   19e1c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   19e20:	f043 0308 	orr.w	r3, r3, #8
   19e24:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    if (dpl_sem_get_count(&inst->tx_sem) == 0) {
        err = dpl_sem_release(&inst->tx_sem);
        assert(err == DPL_OK);
        inst->uwb_dev.status.sem_force_released = 1;
    }
}
   19e28:	b007      	add	sp, #28
   19e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t)) ; // Clear interrupt mask - so we don't get any unwanted events
   19e2c:	2604      	movs	r6, #4
   19e2e:	2000      	movs	r0, #0
   19e30:	2100      	movs	r1, #0
   19e32:	e9cd 0100 	strd	r0, r1, [sp]
   19e36:	9602      	str	r6, [sp, #8]
   19e38:	210e      	movs	r1, #14
   19e3a:	4620      	mov	r0, r4
   19e3c:	9205      	str	r2, [sp, #20]
   19e3e:	f7fd fabb 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TRXOFF, sizeof(uint8_t)) ; // Disable the radio
   19e42:	2301      	movs	r3, #1
   19e44:	2040      	movs	r0, #64	; 0x40
   19e46:	2100      	movs	r1, #0
   19e48:	e9cd 0100 	strd	r0, r1, [sp]
   19e4c:	9302      	str	r3, [sp, #8]
   19e4e:	9a05      	ldr	r2, [sp, #20]
   19e50:	210d      	movs	r1, #13
   19e52:	4620      	mov	r0, r4
   19e54:	f7fd fab0 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD| SYS_STATUS_TXBERR), sizeof(uint32_t));
   19e58:	a123      	add	r1, pc, #140	; (adr r1, 19ee8 <dw1000_phy_forcetrxoff+0xf0>)
   19e5a:	e9d1 0100 	ldrd	r0, r1, [r1]
   19e5e:	9a05      	ldr	r2, [sp, #20]
   19e60:	9602      	str	r6, [sp, #8]
   19e62:	e9cd 0100 	strd	r0, r1, [sp]
   19e66:	210f      	movs	r1, #15
   19e68:	4620      	mov	r0, r4
   19e6a:	f7fd faa5 	bl	173b8 <dw1000_write_reg>
    if (inst->uwb_dev.config.dblbuffon_enabled)
   19e6e:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   19e72:	06db      	lsls	r3, r3, #27
   19e74:	d502      	bpl.n	19e7c <dw1000_phy_forcetrxoff+0x84>
        dw1000_sync_rxbufptrs(inst);
   19e76:	4620      	mov	r0, r4
   19e78:	f7fe fbc4 	bl	18604 <dw1000_sync_rxbufptrs>
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t)); // Restore mask to what it was
   19e7c:	2200      	movs	r2, #0
   19e7e:	e9cd 5200 	strd	r5, r2, [sp]
   19e82:	9602      	str	r6, [sp, #8]
   19e84:	210e      	movs	r1, #14
   19e86:	4620      	mov	r0, r4
   19e88:	f7fd fa96 	bl	173b8 <dw1000_write_reg>
    if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   19e8c:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   19e90:	b135      	cbz	r5, 19ea0 <dw1000_phy_forcetrxoff+0xa8>
            if (cbs!=NULL && cbs->reset_cb)
   19e92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   19e94:	b113      	cbz	r3, 19e9c <dw1000_phy_forcetrxoff+0xa4>
                if(cbs->reset_cb((struct uwb_dev*)inst, cbs)) continue;
   19e96:	4629      	mov	r1, r5
   19e98:	4620      	mov	r0, r4
   19e9a:	4798      	blx	r3
        SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   19e9c:	6bad      	ldr	r5, [r5, #56]	; 0x38
   19e9e:	e7f7      	b.n	19e90 <dw1000_phy_forcetrxoff+0x98>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   19ea0:	4638      	mov	r0, r7
   19ea2:	f7f0 fc11 	bl	a6c8 <os_mutex_release>
    assert(err == DPL_OK);
   19ea6:	b128      	cbz	r0, 19eb4 <dw1000_phy_forcetrxoff+0xbc>
   19ea8:	2300      	movs	r3, #0
   19eaa:	461a      	mov	r2, r3
   19eac:	4619      	mov	r1, r3
   19eae:	4618      	mov	r0, r3
   19eb0:	f7ef f820 	bl	8ef4 <__assert_func>
    inst->control.wait4resp_enabled = 0;
   19eb4:	f8b4 35b0 	ldrh.w	r3, [r4, #1456]	; 0x5b0
   19eb8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   19ebc:	f023 0301 	bic.w	r3, r3, #1
   19ec0:	f8a4 35b0 	strh.w	r3, [r4, #1456]	; 0x5b0
    if (dpl_sem_get_count(&inst->tx_sem) == 0) {
   19ec4:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
   19ec8:	2b00      	cmp	r3, #0
   19eca:	d1ad      	bne.n	19e28 <dw1000_phy_forcetrxoff+0x30>
    return (dpl_error_t)os_sem_release(&sem->sem);
   19ecc:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   19ed0:	f7ef feb0 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
   19ed4:	2800      	cmp	r0, #0
   19ed6:	d1e7      	bne.n	19ea8 <dw1000_phy_forcetrxoff+0xb0>
        inst->uwb_dev.status.sem_force_released = 1;
   19ed8:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   19edc:	f043 0302 	orr.w	r3, r3, #2
   19ee0:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
   19ee4:	e7a0      	b.n	19e28 <dw1000_phy_forcetrxoff+0x30>
   19ee6:	bf00      	nop
   19ee8:	3433fbf8 	.word	0x3433fbf8
   19eec:	00000000 	.word	0x00000000

00019ef0 <dw1000_phy_interrupt_mask>:
 * @param bitmask   Sets the events which generates interrupt.
 * @param enable    If set, the interrupts are enabled else they are cleared.
 * @return void
 */
void dw1000_phy_interrupt_mask(struct _dw1000_dev_instance_t * inst, uint32_t bitmask, uint8_t enable)
{
   19ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   19ef2:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   19ef6:	b085      	sub	sp, #20
   19ef8:	4604      	mov	r4, r0
   19efa:	460d      	mov	r5, r1
   19efc:	4630      	mov	r0, r6
   19efe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19f02:	4617      	mov	r7, r2
   19f04:	f7f0 fc32 	bl	a76c <os_mutex_pend>
    // Critical region, atomic lock with mutex
    uint32_t mask;
    dpl_error_t err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
   19f08:	4602      	mov	r2, r0
   19f0a:	b138      	cbz	r0, 19f1c <dw1000_phy_interrupt_mask+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   19f0c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   19f10:	f043 0308 	orr.w	r3, r3, #8
   19f14:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    // Critical region, unlock mutex
    err = dpl_mutex_release(&inst->mutex);
    assert(err == DPL_OK);
mtx_error:
    return;
}
   19f18:	b005      	add	sp, #20
   19f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mask = dw1000_read_reg(inst, SYS_MASK_ID, 0, sizeof(uint32_t)) ; // Read register
   19f1c:	2304      	movs	r3, #4
   19f1e:	210e      	movs	r1, #14
   19f20:	4620      	mov	r0, r4
   19f22:	f7fd f9f7 	bl	17314 <dw1000_read_reg>
    if(enable)
   19f26:	b1af      	cbz	r7, 19f54 <dw1000_phy_interrupt_mask+0x64>
        mask |= bitmask ;
   19f28:	4328      	orrs	r0, r5
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t));
   19f2a:	2304      	movs	r3, #4
   19f2c:	9302      	str	r3, [sp, #8]
   19f2e:	2300      	movs	r3, #0
   19f30:	e9cd 0300 	strd	r0, r3, [sp]
   19f34:	461a      	mov	r2, r3
   19f36:	210e      	movs	r1, #14
   19f38:	4620      	mov	r0, r4
   19f3a:	f7fd fa3d 	bl	173b8 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   19f3e:	4630      	mov	r0, r6
   19f40:	f7f0 fbc2 	bl	a6c8 <os_mutex_release>
    assert(err == DPL_OK);
   19f44:	2300      	movs	r3, #0
   19f46:	2800      	cmp	r0, #0
   19f48:	d0e6      	beq.n	19f18 <dw1000_phy_interrupt_mask+0x28>
   19f4a:	461a      	mov	r2, r3
   19f4c:	4619      	mov	r1, r3
   19f4e:	4618      	mov	r0, r3
   19f50:	f7ee ffd0 	bl	8ef4 <__assert_func>
        mask &= ~bitmask ; // Clear the bit
   19f54:	ea20 0005 	bic.w	r0, r0, r5
   19f58:	e7e7      	b.n	19f2a <dw1000_phy_interrupt_mask+0x3a>
	...

00019f5c <dw1000_phy_repeated_frames>:
 * @param rate     Rate at which frames with be repeated in dtu, set to 0 to disable
 * @return void
 */
void
dw1000_phy_repeated_frames(struct _dw1000_dev_instance_t * inst, uint64_t rate)
{
   19f5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19f60:	461d      	mov	r5, r3
    int rc;

    if (!rate) {
   19f62:	ea52 0305 	orrs.w	r3, r2, r5
{
   19f66:	4604      	mov	r4, r0
   19f68:	4616      	mov	r6, r2
    if (!rate) {
   19f6a:	d115      	bne.n	19f98 <dw1000_phy_repeated_frames+0x3c>
        /* Stop sending packets */
        dw1000_write_reg(inst, RF_CONF_ID, 0, 0, sizeof(uint32_t));
   19f6c:	2304      	movs	r3, #4
   19f6e:	2600      	movs	r6, #0
   19f70:	2700      	movs	r7, #0
   19f72:	9302      	str	r3, [sp, #8]
   19f74:	2200      	movs	r2, #0
   19f76:	2128      	movs	r1, #40	; 0x28
   19f78:	e9cd 6700 	strd	r6, r7, [sp]
   19f7c:	f7fd fa1c 	bl	173b8 <dw1000_write_reg>
        dw1000_write_reg(inst, DIG_DIAG_ID, DIAG_TMC_OFFSET, 0, sizeof(uint8_t));
   19f80:	e9cd 6700 	strd	r6, r7, [sp]
   19f84:	2301      	movs	r3, #1
   19f86:	9302      	str	r3, [sp, #8]
   19f88:	2224      	movs	r2, #36	; 0x24
   19f8a:	212f      	movs	r1, #47	; 0x2f
        /* Turn the tx power spectrum test mode - continuous sending of frames */
        dw1000_write_reg(inst, DIG_DIAG_ID, DIAG_TMC_OFFSET,
                         (uint8_t)(DIAG_TMC_TX_PSTM), sizeof(uint8_t));

        /* Trigger first frame - Needed?? */
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT, sizeof(uint8_t));
   19f8c:	4620      	mov	r0, r4
   19f8e:	f7fd fa13 	bl	173b8 <dw1000_write_reg>
    }
}
   19f92:	b004      	add	sp, #16
   19f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->spi_settings.baudrate = inst->spi_baudrate_low;
   19f98:	f8d0 3558 	ldr.w	r3, [r0, #1368]	; 0x558
   19f9c:	f8c0 3598 	str.w	r3, [r0, #1432]	; 0x598
        rc = hal_spi_disable(inst->spi_num);
   19fa0:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
   19fa4:	f000 ffb8 	bl	1af18 <hal_spi_disable>
        assert(rc == 0);
   19fa8:	b128      	cbz	r0, 19fb6 <dw1000_phy_repeated_frames+0x5a>
   19faa:	2300      	movs	r3, #0
   19fac:	461a      	mov	r2, r3
   19fae:	4619      	mov	r1, r3
   19fb0:	4618      	mov	r0, r3
   19fb2:	f7ee ff9f 	bl	8ef4 <__assert_func>
        rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   19fb6:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   19fba:	f204 5194 	addw	r1, r4, #1428	; 0x594
   19fbe:	f000 fefd 	bl	1adbc <hal_spi_config>
        assert(rc == 0);
   19fc2:	2800      	cmp	r0, #0
   19fc4:	d1f1      	bne.n	19faa <dw1000_phy_repeated_frames+0x4e>
        rc = hal_spi_enable(inst->spi_num);
   19fc6:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   19fca:	f000 ff85 	bl	1aed8 <hal_spi_enable>
        assert(rc == 0);
   19fce:	4607      	mov	r7, r0
   19fd0:	2800      	cmp	r0, #0
   19fd2:	d1ea      	bne.n	19faa <dw1000_phy_repeated_frames+0x4e>
        printf("PMSC_ID[0]: %"PRIx32"\n", (uint32_t)dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint32_t)));
   19fd4:	4602      	mov	r2, r0
   19fd6:	2304      	movs	r3, #4
   19fd8:	2136      	movs	r1, #54	; 0x36
   19fda:	4620      	mov	r0, r4
   19fdc:	f7fd f99a 	bl	17314 <dw1000_read_reg>
   19fe0:	4601      	mov	r1, r0
   19fe2:	482d      	ldr	r0, [pc, #180]	; (1a098 <dw1000_phy_repeated_frames+0x13c>)
   19fe4:	f7f5 fdfa 	bl	fbdc <printf>
        printf("PMSC_ID[1]: %"PRIx32"\n", (uint32_t)dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t)));
   19fe8:	2304      	movs	r3, #4
   19fea:	461a      	mov	r2, r3
   19fec:	2136      	movs	r1, #54	; 0x36
   19fee:	4620      	mov	r0, r4
   19ff0:	f7fd f990 	bl	17314 <dw1000_read_reg>
   19ff4:	4601      	mov	r1, r0
   19ff6:	4829      	ldr	r0, [pc, #164]	; (1a09c <dw1000_phy_repeated_frames+0x140>)
   19ff8:	f7f5 fdf0 	bl	fbdc <printf>
        dw1000_phy_disable_sequencing(inst);
   19ffc:	4620      	mov	r0, r4
   19ffe:	f7ff fd9b 	bl	19b38 <dw1000_phy_disable_sequencing>
        dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXPLLPOWEN_MASK, sizeof(uint32_t));
   1a002:	f04f 0804 	mov.w	r8, #4
   1a006:	2300      	movs	r3, #0
   1a008:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
   1a00c:	e9cd 2300 	strd	r2, r3, [sp]
   1a010:	2128      	movs	r1, #40	; 0x28
   1a012:	463a      	mov	r2, r7
   1a014:	4620      	mov	r0, r4
   1a016:	f8cd 8008 	str.w	r8, [sp, #8]
   1a01a:	f7fd f9cd 	bl	173b8 <dw1000_write_reg>
        dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXALLEN_MASK, sizeof(uint32_t));
   1a01e:	4a20      	ldr	r2, [pc, #128]	; (1a0a0 <dw1000_phy_repeated_frames+0x144>)
   1a020:	f8cd 8008 	str.w	r8, [sp, #8]
   1a024:	2300      	movs	r3, #0
   1a026:	e9cd 2300 	strd	r2, r3, [sp]
   1a02a:	2128      	movs	r1, #40	; 0x28
   1a02c:	463a      	mov	r2, r7
   1a02e:	4620      	mov	r0, r4
   1a030:	f7fd f9c2 	bl	173b8 <dw1000_write_reg>
        dw1000_phy_sysclk_PLL(inst);
   1a034:	4620      	mov	r0, r4
   1a036:	f7ff fd26 	bl	19a86 <dw1000_phy_sysclk_PLL>
        dw1000_phy_txclk_PLL(inst);
   1a03a:	4620      	mov	r0, r4
   1a03c:	f7ff fd39 	bl	19ab2 <dw1000_phy_txclk_PLL>
        if ((rate>>8) < 4) {
   1a040:	0a32      	lsrs	r2, r6, #8
   1a042:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1a046:	0a2b      	lsrs	r3, r5, #8
   1a048:	4542      	cmp	r2, r8
   1a04a:	f173 0300 	sbcs.w	r3, r3, #0
            rate = ((uint64_t)4<<8);
   1a04e:	bf3c      	itt	cc
   1a050:	f44f 6680 	movcc.w	r6, #1024	; 0x400
   1a054:	463d      	movcc	r5, r7
        dw1000_write_reg(inst, DX_TIME_ID, 0, rate>>8, sizeof(uint32_t));
   1a056:	0a36      	lsrs	r6, r6, #8
   1a058:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
   1a05c:	0a2d      	lsrs	r5, r5, #8
   1a05e:	e9cd 6500 	strd	r6, r5, [sp]
   1a062:	2200      	movs	r2, #0
   1a064:	210a      	movs	r1, #10
   1a066:	4620      	mov	r0, r4
   1a068:	f8cd 8008 	str.w	r8, [sp, #8]
   1a06c:	f7fd f9a4 	bl	173b8 <dw1000_write_reg>
        dw1000_write_reg(inst, DIG_DIAG_ID, DIAG_TMC_OFFSET,
   1a070:	2501      	movs	r5, #1
   1a072:	2300      	movs	r3, #0
   1a074:	2210      	movs	r2, #16
   1a076:	e9cd 2300 	strd	r2, r3, [sp]
   1a07a:	212f      	movs	r1, #47	; 0x2f
   1a07c:	2224      	movs	r2, #36	; 0x24
   1a07e:	9502      	str	r5, [sp, #8]
   1a080:	4620      	mov	r0, r4
   1a082:	f7fd f999 	bl	173b8 <dw1000_write_reg>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT, sizeof(uint8_t));
   1a086:	2202      	movs	r2, #2
   1a088:	2300      	movs	r3, #0
   1a08a:	e9cd 2300 	strd	r2, r3, [sp]
   1a08e:	9502      	str	r5, [sp, #8]
   1a090:	2200      	movs	r2, #0
   1a092:	210d      	movs	r1, #13
   1a094:	e77a      	b.n	19f8c <dw1000_phy_repeated_frames+0x30>
   1a096:	bf00      	nop
   1a098:	00023678 	.word	0x00023678
   1a09c:	00023689 	.word	0x00023689
   1a0a0:	005fff00 	.word	0x005fff00

0001a0a4 <dw1000_phy_SHR_duration>:
 * @param nlen      The length of the frame to be transmitted/received excluding crc
 * @return uint16_t duration in usec
 */
uint16_t
dw1000_phy_SHR_duration(struct uwb_phy_attributes * attrib)
{
   1a0a4:	b508      	push	{r3, lr}
    /* TXsym is represented as a float32_t */
#ifdef __KERNEL__
    duration = f32_to_i32(
        f32_mul(attrib->Tpsym, ui32_to_f32(attrib->nsync + attrib->nsfd)), 3, false);
#else
    duration = ceilf(attrib->Tpsym * (attrib->nsync + attrib->nsfd));
   1a0a6:	89c3      	ldrh	r3, [r0, #14]
   1a0a8:	7b02      	ldrb	r2, [r0, #12]
   1a0aa:	ed90 0a00 	vldr	s0, [r0]
   1a0ae:	4413      	add	r3, r2
   1a0b0:	ee07 3a90 	vmov	s15, r3
   1a0b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1a0b8:	ee27 0a80 	vmul.f32	s0, s15, s0
   1a0bc:	f006 fd88 	bl	20bd0 <ceilf>
   1a0c0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
#endif
    return duration;
}
   1a0c4:	ee10 3a10 	vmov	r3, s0
   1a0c8:	b298      	uxth	r0, r3
   1a0ca:	bd08      	pop	{r3, pc}

0001a0cc <dw1000_phy_data_duration>:
 *                  when using Cipher Mode 3 (no payload)
 * @return uint16_t duration in usec
 */
uint16_t
dw1000_phy_data_duration(struct uwb_phy_attributes * attrib, uint16_t nlen)
{
   1a0cc:	b508      	push	{r3, lr}
        tmp = DPL_FLOAT32_MUL(attrib->Tbsym, DPL_FLOAT32_I32_TO_F32(attrib->nphr));
        tmp = DPL_FLOAT32_ADD(tmp, DPL_FLOAT32_MUL(attrib->Tdsym, DPL_FLOAT32_I32_TO_F32(total_payload_bits)));
        duration = f32_to_i32(DPL_FLOAT32_CEIL(tmp), softfloat_round_max, false);
    }
#else
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
   1a0ce:	7c83      	ldrb	r3, [r0, #18]
                          attrib->Tdsym * total_payload_bits);
   1a0d0:	ed90 7a02 	vldr	s14, [r0, #8]
    parity_data_bits += ((8*(nlen+2))/330) * 48;
   1a0d4:	3102      	adds	r1, #2
   1a0d6:	00c9      	lsls	r1, r1, #3
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
   1a0d8:	ee07 3a90 	vmov	s15, r3
    parity_data_bits += ((8*(nlen+2))/330) * 48;
   1a0dc:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   1a0e0:	fbb1 f2f3 	udiv	r2, r1, r3
   1a0e4:	2330      	movs	r3, #48	; 0x30
   1a0e6:	fb02 3303 	mla	r3, r2, r3, r3
    total_payload_bits = 8*(nlen+2) + parity_data_bits;
   1a0ea:	440b      	add	r3, r1
   1a0ec:	ee00 3a10 	vmov	s0, r3
                          attrib->Tdsym * total_payload_bits);
   1a0f0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
   1a0f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                          attrib->Tdsym * total_payload_bits);
   1a0f8:	ee20 0a07 	vmul.f32	s0, s0, s14
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
   1a0fc:	ed90 7a01 	vldr	s14, [r0, #4]
   1a100:	eea7 0a27 	vfma.f32	s0, s14, s15
   1a104:	f006 fd64 	bl	20bd0 <ceilf>
   1a108:	eebd 0ac0 	vcvt.s32.f32	s0, s0
#endif
    return duration;
}
   1a10c:	ee10 3a10 	vmov	r3, s0
   1a110:	b298      	uxth	r0, r3
   1a112:	bd08      	pop	{r3, pc}

0001a114 <dw1000_phy_frame_duration>:
 * @param nlen      The length of the frame to be transmitted/received excluding crc
 * @return uint16_t duration in usec
 */
inline uint16_t
dw1000_phy_frame_duration(struct uwb_phy_attributes * attrib, uint16_t nlen)
{
   1a114:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a116:	4605      	mov	r5, r0
   1a118:	9101      	str	r1, [sp, #4]
    return dw1000_phy_SHR_duration(attrib) + dw1000_phy_data_duration(attrib, nlen);
   1a11a:	f7ff ffc3 	bl	1a0a4 <dw1000_phy_SHR_duration>
   1a11e:	9901      	ldr	r1, [sp, #4]
   1a120:	4604      	mov	r4, r0
   1a122:	4628      	mov	r0, r5
   1a124:	f7ff ffd2 	bl	1a0cc <dw1000_phy_data_duration>
   1a128:	4420      	add	r0, r4
}
   1a12a:	b280      	uxth	r0, r0
   1a12c:	b003      	add	sp, #12
   1a12e:	bd30      	pop	{r4, r5, pc}

0001a130 <dw1000_phy_txrf_power_value>:
bool
dw1000_phy_txrf_power_value(struct _dw1000_dev_instance_t * inst, uint8_t *reg,
                            dpl_float32_t coarse, dpl_float32_t fine)
{
    int c = DPL_FLOAT32_INT(coarse);
    if (!reg) {
   1a130:	2900      	cmp	r1, #0
   1a132:	d050      	beq.n	1a1d6 <dw1000_phy_txrf_power_value+0xa6>
        return false;
    }
    if (DPL_FLOAT32_INT(fine) < 0 || DPL_FLOAT32_INT(fine) > 32) {
   1a134:	eefd 7ae0 	vcvt.s32.f32	s15, s1
   1a138:	ee17 3a90 	vmov	r3, s15
   1a13c:	2b20      	cmp	r3, #32
   1a13e:	d84a      	bhi.n	1a1d6 <dw1000_phy_txrf_power_value+0xa6>
    int c = DPL_FLOAT32_INT(coarse);
   1a140:	eebd 0ac0 	vcvt.s32.f32	s0, s0
        return false;
    }

    switch (c) {
   1a144:	ee10 3a10 	vmov	r3, s0
   1a148:	2b12      	cmp	r3, #18
   1a14a:	d844      	bhi.n	1a1d6 <dw1000_phy_txrf_power_value+0xa6>
   1a14c:	e8df f003 	tbb	[pc, r3]
   1a150:	3343433b 	.word	0x3343433b
   1a154:	432b4343 	.word	0x432b4343
   1a158:	43432343 	.word	0x43432343
   1a15c:	1343431b 	.word	0x1343431b
   1a160:	4343      	.short	0x4343
   1a162:	0a          	.byte	0x0a
   1a163:	00          	.byte	0x00
    case(18): *reg = dw1000_power_valuef(DW1000_txrf_config_18db, fine);break;
   1a164:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1a168:	eefd 7ae0 	vcvt.s32.f32	s15, s1
   1a16c:	ee17 3a90 	vmov	r3, s15
    case(15): *reg = dw1000_power_valuef(DW1000_txrf_config_15db, fine);break;
   1a170:	700b      	strb	r3, [r1, #0]
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
    default:
        return false;
    }
    return true;
   1a172:	2001      	movs	r0, #1
    case(15): *reg = dw1000_power_valuef(DW1000_txrf_config_15db, fine);break;
   1a174:	4770      	bx	lr
   1a176:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1a17a:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1a17e:	ee10 3a90 	vmov	r3, s1
   1a182:	3320      	adds	r3, #32
   1a184:	e7f4      	b.n	1a170 <dw1000_phy_txrf_power_value+0x40>
    case(12): *reg = dw1000_power_valuef(DW1000_txrf_config_12db, fine);break;
   1a186:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1a18a:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1a18e:	ee10 3a90 	vmov	r3, s1
   1a192:	3340      	adds	r3, #64	; 0x40
   1a194:	e7ec      	b.n	1a170 <dw1000_phy_txrf_power_value+0x40>
    case(9):  *reg = dw1000_power_valuef(DW1000_txrf_config_9db, fine);break;
   1a196:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1a19a:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1a19e:	ee10 3a90 	vmov	r3, s1
   1a1a2:	3360      	adds	r3, #96	; 0x60
   1a1a4:	e7e4      	b.n	1a170 <dw1000_phy_txrf_power_value+0x40>
    case(6):  *reg = dw1000_power_valuef(DW1000_txrf_config_6db, fine);break;
   1a1a6:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1a1aa:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1a1ae:	ee10 3a90 	vmov	r3, s1
   1a1b2:	3b80      	subs	r3, #128	; 0x80
   1a1b4:	e7dc      	b.n	1a170 <dw1000_phy_txrf_power_value+0x40>
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
   1a1b6:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1a1ba:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1a1be:	ee10 3a90 	vmov	r3, s1
   1a1c2:	3b60      	subs	r3, #96	; 0x60
   1a1c4:	e7d4      	b.n	1a170 <dw1000_phy_txrf_power_value+0x40>
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
   1a1c6:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1a1ca:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1a1ce:	ee10 3a90 	vmov	r3, s1
   1a1d2:	3b40      	subs	r3, #64	; 0x40
   1a1d4:	e7cc      	b.n	1a170 <dw1000_phy_txrf_power_value+0x40>
    switch (c) {
   1a1d6:	2000      	movs	r0, #0
}
   1a1d8:	4770      	bx	lr

0001a1da <dw1000_phy_event_cnt_ctrl>:
 * @param reset   If true, reset counters
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
dw1000_phy_event_cnt_ctrl(struct _dw1000_dev_instance_t *inst, bool enable, bool reset)
{
   1a1da:	b530      	push	{r4, r5, lr}
   1a1dc:	4604      	mov	r4, r0
   1a1de:	b085      	sub	sp, #20
   1a1e0:	460d      	mov	r5, r1
    if (reset) {
   1a1e2:	b14a      	cbz	r2, 1a1f8 <dw1000_phy_event_cnt_ctrl+0x1e>
        /* A reset command must also write enable = 0 or the clearing will not happen */
        dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, EVC_CLR, sizeof(uint32_t));
   1a1e4:	2304      	movs	r3, #4
   1a1e6:	2202      	movs	r2, #2
   1a1e8:	9302      	str	r3, [sp, #8]
   1a1ea:	2300      	movs	r3, #0
   1a1ec:	e9cd 2300 	strd	r2, r3, [sp]
   1a1f0:	212f      	movs	r1, #47	; 0x2f
   1a1f2:	2200      	movs	r2, #0
   1a1f4:	f7fd f8e0 	bl	173b8 <dw1000_write_reg>
    }

    /* Intentionally writing 32 bits here and above as the register requires at least 16 bits
     * written to take effect. */
    dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, (enable) ? EVC_EN : 0, sizeof(uint32_t));
   1a1f8:	2304      	movs	r3, #4
   1a1fa:	2200      	movs	r2, #0
   1a1fc:	4620      	mov	r0, r4
   1a1fe:	e9cd 5200 	strd	r5, r2, [sp]
   1a202:	9302      	str	r3, [sp, #8]
   1a204:	212f      	movs	r1, #47	; 0x2f
   1a206:	f7fd f8d7 	bl	173b8 <dw1000_write_reg>
    return inst->uwb_dev.status;
}
   1a20a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1a20e:	b005      	add	sp, #20
   1a210:	bd30      	pop	{r4, r5, pc}

0001a212 <dw1000_phy_event_cnt_read>:
 * @param res     Pointer to struct uwb_dev_evcnt
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
dw1000_phy_event_cnt_read(struct _dw1000_dev_instance_t *inst, struct uwb_dev_evcnt *res)
{
   1a212:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a214:	4605      	mov	r5, r0
    if (!res) {
   1a216:	460c      	mov	r4, r1
   1a218:	b919      	cbnz	r1, 1a222 <dw1000_phy_event_cnt_read+0x10>
    res->event_count1 &= ((EVC_FCE_MASK << 16) | EVC_FCG_MASK);
    res->event_count2 &= ((EVC_OVR_MASK << 16) | EVC_FFR_MASK);
    res->event_count3 &= ((EVC_PTO_MASK << 16) | EVC_STO_MASK);
    res->event_count4 &= ((EVC_TXFS_MASK << 16) | EVC_FWTO_MASK);
    res->event_count5 &= ((EVC_TPW_MASK << 16) | EVC_HPW_MASK);
    return inst->uwb_dev.status;
   1a21a:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
}
   1a21e:	b003      	add	sp, #12
   1a220:	bd30      	pop	{r4, r5, pc}
    dw1000_read(inst, DIG_DIAG_ID, EVC_PHE_OFFSET, (uint8_t*)res,
   1a222:	2318      	movs	r3, #24
   1a224:	9300      	str	r3, [sp, #0]
   1a226:	2204      	movs	r2, #4
   1a228:	460b      	mov	r3, r1
   1a22a:	212f      	movs	r1, #47	; 0x2f
   1a22c:	f7fc ffd4 	bl	171d8 <dw1000_read>
    res->event_count0 &= ((EVC_RSE_MASK << 16) | EVC_PHE_MASK);
   1a230:	6823      	ldr	r3, [r4, #0]
   1a232:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1a236:	6023      	str	r3, [r4, #0]
    res->event_count1 &= ((EVC_FCE_MASK << 16) | EVC_FCG_MASK);
   1a238:	6863      	ldr	r3, [r4, #4]
   1a23a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1a23e:	6063      	str	r3, [r4, #4]
    res->event_count2 &= ((EVC_OVR_MASK << 16) | EVC_FFR_MASK);
   1a240:	68a3      	ldr	r3, [r4, #8]
   1a242:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1a246:	60a3      	str	r3, [r4, #8]
    res->event_count3 &= ((EVC_PTO_MASK << 16) | EVC_STO_MASK);
   1a248:	68e3      	ldr	r3, [r4, #12]
   1a24a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1a24e:	60e3      	str	r3, [r4, #12]
    res->event_count4 &= ((EVC_TXFS_MASK << 16) | EVC_FWTO_MASK);
   1a250:	6923      	ldr	r3, [r4, #16]
   1a252:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1a256:	6123      	str	r3, [r4, #16]
    res->event_count5 &= ((EVC_TPW_MASK << 16) | EVC_HPW_MASK);
   1a258:	6963      	ldr	r3, [r4, #20]
   1a25a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1a25e:	6163      	str	r3, [r4, #20]
   1a260:	e7db      	b.n	1a21a <dw1000_phy_event_cnt_read+0x8>
	...

0001a264 <dw1000_pkg_init>:
 *
 * @param void
 * @return void
 */
void dw1000_pkg_init(void)
{
   1a264:	b508      	push	{r3, lr}
#if defined(MYNEWT)

#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %lu,\"msg\": \"dw1000_pkg_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   1a266:	f7f7 f803 	bl	11270 <dpl_cputime_get32>
   1a26a:	4601      	mov	r1, r0
   1a26c:	4805      	ldr	r0, [pc, #20]	; (1a284 <dw1000_pkg_init+0x20>)
   1a26e:	f7f5 fcb5 	bl	fbdc <printf>
#endif

#if MYNEWT_VAL(DW1000_DEVICE_0)
    dw1000_dev_config(hal_dw1000_inst(0));
   1a272:	2000      	movs	r0, #0
   1a274:	f7fd fc2e 	bl	17ad4 <hal_dw1000_inst>
   1a278:	f7fd fa80 	bl	1777c <dw1000_dev_config>
#endif

#if MYNEWT_VAL(DW1000_CLI)
    dw1000_cli_register();
#endif
}
   1a27c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dw1000_cli_register();
   1a280:	f000 ba14 	b.w	1a6ac <dw1000_cli_register>
   1a284:	0002369a 	.word	0x0002369a

0001a288 <dw1000_pkg_down>:

int dw1000_pkg_down(int reason)
{
   1a288:	b510      	push	{r4, lr}
   1a28a:	4604      	mov	r4, r0
    struct os_dev *dev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"dw1000_pkg_down\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   1a28c:	f7f6 fff0 	bl	11270 <dpl_cputime_get32>
   1a290:	4601      	mov	r1, r0
   1a292:	480d      	ldr	r0, [pc, #52]	; (1a2c8 <dw1000_pkg_down+0x40>)
   1a294:	f7f5 fca2 	bl	fbdc <printf>
#endif

    dev = os_dev_lookup("dw1000_0");
   1a298:	480c      	ldr	r0, [pc, #48]	; (1a2cc <dw1000_pkg_down+0x44>)
   1a29a:	f7ef f8df 	bl	945c <os_dev_lookup>
    if (dev) {
   1a29e:	b108      	cbz	r0, 1a2a4 <dw1000_pkg_down+0x1c>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   1a2a0:	f7fd fbd6 	bl	17a50 <dw1000_dev_deinit>
    }
    dev = os_dev_lookup("dw1000_1");
   1a2a4:	480a      	ldr	r0, [pc, #40]	; (1a2d0 <dw1000_pkg_down+0x48>)
   1a2a6:	f7ef f8d9 	bl	945c <os_dev_lookup>
    if (dev) {
   1a2aa:	b108      	cbz	r0, 1a2b0 <dw1000_pkg_down+0x28>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   1a2ac:	f7fd fbd0 	bl	17a50 <dw1000_dev_deinit>
    }
    dev = os_dev_lookup("dw1000_2");
   1a2b0:	4808      	ldr	r0, [pc, #32]	; (1a2d4 <dw1000_pkg_down+0x4c>)
   1a2b2:	f7ef f8d3 	bl	945c <os_dev_lookup>
    if (dev) {
   1a2b6:	b108      	cbz	r0, 1a2bc <dw1000_pkg_down+0x34>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   1a2b8:	f7fd fbca 	bl	17a50 <dw1000_dev_deinit>
    }
#if MYNEWT_VAL(DW1000_CLI)
    dw1000_cli_down(reason);
   1a2bc:	4620      	mov	r0, r4
   1a2be:	f000 f9fb 	bl	1a6b8 <dw1000_cli_down>
#endif
    return 0;
}
   1a2c2:	2000      	movs	r0, #0
   1a2c4:	bd10      	pop	{r4, pc}
   1a2c6:	bf00      	nop
   1a2c8:	000236c3 	.word	0x000236c3
   1a2cc:	000233c7 	.word	0x000233c7
   1a2d0:	000236ec 	.word	0x000236ec
   1a2d4:	000236f5 	.word	0x000236f5

0001a2d8 <dw1000_cli_dump_registers>:
static struct shell_cmd shell_dw1000_cmd =
    SHELL_CMD_EXT("dw1000", dw1000_cli_cmd, &cmd_dw1000_help);

void
dw1000_cli_dump_registers(struct _dw1000_dev_instance_t * inst, struct streamer *streamer)
{
   1a2d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%010llX\"}\n",i,reg&0xffffffffffll);
            break;
        default:
            l=8;
            reg = dw1000_read_reg(inst, i, 0, l);
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%016llX\"}\n",i,
   1a2dc:	4f3a      	ldr	r7, [pc, #232]	; (1a3c8 <dw1000_cli_dump_registers+0xf0>)
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%010llX\"}\n",i,reg&0xffffffffffll);
   1a2de:	f8df 8100 	ldr.w	r8, [pc, #256]	; 1a3e0 <dw1000_cli_dump_registers+0x108>
        if (i==0x05 || i==0x07 || i==0x0B ||
   1a2e2:	f8df 9100 	ldr.w	r9, [pc, #256]	; 1a3e4 <dw1000_cli_dump_registers+0x10c>
{
   1a2e6:	4606      	mov	r6, r0
   1a2e8:	460d      	mov	r5, r1
    for(i=0; i<0x37; i++)
   1a2ea:	2400      	movs	r4, #0
        if (i==0x05 || i==0x07 || i==0x0B ||
   1a2ec:	1f63      	subs	r3, r4, #5
   1a2ee:	2b1d      	cmp	r3, #29
   1a2f0:	d918      	bls.n	1a324 <dw1000_cli_dump_registers+0x4c>
            i==0x20 || i==0x22 || i==0x29 ||
   1a2f2:	f1a4 0329 	sub.w	r3, r4, #41	; 0x29
   1a2f6:	2b0c      	cmp	r3, #12
   1a2f8:	d918      	bls.n	1a32c <dw1000_cli_dump_registers+0x54>
        switch (i) {
   1a2fa:	b2a1      	uxth	r1, r4
   1a2fc:	2c1f      	cmp	r4, #31
   1a2fe:	d855      	bhi.n	1a3ac <dw1000_cli_dump_registers+0xd4>
   1a300:	e8df f004 	tbb	[pc, r4]
   1a304:	3b54543b 	.word	0x3b54543b
   1a308:	5449543b 	.word	0x5449543b
   1a30c:	54495449 	.word	0x54495449
   1a310:	49493b3b 	.word	0x49493b3b
   1a314:	3b54543b 	.word	0x3b54543b
   1a318:	49544949 	.word	0x49544949
   1a31c:	543b493b 	.word	0x543b493b
   1a320:	3b3b3b54 	.word	0x3b3b3b54
        if (i==0x05 || i==0x07 || i==0x0B ||
   1a324:	fa29 f303 	lsr.w	r3, r9, r3
   1a328:	07db      	lsls	r3, r3, #31
   1a32a:	d5e6      	bpl.n	1a2fa <dw1000_cli_dump_registers+0x22>
    for(i=0; i<0x37; i++)
   1a32c:	3401      	adds	r4, #1
   1a32e:	2c37      	cmp	r4, #55	; 0x37
   1a330:	d1dc      	bne.n	1a2ec <dw1000_cli_dump_registers+0x14>
                           reg&0xffffffffffffffffll);
        }
    }
    streamer_printf(streamer, "{\"inst->irq_sem\"=%d}\n", dpl_sem_get_count(&inst->uwb_dev.irq_sem));
   1a332:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
   1a334:	4925      	ldr	r1, [pc, #148]	; (1a3cc <dw1000_cli_dump_registers+0xf4>)
   1a336:	4628      	mov	r0, r5
   1a338:	f7f7 f895 	bl	11466 <streamer_printf>
    streamer_printf(streamer, "{\"inst->tx_sem\"=%d}\n", dpl_sem_get_count(&inst->tx_sem));
   1a33c:	4924      	ldr	r1, [pc, #144]	; (1a3d0 <dw1000_cli_dump_registers+0xf8>)
   1a33e:	f8b6 2566 	ldrh.w	r2, [r6, #1382]	; 0x566
   1a342:	4628      	mov	r0, r5
   1a344:	f7f7 f88f 	bl	11466 <streamer_printf>
#if MYNEWT_VAL(UWB_RNG_ENABLED)
    struct uwb_rng_instance *rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(&inst->uwb_dev, UWBEXT_RNG);
   1a348:	2104      	movs	r1, #4
   1a34a:	4630      	mov	r0, r6
   1a34c:	f7ee fbf0 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    if (rng)
   1a350:	b128      	cbz	r0, 1a35e <dw1000_cli_dump_registers+0x86>
        streamer_printf(streamer, "{\"rng->sem\"=%d}\n", dpl_sem_get_count(&rng->sem));
   1a352:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
   1a356:	491f      	ldr	r1, [pc, #124]	; (1a3d4 <dw1000_cli_dump_registers+0xfc>)
   1a358:	4628      	mov	r0, r5
   1a35a:	f7f7 f884 	bl	11466 <streamer_printf>
#endif

#if defined(MYNEWT)
#if MYNEWT_VAL(UWB_CCP_ENABLED)
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(&inst->uwb_dev, UWBEXT_CCP);
   1a35e:	2101      	movs	r1, #1
   1a360:	4630      	mov	r0, r6
   1a362:	f7ee fbe5 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    if (ccp)
   1a366:	b358      	cbz	r0, 1a3c0 <dw1000_cli_dump_registers+0xe8>
        streamer_printf(streamer, "{\"ccp->sem\"=%d}\n", dpl_sem_get_count(&ccp->sem));
   1a368:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
   1a36c:	491a      	ldr	r1, [pc, #104]	; (1a3d8 <dw1000_cli_dump_registers+0x100>)
   1a36e:	4628      	mov	r0, r5
#endif
#endif
}
   1a370:	b003      	add	sp, #12
   1a372:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        streamer_printf(streamer, "{\"ccp->sem\"=%d}\n", dpl_sem_get_count(&ccp->sem));
   1a376:	f7f7 b876 	b.w	11466 <streamer_printf>
            reg = dw1000_read_reg(inst, i, 0, 4);
   1a37a:	2304      	movs	r3, #4
   1a37c:	2200      	movs	r2, #0
   1a37e:	4630      	mov	r0, r6
   1a380:	f7fc ffc8 	bl	17314 <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%08llX\"}\n",i,reg&0xffffffff);
   1a384:	2300      	movs	r3, #0
   1a386:	4915      	ldr	r1, [pc, #84]	; (1a3dc <dw1000_cli_dump_registers+0x104>)
   1a388:	9000      	str	r0, [sp, #0]
   1a38a:	9301      	str	r3, [sp, #4]
   1a38c:	4622      	mov	r2, r4
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%016llX\"}\n",i,
   1a38e:	4628      	mov	r0, r5
   1a390:	f7f7 f869 	bl	11466 <streamer_printf>
   1a394:	e7ca      	b.n	1a32c <dw1000_cli_dump_registers+0x54>
            reg = dw1000_read_reg(inst, i, 0, 5);
   1a396:	2200      	movs	r2, #0
   1a398:	2305      	movs	r3, #5
   1a39a:	4630      	mov	r0, r6
   1a39c:	f7fc ffba 	bl	17314 <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%010llX\"}\n",i,reg&0xffffffffffll);
   1a3a0:	b2c9      	uxtb	r1, r1
   1a3a2:	e9cd 0100 	strd	r0, r1, [sp]
   1a3a6:	4622      	mov	r2, r4
   1a3a8:	4641      	mov	r1, r8
   1a3aa:	e7f0      	b.n	1a38e <dw1000_cli_dump_registers+0xb6>
            reg = dw1000_read_reg(inst, i, 0, l);
   1a3ac:	2200      	movs	r2, #0
   1a3ae:	2308      	movs	r3, #8
   1a3b0:	4630      	mov	r0, r6
   1a3b2:	f7fc ffaf 	bl	17314 <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%016llX\"}\n",i,
   1a3b6:	4622      	mov	r2, r4
   1a3b8:	e9cd 0100 	strd	r0, r1, [sp]
   1a3bc:	4639      	mov	r1, r7
   1a3be:	e7e6      	b.n	1a38e <dw1000_cli_dump_registers+0xb6>
}
   1a3c0:	b003      	add	sp, #12
   1a3c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a3c6:	bf00      	nop
   1a3c8:	00023733 	.word	0x00023733
   1a3cc:	0002374e 	.word	0x0002374e
   1a3d0:	00023764 	.word	0x00023764
   1a3d4:	00023779 	.word	0x00023779
   1a3d8:	0002378a 	.word	0x0002378a
   1a3dc:	000236fe 	.word	0x000236fe
   1a3e0:	00023718 	.word	0x00023718
   1a3e4:	28c20045 	.word	0x28c20045

0001a3e8 <dw1000_cli_dump_address>:

void
dw1000_cli_dump_address(struct _dw1000_dev_instance_t * inst, uint32_t addr, uint16_t length, struct streamer *streamer)
{
   1a3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a3ec:	4680      	mov	r8, r0
   1a3ee:	b094      	sub	sp, #80	; 0x50
   1a3f0:	460d      	mov	r5, r1
   1a3f2:	4617      	mov	r7, r2
#define DUMP_STEP (16)
    int i, step = DUMP_STEP;
    uint8_t b[DUMP_STEP];
    streamer_printf(streamer, "Dump starting at %06"PRIX32":\n", addr);
   1a3f4:	4618      	mov	r0, r3
   1a3f6:	460a      	mov	r2, r1
   1a3f8:	4928      	ldr	r1, [pc, #160]	; (1a49c <dw1000_cli_dump_address+0xb4>)
    for (i=0;i<length;i+=step) {
        memset(b,0,sizeof(b));
        dw1000_read(inst, addr, i, b, step);

        streamer_printf(streamer, "%04X: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n",
   1a3fa:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1a4a0 <dw1000_cli_dump_address+0xb8>
{
   1a3fe:	461e      	mov	r6, r3
    streamer_printf(streamer, "Dump starting at %06"PRIX32":\n", addr);
   1a400:	f7f7 f831 	bl	11466 <streamer_printf>
    for (i=0;i<length;i+=step) {
   1a404:	2400      	movs	r4, #0
        memset(b,0,sizeof(b));
   1a406:	f04f 0910 	mov.w	r9, #16
    for (i=0;i<length;i+=step) {
   1a40a:	42a7      	cmp	r7, r4
   1a40c:	dc02      	bgt.n	1a414 <dw1000_cli_dump_address+0x2c>
               i, b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7],
               b[8], b[9], b[10], b[11], b[12], b[13], b[14], b[15]);
    }
}
   1a40e:	b014      	add	sp, #80	; 0x50
   1a410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memset(b,0,sizeof(b));
   1a414:	2210      	movs	r2, #16
   1a416:	2100      	movs	r1, #0
   1a418:	a810      	add	r0, sp, #64	; 0x40
   1a41a:	f7f5 f8f0 	bl	f5fe <memset>
        dw1000_read(inst, addr, i, b, step);
   1a41e:	b2a2      	uxth	r2, r4
   1a420:	ab10      	add	r3, sp, #64	; 0x40
   1a422:	b2a9      	uxth	r1, r5
   1a424:	f8cd 9000 	str.w	r9, [sp]
   1a428:	4640      	mov	r0, r8
   1a42a:	f7fc fed5 	bl	171d8 <dw1000_read>
        streamer_printf(streamer, "%04X: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n",
   1a42e:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   1a432:	930e      	str	r3, [sp, #56]	; 0x38
   1a434:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
   1a438:	930d      	str	r3, [sp, #52]	; 0x34
   1a43a:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
   1a43e:	930c      	str	r3, [sp, #48]	; 0x30
   1a440:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   1a444:	930b      	str	r3, [sp, #44]	; 0x2c
   1a446:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
   1a44a:	930a      	str	r3, [sp, #40]	; 0x28
   1a44c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a450:	9309      	str	r3, [sp, #36]	; 0x24
   1a452:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   1a456:	9308      	str	r3, [sp, #32]
   1a458:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1a45c:	9307      	str	r3, [sp, #28]
   1a45e:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   1a462:	9306      	str	r3, [sp, #24]
   1a464:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
   1a468:	9305      	str	r3, [sp, #20]
   1a46a:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
   1a46e:	9304      	str	r3, [sp, #16]
   1a470:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   1a474:	9303      	str	r3, [sp, #12]
   1a476:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   1a47a:	9302      	str	r3, [sp, #8]
   1a47c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1a480:	9301      	str	r3, [sp, #4]
   1a482:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1a486:	9300      	str	r3, [sp, #0]
   1a488:	4622      	mov	r2, r4
   1a48a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1a48e:	4651      	mov	r1, sl
   1a490:	4630      	mov	r0, r6
   1a492:	f7f6 ffe8 	bl	11466 <streamer_printf>
    for (i=0;i<length;i+=step) {
   1a496:	3410      	adds	r4, #16
   1a498:	e7b7      	b.n	1a40a <dw1000_cli_dump_address+0x22>
   1a49a:	bf00      	nop
   1a49c:	0002379b 	.word	0x0002379b
   1a4a0:	000237b4 	.word	0x000237b4

0001a4a4 <dw1000_cli_cmd>:
}
#endif

static int
dw1000_cli_cmd(const struct shell_cmd *cmd, int argc, char **argv, struct streamer *streamer)
{
   1a4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef __KERNEL__
    struct _dw1000_dev_instance_t * inst = 0;
    uint16_t inst_n;

    if (argc < 2) {
   1a4a8:	2901      	cmp	r1, #1
{
   1a4aa:	b086      	sub	sp, #24
   1a4ac:	460e      	mov	r6, r1
   1a4ae:	4614      	mov	r4, r2
   1a4b0:	461d      	mov	r5, r3
    if (argc < 2) {
   1a4b2:	dc04      	bgt.n	1a4be <dw1000_cli_cmd+0x1a>
    streamer_printf(streamer, "Too few args\n");
   1a4b4:	4974      	ldr	r1, [pc, #464]	; (1a688 <dw1000_cli_cmd+0x1e4>)
        console_no_ticks();
        dw1000_cli_backtrace(inst, d, streamer);
        console_yes_ticks();
#endif
    } else {
        streamer_printf(streamer, "Unknown cmd\n");
   1a4b6:	4628      	mov	r0, r5
   1a4b8:	f7f6 ffd5 	bl	11466 <streamer_printf>
   1a4bc:	e019      	b.n	1a4f2 <dw1000_cli_cmd+0x4e>
    if (!strcmp(argv[1], "dump")) {
   1a4be:	6857      	ldr	r7, [r2, #4]
   1a4c0:	4972      	ldr	r1, [pc, #456]	; (1a68c <dw1000_cli_cmd+0x1e8>)
   1a4c2:	4638      	mov	r0, r7
   1a4c4:	f7f5 f8c0 	bl	f648 <strcmp>
   1a4c8:	4602      	mov	r2, r0
   1a4ca:	b9b0      	cbnz	r0, 1a4fa <dw1000_cli_cmd+0x56>
        if (argc < 3) {
   1a4cc:	2e02      	cmp	r6, #2
   1a4ce:	d004      	beq.n	1a4da <dw1000_cli_cmd+0x36>
            inst_n = strtol(argv[2], NULL, 0);
   1a4d0:	4601      	mov	r1, r0
   1a4d2:	68a0      	ldr	r0, [r4, #8]
   1a4d4:	f003 fe2b 	bl	1e12e <strtol>
   1a4d8:	b282      	uxth	r2, r0
        inst = hal_dw1000_inst(inst_n);
   1a4da:	b2d0      	uxtb	r0, r2
   1a4dc:	f7fd fafa 	bl	17ad4 <hal_dw1000_inst>
   1a4e0:	9005      	str	r0, [sp, #20]
        console_no_ticks();
   1a4e2:	f7f8 f917 	bl	12714 <console_no_ticks>
        dw1000_cli_dump_registers(inst, streamer);
   1a4e6:	9805      	ldr	r0, [sp, #20]
   1a4e8:	4629      	mov	r1, r5
   1a4ea:	f7ff fef5 	bl	1a2d8 <dw1000_cli_dump_registers>
        console_yes_ticks();
   1a4ee:	f7f8 f917 	bl	12720 <console_yes_ticks>
    }
#endif  /* ifndef __KERNEL__ */

    return 0;
}
   1a4f2:	2000      	movs	r0, #0
   1a4f4:	b006      	add	sp, #24
   1a4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (!strcmp(argv[1], "da")) {
   1a4fa:	4965      	ldr	r1, [pc, #404]	; (1a690 <dw1000_cli_cmd+0x1ec>)
   1a4fc:	4638      	mov	r0, r7
   1a4fe:	f7f5 f8a3 	bl	f648 <strcmp>
   1a502:	4602      	mov	r2, r0
   1a504:	bb08      	cbnz	r0, 1a54a <dw1000_cli_cmd+0xa6>
        if (argc<3) {
   1a506:	2e02      	cmp	r6, #2
   1a508:	d0f3      	beq.n	1a4f2 <dw1000_cli_cmd+0x4e>
        inst_n = strtol(argv[2], NULL, 0);
   1a50a:	4601      	mov	r1, r0
   1a50c:	9005      	str	r0, [sp, #20]
   1a50e:	68a0      	ldr	r0, [r4, #8]
   1a510:	f003 fe0d 	bl	1e12e <strtol>
        uint32_t addr = strtol(argv[3], NULL, 0);
   1a514:	9a05      	ldr	r2, [sp, #20]
        inst_n = strtol(argv[2], NULL, 0);
   1a516:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   1a518:	4611      	mov	r1, r2
   1a51a:	68e0      	ldr	r0, [r4, #12]
   1a51c:	f003 fe07 	bl	1e12e <strtol>
        if (argc>4) {
   1a520:	2e04      	cmp	r6, #4
   1a522:	9a05      	ldr	r2, [sp, #20]
        uint32_t addr = strtol(argv[3], NULL, 0);
   1a524:	4607      	mov	r7, r0
        if (argc>4) {
   1a526:	dd0e      	ble.n	1a546 <dw1000_cli_cmd+0xa2>
            length = strtol(argv[4], NULL, 0);
   1a528:	6920      	ldr	r0, [r4, #16]
   1a52a:	4611      	mov	r1, r2
   1a52c:	f003 fdff 	bl	1e12e <strtol>
   1a530:	4604      	mov	r4, r0
        inst = hal_dw1000_inst(inst_n);
   1a532:	fa5f f088 	uxtb.w	r0, r8
   1a536:	f7fd facd 	bl	17ad4 <hal_dw1000_inst>
        dw1000_cli_dump_address(inst, addr, length, streamer);
   1a53a:	462b      	mov	r3, r5
   1a53c:	b2a2      	uxth	r2, r4
   1a53e:	4639      	mov	r1, r7
   1a540:	f7ff ff52 	bl	1a3e8 <dw1000_cli_dump_address>
   1a544:	e7d5      	b.n	1a4f2 <dw1000_cli_cmd+0x4e>
        int length = 128;
   1a546:	2480      	movs	r4, #128	; 0x80
   1a548:	e7f3      	b.n	1a532 <dw1000_cli_cmd+0x8e>
    } else if (!strcmp(argv[1], "cw")) {
   1a54a:	4952      	ldr	r1, [pc, #328]	; (1a694 <dw1000_cli_cmd+0x1f0>)
   1a54c:	4638      	mov	r0, r7
   1a54e:	f7f5 f87b 	bl	f648 <strcmp>
   1a552:	4602      	mov	r2, r0
   1a554:	bb80      	cbnz	r0, 1a5b8 <dw1000_cli_cmd+0x114>
        inst_n = strtol(argv[2], NULL, 0);
   1a556:	4601      	mov	r1, r0
   1a558:	9005      	str	r0, [sp, #20]
   1a55a:	68a0      	ldr	r0, [r4, #8]
   1a55c:	f003 fde7 	bl	1e12e <strtol>
   1a560:	4606      	mov	r6, r0
        inst = hal_dw1000_inst(inst_n);
   1a562:	b2c0      	uxtb	r0, r0
   1a564:	f7fd fab6 	bl	17ad4 <hal_dw1000_inst>
   1a568:	4604      	mov	r4, r0
        hal_gpio_irq_disable(inst->irq_pin);
   1a56a:	f890 055d 	ldrb.w	r0, [r0, #1373]	; 0x55d
   1a56e:	f7ee fc97 	bl	8ea0 <hal_gpio_irq_disable>
        dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t));
   1a572:	2304      	movs	r3, #4
   1a574:	2000      	movs	r0, #0
   1a576:	2100      	movs	r1, #0
   1a578:	e9cd 0100 	strd	r0, r1, [sp]
   1a57c:	9a05      	ldr	r2, [sp, #20]
   1a57e:	9302      	str	r3, [sp, #8]
   1a580:	4620      	mov	r0, r4
   1a582:	210e      	movs	r1, #14
   1a584:	f7fc ff18 	bl	173b8 <dw1000_write_reg>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TRXOFF, sizeof(uint8_t));
   1a588:	2301      	movs	r3, #1
   1a58a:	2040      	movs	r0, #64	; 0x40
   1a58c:	2100      	movs	r1, #0
   1a58e:	e9cd 0100 	strd	r0, r1, [sp]
   1a592:	9a05      	ldr	r2, [sp, #20]
   1a594:	9302      	str	r3, [sp, #8]
   1a596:	4620      	mov	r0, r4
   1a598:	210d      	movs	r1, #13
   1a59a:	f7fc ff0d 	bl	173b8 <dw1000_write_reg>
        dw1000_configcwmode(inst, inst->uwb_dev.config.channel);
   1a59e:	f894 150c 	ldrb.w	r1, [r4, #1292]	; 0x50c
   1a5a2:	4620      	mov	r0, r4
   1a5a4:	f7ff f9cc 	bl	19940 <dw1000_configcwmode>
        streamer_printf(streamer, "Device[%d] now in CW mode on ch %d. Reset to continue\n",
   1a5a8:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
   1a5ac:	493a      	ldr	r1, [pc, #232]	; (1a698 <dw1000_cli_cmd+0x1f4>)
   1a5ae:	b2b2      	uxth	r2, r6
   1a5b0:	4628      	mov	r0, r5
   1a5b2:	f7f6 ff58 	bl	11466 <streamer_printf>
   1a5b6:	e79c      	b.n	1a4f2 <dw1000_cli_cmd+0x4e>
    } else if (!strcmp(argv[1], "wr")) {
   1a5b8:	4938      	ldr	r1, [pc, #224]	; (1a69c <dw1000_cli_cmd+0x1f8>)
   1a5ba:	4638      	mov	r0, r7
   1a5bc:	f7f5 f844 	bl	f648 <strcmp>
   1a5c0:	4602      	mov	r2, r0
   1a5c2:	bb60      	cbnz	r0, 1a61e <dw1000_cli_cmd+0x17a>
        if (argc < 7) {
   1a5c4:	2e06      	cmp	r6, #6
   1a5c6:	dd94      	ble.n	1a4f2 <dw1000_cli_cmd+0x4e>
        inst_n = strtol(argv[2], NULL, 0);
   1a5c8:	4601      	mov	r1, r0
   1a5ca:	9005      	str	r0, [sp, #20]
   1a5cc:	68a0      	ldr	r0, [r4, #8]
   1a5ce:	f003 fdae 	bl	1e12e <strtol>
        uint32_t addr = strtol(argv[3], NULL, 0);
   1a5d2:	9a05      	ldr	r2, [sp, #20]
        inst_n = strtol(argv[2], NULL, 0);
   1a5d4:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   1a5d6:	4611      	mov	r1, r2
   1a5d8:	68e0      	ldr	r0, [r4, #12]
   1a5da:	f003 fda8 	bl	1e12e <strtol>
        uint32_t sub  = strtol(argv[4], NULL, 0);
   1a5de:	9a05      	ldr	r2, [sp, #20]
        uint32_t addr = strtol(argv[3], NULL, 0);
   1a5e0:	4606      	mov	r6, r0
        uint32_t sub  = strtol(argv[4], NULL, 0);
   1a5e2:	4611      	mov	r1, r2
   1a5e4:	6920      	ldr	r0, [r4, #16]
   1a5e6:	f003 fda2 	bl	1e12e <strtol>
        uint64_t val  = strtol(argv[5], NULL, 0);
   1a5ea:	9a05      	ldr	r2, [sp, #20]
        uint32_t sub  = strtol(argv[4], NULL, 0);
   1a5ec:	4607      	mov	r7, r0
        uint64_t val  = strtol(argv[5], NULL, 0);
   1a5ee:	4611      	mov	r1, r2
   1a5f0:	6960      	ldr	r0, [r4, #20]
   1a5f2:	f003 fd9c 	bl	1e12e <strtol>
        int length = strtol(argv[6], NULL, 0);
   1a5f6:	9a05      	ldr	r2, [sp, #20]
        uint64_t val  = strtol(argv[5], NULL, 0);
   1a5f8:	4605      	mov	r5, r0
        int length = strtol(argv[6], NULL, 0);
   1a5fa:	4611      	mov	r1, r2
   1a5fc:	69a0      	ldr	r0, [r4, #24]
   1a5fe:	f003 fd96 	bl	1e12e <strtol>
   1a602:	4604      	mov	r4, r0
        dw1000_write_reg(hal_dw1000_inst(inst_n), addr, sub, val, length);
   1a604:	fa5f f088 	uxtb.w	r0, r8
   1a608:	f7fd fa64 	bl	17ad4 <hal_dw1000_inst>
        uint64_t val  = strtol(argv[5], NULL, 0);
   1a60c:	17eb      	asrs	r3, r5, #31
   1a60e:	e9cd 5300 	strd	r5, r3, [sp]
        dw1000_write_reg(hal_dw1000_inst(inst_n), addr, sub, val, length);
   1a612:	9402      	str	r4, [sp, #8]
   1a614:	b2ba      	uxth	r2, r7
   1a616:	b2b1      	uxth	r1, r6
   1a618:	f7fc fece 	bl	173b8 <dw1000_write_reg>
   1a61c:	e769      	b.n	1a4f2 <dw1000_cli_cmd+0x4e>
    } else if (!strcmp(argv[1], "rd")) {
   1a61e:	4920      	ldr	r1, [pc, #128]	; (1a6a0 <dw1000_cli_cmd+0x1fc>)
   1a620:	4638      	mov	r0, r7
   1a622:	f7f5 f811 	bl	f648 <strcmp>
   1a626:	4602      	mov	r2, r0
   1a628:	bb60      	cbnz	r0, 1a684 <dw1000_cli_cmd+0x1e0>
        if (argc < 6) {
   1a62a:	2e05      	cmp	r6, #5
   1a62c:	f77f af61 	ble.w	1a4f2 <dw1000_cli_cmd+0x4e>
        inst_n = strtol(argv[2], NULL, 0);
   1a630:	4601      	mov	r1, r0
   1a632:	9005      	str	r0, [sp, #20]
   1a634:	68a0      	ldr	r0, [r4, #8]
   1a636:	f003 fd7a 	bl	1e12e <strtol>
        uint32_t addr = strtol(argv[3], NULL, 0);
   1a63a:	9a05      	ldr	r2, [sp, #20]
        inst_n = strtol(argv[2], NULL, 0);
   1a63c:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   1a63e:	4611      	mov	r1, r2
   1a640:	68e0      	ldr	r0, [r4, #12]
   1a642:	f003 fd74 	bl	1e12e <strtol>
        uint16_t sub  = strtol(argv[4], NULL, 0);
   1a646:	9a05      	ldr	r2, [sp, #20]
        uint32_t addr = strtol(argv[3], NULL, 0);
   1a648:	4606      	mov	r6, r0
        uint16_t sub  = strtol(argv[4], NULL, 0);
   1a64a:	4611      	mov	r1, r2
   1a64c:	6920      	ldr	r0, [r4, #16]
   1a64e:	f003 fd6e 	bl	1e12e <strtol>
        int length = strtol(argv[5], NULL, 0);
   1a652:	9a05      	ldr	r2, [sp, #20]
        uint16_t sub  = strtol(argv[4], NULL, 0);
   1a654:	4607      	mov	r7, r0
        int length = strtol(argv[5], NULL, 0);
   1a656:	4611      	mov	r1, r2
   1a658:	6960      	ldr	r0, [r4, #20]
   1a65a:	f003 fd68 	bl	1e12e <strtol>
   1a65e:	9005      	str	r0, [sp, #20]
        uint64_t reg = dw1000_read_reg(hal_dw1000_inst(inst_n), addr, sub, length);
   1a660:	fa5f f088 	uxtb.w	r0, r8
   1a664:	f7fd fa36 	bl	17ad4 <hal_dw1000_inst>
   1a668:	9b05      	ldr	r3, [sp, #20]
   1a66a:	b2ba      	uxth	r2, r7
   1a66c:	b2b1      	uxth	r1, r6
   1a66e:	f7fc fe51 	bl	17314 <dw1000_read_reg>
        streamer_printf(streamer, "0x%06"PRIX32",0x%04X: 0x%"PRIX64"\n", addr, sub, reg);
   1a672:	b2bb      	uxth	r3, r7
   1a674:	e9cd 0100 	strd	r0, r1, [sp]
   1a678:	4632      	mov	r2, r6
   1a67a:	490a      	ldr	r1, [pc, #40]	; (1a6a4 <dw1000_cli_cmd+0x200>)
   1a67c:	4628      	mov	r0, r5
   1a67e:	f7f6 fef2 	bl	11466 <streamer_printf>
   1a682:	e736      	b.n	1a4f2 <dw1000_cli_cmd+0x4e>
        streamer_printf(streamer, "Unknown cmd\n");
   1a684:	4908      	ldr	r1, [pc, #32]	; (1a6a8 <dw1000_cli_cmd+0x204>)
   1a686:	e716      	b.n	1a4b6 <dw1000_cli_cmd+0x12>
   1a688:	00021e76 	.word	0x00021e76
   1a68c:	00021fdd 	.word	0x00021fdd
   1a690:	0002380b 	.word	0x0002380b
   1a694:	0002380e 	.word	0x0002380e
   1a698:	00023811 	.word	0x00023811
   1a69c:	00023848 	.word	0x00023848
   1a6a0:	0002384b 	.word	0x0002384b
   1a6a4:	0002384e 	.word	0x0002384e
   1a6a8:	00022015 	.word	0x00022015

0001a6ac <dw1000_cli_register>:
int
dw1000_cli_register(void)
{
#if MYNEWT_VAL(DW1000_CLI)
    int rc;
    rc = shell_cmd_register(&shell_dw1000_cmd);
   1a6ac:	4801      	ldr	r0, [pc, #4]	; (1a6b4 <dw1000_cli_register+0x8>)
   1a6ae:	f7f9 bac5 	b.w	13c3c <shell_cmd_register>
   1a6b2:	bf00      	nop
   1a6b4:	20000e80 	.word	0x20000e80

0001a6b8 <dw1000_cli_down>:
        dw1000_sysfs_deinit(i);
    }
    dw1000_debugfs_deinit();
#endif
    return 0;
}
   1a6b8:	2000      	movs	r0, #0
   1a6ba:	4770      	bx	lr

0001a6bc <dw1000_gpio_config_leds>:
 *          - bit 2 to 7: reserved
 *
 * @return void
 */
void dw1000_gpio_config_leds(struct _dw1000_dev_instance_t * inst, dw1000_led_modes_t mode)
{
   1a6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t reg;

    if (mode & DWT_LEDS_ENABLE){
   1a6be:	f011 0202 	ands.w	r2, r1, #2
{
   1a6c2:	b087      	sub	sp, #28
   1a6c4:	4604      	mov	r4, r0
   1a6c6:	460f      	mov	r7, r1
        // Set up MFIO for LED output.
        reg = (uint32_t) dw1000_read_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, sizeof(uint32_t));
   1a6c8:	f04f 0304 	mov.w	r3, #4
    if (mode & DWT_LEDS_ENABLE){
   1a6cc:	d04e      	beq.n	1a76c <dw1000_gpio_config_leds+0xb0>
        reg = (uint32_t) dw1000_read_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, sizeof(uint32_t));
   1a6ce:	2200      	movs	r2, #0
   1a6d0:	2126      	movs	r1, #38	; 0x26
   1a6d2:	f7fc fe1f 	bl	17314 <dw1000_read_reg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
   1a6d6:	f420 5070 	bic.w	r0, r0, #15360	; 0x3c00
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
   1a6da:	2500      	movs	r5, #0
   1a6dc:	2604      	movs	r6, #4
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
   1a6de:	f440 50a0 	orr.w	r0, r0, #5120	; 0x1400
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
   1a6e2:	e9cd 0500 	strd	r0, r5, [sp]
   1a6e6:	462a      	mov	r2, r5
   1a6e8:	2126      	movs	r1, #38	; 0x26
   1a6ea:	4620      	mov	r0, r4
   1a6ec:	9602      	str	r6, [sp, #8]
   1a6ee:	f7fc fe63 	bl	173b8 <dw1000_write_reg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = (uint32_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint32_t));
   1a6f2:	4633      	mov	r3, r6
   1a6f4:	462a      	mov	r2, r5
   1a6f6:	2136      	movs	r1, #54	; 0x36
   1a6f8:	4620      	mov	r0, r4
   1a6fa:	f7fc fe0b 	bl	17314 <dw1000_read_reg>
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
   1a6fe:	f440 0004 	orr.w	r0, r0, #8650752	; 0x840000
        dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint32_t));
   1a702:	e9cd 0500 	strd	r0, r5, [sp]
   1a706:	462a      	mov	r2, r5
   1a708:	2136      	movs	r1, #54	; 0x36
   1a70a:	4620      	mov	r0, r4
   1a70c:	9602      	str	r6, [sp, #8]
   1a70e:	f7fc fe53 	bl	173b8 <dw1000_write_reg>
        dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF, sizeof(uint32_t));
   1a712:	2300      	movs	r3, #0
   1a714:	f44f 7288 	mov.w	r2, #272	; 0x110
   1a718:	e9cd 2300 	strd	r2, r3, [sp]
   1a71c:	9602      	str	r6, [sp, #8]
   1a71e:	2228      	movs	r2, #40	; 0x28
   1a720:	2136      	movs	r1, #54	; 0x36
   1a722:	4620      	mov	r0, r4
   1a724:	f7fc fe48 	bl	173b8 <dw1000_write_reg>

        if (mode & DWT_LEDS_INIT_BLINK){
   1a728:	077b      	lsls	r3, r7, #29
   1a72a:	d51d      	bpl.n	1a768 <dw1000_gpio_config_leds+0xac>
            // Single blink sign-of-life.
            reg = (uint32_t) dw1000_read_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, sizeof(uint32_t));
   1a72c:	4633      	mov	r3, r6
   1a72e:	2228      	movs	r2, #40	; 0x28
   1a730:	2136      	movs	r1, #54	; 0x36
   1a732:	4620      	mov	r0, r4
   1a734:	f7fc fdee 	bl	17314 <dw1000_read_reg>
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
   1a738:	f440 2370 	orr.w	r3, r0, #983040	; 0xf0000

            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
   1a73c:	2228      	movs	r2, #40	; 0x28
   1a73e:	2136      	movs	r1, #54	; 0x36
   1a740:	e9cd 3500 	strd	r3, r5, [sp]
            reg = (uint32_t) dw1000_read_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, sizeof(uint32_t));
   1a744:	4607      	mov	r7, r0
            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
   1a746:	9602      	str	r6, [sp, #8]
   1a748:	4620      	mov	r0, r4
   1a74a:	f7fc fe35 	bl	173b8 <dw1000_write_reg>
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
            dpl_cputime_delay_usecs(10);
            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
   1a74e:	f427 2770 	bic.w	r7, r7, #983040	; 0xf0000
            dpl_cputime_delay_usecs(10);
   1a752:	200a      	movs	r0, #10
   1a754:	f7f6 fd9a 	bl	1128c <dpl_cputime_delay_usecs>
            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
   1a758:	e9cd 7500 	strd	r7, r5, [sp]
   1a75c:	9602      	str	r6, [sp, #8]
   1a75e:	2228      	movs	r2, #40	; 0x28
   1a760:	2136      	movs	r1, #54	; 0x36
        }
    }else{
        // Clear the GPIO bits that are used for LED control.
        reg = dw1000_read_reg(inst,GPIO_CTRL_ID, GPIO_MODE_OFFSET,sizeof(uint32_t));
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
   1a762:	4620      	mov	r0, r4
   1a764:	f7fc fe28 	bl	173b8 <dw1000_write_reg>
    }
}
   1a768:	b007      	add	sp, #28
   1a76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        reg = dw1000_read_reg(inst,GPIO_CTRL_ID, GPIO_MODE_OFFSET,sizeof(uint32_t));
   1a76c:	2126      	movs	r1, #38	; 0x26
   1a76e:	9205      	str	r2, [sp, #20]
   1a770:	f7fc fdd0 	bl	17314 <dw1000_read_reg>
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
   1a774:	9a05      	ldr	r2, [sp, #20]
   1a776:	9201      	str	r2, [sp, #4]
   1a778:	2304      	movs	r3, #4
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
   1a77a:	f420 5070 	bic.w	r0, r0, #15360	; 0x3c00
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
   1a77e:	9302      	str	r3, [sp, #8]
   1a780:	9000      	str	r0, [sp, #0]
   1a782:	2126      	movs	r1, #38	; 0x26
   1a784:	e7ed      	b.n	1a762 <dw1000_gpio_config_leds+0xa6>

0001a786 <_dw1000_otp_read>:
 * @param address  From where it starts reading
 * @return data value read from an OTP location.
 */

uint32_t _dw1000_otp_read(struct _dw1000_dev_instance_t * inst, uint16_t address)
{
   1a786:	b530      	push	{r4, r5, lr}
   1a788:	b085      	sub	sp, #20
    // Write the address
    dw1000_write_reg(inst, OTP_IF_ID, OTP_ADDR, address, sizeof(uint16_t));
   1a78a:	2302      	movs	r3, #2
   1a78c:	9302      	str	r3, [sp, #8]
   1a78e:	2300      	movs	r3, #0
   1a790:	9100      	str	r1, [sp, #0]
   1a792:	9301      	str	r3, [sp, #4]
   1a794:	2204      	movs	r2, #4
   1a796:	212d      	movs	r1, #45	; 0x2d
{
   1a798:	4604      	mov	r4, r0

    // Perform OTP Read - Manual read mode has to be set
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN, sizeof(uint8_t));
   1a79a:	2501      	movs	r5, #1
    dw1000_write_reg(inst, OTP_IF_ID, OTP_ADDR, address, sizeof(uint16_t));
   1a79c:	f7fc fe0c 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN, sizeof(uint8_t));
   1a7a0:	2300      	movs	r3, #0
   1a7a2:	2203      	movs	r2, #3
   1a7a4:	e9cd 2300 	strd	r2, r3, [sp]
   1a7a8:	4620      	mov	r0, r4
   1a7aa:	9502      	str	r5, [sp, #8]
   1a7ac:	2206      	movs	r2, #6
   1a7ae:	212d      	movs	r1, #45	; 0x2d
   1a7b0:	f7fc fe02 	bl	173b8 <dw1000_write_reg>
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, 0x0, sizeof(uint8_t)); // OTPREAD is self clearing but OTPRDEN is not
   1a7b4:	2300      	movs	r3, #0
   1a7b6:	2200      	movs	r2, #0
   1a7b8:	e9cd 2300 	strd	r2, r3, [sp]
   1a7bc:	212d      	movs	r1, #45	; 0x2d
   1a7be:	2206      	movs	r2, #6
   1a7c0:	4620      	mov	r0, r4
   1a7c2:	9502      	str	r5, [sp, #8]
   1a7c4:	f7fc fdf8 	bl	173b8 <dw1000_write_reg>

    // Read data, available 40ns after rising edge of OTP_READ
    dpl_cputime_delay_usecs(1);
   1a7c8:	4628      	mov	r0, r5
   1a7ca:	f7f6 fd5f 	bl	1128c <dpl_cputime_delay_usecs>
    return  (uint32_t) dw1000_read_reg(inst, OTP_IF_ID, OTP_RDAT, sizeof(uint32_t));
   1a7ce:	2304      	movs	r3, #4
   1a7d0:	220a      	movs	r2, #10
   1a7d2:	4620      	mov	r0, r4
   1a7d4:	212d      	movs	r1, #45	; 0x2d
   1a7d6:	f7fc fd9d 	bl	17314 <dw1000_read_reg>
}
   1a7da:	b005      	add	sp, #20
   1a7dc:	bd30      	pop	{r4, r5, pc}

0001a7de <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1a7de:	6843      	ldr	r3, [r0, #4]
   1a7e0:	428b      	cmp	r3, r1
   1a7e2:	d807      	bhi.n	1a7f4 <hal_flash_check_addr+0x16>
   1a7e4:	6882      	ldr	r2, [r0, #8]
   1a7e6:	4413      	add	r3, r2
        return SYS_EINVAL;
    }
    return 0;
   1a7e8:	428b      	cmp	r3, r1
   1a7ea:	bf34      	ite	cc
   1a7ec:	f06f 0001 	mvncc.w	r0, #1
   1a7f0:	2000      	movcs	r0, #0
   1a7f2:	4770      	bx	lr
        return SYS_EINVAL;
   1a7f4:	f06f 0001 	mvn.w	r0, #1
}
   1a7f8:	4770      	bx	lr

0001a7fa <hal_flash_init>:
{
   1a7fa:	b538      	push	{r3, r4, r5, lr}
   1a7fc:	2400      	movs	r4, #0
    int rc = 0;
   1a7fe:	4625      	mov	r5, r4
        hf = hal_bsp_flash_dev(i);
   1a800:	b2e0      	uxtb	r0, r4
   1a802:	f7fc fa87 	bl	16d14 <hal_bsp_flash_dev>
        if (!hf) {
   1a806:	b140      	cbz	r0, 1a81a <hal_flash_init+0x20>
        if (hf->hf_itf->hff_init(hf)) {
   1a808:	6803      	ldr	r3, [r0, #0]
   1a80a:	695b      	ldr	r3, [r3, #20]
   1a80c:	4798      	blx	r3
            rc = SYS_EIO;
   1a80e:	2800      	cmp	r0, #0
   1a810:	bf18      	it	ne
   1a812:	f06f 0504 	mvnne.w	r5, #4
    for (i = 0; ; i++) {
   1a816:	3401      	adds	r4, #1
        hf = hal_bsp_flash_dev(i);
   1a818:	e7f2      	b.n	1a800 <hal_flash_init+0x6>
}
   1a81a:	4628      	mov	r0, r5
   1a81c:	bd38      	pop	{r3, r4, r5, pc}

0001a81e <hal_flash_align>:
{
   1a81e:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   1a820:	f7fc fa78 	bl	16d14 <hal_bsp_flash_dev>
    if (!hf) {
   1a824:	b108      	cbz	r0, 1a82a <hal_flash_align+0xc>
    return hf->hf_align;
   1a826:	7c00      	ldrb	r0, [r0, #16]
}
   1a828:	bd08      	pop	{r3, pc}
        return 1;
   1a82a:	2001      	movs	r0, #1
   1a82c:	e7fc      	b.n	1a828 <hal_flash_align+0xa>

0001a82e <hal_flash_erased_val>:
{
   1a82e:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   1a830:	f7fc fa70 	bl	16d14 <hal_bsp_flash_dev>
    if (!hf) {
   1a834:	b108      	cbz	r0, 1a83a <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
   1a836:	7d00      	ldrb	r0, [r0, #20]
}
   1a838:	bd08      	pop	{r3, pc}
        return 1;
   1a83a:	2001      	movs	r0, #1
   1a83c:	e7fc      	b.n	1a838 <hal_flash_erased_val+0xa>

0001a83e <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1a83e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a842:	460d      	mov	r5, r1
   1a844:	4617      	mov	r7, r2
   1a846:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1a848:	f7fc fa64 	bl	16d14 <hal_bsp_flash_dev>
    if (!hf) {
   1a84c:	4604      	mov	r4, r0
   1a84e:	b1b0      	cbz	r0, 1a87e <hal_flash_read+0x40>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1a850:	4629      	mov	r1, r5
   1a852:	f7ff ffc4 	bl	1a7de <hal_flash_check_addr>
   1a856:	b990      	cbnz	r0, 1a87e <hal_flash_read+0x40>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1a858:	19a9      	adds	r1, r5, r6
   1a85a:	4620      	mov	r0, r4
   1a85c:	f7ff ffbf 	bl	1a7de <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1a860:	b968      	cbnz	r0, 1a87e <hal_flash_read+0x40>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1a862:	6823      	ldr	r3, [r4, #0]
   1a864:	463a      	mov	r2, r7
   1a866:	f8d3 8000 	ldr.w	r8, [r3]
   1a86a:	4629      	mov	r1, r5
   1a86c:	4633      	mov	r3, r6
   1a86e:	4620      	mov	r0, r4
   1a870:	47c0      	blx	r8
    if (rc != 0) {
        return SYS_EIO;
   1a872:	2800      	cmp	r0, #0
   1a874:	bf18      	it	ne
   1a876:	f06f 0004 	mvnne.w	r0, #4
    }

    return 0;
}
   1a87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   1a87e:	f06f 0001 	mvn.w	r0, #1
   1a882:	e7fa      	b.n	1a87a <hal_flash_read+0x3c>

0001a884 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
   1a884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a888:	4605      	mov	r5, r0
   1a88a:	460e      	mov	r6, r1
   1a88c:	4690      	mov	r8, r2
   1a88e:	461f      	mov	r7, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1a890:	f7fc fa40 	bl	16d14 <hal_bsp_flash_dev>
    if (!hf) {
   1a894:	4604      	mov	r4, r0
   1a896:	b1f0      	cbz	r0, 1a8d6 <hal_flash_write+0x52>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1a898:	4631      	mov	r1, r6
   1a89a:	f7ff ffa0 	bl	1a7de <hal_flash_check_addr>
   1a89e:	b9d0      	cbnz	r0, 1a8d6 <hal_flash_write+0x52>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1a8a0:	19f1      	adds	r1, r6, r7
   1a8a2:	4620      	mov	r0, r4
   1a8a4:	f7ff ff9b 	bl	1a7de <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1a8a8:	b9a8      	cbnz	r0, 1a8d6 <hal_flash_write+0x52>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   1a8aa:	08eb      	lsrs	r3, r5, #3
   1a8ac:	4a0d      	ldr	r2, [pc, #52]	; (1a8e4 <hal_flash_write+0x60>)
   1a8ae:	5cd0      	ldrb	r0, [r2, r3]
   1a8b0:	f005 0507 	and.w	r5, r5, #7
   1a8b4:	fa40 f505 	asr.w	r5, r0, r5
   1a8b8:	07eb      	lsls	r3, r5, #31
   1a8ba:	d40f      	bmi.n	1a8dc <hal_flash_write+0x58>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
   1a8bc:	6823      	ldr	r3, [r4, #0]
   1a8be:	4642      	mov	r2, r8
   1a8c0:	685d      	ldr	r5, [r3, #4]
   1a8c2:	4631      	mov	r1, r6
   1a8c4:	463b      	mov	r3, r7
   1a8c6:	4620      	mov	r0, r4
   1a8c8:	47a8      	blx	r5
    if (rc != 0) {
        return SYS_EIO;
   1a8ca:	2800      	cmp	r0, #0
   1a8cc:	bf18      	it	ne
   1a8ce:	f06f 0004 	mvnne.w	r0, #4
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
   1a8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   1a8d6:	f06f 0001 	mvn.w	r0, #1
   1a8da:	e7fa      	b.n	1a8d2 <hal_flash_write+0x4e>
        return SYS_EACCES;
   1a8dc:	f06f 0006 	mvn.w	r0, #6
   1a8e0:	e7f7      	b.n	1a8d2 <hal_flash_write+0x4e>
   1a8e2:	bf00      	nop
   1a8e4:	20004bd8 	.word	0x20004bd8

0001a8e8 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   1a8e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1a8ec:	4605      	mov	r5, r0
   1a8ee:	460f      	mov	r7, r1
   1a8f0:	4690      	mov	r8, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1a8f2:	f7fc fa0f 	bl	16d14 <hal_bsp_flash_dev>
    if (!hf) {
   1a8f6:	4606      	mov	r6, r0
   1a8f8:	2800      	cmp	r0, #0
   1a8fa:	d04b      	beq.n	1a994 <hal_flash_erase+0xac>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1a8fc:	4639      	mov	r1, r7
   1a8fe:	f7ff ff6e 	bl	1a7de <hal_flash_check_addr>
   1a902:	2800      	cmp	r0, #0
   1a904:	d146      	bne.n	1a994 <hal_flash_erase+0xac>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1a906:	eb07 0908 	add.w	r9, r7, r8
   1a90a:	4649      	mov	r1, r9
   1a90c:	4630      	mov	r0, r6
   1a90e:	f7ff ff66 	bl	1a7de <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1a912:	2800      	cmp	r0, #0
   1a914:	d13e      	bne.n	1a994 <hal_flash_erase+0xac>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   1a916:	08eb      	lsrs	r3, r5, #3
   1a918:	4a20      	ldr	r2, [pc, #128]	; (1a99c <hal_flash_erase+0xb4>)
   1a91a:	5cd4      	ldrb	r4, [r2, r3]
   1a91c:	f005 0507 	and.w	r5, r5, #7
   1a920:	412c      	asrs	r4, r5
   1a922:	f014 0401 	ands.w	r4, r4, #1
   1a926:	d132      	bne.n	1a98e <hal_flash_erase+0xa6>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
   1a928:	45b9      	cmp	r9, r7
   1a92a:	d933      	bls.n	1a994 <hal_flash_erase+0xac>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
   1a92c:	6833      	ldr	r3, [r6, #0]
   1a92e:	699b      	ldr	r3, [r3, #24]
   1a930:	b35b      	cbz	r3, 1a98a <hal_flash_erase+0xa2>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
   1a932:	4642      	mov	r2, r8
   1a934:	4639      	mov	r1, r7
   1a936:	4630      	mov	r0, r6
   1a938:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
   1a93a:	4620      	mov	r0, r4
   1a93c:	b003      	add	sp, #12
   1a93e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            end_area = start + size;
   1a942:	e9dd 1300 	ldrd	r1, r3, [sp]
   1a946:	440b      	add	r3, r1
            if (address < end_area && end > start) {
   1a948:	429f      	cmp	r7, r3
   1a94a:	d313      	bcc.n	1a974 <hal_flash_erase+0x8c>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   1a94c:	3501      	adds	r5, #1
   1a94e:	68f3      	ldr	r3, [r6, #12]
   1a950:	42ab      	cmp	r3, r5
   1a952:	ddf2      	ble.n	1a93a <hal_flash_erase+0x52>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   1a954:	6833      	ldr	r3, [r6, #0]
   1a956:	466a      	mov	r2, sp
   1a958:	f8d3 800c 	ldr.w	r8, [r3, #12]
   1a95c:	4629      	mov	r1, r5
   1a95e:	ab01      	add	r3, sp, #4
   1a960:	4630      	mov	r0, r6
   1a962:	47c0      	blx	r8
            assert(rc == 0);
   1a964:	2800      	cmp	r0, #0
   1a966:	d0ec      	beq.n	1a942 <hal_flash_erase+0x5a>
   1a968:	2300      	movs	r3, #0
   1a96a:	461a      	mov	r2, r3
   1a96c:	4619      	mov	r1, r3
   1a96e:	4618      	mov	r0, r3
   1a970:	f7ee fac0 	bl	8ef4 <__assert_func>
            if (address < end_area && end > start) {
   1a974:	4589      	cmp	r9, r1
   1a976:	d9e9      	bls.n	1a94c <hal_flash_erase+0x64>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
   1a978:	6833      	ldr	r3, [r6, #0]
   1a97a:	4630      	mov	r0, r6
   1a97c:	689b      	ldr	r3, [r3, #8]
   1a97e:	4798      	blx	r3
   1a980:	2800      	cmp	r0, #0
   1a982:	d0e3      	beq.n	1a94c <hal_flash_erase+0x64>
                    return SYS_EIO;
   1a984:	f06f 0404 	mvn.w	r4, #4
   1a988:	e7d7      	b.n	1a93a <hal_flash_erase+0x52>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   1a98a:	4625      	mov	r5, r4
   1a98c:	e7df      	b.n	1a94e <hal_flash_erase+0x66>
        return SYS_EACCES;
   1a98e:	f06f 0406 	mvn.w	r4, #6
   1a992:	e7d2      	b.n	1a93a <hal_flash_erase+0x52>
        return SYS_EINVAL;
   1a994:	f06f 0401 	mvn.w	r4, #1
   1a998:	e7cf      	b.n	1a93a <hal_flash_erase+0x52>
   1a99a:	bf00      	nop
   1a99c:	20004bd8 	.word	0x20004bd8

0001a9a0 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
   1a9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1a9a2:	6807      	ldr	r7, [r0, #0]
   1a9a4:	683f      	ldr	r7, [r7, #0]
{
   1a9a6:	4606      	mov	r6, r0
   1a9a8:	4614      	mov	r4, r2
   1a9aa:	461d      	mov	r5, r3
    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1a9ac:	47b8      	blx	r7
    if (rc != 0) {
   1a9ae:	b958      	cbnz	r0, 1a9c8 <hal_flash_is_erased+0x28>
   1a9b0:	4622      	mov	r2, r4
   1a9b2:	4425      	add	r5, r4
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
   1a9b4:	4295      	cmp	r5, r2
   1a9b6:	d101      	bne.n	1a9bc <hal_flash_is_erased+0x1c>
        if (buf[i] != hf->hf_erased_val) {
            return 0;
        }
    }
    return 1;
   1a9b8:	2001      	movs	r0, #1
   1a9ba:	e004      	b.n	1a9c6 <hal_flash_is_erased+0x26>
        if (buf[i] != hf->hf_erased_val) {
   1a9bc:	f812 3b01 	ldrb.w	r3, [r2], #1
   1a9c0:	7d31      	ldrb	r1, [r6, #20]
   1a9c2:	4299      	cmp	r1, r3
   1a9c4:	d0f6      	beq.n	1a9b4 <hal_flash_is_erased+0x14>
}
   1a9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
   1a9c8:	f06f 0004 	mvn.w	r0, #4
   1a9cc:	e7fb      	b.n	1a9c6 <hal_flash_is_erased+0x26>

0001a9ce <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1a9ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a9d0:	460d      	mov	r5, r1
   1a9d2:	e9cd 3200 	strd	r3, r2, [sp]
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1a9d6:	f7fc f99d 	bl	16d14 <hal_bsp_flash_dev>
    if (!hf) {
   1a9da:	4604      	mov	r4, r0
   1a9dc:	b1e0      	cbz	r0, 1aa18 <hal_flash_isempty+0x4a>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1a9de:	4629      	mov	r1, r5
   1a9e0:	f7ff fefd 	bl	1a7de <hal_flash_check_addr>
   1a9e4:	b9c0      	cbnz	r0, 1aa18 <hal_flash_isempty+0x4a>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1a9e6:	9b00      	ldr	r3, [sp, #0]
   1a9e8:	4620      	mov	r0, r4
   1a9ea:	18e9      	adds	r1, r5, r3
   1a9ec:	f7ff fef7 	bl	1a7de <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1a9f0:	b990      	cbnz	r0, 1aa18 <hal_flash_isempty+0x4a>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
   1a9f2:	6821      	ldr	r1, [r4, #0]
   1a9f4:	690e      	ldr	r6, [r1, #16]
   1a9f6:	e9dd 3200 	ldrd	r3, r2, [sp]
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
   1a9fa:	4629      	mov	r1, r5
   1a9fc:	4620      	mov	r0, r4
    if (hf->hf_itf->hff_is_empty) {
   1a9fe:	b136      	cbz	r6, 1aa0e <hal_flash_isempty+0x40>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
   1aa00:	47b0      	blx	r6
        if (rc < 0) {
            return SYS_EIO;
   1aa02:	2800      	cmp	r0, #0
   1aa04:	bfb8      	it	lt
   1aa06:	f06f 0004 	mvnlt.w	r0, #4
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
   1aa0a:	b002      	add	sp, #8
   1aa0c:	bd70      	pop	{r4, r5, r6, pc}
   1aa0e:	b002      	add	sp, #8
   1aa10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return hal_flash_is_erased(hf, address, dst, num_bytes);
   1aa14:	f7ff bfc4 	b.w	1a9a0 <hal_flash_is_erased>
        return SYS_EINVAL;
   1aa18:	f06f 0001 	mvn.w	r0, #1
   1aa1c:	e7f5      	b.n	1aa0a <hal_flash_isempty+0x3c>

0001aa1e <hal_flash_isempty_no_buf>:

int
hal_flash_isempty_no_buf(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   1aa1e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa20:	4606      	mov	r6, r0
   1aa22:	b085      	sub	sp, #20
   1aa24:	460f      	mov	r7, r1
   1aa26:	4615      	mov	r5, r2
    uint32_t blksz;
    uint32_t rem;
    uint32_t off;
    int empty;

    for (off = 0; off < num_bytes; off += sizeof buf) {
   1aa28:	2400      	movs	r4, #0
   1aa2a:	42ac      	cmp	r4, r5
   1aa2c:	d302      	bcc.n	1aa34 <hal_flash_isempty_no_buf+0x16>
        if (empty != 1) {
            return empty;
        }
    }

    return 1;
   1aa2e:	2001      	movs	r0, #1
}
   1aa30:	b005      	add	sp, #20
   1aa32:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rem = num_bytes - off;
   1aa34:	1b2b      	subs	r3, r5, r4
        empty = hal_flash_isempty(id, address + off, buf, blksz);
   1aa36:	2b10      	cmp	r3, #16
   1aa38:	bf28      	it	cs
   1aa3a:	2310      	movcs	r3, #16
   1aa3c:	466a      	mov	r2, sp
   1aa3e:	19e1      	adds	r1, r4, r7
   1aa40:	4630      	mov	r0, r6
   1aa42:	f7ff ffc4 	bl	1a9ce <hal_flash_isempty>
        if (empty != 1) {
   1aa46:	2801      	cmp	r0, #1
   1aa48:	d1f2      	bne.n	1aa30 <hal_flash_isempty_no_buf+0x12>
    for (off = 0; off < num_bytes; off += sizeof buf) {
   1aa4a:	3410      	adds	r4, #16
   1aa4c:	e7ed      	b.n	1aa2a <hal_flash_isempty_no_buf+0xc>
	...

0001aa50 <nrf52k_flash_wait_ready>:

#define NRF52K_FLASH_READY() (NRF_NVMC->READY == NVMC_READY_READY_Ready)

static int
nrf52k_flash_wait_ready(void)
{
   1aa50:	4b06      	ldr	r3, [pc, #24]	; (1aa6c <nrf52k_flash_wait_ready+0x1c>)
    int i;

    for (i = 0; i < 100000; i++) {
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1aa52:	4a07      	ldr	r2, [pc, #28]	; (1aa70 <nrf52k_flash_wait_ready+0x20>)
   1aa54:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
   1aa58:	2901      	cmp	r1, #1
   1aa5a:	d004      	beq.n	1aa66 <nrf52k_flash_wait_ready+0x16>
    for (i = 0; i < 100000; i++) {
   1aa5c:	3b01      	subs	r3, #1
   1aa5e:	d1f9      	bne.n	1aa54 <nrf52k_flash_wait_ready+0x4>
            return 0;
        }
    }
    return -1;
   1aa60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aa64:	4770      	bx	lr
            return 0;
   1aa66:	2000      	movs	r0, #0
}
   1aa68:	4770      	bx	lr
   1aa6a:	bf00      	nop
   1aa6c:	000186a0 	.word	0x000186a0
   1aa70:	4001e000 	.word	0x4001e000

0001aa74 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1aa74:	b570      	push	{r4, r5, r6, lr}
   1aa76:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1aa78:	f7ff ffea 	bl	1aa50 <nrf52k_flash_wait_ready>
   1aa7c:	b9d0      	cbnz	r0, 1aab4 <nrf52k_flash_erase_sector+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1aa7e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1aa82:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1aa84:	4c0d      	ldr	r4, [pc, #52]	; (1aabc <nrf52k_flash_erase_sector+0x48>)
   1aa86:	2302      	movs	r3, #2
   1aa88:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1aa8c:	f7ff ffe0 	bl	1aa50 <nrf52k_flash_wait_ready>
   1aa90:	b968      	cbnz	r0, 1aaae <nrf52k_flash_erase_sector+0x3a>
        goto out;
    }

    NRF_NVMC->ERASEPAGE = sector_address;
   1aa92:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1aa96:	f7ff ffdb 	bl	1aa50 <nrf52k_flash_wait_ready>
   1aa9a:	3800      	subs	r0, #0
   1aa9c:	bf18      	it	ne
   1aa9e:	2001      	movne	r0, #1
   1aaa0:	4240      	negs	r0, r0
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1aaa2:	2300      	movs	r3, #0
   1aaa4:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1aaa8:	b906      	cbnz	r6, 1aaac <nrf52k_flash_erase_sector+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
   1aaaa:	b662      	cpsie	i
    return rc;
}
   1aaac:	bd70      	pop	{r4, r5, r6, pc}
    int rc = -1;
   1aaae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aab2:	e7f6      	b.n	1aaa2 <nrf52k_flash_erase_sector+0x2e>
        return -1;
   1aab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aab8:	e7f8      	b.n	1aaac <nrf52k_flash_erase_sector+0x38>
   1aaba:	bf00      	nop
   1aabc:	4001e000 	.word	0x4001e000

0001aac0 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1aac0:	2000      	movs	r0, #0
   1aac2:	4770      	bx	lr

0001aac4 <nrf52k_flash_write>:
{
   1aac4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1aac8:	460c      	mov	r4, r1
   1aaca:	4616      	mov	r6, r2
   1aacc:	461d      	mov	r5, r3
    if (nrf52k_flash_wait_ready()) {
   1aace:	f7ff ffbf 	bl	1aa50 <nrf52k_flash_wait_ready>
   1aad2:	2800      	cmp	r0, #0
   1aad4:	d151      	bne.n	1ab7a <nrf52k_flash_write+0xb6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1aad6:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1aada:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1aadc:	4b28      	ldr	r3, [pc, #160]	; (1ab80 <nrf52k_flash_write+0xbc>)
   1aade:	2201      	movs	r2, #1
    if (tmp) {
   1aae0:	f014 0a03 	ands.w	sl, r4, #3
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1aae4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1aae8:	d026      	beq.n	1ab38 <nrf52k_flash_write+0x74>
        if (nrf52k_flash_wait_ready()) {
   1aaea:	f7ff ffb1 	bl	1aa50 <nrf52k_flash_wait_ready>
   1aaee:	b160      	cbz	r0, 1ab0a <nrf52k_flash_write+0x46>
    int rc = -1;
   1aaf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1aaf4:	4b22      	ldr	r3, [pc, #136]	; (1ab80 <nrf52k_flash_write+0xbc>)
   1aaf6:	2200      	movs	r2, #0
   1aaf8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1aafc:	f1b8 0f00 	cmp.w	r8, #0
   1ab00:	d100      	bne.n	1ab04 <nrf52k_flash_write+0x40>
  __ASM volatile ("cpsie i" : : : "memory");
   1ab02:	b662      	cpsie	i
}
   1ab04:	b002      	add	sp, #8
   1ab06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        val = *(uint32_t *)(address & ~0x3);
   1ab0a:	f024 0903 	bic.w	r9, r4, #3
        cnt = 4 - tmp;
   1ab0e:	f1ca 0704 	rsb	r7, sl, #4
        val = *(uint32_t *)(address & ~0x3);
   1ab12:	f8d9 3000 	ldr.w	r3, [r9]
   1ab16:	9301      	str	r3, [sp, #4]
        if (cnt > num_bytes) {
   1ab18:	42af      	cmp	r7, r5
   1ab1a:	bf28      	it	cs
   1ab1c:	462f      	movcs	r7, r5
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1ab1e:	ab01      	add	r3, sp, #4
   1ab20:	4631      	mov	r1, r6
   1ab22:	eb03 000a 	add.w	r0, r3, sl
   1ab26:	463a      	mov	r2, r7
   1ab28:	f7f4 fd5c 	bl	f5e4 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1ab2c:	9b01      	ldr	r3, [sp, #4]
   1ab2e:	f8c9 3000 	str.w	r3, [r9]
        address += cnt;
   1ab32:	443c      	add	r4, r7
        num_bytes -= cnt;
   1ab34:	1bed      	subs	r5, r5, r7
        src += cnt;
   1ab36:	443e      	add	r6, r7
    while (num_bytes >= sizeof(uint32_t)) {
   1ab38:	2d03      	cmp	r5, #3
   1ab3a:	d814      	bhi.n	1ab66 <nrf52k_flash_write+0xa2>
    if (num_bytes) {
   1ab3c:	b165      	cbz	r5, 1ab58 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1ab3e:	6823      	ldr	r3, [r4, #0]
   1ab40:	9301      	str	r3, [sp, #4]
        memcpy(&val, src, num_bytes);
   1ab42:	462a      	mov	r2, r5
   1ab44:	4631      	mov	r1, r6
   1ab46:	a801      	add	r0, sp, #4
   1ab48:	f7f4 fd4c 	bl	f5e4 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1ab4c:	f7ff ff80 	bl	1aa50 <nrf52k_flash_wait_ready>
   1ab50:	2800      	cmp	r0, #0
   1ab52:	d1cd      	bne.n	1aaf0 <nrf52k_flash_write+0x2c>
        *(uint32_t *)address = val;
   1ab54:	9b01      	ldr	r3, [sp, #4]
   1ab56:	6023      	str	r3, [r4, #0]
    if (nrf52k_flash_wait_ready()) {
   1ab58:	f7ff ff7a 	bl	1aa50 <nrf52k_flash_wait_ready>
   1ab5c:	3800      	subs	r0, #0
   1ab5e:	bf18      	it	ne
   1ab60:	2001      	movne	r0, #1
   1ab62:	4240      	negs	r0, r0
out:
   1ab64:	e7c6      	b.n	1aaf4 <nrf52k_flash_write+0x30>
        if (nrf52k_flash_wait_ready()) {
   1ab66:	f7ff ff73 	bl	1aa50 <nrf52k_flash_wait_ready>
   1ab6a:	2800      	cmp	r0, #0
   1ab6c:	d1c0      	bne.n	1aaf0 <nrf52k_flash_write+0x2c>
        *(uint32_t *)address = *(uint32_t *)src;
   1ab6e:	f856 3b04 	ldr.w	r3, [r6], #4
   1ab72:	f844 3b04 	str.w	r3, [r4], #4
        num_bytes -= sizeof(uint32_t);
   1ab76:	3d04      	subs	r5, #4
   1ab78:	e7de      	b.n	1ab38 <nrf52k_flash_write+0x74>
        return -1;
   1ab7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ab7e:	e7c1      	b.n	1ab04 <nrf52k_flash_write+0x40>
   1ab80:	4001e000 	.word	0x4001e000

0001ab84 <nrf52k_flash_read>:
{
   1ab84:	b508      	push	{r3, lr}
   1ab86:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1ab88:	461a      	mov	r2, r3
   1ab8a:	f7f4 fd2b 	bl	f5e4 <memcpy>
}
   1ab8e:	2000      	movs	r0, #0
   1ab90:	bd08      	pop	{r3, pc}

0001ab92 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1ab92:	297f      	cmp	r1, #127	; 0x7f
{
   1ab94:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1ab96:	dd05      	ble.n	1aba4 <nrf52k_flash_sector_info+0x12>
   1ab98:	2300      	movs	r3, #0
   1ab9a:	461a      	mov	r2, r3
   1ab9c:	4619      	mov	r1, r3
   1ab9e:	4618      	mov	r0, r3
   1aba0:	f7ee f9a8 	bl	8ef4 <__assert_func>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1aba4:	0309      	lsls	r1, r1, #12
   1aba6:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1aba8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1abac:	601a      	str	r2, [r3, #0]
}
   1abae:	2000      	movs	r0, #0
   1abb0:	bd08      	pop	{r3, pc}

0001abb2 <sub24>:
static inline int
sub24(uint32_t x, uint32_t y)
{
    int result;

    assert(x <= 0xffffff);
   1abb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
{
   1abb6:	b508      	push	{r3, lr}
    assert(x <= 0xffffff);
   1abb8:	d305      	bcc.n	1abc6 <sub24+0x14>
   1abba:	2300      	movs	r3, #0
   1abbc:	461a      	mov	r2, r3
   1abbe:	4619      	mov	r1, r3
   1abc0:	4618      	mov	r0, r3
   1abc2:	f7ee f997 	bl	8ef4 <__assert_func>
    assert(y <= 0xffffff);
   1abc6:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
   1abca:	d2f6      	bcs.n	1abba <sub24+0x8>

    result = x - y;
   1abcc:	1a40      	subs	r0, r0, r1
    if (result & 0x800000) {
   1abce:	0203      	lsls	r3, r0, #8
        return (result | 0xff800000);
   1abd0:	bf46      	itte	mi
   1abd2:	ea6f 2040 	mvnmi.w	r0, r0, lsl #9
   1abd6:	ea6f 2050 	mvnmi.w	r0, r0, lsr #9
    } else {
        return (result & 0x007fffff);
   1abda:	f3c0 0016 	ubfxpl	r0, r0, #0, #23
    }
}
   1abde:	bd08      	pop	{r3, pc}

0001abe0 <nrf52_os_tick_set_ocmp>:
    return OS_TICK_TIMER->COUNTER;
}

static inline void
nrf52_os_tick_set_ocmp(uint32_t ocmp)
{
   1abe0:	b570      	push	{r4, r5, r6, lr}
   1abe2:	4604      	mov	r4, r0
    int delta;
    uint32_t counter;

    OS_ASSERT_CRITICAL();
   1abe4:	f7ef fac9 	bl	a17a <os_arch_in_critical>
   1abe8:	4603      	mov	r3, r0
   1abea:	b178      	cbz	r0, 1ac0c <nrf52_os_tick_set_ocmp+0x2c>
         */
        delta = sub24(ocmp, counter);
        if (delta > 2) {
            break;
        }
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1abec:	4b0a      	ldr	r3, [pc, #40]	; (1ac18 <nrf52_os_tick_set_ocmp+0x38>)
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1abee:	4d0b      	ldr	r5, [pc, #44]	; (1ac1c <nrf52_os_tick_set_ocmp+0x3c>)
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1abf0:	681e      	ldr	r6, [r3, #0]
        ocmp &= 0xffffff;
   1abf2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1abf6:	f8c5 454c 	str.w	r4, [r5, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1abfa:	f8d5 1504 	ldr.w	r1, [r5, #1284]	; 0x504
        delta = sub24(ocmp, counter);
   1abfe:	4620      	mov	r0, r4
   1ac00:	f7ff ffd7 	bl	1abb2 <sub24>
        if (delta > 2) {
   1ac04:	2802      	cmp	r0, #2
   1ac06:	dc05      	bgt.n	1ac14 <nrf52_os_tick_set_ocmp+0x34>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1ac08:	4434      	add	r4, r6
        ocmp &= 0xffffff;
   1ac0a:	e7f2      	b.n	1abf2 <nrf52_os_tick_set_ocmp+0x12>
    OS_ASSERT_CRITICAL();
   1ac0c:	4602      	mov	r2, r0
   1ac0e:	4601      	mov	r1, r0
   1ac10:	f7ee f970 	bl	8ef4 <__assert_func>
    }
}
   1ac14:	bd70      	pop	{r4, r5, r6, pc}
   1ac16:	bf00      	nop
   1ac18:	20004bdc 	.word	0x20004bdc
   1ac1c:	40011000 	.word	0x40011000

0001ac20 <nrf52_timer_handler>:

static void
nrf52_timer_handler(void)
{
   1ac20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1ac22:	f7ef faa1 	bl	a168 <os_arch_save_sr>

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1ac26:	4c10      	ldr	r4, [pc, #64]	; (1ac68 <nrf52_timer_handler+0x48>)
    return OS_TICK_TIMER->COUNTER;
   1ac28:	4f10      	ldr	r7, [pc, #64]	; (1ac6c <nrf52_timer_handler+0x4c>)
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1ac2a:	68a1      	ldr	r1, [r4, #8]
    OS_ENTER_CRITICAL(sr);
   1ac2c:	4606      	mov	r6, r0
    return OS_TICK_TIMER->COUNTER;
   1ac2e:	f8d7 0504 	ldr.w	r0, [r7, #1284]	; 0x504
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1ac32:	f7ff ffbe 	bl	1abb2 <sub24>
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1ac36:	6823      	ldr	r3, [r4, #0]
   1ac38:	fb90 f5f3 	sdiv	r5, r0, r3
    os_time_advance(ticks);
   1ac3c:	4628      	mov	r0, r5
   1ac3e:	f7ef f971 	bl	9f24 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1ac42:	2300      	movs	r3, #0
   1ac44:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1ac48:	6820      	ldr	r0, [r4, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1ac4a:	68a3      	ldr	r3, [r4, #8]
   1ac4c:	fb05 3300 	mla	r3, r5, r0, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1ac50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1ac54:	4418      	add	r0, r3
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1ac56:	60a3      	str	r3, [r4, #8]
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1ac58:	f7ff ffc2 	bl	1abe0 <nrf52_os_tick_set_ocmp>

    OS_EXIT_CRITICAL(sr);
   1ac5c:	4630      	mov	r0, r6
    os_trace_isr_exit();
}
   1ac5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    OS_EXIT_CRITICAL(sr);
   1ac62:	f7ef ba87 	b.w	a174 <os_arch_restore_sr>
   1ac66:	bf00      	nop
   1ac68:	20004bdc 	.word	0x20004bdc
   1ac6c:	40011000 	.word	0x40011000

0001ac70 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1ac70:	b510      	push	{r4, lr}
   1ac72:	4604      	mov	r4, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1ac74:	f7ef fa81 	bl	a17a <os_arch_in_critical>
   1ac78:	4603      	mov	r3, r0
   1ac7a:	b918      	cbnz	r0, 1ac84 <os_tick_idle+0x14>
   1ac7c:	4602      	mov	r2, r0
   1ac7e:	4601      	mov	r1, r0
   1ac80:	f7ee f938 	bl	8ef4 <__assert_func>

    if (ticks > 0) {
   1ac84:	b154      	cbz	r4, 1ac9c <os_tick_idle+0x2c>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1ac86:	4b0a      	ldr	r3, [pc, #40]	; (1acb0 <os_tick_idle+0x40>)
   1ac88:	685a      	ldr	r2, [r3, #4]
            ticks = g_hal_os_tick.max_idle_ticks;
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1ac8a:	6818      	ldr	r0, [r3, #0]
   1ac8c:	689b      	ldr	r3, [r3, #8]
   1ac8e:	4294      	cmp	r4, r2
   1ac90:	bf28      	it	cs
   1ac92:	4614      	movcs	r4, r2
        nrf52_os_tick_set_ocmp(ocmp);
   1ac94:	fb00 3004 	mla	r0, r0, r4, r3
   1ac98:	f7ff ffa2 	bl	1abe0 <nrf52_os_tick_set_ocmp>
  __ASM volatile ("dsb 0xF":::"memory");
   1ac9c:	f3bf 8f4f 	dsb	sy
    }

    __DSB();
    __WFI();
   1aca0:	bf30      	wfi

    if (ticks > 0) {
   1aca2:	b11c      	cbz	r4, 1acac <os_tick_idle+0x3c>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1aca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf52_timer_handler();
   1aca8:	f7ff bfba 	b.w	1ac20 <nrf52_timer_handler>
}
   1acac:	bd10      	pop	{r4, pc}
   1acae:	bf00      	nop
   1acb0:	20004bdc 	.word	0x20004bdc

0001acb4 <os_tick_init>:
void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1acb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1acb8:	fbb3 f3f0 	udiv	r3, r3, r0
   1acbc:	4358      	muls	r0, r3
{
   1acbe:	b570      	push	{r4, r5, r6, lr}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1acc0:	f5d0 4400 	rsbs	r4, r0, #32768	; 0x8000
{
   1acc4:	460d      	mov	r5, r1
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1acc6:	d005      	beq.n	1acd4 <os_tick_init+0x20>
   1acc8:	2300      	movs	r3, #0
   1acca:	461a      	mov	r2, r3
   1accc:	4619      	mov	r1, r3
   1acce:	4618      	mov	r0, r3
   1acd0:	f7ee f910 	bl	8ef4 <__assert_func>

    g_hal_os_tick.lastocmp = 0;
   1acd4:	4e18      	ldr	r6, [pc, #96]	; (1ad38 <os_tick_init+0x84>)
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1acd6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1acda:	6033      	str	r3, [r6, #0]
    g_hal_os_tick.lastocmp = 0;
   1acdc:	60b4      	str	r4, [r6, #8]
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1acde:	fbb2 f3f3 	udiv	r3, r2, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ace2:	016d      	lsls	r5, r5, #5
   1ace4:	6073      	str	r3, [r6, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1ace6:	f7ef fa3f 	bl	a168 <os_arch_save_sr>
   1acea:	4b14      	ldr	r3, [pc, #80]	; (1ad3c <os_tick_init+0x88>)
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1acec:	4a14      	ldr	r2, [pc, #80]	; (1ad40 <os_tick_init+0x8c>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1acee:	4915      	ldr	r1, [pc, #84]	; (1ad44 <os_tick_init+0x90>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1acf0:	b2ed      	uxtb	r5, r5
   1acf2:	f883 5311 	strb.w	r5, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1acf6:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1acf8:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1acfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1ad00:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1ad02:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1ad06:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1ad0a:	2201      	movs	r2, #1
    OS_TICK_TIMER->TASKS_CLEAR = 1;

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1ad0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    OS_TICK_TIMER->TASKS_STOP = 1;
   1ad10:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1ad12:	609a      	str	r2, [r3, #8]
    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1ad14:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1ad18:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1ad1c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1ad20:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1ad24:	6831      	ldr	r1, [r6, #0]
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1ad26:	f8c3 414c 	str.w	r4, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1ad2a:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;

    OS_EXIT_CRITICAL(sr);
}
   1ad2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    OS_TICK_TIMER->TASKS_START = 1;
   1ad32:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1ad34:	f7ef ba1e 	b.w	a174 <os_arch_restore_sr>
   1ad38:	20004bdc 	.word	0x20004bdc
   1ad3c:	e000e100 	.word	0xe000e100
   1ad40:	e000ed00 	.word	0xe000ed00
   1ad44:	0001ac21 	.word	0x0001ac21

0001ad48 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   1ad48:	b570      	push	{r4, r5, r6, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   1ad4a:	4c1b      	ldr	r4, [pc, #108]	; (1adb8 <nrf52_spi0_irq_handler+0x70>)
   1ad4c:	7823      	ldrb	r3, [r4, #0]
   1ad4e:	bb43      	cbnz	r3, 1ada2 <nrf52_spi0_irq_handler+0x5a>
    spim = spi->nhs_spi.spim;
   1ad50:	6925      	ldr	r5, [r4, #16]
    if (spim->EVENTS_END) {
   1ad52:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
   1ad56:	b322      	cbz	r2, 1ada2 <nrf52_spi0_irq_handler+0x5a>
        spim->EVENTS_END = 0;
   1ad58:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
        if (spi->spi_xfr_flag == 0) {
   1ad5c:	7863      	ldrb	r3, [r4, #1]
   1ad5e:	b303      	cbz	r3, 1ada2 <nrf52_spi0_irq_handler+0x5a>
        spi->nhs_bytes_txd += xfr_bytes;
   1ad60:	88e1      	ldrh	r1, [r4, #6]
        xfr_bytes = spim->TXD.AMOUNT;
   1ad62:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   1ad66:	4411      	add	r1, r2
   1ad68:	b28b      	uxth	r3, r1
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   1ad6a:	88a1      	ldrh	r1, [r4, #4]
        spi->nhs_bytes_txd += xfr_bytes;
   1ad6c:	80e3      	strh	r3, [r4, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   1ad6e:	428b      	cmp	r3, r1
   1ad70:	d218      	bcs.n	1ada4 <nrf52_spi0_irq_handler+0x5c>
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   1ad72:	1ac9      	subs	r1, r1, r3
   1ad74:	b289      	uxth	r1, r1
            spi->nhs_txbuf += xfr_bytes;
   1ad76:	69a6      	ldr	r6, [r4, #24]
            if (spi->nhs_rxbuf) {
   1ad78:	69e3      	ldr	r3, [r4, #28]
            spim->TXD.MAXCNT = len;
   1ad7a:	29ff      	cmp	r1, #255	; 0xff
   1ad7c:	b290      	uxth	r0, r2
   1ad7e:	bf28      	it	cs
   1ad80:	21ff      	movcs	r1, #255	; 0xff
            spi->nhs_txbuf += xfr_bytes;
   1ad82:	fa16 f282 	uxtah	r2, r6, r2
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   1ad86:	f8c5 2544 	str.w	r2, [r5, #1348]	; 0x544
            spi->nhs_txbuf += xfr_bytes;
   1ad8a:	61a2      	str	r2, [r4, #24]
            spim->TXD.MAXCNT = len;
   1ad8c:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
            if (spi->nhs_rxbuf) {
   1ad90:	b12b      	cbz	r3, 1ad9e <nrf52_spi0_irq_handler+0x56>
                spi->nhs_rxbuf += xfr_bytes;
   1ad92:	4403      	add	r3, r0
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   1ad94:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
                spi->nhs_rxbuf += xfr_bytes;
   1ad98:	61e3      	str	r3, [r4, #28]
                spim->RXD.MAXCNT = len;
   1ad9a:	f8c5 1538 	str.w	r1, [r5, #1336]	; 0x538
            spim->TASKS_START = 1;
   1ad9e:	2301      	movs	r3, #1
   1ada0:	612b      	str	r3, [r5, #16]
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   1ada2:	bd70      	pop	{r4, r5, r6, pc}
            if (spi->txrx_cb_func) {
   1ada4:	6a23      	ldr	r3, [r4, #32]
   1ada6:	b10b      	cbz	r3, 1adac <nrf52_spi0_irq_handler+0x64>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   1ada8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1adaa:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   1adac:	2300      	movs	r3, #0
   1adae:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   1adb0:	2340      	movs	r3, #64	; 0x40
   1adb2:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
   1adb6:	e7f4      	b.n	1ada2 <nrf52_spi0_irq_handler+0x5a>
   1adb8:	20004be8 	.word	0x20004be8

0001adbc <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1adbc:	2803      	cmp	r0, #3
{
   1adbe:	b570      	push	{r4, r5, r6, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1adc0:	f300 8083 	bgt.w	1aeca <hal_spi_config+0x10e>
   1adc4:	4b43      	ldr	r3, [pc, #268]	; (1aed4 <hal_spi_config+0x118>)
   1adc6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   1adca:	2a00      	cmp	r2, #0
   1adcc:	d07d      	beq.n	1aeca <hal_spi_config+0x10e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1adce:	6914      	ldr	r4, [r2, #16]
    if (spim->ENABLE != 0) {
   1add0:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
   1add4:	2b00      	cmp	r3, #0
   1add6:	d17a      	bne.n	1aece <hal_spi_config+0x112>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1add8:	7810      	ldrb	r0, [r2, #0]
   1adda:	2800      	cmp	r0, #0
   1addc:	d163      	bne.n	1aea6 <hal_spi_config+0xea>
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   1adde:	6808      	ldr	r0, [r1, #0]
   1ade0:	6090      	str	r0, [r2, #8]
   1ade2:	6848      	ldr	r0, [r1, #4]
   1ade4:	60d0      	str	r0, [r2, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   1ade6:	f8d4 2508 	ldr.w	r2, [r4, #1288]	; 0x508
    if (settings->data_mode <= HAL_SPI_MODE1) {
   1adea:	780d      	ldrb	r5, [r1, #0]
   1adec:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   1adf0:	f002 021f 	and.w	r2, r2, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   1adf4:	2001      	movs	r0, #1
        port->OUTCLR = (1UL << pin);
   1adf6:	4090      	lsls	r0, r2
    if (settings->data_mode <= HAL_SPI_MODE1) {
   1adf8:	2d01      	cmp	r5, #1
        port->OUTCLR = (1UL << pin);
   1adfa:	bf94      	ite	ls
   1adfc:	f8c6 050c 	strls.w	r0, [r6, #1292]	; 0x50c
        port->OUTSET = (1UL << pin);
   1ae00:	f8c6 0508 	strhi.w	r0, [r6, #1288]	; 0x508
    port->PIN_CNF[pin] =
   1ae04:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1ae08:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1ae0c:	2603      	movs	r6, #3
   1ae0e:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
    switch (settings->word_size) {
   1ae12:	788a      	ldrb	r2, [r1, #2]
            rc = EINVAL;
   1ae14:	2a00      	cmp	r2, #0
   1ae16:	bf0c      	ite	eq
   1ae18:	2000      	moveq	r0, #0
   1ae1a:	2016      	movne	r0, #22
    switch (settings->data_mode) {
   1ae1c:	42b5      	cmp	r5, r6
   1ae1e:	d822      	bhi.n	1ae66 <hal_spi_config+0xaa>
   1ae20:	e8df f005 	tbb	[pc, r5]
   1ae24:	1f1d0224 	.word	0x1f1d0224
   1ae28:	2202      	movs	r2, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1ae2a:	784d      	ldrb	r5, [r1, #1]
   1ae2c:	2d01      	cmp	r5, #1
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   1ae2e:	bf08      	it	eq
   1ae30:	f042 0201 	orreq.w	r2, r2, #1
    spim->CONFIG = nrf_config;
   1ae34:	f8c4 2554 	str.w	r2, [r4, #1364]	; 0x554
    switch (settings->baudrate) {
   1ae38:	684a      	ldr	r2, [r1, #4]
   1ae3a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1ae3e:	d023      	beq.n	1ae88 <hal_spi_config+0xcc>
   1ae40:	d816      	bhi.n	1ae70 <hal_spi_config+0xb4>
   1ae42:	2afa      	cmp	r2, #250	; 0xfa
   1ae44:	d023      	beq.n	1ae8e <hal_spi_config+0xd2>
   1ae46:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1ae4a:	d023      	beq.n	1ae94 <hal_spi_config+0xd8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   1ae4c:	2a7d      	cmp	r2, #125	; 0x7d
   1ae4e:	bf08      	it	eq
   1ae50:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   1ae54:	bf18      	it	ne
   1ae56:	2016      	movne	r0, #22
    spim->FREQUENCY = frequency;
   1ae58:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
        rc = hal_spi_config_slave(spi, settings);
    }

err:
    return (rc);
}
   1ae5c:	bd70      	pop	{r4, r5, r6, pc}
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1ae5e:	2204      	movs	r2, #4
            break;
   1ae60:	e7e3      	b.n	1ae2a <hal_spi_config+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1ae62:	2206      	movs	r2, #6
            break;
   1ae64:	e7e1      	b.n	1ae2a <hal_spi_config+0x6e>
            nrf_config = 0;
   1ae66:	2200      	movs	r2, #0
            rc = EINVAL;
   1ae68:	2016      	movs	r0, #22
            break;
   1ae6a:	e7de      	b.n	1ae2a <hal_spi_config+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1ae6c:	2200      	movs	r2, #0
   1ae6e:	e7dc      	b.n	1ae2a <hal_spi_config+0x6e>
    switch (settings->baudrate) {
   1ae70:	f5b2 6f7a 	cmp.w	r2, #4000	; 0xfa0
   1ae74:	d011      	beq.n	1ae9a <hal_spi_config+0xde>
   1ae76:	f5b2 5ffa 	cmp.w	r2, #8000	; 0x1f40
   1ae7a:	d011      	beq.n	1aea0 <hal_spi_config+0xe4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   1ae7c:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
   1ae80:	bf08      	it	eq
   1ae82:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
   1ae86:	e7e5      	b.n	1ae54 <hal_spi_config+0x98>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   1ae88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ae8c:	e7e4      	b.n	1ae58 <hal_spi_config+0x9c>
    switch (settings->baudrate) {
   1ae8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1ae92:	e7e1      	b.n	1ae58 <hal_spi_config+0x9c>
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   1ae94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1ae98:	e7de      	b.n	1ae58 <hal_spi_config+0x9c>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   1ae9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ae9e:	e7db      	b.n	1ae58 <hal_spi_config+0x9c>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   1aea0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1aea4:	e7d8      	b.n	1ae58 <hal_spi_config+0x9c>
        rc = hal_spi_config_slave(spi, settings);
   1aea6:	780a      	ldrb	r2, [r1, #0]
   1aea8:	784d      	ldrb	r5, [r1, #1]
   1aeaa:	7889      	ldrb	r1, [r1, #2]
    switch (settings->data_mode) {
   1aeac:	2a03      	cmp	r2, #3
   1aeae:	bf9a      	itte	ls
   1aeb0:	0053      	lslls	r3, r2, #1
    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1aeb2:	2000      	movls	r0, #0
   1aeb4:	2016      	movhi	r0, #22
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1aeb6:	2d01      	cmp	r5, #1
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   1aeb8:	bf08      	it	eq
   1aeba:	f043 0301 	orreq.w	r3, r3, #1
            rc = EINVAL;
   1aebe:	2900      	cmp	r1, #0
    spis->CONFIG = nrf_config;
   1aec0:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
            rc = EINVAL;
   1aec4:	bf18      	it	ne
   1aec6:	2016      	movne	r0, #22
   1aec8:	e7c8      	b.n	1ae5c <hal_spi_config+0xa0>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1aeca:	2016      	movs	r0, #22
   1aecc:	e7c6      	b.n	1ae5c <hal_spi_config+0xa0>
        return -1;
   1aece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aed2:	e7c3      	b.n	1ae5c <hal_spi_config+0xa0>
   1aed4:	000239c4 	.word	0x000239c4

0001aed8 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1aed8:	2803      	cmp	r0, #3
   1aeda:	dc18      	bgt.n	1af0e <hal_spi_enable+0x36>
   1aedc:	4b0d      	ldr	r3, [pc, #52]	; (1af14 <hal_spi_enable+0x3c>)
   1aede:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1aee2:	b1a3      	cbz	r3, 1af0e <hal_spi_enable+0x36>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1aee4:	7818      	ldrb	r0, [r3, #0]
   1aee6:	b920      	cbnz	r0, 1aef2 <hal_spi_enable+0x1a>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   1aee8:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1aeea:	2201      	movs	r2, #1

        spis = spi->nhs_spi.spis;
        spis->EVENTS_END = 0;
        spis->EVENTS_ACQUIRED = 0;
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   1aeec:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1aef0:	4770      	bx	lr
        if (spi->txrx_cb_func == NULL) {
   1aef2:	6a1a      	ldr	r2, [r3, #32]
   1aef4:	b15a      	cbz	r2, 1af0e <hal_spi_enable+0x36>
        spis = spi->nhs_spi.spis;
   1aef6:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   1aef8:	2000      	movs	r0, #0
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   1aefa:	f240 4202 	movw	r2, #1026	; 0x402
        spis->EVENTS_END = 0;
   1aefe:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1af02:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   1af06:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   1af0a:	2202      	movs	r2, #2
   1af0c:	e7ee      	b.n	1aeec <hal_spi_enable+0x14>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1af0e:	2016      	movs	r0, #22
    }
    rc = 0;

err:
    return rc;
}
   1af10:	4770      	bx	lr
   1af12:	bf00      	nop
   1af14:	000239c4 	.word	0x000239c4

0001af18 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1af18:	2803      	cmp	r0, #3
   1af1a:	dc27      	bgt.n	1af6c <hal_spi_disable+0x54>
   1af1c:	4b14      	ldr	r3, [pc, #80]	; (1af70 <hal_spi_disable+0x58>)
   1af1e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1af22:	b31b      	cbz	r3, 1af6c <hal_spi_disable+0x54>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
        spim = spi->nhs_spi.spim;
   1af24:	691a      	ldr	r2, [r3, #16]
    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1af26:	7818      	ldrb	r0, [r3, #0]
   1af28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1af2c:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1af30:	b998      	cbnz	r0, 1af5a <hal_spi_disable+0x42>

        if (spi->spi_xfr_flag) {
   1af32:	7859      	ldrb	r1, [r3, #1]
   1af34:	b149      	cbz	r1, 1af4a <hal_spi_disable+0x32>
    spim->TASKS_STOP = 1;
   1af36:	2101      	movs	r1, #1
   1af38:	6151      	str	r1, [r2, #20]
    while (!spim->EVENTS_STOPPED) {}
   1af3a:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
   1af3e:	2900      	cmp	r1, #0
   1af40:	d0fb      	beq.n	1af3a <hal_spi_disable+0x22>
    spim->EVENTS_STOPPED = 0;
   1af42:	2100      	movs	r1, #0
   1af44:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
   1af48:	7059      	strb	r1, [r3, #1]
        }
        spim->ENABLE = 0;
   1af4a:	2100      	movs	r1, #0
   1af4c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   1af50:	2000      	movs	r0, #0
    spi->nhs_rxbuf = NULL;
   1af52:	e9c3 0006 	strd	r0, r0, [r3, #24]
    spi->nhs_buflen = 0;
   1af56:	6058      	str	r0, [r3, #4]
    spi->nhs_bytes_txd = 0;

    rc = 0;
   1af58:	4770      	bx	lr
        spis->EVENTS_END = 0;
   1af5a:	2100      	movs	r1, #0
   1af5c:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1af60:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   1af64:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   1af68:	70d9      	strb	r1, [r3, #3]
   1af6a:	e7f1      	b.n	1af50 <hal_spi_disable+0x38>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1af6c:	2016      	movs	r0, #22

err:
    return rc;
}
   1af6e:	4770      	bx	lr
   1af70:	000239c4 	.word	0x000239c4

0001af74 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1af74:	2803      	cmp	r0, #3
{
   1af76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af78:	4604      	mov	r4, r0
   1af7a:	460d      	mov	r5, r1
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1af7c:	dc5e      	bgt.n	1b03c <hal_spi_init+0xc8>
   1af7e:	4b30      	ldr	r3, [pc, #192]	; (1b040 <hal_spi_init+0xcc>)
   1af80:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1af84:	2b00      	cmp	r3, #0
   1af86:	d059      	beq.n	1b03c <hal_spi_init+0xc8>
    if (cfg == NULL) {
   1af88:	2900      	cmp	r1, #0
   1af8a:	d057      	beq.n	1b03c <hal_spi_init+0xc8>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   1af8c:	2a01      	cmp	r2, #1
   1af8e:	d855      	bhi.n	1b03c <hal_spi_init+0xc8>
    spi->spi_type  = spi_type;
   1af90:	701a      	strb	r2, [r3, #0]
    if (spi_num == 0) {
   1af92:	2800      	cmp	r0, #0
   1af94:	d152      	bne.n	1b03c <hal_spi_init+0xc8>
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   1af96:	4e2b      	ldr	r6, [pc, #172]	; (1b044 <hal_spi_init+0xd0>)
   1af98:	2703      	movs	r7, #3
   1af9a:	7537      	strb	r7, [r6, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   1af9c:	2a00      	cmp	r2, #0
   1af9e:	d148      	bne.n	1b032 <hal_spi_init+0xbe>
            spi->nhs_spi.spim = NRF_SPIM0;
   1afa0:	4b29      	ldr	r3, [pc, #164]	; (1b048 <hal_spi_init+0xd4>)
   1afa2:	6133      	str	r3, [r6, #16]
    hal_spi_disable(spi_num);
   1afa4:	f7ff ffb8 	bl	1af18 <hal_spi_disable>
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   1afa8:	7869      	ldrb	r1, [r5, #1]
   1afaa:	78a8      	ldrb	r0, [r5, #2]
    port->OUTCLR = (1UL << pin);
   1afac:	f895 c000 	ldrb.w	ip, [r5]
   1afb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1afb4:	2301      	movs	r3, #1
   1afb6:	fa03 f501 	lsl.w	r5, r3, r1
   1afba:	f8c2 550c 	str.w	r5, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   1afbe:	f501 75e0 	add.w	r5, r1, #448	; 0x1c0
   1afc2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
    port->PIN_CNF[pin] =
   1afc6:	f500 75e0 	add.w	r5, r0, #448	; 0x1c0
   1afca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   1afce:	6932      	ldr	r2, [r6, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   1afd0:	f8c2 c508 	str.w	ip, [r2, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   1afd4:	f8c2 150c 	str.w	r1, [r2, #1292]	; 0x50c
    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1afd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    spim->PSEL.MISO = cfg->miso_pin;
   1afdc:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1afe0:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   1afe4:	f996 2014 	ldrsb.w	r2, [r6, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1afe8:	4918      	ldr	r1, [pc, #96]	; (1b04c <hal_spi_init+0xd8>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1afea:	4e19      	ldr	r6, [pc, #100]	; (1b050 <hal_spi_init+0xdc>)
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1afec:	6888      	ldr	r0, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1afee:	f102 0510 	add.w	r5, r2, #16
  if ((int32_t)(IRQn) >= 0)
   1aff2:	2a00      	cmp	r2, #0
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1aff4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
  if ((int32_t)(IRQn) >= 0)
   1aff8:	db14      	blt.n	1b024 <hal_spi_init+0xb0>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1affa:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
   1affe:	f501 4161 	add.w	r1, r1, #57600	; 0xe100
   1b002:	20e0      	movs	r0, #224	; 0xe0
   1b004:	f881 0300 	strb.w	r0, [r1, #768]	; 0x300
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b008:	f002 011f 	and.w	r1, r2, #31
   1b00c:	0952      	lsrs	r2, r2, #5
   1b00e:	0092      	lsls	r2, r2, #2
   1b010:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   1b014:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
   1b018:	408b      	lsls	r3, r1
   1b01a:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b01e:	6013      	str	r3, [r2, #0]
}
   1b020:	4620      	mov	r0, r4
   1b022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b024:	f002 020f 	and.w	r2, r2, #15
   1b028:	3a04      	subs	r2, #4
   1b02a:	440a      	add	r2, r1
   1b02c:	23e0      	movs	r3, #224	; 0xe0
   1b02e:	7613      	strb	r3, [r2, #24]
  if ((int32_t)(IRQn) >= 0)
   1b030:	e7f6      	b.n	1b020 <hal_spi_init+0xac>
            assert(0);
   1b032:	4603      	mov	r3, r0
   1b034:	4602      	mov	r2, r0
   1b036:	4601      	mov	r1, r0
   1b038:	f7ed ff5c 	bl	8ef4 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b03c:	2416      	movs	r4, #22
   1b03e:	e7ef      	b.n	1b020 <hal_spi_init+0xac>
   1b040:	000239c4 	.word	0x000239c4
   1b044:	20004be8 	.word	0x20004be8
   1b048:	40003000 	.word	0x40003000
   1b04c:	e000ed00 	.word	0xe000ed00
   1b050:	0001ad49 	.word	0x0001ad49

0001b054 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b054:	2803      	cmp	r0, #3
   1b056:	dc0a      	bgt.n	1b06e <hal_spi_set_txrx_cb+0x1a>
   1b058:	4b07      	ldr	r3, [pc, #28]	; (1b078 <hal_spi_set_txrx_cb+0x24>)
   1b05a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1b05e:	b133      	cbz	r3, 1b06e <hal_spi_set_txrx_cb+0x1a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1b060:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   1b062:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   1b066:	b920      	cbnz	r0, 1b072 <hal_spi_set_txrx_cb+0x1e>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
        spi->txrx_cb_arg = arg;
   1b068:	e9c3 1208 	strd	r1, r2, [r3, #32]
        rc = 0;
   1b06c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b06e:	2016      	movs	r0, #22
   1b070:	4770      	bx	lr
        rc = -1;
   1b072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

err:
    return rc;
}
   1b076:	4770      	bx	lr
   1b078:	000239c4 	.word	0x000239c4

0001b07c <hal_spi_txrx>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_txrx(int spi_num, void *txbuf, void *rxbuf, int len)
{
   1b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b07e:	460d      	mov	r5, r1
   1b080:	4617      	mov	r7, r2
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   1b082:	461e      	mov	r6, r3
   1b084:	2b00      	cmp	r3, #0
   1b086:	d03d      	beq.n	1b104 <hal_spi_txrx+0x88>
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   1b088:	2803      	cmp	r0, #3
   1b08a:	dc3b      	bgt.n	1b104 <hal_spi_txrx+0x88>
   1b08c:	4b1e      	ldr	r3, [pc, #120]	; (1b108 <hal_spi_txrx+0x8c>)
   1b08e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1b092:	b3bb      	cbz	r3, 1b104 <hal_spi_txrx+0x88>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1b094:	781a      	ldrb	r2, [r3, #0]
   1b096:	bbaa      	cbnz	r2, 1b104 <hal_spi_txrx+0x88>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1b098:	b3a1      	cbz	r1, 1b104 <hal_spi_txrx+0x88>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   1b09a:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   1b09c:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   1b0a0:	2b07      	cmp	r3, #7
   1b0a2:	d105      	bne.n	1b0b0 <hal_spi_txrx+0x34>
            hal_spi_disable(spi_num);
   1b0a4:	f7ff ff38 	bl	1af18 <hal_spi_disable>
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1b0a8:	2301      	movs	r3, #1
   1b0aa:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1b0ae:	e001      	b.n	1b0b4 <hal_spi_txrx+0x38>
        if (enabled == 0) {
   1b0b0:	2b00      	cmp	r3, #0
   1b0b2:	d0f9      	beq.n	1b0a8 <hal_spi_txrx+0x2c>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
            spi->EVENTS_READY = 0;
   1b0b4:	2300      	movs	r3, #0
        while (spi->EVENTS_READY) {
   1b0b6:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
   1b0ba:	b948      	cbnz	r0, 1b0d0 <hal_spi_txrx+0x54>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   1b0bc:	782b      	ldrb	r3, [r5, #0]
   1b0be:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
        rxd = (uint8_t *)rxbuf;
   1b0c2:	463a      	mov	r2, r7
        txcnt = len - 1;
   1b0c4:	1e73      	subs	r3, r6, #1
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
            spi->EVENTS_READY = 0;
   1b0c6:	4601      	mov	r1, r0
        for (i = 0; i < len; ++i) {
   1b0c8:	4286      	cmp	r6, r0
   1b0ca:	dc06      	bgt.n	1b0da <hal_spi_txrx+0x5e>
            if (rxbuf) {
                *rxd = rxval;
                ++rxd;
            }
        }
        return 0;
   1b0cc:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   1b0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rxval = (uint8_t)spi->RXD;
   1b0d0:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   1b0d4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1b0d8:	e7ed      	b.n	1b0b6 <hal_spi_txrx+0x3a>
            if (txcnt) {
   1b0da:	b12b      	cbz	r3, 1b0e8 <hal_spi_txrx+0x6c>
                spi->TXD = *txd;
   1b0dc:	f895 c001 	ldrb.w	ip, [r5, #1]
   1b0e0:	f8c4 c51c 	str.w	ip, [r4, #1308]	; 0x51c
                --txcnt;
   1b0e4:	3b01      	subs	r3, #1
                ++txd;
   1b0e6:	3501      	adds	r5, #1
            while (!spi->EVENTS_READY) {}
   1b0e8:	f8d4 c108 	ldr.w	ip, [r4, #264]	; 0x108
   1b0ec:	f1bc 0f00 	cmp.w	ip, #0
   1b0f0:	d0fa      	beq.n	1b0e8 <hal_spi_txrx+0x6c>
            spi->EVENTS_READY = 0;
   1b0f2:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   1b0f6:	f8d4 c518 	ldr.w	ip, [r4, #1304]	; 0x518
            if (rxbuf) {
   1b0fa:	b10f      	cbz	r7, 1b100 <hal_spi_txrx+0x84>
            rxval = (uint8_t)spi->RXD;
   1b0fc:	f802 cb01 	strb.w	ip, [r2], #1
        for (i = 0; i < len; ++i) {
   1b100:	3001      	adds	r0, #1
   1b102:	e7e1      	b.n	1b0c8 <hal_spi_txrx+0x4c>
    return rc;
   1b104:	2016      	movs	r0, #22
   1b106:	e7e2      	b.n	1b0ce <hal_spi_txrx+0x52>
   1b108:	000239c4 	.word	0x000239c4

0001b10c <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b10c:	2803      	cmp	r0, #3
{
   1b10e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b110:	4694      	mov	ip, r2
   1b112:	460f      	mov	r7, r1
   1b114:	461e      	mov	r6, r3
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b116:	dc61      	bgt.n	1b1dc <hal_spi_txrx_noblock+0xd0>
   1b118:	4d33      	ldr	r5, [pc, #204]	; (1b1e8 <hal_spi_txrx_noblock+0xdc>)
   1b11a:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
   1b11e:	2d00      	cmp	r5, #0
   1b120:	d05c      	beq.n	1b1dc <hal_spi_txrx_noblock+0xd0>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   1b122:	6a2c      	ldr	r4, [r5, #32]
   1b124:	2c00      	cmp	r4, #0
   1b126:	d059      	beq.n	1b1dc <hal_spi_txrx_noblock+0xd0>
   1b128:	2b00      	cmp	r3, #0
   1b12a:	d057      	beq.n	1b1dc <hal_spi_txrx_noblock+0xd0>
#if MYNEWT_VAL_CHOICE(MCU_TARGET,nRF52832)
    /* There is a known issue in nRF52832 with sending 1 byte in SPIM mode that
     * it clocks out additional byte. For this reason, let us use SPI mode
     * for such a write
     */
    if (len == 1) {
   1b12c:	2b01      	cmp	r3, #1
   1b12e:	d109      	bne.n	1b144 <hal_spi_txrx_noblock+0x38>
        rc = hal_spi_txrx(spi_num, txbuf, rxbuf, len);
   1b130:	f7ff ffa4 	bl	1b07c <hal_spi_txrx>
        if (rc == 0) {
   1b134:	4604      	mov	r4, r0
   1b136:	b918      	cbnz	r0, 1b140 <hal_spi_txrx_noblock+0x34>
            spi->txrx_cb_func(spi->txrx_cb_arg, len);
   1b138:	6a2b      	ldr	r3, [r5, #32]
   1b13a:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1b13c:	4631      	mov	r1, r6
   1b13e:	4798      	blx	r3
    }
    return 0;

err:
    return rc;
}
   1b140:	4620      	mov	r0, r4
   1b142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1b144:	782b      	ldrb	r3, [r5, #0]
   1b146:	2b00      	cmp	r3, #0
   1b148:	d13a      	bne.n	1b1c0 <hal_spi_txrx_noblock+0xb4>
        if (txbuf == NULL) {
   1b14a:	2900      	cmp	r1, #0
   1b14c:	d046      	beq.n	1b1dc <hal_spi_txrx_noblock+0xd0>
        if (spi->spi_xfr_flag) {
   1b14e:	786b      	ldrb	r3, [r5, #1]
   1b150:	2b00      	cmp	r3, #0
   1b152:	d145      	bne.n	1b1e0 <hal_spi_txrx_noblock+0xd4>
        spim = spi->nhs_spi.spim;
   1b154:	6928      	ldr	r0, [r5, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   1b156:	2240      	movs	r2, #64	; 0x40
   1b158:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   1b15c:	2201      	movs	r2, #1
   1b15e:	706a      	strb	r2, [r5, #1]
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   1b160:	f8d0 2500 	ldr.w	r2, [r0, #1280]	; 0x500
   1b164:	2a07      	cmp	r2, #7
            spim->ENABLE = 0;
   1b166:	bf1e      	ittt	ne
   1b168:	f8c0 3500 	strne.w	r3, [r0, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1b16c:	2307      	movne	r3, #7
   1b16e:	f8c0 3500 	strne.w	r3, [r0, #1280]	; 0x500
        len = min(SPIM_TXD_MAXCNT_MAX, len);
   1b172:	2eff      	cmp	r6, #255	; 0xff
        spi->nhs_buflen = len;
   1b174:	80ae      	strh	r6, [r5, #4]
        spi->nhs_bytes_txd = 0;
   1b176:	f04f 0300 	mov.w	r3, #0
        len = min(SPIM_TXD_MAXCNT_MAX, len);
   1b17a:	bfa8      	it	ge
   1b17c:	26ff      	movge	r6, #255	; 0xff
        spi->nhs_bytes_txd = 0;
   1b17e:	80eb      	strh	r3, [r5, #6]
        spi->nhs_txbuf = txbuf;
   1b180:	61a9      	str	r1, [r5, #24]
        spim->TXD.PTR = (uint32_t)txbuf;
   1b182:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   1b186:	f8c0 6548 	str.w	r6, [r0, #1352]	; 0x548
        spi->nhs_rxbuf = rxbuf;
   1b18a:	f8c5 c01c 	str.w	ip, [r5, #28]
        if (rxbuf == NULL) {
   1b18e:	f1bc 0f00 	cmp.w	ip, #0
   1b192:	d110      	bne.n	1b1b6 <hal_spi_txrx_noblock+0xaa>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   1b194:	3502      	adds	r5, #2
            spim->RXD.MAXCNT = 1;
   1b196:	2301      	movs	r3, #1
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   1b198:	f8c0 5534 	str.w	r5, [r0, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   1b19c:	f8c0 3538 	str.w	r3, [r0, #1336]	; 0x538
        spim->EVENTS_END = 0;
   1b1a0:	2400      	movs	r4, #0
        spim->TASKS_START = 1;
   1b1a2:	2301      	movs	r3, #1
        spim->EVENTS_END = 0;
   1b1a4:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   1b1a8:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
        spim->TASKS_START = 1;
   1b1ac:	6103      	str	r3, [r0, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   1b1ae:	2340      	movs	r3, #64	; 0x40
   1b1b0:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
   1b1b4:	e7c4      	b.n	1b140 <hal_spi_txrx_noblock+0x34>
            spim->RXD.PTR = (uint32_t)rxbuf;
   1b1b6:	f8c0 c534 	str.w	ip, [r0, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   1b1ba:	f8c0 6538 	str.w	r6, [r0, #1336]	; 0x538
   1b1be:	e7ef      	b.n	1b1a0 <hal_spi_txrx_noblock+0x94>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1b1c0:	b901      	cbnz	r1, 1b1c4 <hal_spi_txrx_noblock+0xb8>
   1b1c2:	b15a      	cbz	r2, 1b1dc <hal_spi_txrx_noblock+0xd0>
        if (len > 255) {
   1b1c4:	2eff      	cmp	r6, #255	; 0xff
   1b1c6:	dc09      	bgt.n	1b1dc <hal_spi_txrx_noblock+0xd0>
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   1b1c8:	78ec      	ldrb	r4, [r5, #3]
   1b1ca:	b94c      	cbnz	r4, 1b1e0 <hal_spi_txrx_noblock+0xd4>
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   1b1cc:	692a      	ldr	r2, [r5, #16]
        spi->nhs_buflen = len;
   1b1ce:	80ae      	strh	r6, [r5, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   1b1d0:	2301      	movs	r3, #1
        spi->nhs_txbuf = txbuf;
   1b1d2:	e9c5 7c06 	strd	r7, ip, [r5, #24]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   1b1d6:	70eb      	strb	r3, [r5, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   1b1d8:	6253      	str	r3, [r2, #36]	; 0x24
   1b1da:	e7b1      	b.n	1b140 <hal_spi_txrx_noblock+0x34>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b1dc:	2416      	movs	r4, #22
   1b1de:	e7af      	b.n	1b140 <hal_spi_txrx_noblock+0x34>
            rc = -1;
   1b1e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1b1e4:	e7ac      	b.n	1b140 <hal_spi_txrx_noblock+0x34>
   1b1e6:	bf00      	nop
   1b1e8:	000239c4 	.word	0x000239c4

0001b1ec <__NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
   1b1ec:	2800      	cmp	r0, #0
   1b1ee:	db09      	blt.n	1b204 <__NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b1f0:	0943      	lsrs	r3, r0, #5
   1b1f2:	2201      	movs	r2, #1
   1b1f4:	f000 001f 	and.w	r0, r0, #31
   1b1f8:	fa02 f000 	lsl.w	r0, r2, r0
   1b1fc:	3340      	adds	r3, #64	; 0x40
   1b1fe:	4a02      	ldr	r2, [pc, #8]	; (1b208 <__NVIC_SetPendingIRQ+0x1c>)
   1b200:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1b204:	4770      	bx	lr
   1b206:	bf00      	nop
   1b208:	e000e100 	.word	0xe000e100

0001b20c <hal_timer_read_bsptimer>:
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
}

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1b20c:	b538      	push	{r3, r4, r5, lr}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1b20e:	6903      	ldr	r3, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b210:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b214:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
    low32 = rtctimer->COUNTER;
   1b216:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1b21a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    tcntr = bsptimer->tmr_cntr;
   1b21e:	6844      	ldr	r4, [r0, #4]
    if (rtctimer->EVENTS_OVRFLW) {
   1b220:	b15a      	cbz	r2, 1b23a <hal_timer_read_bsptimer+0x2e>
        tcntr += (1UL << 24);
   1b222:	f104 7480 	add.w	r4, r4, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
        low32 = rtctimer->COUNTER;
        rtctimer->EVENTS_OVRFLW = 0;
   1b226:	2200      	movs	r2, #0
        bsptimer->tmr_cntr = tcntr;
   1b228:	6044      	str	r4, [r0, #4]
        low32 = rtctimer->COUNTER;
   1b22a:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1b22e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1b232:	f990 0001 	ldrsb.w	r0, [r0, #1]
   1b236:	f7ff ffd9 	bl	1b1ec <__NVIC_SetPendingIRQ>
    }
    tcntr |= low32;
   1b23a:	ea41 0004 	orr.w	r0, r1, r4
    __HAL_ENABLE_INTERRUPTS(ctx);
   1b23e:	b905      	cbnz	r5, 1b242 <hal_timer_read_bsptimer+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
   1b240:	b662      	cpsie	i

    return tcntr;
}
   1b242:	bd38      	pop	{r3, r4, r5, pc}

0001b244 <nrf_timer_set_ocmp>:
{
   1b244:	b430      	push	{r4, r5}
    if (bsptimer->tmr_rtc) {
   1b246:	7884      	ldrb	r4, [r0, #2]
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1b248:	6903      	ldr	r3, [r0, #16]
    if (bsptimer->tmr_rtc) {
   1b24a:	b344      	cbz	r4, 1b29e <nrf_timer_set_ocmp+0x5a>
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1b24c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1b250:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        cntr = rtctimer->COUNTER;
   1b254:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1b258:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
        temp = bsptimer->tmr_cntr;
   1b25c:	6842      	ldr	r2, [r0, #4]
        if (rtctimer->EVENTS_OVRFLW) {
   1b25e:	b11d      	cbz	r5, 1b268 <nrf_timer_set_ocmp+0x24>
            cntr = rtctimer->COUNTER;
   1b260:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
            temp += (1UL << 24);
   1b264:	f102 7280 	add.w	r2, r2, #16777216	; 0x1000000
        temp |= cntr;
   1b268:	4322      	orrs	r2, r4
        delta_t = (int32_t)(expiry - temp);
   1b26a:	1a8a      	subs	r2, r1, r2
        if (delta_t < 3) {
   1b26c:	2a02      	cmp	r2, #2
   1b26e:	dc04      	bgt.n	1b27a <nrf_timer_set_ocmp+0x36>
}
   1b270:	bc30      	pop	{r4, r5}
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1b272:	f990 0001 	ldrsb.w	r0, [r0, #1]
   1b276:	f7ff bfb9 	b.w	1b1ec <__NVIC_SetPendingIRQ>
            if (delta_t < (1UL << 24)) {
   1b27a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1b27e:	bf34      	ite	cc
   1b280:	f021 417f 	biccc.w	r1, r1, #4278190080	; 0xff000000
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1b284:	f504 0400 	addcs.w	r4, r4, #8388608	; 0x800000
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1b288:	f44f 2280 	mov.w	r2, #262144	; 0x40000
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1b28c:	bf34      	ite	cc
   1b28e:	f8c3 1548 	strcc.w	r1, [r3, #1352]	; 0x548
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1b292:	f8c3 4548 	strcs.w	r4, [r3, #1352]	; 0x548
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1b296:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1b29a:	bc30      	pop	{r4, r5}
   1b29c:	4770      	bx	lr
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1b29e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   1b2a2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1b2a6:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1b2aa:	f8c3 414c 	str.w	r4, [r3, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1b2ae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1b2b2:	2201      	movs	r2, #1
   1b2b4:	649a      	str	r2, [r3, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1b2b6:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1b2ba:	1a59      	subs	r1, r3, r1
   1b2bc:	2900      	cmp	r1, #0
   1b2be:	dbec      	blt.n	1b29a <nrf_timer_set_ocmp+0x56>
   1b2c0:	e7d6      	b.n	1b270 <nrf_timer_set_ocmp+0x2c>
	...

0001b2c4 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1b2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    hwtimer = bsptimer->tmr_reg;
   1b2c8:	4c27      	ldr	r4, [pc, #156]	; (1b368 <nrf52_timer0_irq_handler+0xa4>)
   1b2ca:	6926      	ldr	r6, [r4, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1b2cc:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
    if (compare) {
   1b2d0:	b113      	cbz	r3, 1b2d8 <nrf52_timer0_irq_handler+0x14>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1b2d2:	2300      	movs	r3, #0
   1b2d4:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
    ++bsptimer->timer_isrs;
   1b2d8:	68a3      	ldr	r3, [r4, #8]
   1b2da:	3301      	adds	r3, #1
   1b2dc:	60a3      	str	r3, [r4, #8]
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1b2de:	f8d6 3308 	ldr.w	r3, [r6, #776]	; 0x308
   1b2e2:	031b      	lsls	r3, r3, #12
   1b2e4:	d53b      	bpl.n	1b35e <nrf52_timer0_irq_handler+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b2e6:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b2ea:	b672      	cpsid	i
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1b2ec:	f8df a078 	ldr.w	sl, [pc, #120]	; 1b368 <nrf52_timer0_irq_handler+0xa4>
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1b2f0:	f04f 0801 	mov.w	r8, #1
            delta = 0;
   1b2f4:	f04f 0900 	mov.w	r9, #0
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1b2f8:	6965      	ldr	r5, [r4, #20]
   1b2fa:	b155      	cbz	r5, 1b312 <nrf52_timer0_irq_handler+0x4e>
        if (bsptimer->tmr_rtc) {
   1b2fc:	78a2      	ldrb	r2, [r4, #2]
   1b2fe:	b192      	cbz	r2, 1b326 <nrf52_timer0_irq_handler+0x62>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1b300:	4650      	mov	r0, sl
   1b302:	f7ff ff83 	bl	1b20c <hal_timer_read_bsptimer>
            delta = -3;
   1b306:	f06f 0202 	mvn.w	r2, #2
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1b30a:	68eb      	ldr	r3, [r5, #12]
   1b30c:	1ac0      	subs	r0, r0, r3
   1b30e:	4290      	cmp	r0, r2
   1b310:	da0f      	bge.n	1b332 <nrf52_timer0_irq_handler+0x6e>
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1b312:	6963      	ldr	r3, [r4, #20]
    if (timer) {
   1b314:	b9db      	cbnz	r3, 1b34e <nrf52_timer0_irq_handler+0x8a>
        if (bsptimer->tmr_rtc) {
   1b316:	78a2      	ldrb	r2, [r4, #2]
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1b318:	6923      	ldr	r3, [r4, #16]
        if (bsptimer->tmr_rtc) {
   1b31a:	b312      	cbz	r2, 1b362 <nrf52_timer0_irq_handler+0x9e>
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1b31c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1b320:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1b324:	e017      	b.n	1b356 <nrf52_timer0_irq_handler+0x92>
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1b326:	6923      	ldr	r3, [r4, #16]
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1b328:	f8c3 8048 	str.w	r8, [r3, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1b32c:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
            delta = 0;
   1b330:	e7eb      	b.n	1b30a <nrf52_timer0_irq_handler+0x46>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1b332:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
   1b336:	b143      	cbz	r3, 1b34a <nrf52_timer0_irq_handler+0x86>
   1b338:	615a      	str	r2, [r3, #20]
   1b33a:	696a      	ldr	r2, [r5, #20]
   1b33c:	6013      	str	r3, [r2, #0]
            timer->cb_func(timer->cb_arg);
   1b33e:	e9d5 3001 	ldrd	r3, r0, [r5, #4]
            timer->link.tqe_prev = NULL;
   1b342:	f8c5 9014 	str.w	r9, [r5, #20]
            timer->cb_func(timer->cb_arg);
   1b346:	4798      	blx	r3
   1b348:	e7d6      	b.n	1b2f8 <nrf52_timer0_irq_handler+0x34>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1b34a:	61a2      	str	r2, [r4, #24]
   1b34c:	e7f5      	b.n	1b33a <nrf52_timer0_irq_handler+0x76>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1b34e:	68d9      	ldr	r1, [r3, #12]
   1b350:	4805      	ldr	r0, [pc, #20]	; (1b368 <nrf52_timer0_irq_handler+0xa4>)
   1b352:	f7ff ff77 	bl	1b244 <nrf_timer_set_ocmp>
    __HAL_ENABLE_INTERRUPTS(ctx);
   1b356:	b907      	cbnz	r7, 1b35a <nrf52_timer0_irq_handler+0x96>
  __ASM volatile ("cpsie i" : : : "memory");
   1b358:	b662      	cpsie	i
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1b35a:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
    hal_timer_irq_handler(&nrf52_hal_timer0);
}
   1b35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1b362:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   1b366:	e7db      	b.n	1b320 <nrf52_timer0_irq_handler+0x5c>
   1b368:	20004c10 	.word	0x20004c10

0001b36c <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b36c:	2805      	cmp	r0, #5
   1b36e:	dc1d      	bgt.n	1b3ac <hal_timer_init+0x40>
   1b370:	4b0f      	ldr	r3, [pc, #60]	; (1b3b0 <hal_timer_init+0x44>)
   1b372:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1b376:	b1cb      	cbz	r3, 1b3ac <hal_timer_init+0x40>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1b378:	781b      	ldrb	r3, [r3, #0]
   1b37a:	b9bb      	cbnz	r3, 1b3ac <hal_timer_init+0x40>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1b37c:	b9b0      	cbnz	r0, 1b3ac <hal_timer_init+0x40>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1b37e:	4b0d      	ldr	r3, [pc, #52]	; (1b3b4 <hal_timer_init+0x48>)
   1b380:	4a0d      	ldr	r2, [pc, #52]	; (1b3b8 <hal_timer_init+0x4c>)
   1b382:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1b384:	2208      	movs	r2, #8
   1b386:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b388:	4b0c      	ldr	r3, [pc, #48]	; (1b3bc <hal_timer_init+0x50>)
   1b38a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b38e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1b392:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1b396:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b39a:	22e0      	movs	r2, #224	; 0xe0
   1b39c:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1b3a0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1b3a4:	4a06      	ldr	r2, [pc, #24]	; (1b3c0 <hal_timer_init+0x54>)
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1b3a6:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1b3a8:	661a      	str	r2, [r3, #96]	; 0x60
}
   1b3aa:	4770      	bx	lr
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;

err:
    return rc;
   1b3ac:	2016      	movs	r0, #22
}
   1b3ae:	4770      	bx	lr
   1b3b0:	000239d4 	.word	0x000239d4
   1b3b4:	20004c10 	.word	0x20004c10
   1b3b8:	40008000 	.word	0x40008000
   1b3bc:	e000e100 	.word	0xe000e100
   1b3c0:	0001b2c5 	.word	0x0001b2c5

0001b3c4 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b3c4:	2805      	cmp	r0, #5
{
   1b3c6:	b530      	push	{r4, r5, lr}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b3c8:	dc5e      	bgt.n	1b488 <hal_timer_config+0xc4>
   1b3ca:	4b31      	ldr	r3, [pc, #196]	; (1b490 <hal_timer_config+0xcc>)
   1b3cc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1b3d0:	2c00      	cmp	r4, #0
   1b3d2:	d059      	beq.n	1b488 <hal_timer_config+0xc4>
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1b3d4:	7822      	ldrb	r2, [r4, #0]
   1b3d6:	2a00      	cmp	r2, #0
   1b3d8:	d156      	bne.n	1b488 <hal_timer_config+0xc4>
   1b3da:	4b2e      	ldr	r3, [pc, #184]	; (1b494 <hal_timer_config+0xd0>)
   1b3dc:	4299      	cmp	r1, r3
   1b3de:	d853      	bhi.n	1b488 <hal_timer_config+0xc4>
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1b3e0:	fbb3 f1f1 	udiv	r1, r3, r1
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1b3e4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1b3e8:	d84e      	bhi.n	1b488 <hal_timer_config+0xc4>
   1b3ea:	6923      	ldr	r3, [r4, #16]
   1b3ec:	2b00      	cmp	r3, #0
   1b3ee:	d04b      	beq.n	1b488 <hal_timer_config+0xc4>
        (bsptimer->tmr_reg == NULL)) {
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1b3f0:	2901      	cmp	r1, #1
   1b3f2:	d00f      	beq.n	1b414 <hal_timer_config+0x50>
   1b3f4:	2301      	movs	r3, #1
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
            if (div <= (1 << prescaler)) {
   1b3f6:	4618      	mov	r0, r3
   1b3f8:	fa00 f503 	lsl.w	r5, r0, r3
   1b3fc:	428d      	cmp	r5, r1
   1b3fe:	b2da      	uxtb	r2, r3
   1b400:	d33d      	bcc.n	1b47e <hal_timer_config+0xba>
                min_delta = div - (1 << (prescaler - 1));
   1b402:	3b01      	subs	r3, #1
   1b404:	fa00 f303 	lsl.w	r3, r0, r3
   1b408:	1acb      	subs	r3, r1, r3
                max_delta = (1 << prescaler) - div;
   1b40a:	1a69      	subs	r1, r5, r1
                if (min_delta < max_delta) {
   1b40c:	428b      	cmp	r3, r1
   1b40e:	d201      	bcs.n	1b414 <hal_timer_config+0x50>
                    prescaler -= 1;
   1b410:	3a01      	subs	r2, #1
   1b412:	b2d2      	uxtb	r2, r2
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1b414:	4b1f      	ldr	r3, [pc, #124]	; (1b494 <hal_timer_config+0xd0>)
    bsptimer->tmr_enabled = 1;
   1b416:	2501      	movs	r5, #1
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1b418:	4113      	asrs	r3, r2
   1b41a:	60e3      	str	r3, [r4, #12]
    bsptimer->tmr_enabled = 1;
   1b41c:	7025      	strb	r5, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b41e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b422:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1b424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b428:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   1b42c:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
   1b430:	f1b1 1f01 	cmp.w	r1, #65537	; 0x10001
   1b434:	d007      	beq.n	1b446 <hal_timer_config+0x82>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1b436:	2100      	movs	r1, #0
   1b438:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1b43c:	601d      	str	r5, [r3, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1b43e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   1b442:	2900      	cmp	r1, #0
   1b444:	d0fb      	beq.n	1b43e <hal_timer_config+0x7a>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1b446:	6921      	ldr	r1, [r4, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1b448:	2301      	movs	r3, #1
    hwtimer->TASKS_CLEAR = 1;

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1b44a:	2500      	movs	r5, #0
    hwtimer->TASKS_STOP = 1;
   1b44c:	604b      	str	r3, [r1, #4]
    hwtimer->TASKS_CLEAR = 1;
   1b44e:	60cb      	str	r3, [r1, #12]
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1b450:	f8c1 5504 	str.w	r5, [r1, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1b454:	2503      	movs	r5, #3
   1b456:	f8c1 5508 	str.w	r5, [r1, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1b45a:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1b45e:	600b      	str	r3, [r1, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1b460:	f994 2001 	ldrsb.w	r2, [r4, #1]
   1b464:	7861      	ldrb	r1, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   1b466:	2a00      	cmp	r2, #0
   1b468:	db06      	blt.n	1b478 <hal_timer_config+0xb4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b46a:	f001 011f 	and.w	r1, r1, #31
   1b46e:	408b      	lsls	r3, r1
   1b470:	0952      	lsrs	r2, r2, #5
   1b472:	4909      	ldr	r1, [pc, #36]	; (1b498 <hal_timer_config+0xd4>)
   1b474:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1b478:	b940      	cbnz	r0, 1b48c <hal_timer_config+0xc8>
  __ASM volatile ("cpsie i" : : : "memory");
   1b47a:	b662      	cpsie	i

    return 0;

err:
    return rc;
}
   1b47c:	bd30      	pop	{r4, r5, pc}
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1b47e:	3301      	adds	r3, #1
   1b480:	2b0a      	cmp	r3, #10
   1b482:	d1b9      	bne.n	1b3f8 <hal_timer_config+0x34>
   1b484:	461a      	mov	r2, r3
   1b486:	e7c5      	b.n	1b414 <hal_timer_config+0x50>
    return rc;
   1b488:	2016      	movs	r0, #22
   1b48a:	e7f7      	b.n	1b47c <hal_timer_config+0xb8>
    return 0;
   1b48c:	2000      	movs	r0, #0
   1b48e:	e7f5      	b.n	1b47c <hal_timer_config+0xb8>
   1b490:	000239d4 	.word	0x000239d4
   1b494:	00f42400 	.word	0x00f42400
   1b498:	e000e100 	.word	0xe000e100

0001b49c <hal_timer_read>:
{
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b49c:	2805      	cmp	r0, #5
{
   1b49e:	b508      	push	{r3, lr}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b4a0:	dc09      	bgt.n	1b4b6 <hal_timer_read+0x1a>
   1b4a2:	4b0b      	ldr	r3, [pc, #44]	; (1b4d0 <hal_timer_read+0x34>)
   1b4a4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1b4a8:	b128      	cbz	r0, 1b4b6 <hal_timer_read+0x1a>
    if (bsptimer->tmr_rtc) {
   1b4aa:	7883      	ldrb	r3, [r0, #2]
   1b4ac:	b14b      	cbz	r3, 1b4c2 <hal_timer_read+0x26>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1b4ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1b4b2:	f7ff beab 	b.w	1b20c <hal_timer_read_bsptimer>
    assert(0);
   1b4b6:	2300      	movs	r3, #0
   1b4b8:	461a      	mov	r2, r3
   1b4ba:	4619      	mov	r1, r3
   1b4bc:	4618      	mov	r0, r3
   1b4be:	f7ed fd19 	bl	8ef4 <__assert_func>
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1b4c2:	6903      	ldr	r3, [r0, #16]
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1b4c4:	2201      	movs	r2, #1
   1b4c6:	649a      	str	r2, [r3, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1b4c8:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1b4cc:	bd08      	pop	{r3, pc}
   1b4ce:	bf00      	nop
   1b4d0:	000239d4 	.word	0x000239d4

0001b4d4 <hal_timer_set_cb>:
                 void *arg)
{
    int rc;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b4d4:	2805      	cmp	r0, #5
{
   1b4d6:	b510      	push	{r4, lr}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b4d8:	dc09      	bgt.n	1b4ee <hal_timer_set_cb+0x1a>
   1b4da:	4c06      	ldr	r4, [pc, #24]	; (1b4f4 <hal_timer_set_cb+0x20>)
   1b4dc:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   1b4e0:	b12c      	cbz	r4, 1b4ee <hal_timer_set_cb+0x1a>

    timer->cb_func = cb_func;
    timer->cb_arg = arg;
   1b4e2:	e9c1 2301 	strd	r2, r3, [r1, #4]
    timer->link.tqe_prev = NULL;
   1b4e6:	2000      	movs	r0, #0
   1b4e8:	6148      	str	r0, [r1, #20]
    timer->bsp_timer = bsptimer;
   1b4ea:	600c      	str	r4, [r1, #0]

    rc = 0;

err:
    return rc;
}
   1b4ec:	bd10      	pop	{r4, pc}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b4ee:	2016      	movs	r0, #22
    return rc;
   1b4f0:	e7fc      	b.n	1b4ec <hal_timer_set_cb+0x18>
   1b4f2:	bf00      	nop
   1b4f4:	000239d4 	.word	0x000239d4

0001b4f8 <hal_timer_start_at>:
    return rc;
}

int
hal_timer_start_at(struct hal_timer *timer, uint32_t tick)
{
   1b4f8:	b570      	push	{r4, r5, r6, lr}
    uint32_t ctx;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   1b4fa:	2800      	cmp	r0, #0
   1b4fc:	d033      	beq.n	1b566 <hal_timer_start_at+0x6e>
   1b4fe:	6943      	ldr	r3, [r0, #20]
   1b500:	2b00      	cmp	r3, #0
   1b502:	d130      	bne.n	1b566 <hal_timer_start_at+0x6e>
   1b504:	6843      	ldr	r3, [r0, #4]
   1b506:	2b00      	cmp	r3, #0
   1b508:	d02d      	beq.n	1b566 <hal_timer_start_at+0x6e>
        (timer->cb_func == NULL)) {
        return EINVAL;
    }
    bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   1b50a:	6802      	ldr	r2, [r0, #0]
    timer->expiry = tick;
   1b50c:	60c1      	str	r1, [r0, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b50e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b512:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (TAILQ_EMPTY(&bsptimer->hal_timer_q)) {
   1b514:	6953      	ldr	r3, [r2, #20]
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
   1b516:	f100 0110 	add.w	r1, r0, #16
    if (TAILQ_EMPTY(&bsptimer->hal_timer_q)) {
   1b51a:	b953      	cbnz	r3, 1b532 <hal_timer_start_at+0x3a>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
   1b51c:	6103      	str	r3, [r0, #16]
   1b51e:	4613      	mov	r3, r2
   1b520:	6191      	str	r1, [r2, #24]
   1b522:	f843 0f14 	str.w	r0, [r3, #20]!
   1b526:	6143      	str	r3, [r0, #20]
        }
    }

    /* If this is the head, we need to set new OCMP */
    if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1b528:	68c1      	ldr	r1, [r0, #12]
   1b52a:	4610      	mov	r0, r2
   1b52c:	f7ff fe8a 	bl	1b244 <nrf_timer_set_ocmp>
   1b530:	e00c      	b.n	1b54c <hal_timer_start_at+0x54>
            if ((int32_t)(timer->expiry - entry->expiry) < 0) {
   1b532:	68c6      	ldr	r6, [r0, #12]
   1b534:	68dd      	ldr	r5, [r3, #12]
   1b536:	1b75      	subs	r5, r6, r5
   1b538:	2d00      	cmp	r5, #0
   1b53a:	da0b      	bge.n	1b554 <hal_timer_start_at+0x5c>
                TAILQ_INSERT_BEFORE(entry, timer, link);
   1b53c:	695d      	ldr	r5, [r3, #20]
   1b53e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   1b542:	6028      	str	r0, [r5, #0]
   1b544:	6159      	str	r1, [r3, #20]
    if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   1b546:	6953      	ldr	r3, [r2, #20]
   1b548:	4298      	cmp	r0, r3
   1b54a:	d0ed      	beq.n	1b528 <hal_timer_start_at+0x30>
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   1b54c:	b904      	cbnz	r4, 1b550 <hal_timer_start_at+0x58>
  __ASM volatile ("cpsie i" : : : "memory");
   1b54e:	b662      	cpsie	i
   1b550:	2000      	movs	r0, #0
   1b552:	e009      	b.n	1b568 <hal_timer_start_at+0x70>
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   1b554:	691b      	ldr	r3, [r3, #16]
   1b556:	2b00      	cmp	r3, #0
   1b558:	d1ec      	bne.n	1b534 <hal_timer_start_at+0x3c>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
   1b55a:	6103      	str	r3, [r0, #16]
   1b55c:	6993      	ldr	r3, [r2, #24]
   1b55e:	6143      	str	r3, [r0, #20]
   1b560:	6018      	str	r0, [r3, #0]
   1b562:	6191      	str	r1, [r2, #24]
   1b564:	e7ef      	b.n	1b546 <hal_timer_start_at+0x4e>
        return EINVAL;
   1b566:	2016      	movs	r0, #22

    return 0;
}
   1b568:	bd70      	pop	{r4, r5, r6, pc}

0001b56a <hal_timer_stop>:
 *
 * @return int
 */
int
hal_timer_stop(struct hal_timer *timer)
{
   1b56a:	b570      	push	{r4, r5, r6, lr}
    uint32_t ctx;
    int reset_ocmp;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if (timer == NULL) {
   1b56c:	b350      	cbz	r0, 1b5c4 <hal_timer_stop+0x5a>
        return EINVAL;
    }

   bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   1b56e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b570:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b574:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (timer->link.tqe_prev != NULL) {
   1b576:	6941      	ldr	r1, [r0, #20]
   1b578:	b199      	cbz	r1, 1b5a2 <hal_timer_stop+0x38>
        reset_ocmp = 0;
        if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   1b57a:	695d      	ldr	r5, [r3, #20]
            /* If first on queue, we will need to reset OCMP */
            entry = TAILQ_NEXT(timer, link);
   1b57c:	6902      	ldr	r2, [r0, #16]
        reset_ocmp = 0;
   1b57e:	4285      	cmp	r5, r0
   1b580:	bf0b      	itete	eq
   1b582:	2601      	moveq	r6, #1
   1b584:	2600      	movne	r6, #0
   1b586:	4615      	moveq	r5, r2
   1b588:	2500      	movne	r5, #0
            reset_ocmp = 1;
        }
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1b58a:	b172      	cbz	r2, 1b5aa <hal_timer_stop+0x40>
   1b58c:	6151      	str	r1, [r2, #20]
   1b58e:	6941      	ldr	r1, [r0, #20]
   1b590:	600a      	str	r2, [r1, #0]
        timer->link.tqe_prev = NULL;
   1b592:	2200      	movs	r2, #0
   1b594:	6142      	str	r2, [r0, #20]
        if (reset_ocmp) {
   1b596:	b126      	cbz	r6, 1b5a2 <hal_timer_stop+0x38>
            if (entry) {
   1b598:	b14d      	cbz	r5, 1b5ae <hal_timer_stop+0x44>
                nrf_timer_set_ocmp((struct nrf52_hal_timer *)entry->bsp_timer,
   1b59a:	68e9      	ldr	r1, [r5, #12]
   1b59c:	6828      	ldr	r0, [r5, #0]
   1b59e:	f7ff fe51 	bl	1b244 <nrf_timer_set_ocmp>
                }
            }
        }
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   1b5a2:	b904      	cbnz	r4, 1b5a6 <hal_timer_stop+0x3c>
  __ASM volatile ("cpsie i" : : : "memory");
   1b5a4:	b662      	cpsie	i

    return 0;
   1b5a6:	2000      	movs	r0, #0
   1b5a8:	e00d      	b.n	1b5c6 <hal_timer_stop+0x5c>
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1b5aa:	6199      	str	r1, [r3, #24]
   1b5ac:	e7ef      	b.n	1b58e <hal_timer_stop+0x24>
                    nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1b5ae:	691a      	ldr	r2, [r3, #16]
                if (bsptimer->tmr_rtc) {
   1b5b0:	789b      	ldrb	r3, [r3, #2]
   1b5b2:	b123      	cbz	r3, 1b5be <hal_timer_stop+0x54>
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1b5b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1b5b8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1b5bc:	e7f1      	b.n	1b5a2 <hal_timer_stop+0x38>
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1b5be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1b5c2:	e7f9      	b.n	1b5b8 <hal_timer_stop+0x4e>
        return EINVAL;
   1b5c4:	2016      	movs	r0, #22
}
   1b5c6:	bd70      	pop	{r4, r5, r6, pc}

0001b5c8 <nrf52_wdt_irq_handler>:
/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   1b5c8:	4a07      	ldr	r2, [pc, #28]	; (1b5e8 <nrf52_wdt_irq_handler+0x20>)
{
   1b5ca:	b508      	push	{r3, lr}
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   1b5cc:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   1b5d0:	07db      	lsls	r3, r3, #31
   1b5d2:	d507      	bpl.n	1b5e4 <nrf52_wdt_irq_handler+0x1c>
        NRF_WDT->EVENTS_TIMEOUT = 0;
   1b5d4:	2300      	movs	r3, #0
   1b5d6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    assert(0);
   1b5da:	4619      	mov	r1, r3
   1b5dc:	461a      	mov	r2, r3
   1b5de:	4618      	mov	r0, r3
   1b5e0:	f7ed fc88 	bl	8ef4 <__assert_func>
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   1b5e4:	bd08      	pop	{r3, pc}
   1b5e6:	bf00      	nop
   1b5e8:	40010000 	.word	0x40010000

0001b5ec <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   1b5ec:	4a16      	ldr	r2, [pc, #88]	; (1b648 <hal_watchdog_init+0x5c>)
{
   1b5ee:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   1b5f0:	2301      	movs	r3, #1
   1b5f2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   1b5f6:	4b15      	ldr	r3, [pc, #84]	; (1b64c <hal_watchdog_init+0x60>)
   1b5f8:	4298      	cmp	r0, r3
   1b5fa:	d905      	bls.n	1b608 <hal_watchdog_init+0x1c>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
   1b5fc:	2300      	movs	r3, #0
   1b5fe:	461a      	mov	r2, r3
   1b600:	4619      	mov	r1, r3
   1b602:	4618      	mov	r0, r3
   1b604:	f7ed fc76 	bl	8ef4 <__assert_func>
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   1b608:	2360      	movs	r3, #96	; 0x60
   1b60a:	4343      	muls	r3, r0
   1b60c:	217d      	movs	r1, #125	; 0x7d
   1b60e:	fbb3 f3f1 	udiv	r3, r3, r1
   1b612:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1b616:	4b0e      	ldr	r3, [pc, #56]	; (1b650 <hal_watchdog_init+0x64>)
   1b618:	f8c2 0504 	str.w	r0, [r2, #1284]	; 0x504
   1b61c:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1b61e:	490d      	ldr	r1, [pc, #52]	; (1b654 <hal_watchdog_init+0x68>)
   1b620:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b624:	4b0c      	ldr	r3, [pc, #48]	; (1b658 <hal_watchdog_init+0x6c>)
   1b626:	21e0      	movs	r1, #224	; 0xe0
   1b628:	f883 1310 	strb.w	r1, [r3, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b62c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1b630:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b634:	6019      	str	r1, [r3, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   1b636:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   1b63a:	f043 0301 	orr.w	r3, r3, #1
   1b63e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

    return (0);
}
   1b642:	2000      	movs	r0, #0
   1b644:	bd08      	pop	{r3, pc}
   1b646:	bf00      	nop
   1b648:	40010000 	.word	0x40010000
   1b64c:	02aaaaaa 	.word	0x02aaaaaa
   1b650:	e000ed00 	.word	0xe000ed00
   1b654:	0001b5c9 	.word	0x0001b5c9
   1b658:	e000e100 	.word	0xe000e100

0001b65c <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   1b65c:	4b02      	ldr	r3, [pc, #8]	; (1b668 <hal_watchdog_enable+0xc>)
   1b65e:	2201      	movs	r2, #1
   1b660:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   1b664:	601a      	str	r2, [r3, #0]
}
   1b666:	4770      	bx	lr
   1b668:	40010000 	.word	0x40010000

0001b66c <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   1b66c:	4b02      	ldr	r3, [pc, #8]	; (1b678 <hal_watchdog_tickle+0xc>)
   1b66e:	4a03      	ldr	r2, [pc, #12]	; (1b67c <hal_watchdog_tickle+0x10>)
   1b670:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   1b674:	4770      	bx	lr
   1b676:	bf00      	nop
   1b678:	40010000 	.word	0x40010000
   1b67c:	6e524635 	.word	0x6e524635

0001b680 <nrf52_periph_create>:
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1b680:	2100      	movs	r1, #0
#endif
}

void
nrf52_periph_create(void)
{
   1b682:	b508      	push	{r3, lr}
    rc = hal_timer_init(0, NULL);
   1b684:	4608      	mov	r0, r1
   1b686:	f7ff fe71 	bl	1b36c <hal_timer_init>
    assert(rc == 0);
   1b68a:	b128      	cbz	r0, 1b698 <nrf52_periph_create+0x18>
   1b68c:	2300      	movs	r3, #0
   1b68e:	461a      	mov	r2, r3
   1b690:	4619      	mov	r1, r3
   1b692:	4618      	mov	r0, r3
   1b694:	f7ed fc2e 	bl	8ef4 <__assert_func>
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1b698:	4805      	ldr	r0, [pc, #20]	; (1b6b0 <nrf52_periph_create+0x30>)
   1b69a:	f7ed fe4c 	bl	9336 <os_cputime_init>
    assert(rc == 0);
   1b69e:	4602      	mov	r2, r0
   1b6a0:	2800      	cmp	r0, #0
   1b6a2:	d1f3      	bne.n	1b68c <nrf52_periph_create+0xc>
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1b6a4:	4903      	ldr	r1, [pc, #12]	; (1b6b4 <nrf52_periph_create+0x34>)
   1b6a6:	f7ff fc65 	bl	1af74 <hal_spi_init>
    assert(rc == 0);
   1b6aa:	2800      	cmp	r0, #0
   1b6ac:	d1ee      	bne.n	1b68c <nrf52_periph_create+0xc>
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
}
   1b6ae:	bd08      	pop	{r3, pc}
   1b6b0:	000f4240 	.word	0x000f4240
   1b6b4:	000239ec 	.word	0x000239ec

0001b6b8 <json_encode_object_start>:


int
json_encode_object_start(struct json_encoder *encoder)
{
    if (encoder->je_wr_commas) {
   1b6b8:	7a03      	ldrb	r3, [r0, #8]
   1b6ba:	07db      	lsls	r3, r3, #31
{
   1b6bc:	b510      	push	{r4, lr}
   1b6be:	4604      	mov	r4, r0
    if (encoder->je_wr_commas) {
   1b6c0:	d508      	bpl.n	1b6d4 <json_encode_object_start+0x1c>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1b6c2:	6803      	ldr	r3, [r0, #0]
   1b6c4:	4909      	ldr	r1, [pc, #36]	; (1b6ec <json_encode_object_start+0x34>)
   1b6c6:	6840      	ldr	r0, [r0, #4]
   1b6c8:	2201      	movs	r2, #1
   1b6ca:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   1b6cc:	7a23      	ldrb	r3, [r4, #8]
   1b6ce:	f36f 0300 	bfc	r3, #0, #1
   1b6d2:	7223      	strb	r3, [r4, #8]
    }
    JSON_ENCODE_OBJECT_START(encoder);
   1b6d4:	6823      	ldr	r3, [r4, #0]
   1b6d6:	4906      	ldr	r1, [pc, #24]	; (1b6f0 <json_encode_object_start+0x38>)
   1b6d8:	6860      	ldr	r0, [r4, #4]
   1b6da:	2201      	movs	r2, #1
   1b6dc:	4798      	blx	r3
    encoder->je_wr_commas = 0;
   1b6de:	7a23      	ldrb	r3, [r4, #8]
   1b6e0:	f36f 0300 	bfc	r3, #0, #1
   1b6e4:	7223      	strb	r3, [r4, #8]

    return (0);
}
   1b6e6:	2000      	movs	r0, #0
   1b6e8:	bd10      	pop	{r4, pc}
   1b6ea:	bf00      	nop
   1b6ec:	000239f0 	.word	0x000239f0
   1b6f0:	000239f2 	.word	0x000239f2

0001b6f4 <json_encode_object_key>:
}
EXPORT_SYMBOL(json_encode_value);

int
json_encode_object_key(struct json_encoder *encoder, char *key)
{
   1b6f4:	b538      	push	{r3, r4, r5, lr}
    if (encoder->je_wr_commas) {
   1b6f6:	7a03      	ldrb	r3, [r0, #8]
   1b6f8:	07db      	lsls	r3, r3, #31
{
   1b6fa:	4604      	mov	r4, r0
   1b6fc:	460d      	mov	r5, r1
    if (encoder->je_wr_commas) {
   1b6fe:	d508      	bpl.n	1b712 <json_encode_object_key+0x1e>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1b700:	6803      	ldr	r3, [r0, #0]
   1b702:	490e      	ldr	r1, [pc, #56]	; (1b73c <json_encode_object_key+0x48>)
   1b704:	6840      	ldr	r0, [r0, #4]
   1b706:	2201      	movs	r2, #1
   1b708:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   1b70a:	7a23      	ldrb	r3, [r4, #8]
   1b70c:	f36f 0300 	bfc	r3, #0, #1
   1b710:	7223      	strb	r3, [r4, #8]
    }

    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   1b712:	6823      	ldr	r3, [r4, #0]
   1b714:	490a      	ldr	r1, [pc, #40]	; (1b740 <json_encode_object_key+0x4c>)
   1b716:	6860      	ldr	r0, [r4, #4]
   1b718:	2201      	movs	r2, #1
   1b71a:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
   1b71c:	4628      	mov	r0, r5
   1b71e:	f7f3 ff9e 	bl	f65e <strlen>
   1b722:	6823      	ldr	r3, [r4, #0]
   1b724:	4602      	mov	r2, r0
   1b726:	4629      	mov	r1, r5
   1b728:	6860      	ldr	r0, [r4, #4]
   1b72a:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
   1b72c:	6823      	ldr	r3, [r4, #0]
   1b72e:	4905      	ldr	r1, [pc, #20]	; (1b744 <json_encode_object_key+0x50>)
   1b730:	6860      	ldr	r0, [r4, #4]
   1b732:	2203      	movs	r2, #3
   1b734:	4798      	blx	r3

    return (0);
}
   1b736:	2000      	movs	r0, #0
   1b738:	bd38      	pop	{r3, r4, r5, pc}
   1b73a:	bf00      	nop
   1b73c:	000239f0 	.word	0x000239f0
   1b740:	00021a3b 	.word	0x00021a3b
   1b744:	000239f4 	.word	0x000239f4

0001b748 <json_encode_object_entry>:
json_encode_object_entry(struct json_encoder *encoder, char *key,
        struct json_value *val)
{
    int rc;

    if (encoder->je_wr_commas) {
   1b748:	7a03      	ldrb	r3, [r0, #8]
   1b74a:	07db      	lsls	r3, r3, #31
{
   1b74c:	b570      	push	{r4, r5, r6, lr}
   1b74e:	4604      	mov	r4, r0
   1b750:	460d      	mov	r5, r1
   1b752:	4616      	mov	r6, r2
    if (encoder->je_wr_commas) {
   1b754:	d508      	bpl.n	1b768 <json_encode_object_entry+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1b756:	6803      	ldr	r3, [r0, #0]
   1b758:	4911      	ldr	r1, [pc, #68]	; (1b7a0 <json_encode_object_entry+0x58>)
   1b75a:	6840      	ldr	r0, [r0, #4]
   1b75c:	2201      	movs	r2, #1
   1b75e:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   1b760:	7a23      	ldrb	r3, [r4, #8]
   1b762:	f36f 0300 	bfc	r3, #0, #1
   1b766:	7223      	strb	r3, [r4, #8]
    }
    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   1b768:	6823      	ldr	r3, [r4, #0]
   1b76a:	490e      	ldr	r1, [pc, #56]	; (1b7a4 <json_encode_object_entry+0x5c>)
   1b76c:	6860      	ldr	r0, [r4, #4]
   1b76e:	2201      	movs	r2, #1
   1b770:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
   1b772:	4628      	mov	r0, r5
   1b774:	f7f3 ff73 	bl	f65e <strlen>
   1b778:	6823      	ldr	r3, [r4, #0]
   1b77a:	4602      	mov	r2, r0
   1b77c:	4629      	mov	r1, r5
   1b77e:	6860      	ldr	r0, [r4, #4]
   1b780:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
   1b782:	4909      	ldr	r1, [pc, #36]	; (1b7a8 <json_encode_object_entry+0x60>)
   1b784:	6823      	ldr	r3, [r4, #0]
   1b786:	6860      	ldr	r0, [r4, #4]
   1b788:	2203      	movs	r2, #3
   1b78a:	4798      	blx	r3

    rc = json_encode_value(encoder, val);
   1b78c:	4631      	mov	r1, r6
   1b78e:	4620      	mov	r0, r4
   1b790:	f000 f80c 	bl	1b7ac <json_encode_value>
    if (rc != 0) {
   1b794:	b918      	cbnz	r0, 1b79e <json_encode_object_entry+0x56>
        goto err;
    }
    encoder->je_wr_commas = 1;
   1b796:	7a23      	ldrb	r3, [r4, #8]
   1b798:	f043 0301 	orr.w	r3, r3, #1
   1b79c:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
   1b79e:	bd70      	pop	{r4, r5, r6, pc}
   1b7a0:	000239f0 	.word	0x000239f0
   1b7a4:	00021a3b 	.word	0x00021a3b
   1b7a8:	000239f4 	.word	0x000239f4

0001b7ac <json_encode_value>:
{
   1b7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    switch (jv->jv_type) {
   1b7b0:	784b      	ldrb	r3, [r1, #1]
{
   1b7b2:	4604      	mov	r4, r0
   1b7b4:	460d      	mov	r5, r1
    switch (jv->jv_type) {
   1b7b6:	2b06      	cmp	r3, #6
   1b7b8:	f200 80c5 	bhi.w	1b946 <json_encode_value+0x19a>
   1b7bc:	e8df f003 	tbb	[pc, r3]
   1b7c0:	401f1604 	.word	0x401f1604
   1b7c4:	a988      	.short	0xa988
   1b7c6:	25          	.byte	0x25
   1b7c7:	00          	.byte	0x00
            len = sprintf(encoder->je_encode_buf, "%s",
   1b7c8:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1b7cc:	f100 0609 	add.w	r6, r0, #9
   1b7d0:	4313      	orrs	r3, r2
   1b7d2:	bf0c      	ite	eq
   1b7d4:	4a5d      	ldreq	r2, [pc, #372]	; (1b94c <json_encode_value+0x1a0>)
   1b7d6:	4a5e      	ldrne	r2, [pc, #376]	; (1b950 <json_encode_value+0x1a4>)
   1b7d8:	495e      	ldr	r1, [pc, #376]	; (1b954 <json_encode_value+0x1a8>)
   1b7da:	4630      	mov	r0, r6
   1b7dc:	f002 fc4a 	bl	1e074 <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   1b7e0:	6823      	ldr	r3, [r4, #0]
            len = sprintf(encoder->je_encode_buf, "%" PRIu64,
   1b7e2:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   1b7e4:	4631      	mov	r1, r6
            JSON_ENCODE_OBJECT_END(encoder);
   1b7e6:	6860      	ldr	r0, [r4, #4]
   1b7e8:	4798      	blx	r3
   1b7ea:	e03c      	b.n	1b866 <json_encode_value+0xba>
            len = sprintf(encoder->je_encode_buf, "%" PRIu64,
   1b7ec:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1b7f0:	4959      	ldr	r1, [pc, #356]	; (1b958 <json_encode_value+0x1ac>)
   1b7f2:	f100 0609 	add.w	r6, r0, #9
   1b7f6:	4630      	mov	r0, r6
   1b7f8:	f002 fc3c 	bl	1e074 <sprintf>
   1b7fc:	e7f0      	b.n	1b7e0 <json_encode_value+0x34>
            len = sprintf(encoder->je_encode_buf, "%" PRIi64,
   1b7fe:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1b802:	f100 0609 	add.w	r6, r0, #9
   1b806:	4955      	ldr	r1, [pc, #340]	; (1b95c <json_encode_value+0x1b0>)
   1b808:	e7f5      	b.n	1b7f6 <json_encode_value+0x4a>
        if  (DPL_FLOAT64_ISNAN(jv->jv_val.fl)){
   1b80a:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
            len = sprintf(encoder->je_encode_buf, "%s",
   1b80e:	f100 0509 	add.w	r5, r0, #9
        if  (DPL_FLOAT64_ISNAN(jv->jv_val.fl)){
   1b812:	4632      	mov	r2, r6
   1b814:	463b      	mov	r3, r7
   1b816:	4630      	mov	r0, r6
   1b818:	4639      	mov	r1, r7
   1b81a:	f004 fdeb 	bl	203f4 <__aeabi_dcmpun>
   1b81e:	b138      	cbz	r0, 1b830 <json_encode_value+0x84>
            len = sprintf(encoder->je_encode_buf, "null");
   1b820:	494f      	ldr	r1, [pc, #316]	; (1b960 <json_encode_value+0x1b4>)
   1b822:	4628      	mov	r0, r5
   1b824:	f002 fc42 	bl	1e0ac <strcpy>
   1b828:	2204      	movs	r2, #4
        encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   1b82a:	6823      	ldr	r3, [r4, #0]
   1b82c:	4629      	mov	r1, r5
   1b82e:	e7da      	b.n	1b7e6 <json_encode_value+0x3a>
            len = sprintf(encoder->je_encode_buf,
   1b830:	4632      	mov	r2, r6
   1b832:	494c      	ldr	r1, [pc, #304]	; (1b964 <json_encode_value+0x1b8>)
   1b834:	463b      	mov	r3, r7
   1b836:	4628      	mov	r0, r5
   1b838:	f002 fc1c 	bl	1e074 <sprintf>
   1b83c:	4602      	mov	r2, r0
   1b83e:	e7f4      	b.n	1b82a <json_encode_value+0x7e>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   1b840:	6803      	ldr	r3, [r0, #0]
   1b842:	4949      	ldr	r1, [pc, #292]	; (1b968 <json_encode_value+0x1bc>)
   1b844:	6840      	ldr	r0, [r0, #4]
                        encoder->je_write(encoder->je_arg, "\\",
   1b846:	4f49      	ldr	r7, [pc, #292]	; (1b96c <json_encode_value+0x1c0>)
                        encoder->je_write(encoder->je_arg, "\\b",
   1b848:	f8df 8144 	ldr.w	r8, [pc, #324]	; 1b990 <json_encode_value+0x1e4>
                        encoder->je_write(encoder->je_arg, "\\f",
   1b84c:	f8df 9144 	ldr.w	r9, [pc, #324]	; 1b994 <json_encode_value+0x1e8>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   1b850:	2201      	movs	r2, #1
   1b852:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   1b854:	2600      	movs	r6, #0
   1b856:	886b      	ldrh	r3, [r5, #2]
   1b858:	42b3      	cmp	r3, r6
                        encoder->je_write(encoder->je_arg, "\\",
   1b85a:	e9d4 a000 	ldrd	sl, r0, [r4]
            for (i = 0; i < jv->jv_len; i++) {
   1b85e:	dc05      	bgt.n	1b86c <json_encode_value+0xc0>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   1b860:	4941      	ldr	r1, [pc, #260]	; (1b968 <json_encode_value+0x1bc>)
   1b862:	2201      	movs	r2, #1
   1b864:	47d0      	blx	sl
    return (0);
   1b866:	2000      	movs	r0, #0
}
   1b868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                switch (jv->jv_val.str[i]) {
   1b86c:	68ab      	ldr	r3, [r5, #8]
   1b86e:	1999      	adds	r1, r3, r6
   1b870:	5d9b      	ldrb	r3, [r3, r6]
   1b872:	2b0d      	cmp	r3, #13
   1b874:	d809      	bhi.n	1b88a <json_encode_value+0xde>
   1b876:	2b07      	cmp	r3, #7
   1b878:	d928      	bls.n	1b8cc <json_encode_value+0x120>
   1b87a:	3b08      	subs	r3, #8
   1b87c:	2b05      	cmp	r3, #5
   1b87e:	d825      	bhi.n	1b8cc <json_encode_value+0x120>
   1b880:	e8df f003 	tbb	[pc, r3]
   1b884:	241b1421 	.word	0x241b1421
   1b888:	181e      	.short	0x181e
   1b88a:	2b2f      	cmp	r3, #47	; 0x2f
   1b88c:	d003      	beq.n	1b896 <json_encode_value+0xea>
   1b88e:	2b5c      	cmp	r3, #92	; 0x5c
   1b890:	d001      	beq.n	1b896 <json_encode_value+0xea>
   1b892:	2b22      	cmp	r3, #34	; 0x22
   1b894:	d11a      	bne.n	1b8cc <json_encode_value+0x120>
                        encoder->je_write(encoder->je_arg, "\\",
   1b896:	2201      	movs	r2, #1
   1b898:	4639      	mov	r1, r7
   1b89a:	47d0      	blx	sl
                        encoder->je_write(encoder->je_arg,
   1b89c:	68a9      	ldr	r1, [r5, #8]
   1b89e:	6823      	ldr	r3, [r4, #0]
   1b8a0:	6860      	ldr	r0, [r4, #4]
   1b8a2:	2201      	movs	r2, #1
   1b8a4:	4431      	add	r1, r6
   1b8a6:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   1b8a8:	3601      	adds	r6, #1
   1b8aa:	e7d4      	b.n	1b856 <json_encode_value+0xaa>
                        encoder->je_write(encoder->je_arg, "\\t",
   1b8ac:	4930      	ldr	r1, [pc, #192]	; (1b970 <json_encode_value+0x1c4>)
   1b8ae:	2202      	movs	r2, #2
                        encoder->je_write(encoder->je_arg,
   1b8b0:	47d0      	blx	sl
                        break;
   1b8b2:	e7f9      	b.n	1b8a8 <json_encode_value+0xfc>
                        encoder->je_write(encoder->je_arg, "\\r",
   1b8b4:	492f      	ldr	r1, [pc, #188]	; (1b974 <json_encode_value+0x1c8>)
   1b8b6:	2202      	movs	r2, #2
   1b8b8:	e7fa      	b.n	1b8b0 <json_encode_value+0x104>
                        encoder->je_write(encoder->je_arg, "\\n",
   1b8ba:	492f      	ldr	r1, [pc, #188]	; (1b978 <json_encode_value+0x1cc>)
   1b8bc:	2202      	movs	r2, #2
   1b8be:	e7f7      	b.n	1b8b0 <json_encode_value+0x104>
                        encoder->je_write(encoder->je_arg, "\\f",
   1b8c0:	2202      	movs	r2, #2
   1b8c2:	4649      	mov	r1, r9
   1b8c4:	e7f4      	b.n	1b8b0 <json_encode_value+0x104>
                        encoder->je_write(encoder->je_arg, "\\b",
   1b8c6:	2202      	movs	r2, #2
   1b8c8:	4641      	mov	r1, r8
   1b8ca:	e7f1      	b.n	1b8b0 <json_encode_value+0x104>
                        encoder->je_write(encoder->je_arg,
   1b8cc:	2201      	movs	r2, #1
   1b8ce:	e7ef      	b.n	1b8b0 <json_encode_value+0x104>
            JSON_ENCODE_ARRAY_START(encoder);
   1b8d0:	6803      	ldr	r3, [r0, #0]
   1b8d2:	492a      	ldr	r1, [pc, #168]	; (1b97c <json_encode_value+0x1d0>)
   1b8d4:	6840      	ldr	r0, [r0, #4]
                    encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1b8d6:	4f2a      	ldr	r7, [pc, #168]	; (1b980 <json_encode_value+0x1d4>)
            JSON_ENCODE_ARRAY_START(encoder);
   1b8d8:	2201      	movs	r2, #1
   1b8da:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   1b8dc:	2600      	movs	r6, #0
   1b8de:	886b      	ldrh	r3, [r5, #2]
   1b8e0:	42b3      	cmp	r3, r6
   1b8e2:	dc03      	bgt.n	1b8ec <json_encode_value+0x140>
            JSON_ENCODE_ARRAY_END(encoder);
   1b8e4:	6823      	ldr	r3, [r4, #0]
   1b8e6:	4927      	ldr	r1, [pc, #156]	; (1b984 <json_encode_value+0x1d8>)
   1b8e8:	2201      	movs	r2, #1
   1b8ea:	e77c      	b.n	1b7e6 <json_encode_value+0x3a>
                rc = json_encode_value(encoder, jv->jv_val.composite.values[i]);
   1b8ec:	68eb      	ldr	r3, [r5, #12]
   1b8ee:	4620      	mov	r0, r4
   1b8f0:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   1b8f4:	f7ff ff5a 	bl	1b7ac <json_encode_value>
                if (rc != 0) {
   1b8f8:	2800      	cmp	r0, #0
   1b8fa:	d1b5      	bne.n	1b868 <json_encode_value+0xbc>
                if (i != jv->jv_len - 1) {
   1b8fc:	886b      	ldrh	r3, [r5, #2]
   1b8fe:	3b01      	subs	r3, #1
   1b900:	42b3      	cmp	r3, r6
   1b902:	d004      	beq.n	1b90e <json_encode_value+0x162>
                    encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1b904:	6823      	ldr	r3, [r4, #0]
   1b906:	6860      	ldr	r0, [r4, #4]
   1b908:	2201      	movs	r2, #1
   1b90a:	4639      	mov	r1, r7
   1b90c:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   1b90e:	3601      	adds	r6, #1
   1b910:	e7e5      	b.n	1b8de <json_encode_value+0x132>
            JSON_ENCODE_OBJECT_START(encoder);
   1b912:	6803      	ldr	r3, [r0, #0]
   1b914:	491c      	ldr	r1, [pc, #112]	; (1b988 <json_encode_value+0x1dc>)
   1b916:	6840      	ldr	r0, [r0, #4]
   1b918:	2201      	movs	r2, #1
   1b91a:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   1b91c:	2600      	movs	r6, #0
   1b91e:	886b      	ldrh	r3, [r5, #2]
   1b920:	42b3      	cmp	r3, r6
   1b922:	dc03      	bgt.n	1b92c <json_encode_value+0x180>
            JSON_ENCODE_OBJECT_END(encoder);
   1b924:	6823      	ldr	r3, [r4, #0]
   1b926:	4919      	ldr	r1, [pc, #100]	; (1b98c <json_encode_value+0x1e0>)
   1b928:	2201      	movs	r2, #1
   1b92a:	e75c      	b.n	1b7e6 <json_encode_value+0x3a>
                rc = json_encode_object_entry(encoder,
   1b92c:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1b930:	4620      	mov	r0, r4
   1b932:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
   1b936:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   1b93a:	f7ff ff05 	bl	1b748 <json_encode_object_entry>
                if (rc != 0) {
   1b93e:	2800      	cmp	r0, #0
   1b940:	d192      	bne.n	1b868 <json_encode_value+0xbc>
            for (i = 0; i < jv->jv_len; i++) {
   1b942:	3601      	adds	r6, #1
   1b944:	e7eb      	b.n	1b91e <json_encode_value+0x172>
    switch (jv->jv_type) {
   1b946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b94a:	e78d      	b.n	1b868 <json_encode_value+0xbc>
   1b94c:	000239fd 	.word	0x000239fd
   1b950:	000239f8 	.word	0x000239f8
   1b954:	00022f05 	.word	0x00022f05
   1b958:	00023a03 	.word	0x00023a03
   1b95c:	00023a08 	.word	0x00023a08
   1b960:	00023a0d 	.word	0x00023a0d
   1b964:	00023a12 	.word	0x00023a12
   1b968:	00021a3b 	.word	0x00021a3b
   1b96c:	00023a15 	.word	0x00023a15
   1b970:	00023a17 	.word	0x00023a17
   1b974:	00023a1a 	.word	0x00023a1a
   1b978:	00023a1d 	.word	0x00023a1d
   1b97c:	00023a26 	.word	0x00023a26
   1b980:	000239f0 	.word	0x000239f0
   1b984:	00022df8 	.word	0x00022df8
   1b988:	000239f2 	.word	0x000239f2
   1b98c:	00023a28 	.word	0x00023a28
   1b990:	00023a23 	.word	0x00023a23
   1b994:	00023a20 	.word	0x00023a20

0001b998 <json_encode_object_finish>:
EXPORT_SYMBOL(json_encode_object_entry);

int
json_encode_object_finish(struct json_encoder *encoder)
{
   1b998:	b510      	push	{r4, lr}
   1b99a:	4604      	mov	r4, r0
    JSON_ENCODE_OBJECT_END(encoder);
   1b99c:	6803      	ldr	r3, [r0, #0]
   1b99e:	4905      	ldr	r1, [pc, #20]	; (1b9b4 <json_encode_object_finish+0x1c>)
   1b9a0:	6840      	ldr	r0, [r0, #4]
   1b9a2:	2201      	movs	r2, #1
   1b9a4:	4798      	blx	r3
    /* Useful in case of nested objects. */
    encoder->je_wr_commas = 1;
   1b9a6:	7a23      	ldrb	r3, [r4, #8]
   1b9a8:	f043 0301 	orr.w	r3, r3, #1
   1b9ac:	7223      	strb	r3, [r4, #8]

    return (0);
}
   1b9ae:	2000      	movs	r0, #0
   1b9b0:	bd10      	pop	{r4, pc}
   1b9b2:	bf00      	nop
   1b9b4:	00023a28 	.word	0x00023a28

0001b9b8 <json_encode_array_name>:
EXPORT_SYMBOL(json_encode_object_finish);

int
json_encode_array_name(struct json_encoder *encoder, char *name)
{
    return json_encode_object_key(encoder, name);
   1b9b8:	f7ff be9c 	b.w	1b6f4 <json_encode_object_key>

0001b9bc <json_encode_array_start>:
}
EXPORT_SYMBOL(json_encode_array_name);

int
json_encode_array_start(struct json_encoder *encoder)
{
   1b9bc:	b510      	push	{r4, lr}
   1b9be:	4604      	mov	r4, r0
    JSON_ENCODE_ARRAY_START(encoder);
   1b9c0:	6803      	ldr	r3, [r0, #0]
   1b9c2:	4905      	ldr	r1, [pc, #20]	; (1b9d8 <json_encode_array_start+0x1c>)
   1b9c4:	6840      	ldr	r0, [r0, #4]
   1b9c6:	2201      	movs	r2, #1
   1b9c8:	4798      	blx	r3
    encoder->je_wr_commas = 0;
   1b9ca:	7a23      	ldrb	r3, [r4, #8]
   1b9cc:	f36f 0300 	bfc	r3, #0, #1
   1b9d0:	7223      	strb	r3, [r4, #8]

    return (0);
}
   1b9d2:	2000      	movs	r0, #0
   1b9d4:	bd10      	pop	{r4, pc}
   1b9d6:	bf00      	nop
   1b9d8:	00023a26 	.word	0x00023a26

0001b9dc <json_encode_array_value>:
EXPORT_SYMBOL(json_encode_array_start);

int
json_encode_array_value(struct json_encoder *encoder, struct json_value *jv)
{
   1b9dc:	b538      	push	{r3, r4, r5, lr}
    int rc;

    if (encoder->je_wr_commas) {
   1b9de:	7a03      	ldrb	r3, [r0, #8]
   1b9e0:	07db      	lsls	r3, r3, #31
{
   1b9e2:	4604      	mov	r4, r0
   1b9e4:	460d      	mov	r5, r1
    if (encoder->je_wr_commas) {
   1b9e6:	d508      	bpl.n	1b9fa <json_encode_array_value+0x1e>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1b9e8:	6803      	ldr	r3, [r0, #0]
   1b9ea:	4909      	ldr	r1, [pc, #36]	; (1ba10 <json_encode_array_value+0x34>)
   1b9ec:	6840      	ldr	r0, [r0, #4]
   1b9ee:	2201      	movs	r2, #1
   1b9f0:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   1b9f2:	7a23      	ldrb	r3, [r4, #8]
   1b9f4:	f36f 0300 	bfc	r3, #0, #1
   1b9f8:	7223      	strb	r3, [r4, #8]
    }

    rc = json_encode_value(encoder, jv);
   1b9fa:	4629      	mov	r1, r5
   1b9fc:	4620      	mov	r0, r4
   1b9fe:	f7ff fed5 	bl	1b7ac <json_encode_value>
    if (rc != 0) {
   1ba02:	b918      	cbnz	r0, 1ba0c <json_encode_array_value+0x30>
        goto err;
    }
    encoder->je_wr_commas = 1;
   1ba04:	7a23      	ldrb	r3, [r4, #8]
   1ba06:	f043 0301 	orr.w	r3, r3, #1
   1ba0a:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
   1ba0c:	bd38      	pop	{r3, r4, r5, pc}
   1ba0e:	bf00      	nop
   1ba10:	000239f0 	.word	0x000239f0

0001ba14 <json_encode_array_finish>:
EXPORT_SYMBOL(json_encode_array_value);

int
json_encode_array_finish(struct json_encoder *encoder)
{
   1ba14:	b508      	push	{r3, lr}
    encoder->je_wr_commas = 1;
   1ba16:	7a03      	ldrb	r3, [r0, #8]
    JSON_ENCODE_ARRAY_END(encoder);
   1ba18:	4904      	ldr	r1, [pc, #16]	; (1ba2c <json_encode_array_finish+0x18>)
    encoder->je_wr_commas = 1;
   1ba1a:	f043 0301 	orr.w	r3, r3, #1
   1ba1e:	7203      	strb	r3, [r0, #8]
    JSON_ENCODE_ARRAY_END(encoder);
   1ba20:	2201      	movs	r2, #1
   1ba22:	6803      	ldr	r3, [r0, #0]
   1ba24:	6840      	ldr	r0, [r0, #4]
   1ba26:	4798      	blx	r3

    return (0);
}
   1ba28:	2000      	movs	r0, #0
   1ba2a:	bd08      	pop	{r3, pc}
   1ba2c:	00022df8 	.word	0x00022df8

0001ba30 <json_read_next>:
    return len;
}

char
json_read_next(struct json_buffer * jb)
{
   1ba30:	b510      	push	{r4, lr}
    json_decoder_t * decoder = (json_decoder_t *) jb;
    char c;

    if ((decoder->start_buf + decoder->current_position) <= decoder->end_buf) {
   1ba32:	6943      	ldr	r3, [r0, #20]
   1ba34:	68c2      	ldr	r2, [r0, #12]
   1ba36:	6901      	ldr	r1, [r0, #16]
   1ba38:	18d4      	adds	r4, r2, r3
   1ba3a:	428c      	cmp	r4, r1
        c = *(decoder->start_buf + decoder->current_position);
   1ba3c:	bf97      	itett	ls
   1ba3e:	5cd2      	ldrbls	r2, [r2, r3]
        decoder->current_position++;
        return c;
    }
   return '\0';
   1ba40:	2200      	movhi	r2, #0
        decoder->current_position++;
   1ba42:	3301      	addls	r3, #1
   1ba44:	6143      	strls	r3, [r0, #20]
}
   1ba46:	4610      	mov	r0, r2
   1ba48:	bd10      	pop	{r4, pc}

0001ba4a <json_read_prev>:
json_read_prev(struct json_buffer * jb)
{
    json_decoder_t * decoder = (json_decoder_t *) jb;

    char c;
    if (decoder->current_position) {
   1ba4a:	6943      	ldr	r3, [r0, #20]
   1ba4c:	b123      	cbz	r3, 1ba58 <json_read_prev+0xe>
       decoder->current_position--;
   1ba4e:	3b01      	subs	r3, #1
       c = *(decoder->start_buf + decoder->current_position);
   1ba50:	68c2      	ldr	r2, [r0, #12]
       decoder->current_position--;
   1ba52:	6143      	str	r3, [r0, #20]
       c = *(decoder->start_buf + decoder->current_position);
   1ba54:	5cd0      	ldrb	r0, [r2, r3]
       return c;
   1ba56:	4770      	bx	lr
    }
    /* can't rewind */
    return '\0';
   1ba58:	4618      	mov	r0, r3
}
   1ba5a:	4770      	bx	lr

0001ba5c <json_readn>:
EXPORT_SYMBOL(json_read_prev);

int
json_readn(struct json_buffer * jb, char *buf, int size)
{
   1ba5c:	b538      	push	{r3, r4, r5, lr}
   1ba5e:	4604      	mov	r4, r0
   1ba60:	4608      	mov	r0, r1
    json_decoder_t * decoder = (json_decoder_t *) jb;
    int remlen;

    remlen = (int)(decoder->end_buf - (decoder->start_buf + decoder->current_position));
   1ba62:	6963      	ldr	r3, [r4, #20]
   1ba64:	68e1      	ldr	r1, [r4, #12]
   1ba66:	4419      	add	r1, r3
   1ba68:	6923      	ldr	r3, [r4, #16]
   1ba6a:	1a5b      	subs	r3, r3, r1
   1ba6c:	4293      	cmp	r3, r2
   1ba6e:	bfa8      	it	ge
   1ba70:	4613      	movge	r3, r2
    if (size > remlen) {
        size = remlen;
    }

    memcpy(buf, decoder->start_buf + decoder->current_position, size);
   1ba72:	461a      	mov	r2, r3
   1ba74:	461d      	mov	r5, r3
   1ba76:	f7f3 fdb5 	bl	f5e4 <memcpy>
    decoder->current_position += size;
   1ba7a:	6963      	ldr	r3, [r4, #20]
   1ba7c:	442b      	add	r3, r5
   1ba7e:	6163      	str	r3, [r4, #20]
    return size;
}
   1ba80:	4628      	mov	r0, r5
   1ba82:	bd38      	pop	{r3, r4, r5, pc}

0001ba84 <timescale_QUpdate>:
   1ba84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba88:	4614      	mov	r4, r2
   1ba8a:	461d      	mov	r5, r3
   1ba8c:	460f      	mov	r7, r1
   1ba8e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   1ba90:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1ba94:	4682      	mov	sl, r0
   1ba96:	4629      	mov	r1, r5
   1ba98:	4620      	mov	r0, r4
   1ba9a:	f004 fa11 	bl	1fec0 <__aeabi_dmul>
   1ba9e:	4622      	mov	r2, r4
   1baa0:	462b      	mov	r3, r5
   1baa2:	f004 fa0d 	bl	1fec0 <__aeabi_dmul>
   1baa6:	2200      	movs	r2, #0
   1baa8:	4b4f      	ldr	r3, [pc, #316]	; (1bbe8 <timescale_QUpdate+0x164>)
   1baaa:	f004 fb33 	bl	20114 <__aeabi_ddiv>
   1baae:	e9d7 2300 	ldrd	r2, r3, [r7]
   1bab2:	f004 f84f 	bl	1fb54 <__adddf3>
   1bab6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1baba:	4680      	mov	r8, r0
   1babc:	4689      	mov	r9, r1
   1babe:	4620      	mov	r0, r4
   1bac0:	4629      	mov	r1, r5
   1bac2:	f004 f9fd 	bl	1fec0 <__aeabi_dmul>
   1bac6:	4622      	mov	r2, r4
   1bac8:	462b      	mov	r3, r5
   1baca:	f004 f9f9 	bl	1fec0 <__aeabi_dmul>
   1bace:	4622      	mov	r2, r4
   1bad0:	462b      	mov	r3, r5
   1bad2:	f004 f9f5 	bl	1fec0 <__aeabi_dmul>
   1bad6:	4622      	mov	r2, r4
   1bad8:	462b      	mov	r3, r5
   1bada:	f004 f9f1 	bl	1fec0 <__aeabi_dmul>
   1bade:	2200      	movs	r2, #0
   1bae0:	4b42      	ldr	r3, [pc, #264]	; (1bbec <timescale_QUpdate+0x168>)
   1bae2:	f004 fb17 	bl	20114 <__aeabi_ddiv>
   1bae6:	4602      	mov	r2, r0
   1bae8:	460b      	mov	r3, r1
   1baea:	4640      	mov	r0, r8
   1baec:	4649      	mov	r1, r9
   1baee:	f004 f831 	bl	1fb54 <__adddf3>
   1baf2:	e9c6 0100 	strd	r0, r1, [r6]
   1baf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1bafa:	4620      	mov	r0, r4
   1bafc:	4629      	mov	r1, r5
   1bafe:	f004 f9df 	bl	1fec0 <__aeabi_dmul>
   1bb02:	4622      	mov	r2, r4
   1bb04:	462b      	mov	r3, r5
   1bb06:	f004 f9db 	bl	1fec0 <__aeabi_dmul>
   1bb0a:	4622      	mov	r2, r4
   1bb0c:	462b      	mov	r3, r5
   1bb0e:	f004 f9d7 	bl	1fec0 <__aeabi_dmul>
   1bb12:	2200      	movs	r2, #0
   1bb14:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1bb18:	f004 f9d2 	bl	1fec0 <__aeabi_dmul>
   1bb1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1bb20:	4680      	mov	r8, r0
   1bb22:	4689      	mov	r9, r1
   1bb24:	4620      	mov	r0, r4
   1bb26:	4629      	mov	r1, r5
   1bb28:	f004 f9ca 	bl	1fec0 <__aeabi_dmul>
   1bb2c:	2200      	movs	r2, #0
   1bb2e:	4b30      	ldr	r3, [pc, #192]	; (1bbf0 <timescale_QUpdate+0x16c>)
   1bb30:	f004 f9c6 	bl	1fec0 <__aeabi_dmul>
   1bb34:	4602      	mov	r2, r0
   1bb36:	460b      	mov	r3, r1
   1bb38:	4640      	mov	r0, r8
   1bb3a:	4649      	mov	r1, r9
   1bb3c:	f004 f80a 	bl	1fb54 <__adddf3>
   1bb40:	4680      	mov	r8, r0
   1bb42:	4689      	mov	r9, r1
   1bb44:	e9c6 8902 	strd	r8, r9, [r6, #8]
   1bb48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1bb4c:	4620      	mov	r0, r4
   1bb4e:	4629      	mov	r1, r5
   1bb50:	f004 f9b6 	bl	1fec0 <__aeabi_dmul>
   1bb54:	4622      	mov	r2, r4
   1bb56:	462b      	mov	r3, r5
   1bb58:	f004 f9b2 	bl	1fec0 <__aeabi_dmul>
   1bb5c:	2200      	movs	r2, #0
   1bb5e:	4b25      	ldr	r3, [pc, #148]	; (1bbf4 <timescale_QUpdate+0x170>)
   1bb60:	f004 fad8 	bl	20114 <__aeabi_ddiv>
   1bb64:	f8ba 3000 	ldrh.w	r3, [sl]
   1bb68:	9301      	str	r3, [sp, #4]
   1bb6a:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1bb6e:	eb06 0a0b 	add.w	sl, r6, fp
   1bb72:	e9c6 0104 	strd	r0, r1, [r6, #16]
   1bb76:	e9ca 8900 	strd	r8, r9, [sl]
   1bb7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1bb7e:	4620      	mov	r0, r4
   1bb80:	4629      	mov	r1, r5
   1bb82:	f004 f99d 	bl	1fec0 <__aeabi_dmul>
   1bb86:	4622      	mov	r2, r4
   1bb88:	462b      	mov	r3, r5
   1bb8a:	f004 f999 	bl	1fec0 <__aeabi_dmul>
   1bb8e:	2200      	movs	r2, #0
   1bb90:	4b15      	ldr	r3, [pc, #84]	; (1bbe8 <timescale_QUpdate+0x164>)
   1bb92:	f004 fabf 	bl	20114 <__aeabi_ddiv>
   1bb96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1bb9a:	f003 ffdb 	bl	1fb54 <__adddf3>
   1bb9e:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1bba2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1bba6:	4620      	mov	r0, r4
   1bba8:	4629      	mov	r1, r5
   1bbaa:	f004 f989 	bl	1fec0 <__aeabi_dmul>
   1bbae:	2200      	movs	r2, #0
   1bbb0:	4b0f      	ldr	r3, [pc, #60]	; (1bbf0 <timescale_QUpdate+0x16c>)
   1bbb2:	f004 f985 	bl	1fec0 <__aeabi_dmul>
   1bbb6:	f10b 0810 	add.w	r8, fp, #16
   1bbba:	44b0      	add	r8, r6
   1bbbc:	e9c8 0100 	strd	r0, r1, [r8]
   1bbc0:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   1bbc4:	44da      	add	sl, fp
   1bbc6:	e9ca 2300 	strd	r2, r3, [sl]
   1bbca:	9901      	ldr	r1, [sp, #4]
   1bbcc:	e9d8 2300 	ldrd	r2, r3, [r8]
   1bbd0:	eb06 1601 	add.w	r6, r6, r1, lsl #4
   1bbd4:	e9c6 2302 	strd	r2, r3, [r6, #8]
   1bbd8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1bbdc:	e9c6 2304 	strd	r2, r3, [r6, #16]
   1bbe0:	b003      	add	sp, #12
   1bbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbe6:	bf00      	nop
   1bbe8:	40080000 	.word	0x40080000
   1bbec:	40340000 	.word	0x40340000
   1bbf0:	3fe00000 	.word	0x3fe00000
   1bbf4:	40180000 	.word	0x40180000

0001bbf8 <timescale_JofAx>:
   1bbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bbfc:	ec55 4b10 	vmov	r4, r5, d0
   1bc00:	4f1c      	ldr	r7, [pc, #112]	; (1bc74 <timescale_JofAx+0x7c>)
   1bc02:	b092      	sub	sp, #72	; 0x48
   1bc04:	2600      	movs	r6, #0
   1bc06:	ee10 2a10 	vmov	r2, s0
   1bc0a:	462b      	mov	r3, r5
   1bc0c:	4680      	mov	r8, r0
   1bc0e:	4629      	mov	r1, r5
   1bc10:	ee10 0a10 	vmov	r0, s0
   1bc14:	ed8d 0b02 	vstr	d0, [sp, #8]
   1bc18:	e9cd 6700 	strd	r6, r7, [sp]
   1bc1c:	f004 f950 	bl	1fec0 <__aeabi_dmul>
   1bc20:	2200      	movs	r2, #0
   1bc22:	4b15      	ldr	r3, [pc, #84]	; (1bc78 <timescale_JofAx+0x80>)
   1bc24:	f004 f94c 	bl	1fec0 <__aeabi_dmul>
   1bc28:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1bc2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1bc30:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   1bc34:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
   1bc38:	2300      	movs	r3, #0
   1bc3a:	2200      	movs	r2, #0
   1bc3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1bc40:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
   1bc44:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1bc48:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   1bc4c:	f101 0518 	add.w	r5, r1, #24
   1bc50:	2300      	movs	r3, #0
   1bc52:	eb0d 0003 	add.w	r0, sp, r3
   1bc56:	185a      	adds	r2, r3, r1
   1bc58:	18ec      	adds	r4, r5, r3
   1bc5a:	e8f0 6702 	ldrd	r6, r7, [r0], #8
   1bc5e:	e8e2 6702 	strd	r6, r7, [r2], #8
   1bc62:	42a2      	cmp	r2, r4
   1bc64:	d1f9      	bne.n	1bc5a <timescale_JofAx+0x62>
   1bc66:	3318      	adds	r3, #24
   1bc68:	2b48      	cmp	r3, #72	; 0x48
   1bc6a:	d1f2      	bne.n	1bc52 <timescale_JofAx+0x5a>
   1bc6c:	b012      	add	sp, #72	; 0x48
   1bc6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bc72:	bf00      	nop
   1bc74:	3ff00000 	.word	0x3ff00000
   1bc78:	3fe00000 	.word	0x3fe00000

0001bc7c <timescale_Aofx>:
   1bc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc80:	4606      	mov	r6, r0
   1bc82:	b089      	sub	sp, #36	; 0x24
   1bc84:	2218      	movs	r2, #24
   1bc86:	2100      	movs	r1, #0
   1bc88:	a802      	add	r0, sp, #8
   1bc8a:	f7f3 fcb8 	bl	f5fe <memset>
   1bc8e:	68b5      	ldr	r5, [r6, #8]
   1bc90:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
   1bc92:	f106 0348 	add.w	r3, r6, #72	; 0x48
   1bc96:	ac02      	add	r4, sp, #8
   1bc98:	9301      	str	r3, [sp, #4]
   1bc9a:	f105 0918 	add.w	r9, r5, #24
   1bc9e:	e8f4 ab02 	ldrd	sl, fp, [r4], #8
   1bca2:	462f      	mov	r7, r5
   1bca4:	46b0      	mov	r8, r6
   1bca6:	e8f7 2302 	ldrd	r2, r3, [r7], #8
   1bcaa:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   1bcae:	f004 f907 	bl	1fec0 <__aeabi_dmul>
   1bcb2:	4602      	mov	r2, r0
   1bcb4:	460b      	mov	r3, r1
   1bcb6:	4650      	mov	r0, sl
   1bcb8:	4659      	mov	r1, fp
   1bcba:	f003 ff4b 	bl	1fb54 <__adddf3>
   1bcbe:	454f      	cmp	r7, r9
   1bcc0:	4682      	mov	sl, r0
   1bcc2:	468b      	mov	fp, r1
   1bcc4:	d1ef      	bne.n	1bca6 <timescale_Aofx+0x2a>
   1bcc6:	9b01      	ldr	r3, [sp, #4]
   1bcc8:	3618      	adds	r6, #24
   1bcca:	429e      	cmp	r6, r3
   1bccc:	e944 ab02 	strd	sl, fp, [r4, #-8]
   1bcd0:	d1e5      	bne.n	1bc9e <timescale_Aofx+0x22>
   1bcd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1bcd6:	e9c5 2300 	strd	r2, r3, [r5]
   1bcda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1bcde:	e9c5 2302 	strd	r2, r3, [r5, #8]
   1bce2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1bce6:	e9c5 2304 	strd	r2, r3, [r5, #16]
   1bcea:	b009      	add	sp, #36	; 0x24
   1bcec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001bcf0 <timescale_innovation>:
   1bcf0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1bcf4:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
   1bcf6:	88aa      	ldrh	r2, [r5, #4]
   1bcf8:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1bcfc:	4604      	mov	r4, r0
   1bcfe:	b37a      	cbz	r2, 1bd60 <timescale_innovation+0x70>
   1bd00:	6946      	ldr	r6, [r0, #20]
   1bd02:	4b37      	ldr	r3, [pc, #220]	; (1bde0 <timescale_innovation+0xf0>)
   1bd04:	ed96 0b00 	vldr	d0, [r6]
   1bd08:	2200      	movs	r2, #0
   1bd0a:	ec51 0b10 	vmov	r0, r1, d0
   1bd0e:	ed8d 0b00 	vstr	d0, [sp]
   1bd12:	f004 fb47 	bl	203a4 <__aeabi_dcmplt>
   1bd16:	f04f 0701 	mov.w	r7, #1
   1bd1a:	ed9d 0b00 	vldr	d0, [sp]
   1bd1e:	b900      	cbnz	r0, 1bd22 <timescale_innovation+0x32>
   1bd20:	4607      	mov	r7, r0
   1bd22:	792b      	ldrb	r3, [r5, #4]
   1bd24:	f367 1345 	bfi	r3, r7, #5, #1
   1bd28:	712b      	strb	r3, [r5, #4]
   1bd2a:	88ab      	ldrh	r3, [r5, #4]
   1bd2c:	069b      	lsls	r3, r3, #26
   1bd2e:	d509      	bpl.n	1bd44 <timescale_innovation+0x54>
   1bd30:	ed9f 1b29 	vldr	d1, [pc, #164]	; 1bdd8 <timescale_innovation+0xe8>
   1bd34:	f004 ffce 	bl	20cd4 <fmod>
   1bd38:	792b      	ldrb	r3, [r5, #4]
   1bd3a:	ed86 0b00 	vstr	d0, [r6]
   1bd3e:	f36f 1386 	bfc	r3, #6, #1
   1bd42:	712b      	strb	r3, [r5, #4]
   1bd44:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1bde4 <timescale_innovation+0xf4>
   1bd48:	f04f 0a00 	mov.w	sl, #0
   1bd4c:	f04f 0800 	mov.w	r8, #0
   1bd50:	8862      	ldrh	r2, [r4, #2]
   1bd52:	fa1f f38a 	uxth.w	r3, sl
   1bd56:	429a      	cmp	r2, r3
   1bd58:	d806      	bhi.n	1bd68 <timescale_innovation+0x78>
   1bd5a:	b002      	add	sp, #8
   1bd5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bd60:	792b      	ldrb	r3, [r5, #4]
   1bd62:	f362 1345 	bfi	r3, r2, #5, #1
   1bd66:	e7ec      	b.n	1bd42 <timescale_innovation+0x52>
   1bd68:	6963      	ldr	r3, [r4, #20]
   1bd6a:	fa1f f58a 	uxth.w	r5, sl
   1bd6e:	00ed      	lsls	r5, r5, #3
   1bd70:	1959      	adds	r1, r3, r5
   1bd72:	6923      	ldr	r3, [r4, #16]
   1bd74:	442b      	add	r3, r5
   1bd76:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bd7a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1bd7e:	f003 fee7 	bl	1fb50 <__aeabi_dsub>
   1bd82:	69a3      	ldr	r3, [r4, #24]
   1bd84:	442b      	add	r3, r5
   1bd86:	e9c3 0100 	strd	r0, r1, [r3]
   1bd8a:	ec41 0b10 	vmov	d0, r0, r1
   1bd8e:	f004 ff15 	bl	20bbc <fabs>
   1bd92:	2200      	movs	r2, #0
   1bd94:	4b12      	ldr	r3, [pc, #72]	; (1bde0 <timescale_innovation+0xf0>)
   1bd96:	ec51 0b10 	vmov	r0, r1, d0
   1bd9a:	f004 fb21 	bl	203e0 <__aeabi_dcmpgt>
   1bd9e:	b190      	cbz	r0, 1bdc6 <timescale_innovation+0xd6>
   1bda0:	69a3      	ldr	r3, [r4, #24]
   1bda2:	441d      	add	r5, r3
   1bda4:	e9d5 6700 	ldrd	r6, r7, [r5]
   1bda8:	2200      	movs	r2, #0
   1bdaa:	2300      	movs	r3, #0
   1bdac:	4630      	mov	r0, r6
   1bdae:	4639      	mov	r1, r7
   1bdb0:	f004 faf8 	bl	203a4 <__aeabi_dcmplt>
   1bdb4:	4642      	mov	r2, r8
   1bdb6:	464b      	mov	r3, r9
   1bdb8:	b140      	cbz	r0, 1bdcc <timescale_innovation+0xdc>
   1bdba:	4630      	mov	r0, r6
   1bdbc:	4639      	mov	r1, r7
   1bdbe:	f003 fec9 	bl	1fb54 <__adddf3>
   1bdc2:	e9c5 0100 	strd	r0, r1, [r5]
   1bdc6:	f10a 0a01 	add.w	sl, sl, #1
   1bdca:	e7c1      	b.n	1bd50 <timescale_innovation+0x60>
   1bdcc:	4630      	mov	r0, r6
   1bdce:	4639      	mov	r1, r7
   1bdd0:	f003 febe 	bl	1fb50 <__aeabi_dsub>
   1bdd4:	e7f5      	b.n	1bdc2 <timescale_innovation+0xd2>
   1bdd6:	bf00      	nop
   1bdd8:	00000000 	.word	0x00000000
   1bddc:	42700000 	.word	0x42700000
   1bde0:	42600000 	.word	0x42600000
   1bde4:	42700000 	.word	0x42700000

0001bde8 <timescale_constraints>:
   1bde8:	b513      	push	{r0, r1, r4, lr}
   1bdea:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   1bdec:	889b      	ldrh	r3, [r3, #4]
   1bdee:	065b      	lsls	r3, r3, #25
   1bdf0:	d513      	bpl.n	1be1a <timescale_constraints+0x32>
   1bdf2:	6884      	ldr	r4, [r0, #8]
   1bdf4:	4b0c      	ldr	r3, [pc, #48]	; (1be28 <timescale_constraints+0x40>)
   1bdf6:	ed94 0b00 	vldr	d0, [r4]
   1bdfa:	2200      	movs	r2, #0
   1bdfc:	ec51 0b10 	vmov	r0, r1, d0
   1be00:	ed8d 0b00 	vstr	d0, [sp]
   1be04:	f004 faec 	bl	203e0 <__aeabi_dcmpgt>
   1be08:	ed9d 0b00 	vldr	d0, [sp]
   1be0c:	b128      	cbz	r0, 1be1a <timescale_constraints+0x32>
   1be0e:	ed9f 1b04 	vldr	d1, [pc, #16]	; 1be20 <timescale_constraints+0x38>
   1be12:	f004 ff5f 	bl	20cd4 <fmod>
   1be16:	ed84 0b00 	vstr	d0, [r4]
   1be1a:	b002      	add	sp, #8
   1be1c:	bd10      	pop	{r4, pc}
   1be1e:	bf00      	nop
   1be20:	00000000 	.word	0x00000000
   1be24:	42700000 	.word	0x42700000
   1be28:	42700000 	.word	0x42700000
   1be2c:	00000000 	.word	0x00000000

0001be30 <timescale_Hofx>:
   1be30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1be34:	6904      	ldr	r4, [r0, #16]
   1be36:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
   1be38:	69c5      	ldr	r5, [r0, #28]
   1be3a:	6886      	ldr	r6, [r0, #8]
   1be3c:	2200      	movs	r2, #0
   1be3e:	2300      	movs	r3, #0
   1be40:	e9c4 2300 	strd	r2, r3, [r4]
   1be44:	f105 0818 	add.w	r8, r5, #24
   1be48:	e8f6 2302 	ldrd	r2, r3, [r6], #8
   1be4c:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   1be50:	f004 f836 	bl	1fec0 <__aeabi_dmul>
   1be54:	e9d4 2300 	ldrd	r2, r3, [r4]
   1be58:	f003 fe7c 	bl	1fb54 <__adddf3>
   1be5c:	4545      	cmp	r5, r8
   1be5e:	e9c4 0100 	strd	r0, r1, [r4]
   1be62:	d1f1      	bne.n	1be48 <timescale_Hofx+0x18>
   1be64:	e9cd 0100 	strd	r0, r1, [sp]
   1be68:	88bb      	ldrh	r3, [r7, #4]
   1be6a:	065b      	lsls	r3, r3, #25
   1be6c:	d50c      	bpl.n	1be88 <timescale_Hofx+0x58>
   1be6e:	2200      	movs	r2, #0
   1be70:	4b09      	ldr	r3, [pc, #36]	; (1be98 <timescale_Hofx+0x68>)
   1be72:	f004 fab5 	bl	203e0 <__aeabi_dcmpgt>
   1be76:	ed9d 0b00 	vldr	d0, [sp]
   1be7a:	b128      	cbz	r0, 1be88 <timescale_Hofx+0x58>
   1be7c:	ed9f 1b04 	vldr	d1, [pc, #16]	; 1be90 <timescale_Hofx+0x60>
   1be80:	f004 ff28 	bl	20cd4 <fmod>
   1be84:	ed84 0b00 	vstr	d0, [r4]
   1be88:	b002      	add	sp, #8
   1be8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1be8e:	bf00      	nop
   1be90:	00000000 	.word	0x00000000
   1be94:	42700000 	.word	0x42700000
   1be98:	42700000 	.word	0x42700000

0001be9c <timescale_init>:
   1be9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bea0:	4688      	mov	r8, r1
   1bea2:	4614      	mov	r4, r2
   1bea4:	ec57 6b10 	vmov	r6, r7, d0
   1bea8:	4605      	mov	r5, r0
   1beaa:	b990      	cbnz	r0, 1bed2 <timescale_init+0x36>
   1beac:	2008      	movs	r0, #8
   1beae:	f7f3 fb13 	bl	f4d8 <malloc>
   1beb2:	4605      	mov	r5, r0
   1beb4:	b928      	cbnz	r0, 1bec2 <timescale_init+0x26>
   1beb6:	4b2c      	ldr	r3, [pc, #176]	; (1bf68 <timescale_init+0xcc>)
   1beb8:	4a2c      	ldr	r2, [pc, #176]	; (1bf6c <timescale_init+0xd0>)
   1beba:	482d      	ldr	r0, [pc, #180]	; (1bf70 <timescale_init+0xd4>)
   1bebc:	21e0      	movs	r1, #224	; 0xe0
   1bebe:	f7ed f819 	bl	8ef4 <__assert_func>
   1bec2:	2208      	movs	r2, #8
   1bec4:	2100      	movs	r1, #0
   1bec6:	f7f3 fb9a 	bl	f5fe <memset>
   1beca:	792b      	ldrb	r3, [r5, #4]
   1becc:	f043 0301 	orr.w	r3, r3, #1
   1bed0:	712b      	strb	r3, [r5, #4]
   1bed2:	4641      	mov	r1, r8
   1bed4:	2301      	movs	r3, #1
   1bed6:	2203      	movs	r2, #3
   1bed8:	6828      	ldr	r0, [r5, #0]
   1beda:	f000 fad3 	bl	1c484 <srkf_dbl_init>
   1bede:	463b      	mov	r3, r7
   1bee0:	4621      	mov	r1, r4
   1bee2:	6028      	str	r0, [r5, #0]
   1bee4:	4632      	mov	r2, r6
   1bee6:	f7ff fdcd 	bl	1ba84 <timescale_QUpdate>
   1beea:	682c      	ldr	r4, [r5, #0]
   1beec:	2700      	movs	r7, #0
   1beee:	f8b4 a000 	ldrh.w	sl, [r4]
   1bef2:	46b8      	mov	r8, r7
   1bef4:	fa1f f388 	uxth.w	r3, r8
   1bef8:	459a      	cmp	sl, r3
   1befa:	d91a      	bls.n	1bf32 <timescale_init+0x96>
   1befc:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   1bf00:	2600      	movs	r6, #0
   1bf02:	e00f      	b.n	1bf24 <timescale_init+0x88>
   1bf04:	6a22      	ldr	r2, [r4, #32]
   1bf06:	19f3      	adds	r3, r6, r7
   1bf08:	00db      	lsls	r3, r3, #3
   1bf0a:	eb02 0903 	add.w	r9, r2, r3
   1bf0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1bf10:	18d1      	adds	r1, r2, r3
   1bf12:	e9d1 0100 	ldrd	r0, r1, [r1]
   1bf16:	2200      	movs	r2, #0
   1bf18:	4b16      	ldr	r3, [pc, #88]	; (1bf74 <timescale_init+0xd8>)
   1bf1a:	f003 ffd1 	bl	1fec0 <__aeabi_dmul>
   1bf1e:	e9c9 0100 	strd	r0, r1, [r9]
   1bf22:	3601      	adds	r6, #1
   1bf24:	b2b3      	uxth	r3, r6
   1bf26:	459b      	cmp	fp, r3
   1bf28:	d8ec      	bhi.n	1bf04 <timescale_init+0x68>
   1bf2a:	f108 0801 	add.w	r8, r8, #1
   1bf2e:	4457      	add	r7, sl
   1bf30:	e7e0      	b.n	1bef4 <timescale_init+0x58>
   1bf32:	69e3      	ldr	r3, [r4, #28]
   1bf34:	4910      	ldr	r1, [pc, #64]	; (1bf78 <timescale_init+0xdc>)
   1bf36:	792a      	ldrb	r2, [r5, #4]
   1bf38:	2000      	movs	r0, #0
   1bf3a:	e9c3 0100 	strd	r0, r1, [r3]
   1bf3e:	4b0f      	ldr	r3, [pc, #60]	; (1bf7c <timescale_init+0xe0>)
   1bf40:	65a3      	str	r3, [r4, #88]	; 0x58
   1bf42:	4b0f      	ldr	r3, [pc, #60]	; (1bf80 <timescale_init+0xe4>)
   1bf44:	6563      	str	r3, [r4, #84]	; 0x54
   1bf46:	4b0f      	ldr	r3, [pc, #60]	; (1bf84 <timescale_init+0xe8>)
   1bf48:	65e3      	str	r3, [r4, #92]	; 0x5c
   1bf4a:	4b0f      	ldr	r3, [pc, #60]	; (1bf88 <timescale_init+0xec>)
   1bf4c:	6663      	str	r3, [r4, #100]	; 0x64
   1bf4e:	4b0f      	ldr	r3, [pc, #60]	; (1bf8c <timescale_init+0xf0>)
   1bf50:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
   1bf54:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1bf58:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1bf5c:	f363 0241 	bfi	r2, r3, #1, #1
   1bf60:	712a      	strb	r2, [r5, #4]
   1bf62:	4628      	mov	r0, r5
   1bf64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf68:	00023a52 	.word	0x00023a52
   1bf6c:	00023a2a 	.word	0x00023a2a
   1bf70:	00023a57 	.word	0x00023a57
   1bf74:	40590000 	.word	0x40590000
   1bf78:	3ff00000 	.word	0x3ff00000
   1bf7c:	0001bbf9 	.word	0x0001bbf9
   1bf80:	0001bc7d 	.word	0x0001bc7d
   1bf84:	0001be31 	.word	0x0001be31
   1bf88:	0001bde9 	.word	0x0001bde9
   1bf8c:	0001bcf1 	.word	0x0001bcf1

0001bf90 <timescale_free>:
   1bf90:	b510      	push	{r4, lr}
   1bf92:	4604      	mov	r4, r0
   1bf94:	6800      	ldr	r0, [r0, #0]
   1bf96:	b930      	cbnz	r0, 1bfa6 <timescale_free+0x16>
   1bf98:	4b08      	ldr	r3, [pc, #32]	; (1bfbc <timescale_free+0x2c>)
   1bf9a:	4a09      	ldr	r2, [pc, #36]	; (1bfc0 <timescale_free+0x30>)
   1bf9c:	4809      	ldr	r0, [pc, #36]	; (1bfc4 <timescale_free+0x34>)
   1bf9e:	f44f 7181 	mov.w	r1, #258	; 0x102
   1bfa2:	f7ec ffa7 	bl	8ef4 <__assert_func>
   1bfa6:	f000 fced 	bl	1c984 <srkf_dbl_free>
   1bfaa:	7923      	ldrb	r3, [r4, #4]
   1bfac:	07db      	lsls	r3, r3, #31
   1bfae:	d504      	bpl.n	1bfba <timescale_free+0x2a>
   1bfb0:	4620      	mov	r0, r4
   1bfb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bfb6:	f7f3 badb 	b.w	f570 <free>
   1bfba:	bd10      	pop	{r4, pc}
   1bfbc:	00023a48 	.word	0x00023a48
   1bfc0:	00023a39 	.word	0x00023a39
   1bfc4:	00023a57 	.word	0x00023a57

0001bfc8 <timescale_main>:
   1bfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfcc:	ed2d 8b02 	vpush	{d8}
   1bfd0:	eeb0 8a40 	vmov.f32	s16, s0
   1bfd4:	eef0 8a60 	vmov.f32	s17, s1
   1bfd8:	b083      	sub	sp, #12
   1bfda:	4604      	mov	r4, r0
   1bfdc:	468a      	mov	sl, r1
   1bfde:	4617      	mov	r7, r2
   1bfe0:	461d      	mov	r5, r3
   1bfe2:	2200      	movs	r2, #0
   1bfe4:	4b29      	ldr	r3, [pc, #164]	; (1c08c <timescale_main+0xc4>)
   1bfe6:	e9d1 0100 	ldrd	r0, r1, [r1]
   1bfea:	f04f 0601 	mov.w	r6, #1
   1bfee:	f004 f9f7 	bl	203e0 <__aeabi_dcmpgt>
   1bff2:	b900      	cbnz	r0, 1bff6 <timescale_main+0x2e>
   1bff4:	4606      	mov	r6, r0
   1bff6:	7923      	ldrb	r3, [r4, #4]
   1bff8:	6820      	ldr	r0, [r4, #0]
   1bffa:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1bffe:	4316      	orrs	r6, r2
   1c000:	f366 1386 	bfi	r3, r6, #6, #1
   1c004:	7123      	strb	r3, [r4, #4]
   1c006:	4639      	mov	r1, r7
   1c008:	ec53 2b18 	vmov	r2, r3, d8
   1c00c:	f7ff fd3a 	bl	1ba84 <timescale_QUpdate>
   1c010:	6827      	ldr	r7, [r4, #0]
   1c012:	887a      	ldrh	r2, [r7, #2]
   1c014:	f06f 0907 	mvn.w	r9, #7
   1c018:	1c53      	adds	r3, r2, #1
   1c01a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   1c01e:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1c022:	9201      	str	r2, [sp, #4]
   1c024:	fb09 f903 	mul.w	r9, r9, r3
   1c028:	f04f 0800 	mov.w	r8, #0
   1c02c:	9b01      	ldr	r3, [sp, #4]
   1c02e:	429d      	cmp	r5, r3
   1c030:	44d8      	add	r8, fp
   1c032:	d11e      	bne.n	1c072 <timescale_main+0xaa>
   1c034:	eeb0 0a48 	vmov.f32	s0, s16
   1c038:	eef0 0a68 	vmov.f32	s1, s17
   1c03c:	2300      	movs	r3, #0
   1c03e:	461a      	mov	r2, r3
   1c040:	4651      	mov	r1, sl
   1c042:	4638      	mov	r0, r7
   1c044:	f000 f8b4 	bl	1c1b0 <srkf_dbl_main>
   1c048:	7923      	ldrb	r3, [r4, #4]
   1c04a:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1c04e:	f3c3 0280 	ubfx	r2, r3, #2, #1
   1c052:	4302      	orrs	r2, r0
   1c054:	f362 0382 	bfi	r3, r2, #2, #1
   1c058:	7123      	strb	r3, [r4, #4]
   1c05a:	b2db      	uxtb	r3, r3
   1c05c:	075a      	lsls	r2, r3, #29
   1c05e:	bf5c      	itt	pl
   1c060:	f043 0308 	orrpl.w	r3, r3, #8
   1c064:	7123      	strbpl	r3, [r4, #4]
   1c066:	88a0      	ldrh	r0, [r4, #4]
   1c068:	b003      	add	sp, #12
   1c06a:	ecbd 8b02 	vpop	{d8}
   1c06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c072:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   1c076:	6bbe      	ldr	r6, [r7, #56]	; 0x38
   1c078:	4610      	mov	r0, r2
   1c07a:	4619      	mov	r1, r3
   1c07c:	f003 ff20 	bl	1fec0 <__aeabi_dmul>
   1c080:	4446      	add	r6, r8
   1c082:	444e      	add	r6, r9
   1c084:	e9c6 0100 	strd	r0, r1, [r6]
   1c088:	e7d0      	b.n	1c02c <timescale_main+0x64>
   1c08a:	bf00      	nop
   1c08c:	42600000 	.word	0x42600000

0001c090 <Hofx>:
   1c090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c094:	ed2d 8b02 	vpush	{d8}
   1c098:	ed9f 8b1b 	vldr	d8, [pc, #108]	; 1c108 <Hofx+0x78>
   1c09c:	f04f 0800 	mov.w	r8, #0
   1c0a0:	f8b0 9000 	ldrh.w	r9, [r0]
   1c0a4:	f8b0 a002 	ldrh.w	sl, [r0, #2]
   1c0a8:	4604      	mov	r4, r0
   1c0aa:	4647      	mov	r7, r8
   1c0ac:	b2bb      	uxth	r3, r7
   1c0ae:	459a      	cmp	sl, r3
   1c0b0:	d803      	bhi.n	1c0ba <Hofx+0x2a>
   1c0b2:	ecbd 8b02 	vpop	{d8}
   1c0b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c0ba:	6926      	ldr	r6, [r4, #16]
   1c0bc:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   1c0c0:	ed86 8b00 	vstr	d8, [r6]
   1c0c4:	2500      	movs	r5, #0
   1c0c6:	b2ab      	uxth	r3, r5
   1c0c8:	4599      	cmp	r9, r3
   1c0ca:	d802      	bhi.n	1c0d2 <Hofx+0x42>
   1c0cc:	3701      	adds	r7, #1
   1c0ce:	44c8      	add	r8, r9
   1c0d0:	e7ec      	b.n	1c0ac <Hofx+0x1c>
   1c0d2:	69e3      	ldr	r3, [r4, #28]
   1c0d4:	eb05 0108 	add.w	r1, r5, r8
   1c0d8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1c0dc:	68a3      	ldr	r3, [r4, #8]
   1c0de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   1c0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c0e6:	e9d1 0100 	ldrd	r0, r1, [r1]
   1c0ea:	f003 fee9 	bl	1fec0 <__aeabi_dmul>
   1c0ee:	4602      	mov	r2, r0
   1c0f0:	460b      	mov	r3, r1
   1c0f2:	e9d6 0100 	ldrd	r0, r1, [r6]
   1c0f6:	f003 fd2d 	bl	1fb54 <__adddf3>
   1c0fa:	3501      	adds	r5, #1
   1c0fc:	e9c6 0100 	strd	r0, r1, [r6]
   1c100:	e7e1      	b.n	1c0c6 <Hofx+0x36>
   1c102:	bf00      	nop
   1c104:	f3af 8000 	nop.w
	...

0001c110 <Aofx>:
   1c110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c114:	f8b0 a000 	ldrh.w	sl, [r0]
   1c118:	ed2d 8b02 	vpush	{d8}
   1c11c:	ea4f 09ca 	mov.w	r9, sl, lsl #3
   1c120:	f109 030e 	add.w	r3, r9, #14
   1c124:	466a      	mov	r2, sp
   1c126:	08db      	lsrs	r3, r3, #3
   1c128:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
   1c12c:	af00      	add	r7, sp, #0
   1c12e:	ed9f 8b1e 	vldr	d8, [pc, #120]	; 1c1a8 <Aofx+0x98>
   1c132:	469d      	mov	sp, r3
   1c134:	46e8      	mov	r8, sp
   1c136:	4606      	mov	r6, r0
   1c138:	44c1      	add	r9, r8
   1c13a:	4644      	mov	r4, r8
   1c13c:	f04f 0b00 	mov.w	fp, #0
   1c140:	454c      	cmp	r4, r9
   1c142:	d107      	bne.n	1c154 <Aofx+0x44>
   1c144:	4643      	mov	r3, r8
   1c146:	42a3      	cmp	r3, r4
   1c148:	d124      	bne.n	1c194 <Aofx+0x84>
   1c14a:	46bd      	mov	sp, r7
   1c14c:	ecbd 8b02 	vpop	{d8}
   1c150:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c154:	eca4 8b02 	vstmia	r4!, {d8}
   1c158:	2500      	movs	r5, #0
   1c15a:	b2ab      	uxth	r3, r5
   1c15c:	459a      	cmp	sl, r3
   1c15e:	d801      	bhi.n	1c164 <Aofx+0x54>
   1c160:	44d3      	add	fp, sl
   1c162:	e7ed      	b.n	1c140 <Aofx+0x30>
   1c164:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
   1c166:	eb05 030b 	add.w	r3, r5, fp
   1c16a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1c16e:	68b3      	ldr	r3, [r6, #8]
   1c170:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   1c174:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c178:	e9d1 0100 	ldrd	r0, r1, [r1]
   1c17c:	f003 fea0 	bl	1fec0 <__aeabi_dmul>
   1c180:	4602      	mov	r2, r0
   1c182:	460b      	mov	r3, r1
   1c184:	e954 0102 	ldrd	r0, r1, [r4, #-8]
   1c188:	f003 fce4 	bl	1fb54 <__adddf3>
   1c18c:	3501      	adds	r5, #1
   1c18e:	e944 0102 	strd	r0, r1, [r4, #-8]
   1c192:	e7e2      	b.n	1c15a <Aofx+0x4a>
   1c194:	68b2      	ldr	r2, [r6, #8]
   1c196:	eba3 0108 	sub.w	r1, r3, r8
   1c19a:	440a      	add	r2, r1
   1c19c:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   1c1a0:	e9c2 0100 	strd	r0, r1, [r2]
   1c1a4:	e7cf      	b.n	1c146 <Aofx+0x36>
   1c1a6:	bf00      	nop
	...

0001c1b0 <srkf_dbl_main>:
   1c1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1b4:	ed2d 8b02 	vpush	{d8}
   1c1b8:	eeb0 8a40 	vmov.f32	s16, s0
   1c1bc:	eef0 8a60 	vmov.f32	s17, s1
   1c1c0:	b089      	sub	sp, #36	; 0x24
   1c1c2:	460d      	mov	r5, r1
   1c1c4:	af04      	add	r7, sp, #16
   1c1c6:	4690      	mov	r8, r2
   1c1c8:	461e      	mov	r6, r3
   1c1ca:	4604      	mov	r4, r0
   1c1cc:	b928      	cbnz	r0, 1c1da <srkf_dbl_main+0x2a>
   1c1ce:	4ba8      	ldr	r3, [pc, #672]	; (1c470 <srkf_dbl_main+0x2c0>)
   1c1d0:	4aa8      	ldr	r2, [pc, #672]	; (1c474 <srkf_dbl_main+0x2c4>)
   1c1d2:	2185      	movs	r1, #133	; 0x85
   1c1d4:	48a8      	ldr	r0, [pc, #672]	; (1c478 <srkf_dbl_main+0x2c8>)
   1c1d6:	f7ec fe8d 	bl	8ef4 <__assert_func>
   1c1da:	6d43      	ldr	r3, [r0, #84]	; 0x54
   1c1dc:	b91b      	cbnz	r3, 1c1e6 <srkf_dbl_main+0x36>
   1c1de:	4ba7      	ldr	r3, [pc, #668]	; (1c47c <srkf_dbl_main+0x2cc>)
   1c1e0:	4aa4      	ldr	r2, [pc, #656]	; (1c474 <srkf_dbl_main+0x2c4>)
   1c1e2:	2186      	movs	r1, #134	; 0x86
   1c1e4:	e7f6      	b.n	1c1d4 <srkf_dbl_main+0x24>
   1c1e6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1c1e8:	b91b      	cbnz	r3, 1c1f2 <srkf_dbl_main+0x42>
   1c1ea:	4ba5      	ldr	r3, [pc, #660]	; (1c480 <srkf_dbl_main+0x2d0>)
   1c1ec:	4aa1      	ldr	r2, [pc, #644]	; (1c474 <srkf_dbl_main+0x2c4>)
   1c1ee:	2187      	movs	r1, #135	; 0x87
   1c1f0:	e7f0      	b.n	1c1d4 <srkf_dbl_main+0x24>
   1c1f2:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1c1f4:	b10b      	cbz	r3, 1c1fa <srkf_dbl_main+0x4a>
   1c1f6:	4611      	mov	r1, r2
   1c1f8:	4798      	blx	r3
   1c1fa:	eeb0 0a48 	vmov.f32	s0, s16
   1c1fe:	eef0 0a68 	vmov.f32	s1, s17
   1c202:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1c204:	4641      	mov	r1, r8
   1c206:	4620      	mov	r0, r4
   1c208:	4798      	blx	r3
   1c20a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c20c:	b12b      	cbz	r3, 1c21a <srkf_dbl_main+0x6a>
   1c20e:	eeb0 0a48 	vmov.f32	s0, s16
   1c212:	eef0 0a68 	vmov.f32	s1, s17
   1c216:	4620      	mov	r0, r4
   1c218:	4798      	blx	r3
   1c21a:	8863      	ldrh	r3, [r4, #2]
   1c21c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1c21e:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
   1c222:	f000 fc65 	bl	1caf0 <ud_dbl>
   1c226:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
   1c22a:	8823      	ldrh	r3, [r4, #0]
   1c22c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1c22e:	f000 fc5f 	bl	1caf0 <ud_dbl>
   1c232:	8823      	ldrh	r3, [r4, #0]
   1c234:	9302      	str	r3, [sp, #8]
   1c236:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c238:	9301      	str	r3, [sp, #4]
   1c23a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1c23c:	9300      	str	r3, [sp, #0]
   1c23e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   1c242:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   1c246:	f000 fd27 	bl	1cc98 <thornton_dbl>
   1c24a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1c24e:	f000 0001 	and.w	r0, r0, #1
   1c252:	f3c3 1240 	ubfx	r2, r3, #5, #1
   1c256:	4302      	orrs	r2, r0
   1c258:	f362 1345 	bfi	r3, r2, #5, #1
   1c25c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   1c260:	2e00      	cmp	r6, #0
   1c262:	d156      	bne.n	1c312 <srkf_dbl_main+0x162>
   1c264:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c266:	466e      	mov	r6, sp
   1c268:	b12b      	cbz	r3, 1c276 <srkf_dbl_main+0xc6>
   1c26a:	eeb0 0a48 	vmov.f32	s0, s16
   1c26e:	eef0 0a68 	vmov.f32	s1, s17
   1c272:	4620      	mov	r0, r4
   1c274:	4798      	blx	r3
   1c276:	eeb0 0a48 	vmov.f32	s0, s16
   1c27a:	eef0 0a68 	vmov.f32	s1, s17
   1c27e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1c280:	4620      	mov	r0, r4
   1c282:	4798      	blx	r3
   1c284:	8863      	ldrh	r3, [r4, #2]
   1c286:	8822      	ldrh	r2, [r4, #0]
   1c288:	435a      	muls	r2, r3
   1c28a:	00d2      	lsls	r2, r2, #3
   1c28c:	3208      	adds	r2, #8
   1c28e:	ebad 0d02 	sub.w	sp, sp, r2
   1c292:	2201      	movs	r2, #1
   1c294:	9200      	str	r2, [sp, #0]
   1c296:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   1c298:	6960      	ldr	r0, [r4, #20]
   1c29a:	462a      	mov	r2, r5
   1c29c:	f000 fbc2 	bl	1ca24 <trisolve_dbl>
   1c2a0:	8822      	ldrh	r2, [r4, #0]
   1c2a2:	8863      	ldrh	r3, [r4, #2]
   1c2a4:	9200      	str	r2, [sp, #0]
   1c2a6:	f10d 0810 	add.w	r8, sp, #16
   1c2aa:	69e2      	ldr	r2, [r4, #28]
   1c2ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   1c2ae:	4640      	mov	r0, r8
   1c2b0:	f000 fbb8 	bl	1ca24 <trisolve_dbl>
   1c2b4:	6ea5      	ldr	r5, [r4, #104]	; 0x68
   1c2b6:	b9b5      	cbnz	r5, 1c2e6 <srkf_dbl_main+0x136>
   1c2b8:	f8b4 a002 	ldrh.w	sl, [r4, #2]
   1c2bc:	b2ab      	uxth	r3, r5
   1c2be:	459a      	cmp	sl, r3
   1c2c0:	d917      	bls.n	1c2f2 <srkf_dbl_main+0x142>
   1c2c2:	69a3      	ldr	r3, [r4, #24]
   1c2c4:	00ea      	lsls	r2, r5, #3
   1c2c6:	eb03 0902 	add.w	r9, r3, r2
   1c2ca:	6963      	ldr	r3, [r4, #20]
   1c2cc:	1899      	adds	r1, r3, r2
   1c2ce:	6923      	ldr	r3, [r4, #16]
   1c2d0:	4413      	add	r3, r2
   1c2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c2d6:	e9d1 0100 	ldrd	r0, r1, [r1]
   1c2da:	f003 fc39 	bl	1fb50 <__aeabi_dsub>
   1c2de:	3501      	adds	r5, #1
   1c2e0:	e9c9 0100 	strd	r0, r1, [r9]
   1c2e4:	e7ea      	b.n	1c2bc <srkf_dbl_main+0x10c>
   1c2e6:	eeb0 0a48 	vmov.f32	s0, s16
   1c2ea:	eef0 0a68 	vmov.f32	s1, s17
   1c2ee:	4620      	mov	r0, r4
   1c2f0:	47a8      	blx	r5
   1c2f2:	2300      	movs	r3, #0
   1c2f4:	8862      	ldrh	r2, [r4, #2]
   1c2f6:	b299      	uxth	r1, r3
   1c2f8:	4291      	cmp	r1, r2
   1c2fa:	f103 0501 	add.w	r5, r3, #1
   1c2fe:	d326      	bcc.n	1c34e <srkf_dbl_main+0x19e>
   1c300:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c302:	b12b      	cbz	r3, 1c310 <srkf_dbl_main+0x160>
   1c304:	eeb0 0a48 	vmov.f32	s0, s16
   1c308:	eef0 0a68 	vmov.f32	s1, s17
   1c30c:	4620      	mov	r0, r4
   1c30e:	4798      	blx	r3
   1c310:	46b5      	mov	sp, r6
   1c312:	f8b4 a000 	ldrh.w	sl, [r4]
   1c316:	ed9f 8b54 	vldr	d8, [pc, #336]	; 1c468 <srkf_dbl_main+0x2b8>
   1c31a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
   1c31e:	2500      	movs	r5, #0
   1c320:	60fb      	str	r3, [r7, #12]
   1c322:	60bd      	str	r5, [r7, #8]
   1c324:	893b      	ldrh	r3, [r7, #8]
   1c326:	459a      	cmp	sl, r3
   1c328:	d85d      	bhi.n	1c3e6 <srkf_dbl_main+0x236>
   1c32a:	ed9f 8b4f 	vldr	d8, [pc, #316]	; 1c468 <srkf_dbl_main+0x2b8>
   1c32e:	2500      	movs	r5, #0
   1c330:	68fb      	ldr	r3, [r7, #12]
   1c332:	603b      	str	r3, [r7, #0]
   1c334:	46ab      	mov	fp, r5
   1c336:	607d      	str	r5, [r7, #4]
   1c338:	88bb      	ldrh	r3, [r7, #4]
   1c33a:	459a      	cmp	sl, r3
   1c33c:	f240 808b 	bls.w	1c456 <srkf_dbl_main+0x2a6>
   1c340:	f06f 0307 	mvn.w	r3, #7
   1c344:	436b      	muls	r3, r5
   1c346:	60bb      	str	r3, [r7, #8]
   1c348:	f04f 0900 	mov.w	r9, #0
   1c34c:	e05e      	b.n	1c40c <srkf_dbl_main+0x25c>
   1c34e:	b29b      	uxth	r3, r3
   1c350:	fb02 3c03 	mla	ip, r2, r3, r3
   1c354:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1c356:	8821      	ldrh	r1, [r4, #0]
   1c358:	eb02 0ccc 	add.w	ip, r2, ip, lsl #3
   1c35c:	69a2      	ldr	r2, [r4, #24]
   1c35e:	9100      	str	r1, [sp, #0]
   1c360:	fb03 f001 	mul.w	r0, r3, r1
   1c364:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
   1c368:	68a1      	ldr	r1, [r4, #8]
   1c36a:	e9d4 2309 	ldrd	r2, r3, [r4, #36]	; 0x24
   1c36e:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1c372:	ed9c 1b00 	vldr	d1, [ip]
   1c376:	ed9e 0b00 	vldr	d0, [lr]
   1c37a:	f000 feb1 	bl	1d0e0 <bierman_dbl>
   1c37e:	462b      	mov	r3, r5
   1c380:	e7b8      	b.n	1c2f4 <srkf_dbl_main+0x144>
   1c382:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c384:	eb06 0805 	add.w	r8, r6, r5
   1c388:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   1c38c:	ed88 8b00 	vstr	d8, [r8]
   1c390:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   1c394:	f04f 0900 	mov.w	r9, #0
   1c398:	fa1f f389 	uxth.w	r3, r9
   1c39c:	459a      	cmp	sl, r3
   1c39e:	d808      	bhi.n	1c3b2 <srkf_dbl_main+0x202>
   1c3a0:	3601      	adds	r6, #1
   1c3a2:	b2b3      	uxth	r3, r6
   1c3a4:	459a      	cmp	sl, r3
   1c3a6:	d8ec      	bhi.n	1c382 <srkf_dbl_main+0x1d2>
   1c3a8:	68bb      	ldr	r3, [r7, #8]
   1c3aa:	3301      	adds	r3, #1
   1c3ac:	60bb      	str	r3, [r7, #8]
   1c3ae:	4455      	add	r5, sl
   1c3b0:	e7b8      	b.n	1c324 <srkf_dbl_main+0x174>
   1c3b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1c3b4:	eb09 0305 	add.w	r3, r9, r5
   1c3b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1c3bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c3be:	445b      	add	r3, fp
   1c3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c3c4:	e9d1 0100 	ldrd	r0, r1, [r1]
   1c3c8:	f003 fd7a 	bl	1fec0 <__aeabi_dmul>
   1c3cc:	460b      	mov	r3, r1
   1c3ce:	4602      	mov	r2, r0
   1c3d0:	e9d8 0100 	ldrd	r0, r1, [r8]
   1c3d4:	f003 fbbe 	bl	1fb54 <__adddf3>
   1c3d8:	68fb      	ldr	r3, [r7, #12]
   1c3da:	e9c8 0100 	strd	r0, r1, [r8]
   1c3de:	f109 0901 	add.w	r9, r9, #1
   1c3e2:	449b      	add	fp, r3
   1c3e4:	e7d8      	b.n	1c398 <srkf_dbl_main+0x1e8>
   1c3e6:	2600      	movs	r6, #0
   1c3e8:	e7db      	b.n	1c3a2 <srkf_dbl_main+0x1f2>
   1c3ea:	6a23      	ldr	r3, [r4, #32]
   1c3ec:	eb09 0805 	add.w	r8, r9, r5
   1c3f0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   1c3f4:	ed88 8b00 	vstr	d8, [r8]
   1c3f8:	465e      	mov	r6, fp
   1c3fa:	683b      	ldr	r3, [r7, #0]
   1c3fc:	429e      	cmp	r6, r3
   1c3fe:	d114      	bne.n	1c42a <srkf_dbl_main+0x27a>
   1c400:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
   1c404:	4413      	add	r3, r2
   1c406:	f109 0901 	add.w	r9, r9, #1
   1c40a:	60bb      	str	r3, [r7, #8]
   1c40c:	fa1f f389 	uxth.w	r3, r9
   1c410:	459a      	cmp	sl, r3
   1c412:	d8ea      	bhi.n	1c3ea <srkf_dbl_main+0x23a>
   1c414:	687b      	ldr	r3, [r7, #4]
   1c416:	68fa      	ldr	r2, [r7, #12]
   1c418:	3301      	adds	r3, #1
   1c41a:	607b      	str	r3, [r7, #4]
   1c41c:	68fb      	ldr	r3, [r7, #12]
   1c41e:	449b      	add	fp, r3
   1c420:	683b      	ldr	r3, [r7, #0]
   1c422:	4413      	add	r3, r2
   1c424:	603b      	str	r3, [r7, #0]
   1c426:	4455      	add	r5, sl
   1c428:	e786      	b.n	1c338 <srkf_dbl_main+0x188>
   1c42a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c42c:	68ba      	ldr	r2, [r7, #8]
   1c42e:	4413      	add	r3, r2
   1c430:	1999      	adds	r1, r3, r6
   1c432:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c434:	4433      	add	r3, r6
   1c436:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c43a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1c43e:	f003 fd3f 	bl	1fec0 <__aeabi_dmul>
   1c442:	4602      	mov	r2, r0
   1c444:	460b      	mov	r3, r1
   1c446:	e9d8 0100 	ldrd	r0, r1, [r8]
   1c44a:	f003 fb83 	bl	1fb54 <__adddf3>
   1c44e:	3608      	adds	r6, #8
   1c450:	e9c8 0100 	strd	r0, r1, [r8]
   1c454:	e7d1      	b.n	1c3fa <srkf_dbl_main+0x24a>
   1c456:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
   1c45a:	3714      	adds	r7, #20
   1c45c:	46bd      	mov	sp, r7
   1c45e:	ecbd 8b02 	vpop	{d8}
   1c462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c466:	bf00      	nop
	...
   1c470:	00023b61 	.word	0x00023b61
   1c474:	00023a87 	.word	0x00023a87
   1c478:	00023b6e 	.word	0x00023b6e
   1c47c:	00023b9d 	.word	0x00023b9d
   1c480:	00023bb0 	.word	0x00023bb0

0001c484 <srkf_dbl_init>:
   1c484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c488:	4688      	mov	r8, r1
   1c48a:	4615      	mov	r5, r2
   1c48c:	461e      	mov	r6, r3
   1c48e:	4604      	mov	r4, r0
   1c490:	b9d8      	cbnz	r0, 1c4ca <srkf_dbl_init+0x46>
   1c492:	2074      	movs	r0, #116	; 0x74
   1c494:	f7f3 f820 	bl	f4d8 <malloc>
   1c498:	4604      	mov	r4, r0
   1c49a:	b928      	cbnz	r0, 1c4a8 <srkf_dbl_init+0x24>
   1c49c:	4baa      	ldr	r3, [pc, #680]	; (1c748 <srkf_dbl_init+0x2c4>)
   1c49e:	4aab      	ldr	r2, [pc, #684]	; (1c74c <srkf_dbl_init+0x2c8>)
   1c4a0:	21c5      	movs	r1, #197	; 0xc5
   1c4a2:	48ab      	ldr	r0, [pc, #684]	; (1c750 <srkf_dbl_init+0x2cc>)
   1c4a4:	f7ec fd26 	bl	8ef4 <__assert_func>
   1c4a8:	2274      	movs	r2, #116	; 0x74
   1c4aa:	2100      	movs	r1, #0
   1c4ac:	f7f3 f8a7 	bl	f5fe <memset>
   1c4b0:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1c4b4:	8025      	strh	r5, [r4, #0]
   1c4b6:	f043 0301 	orr.w	r3, r3, #1
   1c4ba:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   1c4be:	4ba5      	ldr	r3, [pc, #660]	; (1c754 <srkf_dbl_init+0x2d0>)
   1c4c0:	6563      	str	r3, [r4, #84]	; 0x54
   1c4c2:	4ba5      	ldr	r3, [pc, #660]	; (1c758 <srkf_dbl_init+0x2d4>)
   1c4c4:	80a6      	strh	r6, [r4, #4]
   1c4c6:	8066      	strh	r6, [r4, #2]
   1c4c8:	65e3      	str	r3, [r4, #92]	; 0x5c
   1c4ca:	8823      	ldrh	r3, [r4, #0]
   1c4cc:	42ab      	cmp	r3, r5
   1c4ce:	d003      	beq.n	1c4d8 <srkf_dbl_init+0x54>
   1c4d0:	4ba2      	ldr	r3, [pc, #648]	; (1c75c <srkf_dbl_init+0x2d8>)
   1c4d2:	4a9e      	ldr	r2, [pc, #632]	; (1c74c <srkf_dbl_init+0x2c8>)
   1c4d4:	21ce      	movs	r1, #206	; 0xce
   1c4d6:	e7e4      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c4d8:	88a3      	ldrh	r3, [r4, #4]
   1c4da:	42b3      	cmp	r3, r6
   1c4dc:	d920      	bls.n	1c520 <srkf_dbl_init+0x9c>
   1c4de:	00f7      	lsls	r7, r6, #3
   1c4e0:	8066      	strh	r6, [r4, #2]
   1c4e2:	463a      	mov	r2, r7
   1c4e4:	2100      	movs	r1, #0
   1c4e6:	4375      	muls	r5, r6
   1c4e8:	6920      	ldr	r0, [r4, #16]
   1c4ea:	f7f3 f888 	bl	f5fe <memset>
   1c4ee:	00ed      	lsls	r5, r5, #3
   1c4f0:	463a      	mov	r2, r7
   1c4f2:	2100      	movs	r1, #0
   1c4f4:	69a0      	ldr	r0, [r4, #24]
   1c4f6:	f7f3 f882 	bl	f5fe <memset>
   1c4fa:	4376      	muls	r6, r6
   1c4fc:	462a      	mov	r2, r5
   1c4fe:	2100      	movs	r1, #0
   1c500:	69e0      	ldr	r0, [r4, #28]
   1c502:	f7f3 f87c 	bl	f5fe <memset>
   1c506:	00f2      	lsls	r2, r6, #3
   1c508:	2100      	movs	r1, #0
   1c50a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1c50c:	f7f3 f877 	bl	f5fe <memset>
   1c510:	462a      	mov	r2, r5
   1c512:	2100      	movs	r1, #0
   1c514:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1c516:	f7f3 f872 	bl	f5fe <memset>
   1c51a:	4620      	mov	r0, r4
   1c51c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c520:	68a7      	ldr	r7, [r4, #8]
   1c522:	b177      	cbz	r7, 1c542 <srkf_dbl_init+0xbe>
   1c524:	f8d4 8010 	ldr.w	r8, [r4, #16]
   1c528:	00f7      	lsls	r7, r6, #3
   1c52a:	f1b8 0f00 	cmp.w	r8, #0
   1c52e:	d126      	bne.n	1c57e <srkf_dbl_init+0xfa>
   1c530:	4638      	mov	r0, r7
   1c532:	f7f2 ffd1 	bl	f4d8 <malloc>
   1c536:	6120      	str	r0, [r4, #16]
   1c538:	bb58      	cbnz	r0, 1c592 <srkf_dbl_init+0x10e>
   1c53a:	4b89      	ldr	r3, [pc, #548]	; (1c760 <srkf_dbl_init+0x2dc>)
   1c53c:	4a83      	ldr	r2, [pc, #524]	; (1c74c <srkf_dbl_init+0x2c8>)
   1c53e:	21e6      	movs	r1, #230	; 0xe6
   1c540:	e7af      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c542:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   1c546:	4648      	mov	r0, r9
   1c548:	f7f2 ffc6 	bl	f4d8 <malloc>
   1c54c:	60a0      	str	r0, [r4, #8]
   1c54e:	b918      	cbnz	r0, 1c558 <srkf_dbl_init+0xd4>
   1c550:	4b84      	ldr	r3, [pc, #528]	; (1c764 <srkf_dbl_init+0x2e0>)
   1c552:	4a7e      	ldr	r2, [pc, #504]	; (1c74c <srkf_dbl_init+0x2c8>)
   1c554:	21dc      	movs	r1, #220	; 0xdc
   1c556:	e7a4      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c558:	464a      	mov	r2, r9
   1c55a:	4639      	mov	r1, r7
   1c55c:	f7f3 f84f 	bl	f5fe <memset>
   1c560:	f1b8 0f00 	cmp.w	r8, #0
   1c564:	d0de      	beq.n	1c524 <srkf_dbl_init+0xa0>
   1c566:	463b      	mov	r3, r7
   1c568:	429d      	cmp	r5, r3
   1c56a:	dddb      	ble.n	1c524 <srkf_dbl_init+0xa0>
   1c56c:	68a2      	ldr	r2, [r4, #8]
   1c56e:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   1c572:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1c576:	e9c2 0100 	strd	r0, r1, [r2]
   1c57a:	3301      	adds	r3, #1
   1c57c:	e7f4      	b.n	1c568 <srkf_dbl_init+0xe4>
   1c57e:	4639      	mov	r1, r7
   1c580:	4640      	mov	r0, r8
   1c582:	f001 fd48 	bl	1e016 <realloc>
   1c586:	6120      	str	r0, [r4, #16]
   1c588:	b918      	cbnz	r0, 1c592 <srkf_dbl_init+0x10e>
   1c58a:	4b75      	ldr	r3, [pc, #468]	; (1c760 <srkf_dbl_init+0x2dc>)
   1c58c:	4a6f      	ldr	r2, [pc, #444]	; (1c74c <srkf_dbl_init+0x2c8>)
   1c58e:	21ea      	movs	r1, #234	; 0xea
   1c590:	e787      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c592:	463a      	mov	r2, r7
   1c594:	2100      	movs	r1, #0
   1c596:	f7f3 f832 	bl	f5fe <memset>
   1c59a:	f8d4 8014 	ldr.w	r8, [r4, #20]
   1c59e:	f1b8 0f00 	cmp.w	r8, #0
   1c5a2:	d108      	bne.n	1c5b6 <srkf_dbl_init+0x132>
   1c5a4:	4638      	mov	r0, r7
   1c5a6:	f7f2 ff97 	bl	f4d8 <malloc>
   1c5aa:	6160      	str	r0, [r4, #20]
   1c5ac:	b968      	cbnz	r0, 1c5ca <srkf_dbl_init+0x146>
   1c5ae:	4b6e      	ldr	r3, [pc, #440]	; (1c768 <srkf_dbl_init+0x2e4>)
   1c5b0:	4a66      	ldr	r2, [pc, #408]	; (1c74c <srkf_dbl_init+0x2c8>)
   1c5b2:	21ef      	movs	r1, #239	; 0xef
   1c5b4:	e775      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c5b6:	4639      	mov	r1, r7
   1c5b8:	4640      	mov	r0, r8
   1c5ba:	f001 fd2c 	bl	1e016 <realloc>
   1c5be:	6160      	str	r0, [r4, #20]
   1c5c0:	b918      	cbnz	r0, 1c5ca <srkf_dbl_init+0x146>
   1c5c2:	4b69      	ldr	r3, [pc, #420]	; (1c768 <srkf_dbl_init+0x2e4>)
   1c5c4:	4a61      	ldr	r2, [pc, #388]	; (1c74c <srkf_dbl_init+0x2c8>)
   1c5c6:	21f3      	movs	r1, #243	; 0xf3
   1c5c8:	e76b      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c5ca:	463a      	mov	r2, r7
   1c5cc:	2100      	movs	r1, #0
   1c5ce:	f7f3 f816 	bl	f5fe <memset>
   1c5d2:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1c5d6:	f1b8 0f00 	cmp.w	r8, #0
   1c5da:	d108      	bne.n	1c5ee <srkf_dbl_init+0x16a>
   1c5dc:	4638      	mov	r0, r7
   1c5de:	f7f2 ff7b 	bl	f4d8 <malloc>
   1c5e2:	61a0      	str	r0, [r4, #24]
   1c5e4:	b968      	cbnz	r0, 1c602 <srkf_dbl_init+0x17e>
   1c5e6:	4b61      	ldr	r3, [pc, #388]	; (1c76c <srkf_dbl_init+0x2e8>)
   1c5e8:	4a58      	ldr	r2, [pc, #352]	; (1c74c <srkf_dbl_init+0x2c8>)
   1c5ea:	21f8      	movs	r1, #248	; 0xf8
   1c5ec:	e759      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c5ee:	4639      	mov	r1, r7
   1c5f0:	4640      	mov	r0, r8
   1c5f2:	f001 fd10 	bl	1e016 <realloc>
   1c5f6:	61a0      	str	r0, [r4, #24]
   1c5f8:	b918      	cbnz	r0, 1c602 <srkf_dbl_init+0x17e>
   1c5fa:	4b5c      	ldr	r3, [pc, #368]	; (1c76c <srkf_dbl_init+0x2e8>)
   1c5fc:	4a53      	ldr	r2, [pc, #332]	; (1c74c <srkf_dbl_init+0x2c8>)
   1c5fe:	21fc      	movs	r1, #252	; 0xfc
   1c600:	e74f      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c602:	463a      	mov	r2, r7
   1c604:	2100      	movs	r1, #0
   1c606:	f7f2 fffa 	bl	f5fe <memset>
   1c60a:	69e7      	ldr	r7, [r4, #28]
   1c60c:	fb05 f806 	mul.w	r8, r5, r6
   1c610:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   1c614:	b94f      	cbnz	r7, 1c62a <srkf_dbl_init+0x1a6>
   1c616:	4640      	mov	r0, r8
   1c618:	f7f2 ff5e 	bl	f4d8 <malloc>
   1c61c:	61e0      	str	r0, [r4, #28]
   1c61e:	b978      	cbnz	r0, 1c640 <srkf_dbl_init+0x1bc>
   1c620:	4b53      	ldr	r3, [pc, #332]	; (1c770 <srkf_dbl_init+0x2ec>)
   1c622:	4a4a      	ldr	r2, [pc, #296]	; (1c74c <srkf_dbl_init+0x2c8>)
   1c624:	f240 1101 	movw	r1, #257	; 0x101
   1c628:	e73b      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c62a:	4641      	mov	r1, r8
   1c62c:	4638      	mov	r0, r7
   1c62e:	f001 fcf2 	bl	1e016 <realloc>
   1c632:	61e0      	str	r0, [r4, #28]
   1c634:	b920      	cbnz	r0, 1c640 <srkf_dbl_init+0x1bc>
   1c636:	4b4e      	ldr	r3, [pc, #312]	; (1c770 <srkf_dbl_init+0x2ec>)
   1c638:	4a44      	ldr	r2, [pc, #272]	; (1c74c <srkf_dbl_init+0x2c8>)
   1c63a:	f240 1105 	movw	r1, #261	; 0x105
   1c63e:	e730      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c640:	4642      	mov	r2, r8
   1c642:	2100      	movs	r1, #0
   1c644:	f7f2 ffdb 	bl	f5fe <memset>
   1c648:	f8d4 9020 	ldr.w	r9, [r4, #32]
   1c64c:	f1b9 0f00 	cmp.w	r9, #0
   1c650:	d110      	bne.n	1c674 <srkf_dbl_init+0x1f0>
   1c652:	fb05 f705 	mul.w	r7, r5, r5
   1c656:	00ff      	lsls	r7, r7, #3
   1c658:	4638      	mov	r0, r7
   1c65a:	f7f2 ff3d 	bl	f4d8 <malloc>
   1c65e:	6220      	str	r0, [r4, #32]
   1c660:	b920      	cbnz	r0, 1c66c <srkf_dbl_init+0x1e8>
   1c662:	4b44      	ldr	r3, [pc, #272]	; (1c774 <srkf_dbl_init+0x2f0>)
   1c664:	4a39      	ldr	r2, [pc, #228]	; (1c74c <srkf_dbl_init+0x2c8>)
   1c666:	f44f 7185 	mov.w	r1, #266	; 0x10a
   1c66a:	e71a      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c66c:	463a      	mov	r2, r7
   1c66e:	4649      	mov	r1, r9
   1c670:	f7f2 ffc5 	bl	f5fe <memset>
   1c674:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   1c678:	f1b9 0f00 	cmp.w	r9, #0
   1c67c:	d110      	bne.n	1c6a0 <srkf_dbl_init+0x21c>
   1c67e:	fb05 f705 	mul.w	r7, r5, r5
   1c682:	00ff      	lsls	r7, r7, #3
   1c684:	4638      	mov	r0, r7
   1c686:	f7f2 ff27 	bl	f4d8 <malloc>
   1c68a:	6260      	str	r0, [r4, #36]	; 0x24
   1c68c:	b920      	cbnz	r0, 1c698 <srkf_dbl_init+0x214>
   1c68e:	4b3a      	ldr	r3, [pc, #232]	; (1c778 <srkf_dbl_init+0x2f4>)
   1c690:	4a2e      	ldr	r2, [pc, #184]	; (1c74c <srkf_dbl_init+0x2c8>)
   1c692:	f240 110f 	movw	r1, #271	; 0x10f
   1c696:	e704      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c698:	463a      	mov	r2, r7
   1c69a:	4649      	mov	r1, r9
   1c69c:	f7f2 ffaf 	bl	f5fe <memset>
   1c6a0:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   1c6a4:	f1b9 0f00 	cmp.w	r9, #0
   1c6a8:	d110      	bne.n	1c6cc <srkf_dbl_init+0x248>
   1c6aa:	fb05 f705 	mul.w	r7, r5, r5
   1c6ae:	00ff      	lsls	r7, r7, #3
   1c6b0:	4638      	mov	r0, r7
   1c6b2:	f7f2 ff11 	bl	f4d8 <malloc>
   1c6b6:	62a0      	str	r0, [r4, #40]	; 0x28
   1c6b8:	b920      	cbnz	r0, 1c6c4 <srkf_dbl_init+0x240>
   1c6ba:	4b30      	ldr	r3, [pc, #192]	; (1c77c <srkf_dbl_init+0x2f8>)
   1c6bc:	4a23      	ldr	r2, [pc, #140]	; (1c74c <srkf_dbl_init+0x2c8>)
   1c6be:	f44f 718a 	mov.w	r1, #276	; 0x114
   1c6c2:	e6ee      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c6c4:	463a      	mov	r2, r7
   1c6c6:	4649      	mov	r1, r9
   1c6c8:	f7f2 ff99 	bl	f5fe <memset>
   1c6cc:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
   1c6d0:	f1b9 0f00 	cmp.w	r9, #0
   1c6d4:	d110      	bne.n	1c6f8 <srkf_dbl_init+0x274>
   1c6d6:	fb05 f705 	mul.w	r7, r5, r5
   1c6da:	00ff      	lsls	r7, r7, #3
   1c6dc:	4638      	mov	r0, r7
   1c6de:	f7f2 fefb 	bl	f4d8 <malloc>
   1c6e2:	62e0      	str	r0, [r4, #44]	; 0x2c
   1c6e4:	b920      	cbnz	r0, 1c6f0 <srkf_dbl_init+0x26c>
   1c6e6:	4b26      	ldr	r3, [pc, #152]	; (1c780 <srkf_dbl_init+0x2fc>)
   1c6e8:	4a18      	ldr	r2, [pc, #96]	; (1c74c <srkf_dbl_init+0x2c8>)
   1c6ea:	f240 1119 	movw	r1, #281	; 0x119
   1c6ee:	e6d8      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c6f0:	463a      	mov	r2, r7
   1c6f2:	4649      	mov	r1, r9
   1c6f4:	f7f2 ff83 	bl	f5fe <memset>
   1c6f8:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
   1c6fc:	f1b9 0f00 	cmp.w	r9, #0
   1c700:	d110      	bne.n	1c724 <srkf_dbl_init+0x2a0>
   1c702:	fb05 f705 	mul.w	r7, r5, r5
   1c706:	00ff      	lsls	r7, r7, #3
   1c708:	4638      	mov	r0, r7
   1c70a:	f7f2 fee5 	bl	f4d8 <malloc>
   1c70e:	6320      	str	r0, [r4, #48]	; 0x30
   1c710:	b920      	cbnz	r0, 1c71c <srkf_dbl_init+0x298>
   1c712:	4b1c      	ldr	r3, [pc, #112]	; (1c784 <srkf_dbl_init+0x300>)
   1c714:	4a0d      	ldr	r2, [pc, #52]	; (1c74c <srkf_dbl_init+0x2c8>)
   1c716:	f44f 718f 	mov.w	r1, #286	; 0x11e
   1c71a:	e6c2      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c71c:	463a      	mov	r2, r7
   1c71e:	4649      	mov	r1, r9
   1c720:	f7f2 ff6d 	bl	f5fe <memset>
   1c724:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   1c728:	f1b9 0f00 	cmp.w	r9, #0
   1c72c:	d132      	bne.n	1c794 <srkf_dbl_init+0x310>
   1c72e:	fb05 f705 	mul.w	r7, r5, r5
   1c732:	00ff      	lsls	r7, r7, #3
   1c734:	4638      	mov	r0, r7
   1c736:	f7f2 fecf 	bl	f4d8 <malloc>
   1c73a:	6360      	str	r0, [r4, #52]	; 0x34
   1c73c:	bb30      	cbnz	r0, 1c78c <srkf_dbl_init+0x308>
   1c73e:	4b12      	ldr	r3, [pc, #72]	; (1c788 <srkf_dbl_init+0x304>)
   1c740:	4a02      	ldr	r2, [pc, #8]	; (1c74c <srkf_dbl_init+0x2c8>)
   1c742:	f240 1123 	movw	r1, #291	; 0x123
   1c746:	e6ac      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c748:	00023a52 	.word	0x00023a52
   1c74c:	00023a95 	.word	0x00023a95
   1c750:	00023b6e 	.word	0x00023b6e
   1c754:	0001c111 	.word	0x0001c111
   1c758:	0001c091 	.word	0x0001c091
   1c75c:	00023abd 	.word	0x00023abd
   1c760:	00023ad2 	.word	0x00023ad2
   1c764:	00023aca 	.word	0x00023aca
   1c768:	00023ada 	.word	0x00023ada
   1c76c:	00023ae2 	.word	0x00023ae2
   1c770:	00023aea 	.word	0x00023aea
   1c774:	00023af2 	.word	0x00023af2
   1c778:	00023afa 	.word	0x00023afa
   1c77c:	00023b03 	.word	0x00023b03
   1c780:	00023b0c 	.word	0x00023b0c
   1c784:	00023b14 	.word	0x00023b14
   1c788:	00023b1d 	.word	0x00023b1d
   1c78c:	463a      	mov	r2, r7
   1c78e:	4649      	mov	r1, r9
   1c790:	f7f2 ff35 	bl	f5fe <memset>
   1c794:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   1c798:	fb06 f706 	mul.w	r7, r6, r6
   1c79c:	00ff      	lsls	r7, r7, #3
   1c79e:	f1b9 0f00 	cmp.w	r9, #0
   1c7a2:	d109      	bne.n	1c7b8 <srkf_dbl_init+0x334>
   1c7a4:	4638      	mov	r0, r7
   1c7a6:	f7f2 fe97 	bl	f4d8 <malloc>
   1c7aa:	63a0      	str	r0, [r4, #56]	; 0x38
   1c7ac:	b978      	cbnz	r0, 1c7ce <srkf_dbl_init+0x34a>
   1c7ae:	4b6d      	ldr	r3, [pc, #436]	; (1c964 <srkf_dbl_init+0x4e0>)
   1c7b0:	4a6d      	ldr	r2, [pc, #436]	; (1c968 <srkf_dbl_init+0x4e4>)
   1c7b2:	f44f 7194 	mov.w	r1, #296	; 0x128
   1c7b6:	e674      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c7b8:	4639      	mov	r1, r7
   1c7ba:	4648      	mov	r0, r9
   1c7bc:	f001 fc2b 	bl	1e016 <realloc>
   1c7c0:	63a0      	str	r0, [r4, #56]	; 0x38
   1c7c2:	b920      	cbnz	r0, 1c7ce <srkf_dbl_init+0x34a>
   1c7c4:	4b67      	ldr	r3, [pc, #412]	; (1c964 <srkf_dbl_init+0x4e0>)
   1c7c6:	4a68      	ldr	r2, [pc, #416]	; (1c968 <srkf_dbl_init+0x4e4>)
   1c7c8:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1c7cc:	e669      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c7ce:	463a      	mov	r2, r7
   1c7d0:	2100      	movs	r1, #0
   1c7d2:	f7f2 ff14 	bl	f5fe <memset>
   1c7d6:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
   1c7da:	f1b9 0f00 	cmp.w	r9, #0
   1c7de:	d109      	bne.n	1c7f4 <srkf_dbl_init+0x370>
   1c7e0:	4638      	mov	r0, r7
   1c7e2:	f7f2 fe79 	bl	f4d8 <malloc>
   1c7e6:	63e0      	str	r0, [r4, #60]	; 0x3c
   1c7e8:	b978      	cbnz	r0, 1c80a <srkf_dbl_init+0x386>
   1c7ea:	4b60      	ldr	r3, [pc, #384]	; (1c96c <srkf_dbl_init+0x4e8>)
   1c7ec:	4a5e      	ldr	r2, [pc, #376]	; (1c968 <srkf_dbl_init+0x4e4>)
   1c7ee:	f240 1131 	movw	r1, #305	; 0x131
   1c7f2:	e656      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c7f4:	4639      	mov	r1, r7
   1c7f6:	4648      	mov	r0, r9
   1c7f8:	f001 fc0d 	bl	1e016 <realloc>
   1c7fc:	63e0      	str	r0, [r4, #60]	; 0x3c
   1c7fe:	b920      	cbnz	r0, 1c80a <srkf_dbl_init+0x386>
   1c800:	4b5a      	ldr	r3, [pc, #360]	; (1c96c <srkf_dbl_init+0x4e8>)
   1c802:	4a59      	ldr	r2, [pc, #356]	; (1c968 <srkf_dbl_init+0x4e4>)
   1c804:	f240 1135 	movw	r1, #309	; 0x135
   1c808:	e64b      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c80a:	463a      	mov	r2, r7
   1c80c:	2100      	movs	r1, #0
   1c80e:	f7f2 fef6 	bl	f5fe <memset>
   1c812:	f8d4 9040 	ldr.w	r9, [r4, #64]	; 0x40
   1c816:	f1b9 0f00 	cmp.w	r9, #0
   1c81a:	d109      	bne.n	1c830 <srkf_dbl_init+0x3ac>
   1c81c:	4638      	mov	r0, r7
   1c81e:	f7f2 fe5b 	bl	f4d8 <malloc>
   1c822:	6420      	str	r0, [r4, #64]	; 0x40
   1c824:	b978      	cbnz	r0, 1c846 <srkf_dbl_init+0x3c2>
   1c826:	4b52      	ldr	r3, [pc, #328]	; (1c970 <srkf_dbl_init+0x4ec>)
   1c828:	4a4f      	ldr	r2, [pc, #316]	; (1c968 <srkf_dbl_init+0x4e4>)
   1c82a:	f44f 719d 	mov.w	r1, #314	; 0x13a
   1c82e:	e638      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c830:	4639      	mov	r1, r7
   1c832:	4648      	mov	r0, r9
   1c834:	f001 fbef 	bl	1e016 <realloc>
   1c838:	6420      	str	r0, [r4, #64]	; 0x40
   1c83a:	b920      	cbnz	r0, 1c846 <srkf_dbl_init+0x3c2>
   1c83c:	4b4c      	ldr	r3, [pc, #304]	; (1c970 <srkf_dbl_init+0x4ec>)
   1c83e:	4a4a      	ldr	r2, [pc, #296]	; (1c968 <srkf_dbl_init+0x4e4>)
   1c840:	f44f 719f 	mov.w	r1, #318	; 0x13e
   1c844:	e62d      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c846:	463a      	mov	r2, r7
   1c848:	2100      	movs	r1, #0
   1c84a:	f7f2 fed8 	bl	f5fe <memset>
   1c84e:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1c850:	b988      	cbnz	r0, 1c876 <srkf_dbl_init+0x3f2>
   1c852:	42b5      	cmp	r5, r6
   1c854:	bf8c      	ite	hi
   1c856:	fb15 f705 	smulbbhi	r7, r5, r5
   1c85a:	fb16 f706 	smulbbls	r7, r6, r6
   1c85e:	b2bf      	uxth	r7, r7
   1c860:	00ff      	lsls	r7, r7, #3
   1c862:	4638      	mov	r0, r7
   1c864:	f7f2 fe38 	bl	f4d8 <malloc>
   1c868:	6460      	str	r0, [r4, #68]	; 0x44
   1c86a:	b9b0      	cbnz	r0, 1c89a <srkf_dbl_init+0x416>
   1c86c:	4b41      	ldr	r3, [pc, #260]	; (1c974 <srkf_dbl_init+0x4f0>)
   1c86e:	4a3e      	ldr	r2, [pc, #248]	; (1c968 <srkf_dbl_init+0x4e4>)
   1c870:	f44f 71a2 	mov.w	r1, #324	; 0x144
   1c874:	e615      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c876:	42b5      	cmp	r5, r6
   1c878:	bf8c      	ite	hi
   1c87a:	fb15 f705 	smulbbhi	r7, r5, r5
   1c87e:	fb16 f706 	smulbbls	r7, r6, r6
   1c882:	b2bf      	uxth	r7, r7
   1c884:	00ff      	lsls	r7, r7, #3
   1c886:	4639      	mov	r1, r7
   1c888:	f001 fbc5 	bl	1e016 <realloc>
   1c88c:	6460      	str	r0, [r4, #68]	; 0x44
   1c88e:	b920      	cbnz	r0, 1c89a <srkf_dbl_init+0x416>
   1c890:	4b38      	ldr	r3, [pc, #224]	; (1c974 <srkf_dbl_init+0x4f0>)
   1c892:	4a35      	ldr	r2, [pc, #212]	; (1c968 <srkf_dbl_init+0x4e4>)
   1c894:	f240 1149 	movw	r1, #329	; 0x149
   1c898:	e603      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c89a:	463a      	mov	r2, r7
   1c89c:	2100      	movs	r1, #0
   1c89e:	f7f2 feae 	bl	f5fe <memset>
   1c8a2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1c8a4:	b988      	cbnz	r0, 1c8ca <srkf_dbl_init+0x446>
   1c8a6:	42b5      	cmp	r5, r6
   1c8a8:	bf8c      	ite	hi
   1c8aa:	fb15 f705 	smulbbhi	r7, r5, r5
   1c8ae:	fb16 f706 	smulbbls	r7, r6, r6
   1c8b2:	b2bf      	uxth	r7, r7
   1c8b4:	00ff      	lsls	r7, r7, #3
   1c8b6:	4638      	mov	r0, r7
   1c8b8:	f7f2 fe0e 	bl	f4d8 <malloc>
   1c8bc:	64a0      	str	r0, [r4, #72]	; 0x48
   1c8be:	b9b0      	cbnz	r0, 1c8ee <srkf_dbl_init+0x46a>
   1c8c0:	4b2d      	ldr	r3, [pc, #180]	; (1c978 <srkf_dbl_init+0x4f4>)
   1c8c2:	4a29      	ldr	r2, [pc, #164]	; (1c968 <srkf_dbl_init+0x4e4>)
   1c8c4:	f240 114f 	movw	r1, #335	; 0x14f
   1c8c8:	e5eb      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c8ca:	42b5      	cmp	r5, r6
   1c8cc:	bf8c      	ite	hi
   1c8ce:	fb15 f705 	smulbbhi	r7, r5, r5
   1c8d2:	fb16 f706 	smulbbls	r7, r6, r6
   1c8d6:	b2bf      	uxth	r7, r7
   1c8d8:	00ff      	lsls	r7, r7, #3
   1c8da:	4639      	mov	r1, r7
   1c8dc:	f001 fb9b 	bl	1e016 <realloc>
   1c8e0:	64a0      	str	r0, [r4, #72]	; 0x48
   1c8e2:	b920      	cbnz	r0, 1c8ee <srkf_dbl_init+0x46a>
   1c8e4:	4b24      	ldr	r3, [pc, #144]	; (1c978 <srkf_dbl_init+0x4f4>)
   1c8e6:	4a20      	ldr	r2, [pc, #128]	; (1c968 <srkf_dbl_init+0x4e4>)
   1c8e8:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1c8ec:	e5d9      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c8ee:	463a      	mov	r2, r7
   1c8f0:	2100      	movs	r1, #0
   1c8f2:	f7f2 fe84 	bl	f5fe <memset>
   1c8f6:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
   1c8f8:	b97f      	cbnz	r7, 1c91a <srkf_dbl_init+0x496>
   1c8fa:	436d      	muls	r5, r5
   1c8fc:	00ed      	lsls	r5, r5, #3
   1c8fe:	4628      	mov	r0, r5
   1c900:	f7f2 fdea 	bl	f4d8 <malloc>
   1c904:	64e0      	str	r0, [r4, #76]	; 0x4c
   1c906:	b920      	cbnz	r0, 1c912 <srkf_dbl_init+0x48e>
   1c908:	4b1c      	ldr	r3, [pc, #112]	; (1c97c <srkf_dbl_init+0x4f8>)
   1c90a:	4a17      	ldr	r2, [pc, #92]	; (1c968 <srkf_dbl_init+0x4e4>)
   1c90c:	f240 1159 	movw	r1, #345	; 0x159
   1c910:	e5c7      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c912:	462a      	mov	r2, r5
   1c914:	4639      	mov	r1, r7
   1c916:	f7f2 fe72 	bl	f5fe <memset>
   1c91a:	6d25      	ldr	r5, [r4, #80]	; 0x50
   1c91c:	b94d      	cbnz	r5, 1c932 <srkf_dbl_init+0x4ae>
   1c91e:	4640      	mov	r0, r8
   1c920:	f7f2 fdda 	bl	f4d8 <malloc>
   1c924:	6520      	str	r0, [r4, #80]	; 0x50
   1c926:	b978      	cbnz	r0, 1c948 <srkf_dbl_init+0x4c4>
   1c928:	4b15      	ldr	r3, [pc, #84]	; (1c980 <srkf_dbl_init+0x4fc>)
   1c92a:	4a0f      	ldr	r2, [pc, #60]	; (1c968 <srkf_dbl_init+0x4e4>)
   1c92c:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1c930:	e5b7      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c932:	4641      	mov	r1, r8
   1c934:	4628      	mov	r0, r5
   1c936:	f001 fb6e 	bl	1e016 <realloc>
   1c93a:	6520      	str	r0, [r4, #80]	; 0x50
   1c93c:	b920      	cbnz	r0, 1c948 <srkf_dbl_init+0x4c4>
   1c93e:	4b10      	ldr	r3, [pc, #64]	; (1c980 <srkf_dbl_init+0x4fc>)
   1c940:	4a09      	ldr	r2, [pc, #36]	; (1c968 <srkf_dbl_init+0x4e4>)
   1c942:	f44f 71b1 	mov.w	r1, #354	; 0x162
   1c946:	e5ac      	b.n	1c4a2 <srkf_dbl_init+0x1e>
   1c948:	4642      	mov	r2, r8
   1c94a:	2100      	movs	r1, #0
   1c94c:	f7f2 fe57 	bl	f5fe <memset>
   1c950:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1c954:	80a6      	strh	r6, [r4, #4]
   1c956:	f043 0302 	orr.w	r3, r3, #2
   1c95a:	8066      	strh	r6, [r4, #2]
   1c95c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   1c960:	e5db      	b.n	1c51a <srkf_dbl_init+0x96>
   1c962:	bf00      	nop
   1c964:	00023b26 	.word	0x00023b26
   1c968:	00023a95 	.word	0x00023a95
   1c96c:	00023b2e 	.word	0x00023b2e
   1c970:	00023b37 	.word	0x00023b37
   1c974:	00023b40 	.word	0x00023b40
   1c978:	00023b48 	.word	0x00023b48
   1c97c:	00023b51 	.word	0x00023b51
   1c980:	00023b59 	.word	0x00023b59

0001c984 <srkf_dbl_free>:
   1c984:	b510      	push	{r4, lr}
   1c986:	4604      	mov	r4, r0
   1c988:	b930      	cbnz	r0, 1c998 <srkf_dbl_free+0x14>
   1c98a:	4b23      	ldr	r3, [pc, #140]	; (1ca18 <srkf_dbl_free+0x94>)
   1c98c:	4a23      	ldr	r2, [pc, #140]	; (1ca1c <srkf_dbl_free+0x98>)
   1c98e:	4824      	ldr	r0, [pc, #144]	; (1ca20 <srkf_dbl_free+0x9c>)
   1c990:	f240 1173 	movw	r1, #371	; 0x173
   1c994:	f7ec faae 	bl	8ef4 <__assert_func>
   1c998:	6880      	ldr	r0, [r0, #8]
   1c99a:	f7f2 fde9 	bl	f570 <free>
   1c99e:	6920      	ldr	r0, [r4, #16]
   1c9a0:	f7f2 fde6 	bl	f570 <free>
   1c9a4:	69a0      	ldr	r0, [r4, #24]
   1c9a6:	f7f2 fde3 	bl	f570 <free>
   1c9aa:	69e0      	ldr	r0, [r4, #28]
   1c9ac:	f7f2 fde0 	bl	f570 <free>
   1c9b0:	6a20      	ldr	r0, [r4, #32]
   1c9b2:	f7f2 fddd 	bl	f570 <free>
   1c9b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1c9b8:	f7f2 fdda 	bl	f570 <free>
   1c9bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1c9be:	f7f2 fdd7 	bl	f570 <free>
   1c9c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1c9c4:	f7f2 fdd4 	bl	f570 <free>
   1c9c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1c9ca:	f7f2 fdd1 	bl	f570 <free>
   1c9ce:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1c9d0:	f7f2 fdce 	bl	f570 <free>
   1c9d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1c9d6:	f7f2 fdcb 	bl	f570 <free>
   1c9da:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1c9dc:	f7f2 fdc8 	bl	f570 <free>
   1c9e0:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1c9e2:	f7f2 fdc5 	bl	f570 <free>
   1c9e6:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1c9e8:	f7f2 fdc2 	bl	f570 <free>
   1c9ec:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1c9ee:	f7f2 fdbf 	bl	f570 <free>
   1c9f2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1c9f4:	f7f2 fdbc 	bl	f570 <free>
   1c9f8:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1c9fa:	f7f2 fdb9 	bl	f570 <free>
   1c9fe:	2300      	movs	r3, #0
   1ca00:	6023      	str	r3, [r4, #0]
   1ca02:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1ca06:	07db      	lsls	r3, r3, #31
   1ca08:	d504      	bpl.n	1ca14 <srkf_dbl_free+0x90>
   1ca0a:	4620      	mov	r0, r4
   1ca0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ca10:	f7f2 bdae 	b.w	f570 <free>
   1ca14:	bd10      	pop	{r4, pc}
   1ca16:	bf00      	nop
   1ca18:	00023ab1 	.word	0x00023ab1
   1ca1c:	00023aa3 	.word	0x00023aa3
   1ca20:	00023b6e 	.word	0x00023b6e

0001ca24 <trisolve_dbl>:
   1ca24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca28:	b08b      	sub	sp, #44	; 0x2c
   1ca2a:	4699      	mov	r9, r3
   1ca2c:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
   1ca30:	9004      	str	r0, [sp, #16]
   1ca32:	f06f 0307 	mvn.w	r3, #7
   1ca36:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
   1ca3a:	fb03 f308 	mul.w	r3, r3, r8
   1ca3e:	b236      	sxth	r6, r6
   1ca40:	9303      	str	r3, [sp, #12]
   1ca42:	e9cd 1208 	strd	r1, r2, [sp, #32]
   1ca46:	fb06 f308 	mul.w	r3, r6, r8
   1ca4a:	9306      	str	r3, [sp, #24]
   1ca4c:	fb09 f306 	mul.w	r3, r9, r6
   1ca50:	9307      	str	r3, [sp, #28]
   1ca52:	f04f 0b00 	mov.w	fp, #0
   1ca56:	fa0f fa8b 	sxth.w	sl, fp
   1ca5a:	45c2      	cmp	sl, r8
   1ca5c:	db02      	blt.n	1ca64 <trisolve_dbl+0x40>
   1ca5e:	b00b      	add	sp, #44	; 0x2c
   1ca60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca64:	9b06      	ldr	r3, [sp, #24]
   1ca66:	4453      	add	r3, sl
   1ca68:	00db      	lsls	r3, r3, #3
   1ca6a:	9305      	str	r3, [sp, #20]
   1ca6c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   1ca70:	189f      	adds	r7, r3, r2
   1ca72:	9b07      	ldr	r3, [sp, #28]
   1ca74:	9301      	str	r3, [sp, #4]
   1ca76:	2300      	movs	r3, #0
   1ca78:	4635      	mov	r5, r6
   1ca7a:	9302      	str	r3, [sp, #8]
   1ca7c:	2d00      	cmp	r5, #0
   1ca7e:	da02      	bge.n	1ca86 <trisolve_dbl+0x62>
   1ca80:	f10b 0b01 	add.w	fp, fp, #1
   1ca84:	e7e7      	b.n	1ca56 <trisolve_dbl+0x32>
   1ca86:	9a05      	ldr	r2, [sp, #20]
   1ca88:	9b02      	ldr	r3, [sp, #8]
   1ca8a:	4413      	add	r3, r2
   1ca8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ca8e:	4413      	add	r3, r2
   1ca90:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ca94:	e9c7 2300 	strd	r2, r3, [r7]
   1ca98:	b2ad      	uxth	r5, r5
   1ca9a:	1c6c      	adds	r4, r5, #1
   1ca9c:	b224      	sxth	r4, r4
   1ca9e:	454c      	cmp	r4, r9
   1caa0:	db0c      	blt.n	1cabc <trisolve_dbl+0x98>
   1caa2:	9b03      	ldr	r3, [sp, #12]
   1caa4:	441f      	add	r7, r3
   1caa6:	9b01      	ldr	r3, [sp, #4]
   1caa8:	eba3 0309 	sub.w	r3, r3, r9
   1caac:	9301      	str	r3, [sp, #4]
   1caae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1cab2:	3d01      	subs	r5, #1
   1cab4:	4413      	add	r3, r2
   1cab6:	9302      	str	r3, [sp, #8]
   1cab8:	b22d      	sxth	r5, r5
   1caba:	e7df      	b.n	1ca7c <trisolve_dbl+0x58>
   1cabc:	9b04      	ldr	r3, [sp, #16]
   1cabe:	9a08      	ldr	r2, [sp, #32]
   1cac0:	fb08 a104 	mla	r1, r8, r4, sl
   1cac4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1cac8:	9b01      	ldr	r3, [sp, #4]
   1caca:	4423      	add	r3, r4
   1cacc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1cad0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cad4:	e9d1 0100 	ldrd	r0, r1, [r1]
   1cad8:	f003 f9f2 	bl	1fec0 <__aeabi_dmul>
   1cadc:	4602      	mov	r2, r0
   1cade:	460b      	mov	r3, r1
   1cae0:	e9d7 0100 	ldrd	r0, r1, [r7]
   1cae4:	f003 f834 	bl	1fb50 <__aeabi_dsub>
   1cae8:	3401      	adds	r4, #1
   1caea:	e9c7 0100 	strd	r0, r1, [r7]
   1caee:	e7d5      	b.n	1ca9c <trisolve_dbl+0x78>

0001caf0 <ud_dbl>:
   1caf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1caf4:	ed2d 8b02 	vpush	{d8}
   1caf8:	fb03 f503 	mul.w	r5, r3, r3
   1cafc:	b091      	sub	sp, #68	; 0x44
   1cafe:	460f      	mov	r7, r1
   1cb00:	00ed      	lsls	r5, r5, #3
   1cb02:	4606      	mov	r6, r0
   1cb04:	9209      	str	r2, [sp, #36]	; 0x24
   1cb06:	2100      	movs	r1, #0
   1cb08:	462a      	mov	r2, r5
   1cb0a:	4638      	mov	r0, r7
   1cb0c:	461c      	mov	r4, r3
   1cb0e:	f7f2 fd76 	bl	f5fe <memset>
   1cb12:	462a      	mov	r2, r5
   1cb14:	2100      	movs	r1, #0
   1cb16:	9809      	ldr	r0, [sp, #36]	; 0x24
   1cb18:	f7f2 fd71 	bl	f5fe <memset>
   1cb1c:	43e3      	mvns	r3, r4
   1cb1e:	00db      	lsls	r3, r3, #3
   1cb20:	1e65      	subs	r5, r4, #1
   1cb22:	b22d      	sxth	r5, r5
   1cb24:	9306      	str	r3, [sp, #24]
   1cb26:	1c63      	adds	r3, r4, #1
   1cb28:	930d      	str	r3, [sp, #52]	; 0x34
   1cb2a:	436b      	muls	r3, r5
   1cb2c:	00da      	lsls	r2, r3, #3
   1cb2e:	00d9      	lsls	r1, r3, #3
   1cb30:	3301      	adds	r3, #1
   1cb32:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   1cb36:	9308      	str	r3, [sp, #32]
   1cb38:	f06f 0307 	mvn.w	r3, #7
   1cb3c:	4363      	muls	r3, r4
   1cb3e:	920b      	str	r2, [sp, #44]	; 0x2c
   1cb40:	ed9f 8b51 	vldr	d8, [pc, #324]	; 1cc88 <ud_dbl+0x198>
   1cb44:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cb46:	930c      	str	r3, [sp, #48]	; 0x30
   1cb48:	fb05 fa04 	mul.w	sl, r5, r4
   1cb4c:	187b      	adds	r3, r7, r1
   1cb4e:	f04f 0900 	mov.w	r9, #0
   1cb52:	eb02 0b01 	add.w	fp, r2, r1
   1cb56:	f8cd a01c 	str.w	sl, [sp, #28]
   1cb5a:	930f      	str	r3, [sp, #60]	; 0x3c
   1cb5c:	f8cd 9010 	str.w	r9, [sp, #16]
   1cb60:	2d00      	cmp	r5, #0
   1cb62:	da0d      	bge.n	1cb80 <ud_dbl+0x90>
   1cb64:	2000      	movs	r0, #0
   1cb66:	f04f 0800 	mov.w	r8, #0
   1cb6a:	f04f 0900 	mov.w	r9, #0
   1cb6e:	b201      	sxth	r1, r0
   1cb70:	428c      	cmp	r4, r1
   1cb72:	dd7f      	ble.n	1cc74 <ud_dbl+0x184>
   1cb74:	fb04 f301 	mul.w	r3, r4, r1
   1cb78:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1cb7c:	2200      	movs	r2, #0
   1cb7e:	e074      	b.n	1cc6a <ud_dbl+0x17a>
   1cb80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1cb82:	f8cd a014 	str.w	sl, [sp, #20]
   1cb86:	444b      	add	r3, r9
   1cb88:	9303      	str	r3, [sp, #12]
   1cb8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1cb8c:	444b      	add	r3, r9
   1cb8e:	18fb      	adds	r3, r7, r3
   1cb90:	930e      	str	r3, [sp, #56]	; 0x38
   1cb92:	9b08      	ldr	r3, [sp, #32]
   1cb94:	930a      	str	r3, [sp, #40]	; 0x28
   1cb96:	46a8      	mov	r8, r5
   1cb98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cb9a:	ed33 7b02 	vldmdb	r3!, {d7}
   1cb9e:	ed8d 7b00 	vstr	d7, [sp]
   1cba2:	930a      	str	r3, [sp, #40]	; 0x28
   1cba4:	462e      	mov	r6, r5
   1cba6:	42b4      	cmp	r4, r6
   1cba8:	dc30      	bgt.n	1cc0c <ud_dbl+0x11c>
   1cbaa:	4545      	cmp	r5, r8
   1cbac:	d150      	bne.n	1cc50 <ud_dbl+0x160>
   1cbae:	4b38      	ldr	r3, [pc, #224]	; (1cc90 <ud_dbl+0x1a0>)
   1cbb0:	2200      	movs	r2, #0
   1cbb2:	e9dd 0100 	ldrd	r0, r1, [sp]
   1cbb6:	f003 fbff 	bl	203b8 <__aeabi_dcmple>
   1cbba:	2800      	cmp	r0, #0
   1cbbc:	9b04      	ldr	r3, [sp, #16]
   1cbbe:	ed9d 7b00 	vldr	d7, [sp]
   1cbc2:	bf18      	it	ne
   1cbc4:	2301      	movne	r3, #1
   1cbc6:	9304      	str	r3, [sp, #16]
   1cbc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cbca:	ed8b 7b00 	vstr	d7, [fp]
   1cbce:	ed83 8b00 	vstr	d8, [r3]
   1cbd2:	9b03      	ldr	r3, [sp, #12]
   1cbd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1cbd6:	4413      	add	r3, r2
   1cbd8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1cbdc:	9303      	str	r3, [sp, #12]
   1cbde:	9b05      	ldr	r3, [sp, #20]
   1cbe0:	fa0f f888 	sxth.w	r8, r8
   1cbe4:	1b1b      	subs	r3, r3, r4
   1cbe6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1cbea:	9305      	str	r3, [sp, #20]
   1cbec:	d1d4      	bne.n	1cb98 <ud_dbl+0xa8>
   1cbee:	9b06      	ldr	r3, [sp, #24]
   1cbf0:	9a06      	ldr	r2, [sp, #24]
   1cbf2:	449b      	add	fp, r3
   1cbf4:	9b08      	ldr	r3, [sp, #32]
   1cbf6:	4413      	add	r3, r2
   1cbf8:	9308      	str	r3, [sp, #32]
   1cbfa:	9b07      	ldr	r3, [sp, #28]
   1cbfc:	3d01      	subs	r5, #1
   1cbfe:	1b1b      	subs	r3, r3, r4
   1cc00:	b22d      	sxth	r5, r5
   1cc02:	ebaa 0a04 	sub.w	sl, sl, r4
   1cc06:	9307      	str	r3, [sp, #28]
   1cc08:	4491      	add	r9, r2
   1cc0a:	e7a9      	b.n	1cb60 <ud_dbl+0x70>
   1cc0c:	9b05      	ldr	r3, [sp, #20]
   1cc0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cc10:	1999      	adds	r1, r3, r6
   1cc12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1cc14:	4373      	muls	r3, r6
   1cc16:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   1cc1a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1cc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cc22:	e9d1 0100 	ldrd	r0, r1, [r1]
   1cc26:	f003 f94b 	bl	1fec0 <__aeabi_dmul>
   1cc2a:	9b07      	ldr	r3, [sp, #28]
   1cc2c:	4433      	add	r3, r6
   1cc2e:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1cc32:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cc36:	f003 f943 	bl	1fec0 <__aeabi_dmul>
   1cc3a:	4602      	mov	r2, r0
   1cc3c:	460b      	mov	r3, r1
   1cc3e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1cc42:	f002 ff85 	bl	1fb50 <__aeabi_dsub>
   1cc46:	3601      	adds	r6, #1
   1cc48:	e9cd 0100 	strd	r0, r1, [sp]
   1cc4c:	b236      	sxth	r6, r6
   1cc4e:	e7aa      	b.n	1cba6 <ud_dbl+0xb6>
   1cc50:	e9db 2300 	ldrd	r2, r3, [fp]
   1cc54:	e9dd 0100 	ldrd	r0, r1, [sp]
   1cc58:	f003 fa5c 	bl	20114 <__aeabi_ddiv>
   1cc5c:	9b03      	ldr	r3, [sp, #12]
   1cc5e:	e9c3 0100 	strd	r0, r1, [r3]
   1cc62:	e7b6      	b.n	1cbd2 <ud_dbl+0xe2>
   1cc64:	e8e3 8902 	strd	r8, r9, [r3], #8
   1cc68:	3201      	adds	r2, #1
   1cc6a:	b215      	sxth	r5, r2
   1cc6c:	42a9      	cmp	r1, r5
   1cc6e:	dcf9      	bgt.n	1cc64 <ud_dbl+0x174>
   1cc70:	3001      	adds	r0, #1
   1cc72:	e77c      	b.n	1cb6e <ud_dbl+0x7e>
   1cc74:	9b04      	ldr	r3, [sp, #16]
   1cc76:	f04f 0000 	mov.w	r0, #0
   1cc7a:	f363 0000 	bfi	r0, r3, #0, #1
   1cc7e:	b011      	add	sp, #68	; 0x44
   1cc80:	ecbd 8b02 	vpop	{d8}
   1cc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc88:	00000000 	.word	0x00000000
   1cc8c:	3ff00000 	.word	0x3ff00000
   1cc90:	3cb00000 	.word	0x3cb00000
   1cc94:	00000000 	.word	0x00000000

0001cc98 <thornton_dbl>:
   1cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc9c:	ed2d 8b02 	vpush	{d8}
   1cca0:	b09d      	sub	sp, #116	; 0x74
   1cca2:	af00      	add	r7, sp, #0
   1cca4:	f8b7 b0a8 	ldrh.w	fp, [r7, #168]	; 0xa8
   1cca8:	603b      	str	r3, [r7, #0]
   1ccaa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   1ccae:	6578      	str	r0, [r7, #84]	; 0x54
   1ccb0:	667b      	str	r3, [r7, #100]	; 0x64
   1ccb2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   1ccb6:	6279      	str	r1, [r7, #36]	; 0x24
   1ccb8:	2300      	movs	r3, #0
   1ccba:	637a      	str	r2, [r7, #52]	; 0x34
   1ccbc:	4619      	mov	r1, r3
   1ccbe:	b28a      	uxth	r2, r1
   1ccc0:	4593      	cmp	fp, r2
   1ccc2:	d856      	bhi.n	1cd72 <thornton_dbl+0xda>
   1ccc4:	f10b 34ff 	add.w	r4, fp, #4294967295	; 0xffffffff
   1ccc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ccca:	b224      	sxth	r4, r4
   1cccc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1ccd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   1ccd2:	65fc      	str	r4, [r7, #92]	; 0x5c
   1ccd4:	2300      	movs	r3, #0
   1ccd6:	65bb      	str	r3, [r7, #88]	; 0x58
   1ccd8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
   1ccdc:	455b      	cmp	r3, fp
   1ccde:	db4e      	blt.n	1cd7e <thornton_dbl+0xe6>
   1cce0:	fb0b f304 	mul.w	r3, fp, r4
   1cce4:	643b      	str	r3, [r7, #64]	; 0x40
   1cce6:	ea6f 030b 	mvn.w	r3, fp
   1ccea:	00db      	lsls	r3, r3, #3
   1ccec:	60bb      	str	r3, [r7, #8]
   1ccee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1ccf2:	f10b 0301 	add.w	r3, fp, #1
   1ccf6:	63bb      	str	r3, [r7, #56]	; 0x38
   1ccf8:	4363      	muls	r3, r4
   1ccfa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1ccfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   1cd00:	f06f 0307 	mvn.w	r3, #7
   1cd04:	fb03 f30b 	mul.w	r3, r3, fp
   1cd08:	607b      	str	r3, [r7, #4]
   1cd0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1cd0c:	4363      	muls	r3, r4
   1cd0e:	65bb      	str	r3, [r7, #88]	; 0x58
   1cd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1cd12:	00db      	lsls	r3, r3, #3
   1cd14:	62bb      	str	r3, [r7, #40]	; 0x28
   1cd16:	2300      	movs	r3, #0
   1cd18:	64fb      	str	r3, [r7, #76]	; 0x4c
   1cd1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1cd1c:	330e      	adds	r3, #14
   1cd1e:	08db      	lsrs	r3, r3, #3
   1cd20:	ed9f 8bb1 	vldr	d8, [pc, #708]	; 1cfe8 <thornton_dbl+0x350>
   1cd24:	00db      	lsls	r3, r3, #3
   1cd26:	653b      	str	r3, [r7, #80]	; 0x50
   1cd28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1cd2a:	041b      	lsls	r3, r3, #16
   1cd2c:	d56b      	bpl.n	1ce06 <thornton_dbl+0x16e>
   1cd2e:	ed9f 6bae 	vldr	d6, [pc, #696]	; 1cfe8 <thornton_dbl+0x350>
   1cd32:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 1cff4 <thornton_dbl+0x35c>
   1cd36:	2100      	movs	r1, #0
   1cd38:	f04f 0800 	mov.w	r8, #0
   1cd3c:	b20a      	sxth	r2, r1
   1cd3e:	455a      	cmp	r2, fp
   1cd40:	f2c0 81a3 	blt.w	1d08a <thornton_dbl+0x3f2>
   1cd44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1cd46:	f04f 0000 	mov.w	r0, #0
   1cd4a:	f363 0000 	bfi	r0, r3, #0, #1
   1cd4e:	3774      	adds	r7, #116	; 0x74
   1cd50:	46bd      	mov	sp, r7
   1cd52:	ecbd 8b02 	vpop	{d8}
   1cd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd5a:	e8f5 8902 	ldrd	r8, r9, [r5], #8
   1cd5e:	e8e4 8902 	strd	r8, r9, [r4], #8
   1cd62:	3201      	adds	r2, #1
   1cd64:	b296      	uxth	r6, r2
   1cd66:	45b3      	cmp	fp, r6
   1cd68:	d8f7      	bhi.n	1cd5a <thornton_dbl+0xc2>
   1cd6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1cd6c:	3101      	adds	r1, #1
   1cd6e:	4413      	add	r3, r2
   1cd70:	e7a5      	b.n	1ccbe <thornton_dbl+0x26>
   1cd72:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1cd76:	18c5      	adds	r5, r0, r3
   1cd78:	18d4      	adds	r4, r2, r3
   1cd7a:	2200      	movs	r2, #0
   1cd7c:	e7f2      	b.n	1cd64 <thornton_dbl+0xcc>
   1cd7e:	fb0b f303 	mul.w	r3, fp, r3
   1cd82:	191d      	adds	r5, r3, r4
   1cd84:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1cd88:	3501      	adds	r5, #1
   1cd8a:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
   1cd8e:	663a      	str	r2, [r7, #96]	; 0x60
   1cd90:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1cd94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1cd98:	653b      	str	r3, [r7, #80]	; 0x50
   1cd9a:	4626      	mov	r6, r4
   1cd9c:	f04f 0800 	mov.w	r8, #0
   1cda0:	2e00      	cmp	r6, #0
   1cda2:	da02      	bge.n	1cdaa <thornton_dbl+0x112>
   1cda4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1cda6:	3301      	adds	r3, #1
   1cda8:	e795      	b.n	1ccd6 <thornton_dbl+0x3e>
   1cdaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1cdac:	ed13 7b02 	vldr	d7, [r3, #-8]
   1cdb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1cdb2:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
   1cdb6:	eb08 0a03 	add.w	sl, r8, r3
   1cdba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1cdbc:	f04f 0900 	mov.w	r9, #0
   1cdc0:	461d      	mov	r5, r3
   1cdc2:	fa0f f389 	sxth.w	r3, r9
   1cdc6:	429e      	cmp	r6, r3
   1cdc8:	dc0a      	bgt.n	1cde0 <thornton_dbl+0x148>
   1cdca:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
   1cdce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1cdd0:	ed23 7b02 	vstmdb	r3!, {d7}
   1cdd4:	3e01      	subs	r6, #1
   1cdd6:	663b      	str	r3, [r7, #96]	; 0x60
   1cdd8:	b236      	sxth	r6, r6
   1cdda:	f1a8 0808 	sub.w	r8, r8, #8
   1cdde:	e7df      	b.n	1cda0 <thornton_dbl+0x108>
   1cde0:	e9da 2300 	ldrd	r2, r3, [sl]
   1cde4:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   1cde8:	f003 f86a 	bl	1fec0 <__aeabi_dmul>
   1cdec:	460b      	mov	r3, r1
   1cdee:	4602      	mov	r2, r0
   1cdf0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   1cdf4:	f002 feae 	bl	1fb54 <__adddf3>
   1cdf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1cdfa:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   1cdfe:	f109 0901 	add.w	r9, r9, #1
   1ce02:	449a      	add	sl, r3
   1ce04:	e7dd      	b.n	1cdc2 <thornton_dbl+0x12a>
   1ce06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ce08:	f8c7 d020 	str.w	sp, [r7, #32]
   1ce0c:	ebad 0d03 	sub.w	sp, sp, r3
   1ce10:	f8c7 d048 	str.w	sp, [r7, #72]	; 0x48
   1ce14:	ebad 0d03 	sub.w	sp, sp, r3
   1ce18:	f8c7 d044 	str.w	sp, [r7, #68]	; 0x44
   1ce1c:	ebad 0d03 	sub.w	sp, sp, r3
   1ce20:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   1ce24:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1ce28:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1ce2a:	6a7d      	ldr	r5, [r7, #36]	; 0x24
   1ce2c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
   1ce30:	ebad 0d03 	sub.w	sp, sp, r3
   1ce34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1ce36:	f8c7 d02c 	str.w	sp, [r7, #44]	; 0x2c
   1ce3a:	4413      	add	r3, r2
   1ce3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1ce3e:	663b      	str	r3, [r7, #96]	; 0x60
   1ce40:	ed87 8b1a 	vstr	d8, [r7, #104]	; 0x68
   1ce44:	4623      	mov	r3, r4
   1ce46:	4413      	add	r3, r2
   1ce48:	6e3e      	ldr	r6, [r7, #96]	; 0x60
   1ce4a:	60fb      	str	r3, [r7, #12]
   1ce4c:	68fb      	ldr	r3, [r7, #12]
   1ce4e:	429c      	cmp	r4, r3
   1ce50:	d137      	bne.n	1cec2 <thornton_dbl+0x22a>
   1ce52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ce54:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1ce56:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   1ce58:	683d      	ldr	r5, [r7, #0]
   1ce5a:	f8d7 a02c 	ldr.w	sl, [r7, #44]	; 0x2c
   1ce5e:	189e      	adds	r6, r3, r2
   1ce60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1ce62:	4623      	mov	r3, r4
   1ce64:	4413      	add	r3, r2
   1ce66:	60fb      	str	r3, [r7, #12]
   1ce68:	68fb      	ldr	r3, [r7, #12]
   1ce6a:	429c      	cmp	r4, r3
   1ce6c:	d146      	bne.n	1cefc <thornton_dbl+0x264>
   1ce6e:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
   1ce72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ce74:	ec51 0b17 	vmov	r0, r1, d7
   1ce78:	ed83 7b00 	vstr	d7, [r3]
   1ce7c:	2200      	movs	r2, #0
   1ce7e:	4b5c      	ldr	r3, [pc, #368]	; (1cff0 <thornton_dbl+0x358>)
   1ce80:	f003 fa9a 	bl	203b8 <__aeabi_dcmple>
   1ce84:	2800      	cmp	r0, #0
   1ce86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ce88:	495a      	ldr	r1, [pc, #360]	; (1cff4 <thornton_dbl+0x35c>)
   1ce8a:	bf18      	it	ne
   1ce8c:	2301      	movne	r3, #1
   1ce8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   1ce90:	2000      	movs	r0, #0
   1ce92:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   1ce96:	f003 f93d 	bl	20114 <__aeabi_ddiv>
   1ce9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1ce9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1ce9e:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   1cea2:	fa12 fa83 	uxtah	sl, r2, r3
   1cea6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   1ceaa:	2600      	movs	r6, #0
   1ceac:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   1ceb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1ceb2:	4553      	cmp	r3, sl
   1ceb4:	f000 80d7 	beq.w	1d066 <thornton_dbl+0x3ce>
   1ceb8:	f04f 0800 	mov.w	r8, #0
   1cebc:	ec55 4b18 	vmov	r4, r5, d8
   1cec0:	e04f      	b.n	1cf62 <thornton_dbl+0x2ca>
   1cec2:	e8f6 8902 	ldrd	r8, r9, [r6], #8
   1cec6:	e9d5 2300 	ldrd	r2, r3, [r5]
   1ceca:	e8e4 8902 	strd	r8, r9, [r4], #8
   1cece:	4640      	mov	r0, r8
   1ced0:	4649      	mov	r1, r9
   1ced2:	f002 fff5 	bl	1fec0 <__aeabi_dmul>
   1ced6:	4602      	mov	r2, r0
   1ced8:	460b      	mov	r3, r1
   1ceda:	e8ea 2302 	strd	r2, r3, [sl], #8
   1cede:	4640      	mov	r0, r8
   1cee0:	4649      	mov	r1, r9
   1cee2:	f002 ffed 	bl	1fec0 <__aeabi_dmul>
   1cee6:	460b      	mov	r3, r1
   1cee8:	4602      	mov	r2, r0
   1ceea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   1ceee:	f002 fe31 	bl	1fb54 <__adddf3>
   1cef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cef4:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   1cef8:	441d      	add	r5, r3
   1cefa:	e7a7      	b.n	1ce4c <thornton_dbl+0x1b4>
   1cefc:	e8f6 8902 	ldrd	r8, r9, [r6], #8
   1cf00:	e9d5 2300 	ldrd	r2, r3, [r5]
   1cf04:	e8e4 8902 	strd	r8, r9, [r4], #8
   1cf08:	4640      	mov	r0, r8
   1cf0a:	4649      	mov	r1, r9
   1cf0c:	f002 ffd8 	bl	1fec0 <__aeabi_dmul>
   1cf10:	4602      	mov	r2, r0
   1cf12:	460b      	mov	r3, r1
   1cf14:	e8ea 2302 	strd	r2, r3, [sl], #8
   1cf18:	4640      	mov	r0, r8
   1cf1a:	4649      	mov	r1, r9
   1cf1c:	f002 ffd0 	bl	1fec0 <__aeabi_dmul>
   1cf20:	460b      	mov	r3, r1
   1cf22:	4602      	mov	r2, r0
   1cf24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   1cf28:	f002 fe14 	bl	1fb54 <__adddf3>
   1cf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cf2e:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   1cf32:	441d      	add	r5, r3
   1cf34:	e798      	b.n	1ce68 <thornton_dbl+0x1d0>
   1cf36:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1cf3a:	18f1      	adds	r1, r6, r3
   1cf3c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   1cf40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1cf42:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1cf46:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cf4a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1cf4e:	f002 ffb7 	bl	1fec0 <__aeabi_dmul>
   1cf52:	4602      	mov	r2, r0
   1cf54:	460b      	mov	r3, r1
   1cf56:	4620      	mov	r0, r4
   1cf58:	4629      	mov	r1, r5
   1cf5a:	f002 fdfb 	bl	1fb54 <__adddf3>
   1cf5e:	4604      	mov	r4, r0
   1cf60:	460d      	mov	r5, r1
   1cf62:	fa0f f388 	sxth.w	r3, r8
   1cf66:	455b      	cmp	r3, fp
   1cf68:	f108 0801 	add.w	r8, r8, #1
   1cf6c:	dbe3      	blt.n	1cf36 <thornton_dbl+0x29e>
   1cf6e:	f04f 0800 	mov.w	r8, #0
   1cf72:	fa0f f388 	sxth.w	r3, r8
   1cf76:	455b      	cmp	r3, fp
   1cf78:	f108 0801 	add.w	r8, r8, #1
   1cf7c:	db1d      	blt.n	1cfba <thornton_dbl+0x322>
   1cf7e:	4620      	mov	r0, r4
   1cf80:	4629      	mov	r1, r5
   1cf82:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   1cf86:	f002 ff9b 	bl	1fec0 <__aeabi_dmul>
   1cf8a:	f04f 0900 	mov.w	r9, #0
   1cf8e:	4604      	mov	r4, r0
   1cf90:	460d      	mov	r5, r1
   1cf92:	fa0f f389 	sxth.w	r3, r9
   1cf96:	455b      	cmp	r3, fp
   1cf98:	f109 0901 	add.w	r9, r9, #1
   1cf9c:	db2c      	blt.n	1cff8 <thornton_dbl+0x360>
   1cf9e:	f04f 0900 	mov.w	r9, #0
   1cfa2:	fa0f f389 	sxth.w	r3, r9
   1cfa6:	455b      	cmp	r3, fp
   1cfa8:	f109 0901 	add.w	r9, r9, #1
   1cfac:	db40      	blt.n	1d030 <thornton_dbl+0x398>
   1cfae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1cfb0:	e8e3 4502 	strd	r4, r5, [r3], #8
   1cfb4:	445e      	add	r6, fp
   1cfb6:	663b      	str	r3, [r7, #96]	; 0x60
   1cfb8:	e77a      	b.n	1ceb0 <thornton_dbl+0x218>
   1cfba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1cfbc:	18f1      	adds	r1, r6, r3
   1cfbe:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   1cfc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1cfc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1cfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cfcc:	e9d1 0100 	ldrd	r0, r1, [r1]
   1cfd0:	f002 ff76 	bl	1fec0 <__aeabi_dmul>
   1cfd4:	4602      	mov	r2, r0
   1cfd6:	460b      	mov	r3, r1
   1cfd8:	4620      	mov	r0, r4
   1cfda:	4629      	mov	r1, r5
   1cfdc:	f002 fdba 	bl	1fb54 <__adddf3>
   1cfe0:	4604      	mov	r4, r0
   1cfe2:	460d      	mov	r5, r1
   1cfe4:	e7c5      	b.n	1cf72 <thornton_dbl+0x2da>
   1cfe6:	bf00      	nop
	...
   1cff0:	3cb00000 	.word	0x3cb00000
   1cff4:	3ff00000 	.word	0x3ff00000
   1cff8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1cffc:	61bc      	str	r4, [r7, #24]
   1cffe:	eb06 0803 	add.w	r8, r6, r3
   1d002:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   1d006:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1d008:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1d00c:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
   1d010:	61fa      	str	r2, [r7, #28]
   1d012:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   1d016:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d01a:	f002 ff51 	bl	1fec0 <__aeabi_dmul>
   1d01e:	4602      	mov	r2, r0
   1d020:	460b      	mov	r3, r1
   1d022:	e9d8 0100 	ldrd	r0, r1, [r8]
   1d026:	f002 fd95 	bl	1fb54 <__adddf3>
   1d02a:	e9c8 0100 	strd	r0, r1, [r8]
   1d02e:	e7b0      	b.n	1cf92 <thornton_dbl+0x2fa>
   1d030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1d032:	613c      	str	r4, [r7, #16]
   1d034:	eb06 0803 	add.w	r8, r6, r3
   1d038:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   1d03c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1d03e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1d042:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
   1d046:	617a      	str	r2, [r7, #20]
   1d048:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1d04c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d050:	f002 ff36 	bl	1fec0 <__aeabi_dmul>
   1d054:	4602      	mov	r2, r0
   1d056:	460b      	mov	r3, r1
   1d058:	e9d8 0100 	ldrd	r0, r1, [r8]
   1d05c:	f002 fd7a 	bl	1fb54 <__adddf3>
   1d060:	e9c8 0100 	strd	r0, r1, [r8]
   1d064:	e79d      	b.n	1cfa2 <thornton_dbl+0x30a>
   1d066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1d068:	68ba      	ldr	r2, [r7, #8]
   1d06a:	f8d7 d020 	ldr.w	sp, [r7, #32]
   1d06e:	3b01      	subs	r3, #1
   1d070:	65fb      	str	r3, [r7, #92]	; 0x5c
   1d072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1d074:	eba3 030b 	sub.w	r3, r3, fp
   1d078:	643b      	str	r3, [r7, #64]	; 0x40
   1d07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1d07c:	4413      	add	r3, r2
   1d07e:	63fb      	str	r3, [r7, #60]	; 0x3c
   1d080:	687a      	ldr	r2, [r7, #4]
   1d082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1d084:	4413      	add	r3, r2
   1d086:	65bb      	str	r3, [r7, #88]	; 0x58
   1d088:	e64e      	b.n	1cd28 <thornton_dbl+0x90>
   1d08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1d08c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1d090:	4353      	muls	r3, r2
   1d092:	00db      	lsls	r3, r3, #3
   1d094:	4418      	add	r0, r3
   1d096:	e9d0 4500 	ldrd	r4, r5, [r0]
   1d09a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1d09c:	4418      	add	r0, r3
   1d09e:	e9c0 4500 	strd	r4, r5, [r0]
   1d0a2:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1d0a4:	4403      	add	r3, r0
   1d0a6:	e9c3 8900 	strd	r8, r9, [r3]
   1d0aa:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1d0ae:	fb0b f302 	mul.w	r3, fp, r2
   1d0b2:	00db      	lsls	r3, r3, #3
   1d0b4:	18c5      	adds	r5, r0, r3
   1d0b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1d0b8:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
   1d0bc:	4403      	add	r3, r0
   1d0be:	2000      	movs	r0, #0
   1d0c0:	b206      	sxth	r6, r0
   1d0c2:	42b2      	cmp	r2, r6
   1d0c4:	dc01      	bgt.n	1d0ca <thornton_dbl+0x432>
   1d0c6:	3101      	adds	r1, #1
   1d0c8:	e638      	b.n	1cd3c <thornton_dbl+0xa4>
   1d0ca:	ecb5 7b02 	vldmia	r5!, {d7}
   1d0ce:	6e7e      	ldr	r6, [r7, #100]	; 0x64
   1d0d0:	ed84 7b00 	vstr	d7, [r4]
   1d0d4:	3001      	adds	r0, #1
   1d0d6:	eca3 6b02 	vstmia	r3!, {d6}
   1d0da:	4434      	add	r4, r6
   1d0dc:	e7f0      	b.n	1d0c0 <thornton_dbl+0x428>
   1d0de:	bf00      	nop

0001d0e0 <bierman_dbl>:
   1d0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d0e4:	ed2d 8b04 	vpush	{d8-d9}
   1d0e8:	eeb0 8a40 	vmov.f32	s16, s0
   1d0ec:	eef0 8a60 	vmov.f32	s17, s1
   1d0f0:	b095      	sub	sp, #84	; 0x54
   1d0f2:	af00      	add	r7, sp, #0
   1d0f4:	4682      	mov	sl, r0
   1d0f6:	62bb      	str	r3, [r7, #40]	; 0x28
   1d0f8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
   1d0fc:	637b      	str	r3, [r7, #52]	; 0x34
   1d0fe:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1d102:	f10b 030e 	add.w	r3, fp, #14
   1d106:	08db      	lsrs	r3, r3, #3
   1d108:	00db      	lsls	r3, r3, #3
   1d10a:	ebad 0d03 	sub.w	sp, sp, r3
   1d10e:	466c      	mov	r4, sp
   1d110:	6079      	str	r1, [r7, #4]
   1d112:	ebad 0d03 	sub.w	sp, sp, r3
   1d116:	61ba      	str	r2, [r7, #24]
   1d118:	2000      	movs	r0, #0
   1d11a:	ec53 2b11 	vmov	r2, r3, d1
   1d11e:	4970      	ldr	r1, [pc, #448]	; (1d2e0 <bierman_dbl+0x200>)
   1d120:	f8c7 d044 	str.w	sp, [r7, #68]	; 0x44
   1d124:	ed87 1b0e 	vstr	d1, [r7, #56]	; 0x38
   1d128:	f002 fff4 	bl	20114 <__aeabi_ddiv>
   1d12c:	ed9f 9b6a 	vldr	d9, [pc, #424]	; 1d2d8 <bierman_dbl+0x1f8>
   1d130:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
   1d134:	eb0a 030b 	add.w	r3, sl, fp
   1d138:	627c      	str	r4, [r7, #36]	; 0x24
   1d13a:	643b      	str	r3, [r7, #64]	; 0x40
   1d13c:	4626      	mov	r6, r4
   1d13e:	2500      	movs	r5, #0
   1d140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1d142:	b2ab      	uxth	r3, r5
   1d144:	429a      	cmp	r2, r3
   1d146:	d820      	bhi.n	1d18a <bierman_dbl+0xaa>
   1d148:	f10b 0308 	add.w	r3, fp, #8
   1d14c:	61fb      	str	r3, [r7, #28]
   1d14e:	f8d7 a028 	ldr.w	sl, [r7, #40]	; 0x28
   1d152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d154:	633b      	str	r3, [r7, #48]	; 0x30
   1d156:	eb04 060b 	add.w	r6, r4, fp
   1d15a:	461d      	mov	r5, r3
   1d15c:	46d0      	mov	r8, sl
   1d15e:	42b4      	cmp	r4, r6
   1d160:	d12e      	bne.n	1d1c0 <bierman_dbl+0xe0>
   1d162:	2300      	movs	r3, #0
   1d164:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   1d166:	643b      	str	r3, [r7, #64]	; 0x40
   1d168:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   1d16c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1d16e:	429a      	cmp	r2, r3
   1d170:	d831      	bhi.n	1d1d6 <bierman_dbl+0xf6>
   1d172:	687e      	ldr	r6, [r7, #4]
   1d174:	eb06 0a0b 	add.w	sl, r6, fp
   1d178:	4556      	cmp	r6, sl
   1d17a:	f040 8095 	bne.w	1d2a8 <bierman_dbl+0x1c8>
   1d17e:	3754      	adds	r7, #84	; 0x54
   1d180:	46bd      	mov	sp, r7
   1d182:	ecbd 8b04 	vpop	{d8-d9}
   1d186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d18a:	69bb      	ldr	r3, [r7, #24]
   1d18c:	eca6 9b02 	vstmia	r6!, {d9}
   1d190:	eb03 09c5 	add.w	r9, r3, r5, lsl #3
   1d194:	46d0      	mov	r8, sl
   1d196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1d198:	4598      	cmp	r8, r3
   1d19a:	d101      	bne.n	1d1a0 <bierman_dbl+0xc0>
   1d19c:	3501      	adds	r5, #1
   1d19e:	e7cf      	b.n	1d140 <bierman_dbl+0x60>
   1d1a0:	e9d9 2300 	ldrd	r2, r3, [r9]
   1d1a4:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   1d1a8:	f002 fe8a 	bl	1fec0 <__aeabi_dmul>
   1d1ac:	4602      	mov	r2, r0
   1d1ae:	460b      	mov	r3, r1
   1d1b0:	e956 0102 	ldrd	r0, r1, [r6, #-8]
   1d1b4:	f002 fcce 	bl	1fb54 <__adddf3>
   1d1b8:	44d9      	add	r9, fp
   1d1ba:	e946 0102 	strd	r0, r1, [r6, #-8]
   1d1be:	e7ea      	b.n	1d196 <bierman_dbl+0xb6>
   1d1c0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1d1c4:	e9d8 0100 	ldrd	r0, r1, [r8]
   1d1c8:	f002 fe7a 	bl	1fec0 <__aeabi_dmul>
   1d1cc:	69fb      	ldr	r3, [r7, #28]
   1d1ce:	e8e5 0102 	strd	r0, r1, [r5], #8
   1d1d2:	4498      	add	r8, r3
   1d1d4:	e7c3      	b.n	1d15e <bierman_dbl+0x7e>
   1d1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d1d8:	e8f3 8902 	ldrd	r8, r9, [r3], #8
   1d1dc:	627b      	str	r3, [r7, #36]	; 0x24
   1d1de:	f104 0308 	add.w	r3, r4, #8
   1d1e2:	623b      	str	r3, [r7, #32]
   1d1e4:	4640      	mov	r0, r8
   1d1e6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d1ea:	4649      	mov	r1, r9
   1d1ec:	f002 fe68 	bl	1fec0 <__aeabi_dmul>
   1d1f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   1d1f4:	f002 fcae 	bl	1fb54 <__adddf3>
   1d1f8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   1d1fc:	617b      	str	r3, [r7, #20]
   1d1fe:	f8c7 8010 	str.w	r8, [r7, #16]
   1d202:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
   1d206:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
   1d20a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1d20e:	f002 fe57 	bl	1fec0 <__aeabi_dmul>
   1d212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   1d216:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1d21a:	2000      	movs	r0, #0
   1d21c:	4930      	ldr	r1, [pc, #192]	; (1d2e0 <bierman_dbl+0x200>)
   1d21e:	f002 ff79 	bl	20114 <__aeabi_ddiv>
   1d222:	4602      	mov	r2, r0
   1d224:	460b      	mov	r3, r1
   1d226:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
   1d22a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   1d22e:	f002 fe47 	bl	1fec0 <__aeabi_dmul>
   1d232:	4602      	mov	r2, r0
   1d234:	460b      	mov	r3, r1
   1d236:	e9da 0100 	ldrd	r0, r1, [sl]
   1d23a:	f002 fe41 	bl	1fec0 <__aeabi_dmul>
   1d23e:	69bb      	ldr	r3, [r7, #24]
   1d240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1d242:	6c7d      	ldr	r5, [r7, #68]	; 0x44
   1d244:	e9ca 0100 	strd	r0, r1, [sl]
   1d248:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
   1d24c:	42a5      	cmp	r5, r4
   1d24e:	d10a      	bne.n	1d266 <bierman_dbl+0x186>
   1d250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1d252:	6a3c      	ldr	r4, [r7, #32]
   1d254:	3301      	adds	r3, #1
   1d256:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
   1d25a:	643b      	str	r3, [r7, #64]	; 0x40
   1d25c:	69fb      	ldr	r3, [r7, #28]
   1d25e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
   1d262:	449a      	add	sl, r3
   1d264:	e780      	b.n	1d168 <bierman_dbl+0x88>
   1d266:	e9d5 8900 	ldrd	r8, r9, [r5]
   1d26a:	ed96 7b00 	vldr	d7, [r6]
   1d26e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1d272:	4640      	mov	r0, r8
   1d274:	4649      	mov	r1, r9
   1d276:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
   1d27a:	f002 fe21 	bl	1fec0 <__aeabi_dmul>
   1d27e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   1d282:	f002 fc67 	bl	1fb54 <__adddf3>
   1d286:	6a3b      	ldr	r3, [r7, #32]
   1d288:	e9c6 0100 	strd	r0, r1, [r6]
   1d28c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1d290:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   1d294:	f002 fe14 	bl	1fec0 <__aeabi_dmul>
   1d298:	4642      	mov	r2, r8
   1d29a:	464b      	mov	r3, r9
   1d29c:	f002 fc5a 	bl	1fb54 <__adddf3>
   1d2a0:	445e      	add	r6, fp
   1d2a2:	e8e5 0102 	strd	r0, r1, [r5], #8
   1d2a6:	e7d1      	b.n	1d24c <bierman_dbl+0x16c>
   1d2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d2aa:	e8f3 8902 	ldrd	r8, r9, [r3], #8
   1d2ae:	e9d6 4500 	ldrd	r4, r5, [r6]
   1d2b2:	633b      	str	r3, [r7, #48]	; 0x30
   1d2b4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
   1d2b8:	ec53 2b18 	vmov	r2, r3, d8
   1d2bc:	f002 fe00 	bl	1fec0 <__aeabi_dmul>
   1d2c0:	4642      	mov	r2, r8
   1d2c2:	464b      	mov	r3, r9
   1d2c4:	f002 fdfc 	bl	1fec0 <__aeabi_dmul>
   1d2c8:	4622      	mov	r2, r4
   1d2ca:	462b      	mov	r3, r5
   1d2cc:	f002 fc42 	bl	1fb54 <__adddf3>
   1d2d0:	e8e6 0102 	strd	r0, r1, [r6], #8
   1d2d4:	e750      	b.n	1d178 <bierman_dbl+0x98>
   1d2d6:	bf00      	nop
	...
   1d2e0:	3ff00000 	.word	0x3ff00000

0001d2e4 <rx_timeout_cb>:
 *
 * @return true on sucess
 */
static bool
rx_timeout_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1d2e4:	b570      	push	{r4, r5, r6, lr}
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   1d2e6:	684e      	ldr	r6, [r1, #4]
   1d2e8:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
    if(dpl_sem_get_count(&nrng->sem) == 1)
   1d2ec:	2b01      	cmp	r3, #1
{
   1d2ee:	4605      	mov	r5, r0
    if(dpl_sem_get_count(&nrng->sem) == 1)
   1d2f0:	d01c      	beq.n	1d32c <rx_timeout_cb+0x48>
        return false;

    if(dpl_sem_get_count(&nrng->sem) == 0){
   1d2f2:	b10b      	cbz	r3, 1d2f8 <rx_timeout_cb+0x14>
            }
        }
        dpl_error_t err = dpl_sem_release(&nrng->sem);
        assert(err == DPL_OK);
    }
    return true;
   1d2f4:	2001      	movs	r0, #1
}
   1d2f6:	bd70      	pop	{r4, r5, r6, pc}
        SS_STATS_INC(rx_timeout);
   1d2f8:	4a0d      	ldr	r2, [pc, #52]	; (1d330 <rx_timeout_cb+0x4c>)
        if(!(SLIST_EMPTY(&inst->interface_cbs))){
   1d2fa:	f8d0 4530 	ldr.w	r4, [r0, #1328]	; 0x530
        SS_STATS_INC(rx_timeout);
   1d2fe:	6993      	ldr	r3, [r2, #24]
   1d300:	3301      	adds	r3, #1
   1d302:	6193      	str	r3, [r2, #24]
        if(!(SLIST_EMPTY(&inst->interface_cbs))){
   1d304:	b134      	cbz	r4, 1d314 <rx_timeout_cb+0x30>
            if (cbs!=NULL && cbs->complete_cb)
   1d306:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d308:	b113      	cbz	r3, 1d310 <rx_timeout_cb+0x2c>
                if(cbs->complete_cb(inst, cbs)) continue;
   1d30a:	4621      	mov	r1, r4
   1d30c:	4628      	mov	r0, r5
   1d30e:	4798      	blx	r3
            SLIST_FOREACH(cbs, &inst->interface_cbs, next){
   1d310:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   1d312:	e7f7      	b.n	1d304 <rx_timeout_cb+0x20>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1d314:	f106 0064 	add.w	r0, r6, #100	; 0x64
   1d318:	f7ec fc8c 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
   1d31c:	2800      	cmp	r0, #0
   1d31e:	d0e9      	beq.n	1d2f4 <rx_timeout_cb+0x10>
   1d320:	2300      	movs	r3, #0
   1d322:	461a      	mov	r2, r3
   1d324:	4619      	mov	r1, r3
   1d326:	4618      	mov	r0, r3
   1d328:	f7eb fde4 	bl	8ef4 <__assert_func>
        return false;
   1d32c:	2000      	movs	r0, #0
   1d32e:	e7e2      	b.n	1d2f6 <rx_timeout_cb+0x12>
   1d330:	20004c2c 	.word	0x20004c2c

0001d334 <reset_cb.part.0>:
 *
 * @param inst   Pointer to struct uwb_dev.
 * @return true on sucess
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
   1d334:	b508      	push	{r3, lr}
{
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
    if(dpl_sem_get_count(&nrng->sem) == 0){
        dpl_error_t err = dpl_sem_release(&nrng->sem);
        assert(err == DPL_OK);
   1d336:	2300      	movs	r3, #0
   1d338:	461a      	mov	r2, r3
   1d33a:	4619      	mov	r1, r3
   1d33c:	4618      	mov	r0, r3
   1d33e:	f7eb fdd9 	bl	8ef4 <__assert_func>
	...

0001d344 <reset_cb>:
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   1d344:	6848      	ldr	r0, [r1, #4]
{
   1d346:	b508      	push	{r3, lr}
    if(dpl_sem_get_count(&nrng->sem) == 0){
   1d348:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
   1d34c:	b95b      	cbnz	r3, 1d366 <reset_cb+0x22>
   1d34e:	3064      	adds	r0, #100	; 0x64
   1d350:	f7ec fc70 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
   1d354:	b108      	cbz	r0, 1d35a <reset_cb+0x16>
   1d356:	f7ff ffed 	bl	1d334 <reset_cb.part.0>
        SS_STATS_INC(reset);
   1d35a:	4a04      	ldr	r2, [pc, #16]	; (1d36c <reset_cb+0x28>)
   1d35c:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1d35e:	3301      	adds	r3, #1
   1d360:	6253      	str	r3, [r2, #36]	; 0x24
        return true;
   1d362:	2001      	movs	r0, #1
    }
    else
        return false;
}
   1d364:	bd08      	pop	{r3, pc}
        return false;
   1d366:	2000      	movs	r0, #0
   1d368:	e7fc      	b.n	1d364 <reset_cb+0x20>
   1d36a:	bf00      	nop
   1d36c:	20004c2c 	.word	0x20004c2c

0001d370 <rx_error_cb>:
    if(inst->fctrl != FCNTL_IEEE_RANGE_16)
   1d370:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
{
   1d374:	b508      	push	{r3, lr}
    if(inst->fctrl != FCNTL_IEEE_RANGE_16)
   1d376:	f648 0341 	movw	r3, #34881	; 0x8841
   1d37a:	429a      	cmp	r2, r3
   1d37c:	d10d      	bne.n	1d39a <rx_error_cb+0x2a>
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   1d37e:	6848      	ldr	r0, [r1, #4]
    if(dpl_sem_get_count(&nrng->sem) == 0){
   1d380:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
   1d384:	b94b      	cbnz	r3, 1d39a <rx_error_cb+0x2a>
        SS_STATS_INC(rx_error);
   1d386:	4a07      	ldr	r2, [pc, #28]	; (1d3a4 <rx_error_cb+0x34>)
   1d388:	6953      	ldr	r3, [r2, #20]
   1d38a:	3064      	adds	r0, #100	; 0x64
   1d38c:	3301      	adds	r3, #1
   1d38e:	6153      	str	r3, [r2, #20]
   1d390:	f7ec fc50 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
   1d394:	b118      	cbz	r0, 1d39e <rx_error_cb+0x2e>
   1d396:	f7ff ffcd 	bl	1d334 <reset_cb.part.0>
        return false;
   1d39a:	2000      	movs	r0, #0
}
   1d39c:	bd08      	pop	{r3, pc}
        return true;
   1d39e:	2001      	movs	r0, #1
   1d3a0:	e7fc      	b.n	1d39c <rx_error_cb+0x2c>
   1d3a2:	bf00      	nop
   1d3a4:	20004c2c 	.word	0x20004c2c

0001d3a8 <rx_complete_cb>:
 *
 * @return true on sucess
 */
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1d3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;

    if(inst->fctrl != FCNTL_IEEE_RANGE_16)
   1d3ac:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   1d3b0:	f648 0341 	movw	r3, #34881	; 0x8841
   1d3b4:	429a      	cmp	r2, r3
{
   1d3b6:	b087      	sub	sp, #28
   1d3b8:	4604      	mov	r4, r0
    if(inst->fctrl != FCNTL_IEEE_RANGE_16)
   1d3ba:	d108      	bne.n	1d3ce <rx_complete_cb+0x26>
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   1d3bc:	684f      	ldr	r7, [r1, #4]
        return false;

    if(dpl_sem_get_count(&nrng->sem) == 1){
   1d3be:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
   1d3c2:	2b01      	cmp	r3, #1
   1d3c4:	d105      	bne.n	1d3d2 <rx_complete_cb+0x2a>
        // unsolicited inbound
        SS_STATS_INC(rx_unsolicited);
   1d3c6:	4ac6      	ldr	r2, [pc, #792]	; (1d6e0 <rx_complete_cb+0x338>)
   1d3c8:	6a13      	ldr	r3, [r2, #32]
   1d3ca:	3301      	adds	r3, #1
   1d3cc:	6213      	str	r3, [r2, #32]
        return false;
   1d3ce:	2000      	movs	r0, #0
   1d3d0:	e012      	b.n	1d3f8 <rx_complete_cb+0x50>
        return false;
    }

    struct uwb_rng_config * config = nrng_get_config(nrng, UWB_DATA_CODE_SS_TWR_NRNG);
   1d3d2:	f44f 7198 	mov.w	r1, #304	; 0x130
   1d3d6:	4638      	mov	r0, r7
   1d3d8:	f7ed fd56 	bl	ae88 <nrng_get_config>
    nrng_request_frame_t * _frame = (nrng_request_frame_t * )inst->rxbuf;
   1d3dc:	f8d4 54fc 	ldr.w	r5, [r4, #1276]	; 0x4fc

    if (_frame->dst_address != inst->my_short_address && _frame->dst_address != UWB_BROADCAST_ADDRESS)
   1d3e0:	f8b4 24b6 	ldrh.w	r2, [r4, #1206]	; 0x4b6
   1d3e4:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   1d3e8:	429a      	cmp	r2, r3
    struct uwb_rng_config * config = nrng_get_config(nrng, UWB_DATA_CODE_SS_TWR_NRNG);
   1d3ea:	4681      	mov	r9, r0
    if (_frame->dst_address != inst->my_short_address && _frame->dst_address != UWB_BROADCAST_ADDRESS)
   1d3ec:	d007      	beq.n	1d3fe <rx_complete_cb+0x56>
   1d3ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d3f2:	4293      	cmp	r3, r2
   1d3f4:	d003      	beq.n	1d3fe <rx_complete_cb+0x56>
            }
        default:
                return false;
            break;
        }
    return true;
   1d3f6:	2001      	movs	r0, #1
}
   1d3f8:	b007      	add	sp, #28
   1d3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SS_STATS_INC(rx_complete);
   1d3fe:	4ab8      	ldr	r2, [pc, #736]	; (1d6e0 <rx_complete_cb+0x338>)
   1d400:	69d3      	ldr	r3, [r2, #28]
   1d402:	3301      	adds	r3, #1
   1d404:	61d3      	str	r3, [r2, #28]
    switch(_frame->code){
   1d406:	f8b5 3009 	ldrh.w	r3, [r5, #9]
   1d40a:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
   1d40e:	d06f      	beq.n	1d4f0 <rx_complete_cb+0x148>
   1d410:	f240 1231 	movw	r2, #305	; 0x131
   1d414:	4293      	cmp	r3, r2
   1d416:	d1da      	bne.n	1d3ce <rx_complete_cb+0x26>
                if (inst->frame_len < sizeof(nrng_response_frame_t))
   1d418:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   1d41c:	2b13      	cmp	r3, #19
   1d41e:	d9ea      	bls.n	1d3f6 <rx_complete_cb+0x4e>
                if (nrng->seq_num != _frame->seq_num)
   1d420:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
   1d424:	78ab      	ldrb	r3, [r5, #2]
   1d426:	429a      	cmp	r2, r3
   1d428:	d1e5      	bne.n	1d3f6 <rx_complete_cb+0x4e>
                uint16_t idx = _frame->slot_id;
   1d42a:	f895 8013 	ldrb.w	r8, [r5, #19]
                nrng_frame_t * frame = nrng->frames[(nrng->idx + idx)%nrng->nframes];
   1d42e:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
   1d432:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
   1d436:	4443      	add	r3, r8
   1d438:	fbb3 f1f2 	udiv	r1, r3, r2
   1d43c:	fb02 3311 	mls	r3, r2, r1, r3
   1d440:	3332      	adds	r3, #50	; 0x32
                memcpy(frame, inst->rxbuf, sizeof(nrng_response_frame_t));
   1d442:	f105 0214 	add.w	r2, r5, #20
                nrng_frame_t * frame = nrng->frames[(nrng->idx + idx)%nrng->nframes];
   1d446:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
                memcpy(frame, inst->rxbuf, sizeof(nrng_response_frame_t));
   1d44a:	4633      	mov	r3, r6
   1d44c:	f855 1b04 	ldr.w	r1, [r5], #4
   1d450:	f843 1b04 	str.w	r1, [r3], #4
   1d454:	4295      	cmp	r5, r2
   1d456:	d1f9      	bne.n	1d44c <rx_complete_cb+0xa4>
                if (inst->status.lde_error == 0)
   1d458:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1d45c:	075a      	lsls	r2, r3, #29
                   response_timestamp = inst->rxtimestamp;
   1d45e:	bf58      	it	pl
   1d460:	f504 639e 	addpl.w	r3, r4, #1264	; 0x4f0
                struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
   1d464:	f04f 0101 	mov.w	r1, #1
   1d468:	4620      	mov	r0, r4
                   response_timestamp = inst->rxtimestamp;
   1d46a:	bf52      	itee	pl
   1d46c:	e953 ab02 	ldrdpl	sl, fp, [r3, #-8]
                uint64_t response_timestamp = 0x0;
   1d470:	f04f 0a00 	movmi.w	sl, #0
   1d474:	f04f 0b00 	movmi.w	fp, #0
                struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
   1d478:	f7eb fb5a 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    return (dev->uw_funcs->uf_read_txtime(dev));
   1d47c:	6a63      	ldr	r3, [r4, #36]	; 0x24
                struct uwb_wcs_instance * wcs = ccp->wcs;
   1d47e:	6e85      	ldr	r5, [r0, #104]	; 0x68
   1d480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1d482:	4620      	mov	r0, r4
   1d484:	4798      	blx	r3
   1d486:	4602      	mov	r2, r0
   1d488:	460b      	mov	r3, r1
                frame->request_timestamp = uwb_wcs_local_to_master(wcs, uwb_read_txtime(inst)) & 0xFFFFFFFFULL;
   1d48a:	4628      	mov	r0, r5
   1d48c:	f7f1 ff48 	bl	f320 <uwb_wcs_local_to_master>
                frame->response_timestamp = uwb_wcs_local_to_master(wcs, response_timestamp) & 0xFFFFFFFFULL;
   1d490:	4652      	mov	r2, sl
                frame->request_timestamp = uwb_wcs_local_to_master(wcs, uwb_read_txtime(inst)) & 0xFFFFFFFFULL;
   1d492:	6170      	str	r0, [r6, #20]
                frame->response_timestamp = uwb_wcs_local_to_master(wcs, response_timestamp) & 0xFFFFFFFFULL;
   1d494:	465b      	mov	r3, fp
   1d496:	4628      	mov	r0, r5
   1d498:	f7f1 ff42 	bl	f320 <uwb_wcs_local_to_master>
                frame->dst_address = frame->src_address;
   1d49c:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1d4a0:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   1d4a4:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1d4a8:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_NRNG_FINAL;
   1d4ac:	2300      	movs	r3, #0
                frame->carrier_integrator  = 0.0l;
   1d4ae:	7733      	strb	r3, [r6, #28]
   1d4b0:	7773      	strb	r3, [r6, #29]
   1d4b2:	77b3      	strb	r3, [r6, #30]
   1d4b4:	77f3      	strb	r3, [r6, #31]
                if(inst->config.rxdiag_enable) {
   1d4b6:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
                frame->response_timestamp = uwb_wcs_local_to_master(wcs, response_timestamp) & 0xFFFFFFFFULL;
   1d4ba:	61b0      	str	r0, [r6, #24]
                frame->code = UWB_DATA_CODE_SS_TWR_NRNG_FINAL;
   1d4bc:	2232      	movs	r2, #50	; 0x32
   1d4be:	7272      	strb	r2, [r6, #9]
                if(inst->config.rxdiag_enable) {
   1d4c0:	065b      	lsls	r3, r3, #25
                frame->code = UWB_DATA_CODE_SS_TWR_NRNG_FINAL;
   1d4c2:	f04f 0201 	mov.w	r2, #1
   1d4c6:	72b2      	strb	r2, [r6, #10]
                if(inst->config.rxdiag_enable) {
   1d4c8:	d506      	bpl.n	1d4d8 <rx_complete_cb+0x130>
                    memcpy(&frame->diag, inst->rxdiag, inst->rxdiag->rxd_len);
   1d4ca:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
   1d4ce:	f106 0020 	add.w	r0, r6, #32
   1d4d2:	880a      	ldrh	r2, [r1, #0]
   1d4d4:	f7f2 f886 	bl	f5e4 <memcpy>
                if(idx == nrng->nnodes-1){
   1d4d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1d4dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1d4de:	1e59      	subs	r1, r3, #1
   1d4e0:	4588      	cmp	r8, r1
   1d4e2:	f040 80e2 	bne.w	1d6aa <rx_complete_cb+0x302>
   1d4e6:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1d4e8:	2101      	movs	r1, #1
   1d4ea:	4620      	mov	r0, r4
   1d4ec:	4798      	blx	r3
   1d4ee:	e782      	b.n	1d3f6 <rx_complete_cb+0x4e>
                if (inst->frame_len < sizeof(nrng_request_frame_t))
   1d4f0:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   1d4f4:	2b12      	cmp	r3, #18
   1d4f6:	f67f af7e 	bls.w	1d3f6 <rx_complete_cb+0x4e>
                if (_frame->ptype != PTYPE_CELL)
   1d4fa:	7aeb      	ldrb	r3, [r5, #11]
   1d4fc:	079b      	lsls	r3, r3, #30
   1d4fe:	f47f af7a 	bne.w	1d3f6 <rx_complete_cb+0x4e>
                if (_frame->cell_id != inst->cell_id)
   1d502:	7c2a      	ldrb	r2, [r5, #16]
   1d504:	7beb      	ldrb	r3, [r5, #15]
   1d506:	f002 013f 	and.w	r1, r2, #63	; 0x3f
   1d50a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1d50e:	f8b4 14c4 	ldrh.w	r1, [r4, #1220]	; 0x4c4
   1d512:	428b      	cmp	r3, r1
   1d514:	f47f af6f 	bne.w	1d3f6 <rx_complete_cb+0x4e>
                if (_frame->slot_mask & (1UL << inst->slot_id))
   1d518:	7c68      	ldrb	r0, [r5, #17]
   1d51a:	7cab      	ldrb	r3, [r5, #18]
   1d51c:	f8b4 14c2 	ldrh.w	r1, [r4, #1218]	; 0x4c2
   1d520:	0080      	lsls	r0, r0, #2
   1d522:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1d526:	ea40 1092 	orr.w	r0, r0, r2, lsr #6
   1d52a:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
   1d52e:	fa20 f301 	lsr.w	r3, r0, r1
   1d532:	07de      	lsls	r6, r3, #31
   1d534:	f57f af5f 	bpl.w	1d3f6 <rx_complete_cb+0x4e>
                    slot_idx = BitIndex(_frame->slot_mask, 1UL << inst->slot_id, SLOT_POSITION);
   1d538:	2201      	movs	r2, #1
   1d53a:	fa02 f101 	lsl.w	r1, r2, r1
   1d53e:	f7f1 fe00 	bl	f142 <BitIndex>
                nrng_final_frame_t * frame = (nrng_final_frame_t *) nrng->frames[(++nrng->idx)%nrng->nframes];
   1d542:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
   1d546:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
                    slot_idx = BitIndex(_frame->slot_mask, 1UL << inst->slot_id, SLOT_POSITION);
   1d54a:	9001      	str	r0, [sp, #4]
                nrng_final_frame_t * frame = (nrng_final_frame_t *) nrng->frames[(++nrng->idx)%nrng->nframes];
   1d54c:	3301      	adds	r3, #1
   1d54e:	b29b      	uxth	r3, r3
   1d550:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
   1d554:	fbb3 f1f2 	udiv	r1, r3, r2
   1d558:	fb02 3311 	mls	r3, r2, r1, r3
   1d55c:	b29b      	uxth	r3, r3
   1d55e:	3332      	adds	r3, #50	; 0x32
   1d560:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
                memcpy(frame->array, inst->rxbuf, sizeof(nrng_request_frame_t));
   1d564:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
   1d568:	4632      	mov	r2, r6
   1d56a:	f103 0110 	add.w	r1, r3, #16
   1d56e:	f853 0b04 	ldr.w	r0, [r3], #4
   1d572:	f842 0b04 	str.w	r0, [r2], #4
   1d576:	428b      	cmp	r3, r1
   1d578:	d1f9      	bne.n	1d56e <rx_complete_cb+0x1c6>
   1d57a:	8819      	ldrh	r1, [r3, #0]
   1d57c:	8011      	strh	r1, [r2, #0]
   1d57e:	789b      	ldrb	r3, [r3, #2]
   1d580:	7093      	strb	r3, [r2, #2]
                uint64_t request_timestamp = inst->rxtimestamp;
   1d582:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
   1d586:	9303      	str	r3, [sp, #12]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1d588:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d58a:	f8d4 24e8 	ldr.w	r2, [r4, #1256]	; 0x4e8
   1d58e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1d590:	9202      	str	r2, [sp, #8]
   1d592:	2114      	movs	r1, #20
   1d594:	4620      	mov	r0, r4
                            + (((uint64_t)config->tx_holdoff_delay
   1d596:	f8d9 a004 	ldr.w	sl, [r9, #4]
                            + (uint64_t)(slot_idx * ((uint64_t)config->tx_guard_delay
   1d59a:	f8d9 9008 	ldr.w	r9, [r9, #8]
   1d59e:	4798      	blx	r3
                            + (uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(nrng_response_frame_t)))))))<< 16);
   1d5a0:	f002 fc24 	bl	1fdec <__aeabi_i2d>
   1d5a4:	a34c      	add	r3, pc, #304	; (adr r3, 1d6d8 <rx_complete_cb+0x330>)
   1d5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d5aa:	f002 fdb3 	bl	20114 <__aeabi_ddiv>
   1d5ae:	f003 f97d 	bl	208ac <__aeabi_d2ulz>
                            + (uint64_t)(slot_idx * ((uint64_t)config->tx_guard_delay
   1d5b2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
                            + (uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(nrng_response_frame_t)))))))<< 16);
   1d5b6:	eb10 0009 	adds.w	r0, r0, r9
                            + (uint64_t)(slot_idx * ((uint64_t)config->tx_guard_delay
   1d5ba:	fba0 0903 	umull	r0, r9, r0, r3
                            + (uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(nrng_response_frame_t)))))))<< 16);
   1d5be:	f141 0100 	adc.w	r1, r1, #0
                            + (uint64_t)(slot_idx * ((uint64_t)config->tx_guard_delay
   1d5c2:	fb03 9901 	mla	r9, r3, r1, r9
   1d5c6:	eb10 0a0a 	adds.w	sl, r0, sl
   1d5ca:	f149 0000 	adc.w	r0, r9, #0
                uint64_t response_tx_delay = request_timestamp
   1d5ce:	9b02      	ldr	r3, [sp, #8]
                            + (uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(nrng_response_frame_t)))))))<< 16);
   1d5d0:	0400      	lsls	r0, r0, #16
   1d5d2:	ea40 401a 	orr.w	r0, r0, sl, lsr #16
   1d5d6:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
                uint64_t response_tx_delay = request_timestamp
   1d5da:	eb1a 0303 	adds.w	r3, sl, r3
   1d5de:	9304      	str	r3, [sp, #16]
   1d5e0:	9b03      	ldr	r3, [sp, #12]
   1d5e2:	eb43 0300 	adc.w	r3, r3, r0
   1d5e6:	9305      	str	r3, [sp, #20]
                uint64_t response_timestamp = (response_tx_delay & 0xFFFFFFFE00UL) + inst->tx_antenna_delay;
   1d5e8:	9b04      	ldr	r3, [sp, #16]
   1d5ea:	f423 79ff 	bic.w	r9, r3, #510	; 0x1fe
   1d5ee:	9b05      	ldr	r3, [sp, #20]
   1d5f0:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   1d5f4:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   1d5f8:	f029 0901 	bic.w	r9, r9, #1
   1d5fc:	eb19 0903 	adds.w	r9, r9, r3
                struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
   1d600:	f04f 0101 	mov.w	r1, #1
   1d604:	4620      	mov	r0, r4
                uint64_t response_timestamp = (response_tx_delay & 0xFFFFFFFE00UL) + inst->tx_antenna_delay;
   1d606:	f14a 0a00 	adc.w	sl, sl, #0
                struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
   1d60a:	f7eb fa91 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
                struct uwb_wcs_instance * wcs = ccp->wcs;
   1d60e:	f8d0 b068 	ldr.w	fp, [r0, #104]	; 0x68
                frame->reception_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, request_timestamp)) & 0xFFFFFFFFULL;
   1d612:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1d616:	4658      	mov	r0, fp
   1d618:	f7f1 fe82 	bl	f320 <uwb_wcs_local_to_master>
                frame->transmission_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, response_timestamp)) & 0xFFFFFFFFULL;
   1d61c:	464a      	mov	r2, r9
                frame->reception_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, request_timestamp)) & 0xFFFFFFFFULL;
   1d61e:	f8c6 000b 	str.w	r0, [r6, #11]
                frame->transmission_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, response_timestamp)) & 0xFFFFFFFFULL;
   1d622:	4653      	mov	r3, sl
   1d624:	4658      	mov	r0, fp
   1d626:	f7f1 fe7b 	bl	f320 <uwb_wcs_local_to_master>
   1d62a:	f8c6 000f 	str.w	r0, [r6, #15]
                frame->dst_address = _frame->src_address;
   1d62e:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   1d632:	f8a6 3005 	strh.w	r3, [r6, #5]
                frame->src_address = inst->my_short_address;
   1d636:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1d63a:	f8a6 3007 	strh.w	r3, [r6, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_NRNG_T1;
   1d63e:	2331      	movs	r3, #49	; 0x31
   1d640:	7273      	strb	r3, [r6, #9]
                frame->slot_id = slot_idx;
   1d642:	9b01      	ldr	r3, [sp, #4]
   1d644:	74f3      	strb	r3, [r6, #19]
                frame->seq_num = _frame->seq_num;
   1d646:	78ab      	ldrb	r3, [r5, #2]
   1d648:	70b3      	strb	r3, [r6, #2]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1d64a:	6a63      	ldr	r3, [r4, #36]	; 0x24
                            + (((uint64_t)config->tx_holdoff_delay
   1d64c:	f04f 0800 	mov.w	r8, #0
                frame->code = UWB_DATA_CODE_SS_TWR_NRNG_T1;
   1d650:	f04f 0901 	mov.w	r9, #1
   1d654:	6c5d      	ldr	r5, [r3, #68]	; 0x44
   1d656:	f886 900a 	strb.w	r9, [r6, #10]
   1d65a:	4642      	mov	r2, r8
   1d65c:	4631      	mov	r1, r6
                frame->carrier_integrator  = 0.0l;
   1d65e:	f886 801c 	strb.w	r8, [r6, #28]
   1d662:	f886 801d 	strb.w	r8, [r6, #29]
   1d666:	f886 801e 	strb.w	r8, [r6, #30]
   1d66a:	f886 801f 	strb.w	r8, [r6, #31]
   1d66e:	2314      	movs	r3, #20
   1d670:	4620      	mov	r0, r4
   1d672:	47a8      	blx	r5
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1d674:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d676:	4642      	mov	r2, r8
   1d678:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1d67a:	4620      	mov	r0, r4
   1d67c:	4643      	mov	r3, r8
   1d67e:	2114      	movs	r1, #20
   1d680:	47a8      	blx	r5
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1d682:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d684:	4641      	mov	r1, r8
   1d686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1d688:	4620      	mov	r0, r4
   1d68a:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1d68c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d68e:	4620      	mov	r0, r4
   1d690:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1d692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1d696:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   1d698:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d69a:	4620      	mov	r0, r4
   1d69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d69e:	4798      	blx	r3
   1d6a0:	f107 0064 	add.w	r0, r7, #100	; 0x64
   1d6a4:	f7ec fac6 	bl	9c34 <os_sem_release>
   1d6a8:	e6a5      	b.n	1d3f6 <rx_complete_cb+0x4e>
                    uint16_t timeout = usecs_to_response(inst,
   1d6aa:	eba3 0808 	sub.w	r8, r3, r8
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1d6ae:	2114      	movs	r1, #20
   1d6b0:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   1d6b2:	4620      	mov	r0, r4
   1d6b4:	4798      	blx	r3
   1d6b6:	fa1f f888 	uxth.w	r8, r8
   1d6ba:	4603      	mov	r3, r0
   1d6bc:	4641      	mov	r1, r8
   1d6be:	464a      	mov	r2, r9
   1d6c0:	4620      	mov	r0, r4
   1d6c2:	f7ed fca5 	bl	b010 <usecs_to_response>
   1d6c6:	f8b9 100c 	ldrh.w	r1, [r9, #12]
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1d6ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d6cc:	4401      	add	r1, r0
   1d6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d6d0:	b289      	uxth	r1, r1
   1d6d2:	e70a      	b.n	1d4ea <rx_complete_cb+0x142>
   1d6d4:	f3af 8000 	nop.w
   1d6d8:	90690691 	.word	0x90690691
   1d6dc:	3ff06906 	.word	0x3ff06906
   1d6e0:	20004c2c 	.word	0x20004c2c

0001d6e4 <twr_ss_nrng_pkg_init>:
{
   1d6e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    printf("{\"utime\": %lu,\"msg\": \"ss_nrng_pkg_init\"}\n",os_cputime_ticks_to_usecs(os_cputime_get32()));
   1d6e6:	f7eb fe3c 	bl	9362 <os_cputime_get32>
   1d6ea:	4601      	mov	r1, r0
   1d6ec:	4814      	ldr	r0, [pc, #80]	; (1d740 <twr_ss_nrng_pkg_init+0x5c>)
   1d6ee:	f7f2 fa75 	bl	fbdc <printf>
    udev = uwb_dev_idx_lookup(0);
   1d6f2:	2000      	movs	r0, #0
   1d6f4:	f7eb f9a8 	bl	8a48 <uwb_dev_idx_lookup>
    struct nrng_instance *nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_NRNG);
   1d6f8:	210b      	movs	r1, #11
    udev = uwb_dev_idx_lookup(0);
   1d6fa:	4605      	mov	r5, r0
    struct nrng_instance *nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_NRNG);
   1d6fc:	f7eb fa18 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    g_cbs.inst_ptr = nrng;
   1d700:	4910      	ldr	r1, [pc, #64]	; (1d744 <twr_ss_nrng_pkg_init+0x60>)
    struct nrng_instance *nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_NRNG);
   1d702:	4604      	mov	r4, r0
    g_cbs.inst_ptr = nrng;
   1d704:	6048      	str	r0, [r1, #4]
    uwb_mac_append_interface(udev, &g_cbs);
   1d706:	4628      	mov	r0, r5
   1d708:	f7eb f9c8 	bl	8a9c <uwb_mac_append_interface>
    nrng_append_config(nrng, &g_rng_cfgs);
   1d70c:	490e      	ldr	r1, [pc, #56]	; (1d748 <twr_ss_nrng_pkg_init+0x64>)
   1d70e:	4620      	mov	r0, r4
   1d710:	f7ed fbc8 	bl	aea4 <nrng_append_config>
    int rc = stats_init(
   1d714:	2205      	movs	r2, #5
   1d716:	4b0d      	ldr	r3, [pc, #52]	; (1d74c <twr_ss_nrng_pkg_init+0x68>)
   1d718:	480d      	ldr	r0, [pc, #52]	; (1d750 <twr_ss_nrng_pkg_init+0x6c>)
   1d71a:	9200      	str	r2, [sp, #0]
   1d71c:	2104      	movs	r1, #4
   1d71e:	f7f6 fe11 	bl	14344 <stats_init>
    assert(rc == 0);
   1d722:	b128      	cbz	r0, 1d730 <twr_ss_nrng_pkg_init+0x4c>
   1d724:	2300      	movs	r3, #0
   1d726:	461a      	mov	r2, r3
   1d728:	4619      	mov	r1, r3
   1d72a:	4618      	mov	r0, r3
   1d72c:	f7eb fbe2 	bl	8ef4 <__assert_func>
    rc = stats_register("twr_ss_nrng", STATS_HDR(g_twr_ss_nrng_stat));
   1d730:	4907      	ldr	r1, [pc, #28]	; (1d750 <twr_ss_nrng_pkg_init+0x6c>)
   1d732:	4808      	ldr	r0, [pc, #32]	; (1d754 <twr_ss_nrng_pkg_init+0x70>)
   1d734:	f7f6 fe86 	bl	14444 <stats_register>
    assert(rc == 0);
   1d738:	2800      	cmp	r0, #0
   1d73a:	d1f3      	bne.n	1d724 <twr_ss_nrng_pkg_init+0x40>
}
   1d73c:	b003      	add	sp, #12
   1d73e:	bd30      	pop	{r4, r5, pc}
   1d740:	00023bc3 	.word	0x00023bc3
   1d744:	20000e90 	.word	0x20000e90
   1d748:	20000edc 	.word	0x20000edc
   1d74c:	00023bf9 	.word	0x00023bf9
   1d750:	20004c2c 	.word	0x20004c2c
   1d754:	00023bed 	.word	0x00023bed

0001d758 <reset_cb.part.0>:
 * @param cbs    Pointer to struct uwb_mac_interface.
 *
 * @return true on sucess
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
   1d758:	b508      	push	{r3, lr}
{
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    if(dpl_sem_get_count(&rng->sem) == 0){
        dpl_error_t err = dpl_sem_release(&rng->sem);
        assert(err == DPL_OK);
   1d75a:	2300      	movs	r3, #0
   1d75c:	461a      	mov	r2, r3
   1d75e:	4619      	mov	r1, r3
   1d760:	4618      	mov	r0, r3
   1d762:	f7eb fbc7 	bl	8ef4 <__assert_func>

0001d766 <reset_cb>:
{
   1d766:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1d768:	684c      	ldr	r4, [r1, #4]
    if(dpl_sem_get_count(&rng->sem) == 0){
   1d76a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   1d76e:	b98b      	cbnz	r3, 1d794 <reset_cb+0x2e>
   1d770:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1d774:	f7ec fa5e 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
   1d778:	b108      	cbz	r0, 1d77e <reset_cb+0x18>
   1d77a:	f7ff ffed 	bl	1d758 <reset_cb.part.0>
        RNG_STATS_INC(reset);
   1d77e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1d780:	3301      	adds	r3, #1
   1d782:	6463      	str	r3, [r4, #68]	; 0x44
        rng->status.rx_ack_expected = 0;
        rng->status.tx_ack_expected = 0;
   1d784:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1d788:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1d78c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        return true;
   1d790:	2001      	movs	r0, #1
    }
    else
        return false;
}
   1d792:	bd10      	pop	{r4, pc}
        return false;
   1d794:	2000      	movs	r0, #0
   1d796:	e7fc      	b.n	1d792 <reset_cb+0x2c>

0001d798 <rx_timeout_cb>:
{
   1d798:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1d79a:	684c      	ldr	r4, [r1, #4]
    if(dpl_sem_get_count(&rng->sem) == 0){
   1d79c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   1d7a0:	b10b      	cbz	r3, 1d7a6 <rx_timeout_cb+0xe>
    return false;
   1d7a2:	2000      	movs	r0, #0
}
   1d7a4:	bd10      	pop	{r4, pc}
   1d7a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1d7aa:	f7ec fa43 	bl	9c34 <os_sem_release>
        assert(err == DPL_OK);
   1d7ae:	b108      	cbz	r0, 1d7b4 <rx_timeout_cb+0x1c>
   1d7b0:	f7ff ffd2 	bl	1d758 <reset_cb.part.0>
        RNG_STATS_INC(rx_timeout);
   1d7b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1d7b6:	1c5a      	adds	r2, r3, #1
   1d7b8:	63e2      	str	r2, [r4, #60]	; 0x3c
        switch(rng->code){
   1d7ba:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   1d7be:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
   1d7c2:	2a18      	cmp	r2, #24
   1d7c4:	d8ed      	bhi.n	1d7a2 <rx_timeout_cb+0xa>
                    RNG_STATS_INC(rx_timeout);
   1d7c6:	3302      	adds	r3, #2
   1d7c8:	63e3      	str	r3, [r4, #60]	; 0x3c
                    return true;
   1d7ca:	2001      	movs	r0, #1
   1d7cc:	e7ea      	b.n	1d7a4 <rx_timeout_cb+0xc>
	...

0001d7d0 <superframe_reset_cb>:
 *
 * @return true on sucess
 */
static bool
superframe_reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1d7d0:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1d7d2:	684c      	ldr	r4, [r1, #4]
    if(dpl_sem_get_count(&rng->sem) == 0){
   1d7d4:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   1d7d8:	b9ab      	cbnz	r3, 1d806 <superframe_reset_cb+0x36>
   1d7da:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1d7de:	f7ec fa29 	bl	9c34 <os_sem_release>
        dpl_error_t err = dpl_sem_release(&rng->sem);
        assert(err == DPL_OK);
   1d7e2:	b108      	cbz	r0, 1d7e8 <superframe_reset_cb+0x18>
   1d7e4:	f7ff ffb8 	bl	1d758 <reset_cb.part.0>
        RNG_STATS_INC(superframe_reset);
   1d7e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1d7ea:	3301      	adds	r3, #1
   1d7ec:	64a3      	str	r3, [r4, #72]	; 0x48
        printf("{\"utime\": %"PRIu32",\"msg\": \"superframe_reset\"}\n",
   1d7ee:	f7f3 fd3f 	bl	11270 <dpl_cputime_get32>
   1d7f2:	4601      	mov	r1, r0
   1d7f4:	4805      	ldr	r0, [pc, #20]	; (1d80c <superframe_reset_cb+0x3c>)
   1d7f6:	f7f2 f9f1 	bl	fbdc <printf>
               dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
        rng->status.rx_ack_expected = 0;
        rng->status.tx_ack_expected = 0;
   1d7fa:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1d7fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1d802:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    }
    return false;
}
   1d806:	2000      	movs	r0, #0
   1d808:	bd10      	pop	{r4, pc}
   1d80a:	bf00      	nop
   1d80c:	00023c17 	.word	0x00023c17

0001d810 <uwb_rng_free>:
{
   1d810:	b508      	push	{r3, lr}
    assert(rng);
   1d812:	b908      	cbnz	r0, 1d818 <uwb_rng_free+0x8>
   1d814:	f7ff ffa0 	bl	1d758 <reset_cb.part.0>
    if (rng->status.selfmalloc)
   1d818:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
   1d81c:	f013 0101 	ands.w	r1, r3, #1
   1d820:	d003      	beq.n	1d82a <uwb_rng_free+0x1a>
}
   1d822:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        free(rng);
   1d826:	f7f1 bea3 	b.w	f570 <free>
        rng->status.initialized = 0;
   1d82a:	f361 0341 	bfi	r3, r1, #1, #1
   1d82e:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
}
   1d832:	bd08      	pop	{r3, pc}

0001d834 <uwb_rng_set_frames>:
{
   1d834:	b538      	push	{r3, r4, r5, lr}
    assert(nframes <= rng->nframes);
   1d836:	f8b0 307a 	ldrh.w	r3, [r0, #122]	; 0x7a
   1d83a:	4293      	cmp	r3, r2
   1d83c:	d306      	bcc.n	1d84c <uwb_rng_set_frames+0x18>
   1d83e:	309c      	adds	r0, #156	; 0x9c
   1d840:	2300      	movs	r3, #0
        rng->frames[i] = &twr[i];
   1d842:	25f0      	movs	r5, #240	; 0xf0
    for (i = 0; i < nframes; i++)
   1d844:	b29c      	uxth	r4, r3
   1d846:	42a2      	cmp	r2, r4
   1d848:	d802      	bhi.n	1d850 <uwb_rng_set_frames+0x1c>
}
   1d84a:	bd38      	pop	{r3, r4, r5, pc}
   1d84c:	f7ff ff84 	bl	1d758 <reset_cb.part.0>
        rng->frames[i] = &twr[i];
   1d850:	fb05 1403 	mla	r4, r5, r3, r1
   1d854:	f840 4b04 	str.w	r4, [r0], #4
    for (i = 0; i < nframes; i++)
   1d858:	3301      	adds	r3, #1
   1d85a:	e7f3      	b.n	1d844 <uwb_rng_set_frames+0x10>

0001d85c <uwb_rng_config>:
uwb_rng_config(struct uwb_rng_instance * rng, struct uwb_rng_config * config){
   1d85c:	b510      	push	{r4, lr}
    assert(config);
   1d85e:	b909      	cbnz	r1, 1d864 <uwb_rng_config+0x8>
   1d860:	f7ff ff7a 	bl	1d758 <reset_cb.part.0>
    memcpy(&rng->config, config, sizeof(struct uwb_rng_config));
   1d864:	f100 0360 	add.w	r3, r0, #96	; 0x60
   1d868:	f101 0210 	add.w	r2, r1, #16
   1d86c:	f851 4b04 	ldr.w	r4, [r1], #4
   1d870:	f843 4b04 	str.w	r4, [r3], #4
   1d874:	4291      	cmp	r1, r2
   1d876:	d1f9      	bne.n	1d86c <uwb_rng_config+0x10>
    return rng->dev_inst->status;
   1d878:	6803      	ldr	r3, [r0, #0]
}
   1d87a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
   1d87e:	bd10      	pop	{r4, pc}

0001d880 <uwb_rng_init>:
{
   1d880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d882:	460e      	mov	r6, r1
   1d884:	4617      	mov	r7, r2
    assert(dev);
   1d886:	4605      	mov	r5, r0
   1d888:	b928      	cbnz	r0, 1d896 <uwb_rng_init+0x16>
   1d88a:	2300      	movs	r3, #0
   1d88c:	461a      	mov	r2, r3
   1d88e:	4619      	mov	r1, r3
   1d890:	4618      	mov	r0, r3
   1d892:	f7eb fb2f 	bl	8ef4 <__assert_func>
    rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_RNG);
   1d896:	2104      	movs	r1, #4
   1d898:	f7eb f94a 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    if (rng == NULL ) {
   1d89c:	4604      	mov	r4, r0
   1d89e:	b980      	cbnz	r0, 1d8c2 <uwb_rng_init+0x42>
        rng = (struct uwb_rng_instance *) calloc(1, sizeof(*rng) + nframes * sizeof(twr_frame_t *));
   1d8a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1d8a4:	0089      	lsls	r1, r1, #2
   1d8a6:	2001      	movs	r0, #1
   1d8a8:	f7f1 fd78 	bl	f39c <calloc>
        assert(rng);
   1d8ac:	4604      	mov	r4, r0
   1d8ae:	2800      	cmp	r0, #0
   1d8b0:	d0eb      	beq.n	1d88a <uwb_rng_init+0xa>
        rng->status.selfmalloc = 1;
   1d8b2:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
        rng->nframes = nframes;
   1d8b6:	f8a0 707a 	strh.w	r7, [r0, #122]	; 0x7a
        rng->status.selfmalloc = 1;
   1d8ba:	f043 0301 	orr.w	r3, r3, #1
   1d8be:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    rng->dev_inst = dev;
   1d8c2:	6025      	str	r5, [r4, #0]
    rng->ccp_inst = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
   1d8c4:	2101      	movs	r1, #1
   1d8c6:	4628      	mov	r0, r5
   1d8c8:	f7eb f932 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
   1d8cc:	6060      	str	r0, [r4, #4]
    assert(rng->ccp_inst);
   1d8ce:	2800      	cmp	r0, #0
   1d8d0:	d0db      	beq.n	1d88a <uwb_rng_init+0xa>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   1d8d2:	2101      	movs	r1, #1
   1d8d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1d8d8:	f7ec f9a4 	bl	9c24 <os_sem_init>
    assert(err == DPL_OK);
   1d8dc:	2800      	cmp	r0, #0
   1d8de:	d1d4      	bne.n	1d88a <uwb_rng_init+0xa>
    if (config != NULL ) {
   1d8e0:	b11e      	cbz	r6, 1d8ea <uwb_rng_init+0x6a>
        uwb_rng_config(rng, config);
   1d8e2:	4631      	mov	r1, r6
   1d8e4:	4620      	mov	r0, r4
   1d8e6:	f7ff ffb9 	bl	1d85c <uwb_rng_config>
    rng->control = (uwb_rng_control_t){
   1d8ea:	2300      	movs	r3, #0
   1d8ec:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    rng->idx = 0xFFFF;
   1d8f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d8f4:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
    rng->status.initialized = 1;
   1d8f8:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
        int rc = stats_init(
   1d8fc:	220c      	movs	r2, #12
    rng->status.initialized = 1;
   1d8fe:	f043 0302 	orr.w	r3, r3, #2
        int rc = stats_init(
   1d902:	f104 0508 	add.w	r5, r4, #8
    rng->status.initialized = 1;
   1d906:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        int rc = stats_init(
   1d90a:	2104      	movs	r1, #4
   1d90c:	4b07      	ldr	r3, [pc, #28]	; (1d92c <uwb_rng_init+0xac>)
   1d90e:	9200      	str	r2, [sp, #0]
   1d910:	4628      	mov	r0, r5
   1d912:	f7f6 fd17 	bl	14344 <stats_init>
        rc |= stats_register("rng", STATS_HDR(rng->stat));
   1d916:	4629      	mov	r1, r5
        int rc = stats_init(
   1d918:	4606      	mov	r6, r0
        rc |= stats_register("rng", STATS_HDR(rng->stat));
   1d91a:	4805      	ldr	r0, [pc, #20]	; (1d930 <uwb_rng_init+0xb0>)
   1d91c:	f7f6 fd92 	bl	14444 <stats_register>
        assert(rc == 0);
   1d920:	ea56 0300 	orrs.w	r3, r6, r0
   1d924:	d1b1      	bne.n	1d88a <uwb_rng_init+0xa>
}
   1d926:	4620      	mov	r0, r4
   1d928:	b003      	add	sp, #12
   1d92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d92c:	00023c84 	.word	0x00023c84
   1d930:	00023bf5 	.word	0x00023bf5

0001d934 <uwb_rng_clear_twr_data>:
    s->spherical.array[0] = DPL_FLOAT64_NAN();
   1d934:	4b07      	ldr	r3, [pc, #28]	; (1d954 <uwb_rng_clear_twr_data+0x20>)
   1d936:	2200      	movs	r2, #0
   1d938:	e9c0 2300 	strd	r2, r3, [r0]
    s->spherical.array[1] = DPL_FLOAT64_NAN();
   1d93c:	e9c0 2302 	strd	r2, r3, [r0, #8]
    s->spherical.array[2] = DPL_FLOAT64_NAN();
   1d940:	e9c0 2304 	strd	r2, r3, [r0, #16]
    s->rssi = DPL_FLOAT32_NAN();
   1d944:	4b04      	ldr	r3, [pc, #16]	; (1d958 <uwb_rng_clear_twr_data+0x24>)
   1d946:	6483      	str	r3, [r0, #72]	; 0x48
    s->fppl = DPL_FLOAT32_NAN();
   1d948:	64c3      	str	r3, [r0, #76]	; 0x4c
    s->pdoa = DPL_FLOAT32_NAN();
   1d94a:	6503      	str	r3, [r0, #80]	; 0x50
    s->flags = (struct _rng_frame_flags){0};
   1d94c:	2300      	movs	r3, #0
   1d94e:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
   1d952:	4770      	bx	lr
   1d954:	7ff80000 	.word	0x7ff80000
   1d958:	7fc00000 	.word	0x7fc00000

0001d95c <rx_complete_cb>:
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
    ieee_rng_request_frame_t * req_frame;

    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
   1d95c:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
{
   1d960:	b570      	push	{r4, r5, r6, lr}
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
   1d962:	f648 0241 	movw	r2, #34881	; 0x8841
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1d966:	684c      	ldr	r4, [r1, #4]
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
   1d968:	f023 0120 	bic.w	r1, r3, #32
   1d96c:	4291      	cmp	r1, r2
   1d96e:	f8b4 5056 	ldrh.w	r5, [r4, #86]	; 0x56
{
   1d972:	4606      	mov	r6, r0
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
   1d974:	d00c      	beq.n	1d990 <rx_complete_cb+0x34>
        inst->fctrl != (FCNTL_IEEE_RANGE_16|UWB_FCTRL_ACK_REQUESTED) &&
   1d976:	2b02      	cmp	r3, #2
   1d978:	d00a      	beq.n	1d990 <rx_complete_cb+0x34>
        inst->fctrl != UWB_FCTRL_FRAME_TYPE_ACK) {
        if(dpl_sem_get_count(&rng->sem) == 0) {
   1d97a:	b10d      	cbz	r5, 1d980 <rx_complete_cb+0x24>
                    }
                    return true;
                }else{
                    RNG_STATS_INC(rx_complete);
                    rng->idx++;     // confirmed frame advance
                    return false;   // Allow sub extensions to handle event
   1d97c:	2000      	movs	r0, #0
            break;
        default:
            return false;
    }
    return false;
}
   1d97e:	bd70      	pop	{r4, r5, r6, pc}
            RNG_STATS_INC(rx_other_frame);
   1d980:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d982:	3301      	adds	r3, #1
   1d984:	6323      	str	r3, [r4, #48]	; 0x30
    return (dpl_error_t)os_sem_release(&sem->sem);
   1d986:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1d98a:	f7ec f953 	bl	9c34 <os_sem_release>
   1d98e:	e7f5      	b.n	1d97c <rx_complete_cb+0x20>
    if(dpl_sem_get_count(&rng->sem) == 1){
   1d990:	2d01      	cmp	r5, #1
   1d992:	d103      	bne.n	1d99c <rx_complete_cb+0x40>
        RNG_STATS_INC(rx_unsolicited);
   1d994:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d996:	3301      	adds	r3, #1
   1d998:	62e3      	str	r3, [r4, #44]	; 0x2c
        return false;
   1d99a:	e7ef      	b.n	1d97c <rx_complete_cb+0x20>
    if (inst->frame_len < sizeof(ieee_rng_request_frame_t))
   1d99c:	f8b6 34e2 	ldrh.w	r3, [r6, #1250]	; 0x4e2
   1d9a0:	2b0a      	cmp	r3, #10
   1d9a2:	d9eb      	bls.n	1d97c <rx_complete_cb+0x20>
    rng->code = req_frame->code;
   1d9a4:	f8d6 34fc 	ldr.w	r3, [r6, #1276]	; 0x4fc
   1d9a8:	f8b3 2009 	ldrh.w	r2, [r3, #9]
   1d9ac:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
   1d9b0:	b293      	uxth	r3, r2
    switch(rng->code) {
   1d9b2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
   1d9b6:	2b19      	cmp	r3, #25
   1d9b8:	d8e0      	bhi.n	1d97c <rx_complete_cb+0x20>
                twr_frame_t * frame = rng->frames[(rng->idx+1)%rng->nframes]; // speculative frame advance
   1d9ba:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   1d9be:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   1d9c2:	3301      	adds	r3, #1
   1d9c4:	fbb3 f1f2 	udiv	r1, r3, r2
   1d9c8:	fb02 3311 	mls	r3, r2, r1, r3
   1d9cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1d9d0:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
                uwb_rng_clear_twr_data(&frame->remote);
   1d9d4:	f105 0020 	add.w	r0, r5, #32
   1d9d8:	f7ff ffac 	bl	1d934 <uwb_rng_clear_twr_data>
                uwb_rng_clear_twr_data(&frame->local);
   1d9dc:	f105 0088 	add.w	r0, r5, #136	; 0x88
   1d9e0:	f7ff ffa8 	bl	1d934 <uwb_rng_clear_twr_data>
                if (inst->frame_len <= sizeof(frame->array))
   1d9e4:	f8b6 24e2 	ldrh.w	r2, [r6, #1250]	; 0x4e2
   1d9e8:	2a88      	cmp	r2, #136	; 0x88
   1d9ea:	d8c7      	bhi.n	1d97c <rx_complete_cb+0x20>
                    memcpy(frame->array, inst->rxbuf, inst->frame_len);
   1d9ec:	f8d6 14fc 	ldr.w	r1, [r6, #1276]	; 0x4fc
   1d9f0:	4628      	mov	r0, r5
   1d9f2:	f7f1 fdf7 	bl	f5e4 <memcpy>
                if (inst->config.rx.frameFilter == 0 && frame->dst_address != inst->my_short_address){
   1d9f6:	f8b6 351c 	ldrh.w	r3, [r6, #1308]	; 0x51c
   1d9fa:	b973      	cbnz	r3, 1da1a <rx_complete_cb+0xbe>
   1d9fc:	f8b5 2005 	ldrh.w	r2, [r5, #5]
   1da00:	f8b6 34b6 	ldrh.w	r3, [r6, #1206]	; 0x4b6
   1da04:	429a      	cmp	r2, r3
   1da06:	d008      	beq.n	1da1a <rx_complete_cb+0xbe>
                    if(dpl_sem_get_count(&rng->sem) == 0){
   1da08:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   1da0c:	b91b      	cbnz	r3, 1da16 <rx_complete_cb+0xba>
   1da0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1da12:	f7ec f90f 	bl	9c34 <os_sem_release>
                    return true;
   1da16:	2001      	movs	r0, #1
   1da18:	e7b1      	b.n	1d97e <rx_complete_cb+0x22>
                    RNG_STATS_INC(rx_complete);
   1da1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1da1c:	3301      	adds	r3, #1
   1da1e:	62a3      	str	r3, [r4, #40]	; 0x28
                    rng->idx++;     // confirmed frame advance
   1da20:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   1da24:	3301      	adds	r3, #1
   1da26:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
   1da2a:	e7a7      	b.n	1d97c <rx_complete_cb+0x20>
   1da2c:	0000      	movs	r0, r0
	...

0001da30 <uwb_rng_twr_to_tof>:
    twr_frame_t * first_frame = rng->frames[(uint16_t)(idx-1)%rng->nframes];
   1da30:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    twr_frame_t * frame = rng->frames[(idx)%rng->nframes];
   1da34:	fbb1 f3f2 	udiv	r3, r1, r2
   1da38:	fb02 1313 	mls	r3, r2, r3, r1
{
   1da3c:	b570      	push	{r4, r5, r6, lr}
    twr_frame_t * frame = rng->frames[(idx)%rng->nframes];
   1da3e:	b29b      	uxth	r3, r3
   1da40:	eb00 0383 	add.w	r3, r0, r3, lsl #2
{
   1da44:	b088      	sub	sp, #32
    twr_frame_t * frame = rng->frames[(idx)%rng->nframes];
   1da46:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
    switch(frame->code) {
   1da4a:	f8b4 3009 	ldrh.w	r3, [r4, #9]
   1da4e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
   1da52:	d205      	bcs.n	1da60 <uwb_rng_twr_to_tof+0x30>
   1da54:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
   1da58:	d22d      	bcs.n	1dab6 <uwb_rng_twr_to_tof+0x86>
   1da5a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 1dad8 <uwb_rng_twr_to_tof+0xa8>
    return ToF;
   1da5e:	e039      	b.n	1dad4 <uwb_rng_twr_to_tof+0xa4>
    switch(frame->code) {
   1da60:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
   1da64:	2b09      	cmp	r3, #9
   1da66:	d8f8      	bhi.n	1da5a <uwb_rng_twr_to_tof+0x2a>
    twr_frame_t * first_frame = rng->frames[(uint16_t)(idx-1)%rng->nframes];
   1da68:	3901      	subs	r1, #1
   1da6a:	b289      	uxth	r1, r1
   1da6c:	fbb1 f3f2 	udiv	r3, r1, r2
   1da70:	fb02 1113 	mls	r1, r2, r3, r1
   1da74:	b289      	uxth	r1, r1
   1da76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
                              frame->transmission_timestamp, frame->reception_timestamp);
   1da7a:	f8d4 600b 	ldr.w	r6, [r4, #11]
    twr_frame_t * first_frame = rng->frames[(uint16_t)(idx-1)%rng->nframes];
   1da7e:	f8d1 509c 	ldr.w	r5, [r1, #156]	; 0x9c
            ToF = calc_tof_ds(first_frame->response_timestamp, first_frame->request_timestamp,
   1da82:	2300      	movs	r3, #0
                              first_frame->transmission_timestamp, first_frame->reception_timestamp,
   1da84:	f8d5 200f 	ldr.w	r2, [r5, #15]
            ToF = calc_tof_ds(first_frame->response_timestamp, first_frame->request_timestamp,
   1da88:	f8d5 1013 	ldr.w	r1, [r5, #19]
   1da8c:	f8d5 0017 	ldr.w	r0, [r5, #23]
   1da90:	e9cd 6306 	strd	r6, r3, [sp, #24]
                              frame->transmission_timestamp, frame->reception_timestamp);
   1da94:	f8d4 600f 	ldr.w	r6, [r4, #15]
            ToF = calc_tof_ds(first_frame->response_timestamp, first_frame->request_timestamp,
   1da98:	e9cd 6304 	strd	r6, r3, [sp, #16]
   1da9c:	f8d4 6013 	ldr.w	r6, [r4, #19]
   1daa0:	9603      	str	r6, [sp, #12]
   1daa2:	f8d4 4017 	ldr.w	r4, [r4, #23]
   1daa6:	9402      	str	r4, [sp, #8]
                              first_frame->transmission_timestamp, first_frame->reception_timestamp,
   1daa8:	f8d5 400b 	ldr.w	r4, [r5, #11]
            ToF = calc_tof_ds(first_frame->response_timestamp, first_frame->request_timestamp,
   1daac:	e9cd 4300 	strd	r4, r3, [sp]
   1dab0:	f7ee ffc2 	bl	ca38 <calc_tof_ds>
            break;
   1dab4:	e00e      	b.n	1dad4 <uwb_rng_twr_to_tof+0xa4>
                              frame->transmission_timestamp, frame->reception_timestamp, skew);
   1dab6:	f8d4 200f 	ldr.w	r2, [r4, #15]
            ToF = calc_tof_ss(frame->response_timestamp, frame->request_timestamp,
   1daba:	f8d4 1013 	ldr.w	r1, [r4, #19]
   1dabe:	f8d4 0017 	ldr.w	r0, [r4, #23]
                              frame->transmission_timestamp, frame->reception_timestamp, skew);
   1dac2:	f8d4 400b 	ldr.w	r4, [r4, #11]
            ToF = calc_tof_ss(frame->response_timestamp, frame->request_timestamp,
   1dac6:	2300      	movs	r3, #0
   1dac8:	e9cd 4300 	strd	r4, r3, [sp]
   1dacc:	ed9f 0b02 	vldr	d0, [pc, #8]	; 1dad8 <uwb_rng_twr_to_tof+0xa8>
   1dad0:	f7ee ff82 	bl	c9d8 <calc_tof_ss>
}
   1dad4:	b008      	add	sp, #32
   1dad6:	bd70      	pop	{r4, r5, r6, pc}
	...

0001dae0 <tx_final_cb>:
 *
 * @return void
 */
static bool
tx_final_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1dae0:	b570      	push	{r4, r5, r6, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1dae2:	684e      	ldr	r6, [r1, #4]
    twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   1dae4:	f8b6 207a 	ldrh.w	r2, [r6, #122]	; 0x7a
   1dae8:	f8b6 3076 	ldrh.w	r3, [r6, #118]	; 0x76
   1daec:	fbb3 f1f2 	udiv	r1, r3, r2
   1daf0:	fb02 3311 	mls	r3, r2, r1, r3
   1daf4:	b29b      	uxth	r3, r3
   1daf6:	eb06 0383 	add.w	r3, r6, r3, lsl #2

    frame->remote.cartesian.x = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_X));
   1dafa:	2200      	movs	r2, #0
    twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   1dafc:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
    frame->remote.cartesian.x = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_X));
   1db00:	2300      	movs	r3, #0
   1db02:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
    frame->remote.cartesian.y = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_Y));
   1db06:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    frame->remote.cartesian.z = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_Z));
   1db0a:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    if (inst->capabilities.single_receiver_pdoa) {
   1db0e:	f890 34b2 	ldrb.w	r3, [r0, #1202]	; 0x4b2
   1db12:	079a      	lsls	r2, r3, #30
{
   1db14:	4605      	mov	r5, r0
    if (inst->capabilities.single_receiver_pdoa) {
   1db16:	d507      	bpl.n	1db28 <tx_final_cb+0x48>
 * @return pdoa (radians) on success
 */
UWB_API_IMPL_PREFIX dpl_float32_t
uwb_calc_pdoa(struct uwb_dev * dev, struct uwb_dev_rxdiag * diag)
{
    return (dev->uw_funcs->uf_calc_pdoa(dev, diag));
   1db18:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1db1a:	f8d0 14f8 	ldr.w	r1, [r0, #1272]	; 0x4f8
   1db1e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   1db22:	4798      	blx	r3
        frame->remote.pdoa = uwb_calc_pdoa(inst, inst->rxdiag);
   1db24:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
    }
    if (inst->capabilities.sts) {
   1db28:	f895 34b2 	ldrb.w	r3, [r5, #1202]	; 0x4b2
   1db2c:	07db      	lsls	r3, r3, #31
   1db2e:	d517      	bpl.n	1db60 <tx_final_cb+0x80>
        frame->remote.flags.has_sts = inst->config.rx.stsMode != DWT_STS_MODE_OFF;
   1db30:	f895 3518 	ldrb.w	r3, [r5, #1304]	; 0x518
   1db34:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   1db38:	3b00      	subs	r3, #0
   1db3a:	bf18      	it	ne
   1db3c:	2301      	movne	r3, #1
   1db3e:	f363 0200 	bfi	r2, r3, #0, #1
        frame->local.flags.has_valid_sts = !(inst->status.sts_ts_error || inst->status.sts_pream_error);
   1db42:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
        frame->remote.flags.has_sts = inst->config.rx.stsMode != DWT_STS_MODE_OFF;
   1db46:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
        frame->local.flags.has_valid_sts = !(inst->status.sts_ts_error || inst->status.sts_pream_error);
   1db4a:	f013 0f30 	tst.w	r3, #48	; 0x30
   1db4e:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1db52:	bf0c      	ite	eq
   1db54:	2201      	moveq	r2, #1
   1db56:	2200      	movne	r2, #0
   1db58:	f362 0341 	bfi	r3, r2, #1, #1
   1db5c:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
    return (dev->uw_funcs->uf_calc_rssi(dev, diag));
   1db60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1db62:	f8d5 14f8 	ldr.w	r1, [r5, #1272]	; 0x4f8
   1db66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   1db6a:	4628      	mov	r0, r5
   1db6c:	4798      	blx	r3
    return (dev->uw_funcs->uf_calc_fppl(dev, diag));
   1db6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1db70:	f8d5 14f8 	ldr.w	r1, [r5, #1272]	; 0x4f8
   1db74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
    }
    frame->remote.rssi = uwb_calc_rssi(inst, inst->rxdiag);
   1db78:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
   1db7c:	4628      	mov	r0, r5
   1db7e:	4798      	blx	r3
    frame->remote.fppl = uwb_calc_fppl(inst, inst->rxdiag);

    if (frame->code != UWB_DATA_CODE_SS_TWR_EXT_T1) {
   1db80:	f8b4 2009 	ldrh.w	r2, [r4, #9]
    frame->remote.fppl = uwb_calc_fppl(inst, inst->rxdiag);
   1db84:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c
    if (frame->code != UWB_DATA_CODE_SS_TWR_EXT_T1) {
   1db88:	f240 1315 	movw	r3, #277	; 0x115
   1db8c:	429a      	cmp	r2, r3
   1db8e:	d02f      	beq.n	1dbf0 <tx_final_cb+0x110>
                                                         range)
                );
            frame->spherical.range = range - bias;
        }
#else
        frame->remote.spherical.range = uwb_rng_tof_to_meters(uwb_rng_twr_to_tof(rng,rng->idx));
   1db90:	f8b6 1076 	ldrh.w	r1, [r6, #118]	; 0x76
   1db94:	4630      	mov	r0, r6
   1db96:	f7ff ff4b 	bl	1da30 <uwb_rng_twr_to_tof>
   1db9a:	f7ee fef9 	bl	c990 <uwb_rng_tof_to_meters>
#endif
        frame->remote.spherical_variance.range = DPL_FLOAT64_I32_TO_F64(MYNEWT_VAL(RANGE_VARIANCE));
   1db9e:	a31c      	add	r3, pc, #112	; (adr r3, 1dc10 <tx_final_cb+0x130>)
   1dba0:	e9d3 2300 	ldrd	r2, r3, [r3]
        frame->remote.spherical.range = uwb_rng_tof_to_meters(uwb_rng_twr_to_tof(rng,rng->idx));
   1dba4:	ed84 0b08 	vstr	d0, [r4, #32]
        frame->remote.spherical_variance.range = DPL_FLOAT64_I32_TO_F64(MYNEWT_VAL(RANGE_VARIANCE));
   1dba8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    } else {
        frame->remote.spherical.range = DPL_FLOAT64_NAN();
    }
    frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(-1.0);
    frame->remote.spherical_variance.zenith = DPL_FLOAT64_INIT(-1.0);
    if (!DPL_FLOAT32_ISNAN(frame->remote.pdoa)) {
   1dbac:	ed94 0a1c 	vldr	s0, [r4, #112]	; 0x70
    frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(-1.0);
   1dbb0:	4b15      	ldr	r3, [pc, #84]	; (1dc08 <tx_final_cb+0x128>)
    if (!DPL_FLOAT32_ISNAN(frame->remote.pdoa)) {
   1dbb2:	eeb4 0a40 	vcmp.f32	s0, s0
    frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(-1.0);
   1dbb6:	2200      	movs	r2, #0
    if (!DPL_FLOAT32_ISNAN(frame->remote.pdoa)) {
   1dbb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(-1.0);
   1dbbc:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    frame->remote.spherical_variance.zenith = DPL_FLOAT64_INIT(-1.0);
   1dbc0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    if (!DPL_FLOAT32_ISNAN(frame->remote.pdoa)) {
   1dbc4:	d612      	bvs.n	1dbec <tx_final_cb+0x10c>
        frame->remote.spherical.azimuth = DPL_FLOAT64_FROM_F32(uwb_calc_aoa(
   1dbc6:	f505 639a 	add.w	r3, r5, #1232	; 0x4d0
   1dbca:	edd3 0a00 	vldr	s1, [r3]
   1dbce:	f895 050c 	ldrb.w	r0, [r5, #1292]	; 0x50c
   1dbd2:	f7eb f81d 	bl	8c10 <uwb_calc_aoa>
   1dbd6:	ee10 0a10 	vmov	r0, s0
   1dbda:	f002 f919 	bl	1fe10 <__aeabi_f2d>
            frame->remote.pdoa, inst->config.channel, inst->rx_ant_separation)
            );
        frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(MYNEWT_VAL(AZIMUTH_VARIANCE));
   1dbde:	a308      	add	r3, pc, #32	; (adr r3, 1dc00 <tx_final_cb+0x120>)
   1dbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
        frame->remote.spherical.azimuth = DPL_FLOAT64_FROM_F32(uwb_calc_aoa(
   1dbe4:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
        frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(MYNEWT_VAL(AZIMUTH_VARIANCE));
   1dbe8:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }

    return true;
}
   1dbec:	2001      	movs	r0, #1
   1dbee:	bd70      	pop	{r4, r5, r6, pc}
        frame->remote.spherical.range = DPL_FLOAT64_NAN();
   1dbf0:	4b06      	ldr	r3, [pc, #24]	; (1dc0c <tx_final_cb+0x12c>)
   1dbf2:	2200      	movs	r2, #0
   1dbf4:	e9c4 2308 	strd	r2, r3, [r4, #32]
   1dbf8:	e7d8      	b.n	1dbac <tx_final_cb+0xcc>
   1dbfa:	bf00      	nop
   1dbfc:	f3af 8000 	nop.w
   1dc00:	00000000 	.word	0x00000000
   1dc04:	3f9dcc64 	.word	0x3f9dcc64
   1dc08:	bff00000 	.word	0xbff00000
   1dc0c:	7ff80000 	.word	0x7ff80000
   1dc10:	00000000 	.word	0x00000000
   1dc14:	3f41d718 	.word	0x3f41d718

0001dc18 <rng_issue_complete>:
{
   1dc18:	b538      	push	{r3, r4, r5, lr}
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
   1dc1a:	f8d0 4530 	ldr.w	r4, [r0, #1328]	; 0x530
{
   1dc1e:	4605      	mov	r5, r0
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
   1dc20:	b134      	cbz	r4, 1dc30 <rng_issue_complete+0x18>
            if (cbs_i != NULL && cbs_i->complete_cb)
   1dc22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1dc24:	b113      	cbz	r3, 1dc2c <rng_issue_complete+0x14>
                if(cbs_i->complete_cb(inst, cbs_i)) continue;
   1dc26:	4621      	mov	r1, r4
   1dc28:	4628      	mov	r0, r5
   1dc2a:	4798      	blx	r3
        SLIST_FOREACH(cbs_i, &inst->interface_cbs, next) {
   1dc2c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   1dc2e:	e7f7      	b.n	1dc20 <rng_issue_complete+0x8>
}
   1dc30:	bd38      	pop	{r3, r4, r5, pc}

0001dc32 <tx_complete_cb>:
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   1dc32:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
{
   1dc36:	b538      	push	{r3, r4, r5, lr}
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   1dc38:	f648 0341 	movw	r3, #34881	; 0x8841
   1dc3c:	429a      	cmp	r2, r3
{
   1dc3e:	4605      	mov	r5, r0
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   1dc40:	d120      	bne.n	1dc84 <tx_complete_cb+0x52>
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1dc42:	684c      	ldr	r4, [r1, #4]
    if(dpl_sem_get_count(&rng->sem) == 1) {
   1dc44:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   1dc48:	2b01      	cmp	r3, #1
   1dc4a:	d01b      	beq.n	1dc84 <tx_complete_cb+0x52>
    switch(rng->code) {
   1dc4c:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   1dc50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
   1dc54:	2b19      	cmp	r3, #25
   1dc56:	d815      	bhi.n	1dc84 <tx_complete_cb+0x52>
            RNG_STATS_INC(tx_complete);
   1dc58:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dc5a:	3301      	adds	r3, #1
   1dc5c:	6263      	str	r3, [r4, #36]	; 0x24
            if (rng->control.complete_after_tx) {
   1dc5e:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1dc62:	079b      	lsls	r3, r3, #30
   1dc64:	d506      	bpl.n	1dc74 <tx_complete_cb+0x42>
   1dc66:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1dc6a:	f7eb ffe3 	bl	9c34 <os_sem_release>
                rng_issue_complete(inst);
   1dc6e:	4628      	mov	r0, r5
   1dc70:	f7ff ffd2 	bl	1dc18 <rng_issue_complete>
            rng->control.complete_after_tx = 0;
   1dc74:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1dc78:	f36f 0341 	bfc	r3, #1, #1
   1dc7c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
            return true;
   1dc80:	2001      	movs	r0, #1
}
   1dc82:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   1dc84:	2000      	movs	r0, #0
   1dc86:	e7fc      	b.n	1dc82 <tx_complete_cb+0x50>

0001dc88 <uwb_rng_pkg_init>:
 * @return void
 */

void
uwb_rng_pkg_init(void)
{
   1dc88:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_rng_instance *rng;
    struct uwb_dev *udev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"rng_pkg_init\"}\n",
   1dc8a:	f7f3 faf1 	bl	11270 <dpl_cputime_get32>
   1dc8e:	4601      	mov	r1, r0
   1dc90:	480c      	ldr	r0, [pc, #48]	; (1dcc4 <uwb_rng_pkg_init+0x3c>)
   1dc92:	f7f1 ffa3 	bl	fbdc <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
        udev = uwb_dev_idx_lookup(i);
   1dc96:	2000      	movs	r0, #0
   1dc98:	f7ea fed6 	bl	8a48 <uwb_dev_idx_lookup>
        if (!udev) continue;
   1dc9c:	4604      	mov	r4, r0
   1dc9e:	b178      	cbz	r0, 1dcc0 <uwb_rng_pkg_init+0x38>
        g_cbs[i].inst_ptr = rng = uwb_rng_init(udev, &g_config, sizeof(g_twr_frames[i])/sizeof(g_twr_frames[i][0]));
   1dca0:	4909      	ldr	r1, [pc, #36]	; (1dcc8 <uwb_rng_pkg_init+0x40>)
   1dca2:	4d0a      	ldr	r5, [pc, #40]	; (1dccc <uwb_rng_pkg_init+0x44>)
   1dca4:	2204      	movs	r2, #4
   1dca6:	f7ff fdeb 	bl	1d880 <uwb_rng_init>
        uwb_rng_set_frames(rng, g_twr_frames[i], sizeof(g_twr_frames[0])/sizeof(g_twr_frames[0][0]));
   1dcaa:	4909      	ldr	r1, [pc, #36]	; (1dcd0 <uwb_rng_pkg_init+0x48>)
        g_cbs[i].inst_ptr = rng = uwb_rng_init(udev, &g_config, sizeof(g_twr_frames[i])/sizeof(g_twr_frames[i][0]));
   1dcac:	6068      	str	r0, [r5, #4]
        uwb_rng_set_frames(rng, g_twr_frames[i], sizeof(g_twr_frames[0])/sizeof(g_twr_frames[0][0]));
   1dcae:	2204      	movs	r2, #4
   1dcb0:	f7ff fdc0 	bl	1d834 <uwb_rng_set_frames>
        uwb_mac_append_interface(udev, &g_cbs[i]);
   1dcb4:	4629      	mov	r1, r5
   1dcb6:	4620      	mov	r0, r4
#if __KERNEL__
        rng_chrdev_create(udev->idx);
#endif
    }

}
   1dcb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        uwb_mac_append_interface(udev, &g_cbs[i]);
   1dcbc:	f7ea beee 	b.w	8a9c <uwb_mac_append_interface>
}
   1dcc0:	bd38      	pop	{r3, r4, r5, pc}
   1dcc2:	bf00      	nop
   1dcc4:	00023c41 	.word	0x00023c41
   1dcc8:	20000f28 	.word	0x20000f28
   1dccc:	20000eec 	.word	0x20000eec
   1dcd0:	20004c58 	.word	0x20004c58

0001dcd4 <uwb_rng_pkg_init2>:
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
        if (!g_cbs[i].inst_ptr) continue;
        uwbrng_sysfs_init((struct uwb_rng_instance *)g_cbs[i].inst_ptr);
    }
#endif
}
   1dcd4:	4770      	bx	lr
	...

0001dcd8 <uwb_rng_pkg_down>:

int
uwb_rng_pkg_down(int reason)
{
   1dcd8:	b510      	push	{r4, lr}
    int i;
    struct uwb_rng_instance * rng;

    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
   1dcda:	4c07      	ldr	r4, [pc, #28]	; (1dcf8 <uwb_rng_pkg_down+0x20>)
   1dcdc:	6863      	ldr	r3, [r4, #4]
        if (!rng) continue;
   1dcde:	b143      	cbz	r3, 1dcf2 <uwb_rng_pkg_down+0x1a>
#if __KERNEL__
        rng_chrdev_destroy(rng->dev_inst->idx);
        uwbrng_sysfs_deinit(rng->dev_inst->idx);
#endif
        uwb_mac_remove_interface(rng->dev_inst, g_cbs[i].id);
   1dce0:	6818      	ldr	r0, [r3, #0]
   1dce2:	8861      	ldrh	r1, [r4, #2]
   1dce4:	f7ea fef7 	bl	8ad6 <uwb_mac_remove_interface>
        uwb_rng_free(g_cbs[i].inst_ptr);
   1dce8:	6860      	ldr	r0, [r4, #4]
   1dcea:	f7ff fd91 	bl	1d810 <uwb_rng_free>
        g_cbs[i].inst_ptr = 0;
   1dcee:	2300      	movs	r3, #0
   1dcf0:	6063      	str	r3, [r4, #4]
    }

    return 0;
}
   1dcf2:	2000      	movs	r0, #0
   1dcf4:	bd10      	pop	{r4, pc}
   1dcf6:	bf00      	nop
   1dcf8:	20000eec 	.word	0x20000eec

0001dcfc <wcs_timescale_cb>:
 *
 * returns none
 */
static bool
wcs_timescale_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1dcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct uwb_wcs_instance * wcs = (struct uwb_wcs_instance *)cbs->inst_ptr;
   1dcfe:	684c      	ldr	r4, [r1, #4]
    struct uwb_ccp_instance * ccp = wcs->ccp;
   1dd00:	6e22      	ldr	r2, [r4, #96]	; 0x60

    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx)%ccp->nframes];
    wcs->carrier_integrator = frame->carrier_integrator;
    wcs->observed_interval = (ccp->local_epoch - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL; // Observed ccp interval
   1dd02:	7f25      	ldrb	r5, [r4, #28]
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx)%ccp->nframes];
   1dd04:	f8b2 10ec 	ldrh.w	r1, [r2, #236]	; 0xec
   1dd08:	f8b2 30ee 	ldrh.w	r3, [r2, #238]	; 0xee
   1dd0c:	fbb3 f0f1 	udiv	r0, r3, r1
   1dd10:	fb01 3310 	mls	r3, r1, r0, r3
   1dd14:	b29b      	uxth	r3, r3
   1dd16:	33e0      	adds	r3, #224	; 0xe0
    wcs->observed_interval = (ccp->local_epoch - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL; // Observed ccp interval
   1dd18:	69a1      	ldr	r1, [r4, #24]
    wcs->carrier_integrator = frame->carrier_integrator;
   1dd1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1dd1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dd20:	63a3      	str	r3, [r4, #56]	; 0x38
    wcs->observed_interval = (ccp->local_epoch - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL; // Observed ccp interval
   1dd22:	e9d2 0336 	ldrd	r0, r3, [r2, #216]	; 0xd8
   1dd26:	1a40      	subs	r0, r0, r1
   1dd28:	eb63 0305 	sbc.w	r3, r3, r5
    wcs->master_epoch.timestamp = ccp->master_epoch.timestamp;
    wcs->local_epoch.timestamp += wcs->observed_interval;
   1dd2c:	69e5      	ldr	r5, [r4, #28]
   1dd2e:	1809      	adds	r1, r1, r0
    wcs->observed_interval = (ccp->local_epoch - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL; // Observed ccp interval
   1dd30:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1dd34:	e9c4 0302 	strd	r0, r3, [r4, #8]
    wcs->local_epoch.timestamp += wcs->observed_interval;
   1dd38:	eb43 0305 	adc.w	r3, r3, r5
    wcs->master_epoch.timestamp = ccp->master_epoch.timestamp;
   1dd3c:	e9d2 6734 	ldrd	r6, r7, [r2, #208]	; 0xd0
    wcs->local_epoch.timestamp += wcs->observed_interval;
   1dd40:	e9c4 1306 	strd	r1, r3, [r4, #24]

    if(ccp->status.valid){
   1dd44:	f892 30c8 	ldrb.w	r3, [r2, #200]	; 0xc8
   1dd48:	f013 0304 	ands.w	r3, r3, #4
    wcs->master_epoch.timestamp = ccp->master_epoch.timestamp;
   1dd4c:	e9c4 6704 	strd	r6, r7, [r4, #16]
    if(ccp->status.valid){
   1dd50:	d00a      	beq.n	1dd68 <wcs_timescale_cb+0x6c>
        if (wcs->config.postprocess == true)
   1dd52:	7923      	ldrb	r3, [r4, #4]
   1dd54:	07db      	lsls	r3, r3, #31
   1dd56:	d505      	bpl.n	1dd64 <wcs_timescale_cb+0x68>
    return (struct dpl_eventq *) os_eventq_dflt_get();
   1dd58:	f7eb fc60 	bl	961c <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   1dd5c:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1dd60:	f7eb fbb5 	bl	94ce <os_eventq_put>
        wcs->fractional_skew = (dpl_float64_t) 0.0l;
        wcs->status.initialized = 0;
    }
    return true;

}
   1dd64:	2001      	movs	r0, #1
   1dd66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        wcs->normalized_skew = (dpl_float64_t) 1.0l;
   1dd68:	4906      	ldr	r1, [pc, #24]	; (1dd84 <wcs_timescale_cb+0x88>)
        wcs->status.initialized = 0;
   1dd6a:	7822      	ldrb	r2, [r4, #0]
        wcs->normalized_skew = (dpl_float64_t) 1.0l;
   1dd6c:	2000      	movs	r0, #0
   1dd6e:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
        wcs->status.initialized = 0;
   1dd72:	f363 0241 	bfi	r2, r3, #1, #1
        wcs->fractional_skew = (dpl_float64_t) 0.0l;
   1dd76:	2000      	movs	r0, #0
   1dd78:	2100      	movs	r1, #0
   1dd7a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
        wcs->status.initialized = 0;
   1dd7e:	7022      	strb	r2, [r4, #0]
   1dd80:	e7f0      	b.n	1dd64 <wcs_timescale_cb+0x68>
   1dd82:	bf00      	nop
   1dd84:	3ff00000 	.word	0x3ff00000

0001dd88 <wcs_timescale_ev>:
 *
 * returns none
 */
void
wcs_timescale_ev(struct dpl_event * ev)
{
   1dd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dd8c:	b090      	sub	sp, #64	; 0x40
    assert(ev != NULL);
   1dd8e:	b928      	cbnz	r0, 1dd9c <wcs_timescale_ev+0x14>
   1dd90:	2300      	movs	r3, #0
   1dd92:	461a      	mov	r2, r3
   1dd94:	4619      	mov	r1, r3
   1dd96:	4618      	mov	r0, r3
   1dd98:	f7eb f8ac 	bl	8ef4 <__assert_func>
    return ev->ev.ev_arg;
   1dd9c:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
   1dd9e:	2c00      	cmp	r4, #0
   1dda0:	d0f6      	beq.n	1dd90 <wcs_timescale_ev+0x8>

    struct uwb_wcs_instance * wcs = (struct uwb_wcs_instance *)dpl_event_get_arg(ev);
    struct uwb_ccp_instance * ccp = wcs->ccp;
   1dda2:	f8d4 a060 	ldr.w	sl, [r4, #96]	; 0x60
    uwb_wcs_states_t * states = (uwb_wcs_states_t *) wcs->states.array;
    timescale_instance_t * timescale = wcs->timescale;

    if(ccp->status.valid){
   1dda6:	f89a 30c8 	ldrb.w	r3, [sl, #200]	; 0xc8
   1ddaa:	075a      	lsls	r2, r3, #29
   1ddac:	d572      	bpl.n	1de94 <wcs_timescale_ev+0x10c>
        double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   1ddae:	4d5a      	ldr	r5, [pc, #360]	; (1df18 <wcs_timescale_ev+0x190>)
    timescale_instance_t * timescale = wcs->timescale;
   1ddb0:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
        double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   1ddb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ddb6:	ae04      	add	r6, sp, #16
   1ddb8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ddba:	e895 0003 	ldmia.w	r5, {r0, r1}
   1ddbe:	e886 0003 	stmia.w	r6, {r0, r1}

        if (wcs->status.initialized == 0){
            states->time = (double) wcs->master_epoch.lo;
   1ddc2:	6920      	ldr	r0, [r4, #16]
   1ddc4:	7d21      	ldrb	r1, [r4, #20]
   1ddc6:	f002 f845 	bl	1fe54 <__aeabi_ul2d>
   1ddca:	4680      	mov	r8, r0
            states->skew = (1.0l + (double ) uwb_calc_clock_offset_ratio(
   1ddcc:	f8da 0000 	ldr.w	r0, [sl]
        if (wcs->status.initialized == 0){
   1ddd0:	7822      	ldrb	r2, [r4, #0]
    return (dev->uw_funcs->uf_calc_clock_offset_ratio(dev, integrator_val, type));
   1ddd2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1ddd4:	f012 0202 	ands.w	r2, r2, #2
            states->time = (double) wcs->master_epoch.lo;
   1ddd8:	4689      	mov	r9, r1
   1ddda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
            states->skew = (1.0l + (double ) uwb_calc_clock_offset_ratio(
   1ddde:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   1dde0:	ae0a      	add	r6, sp, #40	; 0x28
        if (wcs->status.initialized == 0){
   1dde2:	d15a      	bne.n	1de9a <wcs_timescale_ev+0x112>
            states->time = (double) wcs->master_epoch.lo;
   1dde4:	e9c4 8908 	strd	r8, r9, [r4, #32]
   1dde8:	4798      	blx	r3
            states->skew = (1.0l + (double ) uwb_calc_clock_offset_ratio(
   1ddea:	4b4c      	ldr	r3, [pc, #304]	; (1df1c <wcs_timescale_ev+0x194>)
   1ddec:	ec51 0b10 	vmov	r0, r1, d0
   1ddf0:	2200      	movs	r2, #0
   1ddf2:	f001 feaf 	bl	1fb54 <__adddf3>
                                ccp->dev_inst, wcs->carrier_integrator,
                                UWB_CR_CARRIER_INTEGRATOR)) * MYNEWT_VAL(UWB_WCS_DTU) ;
   1ddf6:	a344      	add	r3, pc, #272	; (adr r3, 1df08 <wcs_timescale_ev+0x180>)
   1ddf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ddfc:	f002 f860 	bl	1fec0 <__aeabi_dmul>
            states->drift = 0;
            double x0[] = {states->time, states->skew, states->drift};
   1de00:	e9d4 8908 	ldrd	r8, r9, [r4, #32]
            states->drift = 0;
   1de04:	2300      	movs	r3, #0
   1de06:	2200      	movs	r2, #0
            states->skew = (1.0l + (double ) uwb_calc_clock_offset_ratio(
   1de08:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            states->drift = 0;
   1de0c:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
            double T = 1e-6l * MYNEWT_VAL(UWB_CCP_PERIOD);
            timescale = timescale_init(timescale, x0, q, T);
   1de10:	ed9f 0b3f 	vldr	d0, [pc, #252]	; 1df10 <wcs_timescale_ev+0x188>
            double x0[] = {states->time, states->skew, states->drift};
   1de14:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1de18:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
            timescale = timescale_init(timescale, x0, q, T);
   1de1c:	4631      	mov	r1, r6
   1de1e:	4638      	mov	r0, r7
   1de20:	aa04      	add	r2, sp, #16
            double x0[] = {states->time, states->skew, states->drift};
   1de22:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
            timescale = timescale_init(timescale, x0, q, T);
   1de26:	f7fe f839 	bl	1be9c <timescale_init>
            ((timescale_states_t * )timescale->eke->x)->time = states->time;
   1de2a:	6803      	ldr	r3, [r0, #0]
            timescale = timescale_init(timescale, x0, q, T);
   1de2c:	4607      	mov	r7, r0
            ((timescale_states_t * )timescale->eke->x)->time = states->time;
   1de2e:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   1de32:	689b      	ldr	r3, [r3, #8]
   1de34:	e9c3 0100 	strd	r0, r1, [r3]
            ((timescale_states_t * )timescale->eke->x)->skew = states->skew;
   1de38:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
   1de3c:	e9c3 0102 	strd	r0, r1, [r3, #8]
            ((timescale_states_t * )timescale->eke->x)->drift =states->drift;
   1de40:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   1de44:	e9c3 0104 	strd	r0, r1, [r3, #16]
            wcs->status.valid = wcs->status.initialized = 1;
   1de48:	7823      	ldrb	r3, [r4, #0]
   1de4a:	f023 0306 	bic.w	r3, r3, #6
   1de4e:	f043 0306 	orr.w	r3, r3, #6
                               ccp->dev_inst, wcs->carrier_integrator,
                               UWB_CR_CARRIER_INTEGRATOR)) * MYNEWT_VAL(UWB_WCS_DTU)
            };
            double T = wcs->observed_interval / MYNEWT_VAL(UWB_WCS_DTU) ; // observed interval in seconds, master reference
            double r[] = {MYNEWT_VAL(TIMESCALE_RVAR), MYNEWT_VAL(UWB_WCS_DTU) * 1e20};
            wcs->status.valid = timescale_main(timescale, z, q, r, T).valid;
   1de52:	7023      	strb	r3, [r4, #0]
        }

        if (wcs->status.valid){
   1de54:	7823      	ldrb	r3, [r4, #0]
   1de56:	075b      	lsls	r3, r3, #29
   1de58:	d54c      	bpl.n	1def4 <wcs_timescale_ev+0x16c>
            states->time = ((timescale_states_t * )timescale->eke->x)->time;
   1de5a:	683b      	ldr	r3, [r7, #0]
   1de5c:	689b      	ldr	r3, [r3, #8]
   1de5e:	e9d3 0100 	ldrd	r0, r1, [r3]
   1de62:	e9c4 0108 	strd	r0, r1, [r4, #32]
            states->skew = ((timescale_states_t * )timescale->eke->x)->skew;
   1de66:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
            states->drift = ((timescale_states_t * )timescale->eke->x)->drift;
   1de6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
            states->skew = ((timescale_states_t * )timescale->eke->x)->skew;
   1de6e:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            states->drift = ((timescale_states_t * )timescale->eke->x)->drift;
   1de72:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
            wcs->normalized_skew = states->skew / MYNEWT_VAL(UWB_WCS_DTU);
   1de76:	a324      	add	r3, pc, #144	; (adr r3, 1df08 <wcs_timescale_ev+0x180>)
   1de78:	e9d3 2300 	ldrd	r2, r3, [r3]
   1de7c:	f002 f94a 	bl	20114 <__aeabi_ddiv>
   1de80:	4602      	mov	r2, r0
   1de82:	460b      	mov	r3, r1
   1de84:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
            wcs->fractional_skew = (dpl_float64_t) 1.0l - wcs->normalized_skew;
   1de88:	4924      	ldr	r1, [pc, #144]	; (1df1c <wcs_timescale_ev+0x194>)
   1de8a:	2000      	movs	r0, #0
   1de8c:	f001 fe60 	bl	1fb50 <__aeabi_dsub>
   1de90:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
        .ppm = DPL_FLOAT64_MUL(wcs->fractional_skew, DPL_FLOAT64_INIT(1e6l))
    };
    wcs_json_write_uint64(&json);
#endif
    }
}
   1de94:	b010      	add	sp, #64	; 0x40
   1de96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1de9a:	2200      	movs	r2, #0
            double z[] ={(double) wcs->master_epoch.lo,
   1de9c:	e9cd 8900 	strd	r8, r9, [sp]
   1dea0:	4798      	blx	r3
                        (1.0l + (double ) uwb_calc_clock_offset_ratio(
   1dea2:	4b1e      	ldr	r3, [pc, #120]	; (1df1c <wcs_timescale_ev+0x194>)
   1dea4:	ec51 0b10 	vmov	r0, r1, d0
   1dea8:	2200      	movs	r2, #0
   1deaa:	f001 fe53 	bl	1fb54 <__adddf3>
                               UWB_CR_CARRIER_INTEGRATOR)) * MYNEWT_VAL(UWB_WCS_DTU)
   1deae:	a316      	add	r3, pc, #88	; (adr r3, 1df08 <wcs_timescale_ev+0x180>)
   1deb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1deb4:	f002 f804 	bl	1fec0 <__aeabi_dmul>
            double z[] ={(double) wcs->master_epoch.lo,
   1deb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
            double T = wcs->observed_interval / MYNEWT_VAL(UWB_WCS_DTU) ; // observed interval in seconds, master reference
   1debc:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   1dec0:	f001 ffc8 	bl	1fe54 <__aeabi_ul2d>
   1dec4:	a310      	add	r3, pc, #64	; (adr r3, 1df08 <wcs_timescale_ev+0x180>)
   1dec6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1deca:	f002 f923 	bl	20114 <__aeabi_ddiv>
            double r[] = {MYNEWT_VAL(TIMESCALE_RVAR), MYNEWT_VAL(UWB_WCS_DTU) * 1e20};
   1dece:	3508      	adds	r5, #8
            double T = wcs->observed_interval / MYNEWT_VAL(UWB_WCS_DTU) ; // observed interval in seconds, master reference
   1ded0:	ec41 0b10 	vmov	d0, r0, r1
            double r[] = {MYNEWT_VAL(TIMESCALE_RVAR), MYNEWT_VAL(UWB_WCS_DTU) * 1e20};
   1ded4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1ded8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            wcs->status.valid = timescale_main(timescale, z, q, r, T).valid;
   1dedc:	4633      	mov	r3, r6
   1dede:	aa04      	add	r2, sp, #16
   1dee0:	4669      	mov	r1, sp
   1dee2:	4638      	mov	r0, r7
   1dee4:	f7fe f870 	bl	1bfc8 <timescale_main>
   1dee8:	7823      	ldrb	r3, [r4, #0]
   1deea:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1deee:	f360 0382 	bfi	r3, r0, #2, #1
   1def2:	e7ae      	b.n	1de52 <wcs_timescale_ev+0xca>
            wcs->normalized_skew = (dpl_float64_t) 1.0l;
   1def4:	4b09      	ldr	r3, [pc, #36]	; (1df1c <wcs_timescale_ev+0x194>)
   1def6:	2200      	movs	r2, #0
   1def8:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
            wcs->fractional_skew = (dpl_float64_t) 0.0l;
   1defc:	2200      	movs	r2, #0
   1defe:	2300      	movs	r3, #0
   1df00:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
}
   1df04:	e7c6      	b.n	1de94 <wcs_timescale_ev+0x10c>
   1df06:	bf00      	nop
   1df08:	00000000 	.word	0x00000000
   1df0c:	422e8480 	.word	0x422e8480
   1df10:	a0b5ed8d 	.word	0xa0b5ed8d
   1df14:	3ff0c6f7 	.word	0x3ff0c6f7
   1df18:	00023d00 	.word	0x00023d00
   1df1c:	3ff00000 	.word	0x3ff00000

0001df20 <wcs_timescale_init>:
wcs_timescale_init(struct uwb_wcs_instance * wcs){
   1df20:	b5f0      	push	{r4, r5, r6, r7, lr}
    double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   1df22:	4e1d      	ldr	r6, [pc, #116]	; (1df98 <wcs_timescale_init+0x78>)
    struct uwb_ccp_instance * ccp = wcs->ccp;
   1df24:	6e07      	ldr	r7, [r0, #96]	; 0x60
wcs_timescale_init(struct uwb_wcs_instance * wcs){
   1df26:	4604      	mov	r4, r0
    double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   1df28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
wcs_timescale_init(struct uwb_wcs_instance * wcs){
   1df2a:	b087      	sub	sp, #28
    double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   1df2c:	466d      	mov	r5, sp
   1df2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1df30:	e896 0003 	ldmia.w	r6, {r0, r1}
   1df34:	e885 0003 	stmia.w	r5, {r0, r1}
    wcs->timescale = timescale_init(NULL, NULL, q, T);
   1df38:	2100      	movs	r1, #0
   1df3a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 1df90 <wcs_timescale_init+0x70>
   1df3e:	466a      	mov	r2, sp
   1df40:	4608      	mov	r0, r1
   1df42:	f7fd ffab 	bl	1be9c <timescale_init>
    wcs->cbs = (struct uwb_mac_interface){
   1df46:	f104 0364 	add.w	r3, r4, #100	; 0x64
    wcs->timescale = timescale_init(NULL, NULL, q, T);
   1df4a:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    wcs->cbs = (struct uwb_mac_interface){
   1df4e:	223c      	movs	r2, #60	; 0x3c
   1df50:	2100      	movs	r1, #0
   1df52:	4618      	mov	r0, r3
   1df54:	f7f1 fb53 	bl	f5fe <memset>
    wcs->normalized_skew = (dpl_float64_t) 1.0l;
   1df58:	4910      	ldr	r1, [pc, #64]	; (1df9c <wcs_timescale_init+0x7c>)
    wcs->cbs = (struct uwb_mac_interface){
   1df5a:	66a4      	str	r4, [r4, #104]	; 0x68
   1df5c:	4603      	mov	r3, r0
   1df5e:	2202      	movs	r2, #2
    wcs->normalized_skew = (dpl_float64_t) 1.0l;
   1df60:	2000      	movs	r0, #0
   1df62:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    wcs->cbs = (struct uwb_mac_interface){
   1df66:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
    wcs->fractional_skew = (dpl_float64_t) 0.0l;
   1df6a:	2000      	movs	r0, #0
    wcs->cbs = (struct uwb_mac_interface){
   1df6c:	4a0c      	ldr	r2, [pc, #48]	; (1dfa0 <wcs_timescale_init+0x80>)
   1df6e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
    wcs->fractional_skew = (dpl_float64_t) 0.0l;
   1df72:	2100      	movs	r1, #0
   1df74:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    uwb_mac_append_interface(ccp->dev_inst, &wcs->cbs);
   1df78:	4619      	mov	r1, r3
   1df7a:	6838      	ldr	r0, [r7, #0]
   1df7c:	f7ea fd8e 	bl	8a9c <uwb_mac_append_interface>
    uwb_wcs_set_postprocess(wcs, &wcs_timescale_ev);      // Using default process
   1df80:	4620      	mov	r0, r4
   1df82:	4908      	ldr	r1, [pc, #32]	; (1dfa4 <wcs_timescale_init+0x84>)
   1df84:	f7f1 f938 	bl	f1f8 <uwb_wcs_set_postprocess>
}
   1df88:	4620      	mov	r0, r4
   1df8a:	b007      	add	sp, #28
   1df8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1df8e:	bf00      	nop
   1df90:	a0b5ed8d 	.word	0xa0b5ed8d
   1df94:	3ff0c6f7 	.word	0x3ff0c6f7
   1df98:	00023d00 	.word	0x00023d00
   1df9c:	3ff00000 	.word	0x3ff00000
   1dfa0:	0001dcfd 	.word	0x0001dcfd
   1dfa4:	0001dd89 	.word	0x0001dd89

0001dfa8 <wcs_timescale_free>:
{
   1dfa8:	b510      	push	{r4, lr}
    uwb_mac_remove_interface(wcs->ccp->dev_inst, wcs->cbs.id);
   1dfaa:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1dfac:	f8b0 1066 	ldrh.w	r1, [r0, #102]	; 0x66
{
   1dfb0:	4604      	mov	r4, r0
    uwb_mac_remove_interface(wcs->ccp->dev_inst, wcs->cbs.id);
   1dfb2:	6818      	ldr	r0, [r3, #0]
   1dfb4:	f7ea fd8f 	bl	8ad6 <uwb_mac_remove_interface>
    timescale_free(wcs->timescale);
   1dfb8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}
   1dfbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    timescale_free(wcs->timescale);
   1dfc0:	f7fd bfe6 	b.w	1bf90 <timescale_free>

0001dfc4 <wcs_timescale_pkg_init>:
 *
 * @return void
 */
void
wcs_timescale_pkg_init(void)
{
   1dfc4:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;

#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %lu,\"msg\": \"wcs_timescale_pkg_init\"}\n",dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   1dfc6:	f7f3 f953 	bl	11270 <dpl_cputime_get32>
   1dfca:	4601      	mov	r1, r0
   1dfcc:	4808      	ldr	r0, [pc, #32]	; (1dff0 <wcs_timescale_pkg_init+0x2c>)
   1dfce:	f7f1 fe05 	bl	fbdc <printf>
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   1dfd2:	2400      	movs	r4, #0
        udev = uwb_dev_idx_lookup(i);
   1dfd4:	4620      	mov	r0, r4
   1dfd6:	f7ea fd37 	bl	8a48 <uwb_dev_idx_lookup>
        if (!udev) {
   1dfda:	b128      	cbz	r0, 1dfe8 <wcs_timescale_pkg_init+0x24>
            continue;
        }
        ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
   1dfdc:	2101      	movs	r1, #1
   1dfde:	f7ea fda7 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
        wcs_timescale_init(ccp->wcs);
   1dfe2:	6e80      	ldr	r0, [r0, #104]	; 0x68
   1dfe4:	f7ff ff9c 	bl	1df20 <wcs_timescale_init>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   1dfe8:	3401      	adds	r4, #1
   1dfea:	2c03      	cmp	r4, #3
   1dfec:	d1f2      	bne.n	1dfd4 <wcs_timescale_pkg_init+0x10>
    }
}
   1dfee:	bd10      	pop	{r4, pc}
   1dff0:	00023ccc 	.word	0x00023ccc

0001dff4 <wcs_timescale_pkg_down>:
 *
 * @return void
 */
int
wcs_timescale_pkg_down(int reason)
{
   1dff4:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_wcs_instance * wcs;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   1dff6:	2400      	movs	r4, #0
        udev = uwb_dev_idx_lookup(i);
   1dff8:	4620      	mov	r0, r4
   1dffa:	f7ea fd25 	bl	8a48 <uwb_dev_idx_lookup>
        if (!udev) {
   1dffe:	b128      	cbz	r0, 1e00c <wcs_timescale_pkg_down+0x18>
            continue;
        }
        wcs = (struct uwb_wcs_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_WCS);
   1e000:	2102      	movs	r1, #2
   1e002:	f7ea fd95 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
        if (!wcs) {
   1e006:	b108      	cbz	r0, 1e00c <wcs_timescale_pkg_down+0x18>
            continue;
        }
        wcs_timescale_free(wcs);
   1e008:	f7ff ffce 	bl	1dfa8 <wcs_timescale_free>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   1e00c:	3401      	adds	r4, #1
   1e00e:	2c03      	cmp	r4, #3
   1e010:	d1f2      	bne.n	1dff8 <wcs_timescale_pkg_down+0x4>
    }

    return 0;
}
   1e012:	2000      	movs	r0, #0
   1e014:	bd10      	pop	{r4, pc}

0001e016 <realloc>:
#include "malloc.h"

/* FIXME: This is cheesy, it should be fixed later */

void *realloc(void *ptr, size_t size)
{
   1e016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct free_arena_header *ah;
	void *newptr;
	size_t oldsize;

	if (!ptr)
   1e018:	4605      	mov	r5, r0
   1e01a:	b920      	cbnz	r0, 1e026 <realloc+0x10>
                } else {
                    newptr = ptr;
                }
		return newptr;
	}
}
   1e01c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return malloc(size);
   1e020:	4608      	mov	r0, r1
   1e022:	f7f1 ba59 	b.w	f4d8 <malloc>
	if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   1e026:	1e4b      	subs	r3, r1, #1
   1e028:	3312      	adds	r3, #18
   1e02a:	d904      	bls.n	1e036 <realloc+0x20>
		free(ptr);
   1e02c:	f7f1 faa0 	bl	f570 <free>
		return NULL;
   1e030:	2600      	movs	r6, #0
}
   1e032:	4630      	mov	r0, r6
   1e034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   1e036:	f850 7c0c 	ldr.w	r7, [r0, #-12]
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   1e03a:	f101 041f 	add.w	r4, r1, #31
   1e03e:	f024 040f 	bic.w	r4, r4, #15
	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   1e042:	42a7      	cmp	r7, r4
   1e044:	d304      	bcc.n	1e050 <realloc+0x3a>
   1e046:	ebb4 0f97 	cmp.w	r4, r7, lsr #2
   1e04a:	d301      	bcc.n	1e050 <realloc+0x3a>
		return NULL;
   1e04c:	462e      	mov	r6, r5
   1e04e:	e7f0      	b.n	1e032 <realloc+0x1c>
		newptr = malloc(size);
   1e050:	4620      	mov	r0, r4
   1e052:	f7f1 fa41 	bl	f4d8 <malloc>
		oldsize = ah->a.size - sizeof(struct arena_header);
   1e056:	3f10      	subs	r7, #16
                if (newptr) {
   1e058:	4606      	mov	r6, r0
   1e05a:	2800      	cmp	r0, #0
   1e05c:	d0f6      	beq.n	1e04c <realloc+0x36>
                    memcpy(newptr, ptr, (size < oldsize) ? size : oldsize);
   1e05e:	42bc      	cmp	r4, r7
   1e060:	4622      	mov	r2, r4
   1e062:	4629      	mov	r1, r5
   1e064:	bf28      	it	cs
   1e066:	463a      	movcs	r2, r7
   1e068:	f7f1 fabc 	bl	f5e4 <memcpy>
                    free(ptr);
   1e06c:	4628      	mov	r0, r5
   1e06e:	f7f1 fa7f 	bl	f570 <free>
   1e072:	e7de      	b.n	1e032 <realloc+0x1c>

0001e074 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1e074:	b40e      	push	{r1, r2, r3}
   1e076:	b503      	push	{r0, r1, lr}
   1e078:	ab03      	add	r3, sp, #12
	va_list ap;
	int rv;

	va_start(ap, format);
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1e07a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   1e07e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, format);
   1e082:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1e084:	f7f1 fdbc 	bl	fc00 <vsnprintf>
	va_end(ap);

	return rv;
}
   1e088:	b002      	add	sp, #8
   1e08a:	f85d eb04 	ldr.w	lr, [sp], #4
   1e08e:	b003      	add	sp, #12
   1e090:	4770      	bx	lr

0001e092 <strchr>:

#include <string.h>

char *strchr(const char *s, int c)
{
	while (*s != (char)c) {
   1e092:	4603      	mov	r3, r0
   1e094:	b2c9      	uxtb	r1, r1
   1e096:	781a      	ldrb	r2, [r3, #0]
   1e098:	428a      	cmp	r2, r1
   1e09a:	4618      	mov	r0, r3
   1e09c:	f103 0301 	add.w	r3, r3, #1
   1e0a0:	d100      	bne.n	1e0a4 <strchr+0x12>
   1e0a2:	4770      	bx	lr
		if (!*s)
   1e0a4:	2a00      	cmp	r2, #0
   1e0a6:	d1f6      	bne.n	1e096 <strchr+0x4>
			return NULL;
   1e0a8:	4610      	mov	r0, r2
		s++;
	}

	return (char *)s;
}
   1e0aa:	4770      	bx	lr

0001e0ac <strcpy>:

#include <string.h>

char *strcpy(char *dst, const char *src)
{
	char *q = dst;
   1e0ac:	4602      	mov	r2, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
   1e0ae:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e0b2:	f802 3b01 	strb.w	r3, [r2], #1
	} while (ch);
   1e0b6:	2b00      	cmp	r3, #0
   1e0b8:	d1f9      	bne.n	1e0ae <strcpy+0x2>

	return dst;
}
   1e0ba:	4770      	bx	lr

0001e0bc <strncmp>:
 */

#include <string.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
   1e0bc:	b510      	push	{r4, lr}
   1e0be:	4402      	add	r2, r0
	const unsigned char *c1 = (const unsigned char *)s1;
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (n--) {
   1e0c0:	4290      	cmp	r0, r2
   1e0c2:	d101      	bne.n	1e0c8 <strncmp+0xc>
		d = (int)(ch = *c1++) - (int)*c2++;
   1e0c4:	2300      	movs	r3, #0
		if (d || !ch)
			break;
	}

	return d;
   1e0c6:	e007      	b.n	1e0d8 <strncmp+0x1c>
		d = (int)(ch = *c1++) - (int)*c2++;
   1e0c8:	f810 4b01 	ldrb.w	r4, [r0], #1
   1e0cc:	f811 3b01 	ldrb.w	r3, [r1], #1
		if (d || !ch)
   1e0d0:	1ae3      	subs	r3, r4, r3
   1e0d2:	d101      	bne.n	1e0d8 <strncmp+0x1c>
   1e0d4:	2c00      	cmp	r4, #0
   1e0d6:	d1f3      	bne.n	1e0c0 <strncmp+0x4>
}
   1e0d8:	4618      	mov	r0, r3
   1e0da:	bd10      	pop	{r4, pc}

0001e0dc <strrchr>:
 */

#include <string.h>

char *strrchr(const char *s, int c)
{
   1e0dc:	b510      	push	{r4, lr}
	const char *found = NULL;
   1e0de:	2300      	movs	r3, #0

	while (*s) {
		if (*s == (char)c)
   1e0e0:	b2c9      	uxtb	r1, r1
   1e0e2:	4604      	mov	r4, r0
	while (*s) {
   1e0e4:	f810 2b01 	ldrb.w	r2, [r0], #1
   1e0e8:	b90a      	cbnz	r2, 1e0ee <strrchr+0x12>
			found = s;
		s++;
	}

	return (char *)found;
}
   1e0ea:	4618      	mov	r0, r3
   1e0ec:	bd10      	pop	{r4, pc}
		if (*s == (char)c)
   1e0ee:	4291      	cmp	r1, r2
   1e0f0:	bf08      	it	eq
   1e0f2:	4623      	moveq	r3, r4
		s++;
   1e0f4:	e7f5      	b.n	1e0e2 <strrchr+0x6>

0001e0f6 <strsep>:
 */

#include <string.h>

char *strsep(char **stringp, const char *delim)
{
   1e0f6:	b538      	push	{r3, r4, r5, lr}
	char *s = *stringp;
   1e0f8:	6805      	ldr	r5, [r0, #0]
{
   1e0fa:	4604      	mov	r4, r0
	char *e;

	if (!s)
   1e0fc:	b13d      	cbz	r5, 1e10e <strsep+0x18>
		return NULL;

	e = strpbrk(s, delim);
   1e0fe:	4628      	mov	r0, r5
   1e100:	f000 f824 	bl	1e14c <strpbrk>
	if (e)
   1e104:	b110      	cbz	r0, 1e10c <strsep+0x16>
		*e++ = '\0';
   1e106:	2300      	movs	r3, #0
   1e108:	f800 3b01 	strb.w	r3, [r0], #1

	*stringp = e;
   1e10c:	6020      	str	r0, [r4, #0]
	return s;
}
   1e10e:	4628      	mov	r0, r5
   1e110:	bd38      	pop	{r3, r4, r5, pc}

0001e112 <strtok_r>:
#include <string.h>

char *strtok_r(char *s, const char *delim, char **holder)
{
   1e112:	b538      	push	{r3, r4, r5, lr}
   1e114:	460d      	mov	r5, r1
   1e116:	4614      	mov	r4, r2
	if (s)
   1e118:	b100      	cbz	r0, 1e11c <strtok_r+0xa>
		*holder = s;
   1e11a:	6010      	str	r0, [r2, #0]

	do {
		s = strsep(holder, delim);
   1e11c:	4629      	mov	r1, r5
   1e11e:	4620      	mov	r0, r4
   1e120:	f7ff ffe9 	bl	1e0f6 <strsep>
	} while (s && !*s);
   1e124:	b110      	cbz	r0, 1e12c <strtok_r+0x1a>
   1e126:	7803      	ldrb	r3, [r0, #0]
   1e128:	2b00      	cmp	r3, #0
   1e12a:	d0f7      	beq.n	1e11c <strtok_r+0xa>

	return s;
}
   1e12c:	bd38      	pop	{r3, r4, r5, pc}

0001e12e <strtol>:
{
   1e12e:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1e130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e134:	f7f1 fdae 	bl	fc94 <strntoumax>
}
   1e138:	bd08      	pop	{r3, pc}
	...

0001e13c <vprintf>:
#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
	return vfprintf(stdout, format, ap);
   1e13c:	4b02      	ldr	r3, [pc, #8]	; (1e148 <vprintf+0xc>)
{
   1e13e:	460a      	mov	r2, r1
	return vfprintf(stdout, format, ap);
   1e140:	4601      	mov	r1, r0
   1e142:	6818      	ldr	r0, [r3, #0]
   1e144:	f7f1 bd48 	b.w	fbd8 <vfprintf>
   1e148:	00022484 	.word	0x00022484

0001e14c <strpbrk>:
*/

#include <string.h>

char *strpbrk(const char *s1, const char *s2)
{
   1e14c:	b570      	push	{r4, r5, r6, lr}
  const char *c = s2;
  if (!*s1)
   1e14e:	7803      	ldrb	r3, [r0, #0]
   1e150:	b1a3      	cbz	r3, 1e17c <strpbrk+0x30>
   1e152:	4603      	mov	r3, r0
  const char *c = s2;
   1e154:	460c      	mov	r4, r1
   1e156:	4618      	mov	r0, r3
    return (char *) NULL;

  while (*s1)
   1e158:	f813 5b01 	ldrb.w	r5, [r3], #1
   1e15c:	b14d      	cbz	r5, 1e172 <strpbrk+0x26>
   1e15e:	460a      	mov	r2, r1
   1e160:	e001      	b.n	1e166 <strpbrk+0x1a>
    {
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
   1e162:	42ae      	cmp	r6, r5
   1e164:	d009      	beq.n	1e17a <strpbrk+0x2e>
   1e166:	4614      	mov	r4, r2
      for (c = s2; *c; c++)
   1e168:	f812 6b01 	ldrb.w	r6, [r2], #1
   1e16c:	2e00      	cmp	r6, #0
   1e16e:	d1f8      	bne.n	1e162 <strpbrk+0x16>
   1e170:	e7f1      	b.n	1e156 <strpbrk+0xa>
      if (*c)
	break;
      s1++;
    }

  if (*c == '\0')
   1e172:	7823      	ldrb	r3, [r4, #0]
    s1 = NULL;
   1e174:	2b00      	cmp	r3, #0
   1e176:	bf08      	it	eq
   1e178:	2000      	moveq	r0, #0

  return (char *) s1;
}
   1e17a:	bd70      	pop	{r4, r5, r6, pc}
    s1 = NULL;
   1e17c:	4618      	mov	r0, r3
   1e17e:	e7fc      	b.n	1e17a <strpbrk+0x2e>

0001e180 <cbor_encode_text_stringz.isra.0>:
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
   1e180:	b513      	push	{r0, r1, r4, lr}
   1e182:	4604      	mov	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1e184:	4608      	mov	r0, r1
   1e186:	9101      	str	r1, [sp, #4]
   1e188:	f7f1 fa69 	bl	f65e <strlen>
   1e18c:	9901      	ldr	r1, [sp, #4]
   1e18e:	4602      	mov	r2, r0
   1e190:	4620      	mov	r0, r4
   1e192:	b002      	add	sp, #8
   1e194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e198:	f7f7 bf77 	b.w	1608a <cbor_encode_text_string>

0001e19c <bcast_ota_get_packet>:

/* TODO: Cull leading/trailing 0xffff to speed up transfer  */
int
bcast_ota_get_packet(int src_slot, bcast_ota_mode_t mode, int max_transfer_unit,
                     struct os_mbuf **rsp, uint64_t flags)
{
   1e19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1a0:	ed2d 8b02 	vpush	{d8}
   1e1a4:	b09b      	sub	sp, #108	; 0x6c
   1e1a6:	460d      	mov	r5, r1
   1e1a8:	4607      	mov	r7, r0
   1e1aa:	4614      	mov	r4, r2
   1e1ac:	469b      	mov	fp, r3
    uint32_t img_flags;
    int bufsz;
    uint8_t *buf;
    const struct flash_area *s_fa;
    struct image_version ver;
    int fa_id = flash_area_id_from_image_slot(src_slot);
   1e1ae:	f7f4 fb73 	bl	12898 <flash_area_id_from_image_slot>

    /* Check source image */
    bufsz = max_transfer_unit-CBOR_OVERHEAD;
    if (mode == BCAST_MODE_RESET_OFFSET) {
   1e1b2:	2d01      	cmp	r5, #1
    int fa_id = flash_area_id_from_image_slot(src_slot);
   1e1b4:	4606      	mov	r6, r0
    if (mode == BCAST_MODE_RESET_OFFSET) {
   1e1b6:	d050      	beq.n	1e25a <bcast_ota_get_packet+0xbe>
    bufsz = max_transfer_unit-CBOR_OVERHEAD;
   1e1b8:	3c24      	subs	r4, #36	; 0x24
        }
        BOTA_INFO("ver: %d.%d.%d.%d\n", ver.iv_major, ver.iv_minor,
                   ver.iv_revision, ver.iv_build_num);
    }

    buf = (uint8_t*)malloc(bufsz);
   1e1ba:	4620      	mov	r0, r4
   1e1bc:	f7f1 f98c 	bl	f4d8 <malloc>
    if (!buf) {
   1e1c0:	4680      	mov	r8, r0
   1e1c2:	2800      	cmp	r0, #0
   1e1c4:	d052      	beq.n	1e26c <bcast_ota_get_packet+0xd0>
        return OS_ENOMEM;
    }

    rc = flash_area_open(fa_id, &s_fa);
   1e1c6:	a905      	add	r1, sp, #20
   1e1c8:	b2f0      	uxtb	r0, r6
   1e1ca:	f7f4 fab5 	bl	12738 <flash_area_open>
   1e1ce:	4607      	mov	r7, r0
    if (mode == BCAST_MODE_RESEND_END) {
   1e1d0:	9805      	ldr	r0, [sp, #20]
        /* Resend the end */
        off = s_fa->fa_size - bufsz;
   1e1d2:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 1e3bc <bcast_ota_get_packet+0x220>
    if (mode == BCAST_MODE_RESEND_END) {
   1e1d6:	2d02      	cmp	r5, #2
        off = s_fa->fa_size - bufsz;
   1e1d8:	bf02      	ittt	eq
   1e1da:	6883      	ldreq	r3, [r0, #8]
   1e1dc:	1b1b      	subeq	r3, r3, r4
   1e1de:	f8c9 3000 	streq.w	r3, [r9]
    }

    if (off < s_fa->fa_size) {
   1e1e2:	f8d9 1000 	ldr.w	r1, [r9]
   1e1e6:	6883      	ldr	r3, [r0, #8]
   1e1e8:	428b      	cmp	r3, r1
   1e1ea:	f240 80d8 	bls.w	1e39e <bcast_ota_get_packet+0x202>
        len = (int)s_fa->fa_size - (int)off;
   1e1ee:	1a5b      	subs	r3, r3, r1
        len = (len>bufsz) ? bufsz : len;
   1e1f0:	429c      	cmp	r4, r3
   1e1f2:	bfa8      	it	ge
   1e1f4:	461c      	movge	r4, r3
        rc = flash_area_read(s_fa, off, buf, len);
   1e1f6:	4623      	mov	r3, r4
   1e1f8:	4642      	mov	r2, r8
   1e1fa:	f7f4 faf5 	bl	127e8 <flash_area_read>

        BOTA_DEBUG("Reading flash at %lX, %d bytes rc=%d\n", off, len, rc);
   1e1fe:	f8d9 3000 	ldr.w	r3, [r9]
   1e202:	9300      	str	r3, [sp, #0]
   1e204:	e9cd 4001 	strd	r4, r0, [sp, #4]
   1e208:	4b67      	ldr	r3, [pc, #412]	; (1e3a8 <bcast_ota_get_packet+0x20c>)
        rc = flash_area_read(s_fa, off, buf, len);
   1e20a:	4607      	mov	r7, r0
        BOTA_DEBUG("Reading flash at %lX, %d bytes rc=%d\n", off, len, rc);
   1e20c:	2200      	movs	r2, #0
   1e20e:	4867      	ldr	r0, [pc, #412]	; (1e3ac <bcast_ota_get_packet+0x210>)
   1e210:	2146      	movs	r1, #70	; 0x46
   1e212:	f7f4 fc57 	bl	12ac4 <log_printf>
        *rsp = buf_to_bota_nmgr_mbuf(buf, len, off, s_fa->fa_size, src_slot, 1, flags);
   1e216:	9b05      	ldr	r3, [sp, #20]
   1e218:	f8d9 a000 	ldr.w	sl, [r9]
   1e21c:	689b      	ldr	r3, [r3, #8]
   1e21e:	ee08 3a10 	vmov	s16, r3
    if (g_mbuf_pool) {
   1e222:	4b63      	ldr	r3, [pc, #396]	; (1e3b0 <bcast_ota_get_packet+0x214>)
   1e224:	6818      	ldr	r0, [r3, #0]
   1e226:	2800      	cmp	r0, #0
   1e228:	d03a      	beq.n	1e2a0 <bcast_ota_get_packet+0x104>
        rsp = os_mbuf_get_pkthdr(g_mbuf_pool, 0);
   1e22a:	2100      	movs	r1, #0
   1e22c:	f7ec f8b5 	bl	a39a <os_mbuf_get_pkthdr>
        rsp = os_msys_get_pkthdr(0, 0);
   1e230:	4605      	mov	r5, r0
    if (!rsp) {
   1e232:	2800      	cmp	r0, #0
   1e234:	d138      	bne.n	1e2a8 <bcast_ota_get_packet+0x10c>
        BOTA_ERR("could not get mbuf %d\n", CBOR_OVERHEAD);
   1e236:	2324      	movs	r3, #36	; 0x24
   1e238:	9300      	str	r3, [sp, #0]
   1e23a:	485c      	ldr	r0, [pc, #368]	; (1e3ac <bcast_ota_get_packet+0x210>)
   1e23c:	4b5d      	ldr	r3, [pc, #372]	; (1e3b4 <bcast_ota_get_packet+0x218>)
   1e23e:	2203      	movs	r2, #3
   1e240:	2146      	movs	r1, #70	; 0x46
   1e242:	f7f4 fc3f 	bl	12ac4 <log_printf>
        *rsp = buf_to_bota_nmgr_mbuf(buf, len, off, s_fa->fa_size, src_slot, 1, flags);
   1e246:	f8cb 5000 	str.w	r5, [fp]

        if (*rsp == 0) {
            BOTA_ERR("Could not convert flash data to mbuf\n");
   1e24a:	4b5b      	ldr	r3, [pc, #364]	; (1e3b8 <bcast_ota_get_packet+0x21c>)
   1e24c:	4857      	ldr	r0, [pc, #348]	; (1e3ac <bcast_ota_get_packet+0x210>)
   1e24e:	2203      	movs	r2, #3
   1e250:	2146      	movs	r1, #70	; 0x46
   1e252:	f7f4 fc37 	bl	12ac4 <log_printf>
            rc = OS_ENOMEM;
   1e256:	2701      	movs	r7, #1
            goto exit_err;
   1e258:	e09d      	b.n	1e396 <bcast_ota_get_packet+0x1fa>
        off = 0;
   1e25a:	4b58      	ldr	r3, [pc, #352]	; (1e3bc <bcast_ota_get_packet+0x220>)
   1e25c:	2200      	movs	r2, #0
   1e25e:	601a      	str	r2, [r3, #0]
        rc = imgr_read_info(src_slot, &ver, 0, &img_flags);
   1e260:	a906      	add	r1, sp, #24
   1e262:	ab04      	add	r3, sp, #16
   1e264:	4638      	mov	r0, r7
   1e266:	f7f1 fdfb 	bl	fe60 <imgr_read_info>
        if (rc != 0) {
   1e26a:	b130      	cbz	r0, 1e27a <bcast_ota_get_packet+0xde>
            return 1;
   1e26c:	2701      	movs	r7, #1
    }
exit_err:
    flash_area_close(s_fa);
    free(buf);
    return rc;
}
   1e26e:	4638      	mov	r0, r7
   1e270:	b01b      	add	sp, #108	; 0x6c
   1e272:	ecbd 8b02 	vpop	{d8}
   1e276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        BOTA_INFO("ver: %d.%d.%d.%d\n", ver.iv_major, ver.iv_minor,
   1e27a:	9b07      	ldr	r3, [sp, #28]
   1e27c:	9303      	str	r3, [sp, #12]
   1e27e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1e282:	9302      	str	r3, [sp, #8]
   1e284:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1e288:	9301      	str	r3, [sp, #4]
   1e28a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1e28e:	9300      	str	r3, [sp, #0]
   1e290:	4846      	ldr	r0, [pc, #280]	; (1e3ac <bcast_ota_get_packet+0x210>)
   1e292:	4b4b      	ldr	r3, [pc, #300]	; (1e3c0 <bcast_ota_get_packet+0x224>)
   1e294:	462a      	mov	r2, r5
   1e296:	2146      	movs	r1, #70	; 0x46
   1e298:	f7f4 fc14 	bl	12ac4 <log_printf>
        bufsz = sizeof(struct image_header)+8;
   1e29c:	2428      	movs	r4, #40	; 0x28
   1e29e:	e78c      	b.n	1e1ba <bcast_ota_get_packet+0x1e>
        rsp = os_msys_get_pkthdr(0, 0);
   1e2a0:	4601      	mov	r1, r0
   1e2a2:	f7eb fa99 	bl	97d8 <os_msys_get_pkthdr>
   1e2a6:	e7c3      	b.n	1e230 <bcast_ota_get_packet+0x94>
    hdr = (struct nmgr_hdr *) os_mbuf_extend(rsp, sizeof(struct nmgr_hdr));
   1e2a8:	2108      	movs	r1, #8
   1e2aa:	f7ec f9dd 	bl	a668 <os_mbuf_extend>
    if (!hdr) {
   1e2ae:	4606      	mov	r6, r0
   1e2b0:	b960      	cbnz	r0, 1e2cc <bcast_ota_get_packet+0x130>
        BOTA_ERR("could not get hdr\n");
   1e2b2:	4b44      	ldr	r3, [pc, #272]	; (1e3c4 <bcast_ota_get_packet+0x228>)
        BOTA_ERR("could not close container\n");
   1e2b4:	483d      	ldr	r0, [pc, #244]	; (1e3ac <bcast_ota_get_packet+0x210>)
   1e2b6:	2203      	movs	r2, #3
   1e2b8:	2146      	movs	r1, #70	; 0x46
   1e2ba:	f7f4 fc03 	bl	12ac4 <log_printf>
    os_mbuf_free_chain(rsp);
   1e2be:	4628      	mov	r0, r5
   1e2c0:	f7ec f88b 	bl	a3da <os_mbuf_free_chain>
        *rsp = buf_to_bota_nmgr_mbuf(buf, len, off, s_fa->fa_size, src_slot, 1, flags);
   1e2c4:	2300      	movs	r3, #0
   1e2c6:	f8cb 3000 	str.w	r3, [fp]
        if (*rsp == 0) {
   1e2ca:	e7be      	b.n	1e24a <bcast_ota_get_packet+0xae>
    hdr->nh_op = NMGR_OP_WRITE;
   1e2cc:	8803      	ldrh	r3, [r0, #0]
   1e2ce:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   1e2d2:	f043 0302 	orr.w	r3, r3, #2
   1e2d6:	8003      	strh	r3, [r0, #0]
    hdr->nh_group = htons(MGMT_GROUP_ID_BOTA);
   1e2d8:	f44f 4382 	mov.w	r3, #16640	; 0x4100
    hdr->nh_len = 0;
   1e2dc:	2200      	movs	r2, #0
    hdr->nh_group = htons(MGMT_GROUP_ID_BOTA);
   1e2de:	8083      	strh	r3, [r0, #4]
    hdr->nh_seq = 0;
   1e2e0:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdr->nh_len = 0;
   1e2e4:	8042      	strh	r2, [r0, #2]
    hdr->nh_seq = 0;
   1e2e6:	80c3      	strh	r3, [r0, #6]
    cbor_mbuf_writer_init(&writer, rsp);
   1e2e8:	4629      	mov	r1, r5
   1e2ea:	a808      	add	r0, sp, #32
   1e2ec:	f7f7 fe2a 	bl	15f44 <cbor_mbuf_writer_init>
    cbor_encoder_init(&n_b.encoder, &writer.enc, 0);
   1e2f0:	2200      	movs	r2, #0
   1e2f2:	a908      	add	r1, sp, #32
   1e2f4:	a812      	add	r0, sp, #72	; 0x48
   1e2f6:	f7f7 fe8a 	bl	1600e <cbor_encoder_init>
    rc = cbor_encoder_create_map(&n_b.encoder, &payload_enc, CborIndefiniteLength);
   1e2fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e2fe:	a90b      	add	r1, sp, #44	; 0x2c
   1e300:	a812      	add	r0, sp, #72	; 0x48
   1e302:	f7f7 fed7 	bl	160b4 <cbor_encoder_create_map>
    if (rc != 0) {
   1e306:	b108      	cbz	r0, 1e30c <bcast_ota_get_packet+0x170>
        BOTA_ERR("could not create map\n");
   1e308:	4b2f      	ldr	r3, [pc, #188]	; (1e3c8 <bcast_ota_get_packet+0x22c>)
   1e30a:	e7d3      	b.n	1e2b4 <bcast_ota_get_packet+0x118>
    if (off == 0) {
   1e30c:	f1ba 0f00 	cmp.w	sl, #0
   1e310:	d11b      	bne.n	1e34a <bcast_ota_get_packet+0x1ae>
        g_err |= cbor_encode_text_stringz(&cb->encoder, "s");
   1e312:	492e      	ldr	r1, [pc, #184]	; (1e3cc <bcast_ota_get_packet+0x230>)
   1e314:	a812      	add	r0, sp, #72	; 0x48
   1e316:	f7ff ff33 	bl	1e180 <cbor_encode_text_stringz.isra.0>
        g_err |= cbor_encode_uint(&cb->encoder, dst_slot);
   1e31a:	2201      	movs	r2, #1
   1e31c:	2300      	movs	r3, #0
   1e31e:	a812      	add	r0, sp, #72	; 0x48
   1e320:	f7f7 fe7a 	bl	16018 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&cb->encoder, "l");
   1e324:	492a      	ldr	r1, [pc, #168]	; (1e3d0 <bcast_ota_get_packet+0x234>)
   1e326:	a812      	add	r0, sp, #72	; 0x48
   1e328:	f7ff ff2a 	bl	1e180 <cbor_encode_text_stringz.isra.0>
        g_err |= cbor_encode_uint(&cb->encoder, size);
   1e32c:	ee18 2a10 	vmov	r2, s16
   1e330:	4653      	mov	r3, sl
   1e332:	a812      	add	r0, sp, #72	; 0x48
   1e334:	f7f7 fe70 	bl	16018 <cbor_encode_uint>
        g_err |= cbor_encode_text_stringz(&cb->encoder, "f");
   1e338:	a812      	add	r0, sp, #72	; 0x48
   1e33a:	4926      	ldr	r1, [pc, #152]	; (1e3d4 <bcast_ota_get_packet+0x238>)
   1e33c:	f7ff ff20 	bl	1e180 <cbor_encode_text_stringz.isra.0>
        g_err |= cbor_encode_uint(&cb->encoder, flags);
   1e340:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
   1e344:	a812      	add	r0, sp, #72	; 0x48
   1e346:	f7f7 fe67 	bl	16018 <cbor_encode_uint>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "o");
   1e34a:	4923      	ldr	r1, [pc, #140]	; (1e3d8 <bcast_ota_get_packet+0x23c>)
   1e34c:	a812      	add	r0, sp, #72	; 0x48
   1e34e:	f7ff ff17 	bl	1e180 <cbor_encode_text_stringz.isra.0>
    g_err |= cbor_encode_uint(&cb->encoder, off);
   1e352:	4652      	mov	r2, sl
   1e354:	2300      	movs	r3, #0
   1e356:	a812      	add	r0, sp, #72	; 0x48
   1e358:	f7f7 fe5e 	bl	16018 <cbor_encode_uint>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "d");
   1e35c:	491f      	ldr	r1, [pc, #124]	; (1e3dc <bcast_ota_get_packet+0x240>)
   1e35e:	a812      	add	r0, sp, #72	; 0x48
   1e360:	f7ff ff0e 	bl	1e180 <cbor_encode_text_stringz.isra.0>
    g_err |= cbor_encode_byte_string(&cb->encoder, buf, len);
   1e364:	4641      	mov	r1, r8
   1e366:	4622      	mov	r2, r4
   1e368:	a812      	add	r0, sp, #72	; 0x48
   1e36a:	f7f7 fe7c 	bl	16066 <cbor_encode_byte_string>
    rc = cbor_encoder_close_container(&n_b.encoder, &payload_enc);
   1e36e:	a90b      	add	r1, sp, #44	; 0x2c
   1e370:	a812      	add	r0, sp, #72	; 0x48
   1e372:	f7f7 feb0 	bl	160d6 <cbor_encoder_close_container>
    if (rc != 0) {
   1e376:	b108      	cbz	r0, 1e37c <bcast_ota_get_packet+0x1e0>
        BOTA_ERR("could not close container\n");
   1e378:	4b19      	ldr	r3, [pc, #100]	; (1e3e0 <bcast_ota_get_packet+0x244>)
   1e37a:	e79b      	b.n	1e2b4 <bcast_ota_get_packet+0x118>
{   return encoder->writer->bytes_written; }
   1e37c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    hdr->nh_len += cbor_encode_bytes_written(&n_b.encoder);
   1e37e:	8872      	ldrh	r2, [r6, #2]
   1e380:	685b      	ldr	r3, [r3, #4]
   1e382:	4413      	add	r3, r2
    hdr->nh_len = htons(hdr->nh_len);
   1e384:	ba5b      	rev16	r3, r3
   1e386:	8073      	strh	r3, [r6, #2]
        off += len;
   1e388:	f8d9 3000 	ldr.w	r3, [r9]
        *rsp = buf_to_bota_nmgr_mbuf(buf, len, off, s_fa->fa_size, src_slot, 1, flags);
   1e38c:	f8cb 5000 	str.w	r5, [fp]
        off += len;
   1e390:	4423      	add	r3, r4
   1e392:	f8c9 3000 	str.w	r3, [r9]
    free(buf);
   1e396:	4640      	mov	r0, r8
   1e398:	f7f1 f8ea 	bl	f570 <free>
    return rc;
   1e39c:	e767      	b.n	1e26e <bcast_ota_get_packet+0xd2>
        *rsp = 0;
   1e39e:	2300      	movs	r3, #0
   1e3a0:	f8cb 3000 	str.w	r3, [fp]
   1e3a4:	e7f7      	b.n	1e396 <bcast_ota_get_packet+0x1fa>
   1e3a6:	bf00      	nop
   1e3a8:	00023d3a 	.word	0x00023d3a
   1e3ac:	20005018 	.word	0x20005018
   1e3b0:	20005030 	.word	0x20005030
   1e3b4:	00023d60 	.word	0x00023d60
   1e3b8:	00023dbb 	.word	0x00023dbb
   1e3bc:	20005034 	.word	0x20005034
   1e3c0:	00023d28 	.word	0x00023d28
   1e3c4:	00023d77 	.word	0x00023d77
   1e3c8:	00023d8a 	.word	0x00023d8a
   1e3cc:	00022f06 	.word	0x00022f06
   1e3d0:	00021f66 	.word	0x00021f66
   1e3d4:	00023a13 	.word	0x00023a13
   1e3d8:	00022722 	.word	0x00022722
   1e3dc:	000228d4 	.word	0x000228d4
   1e3e0:	00023da0 	.word	0x00023da0

0001e3e4 <bcast_ota_get_reset_mbuf>:
bcast_ota_get_reset_mbuf(void)
{
    struct nmgr_hdr *hdr;
    struct os_mbuf *rsp;

    if (g_mbuf_pool) {
   1e3e4:	4b1a      	ldr	r3, [pc, #104]	; (1e450 <bcast_ota_get_reset_mbuf+0x6c>)
{
   1e3e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (g_mbuf_pool) {
   1e3e8:	6818      	ldr	r0, [r3, #0]
   1e3ea:	b178      	cbz	r0, 1e40c <bcast_ota_get_reset_mbuf+0x28>
        rsp = os_mbuf_get_pkthdr(g_mbuf_pool, 0);
   1e3ec:	2100      	movs	r1, #0
   1e3ee:	f7eb ffd4 	bl	a39a <os_mbuf_get_pkthdr>
    } else {
        rsp = os_msys_get_pkthdr(0, 0);
   1e3f2:	4604      	mov	r4, r0
    }

    if (!rsp) {
   1e3f4:	b970      	cbnz	r0, 1e414 <bcast_ota_get_reset_mbuf+0x30>
        BOTA_ERR("could not get mbuf %d\n", CBOR_OVERHEAD);
   1e3f6:	2324      	movs	r3, #36	; 0x24
   1e3f8:	9300      	str	r3, [sp, #0]
   1e3fa:	4816      	ldr	r0, [pc, #88]	; (1e454 <bcast_ota_get_reset_mbuf+0x70>)
   1e3fc:	4b16      	ldr	r3, [pc, #88]	; (1e458 <bcast_ota_get_reset_mbuf+0x74>)
   1e3fe:	2203      	movs	r2, #3
   1e400:	2146      	movs	r1, #70	; 0x46
   1e402:	f7f4 fb5f 	bl	12ac4 <log_printf>
    return rsp;

exit_err:
    os_mbuf_free_chain(rsp);
    return 0;
}
   1e406:	4620      	mov	r0, r4
   1e408:	b003      	add	sp, #12
   1e40a:	bd30      	pop	{r4, r5, pc}
        rsp = os_msys_get_pkthdr(0, 0);
   1e40c:	4601      	mov	r1, r0
   1e40e:	f7eb f9e3 	bl	97d8 <os_msys_get_pkthdr>
   1e412:	e7ee      	b.n	1e3f2 <bcast_ota_get_reset_mbuf+0xe>
    hdr = (struct nmgr_hdr *) os_mbuf_extend(rsp, sizeof(struct nmgr_hdr));
   1e414:	2108      	movs	r1, #8
   1e416:	f7ec f927 	bl	a668 <os_mbuf_extend>
    if (!hdr) {
   1e41a:	4605      	mov	r5, r0
   1e41c:	b950      	cbnz	r0, 1e434 <bcast_ota_get_reset_mbuf+0x50>
        BOTA_ERR("could not get hdr\n");
   1e41e:	4b0f      	ldr	r3, [pc, #60]	; (1e45c <bcast_ota_get_reset_mbuf+0x78>)
   1e420:	480c      	ldr	r0, [pc, #48]	; (1e454 <bcast_ota_get_reset_mbuf+0x70>)
   1e422:	2203      	movs	r2, #3
   1e424:	2146      	movs	r1, #70	; 0x46
   1e426:	f7f4 fb4d 	bl	12ac4 <log_printf>
    os_mbuf_free_chain(rsp);
   1e42a:	4620      	mov	r0, r4
   1e42c:	f7eb ffd5 	bl	a3da <os_mbuf_free_chain>
    return 0;
   1e430:	462c      	mov	r4, r5
   1e432:	e7e8      	b.n	1e406 <bcast_ota_get_reset_mbuf+0x22>
    hdr->nh_op = NMGR_OP_WRITE;
   1e434:	8803      	ldrh	r3, [r0, #0]
   1e436:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   1e43a:	f043 0302 	orr.w	r3, r3, #2
   1e43e:	8003      	strh	r3, [r0, #0]
    hdr->nh_len = 0;
   1e440:	2300      	movs	r3, #0
   1e442:	8043      	strh	r3, [r0, #2]
    hdr->nh_group = htons(MGMT_GROUP_ID_DEFAULT);
   1e444:	8083      	strh	r3, [r0, #4]
    hdr->nh_seq = 0;
   1e446:	f44f 63a0 	mov.w	r3, #1280	; 0x500
   1e44a:	80c3      	strh	r3, [r0, #6]
    return rsp;
   1e44c:	e7db      	b.n	1e406 <bcast_ota_get_reset_mbuf+0x22>
   1e44e:	bf00      	nop
   1e450:	20005030 	.word	0x20005030
   1e454:	20005018 	.word	0x20005018
   1e458:	00023d60 	.word	0x00023d60
   1e45c:	00023d77 	.word	0x00023d77

0001e460 <bcast_ota_pkg_init>:
    g_mbuf_pool = mbuf_pool;
}

void
bcast_ota_pkg_init(void)
{
   1e460:	b537      	push	{r0, r1, r2, r4, r5, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1e462:	4b0f      	ldr	r3, [pc, #60]	; (1e4a0 <bcast_ota_pkg_init+0x40>)
   1e464:	781b      	ldrb	r3, [r3, #0]
   1e466:	b923      	cbnz	r3, 1e472 <bcast_ota_pkg_init+0x12>
   1e468:	461a      	mov	r2, r3
   1e46a:	4619      	mov	r1, r3
   1e46c:	4618      	mov	r0, r3
   1e46e:	f7ea fd41 	bl	8ef4 <__assert_func>

    /* Init log */
    log_register("bota", &g_bcast_ota_log, &log_console_handler,
   1e472:	2400      	movs	r4, #0
   1e474:	4a0b      	ldr	r2, [pc, #44]	; (1e4a4 <bcast_ota_pkg_init+0x44>)
   1e476:	490c      	ldr	r1, [pc, #48]	; (1e4a8 <bcast_ota_pkg_init+0x48>)
   1e478:	480c      	ldr	r0, [pc, #48]	; (1e4ac <bcast_ota_pkg_init+0x4c>)
   1e47a:	9400      	str	r4, [sp, #0]
   1e47c:	4623      	mov	r3, r4
   1e47e:	f7f4 fb45 	bl	12b0c <log_register>
                 NULL, LOG_SYSLEVEL);


    bcast_ota_nmgr_module_init();
   1e482:	f000 fbe7 	bl	1ec54 <bcast_ota_nmgr_module_init>

#if MYNEWT_VAL(BCAST_OTA_CLI)
    int rc;
    rc = bota_cli_register();
   1e486:	f000 f99d 	bl	1e7c4 <bota_cli_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e48a:	b138      	cbz	r0, 1e49c <bcast_ota_pkg_init+0x3c>
   1e48c:	4b08      	ldr	r3, [pc, #32]	; (1e4b0 <bcast_ota_pkg_init+0x50>)
   1e48e:	9400      	str	r4, [sp, #0]
   1e490:	681d      	ldr	r5, [r3, #0]
   1e492:	4622      	mov	r2, r4
   1e494:	4623      	mov	r3, r4
   1e496:	4621      	mov	r1, r4
   1e498:	4620      	mov	r0, r4
   1e49a:	47a8      	blx	r5
#endif
}
   1e49c:	b003      	add	sp, #12
   1e49e:	bd30      	pop	{r4, r5, pc}
   1e4a0:	20004ba8 	.word	0x20004ba8
   1e4a4:	00022818 	.word	0x00022818
   1e4a8:	20005018 	.word	0x20005018
   1e4ac:	00023de1 	.word	0x00023de1
   1e4b0:	20000768 	.word	0x20000768

0001e4b4 <nmgr_mstr_get_mtu>:

static uint16_t
nmgr_mstr_get_mtu(struct os_mbuf *m)
{
    return 196;
}
   1e4b4:	20c4      	movs	r0, #196	; 0xc4
   1e4b6:	4770      	bx	lr

0001e4b8 <txim_ev_cb>:
    return rc;
}

static void
txim_ev_cb(struct os_event *ev)
{
   1e4b8:	b530      	push	{r4, r5, lr}
   1e4ba:	b085      	sub	sp, #20
    struct os_mbuf *om = 0;
   1e4bc:	2300      	movs	r3, #0
   1e4be:	9303      	str	r3, [sp, #12]
    /* Don't proceed unless there's plenty of room in the queue */
    if (os_msys_num_free() < os_msys_count()/4) {
   1e4c0:	f7eb f9ae 	bl	9820 <os_msys_num_free>
   1e4c4:	4604      	mov	r4, r0
   1e4c6:	f7eb f99f 	bl	9808 <os_msys_count>
   1e4ca:	1e03      	subs	r3, r0, #0
   1e4cc:	bfb8      	it	lt
   1e4ce:	3303      	addlt	r3, #3
   1e4d0:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   1e4d4:	da04      	bge.n	1e4e0 <txim_ev_cb+0x28>
        os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/10);
   1e4d6:	482f      	ldr	r0, [pc, #188]	; (1e594 <txim_ev_cb+0xdc>)
   1e4d8:	210c      	movs	r1, #12
    } else if (--tx_im_inst.resend_end > 0){
        streamer_printf(tx_im_inst.streamer, "bota: resending end\n");
        bcast_ota_get_packet(tx_im_inst.slot_id, BCAST_MODE_RESEND_END,
                             (128-8), &om, tx_im_inst.flags);
        uwb_nmgr_queue_tx(nmgruwb, tx_im_inst.addr, UWB_DATA_CODE_NMGR_REQUEST, om);
        os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/4);
   1e4da:	f7ea fea3 	bl	9224 <os_callout_reset>
   1e4de:	e02d      	b.n	1e53c <txim_ev_cb+0x84>
    bcast_ota_get_packet(tx_im_inst.slot_id, (tx_im_inst.reset>0)?
   1e4e0:	4c2d      	ldr	r4, [pc, #180]	; (1e598 <txim_ev_cb+0xe0>)
    nmgr_uwb_instance_t *nmgruwb = (nmgr_uwb_instance_t*)uwb_mac_find_cb_inst_ptr(uwb_dev_idx_lookup(0), UWBEXT_NMGR_UWB);
   1e4e2:	2000      	movs	r0, #0
   1e4e4:	f7ea fab0 	bl	8a48 <uwb_dev_idx_lookup>
   1e4e8:	2113      	movs	r1, #19
   1e4ea:	f7ea fb21 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
    bcast_ota_get_packet(tx_im_inst.slot_id, (tx_im_inst.reset>0)?
   1e4ee:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   1e4f2:	f994 1000 	ldrsb.w	r1, [r4]
   1e4f6:	e9cd 2300 	strd	r2, r3, [sp]
   1e4fa:	2900      	cmp	r1, #0
   1e4fc:	ab03      	add	r3, sp, #12
   1e4fe:	68a2      	ldr	r2, [r4, #8]
    nmgr_uwb_instance_t *nmgruwb = (nmgr_uwb_instance_t*)uwb_mac_find_cb_inst_ptr(uwb_dev_idx_lookup(0), UWBEXT_NMGR_UWB);
   1e500:	4605      	mov	r5, r0
    bcast_ota_get_packet(tx_im_inst.slot_id, (tx_im_inst.reset>0)?
   1e502:	bfd8      	it	le
   1e504:	2100      	movle	r1, #0
   1e506:	6860      	ldr	r0, [r4, #4]
   1e508:	bfc8      	it	gt
   1e50a:	2101      	movgt	r1, #1
   1e50c:	f7ff fe46 	bl	1e19c <bcast_ota_get_packet>
    if (om) {
   1e510:	9b03      	ldr	r3, [sp, #12]
   1e512:	b1db      	cbz	r3, 1e54c <txim_ev_cb+0x94>
        uwb_nmgr_queue_tx(nmgruwb, tx_im_inst.addr, UWB_DATA_CODE_NMGR_REQUEST, om);
   1e514:	8861      	ldrh	r1, [r4, #2]
   1e516:	f240 4221 	movw	r2, #1057	; 0x421
   1e51a:	4628      	mov	r0, r5
   1e51c:	f7ec fbe0 	bl	ace0 <uwb_nmgr_queue_tx>
        if (tx_im_inst.reset>0) {
   1e520:	f994 3000 	ldrsb.w	r3, [r4]
   1e524:	2b00      	cmp	r3, #0
   1e526:	dd0b      	ble.n	1e540 <txim_ev_cb+0x88>
            os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/5);
   1e528:	2119      	movs	r1, #25
   1e52a:	f104 000c 	add.w	r0, r4, #12
   1e52e:	f7ea fe79 	bl	9224 <os_callout_reset>
            tx_im_inst.reset--;
   1e532:	7823      	ldrb	r3, [r4, #0]
   1e534:	3b01      	subs	r3, #1
   1e536:	7023      	strb	r3, [r4, #0]
        tx_im_inst.resend_end = 5;
   1e538:	2305      	movs	r3, #5
   1e53a:	7063      	strb	r3, [r4, #1]
    } else {
        streamer_printf(tx_im_inst.streamer, "bota: txim finished\n");
    }
}
   1e53c:	b005      	add	sp, #20
   1e53e:	bd30      	pop	{r4, r5, pc}
            os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/50);
   1e540:	2102      	movs	r1, #2
   1e542:	f104 000c 	add.w	r0, r4, #12
   1e546:	f7ea fe6d 	bl	9224 <os_callout_reset>
   1e54a:	e7f5      	b.n	1e538 <txim_ev_cb+0x80>
    } else if (--tx_im_inst.resend_end > 0){
   1e54c:	7863      	ldrb	r3, [r4, #1]
        streamer_printf(tx_im_inst.streamer, "bota: resending end\n");
   1e54e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    } else if (--tx_im_inst.resend_end > 0){
   1e550:	3b01      	subs	r3, #1
   1e552:	b25b      	sxtb	r3, r3
   1e554:	2b00      	cmp	r3, #0
   1e556:	7063      	strb	r3, [r4, #1]
   1e558:	dd17      	ble.n	1e58a <txim_ev_cb+0xd2>
        streamer_printf(tx_im_inst.streamer, "bota: resending end\n");
   1e55a:	4910      	ldr	r1, [pc, #64]	; (1e59c <txim_ev_cb+0xe4>)
   1e55c:	f7f2 ff83 	bl	11466 <streamer_printf>
        bcast_ota_get_packet(tx_im_inst.slot_id, BCAST_MODE_RESEND_END,
   1e560:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   1e564:	e9cd 2300 	strd	r2, r3, [sp]
   1e568:	2102      	movs	r1, #2
   1e56a:	ab03      	add	r3, sp, #12
   1e56c:	2278      	movs	r2, #120	; 0x78
   1e56e:	6860      	ldr	r0, [r4, #4]
   1e570:	f7ff fe14 	bl	1e19c <bcast_ota_get_packet>
        uwb_nmgr_queue_tx(nmgruwb, tx_im_inst.addr, UWB_DATA_CODE_NMGR_REQUEST, om);
   1e574:	8861      	ldrh	r1, [r4, #2]
   1e576:	9b03      	ldr	r3, [sp, #12]
   1e578:	f240 4221 	movw	r2, #1057	; 0x421
   1e57c:	4628      	mov	r0, r5
   1e57e:	f7ec fbaf 	bl	ace0 <uwb_nmgr_queue_tx>
        os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/4);
   1e582:	2120      	movs	r1, #32
   1e584:	f104 000c 	add.w	r0, r4, #12
   1e588:	e7a7      	b.n	1e4da <txim_ev_cb+0x22>
        streamer_printf(tx_im_inst.streamer, "bota: txim finished\n");
   1e58a:	4905      	ldr	r1, [pc, #20]	; (1e5a0 <txim_ev_cb+0xe8>)
   1e58c:	f7f2 ff6b 	bl	11466 <streamer_printf>
   1e590:	e7d4      	b.n	1e53c <txim_ev_cb+0x84>
   1e592:	bf00      	nop
   1e594:	20005064 	.word	0x20005064
   1e598:	20005058 	.word	0x20005058
   1e59c:	00023de6 	.word	0x00023de6
   1e5a0:	00023dfb 	.word	0x00023dfb

0001e5a4 <nmgr_mstr_out>:
{
   1e5a4:	b530      	push	{r4, r5, lr}
    struct cbor_attr_t attrs[] = {
   1e5a6:	225c      	movs	r2, #92	; 0x5c
{
   1e5a8:	b0af      	sub	sp, #188	; 0xbc
   1e5aa:	460c      	mov	r4, r1
    struct cbor_attr_t attrs[] = {
   1e5ac:	eb0d 0002 	add.w	r0, sp, r2
   1e5b0:	2100      	movs	r1, #0
   1e5b2:	f7f1 f824 	bl	f5fe <memset>
    cbor_mbuf_reader_init(&reader, req, sizeof(struct nmgr_hdr));
   1e5b6:	2208      	movs	r2, #8
    struct cbor_attr_t attrs[] = {
   1e5b8:	4b14      	ldr	r3, [pc, #80]	; (1e60c <nmgr_mstr_out+0x68>)
   1e5ba:	9316      	str	r3, [sp, #88]	; 0x58
    cbor_mbuf_reader_init(&reader, req, sizeof(struct nmgr_hdr));
   1e5bc:	eb0d 0002 	add.w	r0, sp, r2
    struct cbor_attr_t attrs[] = {
   1e5c0:	2301      	movs	r3, #1
    cbor_mbuf_reader_init(&reader, req, sizeof(struct nmgr_hdr));
   1e5c2:	4621      	mov	r1, r4
    struct cbor_attr_t attrs[] = {
   1e5c4:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
   1e5c8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   1e5cc:	f8cd d060 	str.w	sp, [sp, #96]	; 0x60
    cbor_mbuf_reader_init(&reader, req, sizeof(struct nmgr_hdr));
   1e5d0:	f7f7 fc80 	bl	15ed4 <cbor_mbuf_reader_init>
    cbor_parser_init(&reader.r, 0, &n_b.parser, &n_b.it);
   1e5d4:	aa0b      	add	r2, sp, #44	; 0x2c
   1e5d6:	ab12      	add	r3, sp, #72	; 0x48
   1e5d8:	2100      	movs	r1, #0
   1e5da:	a802      	add	r0, sp, #8
   1e5dc:	f7f7 ff85 	bl	164ea <cbor_parser_init>
    g_err |= cbor_read_object(&cb->it, attrs);
   1e5e0:	a916      	add	r1, sp, #88	; 0x58
   1e5e2:	a812      	add	r0, sp, #72	; 0x48
   1e5e4:	f7f7 fc23 	bl	15e2e <cbor_read_object>
    if (g_err) {
   1e5e8:	4d09      	ldr	r5, [pc, #36]	; (1e610 <nmgr_mstr_out+0x6c>)
   1e5ea:	4602      	mov	r2, r0
   1e5ec:	b118      	cbz	r0, 1e5f6 <nmgr_mstr_out+0x52>
        streamer_printf(tx_im_inst.streamer, "gerr: '%d\n", g_err);
   1e5ee:	4909      	ldr	r1, [pc, #36]	; (1e614 <nmgr_mstr_out+0x70>)
   1e5f0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   1e5f2:	f7f2 ff38 	bl	11466 <streamer_printf>
    streamer_printf(tx_im_inst.streamer, "#nmgr_out: rc=%d\n", (int)(rc_attr&0xffffffff));
   1e5f6:	9a00      	ldr	r2, [sp, #0]
   1e5f8:	4907      	ldr	r1, [pc, #28]	; (1e618 <nmgr_mstr_out+0x74>)
   1e5fa:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   1e5fc:	f7f2 ff33 	bl	11466 <streamer_printf>
    os_mbuf_free_chain(req);
   1e600:	4620      	mov	r0, r4
   1e602:	f7eb feea 	bl	a3da <os_mbuf_free_chain>
}
   1e606:	2000      	movs	r0, #0
   1e608:	b02f      	add	sp, #188	; 0xbc
   1e60a:	bd30      	pop	{r4, r5, pc}
   1e60c:	00022490 	.word	0x00022490
   1e610:	20005058 	.word	0x20005058
   1e614:	00023e10 	.word	0x00023e10
   1e618:	00023e1b 	.word	0x00023e1b

0001e61c <check_image_fid>:
{
   1e61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e620:	b0a6      	sub	sp, #152	; 0x98
   1e622:	460e      	mov	r6, r1
    rc = flash_area_open(fid, &fa);
   1e624:	b2c0      	uxtb	r0, r0
   1e626:	a904      	add	r1, sp, #16
   1e628:	f7f4 f886 	bl	12738 <flash_area_open>
    if (rc!=0) {
   1e62c:	4604      	mov	r4, r0
   1e62e:	b948      	cbnz	r0, 1e644 <check_image_fid+0x28>
    rc = check_image(fa, streamer);
   1e630:	f8dd 8010 	ldr.w	r8, [sp, #16]
    rc = flash_area_read(fap, 0, &hdr, sizeof(struct image_header));
   1e634:	4601      	mov	r1, r0
   1e636:	2320      	movs	r3, #32
   1e638:	aa05      	add	r2, sp, #20
   1e63a:	4640      	mov	r0, r8
   1e63c:	f7f4 f8d4 	bl	127e8 <flash_area_read>
    if (rc!=0) {
   1e640:	b120      	cbz	r0, 1e64c <check_image_fid+0x30>
        return OS_ENOMEM;
   1e642:	2401      	movs	r4, #1
}
   1e644:	4620      	mov	r0, r4
   1e646:	b026      	add	sp, #152	; 0x98
   1e648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    void *tmpbuf = malloc(TMPBUF_SZ);
   1e64c:	f44f 7080 	mov.w	r0, #256	; 0x100
   1e650:	f7f0 ff42 	bl	f4d8 <malloc>
    if (!tmpbuf) {
   1e654:	4605      	mov	r5, r0
   1e656:	2800      	cmp	r0, #0
   1e658:	d0f3      	beq.n	1e642 <check_image_fid+0x26>
    rc = bootutil_img_validate(&hdr, fap, tmpbuf, TMPBUF_SZ,
   1e65a:	af0d      	add	r7, sp, #52	; 0x34
   1e65c:	4602      	mov	r2, r0
   1e65e:	4641      	mov	r1, r8
   1e660:	e9cd 4701 	strd	r4, r7, [sp, #4]
   1e664:	9400      	str	r4, [sp, #0]
   1e666:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e66a:	a805      	add	r0, sp, #20
   1e66c:	f000 fefd 	bl	1f46a <bootutil_img_validate>
   1e670:	4604      	mov	r4, r0
    free(tmpbuf);
   1e672:	4628      	mov	r0, r5
   1e674:	f7f0 ff7c 	bl	f570 <free>
    streamer_printf(streamer, "computed hash: %s\n",
   1e678:	aa15      	add	r2, sp, #84	; 0x54
   1e67a:	2341      	movs	r3, #65	; 0x41
   1e67c:	2120      	movs	r1, #32
   1e67e:	4638      	mov	r0, r7
   1e680:	f7f7 f958 	bl	15934 <hex_format>
   1e684:	4902      	ldr	r1, [pc, #8]	; (1e690 <check_image_fid+0x74>)
   1e686:	4602      	mov	r2, r0
   1e688:	4630      	mov	r0, r6
   1e68a:	f7f2 feec 	bl	11466 <streamer_printf>
    return rc;
   1e68e:	e7d9      	b.n	1e644 <check_image_fid+0x28>
   1e690:	00023e2d 	.word	0x00023e2d

0001e694 <bota_cli_cmd>:
{
    int rc;
    int fa_id;
    const char* too_few_args = "Too few args\n";

    if (argc < 2) {
   1e694:	2901      	cmp	r1, #1
{
   1e696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e698:	460f      	mov	r7, r1
   1e69a:	4616      	mov	r6, r2
   1e69c:	461c      	mov	r4, r3
    if (argc < 2) {
   1e69e:	dc04      	bgt.n	1e6aa <bota_cli_cmd+0x16>
        streamer_printf(streamer, too_few_args);
   1e6a0:	493e      	ldr	r1, [pc, #248]	; (1e79c <bota_cli_cmd+0x108>)
        uint16_t addr = strtol(argv[2], NULL, 0);
        struct os_mbuf *om = bcast_ota_get_reset_mbuf();
        nmgr_uwb_instance_t *nmgruwb = (nmgr_uwb_instance_t*)uwb_mac_find_cb_inst_ptr(uwb_dev_idx_lookup(0), UWBEXT_NMGR_UWB);
        uwb_nmgr_queue_tx(nmgruwb, addr, UWB_DATA_CODE_NMGR_REQUEST, om);
    } else {
        streamer_printf(streamer, "Unknown cmd\n");
   1e6a2:	4620      	mov	r0, r4
   1e6a4:	f7f2 fedf 	bl	11466 <streamer_printf>
   1e6a8:	e01e      	b.n	1e6e8 <bota_cli_cmd+0x54>
    if (!strcmp(argv[1], "check")) {
   1e6aa:	6855      	ldr	r5, [r2, #4]
   1e6ac:	493c      	ldr	r1, [pc, #240]	; (1e7a0 <bota_cli_cmd+0x10c>)
   1e6ae:	4628      	mov	r0, r5
   1e6b0:	f7f0 ffca 	bl	f648 <strcmp>
   1e6b4:	4602      	mov	r2, r0
   1e6b6:	bb20      	cbnz	r0, 1e702 <bota_cli_cmd+0x6e>
        if (argc < 3) {
   1e6b8:	2f02      	cmp	r7, #2
   1e6ba:	d118      	bne.n	1e6ee <bota_cli_cmd+0x5a>
            streamer_printf(streamer, too_few_args);
   1e6bc:	4937      	ldr	r1, [pc, #220]	; (1e79c <bota_cli_cmd+0x108>)
   1e6be:	9001      	str	r0, [sp, #4]
   1e6c0:	4620      	mov	r0, r4
   1e6c2:	f7f2 fed0 	bl	11466 <streamer_printf>
            streamer_printf(streamer, "  im0: %d\n", flash_area_id_from_image_slot(0));
   1e6c6:	9a01      	ldr	r2, [sp, #4]
   1e6c8:	4610      	mov	r0, r2
   1e6ca:	f7f4 f8e5 	bl	12898 <flash_area_id_from_image_slot>
   1e6ce:	4935      	ldr	r1, [pc, #212]	; (1e7a4 <bota_cli_cmd+0x110>)
   1e6d0:	4602      	mov	r2, r0
   1e6d2:	4620      	mov	r0, r4
   1e6d4:	f7f2 fec7 	bl	11466 <streamer_printf>
            streamer_printf(streamer, "  im1: %d\n", flash_area_id_from_image_slot(1));
   1e6d8:	2001      	movs	r0, #1
   1e6da:	f7f4 f8dd 	bl	12898 <flash_area_id_from_image_slot>
   1e6de:	4932      	ldr	r1, [pc, #200]	; (1e7a8 <bota_cli_cmd+0x114>)
   1e6e0:	4602      	mov	r2, r0
        streamer_printf(streamer, "rc=%d\n", rc);
   1e6e2:	4620      	mov	r0, r4
   1e6e4:	f7f2 febf 	bl	11466 <streamer_printf>
    }
    return 0;
}
   1e6e8:	2000      	movs	r0, #0
   1e6ea:	b003      	add	sp, #12
   1e6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        fa_id = strtol(argv[2], NULL, 0);
   1e6ee:	4601      	mov	r1, r0
   1e6f0:	68b0      	ldr	r0, [r6, #8]
   1e6f2:	f7ff fd1c 	bl	1e12e <strtol>
        rc = check_image_fid(fa_id, streamer);
   1e6f6:	4621      	mov	r1, r4
   1e6f8:	f7ff ff90 	bl	1e61c <check_image_fid>
        streamer_printf(streamer, "rc=%d\n", rc);
   1e6fc:	492b      	ldr	r1, [pc, #172]	; (1e7ac <bota_cli_cmd+0x118>)
        rc = check_image_fid(fa_id, streamer);
   1e6fe:	4602      	mov	r2, r0
        streamer_printf(streamer, "rc=%d\n", rc);
   1e700:	e7ef      	b.n	1e6e2 <bota_cli_cmd+0x4e>
    } else if (!strcmp(argv[1], "txim")) {
   1e702:	492b      	ldr	r1, [pc, #172]	; (1e7b0 <bota_cli_cmd+0x11c>)
   1e704:	4628      	mov	r0, r5
   1e706:	f7f0 ff9f 	bl	f648 <strcmp>
   1e70a:	4601      	mov	r1, r0
   1e70c:	bb30      	cbnz	r0, 1e75c <bota_cli_cmd+0xc8>
        if (argc < 4) {
   1e70e:	2f03      	cmp	r7, #3
   1e710:	ddc6      	ble.n	1e6a0 <bota_cli_cmd+0xc>
        tx_im_inst.addr = strtol(argv[2], NULL, 0);
   1e712:	4602      	mov	r2, r0
   1e714:	9001      	str	r0, [sp, #4]
   1e716:	68b0      	ldr	r0, [r6, #8]
   1e718:	4d26      	ldr	r5, [pc, #152]	; (1e7b4 <bota_cli_cmd+0x120>)
   1e71a:	f7ff fd08 	bl	1e12e <strtol>
        tx_im_inst.slot_id = strtol(argv[3], NULL, 0);
   1e71e:	9901      	ldr	r1, [sp, #4]
        tx_im_inst.addr = strtol(argv[2], NULL, 0);
   1e720:	8068      	strh	r0, [r5, #2]
        tx_im_inst.slot_id = strtol(argv[3], NULL, 0);
   1e722:	460a      	mov	r2, r1
        tx_im_inst.reset = 5;
   1e724:	2305      	movs	r3, #5
        tx_im_inst.slot_id = strtol(argv[3], NULL, 0);
   1e726:	68f0      	ldr	r0, [r6, #12]
        tx_im_inst.reset = 5;
   1e728:	702b      	strb	r3, [r5, #0]
        tx_im_inst.slot_id = strtol(argv[3], NULL, 0);
   1e72a:	f7ff fd00 	bl	1e12e <strtol>
        tx_im_inst.blocksize = 256;
   1e72e:	f44f 7380 	mov.w	r3, #256	; 0x100
        tx_im_inst.flags = BOTA_FLAGS_SET_PERMANENT;
   1e732:	2201      	movs	r2, #1
        tx_im_inst.blocksize = 256;
   1e734:	60ab      	str	r3, [r5, #8]
        tx_im_inst.flags = BOTA_FLAGS_SET_PERMANENT;
   1e736:	2300      	movs	r3, #0
   1e738:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
        tx_im_inst.slot_id = strtol(argv[3], NULL, 0);
   1e73c:	6068      	str	r0, [r5, #4]
        tx_im_inst.streamer = streamer_console_get();
   1e73e:	f7f6 fdf1 	bl	15324 <streamer_console_get>
        os_callout_reset(&tx_im_inst.callout, 0);
   1e742:	9901      	ldr	r1, [sp, #4]
        tx_im_inst.streamer = streamer_console_get();
   1e744:	63a8      	str	r0, [r5, #56]	; 0x38
        os_callout_reset(&tx_im_inst.callout, 0);
   1e746:	f105 000c 	add.w	r0, r5, #12
   1e74a:	f7ea fd6b 	bl	9224 <os_callout_reset>
        streamer_printf(streamer, "txim slot %d to 0x%x\n", tx_im_inst.slot_id, tx_im_inst.addr);
   1e74e:	886b      	ldrh	r3, [r5, #2]
   1e750:	686a      	ldr	r2, [r5, #4]
   1e752:	4919      	ldr	r1, [pc, #100]	; (1e7b8 <bota_cli_cmd+0x124>)
   1e754:	4620      	mov	r0, r4
   1e756:	f7f2 fe86 	bl	11466 <streamer_printf>
   1e75a:	e7c5      	b.n	1e6e8 <bota_cli_cmd+0x54>
    } else if (!strcmp(argv[1], "txrst")) {
   1e75c:	4628      	mov	r0, r5
   1e75e:	4917      	ldr	r1, [pc, #92]	; (1e7bc <bota_cli_cmd+0x128>)
   1e760:	f7f0 ff72 	bl	f648 <strcmp>
   1e764:	4605      	mov	r5, r0
   1e766:	b9b8      	cbnz	r0, 1e798 <bota_cli_cmd+0x104>
        if (argc < 3) {
   1e768:	2f02      	cmp	r7, #2
   1e76a:	d099      	beq.n	1e6a0 <bota_cli_cmd+0xc>
        uint16_t addr = strtol(argv[2], NULL, 0);
   1e76c:	4602      	mov	r2, r0
   1e76e:	4601      	mov	r1, r0
   1e770:	68b0      	ldr	r0, [r6, #8]
   1e772:	f7ff fcdc 	bl	1e12e <strtol>
   1e776:	4604      	mov	r4, r0
        struct os_mbuf *om = bcast_ota_get_reset_mbuf();
   1e778:	f7ff fe34 	bl	1e3e4 <bcast_ota_get_reset_mbuf>
   1e77c:	9001      	str	r0, [sp, #4]
        nmgr_uwb_instance_t *nmgruwb = (nmgr_uwb_instance_t*)uwb_mac_find_cb_inst_ptr(uwb_dev_idx_lookup(0), UWBEXT_NMGR_UWB);
   1e77e:	4628      	mov	r0, r5
   1e780:	f7ea f962 	bl	8a48 <uwb_dev_idx_lookup>
   1e784:	2113      	movs	r1, #19
   1e786:	f7ea f9d3 	bl	8b30 <uwb_mac_find_cb_inst_ptr>
        uwb_nmgr_queue_tx(nmgruwb, addr, UWB_DATA_CODE_NMGR_REQUEST, om);
   1e78a:	9b01      	ldr	r3, [sp, #4]
   1e78c:	f240 4221 	movw	r2, #1057	; 0x421
   1e790:	b2a1      	uxth	r1, r4
   1e792:	f7ec faa5 	bl	ace0 <uwb_nmgr_queue_tx>
   1e796:	e7a7      	b.n	1e6e8 <bota_cli_cmd+0x54>
        streamer_printf(streamer, "Unknown cmd\n");
   1e798:	4909      	ldr	r1, [pc, #36]	; (1e7c0 <bota_cli_cmd+0x12c>)
   1e79a:	e782      	b.n	1e6a2 <bota_cli_cmd+0xe>
   1e79c:	00021e76 	.word	0x00021e76
   1e7a0:	00022bcb 	.word	0x00022bcb
   1e7a4:	00023e40 	.word	0x00023e40
   1e7a8:	00023e4b 	.word	0x00023e4b
   1e7ac:	00024068 	.word	0x00024068
   1e7b0:	00023e56 	.word	0x00023e56
   1e7b4:	20005058 	.word	0x20005058
   1e7b8:	00023e5b 	.word	0x00023e5b
   1e7bc:	00023e71 	.word	0x00023e71
   1e7c0:	00022015 	.word	0x00022015

0001e7c4 <bota_cli_register>:

int
bota_cli_register(void)
{
   1e7c4:	b510      	push	{r4, lr}
    int rc;
    rc = nmgr_transport_init(&nmgr_mstr_transport, nmgr_mstr_out,
   1e7c6:	4a0d      	ldr	r2, [pc, #52]	; (1e7fc <bota_cli_register+0x38>)
   1e7c8:	490d      	ldr	r1, [pc, #52]	; (1e800 <bota_cli_register+0x3c>)
   1e7ca:	480e      	ldr	r0, [pc, #56]	; (1e804 <bota_cli_register+0x40>)
   1e7cc:	f7f2 fa94 	bl	10cf8 <nmgr_transport_init>
                             nmgr_mstr_get_mtu);
    assert(rc == 0);
   1e7d0:	4604      	mov	r4, r0
   1e7d2:	b128      	cbz	r0, 1e7e0 <bota_cli_register+0x1c>
   1e7d4:	2300      	movs	r3, #0
   1e7d6:	461a      	mov	r2, r3
   1e7d8:	4619      	mov	r1, r3
   1e7da:	4618      	mov	r0, r3
   1e7dc:	f7ea fb8a 	bl	8ef4 <__assert_func>
    os_callout_init(&tx_im_inst.callout, os_eventq_dflt_get(), txim_ev_cb, NULL);
   1e7e0:	f7ea ff1c 	bl	961c <os_eventq_dflt_get>
   1e7e4:	4623      	mov	r3, r4
   1e7e6:	4601      	mov	r1, r0
   1e7e8:	4a07      	ldr	r2, [pc, #28]	; (1e808 <bota_cli_register+0x44>)
   1e7ea:	4808      	ldr	r0, [pc, #32]	; (1e80c <bota_cli_register+0x48>)
   1e7ec:	f7ea fcee 	bl	91cc <os_callout_init>

    return shell_cmd_register(&shell_bota_cmd);
}
   1e7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return shell_cmd_register(&shell_bota_cmd);
   1e7f4:	4806      	ldr	r0, [pc, #24]	; (1e810 <bota_cli_register+0x4c>)
   1e7f6:	f7f5 ba21 	b.w	13c3c <shell_cmd_register>
   1e7fa:	bf00      	nop
   1e7fc:	0001e4b5 	.word	0x0001e4b5
   1e800:	0001e5a5 	.word	0x0001e5a5
   1e804:	20005038 	.word	0x20005038
   1e808:	0001e4b9 	.word	0x0001e4b9
   1e80c:	20005064 	.word	0x20005064
   1e810:	20000f38 	.word	0x20000f38

0001e814 <cbor_encode_text_stringz>:
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1e814:	b513      	push	{r0, r1, r4, lr}
   1e816:	4604      	mov	r4, r0
   1e818:	4608      	mov	r0, r1
   1e81a:	9101      	str	r1, [sp, #4]
   1e81c:	f7f0 ff1f 	bl	f65e <strlen>
   1e820:	9901      	ldr	r1, [sp, #4]
   1e822:	4602      	mov	r2, r0
   1e824:	4620      	mov	r0, r4
   1e826:	b002      	add	sp, #8
   1e828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e82c:	f7f7 bc2d 	b.w	1608a <cbor_encode_text_string>

0001e830 <bota_upload>:
}


static int
bota_upload(struct mgmt_cbuf *cb)
{
   1e830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e834:	b0f9      	sub	sp, #484	; 0x1e4
    uint64_t off = UINT_MAX;
    uint64_t size = UINT_MAX;
    uint64_t slot = UINT_MAX;
    uint64_t flags = UINT_MAX;
    bool erase = 0;
    size_t data_len = 0;
   1e836:	ae0e      	add	r6, sp, #56	; 0x38
{
   1e838:	900c      	str	r0, [sp, #48]	; 0x30
    uint8_t *img_data = (uint8_t*)malloc(MYNEWT_VAL(IMGMGR_MAX_CHUNK_SIZE));
   1e83a:	f44f 7000 	mov.w	r0, #512	; 0x200
   1e83e:	f7f0 fe4b 	bl	f4d8 <malloc>
    uint64_t off = UINT_MAX;
   1e842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e846:	2300      	movs	r3, #0
    size_t data_len = 0;
   1e848:	2100      	movs	r1, #0
    uint64_t off = UINT_MAX;
   1e84a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    uint64_t size = UINT_MAX;
   1e84e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    uint64_t slot = UINT_MAX;
   1e852:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    uint64_t flags = UINT_MAX;
   1e856:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    size_t data_len = 0;
   1e85a:	6031      	str	r1, [r6, #0]

    if (!img_data) {
   1e85c:	4605      	mov	r5, r0
   1e85e:	b958      	cbnz	r0, 1e878 <bota_upload+0x48>
        BOTA_ERR("ERR no mem\n");
   1e860:	4b83      	ldr	r3, [pc, #524]	; (1ea70 <bota_upload+0x240>)
   1e862:	4884      	ldr	r0, [pc, #528]	; (1ea74 <bota_upload+0x244>)
   1e864:	2203      	movs	r2, #3
   1e866:	2146      	movs	r1, #70	; 0x46
   1e868:	f7f4 f92c 	bl	12ac4 <log_printf>
        assert(0);
   1e86c:	462b      	mov	r3, r5
   1e86e:	462a      	mov	r2, r5
   1e870:	4629      	mov	r1, r5
   1e872:	4628      	mov	r0, r5
   1e874:	f7ea fb3e 	bl	8ef4 <__assert_func>
        return OS_ENOMEM;
    }

    const struct cbor_attr_t off_attr[] = {
   1e878:	f44f 7290 	mov.w	r2, #288	; 0x120
   1e87c:	a830      	add	r0, sp, #192	; 0xc0
   1e87e:	f7f0 febe 	bl	f5fe <memset>
   1e882:	4b7d      	ldr	r3, [pc, #500]	; (1ea78 <bota_upload+0x248>)
   1e884:	9330      	str	r3, [sp, #192]	; 0xc0
   1e886:	2303      	movs	r3, #3
   1e888:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
   1e88c:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e890:	933a      	str	r3, [sp, #232]	; 0xe8
   1e892:	4b7a      	ldr	r3, [pc, #488]	; (1ea7c <bota_upload+0x24c>)
   1e894:	497a      	ldr	r1, [pc, #488]	; (1ea80 <bota_upload+0x250>)
   1e896:	933c      	str	r3, [sp, #240]	; 0xf0
   1e898:	2301      	movs	r3, #1
   1e89a:	f88d 311c 	strb.w	r3, [sp, #284]	; 0x11c
   1e89e:	9148      	str	r1, [sp, #288]	; 0x120
   1e8a0:	f88d 314c 	strb.w	r3, [sp, #332]	; 0x14c
   1e8a4:	4977      	ldr	r1, [pc, #476]	; (1ea84 <bota_upload+0x254>)
   1e8a6:	f88d 317c 	strb.w	r3, [sp, #380]	; 0x17c
   1e8aa:	f88d 31ac 	strb.w	r3, [sp, #428]	; 0x1ac
    struct image_header tmp_hdr;
    int rc;
    CborError g_err = CborNoError;
    const struct flash_area *tmp_fa;

    rc = cbor_read_object(&cb->it, off_attr);
   1e8ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    const struct cbor_attr_t off_attr[] = {
   1e8b0:	9154      	str	r1, [sp, #336]	; 0x150
   1e8b2:	4975      	ldr	r1, [pc, #468]	; (1ea88 <bota_upload+0x258>)
   1e8b4:	9160      	str	r1, [sp, #384]	; 0x180
   1e8b6:	2202      	movs	r2, #2
   1e8b8:	f10d 0848 	add.w	r8, sp, #72	; 0x48
   1e8bc:	af10      	add	r7, sp, #64	; 0x40
   1e8be:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   1e8c2:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
    rc = cbor_read_object(&cb->it, off_attr);
   1e8c6:	a930      	add	r1, sp, #192	; 0xc0
   1e8c8:	f103 001c 	add.w	r0, r3, #28
    const struct cbor_attr_t off_attr[] = {
   1e8cc:	f88d 20f4 	strb.w	r2, [sp, #244]	; 0xf4
   1e8d0:	f88d 2124 	strb.w	r2, [sp, #292]	; 0x124
   1e8d4:	f88d 2154 	strb.w	r2, [sp, #340]	; 0x154
   1e8d8:	f88d 2184 	strb.w	r2, [sp, #388]	; 0x184
   1e8dc:	e9cd 5632 	strd	r5, r6, [sp, #200]	; 0xc8
   1e8e0:	f8cd 80f8 	str.w	r8, [sp, #248]	; 0xf8
   1e8e4:	974a      	str	r7, [sp, #296]	; 0x128
   1e8e6:	f8cd 9158 	str.w	r9, [sp, #344]	; 0x158
   1e8ea:	f8cd a188 	str.w	sl, [sp, #392]	; 0x188
    rc = cbor_read_object(&cb->it, off_attr);
   1e8ee:	f7f7 fa9e 	bl	15e2e <cbor_read_object>
    if (rc || off == UINT_MAX) {
   1e8f2:	4602      	mov	r2, r0
   1e8f4:	b938      	cbnz	r0, 1e906 <bota_upload+0xd6>
   1e8f6:	683b      	ldr	r3, [r7, #0]
   1e8f8:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e8fa:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1e8fe:	4281      	cmp	r1, r0
   1e900:	bf08      	it	eq
   1e902:	455b      	cmpeq	r3, fp
   1e904:	d113      	bne.n	1e92e <bota_upload+0xfe>
        BOTA_ERR("ERR read_failed rc %d off %llx\n", rc, off);
   1e906:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1e90a:	9200      	str	r2, [sp, #0]
   1e90c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1e910:	4b5e      	ldr	r3, [pc, #376]	; (1ea8c <bota_upload+0x25c>)
   1e912:	4858      	ldr	r0, [pc, #352]	; (1ea74 <bota_upload+0x244>)
   1e914:	2203      	movs	r2, #3
   1e916:	2146      	movs	r1, #70	; 0x46
   1e918:	f7f4 f8d4 	bl	12ac4 <log_printf>
    if(rc){
        free(img_data);
        return MGMT_ERR_EINVAL;
    }
    if (!tmp_fa) {
        free(img_data);
   1e91c:	4628      	mov	r0, r5
   1e91e:	f7f0 fe27 	bl	f570 <free>
        return MGMT_ERR_EINVAL;
   1e922:	f04f 0903 	mov.w	r9, #3
    return 0;
err_close:
    free(img_data);
    flash_area_close(tmp_fa);
    return rc;
}
   1e926:	4648      	mov	r0, r9
   1e928:	b079      	add	sp, #484	; 0x1e4
   1e92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BOTA_DEBUG("bota: l%ld(%lu),o%ld,s%ld(%d),e%d,f%llx(%llx) ec:%ld\n",
   1e92e:	4c58      	ldr	r4, [pc, #352]	; (1ea90 <bota_upload+0x260>)
   1e930:	9205      	str	r2, [sp, #20]
   1e932:	68a1      	ldr	r1, [r4, #8]
   1e934:	910a      	str	r1, [sp, #40]	; 0x28
   1e936:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1e93a:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1e93e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   1e942:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1e946:	7b21      	ldrb	r1, [r4, #12]
   1e948:	9104      	str	r1, [sp, #16]
   1e94a:	f8d9 1000 	ldr.w	r1, [r9]
   1e94e:	4849      	ldr	r0, [pc, #292]	; (1ea74 <bota_upload+0x244>)
   1e950:	920d      	str	r2, [sp, #52]	; 0x34
   1e952:	e9cd 3102 	strd	r3, r1, [sp, #8]
   1e956:	6863      	ldr	r3, [r4, #4]
   1e958:	9301      	str	r3, [sp, #4]
   1e95a:	f8d8 3000 	ldr.w	r3, [r8]
   1e95e:	9300      	str	r3, [sp, #0]
   1e960:	2146      	movs	r1, #70	; 0x46
   1e962:	4b4c      	ldr	r3, [pc, #304]	; (1ea94 <bota_upload+0x264>)
   1e964:	f7f4 f8ae 	bl	12ac4 <log_printf>
    if (slot != UINT_MAX) {
   1e968:	f8d9 0000 	ldr.w	r0, [r9]
   1e96c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1e96e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1e970:	4293      	cmp	r3, r2
   1e972:	bf08      	it	eq
   1e974:	4558      	cmpeq	r0, fp
   1e976:	d003      	beq.n	1e980 <bota_upload+0x150>
        bota_state.upload.slot_id = slot;
   1e978:	7320      	strb	r0, [r4, #12]
        bota_state.upload.fa_id = flash_area_id_from_image_slot(slot);
   1e97a:	f7f3 ff8d 	bl	12898 <flash_area_id_from_image_slot>
   1e97e:	7360      	strb	r0, [r4, #13]
    if (size != UINT_MAX) {
   1e980:	f8d8 3000 	ldr.w	r3, [r8]
   1e984:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    if (bota_state.upload.fa_id < flash_area_id_from_image_slot(1)) {
   1e986:	f894 900d 	ldrb.w	r9, [r4, #13]
    if (size != UINT_MAX) {
   1e98a:	2a00      	cmp	r2, #0
   1e98c:	bf08      	it	eq
   1e98e:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
        bota_state.upload.size = size;
   1e992:	bf18      	it	ne
   1e994:	6063      	strne	r3, [r4, #4]
    if (flags != UINT_MAX) {
   1e996:	f8da 2000 	ldr.w	r2, [sl]
   1e99a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    if (bota_state.upload.fa_id < flash_area_id_from_image_slot(1)) {
   1e99c:	2001      	movs	r0, #1
    if (flags != UINT_MAX) {
   1e99e:	2b00      	cmp	r3, #0
   1e9a0:	bf08      	it	eq
   1e9a2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
        bota_state.upload.flags = flags;
   1e9a6:	bf18      	it	ne
   1e9a8:	e9c4 2304 	strdne	r2, r3, [r4, #16]
    if (bota_state.upload.fa_id < flash_area_id_from_image_slot(1)) {
   1e9ac:	f7f3 ff74 	bl	12898 <flash_area_id_from_image_slot>
   1e9b0:	4581      	cmp	r9, r0
   1e9b2:	7b60      	ldrb	r0, [r4, #13]
   1e9b4:	da07      	bge.n	1e9c6 <bota_upload+0x196>
        BOTA_ERR("ERR Unknown fa_id(%d)\n", bota_state.upload.fa_id);
   1e9b6:	9000      	str	r0, [sp, #0]
   1e9b8:	4b37      	ldr	r3, [pc, #220]	; (1ea98 <bota_upload+0x268>)
   1e9ba:	482e      	ldr	r0, [pc, #184]	; (1ea74 <bota_upload+0x244>)
   1e9bc:	2203      	movs	r2, #3
   1e9be:	2146      	movs	r1, #70	; 0x46
   1e9c0:	f7f4 f880 	bl	12ac4 <log_printf>
        free(img_data);
   1e9c4:	e7aa      	b.n	1e91c <bota_upload+0xec>
    rc = flash_area_open(bota_state.upload.fa_id, &tmp_fa);
   1e9c6:	a90f      	add	r1, sp, #60	; 0x3c
   1e9c8:	f7f3 feb6 	bl	12738 <flash_area_open>
    if(rc){
   1e9cc:	4681      	mov	r9, r0
   1e9ce:	2800      	cmp	r0, #0
   1e9d0:	d1a4      	bne.n	1e91c <bota_upload+0xec>
    if (!tmp_fa) {
   1e9d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1e9d4:	2800      	cmp	r0, #0
   1e9d6:	d0a1      	beq.n	1e91c <bota_upload+0xec>
    if (off == 0) {
   1e9d8:	683a      	ldr	r2, [r7, #0]
   1e9da:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e9dc:	4313      	orrs	r3, r2
   1e9de:	d173      	bne.n	1eac8 <bota_upload+0x298>
        if (data_len < sizeof(struct image_header)) {
   1e9e0:	6833      	ldr	r3, [r6, #0]
   1e9e2:	2b1f      	cmp	r3, #31
   1e9e4:	f240 80f7 	bls.w	1ebd6 <bota_upload+0x3a6>
        if (new_hdr->ih_magic != IMAGE_MAGIC) {
   1e9e8:	f8d5 a000 	ldr.w	sl, [r5]
   1e9ec:	4b2b      	ldr	r3, [pc, #172]	; (1ea9c <bota_upload+0x26c>)
   1e9ee:	459a      	cmp	sl, r3
   1e9f0:	f040 80f1 	bne.w	1ebd6 <bota_upload+0x3a6>
        rc = flash_area_read(tmp_fa, 0, &tmp_hdr, sizeof(struct image_header));
   1e9f4:	2320      	movs	r3, #32
   1e9f6:	aa18      	add	r2, sp, #96	; 0x60
   1e9f8:	4649      	mov	r1, r9
   1e9fa:	f7f3 fef5 	bl	127e8 <flash_area_read>
        if (tmp_hdr.ih_magic != IMAGE_MAGIC ||
   1e9fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1ea00:	4553      	cmp	r3, sl
   1ea02:	d132      	bne.n	1ea6a <bota_upload+0x23a>
            new_hdr->ih_ver.iv_minor     != tmp_hdr.ih_ver.iv_minor ||
   1ea04:	696a      	ldr	r2, [r5, #20]
   1ea06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1ea08:	429a      	cmp	r2, r3
   1ea0a:	d12e      	bne.n	1ea6a <bota_upload+0x23a>
            new_hdr->ih_ver.iv_revision  != tmp_hdr.ih_ver.iv_revision ||
   1ea0c:	69ab      	ldr	r3, [r5, #24]
   1ea0e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1ea10:	1a9a      	subs	r2, r3, r2
   1ea12:	bf18      	it	ne
   1ea14:	2201      	movne	r2, #1
        bota_state.upload.size = size;
   1ea16:	f8d8 3000 	ldr.w	r3, [r8]
        bota_state.upload.off = 0;
   1ea1a:	f04f 0a00 	mov.w	sl, #0
        bota_state.upload.upl_errs = 0;
   1ea1e:	e9c4 3a01 	strd	r3, sl, [r4, #4]
        bota_state.upload.off = 0;
   1ea22:	f8c4 a000 	str.w	sl, [r4]
        if (erase==1) {
   1ea26:	2a00      	cmp	r2, #0
   1ea28:	d03e      	beq.n	1eaa8 <bota_upload+0x278>
            BOTA_DEBUG("### New upload: %d.%d.%d.%d\n", new_hdr->ih_ver.iv_major,
   1ea2a:	69ab      	ldr	r3, [r5, #24]
   1ea2c:	9303      	str	r3, [sp, #12]
   1ea2e:	8aeb      	ldrh	r3, [r5, #22]
   1ea30:	9302      	str	r3, [sp, #8]
   1ea32:	7d6b      	ldrb	r3, [r5, #21]
   1ea34:	9301      	str	r3, [sp, #4]
   1ea36:	7d2b      	ldrb	r3, [r5, #20]
   1ea38:	480e      	ldr	r0, [pc, #56]	; (1ea74 <bota_upload+0x244>)
   1ea3a:	9300      	str	r3, [sp, #0]
   1ea3c:	4652      	mov	r2, sl
   1ea3e:	4b18      	ldr	r3, [pc, #96]	; (1eaa0 <bota_upload+0x270>)
   1ea40:	2146      	movs	r1, #70	; 0x46
   1ea42:	f7f4 f83f 	bl	12ac4 <log_printf>
            BOTA_DEBUG("### Erasing flash ###\n");
   1ea46:	4b17      	ldr	r3, [pc, #92]	; (1eaa4 <bota_upload+0x274>)
   1ea48:	480a      	ldr	r0, [pc, #40]	; (1ea74 <bota_upload+0x244>)
   1ea4a:	4652      	mov	r2, sl
   1ea4c:	2146      	movs	r1, #70	; 0x46
   1ea4e:	f7f4 f839 	bl	12ac4 <log_printf>
            rc = flash_area_erase(tmp_fa, 0, tmp_fa->fa_size);
   1ea52:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1ea54:	4651      	mov	r1, sl
   1ea56:	6882      	ldr	r2, [r0, #8]
   1ea58:	f7f3 feea 	bl	12830 <flash_area_erase>
            if (rc) {
   1ea5c:	4680      	mov	r8, r0
   1ea5e:	b398      	cbz	r0, 1eac8 <bota_upload+0x298>
    free(img_data);
   1ea60:	4628      	mov	r0, r5
   1ea62:	f7f0 fd85 	bl	f570 <free>
    return rc;
   1ea66:	46c1      	mov	r9, r8
   1ea68:	e75d      	b.n	1e926 <bota_upload+0xf6>
            erase = 1;
   1ea6a:	2201      	movs	r2, #1
   1ea6c:	e7d3      	b.n	1ea16 <bota_upload+0x1e6>
   1ea6e:	bf00      	nop
   1ea70:	00023efc 	.word	0x00023efc
   1ea74:	20005018 	.word	0x20005018
   1ea78:	000228d4 	.word	0x000228d4
   1ea7c:	00021f66 	.word	0x00021f66
   1ea80:	00022722 	.word	0x00022722
   1ea84:	00022f06 	.word	0x00022f06
   1ea88:	00023a13 	.word	0x00023a13
   1ea8c:	00023f08 	.word	0x00023f08
   1ea90:	200050a0 	.word	0x200050a0
   1ea94:	00023f28 	.word	0x00023f28
   1ea98:	00023f5e 	.word	0x00023f5e
   1ea9c:	96f3b83d 	.word	0x96f3b83d
   1eaa0:	00023f75 	.word	0x00023f75
   1eaa4:	00023f92 	.word	0x00023f92
            BOTA_DEBUG("### Continuing upload of: %d.%d.%d.%d\n", tmp_hdr.ih_ver.iv_major,
   1eaa8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1eaaa:	9303      	str	r3, [sp, #12]
   1eaac:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
   1eab0:	9302      	str	r3, [sp, #8]
   1eab2:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
   1eab6:	9301      	str	r3, [sp, #4]
   1eab8:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
   1eabc:	9300      	str	r3, [sp, #0]
   1eabe:	4847      	ldr	r0, [pc, #284]	; (1ebdc <bota_upload+0x3ac>)
   1eac0:	4b47      	ldr	r3, [pc, #284]	; (1ebe0 <bota_upload+0x3b0>)
   1eac2:	2146      	movs	r1, #70	; 0x46
   1eac4:	f7f3 fffe 	bl	12ac4 <log_printf>
    if (data_len) {
   1eac8:	6833      	ldr	r3, [r6, #0]
   1eaca:	b1ab      	cbz	r3, 1eaf8 <bota_upload+0x2c8>
        rc = flash_area_write(tmp_fa, off, img_data, data_len);
   1eacc:	6839      	ldr	r1, [r7, #0]
   1eace:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1ead0:	462a      	mov	r2, r5
   1ead2:	f7f3 fe9b 	bl	1280c <flash_area_write>
        if (rc) {
   1ead6:	2800      	cmp	r0, #0
   1ead8:	d17d      	bne.n	1ebd6 <bota_upload+0x3a6>
        if (bota_state.upload.off != off) {
   1eada:	6822      	ldr	r2, [r4, #0]
   1eadc:	6839      	ldr	r1, [r7, #0]
   1eade:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1eae0:	4298      	cmp	r0, r3
   1eae2:	bf08      	it	eq
   1eae4:	428a      	cmpeq	r2, r1
            bota_state.upload.upl_errs++;
   1eae6:	bf18      	it	ne
   1eae8:	68a2      	ldrne	r2, [r4, #8]
        bota_state.upload.off = off+data_len;
   1eaea:	6833      	ldr	r3, [r6, #0]
            bota_state.upload.upl_errs++;
   1eaec:	bf18      	it	ne
   1eaee:	3201      	addne	r2, #1
        bota_state.upload.off = off+data_len;
   1eaf0:	440b      	add	r3, r1
            bota_state.upload.upl_errs++;
   1eaf2:	bf18      	it	ne
   1eaf4:	60a2      	strne	r2, [r4, #8]
        bota_state.upload.off = off+data_len;
   1eaf6:	6023      	str	r3, [r4, #0]
    if (bota_state.upload.size == bota_state.upload.off) {
   1eaf8:	e9d4 3200 	ldrd	r3, r2, [r4]
   1eafc:	429a      	cmp	r2, r3
   1eafe:	d12b      	bne.n	1eb58 <bota_upload+0x328>
        BOTA_DEBUG("#### All done, checking image\n");
   1eb00:	4b38      	ldr	r3, [pc, #224]	; (1ebe4 <bota_upload+0x3b4>)
   1eb02:	4836      	ldr	r0, [pc, #216]	; (1ebdc <bota_upload+0x3ac>)
   1eb04:	2200      	movs	r2, #0
   1eb06:	2146      	movs	r1, #70	; 0x46
   1eb08:	f7f3 ffdc 	bl	12ac4 <log_printf>
        rc = bota_check_image(tmp_fa);
   1eb0c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    rc = flash_area_read(fap, 0, &hdr, sizeof(struct image_header));
   1eb10:	2320      	movs	r3, #32
   1eb12:	aa20      	add	r2, sp, #128	; 0x80
   1eb14:	2100      	movs	r1, #0
   1eb16:	4640      	mov	r0, r8
   1eb18:	f7f3 fe66 	bl	127e8 <flash_area_read>
    if (rc!=0) {
   1eb1c:	4607      	mov	r7, r0
   1eb1e:	b9a8      	cbnz	r0, 1eb4c <bota_upload+0x31c>
    void *tmpbuf = malloc(TMPBUF_SZ);
   1eb20:	f44f 7080 	mov.w	r0, #256	; 0x100
   1eb24:	f7f0 fcd8 	bl	f4d8 <malloc>
    if (!tmpbuf) {
   1eb28:	4606      	mov	r6, r0
   1eb2a:	b178      	cbz	r0, 1eb4c <bota_upload+0x31c>
    rc = bootutil_img_validate(&hdr, fap, tmpbuf, TMPBUF_SZ,
   1eb2c:	ab28      	add	r3, sp, #160	; 0xa0
   1eb2e:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1eb32:	9700      	str	r7, [sp, #0]
   1eb34:	4602      	mov	r2, r0
   1eb36:	f44f 7380 	mov.w	r3, #256	; 0x100
   1eb3a:	4641      	mov	r1, r8
   1eb3c:	a820      	add	r0, sp, #128	; 0x80
   1eb3e:	f000 fc94 	bl	1f46a <bootutil_img_validate>
   1eb42:	4607      	mov	r7, r0
    free(tmpbuf);
   1eb44:	4630      	mov	r0, r6
   1eb46:	f7f0 fd13 	bl	f570 <free>
        if (rc != 0) {
   1eb4a:	b32f      	cbz	r7, 1eb98 <bota_upload+0x368>
            BOTA_DEBUG("#### Hash / image failed\n");
   1eb4c:	4b26      	ldr	r3, [pc, #152]	; (1ebe8 <bota_upload+0x3b8>)
   1eb4e:	4823      	ldr	r0, [pc, #140]	; (1ebdc <bota_upload+0x3ac>)
   1eb50:	2200      	movs	r2, #0
   1eb52:	2146      	movs	r1, #70	; 0x46
   1eb54:	f7f3 ffb6 	bl	12ac4 <log_printf>
    free(img_data);
   1eb58:	4628      	mov	r0, r5
   1eb5a:	f7f0 fd09 	bl	f570 <free>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1eb5e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1eb60:	4922      	ldr	r1, [pc, #136]	; (1ebec <bota_upload+0x3bc>)
   1eb62:	360c      	adds	r6, #12
   1eb64:	4630      	mov	r0, r6
   1eb66:	f7ff fe55 	bl	1e814 <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1eb6a:	2200      	movs	r2, #0
   1eb6c:	2300      	movs	r3, #0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1eb6e:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1eb70:	4630      	mov	r0, r6
   1eb72:	f7f7 fa59 	bl	16028 <cbor_encode_int>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "off");
   1eb76:	491e      	ldr	r1, [pc, #120]	; (1ebf0 <bota_upload+0x3c0>)
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1eb78:	4305      	orrs	r5, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "off");
   1eb7a:	4630      	mov	r0, r6
   1eb7c:	f7ff fe4a 	bl	1e814 <cbor_encode_text_stringz>
    g_err |= cbor_encode_int(&cb->encoder, bota_state.upload.off);
   1eb80:	2300      	movs	r3, #0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "off");
   1eb82:	4305      	orrs	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, bota_state.upload.off);
   1eb84:	6822      	ldr	r2, [r4, #0]
   1eb86:	4630      	mov	r0, r6
   1eb88:	f7f7 fa4e 	bl	16028 <cbor_encode_int>
        return MGMT_ERR_ENOMEM;
   1eb8c:	ea55 0300 	orrs.w	r3, r5, r0
   1eb90:	bf18      	it	ne
   1eb92:	f04f 0902 	movne.w	r9, #2
   1eb96:	e6c6      	b.n	1e926 <bota_upload+0xf6>
        BOTA_DEBUG("#### Hash ok, set perm? %d \n",
   1eb98:	6923      	ldr	r3, [r4, #16]
   1eb9a:	4810      	ldr	r0, [pc, #64]	; (1ebdc <bota_upload+0x3ac>)
   1eb9c:	f003 0301 	and.w	r3, r3, #1
   1eba0:	463a      	mov	r2, r7
   1eba2:	2146      	movs	r1, #70	; 0x46
   1eba4:	9300      	str	r3, [sp, #0]
   1eba6:	4b13      	ldr	r3, [pc, #76]	; (1ebf4 <bota_upload+0x3c4>)
   1eba8:	f7f3 ff8c 	bl	12ac4 <log_printf>
        rc = boot_set_pending((bota_state.upload.flags&BOTA_FLAGS_SET_PERMANENT)?1:0);
   1ebac:	6920      	ldr	r0, [r4, #16]
   1ebae:	f000 0001 	and.w	r0, r0, #1
   1ebb2:	f7f6 fcf5 	bl	155a0 <boot_set_pending>
        BOTA_INFO("#### Will boot into new image at next boot\n", rc);
   1ebb6:	4b10      	ldr	r3, [pc, #64]	; (1ebf8 <bota_upload+0x3c8>)
   1ebb8:	9000      	str	r0, [sp, #0]
   1ebba:	2201      	movs	r2, #1
   1ebbc:	4807      	ldr	r0, [pc, #28]	; (1ebdc <bota_upload+0x3ac>)
   1ebbe:	2146      	movs	r1, #70	; 0x46
   1ebc0:	f7f3 ff80 	bl	12ac4 <log_printf>
        os_time_delay(OS_TICKS_PER_SEC);
   1ebc4:	2080      	movs	r0, #128	; 0x80
   1ebc6:	f7eb f9eb 	bl	9fa0 <os_time_delay>
        if (_new_image_cb) {
   1ebca:	4b0c      	ldr	r3, [pc, #48]	; (1ebfc <bota_upload+0x3cc>)
   1ebcc:	681b      	ldr	r3, [r3, #0]
   1ebce:	2b00      	cmp	r3, #0
   1ebd0:	d0c2      	beq.n	1eb58 <bota_upload+0x328>
            _new_image_cb();
   1ebd2:	4798      	blx	r3
   1ebd4:	e7c0      	b.n	1eb58 <bota_upload+0x328>
            rc = MGMT_ERR_EINVAL;
   1ebd6:	f04f 0803 	mov.w	r8, #3
   1ebda:	e741      	b.n	1ea60 <bota_upload+0x230>
   1ebdc:	20005018 	.word	0x20005018
   1ebe0:	00023fa9 	.word	0x00023fa9
   1ebe4:	00023fd0 	.word	0x00023fd0
   1ebe8:	00023fef 	.word	0x00023fef
   1ebec:	00022490 	.word	0x00022490
   1ebf0:	00022493 	.word	0x00022493
   1ebf4:	00024009 	.word	0x00024009
   1ebf8:	00024026 	.word	0x00024026
   1ebfc:	20005098 	.word	0x20005098

0001ec00 <bota_confirm>:

static int
bota_confirm(struct mgmt_cbuf *cb)
{
   1ec00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    CborError g_err = CborNoError;
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1ec02:	f100 050c 	add.w	r5, r0, #12
   1ec06:	4910      	ldr	r1, [pc, #64]	; (1ec48 <bota_confirm+0x48>)
   1ec08:	4628      	mov	r0, r5
   1ec0a:	f7ff fe03 	bl	1e814 <cbor_encode_text_stringz>
   1ec0e:	4604      	mov	r4, r0
    uint64_t rc = boot_set_confirmed();
   1ec10:	f7f6 fd07 	bl	15622 <boot_set_confirmed>
    if (rc == OS_OK) {
   1ec14:	b9a8      	cbnz	r0, 1ec42 <bota_confirm+0x42>
        BOTA_INFO("#### Image confirmed, rc=%d\n", rc);
   1ec16:	2600      	movs	r6, #0
   1ec18:	2700      	movs	r7, #0
   1ec1a:	4b0c      	ldr	r3, [pc, #48]	; (1ec4c <bota_confirm+0x4c>)
   1ec1c:	480c      	ldr	r0, [pc, #48]	; (1ec50 <bota_confirm+0x50>)
   1ec1e:	2201      	movs	r2, #1
   1ec20:	e9cd 6700 	strd	r6, r7, [sp]
   1ec24:	2146      	movs	r1, #70	; 0x46
   1ec26:	f7f3 ff4d 	bl	12ac4 <log_printf>
        g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1ec2a:	4632      	mov	r2, r6
   1ec2c:	463b      	mov	r3, r7
    } else {
        g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EUNKNOWN);
   1ec2e:	4628      	mov	r0, r5
   1ec30:	f7f7 f9fa 	bl	16028 <cbor_encode_int>
   1ec34:	4320      	orrs	r0, r4
    }

    if (g_err) {
        return MGMT_ERR_ENOMEM;
   1ec36:	2800      	cmp	r0, #0
    }
    return 0;
}
   1ec38:	bf14      	ite	ne
   1ec3a:	2002      	movne	r0, #2
   1ec3c:	2000      	moveq	r0, #0
   1ec3e:	b003      	add	sp, #12
   1ec40:	bdf0      	pop	{r4, r5, r6, r7, pc}
        g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EUNKNOWN);
   1ec42:	2201      	movs	r2, #1
   1ec44:	2300      	movs	r3, #0
   1ec46:	e7f2      	b.n	1ec2e <bota_confirm+0x2e>
   1ec48:	00022490 	.word	0x00022490
   1ec4c:	00024052 	.word	0x00024052
   1ec50:	20005018 	.word	0x20005018

0001ec54 <bcast_ota_nmgr_module_init>:
    _new_image_cb = cb;
}

void
bcast_ota_nmgr_module_init(void)
{
   1ec54:	b513      	push	{r0, r1, r4, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1ec56:	4b0c      	ldr	r3, [pc, #48]	; (1ec88 <bcast_ota_nmgr_module_init+0x34>)
   1ec58:	781b      	ldrb	r3, [r3, #0]
   1ec5a:	b923      	cbnz	r3, 1ec66 <bcast_ota_nmgr_module_init+0x12>
   1ec5c:	461a      	mov	r2, r3
   1ec5e:	4619      	mov	r1, r3
   1ec60:	4618      	mov	r0, r3
   1ec62:	f7ea f947 	bl	8ef4 <__assert_func>

    rc = mgmt_group_register(&bota_nmgr_group);
   1ec66:	4809      	ldr	r0, [pc, #36]	; (1ec8c <bcast_ota_nmgr_module_init+0x38>)
   1ec68:	f7f1 fed8 	bl	10a1c <mgmt_group_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1ec6c:	b138      	cbz	r0, 1ec7e <bcast_ota_nmgr_module_init+0x2a>
   1ec6e:	2300      	movs	r3, #0
   1ec70:	4a07      	ldr	r2, [pc, #28]	; (1ec90 <bcast_ota_nmgr_module_init+0x3c>)
   1ec72:	9300      	str	r3, [sp, #0]
   1ec74:	6814      	ldr	r4, [r2, #0]
   1ec76:	4619      	mov	r1, r3
   1ec78:	461a      	mov	r2, r3
   1ec7a:	4618      	mov	r0, r3
   1ec7c:	47a0      	blx	r4
    _new_image_cb = cb;
   1ec7e:	4b05      	ldr	r3, [pc, #20]	; (1ec94 <bcast_ota_nmgr_module_init+0x40>)
   1ec80:	4a05      	ldr	r2, [pc, #20]	; (1ec98 <bcast_ota_nmgr_module_init+0x44>)
   1ec82:	601a      	str	r2, [r3, #0]

#if MYNEWT_VAL(BCAST_OTA_REBOOT_ON_NEW_IMAGE)
    bcast_ota_set_new_fw_cb(hal_system_reset);
#endif
}
   1ec84:	b002      	add	sp, #8
   1ec86:	bd10      	pop	{r4, pc}
   1ec88:	20004ba8 	.word	0x20004ba8
   1ec8c:	20000f48 	.word	0x20000f48
   1ec90:	20000768 	.word	0x20000768
   1ec94:	20005098 	.word	0x20005098
   1ec98:	000081b1 	.word	0x000081b1

0001ec9c <config_pkg_init>:
#endif
#endif

void
config_pkg_init(void)
{
   1ec9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1ec9e:	4b2d      	ldr	r3, [pc, #180]	; (1ed54 <config_pkg_init+0xb8>)
   1eca0:	781b      	ldrb	r3, [r3, #0]
   1eca2:	b923      	cbnz	r3, 1ecae <config_pkg_init+0x12>
   1eca4:	461a      	mov	r2, r3
   1eca6:	4619      	mov	r1, r3
   1eca8:	4618      	mov	r0, r3
   1ecaa:	f7ea f923 	bl	8ef4 <__assert_func>

    conf_init();
   1ecae:	f7f2 fd1d 	bl	116ec <conf_init>
    rc = flash_area_to_sectors(MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, NULL);
   1ecb2:	2200      	movs	r2, #0
   1ecb4:	a903      	add	r1, sp, #12
   1ecb6:	2011      	movs	r0, #17
   1ecb8:	f7f3 fd5c 	bl	12774 <flash_area_to_sectors>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1ecbc:	b138      	cbz	r0, 1ecce <config_pkg_init+0x32>
   1ecbe:	2300      	movs	r3, #0
   1ecc0:	4a25      	ldr	r2, [pc, #148]	; (1ed58 <config_pkg_init+0xbc>)
   1ecc2:	9300      	str	r3, [sp, #0]
   1ecc4:	6814      	ldr	r4, [r2, #0]
   1ecc6:	4619      	mov	r1, r3
   1ecc8:	461a      	mov	r2, r3
   1ecca:	4618      	mov	r0, r3
   1eccc:	47a0      	blx	r4
    SYSINIT_PANIC_ASSERT(
   1ecce:	9b03      	ldr	r3, [sp, #12]
   1ecd0:	2b09      	cmp	r3, #9
   1ecd2:	d907      	bls.n	1ece4 <config_pkg_init+0x48>
   1ecd4:	2300      	movs	r3, #0
   1ecd6:	4a20      	ldr	r2, [pc, #128]	; (1ed58 <config_pkg_init+0xbc>)
   1ecd8:	9300      	str	r3, [sp, #0]
   1ecda:	6814      	ldr	r4, [r2, #0]
   1ecdc:	4619      	mov	r1, r3
   1ecde:	461a      	mov	r2, r3
   1ece0:	4618      	mov	r0, r3
   1ece2:	47a0      	blx	r4
    config_init_conf_fcb.cf_fcb.f_sector_cnt = cnt;
   1ece4:	4c1d      	ldr	r4, [pc, #116]	; (1ed5c <config_pkg_init+0xc0>)
    flash_area_to_sectors(
   1ece6:	4a1e      	ldr	r2, [pc, #120]	; (1ed60 <config_pkg_init+0xc4>)
   1ece8:	a903      	add	r1, sp, #12
   1ecea:	2011      	movs	r0, #17
   1ecec:	f7f3 fd42 	bl	12774 <flash_area_to_sectors>
    config_init_conf_fcb.cf_fcb.f_sector_cnt = cnt;
   1ecf0:	9b03      	ldr	r3, [sp, #12]
   1ecf2:	7363      	strb	r3, [r4, #13]
    rc = conf_fcb_src(&config_init_conf_fcb);
   1ecf4:	4620      	mov	r0, r4
   1ecf6:	f000 f8e3 	bl	1eec0 <conf_fcb_src>
    if (rc) {
   1ecfa:	b198      	cbz	r0, 1ed24 <config_pkg_init+0x88>
        for (cnt = 0;
   1ecfc:	2300      	movs	r3, #0
            flash_area_erase(&conf_fcb_area[cnt], 0,
   1ecfe:	4d18      	ldr	r5, [pc, #96]	; (1ed60 <config_pkg_init+0xc4>)
        for (cnt = 0;
   1ed00:	9303      	str	r3, [sp, #12]
            flash_area_erase(&conf_fcb_area[cnt], 0,
   1ed02:	260c      	movs	r6, #12
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
   1ed04:	9803      	ldr	r0, [sp, #12]
   1ed06:	7b63      	ldrb	r3, [r4, #13]
        for (cnt = 0;
   1ed08:	4298      	cmp	r0, r3
   1ed0a:	db19      	blt.n	1ed40 <config_pkg_init+0xa4>
        rc = conf_fcb_src(&config_init_conf_fcb);
   1ed0c:	4813      	ldr	r0, [pc, #76]	; (1ed5c <config_pkg_init+0xc0>)
   1ed0e:	f000 f8d7 	bl	1eec0 <conf_fcb_src>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1ed12:	b138      	cbz	r0, 1ed24 <config_pkg_init+0x88>
   1ed14:	2300      	movs	r3, #0
   1ed16:	4a10      	ldr	r2, [pc, #64]	; (1ed58 <config_pkg_init+0xbc>)
   1ed18:	9300      	str	r3, [sp, #0]
   1ed1a:	6814      	ldr	r4, [r2, #0]
   1ed1c:	4619      	mov	r1, r3
   1ed1e:	461a      	mov	r2, r3
   1ed20:	4618      	mov	r0, r3
   1ed22:	47a0      	blx	r4
    rc = conf_fcb_dst(&config_init_conf_fcb);
   1ed24:	480d      	ldr	r0, [pc, #52]	; (1ed5c <config_pkg_init+0xc0>)
   1ed26:	f000 f8f5 	bl	1ef14 <conf_fcb_dst>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1ed2a:	b138      	cbz	r0, 1ed3c <config_pkg_init+0xa0>
   1ed2c:	2300      	movs	r3, #0
   1ed2e:	4a0a      	ldr	r2, [pc, #40]	; (1ed58 <config_pkg_init+0xbc>)
   1ed30:	9300      	str	r3, [sp, #0]
   1ed32:	6814      	ldr	r4, [r2, #0]
   1ed34:	4619      	mov	r1, r3
   1ed36:	461a      	mov	r2, r3
   1ed38:	4618      	mov	r0, r3
   1ed3a:	47a0      	blx	r4
    config_init_fs();
#elif MYNEWT_VAL(CONFIG_FCB)
    config_init_fcb();
#endif
#endif
}
   1ed3c:	b004      	add	sp, #16
   1ed3e:	bd70      	pop	{r4, r5, r6, pc}
            flash_area_erase(&conf_fcb_area[cnt], 0,
   1ed40:	fb06 5000 	mla	r0, r6, r0, r5
   1ed44:	2100      	movs	r1, #0
   1ed46:	6882      	ldr	r2, [r0, #8]
   1ed48:	f7f3 fd72 	bl	12830 <flash_area_erase>
             cnt++) {
   1ed4c:	9b03      	ldr	r3, [sp, #12]
   1ed4e:	3301      	adds	r3, #1
   1ed50:	9303      	str	r3, [sp, #12]
   1ed52:	e7d7      	b.n	1ed04 <config_pkg_init+0x68>
   1ed54:	20004ba8 	.word	0x20004ba8
   1ed58:	20000768 	.word	0x20000768
   1ed5c:	20000f54 	.word	0x20000f54
   1ed60:	200050b8 	.word	0x200050b8

0001ed64 <config_pkg_init_stage2>:
     */
#if MYNEWT_VAL(CONFIG_NFFS)
    fs_mkdir(MYNEWT_VAL(CONFIG_NFFS_DIR));
#endif
#endif
}
   1ed64:	4770      	bx	lr
	...

0001ed68 <conf_fcb_load>:
    return 0;
}

static int
conf_fcb_load(struct conf_store *cs, conf_store_load_cb cb, void *cb_arg)
{
   1ed68:	b507      	push	{r0, r1, r2, lr}
    struct conf_fcb_load_cb_arg arg;
    int rc;

    arg.cb = cb;
    arg.cb_arg = cb_arg;
    rc = fcb_walk(&cf->cf_fcb, 0, conf_fcb_load_cb, &arg);
   1ed6a:	3008      	adds	r0, #8
    arg.cb_arg = cb_arg;
   1ed6c:	e9cd 1200 	strd	r1, r2, [sp]
    rc = fcb_walk(&cf->cf_fcb, 0, conf_fcb_load_cb, &arg);
   1ed70:	466b      	mov	r3, sp
   1ed72:	4a05      	ldr	r2, [pc, #20]	; (1ed88 <conf_fcb_load+0x20>)
   1ed74:	2100      	movs	r1, #0
   1ed76:	f7f7 ff99 	bl	16cac <fcb_walk>
    if (rc) {
        return OS_EINVAL;
   1ed7a:	2800      	cmp	r0, #0
    }
    return OS_OK;
}
   1ed7c:	bf18      	it	ne
   1ed7e:	2002      	movne	r0, #2
   1ed80:	b003      	add	sp, #12
   1ed82:	f85d fb04 	ldr.w	pc, [sp], #4
   1ed86:	bf00      	nop
   1ed88:	0001ed8d 	.word	0x0001ed8d

0001ed8c <conf_fcb_load_cb>:
{
   1ed8c:	b570      	push	{r4, r5, r6, lr}
   1ed8e:	8985      	ldrh	r5, [r0, #12]
   1ed90:	f240 135f 	movw	r3, #351	; 0x15f
   1ed94:	429d      	cmp	r5, r3
   1ed96:	b0da      	sub	sp, #360	; 0x168
   1ed98:	bf28      	it	cs
   1ed9a:	461d      	movcs	r5, r3
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, len);
   1ed9c:	ae02      	add	r6, sp, #8
{
   1ed9e:	460c      	mov	r4, r1
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, len);
   1eda0:	462b      	mov	r3, r5
   1eda2:	6881      	ldr	r1, [r0, #8]
   1eda4:	6800      	ldr	r0, [r0, #0]
   1eda6:	4632      	mov	r2, r6
   1eda8:	f7f3 fd1e 	bl	127e8 <flash_area_read>
    if (rc) {
   1edac:	b958      	cbnz	r0, 1edc6 <conf_fcb_load_cb+0x3a>
    buf[len] = '\0';
   1edae:	5570      	strb	r0, [r6, r5]
    rc = conf_line_parse(buf, &name_str, &val_str);
   1edb0:	aa01      	add	r2, sp, #4
   1edb2:	4669      	mov	r1, sp
   1edb4:	4630      	mov	r0, r6
   1edb6:	f000 f8f7 	bl	1efa8 <conf_line_parse>
    if (rc) {
   1edba:	b920      	cbnz	r0, 1edc6 <conf_fcb_load_cb+0x3a>
    argp->cb(name_str, val_str, argp->cb_arg);
   1edbc:	e9d4 3200 	ldrd	r3, r2, [r4]
   1edc0:	e9dd 0100 	ldrd	r0, r1, [sp]
   1edc4:	4798      	blx	r3
}
   1edc6:	2000      	movs	r0, #0
   1edc8:	b05a      	add	sp, #360	; 0x168
   1edca:	bd70      	pop	{r4, r5, r6, pc}

0001edcc <conf_fcb_compress_internal.part.0>:
    rc = conf_line_parse(buf, name, val);
    return rc;
}

static void
conf_fcb_compress_internal(struct fcb *fcb,
   1edcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1edd0:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
    rc = fcb_append_to_scratch(fcb);
    if (rc) {
        return; /* XXX */
    }

    loc1.fe_area = NULL;
   1edd4:	ac04      	add	r4, sp, #16
   1edd6:	2300      	movs	r3, #0
    loc1.fe_elem_off = 0;
   1edd8:	e9c4 3300 	strd	r3, r3, [r4]
conf_fcb_compress_internal(struct fcb *fcb,
   1eddc:	4606      	mov	r6, r0
   1edde:	4688      	mov	r8, r1
   1ede0:	4691      	mov	r9, r2
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, loc->fe_data_len);
   1ede2:	f50d 7ac8 	add.w	sl, sp, #400	; 0x190
   1ede6:	af0c      	add	r7, sp, #48	; 0x30
    while (fcb_getnext(fcb, &loc1) == 0) {
   1ede8:	4621      	mov	r1, r4
   1edea:	4630      	mov	r0, r6
   1edec:	f7f7 ff0a 	bl	16c04 <fcb_getnext>
   1edf0:	b130      	cbz	r0, 1ee00 <conf_fcb_compress_internal.part.0+0x34>
        if (rc) {
            continue;
        }
        fcb_append_finish(fcb, &loc2);
    }
    rc = fcb_rotate(fcb);
   1edf2:	4630      	mov	r0, r6
   1edf4:	f7f7 ff20 	bl	16c38 <fcb_rotate>
    if (rc) {
        /* XXXX */
        ;
    }
}
   1edf8:	f50d 7d3c 	add.w	sp, sp, #752	; 0x2f0
   1edfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (loc1.fe_area != fcb->f_oldest) {
   1ee00:	6820      	ldr	r0, [r4, #0]
   1ee02:	69b3      	ldr	r3, [r6, #24]
   1ee04:	4298      	cmp	r0, r3
   1ee06:	d1f4      	bne.n	1edf2 <conf_fcb_compress_internal.part.0+0x26>
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, loc->fe_data_len);
   1ee08:	89a3      	ldrh	r3, [r4, #12]
   1ee0a:	68a1      	ldr	r1, [r4, #8]
   1ee0c:	463a      	mov	r2, r7
   1ee0e:	f7f3 fceb 	bl	127e8 <flash_area_read>
    if (rc) {
   1ee12:	2800      	cmp	r0, #0
   1ee14:	d1e8      	bne.n	1ede8 <conf_fcb_compress_internal.part.0+0x1c>
    buf[loc->fe_data_len] = '\0';
   1ee16:	89a3      	ldrh	r3, [r4, #12]
    rc = conf_line_parse(buf, name, val);
   1ee18:	aa01      	add	r2, sp, #4
    buf[loc->fe_data_len] = '\0';
   1ee1a:	54f8      	strb	r0, [r7, r3]
    rc = conf_line_parse(buf, name, val);
   1ee1c:	4669      	mov	r1, sp
   1ee1e:	4638      	mov	r0, r7
   1ee20:	f000 f8c2 	bl	1efa8 <conf_line_parse>
        if (rc) {
   1ee24:	2800      	cmp	r0, #0
   1ee26:	d1de      	bne.n	1ede6 <conf_fcb_compress_internal.part.0+0x1a>
        if (!val1) {
   1ee28:	9b01      	ldr	r3, [sp, #4]
   1ee2a:	2b00      	cmp	r3, #0
   1ee2c:	d0db      	beq.n	1ede6 <conf_fcb_compress_internal.part.0+0x1a>
        loc2 = loc1;
   1ee2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1ee32:	ad08      	add	r5, sp, #32
   1ee34:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        while (fcb_getnext(fcb, &loc2) == 0) {
   1ee38:	4629      	mov	r1, r5
   1ee3a:	4630      	mov	r0, r6
   1ee3c:	f7f7 fee2 	bl	16c04 <fcb_getnext>
   1ee40:	b320      	cbz	r0, 1ee8c <conf_fcb_compress_internal.part.0+0xc0>
        if (copy_or_not) {
   1ee42:	f1b8 0f00 	cmp.w	r8, #0
   1ee46:	d005      	beq.n	1ee54 <conf_fcb_compress_internal.part.0+0x88>
            if (copy_or_not(name1, val1, cn_arg)) {
   1ee48:	e9dd 0100 	ldrd	r0, r1, [sp]
   1ee4c:	464a      	mov	r2, r9
   1ee4e:	47c0      	blx	r8
   1ee50:	2800      	cmp	r0, #0
   1ee52:	d1c8      	bne.n	1ede6 <conf_fcb_compress_internal.part.0+0x1a>
        rc = flash_area_read(loc1.fe_area, loc1.fe_data_off, buf1,
   1ee54:	89a3      	ldrh	r3, [r4, #12]
   1ee56:	68a1      	ldr	r1, [r4, #8]
   1ee58:	6820      	ldr	r0, [r4, #0]
   1ee5a:	463a      	mov	r2, r7
   1ee5c:	f7f3 fcc4 	bl	127e8 <flash_area_read>
        if (rc) {
   1ee60:	2800      	cmp	r0, #0
   1ee62:	d1c0      	bne.n	1ede6 <conf_fcb_compress_internal.part.0+0x1a>
        rc = fcb_append(fcb, loc1.fe_data_len, &loc2);
   1ee64:	89a1      	ldrh	r1, [r4, #12]
   1ee66:	462a      	mov	r2, r5
   1ee68:	4630      	mov	r0, r6
   1ee6a:	f7f7 fd49 	bl	16900 <fcb_append>
        if (rc) {
   1ee6e:	2800      	cmp	r0, #0
   1ee70:	d1b9      	bne.n	1ede6 <conf_fcb_compress_internal.part.0+0x1a>
        rc = flash_area_write(loc2.fe_area, loc2.fe_data_off, buf1,
   1ee72:	89a3      	ldrh	r3, [r4, #12]
   1ee74:	68a9      	ldr	r1, [r5, #8]
   1ee76:	6828      	ldr	r0, [r5, #0]
   1ee78:	463a      	mov	r2, r7
   1ee7a:	f7f3 fcc7 	bl	1280c <flash_area_write>
        if (rc) {
   1ee7e:	2800      	cmp	r0, #0
   1ee80:	d1b1      	bne.n	1ede6 <conf_fcb_compress_internal.part.0+0x1a>
        fcb_append_finish(fcb, &loc2);
   1ee82:	4629      	mov	r1, r5
   1ee84:	4630      	mov	r0, r6
   1ee86:	f7f7 fdbd 	bl	16a04 <fcb_append_finish>
   1ee8a:	e7ac      	b.n	1ede6 <conf_fcb_compress_internal.part.0+0x1a>
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, loc->fe_data_len);
   1ee8c:	89ab      	ldrh	r3, [r5, #12]
   1ee8e:	68a9      	ldr	r1, [r5, #8]
   1ee90:	6828      	ldr	r0, [r5, #0]
   1ee92:	4652      	mov	r2, sl
   1ee94:	f7f3 fca8 	bl	127e8 <flash_area_read>
    if (rc) {
   1ee98:	2800      	cmp	r0, #0
   1ee9a:	d1cd      	bne.n	1ee38 <conf_fcb_compress_internal.part.0+0x6c>
    buf[loc->fe_data_len] = '\0';
   1ee9c:	89ab      	ldrh	r3, [r5, #12]
    rc = conf_line_parse(buf, name, val);
   1ee9e:	aa03      	add	r2, sp, #12
    buf[loc->fe_data_len] = '\0';
   1eea0:	f80a 0003 	strb.w	r0, [sl, r3]
    rc = conf_line_parse(buf, name, val);
   1eea4:	a902      	add	r1, sp, #8
   1eea6:	4650      	mov	r0, sl
   1eea8:	f000 f87e 	bl	1efa8 <conf_line_parse>
            if (rc) {
   1eeac:	2800      	cmp	r0, #0
   1eeae:	d1c3      	bne.n	1ee38 <conf_fcb_compress_internal.part.0+0x6c>
            if (!strcmp(name1, name2)) {
   1eeb0:	9902      	ldr	r1, [sp, #8]
   1eeb2:	9800      	ldr	r0, [sp, #0]
   1eeb4:	f7f0 fbc8 	bl	f648 <strcmp>
   1eeb8:	2800      	cmp	r0, #0
   1eeba:	d1bd      	bne.n	1ee38 <conf_fcb_compress_internal.part.0+0x6c>
   1eebc:	e793      	b.n	1ede6 <conf_fcb_compress_internal.part.0+0x1a>
	...

0001eec0 <conf_fcb_src>:
{
   1eec0:	b570      	push	{r4, r5, r6, lr}
    cf->cf_fcb.f_version = CONF_FCB_VERS;
   1eec2:	2301      	movs	r3, #1
   1eec4:	7303      	strb	r3, [r0, #12]
    if (cf->cf_fcb.f_sector_cnt > 1) {
   1eec6:	7b43      	ldrb	r3, [r0, #13]
   1eec8:	2b01      	cmp	r3, #1
   1eeca:	bf94      	ite	ls
   1eecc:	2300      	movls	r3, #0
   1eece:	2301      	movhi	r3, #1
{
   1eed0:	4604      	mov	r4, r0
    if (cf->cf_fcb.f_sector_cnt > 1) {
   1eed2:	7383      	strb	r3, [r0, #14]
        rc = fcb_init(&cf->cf_fcb);
   1eed4:	f100 0608 	add.w	r6, r0, #8
   1eed8:	4630      	mov	r0, r6
   1eeda:	f7f7 fc5b 	bl	16794 <fcb_init>
        if (rc) {
   1eede:	4605      	mov	r5, r0
   1eee0:	b998      	cbnz	r0, 1ef0a <conf_fcb_src+0x4a>
        if (cf->cf_fcb.f_scratch_cnt &&
   1eee2:	7ba3      	ldrb	r3, [r4, #14]
   1eee4:	b153      	cbz	r3, 1eefc <conf_fcb_src+0x3c>
            fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   1eee6:	4630      	mov	r0, r6
   1eee8:	f7f7 fbd6 	bl	16698 <fcb_free_sector_cnt>
        if (cf->cf_fcb.f_scratch_cnt &&
   1eeec:	2800      	cmp	r0, #0
   1eeee:	dc05      	bgt.n	1eefc <conf_fcb_src+0x3c>
            flash_area_erase(cf->cf_fcb.f_active.fe_area, 0,
   1eef0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1eef2:	4629      	mov	r1, r5
   1eef4:	6882      	ldr	r2, [r0, #8]
   1eef6:	f7f3 fc9b 	bl	12830 <flash_area_erase>
        rc = fcb_init(&cf->cf_fcb);
   1eefa:	e7ed      	b.n	1eed8 <conf_fcb_src+0x18>
    cf->cf_store.cs_itf = &conf_fcb_itf;
   1eefc:	4b04      	ldr	r3, [pc, #16]	; (1ef10 <conf_fcb_src+0x50>)
   1eefe:	6063      	str	r3, [r4, #4]
    conf_src_register(&cf->cf_store);
   1ef00:	4620      	mov	r0, r4
   1ef02:	f7f2 fe07 	bl	11b14 <conf_src_register>
}
   1ef06:	4628      	mov	r0, r5
   1ef08:	bd70      	pop	{r4, r5, r6, pc}
            return OS_INVALID_PARM;
   1ef0a:	2503      	movs	r5, #3
   1ef0c:	e7fb      	b.n	1ef06 <conf_fcb_src+0x46>
   1ef0e:	bf00      	nop
   1ef10:	20000f8c 	.word	0x20000f8c

0001ef14 <conf_fcb_dst>:
{
   1ef14:	b508      	push	{r3, lr}
    cf->cf_store.cs_itf = &conf_fcb_itf;
   1ef16:	4b03      	ldr	r3, [pc, #12]	; (1ef24 <conf_fcb_dst+0x10>)
   1ef18:	6043      	str	r3, [r0, #4]
    conf_dst_register(&cf->cf_store);
   1ef1a:	f7f2 fe0f 	bl	11b3c <conf_dst_register>
}
   1ef1e:	2000      	movs	r0, #0
   1ef20:	bd08      	pop	{r3, pc}
   1ef22:	bf00      	nop
   1ef24:	20000f8c 	.word	0x20000f8c

0001ef28 <conf_fcb_kv_save>:
    return OS_OK;
}

int
conf_fcb_kv_save(struct fcb *fcb, const char *name, const char *value)
{
   1ef28:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ef2a:	4613      	mov	r3, r2
   1ef2c:	b0dd      	sub	sp, #372	; 0x174
   1ef2e:	4605      	mov	r5, r0
    char buf[CONF_MAX_NAME_LEN + CONF_MAX_VAL_LEN + 32];
    int len;

    if (!name) {
   1ef30:	460a      	mov	r2, r1
   1ef32:	b919      	cbnz	r1, 1ef3c <conf_fcb_kv_save+0x14>
        return OS_INVALID_PARM;
   1ef34:	2403      	movs	r4, #3
    len = conf_line_make(buf, sizeof(buf), name, value);
    if (len < 0 || len + 2 > sizeof(buf)) {
        return OS_INVALID_PARM;
    }
    return conf_fcb_append(fcb, buf, len);
}
   1ef36:	4620      	mov	r0, r4
   1ef38:	b05d      	add	sp, #372	; 0x174
   1ef3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    len = conf_line_make(buf, sizeof(buf), name, value);
   1ef3c:	f44f 71b0 	mov.w	r1, #352	; 0x160
   1ef40:	a804      	add	r0, sp, #16
   1ef42:	f000 f879 	bl	1f038 <conf_line_make>
    if (len < 0 || len + 2 > sizeof(buf)) {
   1ef46:	f5b0 7faf 	cmp.w	r0, #350	; 0x15e
    len = conf_line_make(buf, sizeof(buf), name, value);
   1ef4a:	4604      	mov	r4, r0
    if (len < 0 || len + 2 > sizeof(buf)) {
   1ef4c:	d8f2      	bhi.n	1ef34 <conf_fcb_kv_save+0xc>
   1ef4e:	260a      	movs	r6, #10
        rc = fcb_append(fcb, len, &loc);
   1ef50:	b287      	uxth	r7, r0
   1ef52:	466a      	mov	r2, sp
   1ef54:	4639      	mov	r1, r7
   1ef56:	4628      	mov	r0, r5
   1ef58:	f7f7 fcd2 	bl	16900 <fcb_append>
        if (rc != FCB_ERR_NOSPACE) {
   1ef5c:	1d03      	adds	r3, r0, #4
   1ef5e:	d10e      	bne.n	1ef7e <conf_fcb_kv_save+0x56>
        if (fcb->f_scratch_cnt == 0) {
   1ef60:	79ab      	ldrb	r3, [r5, #6]
   1ef62:	b1e3      	cbz	r3, 1ef9e <conf_fcb_kv_save+0x76>
    rc = fcb_append_to_scratch(fcb);
   1ef64:	4628      	mov	r0, r5
   1ef66:	f7f7 fcaf 	bl	168c8 <fcb_append_to_scratch>
    if (rc) {
   1ef6a:	4602      	mov	r2, r0
   1ef6c:	b918      	cbnz	r0, 1ef76 <conf_fcb_kv_save+0x4e>
   1ef6e:	4601      	mov	r1, r0
   1ef70:	4628      	mov	r0, r5
   1ef72:	f7ff ff2b 	bl	1edcc <conf_fcb_compress_internal.part.0>
    for (i = 0; i < 10; i++) {
   1ef76:	3e01      	subs	r6, #1
   1ef78:	d1eb      	bne.n	1ef52 <conf_fcb_kv_save+0x2a>
        return OS_EINVAL;
   1ef7a:	2402      	movs	r4, #2
   1ef7c:	e7db      	b.n	1ef36 <conf_fcb_kv_save+0xe>
    if (rc) {
   1ef7e:	2800      	cmp	r0, #0
   1ef80:	d1fb      	bne.n	1ef7a <conf_fcb_kv_save+0x52>
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, len);
   1ef82:	4623      	mov	r3, r4
   1ef84:	9902      	ldr	r1, [sp, #8]
   1ef86:	9800      	ldr	r0, [sp, #0]
   1ef88:	aa04      	add	r2, sp, #16
   1ef8a:	f7f3 fc3f 	bl	1280c <flash_area_write>
    if (rc) {
   1ef8e:	4604      	mov	r4, r0
   1ef90:	2800      	cmp	r0, #0
   1ef92:	d1f2      	bne.n	1ef7a <conf_fcb_kv_save+0x52>
    fcb_append_finish(fcb, &loc);
   1ef94:	4669      	mov	r1, sp
   1ef96:	4628      	mov	r0, r5
   1ef98:	f7f7 fd34 	bl	16a04 <fcb_append_finish>
    return OS_OK;
   1ef9c:	e7cb      	b.n	1ef36 <conf_fcb_kv_save+0xe>
            return OS_ENOMEM;
   1ef9e:	2401      	movs	r4, #1
    return conf_fcb_append(fcb, buf, len);
   1efa0:	e7c9      	b.n	1ef36 <conf_fcb_kv_save+0xe>

0001efa2 <conf_fcb_save>:
    return conf_fcb_kv_save(&cf->cf_fcb, name, value);
   1efa2:	3008      	adds	r0, #8
   1efa4:	f7ff bfc0 	b.w	1ef28 <conf_fcb_kv_save>

0001efa8 <conf_line_parse>:
#include "config/config.h"
#include "config_priv.h"

int
conf_line_parse(char *buf, char **namep, char **valp)
{
   1efa8:	b5f0      	push	{r4, r5, r6, r7, lr}
        FIND_NAME_END,
        FIND_VAL,
        FIND_VAL_END
    } state = FIND_NAME;

    *valp = NULL;
   1efaa:	2400      	movs	r4, #0
   1efac:	4d21      	ldr	r5, [pc, #132]	; (1f034 <conf_line_parse+0x8c>)
   1efae:	6014      	str	r4, [r2, #0]
                state = FIND_VAL_END;
            }
            break;
        case FIND_VAL_END:
            if (!isprint((unsigned char)*cp)) {
                *cp = '\0';
   1efb0:	4626      	mov	r6, r4
   1efb2:	4607      	mov	r7, r0
    for (cp = buf; *cp != '\0'; cp++) {
   1efb4:	f810 3b01 	ldrb.w	r3, [r0], #1
   1efb8:	b933      	cbnz	r3, 1efc8 <conf_line_parse+0x20>
            }
            break;
        }
    }
    if (state == FIND_VAL_END || state == FIND_VAL) {
   1efba:	1ea0      	subs	r0, r4, #2
        return 0;
    } else {
        return -1;
    }
}
   1efbc:	2801      	cmp	r0, #1
   1efbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1efc2:	bf98      	it	ls
   1efc4:	2000      	movls	r0, #0
   1efc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch (state) {
   1efc8:	2c03      	cmp	r4, #3
   1efca:	d8f2      	bhi.n	1efb2 <conf_line_parse+0xa>
   1efcc:	e8df f004 	tbb	[pc, r4]
   1efd0:	2b200d02 	.word	0x2b200d02
   1efd4:	3b09      	subs	r3, #9
   1efd6:	b2db      	uxtb	r3, r3
   1efd8:	2b17      	cmp	r3, #23
   1efda:	d803      	bhi.n	1efe4 <conf_line_parse+0x3c>
   1efdc:	fa25 f303 	lsr.w	r3, r5, r3
   1efe0:	07db      	lsls	r3, r3, #31
   1efe2:	d4e6      	bmi.n	1efb2 <conf_line_parse+0xa>
                *namep = cp;
   1efe4:	600f      	str	r7, [r1, #0]
                state = FIND_NAME_END;
   1efe6:	2401      	movs	r4, #1
   1efe8:	e7e3      	b.n	1efb2 <conf_line_parse+0xa>
            if (*cp == '=') {
   1efea:	2b3d      	cmp	r3, #61	; 0x3d
   1efec:	d103      	bne.n	1eff6 <conf_line_parse+0x4e>
                *cp = '\0';
   1efee:	f800 6c01 	strb.w	r6, [r0, #-1]
                state = FIND_VAL;
   1eff2:	2402      	movs	r4, #2
   1eff4:	e7dd      	b.n	1efb2 <conf_line_parse+0xa>
   1eff6:	3b09      	subs	r3, #9
   1eff8:	b2db      	uxtb	r3, r3
   1effa:	2b17      	cmp	r3, #23
   1effc:	d8d9      	bhi.n	1efb2 <conf_line_parse+0xa>
   1effe:	fa25 f303 	lsr.w	r3, r5, r3
   1f002:	43db      	mvns	r3, r3
   1f004:	f013 0301 	ands.w	r3, r3, #1
   1f008:	d1d3      	bne.n	1efb2 <conf_line_parse+0xa>
                *cp = '\0';
   1f00a:	f800 3c01 	strb.w	r3, [r0, #-1]
   1f00e:	e7d0      	b.n	1efb2 <conf_line_parse+0xa>
   1f010:	3b09      	subs	r3, #9
   1f012:	b2db      	uxtb	r3, r3
   1f014:	2b17      	cmp	r3, #23
   1f016:	d803      	bhi.n	1f020 <conf_line_parse+0x78>
   1f018:	fa25 f303 	lsr.w	r3, r5, r3
   1f01c:	07db      	lsls	r3, r3, #31
   1f01e:	d4c8      	bmi.n	1efb2 <conf_line_parse+0xa>
                *valp = cp;
   1f020:	6017      	str	r7, [r2, #0]
                state = FIND_VAL_END;
   1f022:	2403      	movs	r4, #3
   1f024:	e7c5      	b.n	1efb2 <conf_line_parse+0xa>
	return (__c >= 0x20 && __c <= 0x7e);
   1f026:	3b20      	subs	r3, #32
            if (!isprint((unsigned char)*cp)) {
   1f028:	2b5e      	cmp	r3, #94	; 0x5e
                *cp = '\0';
   1f02a:	bf88      	it	hi
   1f02c:	f800 6c01 	strbhi.w	r6, [r0, #-1]
    for (cp = buf; *cp != '\0'; cp++) {
   1f030:	e7bf      	b.n	1efb2 <conf_line_parse+0xa>
   1f032:	bf00      	nop
   1f034:	00800013 	.word	0x00800013

0001f038 <conf_line_make>:

int
conf_line_make(char *dst, int dlen, const char *name, const char *value)
{
   1f038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f03c:	4605      	mov	r5, r0
    int nlen;
    int vlen;
    int off;

    nlen = strlen(name);
   1f03e:	4610      	mov	r0, r2
{
   1f040:	4689      	mov	r9, r1
   1f042:	4690      	mov	r8, r2
   1f044:	461e      	mov	r6, r3
    nlen = strlen(name);
   1f046:	f7f0 fb0a 	bl	f65e <strlen>
   1f04a:	4607      	mov	r7, r0
    if (value) {
   1f04c:	b1e6      	cbz	r6, 1f088 <conf_line_make+0x50>
        vlen = strlen(value);
   1f04e:	4630      	mov	r0, r6
   1f050:	f7f0 fb05 	bl	f65e <strlen>
   1f054:	4604      	mov	r4, r0
    } else {
        vlen = 0;
    }
    if (nlen + vlen + 2 > dlen) {
   1f056:	19e3      	adds	r3, r4, r7
   1f058:	3301      	adds	r3, #1
   1f05a:	454b      	cmp	r3, r9
   1f05c:	da16      	bge.n	1f08c <conf_line_make+0x54>
        return -1;
    }
    memcpy(dst, name, nlen);
   1f05e:	4641      	mov	r1, r8
   1f060:	463a      	mov	r2, r7
   1f062:	4628      	mov	r0, r5
   1f064:	f7f0 fabe 	bl	f5e4 <memcpy>
    off = nlen;
    dst[off++] = '=';
   1f068:	f107 0801 	add.w	r8, r7, #1
   1f06c:	233d      	movs	r3, #61	; 0x3d
   1f06e:	55eb      	strb	r3, [r5, r7]

    memcpy(dst + off, value, vlen);
   1f070:	4622      	mov	r2, r4
   1f072:	4631      	mov	r1, r6
   1f074:	eb05 0008 	add.w	r0, r5, r8
   1f078:	f7f0 fab4 	bl	f5e4 <memcpy>
    off += vlen;
   1f07c:	eb04 0008 	add.w	r0, r4, r8
    dst[off] = '\0';
   1f080:	2300      	movs	r3, #0
   1f082:	542b      	strb	r3, [r5, r0]

    return off;
}
   1f084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        vlen = 0;
   1f088:	4634      	mov	r4, r6
   1f08a:	e7e4      	b.n	1f056 <conf_line_make+0x1e>
        return -1;
   1f08c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f090:	e7f8      	b.n	1f084 <conf_line_make+0x4c>
	...

0001f094 <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
   1f094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f098:	4606      	mov	r6, r0
   1f09a:	460f      	mov	r7, r1
    int rc;

    rwlock_acquire_write(&modlog_rwl);
   1f09c:	4826      	ldr	r0, [pc, #152]	; (1f138 <modlog_register+0xa4>)
{
   1f09e:	4690      	mov	r8, r2
   1f0a0:	461d      	mov	r5, r3
    rwlock_acquire_write(&modlog_rwl);
   1f0a2:	f000 f98e 	bl	1f3c2 <rwlock_acquire_write>
    if (log == NULL) {
   1f0a6:	2f00      	cmp	r7, #0
   1f0a8:	d040      	beq.n	1f12c <modlog_register+0x98>
    mm = os_memblock_get(&modlog_mapping_pool);
   1f0aa:	4824      	ldr	r0, [pc, #144]	; (1f13c <modlog_register+0xa8>)
   1f0ac:	f7ea faf7 	bl	969e <os_memblock_get>
    if (mm != NULL) {
   1f0b0:	2800      	cmp	r0, #0
   1f0b2:	d03e      	beq.n	1f132 <modlog_register+0x9e>
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
   1f0b4:	4c22      	ldr	r4, [pc, #136]	; (1f140 <modlog_register+0xac>)
   1f0b6:	1b04      	subs	r4, r0, r4
        *mm = (struct modlog_mapping) { 0 };
   1f0b8:	2300      	movs	r3, #0
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   1f0ba:	2cbf      	cmp	r4, #191	; 0xbf
        *mm = (struct modlog_mapping) { 0 };
   1f0bc:	e9c0 3300 	strd	r3, r3, [r0]
   1f0c0:	6083      	str	r3, [r0, #8]
    idx = off / elem_sz;
   1f0c2:	f04f 020c 	mov.w	r2, #12
   1f0c6:	fbb4 f3f2 	udiv	r3, r4, r2
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   1f0ca:	d905      	bls.n	1f0d8 <modlog_register+0x44>
   1f0cc:	2300      	movs	r3, #0
   1f0ce:	461a      	mov	r2, r3
   1f0d0:	4619      	mov	r1, r3
   1f0d2:	4618      	mov	r0, r3
   1f0d4:	f7e9 ff0e 	bl	8ef4 <__assert_func>
   1f0d8:	fb02 4213 	mls	r2, r2, r3, r4
    assert(off % elem_sz == 0);
   1f0dc:	2a00      	cmp	r2, #0
   1f0de:	d1f5      	bne.n	1f0cc <modlog_register+0x38>
    mm->desc = (struct modlog_desc) {
   1f0e0:	6047      	str	r7, [r0, #4]
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1f0e2:	4f18      	ldr	r7, [pc, #96]	; (1f144 <modlog_register+0xb0>)
    mm->desc = (struct modlog_desc) {
   1f0e4:	7246      	strb	r6, [r0, #9]
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1f0e6:	f8d7 c000 	ldr.w	ip, [r7]
    mm->desc = (struct modlog_desc) {
   1f0ea:	f880 800a 	strb.w	r8, [r0, #10]
    return idx;
   1f0ee:	b2db      	uxtb	r3, r3
    mm->desc = (struct modlog_desc) {
   1f0f0:	7203      	strb	r3, [r0, #8]
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1f0f2:	4661      	mov	r1, ip
   1f0f4:	b111      	cbz	r1, 1f0fc <modlog_register+0x68>
        if (cur->desc.module > module) {
   1f0f6:	7a4c      	ldrb	r4, [r1, #9]
   1f0f8:	42b4      	cmp	r4, r6
   1f0fa:	d310      	bcc.n	1f11e <modlog_register+0x8a>
    if (prev == NULL) {
   1f0fc:	b992      	cbnz	r2, 1f124 <modlog_register+0x90>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
   1f0fe:	f8c0 c000 	str.w	ip, [r0]
   1f102:	6038      	str	r0, [r7, #0]
    if (mm->desc.module == MODLOG_MODULE_DFLT) {
   1f104:	2eff      	cmp	r6, #255	; 0xff
        modlog_first_dflt = mm;
   1f106:	bf04      	itt	eq
   1f108:	4a0f      	ldreq	r2, [pc, #60]	; (1f148 <modlog_register+0xb4>)
   1f10a:	6010      	streq	r0, [r2, #0]
    if (out_handle != NULL) {
   1f10c:	b10d      	cbz	r5, 1f112 <modlog_register+0x7e>
        *out_handle = mm->desc.handle;
   1f10e:	702b      	strb	r3, [r5, #0]
    return 0;
   1f110:	2500      	movs	r5, #0
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
    rwlock_release_write(&modlog_rwl);
   1f112:	4809      	ldr	r0, [pc, #36]	; (1f138 <modlog_register+0xa4>)
   1f114:	f000 f983 	bl	1f41e <rwlock_release_write>

    return rc;
}
   1f118:	4628      	mov	r0, r5
   1f11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1f11e:	460a      	mov	r2, r1
   1f120:	6809      	ldr	r1, [r1, #0]
   1f122:	e7e7      	b.n	1f0f4 <modlog_register+0x60>
        SLIST_INSERT_AFTER(prev, mm, next);
   1f124:	6811      	ldr	r1, [r2, #0]
   1f126:	6001      	str	r1, [r0, #0]
   1f128:	6010      	str	r0, [r2, #0]
   1f12a:	e7eb      	b.n	1f104 <modlog_register+0x70>
        return SYS_EINVAL;
   1f12c:	f06f 0501 	mvn.w	r5, #1
   1f130:	e7ef      	b.n	1f112 <modlog_register+0x7e>
        return SYS_ENOMEM;
   1f132:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f136:	e7ec      	b.n	1f112 <modlog_register+0x7e>
   1f138:	20005208 	.word	0x20005208
   1f13c:	200051e8 	.word	0x200051e8
   1f140:	20005128 	.word	0x20005128
   1f144:	20005204 	.word	0x20005204
   1f148:	20005124 	.word	0x20005124

0001f14c <modlog_append>:
}

int
modlog_append(uint8_t module, uint8_t level, uint8_t etype,
              void *data, uint16_t len)
{
   1f14c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1f150:	4606      	mov	r6, r0
    int rc;

    rwlock_acquire_read(&modlog_rwl);
   1f152:	4824      	ldr	r0, [pc, #144]	; (1f1e4 <modlog_append+0x98>)
{
   1f154:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
   1f158:	460d      	mov	r5, r1
   1f15a:	4617      	mov	r7, r2
   1f15c:	4698      	mov	r8, r3
    rwlock_acquire_read(&modlog_rwl);
   1f15e:	f000 f8ea 	bl	1f336 <rwlock_acquire_read>
    if (module == MODLOG_MODULE_DFLT) {
   1f162:	2eff      	cmp	r6, #255	; 0xff
   1f164:	d03b      	beq.n	1f1de <modlog_append+0x92>
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1f166:	4b20      	ldr	r3, [pc, #128]	; (1f1e8 <modlog_append+0x9c>)
   1f168:	681c      	ldr	r4, [r3, #0]
   1f16a:	b914      	cbnz	r4, 1f172 <modlog_append+0x26>
    for (mm = modlog_first_dflt;
   1f16c:	4b1f      	ldr	r3, [pc, #124]	; (1f1ec <modlog_append+0xa0>)
   1f16e:	681c      	ldr	r4, [r3, #0]
   1f170:	e027      	b.n	1f1c2 <modlog_append+0x76>
        if (cur->desc.module == module) {
   1f172:	f894 9009 	ldrb.w	r9, [r4, #9]
   1f176:	454e      	cmp	r6, r9
   1f178:	d017      	beq.n	1f1aa <modlog_append+0x5e>
        if (cur->desc.module > module) {
   1f17a:	d3f7      	bcc.n	1f16c <modlog_append+0x20>
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1f17c:	6824      	ldr	r4, [r4, #0]
   1f17e:	e7f4      	b.n	1f16a <modlog_append+0x1e>
        rc = log_append_body(mm->desc.log, module, level, etype, data, len);
   1f180:	e9cd 8a00 	strd	r8, sl, [sp]
   1f184:	463b      	mov	r3, r7
   1f186:	6860      	ldr	r0, [r4, #4]
   1f188:	462a      	mov	r2, r5
   1f18a:	4649      	mov	r1, r9
   1f18c:	f7f3 fc78 	bl	12a80 <log_append_body>
        if (rc != 0) {
   1f190:	b170      	cbz	r0, 1f1b0 <modlog_append+0x64>
            return SYS_EIO;
   1f192:	f06f 0404 	mvn.w	r4, #4
    rc = modlog_append_no_lock(module, level, etype, data, len);
    rwlock_release_read(&modlog_rwl);
   1f196:	4813      	ldr	r0, [pc, #76]	; (1f1e4 <modlog_append+0x98>)
   1f198:	f000 f900 	bl	1f39c <rwlock_release_read>

    return rc;
}
   1f19c:	4620      	mov	r0, r4
   1f19e:	b002      	add	sp, #8
   1f1a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        while (mm != NULL && mm->desc.module == module) {
   1f1a4:	7a63      	ldrb	r3, [r4, #9]
   1f1a6:	454b      	cmp	r3, r9
   1f1a8:	d105      	bne.n	1f1b6 <modlog_append+0x6a>
    if (level >= mm->desc.min_level) {
   1f1aa:	7aa3      	ldrb	r3, [r4, #10]
   1f1ac:	42ab      	cmp	r3, r5
   1f1ae:	d9e7      	bls.n	1f180 <modlog_append+0x34>
            mm = SLIST_NEXT(mm, next);
   1f1b0:	6824      	ldr	r4, [r4, #0]
        while (mm != NULL && mm->desc.module == module) {
   1f1b2:	2c00      	cmp	r4, #0
   1f1b4:	d1f6      	bne.n	1f1a4 <modlog_append+0x58>
        return 0;
   1f1b6:	2400      	movs	r4, #0
   1f1b8:	e7ed      	b.n	1f196 <modlog_append+0x4a>
    if (level >= mm->desc.min_level) {
   1f1ba:	7aa3      	ldrb	r3, [r4, #10]
   1f1bc:	42ab      	cmp	r3, r5
   1f1be:	d903      	bls.n	1f1c8 <modlog_append+0x7c>
         mm = SLIST_NEXT(mm, next)) {
   1f1c0:	6824      	ldr	r4, [r4, #0]
    for (mm = modlog_first_dflt;
   1f1c2:	2c00      	cmp	r4, #0
   1f1c4:	d1f9      	bne.n	1f1ba <modlog_append+0x6e>
   1f1c6:	e7f6      	b.n	1f1b6 <modlog_append+0x6a>
        rc = log_append_body(mm->desc.log, module, level, etype, data, len);
   1f1c8:	e9cd 8a00 	strd	r8, sl, [sp]
   1f1cc:	463b      	mov	r3, r7
   1f1ce:	6860      	ldr	r0, [r4, #4]
   1f1d0:	462a      	mov	r2, r5
   1f1d2:	4631      	mov	r1, r6
   1f1d4:	f7f3 fc54 	bl	12a80 <log_append_body>
        if (rc != 0) {
   1f1d8:	2800      	cmp	r0, #0
   1f1da:	d0f1      	beq.n	1f1c0 <modlog_append+0x74>
   1f1dc:	e7d9      	b.n	1f192 <modlog_append+0x46>
        return SYS_EINVAL;
   1f1de:	f06f 0401 	mvn.w	r4, #1
   1f1e2:	e7d8      	b.n	1f196 <modlog_append+0x4a>
   1f1e4:	20005208 	.word	0x20005208
   1f1e8:	20005204 	.word	0x20005204
   1f1ec:	20005124 	.word	0x20005124

0001f1f0 <modlog_printf>:
    return rc;
}

void
modlog_printf(uint8_t module, uint8_t level, const char *msg, ...)
{
   1f1f0:	b40c      	push	{r2, r3}
   1f1f2:	b530      	push	{r4, r5, lr}
   1f1f4:	b0a5      	sub	sp, #148	; 0x94
   1f1f6:	ab28      	add	r3, sp, #160	; 0xa0
   1f1f8:	4604      	mov	r4, r0
   1f1fa:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)];
    int len;

    va_start(args, msg);
   1f1fe:	9303      	str	r3, [sp, #12]
{
   1f200:	460d      	mov	r5, r1
    len = vsnprintf(buf, MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN), msg, args);
   1f202:	a804      	add	r0, sp, #16
   1f204:	2180      	movs	r1, #128	; 0x80
   1f206:	f7f0 fcfb 	bl	fc00 <vsnprintf>

    if (len >= MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)) {
        len = MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN) - 1;
    }

    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
   1f20a:	287f      	cmp	r0, #127	; 0x7f
   1f20c:	4603      	mov	r3, r0
   1f20e:	bfa8      	it	ge
   1f210:	237f      	movge	r3, #127	; 0x7f
   1f212:	b29b      	uxth	r3, r3
   1f214:	9300      	str	r3, [sp, #0]
   1f216:	2200      	movs	r2, #0
   1f218:	ab04      	add	r3, sp, #16
   1f21a:	4629      	mov	r1, r5
   1f21c:	4620      	mov	r0, r4
   1f21e:	f7ff ff95 	bl	1f14c <modlog_append>
}
   1f222:	b025      	add	sp, #148	; 0x94
   1f224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1f228:	b002      	add	sp, #8
   1f22a:	4770      	bx	lr

0001f22c <modlog_init>:

void
modlog_init(void)
{
   1f22c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   1f22e:	4b1e      	ldr	r3, [pc, #120]	; (1f2a8 <modlog_init+0x7c>)
   1f230:	781b      	ldrb	r3, [r3, #0]
   1f232:	b923      	cbnz	r3, 1f23e <modlog_init+0x12>
   1f234:	461a      	mov	r2, r3
   1f236:	4619      	mov	r1, r3
   1f238:	4618      	mov	r0, r3
   1f23a:	f7e9 fe5b 	bl	8ef4 <__assert_func>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
   1f23e:	4b1b      	ldr	r3, [pc, #108]	; (1f2ac <modlog_init+0x80>)
   1f240:	9300      	str	r3, [sp, #0]
   1f242:	481b      	ldr	r0, [pc, #108]	; (1f2b0 <modlog_init+0x84>)
   1f244:	4b1b      	ldr	r3, [pc, #108]	; (1f2b4 <modlog_init+0x88>)
   1f246:	220c      	movs	r2, #12
   1f248:	2110      	movs	r1, #16
   1f24a:	f7ea fa1f 	bl	968c <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   1f24e:	b138      	cbz	r0, 1f260 <modlog_init+0x34>
   1f250:	2300      	movs	r3, #0
   1f252:	4a19      	ldr	r2, [pc, #100]	; (1f2b8 <modlog_init+0x8c>)
   1f254:	9300      	str	r3, [sp, #0]
   1f256:	6814      	ldr	r4, [r2, #0]
   1f258:	4619      	mov	r1, r3
   1f25a:	461a      	mov	r2, r3
   1f25c:	4618      	mov	r0, r3
   1f25e:	47a0      	blx	r4

    SLIST_INIT(&modlog_mappings);
   1f260:	4b16      	ldr	r3, [pc, #88]	; (1f2bc <modlog_init+0x90>)
    modlog_first_dflt = NULL;

    rc = rwlock_init(&modlog_rwl);
   1f262:	4817      	ldr	r0, [pc, #92]	; (1f2c0 <modlog_init+0x94>)
    SLIST_INIT(&modlog_mappings);
   1f264:	2400      	movs	r4, #0
   1f266:	601c      	str	r4, [r3, #0]
    modlog_first_dflt = NULL;
   1f268:	4b16      	ldr	r3, [pc, #88]	; (1f2c4 <modlog_init+0x98>)
   1f26a:	601c      	str	r4, [r3, #0]
    rc = rwlock_init(&modlog_rwl);
   1f26c:	f000 f8e7 	bl	1f43e <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1f270:	b138      	cbz	r0, 1f282 <modlog_init+0x56>
   1f272:	4b11      	ldr	r3, [pc, #68]	; (1f2b8 <modlog_init+0x8c>)
   1f274:	9400      	str	r4, [sp, #0]
   1f276:	681d      	ldr	r5, [r3, #0]
   1f278:	4622      	mov	r2, r4
   1f27a:	4623      	mov	r3, r4
   1f27c:	4621      	mov	r1, r4
   1f27e:	4620      	mov	r0, r4
   1f280:	47a8      	blx	r5

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
   1f282:	f7f3 fcfb 	bl	12c7c <log_console_get>
   1f286:	2300      	movs	r3, #0
   1f288:	4601      	mov	r1, r0
   1f28a:	461a      	mov	r2, r3
   1f28c:	20ff      	movs	r0, #255	; 0xff
   1f28e:	f7ff ff01 	bl	1f094 <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1f292:	b138      	cbz	r0, 1f2a4 <modlog_init+0x78>
   1f294:	2300      	movs	r3, #0
   1f296:	4a08      	ldr	r2, [pc, #32]	; (1f2b8 <modlog_init+0x8c>)
   1f298:	9300      	str	r3, [sp, #0]
   1f29a:	6814      	ldr	r4, [r2, #0]
   1f29c:	4619      	mov	r1, r3
   1f29e:	461a      	mov	r2, r3
   1f2a0:	4618      	mov	r0, r3
   1f2a2:	47a0      	blx	r4
#endif
}
   1f2a4:	b003      	add	sp, #12
   1f2a6:	bd30      	pop	{r4, r5, pc}
   1f2a8:	20004ba8 	.word	0x20004ba8
   1f2ac:	00024080 	.word	0x00024080
   1f2b0:	200051e8 	.word	0x200051e8
   1f2b4:	20005128 	.word	0x20005128
   1f2b8:	20000768 	.word	0x20000768
   1f2bc:	20005204 	.word	0x20005204
   1f2c0:	20005208 	.word	0x20005208
   1f2c4:	20005124 	.word	0x20005124

0001f2c8 <crc8_init>:

uint8_t
crc8_init(void)
{
    return 0xff;
}
   1f2c8:	20ff      	movs	r0, #255	; 0xff
   1f2ca:	4770      	bx	lr

0001f2cc <crc8_calc>:

uint8_t
crc8_calc(uint8_t val, void *buf, int cnt)
{
   1f2cc:	b530      	push	{r4, r5, lr}
	int i;
	uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_small_table[val >> 4];
   1f2ce:	4d0a      	ldr	r5, [pc, #40]	; (1f2f8 <crc8_calc+0x2c>)
	for (i = 0; i < cnt; i++) {
   1f2d0:	2400      	movs	r4, #0
   1f2d2:	4294      	cmp	r4, r2
   1f2d4:	db00      	blt.n	1f2d8 <crc8_calc+0xc>
		val = (val << 4) ^ crc8_small_table[val >> 4];
	}
	return val;
}
   1f2d6:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   1f2d8:	5d0b      	ldrb	r3, [r1, r4]
   1f2da:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_small_table[val >> 4];
   1f2dc:	0903      	lsrs	r3, r0, #4
	for (i = 0; i < cnt; i++) {
   1f2de:	3401      	adds	r4, #1
		val = (val << 4) ^ crc8_small_table[val >> 4];
   1f2e0:	5ceb      	ldrb	r3, [r5, r3]
   1f2e2:	ea83 1000 	eor.w	r0, r3, r0, lsl #4
   1f2e6:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   1f2e8:	f3c0 1003 	ubfx	r0, r0, #4, #4
   1f2ec:	5c28      	ldrb	r0, [r5, r0]
   1f2ee:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   1f2f2:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   1f2f4:	e7ed      	b.n	1f2d2 <crc8_calc+0x6>
   1f2f6:	bf00      	nop
   1f2f8:	00024094 	.word	0x00024094

0001f2fc <rwlock_unblock>:
 * Unblocks the next pending user.  The caller must lock the mutex prior to
 * calling this.
 */
static void
rwlock_unblock(struct rwlock *lock)
{
   1f2fc:	b538      	push	{r3, r4, r5, lr}
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs == 0);

    /* Give priority to pending writers. */
    if (lock->pending_writers > 0) {
   1f2fe:	7fc3      	ldrb	r3, [r0, #31]
{
   1f300:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   1f302:	b14b      	cbz	r3, 1f318 <rwlock_unblock+0x1c>
        /* Indicate that ownership is being transfered to a single writer. */
        lock->handoffs = 1;
   1f304:	2301      	movs	r3, #1
   1f306:	f880 3020 	strb.w	r3, [r0, #32]

        os_sem_release(&lock->wsem);
   1f30a:	3014      	adds	r0, #20
   1f30c:	f7ea fc92 	bl	9c34 <os_sem_release>
        lock->pending_writers--;
   1f310:	7fe3      	ldrb	r3, [r4, #31]
   1f312:	3b01      	subs	r3, #1
   1f314:	77e3      	strb	r3, [r4, #31]
        while (lock->pending_readers > 0) {
            os_sem_release(&lock->rsem);
            lock->pending_readers--;
        }
    }
}
   1f316:	bd38      	pop	{r3, r4, r5, pc}
        lock->handoffs = lock->pending_readers;
   1f318:	7f83      	ldrb	r3, [r0, #30]
   1f31a:	f880 3020 	strb.w	r3, [r0, #32]
            os_sem_release(&lock->rsem);
   1f31e:	f100 050c 	add.w	r5, r0, #12
        while (lock->pending_readers > 0) {
   1f322:	7fa3      	ldrb	r3, [r4, #30]
   1f324:	2b00      	cmp	r3, #0
   1f326:	d0f6      	beq.n	1f316 <rwlock_unblock+0x1a>
            os_sem_release(&lock->rsem);
   1f328:	4628      	mov	r0, r5
   1f32a:	f7ea fc83 	bl	9c34 <os_sem_release>
            lock->pending_readers--;
   1f32e:	7fa3      	ldrb	r3, [r4, #30]
   1f330:	3b01      	subs	r3, #1
   1f332:	77a3      	strb	r3, [r4, #30]
   1f334:	e7f5      	b.n	1f322 <rwlock_unblock+0x26>

0001f336 <rwlock_acquire_read>:
           lock->handoffs > 0;
}

void
rwlock_acquire_read(struct rwlock *lock)
{
   1f336:	b538      	push	{r3, r4, r5, lr}
   1f338:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1f33a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f33e:	f7eb fa15 	bl	a76c <os_mutex_pend>
    return lock->active_writer ||
   1f342:	69e3      	ldr	r3, [r4, #28]
           lock->pending_writers > 0 ||
   1f344:	f013 2fff 	tst.w	r3, #4278255360	; 0xff00ff00
   1f348:	d102      	bne.n	1f350 <rwlock_acquire_read+0x1a>

    if (rwlock_read_must_block(lock)) {
   1f34a:	f894 3020 	ldrb.w	r3, [r4, #32]
   1f34e:	b1fb      	cbz	r3, 1f390 <rwlock_acquire_read+0x5a>
        lock->pending_readers++;
   1f350:	7fa3      	ldrb	r3, [r4, #30]
   1f352:	3301      	adds	r3, #1
   1f354:	77a3      	strb	r3, [r4, #30]
        acquired = false;
   1f356:	2500      	movs	r5, #0
    } else {
        lock->num_readers++;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1f358:	4620      	mov	r0, r4
   1f35a:	f7eb f9b5 	bl	a6c8 <os_mutex_release>

    if (acquired) {
   1f35e:	b9e5      	cbnz	r5, 1f39a <rwlock_acquire_read+0x64>
        /* No contention; lock acquired. */
        return;
    }

    /* Wait for the lock to become available. */
    os_sem_pend(&lock->rsem, OS_TIMEOUT_NEVER);
   1f360:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f364:	f104 000c 	add.w	r0, r4, #12
   1f368:	f7ea fc96 	bl	9c98 <os_sem_pend>

    /* Record reader ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1f36c:	4620      	mov	r0, r4
   1f36e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f372:	f7eb f9fb 	bl	a76c <os_mutex_pend>
    lock->num_readers++;
   1f376:	7f23      	ldrb	r3, [r4, #28]
   1f378:	3301      	adds	r3, #1
   1f37a:	7723      	strb	r3, [r4, #28]
    lock->handoffs--;
   1f37c:	f894 3020 	ldrb.w	r3, [r4, #32]
   1f380:	3b01      	subs	r3, #1
   1f382:	f884 3020 	strb.w	r3, [r4, #32]
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
   1f386:	4620      	mov	r0, r4
}
   1f388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    os_mutex_release(&lock->mtx);
   1f38c:	f7eb b99c 	b.w	a6c8 <os_mutex_release>
        lock->num_readers++;
   1f390:	7f23      	ldrb	r3, [r4, #28]
   1f392:	3301      	adds	r3, #1
   1f394:	7723      	strb	r3, [r4, #28]
        acquired = true;
   1f396:	2501      	movs	r5, #1
   1f398:	e7de      	b.n	1f358 <rwlock_acquire_read+0x22>
}
   1f39a:	bd38      	pop	{r3, r4, r5, pc}

0001f39c <rwlock_release_read>:

void
rwlock_release_read(struct rwlock *lock)
{
   1f39c:	b510      	push	{r4, lr}
   1f39e:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1f3a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f3a4:	f7eb f9e2 	bl	a76c <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->num_readers > 0);
    lock->num_readers--;
   1f3a8:	7f23      	ldrb	r3, [r4, #28]
   1f3aa:	3b01      	subs	r3, #1
   1f3ac:	b2db      	uxtb	r3, r3
   1f3ae:	7723      	strb	r3, [r4, #28]

    /* If this is the last active reader, unblock a pending writer if there is
     * one.
     */
    if (lock->num_readers == 0) {
   1f3b0:	b913      	cbnz	r3, 1f3b8 <rwlock_release_read+0x1c>
        rwlock_unblock(lock);
   1f3b2:	4620      	mov	r0, r4
   1f3b4:	f7ff ffa2 	bl	1f2fc <rwlock_unblock>
    }

    os_mutex_release(&lock->mtx);
   1f3b8:	4620      	mov	r0, r4
}
   1f3ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_release(&lock->mtx);
   1f3be:	f7eb b983 	b.w	a6c8 <os_mutex_release>

0001f3c2 <rwlock_acquire_write>:

void
rwlock_acquire_write(struct rwlock *lock)
{
   1f3c2:	b538      	push	{r3, r4, r5, lr}
   1f3c4:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1f3c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f3ca:	f7eb f9cf 	bl	a76c <os_mutex_pend>
           lock->num_readers > 0 ||
   1f3ce:	8ba3      	ldrh	r3, [r4, #28]
   1f3d0:	b913      	cbnz	r3, 1f3d8 <rwlock_acquire_write+0x16>

    if (rwlock_write_must_block(lock)) {
   1f3d2:	f894 3020 	ldrb.w	r3, [r4, #32]
   1f3d6:	b1f3      	cbz	r3, 1f416 <rwlock_acquire_write+0x54>
        lock->pending_writers++;
   1f3d8:	7fe3      	ldrb	r3, [r4, #31]
   1f3da:	3301      	adds	r3, #1
   1f3dc:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   1f3de:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1f3e0:	4620      	mov	r0, r4
   1f3e2:	f7eb f971 	bl	a6c8 <os_mutex_release>

    if (acquired) {
   1f3e6:	b9cd      	cbnz	r5, 1f41c <rwlock_acquire_write+0x5a>
        /* No contention; lock acquired. */
        return;
    }

    /* Wait for the lock to become available. */
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   1f3e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f3ec:	f104 0014 	add.w	r0, r4, #20
   1f3f0:	f7ea fc52 	bl	9c98 <os_sem_pend>

    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1f3f4:	4620      	mov	r0, r4
   1f3f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f3fa:	f7eb f9b7 	bl	a76c <os_mutex_pend>
    lock->active_writer = true;
   1f3fe:	2301      	movs	r3, #1
   1f400:	7763      	strb	r3, [r4, #29]
    lock->handoffs--;
   1f402:	f894 3020 	ldrb.w	r3, [r4, #32]
   1f406:	3b01      	subs	r3, #1
   1f408:	f884 3020 	strb.w	r3, [r4, #32]
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
   1f40c:	4620      	mov	r0, r4
}
   1f40e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    os_mutex_release(&lock->mtx);
   1f412:	f7eb b959 	b.w	a6c8 <os_mutex_release>
        lock->active_writer = true;
   1f416:	2501      	movs	r5, #1
   1f418:	7765      	strb	r5, [r4, #29]
        acquired = true;
   1f41a:	e7e1      	b.n	1f3e0 <rwlock_acquire_write+0x1e>
}
   1f41c:	bd38      	pop	{r3, r4, r5, pc}

0001f41e <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   1f41e:	b510      	push	{r4, lr}
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1f420:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
   1f424:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1f426:	f7eb f9a1 	bl	a76c <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   1f42a:	2300      	movs	r3, #0

    rwlock_unblock(lock);
   1f42c:	4620      	mov	r0, r4
    lock->active_writer = false;
   1f42e:	7763      	strb	r3, [r4, #29]
    rwlock_unblock(lock);
   1f430:	f7ff ff64 	bl	1f2fc <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   1f434:	4620      	mov	r0, r4
}
   1f436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_release(&lock->mtx);
   1f43a:	f7eb b945 	b.w	a6c8 <os_mutex_release>

0001f43e <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   1f43e:	b510      	push	{r4, lr}
    int rc;

    *lock = (struct rwlock) { 0 };
   1f440:	2224      	movs	r2, #36	; 0x24
{
   1f442:	4604      	mov	r4, r0
    *lock = (struct rwlock) { 0 };
   1f444:	2100      	movs	r1, #0
   1f446:	f7f0 f8da 	bl	f5fe <memset>

    rc = os_mutex_init(&lock->mtx);
   1f44a:	4620      	mov	r0, r4
   1f44c:	f7eb f932 	bl	a6b4 <os_mutex_init>
    if (rc != 0) {
   1f450:	b950      	cbnz	r0, 1f468 <rwlock_init+0x2a>
        return rc;
    }

    rc = os_sem_init(&lock->rsem, 0);
   1f452:	4601      	mov	r1, r0
   1f454:	f104 000c 	add.w	r0, r4, #12
   1f458:	f7ea fbe4 	bl	9c24 <os_sem_init>
    if (rc != 0) {
   1f45c:	b920      	cbnz	r0, 1f468 <rwlock_init+0x2a>
        return rc;
    }

    rc = os_sem_init(&lock->wsem, 0);
   1f45e:	4601      	mov	r1, r0
   1f460:	f104 0014 	add.w	r0, r4, #20
   1f464:	f7ea fbde 	bl	9c24 <os_sem_init>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1f468:	bd10      	pop	{r4, pc}

0001f46a <bootutil_img_validate>:
 */
int
bootutil_img_validate(struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz,
                      uint8_t *seed, int seed_len, uint8_t *out_hash)
{
   1f46a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f46e:	b0a7      	sub	sp, #156	; 0x9c
   1f470:	e9dd 5930 	ldrd	r5, r9, [sp, #192]	; 0xc0
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
   1f474:	ac0b      	add	r4, sp, #44	; 0x2c
   1f476:	4607      	mov	r7, r0
   1f478:	4620      	mov	r0, r4
   1f47a:	460e      	mov	r6, r1
   1f47c:	4692      	mov	sl, r2
   1f47e:	469b      	mov	fp, r3
   1f480:	f000 f96a 	bl	1f758 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
   1f484:	2100      	movs	r1, #0
   1f486:	4620      	mov	r0, r4
   1f488:	f000 f96a 	bl	1f760 <mbedtls_sha256_starts_ret>
    if (seed && (seed_len > 0)) {
   1f48c:	b13d      	cbz	r5, 1f49e <bootutil_img_validate+0x34>
   1f48e:	f1b9 0f00 	cmp.w	r9, #0
   1f492:	dd04      	ble.n	1f49e <bootutil_img_validate+0x34>

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
   1f494:	464a      	mov	r2, r9
   1f496:	4629      	mov	r1, r5
   1f498:	4620      	mov	r0, r4
   1f49a:	f000 fa51 	bl	1f940 <mbedtls_sha256_update_ret>
    size = hdr->ih_img_size + hdr_size;
   1f49e:	f8b7 9008 	ldrh.w	r9, [r7, #8]
   1f4a2:	68fb      	ldr	r3, [r7, #12]
    for (off = 0; off < size; off += blk_sz) {
   1f4a4:	f04f 0800 	mov.w	r8, #0
    size = hdr->ih_img_size + hdr_size;
   1f4a8:	4499      	add	r9, r3
    for (off = 0; off < size; off += blk_sz) {
   1f4aa:	45c1      	cmp	r9, r8
   1f4ac:	d826      	bhi.n	1f4fc <bootutil_img_validate+0x92>
}

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
   1f4ae:	a903      	add	r1, sp, #12
   1f4b0:	4620      	mov	r0, r4
   1f4b2:	f000 fa82 	bl	1f9ba <mbedtls_sha256_finish_ret>
    rc = bootutil_img_hash(hdr, fap, tmp_buf, tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        return rc;
    }

    if (out_hash) {
   1f4b6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   1f4b8:	b153      	cbz	r3, 1f4d0 <bootutil_img_validate+0x66>
        memcpy(out_hash, hash, 32);
   1f4ba:	aa03      	add	r2, sp, #12
   1f4bc:	461d      	mov	r5, r3
   1f4be:	4613      	mov	r3, r2
   1f4c0:	cb03      	ldmia	r3!, {r0, r1}
   1f4c2:	42a3      	cmp	r3, r4
   1f4c4:	6028      	str	r0, [r5, #0]
   1f4c6:	6069      	str	r1, [r5, #4]
   1f4c8:	461a      	mov	r2, r3
   1f4ca:	f105 0508 	add.w	r5, r5, #8
   1f4ce:	d1f6      	bne.n	1f4be <bootutil_img_validate+0x54>
    }

    /* The TLVs come after the image. */
    /* After image there are TLVs. */
    off = hdr->ih_img_size + hdr->ih_hdr_size;
   1f4d0:	68f9      	ldr	r1, [r7, #12]
   1f4d2:	893d      	ldrh	r5, [r7, #8]

    rc = flash_area_read(fap, off, &info, sizeof(info));
   1f4d4:	2304      	movs	r3, #4
    off = hdr->ih_img_size + hdr->ih_hdr_size;
   1f4d6:	440d      	add	r5, r1
    rc = flash_area_read(fap, off, &info, sizeof(info));
   1f4d8:	eb0d 0203 	add.w	r2, sp, r3
   1f4dc:	4629      	mov	r1, r5
   1f4de:	4630      	mov	r0, r6
   1f4e0:	f7f3 f982 	bl	127e8 <flash_area_read>
    if (rc) {
   1f4e4:	b938      	cbnz	r0, 1f4f6 <bootutil_img_validate+0x8c>
        return rc;
    }
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
   1f4e6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1f4ea:	f646 1307 	movw	r3, #26887	; 0x6907
   1f4ee:	429a      	cmp	r2, r3
   1f4f0:	d018      	beq.n	1f524 <bootutil_img_validate+0xba>
        return -1;
   1f4f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return -1;
    }
#endif

    return 0;
}
   1f4f6:	b027      	add	sp, #156	; 0x9c
   1f4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        blk_sz = size - off;
   1f4fc:	eba9 0308 	sub.w	r3, r9, r8
        if (blk_sz > tmp_buf_sz) {
   1f500:	455b      	cmp	r3, fp
   1f502:	bf28      	it	cs
   1f504:	465b      	movcs	r3, fp
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
   1f506:	4652      	mov	r2, sl
   1f508:	4641      	mov	r1, r8
   1f50a:	4630      	mov	r0, r6
   1f50c:	461d      	mov	r5, r3
   1f50e:	f7f3 f96b 	bl	127e8 <flash_area_read>
        if (rc) {
   1f512:	2800      	cmp	r0, #0
   1f514:	d1ef      	bne.n	1f4f6 <bootutil_img_validate+0x8c>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
   1f516:	462a      	mov	r2, r5
   1f518:	4651      	mov	r1, sl
   1f51a:	4620      	mov	r0, r4
   1f51c:	f000 fa10 	bl	1f940 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
   1f520:	44a8      	add	r8, r5
   1f522:	e7c2      	b.n	1f4aa <bootutil_img_validate+0x40>
    end = off + info.it_tlv_tot;
   1f524:	f8bd 7006 	ldrh.w	r7, [sp, #6]
    int sha256_valid = 0;
   1f528:	4680      	mov	r8, r0
    end = off + info.it_tlv_tot;
   1f52a:	442f      	add	r7, r5
    off += sizeof(info);
   1f52c:	3504      	adds	r5, #4
    for (; off < end; off += sizeof(tlv) + tlv.it_len) {
   1f52e:	42bd      	cmp	r5, r7
   1f530:	d302      	bcc.n	1f538 <bootutil_img_validate+0xce>
    if (!sha256_valid) {
   1f532:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   1f536:	e7de      	b.n	1f4f6 <bootutil_img_validate+0x8c>
        rc = flash_area_read(fap, off, &tlv, sizeof tlv);
   1f538:	2304      	movs	r3, #4
   1f53a:	aa02      	add	r2, sp, #8
   1f53c:	4629      	mov	r1, r5
   1f53e:	4630      	mov	r0, r6
   1f540:	f7f3 f952 	bl	127e8 <flash_area_read>
        if (rc) {
   1f544:	2800      	cmp	r0, #0
   1f546:	d1d6      	bne.n	1f4f6 <bootutil_img_validate+0x8c>
        if (tlv.it_type == IMAGE_TLV_SHA256) {
   1f548:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1f54c:	2b10      	cmp	r3, #16
   1f54e:	d115      	bne.n	1f57c <bootutil_img_validate+0x112>
            if (tlv.it_len != sizeof(hash)) {
   1f550:	f8bd 800a 	ldrh.w	r8, [sp, #10]
   1f554:	f1b8 0f20 	cmp.w	r8, #32
   1f558:	d1cb      	bne.n	1f4f2 <bootutil_img_validate+0x88>
            rc = flash_area_read(fap, off + sizeof(tlv), buf, sizeof hash);
   1f55a:	4643      	mov	r3, r8
   1f55c:	4622      	mov	r2, r4
   1f55e:	1d29      	adds	r1, r5, #4
   1f560:	4630      	mov	r0, r6
   1f562:	f7f3 f941 	bl	127e8 <flash_area_read>
            if (rc) {
   1f566:	2800      	cmp	r0, #0
   1f568:	d1c5      	bne.n	1f4f6 <bootutil_img_validate+0x8c>
            if (memcmp(hash, buf, sizeof(hash))) {
   1f56a:	4642      	mov	r2, r8
   1f56c:	4621      	mov	r1, r4
   1f56e:	a803      	add	r0, sp, #12
   1f570:	f7f0 f814 	bl	f59c <memcmp>
   1f574:	2800      	cmp	r0, #0
   1f576:	d1bc      	bne.n	1f4f2 <bootutil_img_validate+0x88>
            sha256_valid = 1;
   1f578:	f04f 0801 	mov.w	r8, #1
    for (; off < end; off += sizeof(tlv) + tlv.it_len) {
   1f57c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1f580:	3304      	adds	r3, #4
   1f582:	441d      	add	r5, r3
   1f584:	e7d3      	b.n	1f52e <bootutil_img_validate+0xc4>
	...

0001f588 <boot_read_image_headers>:
    return rc;
}

static int
boot_read_image_headers(bool require_all)
{
   1f588:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f58a:	4e11      	ldr	r6, [pc, #68]	; (1f5d0 <boot_read_image_headers+0x48>)
   1f58c:	4605      	mov	r5, r0
    int rc;
    int i;

    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
   1f58e:	2400      	movs	r4, #0
    area_id = flash_area_id_from_image_slot(slot);
   1f590:	4620      	mov	r0, r4
   1f592:	f7f3 f981 	bl	12898 <flash_area_id_from_image_slot>
    rc = flash_area_open(area_id, &fap);
   1f596:	a901      	add	r1, sp, #4
   1f598:	b2c0      	uxtb	r0, r0
   1f59a:	f7f3 f8cd 	bl	12738 <flash_area_open>
    if (rc != 0) {
   1f59e:	4601      	mov	r1, r0
   1f5a0:	b130      	cbz	r0, 1f5b0 <boot_read_image_headers+0x28>
             * if at least the first slot's header was read successfully,
             * then the boot loader can attempt a boot.
             *
             * Failure to read any headers is a fatal error.
             */
            if (i > 0 && !require_all) {
   1f5a2:	b98c      	cbnz	r4, 1f5c8 <boot_read_image_headers+0x40>
   1f5a4:	2401      	movs	r4, #1
            }
        }
    }

    return 0;
}
   1f5a6:	4620      	mov	r0, r4
   1f5a8:	b002      	add	sp, #8
   1f5aa:	bd70      	pop	{r4, r5, r6, pc}
   1f5ac:	2401      	movs	r4, #1
   1f5ae:	e7ef      	b.n	1f590 <boot_read_image_headers+0x8>
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
   1f5b0:	9801      	ldr	r0, [sp, #4]
   1f5b2:	2320      	movs	r3, #32
   1f5b4:	4632      	mov	r2, r6
   1f5b6:	f7f3 f917 	bl	127e8 <flash_area_read>
    if (rc != 0) {
   1f5ba:	2800      	cmp	r0, #0
   1f5bc:	d1f1      	bne.n	1f5a2 <boot_read_image_headers+0x1a>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
   1f5be:	362c      	adds	r6, #44	; 0x2c
   1f5c0:	2c00      	cmp	r4, #0
   1f5c2:	d0f3      	beq.n	1f5ac <boot_read_image_headers+0x24>
    return 0;
   1f5c4:	2400      	movs	r4, #0
   1f5c6:	e7ee      	b.n	1f5a6 <boot_read_image_headers+0x1e>
            if (i > 0 && !require_all) {
   1f5c8:	2d00      	cmp	r5, #0
   1f5ca:	d0fb      	beq.n	1f5c4 <boot_read_image_headers+0x3c>
   1f5cc:	e7eb      	b.n	1f5a6 <boot_read_image_headers+0x1e>
   1f5ce:	bf00      	nop
   1f5d0:	2000522c 	.word	0x2000522c

0001f5d4 <boot_read_sectors>:
 * and copy during an image swap.  The information collected during this
 * function is used to populate the boot_data global.
 */
static int
boot_read_sectors(void)
{
   1f5d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int rc;

    switch (flash_area) {
    case FLASH_AREA_IMAGE_PRIMARY:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
                                   state->imgs[BOOT_PRIMARY_SLOT].sectors);
   1f5d6:	4c18      	ldr	r4, [pc, #96]	; (1f638 <boot_read_sectors+0x64>)
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   1f5d8:	2580      	movs	r5, #128	; 0x80
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1f5da:	6a62      	ldr	r2, [r4, #36]	; 0x24
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   1f5dc:	9501      	str	r5, [sp, #4]
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1f5de:	a901      	add	r1, sp, #4
   1f5e0:	2001      	movs	r0, #1
   1f5e2:	f7f3 f8c7 	bl	12774 <flash_area_to_sectors>
        state->imgs[BOOT_PRIMARY_SLOT].num_sectors = (size_t)num_sectors;
   1f5e6:	9b01      	ldr	r3, [sp, #4]
   1f5e8:	62a3      	str	r3, [r4, #40]	; 0x28
    int rc;

    rc = boot_initialize_area(&boot_data, FLASH_AREA_IMAGE_PRIMARY);
    if (rc != 0) {
   1f5ea:	b118      	cbz	r0, 1f5f4 <boot_read_sectors+0x20>
        return BOOT_EFLASH;
   1f5ec:	2501      	movs	r5, #1
    }

    BOOT_WRITE_SZ(&boot_data) = boot_write_sz();

    return 0;
}
   1f5ee:	4628      	mov	r0, r5
   1f5f0:	b002      	add	sp, #8
   1f5f2:	bd70      	pop	{r4, r5, r6, pc}
        break;
    case FLASH_AREA_IMAGE_SECONDARY:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1f5f4:	6d22      	ldr	r2, [r4, #80]	; 0x50
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   1f5f6:	9501      	str	r5, [sp, #4]
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1f5f8:	a901      	add	r1, sp, #4
   1f5fa:	2002      	movs	r0, #2
   1f5fc:	f7f3 f8ba 	bl	12774 <flash_area_to_sectors>
                                   state->imgs[BOOT_SECONDARY_SLOT].sectors);
        state->imgs[BOOT_SECONDARY_SLOT].num_sectors = (size_t)num_sectors;
   1f600:	9b01      	ldr	r3, [sp, #4]
   1f602:	6563      	str	r3, [r4, #84]	; 0x54
    if (rc != 0) {
   1f604:	2800      	cmp	r0, #0
   1f606:	d1f1      	bne.n	1f5ec <boot_read_sectors+0x18>
        break;
    case FLASH_AREA_IMAGE_SCRATCH:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1f608:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   1f60a:	9501      	str	r5, [sp, #4]
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   1f60c:	a901      	add	r1, sp, #4
   1f60e:	2003      	movs	r0, #3
   1f610:	f7f3 f8b0 	bl	12774 <flash_area_to_sectors>
                                   state->scratch.sectors);
        state->scratch.num_sectors = (size_t)num_sectors;
   1f614:	9b01      	ldr	r3, [sp, #4]
   1f616:	6623      	str	r3, [r4, #96]	; 0x60
    if (rc != 0) {
   1f618:	4605      	mov	r5, r0
   1f61a:	2800      	cmp	r0, #0
   1f61c:	d1e6      	bne.n	1f5ec <boot_read_sectors+0x18>
    elem_sz = flash_area_align(boot_data.imgs[BOOT_PRIMARY_SLOT].area);
   1f61e:	6a20      	ldr	r0, [r4, #32]
   1f620:	f7f3 f91a 	bl	12858 <flash_area_align>
   1f624:	4606      	mov	r6, r0
    align = flash_area_align(boot_data.scratch.area);
   1f626:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1f628:	f7f3 f916 	bl	12858 <flash_area_align>
    BOOT_WRITE_SZ(&boot_data) = boot_write_sz();
   1f62c:	42b0      	cmp	r0, r6
   1f62e:	bf38      	it	cc
   1f630:	4630      	movcc	r0, r6
   1f632:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    return 0;
   1f636:	e7da      	b.n	1f5ee <boot_read_sectors+0x1a>
   1f638:	2000522c 	.word	0x2000522c

0001f63c <split_go>:
    return rc;
}

int
split_go(int loader_slot, int split_slot, void **entry)
{
   1f63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f640:	b08f      	sub	sp, #60	; 0x3c
   1f642:	4683      	mov	fp, r0
    uintptr_t entry_val;
    int loader_flash_id;
    int split_flash_id;
    int rc;

    sectors = malloc(BOOT_MAX_IMG_SECTORS * 2 * sizeof *sectors);
   1f644:	f44f 6040 	mov.w	r0, #3072	; 0xc00
{
   1f648:	4688      	mov	r8, r1
   1f64a:	9204      	str	r2, [sp, #16]
    sectors = malloc(BOOT_MAX_IMG_SECTORS * 2 * sizeof *sectors);
   1f64c:	f000 fa62 	bl	1fb14 <os_malloc>
    if (sectors == NULL) {
   1f650:	4605      	mov	r5, r0
   1f652:	2800      	cmp	r0, #0
   1f654:	d078      	beq.n	1f748 <split_go+0x10c>
        return SPLIT_GO_ERR;
    }
    boot_data.imgs[loader_slot].sectors = sectors + 0;
   1f656:	4c3e      	ldr	r4, [pc, #248]	; (1f750 <split_go+0x114>)
   1f658:	262c      	movs	r6, #44	; 0x2c
   1f65a:	fb06 f70b 	mul.w	r7, r6, fp
    boot_data.imgs[split_slot].sectors = sectors + BOOT_MAX_IMG_SECTORS;
   1f65e:	fb06 f608 	mul.w	r6, r6, r8
    boot_data.imgs[loader_slot].sectors = sectors + 0;
   1f662:	eb04 0a07 	add.w	sl, r4, r7
    boot_data.imgs[split_slot].sectors = sectors + BOOT_MAX_IMG_SECTORS;
   1f666:	eb04 0906 	add.w	r9, r4, r6
   1f66a:	f500 63c0 	add.w	r3, r0, #1536	; 0x600
    boot_data.imgs[loader_slot].sectors = sectors + 0;
   1f66e:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    boot_data.imgs[split_slot].sectors = sectors + BOOT_MAX_IMG_SECTORS;
   1f672:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24

    loader_flash_id = flash_area_id_from_image_slot(loader_slot);
   1f676:	4658      	mov	r0, fp
   1f678:	f7f3 f90e 	bl	12898 <flash_area_id_from_image_slot>
    rc = flash_area_open(loader_flash_id,
   1f67c:	f107 0120 	add.w	r1, r7, #32
   1f680:	4421      	add	r1, r4
   1f682:	b2c0      	uxtb	r0, r0
   1f684:	f7f3 f858 	bl	12738 <flash_area_open>
                         &BOOT_IMG_AREA(&boot_data, loader_slot));
    assert(rc == 0);
   1f688:	b128      	cbz	r0, 1f696 <split_go+0x5a>
   1f68a:	2300      	movs	r3, #0
   1f68c:	461a      	mov	r2, r3
   1f68e:	4619      	mov	r1, r3
   1f690:	4618      	mov	r0, r3
   1f692:	f7e9 fc2f 	bl	8ef4 <__assert_func>
    split_flash_id = flash_area_id_from_image_slot(split_slot);
   1f696:	4640      	mov	r0, r8
   1f698:	f7f3 f8fe 	bl	12898 <flash_area_id_from_image_slot>
    rc = flash_area_open(split_flash_id,
   1f69c:	f106 0120 	add.w	r1, r6, #32
   1f6a0:	4421      	add	r1, r4
   1f6a2:	b2c0      	uxtb	r0, r0
   1f6a4:	f7f3 f848 	bl	12738 <flash_area_open>
                         &BOOT_IMG_AREA(&boot_data, split_slot));
    assert(rc == 0);
   1f6a8:	2800      	cmp	r0, #0
   1f6aa:	d1ee      	bne.n	1f68a <split_go+0x4e>

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors();
   1f6ac:	f7ff ff92 	bl	1f5d4 <boot_read_sectors>
    if (rc != 0) {
   1f6b0:	2800      	cmp	r0, #0
   1f6b2:	d146      	bne.n	1f742 <split_go+0x106>
        rc = SPLIT_GO_ERR;
        goto done;
    }

    rc = boot_read_image_headers(true);
   1f6b4:	2001      	movs	r0, #1
   1f6b6:	f7ff ff67 	bl	1f588 <boot_read_image_headers>
    if (rc != 0) {
   1f6ba:	4607      	mov	r7, r0
   1f6bc:	b998      	cbnz	r0, 1f6e6 <split_go+0xaa>

    /* Don't check the bootable image flag because we could really call a
     * bootable or non-bootable image.  Just validate that the image check
     * passes which is distinct from the normal check.
     */
    rc = split_image_check(boot_img_hdr(&boot_data, split_slot),
   1f6be:	f8d9 b020 	ldr.w	fp, [r9, #32]
    if (!tmpbuf) {
   1f6c2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 1f754 <split_go+0x118>
    rc = split_image_check(boot_img_hdr(&boot_data, split_slot),
   1f6c6:	f8da 1020 	ldr.w	r1, [sl, #32]
    if (!tmpbuf) {
   1f6ca:	f8d9 3000 	ldr.w	r3, [r9]
   1f6ce:	b98b      	cbnz	r3, 1f6f4 <split_go+0xb8>
        tmpbuf = malloc(BOOT_TMPBUF_SZ);
   1f6d0:	f44f 7080 	mov.w	r0, #256	; 0x100
   1f6d4:	9105      	str	r1, [sp, #20]
   1f6d6:	f000 fa1d 	bl	1fb14 <os_malloc>
        if (!tmpbuf) {
   1f6da:	9905      	ldr	r1, [sp, #20]
        tmpbuf = malloc(BOOT_TMPBUF_SZ);
   1f6dc:	f8c9 0000 	str.w	r0, [r9]
        if (!tmpbuf) {
   1f6e0:	b940      	cbnz	r0, 1f6f4 <split_go+0xb8>
                           BOOT_IMG_AREA(&boot_data, split_slot),
                           boot_img_hdr(&boot_data, loader_slot),
                           BOOT_IMG_AREA(&boot_data, loader_slot));
    if (rc != 0) {
        rc = SPLIT_GO_NON_MATCHING;
   1f6e2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    rc = SPLIT_GO_OK;

done:
    flash_area_close(BOOT_IMG_AREA(&boot_data, split_slot));
    flash_area_close(BOOT_IMG_AREA(&boot_data, loader_slot));
    free(sectors);
   1f6e6:	4628      	mov	r0, r5
   1f6e8:	f000 fa22 	bl	1fb30 <os_free>
    return rc;
}
   1f6ec:	4638      	mov	r0, r7
   1f6ee:	b00f      	add	sp, #60	; 0x3c
   1f6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (bootutil_img_validate(loader_hdr, loader_fap, tmpbuf, BOOT_TMPBUF_SZ,
   1f6f4:	2300      	movs	r3, #0
   1f6f6:	e9cd 3300 	strd	r3, r3, [sp]
   1f6fa:	af06      	add	r7, sp, #24
   1f6fc:	9702      	str	r7, [sp, #8]
   1f6fe:	f8d9 2000 	ldr.w	r2, [r9]
   1f702:	f44f 7380 	mov.w	r3, #256	; 0x100
   1f706:	4650      	mov	r0, sl
   1f708:	f7ff feaf 	bl	1f46a <bootutil_img_validate>
   1f70c:	2800      	cmp	r0, #0
   1f70e:	d1e8      	bne.n	1f6e2 <split_go+0xa6>
    if (bootutil_img_validate(app_hdr, app_fap, tmpbuf, BOOT_TMPBUF_SZ,
   1f710:	2320      	movs	r3, #32
   1f712:	e9cd 7300 	strd	r7, r3, [sp]
   1f716:	9002      	str	r0, [sp, #8]
   1f718:	f8d9 2000 	ldr.w	r2, [r9]
   1f71c:	f44f 7380 	mov.w	r3, #256	; 0x100
   1f720:	4659      	mov	r1, fp
   1f722:	19a0      	adds	r0, r4, r6
   1f724:	f7ff fea1 	bl	1f46a <bootutil_img_validate>
   1f728:	4607      	mov	r7, r0
   1f72a:	2800      	cmp	r0, #0
   1f72c:	d1d9      	bne.n	1f6e2 <split_go+0xa6>
    return state->imgs[slot].area->fa_off;
   1f72e:	212c      	movs	r1, #44	; 0x2c
   1f730:	fb01 4408 	mla	r4, r1, r8, r4
   1f734:	6a23      	ldr	r3, [r4, #32]
                boot_img_hdr(&boot_data, split_slot)->ih_hdr_size;
   1f736:	8922      	ldrh	r2, [r4, #8]
    entry_val = boot_img_slot_off(&boot_data, split_slot) +
   1f738:	685b      	ldr	r3, [r3, #4]
   1f73a:	4413      	add	r3, r2
    *entry = (void *) entry_val;
   1f73c:	9a04      	ldr	r2, [sp, #16]
   1f73e:	6013      	str	r3, [r2, #0]
    rc = SPLIT_GO_OK;
   1f740:	e7d1      	b.n	1f6e6 <split_go+0xaa>
        rc = SPLIT_GO_ERR;
   1f742:	f06f 0701 	mvn.w	r7, #1
   1f746:	e7ce      	b.n	1f6e6 <split_go+0xaa>
        return SPLIT_GO_ERR;
   1f748:	f06f 0701 	mvn.w	r7, #1
   1f74c:	e7ce      	b.n	1f6ec <split_go+0xb0>
   1f74e:	bf00      	nop
   1f750:	2000522c 	.word	0x2000522c
   1f754:	20005294 	.word	0x20005294

0001f758 <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
   1f758:	226c      	movs	r2, #108	; 0x6c
   1f75a:	2100      	movs	r1, #0
   1f75c:	f7ef bf4f 	b.w	f5fe <memset>

0001f760 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
   1f760:	2300      	movs	r3, #0
    ctx->total[1] = 0;
   1f762:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
   1f766:	b9c1      	cbnz	r1, 1f79a <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
   1f768:	4a19      	ldr	r2, [pc, #100]	; (1f7d0 <mbedtls_sha256_starts_ret+0x70>)
   1f76a:	4b1a      	ldr	r3, [pc, #104]	; (1f7d4 <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
   1f76c:	f8df c08c 	ldr.w	ip, [pc, #140]	; 1f7fc <mbedtls_sha256_starts_ret+0x9c>
        ctx->state[1] = 0xBB67AE85;
   1f770:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
   1f774:	4b18      	ldr	r3, [pc, #96]	; (1f7d8 <mbedtls_sha256_starts_ret+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
   1f776:	4a19      	ldr	r2, [pc, #100]	; (1f7dc <mbedtls_sha256_starts_ret+0x7c>)
        ctx->state[3] = 0xA54FF53A;
   1f778:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
   1f77c:	4b18      	ldr	r3, [pc, #96]	; (1f7e0 <mbedtls_sha256_starts_ret+0x80>)
   1f77e:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
   1f782:	4b18      	ldr	r3, [pc, #96]	; (1f7e4 <mbedtls_sha256_starts_ret+0x84>)
   1f784:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
   1f786:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   1f78a:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   1f78e:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
   1f792:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
   1f794:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
   1f796:	2000      	movs	r0, #0
   1f798:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
   1f79a:	4b13      	ldr	r3, [pc, #76]	; (1f7e8 <mbedtls_sha256_starts_ret+0x88>)
   1f79c:	4a13      	ldr	r2, [pc, #76]	; (1f7ec <mbedtls_sha256_starts_ret+0x8c>)
        ctx->state[4] = 0xFFC00B31;
   1f79e:	f8df c060 	ldr.w	ip, [pc, #96]	; 1f800 <mbedtls_sha256_starts_ret+0xa0>
        ctx->state[1] = 0x367CD507;
   1f7a2:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
   1f7a6:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
   1f7aa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
   1f7ae:	f503 6301 	add.w	r3, r3, #2064	; 0x810
   1f7b2:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
   1f7b4:	4b0e      	ldr	r3, [pc, #56]	; (1f7f0 <mbedtls_sha256_starts_ret+0x90>)
   1f7b6:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
   1f7ba:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
   1f7be:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
   1f7c2:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
   1f7c6:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
   1f7c8:	4b0a      	ldr	r3, [pc, #40]	; (1f7f4 <mbedtls_sha256_starts_ret+0x94>)
   1f7ca:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
   1f7cc:	4b0a      	ldr	r3, [pc, #40]	; (1f7f8 <mbedtls_sha256_starts_ret+0x98>)
   1f7ce:	e7e0      	b.n	1f792 <mbedtls_sha256_starts_ret+0x32>
   1f7d0:	6a09e667 	.word	0x6a09e667
   1f7d4:	bb67ae85 	.word	0xbb67ae85
   1f7d8:	a54ff53a 	.word	0xa54ff53a
   1f7dc:	510e527f 	.word	0x510e527f
   1f7e0:	9b05688c 	.word	0x9b05688c
   1f7e4:	1f83d9ab 	.word	0x1f83d9ab
   1f7e8:	367cd507 	.word	0x367cd507
   1f7ec:	c1059ed8 	.word	0xc1059ed8
   1f7f0:	ffc00b31 	.word	0xffc00b31
   1f7f4:	64f98fa7 	.word	0x64f98fa7
   1f7f8:	befa4fa4 	.word	0xbefa4fa4
   1f7fc:	3c6ef372 	.word	0x3c6ef372
   1f800:	f70e5939 	.word	0xf70e5939

0001f804 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
   1f804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f808:	4602      	mov	r2, r0
   1f80a:	b0cd      	sub	sp, #308	; 0x134
   1f80c:	3208      	adds	r2, #8
   1f80e:	9000      	str	r0, [sp, #0]
   1f810:	460b      	mov	r3, r1
   1f812:	9203      	str	r2, [sp, #12]
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
        A[i] = ctx->state[i];
   1f814:	ad04      	add	r5, sp, #16
   1f816:	f100 0628 	add.w	r6, r0, #40	; 0x28
   1f81a:	6810      	ldr	r0, [r2, #0]
   1f81c:	6851      	ldr	r1, [r2, #4]
   1f81e:	462c      	mov	r4, r5
   1f820:	c403      	stmia	r4!, {r0, r1}
   1f822:	3208      	adds	r2, #8
   1f824:	42b2      	cmp	r2, r6
   1f826:	4625      	mov	r5, r4
   1f828:	d1f7      	bne.n	1f81a <mbedtls_internal_sha256_process+0x16>
   1f82a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f82c:	9201      	str	r2, [sp, #4]
   1f82e:	e9dd 8709 	ldrd	r8, r7, [sp, #36]	; 0x24
   1f832:	e9dd 0604 	ldrd	r0, r6, [sp, #16]
   1f836:	e9dd eb06 	ldrd	lr, fp, [sp, #24]
   1f83a:	4a40      	ldr	r2, [pc, #256]	; (1f93c <mbedtls_internal_sha256_process+0x138>)
   1f83c:	9c08      	ldr	r4, [sp, #32]
   1f83e:	9202      	str	r2, [sp, #8]
   1f840:	ad0c      	add	r5, sp, #48	; 0x30
   1f842:	4619      	mov	r1, r3

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
   1f844:	f04f 0900 	mov.w	r9, #0
    {
        if( i < 16 )
   1f848:	f1b9 0f0f 	cmp.w	r9, #15
   1f84c:	d85e      	bhi.n	1f90c <mbedtls_internal_sha256_process+0x108>
            GET_UINT32_BE( W[i], data, 4 * i );
   1f84e:	784b      	ldrb	r3, [r1, #1]
   1f850:	f891 a000 	ldrb.w	sl, [r1]
   1f854:	f891 c002 	ldrb.w	ip, [r1, #2]
   1f858:	041b      	lsls	r3, r3, #16
   1f85a:	ea43 630a 	orr.w	r3, r3, sl, lsl #24
   1f85e:	f891 a003 	ldrb.w	sl, [r1, #3]
   1f862:	ea43 030a 	orr.w	r3, r3, sl
   1f866:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
        else
            R( i );

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
   1f86a:	ea4f 22f4 	mov.w	r2, r4, ror #11
   1f86e:	ea82 12b4 	eor.w	r2, r2, r4, ror #6
   1f872:	ea82 6c74 	eor.w	ip, r2, r4, ror #25
   1f876:	ea87 0208 	eor.w	r2, r7, r8
   1f87a:	4022      	ands	r2, r4
   1f87c:	407a      	eors	r2, r7
   1f87e:	eb02 0a0c 	add.w	sl, r2, ip
   1f882:	9a02      	ldr	r2, [sp, #8]
   1f884:	f845 3b04 	str.w	r3, [r5], #4
   1f888:	f852 cb04 	ldr.w	ip, [r2], #4
   1f88c:	9202      	str	r2, [sp, #8]
   1f88e:	44d4      	add	ip, sl
   1f890:	9a01      	ldr	r2, [sp, #4]
   1f892:	9701      	str	r7, [sp, #4]
   1f894:	4463      	add	r3, ip
   1f896:	4413      	add	r3, r2
   1f898:	ea40 0c06 	orr.w	ip, r0, r6
   1f89c:	ea4f 3270 	mov.w	r2, r0, ror #13
   1f8a0:	eb0b 0a03 	add.w	sl, fp, r3
   1f8a4:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
   1f8a8:	ea0c 0c0e 	and.w	ip, ip, lr
   1f8ac:	ea00 0b06 	and.w	fp, r0, r6
   1f8b0:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
   1f8b4:	ea4c 0b0b 	orr.w	fp, ip, fp
    for( i = 0; i < 64; i++ )
   1f8b8:	f109 0901 	add.w	r9, r9, #1
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
   1f8bc:	4493      	add	fp, r2
    for( i = 0; i < 64; i++ )
   1f8be:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
   1f8c2:	445b      	add	r3, fp
    for( i = 0; i < 64; i++ )
   1f8c4:	f101 0104 	add.w	r1, r1, #4
   1f8c8:	46f3      	mov	fp, lr
   1f8ca:	d118      	bne.n	1f8fe <mbedtls_internal_sha256_process+0xfa>
   1f8cc:	e9cd 3004 	strd	r3, r0, [sp, #16]
   1f8d0:	e9cd 4809 	strd	r4, r8, [sp, #36]	; 0x24
   1f8d4:	9800      	ldr	r0, [sp, #0]
   1f8d6:	9a03      	ldr	r2, [sp, #12]
   1f8d8:	970b      	str	r7, [sp, #44]	; 0x2c
   1f8da:	e9cd 6e06 	strd	r6, lr, [sp, #24]
   1f8de:	f8cd a020 	str.w	sl, [sp, #32]
   1f8e2:	ab04      	add	r3, sp, #16
   1f8e4:	3028      	adds	r0, #40	; 0x28
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
   1f8e6:	6811      	ldr	r1, [r2, #0]
   1f8e8:	f853 4b04 	ldr.w	r4, [r3], #4
   1f8ec:	4421      	add	r1, r4
   1f8ee:	f842 1b04 	str.w	r1, [r2], #4
    for( i = 0; i < 8; i++ )
   1f8f2:	4282      	cmp	r2, r0
   1f8f4:	d1f7      	bne.n	1f8e6 <mbedtls_internal_sha256_process+0xe2>

    return( 0 );
}
   1f8f6:	2000      	movs	r0, #0
   1f8f8:	b04d      	add	sp, #308	; 0x134
   1f8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8fe:	46b6      	mov	lr, r6
   1f900:	4647      	mov	r7, r8
   1f902:	4606      	mov	r6, r0
   1f904:	46a0      	mov	r8, r4
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
   1f906:	4618      	mov	r0, r3
   1f908:	4654      	mov	r4, sl
   1f90a:	e79d      	b.n	1f848 <mbedtls_internal_sha256_process+0x44>
            R( i );
   1f90c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1f910:	f855 ac3c 	ldr.w	sl, [r5, #-60]
   1f914:	f855 2c40 	ldr.w	r2, [r5, #-64]
   1f918:	ea4f 4cf3 	mov.w	ip, r3, ror #19
   1f91c:	ea8c 4c73 	eor.w	ip, ip, r3, ror #17
   1f920:	ea8c 2c93 	eor.w	ip, ip, r3, lsr #10
   1f924:	f855 3c1c 	ldr.w	r3, [r5, #-28]
   1f928:	4413      	add	r3, r2
   1f92a:	ea4f 42ba 	mov.w	r2, sl, ror #18
   1f92e:	ea82 12fa 	eor.w	r2, r2, sl, ror #7
   1f932:	449c      	add	ip, r3
   1f934:	ea82 03da 	eor.w	r3, r2, sl, lsr #3
   1f938:	4463      	add	r3, ip
   1f93a:	e796      	b.n	1f86a <mbedtls_internal_sha256_process+0x66>
   1f93c:	000240a4 	.word	0x000240a4

0001f940 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   1f940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f944:	4605      	mov	r5, r0
   1f946:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
   1f948:	4614      	mov	r4, r2
   1f94a:	b912      	cbnz	r2, 1f952 <mbedtls_sha256_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
   1f94c:	2000      	movs	r0, #0
}
   1f94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
   1f952:	6803      	ldr	r3, [r0, #0]
   1f954:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
   1f958:	18d3      	adds	r3, r2, r3
   1f95a:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
   1f95c:	bf22      	ittt	cs
   1f95e:	6843      	ldrcs	r3, [r0, #4]
   1f960:	3301      	addcs	r3, #1
   1f962:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
   1f964:	b1a7      	cbz	r7, 1f990 <mbedtls_sha256_update_ret+0x50>
    fill = 64 - left;
   1f966:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
   1f96a:	454a      	cmp	r2, r9
   1f96c:	d310      	bcc.n	1f990 <mbedtls_sha256_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
   1f96e:	f100 0828 	add.w	r8, r0, #40	; 0x28
   1f972:	464a      	mov	r2, r9
   1f974:	eb08 0007 	add.w	r0, r8, r7
   1f978:	f7ef fe34 	bl	f5e4 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   1f97c:	4641      	mov	r1, r8
   1f97e:	4628      	mov	r0, r5
   1f980:	f7ff ff40 	bl	1f804 <mbedtls_internal_sha256_process>
   1f984:	2800      	cmp	r0, #0
   1f986:	d1e2      	bne.n	1f94e <mbedtls_sha256_update_ret+0xe>
        ilen  -= fill;
   1f988:	443c      	add	r4, r7
        input += fill;
   1f98a:	444e      	add	r6, r9
        ilen  -= fill;
   1f98c:	3c40      	subs	r4, #64	; 0x40
        left = 0;
   1f98e:	4607      	mov	r7, r0
   1f990:	4426      	add	r6, r4
   1f992:	e005      	b.n	1f9a0 <mbedtls_sha256_update_ret+0x60>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
   1f994:	4628      	mov	r0, r5
   1f996:	f7ff ff35 	bl	1f804 <mbedtls_internal_sha256_process>
   1f99a:	2800      	cmp	r0, #0
   1f99c:	d1d7      	bne.n	1f94e <mbedtls_sha256_update_ret+0xe>
        ilen  -= 64;
   1f99e:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
   1f9a0:	2c3f      	cmp	r4, #63	; 0x3f
   1f9a2:	eba6 0104 	sub.w	r1, r6, r4
   1f9a6:	d8f5      	bhi.n	1f994 <mbedtls_sha256_update_ret+0x54>
    if( ilen > 0 )
   1f9a8:	2c00      	cmp	r4, #0
   1f9aa:	d0cf      	beq.n	1f94c <mbedtls_sha256_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   1f9ac:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1f9b0:	4622      	mov	r2, r4
   1f9b2:	4438      	add	r0, r7
   1f9b4:	f7ef fe16 	bl	f5e4 <memcpy>
   1f9b8:	e7c8      	b.n	1f94c <mbedtls_sha256_update_ret+0xc>

0001f9ba <mbedtls_sha256_finish_ret>:
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   1f9ba:	6803      	ldr	r3, [r0, #0]
   1f9bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   1f9c0:	1c5a      	adds	r2, r3, #1
   1f9c2:	4403      	add	r3, r0
{
   1f9c4:	b570      	push	{r4, r5, r6, lr}

    if( used <= 56 )
   1f9c6:	2a38      	cmp	r2, #56	; 0x38
{
   1f9c8:	460d      	mov	r5, r1
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   1f9ca:	f100 0628 	add.w	r6, r0, #40	; 0x28
    ctx->buffer[used++] = 0x80;
   1f9ce:	f04f 0180 	mov.w	r1, #128	; 0x80
{
   1f9d2:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
   1f9d4:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
   1f9d8:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
   1f9dc:	d861      	bhi.n	1faa2 <mbedtls_sha256_finish_ret+0xe8>
        memset( ctx->buffer + used, 0, 56 - used );
   1f9de:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
   1f9e2:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
   1f9e4:	f7ef fe0b 	bl	f5fe <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
   1f9e8:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
   1f9ec:	0f5a      	lsrs	r2, r3, #29
   1f9ee:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
   1f9f2:	00db      	lsls	r3, r3, #3
   1f9f4:	ba12      	rev	r2, r2
   1f9f6:	ba1b      	rev	r3, r3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   1f9f8:	6622      	str	r2, [r4, #96]	; 0x60
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   1f9fa:	6663      	str	r3, [r4, #100]	; 0x64

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   1f9fc:	4631      	mov	r1, r6
   1f9fe:	4620      	mov	r0, r4
   1fa00:	f7ff ff00 	bl	1f804 <mbedtls_internal_sha256_process>
   1fa04:	2800      	cmp	r0, #0
   1fa06:	d14b      	bne.n	1faa0 <mbedtls_sha256_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   1fa08:	7ae3      	ldrb	r3, [r4, #11]
   1fa0a:	702b      	strb	r3, [r5, #0]
   1fa0c:	8963      	ldrh	r3, [r4, #10]
   1fa0e:	706b      	strb	r3, [r5, #1]
   1fa10:	68a3      	ldr	r3, [r4, #8]
   1fa12:	0a1b      	lsrs	r3, r3, #8
   1fa14:	70ab      	strb	r3, [r5, #2]
   1fa16:	68a3      	ldr	r3, [r4, #8]
   1fa18:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   1fa1a:	7be3      	ldrb	r3, [r4, #15]
   1fa1c:	712b      	strb	r3, [r5, #4]
   1fa1e:	89e3      	ldrh	r3, [r4, #14]
   1fa20:	716b      	strb	r3, [r5, #5]
   1fa22:	68e3      	ldr	r3, [r4, #12]
   1fa24:	0a1b      	lsrs	r3, r3, #8
   1fa26:	71ab      	strb	r3, [r5, #6]
   1fa28:	68e3      	ldr	r3, [r4, #12]
   1fa2a:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   1fa2c:	7ce3      	ldrb	r3, [r4, #19]
   1fa2e:	722b      	strb	r3, [r5, #8]
   1fa30:	8a63      	ldrh	r3, [r4, #18]
   1fa32:	726b      	strb	r3, [r5, #9]
   1fa34:	6923      	ldr	r3, [r4, #16]
   1fa36:	0a1b      	lsrs	r3, r3, #8
   1fa38:	72ab      	strb	r3, [r5, #10]
   1fa3a:	6923      	ldr	r3, [r4, #16]
   1fa3c:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   1fa3e:	7de3      	ldrb	r3, [r4, #23]
   1fa40:	732b      	strb	r3, [r5, #12]
   1fa42:	8ae3      	ldrh	r3, [r4, #22]
   1fa44:	736b      	strb	r3, [r5, #13]
   1fa46:	6963      	ldr	r3, [r4, #20]
   1fa48:	0a1b      	lsrs	r3, r3, #8
   1fa4a:	73ab      	strb	r3, [r5, #14]
   1fa4c:	6963      	ldr	r3, [r4, #20]
   1fa4e:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   1fa50:	7ee3      	ldrb	r3, [r4, #27]
   1fa52:	742b      	strb	r3, [r5, #16]
   1fa54:	8b63      	ldrh	r3, [r4, #26]
   1fa56:	746b      	strb	r3, [r5, #17]
   1fa58:	69a3      	ldr	r3, [r4, #24]
   1fa5a:	0a1b      	lsrs	r3, r3, #8
   1fa5c:	74ab      	strb	r3, [r5, #18]
   1fa5e:	69a3      	ldr	r3, [r4, #24]
   1fa60:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
   1fa62:	7fe3      	ldrb	r3, [r4, #31]
   1fa64:	752b      	strb	r3, [r5, #20]
   1fa66:	8be3      	ldrh	r3, [r4, #30]
   1fa68:	756b      	strb	r3, [r5, #21]
   1fa6a:	69e3      	ldr	r3, [r4, #28]
   1fa6c:	0a1b      	lsrs	r3, r3, #8
   1fa6e:	75ab      	strb	r3, [r5, #22]
   1fa70:	69e3      	ldr	r3, [r4, #28]
   1fa72:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
   1fa74:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1fa78:	762b      	strb	r3, [r5, #24]
   1fa7a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1fa7c:	766b      	strb	r3, [r5, #25]
   1fa7e:	6a23      	ldr	r3, [r4, #32]
   1fa80:	0a1b      	lsrs	r3, r3, #8
   1fa82:	76ab      	strb	r3, [r5, #26]
   1fa84:	6a23      	ldr	r3, [r4, #32]
   1fa86:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
   1fa88:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1fa8a:	b94b      	cbnz	r3, 1faa0 <mbedtls_sha256_finish_ret+0xe6>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
   1fa8c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1fa90:	772b      	strb	r3, [r5, #28]
   1fa92:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1fa94:	776b      	strb	r3, [r5, #29]
   1fa96:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fa98:	0a1b      	lsrs	r3, r3, #8
   1fa9a:	77ab      	strb	r3, [r5, #30]
   1fa9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fa9e:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
   1faa0:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
   1faa2:	2100      	movs	r1, #0
   1faa4:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   1faa8:	f7ef fda9 	bl	f5fe <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   1faac:	4631      	mov	r1, r6
   1faae:	4620      	mov	r0, r4
   1fab0:	f7ff fea8 	bl	1f804 <mbedtls_internal_sha256_process>
   1fab4:	2800      	cmp	r0, #0
   1fab6:	d1f3      	bne.n	1faa0 <mbedtls_sha256_finish_ret+0xe6>
        memset( ctx->buffer, 0, 56 );
   1fab8:	4601      	mov	r1, r0
   1faba:	2238      	movs	r2, #56	; 0x38
   1fabc:	4630      	mov	r0, r6
   1fabe:	e791      	b.n	1f9e4 <mbedtls_sha256_finish_ret+0x2a>

0001fac0 <os_malloc_lock.part.0>:
#if MYNEWT_VAL(OS_SCHEDULING)
static struct os_mutex os_malloc_mutex;
#endif

static void
os_malloc_lock(void)
   1fac0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    if (g_os_started) {
        rc = os_mutex_pend(&os_malloc_mutex, 0xffffffff);
        assert(rc == 0);
   1fac2:	2300      	movs	r3, #0
   1fac4:	461a      	mov	r2, r3
   1fac6:	4619      	mov	r1, r3
   1fac8:	4618      	mov	r0, r3
   1faca:	f7e9 fa13 	bl	8ef4 <__assert_func>
	...

0001fad0 <os_malloc_lock>:
{
   1fad0:	b508      	push	{r3, lr}
    if (g_os_started) {
   1fad2:	4b06      	ldr	r3, [pc, #24]	; (1faec <os_malloc_lock+0x1c>)
   1fad4:	681b      	ldr	r3, [r3, #0]
   1fad6:	b13b      	cbz	r3, 1fae8 <os_malloc_lock+0x18>
        rc = os_mutex_pend(&os_malloc_mutex, 0xffffffff);
   1fad8:	4805      	ldr	r0, [pc, #20]	; (1faf0 <os_malloc_lock+0x20>)
   1fada:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fade:	f7ea fe45 	bl	a76c <os_mutex_pend>
        assert(rc == 0);
   1fae2:	b108      	cbz	r0, 1fae8 <os_malloc_lock+0x18>
   1fae4:	f7ff ffec 	bl	1fac0 <os_malloc_lock.part.0>
    }
#endif
}
   1fae8:	bd08      	pop	{r3, pc}
   1faea:	bf00      	nop
   1faec:	200025d0 	.word	0x200025d0
   1faf0:	20005298 	.word	0x20005298

0001faf4 <os_malloc_unlock>:

static void
os_malloc_unlock(void)
{
   1faf4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    if (g_os_started) {
   1faf6:	4b05      	ldr	r3, [pc, #20]	; (1fb0c <os_malloc_unlock+0x18>)
   1faf8:	681b      	ldr	r3, [r3, #0]
   1fafa:	b12b      	cbz	r3, 1fb08 <os_malloc_unlock+0x14>
        rc = os_mutex_release(&os_malloc_mutex);
   1fafc:	4804      	ldr	r0, [pc, #16]	; (1fb10 <os_malloc_unlock+0x1c>)
   1fafe:	f7ea fde3 	bl	a6c8 <os_mutex_release>
        assert(rc == 0);
   1fb02:	b108      	cbz	r0, 1fb08 <os_malloc_unlock+0x14>
   1fb04:	f7ff ffdc 	bl	1fac0 <os_malloc_lock.part.0>
    }
#endif
}
   1fb08:	bd08      	pop	{r3, pc}
   1fb0a:	bf00      	nop
   1fb0c:	200025d0 	.word	0x200025d0
   1fb10:	20005298 	.word	0x20005298

0001fb14 <os_malloc>:

void *
os_malloc(size_t size)
{
   1fb14:	b507      	push	{r0, r1, r2, lr}
   1fb16:	9001      	str	r0, [sp, #4]
    void *ptr;

    os_malloc_lock();
   1fb18:	f7ff ffda 	bl	1fad0 <os_malloc_lock>
    ptr = malloc(size);
   1fb1c:	9801      	ldr	r0, [sp, #4]
   1fb1e:	f7ef fcdb 	bl	f4d8 <malloc>
   1fb22:	9001      	str	r0, [sp, #4]
    os_malloc_unlock();
   1fb24:	f7ff ffe6 	bl	1faf4 <os_malloc_unlock>

    return ptr;
}
   1fb28:	9801      	ldr	r0, [sp, #4]
   1fb2a:	b003      	add	sp, #12
   1fb2c:	f85d fb04 	ldr.w	pc, [sp], #4

0001fb30 <os_free>:

void
os_free(void *mem)
{
   1fb30:	b507      	push	{r0, r1, r2, lr}
   1fb32:	9001      	str	r0, [sp, #4]
    os_malloc_lock();
   1fb34:	f7ff ffcc 	bl	1fad0 <os_malloc_lock>
    free(mem);
   1fb38:	9801      	ldr	r0, [sp, #4]
   1fb3a:	f7ef fd19 	bl	f570 <free>
    os_malloc_unlock();
}
   1fb3e:	b003      	add	sp, #12
   1fb40:	f85d eb04 	ldr.w	lr, [sp], #4
    os_malloc_unlock();
   1fb44:	f7ff bfd6 	b.w	1faf4 <os_malloc_unlock>

0001fb48 <__aeabi_drsub>:
   1fb48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1fb4c:	e002      	b.n	1fb54 <__adddf3>
   1fb4e:	bf00      	nop

0001fb50 <__aeabi_dsub>:
   1fb50:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001fb54 <__adddf3>:
   1fb54:	b530      	push	{r4, r5, lr}
   1fb56:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1fb5a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1fb5e:	ea94 0f05 	teq	r4, r5
   1fb62:	bf08      	it	eq
   1fb64:	ea90 0f02 	teqeq	r0, r2
   1fb68:	bf1f      	itttt	ne
   1fb6a:	ea54 0c00 	orrsne.w	ip, r4, r0
   1fb6e:	ea55 0c02 	orrsne.w	ip, r5, r2
   1fb72:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1fb76:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1fb7a:	f000 80e2 	beq.w	1fd42 <__adddf3+0x1ee>
   1fb7e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1fb82:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1fb86:	bfb8      	it	lt
   1fb88:	426d      	neglt	r5, r5
   1fb8a:	dd0c      	ble.n	1fba6 <__adddf3+0x52>
   1fb8c:	442c      	add	r4, r5
   1fb8e:	ea80 0202 	eor.w	r2, r0, r2
   1fb92:	ea81 0303 	eor.w	r3, r1, r3
   1fb96:	ea82 0000 	eor.w	r0, r2, r0
   1fb9a:	ea83 0101 	eor.w	r1, r3, r1
   1fb9e:	ea80 0202 	eor.w	r2, r0, r2
   1fba2:	ea81 0303 	eor.w	r3, r1, r3
   1fba6:	2d36      	cmp	r5, #54	; 0x36
   1fba8:	bf88      	it	hi
   1fbaa:	bd30      	pophi	{r4, r5, pc}
   1fbac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1fbb0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1fbb4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1fbb8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1fbbc:	d002      	beq.n	1fbc4 <__adddf3+0x70>
   1fbbe:	4240      	negs	r0, r0
   1fbc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1fbc4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1fbc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1fbcc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1fbd0:	d002      	beq.n	1fbd8 <__adddf3+0x84>
   1fbd2:	4252      	negs	r2, r2
   1fbd4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1fbd8:	ea94 0f05 	teq	r4, r5
   1fbdc:	f000 80a7 	beq.w	1fd2e <__adddf3+0x1da>
   1fbe0:	f1a4 0401 	sub.w	r4, r4, #1
   1fbe4:	f1d5 0e20 	rsbs	lr, r5, #32
   1fbe8:	db0d      	blt.n	1fc06 <__adddf3+0xb2>
   1fbea:	fa02 fc0e 	lsl.w	ip, r2, lr
   1fbee:	fa22 f205 	lsr.w	r2, r2, r5
   1fbf2:	1880      	adds	r0, r0, r2
   1fbf4:	f141 0100 	adc.w	r1, r1, #0
   1fbf8:	fa03 f20e 	lsl.w	r2, r3, lr
   1fbfc:	1880      	adds	r0, r0, r2
   1fbfe:	fa43 f305 	asr.w	r3, r3, r5
   1fc02:	4159      	adcs	r1, r3
   1fc04:	e00e      	b.n	1fc24 <__adddf3+0xd0>
   1fc06:	f1a5 0520 	sub.w	r5, r5, #32
   1fc0a:	f10e 0e20 	add.w	lr, lr, #32
   1fc0e:	2a01      	cmp	r2, #1
   1fc10:	fa03 fc0e 	lsl.w	ip, r3, lr
   1fc14:	bf28      	it	cs
   1fc16:	f04c 0c02 	orrcs.w	ip, ip, #2
   1fc1a:	fa43 f305 	asr.w	r3, r3, r5
   1fc1e:	18c0      	adds	r0, r0, r3
   1fc20:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1fc24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1fc28:	d507      	bpl.n	1fc3a <__adddf3+0xe6>
   1fc2a:	f04f 0e00 	mov.w	lr, #0
   1fc2e:	f1dc 0c00 	rsbs	ip, ip, #0
   1fc32:	eb7e 0000 	sbcs.w	r0, lr, r0
   1fc36:	eb6e 0101 	sbc.w	r1, lr, r1
   1fc3a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1fc3e:	d31b      	bcc.n	1fc78 <__adddf3+0x124>
   1fc40:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1fc44:	d30c      	bcc.n	1fc60 <__adddf3+0x10c>
   1fc46:	0849      	lsrs	r1, r1, #1
   1fc48:	ea5f 0030 	movs.w	r0, r0, rrx
   1fc4c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1fc50:	f104 0401 	add.w	r4, r4, #1
   1fc54:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1fc58:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1fc5c:	f080 809a 	bcs.w	1fd94 <__adddf3+0x240>
   1fc60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1fc64:	bf08      	it	eq
   1fc66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1fc6a:	f150 0000 	adcs.w	r0, r0, #0
   1fc6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1fc72:	ea41 0105 	orr.w	r1, r1, r5
   1fc76:	bd30      	pop	{r4, r5, pc}
   1fc78:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1fc7c:	4140      	adcs	r0, r0
   1fc7e:	eb41 0101 	adc.w	r1, r1, r1
   1fc82:	3c01      	subs	r4, #1
   1fc84:	bf28      	it	cs
   1fc86:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1fc8a:	d2e9      	bcs.n	1fc60 <__adddf3+0x10c>
   1fc8c:	f091 0f00 	teq	r1, #0
   1fc90:	bf04      	itt	eq
   1fc92:	4601      	moveq	r1, r0
   1fc94:	2000      	moveq	r0, #0
   1fc96:	fab1 f381 	clz	r3, r1
   1fc9a:	bf08      	it	eq
   1fc9c:	3320      	addeq	r3, #32
   1fc9e:	f1a3 030b 	sub.w	r3, r3, #11
   1fca2:	f1b3 0220 	subs.w	r2, r3, #32
   1fca6:	da0c      	bge.n	1fcc2 <__adddf3+0x16e>
   1fca8:	320c      	adds	r2, #12
   1fcaa:	dd08      	ble.n	1fcbe <__adddf3+0x16a>
   1fcac:	f102 0c14 	add.w	ip, r2, #20
   1fcb0:	f1c2 020c 	rsb	r2, r2, #12
   1fcb4:	fa01 f00c 	lsl.w	r0, r1, ip
   1fcb8:	fa21 f102 	lsr.w	r1, r1, r2
   1fcbc:	e00c      	b.n	1fcd8 <__adddf3+0x184>
   1fcbe:	f102 0214 	add.w	r2, r2, #20
   1fcc2:	bfd8      	it	le
   1fcc4:	f1c2 0c20 	rsble	ip, r2, #32
   1fcc8:	fa01 f102 	lsl.w	r1, r1, r2
   1fccc:	fa20 fc0c 	lsr.w	ip, r0, ip
   1fcd0:	bfdc      	itt	le
   1fcd2:	ea41 010c 	orrle.w	r1, r1, ip
   1fcd6:	4090      	lslle	r0, r2
   1fcd8:	1ae4      	subs	r4, r4, r3
   1fcda:	bfa2      	ittt	ge
   1fcdc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1fce0:	4329      	orrge	r1, r5
   1fce2:	bd30      	popge	{r4, r5, pc}
   1fce4:	ea6f 0404 	mvn.w	r4, r4
   1fce8:	3c1f      	subs	r4, #31
   1fcea:	da1c      	bge.n	1fd26 <__adddf3+0x1d2>
   1fcec:	340c      	adds	r4, #12
   1fcee:	dc0e      	bgt.n	1fd0e <__adddf3+0x1ba>
   1fcf0:	f104 0414 	add.w	r4, r4, #20
   1fcf4:	f1c4 0220 	rsb	r2, r4, #32
   1fcf8:	fa20 f004 	lsr.w	r0, r0, r4
   1fcfc:	fa01 f302 	lsl.w	r3, r1, r2
   1fd00:	ea40 0003 	orr.w	r0, r0, r3
   1fd04:	fa21 f304 	lsr.w	r3, r1, r4
   1fd08:	ea45 0103 	orr.w	r1, r5, r3
   1fd0c:	bd30      	pop	{r4, r5, pc}
   1fd0e:	f1c4 040c 	rsb	r4, r4, #12
   1fd12:	f1c4 0220 	rsb	r2, r4, #32
   1fd16:	fa20 f002 	lsr.w	r0, r0, r2
   1fd1a:	fa01 f304 	lsl.w	r3, r1, r4
   1fd1e:	ea40 0003 	orr.w	r0, r0, r3
   1fd22:	4629      	mov	r1, r5
   1fd24:	bd30      	pop	{r4, r5, pc}
   1fd26:	fa21 f004 	lsr.w	r0, r1, r4
   1fd2a:	4629      	mov	r1, r5
   1fd2c:	bd30      	pop	{r4, r5, pc}
   1fd2e:	f094 0f00 	teq	r4, #0
   1fd32:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1fd36:	bf06      	itte	eq
   1fd38:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1fd3c:	3401      	addeq	r4, #1
   1fd3e:	3d01      	subne	r5, #1
   1fd40:	e74e      	b.n	1fbe0 <__adddf3+0x8c>
   1fd42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1fd46:	bf18      	it	ne
   1fd48:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1fd4c:	d029      	beq.n	1fda2 <__adddf3+0x24e>
   1fd4e:	ea94 0f05 	teq	r4, r5
   1fd52:	bf08      	it	eq
   1fd54:	ea90 0f02 	teqeq	r0, r2
   1fd58:	d005      	beq.n	1fd66 <__adddf3+0x212>
   1fd5a:	ea54 0c00 	orrs.w	ip, r4, r0
   1fd5e:	bf04      	itt	eq
   1fd60:	4619      	moveq	r1, r3
   1fd62:	4610      	moveq	r0, r2
   1fd64:	bd30      	pop	{r4, r5, pc}
   1fd66:	ea91 0f03 	teq	r1, r3
   1fd6a:	bf1e      	ittt	ne
   1fd6c:	2100      	movne	r1, #0
   1fd6e:	2000      	movne	r0, #0
   1fd70:	bd30      	popne	{r4, r5, pc}
   1fd72:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1fd76:	d105      	bne.n	1fd84 <__adddf3+0x230>
   1fd78:	0040      	lsls	r0, r0, #1
   1fd7a:	4149      	adcs	r1, r1
   1fd7c:	bf28      	it	cs
   1fd7e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1fd82:	bd30      	pop	{r4, r5, pc}
   1fd84:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1fd88:	bf3c      	itt	cc
   1fd8a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1fd8e:	bd30      	popcc	{r4, r5, pc}
   1fd90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1fd94:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1fd98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1fd9c:	f04f 0000 	mov.w	r0, #0
   1fda0:	bd30      	pop	{r4, r5, pc}
   1fda2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1fda6:	bf1a      	itte	ne
   1fda8:	4619      	movne	r1, r3
   1fdaa:	4610      	movne	r0, r2
   1fdac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1fdb0:	bf1c      	itt	ne
   1fdb2:	460b      	movne	r3, r1
   1fdb4:	4602      	movne	r2, r0
   1fdb6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1fdba:	bf06      	itte	eq
   1fdbc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1fdc0:	ea91 0f03 	teqeq	r1, r3
   1fdc4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1fdc8:	bd30      	pop	{r4, r5, pc}
   1fdca:	bf00      	nop

0001fdcc <__aeabi_ui2d>:
   1fdcc:	f090 0f00 	teq	r0, #0
   1fdd0:	bf04      	itt	eq
   1fdd2:	2100      	moveq	r1, #0
   1fdd4:	4770      	bxeq	lr
   1fdd6:	b530      	push	{r4, r5, lr}
   1fdd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1fddc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1fde0:	f04f 0500 	mov.w	r5, #0
   1fde4:	f04f 0100 	mov.w	r1, #0
   1fde8:	e750      	b.n	1fc8c <__adddf3+0x138>
   1fdea:	bf00      	nop

0001fdec <__aeabi_i2d>:
   1fdec:	f090 0f00 	teq	r0, #0
   1fdf0:	bf04      	itt	eq
   1fdf2:	2100      	moveq	r1, #0
   1fdf4:	4770      	bxeq	lr
   1fdf6:	b530      	push	{r4, r5, lr}
   1fdf8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1fdfc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1fe00:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1fe04:	bf48      	it	mi
   1fe06:	4240      	negmi	r0, r0
   1fe08:	f04f 0100 	mov.w	r1, #0
   1fe0c:	e73e      	b.n	1fc8c <__adddf3+0x138>
   1fe0e:	bf00      	nop

0001fe10 <__aeabi_f2d>:
   1fe10:	0042      	lsls	r2, r0, #1
   1fe12:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1fe16:	ea4f 0131 	mov.w	r1, r1, rrx
   1fe1a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1fe1e:	bf1f      	itttt	ne
   1fe20:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1fe24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1fe28:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1fe2c:	4770      	bxne	lr
   1fe2e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1fe32:	bf08      	it	eq
   1fe34:	4770      	bxeq	lr
   1fe36:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1fe3a:	bf04      	itt	eq
   1fe3c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1fe40:	4770      	bxeq	lr
   1fe42:	b530      	push	{r4, r5, lr}
   1fe44:	f44f 7460 	mov.w	r4, #896	; 0x380
   1fe48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1fe4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1fe50:	e71c      	b.n	1fc8c <__adddf3+0x138>
   1fe52:	bf00      	nop

0001fe54 <__aeabi_ul2d>:
   1fe54:	ea50 0201 	orrs.w	r2, r0, r1
   1fe58:	bf08      	it	eq
   1fe5a:	4770      	bxeq	lr
   1fe5c:	b530      	push	{r4, r5, lr}
   1fe5e:	f04f 0500 	mov.w	r5, #0
   1fe62:	e00a      	b.n	1fe7a <__aeabi_l2d+0x16>

0001fe64 <__aeabi_l2d>:
   1fe64:	ea50 0201 	orrs.w	r2, r0, r1
   1fe68:	bf08      	it	eq
   1fe6a:	4770      	bxeq	lr
   1fe6c:	b530      	push	{r4, r5, lr}
   1fe6e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1fe72:	d502      	bpl.n	1fe7a <__aeabi_l2d+0x16>
   1fe74:	4240      	negs	r0, r0
   1fe76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1fe7a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1fe7e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1fe82:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1fe86:	f43f aed8 	beq.w	1fc3a <__adddf3+0xe6>
   1fe8a:	f04f 0203 	mov.w	r2, #3
   1fe8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1fe92:	bf18      	it	ne
   1fe94:	3203      	addne	r2, #3
   1fe96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1fe9a:	bf18      	it	ne
   1fe9c:	3203      	addne	r2, #3
   1fe9e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1fea2:	f1c2 0320 	rsb	r3, r2, #32
   1fea6:	fa00 fc03 	lsl.w	ip, r0, r3
   1feaa:	fa20 f002 	lsr.w	r0, r0, r2
   1feae:	fa01 fe03 	lsl.w	lr, r1, r3
   1feb2:	ea40 000e 	orr.w	r0, r0, lr
   1feb6:	fa21 f102 	lsr.w	r1, r1, r2
   1feba:	4414      	add	r4, r2
   1febc:	e6bd      	b.n	1fc3a <__adddf3+0xe6>
   1febe:	bf00      	nop

0001fec0 <__aeabi_dmul>:
   1fec0:	b570      	push	{r4, r5, r6, lr}
   1fec2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1fec6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1feca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1fece:	bf1d      	ittte	ne
   1fed0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1fed4:	ea94 0f0c 	teqne	r4, ip
   1fed8:	ea95 0f0c 	teqne	r5, ip
   1fedc:	f000 f8de 	bleq	2009c <__aeabi_dmul+0x1dc>
   1fee0:	442c      	add	r4, r5
   1fee2:	ea81 0603 	eor.w	r6, r1, r3
   1fee6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1feea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1feee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1fef2:	bf18      	it	ne
   1fef4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1fef8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1fefc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1ff00:	d038      	beq.n	1ff74 <__aeabi_dmul+0xb4>
   1ff02:	fba0 ce02 	umull	ip, lr, r0, r2
   1ff06:	f04f 0500 	mov.w	r5, #0
   1ff0a:	fbe1 e502 	umlal	lr, r5, r1, r2
   1ff0e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1ff12:	fbe0 e503 	umlal	lr, r5, r0, r3
   1ff16:	f04f 0600 	mov.w	r6, #0
   1ff1a:	fbe1 5603 	umlal	r5, r6, r1, r3
   1ff1e:	f09c 0f00 	teq	ip, #0
   1ff22:	bf18      	it	ne
   1ff24:	f04e 0e01 	orrne.w	lr, lr, #1
   1ff28:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1ff2c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1ff30:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1ff34:	d204      	bcs.n	1ff40 <__aeabi_dmul+0x80>
   1ff36:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1ff3a:	416d      	adcs	r5, r5
   1ff3c:	eb46 0606 	adc.w	r6, r6, r6
   1ff40:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1ff44:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1ff48:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1ff4c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1ff50:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1ff54:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1ff58:	bf88      	it	hi
   1ff5a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1ff5e:	d81e      	bhi.n	1ff9e <__aeabi_dmul+0xde>
   1ff60:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1ff64:	bf08      	it	eq
   1ff66:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1ff6a:	f150 0000 	adcs.w	r0, r0, #0
   1ff6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1ff72:	bd70      	pop	{r4, r5, r6, pc}
   1ff74:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1ff78:	ea46 0101 	orr.w	r1, r6, r1
   1ff7c:	ea40 0002 	orr.w	r0, r0, r2
   1ff80:	ea81 0103 	eor.w	r1, r1, r3
   1ff84:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1ff88:	bfc2      	ittt	gt
   1ff8a:	ebd4 050c 	rsbsgt	r5, r4, ip
   1ff8e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1ff92:	bd70      	popgt	{r4, r5, r6, pc}
   1ff94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1ff98:	f04f 0e00 	mov.w	lr, #0
   1ff9c:	3c01      	subs	r4, #1
   1ff9e:	f300 80ab 	bgt.w	200f8 <__aeabi_dmul+0x238>
   1ffa2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1ffa6:	bfde      	ittt	le
   1ffa8:	2000      	movle	r0, #0
   1ffaa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1ffae:	bd70      	pople	{r4, r5, r6, pc}
   1ffb0:	f1c4 0400 	rsb	r4, r4, #0
   1ffb4:	3c20      	subs	r4, #32
   1ffb6:	da35      	bge.n	20024 <__aeabi_dmul+0x164>
   1ffb8:	340c      	adds	r4, #12
   1ffba:	dc1b      	bgt.n	1fff4 <__aeabi_dmul+0x134>
   1ffbc:	f104 0414 	add.w	r4, r4, #20
   1ffc0:	f1c4 0520 	rsb	r5, r4, #32
   1ffc4:	fa00 f305 	lsl.w	r3, r0, r5
   1ffc8:	fa20 f004 	lsr.w	r0, r0, r4
   1ffcc:	fa01 f205 	lsl.w	r2, r1, r5
   1ffd0:	ea40 0002 	orr.w	r0, r0, r2
   1ffd4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1ffd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1ffdc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1ffe0:	fa21 f604 	lsr.w	r6, r1, r4
   1ffe4:	eb42 0106 	adc.w	r1, r2, r6
   1ffe8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1ffec:	bf08      	it	eq
   1ffee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1fff2:	bd70      	pop	{r4, r5, r6, pc}
   1fff4:	f1c4 040c 	rsb	r4, r4, #12
   1fff8:	f1c4 0520 	rsb	r5, r4, #32
   1fffc:	fa00 f304 	lsl.w	r3, r0, r4
   20000:	fa20 f005 	lsr.w	r0, r0, r5
   20004:	fa01 f204 	lsl.w	r2, r1, r4
   20008:	ea40 0002 	orr.w	r0, r0, r2
   2000c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   20010:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   20014:	f141 0100 	adc.w	r1, r1, #0
   20018:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   2001c:	bf08      	it	eq
   2001e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   20022:	bd70      	pop	{r4, r5, r6, pc}
   20024:	f1c4 0520 	rsb	r5, r4, #32
   20028:	fa00 f205 	lsl.w	r2, r0, r5
   2002c:	ea4e 0e02 	orr.w	lr, lr, r2
   20030:	fa20 f304 	lsr.w	r3, r0, r4
   20034:	fa01 f205 	lsl.w	r2, r1, r5
   20038:	ea43 0302 	orr.w	r3, r3, r2
   2003c:	fa21 f004 	lsr.w	r0, r1, r4
   20040:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   20044:	fa21 f204 	lsr.w	r2, r1, r4
   20048:	ea20 0002 	bic.w	r0, r0, r2
   2004c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   20050:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   20054:	bf08      	it	eq
   20056:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   2005a:	bd70      	pop	{r4, r5, r6, pc}
   2005c:	f094 0f00 	teq	r4, #0
   20060:	d10f      	bne.n	20082 <__aeabi_dmul+0x1c2>
   20062:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   20066:	0040      	lsls	r0, r0, #1
   20068:	eb41 0101 	adc.w	r1, r1, r1
   2006c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   20070:	bf08      	it	eq
   20072:	3c01      	subeq	r4, #1
   20074:	d0f7      	beq.n	20066 <__aeabi_dmul+0x1a6>
   20076:	ea41 0106 	orr.w	r1, r1, r6
   2007a:	f095 0f00 	teq	r5, #0
   2007e:	bf18      	it	ne
   20080:	4770      	bxne	lr
   20082:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   20086:	0052      	lsls	r2, r2, #1
   20088:	eb43 0303 	adc.w	r3, r3, r3
   2008c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   20090:	bf08      	it	eq
   20092:	3d01      	subeq	r5, #1
   20094:	d0f7      	beq.n	20086 <__aeabi_dmul+0x1c6>
   20096:	ea43 0306 	orr.w	r3, r3, r6
   2009a:	4770      	bx	lr
   2009c:	ea94 0f0c 	teq	r4, ip
   200a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   200a4:	bf18      	it	ne
   200a6:	ea95 0f0c 	teqne	r5, ip
   200aa:	d00c      	beq.n	200c6 <__aeabi_dmul+0x206>
   200ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   200b0:	bf18      	it	ne
   200b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   200b6:	d1d1      	bne.n	2005c <__aeabi_dmul+0x19c>
   200b8:	ea81 0103 	eor.w	r1, r1, r3
   200bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   200c0:	f04f 0000 	mov.w	r0, #0
   200c4:	bd70      	pop	{r4, r5, r6, pc}
   200c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   200ca:	bf06      	itte	eq
   200cc:	4610      	moveq	r0, r2
   200ce:	4619      	moveq	r1, r3
   200d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   200d4:	d019      	beq.n	2010a <__aeabi_dmul+0x24a>
   200d6:	ea94 0f0c 	teq	r4, ip
   200da:	d102      	bne.n	200e2 <__aeabi_dmul+0x222>
   200dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   200e0:	d113      	bne.n	2010a <__aeabi_dmul+0x24a>
   200e2:	ea95 0f0c 	teq	r5, ip
   200e6:	d105      	bne.n	200f4 <__aeabi_dmul+0x234>
   200e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   200ec:	bf1c      	itt	ne
   200ee:	4610      	movne	r0, r2
   200f0:	4619      	movne	r1, r3
   200f2:	d10a      	bne.n	2010a <__aeabi_dmul+0x24a>
   200f4:	ea81 0103 	eor.w	r1, r1, r3
   200f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   200fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   20100:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   20104:	f04f 0000 	mov.w	r0, #0
   20108:	bd70      	pop	{r4, r5, r6, pc}
   2010a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   2010e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   20112:	bd70      	pop	{r4, r5, r6, pc}

00020114 <__aeabi_ddiv>:
   20114:	b570      	push	{r4, r5, r6, lr}
   20116:	f04f 0cff 	mov.w	ip, #255	; 0xff
   2011a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   2011e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   20122:	bf1d      	ittte	ne
   20124:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   20128:	ea94 0f0c 	teqne	r4, ip
   2012c:	ea95 0f0c 	teqne	r5, ip
   20130:	f000 f8a7 	bleq	20282 <__aeabi_ddiv+0x16e>
   20134:	eba4 0405 	sub.w	r4, r4, r5
   20138:	ea81 0e03 	eor.w	lr, r1, r3
   2013c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   20140:	ea4f 3101 	mov.w	r1, r1, lsl #12
   20144:	f000 8088 	beq.w	20258 <__aeabi_ddiv+0x144>
   20148:	ea4f 3303 	mov.w	r3, r3, lsl #12
   2014c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   20150:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   20154:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   20158:	ea4f 2202 	mov.w	r2, r2, lsl #8
   2015c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   20160:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   20164:	ea4f 2600 	mov.w	r6, r0, lsl #8
   20168:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   2016c:	429d      	cmp	r5, r3
   2016e:	bf08      	it	eq
   20170:	4296      	cmpeq	r6, r2
   20172:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   20176:	f504 7440 	add.w	r4, r4, #768	; 0x300
   2017a:	d202      	bcs.n	20182 <__aeabi_ddiv+0x6e>
   2017c:	085b      	lsrs	r3, r3, #1
   2017e:	ea4f 0232 	mov.w	r2, r2, rrx
   20182:	1ab6      	subs	r6, r6, r2
   20184:	eb65 0503 	sbc.w	r5, r5, r3
   20188:	085b      	lsrs	r3, r3, #1
   2018a:	ea4f 0232 	mov.w	r2, r2, rrx
   2018e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   20192:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   20196:	ebb6 0e02 	subs.w	lr, r6, r2
   2019a:	eb75 0e03 	sbcs.w	lr, r5, r3
   2019e:	bf22      	ittt	cs
   201a0:	1ab6      	subcs	r6, r6, r2
   201a2:	4675      	movcs	r5, lr
   201a4:	ea40 000c 	orrcs.w	r0, r0, ip
   201a8:	085b      	lsrs	r3, r3, #1
   201aa:	ea4f 0232 	mov.w	r2, r2, rrx
   201ae:	ebb6 0e02 	subs.w	lr, r6, r2
   201b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   201b6:	bf22      	ittt	cs
   201b8:	1ab6      	subcs	r6, r6, r2
   201ba:	4675      	movcs	r5, lr
   201bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   201c0:	085b      	lsrs	r3, r3, #1
   201c2:	ea4f 0232 	mov.w	r2, r2, rrx
   201c6:	ebb6 0e02 	subs.w	lr, r6, r2
   201ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   201ce:	bf22      	ittt	cs
   201d0:	1ab6      	subcs	r6, r6, r2
   201d2:	4675      	movcs	r5, lr
   201d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   201d8:	085b      	lsrs	r3, r3, #1
   201da:	ea4f 0232 	mov.w	r2, r2, rrx
   201de:	ebb6 0e02 	subs.w	lr, r6, r2
   201e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   201e6:	bf22      	ittt	cs
   201e8:	1ab6      	subcs	r6, r6, r2
   201ea:	4675      	movcs	r5, lr
   201ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   201f0:	ea55 0e06 	orrs.w	lr, r5, r6
   201f4:	d018      	beq.n	20228 <__aeabi_ddiv+0x114>
   201f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   201fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   201fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   20202:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   20206:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   2020a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   2020e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   20212:	d1c0      	bne.n	20196 <__aeabi_ddiv+0x82>
   20214:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   20218:	d10b      	bne.n	20232 <__aeabi_ddiv+0x11e>
   2021a:	ea41 0100 	orr.w	r1, r1, r0
   2021e:	f04f 0000 	mov.w	r0, #0
   20222:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   20226:	e7b6      	b.n	20196 <__aeabi_ddiv+0x82>
   20228:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   2022c:	bf04      	itt	eq
   2022e:	4301      	orreq	r1, r0
   20230:	2000      	moveq	r0, #0
   20232:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   20236:	bf88      	it	hi
   20238:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   2023c:	f63f aeaf 	bhi.w	1ff9e <__aeabi_dmul+0xde>
   20240:	ebb5 0c03 	subs.w	ip, r5, r3
   20244:	bf04      	itt	eq
   20246:	ebb6 0c02 	subseq.w	ip, r6, r2
   2024a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   2024e:	f150 0000 	adcs.w	r0, r0, #0
   20252:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   20256:	bd70      	pop	{r4, r5, r6, pc}
   20258:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   2025c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   20260:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   20264:	bfc2      	ittt	gt
   20266:	ebd4 050c 	rsbsgt	r5, r4, ip
   2026a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   2026e:	bd70      	popgt	{r4, r5, r6, pc}
   20270:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   20274:	f04f 0e00 	mov.w	lr, #0
   20278:	3c01      	subs	r4, #1
   2027a:	e690      	b.n	1ff9e <__aeabi_dmul+0xde>
   2027c:	ea45 0e06 	orr.w	lr, r5, r6
   20280:	e68d      	b.n	1ff9e <__aeabi_dmul+0xde>
   20282:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   20286:	ea94 0f0c 	teq	r4, ip
   2028a:	bf08      	it	eq
   2028c:	ea95 0f0c 	teqeq	r5, ip
   20290:	f43f af3b 	beq.w	2010a <__aeabi_dmul+0x24a>
   20294:	ea94 0f0c 	teq	r4, ip
   20298:	d10a      	bne.n	202b0 <__aeabi_ddiv+0x19c>
   2029a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   2029e:	f47f af34 	bne.w	2010a <__aeabi_dmul+0x24a>
   202a2:	ea95 0f0c 	teq	r5, ip
   202a6:	f47f af25 	bne.w	200f4 <__aeabi_dmul+0x234>
   202aa:	4610      	mov	r0, r2
   202ac:	4619      	mov	r1, r3
   202ae:	e72c      	b.n	2010a <__aeabi_dmul+0x24a>
   202b0:	ea95 0f0c 	teq	r5, ip
   202b4:	d106      	bne.n	202c4 <__aeabi_ddiv+0x1b0>
   202b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   202ba:	f43f aefd 	beq.w	200b8 <__aeabi_dmul+0x1f8>
   202be:	4610      	mov	r0, r2
   202c0:	4619      	mov	r1, r3
   202c2:	e722      	b.n	2010a <__aeabi_dmul+0x24a>
   202c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   202c8:	bf18      	it	ne
   202ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   202ce:	f47f aec5 	bne.w	2005c <__aeabi_dmul+0x19c>
   202d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   202d6:	f47f af0d 	bne.w	200f4 <__aeabi_dmul+0x234>
   202da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   202de:	f47f aeeb 	bne.w	200b8 <__aeabi_dmul+0x1f8>
   202e2:	e712      	b.n	2010a <__aeabi_dmul+0x24a>

000202e4 <__gedf2>:
   202e4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   202e8:	e006      	b.n	202f8 <__cmpdf2+0x4>
   202ea:	bf00      	nop

000202ec <__ledf2>:
   202ec:	f04f 0c01 	mov.w	ip, #1
   202f0:	e002      	b.n	202f8 <__cmpdf2+0x4>
   202f2:	bf00      	nop

000202f4 <__cmpdf2>:
   202f4:	f04f 0c01 	mov.w	ip, #1
   202f8:	f84d cd04 	str.w	ip, [sp, #-4]!
   202fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   20300:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   20304:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   20308:	bf18      	it	ne
   2030a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   2030e:	d01b      	beq.n	20348 <__cmpdf2+0x54>
   20310:	b001      	add	sp, #4
   20312:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   20316:	bf0c      	ite	eq
   20318:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   2031c:	ea91 0f03 	teqne	r1, r3
   20320:	bf02      	ittt	eq
   20322:	ea90 0f02 	teqeq	r0, r2
   20326:	2000      	moveq	r0, #0
   20328:	4770      	bxeq	lr
   2032a:	f110 0f00 	cmn.w	r0, #0
   2032e:	ea91 0f03 	teq	r1, r3
   20332:	bf58      	it	pl
   20334:	4299      	cmppl	r1, r3
   20336:	bf08      	it	eq
   20338:	4290      	cmpeq	r0, r2
   2033a:	bf2c      	ite	cs
   2033c:	17d8      	asrcs	r0, r3, #31
   2033e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   20342:	f040 0001 	orr.w	r0, r0, #1
   20346:	4770      	bx	lr
   20348:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   2034c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   20350:	d102      	bne.n	20358 <__cmpdf2+0x64>
   20352:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   20356:	d107      	bne.n	20368 <__cmpdf2+0x74>
   20358:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   2035c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   20360:	d1d6      	bne.n	20310 <__cmpdf2+0x1c>
   20362:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   20366:	d0d3      	beq.n	20310 <__cmpdf2+0x1c>
   20368:	f85d 0b04 	ldr.w	r0, [sp], #4
   2036c:	4770      	bx	lr
   2036e:	bf00      	nop

00020370 <__aeabi_cdrcmple>:
   20370:	4684      	mov	ip, r0
   20372:	4610      	mov	r0, r2
   20374:	4662      	mov	r2, ip
   20376:	468c      	mov	ip, r1
   20378:	4619      	mov	r1, r3
   2037a:	4663      	mov	r3, ip
   2037c:	e000      	b.n	20380 <__aeabi_cdcmpeq>
   2037e:	bf00      	nop

00020380 <__aeabi_cdcmpeq>:
   20380:	b501      	push	{r0, lr}
   20382:	f7ff ffb7 	bl	202f4 <__cmpdf2>
   20386:	2800      	cmp	r0, #0
   20388:	bf48      	it	mi
   2038a:	f110 0f00 	cmnmi.w	r0, #0
   2038e:	bd01      	pop	{r0, pc}

00020390 <__aeabi_dcmpeq>:
   20390:	f84d ed08 	str.w	lr, [sp, #-8]!
   20394:	f7ff fff4 	bl	20380 <__aeabi_cdcmpeq>
   20398:	bf0c      	ite	eq
   2039a:	2001      	moveq	r0, #1
   2039c:	2000      	movne	r0, #0
   2039e:	f85d fb08 	ldr.w	pc, [sp], #8
   203a2:	bf00      	nop

000203a4 <__aeabi_dcmplt>:
   203a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   203a8:	f7ff ffea 	bl	20380 <__aeabi_cdcmpeq>
   203ac:	bf34      	ite	cc
   203ae:	2001      	movcc	r0, #1
   203b0:	2000      	movcs	r0, #0
   203b2:	f85d fb08 	ldr.w	pc, [sp], #8
   203b6:	bf00      	nop

000203b8 <__aeabi_dcmple>:
   203b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   203bc:	f7ff ffe0 	bl	20380 <__aeabi_cdcmpeq>
   203c0:	bf94      	ite	ls
   203c2:	2001      	movls	r0, #1
   203c4:	2000      	movhi	r0, #0
   203c6:	f85d fb08 	ldr.w	pc, [sp], #8
   203ca:	bf00      	nop

000203cc <__aeabi_dcmpge>:
   203cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   203d0:	f7ff ffce 	bl	20370 <__aeabi_cdrcmple>
   203d4:	bf94      	ite	ls
   203d6:	2001      	movls	r0, #1
   203d8:	2000      	movhi	r0, #0
   203da:	f85d fb08 	ldr.w	pc, [sp], #8
   203de:	bf00      	nop

000203e0 <__aeabi_dcmpgt>:
   203e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   203e4:	f7ff ffc4 	bl	20370 <__aeabi_cdrcmple>
   203e8:	bf34      	ite	cc
   203ea:	2001      	movcc	r0, #1
   203ec:	2000      	movcs	r0, #0
   203ee:	f85d fb08 	ldr.w	pc, [sp], #8
   203f2:	bf00      	nop

000203f4 <__aeabi_dcmpun>:
   203f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   203f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   203fc:	d102      	bne.n	20404 <__aeabi_dcmpun+0x10>
   203fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   20402:	d10a      	bne.n	2041a <__aeabi_dcmpun+0x26>
   20404:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   20408:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   2040c:	d102      	bne.n	20414 <__aeabi_dcmpun+0x20>
   2040e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   20412:	d102      	bne.n	2041a <__aeabi_dcmpun+0x26>
   20414:	f04f 0000 	mov.w	r0, #0
   20418:	4770      	bx	lr
   2041a:	f04f 0001 	mov.w	r0, #1
   2041e:	4770      	bx	lr

00020420 <__aeabi_d2iz>:
   20420:	ea4f 0241 	mov.w	r2, r1, lsl #1
   20424:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   20428:	d215      	bcs.n	20456 <__aeabi_d2iz+0x36>
   2042a:	d511      	bpl.n	20450 <__aeabi_d2iz+0x30>
   2042c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   20430:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   20434:	d912      	bls.n	2045c <__aeabi_d2iz+0x3c>
   20436:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   2043a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2043e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   20442:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   20446:	fa23 f002 	lsr.w	r0, r3, r2
   2044a:	bf18      	it	ne
   2044c:	4240      	negne	r0, r0
   2044e:	4770      	bx	lr
   20450:	f04f 0000 	mov.w	r0, #0
   20454:	4770      	bx	lr
   20456:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   2045a:	d105      	bne.n	20468 <__aeabi_d2iz+0x48>
   2045c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   20460:	bf08      	it	eq
   20462:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   20466:	4770      	bx	lr
   20468:	f04f 0000 	mov.w	r0, #0
   2046c:	4770      	bx	lr
   2046e:	bf00      	nop

00020470 <__aeabi_d2uiz>:
   20470:	004a      	lsls	r2, r1, #1
   20472:	d211      	bcs.n	20498 <__aeabi_d2uiz+0x28>
   20474:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   20478:	d211      	bcs.n	2049e <__aeabi_d2uiz+0x2e>
   2047a:	d50d      	bpl.n	20498 <__aeabi_d2uiz+0x28>
   2047c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   20480:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   20484:	d40e      	bmi.n	204a4 <__aeabi_d2uiz+0x34>
   20486:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   2048a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2048e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   20492:	fa23 f002 	lsr.w	r0, r3, r2
   20496:	4770      	bx	lr
   20498:	f04f 0000 	mov.w	r0, #0
   2049c:	4770      	bx	lr
   2049e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   204a2:	d102      	bne.n	204aa <__aeabi_d2uiz+0x3a>
   204a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   204a8:	4770      	bx	lr
   204aa:	f04f 0000 	mov.w	r0, #0
   204ae:	4770      	bx	lr

000204b0 <__aeabi_d2f>:
   204b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   204b4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   204b8:	bf24      	itt	cs
   204ba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   204be:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   204c2:	d90d      	bls.n	204e0 <__aeabi_d2f+0x30>
   204c4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   204c8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   204cc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   204d0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   204d4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   204d8:	bf08      	it	eq
   204da:	f020 0001 	biceq.w	r0, r0, #1
   204de:	4770      	bx	lr
   204e0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   204e4:	d121      	bne.n	2052a <__aeabi_d2f+0x7a>
   204e6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   204ea:	bfbc      	itt	lt
   204ec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   204f0:	4770      	bxlt	lr
   204f2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   204f6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   204fa:	f1c2 0218 	rsb	r2, r2, #24
   204fe:	f1c2 0c20 	rsb	ip, r2, #32
   20502:	fa10 f30c 	lsls.w	r3, r0, ip
   20506:	fa20 f002 	lsr.w	r0, r0, r2
   2050a:	bf18      	it	ne
   2050c:	f040 0001 	orrne.w	r0, r0, #1
   20510:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   20514:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   20518:	fa03 fc0c 	lsl.w	ip, r3, ip
   2051c:	ea40 000c 	orr.w	r0, r0, ip
   20520:	fa23 f302 	lsr.w	r3, r3, r2
   20524:	ea4f 0343 	mov.w	r3, r3, lsl #1
   20528:	e7cc      	b.n	204c4 <__aeabi_d2f+0x14>
   2052a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   2052e:	d107      	bne.n	20540 <__aeabi_d2f+0x90>
   20530:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   20534:	bf1e      	ittt	ne
   20536:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   2053a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   2053e:	4770      	bxne	lr
   20540:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   20544:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   20548:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   2054c:	4770      	bx	lr
   2054e:	bf00      	nop

00020550 <__aeabi_frsub>:
   20550:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   20554:	e002      	b.n	2055c <__addsf3>
   20556:	bf00      	nop

00020558 <__aeabi_fsub>:
   20558:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0002055c <__addsf3>:
   2055c:	0042      	lsls	r2, r0, #1
   2055e:	bf1f      	itttt	ne
   20560:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   20564:	ea92 0f03 	teqne	r2, r3
   20568:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   2056c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   20570:	d06a      	beq.n	20648 <__addsf3+0xec>
   20572:	ea4f 6212 	mov.w	r2, r2, lsr #24
   20576:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   2057a:	bfc1      	itttt	gt
   2057c:	18d2      	addgt	r2, r2, r3
   2057e:	4041      	eorgt	r1, r0
   20580:	4048      	eorgt	r0, r1
   20582:	4041      	eorgt	r1, r0
   20584:	bfb8      	it	lt
   20586:	425b      	neglt	r3, r3
   20588:	2b19      	cmp	r3, #25
   2058a:	bf88      	it	hi
   2058c:	4770      	bxhi	lr
   2058e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   20592:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   20596:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2059a:	bf18      	it	ne
   2059c:	4240      	negne	r0, r0
   2059e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   205a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   205a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   205aa:	bf18      	it	ne
   205ac:	4249      	negne	r1, r1
   205ae:	ea92 0f03 	teq	r2, r3
   205b2:	d03f      	beq.n	20634 <__addsf3+0xd8>
   205b4:	f1a2 0201 	sub.w	r2, r2, #1
   205b8:	fa41 fc03 	asr.w	ip, r1, r3
   205bc:	eb10 000c 	adds.w	r0, r0, ip
   205c0:	f1c3 0320 	rsb	r3, r3, #32
   205c4:	fa01 f103 	lsl.w	r1, r1, r3
   205c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   205cc:	d502      	bpl.n	205d4 <__addsf3+0x78>
   205ce:	4249      	negs	r1, r1
   205d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   205d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   205d8:	d313      	bcc.n	20602 <__addsf3+0xa6>
   205da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   205de:	d306      	bcc.n	205ee <__addsf3+0x92>
   205e0:	0840      	lsrs	r0, r0, #1
   205e2:	ea4f 0131 	mov.w	r1, r1, rrx
   205e6:	f102 0201 	add.w	r2, r2, #1
   205ea:	2afe      	cmp	r2, #254	; 0xfe
   205ec:	d251      	bcs.n	20692 <__addsf3+0x136>
   205ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   205f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   205f6:	bf08      	it	eq
   205f8:	f020 0001 	biceq.w	r0, r0, #1
   205fc:	ea40 0003 	orr.w	r0, r0, r3
   20600:	4770      	bx	lr
   20602:	0049      	lsls	r1, r1, #1
   20604:	eb40 0000 	adc.w	r0, r0, r0
   20608:	3a01      	subs	r2, #1
   2060a:	bf28      	it	cs
   2060c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   20610:	d2ed      	bcs.n	205ee <__addsf3+0x92>
   20612:	fab0 fc80 	clz	ip, r0
   20616:	f1ac 0c08 	sub.w	ip, ip, #8
   2061a:	ebb2 020c 	subs.w	r2, r2, ip
   2061e:	fa00 f00c 	lsl.w	r0, r0, ip
   20622:	bfaa      	itet	ge
   20624:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   20628:	4252      	neglt	r2, r2
   2062a:	4318      	orrge	r0, r3
   2062c:	bfbc      	itt	lt
   2062e:	40d0      	lsrlt	r0, r2
   20630:	4318      	orrlt	r0, r3
   20632:	4770      	bx	lr
   20634:	f092 0f00 	teq	r2, #0
   20638:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   2063c:	bf06      	itte	eq
   2063e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   20642:	3201      	addeq	r2, #1
   20644:	3b01      	subne	r3, #1
   20646:	e7b5      	b.n	205b4 <__addsf3+0x58>
   20648:	ea4f 0341 	mov.w	r3, r1, lsl #1
   2064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   20650:	bf18      	it	ne
   20652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   20656:	d021      	beq.n	2069c <__addsf3+0x140>
   20658:	ea92 0f03 	teq	r2, r3
   2065c:	d004      	beq.n	20668 <__addsf3+0x10c>
   2065e:	f092 0f00 	teq	r2, #0
   20662:	bf08      	it	eq
   20664:	4608      	moveq	r0, r1
   20666:	4770      	bx	lr
   20668:	ea90 0f01 	teq	r0, r1
   2066c:	bf1c      	itt	ne
   2066e:	2000      	movne	r0, #0
   20670:	4770      	bxne	lr
   20672:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   20676:	d104      	bne.n	20682 <__addsf3+0x126>
   20678:	0040      	lsls	r0, r0, #1
   2067a:	bf28      	it	cs
   2067c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   20680:	4770      	bx	lr
   20682:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   20686:	bf3c      	itt	cc
   20688:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   2068c:	4770      	bxcc	lr
   2068e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   20692:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   20696:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   2069a:	4770      	bx	lr
   2069c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   206a0:	bf16      	itet	ne
   206a2:	4608      	movne	r0, r1
   206a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   206a8:	4601      	movne	r1, r0
   206aa:	0242      	lsls	r2, r0, #9
   206ac:	bf06      	itte	eq
   206ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   206b2:	ea90 0f01 	teqeq	r0, r1
   206b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   206ba:	4770      	bx	lr

000206bc <__aeabi_ui2f>:
   206bc:	f04f 0300 	mov.w	r3, #0
   206c0:	e004      	b.n	206cc <__aeabi_i2f+0x8>
   206c2:	bf00      	nop

000206c4 <__aeabi_i2f>:
   206c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   206c8:	bf48      	it	mi
   206ca:	4240      	negmi	r0, r0
   206cc:	ea5f 0c00 	movs.w	ip, r0
   206d0:	bf08      	it	eq
   206d2:	4770      	bxeq	lr
   206d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   206d8:	4601      	mov	r1, r0
   206da:	f04f 0000 	mov.w	r0, #0
   206de:	e01c      	b.n	2071a <__aeabi_l2f+0x2a>

000206e0 <__aeabi_ul2f>:
   206e0:	ea50 0201 	orrs.w	r2, r0, r1
   206e4:	bf08      	it	eq
   206e6:	4770      	bxeq	lr
   206e8:	f04f 0300 	mov.w	r3, #0
   206ec:	e00a      	b.n	20704 <__aeabi_l2f+0x14>
   206ee:	bf00      	nop

000206f0 <__aeabi_l2f>:
   206f0:	ea50 0201 	orrs.w	r2, r0, r1
   206f4:	bf08      	it	eq
   206f6:	4770      	bxeq	lr
   206f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   206fc:	d502      	bpl.n	20704 <__aeabi_l2f+0x14>
   206fe:	4240      	negs	r0, r0
   20700:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   20704:	ea5f 0c01 	movs.w	ip, r1
   20708:	bf02      	ittt	eq
   2070a:	4684      	moveq	ip, r0
   2070c:	4601      	moveq	r1, r0
   2070e:	2000      	moveq	r0, #0
   20710:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   20714:	bf08      	it	eq
   20716:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   2071a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   2071e:	fabc f28c 	clz	r2, ip
   20722:	3a08      	subs	r2, #8
   20724:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   20728:	db10      	blt.n	2074c <__aeabi_l2f+0x5c>
   2072a:	fa01 fc02 	lsl.w	ip, r1, r2
   2072e:	4463      	add	r3, ip
   20730:	fa00 fc02 	lsl.w	ip, r0, r2
   20734:	f1c2 0220 	rsb	r2, r2, #32
   20738:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   2073c:	fa20 f202 	lsr.w	r2, r0, r2
   20740:	eb43 0002 	adc.w	r0, r3, r2
   20744:	bf08      	it	eq
   20746:	f020 0001 	biceq.w	r0, r0, #1
   2074a:	4770      	bx	lr
   2074c:	f102 0220 	add.w	r2, r2, #32
   20750:	fa01 fc02 	lsl.w	ip, r1, r2
   20754:	f1c2 0220 	rsb	r2, r2, #32
   20758:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   2075c:	fa21 f202 	lsr.w	r2, r1, r2
   20760:	eb43 0002 	adc.w	r0, r3, r2
   20764:	bf08      	it	eq
   20766:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   2076a:	4770      	bx	lr

0002076c <__aeabi_ldivmod>:
   2076c:	b97b      	cbnz	r3, 2078e <__aeabi_ldivmod+0x22>
   2076e:	b972      	cbnz	r2, 2078e <__aeabi_ldivmod+0x22>
   20770:	2900      	cmp	r1, #0
   20772:	bfbe      	ittt	lt
   20774:	2000      	movlt	r0, #0
   20776:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   2077a:	e006      	blt.n	2078a <__aeabi_ldivmod+0x1e>
   2077c:	bf08      	it	eq
   2077e:	2800      	cmpeq	r0, #0
   20780:	bf1c      	itt	ne
   20782:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   20786:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   2078a:	f000 ba15 	b.w	20bb8 <__aeabi_idiv0>
   2078e:	f1ad 0c08 	sub.w	ip, sp, #8
   20792:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   20796:	2900      	cmp	r1, #0
   20798:	db09      	blt.n	207ae <__aeabi_ldivmod+0x42>
   2079a:	2b00      	cmp	r3, #0
   2079c:	db1a      	blt.n	207d4 <__aeabi_ldivmod+0x68>
   2079e:	f000 f8a3 	bl	208e8 <__udivmoddi4>
   207a2:	f8dd e004 	ldr.w	lr, [sp, #4]
   207a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   207aa:	b004      	add	sp, #16
   207ac:	4770      	bx	lr
   207ae:	4240      	negs	r0, r0
   207b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   207b4:	2b00      	cmp	r3, #0
   207b6:	db1b      	blt.n	207f0 <__aeabi_ldivmod+0x84>
   207b8:	f000 f896 	bl	208e8 <__udivmoddi4>
   207bc:	f8dd e004 	ldr.w	lr, [sp, #4]
   207c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   207c4:	b004      	add	sp, #16
   207c6:	4240      	negs	r0, r0
   207c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   207cc:	4252      	negs	r2, r2
   207ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   207d2:	4770      	bx	lr
   207d4:	4252      	negs	r2, r2
   207d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   207da:	f000 f885 	bl	208e8 <__udivmoddi4>
   207de:	f8dd e004 	ldr.w	lr, [sp, #4]
   207e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   207e6:	b004      	add	sp, #16
   207e8:	4240      	negs	r0, r0
   207ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   207ee:	4770      	bx	lr
   207f0:	4252      	negs	r2, r2
   207f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   207f6:	f000 f877 	bl	208e8 <__udivmoddi4>
   207fa:	f8dd e004 	ldr.w	lr, [sp, #4]
   207fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20802:	b004      	add	sp, #16
   20804:	4252      	negs	r2, r2
   20806:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   2080a:	4770      	bx	lr

0002080c <__aeabi_uldivmod>:
   2080c:	b953      	cbnz	r3, 20824 <__aeabi_uldivmod+0x18>
   2080e:	b94a      	cbnz	r2, 20824 <__aeabi_uldivmod+0x18>
   20810:	2900      	cmp	r1, #0
   20812:	bf08      	it	eq
   20814:	2800      	cmpeq	r0, #0
   20816:	bf1c      	itt	ne
   20818:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   2081c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   20820:	f000 b9ca 	b.w	20bb8 <__aeabi_idiv0>
   20824:	f1ad 0c08 	sub.w	ip, sp, #8
   20828:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   2082c:	f000 f85c 	bl	208e8 <__udivmoddi4>
   20830:	f8dd e004 	ldr.w	lr, [sp, #4]
   20834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20838:	b004      	add	sp, #16
   2083a:	4770      	bx	lr

0002083c <__aeabi_d2lz>:
   2083c:	b538      	push	{r3, r4, r5, lr}
   2083e:	2200      	movs	r2, #0
   20840:	2300      	movs	r3, #0
   20842:	4604      	mov	r4, r0
   20844:	460d      	mov	r5, r1
   20846:	f7ff fdad 	bl	203a4 <__aeabi_dcmplt>
   2084a:	b928      	cbnz	r0, 20858 <__aeabi_d2lz+0x1c>
   2084c:	4620      	mov	r0, r4
   2084e:	4629      	mov	r1, r5
   20850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20854:	f000 b82a 	b.w	208ac <__aeabi_d2ulz>
   20858:	4620      	mov	r0, r4
   2085a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   2085e:	f000 f825 	bl	208ac <__aeabi_d2ulz>
   20862:	4240      	negs	r0, r0
   20864:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   20868:	bd38      	pop	{r3, r4, r5, pc}
   2086a:	bf00      	nop

0002086c <__aeabi_f2ulz>:
   2086c:	b5d0      	push	{r4, r6, r7, lr}
   2086e:	f7ff facf 	bl	1fe10 <__aeabi_f2d>
   20872:	4b0c      	ldr	r3, [pc, #48]	; (208a4 <__aeabi_f2ulz+0x38>)
   20874:	2200      	movs	r2, #0
   20876:	4606      	mov	r6, r0
   20878:	460f      	mov	r7, r1
   2087a:	f7ff fb21 	bl	1fec0 <__aeabi_dmul>
   2087e:	f7ff fdf7 	bl	20470 <__aeabi_d2uiz>
   20882:	4604      	mov	r4, r0
   20884:	f7ff faa2 	bl	1fdcc <__aeabi_ui2d>
   20888:	4b07      	ldr	r3, [pc, #28]	; (208a8 <__aeabi_f2ulz+0x3c>)
   2088a:	2200      	movs	r2, #0
   2088c:	f7ff fb18 	bl	1fec0 <__aeabi_dmul>
   20890:	4602      	mov	r2, r0
   20892:	460b      	mov	r3, r1
   20894:	4630      	mov	r0, r6
   20896:	4639      	mov	r1, r7
   20898:	f7ff f95a 	bl	1fb50 <__aeabi_dsub>
   2089c:	f7ff fde8 	bl	20470 <__aeabi_d2uiz>
   208a0:	4621      	mov	r1, r4
   208a2:	bdd0      	pop	{r4, r6, r7, pc}
   208a4:	3df00000 	.word	0x3df00000
   208a8:	41f00000 	.word	0x41f00000

000208ac <__aeabi_d2ulz>:
   208ac:	b5d0      	push	{r4, r6, r7, lr}
   208ae:	4b0c      	ldr	r3, [pc, #48]	; (208e0 <__aeabi_d2ulz+0x34>)
   208b0:	2200      	movs	r2, #0
   208b2:	4606      	mov	r6, r0
   208b4:	460f      	mov	r7, r1
   208b6:	f7ff fb03 	bl	1fec0 <__aeabi_dmul>
   208ba:	f7ff fdd9 	bl	20470 <__aeabi_d2uiz>
   208be:	4604      	mov	r4, r0
   208c0:	f7ff fa84 	bl	1fdcc <__aeabi_ui2d>
   208c4:	4b07      	ldr	r3, [pc, #28]	; (208e4 <__aeabi_d2ulz+0x38>)
   208c6:	2200      	movs	r2, #0
   208c8:	f7ff fafa 	bl	1fec0 <__aeabi_dmul>
   208cc:	4602      	mov	r2, r0
   208ce:	460b      	mov	r3, r1
   208d0:	4630      	mov	r0, r6
   208d2:	4639      	mov	r1, r7
   208d4:	f7ff f93c 	bl	1fb50 <__aeabi_dsub>
   208d8:	f7ff fdca 	bl	20470 <__aeabi_d2uiz>
   208dc:	4621      	mov	r1, r4
   208de:	bdd0      	pop	{r4, r6, r7, pc}
   208e0:	3df00000 	.word	0x3df00000
   208e4:	41f00000 	.word	0x41f00000

000208e8 <__udivmoddi4>:
   208e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   208ec:	9d08      	ldr	r5, [sp, #32]
   208ee:	4604      	mov	r4, r0
   208f0:	468e      	mov	lr, r1
   208f2:	2b00      	cmp	r3, #0
   208f4:	d14d      	bne.n	20992 <__udivmoddi4+0xaa>
   208f6:	428a      	cmp	r2, r1
   208f8:	4694      	mov	ip, r2
   208fa:	d969      	bls.n	209d0 <__udivmoddi4+0xe8>
   208fc:	fab2 f282 	clz	r2, r2
   20900:	b152      	cbz	r2, 20918 <__udivmoddi4+0x30>
   20902:	fa01 f302 	lsl.w	r3, r1, r2
   20906:	f1c2 0120 	rsb	r1, r2, #32
   2090a:	fa20 f101 	lsr.w	r1, r0, r1
   2090e:	fa0c fc02 	lsl.w	ip, ip, r2
   20912:	ea41 0e03 	orr.w	lr, r1, r3
   20916:	4094      	lsls	r4, r2
   20918:	ea4f 481c 	mov.w	r8, ip, lsr #16
   2091c:	0c21      	lsrs	r1, r4, #16
   2091e:	fbbe f6f8 	udiv	r6, lr, r8
   20922:	fa1f f78c 	uxth.w	r7, ip
   20926:	fb08 e316 	mls	r3, r8, r6, lr
   2092a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   2092e:	fb06 f107 	mul.w	r1, r6, r7
   20932:	4299      	cmp	r1, r3
   20934:	d90a      	bls.n	2094c <__udivmoddi4+0x64>
   20936:	eb1c 0303 	adds.w	r3, ip, r3
   2093a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   2093e:	f080 811f 	bcs.w	20b80 <__udivmoddi4+0x298>
   20942:	4299      	cmp	r1, r3
   20944:	f240 811c 	bls.w	20b80 <__udivmoddi4+0x298>
   20948:	3e02      	subs	r6, #2
   2094a:	4463      	add	r3, ip
   2094c:	1a5b      	subs	r3, r3, r1
   2094e:	b2a4      	uxth	r4, r4
   20950:	fbb3 f0f8 	udiv	r0, r3, r8
   20954:	fb08 3310 	mls	r3, r8, r0, r3
   20958:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   2095c:	fb00 f707 	mul.w	r7, r0, r7
   20960:	42a7      	cmp	r7, r4
   20962:	d90a      	bls.n	2097a <__udivmoddi4+0x92>
   20964:	eb1c 0404 	adds.w	r4, ip, r4
   20968:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   2096c:	f080 810a 	bcs.w	20b84 <__udivmoddi4+0x29c>
   20970:	42a7      	cmp	r7, r4
   20972:	f240 8107 	bls.w	20b84 <__udivmoddi4+0x29c>
   20976:	4464      	add	r4, ip
   20978:	3802      	subs	r0, #2
   2097a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   2097e:	1be4      	subs	r4, r4, r7
   20980:	2600      	movs	r6, #0
   20982:	b11d      	cbz	r5, 2098c <__udivmoddi4+0xa4>
   20984:	40d4      	lsrs	r4, r2
   20986:	2300      	movs	r3, #0
   20988:	e9c5 4300 	strd	r4, r3, [r5]
   2098c:	4631      	mov	r1, r6
   2098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20992:	428b      	cmp	r3, r1
   20994:	d909      	bls.n	209aa <__udivmoddi4+0xc2>
   20996:	2d00      	cmp	r5, #0
   20998:	f000 80ef 	beq.w	20b7a <__udivmoddi4+0x292>
   2099c:	2600      	movs	r6, #0
   2099e:	e9c5 0100 	strd	r0, r1, [r5]
   209a2:	4630      	mov	r0, r6
   209a4:	4631      	mov	r1, r6
   209a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   209aa:	fab3 f683 	clz	r6, r3
   209ae:	2e00      	cmp	r6, #0
   209b0:	d14a      	bne.n	20a48 <__udivmoddi4+0x160>
   209b2:	428b      	cmp	r3, r1
   209b4:	d302      	bcc.n	209bc <__udivmoddi4+0xd4>
   209b6:	4282      	cmp	r2, r0
   209b8:	f200 80f9 	bhi.w	20bae <__udivmoddi4+0x2c6>
   209bc:	1a84      	subs	r4, r0, r2
   209be:	eb61 0303 	sbc.w	r3, r1, r3
   209c2:	2001      	movs	r0, #1
   209c4:	469e      	mov	lr, r3
   209c6:	2d00      	cmp	r5, #0
   209c8:	d0e0      	beq.n	2098c <__udivmoddi4+0xa4>
   209ca:	e9c5 4e00 	strd	r4, lr, [r5]
   209ce:	e7dd      	b.n	2098c <__udivmoddi4+0xa4>
   209d0:	b902      	cbnz	r2, 209d4 <__udivmoddi4+0xec>
   209d2:	deff      	udf	#255	; 0xff
   209d4:	fab2 f282 	clz	r2, r2
   209d8:	2a00      	cmp	r2, #0
   209da:	f040 8092 	bne.w	20b02 <__udivmoddi4+0x21a>
   209de:	eba1 010c 	sub.w	r1, r1, ip
   209e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
   209e6:	fa1f fe8c 	uxth.w	lr, ip
   209ea:	2601      	movs	r6, #1
   209ec:	0c20      	lsrs	r0, r4, #16
   209ee:	fbb1 f3f7 	udiv	r3, r1, r7
   209f2:	fb07 1113 	mls	r1, r7, r3, r1
   209f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   209fa:	fb0e f003 	mul.w	r0, lr, r3
   209fe:	4288      	cmp	r0, r1
   20a00:	d908      	bls.n	20a14 <__udivmoddi4+0x12c>
   20a02:	eb1c 0101 	adds.w	r1, ip, r1
   20a06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   20a0a:	d202      	bcs.n	20a12 <__udivmoddi4+0x12a>
   20a0c:	4288      	cmp	r0, r1
   20a0e:	f200 80cb 	bhi.w	20ba8 <__udivmoddi4+0x2c0>
   20a12:	4643      	mov	r3, r8
   20a14:	1a09      	subs	r1, r1, r0
   20a16:	b2a4      	uxth	r4, r4
   20a18:	fbb1 f0f7 	udiv	r0, r1, r7
   20a1c:	fb07 1110 	mls	r1, r7, r0, r1
   20a20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   20a24:	fb0e fe00 	mul.w	lr, lr, r0
   20a28:	45a6      	cmp	lr, r4
   20a2a:	d908      	bls.n	20a3e <__udivmoddi4+0x156>
   20a2c:	eb1c 0404 	adds.w	r4, ip, r4
   20a30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   20a34:	d202      	bcs.n	20a3c <__udivmoddi4+0x154>
   20a36:	45a6      	cmp	lr, r4
   20a38:	f200 80bb 	bhi.w	20bb2 <__udivmoddi4+0x2ca>
   20a3c:	4608      	mov	r0, r1
   20a3e:	eba4 040e 	sub.w	r4, r4, lr
   20a42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   20a46:	e79c      	b.n	20982 <__udivmoddi4+0x9a>
   20a48:	f1c6 0720 	rsb	r7, r6, #32
   20a4c:	40b3      	lsls	r3, r6
   20a4e:	fa22 fc07 	lsr.w	ip, r2, r7
   20a52:	ea4c 0c03 	orr.w	ip, ip, r3
   20a56:	fa20 f407 	lsr.w	r4, r0, r7
   20a5a:	fa01 f306 	lsl.w	r3, r1, r6
   20a5e:	431c      	orrs	r4, r3
   20a60:	40f9      	lsrs	r1, r7
   20a62:	ea4f 491c 	mov.w	r9, ip, lsr #16
   20a66:	fa00 f306 	lsl.w	r3, r0, r6
   20a6a:	fbb1 f8f9 	udiv	r8, r1, r9
   20a6e:	0c20      	lsrs	r0, r4, #16
   20a70:	fa1f fe8c 	uxth.w	lr, ip
   20a74:	fb09 1118 	mls	r1, r9, r8, r1
   20a78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   20a7c:	fb08 f00e 	mul.w	r0, r8, lr
   20a80:	4288      	cmp	r0, r1
   20a82:	fa02 f206 	lsl.w	r2, r2, r6
   20a86:	d90b      	bls.n	20aa0 <__udivmoddi4+0x1b8>
   20a88:	eb1c 0101 	adds.w	r1, ip, r1
   20a8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   20a90:	f080 8088 	bcs.w	20ba4 <__udivmoddi4+0x2bc>
   20a94:	4288      	cmp	r0, r1
   20a96:	f240 8085 	bls.w	20ba4 <__udivmoddi4+0x2bc>
   20a9a:	f1a8 0802 	sub.w	r8, r8, #2
   20a9e:	4461      	add	r1, ip
   20aa0:	1a09      	subs	r1, r1, r0
   20aa2:	b2a4      	uxth	r4, r4
   20aa4:	fbb1 f0f9 	udiv	r0, r1, r9
   20aa8:	fb09 1110 	mls	r1, r9, r0, r1
   20aac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   20ab0:	fb00 fe0e 	mul.w	lr, r0, lr
   20ab4:	458e      	cmp	lr, r1
   20ab6:	d908      	bls.n	20aca <__udivmoddi4+0x1e2>
   20ab8:	eb1c 0101 	adds.w	r1, ip, r1
   20abc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   20ac0:	d26c      	bcs.n	20b9c <__udivmoddi4+0x2b4>
   20ac2:	458e      	cmp	lr, r1
   20ac4:	d96a      	bls.n	20b9c <__udivmoddi4+0x2b4>
   20ac6:	3802      	subs	r0, #2
   20ac8:	4461      	add	r1, ip
   20aca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   20ace:	fba0 9402 	umull	r9, r4, r0, r2
   20ad2:	eba1 010e 	sub.w	r1, r1, lr
   20ad6:	42a1      	cmp	r1, r4
   20ad8:	46c8      	mov	r8, r9
   20ada:	46a6      	mov	lr, r4
   20adc:	d356      	bcc.n	20b8c <__udivmoddi4+0x2a4>
   20ade:	d053      	beq.n	20b88 <__udivmoddi4+0x2a0>
   20ae0:	b15d      	cbz	r5, 20afa <__udivmoddi4+0x212>
   20ae2:	ebb3 0208 	subs.w	r2, r3, r8
   20ae6:	eb61 010e 	sbc.w	r1, r1, lr
   20aea:	fa01 f707 	lsl.w	r7, r1, r7
   20aee:	fa22 f306 	lsr.w	r3, r2, r6
   20af2:	40f1      	lsrs	r1, r6
   20af4:	431f      	orrs	r7, r3
   20af6:	e9c5 7100 	strd	r7, r1, [r5]
   20afa:	2600      	movs	r6, #0
   20afc:	4631      	mov	r1, r6
   20afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20b02:	f1c2 0320 	rsb	r3, r2, #32
   20b06:	40d8      	lsrs	r0, r3
   20b08:	fa0c fc02 	lsl.w	ip, ip, r2
   20b0c:	fa21 f303 	lsr.w	r3, r1, r3
   20b10:	4091      	lsls	r1, r2
   20b12:	4301      	orrs	r1, r0
   20b14:	ea4f 471c 	mov.w	r7, ip, lsr #16
   20b18:	fa1f fe8c 	uxth.w	lr, ip
   20b1c:	fbb3 f0f7 	udiv	r0, r3, r7
   20b20:	fb07 3610 	mls	r6, r7, r0, r3
   20b24:	0c0b      	lsrs	r3, r1, #16
   20b26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   20b2a:	fb00 f60e 	mul.w	r6, r0, lr
   20b2e:	429e      	cmp	r6, r3
   20b30:	fa04 f402 	lsl.w	r4, r4, r2
   20b34:	d908      	bls.n	20b48 <__udivmoddi4+0x260>
   20b36:	eb1c 0303 	adds.w	r3, ip, r3
   20b3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   20b3e:	d22f      	bcs.n	20ba0 <__udivmoddi4+0x2b8>
   20b40:	429e      	cmp	r6, r3
   20b42:	d92d      	bls.n	20ba0 <__udivmoddi4+0x2b8>
   20b44:	3802      	subs	r0, #2
   20b46:	4463      	add	r3, ip
   20b48:	1b9b      	subs	r3, r3, r6
   20b4a:	b289      	uxth	r1, r1
   20b4c:	fbb3 f6f7 	udiv	r6, r3, r7
   20b50:	fb07 3316 	mls	r3, r7, r6, r3
   20b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   20b58:	fb06 f30e 	mul.w	r3, r6, lr
   20b5c:	428b      	cmp	r3, r1
   20b5e:	d908      	bls.n	20b72 <__udivmoddi4+0x28a>
   20b60:	eb1c 0101 	adds.w	r1, ip, r1
   20b64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   20b68:	d216      	bcs.n	20b98 <__udivmoddi4+0x2b0>
   20b6a:	428b      	cmp	r3, r1
   20b6c:	d914      	bls.n	20b98 <__udivmoddi4+0x2b0>
   20b6e:	3e02      	subs	r6, #2
   20b70:	4461      	add	r1, ip
   20b72:	1ac9      	subs	r1, r1, r3
   20b74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   20b78:	e738      	b.n	209ec <__udivmoddi4+0x104>
   20b7a:	462e      	mov	r6, r5
   20b7c:	4628      	mov	r0, r5
   20b7e:	e705      	b.n	2098c <__udivmoddi4+0xa4>
   20b80:	4606      	mov	r6, r0
   20b82:	e6e3      	b.n	2094c <__udivmoddi4+0x64>
   20b84:	4618      	mov	r0, r3
   20b86:	e6f8      	b.n	2097a <__udivmoddi4+0x92>
   20b88:	454b      	cmp	r3, r9
   20b8a:	d2a9      	bcs.n	20ae0 <__udivmoddi4+0x1f8>
   20b8c:	ebb9 0802 	subs.w	r8, r9, r2
   20b90:	eb64 0e0c 	sbc.w	lr, r4, ip
   20b94:	3801      	subs	r0, #1
   20b96:	e7a3      	b.n	20ae0 <__udivmoddi4+0x1f8>
   20b98:	4646      	mov	r6, r8
   20b9a:	e7ea      	b.n	20b72 <__udivmoddi4+0x28a>
   20b9c:	4620      	mov	r0, r4
   20b9e:	e794      	b.n	20aca <__udivmoddi4+0x1e2>
   20ba0:	4640      	mov	r0, r8
   20ba2:	e7d1      	b.n	20b48 <__udivmoddi4+0x260>
   20ba4:	46d0      	mov	r8, sl
   20ba6:	e77b      	b.n	20aa0 <__udivmoddi4+0x1b8>
   20ba8:	3b02      	subs	r3, #2
   20baa:	4461      	add	r1, ip
   20bac:	e732      	b.n	20a14 <__udivmoddi4+0x12c>
   20bae:	4630      	mov	r0, r6
   20bb0:	e709      	b.n	209c6 <__udivmoddi4+0xde>
   20bb2:	4464      	add	r4, ip
   20bb4:	3802      	subs	r0, #2
   20bb6:	e742      	b.n	20a3e <__udivmoddi4+0x156>

00020bb8 <__aeabi_idiv0>:
   20bb8:	4770      	bx	lr
   20bba:	bf00      	nop

00020bbc <fabs>:
   20bbc:	ec51 0b10 	vmov	r0, r1, d0
   20bc0:	ee10 2a10 	vmov	r2, s0
   20bc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   20bc8:	ec43 2b10 	vmov	d0, r2, r3
   20bcc:	4770      	bx	lr
   20bce:	bf00      	nop

00020bd0 <ceilf>:
   20bd0:	ee10 2a10 	vmov	r2, s0
   20bd4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   20bd8:	3b7f      	subs	r3, #127	; 0x7f
   20bda:	2b16      	cmp	r3, #22
   20bdc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   20be0:	dc2f      	bgt.n	20c42 <ceilf+0x72>
   20be2:	2b00      	cmp	r3, #0
   20be4:	db18      	blt.n	20c18 <ceilf+0x48>
   20be6:	491a      	ldr	r1, [pc, #104]	; (20c50 <ceilf+0x80>)
   20be8:	4119      	asrs	r1, r3
   20bea:	420a      	tst	r2, r1
   20bec:	d028      	beq.n	20c40 <ceilf+0x70>
   20bee:	eddf 7a19 	vldr	s15, [pc, #100]	; 20c54 <ceilf+0x84>
   20bf2:	ee70 7a27 	vadd.f32	s15, s0, s15
   20bf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   20bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20bfe:	dd1f      	ble.n	20c40 <ceilf+0x70>
   20c00:	2a00      	cmp	r2, #0
   20c02:	dd04      	ble.n	20c0e <ceilf+0x3e>
   20c04:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   20c08:	fa40 f303 	asr.w	r3, r0, r3
   20c0c:	441a      	add	r2, r3
   20c0e:	ea22 0301 	bic.w	r3, r2, r1
   20c12:	ee00 3a10 	vmov	s0, r3
   20c16:	4770      	bx	lr
   20c18:	eddf 7a0e 	vldr	s15, [pc, #56]	; 20c54 <ceilf+0x84>
   20c1c:	ee70 7a27 	vadd.f32	s15, s0, s15
   20c20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   20c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20c28:	dd0a      	ble.n	20c40 <ceilf+0x70>
   20c2a:	2a00      	cmp	r2, #0
   20c2c:	db06      	blt.n	20c3c <ceilf+0x6c>
   20c2e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   20c32:	2900      	cmp	r1, #0
   20c34:	bf18      	it	ne
   20c36:	eeb0 0a67 	vmovne.f32	s0, s15
   20c3a:	4770      	bx	lr
   20c3c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 20c58 <ceilf+0x88>
   20c40:	4770      	bx	lr
   20c42:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   20c46:	d3fb      	bcc.n	20c40 <ceilf+0x70>
   20c48:	ee30 0a00 	vadd.f32	s0, s0, s0
   20c4c:	4770      	bx	lr
   20c4e:	bf00      	nop
   20c50:	007fffff 	.word	0x007fffff
   20c54:	7149f2ca 	.word	0x7149f2ca
   20c58:	80000000 	.word	0x80000000

00020c5c <asin>:
   20c5c:	b538      	push	{r3, r4, r5, lr}
   20c5e:	ed2d 8b02 	vpush	{d8}
   20c62:	ec55 4b10 	vmov	r4, r5, d0
   20c66:	f000 f8a7 	bl	20db8 <__ieee754_asin>
   20c6a:	4b17      	ldr	r3, [pc, #92]	; (20cc8 <asin+0x6c>)
   20c6c:	eeb0 8a40 	vmov.f32	s16, s0
   20c70:	eef0 8a60 	vmov.f32	s17, s1
   20c74:	f993 3000 	ldrsb.w	r3, [r3]
   20c78:	3301      	adds	r3, #1
   20c7a:	d011      	beq.n	20ca0 <asin+0x44>
   20c7c:	4622      	mov	r2, r4
   20c7e:	462b      	mov	r3, r5
   20c80:	4620      	mov	r0, r4
   20c82:	4629      	mov	r1, r5
   20c84:	f7ff fbb6 	bl	203f4 <__aeabi_dcmpun>
   20c88:	b950      	cbnz	r0, 20ca0 <asin+0x44>
   20c8a:	ec45 4b10 	vmov	d0, r4, r5
   20c8e:	f7ff ff95 	bl	20bbc <fabs>
   20c92:	4b0e      	ldr	r3, [pc, #56]	; (20ccc <asin+0x70>)
   20c94:	ec51 0b10 	vmov	r0, r1, d0
   20c98:	2200      	movs	r2, #0
   20c9a:	f7ff fba1 	bl	203e0 <__aeabi_dcmpgt>
   20c9e:	b930      	cbnz	r0, 20cae <asin+0x52>
   20ca0:	eeb0 0a48 	vmov.f32	s0, s16
   20ca4:	eef0 0a68 	vmov.f32	s1, s17
   20ca8:	ecbd 8b02 	vpop	{d8}
   20cac:	bd38      	pop	{r3, r4, r5, pc}
   20cae:	f000 fe4d 	bl	2194c <__errno>
   20cb2:	ecbd 8b02 	vpop	{d8}
   20cb6:	4603      	mov	r3, r0
   20cb8:	2221      	movs	r2, #33	; 0x21
   20cba:	601a      	str	r2, [r3, #0]
   20cbc:	4804      	ldr	r0, [pc, #16]	; (20cd0 <asin+0x74>)
   20cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20cc2:	f000 bd35 	b.w	21730 <nan>
   20cc6:	bf00      	nop
   20cc8:	20000f9c 	.word	0x20000f9c
   20ccc:	3ff00000 	.word	0x3ff00000
   20cd0:	000233f0 	.word	0x000233f0

00020cd4 <fmod>:
   20cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20cd6:	ed2d 8b02 	vpush	{d8}
   20cda:	ec57 6b10 	vmov	r6, r7, d0
   20cde:	ec55 4b11 	vmov	r4, r5, d1
   20ce2:	f000 fabb 	bl	2125c <__ieee754_fmod>
   20ce6:	4b18      	ldr	r3, [pc, #96]	; (20d48 <fmod+0x74>)
   20ce8:	eeb0 8a40 	vmov.f32	s16, s0
   20cec:	eef0 8a60 	vmov.f32	s17, s1
   20cf0:	f993 3000 	ldrsb.w	r3, [r3]
   20cf4:	3301      	adds	r3, #1
   20cf6:	d00d      	beq.n	20d14 <fmod+0x40>
   20cf8:	4630      	mov	r0, r6
   20cfa:	4639      	mov	r1, r7
   20cfc:	4622      	mov	r2, r4
   20cfe:	462b      	mov	r3, r5
   20d00:	f7ff fb78 	bl	203f4 <__aeabi_dcmpun>
   20d04:	b930      	cbnz	r0, 20d14 <fmod+0x40>
   20d06:	2200      	movs	r2, #0
   20d08:	2300      	movs	r3, #0
   20d0a:	4620      	mov	r0, r4
   20d0c:	4629      	mov	r1, r5
   20d0e:	f7ff fb3f 	bl	20390 <__aeabi_dcmpeq>
   20d12:	b930      	cbnz	r0, 20d22 <fmod+0x4e>
   20d14:	eeb0 0a48 	vmov.f32	s0, s16
   20d18:	eef0 0a68 	vmov.f32	s1, s17
   20d1c:	ecbd 8b02 	vpop	{d8}
   20d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20d22:	f000 fe13 	bl	2194c <__errno>
   20d26:	2200      	movs	r2, #0
   20d28:	2300      	movs	r3, #0
   20d2a:	2121      	movs	r1, #33	; 0x21
   20d2c:	6001      	str	r1, [r0, #0]
   20d2e:	4610      	mov	r0, r2
   20d30:	4619      	mov	r1, r3
   20d32:	f7ff f9ef 	bl	20114 <__aeabi_ddiv>
   20d36:	ec41 0b18 	vmov	d8, r0, r1
   20d3a:	eeb0 0a48 	vmov.f32	s0, s16
   20d3e:	eef0 0a68 	vmov.f32	s1, s17
   20d42:	ecbd 8b02 	vpop	{d8}
   20d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20d48:	20000f9c 	.word	0x20000f9c

00020d4c <log10f>:
   20d4c:	b508      	push	{r3, lr}
   20d4e:	ed2d 8b02 	vpush	{d8}
   20d52:	eeb0 8a40 	vmov.f32	s16, s0
   20d56:	f000 fc8b 	bl	21670 <__ieee754_log10f>
   20d5a:	4b14      	ldr	r3, [pc, #80]	; (20dac <log10f+0x60>)
   20d5c:	f993 3000 	ldrsb.w	r3, [r3]
   20d60:	3301      	adds	r3, #1
   20d62:	d014      	beq.n	20d8e <log10f+0x42>
   20d64:	eeb4 8a48 	vcmp.f32	s16, s16
   20d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20d6c:	d60f      	bvs.n	20d8e <log10f+0x42>
   20d6e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   20d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20d76:	d80a      	bhi.n	20d8e <log10f+0x42>
   20d78:	eeb5 8a40 	vcmp.f32	s16, #0.0
   20d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20d80:	d108      	bne.n	20d94 <log10f+0x48>
   20d82:	f000 fde3 	bl	2194c <__errno>
   20d86:	2322      	movs	r3, #34	; 0x22
   20d88:	ed9f 0a09 	vldr	s0, [pc, #36]	; 20db0 <log10f+0x64>
   20d8c:	6003      	str	r3, [r0, #0]
   20d8e:	ecbd 8b02 	vpop	{d8}
   20d92:	bd08      	pop	{r3, pc}
   20d94:	f000 fdda 	bl	2194c <__errno>
   20d98:	ecbd 8b02 	vpop	{d8}
   20d9c:	4603      	mov	r3, r0
   20d9e:	2221      	movs	r2, #33	; 0x21
   20da0:	601a      	str	r2, [r3, #0]
   20da2:	4804      	ldr	r0, [pc, #16]	; (20db4 <log10f+0x68>)
   20da4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20da8:	f000 bcca 	b.w	21740 <nanf>
   20dac:	20000f9c 	.word	0x20000f9c
   20db0:	ff800000 	.word	0xff800000
   20db4:	000233f0 	.word	0x000233f0

00020db8 <__ieee754_asin>:
   20db8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20dbc:	ec55 4b10 	vmov	r4, r5, d0
   20dc0:	4bcf      	ldr	r3, [pc, #828]	; (21100 <__ieee754_asin+0x348>)
   20dc2:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   20dc6:	429f      	cmp	r7, r3
   20dc8:	ed2d 8b04 	vpush	{d8-d9}
   20dcc:	dd37      	ble.n	20e3e <__ieee754_asin+0x86>
   20dce:	ee10 3a10 	vmov	r3, s0
   20dd2:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
   20dd6:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
   20dda:	433b      	orrs	r3, r7
   20ddc:	d010      	beq.n	20e00 <__ieee754_asin+0x48>
   20dde:	ee10 2a10 	vmov	r2, s0
   20de2:	462b      	mov	r3, r5
   20de4:	4620      	mov	r0, r4
   20de6:	4629      	mov	r1, r5
   20de8:	f7fe feb2 	bl	1fb50 <__aeabi_dsub>
   20dec:	4602      	mov	r2, r0
   20dee:	460b      	mov	r3, r1
   20df0:	f7ff f990 	bl	20114 <__aeabi_ddiv>
   20df4:	ec41 0b10 	vmov	d0, r0, r1
   20df8:	ecbd 8b04 	vpop	{d8-d9}
   20dfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e00:	ee10 0a10 	vmov	r0, s0
   20e04:	a3a2      	add	r3, pc, #648	; (adr r3, 21090 <__ieee754_asin+0x2d8>)
   20e06:	e9d3 2300 	ldrd	r2, r3, [r3]
   20e0a:	4629      	mov	r1, r5
   20e0c:	f7ff f858 	bl	1fec0 <__aeabi_dmul>
   20e10:	4602      	mov	r2, r0
   20e12:	460b      	mov	r3, r1
   20e14:	4620      	mov	r0, r4
   20e16:	4629      	mov	r1, r5
   20e18:	4614      	mov	r4, r2
   20e1a:	461d      	mov	r5, r3
   20e1c:	a39e      	add	r3, pc, #632	; (adr r3, 21098 <__ieee754_asin+0x2e0>)
   20e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   20e22:	f7ff f84d 	bl	1fec0 <__aeabi_dmul>
   20e26:	4602      	mov	r2, r0
   20e28:	460b      	mov	r3, r1
   20e2a:	4620      	mov	r0, r4
   20e2c:	4629      	mov	r1, r5
   20e2e:	f7fe fe91 	bl	1fb54 <__adddf3>
   20e32:	ecbd 8b04 	vpop	{d8-d9}
   20e36:	ec41 0b10 	vmov	d0, r0, r1
   20e3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e3e:	4bb1      	ldr	r3, [pc, #708]	; (21104 <__ieee754_asin+0x34c>)
   20e40:	429f      	cmp	r7, r3
   20e42:	462e      	mov	r6, r5
   20e44:	dc12      	bgt.n	20e6c <__ieee754_asin+0xb4>
   20e46:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
   20e4a:	f280 8163 	bge.w	21114 <__ieee754_asin+0x35c>
   20e4e:	a394      	add	r3, pc, #592	; (adr r3, 210a0 <__ieee754_asin+0x2e8>)
   20e50:	e9d3 2300 	ldrd	r2, r3, [r3]
   20e54:	ee10 0a10 	vmov	r0, s0
   20e58:	4629      	mov	r1, r5
   20e5a:	f7fe fe7b 	bl	1fb54 <__adddf3>
   20e5e:	4baa      	ldr	r3, [pc, #680]	; (21108 <__ieee754_asin+0x350>)
   20e60:	2200      	movs	r2, #0
   20e62:	f7ff fabd 	bl	203e0 <__aeabi_dcmpgt>
   20e66:	2800      	cmp	r0, #0
   20e68:	f040 810c 	bne.w	21084 <__ieee754_asin+0x2cc>
   20e6c:	ec45 4b10 	vmov	d0, r4, r5
   20e70:	f7ff fea4 	bl	20bbc <fabs>
   20e74:	49a4      	ldr	r1, [pc, #656]	; (21108 <__ieee754_asin+0x350>)
   20e76:	ec53 2b10 	vmov	r2, r3, d0
   20e7a:	2000      	movs	r0, #0
   20e7c:	f7fe fe68 	bl	1fb50 <__aeabi_dsub>
   20e80:	4ba2      	ldr	r3, [pc, #648]	; (2110c <__ieee754_asin+0x354>)
   20e82:	2200      	movs	r2, #0
   20e84:	f7ff f81c 	bl	1fec0 <__aeabi_dmul>
   20e88:	a387      	add	r3, pc, #540	; (adr r3, 210a8 <__ieee754_asin+0x2f0>)
   20e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   20e8e:	4604      	mov	r4, r0
   20e90:	460d      	mov	r5, r1
   20e92:	f7ff f815 	bl	1fec0 <__aeabi_dmul>
   20e96:	a386      	add	r3, pc, #536	; (adr r3, 210b0 <__ieee754_asin+0x2f8>)
   20e98:	e9d3 2300 	ldrd	r2, r3, [r3]
   20e9c:	f7fe fe5a 	bl	1fb54 <__adddf3>
   20ea0:	4622      	mov	r2, r4
   20ea2:	462b      	mov	r3, r5
   20ea4:	f7ff f80c 	bl	1fec0 <__aeabi_dmul>
   20ea8:	a383      	add	r3, pc, #524	; (adr r3, 210b8 <__ieee754_asin+0x300>)
   20eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   20eae:	f7fe fe4f 	bl	1fb50 <__aeabi_dsub>
   20eb2:	4622      	mov	r2, r4
   20eb4:	462b      	mov	r3, r5
   20eb6:	f7ff f803 	bl	1fec0 <__aeabi_dmul>
   20eba:	a381      	add	r3, pc, #516	; (adr r3, 210c0 <__ieee754_asin+0x308>)
   20ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
   20ec0:	f7fe fe48 	bl	1fb54 <__adddf3>
   20ec4:	4622      	mov	r2, r4
   20ec6:	462b      	mov	r3, r5
   20ec8:	f7fe fffa 	bl	1fec0 <__aeabi_dmul>
   20ecc:	a37e      	add	r3, pc, #504	; (adr r3, 210c8 <__ieee754_asin+0x310>)
   20ece:	e9d3 2300 	ldrd	r2, r3, [r3]
   20ed2:	f7fe fe3d 	bl	1fb50 <__aeabi_dsub>
   20ed6:	4622      	mov	r2, r4
   20ed8:	462b      	mov	r3, r5
   20eda:	f7fe fff1 	bl	1fec0 <__aeabi_dmul>
   20ede:	a37c      	add	r3, pc, #496	; (adr r3, 210d0 <__ieee754_asin+0x318>)
   20ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
   20ee4:	f7fe fe36 	bl	1fb54 <__adddf3>
   20ee8:	4622      	mov	r2, r4
   20eea:	462b      	mov	r3, r5
   20eec:	f7fe ffe8 	bl	1fec0 <__aeabi_dmul>
   20ef0:	a379      	add	r3, pc, #484	; (adr r3, 210d8 <__ieee754_asin+0x320>)
   20ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
   20ef6:	ec41 0b18 	vmov	d8, r0, r1
   20efa:	ec41 0b19 	vmov	d9, r0, r1
   20efe:	4620      	mov	r0, r4
   20f00:	4629      	mov	r1, r5
   20f02:	f7fe ffdd 	bl	1fec0 <__aeabi_dmul>
   20f06:	a376      	add	r3, pc, #472	; (adr r3, 210e0 <__ieee754_asin+0x328>)
   20f08:	e9d3 2300 	ldrd	r2, r3, [r3]
   20f0c:	f7fe fe20 	bl	1fb50 <__aeabi_dsub>
   20f10:	4622      	mov	r2, r4
   20f12:	462b      	mov	r3, r5
   20f14:	f7fe ffd4 	bl	1fec0 <__aeabi_dmul>
   20f18:	a373      	add	r3, pc, #460	; (adr r3, 210e8 <__ieee754_asin+0x330>)
   20f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   20f1e:	f7fe fe19 	bl	1fb54 <__adddf3>
   20f22:	4622      	mov	r2, r4
   20f24:	462b      	mov	r3, r5
   20f26:	f7fe ffcb 	bl	1fec0 <__aeabi_dmul>
   20f2a:	a371      	add	r3, pc, #452	; (adr r3, 210f0 <__ieee754_asin+0x338>)
   20f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   20f30:	f7fe fe0e 	bl	1fb50 <__aeabi_dsub>
   20f34:	4622      	mov	r2, r4
   20f36:	462b      	mov	r3, r5
   20f38:	f7fe ffc2 	bl	1fec0 <__aeabi_dmul>
   20f3c:	4b72      	ldr	r3, [pc, #456]	; (21108 <__ieee754_asin+0x350>)
   20f3e:	2200      	movs	r2, #0
   20f40:	f7fe fe08 	bl	1fb54 <__adddf3>
   20f44:	ec45 4b10 	vmov	d0, r4, r5
   20f48:	4680      	mov	r8, r0
   20f4a:	4689      	mov	r9, r1
   20f4c:	f000 fac4 	bl	214d8 <__ieee754_sqrt>
   20f50:	4b6f      	ldr	r3, [pc, #444]	; (21110 <__ieee754_asin+0x358>)
   20f52:	429f      	cmp	r7, r3
   20f54:	ec5b ab10 	vmov	sl, fp, d0
   20f58:	dc73      	bgt.n	21042 <__ieee754_asin+0x28a>
   20f5a:	465b      	mov	r3, fp
   20f5c:	2200      	movs	r2, #0
   20f5e:	ee10 0a10 	vmov	r0, s0
   20f62:	ec43 2b18 	vmov	d8, r2, r3
   20f66:	4659      	mov	r1, fp
   20f68:	ee10 2a10 	vmov	r2, s0
   20f6c:	f7fe fdf2 	bl	1fb54 <__adddf3>
   20f70:	4642      	mov	r2, r8
   20f72:	464b      	mov	r3, r9
   20f74:	4680      	mov	r8, r0
   20f76:	4689      	mov	r9, r1
   20f78:	ec51 0b19 	vmov	r0, r1, d9
   20f7c:	f7ff f8ca 	bl	20114 <__aeabi_ddiv>
   20f80:	4602      	mov	r2, r0
   20f82:	460b      	mov	r3, r1
   20f84:	4640      	mov	r0, r8
   20f86:	4649      	mov	r1, r9
   20f88:	f7fe ff9a 	bl	1fec0 <__aeabi_dmul>
   20f8c:	ec53 2b18 	vmov	r2, r3, d8
   20f90:	4680      	mov	r8, r0
   20f92:	4689      	mov	r9, r1
   20f94:	ec51 0b18 	vmov	r0, r1, d8
   20f98:	f7fe ff92 	bl	1fec0 <__aeabi_dmul>
   20f9c:	4602      	mov	r2, r0
   20f9e:	460b      	mov	r3, r1
   20fa0:	4620      	mov	r0, r4
   20fa2:	4629      	mov	r1, r5
   20fa4:	f7fe fdd4 	bl	1fb50 <__aeabi_dsub>
   20fa8:	ec53 2b18 	vmov	r2, r3, d8
   20fac:	4604      	mov	r4, r0
   20fae:	460d      	mov	r5, r1
   20fb0:	4650      	mov	r0, sl
   20fb2:	4659      	mov	r1, fp
   20fb4:	f7fe fdce 	bl	1fb54 <__adddf3>
   20fb8:	4602      	mov	r2, r0
   20fba:	460b      	mov	r3, r1
   20fbc:	4620      	mov	r0, r4
   20fbe:	4629      	mov	r1, r5
   20fc0:	f7ff f8a8 	bl	20114 <__aeabi_ddiv>
   20fc4:	4602      	mov	r2, r0
   20fc6:	460b      	mov	r3, r1
   20fc8:	f7fe fdc4 	bl	1fb54 <__adddf3>
   20fcc:	4602      	mov	r2, r0
   20fce:	460b      	mov	r3, r1
   20fd0:	a131      	add	r1, pc, #196	; (adr r1, 21098 <__ieee754_asin+0x2e0>)
   20fd2:	e9d1 0100 	ldrd	r0, r1, [r1]
   20fd6:	f7fe fdbb 	bl	1fb50 <__aeabi_dsub>
   20fda:	4602      	mov	r2, r0
   20fdc:	460b      	mov	r3, r1
   20fde:	4640      	mov	r0, r8
   20fe0:	4649      	mov	r1, r9
   20fe2:	f7fe fdb5 	bl	1fb50 <__aeabi_dsub>
   20fe6:	ec53 2b18 	vmov	r2, r3, d8
   20fea:	4604      	mov	r4, r0
   20fec:	460d      	mov	r5, r1
   20fee:	ee18 0a10 	vmov	r0, s16
   20ff2:	4619      	mov	r1, r3
   20ff4:	f7fe fdae 	bl	1fb54 <__adddf3>
   20ff8:	4602      	mov	r2, r0
   20ffa:	460b      	mov	r3, r1
   20ffc:	a13e      	add	r1, pc, #248	; (adr r1, 210f8 <__ieee754_asin+0x340>)
   20ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
   21002:	f7fe fda5 	bl	1fb50 <__aeabi_dsub>
   21006:	4602      	mov	r2, r0
   21008:	460b      	mov	r3, r1
   2100a:	4620      	mov	r0, r4
   2100c:	4629      	mov	r1, r5
   2100e:	f7fe fd9f 	bl	1fb50 <__aeabi_dsub>
   21012:	4602      	mov	r2, r0
   21014:	460b      	mov	r3, r1
   21016:	a138      	add	r1, pc, #224	; (adr r1, 210f8 <__ieee754_asin+0x340>)
   21018:	e9d1 0100 	ldrd	r0, r1, [r1]
   2101c:	f7fe fd98 	bl	1fb50 <__aeabi_dsub>
   21020:	ec41 0b10 	vmov	d0, r0, r1
   21024:	2e00      	cmp	r6, #0
   21026:	f73f aee7 	bgt.w	20df8 <__ieee754_asin+0x40>
   2102a:	ecbd 8b04 	vpop	{d8-d9}
   2102e:	ee10 1a90 	vmov	r1, s1
   21032:	ee10 2a10 	vmov	r2, s0
   21036:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   2103a:	ec43 2b10 	vmov	d0, r2, r3
   2103e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21042:	4642      	mov	r2, r8
   21044:	464b      	mov	r3, r9
   21046:	ec51 0b18 	vmov	r0, r1, d8
   2104a:	f7ff f863 	bl	20114 <__aeabi_ddiv>
   2104e:	4652      	mov	r2, sl
   21050:	465b      	mov	r3, fp
   21052:	f7fe ff35 	bl	1fec0 <__aeabi_dmul>
   21056:	4652      	mov	r2, sl
   21058:	465b      	mov	r3, fp
   2105a:	f7fe fd7b 	bl	1fb54 <__adddf3>
   2105e:	4602      	mov	r2, r0
   21060:	460b      	mov	r3, r1
   21062:	f7fe fd77 	bl	1fb54 <__adddf3>
   21066:	a30c      	add	r3, pc, #48	; (adr r3, 21098 <__ieee754_asin+0x2e0>)
   21068:	e9d3 2300 	ldrd	r2, r3, [r3]
   2106c:	f7fe fd70 	bl	1fb50 <__aeabi_dsub>
   21070:	4602      	mov	r2, r0
   21072:	460b      	mov	r3, r1
   21074:	a106      	add	r1, pc, #24	; (adr r1, 21090 <__ieee754_asin+0x2d8>)
   21076:	e9d1 0100 	ldrd	r0, r1, [r1]
   2107a:	f7fe fd69 	bl	1fb50 <__aeabi_dsub>
   2107e:	ec41 0b10 	vmov	d0, r0, r1
   21082:	e7cf      	b.n	21024 <__ieee754_asin+0x26c>
   21084:	ec45 4b10 	vmov	d0, r4, r5
   21088:	e6b6      	b.n	20df8 <__ieee754_asin+0x40>
   2108a:	bf00      	nop
   2108c:	f3af 8000 	nop.w
   21090:	54442d18 	.word	0x54442d18
   21094:	3ff921fb 	.word	0x3ff921fb
   21098:	33145c07 	.word	0x33145c07
   2109c:	3c91a626 	.word	0x3c91a626
   210a0:	8800759c 	.word	0x8800759c
   210a4:	7e37e43c 	.word	0x7e37e43c
   210a8:	0dfdf709 	.word	0x0dfdf709
   210ac:	3f023de1 	.word	0x3f023de1
   210b0:	7501b288 	.word	0x7501b288
   210b4:	3f49efe0 	.word	0x3f49efe0
   210b8:	b5688f3b 	.word	0xb5688f3b
   210bc:	3fa48228 	.word	0x3fa48228
   210c0:	0e884455 	.word	0x0e884455
   210c4:	3fc9c155 	.word	0x3fc9c155
   210c8:	03eb6f7d 	.word	0x03eb6f7d
   210cc:	3fd4d612 	.word	0x3fd4d612
   210d0:	55555555 	.word	0x55555555
   210d4:	3fc55555 	.word	0x3fc55555
   210d8:	b12e9282 	.word	0xb12e9282
   210dc:	3fb3b8c5 	.word	0x3fb3b8c5
   210e0:	1b8d0159 	.word	0x1b8d0159
   210e4:	3fe6066c 	.word	0x3fe6066c
   210e8:	9c598ac8 	.word	0x9c598ac8
   210ec:	40002ae5 	.word	0x40002ae5
   210f0:	1c8a2d4b 	.word	0x1c8a2d4b
   210f4:	40033a27 	.word	0x40033a27
   210f8:	54442d18 	.word	0x54442d18
   210fc:	3fe921fb 	.word	0x3fe921fb
   21100:	3fefffff 	.word	0x3fefffff
   21104:	3fdfffff 	.word	0x3fdfffff
   21108:	3ff00000 	.word	0x3ff00000
   2110c:	3fe00000 	.word	0x3fe00000
   21110:	3fef3332 	.word	0x3fef3332
   21114:	ee10 2a10 	vmov	r2, s0
   21118:	ee10 0a10 	vmov	r0, s0
   2111c:	462b      	mov	r3, r5
   2111e:	4629      	mov	r1, r5
   21120:	f7fe fece 	bl	1fec0 <__aeabi_dmul>
   21124:	a339      	add	r3, pc, #228	; (adr r3, 2120c <__ieee754_asin+0x454>)
   21126:	e9d3 2300 	ldrd	r2, r3, [r3]
   2112a:	4606      	mov	r6, r0
   2112c:	460f      	mov	r7, r1
   2112e:	f7fe fec7 	bl	1fec0 <__aeabi_dmul>
   21132:	a338      	add	r3, pc, #224	; (adr r3, 21214 <__ieee754_asin+0x45c>)
   21134:	e9d3 2300 	ldrd	r2, r3, [r3]
   21138:	f7fe fd0c 	bl	1fb54 <__adddf3>
   2113c:	4632      	mov	r2, r6
   2113e:	463b      	mov	r3, r7
   21140:	f7fe febe 	bl	1fec0 <__aeabi_dmul>
   21144:	a335      	add	r3, pc, #212	; (adr r3, 2121c <__ieee754_asin+0x464>)
   21146:	e9d3 2300 	ldrd	r2, r3, [r3]
   2114a:	f7fe fd01 	bl	1fb50 <__aeabi_dsub>
   2114e:	4632      	mov	r2, r6
   21150:	463b      	mov	r3, r7
   21152:	f7fe feb5 	bl	1fec0 <__aeabi_dmul>
   21156:	a333      	add	r3, pc, #204	; (adr r3, 21224 <__ieee754_asin+0x46c>)
   21158:	e9d3 2300 	ldrd	r2, r3, [r3]
   2115c:	f7fe fcfa 	bl	1fb54 <__adddf3>
   21160:	4632      	mov	r2, r6
   21162:	463b      	mov	r3, r7
   21164:	f7fe feac 	bl	1fec0 <__aeabi_dmul>
   21168:	a330      	add	r3, pc, #192	; (adr r3, 2122c <__ieee754_asin+0x474>)
   2116a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2116e:	f7fe fcef 	bl	1fb50 <__aeabi_dsub>
   21172:	4632      	mov	r2, r6
   21174:	463b      	mov	r3, r7
   21176:	f7fe fea3 	bl	1fec0 <__aeabi_dmul>
   2117a:	a32e      	add	r3, pc, #184	; (adr r3, 21234 <__ieee754_asin+0x47c>)
   2117c:	e9d3 2300 	ldrd	r2, r3, [r3]
   21180:	f7fe fce8 	bl	1fb54 <__adddf3>
   21184:	4632      	mov	r2, r6
   21186:	463b      	mov	r3, r7
   21188:	f7fe fe9a 	bl	1fec0 <__aeabi_dmul>
   2118c:	a32b      	add	r3, pc, #172	; (adr r3, 2123c <__ieee754_asin+0x484>)
   2118e:	e9d3 2300 	ldrd	r2, r3, [r3]
   21192:	4680      	mov	r8, r0
   21194:	4689      	mov	r9, r1
   21196:	4630      	mov	r0, r6
   21198:	4639      	mov	r1, r7
   2119a:	f7fe fe91 	bl	1fec0 <__aeabi_dmul>
   2119e:	a329      	add	r3, pc, #164	; (adr r3, 21244 <__ieee754_asin+0x48c>)
   211a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   211a4:	f7fe fcd4 	bl	1fb50 <__aeabi_dsub>
   211a8:	4632      	mov	r2, r6
   211aa:	463b      	mov	r3, r7
   211ac:	f7fe fe88 	bl	1fec0 <__aeabi_dmul>
   211b0:	a326      	add	r3, pc, #152	; (adr r3, 2124c <__ieee754_asin+0x494>)
   211b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   211b6:	f7fe fccd 	bl	1fb54 <__adddf3>
   211ba:	4632      	mov	r2, r6
   211bc:	463b      	mov	r3, r7
   211be:	f7fe fe7f 	bl	1fec0 <__aeabi_dmul>
   211c2:	a324      	add	r3, pc, #144	; (adr r3, 21254 <__ieee754_asin+0x49c>)
   211c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   211c8:	f7fe fcc2 	bl	1fb50 <__aeabi_dsub>
   211cc:	4632      	mov	r2, r6
   211ce:	463b      	mov	r3, r7
   211d0:	f7fe fe76 	bl	1fec0 <__aeabi_dmul>
   211d4:	4b0c      	ldr	r3, [pc, #48]	; (21208 <__ieee754_asin+0x450>)
   211d6:	2200      	movs	r2, #0
   211d8:	f7fe fcbc 	bl	1fb54 <__adddf3>
   211dc:	4602      	mov	r2, r0
   211de:	460b      	mov	r3, r1
   211e0:	4640      	mov	r0, r8
   211e2:	4649      	mov	r1, r9
   211e4:	f7fe ff96 	bl	20114 <__aeabi_ddiv>
   211e8:	4622      	mov	r2, r4
   211ea:	462b      	mov	r3, r5
   211ec:	f7fe fe68 	bl	1fec0 <__aeabi_dmul>
   211f0:	4622      	mov	r2, r4
   211f2:	462b      	mov	r3, r5
   211f4:	f7fe fcae 	bl	1fb54 <__adddf3>
   211f8:	ecbd 8b04 	vpop	{d8-d9}
   211fc:	ec41 0b10 	vmov	d0, r0, r1
   21200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21204:	f3af 8000 	nop.w
   21208:	3ff00000 	.word	0x3ff00000
   2120c:	0dfdf709 	.word	0x0dfdf709
   21210:	3f023de1 	.word	0x3f023de1
   21214:	7501b288 	.word	0x7501b288
   21218:	3f49efe0 	.word	0x3f49efe0
   2121c:	b5688f3b 	.word	0xb5688f3b
   21220:	3fa48228 	.word	0x3fa48228
   21224:	0e884455 	.word	0x0e884455
   21228:	3fc9c155 	.word	0x3fc9c155
   2122c:	03eb6f7d 	.word	0x03eb6f7d
   21230:	3fd4d612 	.word	0x3fd4d612
   21234:	55555555 	.word	0x55555555
   21238:	3fc55555 	.word	0x3fc55555
   2123c:	b12e9282 	.word	0xb12e9282
   21240:	3fb3b8c5 	.word	0x3fb3b8c5
   21244:	1b8d0159 	.word	0x1b8d0159
   21248:	3fe6066c 	.word	0x3fe6066c
   2124c:	9c598ac8 	.word	0x9c598ac8
   21250:	40002ae5 	.word	0x40002ae5
   21254:	1c8a2d4b 	.word	0x1c8a2d4b
   21258:	40033a27 	.word	0x40033a27

0002125c <__ieee754_fmod>:
   2125c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21260:	ec53 2b11 	vmov	r2, r3, d1
   21264:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
   21268:	ea5e 0402 	orrs.w	r4, lr, r2
   2126c:	ec51 0b10 	vmov	r0, r1, d0
   21270:	d033      	beq.n	212da <__ieee754_fmod+0x7e>
   21272:	4c93      	ldr	r4, [pc, #588]	; (214c0 <__ieee754_fmod+0x264>)
   21274:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
   21278:	45a1      	cmp	r9, r4
   2127a:	4688      	mov	r8, r1
   2127c:	dc2d      	bgt.n	212da <__ieee754_fmod+0x7e>
   2127e:	4254      	negs	r4, r2
   21280:	4e90      	ldr	r6, [pc, #576]	; (214c4 <__ieee754_fmod+0x268>)
   21282:	4314      	orrs	r4, r2
   21284:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
   21288:	42b4      	cmp	r4, r6
   2128a:	ee11 7a10 	vmov	r7, s2
   2128e:	d824      	bhi.n	212da <__ieee754_fmod+0x7e>
   21290:	45f1      	cmp	r9, lr
   21292:	469c      	mov	ip, r3
   21294:	ee11 5a10 	vmov	r5, s2
   21298:	ee10 3a10 	vmov	r3, s0
   2129c:	4602      	mov	r2, r0
   2129e:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
   212a2:	dc06      	bgt.n	212b2 <__ieee754_fmod+0x56>
   212a4:	f2c0 80bd 	blt.w	21422 <__ieee754_fmod+0x1c6>
   212a8:	42b8      	cmp	r0, r7
   212aa:	f0c0 80ba 	bcc.w	21422 <__ieee754_fmod+0x1c6>
   212ae:	f000 80ef 	beq.w	21490 <__ieee754_fmod+0x234>
   212b2:	4984      	ldr	r1, [pc, #528]	; (214c4 <__ieee754_fmod+0x268>)
   212b4:	ea08 0101 	and.w	r1, r8, r1
   212b8:	b9c9      	cbnz	r1, 212ee <__ieee754_fmod+0x92>
   212ba:	f1b9 0f00 	cmp.w	r9, #0
   212be:	f040 80d0 	bne.w	21462 <__ieee754_fmod+0x206>
   212c2:	2b00      	cmp	r3, #0
   212c4:	4618      	mov	r0, r3
   212c6:	f340 80f8 	ble.w	214ba <__ieee754_fmod+0x25e>
   212ca:	f2a1 4113 	subw	r1, r1, #1043	; 0x413
   212ce:	0040      	lsls	r0, r0, #1
   212d0:	2800      	cmp	r0, #0
   212d2:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   212d6:	dcfa      	bgt.n	212ce <__ieee754_fmod+0x72>
   212d8:	e00d      	b.n	212f6 <__ieee754_fmod+0x9a>
   212da:	f7fe fdf1 	bl	1fec0 <__aeabi_dmul>
   212de:	4602      	mov	r2, r0
   212e0:	460b      	mov	r3, r1
   212e2:	f7fe ff17 	bl	20114 <__aeabi_ddiv>
   212e6:	ec41 0b10 	vmov	d0, r0, r1
   212ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   212ee:	ea4f 5129 	mov.w	r1, r9, asr #20
   212f2:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   212f6:	4873      	ldr	r0, [pc, #460]	; (214c4 <__ieee754_fmod+0x268>)
   212f8:	ea0c 0000 	and.w	r0, ip, r0
   212fc:	b968      	cbnz	r0, 2131a <__ieee754_fmod+0xbe>
   212fe:	f1be 0f00 	cmp.w	lr, #0
   21302:	f040 80a2 	bne.w	2144a <__ieee754_fmod+0x1ee>
   21306:	2f00      	cmp	r7, #0
   21308:	4e6f      	ldr	r6, [pc, #444]	; (214c8 <__ieee754_fmod+0x26c>)
   2130a:	4638      	mov	r0, r7
   2130c:	dd09      	ble.n	21322 <__ieee754_fmod+0xc6>
   2130e:	0040      	lsls	r0, r0, #1
   21310:	2800      	cmp	r0, #0
   21312:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   21316:	dcfa      	bgt.n	2130e <__ieee754_fmod+0xb2>
   21318:	e003      	b.n	21322 <__ieee754_fmod+0xc6>
   2131a:	ea4f 562e 	mov.w	r6, lr, asr #20
   2131e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   21322:	486a      	ldr	r0, [pc, #424]	; (214cc <__ieee754_fmod+0x270>)
   21324:	4281      	cmp	r1, r0
   21326:	db6f      	blt.n	21408 <__ieee754_fmod+0x1ac>
   21328:	f3c8 0313 	ubfx	r3, r8, #0, #20
   2132c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   21330:	4866      	ldr	r0, [pc, #408]	; (214cc <__ieee754_fmod+0x270>)
   21332:	4286      	cmp	r6, r0
   21334:	db58      	blt.n	213e8 <__ieee754_fmod+0x18c>
   21336:	f3cc 0c13 	ubfx	ip, ip, #0, #20
   2133a:	f44c 1c80 	orr.w	ip, ip, #1048576	; 0x100000
   2133e:	1bd0      	subs	r0, r2, r7
   21340:	1b89      	subs	r1, r1, r6
   21342:	d10b      	bne.n	2135c <__ieee754_fmod+0x100>
   21344:	e01d      	b.n	21382 <__ieee754_fmod+0x126>
   21346:	ea50 030e 	orrs.w	r3, r0, lr
   2134a:	d045      	beq.n	213d8 <__ieee754_fmod+0x17c>
   2134c:	ea4f 73de 	mov.w	r3, lr, lsr #31
   21350:	3901      	subs	r1, #1
   21352:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   21356:	ea4f 024e 	mov.w	r2, lr, lsl #1
   2135a:	d011      	beq.n	21380 <__ieee754_fmod+0x124>
   2135c:	eba3 000c 	sub.w	r0, r3, ip
   21360:	4295      	cmp	r5, r2
   21362:	bf88      	it	hi
   21364:	f100 30ff 	addhi.w	r0, r0, #4294967295	; 0xffffffff
   21368:	2800      	cmp	r0, #0
   2136a:	eba2 0e05 	sub.w	lr, r2, r5
   2136e:	ea4f 77d2 	mov.w	r7, r2, lsr #31
   21372:	dae8      	bge.n	21346 <__ieee754_fmod+0xea>
   21374:	3901      	subs	r1, #1
   21376:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   2137a:	ea4f 0242 	mov.w	r2, r2, lsl #1
   2137e:	d1ed      	bne.n	2135c <__ieee754_fmod+0x100>
   21380:	1b50      	subs	r0, r2, r5
   21382:	eba3 0c0c 	sub.w	ip, r3, ip
   21386:	4295      	cmp	r5, r2
   21388:	bf88      	it	hi
   2138a:	f10c 3cff 	addhi.w	ip, ip, #4294967295	; 0xffffffff
   2138e:	f1bc 0f00 	cmp.w	ip, #0
   21392:	bfa4      	itt	ge
   21394:	4602      	movge	r2, r0
   21396:	4663      	movge	r3, ip
   21398:	ea53 0102 	orrs.w	r1, r3, r2
   2139c:	d105      	bne.n	213aa <__ieee754_fmod+0x14e>
   2139e:	e01b      	b.n	213d8 <__ieee754_fmod+0x17c>
   213a0:	0fd1      	lsrs	r1, r2, #31
   213a2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   213a6:	0052      	lsls	r2, r2, #1
   213a8:	3e01      	subs	r6, #1
   213aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   213ae:	dbf7      	blt.n	213a0 <__ieee754_fmod+0x144>
   213b0:	4946      	ldr	r1, [pc, #280]	; (214cc <__ieee754_fmod+0x270>)
   213b2:	428e      	cmp	r6, r1
   213b4:	da61      	bge.n	2147a <__ieee754_fmod+0x21e>
   213b6:	1b89      	subs	r1, r1, r6
   213b8:	2914      	cmp	r1, #20
   213ba:	dc6f      	bgt.n	2149c <__ieee754_fmod+0x240>
   213bc:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   213c0:	40ca      	lsrs	r2, r1
   213c2:	fa03 f000 	lsl.w	r0, r3, r0
   213c6:	fa43 f101 	asr.w	r1, r3, r1
   213ca:	4310      	orrs	r0, r2
   213cc:	430c      	orrs	r4, r1
   213ce:	4623      	mov	r3, r4
   213d0:	4602      	mov	r2, r0
   213d2:	ec43 2b10 	vmov	d0, r2, r3
   213d6:	e788      	b.n	212ea <__ieee754_fmod+0x8e>
   213d8:	4b3d      	ldr	r3, [pc, #244]	; (214d0 <__ieee754_fmod+0x274>)
   213da:	0fe4      	lsrs	r4, r4, #31
   213dc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   213e0:	ed94 0b00 	vldr	d0, [r4]
   213e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   213e8:	1b80      	subs	r0, r0, r6
   213ea:	281f      	cmp	r0, #31
   213ec:	dd21      	ble.n	21432 <__ieee754_fmod+0x1d6>
   213ee:	4839      	ldr	r0, [pc, #228]	; (214d4 <__ieee754_fmod+0x278>)
   213f0:	1b89      	subs	r1, r1, r6
   213f2:	eba0 0c06 	sub.w	ip, r0, r6
   213f6:	fa07 fc0c 	lsl.w	ip, r7, ip
   213fa:	bf18      	it	ne
   213fc:	2500      	movne	r5, #0
   213fe:	d1ad      	bne.n	2135c <__ieee754_fmod+0x100>
   21400:	eba3 0c0c 	sub.w	ip, r3, ip
   21404:	4610      	mov	r0, r2
   21406:	e7c2      	b.n	2138e <__ieee754_fmod+0x132>
   21408:	1a40      	subs	r0, r0, r1
   2140a:	281f      	cmp	r0, #31
   2140c:	dc0c      	bgt.n	21428 <__ieee754_fmod+0x1cc>
   2140e:	fa09 f900 	lsl.w	r9, r9, r0
   21412:	fa03 f200 	lsl.w	r2, r3, r0
   21416:	f201 401e 	addw	r0, r1, #1054	; 0x41e
   2141a:	40c3      	lsrs	r3, r0
   2141c:	ea43 0309 	orr.w	r3, r3, r9
   21420:	e786      	b.n	21330 <__ieee754_fmod+0xd4>
   21422:	ec41 0b10 	vmov	d0, r0, r1
   21426:	e760      	b.n	212ea <__ieee754_fmod+0x8e>
   21428:	4a2a      	ldr	r2, [pc, #168]	; (214d4 <__ieee754_fmod+0x278>)
   2142a:	1a52      	subs	r2, r2, r1
   2142c:	4093      	lsls	r3, r2
   2142e:	2200      	movs	r2, #0
   21430:	e77e      	b.n	21330 <__ieee754_fmod+0xd4>
   21432:	fa0e fe00 	lsl.w	lr, lr, r0
   21436:	fa07 f500 	lsl.w	r5, r7, r0
   2143a:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   2143e:	fa27 f000 	lsr.w	r0, r7, r0
   21442:	ea40 0c0e 	orr.w	ip, r0, lr
   21446:	1b50      	subs	r0, r2, r5
   21448:	e77a      	b.n	21340 <__ieee754_fmod+0xe4>
   2144a:	ea4f 20ce 	mov.w	r0, lr, lsl #11
   2144e:	2800      	cmp	r0, #0
   21450:	4e1e      	ldr	r6, [pc, #120]	; (214cc <__ieee754_fmod+0x270>)
   21452:	f77f af66 	ble.w	21322 <__ieee754_fmod+0xc6>
   21456:	0040      	lsls	r0, r0, #1
   21458:	2800      	cmp	r0, #0
   2145a:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   2145e:	dcfa      	bgt.n	21456 <__ieee754_fmod+0x1fa>
   21460:	e75f      	b.n	21322 <__ieee754_fmod+0xc6>
   21462:	ea4f 20c9 	mov.w	r0, r9, lsl #11
   21466:	2800      	cmp	r0, #0
   21468:	4918      	ldr	r1, [pc, #96]	; (214cc <__ieee754_fmod+0x270>)
   2146a:	f77f af44 	ble.w	212f6 <__ieee754_fmod+0x9a>
   2146e:	0040      	lsls	r0, r0, #1
   21470:	2800      	cmp	r0, #0
   21472:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   21476:	dcfa      	bgt.n	2146e <__ieee754_fmod+0x212>
   21478:	e73d      	b.n	212f6 <__ieee754_fmod+0x9a>
   2147a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   2147e:	431c      	orrs	r4, r3
   21480:	f206 36ff 	addw	r6, r6, #1023	; 0x3ff
   21484:	ea44 5106 	orr.w	r1, r4, r6, lsl #20
   21488:	4610      	mov	r0, r2
   2148a:	ec41 0b10 	vmov	d0, r0, r1
   2148e:	e72c      	b.n	212ea <__ieee754_fmod+0x8e>
   21490:	4b0f      	ldr	r3, [pc, #60]	; (214d0 <__ieee754_fmod+0x274>)
   21492:	eb03 7414 	add.w	r4, r3, r4, lsr #28
   21496:	ed94 0b00 	vldr	d0, [r4]
   2149a:	e726      	b.n	212ea <__ieee754_fmod+0x8e>
   2149c:	291f      	cmp	r1, #31
   2149e:	dc07      	bgt.n	214b0 <__ieee754_fmod+0x254>
   214a0:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   214a4:	fa22 f101 	lsr.w	r1, r2, r1
   214a8:	4083      	lsls	r3, r0
   214aa:	ea43 0001 	orr.w	r0, r3, r1
   214ae:	e78e      	b.n	213ce <__ieee754_fmod+0x172>
   214b0:	4908      	ldr	r1, [pc, #32]	; (214d4 <__ieee754_fmod+0x278>)
   214b2:	1b89      	subs	r1, r1, r6
   214b4:	fa43 f001 	asr.w	r0, r3, r1
   214b8:	e789      	b.n	213ce <__ieee754_fmod+0x172>
   214ba:	4903      	ldr	r1, [pc, #12]	; (214c8 <__ieee754_fmod+0x26c>)
   214bc:	e71b      	b.n	212f6 <__ieee754_fmod+0x9a>
   214be:	bf00      	nop
   214c0:	7fefffff 	.word	0x7fefffff
   214c4:	7ff00000 	.word	0x7ff00000
   214c8:	fffffbed 	.word	0xfffffbed
   214cc:	fffffc02 	.word	0xfffffc02
   214d0:	000241a8 	.word	0x000241a8
   214d4:	fffffbe2 	.word	0xfffffbe2

000214d8 <__ieee754_sqrt>:
   214d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   214dc:	4a63      	ldr	r2, [pc, #396]	; (2166c <__ieee754_sqrt+0x194>)
   214de:	ec55 4b10 	vmov	r4, r5, d0
   214e2:	43aa      	bics	r2, r5
   214e4:	f000 809f 	beq.w	21626 <__ieee754_sqrt+0x14e>
   214e8:	2d00      	cmp	r5, #0
   214ea:	ee10 ca10 	vmov	ip, s0
   214ee:	462b      	mov	r3, r5
   214f0:	dd54      	ble.n	2159c <__ieee754_sqrt+0xc4>
   214f2:	1529      	asrs	r1, r5, #20
   214f4:	d063      	beq.n	215be <__ieee754_sqrt+0xe6>
   214f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   214fa:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   214fe:	07c9      	lsls	r1, r1, #31
   21500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   21504:	d404      	bmi.n	21510 <__ieee754_sqrt+0x38>
   21506:	005b      	lsls	r3, r3, #1
   21508:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   2150c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   21510:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   21514:	2600      	movs	r6, #0
   21516:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   2151a:	107f      	asrs	r7, r7, #1
   2151c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   21520:	f04f 0e16 	mov.w	lr, #22
   21524:	4634      	mov	r4, r6
   21526:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   2152a:	18a1      	adds	r1, r4, r2
   2152c:	4299      	cmp	r1, r3
   2152e:	dc02      	bgt.n	21536 <__ieee754_sqrt+0x5e>
   21530:	1a5b      	subs	r3, r3, r1
   21532:	188c      	adds	r4, r1, r2
   21534:	4416      	add	r6, r2
   21536:	005b      	lsls	r3, r3, #1
   21538:	f1be 0e01 	subs.w	lr, lr, #1
   2153c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   21540:	ea4f 0252 	mov.w	r2, r2, lsr #1
   21544:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   21548:	d1ef      	bne.n	2152a <__ieee754_sqrt+0x52>
   2154a:	4675      	mov	r5, lr
   2154c:	2020      	movs	r0, #32
   2154e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   21552:	e00a      	b.n	2156a <__ieee754_sqrt+0x92>
   21554:	d044      	beq.n	215e0 <__ieee754_sqrt+0x108>
   21556:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   2155a:	3801      	subs	r0, #1
   2155c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   21560:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   21564:	ea4f 0252 	mov.w	r2, r2, lsr #1
   21568:	d043      	beq.n	215f2 <__ieee754_sqrt+0x11a>
   2156a:	42a3      	cmp	r3, r4
   2156c:	eb02 010e 	add.w	r1, r2, lr
   21570:	ddf0      	ble.n	21554 <__ieee754_sqrt+0x7c>
   21572:	2900      	cmp	r1, #0
   21574:	eb01 0e02 	add.w	lr, r1, r2
   21578:	db0a      	blt.n	21590 <__ieee754_sqrt+0xb8>
   2157a:	46a0      	mov	r8, r4
   2157c:	1b1b      	subs	r3, r3, r4
   2157e:	4561      	cmp	r1, ip
   21580:	bf88      	it	hi
   21582:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   21586:	ebac 0c01 	sub.w	ip, ip, r1
   2158a:	4415      	add	r5, r2
   2158c:	4644      	mov	r4, r8
   2158e:	e7e2      	b.n	21556 <__ieee754_sqrt+0x7e>
   21590:	f1be 0f00 	cmp.w	lr, #0
   21594:	dbf1      	blt.n	2157a <__ieee754_sqrt+0xa2>
   21596:	f104 0801 	add.w	r8, r4, #1
   2159a:	e7ef      	b.n	2157c <__ieee754_sqrt+0xa4>
   2159c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   215a0:	4322      	orrs	r2, r4
   215a2:	d038      	beq.n	21616 <__ieee754_sqrt+0x13e>
   215a4:	2d00      	cmp	r5, #0
   215a6:	d14e      	bne.n	21646 <__ieee754_sqrt+0x16e>
   215a8:	4629      	mov	r1, r5
   215aa:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   215ae:	3915      	subs	r1, #21
   215b0:	4613      	mov	r3, r2
   215b2:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   215b6:	2a00      	cmp	r2, #0
   215b8:	d0f7      	beq.n	215aa <__ieee754_sqrt+0xd2>
   215ba:	02d6      	lsls	r6, r2, #11
   215bc:	d450      	bmi.n	21660 <__ieee754_sqrt+0x188>
   215be:	2000      	movs	r0, #0
   215c0:	005b      	lsls	r3, r3, #1
   215c2:	02dd      	lsls	r5, r3, #11
   215c4:	4604      	mov	r4, r0
   215c6:	f100 0001 	add.w	r0, r0, #1
   215ca:	d5f9      	bpl.n	215c0 <__ieee754_sqrt+0xe8>
   215cc:	461a      	mov	r2, r3
   215ce:	4663      	mov	r3, ip
   215d0:	fa0c fc00 	lsl.w	ip, ip, r0
   215d4:	f1c0 0020 	rsb	r0, r0, #32
   215d8:	40c3      	lsrs	r3, r0
   215da:	1b09      	subs	r1, r1, r4
   215dc:	4313      	orrs	r3, r2
   215de:	e78a      	b.n	214f6 <__ieee754_sqrt+0x1e>
   215e0:	4561      	cmp	r1, ip
   215e2:	d8b8      	bhi.n	21556 <__ieee754_sqrt+0x7e>
   215e4:	2900      	cmp	r1, #0
   215e6:	eb01 0e02 	add.w	lr, r1, r2
   215ea:	dbd1      	blt.n	21590 <__ieee754_sqrt+0xb8>
   215ec:	4698      	mov	r8, r3
   215ee:	2300      	movs	r3, #0
   215f0:	e7c9      	b.n	21586 <__ieee754_sqrt+0xae>
   215f2:	ea53 030c 	orrs.w	r3, r3, ip
   215f6:	d110      	bne.n	2161a <__ieee754_sqrt+0x142>
   215f8:	0868      	lsrs	r0, r5, #1
   215fa:	1071      	asrs	r1, r6, #1
   215fc:	07f3      	lsls	r3, r6, #31
   215fe:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   21602:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   21606:	bf48      	it	mi
   21608:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   2160c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   21610:	4602      	mov	r2, r0
   21612:	ec43 2b10 	vmov	d0, r2, r3
   21616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2161a:	1c6a      	adds	r2, r5, #1
   2161c:	bf16      	itet	ne
   2161e:	1c68      	addne	r0, r5, #1
   21620:	3601      	addeq	r6, #1
   21622:	0840      	lsrne	r0, r0, #1
   21624:	e7e9      	b.n	215fa <__ieee754_sqrt+0x122>
   21626:	ee10 2a10 	vmov	r2, s0
   2162a:	ee10 0a10 	vmov	r0, s0
   2162e:	462b      	mov	r3, r5
   21630:	4629      	mov	r1, r5
   21632:	f7fe fc45 	bl	1fec0 <__aeabi_dmul>
   21636:	4622      	mov	r2, r4
   21638:	462b      	mov	r3, r5
   2163a:	f7fe fa8b 	bl	1fb54 <__adddf3>
   2163e:	ec41 0b10 	vmov	d0, r0, r1
   21642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21646:	ee10 2a10 	vmov	r2, s0
   2164a:	4620      	mov	r0, r4
   2164c:	4629      	mov	r1, r5
   2164e:	f7fe fa7f 	bl	1fb50 <__aeabi_dsub>
   21652:	4602      	mov	r2, r0
   21654:	460b      	mov	r3, r1
   21656:	f7fe fd5d 	bl	20114 <__aeabi_ddiv>
   2165a:	ec41 0b10 	vmov	d0, r0, r1
   2165e:	e7da      	b.n	21616 <__ieee754_sqrt+0x13e>
   21660:	4663      	mov	r3, ip
   21662:	2020      	movs	r0, #32
   21664:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   21668:	e7b6      	b.n	215d8 <__ieee754_sqrt+0x100>
   2166a:	bf00      	nop
   2166c:	7ff00000 	.word	0x7ff00000

00021670 <__ieee754_log10f>:
   21670:	b508      	push	{r3, lr}
   21672:	ee10 3a10 	vmov	r3, s0
   21676:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   2167a:	ed2d 8b02 	vpush	{d8}
   2167e:	d02b      	beq.n	216d8 <__ieee754_log10f+0x68>
   21680:	2b00      	cmp	r3, #0
   21682:	db32      	blt.n	216ea <__ieee754_log10f+0x7a>
   21684:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   21688:	da41      	bge.n	2170e <__ieee754_log10f+0x9e>
   2168a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   2168e:	db35      	blt.n	216fc <__ieee754_log10f+0x8c>
   21690:	2100      	movs	r1, #0
   21692:	15da      	asrs	r2, r3, #23
   21694:	3a7f      	subs	r2, #127	; 0x7f
   21696:	440a      	add	r2, r1
   21698:	0fd1      	lsrs	r1, r2, #31
   2169a:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
   2169e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   216a2:	f3c3 0316 	ubfx	r3, r3, #0, #23
   216a6:	ee07 2a90 	vmov	s15, r2
   216aa:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
   216ae:	ee00 3a10 	vmov	s0, r3
   216b2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   216b6:	f000 f849 	bl	2174c <__ieee754_logf>
   216ba:	eddf 7a17 	vldr	s15, [pc, #92]	; 21718 <__ieee754_log10f+0xa8>
   216be:	ed9f 7a17 	vldr	s14, [pc, #92]	; 2171c <__ieee754_log10f+0xac>
   216c2:	ee20 0a27 	vmul.f32	s0, s0, s15
   216c6:	eddf 7a16 	vldr	s15, [pc, #88]	; 21720 <__ieee754_log10f+0xb0>
   216ca:	eea8 0a07 	vfma.f32	s0, s16, s14
   216ce:	eea8 0a27 	vfma.f32	s0, s16, s15
   216d2:	ecbd 8b02 	vpop	{d8}
   216d6:	bd08      	pop	{r3, pc}
   216d8:	ecbd 8b02 	vpop	{d8}
   216dc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 21724 <__ieee754_log10f+0xb4>
   216e0:	eddf 7a11 	vldr	s15, [pc, #68]	; 21728 <__ieee754_log10f+0xb8>
   216e4:	ee87 0a27 	vdiv.f32	s0, s14, s15
   216e8:	bd08      	pop	{r3, pc}
   216ea:	ecbd 8b02 	vpop	{d8}
   216ee:	ee70 7a40 	vsub.f32	s15, s0, s0
   216f2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 21728 <__ieee754_log10f+0xb8>
   216f6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   216fa:	bd08      	pop	{r3, pc}
   216fc:	eddf 7a0b 	vldr	s15, [pc, #44]	; 2172c <__ieee754_log10f+0xbc>
   21700:	ee60 7a27 	vmul.f32	s15, s0, s15
   21704:	f06f 0118 	mvn.w	r1, #24
   21708:	ee17 3a90 	vmov	r3, s15
   2170c:	e7c1      	b.n	21692 <__ieee754_log10f+0x22>
   2170e:	ecbd 8b02 	vpop	{d8}
   21712:	ee30 0a00 	vadd.f32	s0, s0, s0
   21716:	bd08      	pop	{r3, pc}
   21718:	3ede5bd9 	.word	0x3ede5bd9
   2171c:	355427db 	.word	0x355427db
   21720:	3e9a2080 	.word	0x3e9a2080
   21724:	cc000000 	.word	0xcc000000
   21728:	00000000 	.word	0x00000000
   2172c:	4c000000 	.word	0x4c000000

00021730 <nan>:
   21730:	ed9f 0b01 	vldr	d0, [pc, #4]	; 21738 <nan+0x8>
   21734:	4770      	bx	lr
   21736:	bf00      	nop
   21738:	00000000 	.word	0x00000000
   2173c:	7ff80000 	.word	0x7ff80000

00021740 <nanf>:
   21740:	ed9f 0a01 	vldr	s0, [pc, #4]	; 21748 <nanf+0x8>
   21744:	4770      	bx	lr
   21746:	bf00      	nop
   21748:	7fc00000 	.word	0x7fc00000

0002174c <__ieee754_logf>:
   2174c:	ee10 3a10 	vmov	r3, s0
   21750:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   21754:	d02e      	beq.n	217b4 <__ieee754_logf+0x68>
   21756:	2b00      	cmp	r3, #0
   21758:	db33      	blt.n	217c2 <__ieee754_logf+0x76>
   2175a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   2175e:	da40      	bge.n	217e2 <__ieee754_logf+0x96>
   21760:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   21764:	db34      	blt.n	217d0 <__ieee754_logf+0x84>
   21766:	f04f 0c00 	mov.w	ip, #0
   2176a:	4868      	ldr	r0, [pc, #416]	; (2190c <__ieee754_logf+0x1c0>)
   2176c:	f3c3 0116 	ubfx	r1, r3, #0, #23
   21770:	4408      	add	r0, r1
   21772:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   21776:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   2177a:	430a      	orrs	r2, r1
   2177c:	15db      	asrs	r3, r3, #23
   2177e:	ee00 2a10 	vmov	s0, r2
   21782:	3b7f      	subs	r3, #127	; 0x7f
   21784:	4a62      	ldr	r2, [pc, #392]	; (21910 <__ieee754_logf+0x1c4>)
   21786:	4463      	add	r3, ip
   21788:	f101 0c0f 	add.w	ip, r1, #15
   2178c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   21790:	ea0c 0202 	and.w	r2, ip, r2
   21794:	ee30 0a67 	vsub.f32	s0, s0, s15
   21798:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   2179c:	bb22      	cbnz	r2, 217e8 <__ieee754_logf+0x9c>
   2179e:	eeb5 0a40 	vcmp.f32	s0, #0.0
   217a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   217a6:	d160      	bne.n	2186a <__ieee754_logf+0x11e>
   217a8:	2b00      	cmp	r3, #0
   217aa:	f040 8092 	bne.w	218d2 <__ieee754_logf+0x186>
   217ae:	ed9f 0a59 	vldr	s0, [pc, #356]	; 21914 <__ieee754_logf+0x1c8>
   217b2:	4770      	bx	lr
   217b4:	ed9f 7a58 	vldr	s14, [pc, #352]	; 21918 <__ieee754_logf+0x1cc>
   217b8:	eddf 7a56 	vldr	s15, [pc, #344]	; 21914 <__ieee754_logf+0x1c8>
   217bc:	ee87 0a27 	vdiv.f32	s0, s14, s15
   217c0:	4770      	bx	lr
   217c2:	ee70 7a40 	vsub.f32	s15, s0, s0
   217c6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 21914 <__ieee754_logf+0x1c8>
   217ca:	ee87 0a87 	vdiv.f32	s0, s15, s14
   217ce:	4770      	bx	lr
   217d0:	eddf 7a52 	vldr	s15, [pc, #328]	; 2191c <__ieee754_logf+0x1d0>
   217d4:	ee60 7a27 	vmul.f32	s15, s0, s15
   217d8:	f06f 0c18 	mvn.w	ip, #24
   217dc:	ee17 3a90 	vmov	r3, s15
   217e0:	e7c3      	b.n	2176a <__ieee754_logf+0x1e>
   217e2:	ee30 0a00 	vadd.f32	s0, s0, s0
   217e6:	4770      	bx	lr
   217e8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   217ec:	ee70 7a27 	vadd.f32	s15, s0, s15
   217f0:	ee07 3a10 	vmov	s14, r3
   217f4:	ee80 4a27 	vdiv.f32	s8, s0, s15
   217f8:	4849      	ldr	r0, [pc, #292]	; (21920 <__ieee754_logf+0x1d4>)
   217fa:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   217fe:	4408      	add	r0, r1
   21800:	f502 7222 	add.w	r2, r2, #648	; 0x288
   21804:	4302      	orrs	r2, r0
   21806:	2a00      	cmp	r2, #0
   21808:	ed9f 3a46 	vldr	s6, [pc, #280]	; 21924 <__ieee754_logf+0x1d8>
   2180c:	eddf 4a46 	vldr	s9, [pc, #280]	; 21928 <__ieee754_logf+0x1dc>
   21810:	eddf 5a46 	vldr	s11, [pc, #280]	; 2192c <__ieee754_logf+0x1e0>
   21814:	eddf 3a46 	vldr	s7, [pc, #280]	; 21930 <__ieee754_logf+0x1e4>
   21818:	ed9f 5a46 	vldr	s10, [pc, #280]	; 21934 <__ieee754_logf+0x1e8>
   2181c:	eddf 7a46 	vldr	s15, [pc, #280]	; 21938 <__ieee754_logf+0x1ec>
   21820:	eddf 6a46 	vldr	s13, [pc, #280]	; 2193c <__ieee754_logf+0x1f0>
   21824:	ee24 6a04 	vmul.f32	s12, s8, s8
   21828:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   2182c:	ee26 7a06 	vmul.f32	s14, s12, s12
   21830:	eee7 4a03 	vfma.f32	s9, s14, s6
   21834:	eea7 5a23 	vfma.f32	s10, s14, s7
   21838:	eee4 5a87 	vfma.f32	s11, s9, s14
   2183c:	eee5 6a07 	vfma.f32	s13, s10, s14
   21840:	eee5 7a87 	vfma.f32	s15, s11, s14
   21844:	ee67 7a86 	vmul.f32	s15, s15, s12
   21848:	eee6 7a87 	vfma.f32	s15, s13, s14
   2184c:	dd2a      	ble.n	218a4 <__ieee754_logf+0x158>
   2184e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   21852:	ee20 7a07 	vmul.f32	s14, s0, s14
   21856:	ee27 7a00 	vmul.f32	s14, s14, s0
   2185a:	bb4b      	cbnz	r3, 218b0 <__ieee754_logf+0x164>
   2185c:	ee77 7a87 	vadd.f32	s15, s15, s14
   21860:	eea7 7ac4 	vfms.f32	s14, s15, s8
   21864:	ee30 0a47 	vsub.f32	s0, s0, s14
   21868:	4770      	bx	lr
   2186a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   2186e:	eddf 6a34 	vldr	s13, [pc, #208]	; 21940 <__ieee754_logf+0x1f4>
   21872:	eef0 7a47 	vmov.f32	s15, s14
   21876:	eee0 7a66 	vfms.f32	s15, s0, s13
   2187a:	ee20 7a00 	vmul.f32	s14, s0, s0
   2187e:	ee27 7a27 	vmul.f32	s14, s14, s15
   21882:	2b00      	cmp	r3, #0
   21884:	d0ee      	beq.n	21864 <__ieee754_logf+0x118>
   21886:	ee07 3a90 	vmov	s15, r3
   2188a:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 21944 <__ieee754_logf+0x1f8>
   2188e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 21948 <__ieee754_logf+0x1fc>
   21892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   21896:	eea7 7ac6 	vfms.f32	s14, s15, s12
   2189a:	ee37 0a40 	vsub.f32	s0, s14, s0
   2189e:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   218a2:	4770      	bx	lr
   218a4:	bb13      	cbnz	r3, 218ec <__ieee754_logf+0x1a0>
   218a6:	ee70 7a67 	vsub.f32	s15, s0, s15
   218aa:	eea7 0ac4 	vfms.f32	s0, s15, s8
   218ae:	4770      	bx	lr
   218b0:	eddf 6a24 	vldr	s13, [pc, #144]	; 21944 <__ieee754_logf+0x1f8>
   218b4:	ed9f 6a24 	vldr	s12, [pc, #144]	; 21948 <__ieee754_logf+0x1fc>
   218b8:	ee77 7a87 	vadd.f32	s15, s15, s14
   218bc:	ee62 6aa6 	vmul.f32	s13, s5, s13
   218c0:	eee7 6a84 	vfma.f32	s13, s15, s8
   218c4:	ee37 7a66 	vsub.f32	s14, s14, s13
   218c8:	ee37 0a40 	vsub.f32	s0, s14, s0
   218cc:	ee92 0a86 	vfnms.f32	s0, s5, s12
   218d0:	4770      	bx	lr
   218d2:	ee07 3a90 	vmov	s15, r3
   218d6:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 21944 <__ieee754_logf+0x1f8>
   218da:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 21948 <__ieee754_logf+0x1fc>
   218de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   218e2:	ee27 0a80 	vmul.f32	s0, s15, s0
   218e6:	eea7 0a87 	vfma.f32	s0, s15, s14
   218ea:	4770      	bx	lr
   218ec:	ed9f 7a15 	vldr	s14, [pc, #84]	; 21944 <__ieee754_logf+0x1f8>
   218f0:	eddf 6a15 	vldr	s13, [pc, #84]	; 21948 <__ieee754_logf+0x1fc>
   218f4:	ee70 7a67 	vsub.f32	s15, s0, s15
   218f8:	ee27 7a62 	vnmul.f32	s14, s14, s5
   218fc:	eea7 7a84 	vfma.f32	s14, s15, s8
   21900:	ee37 0a40 	vsub.f32	s0, s14, s0
   21904:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   21908:	4770      	bx	lr
   2190a:	bf00      	nop
   2190c:	004afb20 	.word	0x004afb20
   21910:	007ffff0 	.word	0x007ffff0
   21914:	00000000 	.word	0x00000000
   21918:	cc000000 	.word	0xcc000000
   2191c:	4c000000 	.word	0x4c000000
   21920:	ffcf5c30 	.word	0xffcf5c30
   21924:	3e178897 	.word	0x3e178897
   21928:	3e3a3325 	.word	0x3e3a3325
   2192c:	3e924925 	.word	0x3e924925
   21930:	3e1cd04f 	.word	0x3e1cd04f
   21934:	3e638e29 	.word	0x3e638e29
   21938:	3f2aaaab 	.word	0x3f2aaaab
   2193c:	3ecccccd 	.word	0x3ecccccd
   21940:	3eaaaaab 	.word	0x3eaaaaab
   21944:	3717f7d1 	.word	0x3717f7d1
   21948:	3f317180 	.word	0x3f317180

0002194c <__errno>:
   2194c:	4b01      	ldr	r3, [pc, #4]	; (21954 <__errno+0x8>)
   2194e:	6818      	ldr	r0, [r3, #0]
   21950:	4770      	bx	lr
   21952:	bf00      	nop
   21954:	20000fa0 	.word	0x20000fa0
   21958:	7475227b 	.word	0x7475227b
   2195c:	22656d69 	.word	0x22656d69
   21960:	6c25203a 	.word	0x6c25203a
   21964:	6d222c75 	.word	0x6d222c75
   21968:	3a226773 	.word	0x3a226773
   2196c:	6c732220 	.word	0x6c732220
   21970:	695f746f 	.word	0x695f746f
   21974:	203d2064 	.word	0x203d2064
   21978:	7d226425 	.word	0x7d226425
   2197c:	227b000a 	.word	0x227b000a
   21980:	6d697475 	.word	0x6d697475
   21984:	203a2265 	.word	0x203a2265
   21988:	2c756c25 	.word	0x2c756c25
   2198c:	67736d22 	.word	0x67736d22
   21990:	22203a22 	.word	0x22203a22
   21994:	64697565 	.word	0x64697565
   21998:	3d203631 	.word	0x3d203631
   2199c:	25783020 	.word	0x25783020
   219a0:	0a7d2258 	.word	0x0a7d2258
   219a4:	00          	.byte	0x00
   219a5:	7b          	.byte	0x7b
   219a6:	7522      	.short	0x7522
   219a8:	656d6974 	.word	0x656d6974
   219ac:	25203a22 	.word	0x25203a22
   219b0:	222c756c 	.word	0x222c756c
   219b4:	2267736d 	.word	0x2267736d
   219b8:	7322203a 	.word	0x7322203a
   219bc:	5f746f6c 	.word	0x5f746f6c
   219c0:	656d6974 	.word	0x656d6974
   219c4:	62635f72 	.word	0x62635f72
   219c8:	3a64255f 	.word	0x3a64255f
   219cc:	72617473 	.word	0x72617473
   219d0:	78745f74 	.word	0x78745f74
   219d4:	7272655f 	.word	0x7272655f
   219d8:	7d22726f 	.word	0x7d22726f
   219dc:	000a      	.short	0x000a
   219de:	7061      	.short	0x7061
   219e0:	742f7370 	.word	0x742f7370
   219e4:	6e5f7277 	.word	0x6e5f7277
   219e8:	676e6172 	.word	0x676e6172
   219ec:	745f7365 	.word	0x745f7365
   219f0:	2f616d64 	.word	0x2f616d64
   219f4:	2f637273 	.word	0x2f637273
   219f8:	6e69616d 	.word	0x6e69616d
   219fc:	7b00632e 	.word	0x7b00632e
   21a00:	69747522 	.word	0x69747522
   21a04:	3a22656d 	.word	0x3a22656d
   21a08:	756c2520 	.word	0x756c2520
   21a0c:	7865222c 	.word	0x7865222c
   21a10:	3a226365 	.word	0x3a226365
   21a14:	73252220 	.word	0x73252220
   21a18:	000a7d22 	.word	0x000a7d22
   21a1c:	6564227b 	.word	0x6564227b
   21a20:	65636976 	.word	0x65636976
   21a24:	2264695f 	.word	0x2264695f
   21a28:	6c25223a 	.word	0x6c25223a
   21a2c:	2c002258 	.word	0x2c002258
   21a30:	6e617022 	.word	0x6e617022
   21a34:	3a226469 	.word	0x3a226469
   21a38:	22582522 	.word	0x22582522
   21a3c:	61222c00 	.word	0x61222c00
   21a40:	22726464 	.word	0x22726464
   21a44:	5825223a 	.word	0x5825223a
   21a48:	222c0022 	.word	0x222c0022
   21a4c:	74726170 	.word	0x74726170
   21a50:	2264695f 	.word	0x2264695f
   21a54:	6c25223a 	.word	0x6c25223a
   21a58:	2c002258 	.word	0x2c002258
   21a5c:	746f6c22 	.word	0x746f6c22
   21a60:	2264695f 	.word	0x2264695f
   21a64:	6c25223a 	.word	0x6c25223a
   21a68:	0a7d2258 	.word	0x0a7d2258
   21a6c:	75227b00 	.word	0x75227b00
   21a70:	656d6974 	.word	0x656d6974
   21a74:	25203a22 	.word	0x25203a22
   21a78:	222c756c 	.word	0x222c756c
   21a7c:	2267736d 	.word	0x2267736d
   21a80:	6622203a 	.word	0x6622203a
   21a84:	656d6172 	.word	0x656d6172
   21a88:	7275645f 	.word	0x7275645f
   21a8c:	6f697461 	.word	0x6f697461
   21a90:	203d206e 	.word	0x203d206e
   21a94:	75206425 	.word	0x75206425
   21a98:	22636573 	.word	0x22636573
   21a9c:	7b000a7d 	.word	0x7b000a7d
   21aa0:	69747522 	.word	0x69747522
   21aa4:	3a22656d 	.word	0x3a22656d
   21aa8:	756c2520 	.word	0x756c2520
   21aac:	736d222c 	.word	0x736d222c
   21ab0:	203a2267 	.word	0x203a2267
   21ab4:	52485322 	.word	0x52485322
   21ab8:	7275645f 	.word	0x7275645f
   21abc:	6f697461 	.word	0x6f697461
   21ac0:	203d206e 	.word	0x203d206e
   21ac4:	75206425 	.word	0x75206425
   21ac8:	22636573 	.word	0x22636573
   21acc:	7b000a7d 	.word	0x7b000a7d
   21ad0:	69747522 	.word	0x69747522
   21ad4:	3a22656d 	.word	0x3a22656d
   21ad8:	756c2520 	.word	0x756c2520
   21adc:	736d222c 	.word	0x736d222c
   21ae0:	203a2267 	.word	0x203a2267
   21ae4:	6c6f6822 	.word	0x6c6f6822
   21ae8:	66666f64 	.word	0x66666f64
   21aec:	25203d20 	.word	0x25203d20
   21af0:	73752064 	.word	0x73752064
   21af4:	7d226365 	.word	0x7d226365
   21af8:	000a      	.short	0x000a
   21afa:	7764      	.short	0x7764
   21afc:	30303031 	.word	0x30303031
   21b00:	0064255f 	.word	0x0064255f
   21b04:	30337764 	.word	0x30337764
   21b08:	255f3030 	.word	0x255f3030
   21b0c:	0064      	.short	0x0064
   21b0e:	7775      	.short	0x7775
   21b10:	72695f62 	.word	0x72695f62
   21b14:	0071      	.short	0x0071
   21b16:	7341      	.short	0x7341
   21b18:	74726573 	.word	0x74726573
   21b1c:	30204020 	.word	0x30204020
   21b20:	0a782578 	.word	0x0a782578
   21b24:	73734100 	.word	0x73734100
   21b28:	20747265 	.word	0x20747265
   21b2c:	78302040 	.word	0x78302040
   21b30:	2d207825 	.word	0x2d207825
   21b34:	3a732520 	.word	0x3a732520
   21b38:	000a6425 	.word	0x000a6425
   21b3c:	61686e55 	.word	0x61686e55
   21b40:	656c646e 	.word	0x656c646e
   21b44:	6e692064 	.word	0x6e692064
   21b48:	72726574 	.word	0x72726574
   21b4c:	20747075 	.word	0x20747075
   21b50:	646c2528 	.word	0x646c2528
   21b54:	65202c29 	.word	0x65202c29
   21b58:	70656378 	.word	0x70656378
   21b5c:	6e6f6974 	.word	0x6e6f6974
   21b60:	20707320 	.word	0x20707320
   21b64:	30257830 	.word	0x30257830
   21b68:	0a786c38 	.word	0x0a786c38
   21b6c:	30722000 	.word	0x30722000
   21b70:	2578303a 	.word	0x2578303a
   21b74:	786c3830 	.word	0x786c3830
   21b78:	31722020 	.word	0x31722020
   21b7c:	2578303a 	.word	0x2578303a
   21b80:	786c3830 	.word	0x786c3830
   21b84:	32722020 	.word	0x32722020
   21b88:	2578303a 	.word	0x2578303a
   21b8c:	786c3830 	.word	0x786c3830
   21b90:	33722020 	.word	0x33722020
   21b94:	2578303a 	.word	0x2578303a
   21b98:	786c3830 	.word	0x786c3830
   21b9c:	7220000a 	.word	0x7220000a
   21ba0:	78303a34 	.word	0x78303a34
   21ba4:	6c383025 	.word	0x6c383025
   21ba8:	72202078 	.word	0x72202078
   21bac:	78303a35 	.word	0x78303a35
   21bb0:	6c383025 	.word	0x6c383025
   21bb4:	72202078 	.word	0x72202078
   21bb8:	78303a36 	.word	0x78303a36
   21bbc:	6c383025 	.word	0x6c383025
   21bc0:	72202078 	.word	0x72202078
   21bc4:	78303a37 	.word	0x78303a37
   21bc8:	6c383025 	.word	0x6c383025
   21bcc:	20000a78 	.word	0x20000a78
   21bd0:	303a3872 	.word	0x303a3872
   21bd4:	38302578 	.word	0x38302578
   21bd8:	2020786c 	.word	0x2020786c
   21bdc:	303a3972 	.word	0x303a3972
   21be0:	38302578 	.word	0x38302578
   21be4:	7220786c 	.word	0x7220786c
   21be8:	303a3031 	.word	0x303a3031
   21bec:	38302578 	.word	0x38302578
   21bf0:	7220786c 	.word	0x7220786c
   21bf4:	303a3131 	.word	0x303a3131
   21bf8:	38302578 	.word	0x38302578
   21bfc:	000a786c 	.word	0x000a786c
   21c00:	3a323172 	.word	0x3a323172
   21c04:	30257830 	.word	0x30257830
   21c08:	20786c38 	.word	0x20786c38
   21c0c:	3a726c20 	.word	0x3a726c20
   21c10:	30257830 	.word	0x30257830
   21c14:	20786c38 	.word	0x20786c38
   21c18:	3a637020 	.word	0x3a637020
   21c1c:	30257830 	.word	0x30257830
   21c20:	20786c38 	.word	0x20786c38
   21c24:	3a727370 	.word	0x3a727370
   21c28:	30257830 	.word	0x30257830
   21c2c:	0a786c38 	.word	0x0a786c38
   21c30:	53434900 	.word	0x53434900
   21c34:	78303a52 	.word	0x78303a52
   21c38:	6c383025 	.word	0x6c383025
   21c3c:	46482078 	.word	0x46482078
   21c40:	303a5253 	.word	0x303a5253
   21c44:	38302578 	.word	0x38302578
   21c48:	4320786c 	.word	0x4320786c
   21c4c:	3a525346 	.word	0x3a525346
   21c50:	30257830 	.word	0x30257830
   21c54:	0a786c38 	.word	0x0a786c38
   21c58:	41464200 	.word	0x41464200
   21c5c:	78303a52 	.word	0x78303a52
   21c60:	6c383025 	.word	0x6c383025
   21c64:	4d4d2078 	.word	0x4d4d2078
   21c68:	3a524146 	.word	0x3a524146
   21c6c:	30257830 	.word	0x30257830
   21c70:	0a786c38 	.word	0x0a786c38
   21c74:	00          	.byte	0x00
   21c75:	69          	.byte	0x69
   21c76:	6c64      	.short	0x6c64
   21c78:	0065      	.short	0x0065
   21c7a:	616d      	.short	0x616d
   21c7c:	6e69      	.short	0x6e69
   21c7e:	00          	.byte	0x00
   21c7f:	6d          	.byte	0x6d
   21c80:	5f737973 	.word	0x5f737973
   21c84:	0031      	.short	0x0031
   21c86:	5245      	.short	0x5245
   21c88:	4d454d52 	.word	0x4d454d52
   21c8c:	0a642520 	.word	0x0a642520
   21c90:	00          	.byte	0x00
   21c91:	7b          	.byte	0x7b
   21c92:	7522      	.short	0x7522
   21c94:	656d6974 	.word	0x656d6974
   21c98:	25203a22 	.word	0x25203a22
   21c9c:	222c756c 	.word	0x222c756c
   21ca0:	2267736d 	.word	0x2267736d
   21ca4:	6e22203a 	.word	0x6e22203a
   21ca8:	5f72676d 	.word	0x5f72676d
   21cac:	5f627775 	.word	0x5f627775
   21cb0:	74696e69 	.word	0x74696e69
   21cb4:	000a7d22 	.word	0x000a7d22
   21cb8:	20425755 	.word	0x20425755
   21cbc:	52474d4e 	.word	0x52474d4e
   21cc0:	3a78745f 	.word	0x3a78745f
   21cc4:	20785420 	.word	0x20785420
   21cc8:	6f727245 	.word	0x6f727245
   21ccc:	2072      	.short	0x2072
   21cce:	00          	.byte	0x00
   21ccf:	23          	.byte	0x23
   21cd0:	23232323 	.word	0x23232323
   21cd4:	52524520 	.word	0x52524520
   21cd8:	7520524f 	.word	0x7520524f
   21cdc:	6e5f6277 	.word	0x6e5f6277
   21ce0:	5f72676d 	.word	0x5f72676d
   21ce4:	78652071 	.word	0x78652071
   21ce8:	61665f74 	.word	0x61665f74
   21cec:	64656c69 	.word	0x64656c69
   21cf0:	23232300 	.word	0x23232300
   21cf4:	45202323 	.word	0x45202323
   21cf8:	524f5252 	.word	0x524f5252
   21cfc:	62777520 	.word	0x62777520
   21d00:	676d6e5f 	.word	0x676d6e5f
   21d04:	20715f72 	.word	0x20715f72
   21d08:	253a6372 	.word	0x253a6372
   21d0c:	0a64      	.short	0x0a64
   21d0e:	00          	.byte	0x00
   21d0f:	7b          	.byte	0x7b
   21d10:	69747522 	.word	0x69747522
   21d14:	3a22656d 	.word	0x3a22656d
   21d18:	756c2520 	.word	0x756c2520
   21d1c:	736d222c 	.word	0x736d222c
   21d20:	203a2267 	.word	0x203a2267
   21d24:	6e726e22 	.word	0x6e726e22
   21d28:	6b705f67 	.word	0x6b705f67
   21d2c:	6e695f67 	.word	0x6e695f67
   21d30:	7d227469 	.word	0x7d227469
   21d34:	000a      	.short	0x000a
   21d36:	726e      	.short	0x726e
   21d38:	725f676e 	.word	0x725f676e
   21d3c:	65757165 	.word	0x65757165
   21d40:	6e007473 	.word	0x6e007473
   21d44:	5f676e72 	.word	0x5f676e72
   21d48:	7473696c 	.word	0x7473696c
   21d4c:	72006e65 	.word	0x72006e65
   21d50:	6f635f78 	.word	0x6f635f78
   21d54:	656c706d 	.word	0x656c706d
   21d58:	72006574 	.word	0x72006574
   21d5c:	69745f78 	.word	0x69745f78
   21d60:	756f656d 	.word	0x756f656d
   21d64:	74730074 	.word	0x74730074
   21d68:	5f747261 	.word	0x5f747261
   21d6c:	655f7872 	.word	0x655f7872
   21d70:	726f7272 	.word	0x726f7272
   21d74:	5f787200 	.word	0x5f787200
   21d78:	6f736e75 	.word	0x6f736e75
   21d7c:	6963696c 	.word	0x6963696c
   21d80:	00646574 	.word	0x00646574
   21d84:	72617473 	.word	0x72617473
   21d88:	78745f74 	.word	0x78745f74
   21d8c:	7272655f 	.word	0x7272655f
   21d90:	726f      	.short	0x726f
	...

00021d93 <g_stats_map_nrng_stat_section>:
   21d93:	0014 1d36 0002 0018 1d43 0002 001c 1d4f     ..6.....C.....O.
   21da3:	0002 0028 1d6c 0002 0020 1d5b 0002 0024     ..(.l... .[...$.
   21db3:	1d52 0002 002c 1d66 0002 0030 1d75 0002     R...,.f...0.u...
   21dc3:	0034 1d8a 0002 0038 1d84 0002 003c 3c7e     4.....8.....<.~<
   21dd3:	0002 7475 6d69 0065 6573 0071 756f 6469     ..utime.seq.ouid
   21de3:	0000 7000 6e61 736d 7274 702f 6e61 695f     ...panmstr/pan_i
   21df3:	0064 6170 6d6e 203a 6f6e 6564 7520 6470     d.panm: node upd
   21e03:	000a 6170 6d6e 203a 6f6e 6564 6120 6464     ..panm: node add
   21e13:	6465 000a 7544 6c70 7320 6f68 7472 6120     ed..Dupl short a
   21e23:	6464 2072 7825 000a 6170 6d6e 7361 6574     ddr %x..panmaste
   21e33:	5f72 6564 656c 6574 6e5f 646f 3a65 6e20     r_delete_node: n
   21e43:	646f 2065 6564 656c 6574 0a64 7000 6e61     ode deleted..pan
   21e53:	736d 7274 2500 6433 2520 3430 2078 3025     mstr.%3d %04x %0
   21e63:	3631 6c6c 2078 7825 2520 2078 6425 2520     16llx %x %x %d %
   21e73:	2064 5400 6f6f 6620 7765 6120 6772 0a73     d .Too few args.
   21e83:	6500 7272 6d3a 6d65 000a 6923 7864 202c     .err:mem..#idx, 
   21e93:	6461 7264 202c 6f72 656c 202c 6c73 746f     addr, role, slot
   21ea3:	202c 2c70 2020 656c 7361 2c65 6520 6975     , p,  lease, eui
   21eb3:	2c64 2020 2020 2020 2020 2020 2020 6620     d,             f
   21ec3:	616c 7367 202c 2020 2020 2020 2020 6420     lags,          d
   21ed3:	7461 2d65 6461 6564 2c64 6620 2d77 6576     ate-added, fw-ve
   21ee3:	0a72 2500 6434 202c 2500 7834 202c 2500     r..%4d, .%4x, .%
   21ef3:	5834 202c 2500 2c73 0020 3425 646c 252e     4X, .%s, .%4ld.%
   21f03:	646c 202c 2000 2020 2020 2c20 0020 3025     ld, .      , .%0
   21f13:	3631 6c6c 2c58 0020 3525 2c58 0020 6461     16llX, .%5X, .ad
   21f23:	0064 7565 6469 6e20 6565 6564 0a64 4100     d.euid needed..A
   21f33:	6464 6465 6e20 646f 2065 7565 6469 203a     dded node euid: 
   21f43:	7830 6c25 586c 202c 6461 7264 3020 2578     0x%llX, addr 0x%
   21f53:	0a58 4100 6464 6e20 646f 2065 7265 0a72     X..Add node err.
   21f63:	6400 6c65 7000 6c73 746f 6500 6975 2b64     .del.pslot.euid+
   21f73:	6c73 746f 695f 2064 656e 6465 6465 000a     slot_id needed..
   21f83:	7830 6c25 586c 203a 7370 6f6c 2074 3e2d     0x%llX: pslot ->
   21f93:	0020 723c 6d65 766f 6465 0a3e 7200 6c6f      .<removed>..rol
   21fa3:	0065 7565 6469 722b 6c6f 2065 656e 6465     e.euid+role need
   21fb3:	6465 000a 7830 6c25 586c 203a 6f72 656c     ed..0x%llX: role
   21fc3:	2d20 203e 6425 200a 6300 656c 7261 6300      -> %d. .clear.c
   21fd3:	6d6f 7270 7300 726f 0074 7564 706d 2300     ompr.sort.dump.#
   21fe3:	6920 646e 7865 6120 6464 2072 7565 6469      index addr euid
   21ff3:	6620 616c 7367 7220 6c6f 2065 7370 6f6c      flags role pslo
   22003:	2074 6c73 746f 695f 2064 7766 762d 7265     t slot_id fw-ver
   22013:	000a 6e55 6e6b 776f 206e 6d63 0a64 7000     ..Unknown cmd..p
   22023:	6e61 006d 6170 6d6e 7361 6574 2072 6f63     anm.panmaster co
   22033:	6d6d 6e61 7364 3c00 6d63 3e64 3c00 7565     mmands.<cmd>.<eu
   22043:	6469 203e 615b 6464 5d72 6120 6464 6e20     id> [addr] add n
   22053:	646f 0065 653c 6975 3e64 6420 6c65 7465     ode.<euid> delet
   22063:	2065 6f6e 6564 3c00 7565 6469 203e 733c     e node.<euid> <s
   22073:	6f6c 5f74 6469 203e 6573 2074 6570 6d72     lot_id> set perm
   22083:	6e61 6e65 2074 6c73 746f 2820 7375 2065     anent slot (use 
   22093:	6c73 746f 695f 3d64 312d 7420 206f 6572     slot_id=-1 to re
   220a3:	6f6d 6576 0029 653c 6975 3e64 3c20 6f72     move).<euid> <ro
   220b3:	656c 203e 6573 2074 6f72 656c 0029 7265     le> set role).er
   220c3:	7361 2065 696c 7473                          ase list.

000220cc <cmd_pm_help>:
   220cc:	2027 0002 203a 0002 20d8 0002               ' ..: ... ..

000220d8 <cmd_pm_param>:
   220d8:	20c7 0002 2aff 0002 1f21 0002 2040 0002     . ...*..!...@ ..
   220e8:	1f64 0002 2057 0002 1f68 0002 206a 0002     d...W ..h...j ..
   220f8:	1fa0 0002 20a9 0002 1fdd 0002 2aff 0002     ..... .......*..
   22108:	1fcc 0002 20c1 0002 1fd2 0002 2aff 0002     ..... .......*..
   22118:	1fd8 0002 2aff 0002 0000 0000 0000 0000     .....*..........
   22128:	7573 7672 7965 7b00 7522 6974 656d 3a22     survey.{"utime":
   22138:	2520 756c 222c 736d 2267 203a 7322 7275      %lu,"msg": "sur
   22148:	6576 5f79 6b70 5f67 6e69 7469 7d22 000a     vey_pkg_init"}..
   22158:	7262 616f 6364 7361 6574 0072 6572 6563     broadcaster.rece
   22168:	7669 7265                                    iver.

0002216d <g_stats_map_survey_stat_section>:
   2216d:	0014 1d3b 0002 0018 1d48 0002 001c 1d75     ..;.....H.....u.
   2217d:	0002 0020 1d84 0002 0024 1d66 0002 0028     .. .....$.f...(.
   2218d:	2158 0002 002c 2164 0002 0030 1d5b 0002     X!..,.d!..0.[...
   2219d:	0034 3c7e 0002 6474 616d 7b00 7522 6974     4.~<..tdma.{"uti
   221ad:	656d 3a22 2520 756c 222c 736d 2267 203a     me": %lu,"msg": 
   221bd:	7422 6d64 5f61 6b70 5f67 6e69 7469 7d22     "tdma_pkg_init"}
   221cd:	000a 227b 7475 6d69 2265 203a 6c25 2c75     ..{"utime": %lu,
   221dd:	6d22 6773 3a22 2220 6474 616d 705f 676b     "msg": "tdma_pkg
   221ed:	645f 776f 226e 0a7d 7300 6f6c 5f74 6974     _down"}..slot_ti
   221fd:	656d 5f72 6e63 0074 7573 6570 6672 6172     mer_cnt.superfra
   2220d:	656d 635f 746e 7300 7075 7265 7266 6d61     me_cnt.superfram
   2221d:	5f65 696d 7373 6400 6f72 7070 6465 735f     e_miss.dropped_s
   2222d:	6f6c 7374                                    lots.

00022232 <g_stats_map_tdma_stat_section>:
   22232:	0014 21f6 0002 0018 2205 0002 001c 2214     ...!....."....."
   22242:	0002 0020 2224 0002 6363 0070 227b 7475     .. .$"..ccp.{"ut
   22252:	6d69 2265 203a 6c25 2c75 6d22 6773 3a22     ime": %lu,"msg":
   22262:	2220 7775 5f62 6363 5f70 6b70 5f67 6e69      "uwb_ccp_pkg_in
   22272:	7469 7d22 000a 616d 7473 7265 635f 746e     it"}..master_cnt
   22282:	7300 616c 6576 635f 746e 7300 6e65 0064     .slave_cnt.send.
   22292:	7874 635f 6d6f 6c70 7465 0065 7872 725f     tx_complete.rx_r
   222a2:	6c65 7961 6465 7200 5f78 7473 7261 5f74     elayed.rx_start_
   222b2:	7265 6f72 0072 7872 6f5f 6874 7265 665f     error.rx_other_f
   222c2:	6172 656d 7400 7278 5f78 7265 6f72 0072     rame.txrx_error.
   222d2:	7874 735f 6174 7472 655f 7272 726f 7400     tx_start_error.t
   222e2:	5f78 6572 616c 5f79 7265 6f72 0072 7874     x_relay_error.tx
   222f2:	725f 6c65 7961 6f5f 006b 7269 5f71 616c     _relay_ok.irq_la
   22302:	6574 636e 0079 736f 6c5f 7461 625f 6865     tency.os_lat_beh
   22312:	6e69 0064 736f 6c5f 7461 6d5f 7261 6967     ind.os_lat_margi
   22322:	006e 6573 5f6d 6974 656d 756f 0074          n.sem_timeout.

00022330 <g_stats_map_uwb_ccp_stat_section>:
   22330:	0014 2278 0002 0018 2283 0002 001c 228d     ..x"....."....."
   22340:	0002 0020 1d48 0002 0024 2292 0002 0028     .. .H...$.."..(.
   22350:	1d4f 0002 002c 229e 0002 0030 22a9 0002     O...,.."..0.."..
   22360:	0034 1d75 0002 0038 22b8 0002 003c 22c7     4.u...8.."..<.."
   22370:	0002 0040 22d2 0002 0044 22e1 0002 0048     ..@.."..D.."..H.
   22380:	22f0 0002 004c 22fc 0002 0050 2308 0002     ."..L.."..P..#..
   22390:	0054 2316 0002 0058 1d5b 0002 005c 2324     T..#..X.[...\.$#
   223a0:	0002 0060 3c7e 0002 227b 7475 6d69 2265     ..`.~<..{"utime"
   223b0:	203a 6c25 2c75 6d22 6773 3a22 2220 6170     : %lu,"msg": "pa
   223c0:	5f6e 6b70 5f67 6e69 7469 7d22 000a 6170     n_pkg_init"}..pa
   223d0:	006e 6170 5f6e 6572 7571 7365 0074 6170     n.pan_request.pa
   223e0:	5f6e 696c 7473 6e65 7000 6e61 725f 7365     n_listen.pan_res
   223f0:	7465 7200 6c65 7961 745f 0078 656c 7361     et.relay_tx.leas
   22400:	5f65 7865 6970 7972                          e_expiry.

00022409 <g_stats_map_pan_stat_section>:
   22409:	0014 23d2 0002 0018 23de 0002 001c 23e9     ...#.....#.....#
   22419:	0002 0020 23f3 0002 0024 23fc 0002 0028     .. ..#..$..#..(.
   22429:	2292 0002 002c 1d4f 0002 0030 1d75 0002     ."..,.O...0.u...
   22439:	0034 22b8 0002 0038 1d6c 0002 003c 1d8a     4.."..8.l...<...
   22449:	0002 0040 1d5b 0002 0044 3c7e 0002 227b     ..@.[...D.~<..{"
   22459:	7475 6d69 2265 203a 6c25 2c75 6d22 6773     utime": %lu,"msg
   22469:	3a22 2220 7775 5f62 6377 5f73 6b70 5f67     ": "uwb_wcs_pkg_
   22479:	6e69 7469 7d22 000a 0000                     init"}.....

00022484 <stdout>:
   22484:	06b4 2000                                   ... 

00022488 <MemFile_methods>:
   22488:	fc57 0000 0000 0000 6372 6f00 6666 6400     W.......rc.off.d
   22498:	7461 0061 6873 0061 7075 7267 6461 0065     ata.sha.upgrade.

000224a8 <imgr_nmgr_handlers>:
   224a8:	0791 0001 0935 0001 0000 0000 007d 0001     ....5.......}...
	...
   224d4:	000b 0001 0000 0000 ffd5 0000 6f4e 6920     ............No i
   224e4:	616d 6567 7720 7469 2068 6168 6873 203a     mage with hash: 
   224f4:	7325 000a 6e49 6176 696c 2064 6c73 746f     %s..Invalid slot
   22504:	6e20 6d75 6562 2072 726f 6920 616d 6567      number or image
   22514:	6820 7361 3a68 2520 0a73 4500 7272 726f      hash: %s..Error
   22524:	7320 7465 6974 676e 7320 6f6c 2074 6425      setting slot %d
   22534:	7420 206f 6570 646e 6e69 3b67 7220 3d63      to pending; rc=
   22544:	6425 000a 6425 2520 7338 203a 7325 2520     %d..%d %8s: %s %
   22554:	0a73 7400 7365 0074 6f63 666e 7269 006d     s..test.confirm.
   22564:	7245 6f72 2072 6f63 666e 7269 696d 676e     Error confirming
   22574:	6920 616d 6567 7320 6174 6574 203b 6372      image state; rc
   22584:	253d 0a64 6500 6172 6573 4500 7272 726f     =%d..erase.Error
   22594:	6f20 6570 696e 676e 6120 6572 2061 6425      opening area %d
   225a4:	000a 7245 6f72 2072 7265 7361 6e69 2067     ..Error erasing 
   225b4:	7261 6165 7220 3d63 6425 000a 6f4e 7320     area rc=%d..No s
   225c4:	6975 6174 6c62 2065 7261 6165 7420 206f     uitable area to 
   225d4:	7265 7361 0a65 6900 676d 0072 6d69 6761     erase..imgr.imag
   225e4:	2065 616d 616e 6567 656d 746e 6320 6d6f     e management com
   225f4:	616d 646e 0a00 2020 2020 6d69 7267 6c20     mand..    imgr l
   22604:	7369 0a74 2020 2020 6d69 7267 7420 7365     ist.    imgr tes
   22614:	2074 733c 6f6c 2074 207c 6168 6873 0a3e     t <slot | hash>.
   22624:	2020 2020 6d69 7267 6320 6e6f 6966 6d72         imgr confirm
   22634:	5b20 6c73 746f 7c20 6820 7361 5d68 0000      [slot | hash]..

00022644 <imgr_cli_help>:
   22644:	25e0 0002 25f9 0002 0000 0000 6d69 6761     .%...%......imag
   22654:	7365 7600 7265 6973 6e6f 6800 7361 0068     es.version.hash.
   22664:	6f62 746f 6261 656c 7000 6e65 6964 676e     bootable.pending
   22674:	6300 6e6f 6966 6d72 6465 6100 7463 7669     .confirmed.activ
   22684:	0065 6570 6d72 6e61 6e65 0074 7073 696c     e.permanent.spli
   22694:	5374 6174 7574 0073 7525 252e 2e75 7525     tStatus.%u.%u.%u
   226a4:	252e 756c 2500 2e75 7525 252e 0075 6164     .%lu.%u.%u.%u.da
   226b4:	6574 6974 656d 6d00 6f70 6c6f 0073 6c62     tetime.mpools.bl
   226c4:	736b 7a69 6e00 6c62 736b 6e00 7266 6565     ksiz.nblks.nfree
   226d4:	6d00 6e69 7000 6972 006f 6974 0064 7473     .min.prio.tid.st
   226e4:	7461 0065 7473 756b 6573 7300 6b74 6973     ate.stkuse.stksi
   226f4:	007a 7363 6377 746e 7200 6e75 6974 656d     z.cswcnt.runtime
   22704:	6c00 7361 5f74 6863 6365 696b 006e 656e     .last_checkin.ne
   22714:	7478 635f 6568 6b63 6e69 6500 6863 006f     xt_checkin.echo.

00022724 <nmgr_def_group_handlers>:
   22724:	0ebd 0001 0ebd 0001 11e5 0001 11e5 0001     ................
   22734:	1041 0001 0000 0000 0f35 0001 0000 0000     A.......5.......
   22744:	0e45 0001 0dcd 0001 0000 0000 0d79 0001     E...........y...
   22754:	002f 6c25 0064 6c25 646c 3c00 6564 3e6c     /.%ld.%lld.<del>
   22764:	2500 2073 203d 7325 000a 6146 6c69 6465     .%s = %s..Failed
   22774:	7420 206f 6f63 6d6d 7469 000a 6f44 656e      to commit..Done
   22784:	000a 6f63 6d6d 7469 7200 6e75 696e 676e     ..commit.running
   22794:	7300 7661 0065 6143 6e6e 746f 6420 7369     .save.Cannot dis
   227a4:	6c70 7961 7620 6c61 6575 000a 6146 6c69     play value..Fail
   227b4:	6465 7420 206f 6573 2c74 6520 7272 203a     ed to set, err: 
   227c4:	6425 000a 6e49 6176 696c 2064 7261 7367     %d..Invalid args
   227d4:	000a 6f63 666e 6769 1b00 255b 4475 1b00     ..config..[%uD..
   227e4:	255b 4375 2500 3630 756c 0020 745b 3d73     [%uC.%06lu .[ts=
   227f4:	6c25 756c 7375 202c 6f6d 3d64 7525 6c20     %lluus, mod=%u l
   22804:	7665 6c65 253d 5d75 0020 6f63 736e 6c6f     evel=%u] .consol
   22814:	0065 0000                                   e...

00022818 <log_console_handler>:
   22818:	0000 0000 2bf5 0001 0000 0000 2c3d 0001     .....+......=,..
   22828:	2c01 0001 0000 0000 0000 0000 2bf9 0001     .,...........+..
   22838:	2bfd 0001 0000 0000 6166 6c69 6465 7420     .+......failed t
   22848:	206f 6572 6461 4d20 524d 3a73 7220 3d63     o read MMRs: rc=
   22858:	6425 4200 4f52 4e57 554f 0054 4457 474f     %d.BROWNOUT.WDOG
   22868:	5200 5145 4555 5453 4445 5300 5359 4554     .REQUESTED.SYSTE
   22878:	5f4d 464f 5f46 4e49 0054 4148 4452 5200     M_OFF_INT.HARD.R
   22888:	5345 5445 505f 4e49 5300 464f 0054 4e55     ESET_PIN.SOFT.UN
   22898:	4e4b 574f 004e 7372 3a6e 7325 202c 6e63     KNOWN.rsn:%s, cn
   228a8:	3a74 7525 202c 6d69 3a67 7525 252e 2e75     t:%u, img:%u.%u.
   228b8:	7525 252e 2c75 6820 7361 3a68 2500 3230     %u.%u, hash:.%02
   228c8:	0078 202c 6964 3a65 7325 253a 0064 202c     x., die:%s:%d., 
   228d8:	6370 303a 2578 786c 7200 6265 6f6f 2f74     pc:0x%lx.reboot/
   228e8:	6572 6f62 746f 635f 746e 7200 6265 6f6f     reboot_cnt.reboo
   228f8:	2f74 7277 7469 6574 006e 6572 6f62 746f     t/written.reboot
   22908:	6800 6c65 0a70 2500 332d 7330 2500 332d     .help..%-30s.%-3
   22918:	7330 7325 000a 7325 7325 7300 6c65 6365     0s%s..%s%s.selec
   22928:	0074 6e55 6572 6f63 6e67 7a69 6465 6320     t.Unrecognized c
   22938:	6d6f 616d 646e 000a 6e55 6572 6f63 6e67     ommand..Unrecogn
   22948:	7a69 6465 6320 6d6f 616d 646e 203a 7325     ized command: %s
   22958:	000a 6c49 656c 6167 206c 6f6d 7564 656c     ..Illegal module
   22968:	2520 0a73 5500 6173 6567 0a3a 2800 6f6e      %s..Usage:..(no
   22978:	6820 6c65 2070 7661 6961 616c 6c62 2965      help available)
   22988:	000a 7553 6d6d 7261 3a79 000a 6150 6172     ..Summary:..Para
   22998:	656d 6574 7372 0a3a 4100 6176 6c69 6261     meters:..Availab
   229a8:	656c 6d20 646f 6c75 7365 0a3a 5400 206f     le modules:..To 
   229b8:	6573 656c 7463 6120 6d20 646f 6c75 2c65     select a module,
   229c8:	6520 746e 7265 2720 6573 656c 7463 3c20      enter 'select <
   229d8:	6f6d 7564 656c 6e20 6d61 3e65 2e27 000a     module name>'...
   229e8:	6c49 656c 6167 206c 6170 6172 656d 6574     Illegal paramete
   229f8:	0a72 6800 6c65 0070 694d 7373 6e69 2067     r..help.Missing 
   22a08:	6170 6172 656d 6574 0a72 5400 7079 2065     parameter..Type 
   22a18:	6827 6c65 2770 6620 726f 6c20 7369 2074     'help' for list 
   22a28:	666f 6120 6176 6c69 6261 656c 6320 6d6f     of available com
   22a38:	616d 646e 0a73 5400 6f6f 6d20 6e61 2079     mands..Too many 
   22a48:	6170 6172 656d 6574 7372 2820 616d 2078     parameters (max 
   22a58:	7a25 2975 000a 614d 2078 756e 626d 7265     %zu)..Max number
   22a68:	6f20 2066 6f6d 7564 656c 2073 6572 6361      of modules reac
   22a78:	6568 0a64 4d00 7861 6e20 6d75 6562 2072     hed..Max number 
   22a88:	666f 6320 6d6f 6170 2074 6f63 6d6d 6e61     of compat comman
   22a98:	7364 7220 6165 6863 6465 000a 6f63 706d     ds reached..comp
   22aa8:	7461 4900 6c6c 6765 6c61 6d20 646f 6c75     at.Illegal modul
   22ab8:	2065 7325 202c 6564 6166 6c75 2074 7369     e %s, default is
   22ac8:	6e20 746f 6320 6168 676e 6465 000a 6873      not changed..sh
   22ad8:	6c65 006c                                   ell.

00022adc <shell_cmd_help>:
   22adc:	0001 0000 3975 0001 29fb 0002 0000 0000     ....u9...)......

00022aec <shell_cmd_select_module>:
   22aec:	0001 0000 32d1 0001 2923 0002 0000 0000     .....2..#)......
   22afc:	060a 0009 3425 2064 3325 2078 7325 000a     ....%4d %3x %s..
   22b0c:	654d 706d 6f6f 736c 203a 000a 6c62 736b     Mempools: ..blks
   22b1c:	007a 3325 7332 2520 7335 2520 7334 2520     z.%32s %5s %4s %
   22b2c:	7334 2520 7334 000a 3325 7332 2520 6435     4s %4s..%32s %5d
   22b3c:	2520 6434 2520 6434 2520 6434 000a 6f43      %4d %4d %4d..Co
   22b4c:	6c75 6e64 7427 6620 6e69 2064 2061 656d     uldn't find a me
   22b5c:	6f6d 7972 7020 6f6f 206c 6977 6874 6e20     mory pool with n
   22b6c:	6d61 2065 7325 000a 6c66 0067 6572 0066     ame %s..flg.ref.
   22b7c:	3425 2073 3325 2073 7325 000a 6154 6b73     %4s %3s %s..Task
   22b8c:	3a73 0a20 7000 6972 7400 7361 006b 3825     s: ..pri.task.%8
   22b9c:	2073 3325 2073 3325 2073 3825 2073 3825     s %3s %3s %8s %8
   22bac:	2073 3825 2073 3825 2073 3825 2073 3825     s %8s %8s %8s %8
   22bbc:	2073 3325 0a73 6e00 6863 6365 006b 636c     s %3s..ncheck.lc
   22bcc:	6568 6b63 7300 6b74 7a73 6300 7773 2500     heck.stksz.csw.%
   22bdc:	7338 2520 7533 2520 7533 2520 6c38 2075     8s %3u %3u %8lu 
   22bec:	3825 756c 2520 7538 2520 7538 2520 6c38     %8lu %8u %8u %8l
   22bfc:	2075 3825 756c 000a 6f43 6c75 6e64 7427     u %8lu..Couldn't
   22c0c:	6620 6e69 2064 6174 6b73 7720 7469 2068      find task with 
   22c1c:	616e 656d 2520 0a73 4900 766e 6c61 6469     name %s..Invalid
   22c2c:	6420 7461 7465 6d69 0a65 6c00 6473 7665      datetime..lsdev
   22c3c:	6c00 7369 2074 534f 6420 7665 6369 7365     .list OS devices
   22c4c:	7200 7365 7465 7320 7379 6574 006d 6873     .reset system.sh
   22c5c:	776f 7320 7379 6574 206d 6164 6574 6400     ow system date.d
   22c6c:	7461 7465 6d69 2065 6f74 7320 7465 7300     atetime to set.s
   22c7c:	6f68 2077 7973 7473 6d65 6d20 6f70 6c6f     how system mpool
   22c8c:	6d00 6f70 6c6f 6e20 6d61 0065 6873 776f     .mpool name.show
   22c9c:	6f20 2073 6174 6b73 0073 6174 6b73 6e20      os tasks.task n
   22cac:	6d61 0065                                   ame.

00022cb0 <date_help>:
   22cb0:	2c5a 0002 0000 0000 2cbc 0002               Z,.......,..

00022cbc <date_params>:
   22cbc:	2aff 0002 2c6b 0002 0000 0000 0000 0000     .*..k,..........

00022ccc <ls_dev_help>:
   22ccc:	2c3d 0002 0000 0000 0000 0000               =,..........

00022cd8 <mpool_help>:
   22cd8:	2c7b 0002 0000 0000 2ce4 0002               {,.......,..

00022ce4 <mpool_params>:
   22ce4:	2aff 0002 2c8d 0002 0000 0000 0000 0000     .*...,..........

00022cf4 <os_commands>:
   22cf4:	0001 0000 4069 0001 2ca0 0002 2d68 0002     ....i@...,..h-..
   22d04:	0001 0000 3f69 0001 2c87 0002 2cd8 0002     ....i?...,...,..
   22d14:	0001 0000 415d 0001 2c66 0002 2cb0 0002     ....]A..f,...,..
   22d24:	0001 0000 401d 0001 3c7e 0002 2d54 0002     .....@..~<..T-..
   22d34:	0001 0000 4031 0001 2c37 0002 2ccc 0002     ....1@..7,...,..
	...

00022d54 <reset_help>:
   22d54:	2c4d 0002 0000 0000 2d60 0002               M,......`-..

00022d60 <reset_params>:
	...

00022d68 <tasks_help>:
   22d68:	2c98 0002 0000 0000 2d74 0002               .,......t-..

00022d74 <tasks_params>:
   22d74:	2aff 0002 2ca6 0002 0000 0000 0000 0000     .*...,..........
   22d84:	4320 6e6f 6f73 656c 5420 6369 736b 6f20      Console Ticks o
   22d94:	0a6e 2000 6f43 736e 6c6f 2065 6954 6b63     n.. Console Tick
   22da4:	2073 666f 0a66 2000 7355 6761 3a65 7420     s off.. Usage: t
   22db4:	6369 736b 5b20 6e6f 6f7c 6666 0a5d 7000     icks [on|off]..p
   22dc4:	6f72 706d 0074 6974 6b63 0073 6873 6c65     rompt.ticks.shel
   22dd4:	206c 6974 6b63 2073 6f63 6d6d 6e61 0064     l ticks command.
   22de4:	7375 6761 3a65 7420 6369 736b 5b20 6e6f     usage: ticks [on
   22df4:	6f7c 6666 005d 7574 6e72 6f20 006e 0000     |off].turn on...

00022e04 <prompt_commands>:
   22e04:	0000 0000 420d 0001 2dca 0002 2e24 0002     .....B...-..$...
	...

00022e24 <ticks_help>:
   22e24:	2dd0 0002 2de4 0002 2e30 0002               .-...-..0...

00022e30 <ticks_params>:
   22e30:	2dff 0002 2dfa 0002 2493 0002 2dfa 0002     .-...-...$...-..
	...
   22e48:	2573 0064 7473 7461 6e00 6d75 725f 6765     s%d.stat.num_reg
   22e58:	7369 6574 6572 0064                         istered.

00022e60 <g_stats_map_stats>:
   22e60:	0014 2e51 0002 7325 203a 7525 000a 7325     ..Q...%s: %u..%s
   22e70:	203a 6c25 0a75 2500 3a73 2520 6c6c 0a75     : %lu..%s: %llu.
   22e80:	5500 6b6e 6f6e 6e77 7320 6174 2074 6973     .Unknown stat si
   22e90:	657a 6620 726f 2520 2073 7525 000a 2509     ze for %s %u...%
   22ea0:	0a73 4d00 7375 2074 7073 6365 6669 2079     s..Must specify 
   22eb0:	2061 7473 7461 7369 6974 2063 616e 656d     a statistic name
   22ec0:	7420 206f 7564 706d 202c 6f70 7373 6269      to dump, possib
   22ed0:	656c 6e20 6d61 7365 6120 6572 0a3a 4300     le names are:..C
   22ee0:	756f 646c 6e20 746f 6620 6e69 2064 7473     ould not find st
   22ef0:	7461 7369 6974 2063 7267 756f 2070 7325     atistic group %s
   22f00:	000a 7325 252f 0073 6d36 0038 3538 6b30     ..%s/%s.6m8.850k
   22f10:	3100 3031 006b 6e69 2076 7270 6165 626d     .110k.inv preamb
   22f20:	6c5f 6e65 000a 7775 6362 6766 7500 6277     _len..uwbcfg.uwb
   22f30:	7000 6672 6400 7461 7261 7461 0065 7872     .prf.datarate.rx
   22f40:	705f 6361 656c 006e 7872 705f 6572 6d61     _paclen.rx_pream
   22f50:	635f 6469 0078 7872 735f 6466 7974 6570     _cidx.rx_sfdtype
   22f60:	7200 5f78 6673 5f64 6f74 7200 5f78 6870     .rx_sfd_to.rx_ph
   22f70:	6d72 646f 0065 7872 645f 6169 5f67 6e65     rmode.rx_diag_en
   22f80:	7400 5f78 7270 6165 5f6d 6963 7864 7400     .tx_pream_cidx.t
   22f90:	5f78 7270 6165 5f6d 656c 006e 7874 6672     x_pream_len.txrf
   22fa0:	705f 776f 7265 635f 616f 7372 0065 7874     _power_coarse.tx
   22fb0:	6672 705f 776f 7265 665f 6e69 0065 7872     rf_power_fine.rx
   22fc0:	615f 746e 6c64 0079 7874 615f 746e 6c64     _antdly.tx_antdl
   22fd0:	0079 7872 615f 746e 735f 7065 7261 7461     y.rx_ant_separat
   22fe0:	6f69 006e 7865 5f74 6c63 646b 796c 6600     ion.ext_clkdly.f
   22ff0:	6172 656d 665f 6c69 6574 0072 7478 6c61     rame_filter.xtal
   23000:	745f 6972 006d 6e69 2076 7270 6165 206d     _trim.inv pream 
   23010:	6f63 6564 2820 7375 6e69 2067 6425 0a29     code (using %d).
   23020:	6900 766e 7020 6672 2520 0a64 6900 766e     .inv prf %d..inv
   23030:	6320 0a68 6900 766e 6420 7461 7261 7461      ch..inv datarat
   23040:	0a65 6900 766e 7020 6361 656c 0a6e 6900     e..inv paclen..i
   23050:	766e 7320 6466 7954 6570 000a 6e69 2076     nv sfdType..inv 
   23060:	6f63 7261 6573 7420 7078 7277 000a 3025     coarse txpwr..%0
   23070:	6434 252d 3230 2d64 3025 6432 2554 3230     4d-%02d-%02dT%02
   23080:	3a64 3025 6432 253a 3230 2e64 3025 6436     d:%02d:%02d.%06d
   23090:	2500 2563 3230 3a64 3025 6432 0000 0000     .%c%02d:%02d....

000230a0 <month_days>:
   230a0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   230b0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   230c0:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000230d0 <crc16tab>:
   230d0:	0000 1021 2042 3063 4084 50a5 60c6 70e7     ..!.B c0.@.P.`.p
   230e0:	8108 9129 a14a b16b c18c d1ad e1ce f1ef     ..).J.k.........
   230f0:	1231 0210 3273 2252 52b5 4294 72f7 62d6     1...s2R".R.B.r.b
   23100:	9339 8318 b37b a35a d3bd c39c f3ff e3de     9...{.Z.........
   23110:	2462 3443 0420 1401 64e6 74c7 44a4 5485     b$C4 ....d.t.D.T
   23120:	a56a b54b 8528 9509 e5ee f5cf c5ac d58d     j.K.(...........
   23130:	3653 2672 1611 0630 76d7 66f6 5695 46b4     S6r&..0..v.f.V.F
   23140:	b75b a77a 9719 8738 f7df e7fe d79d c7bc     [.z...8.........
   23150:	48c4 58e5 6886 78a7 0840 1861 2802 3823     .H.X.h.x@.a..(#8
   23160:	c9cc d9ed e98e f9af 8948 9969 a90a b92b     ........H.i...+.
   23170:	5af5 4ad4 7ab7 6a96 1a71 0a50 3a33 2a12     .Z.J.z.jq.P.3:.*
   23180:	dbfd cbdc fbbf eb9e 9b79 8b58 bb3b ab1a     ........y.X.;...
   23190:	6ca6 7c87 4ce4 5cc5 2c22 3c03 0c60 1c41     .l.|.L.\",.<`.A.
   231a0:	edae fd8f cdec ddcd ad2a bd0b 8d68 9d49     ........*...h.I.
   231b0:	7e97 6eb6 5ed5 4ef4 3e13 2e32 1e51 0e70     .~.n.^.N.>2.Q.p.
   231c0:	ff9f efbe dfdd cffc bf1b af3a 9f59 8f78     ..........:.Y.x.
   231d0:	9188 81a9 b1ca a1eb d10c c12d f14e e16f     ..........-.N.o.
   231e0:	1080 00a1 30c2 20e3 5004 4025 7046 6067     .....0. .P%@Fpg`
   231f0:	83b9 9398 a3fb b3da c33d d31c e37f f35e     ........=.....^.
   23200:	02b1 1290 22f3 32d2 4235 5214 6277 7256     .....".25B.RwbVr
   23210:	b5ea a5cb 95a8 8589 f56e e54f d52c c50d     ........n.O.,...
   23220:	34e2 24c3 14a0 0481 7466 6447 5424 4405     .4.$....ftGd$T.D
   23230:	a7db b7fa 8799 97b8 e75f f77e c71d d73c     ........_.~...<.
   23240:	26d3 36f2 0691 16b0 6657 7676 4615 5634     .&.6....Wfvv.F4V
   23250:	d94c c96d f90e e92f 99c8 89e9 b98a a9ab     L.m.../.........
   23260:	5844 4865 7806 6827 18c0 08e1 3882 28a3     DXeH.x'h.....8.(
   23270:	cb7d db5c eb3f fb1e 8bf9 9bd8 abbb bb9a     }.\.?...........
   23280:	4a75 5a54 6a37 7a16 0af1 1ad0 2ab3 3a92     uJTZ7j.z.....*.:
   23290:	fd2e ed0f dd6c cd4d bdaa ad8b 9de8 8dc9     ....l.M.........
   232a0:	7c26 6c07 5c64 4c45 3ca2 2c83 1ce0 0cc1     &|.ld\EL.<.,....
   232b0:	ef1f ff3e cf5d df7c af9b bfba 8fd9 9ff8     ..>.].|.........
   232c0:	6e17 7e36 4e55 5e74 2e93 3eb2 0ed1 1ef0     .n6~UNt^...>....

000232d0 <streamer_cfg_console>:
   232d0:	5317 0001 530f 0001                         .S...S..

000232d8 <sysdown_cbs>:
   232d8:	a289 0001 e7fd 0000 f371 0000 d7c5 0000     ........q.......
   232e8:	dcd9 0001 dff5 0001 49a1 0001 0000 0000     .........I......

000232f8 <sysflash_map_dflt>:
	...
   23300:	4000 0000 0001 0000 8000 0000 a000 0003     .@..............
   23310:	0002 0000 2000 0004 a000 0003 0003 0000     ..... ..........
   23320:	c000 0007 1000 0000 0010 0000 4000 0000     .............@..
   23330:	4000 0000 0011 0000 d000 0007 3000 0000     .@...........0..

00023340 <boot_img_magic>:
   23340:	c277 f395 d260 7fef 5235 0f50 b62c 8079     w...`...5RP.,.y.

00023350 <boot_swap_tables>:
   23350:	0104 0304 0204 0104 0104 0304 0301 0403     ................
   23360:	0401 7073 696c 2f74 7473 7461 7375 7300     ..split/status.s
   23370:	6c70 7469                                    plit.

00023375 <base64_chars>:
   23375:	4241 4443 4645 4847 4a49 4c4b 4e4d 504f     ABCDEFGHIJKLMNOP
   23385:	5251 5453 5655 5857 5a59 6261 6463 6665     QRSTUVWXYZabcdef
   23395:	6867 6a69 6c6b 6e6d 706f 7271 7473 7675     ghijklmnopqrstuv
   233a5:	7877 7a79 3130 3332 3534 3736 3938 2f2b     wxyz0123456789+/
	...

000233b6 <hex_bytes>:
   233b6:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
   233c6:	6400 3177 3030 5f30 0030                    .dw1000_0.

000233d0 <dw1000_0_cfg>:
   233d0:	4bd0 2000 1f40 0000 07d0 0000 1800 1113     .K. @...........
   233e0:	4042 4042 0000 0000 6554 6d72 6e69 6c61     B@B@....Terminal
   233f0:	0000 0000 5452 0054 4553 4747 5245 2500     ....RTT.SEGGER.%
   23400:	2073 6f6e 2074 6d69 6c70 6d65 6e65 6574     s not implemente
   23410:	0a64 7b00 7522 6974 656d 3a22 2520 756c     d..{"utime": %lu
   23420:	222c 736d 2267 203a 6422 3177 3030 5f30     ,"msg": "dw1000_
   23430:	6564 5f76 6e69 7469 7d22 000a               dev_init"}..

0002343c <__func__.0>:
   2343c:	7775 5f62 7764 3031 3030 635f 6c61 5f63     uwb_dw1000_calc_
   2344c:	6470 616f 0000 0000                         pdoa....

00023454 <dw1000_uwb_funcs>:
   23454:	71b1 0001 71ad 0001 71a9 0001 75f9 0001     .q...q...q...u..
   23464:	7675 0001 7929 0001 7971 0001 78e1 0001     uv..)y..qy...x..
   23474:	71a5 0001 719f 0001 7199 0001 7195 0001     .q...q...q...q..
   23484:	7191 0001 718d 0001 7189 0001 7185 0001     .q...q...q...q..
   23494:	7181 0001 717d 0001 7179 0001 709f 0001     .q..}q..yq...p..
   234a4:	7175 0001 7171 0001 716d 0001 7169 0001     uq..qq..mq..iq..
   234b4:	7165 0001 7161 0001 715d 0001 7159 0001     eq..aq..]q..Yq..
   234c4:	7095 0001 7155 0001 7151 0001 7149 0001     .p..Uq..Qq..Iq..
   234d4:	7141 0001 7139 0001 7135 0001 7131 0001     Aq..9q..5q..1q..
   234e4:	712d 0001 7129 0001 749f 0001 7487 0001     -q..)q...t...t..
   234f4:	746f 0001 71b9 0001 7125 0001 7121 0001     ot...q..%q..!q..
   23504:	711d 0001 7119 0001 7115 0001 7111 0001     .q...q...q...q..
   23514:	70f1 0001 0000 0000 70a3 0001 70e1 0001     .p.......p...p..
   23524:	70e5 0001 70e9 0001 70ed 0001 616d 0063     .p...p...p..mac.
   23534:	7874 625f 7479 7365 7200 5f78 7962 6574     tx_bytes.rx_byte
   23544:	0073 4644 5f52 6e63 0074 5452 5f4f 6e63     s.DFR_cnt.RTO_cn
   23554:	0074 4f52 5f56 7265 0072 4654 5f47 6e63     t.ROV_err.TFG_cn
   23564:	0074 444c 5f45 7265 0072 5852 655f 7272     t.LDE_err.RX_err
   23574:	5400 4258 4655 655f 7272 5000 4c4c 4c5f     .TXBUF_err.PLL_L
   23584:	5f4c 7265 0072 0000                         L_err...

0002358c <agc_config>:
   2358c:	a907 2502 8870 889b                         ...%p...

00023594 <chan_idx>:
   23594:	0000 0201 0403 0500                         ........

0002359c <digital_bb_config>:
   2359c:	002d 311a 0052 331a 009a 351a 011d 371a     -..1R..3...5...7
   235ac:	006b 313b 00be 333b 015e 353b 0296 373b     k.;1..;3^.;5..;7

000235bc <dtune1>:
   235bc:	0087 008d                                   ....

000235c0 <dwnsSFDlen>:
   235c0:	1040 0008                                   @...

000235c4 <fs_pll_cfg>:
   235c4:	0407 0900 0508 0840 1009 0840 0508 0840     ......@...@...@.
   235d4:	041d 0800 041d 0800                         ........

000235dc <fs_pll_tune>:
   235dc:	261e 2656 bebe                              .&V&..

000235e2 <g_stats_map_mac_stat_section>:
   235e2:	0014 3534 0002 0018 353d 0002 001c 3546     ..45....=5....F5
   235f2:	0002 0020 354e 0002 0024 3556 0002 0028     .. .N5..$.V5..(.
   23602:	355e 0002 002c 3566 0002 0030 356e 0002     ^5..,.f5..0.n5..
   23612:	0034 3575 0002 0038 357f 0002               4.u5..8..5..

0002361e <lde_replicaCoeff>:
   2361e:	0000 5998 5998 51ea 428e 451e 2e14 8000     ...Y.Y.Q.B.E....
   2362e:	51ea 28f4 3332 3ae0 3d70 3ae0 35c2 2b84     .Q.(23.:p=.:.5.+
   2363e:	35c2 3332 35c2 35c2 47ae 3ae0 3850 30a2     .523.5.5.G.:P8.0
   2364e:	3850                                        P8

00023650 <rx_config>:
   23650:	bcd8                                        ..

00023652 <sftsh>:
   23652:	000a 0016 0001 0006 0001 0002 0000          ..............

00023660 <tx_config>:
   23660:	5c40 0000 5ca0 0004 6cc0 0008 5c80 0004     @\...\...l...\..
   23670:	3fe0 001e 7de0 001e 4d50 4353 495f 5b44     .?...}..PMSC_ID[
   23680:	5d30 203a 6c25 0a78 5000 534d 5f43 4449     0]: %lx..PMSC_ID
   23690:	315b 3a5d 2520 786c 000a 227b 7475 6d69     [1]: %lx..{"utim
   236a0:	2265 203a 6c25 2c75 6d22 6773 3a22 2220     e": %lu,"msg": "
   236b0:	7764 3031 3030 705f 676b 695f 696e 2274     dw1000_pkg_init"
   236c0:	0a7d 7b00 7522 6974 656d 3a22 2520 756c     }..{"utime": %lu
   236d0:	222c 736d 2267 203a 6422 3177 3030 5f30     ,"msg": "dw1000_
   236e0:	6b70 5f67 6f64 6e77 7d22 000a 7764 3031     pkg_down"}..dw10
   236f0:	3030 315f 6400 3177 3030 5f30 0032 227b     00_1.dw1000_2.{"
   23700:	6572 5b67 3025 5832 225d 223d 7830 3025     reg[%02X]"="0x%0
   23710:	6c38 586c 7d22 000a 227b 6572 5b67 3025     8llX"}..{"reg[%0
   23720:	5832 225d 223d 7830 3025 3031 6c6c 2258     2X]"="0x%010llX"
   23730:	0a7d 7b00 7222 6765 255b 3230 5d58 3d22     }..{"reg[%02X]"=
   23740:	3022 2578 3130 6c36 586c 7d22 000a 227b     "0x%016llX"}..{"
   23750:	6e69 7473 3e2d 7269 5f71 6573 226d 253d     inst->irq_sem"=%
   23760:	7d64 000a 227b 6e69 7473 3e2d 7874 735f     d}..{"inst->tx_s
   23770:	6d65 3d22 6425 0a7d 7b00 7222 676e 3e2d     em"=%d}..{"rng->
   23780:	6573 226d 253d 7d64 000a 227b 6363 2d70     sem"=%d}..{"ccp-
   23790:	733e 6d65 3d22 6425 0a7d 4400 6d75 2070     >sem"=%d}..Dump 
   237a0:	7473 7261 6974 676e 6120 2074 3025 6c36     starting at %06l
   237b0:	3a58 000a 3025 5834 203a 3025 5832 2520     X:..%04X: %02X %
   237c0:	3230 2058 3025 5832 2520 3230 2058 3025     02X %02X %02X %0
   237d0:	5832 2520 3230 2058 3025 5832 2520 3230     2X %02X %02X %02
   237e0:	2058 3025 5832 2520 3230 2058 3025 5832     X %02X %02X %02X
   237f0:	2520 3230 2058 3025 5832 2520 3230 2058      %02X %02X %02X 
   23800:	3025 5832 2520 3230 0a58 6400 0061 7763     %02X %02X..da.cw
   23810:	4400 7665 6369 5b65 6425 205d 6f6e 2077     .Device[%d] now 
   23820:	6e69 4320 2057 6f6d 6564 6f20 206e 6863     in CW mode on ch
   23830:	2520 2e64 5220 7365 7465 7420 206f 6f63      %d. Reset to co
   23840:	746e 6e69 6575 000a 7277 7200 0064 7830     ntinue..wr.rd.0x
   23850:	3025 6c36 2c58 7830 3025 5834 203a 7830     %06lX,0x%04X: 0x
   23860:	6c25 586c 000a 7764 3031 3030 6400 3177     %llX..dw1000.dw1
   23870:	3030 2030 6264 0067 7764 3031 3030 6420     000 dbg.dw1000 d
   23880:	6265 6775 5b00 6e69 7473 205d 7564 706d     ebug.[inst] dump
   23890:	6120 6c6c 7220 6765 7369 6574 7372 3c00      all registers.<
   238a0:	6e69 7473 203e 7874 4320 2057 6e6f 6320     inst> tx CW on c
   238b0:	7275 6572 746e 6320 6168 6e6e 6c65 3c00     urrent channel.<
   238c0:	6e69 7473 203e 613c 6464 3e72 5b20 656c     inst> <addr> [le
   238d0:	676e 6874 2c5d 6420 6d75 2070 7261 6165     ngth], dump area
   238e0:	3c00 6e69 7473 203e 613c 6464 3e72 3c20     .<inst> <addr> <
   238f0:	7573 6162 6464 3e72 3c20 656c 676e 6874     subaddr> <length
   23900:	2c3e 7220 6165 2064 6572 6967 7473 7265     >, read register
   23910:	3c00 6e69 7473 203e 613c 6464 3e72 3c20     .<inst> <addr> <
   23920:	7573 6162 6464 3e72 3c20 6176 756c 3e65     subaddr> <value>
   23930:	3c20 656c 676e 6874 2c3e 7720 6972 6574      <length>, write
   23940:	7620 6c61 6575 7420 206f 6572 6967 7473      value to regist
   23950:	7265 0000                                   er..

00023954 <cmd_dw1000_help>:
   23954:	386d 0002 3878 0002 3960 0002               m8..x8..`9..

00023960 <cmd_dw1000_param>:
   23960:	1fdd 0002 3885 0002 380e 0002 389f 0002     .....8...8...8..
   23970:	380b 0002 38bf 0002 384b 0002 38e1 0002     .8...8..K8...8..
   23980:	3848 0002 3911 0002 0000 0000 0000 0000     H8...9..........

00023990 <nrf52k_flash_dev>:
   23990:	39a8 0002 0000 0000 0000 0008 0080 0000     .9..............
   239a0:	0001 0000 00ff 0000                         ........

000239a8 <nrf52k_flash_funcs>:
   239a8:	ab85 0001 aac5 0001 aa75 0001 ab93 0001     ........u.......
   239b8:	0000 0000 aac1 0001 0000 0000               ............

000239c4 <nrf52_hal_spis>:
   239c4:	4be8 2000 0000 0000 0000 0000 0000 0000     .K. ............

000239d4 <nrf52_hal_timers>:
   239d4:	4c10 2000 0000 0000 0000 0000 0000 0000     .L. ............
	...

000239ec <os_bsp_spi0m_cfg>:
   239ec:	1410 0012 002c 007b 3a22 0020 7274 6575     ....,.{.": .true
   239fc:	6600 6c61 6573 2500 6c6c 0075 6c25 696c     .false.%llu.%lli
   23a0c:	6e00 6c75 006c 6625 5c00 5c00 0074 725c     .null.%f.\.\t.\r
   23a1c:	5c00 006e 665c 5c00 0062 005b 007d          .\n.\f.\b.[.}.

00023a2a <__func__.7324>:
   23a2a:	6974 656d 6373 6c61 5f65 6e69 7469           timescale_init.

00023a39 <__func__.7336>:
   23a39:	6974 656d 6373 6c61 5f65 7266 6565 6900     timescale_free.i
   23a49:	736e 2d74 653e 656b 6900 736e 0074 682f     nst->eke.inst./h
   23a59:	6d6f 2f65 696e 6c6b 7361 642f 7665 742f     ome/niklas/dev/t
   23a69:	6d69 7365 6163 656c 632d 726f 2f65 696c     imescale-core/li
   23a79:	2f62 6974 656d 6373 6c61 2e65 0063          b/timescale.c.

00023a87 <__func__.7283>:
   23a87:	7273 666b 645f 6c62 6d5f 6961 006e          srkf_dbl_main.

00023a95 <__func__.7299>:
   23a95:	7273 666b 645f 6c62 695f 696e 0074          srkf_dbl_init.

00023aa3 <__func__.7311>:
   23aa3:	7273 666b 645f 6c62 665f 6572 0065 6e69     srkf_dbl_free.in
   23ab3:	7473 2120 4e3d 4c55 004c 6e69 7473 3e2d     st !=NULL.inst->
   23ac3:	206e 3d3d 6e20 6900 736e 2d74 783e 6900     n == n.inst->x.i
   23ad3:	736e 2d74 793e 6900 736e 2d74 7a3e 6900     nst->y.inst->z.i
   23ae3:	736e 2d74 653e 6900 736e 2d74 483e 6900     nst->e.inst->H.i
   23af3:	736e 2d74 503e 6900 736e 2d74 553e 0050     nst->P.inst->UP.
   23b03:	6e69 7473 3e2d 5044 6900 736e 2d74 513e     inst->DP.inst->Q
   23b13:	6900 736e 2d74 553e 0051 6e69 7473 3e2d     .inst->UQ.inst->
   23b23:	5144 6900 736e 2d74 523e 6900 736e 2d74     DQ.inst->R.inst-
   23b33:	553e 0052 6e69 7473 3e2d 5244 6900 736e     >UR.inst->DR.ins
   23b43:	2d74 533e 6900 736e 2d74 5f3e 0053 6e69     t->S.inst->_S.in
   23b53:	7473 3e2d 0041 6e69 7473 3e2d 004b 6e69     st->A.inst->K.in
   23b63:	7473 2120 203d 554e 4c4c 2f00 6f68 656d     st != NULL./home
   23b73:	6e2f 6b69 616c 2f73 6564 2f76 6974 656d     /niklas/dev/time
   23b83:	6373 6c61 2d65 6f63 6572 6c2f 6269 732f     scale-core/lib/s
   23b93:	6b72 5f66 6264 2e6c 0063 6e69 7473 3e2d     rkf_dbl.c.inst->
   23ba3:	6f41 7866 2120 203d 554e 4c4c 6900 736e     Aofx != NULL.ins
   23bb3:	2d74 483e 666f 2078 3d21 4e20 4c55 004c     t->Hofx != NULL.
   23bc3:	227b 7475 6d69 2265 203a 6c25 2c75 6d22     {"utime": %lu,"m
   23bd3:	6773 3a22 2220 7373 6e5f 6e72 5f67 6b70     sg": "ss_nrng_pk
   23be3:	5f67 6e69 7469 7d22 000a 7774 5f72 7373     g_init"}..twr_ss
   23bf3:	6e5f 6e72 0067                              _nrng.

00023bf9 <g_stats_map_twr_ss_nrng_stat_section>:
   23bf9:	0014 1d6c 0002 0018 1d5b 0002 001c 1d4f     ..l.....[.....O.
   23c09:	0002 0020 1d75 0002 0024 3c7e 0002 227b     .. .u...$.~<..{"
   23c19:	7475 6d69 2265 203a 6c25 2c75 6d22 6773     utime": %lu,"msg
   23c29:	3a22 2220 7573 6570 6672 6172 656d 725f     ": "superframe_r
   23c39:	7365 7465 7d22 000a 227b 7475 6d69 2265     eset"}..{"utime"
   23c49:	203a 6c25 2c75 6d22 6773 3a22 2220 6e72     : %lu,"msg": "rn
   23c59:	5f67 6b70 5f67 6e69 7469 7d22 000a 6f63     g_pkg_init"}..co
   23c69:	706d 656c 6574 635f 0062 7573 6570 6672     mplete_cb.superf
   23c79:	6172 656d 725f 7365 7465                     rame_reset.

00023c84 <g_stats_map_rng_stat_section>:
   23c84:	0014 1d37 0002 0018 1d44 0002 001c 2292     ..7.....D......"
   23c94:	0002 0020 1d4f 0002 0024 1d75 0002 0028     .. .O...$.u...(.
   23ca4:	22b8 0002 002c 1d6c 0002 0030 1d8a 0002     ."..,.l...0.....
   23cb4:	0034 1d5b 0002 0038 3c67 0002 003c 3c7e     4.[...8.g<..<.~<
   23cc4:	0002 0040 3c73 0002 227b 7475 6d69 2265     ..@.s<..{"utime"
   23cd4:	203a 6c25 2c75 6d22 6773 3a22 2220 6377     : %lu,"msg": "wc
   23ce4:	5f73 6974 656d 6373 6c61 5f65 6b70 5f67     s_timescale_pkg_
   23cf4:	6e69 7469 7d22 000a 0000 0000 e0b5 a4f8     init"}..........
   23d04:	e374 3e20 0122 6e5b 0587 3deb 674e f1e2     t. >".[n...=Ng..
   23d14:	9e05 3db5 e0b5 a4f8 e374 3e30 0335 b732     ...=....t.0>5.2.
   23d24:	adf4 4654 6576 3a72 2520 2e64 6425 252e     ..TFver: %d.%d.%
   23d34:	2e64 6425 000a 6552 6461 6e69 2067 6c66     d.%d..Reading fl
   23d44:	7361 2068 7461 2520 586c 202c 6425 6220     ash at %lX, %d b
   23d54:	7479 7365 7220 3d63 6425 000a 6f63 6c75     ytes rc=%d..coul
   23d64:	2064 6f6e 2074 6567 2074 626d 6675 2520     d not get mbuf %
   23d74:	0a64 6300 756f 646c 6e20 746f 6720 7465     d..could not get
   23d84:	6820 7264 000a 6f63 6c75 2064 6f6e 2074      hdr..could not 
   23d94:	7263 6165 6574 6d20 7061 000a 6f63 6c75     create map..coul
   23da4:	2064 6f6e 2074 6c63 736f 2065 6f63 746e     d not close cont
   23db4:	6961 656e 0a72 4300 756f 646c 6e20 746f     ainer..Could not
   23dc4:	6320 6e6f 6576 7472 6620 616c 6873 6420      convert flash d
   23dd4:	7461 2061 6f74 6d20 7562 0a66 6200 746f     ata to mbuf..bot
   23de4:	0061 6f62 6174 203a 6572 6573 646e 6e69     a.bota: resendin
   23df4:	2067 6e65 0a64 6200 746f 3a61 7420 6978     g end..bota: txi
   23e04:	206d 6966 696e 6873 6465 000a 6567 7272     m finished..gerr
   23e14:	203a 2527 0a64 2300 6d6e 7267 6f5f 7475     : '%d..#nmgr_out
   23e24:	203a 6372 253d 0a64 6300 6d6f 7570 6574     : rc=%d..compute
   23e34:	2064 6168 6873 203a 7325 000a 2020 6d69     d hash: %s..  im
   23e44:	3a30 2520 0a64 2000 6920 316d 203a 6425     0: %d..  im1: %d
   23e54:	000a 7874 6d69 7400 6978 206d 6c73 746f     ..txim.txim slot
   23e64:	2520 2064 6f74 3020 2578 0a78 7400 7278      %d to 0x%x..txr
   23e74:	7473 6200 6163 7473 6f5f 6174 6320 6d6f     st.bcast_ota com
   23e84:	616d 646e 0073 633c 6568 6b63 7c3e 743c     mands.<check>|<t
   23e94:	6978 3e6d 3c00 6166 695f 3e64 3c00 6461     xim>.<fa_id>.<ad
   23ea4:	7264 203e 733c 6f6c 5f74 6469 202c 2030     dr> <slot_id, 0 
   23eb4:	726f 3120 003e 613c 6464 3e72 7420 2078     or 1>.<addr> tx 
   23ec4:	6572 6573 2074 6d63 0064 0000               reset cmd...

00023ed0 <cmd_bota_help>:
   23ed0:	3e77 0002 3e8a 0002 3edc 0002               w>...>...>..

00023edc <cmd_bota_param>:
   23edc:	2bcb 0002 3e99 0002 3e56 0002 3ea1 0002     .+...>..V>...>..
   23eec:	3e71 0002 3eba 0002 0000 0000 0000 0000     q>...>..........
   23efc:	5245 2052 6f6e 6d20 6d65 000a 5245 2052     ERR no mem..ERR 
   23f0c:	6572 6461 665f 6961 656c 2064 6372 2520     read_failed rc %
   23f1c:	2064 666f 2066 6c25 786c 000a 6f62 6174     d off %llx..bota
   23f2c:	203a 256c 646c 2528 756c 2c29 256f 646c     : l%ld(%lu),o%ld
   23f3c:	732c 6c25 2864 6425 2c29 2565 2c64 2566     ,s%ld(%d),e%d,f%
   23f4c:	6c6c 2878 6c25 786c 2029 6365 253a 646c     llx(%llx) ec:%ld
   23f5c:	000a 5245 2052 6e55 6e6b 776f 206e 6166     ..ERR Unknown fa
   23f6c:	695f 2864 6425 0a29 2300 2323 4e20 7765     _id(%d)..### New
   23f7c:	7520 6c70 616f 3a64 2520 2e64 6425 252e      upload: %d.%d.%
   23f8c:	2e64 6425 000a 2323 2023 7245 7361 6e69     d.%d..### Erasin
   23f9c:	2067 6c66 7361 2068 2323 0a23 2300 2323     g flash ###..###
   23fac:	4320 6e6f 6974 756e 6e69 2067 7075 6f6c      Continuing uplo
   23fbc:	6461 6f20 3a66 2520 2e64 6425 252e 2e64     ad of: %d.%d.%d.
   23fcc:	6425 000a 2323 2323 4120 6c6c 6420 6e6f     %d..#### All don
   23fdc:	2c65 6320 6568 6b63 6e69 2067 6d69 6761     e, checking imag
   23fec:	0a65 2300 2323 2023 6148 6873 2f20 6920     e..#### Hash / i
   23ffc:	616d 6567 6620 6961 656c 0a64 2300 2323     mage failed..###
   2400c:	2023 6148 6873 6f20 2c6b 7320 7465 7020     # Hash ok, set p
   2401c:	7265 3f6d 2520 2064 000a 2323 2323 5720     erm? %d ..#### W
   2402c:	6c69 206c 6f62 746f 6920 746e 206f 656e     ill boot into ne
   2403c:	2077 6d69 6761 2065 7461 6e20 7865 2074     w image at next 
   2404c:	6f62 746f 000a 2323 2323 4920 616d 6567     boot..#### Image
   2405c:	6320 6e6f 6966 6d72 6465 202c 6372 253d      confirmed, rc=%
   2406c:	0a64 0000                                   d...

00024070 <bota_nmgr_handlers>:
   24070:	0000 0000 ec01 0001 0000 0000 e831 0001     ............1...
   24080:	6f6d 6c64 676f 6d5f 7061 6970 676e 705f     modlog_mapping_p
   24090:	6f6f 006c                                   ool.

00024094 <crc8_small_table>:
   24094:	0700 090e 1b1c 1512 3f38 3136 2324 2d2a     ........8?61$#*-

000240a4 <K>:
   240a4:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
   240b4:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
   240c4:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
   240d4:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
   240e4:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
   240f4:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
   24104:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
   24114:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
   24124:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
   24134:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
   24144:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
   24154:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
   24164:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
   24174:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
   24184:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
   24194:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.
   241a4:	0000 0000                                   ....

000241a8 <Zero>:
	...
   241b4:	0000 8000                                   ....

/home/joel/Capstone/uwb-apps/bin/targets/nrng_slave_node3/app/apps/twr_nranges_tdma/twr_nranges_tdma.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 115120	   3744	  17444	 136308	  21474	/home/joel/Capstone/uwb-apps/bin/targets/nrng_slave_node3/app/apps/twr_nranges_tdma/twr_nranges_tdma.elf
